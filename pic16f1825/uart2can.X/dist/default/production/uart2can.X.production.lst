

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 04:55:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	cinit,global,class=CODE,merge=1,delta=2
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    33                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    35                           	psect	text1,local,class=CODE,merge=1,delta=2
    36                           	psect	text2,local,class=CODE,merge=1,delta=2
    37                           	psect	text3,local,class=CODE,merge=1,delta=2
    38                           	psect	text4,local,class=CODE,merge=1,delta=2
    39                           	psect	text5,local,class=CODE,merge=1,delta=2
    40                           	psect	text6,local,class=CODE,merge=1,delta=2
    41                           	psect	text7,local,class=CODE,merge=1,delta=2
    42                           	psect	text8,local,class=CODE,merge=1,delta=2
    43                           	psect	text9,local,class=CODE,merge=1,delta=2
    44                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text11,local,class=CODE,merge=1,delta=2
    46                           	psect	text12,local,class=CODE,merge=1,delta=2
    47                           	psect	text13,local,class=CODE,merge=1,delta=2
    48                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text17,local,class=CODE,merge=1,delta=2
    52                           	psect	text18,local,class=CODE,merge=1,delta=2
    53                           	psect	text19,local,class=CODE,merge=1,delta=2
    54                           	psect	text20,local,class=CODE,merge=1,delta=2
    55                           	psect	text21,local,class=CODE,merge=1,delta=2
    56                           	psect	text22,local,class=CODE,merge=1,delta=2
    57                           	psect	text23,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 1.45
    61                           ; Generated 16/11/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1825 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000E                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  008C                     	;# 
   123  008E                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  010C                     	;# 
   139  010E                     	;# 
   140  0111                     	;# 
   141  0112                     	;# 
   142  0113                     	;# 
   143  0114                     	;# 
   144  0115                     	;# 
   145  0116                     	;# 
   146  0117                     	;# 
   147  0118                     	;# 
   148  0119                     	;# 
   149  011A                     	;# 
   150  011B                     	;# 
   151  011D                     	;# 
   152  011E                     	;# 
   153  018C                     	;# 
   154  018E                     	;# 
   155  0191                     	;# 
   156  0191                     	;# 
   157  0192                     	;# 
   158  0193                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0194                     	;# 
   162  0195                     	;# 
   163  0196                     	;# 
   164  0199                     	;# 
   165  019A                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019E                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0216                     	;# 
   186  0216                     	;# 
   187  0217                     	;# 
   188  0217                     	;# 
   189  0291                     	;# 
   190  0291                     	;# 
   191  0292                     	;# 
   192  0293                     	;# 
   193  0294                     	;# 
   194  0295                     	;# 
   195  0295                     	;# 
   196  0296                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029B                     	;# 
   202  029C                     	;# 
   203  029D                     	;# 
   204  029E                     	;# 
   205  0311                     	;# 
   206  0311                     	;# 
   207  0312                     	;# 
   208  0313                     	;# 
   209  0318                     	;# 
   210  0318                     	;# 
   211  0319                     	;# 
   212  031A                     	;# 
   213  038C                     	;# 
   214  038E                     	;# 
   215  0391                     	;# 
   216  0392                     	;# 
   217  0393                     	;# 
   218  039A                     	;# 
   219  039C                     	;# 
   220  039D                     	;# 
   221  039E                     	;# 
   222  039F                     	;# 
   223  0415                     	;# 
   224  0416                     	;# 
   225  0417                     	;# 
   226  041C                     	;# 
   227  041D                     	;# 
   228  041E                     	;# 
   229  0FE4                     	;# 
   230  0FE5                     	;# 
   231  0FE6                     	;# 
   232  0FE7                     	;# 
   233  0FE8                     	;# 
   234  0FE9                     	;# 
   235  0FEA                     	;# 
   236  0FEB                     	;# 
   237  0FED                     	;# 
   238  0FEE                     	;# 
   239  0FEF                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000E                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0016                     	;# 
   260  0017                     	;# 
   261  0018                     	;# 
   262  0019                     	;# 
   263  001A                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  008C                     	;# 
   269  008E                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  010C                     	;# 
   285  010E                     	;# 
   286  0111                     	;# 
   287  0112                     	;# 
   288  0113                     	;# 
   289  0114                     	;# 
   290  0115                     	;# 
   291  0116                     	;# 
   292  0117                     	;# 
   293  0118                     	;# 
   294  0119                     	;# 
   295  011A                     	;# 
   296  011B                     	;# 
   297  011D                     	;# 
   298  011E                     	;# 
   299  018C                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019D                     	;# 
   316  019E                     	;# 
   317  019F                     	;# 
   318  020C                     	;# 
   319  020E                     	;# 
   320  0211                     	;# 
   321  0211                     	;# 
   322  0212                     	;# 
   323  0212                     	;# 
   324  0213                     	;# 
   325  0213                     	;# 
   326  0214                     	;# 
   327  0214                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0216                     	;# 
   333  0217                     	;# 
   334  0217                     	;# 
   335  0291                     	;# 
   336  0291                     	;# 
   337  0292                     	;# 
   338  0293                     	;# 
   339  0294                     	;# 
   340  0295                     	;# 
   341  0295                     	;# 
   342  0296                     	;# 
   343  0298                     	;# 
   344  0298                     	;# 
   345  0299                     	;# 
   346  029A                     	;# 
   347  029B                     	;# 
   348  029C                     	;# 
   349  029D                     	;# 
   350  029E                     	;# 
   351  0311                     	;# 
   352  0311                     	;# 
   353  0312                     	;# 
   354  0313                     	;# 
   355  0318                     	;# 
   356  0318                     	;# 
   357  0319                     	;# 
   358  031A                     	;# 
   359  038C                     	;# 
   360  038E                     	;# 
   361  0391                     	;# 
   362  0392                     	;# 
   363  0393                     	;# 
   364  039A                     	;# 
   365  039C                     	;# 
   366  039D                     	;# 
   367  039E                     	;# 
   368  039F                     	;# 
   369  0415                     	;# 
   370  0416                     	;# 
   371  0417                     	;# 
   372  041C                     	;# 
   373  041D                     	;# 
   374  041E                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001E                     	;# 
   413  001F                     	;# 
   414  008C                     	;# 
   415  008E                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0093                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0098                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011A                     	;# 
   442  011B                     	;# 
   443  011D                     	;# 
   444  011E                     	;# 
   445  018C                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0193                     	;# 
   453  0194                     	;# 
   454  0195                     	;# 
   455  0196                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019D                     	;# 
   462  019E                     	;# 
   463  019F                     	;# 
   464  020C                     	;# 
   465  020E                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0216                     	;# 
   478  0216                     	;# 
   479  0217                     	;# 
   480  0217                     	;# 
   481  0291                     	;# 
   482  0291                     	;# 
   483  0292                     	;# 
   484  0293                     	;# 
   485  0294                     	;# 
   486  0295                     	;# 
   487  0295                     	;# 
   488  0296                     	;# 
   489  0298                     	;# 
   490  0298                     	;# 
   491  0299                     	;# 
   492  029A                     	;# 
   493  029B                     	;# 
   494  029C                     	;# 
   495  029D                     	;# 
   496  029E                     	;# 
   497  0311                     	;# 
   498  0311                     	;# 
   499  0312                     	;# 
   500  0313                     	;# 
   501  0318                     	;# 
   502  0318                     	;# 
   503  0319                     	;# 
   504  031A                     	;# 
   505  038C                     	;# 
   506  038E                     	;# 
   507  0391                     	;# 
   508  0392                     	;# 
   509  0393                     	;# 
   510  039A                     	;# 
   511  039C                     	;# 
   512  039D                     	;# 
   513  039E                     	;# 
   514  039F                     	;# 
   515  0415                     	;# 
   516  0416                     	;# 
   517  0417                     	;# 
   518  041C                     	;# 
   519  041D                     	;# 
   520  041E                     	;# 
   521  0FE4                     	;# 
   522  0FE5                     	;# 
   523  0FE6                     	;# 
   524  0FE7                     	;# 
   525  0FE8                     	;# 
   526  0FE9                     	;# 
   527  0FEA                     	;# 
   528  0FEB                     	;# 
   529  0FED                     	;# 
   530  0FEE                     	;# 
   531  0FEF                     	;# 
   532  0000                     	;# 
   533  0001                     	;# 
   534  0002                     	;# 
   535  0003                     	;# 
   536  0004                     	;# 
   537  0005                     	;# 
   538  0006                     	;# 
   539  0007                     	;# 
   540  0008                     	;# 
   541  0009                     	;# 
   542  000A                     	;# 
   543  000B                     	;# 
   544  000C                     	;# 
   545  000E                     	;# 
   546  0011                     	;# 
   547  0012                     	;# 
   548  0013                     	;# 
   549  0015                     	;# 
   550  0016                     	;# 
   551  0016                     	;# 
   552  0017                     	;# 
   553  0018                     	;# 
   554  0019                     	;# 
   555  001A                     	;# 
   556  001B                     	;# 
   557  001C                     	;# 
   558  001E                     	;# 
   559  001F                     	;# 
   560  008C                     	;# 
   561  008E                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0093                     	;# 
   565  0095                     	;# 
   566  0096                     	;# 
   567  0097                     	;# 
   568  0098                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009B                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  010C                     	;# 
   577  010E                     	;# 
   578  0111                     	;# 
   579  0112                     	;# 
   580  0113                     	;# 
   581  0114                     	;# 
   582  0115                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  0118                     	;# 
   586  0119                     	;# 
   587  011A                     	;# 
   588  011B                     	;# 
   589  011D                     	;# 
   590  011E                     	;# 
   591  018C                     	;# 
   592  018E                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0194                     	;# 
   600  0195                     	;# 
   601  0196                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019C                     	;# 
   607  019D                     	;# 
   608  019E                     	;# 
   609  019F                     	;# 
   610  020C                     	;# 
   611  020E                     	;# 
   612  0211                     	;# 
   613  0211                     	;# 
   614  0212                     	;# 
   615  0212                     	;# 
   616  0213                     	;# 
   617  0213                     	;# 
   618  0214                     	;# 
   619  0214                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0291                     	;# 
   628  0291                     	;# 
   629  0292                     	;# 
   630  0293                     	;# 
   631  0294                     	;# 
   632  0295                     	;# 
   633  0295                     	;# 
   634  0296                     	;# 
   635  0298                     	;# 
   636  0298                     	;# 
   637  0299                     	;# 
   638  029A                     	;# 
   639  029B                     	;# 
   640  029C                     	;# 
   641  029D                     	;# 
   642  029E                     	;# 
   643  0311                     	;# 
   644  0311                     	;# 
   645  0312                     	;# 
   646  0313                     	;# 
   647  0318                     	;# 
   648  0318                     	;# 
   649  0319                     	;# 
   650  031A                     	;# 
   651  038C                     	;# 
   652  038E                     	;# 
   653  0391                     	;# 
   654  0392                     	;# 
   655  0393                     	;# 
   656  039A                     	;# 
   657  039C                     	;# 
   658  039D                     	;# 
   659  039E                     	;# 
   660  039F                     	;# 
   661  0415                     	;# 
   662  0416                     	;# 
   663  0417                     	;# 
   664  041C                     	;# 
   665  041D                     	;# 
   666  041E                     	;# 
   667  0FE4                     	;# 
   668  0FE5                     	;# 
   669  0FE6                     	;# 
   670  0FE7                     	;# 
   671  0FE8                     	;# 
   672  0FE9                     	;# 
   673  0FEA                     	;# 
   674  0FEB                     	;# 
   675  0FED                     	;# 
   676  0FEE                     	;# 
   677  0FEF                     	;# 
   678  0000                     	;# 
   679  0001                     	;# 
   680  0002                     	;# 
   681  0003                     	;# 
   682  0004                     	;# 
   683  0005                     	;# 
   684  0006                     	;# 
   685  0007                     	;# 
   686  0008                     	;# 
   687  0009                     	;# 
   688  000A                     	;# 
   689  000B                     	;# 
   690  000C                     	;# 
   691  000E                     	;# 
   692  0011                     	;# 
   693  0012                     	;# 
   694  0013                     	;# 
   695  0015                     	;# 
   696  0016                     	;# 
   697  0016                     	;# 
   698  0017                     	;# 
   699  0018                     	;# 
   700  0019                     	;# 
   701  001A                     	;# 
   702  001B                     	;# 
   703  001C                     	;# 
   704  001E                     	;# 
   705  001F                     	;# 
   706  008C                     	;# 
   707  008E                     	;# 
   708  0091                     	;# 
   709  0092                     	;# 
   710  0093                     	;# 
   711  0095                     	;# 
   712  0096                     	;# 
   713  0097                     	;# 
   714  0098                     	;# 
   715  0099                     	;# 
   716  009A                     	;# 
   717  009B                     	;# 
   718  009B                     	;# 
   719  009C                     	;# 
   720  009D                     	;# 
   721  009E                     	;# 
   722  010C                     	;# 
   723  010E                     	;# 
   724  0111                     	;# 
   725  0112                     	;# 
   726  0113                     	;# 
   727  0114                     	;# 
   728  0115                     	;# 
   729  0116                     	;# 
   730  0117                     	;# 
   731  0118                     	;# 
   732  0119                     	;# 
   733  011A                     	;# 
   734  011B                     	;# 
   735  011D                     	;# 
   736  011E                     	;# 
   737  018C                     	;# 
   738  018E                     	;# 
   739  0191                     	;# 
   740  0191                     	;# 
   741  0192                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0193                     	;# 
   745  0194                     	;# 
   746  0195                     	;# 
   747  0196                     	;# 
   748  0199                     	;# 
   749  019A                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019C                     	;# 
   753  019D                     	;# 
   754  019E                     	;# 
   755  019F                     	;# 
   756  020C                     	;# 
   757  020E                     	;# 
   758  0211                     	;# 
   759  0211                     	;# 
   760  0212                     	;# 
   761  0212                     	;# 
   762  0213                     	;# 
   763  0213                     	;# 
   764  0214                     	;# 
   765  0214                     	;# 
   766  0215                     	;# 
   767  0215                     	;# 
   768  0215                     	;# 
   769  0216                     	;# 
   770  0216                     	;# 
   771  0217                     	;# 
   772  0217                     	;# 
   773  0291                     	;# 
   774  0291                     	;# 
   775  0292                     	;# 
   776  0293                     	;# 
   777  0294                     	;# 
   778  0295                     	;# 
   779  0295                     	;# 
   780  0296                     	;# 
   781  0298                     	;# 
   782  0298                     	;# 
   783  0299                     	;# 
   784  029A                     	;# 
   785  029B                     	;# 
   786  029C                     	;# 
   787  029D                     	;# 
   788  029E                     	;# 
   789  0311                     	;# 
   790  0311                     	;# 
   791  0312                     	;# 
   792  0313                     	;# 
   793  0318                     	;# 
   794  0318                     	;# 
   795  0319                     	;# 
   796  031A                     	;# 
   797  038C                     	;# 
   798  038E                     	;# 
   799  0391                     	;# 
   800  0392                     	;# 
   801  0393                     	;# 
   802  039A                     	;# 
   803  039C                     	;# 
   804  039D                     	;# 
   805  039E                     	;# 
   806  039F                     	;# 
   807  0415                     	;# 
   808  0416                     	;# 
   809  0417                     	;# 
   810  041C                     	;# 
   811  041D                     	;# 
   812  041E                     	;# 
   813  0FE4                     	;# 
   814  0FE5                     	;# 
   815  0FE6                     	;# 
   816  0FE7                     	;# 
   817  0FE8                     	;# 
   818  0FE9                     	;# 
   819  0FEA                     	;# 
   820  0FEB                     	;# 
   821  0FED                     	;# 
   822  0FEE                     	;# 
   823  0FEF                     	;# 
   824                           
   825                           	psect	idataBANK0
   826  01E1                     __pidataBANK0:	
   827                           
   828                           ;initializer for can_send@F2953
   829  01E1  3403               	retlw	3
   830  01E2  3432               	retlw	50
   831  01E3  3400               	retlw	0
   832                           
   833                           ;initializer for can_send@F2952
   834  01E4  3403               	retlw	3
   835  01E5  3431               	retlw	49
   836  01E6  3400               	retlw	0
   837                           
   838                           ;initializer for can_start@F2930
   839  01E7  3402               	retlw	2
   840  01E8  340F               	retlw	15
   841  01E9  3440               	retlw	64
   842                           
   843                           ;initializer for can_status_check@F2958
   844  01EA  34A0               	retlw	160
   845  01EB  3400               	retlw	0
   846                           
   847                           	psect	stringtext1
   848  0902                     __pstringtext1:	
   849  0902                     _hexpowers:	
   850  0902  3401               	retlw	1
   851  0903  3400               	retlw	0
   852  0904  3410               	retlw	16
   853  0905  3400               	retlw	0
   854  0906  3400               	retlw	0
   855  0907  3401               	retlw	1
   856  0908  3400               	retlw	0
   857  0909  3410               	retlw	16
   858  090A                     __end_of_hexpowers:	
   859                           
   860                           	psect	stringtext2
   861  0911                     __pstringtext2:	
   862  0911                     _abc:	
   863  0911  3400               	retlw	0
   864  0912  3402               	retlw	2
   865  0913  3404               	retlw	4
   866  0914                     __end_of_abc:	
   867                           
   868                           	psect	stringtext3
   869  0917                     __pstringtext3:	
   870  0917                     _nm:	
   871  0917  3400               	retlw	0
   872  0918  3402               	retlw	2
   873  0919                     __end_of_nm:	
   874                           
   875                           	psect	stringtext4
   876  0800                     __pstringtext4:	
   877  0800                     _max_char:	
   878  0800  3408               	retlw	8
   879  0801                     __end_of_max_char:	
   880  0011                     _PIR1bits	set	17
   881  0095                     _OPTION_REGbits	set	149
   882  008E                     _TRISC	set	142
   883  008C                     _TRISA	set	140
   884  0097                     _WDTCON	set	151
   885  0098                     _OSCTUNE	set	152
   886  0099                     _OSCCON	set	153
   887  010C                     _LATAbits	set	268
   888  011D                     _APFCON0	set	285
   889  011E                     _APFCON1	set	286
   890  010E                     _LATC	set	270
   891  010C                     _LATA	set	268
   892  0116                     _BORCON	set	278
   893  018C                     _ANSELA	set	396
   894  018E                     _ANSELC	set	398
   895  019A                     _TXREG	set	410
   896  0199                     _RCREG	set	409
   897  019D                     _RCSTAbits	set	413
   898  019C                     _SPBRGH	set	412
   899  019B                     _SPBRGL	set	411
   900  019E                     _TXSTA	set	414
   901  019D                     _RCSTA	set	413
   902  019F                     _BAUDCON	set	415
   903  0214                     _SSP1STATbits	set	532
   904  0211                     _SSP1BUF	set	529
   905  0215                     _SSP1CON1bits	set	533
   906  0212                     _SSP1ADD	set	530
   907  0215                     _SSP1CON1	set	533
   908  0214                     _SSP1STAT	set	532
   909  020E                     _WPUC	set	526
   910  020C                     _WPUA	set	524
   911  0801                     STR_17:	
   912  0801  340A               	retlw	10
   913  0802  3455               	retlw	85	;'U'
   914  0803  346E               	retlw	110	;'n'
   915  0804  3461               	retlw	97	;'a'
   916  0805  3462               	retlw	98	;'b'
   917  0806  346C               	retlw	108	;'l'
   918  0807  3465               	retlw	101	;'e'
   919  0808  3420               	retlw	32	;' '
   920  0809  3474               	retlw	116	;'t'
   921  080A  346F               	retlw	111	;'o'
   922  080B  3420               	retlw	32	;' '
   923  080C  3473               	retlw	115	;'s'
   924  080D  3465               	retlw	101	;'e'
   925  080E  346E               	retlw	110	;'n'
   926  080F  3464               	retlw	100	;'d'
   927  0810  3420               	retlw	32	;' '
   928  0811  346D               	retlw	109	;'m'
   929  0812  3465               	retlw	101	;'e'
   930  0813  3473               	retlw	115	;'s'
   931  0814  3473               	retlw	115	;'s'
   932  0815  3461               	retlw	97	;'a'
   933  0816  3467               	retlw	103	;'g'
   934  0817  3465               	retlw	101	;'e'
   935  0818  340A               	retlw	10
   936  0819  3400               	retlw	0
   937                           
   938                           	psect	stringtext5
   939  081A                     __pstringtext5:	
   940  081A                     STR_7:	
   941  081A  344D               	retlw	77	;'M'
   942  081B  3465               	retlw	101	;'e'
   943  081C  3473               	retlw	115	;'s'
   944  081D  3473               	retlw	115	;'s'
   945  081E  3461               	retlw	97	;'a'
   946  081F  3467               	retlw	103	;'g'
   947  0820  3465               	retlw	101	;'e'
   948  0821  3420               	retlw	32	;' '
   949  0822  3472               	retlw	114	;'r'
   950  0823  3465               	retlw	101	;'e'
   951  0824  3463               	retlw	99	;'c'
   952  0825  3465               	retlw	101	;'e'
   953  0826  3469               	retlw	105	;'i'
   954  0827  3476               	retlw	118	;'v'
   955  0828  3465               	retlw	101	;'e'
   956  0829  3464               	retlw	100	;'d'
   957  082A  343A               	retlw	58	;':'
   958  082B  3420               	retlw	32	;' '
   959  082C  3425               	retlw	37	;'%'
   960  082D  3473               	retlw	115	;'s'
   961  082E  340A               	retlw	10
   962  082F  3400               	retlw	0
   963                           
   964                           	psect	stringtext6
   965  0830                     __pstringtext6:	
   966  0830                     STR_8:	
   967  0830  3443               	retlw	67	;'C'
   968  0831  346F               	retlw	111	;'o'
   969  0832  3470               	retlw	112	;'p'
   970  0833  3479               	retlw	121	;'y'
   971  0834  3469               	retlw	105	;'i'
   972  0835  346E               	retlw	110	;'n'
   973  0836  3467               	retlw	103	;'g'
   974  0837  3420               	retlw	32	;' '
   975  0838  3462               	retlw	98	;'b'
   976  0839  3475               	retlw	117	;'u'
   977  083A  3466               	retlw	102	;'f'
   978  083B  3466               	retlw	102	;'f'
   979  083C  3465               	retlw	101	;'e'
   980  083D  3472               	retlw	114	;'r'
   981  083E  343A               	retlw	58	;':'
   982  083F  3420               	retlw	32	;' '
   983  0840  3425               	retlw	37	;'%'
   984  0841  3463               	retlw	99	;'c'
   985  0842  340A               	retlw	10
   986  0843  3400               	retlw	0
   987                           
   988                           	psect	stringtext7
   989  0844                     __pstringtext7:	
   990  0844                     STR_1:	
   991  0844  3453               	retlw	83	;'S'
   992  0845  3449               	retlw	73	;'I'
   993  0846  3444               	retlw	68	;'D'
   994  0847  3420               	retlw	32	;' '
   995  0848  3473               	retlw	115	;'s'
   996  0849  3465               	retlw	101	;'e'
   997  084A  3474               	retlw	116	;'t'
   998  084B  343A               	retlw	58	;':'
   999  084C  3420               	retlw	32	;' '
  1000  084D  3425               	retlw	37	;'%'
  1001  084E  3430               	retlw	48	;'0'
  1002  084F  3432               	retlw	50	;'2'
  1003  0850  3478               	retlw	120	;'x'
  1004  0851  3420               	retlw	32	;' '
  1005  0852  3425               	retlw	37	;'%'
  1006  0853  3430               	retlw	48	;'0'
  1007  0854  3432               	retlw	50	;'2'
  1008  0855  3478               	retlw	120	;'x'
  1009  0856  340A               	retlw	10
  1010  0857  3400               	retlw	0
  1011                           
  1012                           	psect	stringtext8
  1013  0858                     __pstringtext8:	
  1014  0858                     STR_16:	
  1015  0858  340A               	retlw	10
  1016  0859  344D               	retlw	77	;'M'
  1017  085A  3465               	retlw	101	;'e'
  1018  085B  3473               	retlw	115	;'s'
  1019  085C  3473               	retlw	115	;'s'
  1020  085D  3461               	retlw	97	;'a'
  1021  085E  3467               	retlw	103	;'g'
  1022  085F  3465               	retlw	101	;'e'
  1023  0860  3420               	retlw	32	;' '
  1024  0861  3473               	retlw	115	;'s'
  1025  0862  3465               	retlw	101	;'e'
  1026  0863  346E               	retlw	110	;'n'
  1027  0864  3474               	retlw	116	;'t'
  1028  0865  343A               	retlw	58	;':'
  1029  0866  3420               	retlw	32	;' '
  1030  0867  3425               	retlw	37	;'%'
  1031  0868  3473               	retlw	115	;'s'
  1032  0869  340A               	retlw	10
  1033  086A  3400               	retlw	0
  1034                           
  1035                           	psect	stringtext9
  1036  086B                     __pstringtext9:	
  1037  086B                     STR_19:	
  1038  086B  3430               	retlw	48	;'0'
  1039  086C  3431               	retlw	49	;'1'
  1040  086D  3432               	retlw	50	;'2'
  1041  086E  3433               	retlw	51	;'3'
  1042  086F  3434               	retlw	52	;'4'
  1043  0870  3435               	retlw	53	;'5'
  1044  0871  3436               	retlw	54	;'6'
  1045  0872  3437               	retlw	55	;'7'
  1046  0873  3438               	retlw	56	;'8'
  1047  0874  3439               	retlw	57	;'9'
  1048  0875  3461               	retlw	97	;'a'
  1049  0876  3462               	retlw	98	;'b'
  1050  0877  3463               	retlw	99	;'c'
  1051  0878  3464               	retlw	100	;'d'
  1052  0879  3465               	retlw	101	;'e'
  1053  087A  3466               	retlw	102	;'f'
  1054  087B  3400               	retlw	0
  1055                           
  1056                           	psect	stringtext10
  1057  087C                     __pstringtext10:	
  1058  087C                     STR_3:	
  1059  087C  3452               	retlw	82	;'R'
  1060  087D  3458               	retlw	88	;'X'
  1061  087E  3442               	retlw	66	;'B'
  1062  087F  3430               	retlw	48	;'0'
  1063  0880  3453               	retlw	83	;'S'
  1064  0881  3449               	retlw	73	;'I'
  1065  0882  3444               	retlw	68	;'D'
  1066  0883  3448               	retlw	72	;'H'
  1067  0884  343A               	retlw	58	;':'
  1068  0885  3420               	retlw	32	;' '
  1069  0886  3425               	retlw	37	;'%'
  1070  0887  3430               	retlw	48	;'0'
  1071  0888  3432               	retlw	50	;'2'
  1072  0889  3478               	retlw	120	;'x'
  1073  088A  340A               	retlw	10
  1074  088B  3400               	retlw	0
  1075                           
  1076                           	psect	stringtext11
  1077  088C                     __pstringtext11:	
  1078  088C                     STR_9:	
  1079  088C  3454               	retlw	84	;'T'
  1080  088D  3458               	retlw	88	;'X'
  1081  088E  3442               	retlw	66	;'B'
  1082  088F  3430               	retlw	48	;'0'
  1083  0890  3453               	retlw	83	;'S'
  1084  0891  3449               	retlw	73	;'I'
  1085  0892  3444               	retlw	68	;'D'
  1086  0893  3448               	retlw	72	;'H'
  1087  0894  343A               	retlw	58	;':'
  1088  0895  3420               	retlw	32	;' '
  1089  0896  3425               	retlw	37	;'%'
  1090  0897  3430               	retlw	48	;'0'
  1091  0898  3432               	retlw	50	;'2'
  1092  0899  3478               	retlw	120	;'x'
  1093  089A  340A               	retlw	10
  1094  089B  3400               	retlw	0
  1095                           
  1096                           	psect	stringtext12
  1097  089C                     __pstringtext12:	
  1098  089C                     STR_4:	
  1099  089C  3452               	retlw	82	;'R'
  1100  089D  3458               	retlw	88	;'X'
  1101  089E  3442               	retlw	66	;'B'
  1102  089F  3430               	retlw	48	;'0'
  1103  08A0  3453               	retlw	83	;'S'
  1104  08A1  3449               	retlw	73	;'I'
  1105  08A2  3444               	retlw	68	;'D'
  1106  08A3  344C               	retlw	76	;'L'
  1107  08A4  343A               	retlw	58	;':'
  1108  08A5  3420               	retlw	32	;' '
  1109  08A6  3425               	retlw	37	;'%'
  1110  08A7  3430               	retlw	48	;'0'
  1111  08A8  3432               	retlw	50	;'2'
  1112  08A9  3478               	retlw	120	;'x'
  1113  08AA  340A               	retlw	10
  1114  08AB  3400               	retlw	0
  1115                           
  1116                           	psect	stringtext13
  1117  08AC                     __pstringtext13:	
  1118  08AC                     STR_10:	
  1119  08AC  3454               	retlw	84	;'T'
  1120  08AD  3458               	retlw	88	;'X'
  1121  08AE  3442               	retlw	66	;'B'
  1122  08AF  3430               	retlw	48	;'0'
  1123  08B0  3453               	retlw	83	;'S'
  1124  08B1  3449               	retlw	73	;'I'
  1125  08B2  3444               	retlw	68	;'D'
  1126  08B3  344C               	retlw	76	;'L'
  1127  08B4  343A               	retlw	58	;':'
  1128  08B5  3420               	retlw	32	;' '
  1129  08B6  3425               	retlw	37	;'%'
  1130  08B7  3430               	retlw	48	;'0'
  1131  08B8  3432               	retlw	50	;'2'
  1132  08B9  3478               	retlw	120	;'x'
  1133  08BA  340A               	retlw	10
  1134  08BB  3400               	retlw	0
  1135                           
  1136                           	psect	stringtext14
  1137  08BC                     __pstringtext14:	
  1138  08BC                     STR_5:	
  1139  08BC  3452               	retlw	82	;'R'
  1140  08BD  3458               	retlw	88	;'X'
  1141  08BE  3442               	retlw	66	;'B'
  1142  08BF  3430               	retlw	48	;'0'
  1143  08C0  3444               	retlw	68	;'D'
  1144  08C1  344C               	retlw	76	;'L'
  1145  08C2  3443               	retlw	67	;'C'
  1146  08C3  343A               	retlw	58	;':'
  1147  08C4  3420               	retlw	32	;' '
  1148  08C5  3425               	retlw	37	;'%'
  1149  08C6  3430               	retlw	48	;'0'
  1150  08C7  3432               	retlw	50	;'2'
  1151  08C8  3478               	retlw	120	;'x'
  1152  08C9  340A               	retlw	10
  1153  08CA  3400               	retlw	0
  1154                           
  1155                           	psect	stringtext15
  1156  08CB                     __pstringtext15:	
  1157  08CB                     STR_2:	
  1158  08CB  3443               	retlw	67	;'C'
  1159  08CC  3441               	retlw	65	;'A'
  1160  08CD  344E               	retlw	78	;'N'
  1161  08CE  3453               	retlw	83	;'S'
  1162  08CF  3454               	retlw	84	;'T'
  1163  08D0  3441               	retlw	65	;'A'
  1164  08D1  3454               	retlw	84	;'T'
  1165  08D2  343A               	retlw	58	;':'
  1166  08D3  3420               	retlw	32	;' '
  1167  08D4  3425               	retlw	37	;'%'
  1168  08D5  3430               	retlw	48	;'0'
  1169  08D6  3432               	retlw	50	;'2'
  1170  08D7  3478               	retlw	120	;'x'
  1171  08D8  340A               	retlw	10
  1172  08D9  3400               	retlw	0
  1173                           
  1174                           	psect	stringtext16
  1175  08DA                     __pstringtext16:	
  1176  08DA                     STR_6:	
  1177  08DA  3452               	retlw	82	;'R'
  1178  08DB  3458               	retlw	88	;'X'
  1179  08DC  3442               	retlw	66	;'B'
  1180  08DD  3430               	retlw	48	;'0'
  1181  08DE  3444               	retlw	68	;'D'
  1182  08DF  3430               	retlw	48	;'0'
  1183  08E0  343A               	retlw	58	;':'
  1184  08E1  3420               	retlw	32	;' '
  1185  08E2  3425               	retlw	37	;'%'
  1186  08E3  3430               	retlw	48	;'0'
  1187  08E4  3432               	retlw	50	;'2'
  1188  08E5  3478               	retlw	120	;'x'
  1189  08E6  340A               	retlw	10
  1190  08E7  3400               	retlw	0
  1191                           
  1192                           	psect	stringtext17
  1193  08E8                     __pstringtext17:	
  1194  08E8                     STR_11:	
  1195  08E8  3452               	retlw	82	;'R'
  1196  08E9  3458               	retlw	88	;'X'
  1197  08EA  3430               	retlw	48	;'0'
  1198  08EB  3449               	retlw	73	;'I'
  1199  08EC  3446               	retlw	70	;'F'
  1200  08ED  3420               	retlw	32	;' '
  1201  08EE  3469               	retlw	105	;'i'
  1202  08EF  3473               	retlw	115	;'s'
  1203  08F0  3420               	retlw	32	;' '
  1204  08F1  346F               	retlw	111	;'o'
  1205  08F2  346E               	retlw	110	;'n'
  1206  08F3  340A               	retlw	10
  1207  08F4  3400               	retlw	0
  1208                           
  1209                           	psect	stringtext18
  1210  08F5                     __pstringtext18:	
  1211  08F5                     STR_12:	
  1212  08F5  3452               	retlw	82	;'R'
  1213  08F6  3458               	retlw	88	;'X'
  1214  08F7  3431               	retlw	49	;'1'
  1215  08F8  3449               	retlw	73	;'I'
  1216  08F9  3446               	retlw	70	;'F'
  1217  08FA  3420               	retlw	32	;' '
  1218  08FB  3469               	retlw	105	;'i'
  1219  08FC  3473               	retlw	115	;'s'
  1220  08FD  3420               	retlw	32	;' '
  1221  08FE  346F               	retlw	111	;'o'
  1222  08FF  346E               	retlw	110	;'n'
  1223  0900  340A               	retlw	10
  1224  0901  3400               	retlw	0
  1225                           
  1226                           	psect	stringtext19
  1227  090A                     __pstringtext19:	
  1228  090A                     STR_18:	
  1229  090A  3428               	retlw	40	;'('
  1230  090B  346E               	retlw	110	;'n'
  1231  090C  3475               	retlw	117	;'u'
  1232  090D  346C               	retlw	108	;'l'
  1233  090E  346C               	retlw	108	;'l'
  1234  090F  3429               	retlw	41	;')'
  1235  0910  3400               	retlw	0
  1236                           
  1237                           	psect	stringtext20
  1238  0914                     __pstringtext20:	
  1239  0914                     STR_13:	
  1240  0914  3425               	retlw	37	;'%'
  1241  0915  3463               	retlw	99	;'c'
  1242  0916  3400               	retlw	0
  1243                           
  1244                           	psect	stringtext21
  1245  0000                     __pstringtext21:	
  1246  0802                     
  1247                           ; #config settings
  1248  0000                     
  1249                           	psect	cinit
  1250  07E2                     start_initialization:	
  1251  07E2                     __initialization:	
  1252                           
  1253                           ; Initialize objects allocated to BANK0
  1254  07E2  30E1               	movlw	low __pidataBANK0
  1255  07E3  0084               	movwf	4
  1256  07E4  3081               	movlw	(high __pidataBANK0)| (0+128)
  1257  07E5  0085               	movwf	5
  1258  07E6  3058               	movlw	low __pdataBANK0
  1259  07E7  0086               	movwf	6
  1260  07E8  3000               	movlw	high __pdataBANK0
  1261  07E9  0087               	movwf	7
  1262  07EA  300B               	movlw	11
  1263  07EB  3181  21A7  3187   	fcall	init_ram
  1264                           
  1265                           ; Clear objects allocated to BANK0
  1266  07EE  304B               	movlw	low __pbssBANK0
  1267  07EF  0084               	movwf	4
  1268  07F0  3000               	movlw	high __pbssBANK0
  1269  07F1  0085               	movwf	5
  1270  07F2  300D               	movlw	13
  1271  07F3  3181  21A1  3187   	fcall	clear_ram0
  1272                           
  1273                           ; Clear objects allocated to BANK1
  1274  07F6  30A0               	movlw	low __pbssBANK1
  1275  07F7  0084               	movwf	4
  1276  07F8  3000               	movlw	high __pbssBANK1
  1277  07F9  0085               	movwf	5
  1278  07FA  301D               	movlw	29
  1279  07FB  3181  21A1         	fcall	clear_ram0
  1280  07FD                     end_of_initialization:	
  1281                           ;End of C runtime variable initialization code
  1282                           
  1283  07FD                     __end_of__initialization:	
  1284  07FD  0020               	movlb	0
  1285  07FE  3184  2CCB         	ljmp	_main	;jump to C main() function
  1286                           
  1287                           	psect	bssBANK0
  1288  004B                     __pbssBANK0:	
  1289  004B                     _sid:	
  1290  004B                     	ds	2
  1291  004D                     _cnt:	
  1292  004D                     	ds	1
  1293  004E                     _c:	
  1294  004E                     	ds	1
  1295  004F                     _buf:	
  1296  004F                     	ds	9
  1297                           
  1298                           	psect	dataBANK0
  1299  0058                     __pdataBANK0:	
  1300  0058                     can_send@F2953:	
  1301  0058                     	ds	3
  1302  005B                     can_send@F2952:	
  1303  005B                     	ds	3
  1304  005E                     can_start@F2930:	
  1305  005E                     	ds	3
  1306  0061                     can_status_check@F2958:	
  1307  0061                     	ds	2
  1308                           
  1309                           	psect	bssBANK1
  1310  00A0                     __pbssBANK1:	
  1311  00A0                     _rx_buf:	
  1312  00A0                     	ds	15
  1313  00AF                     _tx_buf:	
  1314  00AF                     	ds	14
  1315                           
  1316                           	psect	inittext
  1317  01A7                     init_ram:	
  1318  01A7  00FE               	movwf	126
  1319  01A8                     initloop:	
  1320  01A8  0012               	moviw fsr0++
  1321  01A9  001E               	movwi fsr1++
  1322  01AA  0BFE               	decfsz	126,f
  1323  01AB  29A8               	goto	initloop
  1324  01AC  3400               	retlw	0
  1325                           
  1326                           	psect	clrtext
  1327  01A1                     clear_ram0:	
  1328                           ;	Called with FSR0 containing the base address, and
  1329                           ;	WREG with the size to clear
  1330                           
  1331  01A1  0064               	clrwdt	;clear the watchdog before getting into this loop
  1332  01A2                     clrloop0:	
  1333  01A2  0180               	clrf	0	;clear RAM location pointed to by FSR
  1334  01A3  3101               	addfsr 0,1
  1335  01A4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1336  01A5  29A2               	goto	clrloop0	;have we reached the end yet?
  1337  01A6  3400               	retlw	0	;all done for this memory range, return
  1338                           
  1339                           	psect	cstackCOMMON
  1340  0070                     __pcstackCOMMON:	
  1341  0070                     ?_isdigit:	
  1342  0070                     ?_PIN_MANAGER_Initialize:	
  1343                           ; 1 bit 
  1344                           
  1345  0070                     ??_PIN_MANAGER_Initialize:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0070                     ?_OSCILLATOR_Initialize:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     ??_OSCILLATOR_Initialize:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0070                     ?_WDT_Initialize:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0070                     ??_WDT_Initialize:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0070                     ?_SPI_Initialize:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0070                     ??_SPI_Initialize:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0070                     ?_EUSART_Initialize:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369  0070                     ??_EUSART_Initialize:	
  1370                           ; 1 bytes @ 0x0
  1371                           
  1372  0070                     ??_isdigit:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     ?_SYSTEM_Initialize:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  0070                     ??_SYSTEM_Initialize:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  0070                     ?_EUSART_Read:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  0070                     ??_EUSART_Read:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  0070                     ?_EUSART_Write:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0070                     ??_EUSART_Write:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0070                     ?_putch:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0070                     ?_SPI_Exchange8bit:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0070                     ??_SPI_Exchange8bit:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0070                     ?_can_start:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0070                     ?_can_txf_clear:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0070                     ?_can_receive:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0070                     ?_can_status_check:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0070                     ?_main:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0070                     ?___wmul:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0070                     ?___lwdiv:	
  1421                           ; 2 bytes @ 0x0
  1422                           
  1423  0070                     EUSART_Write@txData:	
  1424                           ; 2 bytes @ 0x0
  1425                           
  1426  0070                     SPI_Exchange8bit@data:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     _isdigit$616:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0070                     ___wmul@multiplier:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0070                     ___lwdiv@divisor:	
  1436                           ; 2 bytes @ 0x0
  1437                           
  1438                           
  1439                           ; 2 bytes @ 0x0
  1440  0070                     	ds	1
  1441  0071                     ??_putch:	
  1442  0071                     ?_SPI_Exchange8bitBuffer:	
  1443                           ; 1 bytes @ 0x1
  1444                           
  1445  0071                     putch@txData:	
  1446                           ; 1 bytes @ 0x1
  1447                           
  1448  0071                     SPI_Exchange8bitBuffer@bufLen:	
  1449                           ; 1 bytes @ 0x1
  1450                           
  1451  0071                     isdigit@c:	
  1452                           ; 1 bytes @ 0x1
  1453                           
  1454                           
  1455                           ; 1 bytes @ 0x1
  1456  0071                     	ds	1
  1457  0072                     SPI_Exchange8bitBuffer@dataOut:	
  1458  0072                     ___wmul@multiplicand:	
  1459                           ; 1 bytes @ 0x2
  1460                           
  1461  0072                     ___lwdiv@dividend:	
  1462                           ; 2 bytes @ 0x2
  1463                           
  1464                           
  1465                           ; 2 bytes @ 0x2
  1466  0072                     	ds	1
  1467  0073                     ??_SPI_Exchange8bitBuffer:	
  1468                           
  1469                           ; 1 bytes @ 0x3
  1470  0073                     	ds	1
  1471  0074                     ??___wmul:	
  1472  0074                     ??___lwdiv:	
  1473                           ; 1 bytes @ 0x4
  1474                           
  1475  0074                     ___wmul@product:	
  1476                           ; 1 bytes @ 0x4
  1477                           
  1478                           
  1479                           ; 2 bytes @ 0x4
  1480  0074                     	ds	1
  1481  0075                     ___lwdiv@quotient:	
  1482                           
  1483                           ; 2 bytes @ 0x5
  1484  0075                     	ds	1
  1485  0076                     ?_atoi:	
  1486  0076                     SPI_Exchange8bitBuffer@dataIn:	
  1487                           ; 2 bytes @ 0x6
  1488                           
  1489                           
  1490                           ; 1 bytes @ 0x6
  1491  0076                     	ds	1
  1492  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  1493  0077                     ___lwdiv@counter:	
  1494                           ; 1 bytes @ 0x7
  1495                           
  1496                           
  1497                           ; 1 bytes @ 0x7
  1498  0077                     	ds	1
  1499  0078                     ??_atoi:	
  1500  0078                     ?_SPI_send:	
  1501                           ; 1 bytes @ 0x8
  1502                           
  1503  0078                     ?_printf:	
  1504                           ; 1 bytes @ 0x8
  1505                           
  1506  0078                     SPI_send@len:	
  1507                           ; 2 bytes @ 0x8
  1508                           
  1509  0078                     printf@f:	
  1510                           ; 1 bytes @ 0x8
  1511                           
  1512                           
  1513                           ; 2 bytes @ 0x8
  1514  0078                     	ds	1
  1515  0079                     SPI_send@rbuf:	
  1516                           
  1517                           ; 1 bytes @ 0x9
  1518  0079                     	ds	1
  1519  007A                     ??_SPI_send:	
  1520  007A                     atoi@sign:	
  1521                           ; 1 bytes @ 0xA
  1522                           
  1523                           
  1524                           ; 1 bytes @ 0xA
  1525  007A                     	ds	1
  1526  007B                     atoi@a:	
  1527                           
  1528                           ; 2 bytes @ 0xB
  1529  007B                     	ds	2
  1530  007D                     atoi@s:	
  1531                           
  1532                           ; 1 bytes @ 0xD
  1533  007D                     	ds	1
  1534                           
  1535                           	psect	cstackBANK0
  1536  0020                     __pcstackBANK0:	
  1537  0020                     ??_printf:	
  1538  0020                     SPI_send@bytes_written:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541                           
  1542                           ; 1 bytes @ 0x0
  1543  0020                     	ds	1
  1544  0021                     SPI_send@sbuf:	
  1545                           
  1546                           ; 1 bytes @ 0x1
  1547  0021                     	ds	1
  1548  0022                     ??_can_txf_clear:	
  1549                           
  1550                           ; 1 bytes @ 0x2
  1551  0022                     	ds	2
  1552  0024                     printf@idx:	
  1553                           
  1554                           ; 1 bytes @ 0x4
  1555  0024                     	ds	1
  1556  0025                     can_txf_clear@n:	
  1557  0025                     printf@flag:	
  1558                           ; 1 bytes @ 0x5
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0x5
  1562  0025                     	ds	1
  1563  0026                     can_txf_clear@mask:	
  1564  0026                     printf@val:	
  1565                           ; 1 bytes @ 0x6
  1566                           
  1567                           
  1568                           ; 2 bytes @ 0x6
  1569  0026                     	ds	1
  1570  0027                     can_txf_clear@bytes_written:	
  1571                           
  1572                           ; 1 bytes @ 0x7
  1573  0027                     	ds	1
  1574  0028                     printf@prec:	
  1575  0028                     can_txf_clear@can_int_flag:	
  1576                           ; 1 bytes @ 0x8
  1577                           
  1578                           
  1579                           ; 4 bytes @ 0x8
  1580  0028                     	ds	1
  1581  0029                     printf@cp:	
  1582                           
  1583                           ; 2 bytes @ 0x9
  1584  0029                     	ds	2
  1585  002B                     printf@ap:	
  1586                           
  1587                           ; 1 bytes @ 0xB
  1588  002B                     	ds	1
  1589  002C                     printf@len:	
  1590                           
  1591                           ; 2 bytes @ 0xC
  1592  002C                     	ds	2
  1593  002E                     printf@width:	
  1594                           
  1595                           ; 2 bytes @ 0xE
  1596  002E                     	ds	2
  1597  0030                     printf@c:	
  1598                           
  1599                           ; 1 bytes @ 0x10
  1600  0030                     	ds	1
  1601  0031                     ?_set_sid:	
  1602  0031                     ??_can_start:	
  1603                           ; 1 bytes @ 0x11
  1604                           
  1605  0031                     ??_can_receive:	
  1606                           ; 1 bytes @ 0x11
  1607                           
  1608  0031                     ?_can_send:	
  1609                           ; 1 bytes @ 0x11
  1610                           
  1611  0031                     can_send@buf:	
  1612                           ; 1 bytes @ 0x11
  1613                           
  1614  0031                     set_sid@can_node:	
  1615                           ; 1 bytes @ 0x11
  1616                           
  1617                           
  1618                           ; 2 bytes @ 0x11
  1619  0031                     	ds	1
  1620  0032                     can_send@cnt:	
  1621                           
  1622                           ; 1 bytes @ 0x12
  1623  0032                     	ds	1
  1624  0033                     ??_set_sid:	
  1625  0033                     ??_can_send:	
  1626                           ; 1 bytes @ 0x13
  1627                           
  1628                           
  1629                           ; 1 bytes @ 0x13
  1630  0033                     	ds	1
  1631  0034                     can_start@bytes_written:	
  1632  0034                     can_receive@bytes_read:	
  1633                           ; 1 bytes @ 0x14
  1634                           
  1635                           
  1636                           ; 1 bytes @ 0x14
  1637  0034                     	ds	1
  1638  0035                     can_receive@bytes_written:	
  1639  0035                     can_start@can_ctrl_buf:	
  1640                           ; 1 bytes @ 0x15
  1641                           
  1642                           
  1643                           ; 3 bytes @ 0x15
  1644  0035                     	ds	1
  1645  0036                     can_receive@dlc:	
  1646  0036                     can_send@n:	
  1647                           ; 1 bytes @ 0x16
  1648                           
  1649                           
  1650                           ; 1 bytes @ 0x16
  1651  0036                     	ds	1
  1652  0037                     set_sid@sidh:	
  1653  0037                     can_receive@mask:	
  1654                           ; 1 bytes @ 0x17
  1655                           
  1656  0037                     can_send@len:	
  1657                           ; 1 bytes @ 0x17
  1658                           
  1659                           
  1660                           ; 1 bytes @ 0x17
  1661  0037                     	ds	1
  1662  0038                     set_sid@sidl:	
  1663  0038                     can_send@debug:	
  1664                           ; 1 bytes @ 0x18
  1665                           
  1666  0038                     can_receive@can_int_flag:	
  1667                           ; 3 bytes @ 0x18
  1668                           
  1669                           
  1670                           ; 4 bytes @ 0x18
  1671  0038                     	ds	3
  1672  003B                     can_send@bytes_written:	
  1673                           
  1674                           ; 1 bytes @ 0x1B
  1675  003B                     	ds	1
  1676  003C                     can_receive@n:	
  1677  003C                     can_send@txb_ctrl_buf:	
  1678                           ; 1 bytes @ 0x1C
  1679                           
  1680                           
  1681                           ; 1 bytes @ 0x1C
  1682  003C                     	ds	1
  1683  003D                     ??_can_status_check:	
  1684  003D                     can_send@i:	
  1685                           ; 1 bytes @ 0x1D
  1686                           
  1687                           
  1688                           ; 1 bytes @ 0x1D
  1689  003D                     	ds	3
  1690  0040                     can_status_check@bytes_written:	
  1691                           
  1692                           ; 1 bytes @ 0x20
  1693  0040                     	ds	1
  1694  0041                     can_status_check@can_status_buf:	
  1695                           
  1696                           ; 2 bytes @ 0x21
  1697  0041                     	ds	2
  1698  0043                     can_status_check@status:	
  1699                           
  1700                           ; 1 bytes @ 0x23
  1701  0043                     	ds	1
  1702  0044                     ??_main:	
  1703                           
  1704                           ; 1 bytes @ 0x24
  1705  0044                     	ds	3
  1706  0047                     main@sid:	
  1707                           
  1708                           ; 2 bytes @ 0x27
  1709  0047                     	ds	2
  1710  0049                     main@rc:	
  1711                           
  1712                           ; 1 bytes @ 0x29
  1713  0049                     	ds	1
  1714  004A                     main@rc_386:	
  1715                           
  1716                           ; 1 bytes @ 0x2A
  1717  004A                     	ds	1
  1718                           
  1719                           	psect	maintext
  1720  04CB                     __pmaintext:	
  1721 ;;
  1722 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1723 ;;
  1724 ;; *************** function _main *****************
  1725 ;; Defined at:
  1726 ;;		line 231 in file "main.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  rc              1   41[BANK0 ] unsigned char 
  1731 ;;  sid             2   39[BANK0 ] unsigned int 
  1732 ;;  rc              1   42[BANK0 ] unsigned char 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : B1F/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1743 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1744 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1745 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1746 ;;Total ram usage:        7 bytes
  1747 ;; Hardware stack levels required when called:    5
  1748 ;; This function calls:
  1749 ;;		_EUSART_Read
  1750 ;;		_SYSTEM_Initialize
  1751 ;;		_atoi
  1752 ;;		_can_send
  1753 ;;		_can_start
  1754 ;;		_can_status_check
  1755 ;;		_printf
  1756 ;;		_set_sid
  1757 ;; This function is called by:
  1758 ;;		Startup code after reset
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _main
  1764  04CB                     _main:	
  1765                           
  1766                           ;main.c: 233: SYSTEM_Initialize();
  1767                           
  1768                           ;incstack = 0
  1769                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1770  04CB  3181  21FA  3184   	fcall	_SYSTEM_Initialize
  1771                           
  1772                           ;main.c: 238: set_sid(0);
  1773  04CE  3000               	movlw	0
  1774  04CF  0020               	movlb	0	; select bank0
  1775  04D0  00B1               	movwf	set_sid@can_node
  1776  04D1  00B2               	movwf	set_sid@can_node+1
  1777  04D2  3182  22B4  3184   	fcall	_set_sid
  1778                           
  1779                           ;main.c: 239: can_start();
  1780  04D5  3182  22EC  3184   	fcall	_can_start
  1781  04D8                     l1756:	
  1782                           ;main.c: 241: while (1)
  1783                           
  1784                           
  1785                           ;main.c: 242: {
  1786                           ;main.c: 243: can_status_check();
  1787  04D8  3183  232D  3184   	fcall	_can_status_check
  1788                           
  1789                           ;main.c: 245: if ((PIR1bits.RCIF)) {
  1790  04DB  0020               	movlb	0	; select bank0
  1791  04DC  1E91               	btfss	17,5	;volatile
  1792  04DD  2CD8               	goto	l1756
  1793                           
  1794                           ;main.c: 246: c = EUSART_Read();
  1795  04DE  3181  21CC  3184   	fcall	_EUSART_Read
  1796  04E1  0020               	movlb	0	; select bank0
  1797  04E2  00C4               	movwf	??_main
  1798  04E3  0844               	movf	??_main,w
  1799  04E4  00CE               	movwf	_c
  1800                           
  1801                           ;main.c: 247: printf("%c", c);
  1802  04E5  3014               	movlw	low (STR_13| (0+32768))
  1803  04E6  00F8               	movwf	printf@f
  1804  04E7  3089               	movlw	high (STR_13| (0+32768))
  1805  04E8  00F9               	movwf	printf@f+1
  1806  04E9  084E               	movf	_c,w
  1807  04EA  00C4               	movwf	??_main
  1808  04EB  01C5               	clrf	??_main+1
  1809  04EC  0844               	movf	??_main,w
  1810  04ED  00FA               	movwf	?_printf+2
  1811  04EE  0845               	movf	??_main+1,w
  1812  04EF  00FB               	movwf	?_printf+3
  1813  04F0  3186  263E  3184   	fcall	_printf
  1814                           
  1815                           ;main.c: 250: buf[cnt] = c;
  1816  04F3  0020               	movlb	0	; select bank0
  1817  04F4  084E               	movf	_c,w
  1818  04F5  00C4               	movwf	??_main
  1819  04F6  084D               	movf	_cnt,w
  1820  04F7  3E4F               	addlw	(low (_buf| 0))& (0+255)
  1821  04F8  0086               	movwf	6
  1822  04F9  0187               	clrf	7
  1823  04FA  0844               	movf	??_main,w
  1824  04FB  0081               	movwf	1
  1825                           
  1826                           ;main.c: 251: if (c == '\n') {
  1827  04FC  300A               	movlw	10
  1828  04FD  064E               	xorwf	_c,w
  1829  04FE  1D03               	btfss	3,2
  1830  04FF  2D36               	goto	l1786
  1831                           
  1832                           ;main.c: 252: buf[cnt] = '\0';
  1833  0500  084D               	movf	_cnt,w
  1834  0501  3E4F               	addlw	(low (_buf| 0))& (0+255)
  1835  0502  0086               	movwf	6
  1836  0503  0187               	clrf	7
  1837  0504  0181               	clrf	1
  1838                           
  1839                           ;main.c: 253: if (buf[0] == '@') {
  1840  0505  3040               	movlw	64
  1841  0506  064F               	xorwf	_buf,w
  1842  0507  1D03               	btfss	3,2
  1843  0508  2D1A               	goto	l1776
  1844                           
  1845                           ;main.c: 254: uint16_t sid = atoi(&buf[1]);
  1846  0509  3050               	movlw	(low ((_buf| 0+1)))& (0+255)
  1847  050A  3183  23C3  3184   	fcall	_atoi
  1848  050D  0877               	movf	?_atoi+1,w
  1849  050E  0020               	movlb	0	; select bank0
  1850  050F  00C8               	movwf	main@sid+1
  1851  0510  0876               	movf	?_atoi,w
  1852  0511  00C7               	movwf	main@sid
  1853                           
  1854                           ;main.c: 255: set_sid(sid);
  1855  0512  0848               	movf	main@sid+1,w
  1856  0513  00B2               	movwf	set_sid@can_node+1
  1857  0514  0847               	movf	main@sid,w
  1858  0515  00B1               	movwf	set_sid@can_node
  1859  0516  3182  22B4  3184   	fcall	_set_sid
  1860                           
  1861                           ;main.c: 256: } else {
  1862  0519  2D6C               	goto	l1798
  1863  051A                     l1776:	
  1864                           
  1865                           ;main.c: 257: bool rc = can_send(0, buf, cnt);
  1866  051A  304F               	movlw	(low (_buf| 0))& (0+255)
  1867  051B  0020               	movlb	0	; select bank0
  1868  051C  00C4               	movwf	??_main
  1869  051D  0844               	movf	??_main,w
  1870  051E  00B1               	movwf	can_send@buf
  1871  051F  084D               	movf	_cnt,w
  1872  0520  00C5               	movwf	??_main+1
  1873  0521  0845               	movf	??_main+1,w
  1874  0522  00B2               	movwf	can_send@cnt
  1875  0523  3000               	movlw	0
  1876  0524  3185  256F  3184   	fcall	_can_send
  1877  0527  0020               	movlb	0	; select bank0
  1878  0528  00C6               	movwf	??_main+2
  1879  0529  0846               	movf	??_main+2,w
  1880  052A  00C9               	movwf	main@rc
  1881                           
  1882                           ;main.c: 258: if (rc) {
  1883  052B  0849               	movf	main@rc,w
  1884  052C  1903               	btfsc	3,2
  1885  052D  2D32               	goto	l1782
  1886                           
  1887                           ;main.c: 259: printf("Message sent: %s\n", buf);
  1888  052E  3059               	movlw	low ((STR_16+1)| (0+32768))
  1889  052F  00F8               	movwf	printf@f
  1890  0530  3088               	movlw	high ((STR_16+1)| (0+32768))
  1891  0531  2D5F               	goto	L3
  1892  0532                     l1782:	
  1893                           ;main.c: 260: } else {
  1894                           
  1895                           
  1896                           ;main.c: 261: printf("Unable to send message\n");
  1897  0532  3002               	movlw	low ((STR_17+1)| (0+32768))
  1898  0533  00F8               	movwf	printf@f
  1899  0534  3088               	movlw	high ((STR_17+1)| (0+32768))
  1900  0535  2D68               	goto	L1
  1901  0536                     l1786:	
  1902                           ;main.c: 265: } else if (++cnt > max_char) {
  1903                           
  1904                           ;main.c: 262: }
  1905                           ;main.c: 263: }
  1906                           ;main.c: 264: cnt = 0;
  1907                           
  1908  0536  3001               	movlw	1
  1909  0537  00C4               	movwf	??_main
  1910  0538  0844               	movf	??_main,w
  1911  0539  07CD               	addwf	_cnt,f
  1912  053A  3000               	movlw	low (_max_char| (0+32768))
  1913  053B  0084               	movwf	4
  1914  053C  3088               	movlw	high (_max_char| (0+32768))
  1915  053D  0085               	movwf	5
  1916  053E  0800               	movf	0,w	;code access
  1917  053F  00C5               	movwf	??_main+1
  1918  0540  084D               	movf	_cnt,w
  1919  0541  0245               	subwf	??_main+1,w
  1920  0542  1803               	skipnc
  1921  0543  2CD8               	goto	l1756
  1922                           
  1923                           ;main.c: 266: buf[cnt] = '\0';
  1924  0544  084D               	movf	_cnt,w
  1925  0545  3E4F               	addlw	(low (_buf| 0))& (0+255)
  1926  0546  0086               	movwf	6
  1927  0547  0187               	clrf	7
  1928  0548  0181               	clrf	1
  1929                           
  1930                           ;main.c: 267: bool rc = can_send(0, buf, cnt);
  1931  0549  304F               	movlw	(low (_buf| 0))& (0+255)
  1932  054A  00C4               	movwf	??_main
  1933  054B  0844               	movf	??_main,w
  1934  054C  00B1               	movwf	can_send@buf
  1935  054D  084D               	movf	_cnt,w
  1936  054E  00C5               	movwf	??_main+1
  1937  054F  0845               	movf	??_main+1,w
  1938  0550  00B2               	movwf	can_send@cnt
  1939  0551  3000               	movlw	0
  1940  0552  3185  256F  3184   	fcall	_can_send
  1941  0555  0020               	movlb	0	; select bank0
  1942  0556  00C6               	movwf	??_main+2
  1943  0557  0846               	movf	??_main+2,w
  1944  0558  00CA               	movwf	main@rc_386
  1945                           
  1946                           ;main.c: 268: if (rc) {
  1947  0559  084A               	movf	main@rc_386,w
  1948  055A  1903               	btfsc	3,2
  1949  055B  2D65               	goto	l1796
  1950                           
  1951                           ;main.c: 269: printf("\nMessage sent: %s\n", buf);
  1952  055C  3058               	movlw	low (STR_16| (0+32768))
  1953  055D  00F8               	movwf	printf@f
  1954  055E  3088               	movlw	high (STR_16| (0+32768))
  1955  055F                     L3:	
  1956  055F  00F9               	movwf	printf@f+1
  1957  0560  304F               	movlw	(low (_buf| 0))& (0+255)
  1958  0561  00C4               	movwf	??_main
  1959  0562  0844               	movf	??_main,w
  1960  0563  00FA               	movwf	?_printf+2
  1961  0564  2D69               	goto	L2
  1962  0565                     l1796:	
  1963                           ;main.c: 270: } else {
  1964                           
  1965                           
  1966                           ;main.c: 271: printf("\nUnable to send message\n");
  1967  0565  3001               	movlw	low (STR_17| (0+32768))
  1968  0566  00F8               	movwf	printf@f
  1969  0567  3088               	movlw	high (STR_17| (0+32768))
  1970  0568                     L1:	
  1971  0568  00F9               	movwf	printf@f+1
  1972  0569                     L2:	
  1973  0569  3186  263E  3184   	fcall	_printf
  1974  056C                     l1798:	
  1975                           
  1976                           ;main.c: 272: }
  1977                           ;main.c: 273: cnt = 0;
  1978  056C  0020               	movlb	0	; select bank0
  1979  056D  01CD               	clrf	_cnt
  1980  056E  2CD8               	goto	l1756
  1981  056F                     __end_of_main:	
  1982                           
  1983                           	psect	text1
  1984  02B4                     __ptext1:	
  1985 ;; *************** function _set_sid *****************
  1986 ;; Defined at:
  1987 ;;		line 75 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  can_node        2   17[BANK0 ] unsigned int 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  sidl            1   24[BANK0 ] unsigned char 
  1992 ;;  sidh            1   23[BANK0 ] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2004 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2005 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2006 ;;Total ram usage:        8 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    3
  2009 ;; This function calls:
  2010 ;;		_printf
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           
  2017                           ;psect for function _set_sid
  2018  02B4                     _set_sid:	
  2019                           
  2020                           ;main.c: 76: uint8_t sidh = (can_node >> 3) & 0x00ff;
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2024  02B4  0020               	movlb	0	; select bank0
  2025  02B5  0832               	movf	set_sid@can_node+1,w
  2026  02B6  00B4               	movwf	??_set_sid+1
  2027  02B7  0831               	movf	set_sid@can_node,w
  2028  02B8  00B3               	movwf	??_set_sid
  2029  02B9  36B4               	lsrf	??_set_sid+1,f
  2030  02BA  0CB3               	rrf	??_set_sid,f
  2031  02BB  36B4               	lsrf	??_set_sid+1,f
  2032  02BC  0CB3               	rrf	??_set_sid,f
  2033  02BD  36B4               	lsrf	??_set_sid+1,f
  2034  02BE  0CB3               	rrf	??_set_sid,f
  2035  02BF  0833               	movf	??_set_sid,w
  2036  02C0  00B5               	movwf	??_set_sid+2
  2037  02C1  0835               	movf	??_set_sid+2,w
  2038  02C2  00B7               	movwf	set_sid@sidh
  2039                           
  2040                           ;main.c: 77: uint8_t sidl = (can_node << 5) & 0x00e0;
  2041  02C3  0831               	movf	set_sid@can_node,w
  2042  02C4  00B3               	movwf	??_set_sid
  2043  02C5  3004               	movlw	4
  2044  02C6                     u1135:	
  2045  02C6  35B3               	lslf	??_set_sid,f
  2046  02C7  3EFF               	addlw	-1
  2047  02C8  1D03               	skipz
  2048  02C9  2AC6               	goto	u1135
  2049  02CA  3533               	lslf	??_set_sid,w
  2050  02CB  39E0               	andlw	224
  2051  02CC  00B4               	movwf	??_set_sid+1
  2052  02CD  0834               	movf	??_set_sid+1,w
  2053  02CE  00B8               	movwf	set_sid@sidl
  2054                           
  2055                           ;main.c: 78: sid.sidh = sidh;
  2056  02CF  0837               	movf	set_sid@sidh,w
  2057  02D0  00B3               	movwf	??_set_sid
  2058  02D1  0833               	movf	??_set_sid,w
  2059  02D2  00CB               	movwf	_sid
  2060                           
  2061                           ;main.c: 79: sid.sidl = sidl;
  2062  02D3  0838               	movf	set_sid@sidl,w
  2063  02D4  00B3               	movwf	??_set_sid
  2064  02D5  0833               	movf	??_set_sid,w
  2065  02D6  00CC               	movwf	_sid+1
  2066                           
  2067                           ;main.c: 80: printf("SID set: %02x %02x\n", sidh, sidl);
  2068  02D7  3044               	movlw	low (STR_1| (0+32768))
  2069  02D8  00F8               	movwf	printf@f
  2070  02D9  3088               	movlw	high (STR_1| (0+32768))
  2071  02DA  00F9               	movwf	printf@f+1
  2072  02DB  0837               	movf	set_sid@sidh,w
  2073  02DC  00B3               	movwf	??_set_sid
  2074  02DD  01B4               	clrf	??_set_sid+1
  2075  02DE  0833               	movf	??_set_sid,w
  2076  02DF  00FA               	movwf	?_printf+2
  2077  02E0  0834               	movf	??_set_sid+1,w
  2078  02E1  00FB               	movwf	?_printf+3
  2079  02E2  0838               	movf	set_sid@sidl,w
  2080  02E3  00B5               	movwf	??_set_sid+2
  2081  02E4  01B6               	clrf	??_set_sid+3
  2082  02E5  0835               	movf	??_set_sid+2,w
  2083  02E6  00FC               	movwf	?_printf+4
  2084  02E7  0836               	movf	??_set_sid+3,w
  2085  02E8  00FD               	movwf	?_printf+5
  2086  02E9  3186  263E         	fcall	_printf
  2087  02EB  0008               	return
  2088  02EC                     __end_of_set_sid:	
  2089                           
  2090                           	psect	text2
  2091  032D                     __ptext2:	
  2092 ;; *************** function _can_status_check *****************
  2093 ;; Defined at:
  2094 ;;		line 208 in file "main.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  can_status_b    2   33[BANK0 ] unsigned char [2]
  2099 ;;  status          1   35[BANK0 ] unsigned char 
  2100 ;;  bytes_writte    1   32[BANK0 ] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2111 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2112 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2113 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2114 ;;Total ram usage:        7 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    4
  2117 ;; This function calls:
  2118 ;;		_SPI_send
  2119 ;;		_can_receive
  2120 ;;		_can_txf_clear
  2121 ;;		_printf
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           
  2128                           ;psect for function _can_status_check
  2129  032D                     _can_status_check:	
  2130                           
  2131                           ;main.c: 210: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  2132                           
  2133                           ;incstack = 0
  2134                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2135  032D  0020               	movlb	0	; select bank0
  2136  032E  0862               	movf	can_status_check@F2958+1,w
  2137  032F  00C2               	movwf	can_status_check@can_status_buf+1
  2138  0330  0861               	movf	can_status_check@F2958,w
  2139  0331  00C1               	movwf	can_status_check@can_status_buf
  2140                           
  2141                           ;main.c: 211: uint8_t bytes_written = SPI_send(can_status_buf, 2, can_status_buf);
  2142  0332  3002               	movlw	2
  2143  0333  00BD               	movwf	??_can_status_check
  2144  0334  083D               	movf	??_can_status_check,w
  2145  0335  00F8               	movwf	SPI_send@len
  2146  0336  3041               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  2147  0337  00BE               	movwf	??_can_status_check+1
  2148  0338  083E               	movf	??_can_status_check+1,w
  2149  0339  00F9               	movwf	SPI_send@rbuf
  2150  033A  3041               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  2151  033B  3182  2220  3183   	fcall	_SPI_send
  2152  033E  0020               	movlb	0	; select bank0
  2153  033F  00BF               	movwf	??_can_status_check+2
  2154  0340  083F               	movf	??_can_status_check+2,w
  2155  0341  00C0               	movwf	can_status_check@bytes_written
  2156                           
  2157                           ;main.c: 212: uint8_t status = can_status_buf[1];
  2158  0342  0842               	movf	can_status_check@can_status_buf+1,w
  2159  0343  00BD               	movwf	??_can_status_check
  2160  0344  083D               	movf	??_can_status_check,w
  2161  0345  00C3               	movwf	can_status_check@status
  2162                           
  2163                           ;main.c: 213: if (status == 0x00) {
  2164  0346  0843               	movf	can_status_check@status,w
  2165  0347  1903               	btfsc	3,2
  2166  0348  0008               	return
  2167                           
  2168                           ;main.c: 215: } else if ((status & 0b00000001) > 0) {
  2169                           
  2170                           ;main.c: 214: return;
  2171  0349  1C43               	btfss	can_status_check@status,0
  2172  034A  2B56               	goto	l213
  2173                           
  2174                           ;main.c: 216: printf("RX0IF is on\n");
  2175  034B  30E8               	movlw	low (STR_11| (0+32768))
  2176  034C  00F8               	movwf	printf@f
  2177  034D  3088               	movlw	high (STR_11| (0+32768))
  2178  034E  00F9               	movwf	printf@f+1
  2179  034F  3186  263E  3183   	fcall	_printf
  2180                           
  2181                           ;main.c: 217: can_receive(0);
  2182  0352  3000               	movlw	0
  2183  0353  3184  242A         	fcall	_can_receive
  2184                           
  2185                           ;main.c: 218: } else if ((status & 0b00000010) > 0) {
  2186  0355  0008               	return
  2187  0356                     l213:	
  2188  0356  1CC3               	btfss	can_status_check@status,1
  2189  0357  2B63               	goto	l215
  2190                           
  2191                           ;main.c: 219: printf("RX1IF is on\n");
  2192  0358  30F5               	movlw	low (STR_12| (0+32768))
  2193  0359  00F8               	movwf	printf@f
  2194  035A  3088               	movlw	high (STR_12| (0+32768))
  2195  035B  00F9               	movwf	printf@f+1
  2196  035C  3186  263E  3183   	fcall	_printf
  2197                           
  2198                           ;main.c: 220: can_receive(1);
  2199  035F  3001               	movlw	1
  2200  0360  3184  242A         	fcall	_can_receive
  2201                           
  2202                           ;main.c: 221: } else if ((status & 0b00001000) > 0) {
  2203  0362  0008               	return
  2204  0363                     l215:	
  2205  0363  1DC3               	btfss	can_status_check@status,3
  2206  0364  2B69               	goto	l217
  2207                           
  2208                           ;main.c: 222: can_txf_clear(0);
  2209  0365  3000               	movlw	0
  2210  0366  3182  2254         	fcall	_can_txf_clear
  2211                           
  2212                           ;main.c: 223: } else if ((status & 0b00100000) > 0) {
  2213  0368  0008               	return
  2214  0369                     l217:	
  2215  0369  1EC3               	btfss	can_status_check@status,5
  2216  036A  2B6F               	goto	l219
  2217                           
  2218                           ;main.c: 224: can_txf_clear(1);
  2219  036B  3001               	movlw	1
  2220  036C  3182  2254         	fcall	_can_txf_clear
  2221                           
  2222                           ;main.c: 225: } else if ((status & 0b10000000) > 0) {
  2223  036E  0008               	return
  2224  036F                     l219:	
  2225  036F  1FC3               	btfss	can_status_check@status,7
  2226  0370  0008               	return
  2227                           
  2228                           ;main.c: 226: can_txf_clear(2);
  2229  0371  3002               	movlw	2
  2230  0372  3182  2254         	fcall	_can_txf_clear
  2231  0374  0008               	return
  2232  0375                     __end_of_can_status_check:	
  2233                           ;main.c: 227: }
  2234                           ;main.c: 228: return;
  2235                           
  2236                           
  2237                           	psect	text3
  2238  0254                     __ptext3:	
  2239 ;; *************** function _can_txf_clear *****************
  2240 ;; Defined at:
  2241 ;;		line 111 in file "main.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  n               1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  n               1    5[BANK0 ] unsigned char 
  2246 ;;  can_int_flag    4    8[BANK0 ] unsigned char [4]
  2247 ;;  bytes_writte    1    7[BANK0 ] unsigned char 
  2248 ;;  mask            1    6[BANK0 ] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      unsigned char 
  2251 ;; Registers used:
  2252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2259 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2260 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2261 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2262 ;;Total ram usage:       10 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    3
  2265 ;; This function calls:
  2266 ;;		_SPI_send
  2267 ;; This function is called by:
  2268 ;;		_can_status_check
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           
  2273                           ;psect for function _can_txf_clear
  2274  0254                     _can_txf_clear:	
  2275                           
  2276                           ;incstack = 0
  2277                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2278                           ;can_txf_clear@n stored from wreg
  2279  0254  0020               	movlb	0	; select bank0
  2280  0255  00A5               	movwf	can_txf_clear@n
  2281                           
  2282                           ;main.c: 112: uint8_t mask = 0b00000001 << (n + 2);
  2283  0256  3001               	movlw	1
  2284  0257  00A2               	movwf	??_can_txf_clear
  2285  0258  0825               	movf	can_txf_clear@n,w
  2286  0259  3E02               	addlw	2
  2287  025A  0A89               	incf	9,f
  2288  025B  2A5D               	goto	u1094
  2289  025C                     u1095:	
  2290  025C  35A2               	lslf	??_can_txf_clear,f
  2291  025D                     u1094:	
  2292  025D  0B89               	decfsz	9,f
  2293  025E  2A5C               	goto	u1095
  2294  025F  0822               	movf	??_can_txf_clear,w
  2295  0260  00A3               	movwf	??_can_txf_clear+1
  2296  0261  0823               	movf	??_can_txf_clear+1,w
  2297  0262  00A6               	movwf	can_txf_clear@mask
  2298                           
  2299                           ;main.c: 113: uint8_t can_int_flag[4];
  2300                           ;main.c: 114: can_int_flag[0] =0b00000101;
  2301  0263  3005               	movlw	5
  2302  0264  00A2               	movwf	??_can_txf_clear
  2303  0265  0822               	movf	??_can_txf_clear,w
  2304  0266  00A8               	movwf	can_txf_clear@can_int_flag
  2305                           
  2306                           ;main.c: 115: can_int_flag[1] = 0x2c;
  2307  0267  302C               	movlw	44
  2308  0268  00A2               	movwf	??_can_txf_clear
  2309  0269  0822               	movf	??_can_txf_clear,w
  2310  026A  00A9               	movwf	can_txf_clear@can_int_flag+1
  2311                           
  2312                           ;main.c: 116: can_int_flag[2] = mask;
  2313  026B  0826               	movf	can_txf_clear@mask,w
  2314  026C  00A2               	movwf	??_can_txf_clear
  2315  026D  0822               	movf	??_can_txf_clear,w
  2316  026E  00AA               	movwf	can_txf_clear@can_int_flag+2
  2317                           
  2318                           ;main.c: 117: can_int_flag[3] = 0x00;
  2319  026F  01AB               	clrf	can_txf_clear@can_int_flag+3
  2320                           
  2321                           ;main.c: 118: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2322  0270  3004               	movlw	4
  2323  0271  00A2               	movwf	??_can_txf_clear
  2324  0272  0822               	movf	??_can_txf_clear,w
  2325  0273  00F8               	movwf	SPI_send@len
  2326  0274  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2327  0275  00A3               	movwf	??_can_txf_clear+1
  2328  0276  0823               	movf	??_can_txf_clear+1,w
  2329  0277  00F9               	movwf	SPI_send@rbuf
  2330  0278  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2331  0279  3182  2220         	fcall	_SPI_send
  2332  027B  0020               	movlb	0	; select bank0
  2333  027C  00A4               	movwf	??_can_txf_clear+2
  2334  027D  0824               	movf	??_can_txf_clear+2,w
  2335  027E  00A7               	movwf	can_txf_clear@bytes_written
  2336                           
  2337                           ;main.c: 122: return 0;
  2338                           ;	Return value of _can_txf_clear is never used
  2339                           
  2340                           ;main.c: 121: } else {
  2341                           
  2342                           ;main.c: 120: return 1;
  2343                           ;	Return value of _can_txf_clear is never used
  2344  027F  0008               	return
  2345  0280                     __end_of_can_txf_clear:	
  2346                           
  2347                           	psect	text4
  2348  042A                     __ptext4:	
  2349 ;; *************** function _can_receive *****************
  2350 ;; Defined at:
  2351 ;;		line 129 in file "main.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  n               1    wreg     unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  n               1   28[BANK0 ] unsigned char 
  2356 ;;  can_int_flag    4   24[BANK0 ] unsigned char [4]
  2357 ;;  mask            1   23[BANK0 ] unsigned char 
  2358 ;;  dlc             1   22[BANK0 ] unsigned char 
  2359 ;;  bytes_writte    1   21[BANK0 ] unsigned char 
  2360 ;;  bytes_read      1   20[BANK0 ] unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2371 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2372 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2373 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2374 ;;Total ram usage:       12 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    3
  2377 ;; This function calls:
  2378 ;;		_SPI_send
  2379 ;;		_printf
  2380 ;; This function is called by:
  2381 ;;		_can_status_check
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function _can_receive
  2387  042A                     _can_receive:	
  2388                           
  2389                           ;incstack = 0
  2390                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2391                           ;can_receive@n stored from wreg
  2392  042A  0020               	movlb	0	; select bank0
  2393  042B  00BC               	movwf	can_receive@n
  2394                           
  2395                           ;main.c: 131: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  2396  042C  083C               	movf	can_receive@n,w
  2397  042D  3E17               	addlw	low (_nm| (0+32768))
  2398  042E  0084               	movwf	4
  2399  042F  3089               	movlw	high (_nm| (0+32768))
  2400  0430  1803               	skipnc
  2401  0431  3E01               	addlw	1
  2402  0432  0085               	movwf	5
  2403  0433  0800               	movf	0,w	;code access
  2404  0434  0709               	addwf	9,w
  2405  0435  3E90               	addlw	144
  2406  0436  00B1               	movwf	??_can_receive
  2407  0437  0831               	movf	??_can_receive,w
  2408  0438  0021               	movlb	1	; select bank1
  2409  0439  00A0               	movwf	_rx_buf^(0+128)
  2410                           
  2411                           ;main.c: 132: uint8_t bytes_read = SPI_send(rx_buf, 14, rx_buf);
  2412  043A  300E               	movlw	14
  2413  043B  0020               	movlb	0	; select bank0
  2414  043C  00B1               	movwf	??_can_receive
  2415  043D  0831               	movf	??_can_receive,w
  2416  043E  00F8               	movwf	SPI_send@len
  2417  043F  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2418  0440  00B2               	movwf	??_can_receive+1
  2419  0441  0832               	movf	??_can_receive+1,w
  2420  0442  00F9               	movwf	SPI_send@rbuf
  2421  0443  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2422  0444  3182  2220  3184   	fcall	_SPI_send
  2423  0447  0020               	movlb	0	; select bank0
  2424  0448  00B3               	movwf	??_can_receive+2
  2425  0449  0833               	movf	??_can_receive+2,w
  2426  044A  00B4               	movwf	can_receive@bytes_read
  2427                           
  2428                           ;main.c: 133: uint8_t dlc = rx_buf[5];
  2429  044B  0021               	movlb	1	; select bank1
  2430  044C  0825               	movf	(_rx_buf^(0+128)+5),w
  2431  044D  0020               	movlb	0	; select bank0
  2432  044E  00B1               	movwf	??_can_receive
  2433  044F  0831               	movf	??_can_receive,w
  2434  0450  00B6               	movwf	can_receive@dlc
  2435                           
  2436                           ;main.c: 134: rx_buf[6+dlc] = '\0';
  2437  0451  0836               	movf	can_receive@dlc,w
  2438  0452  3E06               	addlw	6
  2439  0453  3EA0               	addlw	(low (_rx_buf| 0))& (0+255)
  2440  0454  0086               	movwf	6
  2441  0455  0187               	clrf	7
  2442  0456  0181               	clrf	1
  2443                           
  2444                           ;main.c: 137: printf("RXB0SIDH: %02x\n", rx_buf[1]);
  2445  0457  307C               	movlw	low (STR_3| (0+32768))
  2446  0458  00F8               	movwf	printf@f
  2447  0459  3088               	movlw	high (STR_3| (0+32768))
  2448  045A  00F9               	movwf	printf@f+1
  2449  045B  0021               	movlb	1	; select bank1
  2450  045C  0821               	movf	(_rx_buf^(0+128)+1),w
  2451  045D  0020               	movlb	0	; select bank0
  2452  045E  00B1               	movwf	??_can_receive
  2453  045F  01B2               	clrf	??_can_receive+1
  2454  0460  0831               	movf	??_can_receive,w
  2455  0461  00FA               	movwf	?_printf+2
  2456  0462  0832               	movf	??_can_receive+1,w
  2457  0463  00FB               	movwf	?_printf+3
  2458  0464  3186  263E  3184   	fcall	_printf
  2459                           
  2460                           ;main.c: 138: printf("RXB0SIDL: %02x\n", rx_buf[2]);
  2461  0467  309C               	movlw	low (STR_4| (0+32768))
  2462  0468  00F8               	movwf	printf@f
  2463  0469  3088               	movlw	high (STR_4| (0+32768))
  2464  046A  00F9               	movwf	printf@f+1
  2465  046B  0021               	movlb	1	; select bank1
  2466  046C  0822               	movf	(_rx_buf^(0+128)+2),w
  2467  046D  0020               	movlb	0	; select bank0
  2468  046E  00B1               	movwf	??_can_receive
  2469  046F  01B2               	clrf	??_can_receive+1
  2470  0470  0831               	movf	??_can_receive,w
  2471  0471  00FA               	movwf	?_printf+2
  2472  0472  0832               	movf	??_can_receive+1,w
  2473  0473  00FB               	movwf	?_printf+3
  2474  0474  3186  263E  3184   	fcall	_printf
  2475                           
  2476                           ;main.c: 139: printf("RXB0DLC: %02x\n", rx_buf[5]);
  2477  0477  30BC               	movlw	low (STR_5| (0+32768))
  2478  0478  00F8               	movwf	printf@f
  2479  0479  3088               	movlw	high (STR_5| (0+32768))
  2480  047A  00F9               	movwf	printf@f+1
  2481  047B  0021               	movlb	1	; select bank1
  2482  047C  0825               	movf	(_rx_buf^(0+128)+5),w
  2483  047D  0020               	movlb	0	; select bank0
  2484  047E  00B1               	movwf	??_can_receive
  2485  047F  01B2               	clrf	??_can_receive+1
  2486  0480  0831               	movf	??_can_receive,w
  2487  0481  00FA               	movwf	?_printf+2
  2488  0482  0832               	movf	??_can_receive+1,w
  2489  0483  00FB               	movwf	?_printf+3
  2490  0484  3186  263E  3184   	fcall	_printf
  2491                           
  2492                           ;main.c: 140: printf("RXB0D0: %02x\n", rx_buf[6]);
  2493  0487  30DA               	movlw	low (STR_6| (0+32768))
  2494  0488  00F8               	movwf	printf@f
  2495  0489  3088               	movlw	high (STR_6| (0+32768))
  2496  048A  00F9               	movwf	printf@f+1
  2497  048B  0021               	movlb	1	; select bank1
  2498  048C  0826               	movf	(_rx_buf^(0+128)+6),w
  2499  048D  0020               	movlb	0	; select bank0
  2500  048E  00B1               	movwf	??_can_receive
  2501  048F  01B2               	clrf	??_can_receive+1
  2502  0490  0831               	movf	??_can_receive,w
  2503  0491  00FA               	movwf	?_printf+2
  2504  0492  0832               	movf	??_can_receive+1,w
  2505  0493  00FB               	movwf	?_printf+3
  2506  0494  3186  263E  3184   	fcall	_printf
  2507                           
  2508                           ;main.c: 144: uint8_t mask = 0b00000001 << n;
  2509  0497  3001               	movlw	1
  2510  0498  0020               	movlb	0	; select bank0
  2511  0499  00B1               	movwf	??_can_receive
  2512  049A  0A3C               	incf	can_receive@n,w
  2513  049B  2C9D               	goto	u1104
  2514  049C                     u1105:	
  2515  049C  35B1               	lslf	??_can_receive,f
  2516  049D                     u1104:	
  2517  049D  0B89               	decfsz	9,f
  2518  049E  2C9C               	goto	u1105
  2519  049F  0831               	movf	??_can_receive,w
  2520  04A0  00B2               	movwf	??_can_receive+1
  2521  04A1  0832               	movf	??_can_receive+1,w
  2522  04A2  00B7               	movwf	can_receive@mask
  2523                           
  2524                           ;main.c: 145: uint8_t can_int_flag[4];
  2525                           ;main.c: 146: can_int_flag[0] = 0b00000101;
  2526  04A3  3005               	movlw	5
  2527  04A4  00B1               	movwf	??_can_receive
  2528  04A5  0831               	movf	??_can_receive,w
  2529  04A6  00B8               	movwf	can_receive@can_int_flag
  2530                           
  2531                           ;main.c: 147: can_int_flag[1] = 0x2c;
  2532  04A7  302C               	movlw	44
  2533  04A8  00B1               	movwf	??_can_receive
  2534  04A9  0831               	movf	??_can_receive,w
  2535  04AA  00B9               	movwf	can_receive@can_int_flag+1
  2536                           
  2537                           ;main.c: 148: can_int_flag[2] = mask;
  2538  04AB  0837               	movf	can_receive@mask,w
  2539  04AC  00B1               	movwf	??_can_receive
  2540  04AD  0831               	movf	??_can_receive,w
  2541  04AE  00BA               	movwf	can_receive@can_int_flag+2
  2542                           
  2543                           ;main.c: 149: can_int_flag[3] = 0x00;
  2544  04AF  01BB               	clrf	can_receive@can_int_flag+3
  2545                           
  2546                           ;main.c: 150: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2547  04B0  3004               	movlw	4
  2548  04B1  00B1               	movwf	??_can_receive
  2549  04B2  0831               	movf	??_can_receive,w
  2550  04B3  00F8               	movwf	SPI_send@len
  2551  04B4  3038               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2552  04B5  00B2               	movwf	??_can_receive+1
  2553  04B6  0832               	movf	??_can_receive+1,w
  2554  04B7  00F9               	movwf	SPI_send@rbuf
  2555  04B8  3038               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2556  04B9  3182  2220  3184   	fcall	_SPI_send
  2557  04BC  0020               	movlb	0	; select bank0
  2558  04BD  00B3               	movwf	??_can_receive+2
  2559  04BE  0833               	movf	??_can_receive+2,w
  2560  04BF  00B5               	movwf	can_receive@bytes_written
  2561                           
  2562                           ;main.c: 153: printf("Message received: %s\n", &rx_buf[6]);
  2563  04C0  301A               	movlw	low (STR_7| (0+32768))
  2564  04C1  00F8               	movwf	printf@f
  2565  04C2  3088               	movlw	high (STR_7| (0+32768))
  2566  04C3  00F9               	movwf	printf@f+1
  2567  04C4  30A6               	movlw	(low ((_rx_buf| 0+6)))& (0+255)
  2568  04C5  00B1               	movwf	??_can_receive
  2569  04C6  0831               	movf	??_can_receive,w
  2570  04C7  00FA               	movwf	?_printf+2
  2571  04C8  3186  263E         	fcall	_printf
  2572  04CA  0008               	return
  2573  04CB                     __end_of_can_receive:	
  2574                           
  2575                           	psect	text5
  2576  02EC                     __ptext5:	
  2577 ;; *************** function _can_start *****************
  2578 ;; Defined at:
  2579 ;;		line 93 in file "main.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  can_ctrl_buf    3   21[BANK0 ] unsigned char [3]
  2584 ;;  bytes_writte    1   20[BANK0 ] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      unsigned char 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2597 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2598 ;;Total ram usage:        7 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    3
  2601 ;; This function calls:
  2602 ;;		_SPI_send
  2603 ;;		_printf
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           
  2610                           ;psect for function _can_start
  2611  02EC                     _can_start:	
  2612                           
  2613                           ;main.c: 95: uint8_t can_ctrl_buf[3] = {0b00000010, 0x0f, 0b01000000};
  2614                           
  2615                           ;incstack = 0
  2616                           ; Regs used in _can_start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2617  02EC  0020               	movlb	0	; select bank0
  2618  02ED  085E               	movf	can_start@F2930,w
  2619  02EE  00B5               	movwf	can_start@can_ctrl_buf
  2620  02EF  085F               	movf	can_start@F2930+1,w
  2621  02F0  00B6               	movwf	can_start@can_ctrl_buf+1
  2622  02F1  0860               	movf	can_start@F2930+2,w
  2623  02F2  00B7               	movwf	can_start@can_ctrl_buf+2
  2624                           
  2625                           ;main.c: 96: uint8_t bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  2626  02F3  3003               	movlw	3
  2627  02F4  00B1               	movwf	??_can_start
  2628  02F5  0831               	movf	??_can_start,w
  2629  02F6  00F8               	movwf	SPI_send@len
  2630  02F7  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2631  02F8  00B2               	movwf	??_can_start+1
  2632  02F9  0832               	movf	??_can_start+1,w
  2633  02FA  00F9               	movwf	SPI_send@rbuf
  2634  02FB  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2635  02FC  3182  2220  3182   	fcall	_SPI_send
  2636  02FF  0020               	movlb	0	; select bank0
  2637  0300  00B3               	movwf	??_can_start+2
  2638  0301  0833               	movf	??_can_start+2,w
  2639  0302  00B4               	movwf	can_start@bytes_written
  2640                           
  2641                           ;main.c: 97: if (bytes_written == 3) {
  2642  0303  3003               	movlw	3
  2643  0304  0634               	xorwf	can_start@bytes_written,w
  2644  0305  1D03               	btfss	3,2
  2645  0306  0008               	return
  2646                           
  2647                           ;main.c: 98: can_ctrl_buf[0] = 0b00000011;
  2648  0307  3003               	movlw	3
  2649  0308  00B1               	movwf	??_can_start
  2650  0309  0831               	movf	??_can_start,w
  2651  030A  00B5               	movwf	can_start@can_ctrl_buf
  2652                           
  2653                           ;main.c: 99: can_ctrl_buf[1] = 0x0e;
  2654  030B  300E               	movlw	14
  2655  030C  00B1               	movwf	??_can_start
  2656  030D  0831               	movf	??_can_start,w
  2657  030E  00B6               	movwf	can_start@can_ctrl_buf+1
  2658                           
  2659                           ;main.c: 100: bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  2660  030F  3003               	movlw	3
  2661  0310  00B1               	movwf	??_can_start
  2662  0311  0831               	movf	??_can_start,w
  2663  0312  00F8               	movwf	SPI_send@len
  2664  0313  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2665  0314  00B2               	movwf	??_can_start+1
  2666  0315  0832               	movf	??_can_start+1,w
  2667  0316  00F9               	movwf	SPI_send@rbuf
  2668  0317  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2669  0318  3182  2220  3182   	fcall	_SPI_send
  2670  031B  0020               	movlb	0	; select bank0
  2671  031C  00B3               	movwf	??_can_start+2
  2672  031D  0833               	movf	??_can_start+2,w
  2673  031E  00B4               	movwf	can_start@bytes_written
  2674                           
  2675                           ;main.c: 101: printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  2676  031F  30CB               	movlw	low (STR_2| (0+32768))
  2677  0320  00F8               	movwf	printf@f
  2678  0321  3088               	movlw	high (STR_2| (0+32768))
  2679  0322  00F9               	movwf	printf@f+1
  2680  0323  0837               	movf	can_start@can_ctrl_buf+2,w
  2681  0324  00B1               	movwf	??_can_start
  2682  0325  01B2               	clrf	??_can_start+1
  2683  0326  0831               	movf	??_can_start,w
  2684  0327  00FA               	movwf	?_printf+2
  2685  0328  0832               	movf	??_can_start+1,w
  2686  0329  00FB               	movwf	?_printf+3
  2687  032A  3186  263E         	fcall	_printf
  2688                           
  2689                           ;main.c: 104: return 0;
  2690                           ;	Return value of _can_start is never used
  2691                           
  2692                           ;main.c: 103: } else {
  2693                           
  2694                           ;main.c: 102: return 1;
  2695                           ;	Return value of _can_start is never used
  2696  032C  0008               	return
  2697  032D                     __end_of_can_start:	
  2698                           
  2699                           	psect	text6
  2700  056F                     __ptext6:	
  2701 ;; *************** function _can_send *****************
  2702 ;; Defined at:
  2703 ;;		line 159 in file "main.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  n               1    wreg     unsigned char 
  2706 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  2707 ;;		 -> buf(9), 
  2708 ;;  cnt             1   18[BANK0 ] unsigned char 
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  n               1   22[BANK0 ] unsigned char 
  2711 ;;  txb_ctrl_buf    1   28[BANK0 ] unsigned char [1]
  2712 ;;  debug           3   24[BANK0 ] unsigned char [3]
  2713 ;;  i               1   29[BANK0 ] unsigned char 
  2714 ;;  bytes_writte    1   27[BANK0 ] unsigned char 
  2715 ;;  len             1   23[BANK0 ] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      unsigned char 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2726 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2727 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2728 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2729 ;;Total ram usage:       13 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    3
  2732 ;; This function calls:
  2733 ;;		_SPI_send
  2734 ;;		_printf
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _can_send
  2742  056F                     _can_send:	
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2746                           ;can_send@n stored from wreg
  2747  056F  0020               	movlb	0	; select bank0
  2748  0570  00B6               	movwf	can_send@n
  2749                           
  2750                           ;main.c: 160: uint8_t i;
  2751                           ;main.c: 163: tx_buf[0] = 0b01000000 + abc[n];
  2752  0571  0836               	movf	can_send@n,w
  2753  0572  3E11               	addlw	low (_abc| (0+32768))
  2754  0573  0084               	movwf	4
  2755  0574  3089               	movlw	high (_abc| (0+32768))
  2756  0575  1803               	skipnc
  2757  0576  3E01               	addlw	1
  2758  0577  0085               	movwf	5
  2759  0578  0800               	movf	0,w	;code access
  2760  0579  3E40               	addlw	64
  2761  057A  00B3               	movwf	??_can_send
  2762  057B  0833               	movf	??_can_send,w
  2763  057C  0021               	movlb	1	; select bank1
  2764  057D  00AF               	movwf	_tx_buf^(0+128)
  2765                           
  2766                           ;main.c: 165: tx_buf[1] = sid.sidh;
  2767  057E  0020               	movlb	0	; select bank0
  2768  057F  084B               	movf	_sid,w
  2769  0580  00B3               	movwf	??_can_send
  2770  0581  0833               	movf	??_can_send,w
  2771  0582  0021               	movlb	1	; select bank1
  2772  0583  00B0               	movwf	(_tx_buf^(0+128)+1)
  2773                           
  2774                           ;main.c: 167: tx_buf[2] = sid.sidl;
  2775  0584  0020               	movlb	0	; select bank0
  2776  0585  084C               	movf	_sid+1,w
  2777  0586  00B3               	movwf	??_can_send
  2778  0587  0833               	movf	??_can_send,w
  2779  0588  0021               	movlb	1	; select bank1
  2780  0589  00B1               	movwf	(_tx_buf^(0+128)+2)
  2781                           
  2782                           ;main.c: 169: tx_buf[3] = 0;
  2783  058A  01B2               	clrf	(_tx_buf^(0+128)+3)
  2784                           
  2785                           ;main.c: 171: tx_buf[4] = 0;
  2786  058B  01B3               	clrf	(_tx_buf^(0+128)+4)
  2787                           
  2788                           ;main.c: 173: tx_buf[5] = cnt;
  2789  058C  0020               	movlb	0	; select bank0
  2790  058D  0832               	movf	can_send@cnt,w
  2791  058E  00B3               	movwf	??_can_send
  2792  058F  0833               	movf	??_can_send,w
  2793  0590  0021               	movlb	1	; select bank1
  2794  0591  00B4               	movwf	(_tx_buf^(0+128)+5)
  2795                           
  2796                           ;main.c: 176: for(i=0; i<cnt; i++) {
  2797  0592  0020               	movlb	0	; select bank0
  2798  0593  01BD               	clrf	can_send@i
  2799  0594                     l1654:	
  2800  0594  0832               	movf	can_send@cnt,w
  2801  0595  023D               	subwf	can_send@i,w
  2802  0596  1803               	btfsc	3,0
  2803  0597  2DC0               	goto	l1656
  2804                           
  2805                           ;main.c: 177: tx_buf[6+i] = buf[i];
  2806  0598  083D               	movf	can_send@i,w
  2807  0599  0731               	addwf	can_send@buf,w
  2808  059A  00B3               	movwf	??_can_send
  2809  059B  0833               	movf	??_can_send,w
  2810  059C  0086               	movwf	6
  2811  059D  0187               	clrf	7
  2812  059E  0801               	movf	1,w
  2813  059F  00B4               	movwf	??_can_send+1
  2814  05A0  083D               	movf	can_send@i,w
  2815  05A1  3E06               	addlw	6
  2816  05A2  3EAF               	addlw	(low (_tx_buf| 0))& (0+255)
  2817  05A3  0086               	movwf	6
  2818  05A4  0187               	clrf	7
  2819  05A5  0834               	movf	??_can_send+1,w
  2820  05A6  0081               	movwf	1
  2821                           
  2822                           ;main.c: 178: printf("Copying buffer: %c\n", tx_buf[6+i]);
  2823  05A7  3030               	movlw	low (STR_8| (0+32768))
  2824  05A8  00F8               	movwf	printf@f
  2825  05A9  3088               	movlw	high (STR_8| (0+32768))
  2826  05AA  00F9               	movwf	printf@f+1
  2827  05AB  083D               	movf	can_send@i,w
  2828  05AC  3E06               	addlw	6
  2829  05AD  3EAF               	addlw	(low (_tx_buf| 0))& (0+255)
  2830  05AE  0086               	movwf	6
  2831  05AF  0187               	clrf	7
  2832  05B0  0801               	movf	1,w
  2833  05B1  00B3               	movwf	??_can_send
  2834  05B2  01B4               	clrf	??_can_send+1
  2835  05B3  0833               	movf	??_can_send,w
  2836  05B4  00FA               	movwf	?_printf+2
  2837  05B5  0834               	movf	??_can_send+1,w
  2838  05B6  00FB               	movwf	?_printf+3
  2839  05B7  3186  263E  3185   	fcall	_printf
  2840  05BA  3001               	movlw	1
  2841  05BB  0020               	movlb	0	; select bank0
  2842  05BC  00B3               	movwf	??_can_send
  2843  05BD  0833               	movf	??_can_send,w
  2844  05BE  07BD               	addwf	can_send@i,f
  2845  05BF  2D94               	goto	l1654
  2846  05C0                     l1656:	
  2847                           
  2848                           ;main.c: 179: }
  2849                           ;main.c: 182: uint8_t len = 6 + cnt;
  2850  05C0  0832               	movf	can_send@cnt,w
  2851  05C1  3E06               	addlw	6
  2852  05C2  00B3               	movwf	??_can_send
  2853  05C3  0833               	movf	??_can_send,w
  2854  05C4  00B7               	movwf	can_send@len
  2855                           
  2856                           ;main.c: 183: uint8_t bytes_written = SPI_send(tx_buf, len, tx_buf);
  2857  05C5  0837               	movf	can_send@len,w
  2858  05C6  00B3               	movwf	??_can_send
  2859  05C7  0833               	movf	??_can_send,w
  2860  05C8  00F8               	movwf	SPI_send@len
  2861  05C9  30AF               	movlw	(low (_tx_buf| 0))& (0+255)
  2862  05CA  00B4               	movwf	??_can_send+1
  2863  05CB  0834               	movf	??_can_send+1,w
  2864  05CC  00F9               	movwf	SPI_send@rbuf
  2865  05CD  30AF               	movlw	(low (_tx_buf| 0))& (0+255)
  2866  05CE  3182  2220  3185   	fcall	_SPI_send
  2867  05D1  0020               	movlb	0	; select bank0
  2868  05D2  00B5               	movwf	??_can_send+2
  2869  05D3  0835               	movf	??_can_send+2,w
  2870  05D4  00BB               	movwf	can_send@bytes_written
  2871                           
  2872                           ;main.c: 186: uint8_t debug[3] = {0b00000011, 0x31, 0x00};
  2873  05D5  085B               	movf	can_send@F2952,w
  2874  05D6  00B8               	movwf	can_send@debug
  2875  05D7  085C               	movf	can_send@F2952+1,w
  2876  05D8  00B9               	movwf	can_send@debug+1
  2877  05D9  085D               	movf	can_send@F2952+2,w
  2878  05DA  00BA               	movwf	can_send@debug+2
  2879                           
  2880                           ;main.c: 187: SPI_send(debug, 3, debug);
  2881  05DB  3003               	movlw	3
  2882  05DC  00B3               	movwf	??_can_send
  2883  05DD  0833               	movf	??_can_send,w
  2884  05DE  00F8               	movwf	SPI_send@len
  2885  05DF  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2886  05E0  00B4               	movwf	??_can_send+1
  2887  05E1  0834               	movf	??_can_send+1,w
  2888  05E2  00F9               	movwf	SPI_send@rbuf
  2889  05E3  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2890  05E4  3182  2220  3185   	fcall	_SPI_send
  2891                           
  2892                           ;main.c: 188: printf("TXB0SIDH: %02x\n", debug[2]);
  2893  05E7  308C               	movlw	low (STR_9| (0+32768))
  2894  05E8  00F8               	movwf	printf@f
  2895  05E9  3088               	movlw	high (STR_9| (0+32768))
  2896  05EA  00F9               	movwf	printf@f+1
  2897  05EB  0020               	movlb	0	; select bank0
  2898  05EC  083A               	movf	can_send@debug+2,w
  2899  05ED  00B3               	movwf	??_can_send
  2900  05EE  01B4               	clrf	??_can_send+1
  2901  05EF  0833               	movf	??_can_send,w
  2902  05F0  00FA               	movwf	?_printf+2
  2903  05F1  0834               	movf	??_can_send+1,w
  2904  05F2  00FB               	movwf	?_printf+3
  2905  05F3  3186  263E  3185   	fcall	_printf
  2906                           
  2907                           ;main.c: 189: uint8_t debug[3] = {0b00000011, 0x32, 0x00};
  2908  05F6  0020               	movlb	0	; select bank0
  2909  05F7  0858               	movf	can_send@F2953,w
  2910  05F8  00B8               	movwf	can_send@debug
  2911  05F9  0859               	movf	can_send@F2953+1,w
  2912  05FA  00B9               	movwf	can_send@debug+1
  2913  05FB  085A               	movf	can_send@F2953+2,w
  2914  05FC  00BA               	movwf	can_send@debug+2
  2915                           
  2916                           ;main.c: 190: SPI_send(debug, 3, debug);
  2917  05FD  3003               	movlw	3
  2918  05FE  00B3               	movwf	??_can_send
  2919  05FF  0833               	movf	??_can_send,w
  2920  0600  00F8               	movwf	SPI_send@len
  2921  0601  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2922  0602  00B4               	movwf	??_can_send+1
  2923  0603  0834               	movf	??_can_send+1,w
  2924  0604  00F9               	movwf	SPI_send@rbuf
  2925  0605  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2926  0606  3182  2220  3185   	fcall	_SPI_send
  2927                           
  2928                           ;main.c: 191: printf("TXB0SIDL: %02x\n", debug[2]);
  2929  0609  30AC               	movlw	low (STR_10| (0+32768))
  2930  060A  00F8               	movwf	printf@f
  2931  060B  3088               	movlw	high (STR_10| (0+32768))
  2932  060C  00F9               	movwf	printf@f+1
  2933  060D  0020               	movlb	0	; select bank0
  2934  060E  083A               	movf	can_send@debug+2,w
  2935  060F  00B3               	movwf	??_can_send
  2936  0610  01B4               	clrf	??_can_send+1
  2937  0611  0833               	movf	??_can_send,w
  2938  0612  00FA               	movwf	?_printf+2
  2939  0613  0834               	movf	??_can_send+1,w
  2940  0614  00FB               	movwf	?_printf+3
  2941  0615  3186  263E  3185   	fcall	_printf
  2942                           
  2943                           ;main.c: 193: if (bytes_written == len) {
  2944  0618  0020               	movlb	0	; select bank0
  2945  0619  083B               	movf	can_send@bytes_written,w
  2946  061A  0637               	xorwf	can_send@len,w
  2947  061B  1D03               	skipz
  2948  061C  2E3C               	goto	l1684
  2949                           
  2950                           ;main.c: 195: uint8_t txb_ctrl_buf[1];
  2951                           ;main.c: 196: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  2952  061D  3001               	movlw	1
  2953  061E  00B3               	movwf	??_can_send
  2954  061F  0A36               	incf	can_send@n,w
  2955  0620  2E22               	goto	u1174
  2956  0621                     u1175:	
  2957  0621  35B3               	lslf	??_can_send,f
  2958  0622                     u1174:	
  2959  0622  0B89               	decfsz	9,f
  2960  0623  2E21               	goto	u1175
  2961  0624  0833               	movf	??_can_send,w
  2962  0625  3E80               	addlw	128
  2963  0626  00B4               	movwf	??_can_send+1
  2964  0627  0834               	movf	??_can_send+1,w
  2965  0628  00BC               	movwf	can_send@txb_ctrl_buf
  2966                           
  2967                           ;main.c: 197: bytes_written = SPI_send(txb_ctrl_buf, 1, txb_ctrl_buf);
  2968  0629  01F8               	clrf	SPI_send@len
  2969  062A  0AF8               	incf	SPI_send@len,f
  2970  062B  303C               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2971  062C  00B3               	movwf	??_can_send
  2972  062D  0833               	movf	??_can_send,w
  2973  062E  00F9               	movwf	SPI_send@rbuf
  2974  062F  303C               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2975  0630  3182  2220  3185   	fcall	_SPI_send
  2976  0633  0020               	movlb	0	; select bank0
  2977  0634  00B4               	movwf	??_can_send+1
  2978  0635  0834               	movf	??_can_send+1,w
  2979  0636  00BB               	movwf	can_send@bytes_written
  2980                           
  2981                           ;main.c: 198: if (bytes_written == 1) {
  2982  0637  033B               	decf	can_send@bytes_written,w
  2983  0638  1D03               	btfss	3,2
  2984  0639  2E3C               	goto	l1684
  2985                           
  2986                           ;main.c: 199: return 1;
  2987  063A  3001               	movlw	1
  2988  063B  0008               	return
  2989  063C                     l1684:	
  2990                           
  2991                           ;main.c: 200: }
  2992                           ;main.c: 201: }
  2993                           ;main.c: 202: return 0;
  2994  063C  3000               	movlw	0
  2995  063D  0008               	return
  2996  063E                     __end_of_can_send:	
  2997                           
  2998                           	psect	text7
  2999  063E                     __ptext7:	
  3000 ;; *************** function _printf *****************
  3001 ;; Defined at:
  3002 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  f               2    8[COMMON] PTR const unsigned char 
  3005 ;;		 -> STR_17(25), STR_16(19), STR_15(24), STR_14(18), 
  3006 ;;		 -> STR_13(3), STR_12(13), STR_11(13), STR_10(16), 
  3007 ;;		 -> STR_9(16), STR_8(20), STR_7(22), STR_6(14), 
  3008 ;;		 -> STR_5(15), STR_4(16), STR_3(16), STR_2(15), 
  3009 ;;		 -> STR_1(20), 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  idx             1    4[BANK0 ] unsigned char 
  3012 ;;  tmpval          4    0        struct .
  3013 ;;  width           2   14[BANK0 ] int 
  3014 ;;  len             2   12[BANK0 ] unsigned int 
  3015 ;;  cp              2    9[BANK0 ] PTR const unsigned char 
  3016 ;;		 -> STR_18(7), printf@c(1), buf(9), rx_buf(15), 
  3017 ;;  val             2    6[BANK0 ] unsigned int 
  3018 ;;  c               1   16[BANK0 ] char 
  3019 ;;  ap              1   11[BANK0 ] PTR void [1]
  3020 ;;		 -> ?_printf(2), 
  3021 ;;  prec            1    8[BANK0 ] char 
  3022 ;;  flag            1    5[BANK0 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  2    8[COMMON] int 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3032 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3033 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;      Totals:         6      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;Total ram usage:       23 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		___lwdiv
  3041 ;;		___wmul
  3042 ;;		_isdigit
  3043 ;;		_putch
  3044 ;; This function is called by:
  3045 ;;		_set_sid
  3046 ;;		_can_start
  3047 ;;		_can_receive
  3048 ;;		_can_send
  3049 ;;		_can_status_check
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _printf
  3056  063E                     _printf:	
  3057                           
  3058                           ;doprnt.c: 466: va_list ap;
  3059                           ;doprnt.c: 499: signed char c;
  3060                           ;doprnt.c: 501: int width;
  3061                           ;doprnt.c: 506: signed char prec;
  3062                           ;doprnt.c: 508: unsigned char flag;
  3063                           ;doprnt.c: 523: union {
  3064                           ;doprnt.c: 524: unsigned long vd;
  3065                           ;doprnt.c: 525: double integ;
  3066                           ;doprnt.c: 526: } tmpval;
  3067                           ;doprnt.c: 528: unsigned int val;
  3068                           ;doprnt.c: 529: unsigned len;
  3069                           ;doprnt.c: 530: const char * cp;
  3070                           ;doprnt.c: 533: *ap = __va_start();
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3074  063E  307A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3075  063F  0020               	movlb	0	; select bank0
  3076  0640  00A0               	movwf	??_printf
  3077  0641  0820               	movf	??_printf,w
  3078  0642  00AB               	movwf	printf@ap
  3079  0643                     l1508:	
  3080                           ;doprnt.c: 536: while(c = *f++) {
  3081                           
  3082  0643  0879               	movf	printf@f+1,w
  3083  0644  0020               	movlb	0	; select bank0
  3084  0645  00A1               	movwf	??_printf+1
  3085  0646  0878               	movf	printf@f,w
  3086  0647  00A0               	movwf	??_printf
  3087  0648  0AF8               	incf	printf@f,f
  3088  0649  1903               	skipnz
  3089  064A  0AF9               	incf	printf@f+1,f
  3090  064B  0820               	movf	??_printf,w
  3091  064C  0084               	movwf	4
  3092  064D  0821               	movf	??_printf+1,w
  3093  064E  0085               	movwf	5
  3094  064F  0800               	movf	0,w	;code access
  3095  0650  00A2               	movwf	??_printf+2
  3096  0651  0822               	movf	??_printf+2,w
  3097  0652  00B0               	movwf	printf@c
  3098  0653  0830               	movf	printf@c,w
  3099  0654  1903               	btfsc	3,2
  3100  0655  0008               	return
  3101                           
  3102                           ;doprnt.c: 538: if(c != '%')
  3103  0656  3025               	movlw	37
  3104  0657  0630               	xorwf	printf@c,w
  3105  0658  1903               	btfsc	3,2
  3106  0659  2E5F               	goto	l1400
  3107                           
  3108                           ;doprnt.c: 540: {
  3109                           ;doprnt.c: 541: (putch(c) );
  3110  065A  0830               	movf	printf@c,w
  3111  065B  3181  219C  3186   	fcall	_putch
  3112                           
  3113                           ;doprnt.c: 542: continue;
  3114  065E  2E43               	goto	l1508
  3115  065F                     l1400:	
  3116                           
  3117                           ;doprnt.c: 543: }
  3118                           ;doprnt.c: 546: width = 0;
  3119  065F  0020               	movlb	0	; select bank0
  3120  0660  01AE               	clrf	printf@width
  3121  0661  01AF               	clrf	printf@width+1
  3122                           
  3123                           ;doprnt.c: 548: flag = 0;
  3124  0662  01A5               	clrf	printf@flag
  3125                           
  3126                           ;doprnt.c: 551: switch(*f) {
  3127                           
  3128                           ;doprnt.c: 550: for(;;) {
  3129  0663  2E6A               	goto	l1406
  3130  0664                     l257:	
  3131                           ;doprnt.c: 579: case '0':
  3132                           
  3133                           
  3134                           ;doprnt.c: 580: flag |= 0x04;
  3135  0664  0020               	movlb	0	; select bank0
  3136  0665  1525               	bsf	printf@flag,2
  3137                           
  3138                           ;doprnt.c: 581: f++;
  3139  0666  3001               	movlw	1
  3140  0667  07F8               	addwf	printf@f,f
  3141  0668  3000               	movlw	0
  3142  0669  3DF9               	addwfc	printf@f+1,f
  3143  066A                     l1406:	
  3144                           ;doprnt.c: 584: }
  3145                           
  3146                           ;doprnt.c: 582: continue;
  3147                           
  3148  066A  0878               	movf	printf@f,w
  3149  066B  0084               	movwf	4
  3150  066C  0879               	movf	printf@f+1,w
  3151  066D  0085               	movwf	5
  3152  066E  0800               	movf	0,w	;code access
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 1, Range of values is 48 to 48
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte            4     3 (average)
  3159                           ; direct_byte           11     9 (fixed)
  3160                           ; jumptable            263     9 (fixed)
  3161                           ;	Chosen strategy is simple_byte
  3162  066F  3A30               	xorlw	48	; case 48
  3163  0670  1903               	skipnz
  3164  0671  2E64               	goto	l257
  3165  0672  2E73               	goto	l1408
  3166  0673                     l1408:	
  3167                           ;doprnt.c: 586: }
  3168                           
  3169                           ;doprnt.c: 585: break;
  3170                           
  3171                           
  3172                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3173  0673  0878               	movf	printf@f,w
  3174  0674  0084               	movwf	4
  3175  0675  0879               	movf	printf@f+1,w
  3176  0676  0085               	movwf	5
  3177  0677  0800               	movf	0,w	;code access
  3178  0678  3181  21EC  3186   	fcall	_isdigit
  3179  067B  1C03               	btfss	3,0
  3180  067C  2F1D               	goto	l1460
  3181                           
  3182                           ;doprnt.c: 598: width = 0;
  3183  067D  0020               	movlb	0	; select bank0
  3184  067E  01AE               	clrf	printf@width
  3185  067F  01AF               	clrf	printf@width+1
  3186  0680                     l1412:	
  3187                           ;doprnt.c: 599: do {
  3188                           
  3189                           
  3190                           ;doprnt.c: 600: width *= 10;
  3191  0680  300A               	movlw	10
  3192  0681  00F0               	movwf	___wmul@multiplier
  3193  0682  3000               	movlw	0
  3194  0683  00F1               	movwf	___wmul@multiplier+1
  3195  0684  0020               	movlb	0	; select bank0
  3196  0685  082F               	movf	printf@width+1,w
  3197  0686  00F3               	movwf	___wmul@multiplicand+1
  3198  0687  082E               	movf	printf@width,w
  3199  0688  00F2               	movwf	___wmul@multiplicand
  3200  0689  3182  2239  3186   	fcall	___wmul
  3201  068C  0871               	movf	?___wmul+1,w
  3202  068D  0020               	movlb	0	; select bank0
  3203  068E  00AF               	movwf	printf@width+1
  3204  068F  0870               	movf	?___wmul,w
  3205  0690  00AE               	movwf	printf@width
  3206                           
  3207                           ;doprnt.c: 601: width += *f++ - '0';
  3208  0691  0878               	movf	printf@f,w
  3209  0692  0084               	movwf	4
  3210  0693  0879               	movf	printf@f+1,w
  3211  0694  0085               	movwf	5
  3212  0695  0800               	movf	0,w	;code access
  3213  0696  3ED0               	addlw	208
  3214  0697  00A0               	movwf	??_printf
  3215  0698  30FF               	movlw	255
  3216  0699  1803               	skipnc
  3217  069A  3000               	movlw	0
  3218  069B  00A1               	movwf	??_printf+1
  3219  069C  0820               	movf	??_printf,w
  3220  069D  07AE               	addwf	printf@width,f
  3221  069E  0821               	movf	??_printf+1,w
  3222  069F  3DAF               	addwfc	printf@width+1,f
  3223  06A0  3001               	movlw	1
  3224  06A1  07F8               	addwf	printf@f,f
  3225  06A2  3000               	movlw	0
  3226  06A3  3DF9               	addwfc	printf@f+1,f
  3227                           
  3228                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3229  06A4  0878               	movf	printf@f,w
  3230  06A5  0084               	movwf	4
  3231  06A6  0879               	movf	printf@f+1,w
  3232  06A7  0085               	movwf	5
  3233  06A8  0800               	movf	0,w	;code access
  3234  06A9  3181  21EC  3186   	fcall	_isdigit
  3235  06AC  1C03               	btfss	3,0
  3236  06AD  2F1D               	goto	l1460
  3237  06AE  2E80               	goto	l1412
  3238  06AF                     l1420:	
  3239                           ;doprnt.c: 728: case 's':
  3240                           
  3241                           ;doprnt.c: 723: break;
  3242                           
  3243                           ;doprnt.c: 718: case 'x':
  3244                           
  3245                           ;doprnt.c: 638: goto alldone;
  3246                           
  3247                           ;doprnt.c: 637: case 0:
  3248                           
  3249                           ;doprnt.c: 608: }
  3250                           ;doprnt.c: 635: switch(c = *f++) {
  3251                           
  3252                           
  3253                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3254  06AF  0020               	movlb	0	; select bank0
  3255  06B0  082B               	movf	printf@ap,w
  3256  06B1  0086               	movwf	6
  3257  06B2  0187               	clrf	7
  3258  06B3  0801               	movf	1,w
  3259  06B4  00A9               	movwf	printf@cp
  3260  06B5  3000               	movlw	0
  3261  06B6  00AA               	movwf	printf@cp+1
  3262  06B7  3001               	movlw	1
  3263  06B8  00A0               	movwf	??_printf
  3264  06B9  0820               	movf	??_printf,w
  3265  06BA  07AB               	addwf	printf@ap,f
  3266                           
  3267                           ;doprnt.c: 740: if(!cp)
  3268  06BB  0829               	movf	printf@cp,w
  3269  06BC  042A               	iorwf	printf@cp+1,w
  3270  06BD  1D03               	btfss	3,2
  3271  06BE  2EC3               	goto	l1428
  3272                           
  3273                           ;doprnt.c: 741: cp = "(null)";
  3274  06BF  300A               	movlw	low (STR_18| (0+32768))
  3275  06C0  00A9               	movwf	printf@cp
  3276  06C1  3089               	movlw	high (STR_18| (0+32768))
  3277  06C2  00AA               	movwf	printf@cp+1
  3278  06C3                     l1428:	
  3279                           
  3280                           ;doprnt.c: 745: len = 0;
  3281  06C3  01AC               	clrf	printf@len
  3282  06C4  01AD               	clrf	printf@len+1
  3283  06C5                     l1432:	
  3284                           ;doprnt.c: 746: while(cp[len])
  3285                           
  3286  06C5  0829               	movf	printf@cp,w
  3287  06C6  072C               	addwf	printf@len,w
  3288  06C7  0084               	movwf	4
  3289  06C8  082A               	movf	printf@cp+1,w
  3290  06C9  3D2D               	addwfc	printf@len+1,w
  3291  06CA  0085               	movwf	5
  3292  06CB  0012               	moviw fsr0++
  3293  06CC  1903               	btfsc	3,2
  3294  06CD  2ED3               	goto	l1434
  3295                           
  3296                           ;doprnt.c: 747: len++;
  3297  06CE  3001               	movlw	1
  3298  06CF  07AC               	addwf	printf@len,f
  3299  06D0  3000               	movlw	0
  3300  06D1  3DAD               	addwfc	printf@len+1,f
  3301  06D2  2EC5               	goto	l1432
  3302  06D3                     l1434:	
  3303                           ;doprnt.c: 750: dostring:
  3304                           
  3305                           
  3306                           ;doprnt.c: 757: if(width > len)
  3307  06D3  082F               	movf	printf@width+1,w
  3308  06D4  022D               	subwf	printf@len+1,w
  3309  06D5  1D03               	skipz
  3310  06D6  2ED9               	goto	u955
  3311  06D7  082E               	movf	printf@width,w
  3312  06D8  022C               	subwf	printf@len,w
  3313  06D9                     u955:	
  3314  06D9  1803               	skipnc
  3315  06DA  2EE0               	goto	l1438
  3316                           
  3317                           ;doprnt.c: 758: width -= len;
  3318  06DB  082C               	movf	printf@len,w
  3319  06DC  02AE               	subwf	printf@width,f
  3320  06DD  082D               	movf	printf@len+1,w
  3321  06DE  3BAF               	subwfb	printf@width+1,f
  3322  06DF  2EE2               	goto	l1442
  3323  06E0                     l1438:	
  3324                           
  3325                           ;doprnt.c: 759: else
  3326                           ;doprnt.c: 760: width = 0;
  3327  06E0  01AE               	clrf	printf@width
  3328  06E1  01AF               	clrf	printf@width+1
  3329  06E2                     l1442:	
  3330                           ;doprnt.c: 764: while(width--)
  3331                           
  3332  06E2  30FF               	movlw	255
  3333  06E3  0020               	movlb	0	; select bank0
  3334  06E4  07AE               	addwf	printf@width,f
  3335  06E5  30FF               	movlw	255
  3336  06E6  3DAF               	addwfc	printf@width+1,f
  3337  06E7  0A2E               	incf	printf@width,w
  3338  06E8  1903               	btfsc	3,2
  3339  06E9  0A2F               	incf	printf@width+1,w
  3340  06EA  1903               	btfsc	3,2
  3341  06EB  2EFE               	goto	l1448
  3342                           
  3343                           ;doprnt.c: 765: (putch(' ') );
  3344  06EC  3020               	movlw	32
  3345  06ED  3181  219C  3186   	fcall	_putch
  3346  06F0  2EE2               	goto	l1442
  3347  06F1                     l1444:	
  3348                           ;doprnt.c: 767: while(len--)
  3349                           
  3350                           
  3351                           ;doprnt.c: 768: (putch(*cp++) );
  3352  06F1  0829               	movf	printf@cp,w
  3353  06F2  0084               	movwf	4
  3354  06F3  082A               	movf	printf@cp+1,w
  3355  06F4  0085               	movwf	5
  3356  06F5  0800               	movf	0,w	;code access
  3357  06F6  3181  219C  3186   	fcall	_putch
  3358  06F9  3001               	movlw	1
  3359  06FA  0020               	movlb	0	; select bank0
  3360  06FB  07A9               	addwf	printf@cp,f
  3361  06FC  3000               	movlw	0
  3362  06FD  3DAA               	addwfc	printf@cp+1,f
  3363  06FE                     l1448:	
  3364  06FE  3001               	movlw	1
  3365  06FF  02AC               	subwf	printf@len,f
  3366  0700  3000               	movlw	0
  3367  0701  3BAD               	subwfb	printf@len+1,f
  3368  0702  0A2C               	incf	printf@len,w
  3369  0703  1D03               	skipz
  3370  0704  2EF1               	goto	l1444
  3371  0705  0A2D               	incf	printf@len+1,w
  3372  0706  1903               	btfsc	3,2
  3373  0707  2E43               	goto	l1508
  3374  0708  2EF1               	goto	l1444
  3375  0709                     l1450:	
  3376                           ;doprnt.c: 784: case 'c':
  3377                           
  3378                           ;doprnt.c: 774: continue;
  3379                           
  3380                           
  3381                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3382  0709  082B               	movf	printf@ap,w
  3383  070A  0086               	movwf	6
  3384  070B  0187               	clrf	7
  3385  070C  0801               	movf	1,w
  3386  070D  00A0               	movwf	??_printf
  3387  070E  0820               	movf	??_printf,w
  3388  070F  00B0               	movwf	printf@c
  3389  0710  3002               	movlw	2
  3390  0711  00A0               	movwf	??_printf
  3391  0712  0820               	movf	??_printf,w
  3392  0713  07AB               	addwf	printf@ap,f
  3393  0714                     l1454:	
  3394                           ;doprnt.c: 802: default:
  3395                           
  3396                           
  3397                           ;doprnt.c: 805: cp = (char *)&c;
  3398  0714  3030               	movlw	low printf@c
  3399  0715  00A9               	movwf	printf@cp
  3400  0716  3000               	movlw	high printf@c
  3401  0717  00AA               	movwf	printf@cp+1
  3402                           
  3403                           ;doprnt.c: 806: len = 1;
  3404  0718  3001               	movlw	1
  3405  0719  00AC               	movwf	printf@len
  3406  071A  3000               	movlw	0
  3407  071B  00AD               	movwf	printf@len+1
  3408                           
  3409                           ;doprnt.c: 807: goto dostring;
  3410  071C  2ED3               	goto	l1434
  3411  071D                     l1460:	
  3412                           ;doprnt.c: 822: }
  3413                           
  3414  071D  0879               	movf	printf@f+1,w
  3415  071E  0020               	movlb	0	; select bank0
  3416  071F  00A1               	movwf	??_printf+1
  3417  0720  0878               	movf	printf@f,w
  3418  0721  00A0               	movwf	??_printf
  3419  0722  0AF8               	incf	printf@f,f
  3420  0723  1903               	skipnz
  3421  0724  0AF9               	incf	printf@f+1,f
  3422  0725  0820               	movf	??_printf,w
  3423  0726  0084               	movwf	4
  3424  0727  0821               	movf	??_printf+1,w
  3425  0728  0085               	movwf	5
  3426  0729  0800               	movf	0,w	;code access
  3427  072A  00B0               	movwf	printf@c
  3428                           
  3429                           ; Switch size 1, requested type "space"
  3430                           ; Number of cases is 4, Range of values is 0 to 120
  3431                           ; switch strategies available:
  3432                           ; Name         Instructions Cycles
  3433                           ; simple_byte           13     7 (average)
  3434                           ; direct_byte          248     6 (fixed)
  3435                           ; jumptable            260     6 (fixed)
  3436                           ;	Chosen strategy is simple_byte
  3437  072B  3A00               	xorlw	0	; case 0
  3438  072C  1903               	skipnz
  3439  072D  2FE1               	goto	l302
  3440  072E  3A63               	xorlw	99	; case 99
  3441  072F  1903               	skipnz
  3442  0730  2F09               	goto	l1450
  3443  0731  3A10               	xorlw	16	; case 115
  3444  0732  1903               	skipnz
  3445  0733  2EAF               	goto	l1420
  3446  0734  3A0B               	xorlw	11	; case 120
  3447  0735  1903               	skipnz
  3448  0736  2F38               	goto	l1462
  3449  0737  2F14               	goto	l1454
  3450  0738                     l1462:	
  3451                           
  3452                           ;doprnt.c: 1273: {
  3453                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3454  0738  0020               	movlb	0	; select bank0
  3455  0739  082B               	movf	printf@ap,w
  3456  073A  0086               	movwf	6
  3457  073B  0187               	clrf	7
  3458  073C  3F40               	moviw [0]fsr1
  3459  073D  00A6               	movwf	printf@val
  3460  073E  3F41               	moviw [1]fsr1
  3461  073F  00A7               	movwf	printf@val+1
  3462  0740  3002               	movlw	2
  3463  0741  00A0               	movwf	??_printf
  3464  0742  0820               	movf	??_printf,w
  3465  0743  07AB               	addwf	printf@ap,f
  3466                           
  3467                           ;doprnt.c: 1287: }
  3468                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3469  0744  01B0               	clrf	printf@c
  3470  0745  0AB0               	incf	printf@c,f
  3471  0746  3004               	movlw	4
  3472  0747  0630               	xorwf	printf@c,w
  3473  0748  1903               	btfsc	3,2
  3474  0749  2F69               	goto	l1478
  3475  074A                     l1472:	
  3476                           
  3477                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3478  074A  0830               	movf	printf@c,w
  3479  074B  00A0               	movwf	??_printf
  3480  074C  01A1               	clrf	??_printf+1
  3481  074D  35A0               	lslf	??_printf,f
  3482  074E  0DA1               	rlf	??_printf+1,f
  3483  074F  3002               	movlw	low (_hexpowers| (0+32768))
  3484  0750  0720               	addwf	??_printf,w
  3485  0751  0084               	movwf	4
  3486  0752  3089               	movlw	high (_hexpowers| (0+32768))
  3487  0753  3D21               	addwfc	??_printf+1,w
  3488  0754  0085               	movwf	5
  3489  0755  3F00               	moviw [0]fsr0
  3490  0756  00A2               	movwf	??_printf+2
  3491  0757  3F01               	moviw [1]fsr0
  3492  0758  00A3               	movwf	??_printf+3
  3493  0759  0823               	movf	??_printf+3,w
  3494  075A  0227               	subwf	printf@val+1,w
  3495  075B  1D03               	skipz
  3496  075C  2F5F               	goto	u995
  3497  075D  0822               	movf	??_printf+2,w
  3498  075E  0226               	subwf	printf@val,w
  3499  075F                     u995:	
  3500  075F  1C03               	btfss	3,0
  3501  0760  2F69               	goto	l1478
  3502                           
  3503                           ;doprnt.c: 1318: break;
  3504  0761  3001               	movlw	1
  3505  0762  00A0               	movwf	??_printf
  3506  0763  0820               	movf	??_printf,w
  3507  0764  07B0               	addwf	printf@c,f
  3508  0765  3004               	movlw	4
  3509  0766  0630               	xorwf	printf@c,w
  3510  0767  1D03               	btfss	3,2
  3511  0768  2F4A               	goto	l1472
  3512  0769                     l1478:	
  3513                           
  3514                           ;doprnt.c: 1381: if(width > c)
  3515  0769  0830               	movf	printf@c,w
  3516  076A  00A0               	movwf	??_printf
  3517  076B  01A1               	clrf	??_printf+1
  3518  076C  1BA0               	btfsc	??_printf,7
  3519  076D  03A1               	decf	??_printf+1,f
  3520  076E  0821               	movf	??_printf+1,w
  3521  076F  3A80               	xorlw	128
  3522  0770  00A2               	movwf	??_printf+2
  3523  0771  082F               	movf	printf@width+1,w
  3524  0772  3A80               	xorlw	128
  3525  0773  0222               	subwf	??_printf+2,w
  3526  0774  1D03               	skipz
  3527  0775  2F78               	goto	u1015
  3528  0776  082E               	movf	printf@width,w
  3529  0777  0220               	subwf	??_printf,w
  3530  0778                     u1015:	
  3531  0778  1803               	skipnc
  3532  0779  2F85               	goto	l1482
  3533                           
  3534                           ;doprnt.c: 1382: width -= c;
  3535  077A  0020               	movlb	0	; select bank0
  3536  077B  0830               	movf	printf@c,w
  3537  077C  00A0               	movwf	??_printf
  3538  077D  01A1               	clrf	??_printf+1
  3539  077E  1BA0               	btfsc	??_printf,7
  3540  077F  03A1               	decf	??_printf+1,f
  3541  0780  0820               	movf	??_printf,w
  3542  0781  02AE               	subwf	printf@width,f
  3543  0782  0821               	movf	??_printf+1,w
  3544  0783  3BAF               	subwfb	printf@width+1,f
  3545  0784  2F88               	goto	l1484
  3546  0785                     l1482:	
  3547                           
  3548                           ;doprnt.c: 1383: else
  3549                           ;doprnt.c: 1384: width = 0;
  3550  0785  0020               	movlb	0	; select bank0
  3551  0786  01AE               	clrf	printf@width
  3552  0787  01AF               	clrf	printf@width+1
  3553  0788                     l1484:	
  3554                           
  3555                           ;doprnt.c: 1387: if(flag & 0x04) {
  3556  0788  1D25               	btfss	printf@flag,2
  3557  0789  2F98               	goto	l1492
  3558  078A                     L5:	
  3559                           
  3560                           ;doprnt.c: 1415: if(width)
  3561  078A  082E               	movf	printf@width,w
  3562  078B  042F               	iorwf	printf@width+1,w
  3563  078C  1903               	btfsc	3,2
  3564  078D  2FA9               	goto	l1498
  3565                           
  3566                           ;doprnt.c: 1417: (putch('0') );
  3567                           
  3568                           ;doprnt.c: 1416: do
  3569  078E  3030               	movlw	48
  3570  078F  3181  219C  3186   	fcall	_putch
  3571                           
  3572                           ;doprnt.c: 1418: while(--width);
  3573  0792  30FF               	movlw	255
  3574  0793  0020               	movlb	0	; select bank0
  3575  0794  07AE               	addwf	printf@width,f
  3576  0795  30FF               	movlw	255
  3577  0796  3DAF               	addwfc	printf@width+1,f
  3578  0797  2F8A               	goto	L5
  3579  0798                     l1492:	
  3580                           ;doprnt.c: 1420: } else
  3581                           
  3582                           
  3583                           ;doprnt.c: 1422: {
  3584                           ;doprnt.c: 1424: if(width
  3585                           ;doprnt.c: 1428: )
  3586  0798  082E               	movf	printf@width,w
  3587  0799  042F               	iorwf	printf@width+1,w
  3588  079A  1903               	btfsc	3,2
  3589  079B  2FA9               	goto	l1498
  3590  079C                     l1494:	
  3591                           ;doprnt.c: 1429: do
  3592                           
  3593                           
  3594                           ;doprnt.c: 1430: (putch(' ') );
  3595  079C  3020               	movlw	32
  3596  079D  3181  219C  3186   	fcall	_putch
  3597                           
  3598                           ;doprnt.c: 1431: while(--width);
  3599  07A0  30FF               	movlw	255
  3600  07A1  0020               	movlb	0	; select bank0
  3601  07A2  07AE               	addwf	printf@width,f
  3602  07A3  30FF               	movlw	255
  3603  07A4  3DAF               	addwfc	printf@width+1,f
  3604  07A5  082E               	movf	printf@width,w
  3605  07A6  042F               	iorwf	printf@width+1,w
  3606  07A7  1D03               	btfss	3,2
  3607  07A8  2F9C               	goto	l1494
  3608  07A9                     l1498:	
  3609                           
  3610                           ;doprnt.c: 1469: }
  3611                           ;doprnt.c: 1472: prec = c;
  3612  07A9  0830               	movf	printf@c,w
  3613  07AA  00A0               	movwf	??_printf
  3614  07AB  0820               	movf	??_printf,w
  3615  07AC  00A8               	movwf	printf@prec
  3616  07AD                     l1506:	
  3617                           ;doprnt.c: 1474: while(prec--) {
  3618                           
  3619  07AD  30FF               	movlw	255
  3620  07AE  0020               	movlb	0	; select bank0
  3621  07AF  00A0               	movwf	??_printf
  3622  07B0  0820               	movf	??_printf,w
  3623  07B1  07A8               	addwf	printf@prec,f
  3624  07B2  0A28               	incf	printf@prec,w
  3625  07B3  1903               	btfsc	3,2
  3626  07B4  2E43               	goto	l1508
  3627                           
  3628                           ;doprnt.c: 1478: {
  3629                           ;doprnt.c: 1499: {
  3630                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3631  07B5  0828               	movf	printf@prec,w
  3632  07B6  00A0               	movwf	??_printf
  3633  07B7  01A1               	clrf	??_printf+1
  3634  07B8  35A0               	lslf	??_printf,f
  3635  07B9  0DA1               	rlf	??_printf+1,f
  3636  07BA  3002               	movlw	low (_hexpowers| (0+32768))
  3637  07BB  0720               	addwf	??_printf,w
  3638  07BC  0084               	movwf	4
  3639  07BD  3089               	movlw	high (_hexpowers| (0+32768))
  3640  07BE  3D21               	addwfc	??_printf+1,w
  3641  07BF  0085               	movwf	5
  3642  07C0  3F00               	moviw [0]fsr0
  3643  07C1  00F0               	movwf	___lwdiv@divisor
  3644  07C2  3F01               	moviw [1]fsr0
  3645  07C3  00F1               	movwf	___lwdiv@divisor+1
  3646  07C4  0827               	movf	printf@val+1,w
  3647  07C5  00F3               	movwf	___lwdiv@dividend+1
  3648  07C6  0826               	movf	printf@val,w
  3649  07C7  00F2               	movwf	___lwdiv@dividend
  3650  07C8  3182  2280  3186   	fcall	___lwdiv
  3651  07CB  0870               	movf	?___lwdiv,w
  3652  07CC  390F               	andlw	15
  3653  07CD  0020               	movlb	0	; select bank0
  3654  07CE  00A2               	movwf	??_printf+2
  3655  07CF  0822               	movf	??_printf+2,w
  3656  07D0  00A4               	movwf	printf@idx
  3657                           
  3658                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3659  07D1  0824               	movf	printf@idx,w
  3660  07D2  3E6B               	addlw	low (STR_19| (0+32768))
  3661  07D3  0084               	movwf	4
  3662  07D4  3088               	movlw	high (STR_19| (0+32768))
  3663  07D5  1803               	skipnc
  3664  07D6  3E01               	addlw	1
  3665  07D7  0085               	movwf	5
  3666  07D8  0800               	movf	0,w	;code access
  3667  07D9  00A0               	movwf	??_printf
  3668  07DA  0820               	movf	??_printf,w
  3669  07DB  00B0               	movwf	printf@c
  3670                           
  3671                           ;doprnt.c: 1508: }
  3672                           ;doprnt.c: 1523: }
  3673                           ;doprnt.c: 1524: (putch(c) );
  3674  07DC  0830               	movf	printf@c,w
  3675  07DD  3181  219C  3186   	fcall	_putch
  3676  07E0  2FAD               	goto	l1506
  3677  07E1                     l302:	
  3678                           ;doprnt.c: 1540: return 0;
  3679                           ;	Return value of _printf is never used
  3680                           
  3681                           ;doprnt.c: 1525: }
  3682                           ;doprnt.c: 1533: }
  3683                           ;doprnt.c: 1535: alldone:
  3684                           
  3685  07E1  0008               	return
  3686  07E2                     __end_of_printf:	
  3687                           
  3688                           	psect	text8
  3689  019C                     __ptext8:	
  3690 ;; *************** function _putch *****************
  3691 ;; Defined at:
  3692 ;;		line 107 in file "mcc_generated_files/eusart.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  txData          1    wreg     unsigned char 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  txData          1    1[COMMON] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, pclath, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3709 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3710 ;;Total ram usage:        1 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    1
  3713 ;; This function calls:
  3714 ;;		_EUSART_Write
  3715 ;; This function is called by:
  3716 ;;		_printf
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _putch
  3722  019C                     _putch:	
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  3726                           ;putch@txData stored from wreg
  3727  019C  00F1               	movwf	putch@txData
  3728                           
  3729                           ;eusart.c: 109: EUSART_Write(txData);
  3730  019D  0871               	movf	putch@txData,w
  3731  019E  3181  21BB         	fcall	_EUSART_Write
  3732  01A0  0008               	return
  3733  01A1                     __end_of_putch:	
  3734                           
  3735                           	psect	text9
  3736  01BB                     __ptext9:	
  3737 ;; *************** function _EUSART_Write *****************
  3738 ;; Defined at:
  3739 ;;		line 93 in file "mcc_generated_files/eusart.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  txData          1    wreg     unsigned char 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  txData          1    0[COMMON] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3756 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3757 ;;Total ram usage:        1 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_putch
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _EUSART_Write
  3768  01BB                     _EUSART_Write:	
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _EUSART_Write: [wreg]
  3772                           ;EUSART_Write@txData stored from wreg
  3773  01BB  00F0               	movwf	EUSART_Write@txData
  3774  01BC                     l58:	
  3775                           ;eusart.c: 96: {
  3776                           
  3777                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  3778                           
  3779  01BC  0020               	movlb	0	; select bank0
  3780  01BD  1E11               	btfss	17,4	;volatile
  3781  01BE  29BC               	goto	l58
  3782                           
  3783                           ;eusart.c: 97: }
  3784                           ;eusart.c: 99: TXREG = txData;
  3785  01BF  0870               	movf	EUSART_Write@txData,w
  3786  01C0  0023               	movlb	3	; select bank3
  3787  01C1  009A               	movwf	26	;volatile
  3788  01C2  0008               	return
  3789  01C3                     __end_of_EUSART_Write:	
  3790                           
  3791                           	psect	text10
  3792  0280                     __ptext10:	
  3793 ;; *************** function ___lwdiv *****************
  3794 ;; Defined at:
  3795 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  divisor         2    0[COMMON] unsigned int 
  3798 ;;  dividend        2    2[COMMON] unsigned int 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  quotient        2    5[COMMON] unsigned int 
  3801 ;;  counter         1    7[COMMON] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  2    0[COMMON] unsigned int 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;Total ram usage:        8 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; This function calls:
  3818 ;;		Nothing
  3819 ;; This function is called by:
  3820 ;;		_printf
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function ___lwdiv
  3826  0280                     ___lwdiv:	
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3830  0280  01F5               	clrf	___lwdiv@quotient
  3831  0281  01F6               	clrf	___lwdiv@quotient+1
  3832  0282  0870               	movf	___lwdiv@divisor,w
  3833  0283  0471               	iorwf	___lwdiv@divisor+1,w
  3834  0284  1903               	btfsc	3,2
  3835  0285  2AAF               	goto	l1390
  3836  0286  01F7               	clrf	___lwdiv@counter
  3837  0287  0AF7               	incf	___lwdiv@counter,f
  3838  0288                     l1378:	
  3839  0288  1BF1               	btfsc	___lwdiv@divisor+1,7
  3840  0289  2A94               	goto	l1380
  3841  028A  3001               	movlw	1
  3842  028B                     u845:	
  3843  028B  35F0               	lslf	___lwdiv@divisor,f
  3844  028C  0DF1               	rlf	___lwdiv@divisor+1,f
  3845  028D  0B89               	decfsz	9,f
  3846  028E  2A8B               	goto	u845
  3847  028F  3001               	movlw	1
  3848  0290  00F4               	movwf	??___lwdiv
  3849  0291  0874               	movf	??___lwdiv,w
  3850  0292  07F7               	addwf	___lwdiv@counter,f
  3851  0293  2A88               	goto	l1378
  3852  0294                     l1380:	
  3853  0294  3001               	movlw	1
  3854  0295                     u865:	
  3855  0295  35F5               	lslf	___lwdiv@quotient,f
  3856  0296  0DF6               	rlf	___lwdiv@quotient+1,f
  3857  0297  0B89               	decfsz	9,f
  3858  0298  2A95               	goto	u865
  3859  0299  0871               	movf	___lwdiv@divisor+1,w
  3860  029A  0273               	subwf	___lwdiv@dividend+1,w
  3861  029B  1D03               	skipz
  3862  029C  2A9F               	goto	u875
  3863  029D  0870               	movf	___lwdiv@divisor,w
  3864  029E  0272               	subwf	___lwdiv@dividend,w
  3865  029F                     u875:	
  3866  029F  1C03               	skipc
  3867  02A0  2AA6               	goto	l1386
  3868  02A1  0870               	movf	___lwdiv@divisor,w
  3869  02A2  02F2               	subwf	___lwdiv@dividend,f
  3870  02A3  0871               	movf	___lwdiv@divisor+1,w
  3871  02A4  3BF3               	subwfb	___lwdiv@dividend+1,f
  3872  02A5  1475               	bsf	___lwdiv@quotient,0
  3873  02A6                     l1386:	
  3874  02A6  3001               	movlw	1
  3875  02A7                     u885:	
  3876  02A7  36F1               	lsrf	___lwdiv@divisor+1,f
  3877  02A8  0CF0               	rrf	___lwdiv@divisor,f
  3878  02A9  0B89               	decfsz	9,f
  3879  02AA  2AA7               	goto	u885
  3880  02AB  3001               	movlw	1
  3881  02AC  02F7               	subwf	___lwdiv@counter,f
  3882  02AD  1D03               	btfss	3,2
  3883  02AE  2A94               	goto	l1380
  3884  02AF                     l1390:	
  3885  02AF  0876               	movf	___lwdiv@quotient+1,w
  3886  02B0  00F1               	movwf	?___lwdiv+1
  3887  02B1  0875               	movf	___lwdiv@quotient,w
  3888  02B2  00F0               	movwf	?___lwdiv
  3889  02B3  0008               	return
  3890  02B4                     __end_of___lwdiv:	
  3891                           
  3892                           	psect	text11
  3893  0220                     __ptext11:	
  3894 ;; *************** function _SPI_send *****************
  3895 ;; Defined at:
  3896 ;;		line 83 in file "main.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  sbuf            1    wreg     PTR unsigned char 
  3899 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3900 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3901 ;;  len             1    8[COMMON] unsigned char 
  3902 ;;  rbuf            1    9[COMMON] PTR unsigned char 
  3903 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3904 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  sbuf            1    1[BANK0 ] PTR unsigned char 
  3907 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3908 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3909 ;;  bytes_writte    1    0[BANK0 ] unsigned char 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      unsigned char 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;Total ram usage:        7 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    2
  3926 ;; This function calls:
  3927 ;;		_SPI_Exchange8bitBuffer
  3928 ;; This function is called by:
  3929 ;;		_can_start
  3930 ;;		_can_txf_clear
  3931 ;;		_can_receive
  3932 ;;		_can_send
  3933 ;;		_can_status_check
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _SPI_send
  3939  0220                     _SPI_send:	
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _SPI_send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3943                           ;SPI_send@sbuf stored from wreg
  3944  0220  0020               	movlb	0	; select bank0
  3945  0221  00A1               	movwf	SPI_send@sbuf
  3946                           
  3947                           ;main.c: 84: LATAbits.LATA4 = 0;
  3948  0222  0022               	movlb	2	; select bank2
  3949  0223  120C               	bcf	12,4	;volatile
  3950                           
  3951                           ;main.c: 85: uint8_t bytes_written = SPI_Exchange8bitBuffer(sbuf, len, rbuf);
  3952  0224  0878               	movf	SPI_send@len,w
  3953  0225  00FA               	movwf	??_SPI_send
  3954  0226  087A               	movf	??_SPI_send,w
  3955  0227  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  3956  0228  0879               	movf	SPI_send@rbuf,w
  3957  0229  00FB               	movwf	??_SPI_send+1
  3958  022A  087B               	movf	??_SPI_send+1,w
  3959  022B  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  3960  022C  0020               	movlb	0	; select bank0
  3961  022D  0821               	movf	SPI_send@sbuf,w
  3962  022E  3183  2375         	fcall	_SPI_Exchange8bitBuffer
  3963  0230  00FC               	movwf	??_SPI_send+2
  3964  0231  087C               	movf	??_SPI_send+2,w
  3965  0232  0020               	movlb	0	; select bank0
  3966  0233  00A0               	movwf	SPI_send@bytes_written
  3967                           
  3968                           ;main.c: 86: LATAbits.LATA4 = 1;
  3969  0234  0022               	movlb	2	; select bank2
  3970  0235  160C               	bsf	12,4	;volatile
  3971                           
  3972                           ;main.c: 87: return bytes_written;
  3973  0236  0020               	movlb	0	; select bank0
  3974  0237  0820               	movf	SPI_send@bytes_written,w
  3975  0238  0008               	return
  3976  0239                     __end_of_SPI_send:	
  3977                           
  3978                           	psect	text12
  3979  0375                     __ptext12:	
  3980 ;; *************** function _SPI_Exchange8bitBuffer *****************
  3981 ;; Defined at:
  3982 ;;		line 91 in file "mcc_generated_files/spi.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  dataIn          1    wreg     PTR unsigned char 
  3985 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3986 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3987 ;;  bufLen          1    1[COMMON] unsigned char 
  3988 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  3989 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3990 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  3993 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3994 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3995 ;;  bytesWritten    1    7[COMMON] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      unsigned char 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;Total ram usage:        7 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    1
  4012 ;; This function calls:
  4013 ;;		_SPI_Exchange8bit
  4014 ;; This function is called by:
  4015 ;;		_SPI_send
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _SPI_Exchange8bitBuffer
  4021  0375                     _SPI_Exchange8bitBuffer:	
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4025                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  4026  0375  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  4027                           
  4028                           ;spi.c: 93: uint8_t bytesWritten = 0;
  4029  0376  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  4030                           
  4031                           ;spi.c: 95: if(bufLen != 0)
  4032  0377  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  4033  0378  1903               	btfsc	3,2
  4034  0379  2BC1               	goto	l1338
  4035                           
  4036                           ;spi.c: 96: {
  4037                           ;spi.c: 97: if(dataIn != (0))
  4038  037A  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  4039  037B  1D03               	btfss	3,2
  4040  037C  2BA3               	goto	l1326
  4041  037D  2BA8               	goto	l1328
  4042  037E                     l1318:	
  4043                           ;spi.c: 98: {
  4044                           ;spi.c: 99: while(bytesWritten < bufLen)
  4045                           
  4046                           
  4047                           ;spi.c: 100: {
  4048                           ;spi.c: 101: if(dataOut == (0))
  4049  037E  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  4050  037F  1D03               	btfss	3,2
  4051  0380  2B8C               	goto	l1322
  4052                           
  4053                           ;spi.c: 102: {
  4054                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  4055  0381  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4056  0382  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  4057  0383  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4058  0384  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4059  0385  0086               	movwf	6
  4060  0386  0187               	clrf	7
  4061  0387  0801               	movf	1,w
  4062  0388  3181  21C3  3183   	fcall	_SPI_Exchange8bit
  4063                           
  4064                           ;spi.c: 104: }
  4065  038B  2B9F               	goto	l1324
  4066  038C                     l1322:	
  4067                           
  4068                           ;spi.c: 105: else
  4069                           ;spi.c: 106: {
  4070                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  4071  038C  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4072  038D  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  4073  038E  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4074  038F  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4075  0390  0086               	movwf	6
  4076  0391  0187               	clrf	7
  4077  0392  0801               	movf	1,w
  4078  0393  3181  21C3  3183   	fcall	_SPI_Exchange8bit
  4079  0396  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  4080  0397  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4081  0398  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  4082  0399  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  4083  039A  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  4084  039B  0086               	movwf	6
  4085  039C  0187               	clrf	7
  4086  039D  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  4087  039E  0081               	movwf	1
  4088  039F                     l1324:	
  4089                           
  4090                           ;spi.c: 108: }
  4091                           ;spi.c: 110: bytesWritten++;
  4092  039F  3001               	movlw	1
  4093  03A0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4094  03A1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4095  03A2  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  4096  03A3                     l1326:	
  4097  03A3  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  4098  03A4  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  4099  03A5  1803               	btfsc	3,0
  4100  03A6  2BC1               	goto	l1338
  4101  03A7  2B7E               	goto	l1318
  4102  03A8                     l1328:	
  4103                           ;spi.c: 111: }
  4104                           ;spi.c: 112: }
  4105                           
  4106                           
  4107                           ;spi.c: 113: else
  4108                           ;spi.c: 114: {
  4109                           ;spi.c: 115: if(dataOut != (0))
  4110  03A8  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  4111  03A9  1D03               	btfss	3,2
  4112  03AA  2BBD               	goto	l1336
  4113  03AB  2BC1               	goto	l1338
  4114  03AC                     l1332:	
  4115                           ;spi.c: 116: {
  4116                           ;spi.c: 117: while(bytesWritten < bufLen )
  4117                           
  4118                           
  4119                           ;spi.c: 118: {
  4120                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  4121  03AC  3000               	movlw	0
  4122  03AD  3181  21C3  3183   	fcall	_SPI_Exchange8bit
  4123  03B0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4124  03B1  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4125  03B2  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  4126  03B3  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  4127  03B4  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  4128  03B5  0086               	movwf	6
  4129  03B6  0187               	clrf	7
  4130  03B7  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4131  03B8  0081               	movwf	1
  4132                           
  4133                           ;spi.c: 121: bytesWritten++;
  4134  03B9  3001               	movlw	1
  4135  03BA  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4136  03BB  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4137  03BC  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  4138  03BD                     l1336:	
  4139  03BD  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  4140  03BE  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  4141  03BF  1C03               	skipc
  4142  03C0  2BAC               	goto	l1332
  4143  03C1                     l1338:	
  4144                           
  4145                           ;spi.c: 122: }
  4146                           ;spi.c: 123: }
  4147                           ;spi.c: 124: }
  4148                           ;spi.c: 125: }
  4149                           ;spi.c: 127: return bytesWritten;
  4150  03C1  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4151  03C2  0008               	return
  4152  03C3                     __end_of_SPI_Exchange8bitBuffer:	
  4153                           
  4154                           	psect	text13
  4155  01C3                     __ptext13:	
  4156 ;; *************** function _SPI_Exchange8bit *****************
  4157 ;; Defined at:
  4158 ;;		line 77 in file "mcc_generated_files/spi.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  data            1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  data            1    0[COMMON] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      unsigned char 
  4165 ;; Registers used:
  4166 ;;		wreg
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;Total ram usage:        1 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_SPI_Exchange8bitBuffer
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _SPI_Exchange8bit
  4187  01C3                     _SPI_Exchange8bit:	
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _SPI_Exchange8bit: [wreg]
  4191                           ;SPI_Exchange8bit@data stored from wreg
  4192  01C3  00F0               	movwf	SPI_Exchange8bit@data
  4193                           
  4194                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  4195  01C4  0024               	movlb	4	; select bank4
  4196  01C5  1395               	bcf	21,7	;volatile
  4197                           
  4198                           ;spi.c: 82: SSP1BUF = data;
  4199  01C6  0870               	movf	SPI_Exchange8bit@data,w
  4200  01C7  0091               	movwf	17	;volatile
  4201  01C8                     l113:	
  4202                           ;spi.c: 85: {
  4203                           
  4204                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  4205                           
  4206  01C8  1C14               	btfss	20,0	;volatile
  4207  01C9  29C8               	goto	l113
  4208                           
  4209                           ;spi.c: 86: }
  4210                           ;spi.c: 88: return (SSP1BUF);
  4211  01CA  0811               	movf	17,w	;volatile
  4212  01CB  0008               	return
  4213  01CC                     __end_of_SPI_Exchange8bit:	
  4214                           
  4215                           	psect	text14
  4216  03C3                     __ptext14:	
  4217 ;; *************** function _atoi *****************
  4218 ;; Defined at:
  4219 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  s               1    wreg     PTR const unsigned char 
  4222 ;;		 -> buf(9), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  s               1   13[COMMON] PTR const unsigned char 
  4225 ;;		 -> buf(9), 
  4226 ;;  a               2   11[COMMON] int 
  4227 ;;  sign            1   10[COMMON] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  2    6[COMMON] int 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;Total ram usage:        8 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    1
  4244 ;; This function calls:
  4245 ;;		___wmul
  4246 ;;		_isdigit
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _atoi
  4254  03C3                     _atoi:	
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4258                           ;atoi@s stored from wreg
  4259  03C3  00FD               	movwf	atoi@s
  4260  03C4                     l1716:	
  4261  03C4  087D               	movf	atoi@s,w
  4262  03C5  0086               	movwf	6
  4263  03C6  0187               	clrf	7
  4264  03C7  3020               	movlw	32
  4265  03C8  0601               	xorwf	1,w
  4266  03C9  1D03               	btfss	3,2
  4267  03CA  2BD0               	goto	l1718
  4268  03CB                     l1714:	
  4269  03CB  3001               	movlw	1
  4270  03CC  00F8               	movwf	??_atoi
  4271  03CD  0878               	movf	??_atoi,w
  4272  03CE  07FD               	addwf	atoi@s,f
  4273  03CF  2BC4               	goto	l1716
  4274  03D0                     l1718:	
  4275  03D0  087D               	movf	atoi@s,w
  4276  03D1  0086               	movwf	6
  4277  03D2  0187               	clrf	7
  4278  03D3  3009               	movlw	9
  4279  03D4  0601               	xorwf	1,w
  4280  03D5  1903               	btfsc	3,2
  4281  03D6  2BCB               	goto	l1714
  4282  03D7  01FB               	clrf	atoi@a
  4283  03D8  01FC               	clrf	atoi@a+1
  4284  03D9  01FA               	clrf	atoi@sign
  4285  03DA  087D               	movf	atoi@s,w
  4286  03DB  0086               	movwf	6
  4287  03DC  0187               	clrf	7
  4288  03DD  302D               	movlw	45
  4289  03DE  0601               	xorwf	1,w
  4290  03DF  1D03               	btfss	3,2
  4291  03E0  2BE6               	goto	l1726
  4292  03E1  3001               	movlw	1
  4293  03E2  00F8               	movwf	??_atoi
  4294  03E3  0878               	movf	??_atoi,w
  4295  03E4  07FA               	addwf	atoi@sign,f
  4296  03E5  2BED               	goto	l1732
  4297  03E6                     l1726:	
  4298  03E6  087D               	movf	atoi@s,w
  4299  03E7  0086               	movwf	6
  4300  03E8  0187               	clrf	7
  4301  03E9  302B               	movlw	43
  4302  03EA  0601               	xorwf	1,w
  4303  03EB  1D03               	btfss	3,2
  4304  03EC  2BF1               	goto	l1734
  4305  03ED                     l1732:	
  4306  03ED  3001               	movlw	1
  4307  03EE  00F8               	movwf	??_atoi
  4308  03EF  0878               	movf	??_atoi,w
  4309  03F0  07FD               	addwf	atoi@s,f
  4310  03F1                     l1734:	
  4311  03F1  087D               	movf	atoi@s,w
  4312  03F2  0086               	movwf	6
  4313  03F3  0187               	clrf	7
  4314  03F4  0801               	movf	1,w
  4315  03F5  3181  21EC  3183   	fcall	_isdigit
  4316  03F8  1C03               	btfss	3,0
  4317  03F9  2C16               	goto	l1736
  4318  03FA  087C               	movf	atoi@a+1,w
  4319  03FB  00F1               	movwf	___wmul@multiplier+1
  4320  03FC  087B               	movf	atoi@a,w
  4321  03FD  00F0               	movwf	___wmul@multiplier
  4322  03FE  300A               	movlw	10
  4323  03FF  00F2               	movwf	___wmul@multiplicand
  4324  0400  3000               	movlw	0
  4325  0401  00F3               	movwf	___wmul@multiplicand+1
  4326  0402  3182  2239  3183   	fcall	___wmul
  4327  0405  087D               	movf	atoi@s,w
  4328  0406  0086               	movwf	6
  4329  0407  0187               	clrf	7
  4330  0408  0801               	movf	1,w
  4331  0409  0770               	addwf	?___wmul,w
  4332  040A  00F8               	movwf	??_atoi
  4333  040B  0871               	movf	?___wmul+1,w
  4334  040C  1803               	skipnc
  4335  040D  0A71               	incf	?___wmul+1,w
  4336  040E  00F9               	movwf	??_atoi+1
  4337  040F  0878               	movf	??_atoi,w
  4338  0410  3ED0               	addlw	208
  4339  0411  00FB               	movwf	atoi@a
  4340  0412  30FF               	movlw	255
  4341  0413  3D79               	addwfc	??_atoi+1,w
  4342  0414  00FC               	movwf	atoi@a+1
  4343  0415  2BED               	goto	l1732
  4344  0416                     l1736:	
  4345  0416  087A               	movf	atoi@sign,w
  4346  0417  1903               	btfsc	3,2
  4347  0418  2C25               	goto	l1742
  4348  0419  097B               	comf	atoi@a,w
  4349  041A  00F8               	movwf	??_atoi
  4350  041B  097C               	comf	atoi@a+1,w
  4351  041C  00F9               	movwf	??_atoi+1
  4352  041D  0AF8               	incf	??_atoi,f
  4353  041E  1903               	skipnz
  4354  041F  0AF9               	incf	??_atoi+1,f
  4355  0420  0878               	movf	??_atoi,w
  4356  0421  00F6               	movwf	?_atoi
  4357  0422  0879               	movf	??_atoi+1,w
  4358  0423  00F7               	movwf	?_atoi+1
  4359  0424  0008               	return
  4360  0425                     l1742:	
  4361  0425  087C               	movf	atoi@a+1,w
  4362  0426  00F7               	movwf	?_atoi+1
  4363  0427  087B               	movf	atoi@a,w
  4364  0428  00F6               	movwf	?_atoi
  4365  0429  0008               	return
  4366  042A                     __end_of_atoi:	
  4367                           
  4368                           	psect	text15
  4369  01EC                     __ptext15:	
  4370 ;; *************** function _isdigit *****************
  4371 ;; Defined at:
  4372 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  c               1    wreg     unsigned char 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  c               1    1[COMMON] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		wreg, status,2, status,0
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;Total ram usage:        2 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_printf
  4396 ;;		_atoi
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _isdigit
  4402  01EC                     _isdigit:	
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4406                           ;isdigit@c stored from wreg
  4407  01EC  00F1               	movwf	isdigit@c
  4408  01ED  01F0               	clrf	_isdigit$616
  4409  01EE  303A               	movlw	58
  4410  01EF  0271               	subwf	isdigit@c,w
  4411  01F0  1803               	skipnc
  4412  01F1  29F8               	goto	l1350
  4413  01F2  3030               	movlw	48
  4414  01F3  0271               	subwf	isdigit@c,w
  4415  01F4  1C03               	skipc
  4416  01F5  29F8               	goto	l1350
  4417  01F6  01F0               	clrf	_isdigit$616
  4418  01F7  0AF0               	incf	_isdigit$616,f
  4419  01F8                     l1350:	
  4420  01F8  0C70               	rrf	_isdigit$616,w
  4421  01F9  0008               	return
  4422  01FA                     __end_of_isdigit:	
  4423                           
  4424                           	psect	text16
  4425  0239                     __ptext16:	
  4426 ;; *************** function ___wmul *****************
  4427 ;; Defined at:
  4428 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  multiplier      2    0[COMMON] unsigned int 
  4431 ;;  multiplicand    2    2[COMMON] unsigned int 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  product         2    4[COMMON] unsigned int 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  2    0[COMMON] unsigned int 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;Total ram usage:        6 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_printf
  4453 ;;		_atoi
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           
  4458                           ;psect for function ___wmul
  4459  0239                     ___wmul:	
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4463  0239  01F4               	clrf	___wmul@product
  4464  023A  01F5               	clrf	___wmul@product+1
  4465  023B                     l1356:	
  4466  023B  1C70               	btfss	___wmul@multiplier,0
  4467  023C  2A41               	goto	l386
  4468  023D  0872               	movf	___wmul@multiplicand,w
  4469  023E  07F4               	addwf	___wmul@product,f
  4470  023F  0873               	movf	___wmul@multiplicand+1,w
  4471  0240  3DF5               	addwfc	___wmul@product+1,f
  4472  0241                     l386:	
  4473  0241  3001               	movlw	1
  4474  0242                     u805:	
  4475  0242  35F2               	lslf	___wmul@multiplicand,f
  4476  0243  0DF3               	rlf	___wmul@multiplicand+1,f
  4477  0244  0B89               	decfsz	9,f
  4478  0245  2A42               	goto	u805
  4479  0246  3001               	movlw	1
  4480  0247                     u815:	
  4481  0247  36F1               	lsrf	___wmul@multiplier+1,f
  4482  0248  0CF0               	rrf	___wmul@multiplier,f
  4483  0249  0B89               	decfsz	9,f
  4484  024A  2A47               	goto	u815
  4485  024B  0870               	movf	___wmul@multiplier,w
  4486  024C  0471               	iorwf	___wmul@multiplier+1,w
  4487  024D  1D03               	btfss	3,2
  4488  024E  2A3B               	goto	l1356
  4489  024F  0875               	movf	___wmul@product+1,w
  4490  0250  00F1               	movwf	?___wmul+1
  4491  0251  0874               	movf	___wmul@product,w
  4492  0252  00F0               	movwf	?___wmul
  4493  0253  0008               	return
  4494  0254                     __end_of___wmul:	
  4495                           
  4496                           	psect	text17
  4497  01FA                     __ptext17:	
  4498 ;; *************** function _SYSTEM_Initialize *****************
  4499 ;; Defined at:
  4500 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;Total ram usage:        0 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    1
  4521 ;; This function calls:
  4522 ;;		_EUSART_Initialize
  4523 ;;		_OSCILLATOR_Initialize
  4524 ;;		_PIN_MANAGER_Initialize
  4525 ;;		_SPI_Initialize
  4526 ;;		_WDT_Initialize
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           
  4533                           ;psect for function _SYSTEM_Initialize
  4534  01FA                     _SYSTEM_Initialize:	
  4535                           
  4536                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4537                           
  4538                           ;incstack = 0
  4539                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4540  01FA  3182  2209  3181   	fcall	_PIN_MANAGER_Initialize
  4541                           
  4542                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4543  01FD  3181  21AD  3181   	fcall	_OSCILLATOR_Initialize
  4544                           
  4545                           ;mcc.c: 75: WDT_Initialize();
  4546  0200  3181  2198  3181   	fcall	_WDT_Initialize
  4547                           
  4548                           ;mcc.c: 76: SPI_Initialize();
  4549  0203  3181  21B4  3181   	fcall	_SPI_Initialize
  4550                           
  4551                           ;mcc.c: 77: EUSART_Initialize();
  4552  0206  3181  21D6         	fcall	_EUSART_Initialize
  4553  0208  0008               	return
  4554  0209                     __end_of_SYSTEM_Initialize:	
  4555                           
  4556                           	psect	text18
  4557  0198                     __ptext18:	
  4558 ;; *************** function _WDT_Initialize *****************
  4559 ;; Defined at:
  4560 ;;		line 90 in file "mcc_generated_files/mcc.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_SYSTEM_Initialize
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _WDT_Initialize
  4589  0198                     _WDT_Initialize:	
  4590                           
  4591                           ;mcc.c: 93: WDTCON = 0x16;
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _WDT_Initialize: [wreg]
  4595  0198  3016               	movlw	22
  4596  0199  0021               	movlb	1	; select bank1
  4597  019A  0097               	movwf	23	;volatile
  4598  019B  0008               	return
  4599  019C                     __end_of_WDT_Initialize:	
  4600                           
  4601                           	psect	text19
  4602  01B4                     __ptext19:	
  4603 ;; *************** function _SPI_Initialize *****************
  4604 ;; Defined at:
  4605 ;;		line 63 in file "mcc_generated_files/spi.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;Total ram usage:        0 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_SYSTEM_Initialize
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           
  4633                           ;psect for function _SPI_Initialize
  4634  01B4                     _SPI_Initialize:	
  4635                           
  4636                           ;spi.c: 68: SSP1STAT = 0x40;
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4640  01B4  3040               	movlw	64
  4641  01B5  0024               	movlb	4	; select bank4
  4642  01B6  0094               	movwf	20	;volatile
  4643                           
  4644                           ;spi.c: 71: SSP1CON1 = 0x20;
  4645  01B7  3020               	movlw	32
  4646  01B8  0095               	movwf	21	;volatile
  4647                           
  4648                           ;spi.c: 74: SSP1ADD = 0x00;
  4649  01B9  0192               	clrf	18	;volatile
  4650  01BA  0008               	return
  4651  01BB                     __end_of_SPI_Initialize:	
  4652                           
  4653                           	psect	text20
  4654  0209                     __ptext20:	
  4655 ;; *************** function _PIN_MANAGER_Initialize *****************
  4656 ;; Defined at:
  4657 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_SYSTEM_Initialize
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _PIN_MANAGER_Initialize
  4686  0209                     _PIN_MANAGER_Initialize:	
  4687                           
  4688                           ;pin_manager.c: 57: LATA = 0x10;
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4692  0209  3010               	movlw	16
  4693  020A  0022               	movlb	2	; select bank2
  4694  020B  008C               	movwf	12	;volatile
  4695                           
  4696                           ;pin_manager.c: 58: LATC = 0x00;
  4697  020C  018E               	clrf	14	;volatile
  4698                           
  4699                           ;pin_manager.c: 63: TRISA = 0x2F;
  4700  020D  302F               	movlw	47
  4701  020E  0021               	movlb	1	; select bank1
  4702  020F  008C               	movwf	12	;volatile
  4703                           
  4704                           ;pin_manager.c: 64: TRISC = 0x32;
  4705  0210  3032               	movlw	50
  4706  0211  008E               	movwf	14	;volatile
  4707                           
  4708                           ;pin_manager.c: 69: ANSELC = 0x00;
  4709  0212  0023               	movlb	3	; select bank3
  4710  0213  018E               	clrf	14	;volatile
  4711                           
  4712                           ;pin_manager.c: 70: ANSELA = 0x07;
  4713  0214  3007               	movlw	7
  4714  0215  008C               	movwf	12	;volatile
  4715                           
  4716                           ;pin_manager.c: 75: WPUA = 0x00;
  4717  0216  0024               	movlb	4	; select bank4
  4718  0217  018C               	clrf	12	;volatile
  4719                           
  4720                           ;pin_manager.c: 76: WPUC = 0x30;
  4721  0218  3030               	movlw	48
  4722  0219  008E               	movwf	14	;volatile
  4723                           
  4724                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4725  021A  0021               	movlb	1	; select bank1
  4726  021B  1395               	bcf	21,7	;volatile
  4727                           
  4728                           ;pin_manager.c: 83: APFCON1 = 0x00;
  4729  021C  0022               	movlb	2	; select bank2
  4730  021D  019E               	clrf	30	;volatile
  4731                           
  4732                           ;pin_manager.c: 84: APFCON0 = 0x00;
  4733  021E  019D               	clrf	29	;volatile
  4734  021F  0008               	return
  4735  0220                     __end_of_PIN_MANAGER_Initialize:	
  4736                           
  4737                           	psect	text21
  4738  01AD                     __ptext21:	
  4739 ;; *************** function _OSCILLATOR_Initialize *****************
  4740 ;; Defined at:
  4741 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;Total ram usage:        0 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_SYSTEM_Initialize
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function _OSCILLATOR_Initialize
  4770  01AD                     _OSCILLATOR_Initialize:	
  4771                           
  4772                           ;mcc.c: 83: OSCCON = 0x60;
  4773                           
  4774                           ;incstack = 0
  4775                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4776  01AD  3060               	movlw	96
  4777  01AE  0021               	movlb	1	; select bank1
  4778  01AF  0099               	movwf	25	;volatile
  4779                           
  4780                           ;mcc.c: 85: OSCTUNE = 0x00;
  4781  01B0  0198               	clrf	24	;volatile
  4782                           
  4783                           ;mcc.c: 87: BORCON = 0x00;
  4784  01B1  0022               	movlb	2	; select bank2
  4785  01B2  0196               	clrf	22	;volatile
  4786  01B3  0008               	return
  4787  01B4                     __end_of_OSCILLATOR_Initialize:	
  4788                           
  4789                           	psect	text22
  4790  01D6                     __ptext22:	
  4791 ;; *************** function _EUSART_Initialize *****************
  4792 ;; Defined at:
  4793 ;;		line 53 in file "mcc_generated_files/eusart.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_SYSTEM_Initialize
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _EUSART_Initialize
  4822  01D6                     _EUSART_Initialize:	
  4823                           
  4824                           ;eusart.c: 58: BAUDCON = 0x08;
  4825                           
  4826                           ;incstack = 0
  4827                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4828  01D6  3008               	movlw	8
  4829  01D7  0023               	movlb	3	; select bank3
  4830  01D8  009F               	movwf	31	;volatile
  4831                           
  4832                           ;eusart.c: 61: RCSTA = 0x90;
  4833  01D9  3090               	movlw	144
  4834  01DA  009D               	movwf	29	;volatile
  4835                           
  4836                           ;eusart.c: 64: TXSTA = 0x24;
  4837  01DB  3024               	movlw	36
  4838  01DC  009E               	movwf	30	;volatile
  4839                           
  4840                           ;eusart.c: 67: SPBRGL = 0x33;
  4841  01DD  3033               	movlw	51
  4842  01DE  009B               	movwf	27	;volatile
  4843                           
  4844                           ;eusart.c: 70: SPBRGH = 0x00;
  4845  01DF  019C               	clrf	28	;volatile
  4846  01E0  0008               	return
  4847  01E1                     __end_of_EUSART_Initialize:	
  4848                           
  4849                           	psect	text23
  4850  01CC                     __ptext23:	
  4851 ;; *************** function _EUSART_Read *****************
  4852 ;; Defined at:
  4853 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      unsigned char 
  4860 ;; Registers used:
  4861 ;;		wreg
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;;		_getch
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           
  4882                           ;psect for function _EUSART_Read
  4883  01CC                     _EUSART_Read:	
  4884  01CC                     l51:	
  4885                           ;eusart.c: 78: {
  4886                           
  4887                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _EUSART_Read: [wreg]
  4891                           
  4892  01CC  0020               	movlb	0	; select bank0
  4893  01CD  1E91               	btfss	17,5	;volatile
  4894  01CE  29CC               	goto	l51
  4895                           
  4896                           ;eusart.c: 79: }
  4897                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  4898  01CF  0023               	movlb	3	; select bank3
  4899  01D0  1C9D               	btfss	29,1	;volatile
  4900  01D1  29D4               	goto	l1606
  4901                           
  4902                           ;eusart.c: 83: {
  4903                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  4904  01D2  121D               	bcf	29,4	;volatile
  4905                           
  4906                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  4907  01D3  161D               	bsf	29,4	;volatile
  4908  01D4                     l1606:	
  4909                           
  4910                           ;eusart.c: 88: }
  4911                           ;eusart.c: 90: return RCREG;
  4912  01D4  0819               	movf	25,w	;volatile
  4913  01D5  0008               	return
  4914  01D6                     __end_of_EUSART_Read:	
  4915  007E                     btemp	set	126	;btemp
  4916  007E                     wtemp0	set	126


Data Sizes:
    Strings     267
    Constant    14
    Data        11
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      67
    BANK1            80      0      29
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK0[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_18(CODE[7]), printf@c(BANK0[1]), buf(BANK0[9]), rx_buf(BANK1[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_17(CODE[25]), STR_16(CODE[19]), STR_15(CODE[24]), STR_14(CODE[18]), 
		 -> STR_13(CODE[3]), STR_12(CODE[13]), STR_11(CODE[13]), STR_10(CODE[16]), 
		 -> STR_9(CODE[16]), STR_8(CODE[20]), STR_7(CODE[22]), STR_6(CODE[14]), 
		 -> STR_5(CODE[15]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[15]), 
		 -> STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK0[9]), 

    SPI_send@rbuf	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK1[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_send@sbuf	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK1[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK1[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK1[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _main->_printf
    _set_sid->_printf
    _can_status_check->_printf
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_start->_printf
    _can_send->_printf
    _printf->___lwdiv
    _putch->_EUSART_Write
    _SPI_send->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_start->_printf
    _can_send->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   27184
                                             36 BANK0      7     7      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                           _can_send
                          _can_start
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    2739
                                             17 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     7     7      0   11465
                                             29 BANK0      7     7      0
                           _SPI_send
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                       10    10      0    2142
                                              2 BANK0     10    10      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         12    12      0    4665
                                             17 BANK0     12    12      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_start                                            7     7      0    4617
                                             17 BANK0      7     7      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            13    11      2    5168
                                             17 BANK0     13    11      2
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    21      6    2499
                                              8 COMMON     6     0      6
                                              0 BANK0     17    17      0
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             7     5      2    1951
                                              8 COMMON     5     3      2
                                              0 BANK0      2     2      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     532
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     627
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_send
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_start
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2B      43       5       83.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      1D       7       36.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      6E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      6E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 04:55:00 2018

                    _SPI_Initialize 01B4               __end_of_can_txf_clear 0280  
                                 _c 004E                         __CFG_CP$OFF 0000  
                                l51 01CC                                  l58 01BC  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 0917  
               ___wmul@multiplicand 0072                         __CFG_LVP$ON 0000  
                               l113 01C8                                 l213 0356  
                               l302 07E1                                 l215 0363  
                               l217 0369                                 l219 036F  
                               l257 0664                                 l386 0241  
          __end_of_can_status_check 0375                        __CFG_CPD$OFF 0000  
                               u805 0242                                 u815 0247  
                               u845 028B                                 u865 0295  
                               u875 029F                                 u955 06D9  
                               u885 02A7                                 u995 075F  
                               _abc 0911                                 _buf 004F  
                               _cnt 004D                                 _sid 004B  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000                        ?_EUSART_Read 0070  
                              l1400 065F                                l1322 038C  
                              l1332 03AC                                l1324 039F  
                              l1420 06AF                                l1412 0680  
                              l1350 01F8                                l1318 037E  
                              l1326 03A3                                l1406 066A  
                              l1336 03BD                                l1328 03A8  
                              l1432 06C5                                l1408 0673  
                              l1338 03C1                                l1506 07AD  
                              l1450 0709                                l1442 06E2  
                              l1434 06D3                                l1356 023B  
                              l1380 0294                                l1444 06F1  
                              l1428 06C3                                l1460 071D  
                              l1508 0643                                l1606 01D4  
                              l1390 02AF                                l1454 0714  
                              l1438 06E0                                l1462 0738  
                              l1472 074A                                l1448 06FE  
                              l1714 03CB                                l1386 02A6  
                              l1378 0288                                l1482 0785  
                              l1732 03ED                                l1716 03C4  
                              l1492 0798                                l1484 0788  
                              l1742 0425                                l1734 03F1  
                              l1726 03E6                                l1718 03D0  
                              l1494 079C                                l1478 0769  
                              l1654 0594                                l1736 0416  
                              l1656 05C0                                l1498 07A9  
                              l1684 063C                                l1756 04D8  
                              l1782 0532                                l1776 051A  
                              l1786 0536                                l1796 0565  
                              l1798 056C                                STR_1 0844  
                              STR_2 08CB                                STR_3 087C  
                              STR_4 089C                                STR_5 08BC  
                              STR_6 08DA                                STR_7 081A  
                              STR_8 0830                                STR_9 088C  
                              u1015 0778                                u1104 049D  
                              u1105 049C                                u1135 02C6  
                              _LATA 010C                                u1174 0622  
                              u1094 025D                                u1175 0621  
                              u1095 025C                                _LATC 010E  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 03C3                                _main 04CB  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 01BB  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 03C3  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 00A1       __end_of_OSCILLATOR_Initialize 01B4  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 08AC                               STR_11 08E8  
                             STR_12 08F5                               STR_13 0914  
                             STR_14 0859                               STR_15 0802  
                             STR_16 0858                               STR_17 0801  
                     __CFG_WDTE$OFF 0000                               STR_18 090A  
                             STR_19 086B                     __end_of___lwdiv 02B4  
     can_status_check@bytes_written 0040                               _RCREG 0199  
                             _RCSTA 019D                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                      _WDT_Initialize 0198  
                   __end_of_isdigit 01FA                               atoi@a 007B  
                             atoi@s 007D                               _putch 019C  
                     can_send@F2952 005B                       can_send@F2953 0058  
                   __end_of_set_sid 02EC                    __end_of_SPI_send 0239  
                             status 0003                               wtemp0 007E  
                   ?_SPI_Initialize 0070                       can_send@debug 0038  
                   __initialization 07E2                        __end_of_atoi 042A  
                      __end_of_main 056F              can_start@bytes_written 0034  
                    ??_EUSART_Write 0070              can_status_check@status 0043  
                            ??_atoi 0078                              ??_main 0044  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 019C  
          __end_of_SPI_Exchange8bit 01CC                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_send 063E  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0239  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                  __end_of_max_char 0801           can_txf_clear@can_int_flag 0028  
                            _printf 063E                              _rx_buf 00A0  
                            _tx_buf 00AF                              main@rc 0049  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 0033                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 01FA             __end_of__initialization 07FD  
                    can_receive@dlc 0036                  ?_SYSTEM_Initialize 0070  
                    __pcstackCOMMON 0070                        __pidataBANK0 01E1  
               ??_SYSTEM_Initialize 0070                  __size_of_can_start 0041  
                     __end_of_putch 01A1                        SPI_send@rbuf 0079  
                      SPI_send@sbuf 0021                          __end_of_nm 0919  
                         ?_SPI_send 0078                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 003D  
         __end_of_SYSTEM_Initialize 0209                             ??_putch 0071  
                        __pbssBANK0 004B                          __pbssBANK1 00A0  
              __end_of_EUSART_Write 01C3                          __pmaintext 04CB  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
           can_receive@can_int_flag 0038                             ?_printf 0078  
                        ??_SPI_send 007A                           ?_can_send 0031  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211                   __end_of_can_start 032D  
            __size_of_can_txf_clear 002C                    ??_SPI_Initialize 0070  
                    can_start@F2930 005E                       ??_can_receive 0031  
                   __size_of___wmul 001B                             ___lwdiv 0280  
                           __ptext1 02B4                             __ptext2 032D  
                           __ptext3 0254                             __ptext4 042A  
                           __ptext5 02EC                             __ptext6 056F  
                           __ptext7 063E                             __ptext8 019C  
                           __ptext9 01BB                     __size_of_printf 01A4  
                 __end_of_hexpowers 090A               _OSCILLATOR_Initialize 01AD  
                        ??_can_send 0033                             _isdigit 01EC  
          ??_PIN_MANAGER_Initialize 0070                             _set_sid 02B4  
    can_status_check@can_status_buf 0041                   ?_SPI_Exchange8bit 0070  
                    can_txf_clear@n 0025                         set_sid@sidh 0037  
                       set_sid@sidl 0038          __size_of_SYSTEM_Initialize 000F  
                           main@sid 0047                             clrloop0 01A2  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070               can_receive@bytes_read 0034  
                           init_ram 01A7                             initloop 01A8  
                 _EUSART_Initialize 01D6                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 0030  
                           printf@f 0078                       _can_txf_clear 0254  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_receive 04CB                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                     can_receive@mask 0037  
         __end_of_EUSART_Initialize 01E1                          main@rc_386 004A  
                 can_txf_clear@mask 0026                         printf@width 002E  
          ??_SPI_Exchange8bitBuffer 0073                      ?_can_txf_clear 0070  
                    __end_of___wmul 0254               can_status_check@F2958 0061  
                      _EUSART_Write 01BB              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 07E2                 start_initialization 07E2  
                      can_receive@n 003C                   __size_of_SPI_send 0019  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 0914  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         __size_of_can_status_check 0048               can_start@can_ctrl_buf 0035  
                          ??___wmul 0074                         _can_receive 042A  
                       __pdataBANK0 0058                            ??_printf 0020  
          can_receive@bytes_written 0035                           ___latbits 0002  
                     __pcstackBANK0 0020                   __size_of_can_send 00CF  
     SPI_Exchange8bitBuffer@dataOut 0072                         SPI_send@len 0078  
        __size_of_EUSART_Initialize 000B                           _can_start 02EC  
               __end_of_EUSART_Read 01D6     __size_of_SPI_Exchange8bitBuffer 004E  
                   ??_can_txf_clear 0022                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0209                            ?___lwdiv 0070  
                          ?_isdigit 0070                           can_send@i 003D  
                         can_send@n 0036                            ?_set_sid 0031  
                         _hexpowers 0902                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                      ___wmul@product 0074  
                          _LATAbits 010C                          ?_can_start 0070  
                         clear_ram0 01A1                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214                   ___wmul@multiplier 0070  
                          _SPI_send 0220              _SPI_Exchange8bitBuffer 0375  
                        printf@flag 0025                          printf@prec 0028  
                       _EUSART_Read 01CC                         can_send@buf 0031  
                       can_send@cnt 0032                         can_send@len 0037  
                  _can_status_check 032D             __size_of_SPI_Initialize 0007  
           ??_OSCILLATOR_Initialize 0070                    __size_of___lwdiv 0034  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$616 0070  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 056F  
                  __size_of_isdigit 000E                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0280  
                          __ptext11 0220                            __ptext20 0209  
                          __ptext12 0375                            __ptext21 01AD  
                          __ptext13 01C3                            __ptext22 01D6  
                          __ptext14 03C3                            __ptext23 01CC  
                          __ptext15 01EC                            __ptext16 0239  
                          __ptext17 01FA                            __ptext18 0198  
                          __ptext19 01B4                    __size_of_set_sid 0038  
                      _SSP1CON1bits 0215                            _max_char 0800  
                     __size_of_atoi 0067                       __size_of_main 00A4  
                       ??_can_start 0031                can_send@txb_ctrl_buf 003C  
                      ?_can_receive 0070                            atoi@sign 007A  
                         printf@idx 0024                           printf@len 002C  
                         printf@val 0026                        _SSP1STATbits 0214  
             SPI_send@bytes_written 0020                      __pstringtext10 087C  
                    __pstringtext11 088C                      __pstringtext20 0914  
                    __pstringtext12 089C                      __pstringtext21 0000  
                    __pstringtext13 08AC                      __pstringtext14 08BC  
                    __pstringtext15 08CB                      __pstringtext16 08DA  
                    __pstringtext17 08E8                      __pstringtext18 08F5  
                    __pstringtext19 090A                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                  _SPI_Exchange8bit 01C3               can_send@bytes_written 003B  
                          printf@ap 002B                            printf@cp 0029  
        can_txf_clear@bytes_written 0027                       __pstringtext1 0902  
                     __pstringtext2 0911                       __pstringtext3 0917  
                     __pstringtext4 0800                       __pstringtext5 081A  
                     __pstringtext6 0830                       __pstringtext7 0844  
                     __pstringtext8 0858                       __pstringtext9 086B  
                EUSART_Write@txData 0070      __end_of_PIN_MANAGER_Initialize 0220  
                   set_sid@can_node 0031  
