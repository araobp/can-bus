

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 17 06:19:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	stringtext55,global,class=STRCODE,delta=2
    60                           	psect	stringtext56,global,class=STRCODE,delta=2
    61                           	psect	cinit,global,class=CODE,merge=1,delta=2
    62                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    63                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	clrtext,global,class=CODE,delta=2
    65                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    67                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    68                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    69                           	psect	text1,local,class=CODE,merge=1,delta=2
    70                           	psect	text2,local,class=CODE,merge=1,delta=2
    71                           	psect	text3,local,class=CODE,merge=1,delta=2
    72                           	psect	text4,local,class=CODE,merge=1,delta=2
    73                           	psect	text5,local,class=CODE,merge=1,delta=2
    74                           	psect	text6,local,class=CODE,merge=1,delta=2
    75                           	psect	text7,local,class=CODE,merge=1,delta=2
    76                           	psect	text8,local,class=CODE,merge=1,delta=2
    77                           	psect	text9,local,class=CODE,merge=1,delta=2
    78                           	psect	text10,local,class=CODE,merge=1,delta=2
    79                           	psect	text11,local,class=CODE,merge=1,delta=2
    80                           	psect	text12,local,class=CODE,merge=1,delta=2
    81                           	psect	text13,local,class=CODE,merge=1,delta=2
    82                           	psect	text14,local,class=CODE,merge=1,delta=2
    83                           	psect	text15,local,class=CODE,merge=1,delta=2
    84                           	psect	text16,local,class=CODE,merge=1,delta=2
    85                           	psect	text17,local,class=CODE,merge=1,delta=2
    86                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text20,local,class=CODE,merge=1,delta=2
    89                           	psect	text21,local,class=CODE,merge=1,delta=2
    90                           	psect	text22,local,class=CODE,merge=1,delta=2
    91                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text26,local,class=CODE,merge=1,delta=2
    95                           	psect	text27,local,class=CODE,merge=1,delta=2
    96                           	psect	text28,local,class=CODE,merge=1,delta=2
    97                           	psect	text29,local,class=CODE,merge=1,delta=2
    98                           	psect	text30,local,class=CODE,merge=1,delta=2
    99                           	psect	text31,local,class=CODE,merge=1,delta=2
   100                           	psect	text32,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     
   103                           ; Version 1.45
   104                           ; Generated 16/11/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC16F1825 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  008C                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  020C                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038E                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  039A                     	;# 
   262  039C                     	;# 
   263  039D                     	;# 
   264  039E                     	;# 
   265  039F                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0098                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010E                     	;# 
   329  0111                     	;# 
   330  0112                     	;# 
   331  0113                     	;# 
   332  0114                     	;# 
   333  0115                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  0118                     	;# 
   337  0119                     	;# 
   338  011A                     	;# 
   339  011B                     	;# 
   340  011D                     	;# 
   341  011E                     	;# 
   342  018C                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019D                     	;# 
   359  019E                     	;# 
   360  019F                     	;# 
   361  020C                     	;# 
   362  020E                     	;# 
   363  0211                     	;# 
   364  0211                     	;# 
   365  0212                     	;# 
   366  0212                     	;# 
   367  0213                     	;# 
   368  0213                     	;# 
   369  0214                     	;# 
   370  0214                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0216                     	;# 
   376  0217                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038E                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  039A                     	;# 
   408  039C                     	;# 
   409  039D                     	;# 
   410  039E                     	;# 
   411  039F                     	;# 
   412  0415                     	;# 
   413  0416                     	;# 
   414  0417                     	;# 
   415  041C                     	;# 
   416  041D                     	;# 
   417  041E                     	;# 
   418  0FE4                     	;# 
   419  0FE5                     	;# 
   420  0FE6                     	;# 
   421  0FE7                     	;# 
   422  0FE8                     	;# 
   423  0FE9                     	;# 
   424  0FEA                     	;# 
   425  0FEB                     	;# 
   426  0FED                     	;# 
   427  0FEE                     	;# 
   428  0FEF                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0008                     	;# 
   438  0009                     	;# 
   439  000A                     	;# 
   440  000B                     	;# 
   441  000C                     	;# 
   442  000E                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  008C                     	;# 
   458  008E                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010E                     	;# 
   475  0111                     	;# 
   476  0112                     	;# 
   477  0113                     	;# 
   478  0114                     	;# 
   479  0115                     	;# 
   480  0116                     	;# 
   481  0117                     	;# 
   482  0118                     	;# 
   483  0119                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011D                     	;# 
   487  011E                     	;# 
   488  018C                     	;# 
   489  018E                     	;# 
   490  0191                     	;# 
   491  0191                     	;# 
   492  0192                     	;# 
   493  0193                     	;# 
   494  0193                     	;# 
   495  0193                     	;# 
   496  0194                     	;# 
   497  0195                     	;# 
   498  0196                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019E                     	;# 
   506  019F                     	;# 
   507  020C                     	;# 
   508  020E                     	;# 
   509  0211                     	;# 
   510  0211                     	;# 
   511  0212                     	;# 
   512  0212                     	;# 
   513  0213                     	;# 
   514  0213                     	;# 
   515  0214                     	;# 
   516  0214                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0215                     	;# 
   520  0216                     	;# 
   521  0216                     	;# 
   522  0217                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029D                     	;# 
   539  029E                     	;# 
   540  0311                     	;# 
   541  0311                     	;# 
   542  0312                     	;# 
   543  0313                     	;# 
   544  0318                     	;# 
   545  0318                     	;# 
   546  0319                     	;# 
   547  031A                     	;# 
   548  038C                     	;# 
   549  038E                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000E                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008E                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010E                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0113                     	;# 
   624  0114                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011A                     	;# 
   631  011B                     	;# 
   632  011D                     	;# 
   633  011E                     	;# 
   634  018C                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  029B                     	;# 
   683  029C                     	;# 
   684  029D                     	;# 
   685  029E                     	;# 
   686  0311                     	;# 
   687  0311                     	;# 
   688  0312                     	;# 
   689  0313                     	;# 
   690  0318                     	;# 
   691  0318                     	;# 
   692  0319                     	;# 
   693  031A                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  039A                     	;# 
   700  039C                     	;# 
   701  039D                     	;# 
   702  039E                     	;# 
   703  039F                     	;# 
   704  0415                     	;# 
   705  0416                     	;# 
   706  0417                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  001E                     	;# 
   748  001F                     	;# 
   749  008C                     	;# 
   750  008E                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010E                     	;# 
   767  0111                     	;# 
   768  0112                     	;# 
   769  0113                     	;# 
   770  0114                     	;# 
   771  0115                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  0118                     	;# 
   775  0119                     	;# 
   776  011A                     	;# 
   777  011B                     	;# 
   778  011D                     	;# 
   779  011E                     	;# 
   780  018C                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  0311                     	;# 
   833  0311                     	;# 
   834  0312                     	;# 
   835  0313                     	;# 
   836  0318                     	;# 
   837  0318                     	;# 
   838  0319                     	;# 
   839  031A                     	;# 
   840  038C                     	;# 
   841  038E                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  039A                     	;# 
   846  039C                     	;# 
   847  039D                     	;# 
   848  039E                     	;# 
   849  039F                     	;# 
   850  0415                     	;# 
   851  0416                     	;# 
   852  0417                     	;# 
   853  041C                     	;# 
   854  041D                     	;# 
   855  041E                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000E                     	;# 
   881  0011                     	;# 
   882  0012                     	;# 
   883  0013                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0016                     	;# 
   887  0017                     	;# 
   888  0018                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001E                     	;# 
   894  001F                     	;# 
   895  008C                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0097                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010E                     	;# 
   913  0111                     	;# 
   914  0112                     	;# 
   915  0113                     	;# 
   916  0114                     	;# 
   917  0115                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  0118                     	;# 
   921  0119                     	;# 
   922  011A                     	;# 
   923  011B                     	;# 
   924  011D                     	;# 
   925  011E                     	;# 
   926  018C                     	;# 
   927  018E                     	;# 
   928  0191                     	;# 
   929  0191                     	;# 
   930  0192                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0193                     	;# 
   934  0194                     	;# 
   935  0195                     	;# 
   936  0196                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019D                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  020C                     	;# 
   946  020E                     	;# 
   947  0211                     	;# 
   948  0211                     	;# 
   949  0212                     	;# 
   950  0212                     	;# 
   951  0213                     	;# 
   952  0213                     	;# 
   953  0214                     	;# 
   954  0214                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0216                     	;# 
   959  0216                     	;# 
   960  0217                     	;# 
   961  0217                     	;# 
   962  0291                     	;# 
   963  0291                     	;# 
   964  0292                     	;# 
   965  0293                     	;# 
   966  0294                     	;# 
   967  0295                     	;# 
   968  0295                     	;# 
   969  0296                     	;# 
   970  0298                     	;# 
   971  0298                     	;# 
   972  0299                     	;# 
   973  029A                     	;# 
   974  029B                     	;# 
   975  029C                     	;# 
   976  029D                     	;# 
   977  029E                     	;# 
   978  0311                     	;# 
   979  0311                     	;# 
   980  0312                     	;# 
   981  0313                     	;# 
   982  0318                     	;# 
   983  0318                     	;# 
   984  0319                     	;# 
   985  031A                     	;# 
   986  038C                     	;# 
   987  038E                     	;# 
   988  0391                     	;# 
   989  0392                     	;# 
   990  0393                     	;# 
   991  039A                     	;# 
   992  039C                     	;# 
   993  039D                     	;# 
   994  039E                     	;# 
   995  039F                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0FE4                     	;# 
  1003  0FE5                     	;# 
  1004  0FE6                     	;# 
  1005  0FE7                     	;# 
  1006  0FE8                     	;# 
  1007  0FE9                     	;# 
  1008  0FEA                     	;# 
  1009  0FEB                     	;# 
  1010  0FED                     	;# 
  1011  0FEE                     	;# 
  1012  0FEF                     	;# 
  1013  0000                     	;# 
  1014  0001                     	;# 
  1015  0002                     	;# 
  1016  0003                     	;# 
  1017  0004                     	;# 
  1018  0005                     	;# 
  1019  0006                     	;# 
  1020  0007                     	;# 
  1021  0008                     	;# 
  1022  0009                     	;# 
  1023  000A                     	;# 
  1024  000B                     	;# 
  1025  000C                     	;# 
  1026  000E                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001C                     	;# 
  1039  001E                     	;# 
  1040  001F                     	;# 
  1041  008C                     	;# 
  1042  008E                     	;# 
  1043  0091                     	;# 
  1044  0092                     	;# 
  1045  0093                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0098                     	;# 
  1050  0099                     	;# 
  1051  009A                     	;# 
  1052  009B                     	;# 
  1053  009B                     	;# 
  1054  009C                     	;# 
  1055  009D                     	;# 
  1056  009E                     	;# 
  1057  010C                     	;# 
  1058  010E                     	;# 
  1059  0111                     	;# 
  1060  0112                     	;# 
  1061  0113                     	;# 
  1062  0114                     	;# 
  1063  0115                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  0118                     	;# 
  1067  0119                     	;# 
  1068  011A                     	;# 
  1069  011B                     	;# 
  1070  011D                     	;# 
  1071  011E                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019D                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020E                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0291                     	;# 
  1109  0291                     	;# 
  1110  0292                     	;# 
  1111  0293                     	;# 
  1112  0294                     	;# 
  1113  0295                     	;# 
  1114  0295                     	;# 
  1115  0296                     	;# 
  1116  0298                     	;# 
  1117  0298                     	;# 
  1118  0299                     	;# 
  1119  029A                     	;# 
  1120  029B                     	;# 
  1121  029C                     	;# 
  1122  029D                     	;# 
  1123  029E                     	;# 
  1124  0311                     	;# 
  1125  0311                     	;# 
  1126  0312                     	;# 
  1127  0313                     	;# 
  1128  0318                     	;# 
  1129  0318                     	;# 
  1130  0319                     	;# 
  1131  031A                     	;# 
  1132  038C                     	;# 
  1133  038E                     	;# 
  1134  0391                     	;# 
  1135  0392                     	;# 
  1136  0393                     	;# 
  1137  039A                     	;# 
  1138  039C                     	;# 
  1139  039D                     	;# 
  1140  039E                     	;# 
  1141  039F                     	;# 
  1142  0415                     	;# 
  1143  0416                     	;# 
  1144  0417                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159                           
  1160                           	psect	stringtext1
  1161  13EA                     __pstringtext1:	
  1162  13EA                     _dpowers:	
  1163  13EA  3401               	retlw	1
  1164  13EB  3400               	retlw	0
  1165  13EC  340A               	retlw	10
  1166  13ED  3400               	retlw	0
  1167  13EE  3464               	retlw	100
  1168  13EF  3400               	retlw	0
  1169  13F0  34E8               	retlw	232
  1170  13F1  3403               	retlw	3
  1171  13F2  3410               	retlw	16
  1172  13F3  3427               	retlw	39
  1173  13F4                     __end_of_dpowers:	
  1174                           
  1175                           	psect	stringtext2
  1176  13F4                     __pstringtext2:	
  1177  13F4                     _hexpowers:	
  1178  13F4  3401               	retlw	1
  1179  13F5  3400               	retlw	0
  1180  13F6  3410               	retlw	16
  1181  13F7  3400               	retlw	0
  1182  13F8  3400               	retlw	0
  1183  13F9  3401               	retlw	1
  1184  13FA  3400               	retlw	0
  1185  13FB  3410               	retlw	16
  1186  13FC                     __end_of_hexpowers:	
  1187                           
  1188                           	psect	stringtext3
  1189  140A                     __pstringtext3:	
  1190  140A                     _rxfnsidh:	
  1191  140A  3400               	retlw	0
  1192  140B  3404               	retlw	4
  1193  140C  3408               	retlw	8
  1194  140D  3410               	retlw	16
  1195  140E  3414               	retlw	20
  1196  140F  3418               	retlw	24
  1197  1410                     __end_of_rxfnsidh:	
  1198                           
  1199                           	psect	stringtext4
  1200  1421                     __pstringtext4:	
  1201  1421                     _txbnsidh:	
  1202  1421  3431               	retlw	49
  1203  1422  3441               	retlw	65
  1204  1423  3451               	retlw	81
  1205  1424                     __end_of_txbnsidh:	
  1206                           
  1207                           	psect	stringtext5
  1208  1424                     __pstringtext5:	
  1209  1424                     _abc:	
  1210  1424  3400               	retlw	0
  1211  1425  3402               	retlw	2
  1212  1426  3404               	retlw	4
  1213  1427                     __end_of_abc:	
  1214                           
  1215                           	psect	stringtext6
  1216  142A                     __pstringtext6:	
  1217  142A                     _nm:	
  1218  142A  3400               	retlw	0
  1219  142B  3402               	retlw	2
  1220  142C                     __end_of_nm:	
  1221                           
  1222                           	psect	stringtext7
  1223  142C                     __pstringtext7:	
  1224  142C                     _rxmnsidh:	
  1225  142C  3420               	retlw	32
  1226  142D  3424               	retlw	36
  1227  142E                     __end_of_rxmnsidh:	
  1228                           
  1229                           	psect	stringtext8
  1230  142E                     __pstringtext8:	
  1231  142E                     _max_idx:	
  1232  142E  3407               	retlw	7
  1233  142F                     __end_of_max_idx:	
  1234                           
  1235                           	psect	nvBANK0
  1236  0069                     __pnvBANK0:	
  1237  0069                     _handler:	
  1238  0069                     	ds	2
  1239  0011                     _PIR1bits	set	17
  1240  0095                     _OPTION_REGbits	set	149
  1241  008E                     _TRISC	set	142
  1242  008C                     _TRISA	set	140
  1243  0097                     _WDTCON	set	151
  1244  0098                     _OSCTUNE	set	152
  1245  0099                     _OSCCON	set	153
  1246  010C                     _LATAbits	set	268
  1247  010E                     _LATCbits	set	270
  1248  011D                     _APFCON0	set	285
  1249  011E                     _APFCON1	set	286
  1250  010E                     _LATC	set	270
  1251  010C                     _LATA	set	268
  1252  0116                     _BORCON	set	278
  1253  018C                     _ANSELA	set	396
  1254  018E                     _ANSELC	set	398
  1255  019A                     _TXREG	set	410
  1256  0199                     _RCREG	set	409
  1257  019D                     _RCSTAbits	set	413
  1258  019C                     _SPBRGH	set	412
  1259  019B                     _SPBRGL	set	411
  1260  019E                     _TXSTA	set	414
  1261  019D                     _RCSTA	set	413
  1262  019F                     _BAUDCON	set	415
  1263  0214                     _SSP1STATbits	set	532
  1264  0211                     _SSP1BUF	set	529
  1265  0215                     _SSP1CON1bits	set	533
  1266  0212                     _SSP1ADD	set	530
  1267  0215                     _SSP1CON1	set	533
  1268  0214                     _SSP1STAT	set	532
  1269  020E                     _WPUC	set	526
  1270  020C                     _WPUA	set	524
  1271                           
  1272                           	psect	stringtext9
  1273  1000                     __pstringtext9:	
  1274  1000                     STR_10:	
  1275  1000  345B               	retlw	91	;'['
  1276  1001  3453               	retlw	83	;'S'
  1277  1002  3465               	retlw	101	;'e'
  1278  1003  3474               	retlw	116	;'t'
  1279  1004  3420               	retlw	32	;' '
  1280  1005  346F               	retlw	111	;'o'
  1281  1006  3475               	retlw	117	;'u'
  1282  1007  3474               	retlw	116	;'t'
  1283  1008  3470               	retlw	112	;'p'
  1284  1009  3475               	retlw	117	;'u'
  1285  100A  3474               	retlw	116	;'t'
  1286  100B  3420               	retlw	32	;' '
  1287  100C  346D               	retlw	109	;'m'
  1288  100D  346F               	retlw	111	;'o'
  1289  100E  3464               	retlw	100	;'d'
  1290  100F  3465               	retlw	101	;'e'
  1291  1010  345D               	retlw	93	;']'
  1292  1011  3420               	retlw	32	;' '
  1293  1012  347B               	retlw	123	;'{'
  1294  1013  3464               	retlw	100	;'d'
  1295  1014  3465               	retlw	101	;'e'
  1296  1015  3462               	retlw	98	;'b'
  1297  1016  3475               	retlw	117	;'u'
  1298  1017  3467               	retlw	103	;'g'
  1299  1018  343A               	retlw	58	;':'
  1300  1019  3420               	retlw	32	;' '
  1301  101A  3440               	retlw	64	;'@'
  1302  101B  3476               	retlw	118	;'v'
  1303  101C  3464               	retlw	100	;'d'
  1304  101D  342C               	retlw	44	;','
  1305  101E  3420               	retlw	32	;' '
  1306  101F  3476               	retlw	118	;'v'
  1307  1020  3465               	retlw	101	;'e'
  1308  1021  3472               	retlw	114	;'r'
  1309  1022  3462               	retlw	98	;'b'
  1310  1023  346F               	retlw	111	;'o'
  1311  1024  3473               	retlw	115	;'s'
  1312  1025  3465               	retlw	101	;'e'
  1313  1026  343A               	retlw	58	;':'
  1314  1027  3420               	retlw	32	;' '
  1315  1028  3440               	retlw	64	;'@'
  1316  1029  3476               	retlw	118	;'v'
  1317  102A  3476               	retlw	118	;'v'
  1318  102B  342C               	retlw	44	;','
  1319  102C  3420               	retlw	32	;' '
  1320  102D  346E               	retlw	110	;'n'
  1321  102E  346F               	retlw	111	;'o'
  1322  102F  3472               	retlw	114	;'r'
  1323  1030  346D               	retlw	109	;'m'
  1324  1031  3461               	retlw	97	;'a'
  1325  1032  346C               	retlw	108	;'l'
  1326  1033  343A               	retlw	58	;':'
  1327  1034  3420               	retlw	32	;' '
  1328  1035  3440               	retlw	64	;'@'
  1329  1036  3476               	retlw	118	;'v'
  1330  1037  346E               	retlw	110	;'n'
  1331  1038  347D               	retlw	125	;'}'
  1332  1039  340A               	retlw	10
  1333  103A  3400               	retlw	0
  1334                           
  1335                           	psect	stringtext10
  1336  103B                     __pstringtext10:	
  1337  103B                     STR_12:	
  1338  103B  3420               	retlw	32	;' '
  1339  103C  3420               	retlw	32	;' '
  1340  103D  3420               	retlw	32	;' '
  1341  103E  3420               	retlw	32	;' '
  1342  103F  3420               	retlw	32	;' '
  1343  1040  3477               	retlw	119	;'w'
  1344  1041  3469               	retlw	105	;'i'
  1345  1042  3474               	retlw	116	;'t'
  1346  1043  3468               	retlw	104	;'h'
  1347  1044  3420               	retlw	32	;' '
  1348  1045  3453               	retlw	83	;'S'
  1349  1046  3449               	retlw	73	;'I'
  1350  1047  3444               	retlw	68	;'D'
  1351  1048  343A               	retlw	58	;':'
  1352  1049  3420               	retlw	32	;' '
  1353  104A  3440               	retlw	64	;'@'
  1354  104B  346F               	retlw	111	;'o'
  1355  104C  346C               	retlw	108	;'l'
  1356  104D  3473               	retlw	115	;'s'
  1357  104E  3420               	retlw	32	;' '
  1358  104F  346F               	retlw	111	;'o'
  1359  1050  3472               	retlw	114	;'r'
  1360  1051  3420               	retlw	32	;' '
  1361  1052  3440               	retlw	64	;'@'
  1362  1053  346F               	retlw	111	;'o'
  1363  1054  346E               	retlw	110	;'n'
  1364  1055  3473               	retlw	115	;'s'
  1365  1056  342C               	retlw	44	;','
  1366  1057  3420               	retlw	32	;' '
  1367  1058  3469               	retlw	105	;'i'
  1368  1059  346E               	retlw	110	;'n'
  1369  105A  3420               	retlw	32	;' '
  1370  105B  3468               	retlw	104	;'h'
  1371  105C  3465               	retlw	101	;'e'
  1372  105D  3478               	retlw	120	;'x'
  1373  105E  3420               	retlw	32	;' '
  1374  105F  3466               	retlw	102	;'f'
  1375  1060  346F               	retlw	111	;'o'
  1376  1061  3472               	retlw	114	;'r'
  1377  1062  346D               	retlw	109	;'m'
  1378  1063  3461               	retlw	97	;'a'
  1379  1064  3474               	retlw	116	;'t'
  1380  1065  343A               	retlw	58	;':'
  1381  1066  3420               	retlw	32	;' '
  1382  1067  3440               	retlw	64	;'@'
  1383  1068  346F               	retlw	111	;'o'
  1384  1069  346C               	retlw	108	;'l'
  1385  106A  3468               	retlw	104	;'h'
  1386  106B  3420               	retlw	32	;' '
  1387  106C  346F               	retlw	111	;'o'
  1388  106D  3472               	retlw	114	;'r'
  1389  106E  3420               	retlw	32	;' '
  1390  106F  3440               	retlw	64	;'@'
  1391  1070  346F               	retlw	111	;'o'
  1392  1071  346E               	retlw	110	;'n'
  1393  1072  3468               	retlw	104	;'h'
  1394  1073  340A               	retlw	10
  1395  1074  3400               	retlw	0
  1396                           
  1397                           	psect	stringtext11
  1398  1075                     __pstringtext11:	
  1399  1075                     STR_19:	
  1400  1075  345B               	retlw	91	;'['
  1401  1076  3453               	retlw	83	;'S'
  1402  1077  3465               	retlw	101	;'e'
  1403  1078  346E               	retlw	110	;'n'
  1404  1079  3464               	retlw	100	;'d'
  1405  107A  3420               	retlw	32	;' '
  1406  107B  346D               	retlw	109	;'m'
  1407  107C  3465               	retlw	101	;'e'
  1408  107D  3473               	retlw	115	;'s'
  1409  107E  3473               	retlw	115	;'s'
  1410  107F  3461               	retlw	97	;'a'
  1411  1080  3467               	retlw	103	;'g'
  1412  1081  3465               	retlw	101	;'e'
  1413  1082  3420               	retlw	32	;' '
  1414  1083  3462               	retlw	98	;'b'
  1415  1084  3465               	retlw	101	;'e'
  1416  1085  3467               	retlw	103	;'g'
  1417  1086  3469               	retlw	105	;'i'
  1418  1087  346E               	retlw	110	;'n'
  1419  1088  346E               	retlw	110	;'n'
  1420  1089  3469               	retlw	105	;'i'
  1421  108A  346E               	retlw	110	;'n'
  1422  108B  3467               	retlw	103	;'g'
  1423  108C  3420               	retlw	32	;' '
  1424  108D  3477               	retlw	119	;'w'
  1425  108E  3469               	retlw	105	;'i'
  1426  108F  3474               	retlw	116	;'t'
  1427  1090  3468               	retlw	104	;'h'
  1428  1091  3420               	retlw	32	;' '
  1429  1092  3427               	retlw	39	;'''
  1430  1093  3440               	retlw	64	;'@'
  1431  1094  3427               	retlw	39	;'''
  1432  1095  3420               	retlw	32	;' '
  1433  1096  3463               	retlw	99	;'c'
  1434  1097  3468               	retlw	104	;'h'
  1435  1098  3461               	retlw	97	;'a'
  1436  1099  3472               	retlw	114	;'r'
  1437  109A  3461               	retlw	97	;'a'
  1438  109B  3463               	retlw	99	;'c'
  1439  109C  3474               	retlw	116	;'t'
  1440  109D  3465               	retlw	101	;'e'
  1441  109E  3472               	retlw	114	;'r'
  1442  109F  345D               	retlw	93	;']'
  1443  10A0  3420               	retlw	32	;' '
  1444  10A1  3440               	retlw	64	;'@'
  1445  10A2  343C               	retlw	60	;'<'
  1446  10A3  3440               	retlw	64	;'@'
  1447  10A4  346D               	retlw	109	;'m'
  1448  10A5  3465               	retlw	101	;'e'
  1449  10A6  3473               	retlw	115	;'s'
  1450  10A7  3473               	retlw	115	;'s'
  1451  10A8  3461               	retlw	97	;'a'
  1452  10A9  3467               	retlw	103	;'g'
  1453  10AA  3465               	retlw	101	;'e'
  1454  10AB  343E               	retlw	62	;'>'
  1455  10AC  340A               	retlw	10
  1456  10AD  3400               	retlw	0
  1457                           
  1458                           	psect	stringtext12
  1459  10AE                     __pstringtext12:	
  1460  10AE                     STR_11:	
  1461  10AE  345B               	retlw	91	;'['
  1462  10AF  3445               	retlw	69	;'E'
  1463  10B0  346E               	retlw	110	;'n'
  1464  10B1  3461               	retlw	97	;'a'
  1465  10B2  3462               	retlw	98	;'b'
  1466  10B3  346C               	retlw	108	;'l'
  1467  10B4  3465               	retlw	101	;'e'
  1468  10B5  3420               	retlw	32	;' '
  1469  10B6  346F               	retlw	111	;'o'
  1470  10B7  3470               	retlw	112	;'p'
  1471  10B8  3465               	retlw	101	;'e'
  1472  10B9  3472               	retlw	114	;'r'
  1473  10BA  3461               	retlw	97	;'a'
  1474  10BB  3474               	retlw	116	;'t'
  1475  10BC  3469               	retlw	105	;'i'
  1476  10BD  346F               	retlw	111	;'o'
  1477  10BE  346E               	retlw	110	;'n'
  1478  10BF  3420               	retlw	32	;' '
  1479  10C0  346D               	retlw	109	;'m'
  1480  10C1  346F               	retlw	111	;'o'
  1481  10C2  3464               	retlw	100	;'d'
  1482  10C3  3465               	retlw	101	;'e'
  1483  10C4  345D               	retlw	93	;']'
  1484  10C5  3420               	retlw	32	;' '
  1485  10C6  347B               	retlw	123	;'{'
  1486  10C7  346C               	retlw	108	;'l'
  1487  10C8  346F               	retlw	111	;'o'
  1488  10C9  346F               	retlw	111	;'o'
  1489  10CA  3470               	retlw	112	;'p'
  1490  10CB  3462               	retlw	98	;'b'
  1491  10CC  3461               	retlw	97	;'a'
  1492  10CD  3463               	retlw	99	;'c'
  1493  10CE  346B               	retlw	107	;'k'
  1494  10CF  343A               	retlw	58	;':'
  1495  10D0  3420               	retlw	32	;' '
  1496  10D1  3440               	retlw	64	;'@'
  1497  10D2  346F               	retlw	111	;'o'
  1498  10D3  346C               	retlw	108	;'l'
  1499  10D4  342C               	retlw	44	;','
  1500  10D5  3420               	retlw	32	;' '
  1501  10D6  346E               	retlw	110	;'n'
  1502  10D7  346F               	retlw	111	;'o'
  1503  10D8  3472               	retlw	114	;'r'
  1504  10D9  346D               	retlw	109	;'m'
  1505  10DA  3461               	retlw	97	;'a'
  1506  10DB  346C               	retlw	108	;'l'
  1507  10DC  343A               	retlw	58	;':'
  1508  10DD  3420               	retlw	32	;' '
  1509  10DE  3440               	retlw	64	;'@'
  1510  10DF  346F               	retlw	111	;'o'
  1511  10E0  346E               	retlw	110	;'n'
  1512  10E1  347D               	retlw	125	;'}'
  1513  10E2  340A               	retlw	10
  1514  10E3  3400               	retlw	0
  1515                           
  1516                           	psect	stringtext13
  1517  10E4                     __pstringtext13:	
  1518  10E4                     STR_9:	
  1519  10E4  345B               	retlw	91	;'['
  1520  10E5  3453               	retlw	83	;'S'
  1521  10E6  3465               	retlw	101	;'e'
  1522  10E7  3474               	retlw	116	;'t'
  1523  10E8  3420               	retlw	32	;' '
  1524  10E9  3473               	retlw	115	;'s'
  1525  10EA  3474               	retlw	116	;'t'
  1526  10EB  3461               	retlw	97	;'a'
  1527  10EC  346E               	retlw	110	;'n'
  1528  10ED  3464               	retlw	100	;'d'
  1529  10EE  3461               	retlw	97	;'a'
  1530  10EF  3472               	retlw	114	;'r'
  1531  10F0  3464               	retlw	100	;'d'
  1532  10F1  3420               	retlw	32	;' '
  1533  10F2  3469               	retlw	105	;'i'
  1534  10F3  3464               	retlw	100	;'d'
  1535  10F4  3465               	retlw	101	;'e'
  1536  10F5  346E               	retlw	110	;'n'
  1537  10F6  3474               	retlw	116	;'t'
  1538  10F7  3469               	retlw	105	;'i'
  1539  10F8  3466               	retlw	102	;'f'
  1540  10F9  3469               	retlw	105	;'i'
  1541  10FA  3465               	retlw	101	;'e'
  1542  10FB  3472               	retlw	114	;'r'
  1543  10FC  345D               	retlw	93	;']'
  1544  10FD  3420               	retlw	32	;' '
  1545  10FE  3440               	retlw	64	;'@'
  1546  10FF  3469               	retlw	105	;'i'
  1547  1100  343C               	retlw	60	;'<'
  1548  1101  3473               	retlw	115	;'s'
  1549  1102  3474               	retlw	116	;'t'
  1550  1103  3461               	retlw	97	;'a'
  1551  1104  346E               	retlw	110	;'n'
  1552  1105  3464               	retlw	100	;'d'
  1553  1106  3461               	retlw	97	;'a'
  1554  1107  3472               	retlw	114	;'r'
  1555  1108  3464               	retlw	100	;'d'
  1556  1109  3420               	retlw	32	;' '
  1557  110A  3469               	retlw	105	;'i'
  1558  110B  3464               	retlw	100	;'d'
  1559  110C  3465               	retlw	101	;'e'
  1560  110D  346E               	retlw	110	;'n'
  1561  110E  3474               	retlw	116	;'t'
  1562  110F  3469               	retlw	105	;'i'
  1563  1110  3466               	retlw	102	;'f'
  1564  1111  3469               	retlw	105	;'i'
  1565  1112  3465               	retlw	101	;'e'
  1566  1113  3472               	retlw	114	;'r'
  1567  1114  343E               	retlw	62	;'>'
  1568  1115  340A               	retlw	10
  1569  1116  3400               	retlw	0
  1570                           
  1571                           	psect	stringtext14
  1572  1117                     __pstringtext14:	
  1573  1117                     STR_20:	
  1574  1117  345B               	retlw	91	;'['
  1575  1118  3452               	retlw	82	;'R'
  1576  1119  3465               	retlw	101	;'e'
  1577  111A  3463               	retlw	99	;'c'
  1578  111B  3465               	retlw	101	;'e'
  1579  111C  3469               	retlw	105	;'i'
  1580  111D  3476               	retlw	118	;'v'
  1581  111E  3465               	retlw	101	;'e'
  1582  111F  3420               	retlw	32	;' '
  1583  1120  346D               	retlw	109	;'m'
  1584  1121  3465               	retlw	101	;'e'
  1585  1122  3473               	retlw	115	;'s'
  1586  1123  3473               	retlw	115	;'s'
  1587  1124  3461               	retlw	97	;'a'
  1588  1125  3467               	retlw	103	;'g'
  1589  1126  3465               	retlw	101	;'e'
  1590  1127  345D               	retlw	93	;']'
  1591  1128  3420               	retlw	32	;' '
  1592  1129  343C               	retlw	60	;'<'
  1593  112A  346D               	retlw	109	;'m'
  1594  112B  3465               	retlw	101	;'e'
  1595  112C  3473               	retlw	115	;'s'
  1596  112D  3473               	retlw	115	;'s'
  1597  112E  3461               	retlw	97	;'a'
  1598  112F  3467               	retlw	103	;'g'
  1599  1130  3465               	retlw	101	;'e'
  1600  1131  343E               	retlw	62	;'>'
  1601  1132  3420               	retlw	32	;' '
  1602  1133  3477               	retlw	119	;'w'
  1603  1134  3469               	retlw	105	;'i'
  1604  1135  346C               	retlw	108	;'l'
  1605  1136  346C               	retlw	108	;'l'
  1606  1137  3420               	retlw	32	;' '
  1607  1138  3462               	retlw	98	;'b'
  1608  1139  3465               	retlw	101	;'e'
  1609  113A  3420               	retlw	32	;' '
  1610  113B  346F               	retlw	111	;'o'
  1611  113C  3475               	retlw	117	;'u'
  1612  113D  3474               	retlw	116	;'t'
  1613  113E  3470               	retlw	112	;'p'
  1614  113F  3475               	retlw	117	;'u'
  1615  1140  3474               	retlw	116	;'t'
  1616  1141  340A               	retlw	10
  1617  1142  3400               	retlw	0
  1618                           
  1619                           	psect	stringtext15
  1620  1143                     __pstringtext15:	
  1621  1143                     STR_14:	
  1622  1143  345B               	retlw	91	;'['
  1623  1144  3453               	retlw	83	;'S'
  1624  1145  3465               	retlw	101	;'e'
  1625  1146  3474               	retlw	116	;'t'
  1626  1147  3420               	retlw	32	;' '
  1627  1148  3466               	retlw	102	;'f'
  1628  1149  3469               	retlw	105	;'i'
  1629  114A  346C               	retlw	108	;'l'
  1630  114B  3474               	retlw	116	;'t'
  1631  114C  3465               	retlw	101	;'e'
  1632  114D  3472               	retlw	114	;'r'
  1633  114E  345D               	retlw	93	;']'
  1634  114F  3420               	retlw	32	;' '
  1635  1150  3440               	retlw	64	;'@'
  1636  1151  3466               	retlw	102	;'f'
  1637  1152  343C               	retlw	60	;'<'
  1638  1153  346E               	retlw	110	;'n'
  1639  1154  343E               	retlw	62	;'>'
  1640  1155  343C               	retlw	60	;'<'
  1641  1156  3466               	retlw	102	;'f'
  1642  1157  3469               	retlw	105	;'i'
  1643  1158  346C               	retlw	108	;'l'
  1644  1159  3474               	retlw	116	;'t'
  1645  115A  3465               	retlw	101	;'e'
  1646  115B  3472               	retlw	114	;'r'
  1647  115C  3428               	retlw	40	;'('
  1648  115D  3453               	retlw	83	;'S'
  1649  115E  3449               	retlw	73	;'I'
  1650  115F  3444               	retlw	68	;'D'
  1651  1160  3431               	retlw	49	;'1'
  1652  1161  3430               	retlw	48	;'0'
  1653  1162  3420               	retlw	32	;' '
  1654  1163  347E               	retlw	126	;'~'
  1655  1164  3420               	retlw	32	;' '
  1656  1165  3453               	retlw	83	;'S'
  1657  1166  3449               	retlw	73	;'I'
  1658  1167  3444               	retlw	68	;'D'
  1659  1168  3430               	retlw	48	;'0'
  1660  1169  3429               	retlw	41	;')'
  1661  116A  343E               	retlw	62	;'>'
  1662  116B  340A               	retlw	10
  1663  116C  3400               	retlw	0
  1664                           
  1665                           	psect	stringtext16
  1666  116D                     __pstringtext16:	
  1667  116D                     STR_13:	
  1668  116D  345B               	retlw	91	;'['
  1669  116E  3453               	retlw	83	;'S'
  1670  116F  3465               	retlw	101	;'e'
  1671  1170  3474               	retlw	116	;'t'
  1672  1171  3420               	retlw	32	;' '
  1673  1172  346D               	retlw	109	;'m'
  1674  1173  3461               	retlw	97	;'a'
  1675  1174  3473               	retlw	115	;'s'
  1676  1175  346B               	retlw	107	;'k'
  1677  1176  345D               	retlw	93	;']'
  1678  1177  3420               	retlw	32	;' '
  1679  1178  3440               	retlw	64	;'@'
  1680  1179  346D               	retlw	109	;'m'
  1681  117A  343C               	retlw	60	;'<'
  1682  117B  346E               	retlw	110	;'n'
  1683  117C  343E               	retlw	62	;'>'
  1684  117D  343C               	retlw	60	;'<'
  1685  117E  346D               	retlw	109	;'m'
  1686  117F  3461               	retlw	97	;'a'
  1687  1180  3473               	retlw	115	;'s'
  1688  1181  346B               	retlw	107	;'k'
  1689  1182  3428               	retlw	40	;'('
  1690  1183  3453               	retlw	83	;'S'
  1691  1184  3449               	retlw	73	;'I'
  1692  1185  3444               	retlw	68	;'D'
  1693  1186  3431               	retlw	49	;'1'
  1694  1187  3430               	retlw	48	;'0'
  1695  1188  3420               	retlw	32	;' '
  1696  1189  347E               	retlw	126	;'~'
  1697  118A  3420               	retlw	32	;' '
  1698  118B  3453               	retlw	83	;'S'
  1699  118C  3449               	retlw	73	;'I'
  1700  118D  3444               	retlw	68	;'D'
  1701  118E  3430               	retlw	48	;'0'
  1702  118F  3429               	retlw	41	;')'
  1703  1190  343E               	retlw	62	;'>'
  1704  1191  340A               	retlw	10
  1705  1192  3400               	retlw	0
  1706                           
  1707                           	psect	stringtext17
  1708  1193                     __pstringtext17:	
  1709  1193                     STR_16:	
  1710  1193  345B               	retlw	91	;'['
  1711  1194  3441               	retlw	65	;'A'
  1712  1195  3462               	retlw	98	;'b'
  1713  1196  346F               	retlw	111	;'o'
  1714  1197  3472               	retlw	114	;'r'
  1715  1198  3474               	retlw	116	;'t'
  1716  1199  3420               	retlw	32	;' '
  1717  119A  3461               	retlw	97	;'a'
  1718  119B  346C               	retlw	108	;'l'
  1719  119C  346C               	retlw	108	;'l'
  1720  119D  3420               	retlw	32	;' '
  1721  119E  3470               	retlw	112	;'p'
  1722  119F  3465               	retlw	101	;'e'
  1723  11A0  346E               	retlw	110	;'n'
  1724  11A1  3464               	retlw	100	;'d'
  1725  11A2  3469               	retlw	105	;'i'
  1726  11A3  346E               	retlw	110	;'n'
  1727  11A4  3467               	retlw	103	;'g'
  1728  11A5  3420               	retlw	32	;' '
  1729  11A6  3474               	retlw	116	;'t'
  1730  11A7  3472               	retlw	114	;'r'
  1731  11A8  3461               	retlw	97	;'a'
  1732  11A9  346E               	retlw	110	;'n'
  1733  11AA  3473               	retlw	115	;'s'
  1734  11AB  346D               	retlw	109	;'m'
  1735  11AC  3469               	retlw	105	;'i'
  1736  11AD  3473               	retlw	115	;'s'
  1737  11AE  3473               	retlw	115	;'s'
  1738  11AF  3469               	retlw	105	;'i'
  1739  11B0  346F               	retlw	111	;'o'
  1740  11B1  346E               	retlw	110	;'n'
  1741  11B2  3473               	retlw	115	;'s'
  1742  11B3  345D               	retlw	93	;']'
  1743  11B4  3420               	retlw	32	;' '
  1744  11B5  3440               	retlw	64	;'@'
  1745  11B6  3461               	retlw	97	;'a'
  1746  11B7  340A               	retlw	10
  1747  11B8  3400               	retlw	0
  1748                           
  1749                           	psect	stringtext18
  1750  11B9                     __pstringtext18:	
  1751  11B9                     STR_7:	
  1752  11B9  342F               	retlw	47	;'/'
  1753  11BA  342F               	retlw	47	;'/'
  1754  11BB  342F               	retlw	47	;'/'
  1755  11BC  3420               	retlw	32	;' '
  1756  11BD  3455               	retlw	85	;'U'
  1757  11BE  3441               	retlw	65	;'A'
  1758  11BF  3452               	retlw	82	;'R'
  1759  11C0  3454               	retlw	84	;'T'
  1760  11C1  3432               	retlw	50	;'2'
  1761  11C2  3443               	retlw	67	;'C'
  1762  11C3  3441               	retlw	65	;'A'
  1763  11C4  344E               	retlw	78	;'N'
  1764  11C5  3420               	retlw	32	;' '
  1765  11C6  3448               	retlw	72	;'H'
  1766  11C7  3445               	retlw	69	;'E'
  1767  11C8  344C               	retlw	76	;'L'
  1768  11C9  3450               	retlw	80	;'P'
  1769  11CA  3420               	retlw	32	;' '
  1770  11CB  3428               	retlw	40	;'('
  1771  11CC  3476               	retlw	118	;'v'
  1772  11CD  3465               	retlw	101	;'e'
  1773  11CE  3472               	retlw	114	;'r'
  1774  11CF  3473               	retlw	115	;'s'
  1775  11D0  3469               	retlw	105	;'i'
  1776  11D1  346F               	retlw	111	;'o'
  1777  11D2  346E               	retlw	110	;'n'
  1778  11D3  3420               	retlw	32	;' '
  1779  11D4  3425               	retlw	37	;'%'
  1780  11D5  3473               	retlw	115	;'s'
  1781  11D6  3429               	retlw	41	;')'
  1782  11D7  3420               	retlw	32	;' '
  1783  11D8  342F               	retlw	47	;'/'
  1784  11D9  342F               	retlw	47	;'/'
  1785  11DA  342F               	retlw	47	;'/'
  1786  11DB  340A               	retlw	10
  1787  11DC  3400               	retlw	0
  1788                           
  1789                           	psect	stringtext19
  1790  11DD                     __pstringtext19:	
  1791  11DD                     STR_18:	
  1792  11DD  345B               	retlw	91	;'['
  1793  11DE  3453               	retlw	83	;'S'
  1794  11DF  3465               	retlw	101	;'e'
  1795  11E0  346E               	retlw	110	;'n'
  1796  11E1  3464               	retlw	100	;'d'
  1797  11E2  3420               	retlw	32	;' '
  1798  11E3  346D               	retlw	109	;'m'
  1799  11E4  3465               	retlw	101	;'e'
  1800  11E5  3473               	retlw	115	;'s'
  1801  11E6  3473               	retlw	115	;'s'
  1802  11E7  3461               	retlw	97	;'a'
  1803  11E8  3467               	retlw	103	;'g'
  1804  11E9  3465               	retlw	101	;'e'
  1805  11EA  345D               	retlw	93	;']'
  1806  11EB  3420               	retlw	32	;' '
  1807  11EC  343C               	retlw	60	;'<'
  1808  11ED  346D               	retlw	109	;'m'
  1809  11EE  3465               	retlw	101	;'e'
  1810  11EF  3473               	retlw	115	;'s'
  1811  11F0  3473               	retlw	115	;'s'
  1812  11F1  3461               	retlw	97	;'a'
  1813  11F2  3467               	retlw	103	;'g'
  1814  11F3  3465               	retlw	101	;'e'
  1815  11F4  343E               	retlw	62	;'>'
  1816  11F5  340A               	retlw	10
  1817  11F6  3400               	retlw	0
  1818                           
  1819                           	psect	stringtext20
  1820  11F7                     __pstringtext20:	
  1821  11F7                     STR_15:	
  1822  11F7  345B               	retlw	91	;'['
  1823  11F8  3453               	retlw	83	;'S'
  1824  11F9  3465               	retlw	101	;'e'
  1825  11FA  3474               	retlw	116	;'t'
  1826  11FB  3420               	retlw	32	;' '
  1827  11FC  3462               	retlw	98	;'b'
  1828  11FD  3461               	retlw	97	;'a'
  1829  11FE  3475               	retlw	117	;'u'
  1830  11FF  3464               	retlw	100	;'d'
  1831  1200  3420               	retlw	32	;' '
  1832  1201  3472               	retlw	114	;'r'
  1833  1202  3461               	retlw	97	;'a'
  1834  1203  3474               	retlw	116	;'t'
  1835  1204  3465               	retlw	101	;'e'
  1836  1205  345D               	retlw	93	;']'
  1837  1206  3420               	retlw	32	;' '
  1838  1207  3440               	retlw	64	;'@'
  1839  1208  3462               	retlw	98	;'b'
  1840  1209  343C               	retlw	60	;'<'
  1841  120A  3462               	retlw	98	;'b'
  1842  120B  3470               	retlw	112	;'p'
  1843  120C  3472               	retlw	114	;'r'
  1844  120D  343E               	retlw	62	;'>'
  1845  120E  340A               	retlw	10
  1846  120F  3400               	retlw	0
  1847                           
  1848                           	psect	stringtext21
  1849  1210                     __pstringtext21:	
  1850  1210                     STR_24:	
  1851  1210  3466               	retlw	102	;'f'
  1852  1211  3469               	retlw	105	;'i'
  1853  1212  346C               	retlw	108	;'l'
  1854  1213  3474               	retlw	116	;'t'
  1855  1214  3465               	retlw	101	;'e'
  1856  1215  3472               	retlw	114	;'r'
  1857  1216  3428               	retlw	40	;'('
  1858  1217  3425               	retlw	37	;'%'
  1859  1218  3464               	retlw	100	;'d'
  1860  1219  3429               	retlw	41	;')'
  1861  121A  343A               	retlw	58	;':'
  1862  121B  3420               	retlw	32	;' '
  1863  121C  3425               	retlw	37	;'%'
  1864  121D  3430               	retlw	48	;'0'
  1865  121E  3432               	retlw	50	;'2'
  1866  121F  3478               	retlw	120	;'x'
  1867  1220  3420               	retlw	32	;' '
  1868  1221  3425               	retlw	37	;'%'
  1869  1222  3430               	retlw	48	;'0'
  1870  1223  3432               	retlw	50	;'2'
  1871  1224  3478               	retlw	120	;'x'
  1872  1225  340A               	retlw	10
  1873  1226  3400               	retlw	0
  1874                           
  1875                           	psect	stringtext22
  1876  1227                     __pstringtext22:	
  1877  1227                     STR_21:	
  1878  1227  345B               	retlw	91	;'['
  1879  1228  3453               	retlw	83	;'S'
  1880  1229  3468               	retlw	104	;'h'
  1881  122A  346F               	retlw	111	;'o'
  1882  122B  3477               	retlw	119	;'w'
  1883  122C  3420               	retlw	32	;' '
  1884  122D  3474               	retlw	116	;'t'
  1885  122E  3468               	retlw	104	;'h'
  1886  122F  3469               	retlw	105	;'i'
  1887  1230  3473               	retlw	115	;'s'
  1888  1231  3420               	retlw	32	;' '
  1889  1232  3468               	retlw	104	;'h'
  1890  1233  3465               	retlw	101	;'e'
  1891  1234  346C               	retlw	108	;'l'
  1892  1235  3470               	retlw	112	;'p'
  1893  1236  345D               	retlw	93	;']'
  1894  1237  343A               	retlw	58	;':'
  1895  1238  3420               	retlw	32	;' '
  1896  1239  3440               	retlw	64	;'@'
  1897  123A  3468               	retlw	104	;'h'
  1898  123B  340A               	retlw	10
  1899  123C  3400               	retlw	0
  1900                           
  1901                           	psect	stringtext23
  1902  123D                     __pstringtext23:	
  1903  123D                     STR_23:	
  1904  123D  346D               	retlw	109	;'m'
  1905  123E  3461               	retlw	97	;'a'
  1906  123F  3473               	retlw	115	;'s'
  1907  1240  346B               	retlw	107	;'k'
  1908  1241  3428               	retlw	40	;'('
  1909  1242  3425               	retlw	37	;'%'
  1910  1243  3464               	retlw	100	;'d'
  1911  1244  3429               	retlw	41	;')'
  1912  1245  343A               	retlw	58	;':'
  1913  1246  3420               	retlw	32	;' '
  1914  1247  3425               	retlw	37	;'%'
  1915  1248  3430               	retlw	48	;'0'
  1916  1249  3432               	retlw	50	;'2'
  1917  124A  3478               	retlw	120	;'x'
  1918  124B  3420               	retlw	32	;' '
  1919  124C  3425               	retlw	37	;'%'
  1920  124D  3430               	retlw	48	;'0'
  1921  124E  3432               	retlw	50	;'2'
  1922  124F  3478               	retlw	120	;'x'
  1923  1250  340A               	retlw	10
  1924  1251  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext24
  1927  1252                     __pstringtext24:	
  1928  1252                     STR_17:	
  1929  1252  345B               	retlw	91	;'['
  1930  1253  3444               	retlw	68	;'D'
  1931  1254  3475               	retlw	117	;'u'
  1932  1255  346D               	retlw	109	;'m'
  1933  1256  3470               	retlw	112	;'p'
  1934  1257  3420               	retlw	32	;' '
  1935  1258  3472               	retlw	114	;'r'
  1936  1259  3465               	retlw	101	;'e'
  1937  125A  3467               	retlw	103	;'g'
  1938  125B  3469               	retlw	105	;'i'
  1939  125C  3473               	retlw	115	;'s'
  1940  125D  3474               	retlw	116	;'t'
  1941  125E  3465               	retlw	101	;'e'
  1942  125F  3472               	retlw	114	;'r'
  1943  1260  3473               	retlw	115	;'s'
  1944  1261  345D               	retlw	93	;']'
  1945  1262  3420               	retlw	32	;' '
  1946  1263  3440               	retlw	64	;'@'
  1947  1264  3464               	retlw	100	;'d'
  1948  1265  340A               	retlw	10
  1949  1266  3400               	retlw	0
  1950                           
  1951                           	psect	stringtext25
  1952  1267                     __pstringtext25:	
  1953  1267                     STR_32:	
  1954  1267  3443               	retlw	67	;'C'
  1955  1268  346F               	retlw	111	;'o'
  1956  1269  3470               	retlw	112	;'p'
  1957  126A  3479               	retlw	121	;'y'
  1958  126B  3469               	retlw	105	;'i'
  1959  126C  346E               	retlw	110	;'n'
  1960  126D  3467               	retlw	103	;'g'
  1961  126E  3420               	retlw	32	;' '
  1962  126F  3462               	retlw	98	;'b'
  1963  1270  3475               	retlw	117	;'u'
  1964  1271  3466               	retlw	102	;'f'
  1965  1272  3466               	retlw	102	;'f'
  1966  1273  3465               	retlw	101	;'e'
  1967  1274  3472               	retlw	114	;'r'
  1968  1275  343A               	retlw	58	;':'
  1969  1276  3420               	retlw	32	;' '
  1970  1277  3425               	retlw	37	;'%'
  1971  1278  3463               	retlw	99	;'c'
  1972  1279  340A               	retlw	10
  1973  127A  3400               	retlw	0
  1974                           
  1975                           	psect	stringtext26
  1976  127B                     __pstringtext26:	
  1977  127B                     STR_8:	
  1978  127B  3430               	retlw	48	;'0'
  1979  127C  342E               	retlw	46	;'.'
  1980  127D  3431               	retlw	49	;'1'
  1981  127E  3420               	retlw	32	;' '
  1982  127F  344D               	retlw	77	;'M'
  1983  1280  3461               	retlw	97	;'a'
  1984  1281  3472               	retlw	114	;'r'
  1985  1282  3463               	retlw	99	;'c'
  1986  1283  3468               	retlw	104	;'h'
  1987  1284  3420               	retlw	32	;' '
  1988  1285  3431               	retlw	49	;'1'
  1989  1286  3438               	retlw	56	;'8'
  1990  1287  342C               	retlw	44	;','
  1991  1288  3420               	retlw	32	;' '
  1992  1289  3432               	retlw	50	;'2'
  1993  128A  3430               	retlw	48	;'0'
  1994  128B  3431               	retlw	49	;'1'
  1995  128C  3438               	retlw	56	;'8'
  1996  128D  3400               	retlw	0
  1997                           
  1998                           	psect	stringtext27
  1999  128E                     __pstringtext27:	
  2000  128E                     STR_35:	
  2001  128E  344D               	retlw	77	;'M'
  2002  128F  3465               	retlw	101	;'e'
  2003  1290  3473               	retlw	115	;'s'
  2004  1291  3473               	retlw	115	;'s'
  2005  1292  3461               	retlw	97	;'a'
  2006  1293  3467               	retlw	103	;'g'
  2007  1294  3465               	retlw	101	;'e'
  2008  1295  3420               	retlw	32	;' '
  2009  1296  3473               	retlw	115	;'s'
  2010  1297  3465               	retlw	101	;'e'
  2011  1298  346E               	retlw	110	;'n'
  2012  1299  3474               	retlw	116	;'t'
  2013  129A  343A               	retlw	58	;':'
  2014  129B  3420               	retlw	32	;' '
  2015  129C  3425               	retlw	37	;'%'
  2016  129D  3473               	retlw	115	;'s'
  2017  129E  340A               	retlw	10
  2018  129F  3400               	retlw	0
  2019                           
  2020                           	psect	stringtext28
  2021  12A0                     __pstringtext28:	
  2022  12A0                     STR_57:	
  2023  12A0  3430               	retlw	48	;'0'
  2024  12A1  3431               	retlw	49	;'1'
  2025  12A2  3432               	retlw	50	;'2'
  2026  12A3  3433               	retlw	51	;'3'
  2027  12A4  3434               	retlw	52	;'4'
  2028  12A5  3435               	retlw	53	;'5'
  2029  12A6  3436               	retlw	54	;'6'
  2030  12A7  3437               	retlw	55	;'7'
  2031  12A8  3438               	retlw	56	;'8'
  2032  12A9  3439               	retlw	57	;'9'
  2033  12AA  3461               	retlw	97	;'a'
  2034  12AB  3462               	retlw	98	;'b'
  2035  12AC  3463               	retlw	99	;'c'
  2036  12AD  3464               	retlw	100	;'d'
  2037  12AE  3465               	retlw	101	;'e'
  2038  12AF  3466               	retlw	102	;'f'
  2039  12B0  3400               	retlw	0
  2040                           
  2041                           	psect	stringtext29
  2042  12B1                     __pstringtext29:	
  2043  12B1                     STR_25:	
  2044  12B1  3452               	retlw	82	;'R'
  2045  12B2  3458               	retlw	88	;'X'
  2046  12B3  3442               	retlw	66	;'B'
  2047  12B4  3425               	retlw	37	;'%'
  2048  12B5  3464               	retlw	100	;'d'
  2049  12B6  3453               	retlw	83	;'S'
  2050  12B7  3449               	retlw	73	;'I'
  2051  12B8  3444               	retlw	68	;'D'
  2052  12B9  3448               	retlw	72	;'H'
  2053  12BA  343A               	retlw	58	;':'
  2054  12BB  3420               	retlw	32	;' '
  2055  12BC  3425               	retlw	37	;'%'
  2056  12BD  3430               	retlw	48	;'0'
  2057  12BE  3432               	retlw	50	;'2'
  2058  12BF  3478               	retlw	120	;'x'
  2059  12C0  340A               	retlw	10
  2060  12C1  3400               	retlw	0
  2061                           
  2062                           	psect	stringtext30
  2063  12C2                     __pstringtext30:	
  2064  12C2                     STR_33:	
  2065  12C2  3454               	retlw	84	;'T'
  2066  12C3  3458               	retlw	88	;'X'
  2067  12C4  3442               	retlw	66	;'B'
  2068  12C5  3425               	retlw	37	;'%'
  2069  12C6  3464               	retlw	100	;'d'
  2070  12C7  3453               	retlw	83	;'S'
  2071  12C8  3449               	retlw	73	;'I'
  2072  12C9  3444               	retlw	68	;'D'
  2073  12CA  3448               	retlw	72	;'H'
  2074  12CB  343A               	retlw	58	;':'
  2075  12CC  3420               	retlw	32	;' '
  2076  12CD  3425               	retlw	37	;'%'
  2077  12CE  3430               	retlw	48	;'0'
  2078  12CF  3432               	retlw	50	;'2'
  2079  12D0  3478               	retlw	120	;'x'
  2080  12D1  340A               	retlw	10
  2081  12D2  3400               	retlw	0
  2082                           
  2083                           	psect	stringtext31
  2084  12D3                     __pstringtext31:	
  2085  12D3                     STR_26:	
  2086  12D3  3452               	retlw	82	;'R'
  2087  12D4  3458               	retlw	88	;'X'
  2088  12D5  3442               	retlw	66	;'B'
  2089  12D6  3425               	retlw	37	;'%'
  2090  12D7  3464               	retlw	100	;'d'
  2091  12D8  3453               	retlw	83	;'S'
  2092  12D9  3449               	retlw	73	;'I'
  2093  12DA  3444               	retlw	68	;'D'
  2094  12DB  344C               	retlw	76	;'L'
  2095  12DC  343A               	retlw	58	;':'
  2096  12DD  3420               	retlw	32	;' '
  2097  12DE  3425               	retlw	37	;'%'
  2098  12DF  3430               	retlw	48	;'0'
  2099  12E0  3432               	retlw	50	;'2'
  2100  12E1  3478               	retlw	120	;'x'
  2101  12E2  340A               	retlw	10
  2102  12E3  3400               	retlw	0
  2103                           
  2104                           	psect	stringtext32
  2105  12E4                     __pstringtext32:	
  2106  12E4                     STR_34:	
  2107  12E4  3454               	retlw	84	;'T'
  2108  12E5  3458               	retlw	88	;'X'
  2109  12E6  3442               	retlw	66	;'B'
  2110  12E7  3425               	retlw	37	;'%'
  2111  12E8  3464               	retlw	100	;'d'
  2112  12E9  3453               	retlw	83	;'S'
  2113  12EA  3449               	retlw	73	;'I'
  2114  12EB  3444               	retlw	68	;'D'
  2115  12EC  344C               	retlw	76	;'L'
  2116  12ED  343A               	retlw	58	;':'
  2117  12EE  3420               	retlw	32	;' '
  2118  12EF  3425               	retlw	37	;'%'
  2119  12F0  3430               	retlw	48	;'0'
  2120  12F1  3432               	retlw	50	;'2'
  2121  12F2  3478               	retlw	120	;'x'
  2122  12F3  340A               	retlw	10
  2123  12F4  3400               	retlw	0
  2124                           
  2125                           	psect	stringtext33
  2126  12F5                     __pstringtext33:	
  2127  12F5                     STR_27:	
  2128  12F5  3452               	retlw	82	;'R'
  2129  12F6  3458               	retlw	88	;'X'
  2130  12F7  3442               	retlw	66	;'B'
  2131  12F8  3425               	retlw	37	;'%'
  2132  12F9  3464               	retlw	100	;'d'
  2133  12FA  3444               	retlw	68	;'D'
  2134  12FB  344C               	retlw	76	;'L'
  2135  12FC  3443               	retlw	67	;'C'
  2136  12FD  343A               	retlw	58	;':'
  2137  12FE  3420               	retlw	32	;' '
  2138  12FF  3425               	retlw	37	;'%'
  2139  1300  3430               	retlw	48	;'0'
  2140  1301  3432               	retlw	50	;'2'
  2141  1302  3478               	retlw	120	;'x'
  2142  1303  340A               	retlw	10
  2143  1304  3400               	retlw	0
  2144                           
  2145                           	psect	stringtext34
  2146  1305                     __pstringtext34:	
  2147  1305                     STR_50:	
  2148  1305  3452               	retlw	82	;'R'
  2149  1306  3458               	retlw	88	;'X'
  2150  1307  3442               	retlw	66	;'B'
  2151  1308  3430               	retlw	48	;'0'
  2152  1309  3443               	retlw	67	;'C'
  2153  130A  3454               	retlw	84	;'T'
  2154  130B  3452               	retlw	82	;'R'
  2155  130C  344C               	retlw	76	;'L'
  2156  130D  343A               	retlw	58	;':'
  2157  130E  3420               	retlw	32	;' '
  2158  130F  3425               	retlw	37	;'%'
  2159  1310  3430               	retlw	48	;'0'
  2160  1311  3432               	retlw	50	;'2'
  2161  1312  3478               	retlw	120	;'x'
  2162  1313  340A               	retlw	10
  2163  1314  3400               	retlw	0
  2164                           
  2165                           	psect	stringtext35
  2166  1315                     __pstringtext35:	
  2167  1315                     STR_46:	
  2168  1315  3454               	retlw	84	;'T'
  2169  1316  3458               	retlw	88	;'X'
  2170  1317  3442               	retlw	66	;'B'
  2171  1318  3430               	retlw	48	;'0'
  2172  1319  3443               	retlw	67	;'C'
  2173  131A  3454               	retlw	84	;'T'
  2174  131B  3452               	retlw	82	;'R'
  2175  131C  344C               	retlw	76	;'L'
  2176  131D  343A               	retlw	58	;':'
  2177  131E  3420               	retlw	32	;' '
  2178  131F  3425               	retlw	37	;'%'
  2179  1320  3430               	retlw	48	;'0'
  2180  1321  3432               	retlw	50	;'2'
  2181  1322  3478               	retlw	120	;'x'
  2182  1323  340A               	retlw	10
  2183  1324  3400               	retlw	0
  2184                           
  2185                           	psect	stringtext36
  2186  1325                     __pstringtext36:	
  2187  1325                     STR_51:	
  2188  1325  3452               	retlw	82	;'R'
  2189  1326  3458               	retlw	88	;'X'
  2190  1327  3442               	retlw	66	;'B'
  2191  1328  3431               	retlw	49	;'1'
  2192  1329  3443               	retlw	67	;'C'
  2193  132A  3454               	retlw	84	;'T'
  2194  132B  3452               	retlw	82	;'R'
  2195  132C  344C               	retlw	76	;'L'
  2196  132D  343A               	retlw	58	;':'
  2197  132E  3420               	retlw	32	;' '
  2198  132F  3425               	retlw	37	;'%'
  2199  1330  3430               	retlw	48	;'0'
  2200  1331  3432               	retlw	50	;'2'
  2201  1332  3478               	retlw	120	;'x'
  2202  1333  340A               	retlw	10
  2203  1334  3400               	retlw	0
  2204                           
  2205                           	psect	stringtext37
  2206  1335                     __pstringtext37:	
  2207  1335                     STR_47:	
  2208  1335  3454               	retlw	84	;'T'
  2209  1336  3458               	retlw	88	;'X'
  2210  1337  3442               	retlw	66	;'B'
  2211  1338  3431               	retlw	49	;'1'
  2212  1339  3443               	retlw	67	;'C'
  2213  133A  3454               	retlw	84	;'T'
  2214  133B  3452               	retlw	82	;'R'
  2215  133C  344C               	retlw	76	;'L'
  2216  133D  343A               	retlw	58	;':'
  2217  133E  3420               	retlw	32	;' '
  2218  133F  3425               	retlw	37	;'%'
  2219  1340  3430               	retlw	48	;'0'
  2220  1341  3432               	retlw	50	;'2'
  2221  1342  3478               	retlw	120	;'x'
  2222  1343  340A               	retlw	10
  2223  1344  3400               	retlw	0
  2224                           
  2225                           	psect	stringtext38
  2226  1345                     __pstringtext38:	
  2227  1345                     STR_48:	
  2228  1345  3454               	retlw	84	;'T'
  2229  1346  3458               	retlw	88	;'X'
  2230  1347  3442               	retlw	66	;'B'
  2231  1348  3432               	retlw	50	;'2'
  2232  1349  3443               	retlw	67	;'C'
  2233  134A  3454               	retlw	84	;'T'
  2234  134B  3452               	retlw	82	;'R'
  2235  134C  344C               	retlw	76	;'L'
  2236  134D  343A               	retlw	58	;':'
  2237  134E  3420               	retlw	32	;' '
  2238  134F  3425               	retlw	37	;'%'
  2239  1350  3430               	retlw	48	;'0'
  2240  1351  3432               	retlw	50	;'2'
  2241  1352  3478               	retlw	120	;'x'
  2242  1353  340A               	retlw	10
  2243  1354  3400               	retlw	0
  2244                           
  2245                           	psect	stringtext39
  2246  1355                     __pstringtext39:	
  2247  1355                     STR_28:	
  2248  1355  3452               	retlw	82	;'R'
  2249  1356  3458               	retlw	88	;'X'
  2250  1357  3442               	retlw	66	;'B'
  2251  1358  3425               	retlw	37	;'%'
  2252  1359  3464               	retlw	100	;'d'
  2253  135A  3444               	retlw	68	;'D'
  2254  135B  3430               	retlw	48	;'0'
  2255  135C  343A               	retlw	58	;':'
  2256  135D  3420               	retlw	32	;' '
  2257  135E  3425               	retlw	37	;'%'
  2258  135F  3430               	retlw	48	;'0'
  2259  1360  3432               	retlw	50	;'2'
  2260  1361  3478               	retlw	120	;'x'
  2261  1362  340A               	retlw	10
  2262  1363  3400               	retlw	0
  2263                           
  2264                           	psect	stringtext40
  2265  1364                     __pstringtext40:	
  2266  1364                     STR_53:	
  2267  1364  3443               	retlw	67	;'C'
  2268  1365  3441               	retlw	65	;'A'
  2269  1366  344E               	retlw	78	;'N'
  2270  1367  3443               	retlw	67	;'C'
  2271  1368  3454               	retlw	84	;'T'
  2272  1369  3452               	retlw	82	;'R'
  2273  136A  344C               	retlw	76	;'L'
  2274  136B  343A               	retlw	58	;':'
  2275  136C  3420               	retlw	32	;' '
  2276  136D  3425               	retlw	37	;'%'
  2277  136E  3430               	retlw	48	;'0'
  2278  136F  3432               	retlw	50	;'2'
  2279  1370  3478               	retlw	120	;'x'
  2280  1371  340A               	retlw	10
  2281  1372  3400               	retlw	0
  2282                           
  2283                           	psect	stringtext41
  2284  1373                     __pstringtext41:	
  2285  1373                     STR_22:	
  2286  1373  3443               	retlw	67	;'C'
  2287  1374  3441               	retlw	65	;'A'
  2288  1375  344E               	retlw	78	;'N'
  2289  1376  3453               	retlw	83	;'S'
  2290  1377  3454               	retlw	84	;'T'
  2291  1378  3441               	retlw	65	;'A'
  2292  1379  3454               	retlw	84	;'T'
  2293  137A  343A               	retlw	58	;':'
  2294  137B  3420               	retlw	32	;' '
  2295  137C  3425               	retlw	37	;'%'
  2296  137D  3430               	retlw	48	;'0'
  2297  137E  3432               	retlw	50	;'2'
  2298  137F  3478               	retlw	120	;'x'
  2299  1380  340A               	retlw	10
  2300  1381  3400               	retlw	0
  2301                           
  2302                           	psect	stringtext42
  2303  1382                     __pstringtext42:	
  2304  1382                     STR_31:	
  2305  1382  3454               	retlw	84	;'T'
  2306  1383  3458               	retlw	88	;'X'
  2307  1384  3442               	retlw	66	;'B'
  2308  1385  3430               	retlw	48	;'0'
  2309  1386  3420               	retlw	32	;' '
  2310  1387  3469               	retlw	105	;'i'
  2311  1388  3473               	retlw	115	;'s'
  2312  1389  3420               	retlw	32	;' '
  2313  138A  3469               	retlw	105	;'i'
  2314  138B  3464               	retlw	100	;'d'
  2315  138C  346C               	retlw	108	;'l'
  2316  138D  3465               	retlw	101	;'e'
  2317  138E  340A               	retlw	10
  2318  138F  3400               	retlw	0
  2319                           
  2320                           	psect	stringtext43
  2321  1390                     __pstringtext43:	
  2322  1390                     STR_30:	
  2323  1390  3454               	retlw	84	;'T'
  2324  1391  3458               	retlw	88	;'X'
  2325  1392  3442               	retlw	66	;'B'
  2326  1393  3431               	retlw	49	;'1'
  2327  1394  3420               	retlw	32	;' '
  2328  1395  3469               	retlw	105	;'i'
  2329  1396  3473               	retlw	115	;'s'
  2330  1397  3420               	retlw	32	;' '
  2331  1398  3469               	retlw	105	;'i'
  2332  1399  3464               	retlw	100	;'d'
  2333  139A  346C               	retlw	108	;'l'
  2334  139B  3465               	retlw	101	;'e'
  2335  139C  340A               	retlw	10
  2336  139D  3400               	retlw	0
  2337                           
  2338                           	psect	stringtext44
  2339  139E                     __pstringtext44:	
  2340  139E                     STR_29:	
  2341  139E  3454               	retlw	84	;'T'
  2342  139F  3458               	retlw	88	;'X'
  2343  13A0  3442               	retlw	66	;'B'
  2344  13A1  3432               	retlw	50	;'2'
  2345  13A2  3420               	retlw	32	;' '
  2346  13A3  3469               	retlw	105	;'i'
  2347  13A4  3473               	retlw	115	;'s'
  2348  13A5  3420               	retlw	32	;' '
  2349  13A6  3469               	retlw	105	;'i'
  2350  13A7  3464               	retlw	100	;'d'
  2351  13A8  346C               	retlw	108	;'l'
  2352  13A9  3465               	retlw	101	;'e'
  2353  13AA  340A               	retlw	10
  2354  13AB  3400               	retlw	0
  2355                           
  2356                           	psect	stringtext45
  2357  13AC                     __pstringtext45:	
  2358  13AC                     STR_37:	
  2359  13AC  3452               	retlw	82	;'R'
  2360  13AD  3458               	retlw	88	;'X'
  2361  13AE  3430               	retlw	48	;'0'
  2362  13AF  3449               	retlw	73	;'I'
  2363  13B0  3446               	retlw	70	;'F'
  2364  13B1  3420               	retlw	32	;' '
  2365  13B2  3469               	retlw	105	;'i'
  2366  13B3  3473               	retlw	115	;'s'
  2367  13B4  3420               	retlw	32	;' '
  2368  13B5  346F               	retlw	111	;'o'
  2369  13B6  346E               	retlw	110	;'n'
  2370  13B7  340A               	retlw	10
  2371  13B8  3400               	retlw	0
  2372                           
  2373                           	psect	stringtext46
  2374  13B9                     __pstringtext46:	
  2375  13B9                     STR_36:	
  2376  13B9  3452               	retlw	82	;'R'
  2377  13BA  3458               	retlw	88	;'X'
  2378  13BB  3431               	retlw	49	;'1'
  2379  13BC  3449               	retlw	73	;'I'
  2380  13BD  3446               	retlw	70	;'F'
  2381  13BE  3420               	retlw	32	;' '
  2382  13BF  3469               	retlw	105	;'i'
  2383  13C0  3473               	retlw	115	;'s'
  2384  13C1  3420               	retlw	32	;' '
  2385  13C2  346F               	retlw	111	;'o'
  2386  13C3  346E               	retlw	110	;'n'
  2387  13C4  340A               	retlw	10
  2388  13C5  3400               	retlw	0
  2389                           
  2390                           	psect	stringtext47
  2391  13C6                     __pstringtext47:	
  2392  13C6                     STR_42:	
  2393  13C6  3443               	retlw	67	;'C'
  2394  13C7  344E               	retlw	78	;'N'
  2395  13C8  3446               	retlw	70	;'F'
  2396  13C9  3431               	retlw	49	;'1'
  2397  13CA  343A               	retlw	58	;':'
  2398  13CB  3420               	retlw	32	;' '
  2399  13CC  3425               	retlw	37	;'%'
  2400  13CD  3430               	retlw	48	;'0'
  2401  13CE  3432               	retlw	50	;'2'
  2402  13CF  3478               	retlw	120	;'x'
  2403  13D0  340A               	retlw	10
  2404  13D1  3400               	retlw	0
  2405                           
  2406                           	psect	stringtext48
  2407  13D2                     __pstringtext48:	
  2408  13D2                     STR_43:	
  2409  13D2  3443               	retlw	67	;'C'
  2410  13D3  344E               	retlw	78	;'N'
  2411  13D4  3446               	retlw	70	;'F'
  2412  13D5  3432               	retlw	50	;'2'
  2413  13D6  343A               	retlw	58	;':'
  2414  13D7  3420               	retlw	32	;' '
  2415  13D8  3425               	retlw	37	;'%'
  2416  13D9  3430               	retlw	48	;'0'
  2417  13DA  3432               	retlw	50	;'2'
  2418  13DB  3478               	retlw	120	;'x'
  2419  13DC  340A               	retlw	10
  2420  13DD  3400               	retlw	0
  2421                           
  2422                           	psect	stringtext49
  2423  13DE                     __pstringtext49:	
  2424  13DE                     STR_44:	
  2425  13DE  3443               	retlw	67	;'C'
  2426  13DF  344E               	retlw	78	;'N'
  2427  13E0  3446               	retlw	70	;'F'
  2428  13E1  3433               	retlw	51	;'3'
  2429  13E2  343A               	retlw	58	;':'
  2430  13E3  3420               	retlw	32	;' '
  2431  13E4  3425               	retlw	37	;'%'
  2432  13E5  3430               	retlw	48	;'0'
  2433  13E6  3432               	retlw	50	;'2'
  2434  13E7  3478               	retlw	120	;'x'
  2435  13E8  340A               	retlw	10
  2436  13E9  3400               	retlw	0
  2437                           
  2438                           	psect	stringtext50
  2439  13FC                     __pstringtext50:	
  2440  13FC                     STR_56:	
  2441  13FC  3428               	retlw	40	;'('
  2442  13FD  346E               	retlw	110	;'n'
  2443  13FE  3475               	retlw	117	;'u'
  2444  13FF  346C               	retlw	108	;'l'
  2445  1400  346C               	retlw	108	;'l'
  2446  1401  3429               	retlw	41	;')'
  2447  1402  3400               	retlw	0
  2448                           
  2449                           	psect	stringtext51
  2450  1403                     __pstringtext51:	
  2451  1403                     STR_1:	
  2452  1403  3425               	retlw	37	;'%'
  2453  1404  3464               	retlw	100	;'d'
  2454  1405  342C               	retlw	44	;','
  2455  1406  3425               	retlw	37	;'%'
  2456  1407  3473               	retlw	115	;'s'
  2457  1408  340A               	retlw	10
  2458  1409  3400               	retlw	0
  2459                           
  2460                           	psect	stringtext52
  2461  1410                     __pstringtext52:	
  2462  1410                     STR_2:	
  2463  1410  3425               	retlw	37	;'%'
  2464  1411  3430               	retlw	48	;'0'
  2465  1412  3432               	retlw	50	;'2'
  2466  1413  3478               	retlw	120	;'x'
  2467  1414  343A               	retlw	58	;':'
  2468  1415  3400               	retlw	0
  2469                           
  2470                           	psect	stringtext53
  2471  1416                     __pstringtext53:	
  2472  1416                     STR_3:	
  2473  1416  3420               	retlw	32	;' '
  2474  1417  3425               	retlw	37	;'%'
  2475  1418  3430               	retlw	48	;'0'
  2476  1419  3432               	retlw	50	;'2'
  2477  141A  3478               	retlw	120	;'x'
  2478  141B  3400               	retlw	0
  2479                           
  2480                           	psect	stringtext54
  2481  141C                     __pstringtext54:	
  2482  141C                     STR_38:	
  2483  141C  342D               	retlw	45	;'-'
  2484  141D  342D               	retlw	45	;'-'
  2485  141E  342D               	retlw	45	;'-'
  2486  141F  340A               	retlw	10
  2487  1420  3400               	retlw	0
  2488                           
  2489                           	psect	stringtext55
  2490  1427                     __pstringtext55:	
  2491  1427                     STR_6:	
  2492  1427  3425               	retlw	37	;'%'
  2493  1428  3463               	retlw	99	;'c'
  2494  1429  3400               	retlw	0
  2495                           
  2496                           	psect	stringtext56
  2497  0000                     __pstringtext56:	
  2498  141F                     
  2499                           ; #config settings
  2500  0000                     
  2501                           	psect	cinit
  2502  07EE                     start_initialization:	
  2503  07EE                     __initialization:	
  2504                           
  2505                           ; Clear objects allocated to BANK0
  2506  07EE  3062               	movlw	low __pbssBANK0
  2507  07EF  0084               	movwf	4
  2508  07F0  3000               	movlw	high __pbssBANK0
  2509  07F1  0085               	movwf	5
  2510  07F2  3007               	movlw	7
  2511  07F3  318C  241E  3187   	fcall	clear_ram0
  2512                           
  2513                           ; Clear objects allocated to BANK1
  2514  07F6  30B3               	movlw	low __pbssBANK1
  2515  07F7  0084               	movwf	4
  2516  07F8  3000               	movlw	high __pbssBANK1
  2517  07F9  0085               	movwf	5
  2518  07FA  3010               	movlw	16
  2519  07FB  318C  241E         	fcall	clear_ram0
  2520  07FD                     end_of_initialization:	
  2521                           ;End of C runtime variable initialization code
  2522                           
  2523  07FD                     __end_of__initialization:	
  2524  07FD  0020               	movlb	0
  2525  07FE  3183  2BC3         	ljmp	_main	;jump to C main() function
  2526                           
  2527                           	psect	bssBANK0
  2528  0062                     __pbssBANK0:	
  2529  0062                     _mode:	
  2530  0062                     	ds	2
  2531  0064                     _sid:	
  2532  0064                     	ds	2
  2533  0066                     _output_format:	
  2534  0066                     	ds	2
  2535  0068                     _operation_mode:	
  2536  0068                     	ds	1
  2537                           
  2538                           	psect	bssBANK1
  2539  00B3                     __pbssBANK1:	
  2540  00B3                     _buf:	
  2541  00B3                     	ds	16
  2542                           
  2543                           	psect	clrtext
  2544  0C1E                     clear_ram0:	
  2545                           ;	Called with FSR0 containing the base address, and
  2546                           ;	WREG with the size to clear
  2547                           
  2548  0C1E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2549  0C1F                     clrloop0:	
  2550  0C1F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2551  0C20  3101               	addfsr 0,1
  2552  0C21  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2553  0C22  2C1F               	goto	clrloop0	;have we reached the end yet?
  2554  0C23  3400               	retlw	0	;all done for this memory range, return
  2555                           
  2556                           	psect	cstackBANK1
  2557  00A0                     __pcstackBANK1:	
  2558  00A0                     main@sid:	
  2559                           
  2560                           ; 1 bytes @ 0x0
  2561  00A0                     	ds	1
  2562  00A1                     main@bpr:	
  2563                           
  2564                           ; 1 bytes @ 0x1
  2565  00A1                     	ds	1
  2566  00A2                     main@status:	
  2567                           
  2568                           ; 1 bytes @ 0x2
  2569  00A2                     	ds	1
  2570  00A3                     main@mask:	
  2571                           
  2572                           ; 2 bytes @ 0x3
  2573  00A3                     	ds	2
  2574  00A5                     main@echo_back:	
  2575                           
  2576                           ; 1 bytes @ 0x5
  2577  00A5                     	ds	1
  2578  00A6                     main@n:	
  2579                           
  2580                           ; 1 bytes @ 0x6
  2581  00A6                     	ds	1
  2582  00A7                     main@buf:	
  2583                           
  2584                           ; 9 bytes @ 0x7
  2585  00A7                     	ds	9
  2586  00B0                     main@c:	
  2587                           
  2588                           ; 1 bytes @ 0x10
  2589  00B0                     	ds	1
  2590  00B1                     main@cmd:	
  2591                           
  2592                           ; 1 bytes @ 0x11
  2593  00B1                     	ds	1
  2594  00B2                     main@idx:	
  2595                           
  2596                           ; 1 bytes @ 0x12
  2597  00B2                     	ds	1
  2598                           
  2599                           	psect	cstackCOMMON
  2600  0070                     __pcstackCOMMON:	
  2601  0070                     ?_isdigit:	
  2602  0070                     ?_PIN_MANAGER_Initialize:	
  2603                           ; 1 bit 
  2604                           
  2605  0070                     ??_PIN_MANAGER_Initialize:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ?_OSCILLATOR_Initialize:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ??_OSCILLATOR_Initialize:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_WDT_Initialize:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ??_WDT_Initialize:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_SPI_Initialize:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ??_SPI_Initialize:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?_EUSART_Initialize:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ??_EUSART_Initialize:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?_can_status_check:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ?_can_set_sid:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_can_logging_mode:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?_can_ope_mode:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ?_can_abort:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ?_can_baudrate:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     ?_can_dump_registers:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0070                     ??_isdigit:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0070                     ?_SYSTEM_Initialize:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0070                     ??_SYSTEM_Initialize:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0070                     ?_EUSART_Read:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0070                     ??_EUSART_Read:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0070                     ?_EUSART_Write:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671  0070                     ??_EUSART_Write:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674  0070                     ?_putch:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0070                     ?_SPI_Exchange8bit:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0070                     ??_SPI_Exchange8bit:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0070                     ?_main:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0070                     ?_txf_clear:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0070                     ?_receive:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0070                     ?_read_register:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0070                     ?___wmul:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0070                     ?___lwdiv:	
  2699                           ; 2 bytes @ 0x0
  2700                           
  2701  0070                     EUSART_Write@txData:	
  2702                           ; 2 bytes @ 0x0
  2703                           
  2704  0070                     SPI_Exchange8bit@data:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0070                     can_logging_mode@verbose:	
  2708                           ; 1 bytes @ 0x0
  2709                           
  2710  0070                     _isdigit$786:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0070                     can_set_sid@can_node:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ___wmul@multiplier:	
  2717                           ; 2 bytes @ 0x0
  2718                           
  2719  0070                     ___lwdiv@divisor:	
  2720                           ; 2 bytes @ 0x0
  2721                           
  2722                           
  2723                           ; 2 bytes @ 0x0
  2724  0070                     	ds	1
  2725  0071                     ??_can_logging_mode:	
  2726  0071                     ??_putch:	
  2727                           ; 1 bytes @ 0x1
  2728                           
  2729  0071                     ?_SPI_Exchange8bitBuffer:	
  2730                           ; 1 bytes @ 0x1
  2731                           
  2732  0071                     putch@txData:	
  2733                           ; 1 bytes @ 0x1
  2734                           
  2735  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2736                           ; 1 bytes @ 0x1
  2737                           
  2738  0071                     isdigit@c:	
  2739                           ; 1 bytes @ 0x1
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x1
  2743  0071                     	ds	1
  2744  0072                     ??_can_set_sid:	
  2745  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2746                           ; 1 bytes @ 0x2
  2747                           
  2748  0072                     can_logging_mode@debug:	
  2749                           ; 1 bytes @ 0x2
  2750                           
  2751  0072                     ___wmul@multiplicand:	
  2752                           ; 1 bytes @ 0x2
  2753                           
  2754  0072                     ___lwdiv@dividend:	
  2755                           ; 2 bytes @ 0x2
  2756                           
  2757                           
  2758                           ; 2 bytes @ 0x2
  2759  0072                     	ds	1
  2760  0073                     ??_SPI_Exchange8bitBuffer:	
  2761                           
  2762                           ; 1 bytes @ 0x3
  2763  0073                     	ds	1
  2764  0074                     ??___wmul:	
  2765  0074                     ??___lwdiv:	
  2766                           ; 1 bytes @ 0x4
  2767                           
  2768  0074                     ___wmul@product:	
  2769                           ; 1 bytes @ 0x4
  2770                           
  2771                           
  2772                           ; 2 bytes @ 0x4
  2773  0074                     	ds	1
  2774  0075                     can_set_sid@sidh:	
  2775  0075                     ___lwdiv@quotient:	
  2776                           ; 1 bytes @ 0x5
  2777                           
  2778                           
  2779                           ; 2 bytes @ 0x5
  2780  0075                     	ds	1
  2781  0076                     ?_atoi:	
  2782  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2783                           ; 2 bytes @ 0x6
  2784                           
  2785  0076                     can_set_sid@sidl:	
  2786                           ; 1 bytes @ 0x6
  2787                           
  2788                           
  2789                           ; 1 bytes @ 0x6
  2790  0076                     	ds	1
  2791  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2792  0077                     ___lwdiv@counter:	
  2793                           ; 1 bytes @ 0x7
  2794                           
  2795                           
  2796                           ; 1 bytes @ 0x7
  2797  0077                     	ds	1
  2798  0078                     ??_atoi:	
  2799  0078                     ?_SPI_exchange:	
  2800                           ; 1 bytes @ 0x8
  2801                           
  2802  0078                     ?___lwmod:	
  2803                           ; 1 bytes @ 0x8
  2804                           
  2805  0078                     SPI_exchange@len:	
  2806                           ; 2 bytes @ 0x8
  2807                           
  2808  0078                     ___lwmod@divisor:	
  2809                           ; 1 bytes @ 0x8
  2810                           
  2811                           
  2812                           ; 2 bytes @ 0x8
  2813  0078                     	ds	1
  2814  0079                     ??_SPI_exchange:	
  2815                           
  2816                           ; 1 bytes @ 0x9
  2817  0079                     	ds	1
  2818  007A                     atoi@sign:	
  2819  007A                     ___lwmod@dividend:	
  2820                           ; 1 bytes @ 0xA
  2821                           
  2822                           
  2823                           ; 2 bytes @ 0xA
  2824  007A                     	ds	1
  2825  007B                     atoi@a:	
  2826                           
  2827                           ; 2 bytes @ 0xB
  2828  007B                     	ds	1
  2829  007C                     ??___lwmod:	
  2830  007C                     SPI_exchange@bytes_written:	
  2831                           ; 1 bytes @ 0xC
  2832                           
  2833                           
  2834                           ; 1 bytes @ 0xC
  2835  007C                     	ds	1
  2836  007D                     SPI_exchange@buf:	
  2837  007D                     atoi@s:	
  2838                           ; 1 bytes @ 0xD
  2839                           
  2840  007D                     ___lwmod@counter:	
  2841                           ; 1 bytes @ 0xD
  2842                           
  2843                           
  2844                           ; 1 bytes @ 0xD
  2845  007D                     	ds	1
  2846                           
  2847                           	psect	cstackBANK0
  2848  0020                     __pcstackBANK0:	
  2849  0020                     ??_txf_clear:	
  2850  0020                     ??_read_register:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853                           
  2854                           ; 1 bytes @ 0x0
  2855  0020                     	ds	1
  2856  0021                     read_register@addr:	
  2857                           
  2858                           ; 1 bytes @ 0x1
  2859  0021                     	ds	1
  2860  0022                     ?_printf:	
  2861  0022                     txf_clear@mask:	
  2862                           ; 2 bytes @ 0x2
  2863                           
  2864  0022                     printf@f:	
  2865                           ; 1 bytes @ 0x2
  2866                           
  2867                           
  2868                           ; 2 bytes @ 0x2
  2869  0022                     	ds	1
  2870  0023                     txf_clear@bytes_written:	
  2871                           
  2872                           ; 1 bytes @ 0x3
  2873  0023                     	ds	1
  2874  0024                     txf_clear@n:	
  2875                           
  2876                           ; 1 bytes @ 0x4
  2877  0024                     	ds	6
  2878  002A                     ??_printf:	
  2879                           
  2880                           ; 1 bytes @ 0xA
  2881  002A                     	ds	4
  2882  002E                     printf@idx:	
  2883                           
  2884                           ; 1 bytes @ 0xE
  2885  002E                     	ds	1
  2886  002F                     printf@prec:	
  2887                           
  2888                           ; 1 bytes @ 0xF
  2889  002F                     	ds	1
  2890  0030                     printf@cp:	
  2891                           
  2892                           ; 2 bytes @ 0x10
  2893  0030                     	ds	2
  2894  0032                     printf@len:	
  2895                           
  2896                           ; 2 bytes @ 0x12
  2897  0032                     	ds	2
  2898  0034                     printf@ap:	
  2899                           
  2900                           ; 1 bytes @ 0x14
  2901  0034                     	ds	1
  2902  0035                     printf@val:	
  2903                           
  2904                           ; 2 bytes @ 0x15
  2905  0035                     	ds	2
  2906  0037                     printf@flag:	
  2907                           
  2908                           ; 1 bytes @ 0x17
  2909  0037                     	ds	1
  2910  0038                     printf@width:	
  2911                           
  2912                           ; 2 bytes @ 0x18
  2913  0038                     	ds	2
  2914  003A                     printf@c:	
  2915                           
  2916                           ; 1 bytes @ 0x1A
  2917  003A                     	ds	1
  2918  003B                     ??_can_ope_mode:	
  2919  003B                     ??_can_dump_registers:	
  2920                           ; 1 bytes @ 0x1B
  2921                           
  2922  003B                     ?_can_send:	
  2923                           ; 1 bytes @ 0x1B
  2924                           
  2925  003B                     ?_receive_handler:	
  2926                           ; 1 bytes @ 0x1B
  2927                           
  2928  003B                     receive_handler@sid:	
  2929                           ; 1 bytes @ 0x1B
  2930                           
  2931  003B                     can_send@dlc:	
  2932                           ; 1 bytes @ 0x1B
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0x1B
  2936  003B                     	ds	1
  2937  003C                     ??_can_send:	
  2938  003C                     receive_handler@pbuf:	
  2939                           ; 1 bytes @ 0x1C
  2940                           
  2941                           
  2942                           ; 1 bytes @ 0x1C
  2943  003C                     	ds	1
  2944  003D                     receive_handler@dlc:	
  2945  003D                     can_ope_mode@bytes_written:	
  2946                           ; 1 bytes @ 0x1D
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0x1D
  2950  003D                     	ds	1
  2951  003E                     ??_receive_handler:	
  2952  003E                     can_ope_mode@ope_mode:	
  2953                           ; 1 bytes @ 0x1E
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x1E
  2957  003E                     	ds	1
  2958  003F                     ?_can_init:	
  2959  003F                     ??_can_abort:	
  2960                           ; 1 bytes @ 0x1F
  2961                           
  2962  003F                     ??_can_baudrate:	
  2963                           ; 1 bytes @ 0x1F
  2964                           
  2965  003F                     ?_can_set_mask:	
  2966                           ; 1 bytes @ 0x1F
  2967                           
  2968  003F                     can_set_mask@n:	
  2969                           ; 1 bytes @ 0x1F
  2970                           
  2971  003F                     can_init@receive_handler:	
  2972                           ; 1 bytes @ 0x1F
  2973                           
  2974                           
  2975                           ; 2 bytes @ 0x1F
  2976  003F                     	ds	1
  2977  0040                     can_set_mask@mask:	
  2978  0040                     can_send@len:	
  2979                           ; 1 bytes @ 0x20
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x20
  2983  0040                     	ds	1
  2984  0041                     ??_can_init:	
  2985  0041                     ??_can_set_mask:	
  2986                           ; 1 bytes @ 0x21
  2987                           
  2988  0041                     receive_handler@i:	
  2989                           ; 1 bytes @ 0x21
  2990                           
  2991  0041                     can_send@bytes_written:	
  2992                           ; 1 bytes @ 0x21
  2993                           
  2994  0041                     can_baudrate@bpr:	
  2995                           ; 1 bytes @ 0x21
  2996                           
  2997  0041                     can_abort@bytes_written:	
  2998                           ; 1 bytes @ 0x21
  2999                           
  3000                           
  3001                           ; 1 bytes @ 0x21
  3002  0041                     	ds	1
  3003  0042                     ??_receive:	
  3004  0042                     can_send@status:	
  3005                           ; 1 bytes @ 0x22
  3006                           
  3007  0042                     can_baudrate@mask:	
  3008                           ; 1 bytes @ 0x22
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0x22
  3012  0042                     	ds	1
  3013  0043                     can_send@data_buf:	
  3014  0043                     can_baudrate@bytes_written:	
  3015                           ; 1 bytes @ 0x23
  3016                           
  3017                           
  3018                           ; 1 bytes @ 0x23
  3019  0043                     	ds	1
  3020  0044                     can_send@i:	
  3021                           
  3022                           ; 1 bytes @ 0x24
  3023  0044                     	ds	1
  3024  0045                     can_send@n:	
  3025                           
  3026                           ; 1 bytes @ 0x25
  3027  0045                     	ds	2
  3028  0047                     receive@bytes_read:	
  3029  0047                     _can_set_mask$492:	
  3030                           ; 1 bytes @ 0x27
  3031                           
  3032                           
  3033                           ; 2 bytes @ 0x27
  3034  0047                     	ds	1
  3035  0048                     receive@rx_buf:	
  3036                           
  3037                           ; 15 bytes @ 0x28
  3038  0048                     	ds	1
  3039  0049                     can_set_mask@cmd:	
  3040                           
  3041                           ; 1 bytes @ 0x29
  3042  0049                     	ds	1
  3043  004A                     can_set_mask@mask_sidh:	
  3044                           
  3045                           ; 1 bytes @ 0x2A
  3046  004A                     	ds	1
  3047  004B                     can_set_mask@mask_sidl:	
  3048                           
  3049                           ; 1 bytes @ 0x2B
  3050  004B                     	ds	12
  3051  0057                     receive@pbuf:	
  3052                           
  3053                           ; 1 bytes @ 0x37
  3054  0057                     	ds	1
  3055  0058                     receive@sid:	
  3056                           
  3057                           ; 2 bytes @ 0x38
  3058  0058                     	ds	2
  3059  005A                     receive@dlc:	
  3060                           
  3061                           ; 1 bytes @ 0x3A
  3062  005A                     	ds	1
  3063  005B                     receive@n:	
  3064                           
  3065                           ; 1 bytes @ 0x3B
  3066  005B                     	ds	1
  3067  005C                     ??_can_status_check:	
  3068                           
  3069                           ; 1 bytes @ 0x3C
  3070  005C                     	ds	2
  3071  005E                     can_status_check@bytes_written:	
  3072                           
  3073                           ; 1 bytes @ 0x3E
  3074  005E                     	ds	1
  3075  005F                     can_status_check@status:	
  3076                           
  3077                           ; 1 bytes @ 0x3F
  3078  005F                     	ds	1
  3079  0060                     ??_main:	
  3080                           
  3081                           ; 1 bytes @ 0x40
  3082  0060                     	ds	2
  3083                           
  3084                           	psect	maintext
  3085  03C3                     __pmaintext:	
  3086 ;;
  3087 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3088 ;;
  3089 ;; *************** function _main *****************
  3090 ;; Defined at:
  3091 ;;		line 45 in file "main.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  status          1    2[BANK1 ] unsigned char 
  3096 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3097 ;;  mask            2    3[BANK1 ] unsigned int 
  3098 ;;  idx             1   18[BANK1 ] unsigned char 
  3099 ;;  cmd             1   17[BANK1 ] unsigned char 
  3100 ;;  c               1   16[BANK1 ] unsigned char 
  3101 ;;  n               1    6[BANK1 ] unsigned char 
  3102 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3103 ;;  bpr             1    1[BANK1 ] unsigned char 
  3104 ;;  sid             1    0[BANK1 ] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : B1F/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3115 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3117 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3118 ;;Total ram usage:       21 bytes
  3119 ;; Hardware stack levels required when called:    6
  3120 ;; This function calls:
  3121 ;;		_EUSART_Read
  3122 ;;		_SYSTEM_Initialize
  3123 ;;		_atoi
  3124 ;;		_can_abort
  3125 ;;		_can_baudrate
  3126 ;;		_can_dump_registers
  3127 ;;		_can_init
  3128 ;;		_can_logging_mode
  3129 ;;		_can_ope_mode
  3130 ;;		_can_send
  3131 ;;		_can_set_mask
  3132 ;;		_can_set_sid
  3133 ;;		_can_status_check
  3134 ;;		_printf
  3135 ;; This function is called by:
  3136 ;;		Startup code after reset
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function _main
  3142  03C3                     _main:	
  3143                           
  3144                           ;main.c: 47: LATCbits.LATC3 = 1;
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3148  03C3  0022               	movlb	2	; select bank2
  3149  03C4  158E               	bsf	14,3	;volatile
  3150                           
  3151                           ;main.c: 49: uint8_t buf[9];
  3152                           ;main.c: 50: bool echo_back = 0;
  3153  03C5  0021               	movlb	1	; select bank1
  3154  03C6  01A5               	clrf	main@echo_back^(0+128)
  3155                           
  3156                           ;main.c: 51: uint8_t c, idx;
  3157                           ;main.c: 53: uint8_t cmd, sid, n, bpr;
  3158                           ;main.c: 54: uint16_t mask;
  3159                           ;main.c: 56: SYSTEM_Initialize();
  3160  03C7  318C  2471  3183   	fcall	_SYSTEM_Initialize
  3161                           
  3162                           ;main.c: 61: output_format.with_sid = 0;
  3163  03CA  0020               	movlb	0	; select bank0
  3164  03CB  01E6               	clrf	_output_format
  3165                           
  3166                           ;main.c: 62: output_format.hex_output = 0;
  3167  03CC  01E7               	clrf	_output_format+1
  3168                           
  3169                           ;main.c: 63: can_init(receive_handler);
  3170  03CD  30BF               	movlw	low _receive_handler
  3171  03CE  00BF               	movwf	can_init@receive_handler
  3172  03CF  300E               	movlw	high _receive_handler
  3173  03D0  00C0               	movwf	can_init@receive_handler+1
  3174  03D1  318F  2781  3183   	fcall	_can_init
  3175  03D4                     L1:	
  3176                           
  3177                           ;main.c: 65: idx = 0;
  3178  03D4  0021               	movlb	1	; select bank1
  3179  03D5  01B2               	clrf	main@idx^(0+128)
  3180  03D6                     l2527:	
  3181                           ;main.c: 67: while (1)
  3182                           
  3183                           
  3184                           ;main.c: 68: {
  3185                           ;main.c: 69: bool status = can_status_check();
  3186  03D6  318E  2612  3183   	fcall	_can_status_check
  3187  03D9  0020               	movlb	0	; select bank0
  3188  03DA  00E0               	movwf	??_main
  3189  03DB  0860               	movf	??_main,w
  3190  03DC  0021               	movlb	1	; select bank1
  3191  03DD  00A2               	movwf	main@status^(0+128)
  3192                           
  3193                           ;main.c: 70: if (status) {
  3194  03DE  0822               	movf	main@status^(0+128),w
  3195  03DF  1903               	btfsc	3,2
  3196  03E0  2BE4               	goto	l202
  3197                           
  3198                           ;main.c: 71: LATCbits.LATC3 = 0;
  3199  03E1  0022               	movlb	2	; select bank2
  3200  03E2  118E               	bcf	14,3	;volatile
  3201                           
  3202                           ;main.c: 72: } else {
  3203  03E3  2BE6               	goto	l203
  3204  03E4                     l202:	
  3205                           
  3206                           ;main.c: 73: LATCbits.LATC3 = 1;
  3207  03E4  0022               	movlb	2	; select bank2
  3208  03E5  158E               	bsf	14,3	;volatile
  3209  03E6                     l203:	
  3210                           
  3211                           ;main.c: 74: }
  3212                           ;main.c: 75: if ((PIR1bits.RCIF)) {
  3213  03E6  0020               	movlb	0	; select bank0
  3214  03E7  1E91               	btfss	17,5	;volatile
  3215  03E8  2BD6               	goto	l2527
  3216                           
  3217                           ;main.c: 76: c = EUSART_Read();
  3218  03E9  318C  2443  3183   	fcall	_EUSART_Read
  3219  03EC  0020               	movlb	0	; select bank0
  3220  03ED  00E0               	movwf	??_main
  3221  03EE  0860               	movf	??_main,w
  3222  03EF  0021               	movlb	1	; select bank1
  3223  03F0  00B0               	movwf	main@c^(0+128)
  3224                           
  3225                           ;main.c: 77: if (echo_back) printf("%c", c);
  3226  03F1  0825               	movf	main@echo_back^(0+128),w
  3227  03F2  1903               	btfsc	3,2
  3228  03F3  2C05               	goto	l2539
  3229  03F4  3027               	movlw	low (STR_6| (0+32768))
  3230  03F5  0020               	movlb	0	; select bank0
  3231  03F6  00A2               	movwf	printf@f
  3232  03F7  3094               	movlw	high (STR_6| (0+32768))
  3233  03F8  00A3               	movwf	printf@f+1
  3234  03F9  0021               	movlb	1	; select bank1
  3235  03FA  0830               	movf	main@c^(0+128),w
  3236  03FB  0020               	movlb	0	; select bank0
  3237  03FC  00E0               	movwf	??_main
  3238  03FD  01E1               	clrf	??_main+1
  3239  03FE  0860               	movf	??_main,w
  3240  03FF  00A4               	movwf	?_printf+2
  3241  0400  0861               	movf	??_main+1,w
  3242  0401  00A5               	movwf	?_printf+3
  3243  0402  3185  25B3  3183   	fcall	_printf
  3244  0405                     l2539:	
  3245                           
  3246                           ;main.c: 79: buf[idx] = c;
  3247  0405  0021               	movlb	1	; select bank1
  3248  0406  0830               	movf	main@c^(0+128),w
  3249  0407  0020               	movlb	0	; select bank0
  3250  0408  00E0               	movwf	??_main
  3251  0409  0021               	movlb	1	; select bank1
  3252  040A  0832               	movf	main@idx^(0+128),w
  3253  040B  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3254  040C  0086               	movwf	6
  3255  040D  0187               	clrf	7
  3256  040E  0020               	movlb	0	; select bank0
  3257  040F  0860               	movf	??_main,w
  3258  0410  0081               	movwf	1
  3259                           
  3260                           ;main.c: 80: if (c == '\n') {
  3261  0411  300A               	movlw	10
  3262  0412  0021               	movlb	1	; select bank1
  3263  0413  0630               	xorwf	main@c^(0+128),w
  3264  0414  1D03               	btfss	3,2
  3265  0415  2D90               	goto	l2633
  3266                           
  3267                           ;main.c: 81: buf[idx] = '\0';
  3268  0416  0832               	movf	main@idx^(0+128),w
  3269  0417  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3270  0418  0086               	movwf	6
  3271  0419  0187               	clrf	7
  3272  041A  0181               	clrf	1
  3273                           
  3274                           ;main.c: 82: if (buf[0] == '@') {
  3275  041B  3040               	movlw	64
  3276  041C  0627               	xorwf	main@buf^(0+128),w
  3277  041D  1D03               	btfss	3,2
  3278  041E  2D86               	goto	l2629
  3279                           
  3280                           ;main.c: 83: cmd = buf[1];
  3281  041F  0828               	movf	(main@buf^(0+128)+1),w
  3282  0420  0020               	movlb	0	; select bank0
  3283  0421  00E0               	movwf	??_main
  3284  0422  0860               	movf	??_main,w
  3285  0423  0021               	movlb	1	; select bank1
  3286  0424  00B1               	movwf	main@cmd^(0+128)
  3287                           
  3288                           ;main.c: 84: switch(cmd) {
  3289  0425  2D64               	goto	l2627
  3290  0426                     l2549:	
  3291                           ;main.c: 85: case 'i':
  3292                           
  3293                           
  3294                           ;main.c: 86: sid = atoi(&buf[2]);
  3295  0426  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3296  0427  318F  271A  3183   	fcall	_atoi
  3297  042A  0876               	movf	?_atoi,w
  3298  042B  0020               	movlb	0	; select bank0
  3299  042C  00E0               	movwf	??_main
  3300  042D  0860               	movf	??_main,w
  3301  042E  0021               	movlb	1	; select bank1
  3302  042F  00A0               	movwf	main@sid^(0+128)
  3303                           
  3304                           ;main.c: 87: can_set_sid(sid);
  3305  0430  0820               	movf	main@sid^(0+128),w
  3306  0431  0020               	movlb	0	; select bank0
  3307  0432  00E0               	movwf	??_main
  3308  0433  01E1               	clrf	??_main+1
  3309  0434  0860               	movf	??_main,w
  3310  0435  00F0               	movwf	can_set_sid@can_node
  3311  0436  0861               	movf	??_main+1,w
  3312  0437  00F1               	movwf	can_set_sid@can_node+1
  3313  0438  318C  24E0  3183   	fcall	_can_set_sid
  3314                           
  3315                           ;main.c: 88: break;
  3316  043B  2BD4               	goto	L1
  3317  043C                     l2553:	
  3318                           ;main.c: 89: case 'v':
  3319                           
  3320                           
  3321                           ;main.c: 90: if (buf[2] == 'd') {
  3322  043C  3064               	movlw	100
  3323  043D  0021               	movlb	1	; select bank1
  3324  043E  0629               	xorwf	(main@buf^(0+128)+2),w
  3325  043F  1D03               	btfss	3,2
  3326  0440  2C45               	goto	l2559
  3327                           
  3328                           ;main.c: 91: can_logging_mode(1, 1);
  3329  0441  01F0               	clrf	can_logging_mode@verbose
  3330  0442  0AF0               	incf	can_logging_mode@verbose,f
  3331  0443  3001               	movlw	1
  3332  0444  2C4C               	goto	L2
  3333  0445                     l2559:	
  3334                           ;main.c: 93: } else if (buf[2] == 'v') {
  3335                           
  3336                           ;main.c: 92: echo_back = 1;
  3337                           
  3338  0445  3076               	movlw	118
  3339  0446  0629               	xorwf	(main@buf^(0+128)+2),w
  3340  0447  1D03               	btfss	3,2
  3341  0448  2C53               	goto	l2565
  3342                           
  3343                           ;main.c: 94: can_logging_mode(0, 1);
  3344  0449  01F0               	clrf	can_logging_mode@verbose
  3345  044A  0AF0               	incf	can_logging_mode@verbose,f
  3346  044B  3000               	movlw	0
  3347  044C                     L2:	
  3348  044C  318C  2458  3183   	fcall	_can_logging_mode
  3349                           
  3350                           ;main.c: 95: echo_back = 1;
  3351  044F  0021               	movlb	1	; select bank1
  3352  0450  01A5               	clrf	main@echo_back^(0+128)
  3353  0451  0AA5               	incf	main@echo_back^(0+128),f
  3354                           
  3355                           ;main.c: 96: } else if (buf[2] == 'n') {
  3356  0452  2BD4               	goto	L1
  3357  0453                     l2565:	
  3358  0453  306E               	movlw	110
  3359  0454  0629               	xorwf	(main@buf^(0+128)+2),w
  3360  0455  1D03               	btfss	3,2
  3361  0456  2BD4               	goto	L1
  3362                           
  3363                           ;main.c: 97: can_logging_mode(0, 0);
  3364  0457  01F0               	clrf	can_logging_mode@verbose
  3365  0458  3000               	movlw	0
  3366  0459  318C  2458  3183   	fcall	_can_logging_mode
  3367                           
  3368                           ;main.c: 98: echo_back = 0;
  3369  045C  0021               	movlb	1	; select bank1
  3370  045D  01A5               	clrf	main@echo_back^(0+128)
  3371                           
  3372                           ;main.c: 99: }
  3373                           ;main.c: 100: break;
  3374  045E  2BD4               	goto	L1
  3375  045F                     l2571:	
  3376                           ;main.c: 101: case 'o':
  3377                           
  3378                           
  3379                           ;main.c: 102: if (buf[2] == 'l') {
  3380  045F  306C               	movlw	108
  3381  0460  0629               	xorwf	(main@buf^(0+128)+2),w
  3382  0461  1D03               	btfss	3,2
  3383  0462  2C65               	goto	l2575
  3384                           
  3385                           ;main.c: 103: can_ope_mode(0b01000000);
  3386  0463  3040               	movlw	64
  3387  0464  2C6B               	goto	L3
  3388  0465                     l2575:	
  3389                           ;main.c: 104: } else if (buf[2] == 'n') {
  3390                           
  3391  0465  306E               	movlw	110
  3392  0466  0021               	movlb	1	; select bank1
  3393  0467  0629               	xorwf	(main@buf^(0+128)+2),w
  3394  0468  1D03               	btfss	3,2
  3395  0469  2C6E               	goto	l2579
  3396                           
  3397                           ;main.c: 105: can_ope_mode(0b00000000);
  3398  046A  3000               	movlw	0
  3399  046B                     L3:	
  3400  046B  318E  2668  3183   	fcall	_can_ope_mode
  3401  046E                     l2579:	
  3402                           
  3403                           ;main.c: 106: }
  3404                           ;main.c: 107: if (buf[3] == '\0') {
  3405  046E  0021               	movlb	1	; select bank1
  3406  046F  082A               	movf	(main@buf^(0+128)+3),w
  3407  0470  1D03               	btfss	3,2
  3408  0471  2C75               	goto	l2583
  3409                           
  3410                           ;main.c: 108: output_format.with_sid = 0;
  3411  0472  0020               	movlb	0	; select bank0
  3412  0473  01E6               	clrf	_output_format
  3413  0474  2C80               	goto	l2589
  3414  0475                     l2583:	
  3415                           ;main.c: 110: } else if (buf[3] == 's' && buf[4] == '\0') {
  3416                           
  3417                           ;main.c: 109: output_format.hex_output = 0;
  3418                           
  3419  0475  3073               	movlw	115
  3420  0476  0021               	movlb	1	; select bank1
  3421  0477  062A               	xorwf	(main@buf^(0+128)+3),w
  3422  0478  1D03               	btfss	3,2
  3423  0479  2C82               	goto	l2591
  3424  047A  082B               	movf	(main@buf^(0+128)+4),w
  3425  047B  1D03               	btfss	3,2
  3426  047C  2C82               	goto	l2591
  3427                           
  3428                           ;main.c: 111: output_format.with_sid = 1;
  3429  047D  0020               	movlb	0	; select bank0
  3430  047E  01E6               	clrf	_output_format
  3431  047F  0AE6               	incf	_output_format,f
  3432  0480                     l2589:	
  3433                           
  3434                           ;main.c: 112: output_format.hex_output = 0;
  3435  0480  01E7               	clrf	_output_format+1
  3436                           
  3437                           ;main.c: 113: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3438  0481  2BD4               	goto	L1
  3439  0482                     l2591:	
  3440  0482  3068               	movlw	104
  3441  0483  0021               	movlb	1	; select bank1
  3442  0484  062A               	xorwf	(main@buf^(0+128)+3),w
  3443  0485  1D03               	btfss	3,2
  3444  0486  2BD4               	goto	L1
  3445  0487  082B               	movf	(main@buf^(0+128)+4),w
  3446  0488  1D03               	btfss	3,2
  3447  0489  2BD4               	goto	L1
  3448                           
  3449                           ;main.c: 114: output_format.with_sid = 0;
  3450  048A  0020               	movlb	0	; select bank0
  3451  048B  01E6               	clrf	_output_format
  3452                           
  3453                           ;main.c: 115: output_format.hex_output = 1;
  3454  048C  01E7               	clrf	_output_format+1
  3455  048D  0AE7               	incf	_output_format+1,f
  3456                           
  3457                           ;main.c: 116: }
  3458                           ;main.c: 117: break;
  3459  048E  2BD4               	goto	L1
  3460  048F                     l2599:	
  3461                           ;main.c: 118: case 'b':
  3462                           
  3463                           
  3464                           ;main.c: 119: can_abort();
  3465  048F  318D  2530  3183   	fcall	_can_abort
  3466                           
  3467                           ;main.c: 120: bpr = atoi(&buf[2]);
  3468  0492  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3469  0493  318F  271A  3183   	fcall	_atoi
  3470  0496  0876               	movf	?_atoi,w
  3471  0497  0020               	movlb	0	; select bank0
  3472  0498  00E0               	movwf	??_main
  3473  0499  0860               	movf	??_main,w
  3474  049A  0021               	movlb	1	; select bank1
  3475  049B  00A1               	movwf	main@bpr^(0+128)
  3476                           
  3477                           ;main.c: 121: can_baudrate(bpr);
  3478  049C  0821               	movf	main@bpr^(0+128),w
  3479  049D  318D  255D  3183   	fcall	_can_baudrate
  3480                           
  3481                           ;main.c: 122: break;
  3482  04A0  2BD4               	goto	L1
  3483  04A1                     l2605:	
  3484                           ;main.c: 123: case 'm':
  3485                           
  3486                           
  3487                           ;main.c: 124: case 'f':
  3488                           ;main.c: 125: n = buf[2] - 0x30;
  3489  04A1  0021               	movlb	1	; select bank1
  3490  04A2  0829               	movf	(main@buf^(0+128)+2),w
  3491  04A3  3ED0               	addlw	208
  3492  04A4  0020               	movlb	0	; select bank0
  3493  04A5  00E0               	movwf	??_main
  3494  04A6  0860               	movf	??_main,w
  3495  04A7  0021               	movlb	1	; select bank1
  3496  04A8  00A6               	movwf	main@n^(0+128)
  3497                           
  3498                           ;main.c: 126: mask = atoi(&buf[3]);
  3499  04A9  30AA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3500  04AA  318F  271A  3183   	fcall	_atoi
  3501  04AD  0877               	movf	?_atoi+1,w
  3502  04AE  0021               	movlb	1	; select bank1
  3503  04AF  00A4               	movwf	(main@mask+1)^(0+128)
  3504  04B0  0876               	movf	?_atoi,w
  3505  04B1  00A3               	movwf	main@mask^(0+128)
  3506                           
  3507                           ;main.c: 127: if (cmd == 'm') {
  3508  04B2  306D               	movlw	109
  3509  04B3  0631               	xorwf	main@cmd^(0+128),w
  3510  04B4  1D03               	btfss	3,2
  3511  04B5  2CC6               	goto	l2613
  3512                           
  3513                           ;main.c: 128: can_set_mask(0, n, mask);
  3514  04B6  0826               	movf	main@n^(0+128),w
  3515  04B7  0020               	movlb	0	; select bank0
  3516  04B8  00E0               	movwf	??_main
  3517  04B9  0860               	movf	??_main,w
  3518  04BA  00BF               	movwf	can_set_mask@n
  3519  04BB  0021               	movlb	1	; select bank1
  3520  04BC  0823               	movf	main@mask^(0+128),w
  3521  04BD  0020               	movlb	0	; select bank0
  3522  04BE  00E1               	movwf	??_main+1
  3523  04BF  0861               	movf	??_main+1,w
  3524  04C0  00C0               	movwf	can_set_mask@mask
  3525  04C1  3000               	movlw	0
  3526  04C2  3180  2036  3183   	fcall	_can_set_mask
  3527                           
  3528                           ;main.c: 129: } else if (cmd == 'f') {
  3529  04C5  2BD4               	goto	L1
  3530  04C6                     l2613:	
  3531  04C6  3066               	movlw	102
  3532  04C7  0021               	movlb	1	; select bank1
  3533  04C8  0631               	xorwf	main@cmd^(0+128),w
  3534  04C9  1D03               	btfss	3,2
  3535  04CA  2BD4               	goto	L1
  3536                           
  3537                           ;main.c: 130: can_set_mask(1, n, mask);
  3538  04CB  0826               	movf	main@n^(0+128),w
  3539  04CC  0020               	movlb	0	; select bank0
  3540  04CD  00E0               	movwf	??_main
  3541  04CE  0860               	movf	??_main,w
  3542  04CF  00BF               	movwf	can_set_mask@n
  3543  04D0  0021               	movlb	1	; select bank1
  3544  04D1  0823               	movf	main@mask^(0+128),w
  3545  04D2  0020               	movlb	0	; select bank0
  3546  04D3  00E1               	movwf	??_main+1
  3547  04D4  0861               	movf	??_main+1,w
  3548  04D5  00C0               	movwf	can_set_mask@mask
  3549  04D6  3001               	movlw	1
  3550  04D7  3180  2036  3183   	fcall	_can_set_mask
  3551                           
  3552                           ;main.c: 131: }
  3553                           ;main.c: 132: break;
  3554  04DA  2BD4               	goto	L1
  3555  04DB                     l2617:	
  3556                           ;main.c: 133: case 'a':
  3557                           
  3558                           
  3559                           ;main.c: 134: can_abort();
  3560  04DB  318D  2530  3183   	fcall	_can_abort
  3561                           
  3562                           ;main.c: 135: break;
  3563  04DE  2BD4               	goto	L1
  3564  04DF                     l2619:	
  3565                           ;main.c: 136: case 'd':
  3566                           
  3567                           
  3568                           ;main.c: 137: can_dump_registers();
  3569  04DF  3181  216A  3183   	fcall	_can_dump_registers
  3570                           
  3571                           ;main.c: 138: break;
  3572  04E2  2BD4               	goto	L1
  3573  04E3                     l2621:	
  3574                           ;main.c: 139: case '@':
  3575                           
  3576                           
  3577                           ;main.c: 140: can_send(&buf[1], idx - 1);
  3578  04E3  0021               	movlb	1	; select bank1
  3579  04E4  0832               	movf	main@idx^(0+128),w
  3580  04E5  3EFF               	addlw	255
  3581  04E6  0020               	movlb	0	; select bank0
  3582  04E7  00E0               	movwf	??_main
  3583  04E8  0860               	movf	??_main,w
  3584  04E9  00BB               	movwf	can_send@dlc
  3585  04EA  30A8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3586  04EB  3182  2276  3183   	fcall	_can_send
  3587                           
  3588                           ;main.c: 141: break;
  3589  04EE  2BD4               	goto	L1
  3590  04EF                     l2623:	
  3591                           ;main.c: 142: case 'h':
  3592                           
  3593                           
  3594                           ;main.c: 143: printf("/// UART2CAN HELP (version %s) ///\n", "0.1 March 18, 2018");
  3595  04EF  30B9               	movlw	low (STR_7| (0+32768))
  3596  04F0  0020               	movlb	0	; select bank0
  3597  04F1  00A2               	movwf	printf@f
  3598  04F2  3091               	movlw	high (STR_7| (0+32768))
  3599  04F3  00A3               	movwf	printf@f+1
  3600  04F4  307B               	movlw	low (STR_8| (0+32768))
  3601  04F5  00A4               	movwf	low ((?_printf| 0+2))
  3602  04F6  3092               	movlw	high (STR_8| (0+32768))
  3603  04F7  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3604  04F8  3185  25B3  3183   	fcall	_printf
  3605                           
  3606                           ;main.c: 144: printf("[Set standard identifier] @i<standard identifier>\n");
  3607  04FB  30E4               	movlw	low (STR_9| (0+32768))
  3608  04FC  0020               	movlb	0	; select bank0
  3609  04FD  00A2               	movwf	printf@f
  3610  04FE  3090               	movlw	high (STR_9| (0+32768))
  3611  04FF  00A3               	movwf	printf@f+1
  3612  0500  3185  25B3  3183   	fcall	_printf
  3613                           
  3614                           ;main.c: 145: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3615  0503  3000               	movlw	low (STR_10| (0+32768))
  3616  0504  0020               	movlb	0	; select bank0
  3617  0505  00A2               	movwf	printf@f
  3618  0506  3090               	movlw	high (STR_10| (0+32768))
  3619  0507  00A3               	movwf	printf@f+1
  3620  0508  3185  25B3  3183   	fcall	_printf
  3621                           
  3622                           ;main.c: 146: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3623  050B  30AE               	movlw	low (STR_11| (0+32768))
  3624  050C  0020               	movlb	0	; select bank0
  3625  050D  00A2               	movwf	printf@f
  3626  050E  3090               	movlw	high (STR_11| (0+32768))
  3627  050F  00A3               	movwf	printf@f+1
  3628  0510  3185  25B3  3183   	fcall	_printf
  3629                           
  3630                           ;main.c: 147: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3631  0513  303B               	movlw	low (STR_12| (0+32768))
  3632  0514  0020               	movlb	0	; select bank0
  3633  0515  00A2               	movwf	printf@f
  3634  0516  3090               	movlw	high (STR_12| (0+32768))
  3635  0517  00A3               	movwf	printf@f+1
  3636  0518  3185  25B3  3183   	fcall	_printf
  3637                           
  3638                           ;main.c: 148: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3639  051B  306D               	movlw	low (STR_13| (0+32768))
  3640  051C  0020               	movlb	0	; select bank0
  3641  051D  00A2               	movwf	printf@f
  3642  051E  3091               	movlw	high (STR_13| (0+32768))
  3643  051F  00A3               	movwf	printf@f+1
  3644  0520  3185  25B3  3183   	fcall	_printf
  3645                           
  3646                           ;main.c: 149: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3647  0523  3043               	movlw	low (STR_14| (0+32768))
  3648  0524  0020               	movlb	0	; select bank0
  3649  0525  00A2               	movwf	printf@f
  3650  0526  3091               	movlw	high (STR_14| (0+32768))
  3651  0527  00A3               	movwf	printf@f+1
  3652  0528  3185  25B3  3183   	fcall	_printf
  3653                           
  3654                           ;main.c: 150: printf("[Set baud rate] @b<bpr>\n");
  3655  052B  30F7               	movlw	low (STR_15| (0+32768))
  3656  052C  0020               	movlb	0	; select bank0
  3657  052D  00A2               	movwf	printf@f
  3658  052E  3091               	movlw	high (STR_15| (0+32768))
  3659  052F  00A3               	movwf	printf@f+1
  3660  0530  3185  25B3  3183   	fcall	_printf
  3661                           
  3662                           ;main.c: 151: printf("[Abort all pending transmissions] @a\n");
  3663  0533  3093               	movlw	low (STR_16| (0+32768))
  3664  0534  0020               	movlb	0	; select bank0
  3665  0535  00A2               	movwf	printf@f
  3666  0536  3091               	movlw	high (STR_16| (0+32768))
  3667  0537  00A3               	movwf	printf@f+1
  3668  0538  3185  25B3  3183   	fcall	_printf
  3669                           
  3670                           ;main.c: 152: printf("[Dump registers] @d\n");
  3671  053B  3052               	movlw	low (STR_17| (0+32768))
  3672  053C  0020               	movlb	0	; select bank0
  3673  053D  00A2               	movwf	printf@f
  3674  053E  3092               	movlw	high (STR_17| (0+32768))
  3675  053F  00A3               	movwf	printf@f+1
  3676  0540  3185  25B3  3183   	fcall	_printf
  3677                           
  3678                           ;main.c: 153: printf("[Send message] <message>\n");
  3679  0543  30DD               	movlw	low (STR_18| (0+32768))
  3680  0544  0020               	movlb	0	; select bank0
  3681  0545  00A2               	movwf	printf@f
  3682  0546  3091               	movlw	high (STR_18| (0+32768))
  3683  0547  00A3               	movwf	printf@f+1
  3684  0548  3185  25B3  3183   	fcall	_printf
  3685                           
  3686                           ;main.c: 154: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3687  054B  3075               	movlw	low (STR_19| (0+32768))
  3688  054C  0020               	movlb	0	; select bank0
  3689  054D  00A2               	movwf	printf@f
  3690  054E  3090               	movlw	high (STR_19| (0+32768))
  3691  054F  00A3               	movwf	printf@f+1
  3692  0550  3185  25B3  3183   	fcall	_printf
  3693                           
  3694                           ;main.c: 155: printf("[Receive message] <message> will be output\n");
  3695  0553  3017               	movlw	low (STR_20| (0+32768))
  3696  0554  0020               	movlb	0	; select bank0
  3697  0555  00A2               	movwf	printf@f
  3698  0556  3091               	movlw	high (STR_20| (0+32768))
  3699  0557  00A3               	movwf	printf@f+1
  3700  0558  3185  25B3  3183   	fcall	_printf
  3701                           
  3702                           ;main.c: 156: printf("[Show this help]: @h\n");
  3703  055B  3027               	movlw	low (STR_21| (0+32768))
  3704  055C  0020               	movlb	0	; select bank0
  3705  055D  00A2               	movwf	printf@f
  3706  055E  3092               	movlw	high (STR_21| (0+32768))
  3707  055F  00A3               	movwf	printf@f+1
  3708  0560  3185  25B3  3183   	fcall	_printf
  3709                           
  3710                           ;main.c: 158: }
  3711                           
  3712                           ;main.c: 157: break;
  3713  0563  2BD4               	goto	L1
  3714  0564                     l2627:	
  3715  0564  0021               	movlb	1	; select bank1
  3716  0565  0831               	movf	main@cmd^(0+128),w
  3717                           
  3718                           ; Switch size 1, requested type "space"
  3719                           ; Number of cases is 10, Range of values is 64 to 118
  3720                           ; switch strategies available:
  3721                           ; Name         Instructions Cycles
  3722                           ; simple_byte           31    16 (average)
  3723                           ; direct_byte          119     9 (fixed)
  3724                           ; jumptable            263     9 (fixed)
  3725                           ;	Chosen strategy is simple_byte
  3726  0566  3A40               	xorlw	64	; case 64
  3727  0567  1903               	skipnz
  3728  0568  2CE3               	goto	l2621
  3729  0569  3A21               	xorlw	33	; case 97
  3730  056A  1903               	skipnz
  3731  056B  2CDB               	goto	l2617
  3732  056C  3A03               	xorlw	3	; case 98
  3733  056D  1903               	skipnz
  3734  056E  2C8F               	goto	l2599
  3735  056F  3A06               	xorlw	6	; case 100
  3736  0570  1903               	skipnz
  3737  0571  2CDF               	goto	l2619
  3738  0572  3A02               	xorlw	2	; case 102
  3739  0573  1903               	skipnz
  3740  0574  2CA1               	goto	l2605
  3741  0575  3A0E               	xorlw	14	; case 104
  3742  0576  1903               	skipnz
  3743  0577  2CEF               	goto	l2623
  3744  0578  3A01               	xorlw	1	; case 105
  3745  0579  1903               	skipnz
  3746  057A  2C26               	goto	l2549
  3747  057B  3A04               	xorlw	4	; case 109
  3748  057C  1903               	skipnz
  3749  057D  2CA1               	goto	l2605
  3750  057E  3A02               	xorlw	2	; case 111
  3751  057F  1903               	skipnz
  3752  0580  2C5F               	goto	l2571
  3753  0581  3A19               	xorlw	25	; case 118
  3754  0582  1903               	skipnz
  3755  0583  2C3C               	goto	l2553
  3756  0584  2D8F               	goto	l2631
  3757                           
  3758                           ;main.c: 159: } else {
  3759  0585  2BD4               	goto	L1
  3760  0586                     l2629:	
  3761                           
  3762                           ;main.c: 160: can_send(buf, idx);
  3763  0586  0832               	movf	main@idx^(0+128),w
  3764  0587  0020               	movlb	0	; select bank0
  3765  0588  00E0               	movwf	??_main
  3766  0589  0860               	movf	??_main,w
  3767  058A  00BB               	movwf	can_send@dlc
  3768  058B  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3769  058C  3182  2276  3183   	fcall	_can_send
  3770  058F                     l2631:	
  3771  058F  2BD4               	goto	L1
  3772  0590                     l2633:	
  3773                           ;main.c: 164: } else if (++idx > max_idx) {
  3774                           
  3775                           ;main.c: 161: }
  3776                           ;main.c: 162: idx = 0;
  3777                           
  3778  0590  3001               	movlw	1
  3779  0591  0020               	movlb	0	; select bank0
  3780  0592  00E0               	movwf	??_main
  3781  0593  0860               	movf	??_main,w
  3782  0594  0021               	movlb	1	; select bank1
  3783  0595  07B2               	addwf	main@idx^(0+128),f
  3784  0596  302E               	movlw	low (_max_idx| (0+32768))
  3785  0597  0084               	movwf	4
  3786  0598  3094               	movlw	high (_max_idx| (0+32768))
  3787  0599  0085               	movwf	5
  3788  059A  0800               	movf	0,w	;code access
  3789  059B  0020               	movlb	0	; select bank0
  3790  059C  00E1               	movwf	??_main+1
  3791  059D  0021               	movlb	1	; select bank1
  3792  059E  0832               	movf	main@idx^(0+128),w
  3793  059F  0020               	movlb	0	; select bank0
  3794  05A0  0261               	subwf	??_main+1,w
  3795  05A1  1803               	skipnc
  3796  05A2  2BD6               	goto	l2527
  3797                           
  3798                           ;main.c: 165: buf[idx] = '\0';
  3799  05A3  0021               	movlb	1	; select bank1
  3800  05A4  0832               	movf	main@idx^(0+128),w
  3801  05A5  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3802  05A6  0086               	movwf	6
  3803  05A7  0187               	clrf	7
  3804  05A8  0181               	clrf	1
  3805                           
  3806                           ;main.c: 166: can_send(buf, idx);
  3807  05A9  0832               	movf	main@idx^(0+128),w
  3808  05AA  0020               	movlb	0	; select bank0
  3809  05AB  00E0               	movwf	??_main
  3810  05AC  0860               	movf	??_main,w
  3811  05AD  00BB               	movwf	can_send@dlc
  3812  05AE  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3813  05AF  3182  2276  3183   	fcall	_can_send
  3814  05B2  2BD4               	goto	L1
  3815  05B3                     __end_of_main:	
  3816                           ;main.c: 167: idx = 0;
  3817                           
  3818                           
  3819                           	psect	text1
  3820  0E12                     __ptext1:	
  3821 ;; *************** function _can_status_check *****************
  3822 ;; Defined at:
  3823 ;;		line 249 in file "mcp2515.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  status          1   63[BANK0 ] unsigned char 
  3828 ;;  bytes_writte    1   62[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      unsigned char 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;Total ram usage:        4 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    5
  3845 ;; This function calls:
  3846 ;;		_SPI_exchange
  3847 ;;		_printf
  3848 ;;		_receive
  3849 ;;		_txf_clear
  3850 ;; This function is called by:
  3851 ;;		_main
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           
  3856                           ;psect for function _can_status_check
  3857  0E12                     _can_status_check:	
  3858                           
  3859                           ;mcp2515.c: 251: buf[0] = 0b10100000;
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3863  0E12  30A0               	movlw	160
  3864  0E13  0020               	movlb	0	; select bank0
  3865  0E14  00DC               	movwf	??_can_status_check
  3866  0E15  085C               	movf	??_can_status_check,w
  3867  0E16  0021               	movlb	1	; select bank1
  3868  0E17  00B3               	movwf	_buf^(0+128)
  3869                           
  3870                           ;mcp2515.c: 252: buf[1] = 0x00;
  3871  0E18  01B4               	clrf	(_buf^(0+128)+1)
  3872                           
  3873                           ;mcp2515.c: 253: uint8_t bytes_written = SPI_exchange(buf, 2);
  3874  0E19  3002               	movlw	2
  3875  0E1A  0020               	movlb	0	; select bank0
  3876  0E1B  00DC               	movwf	??_can_status_check
  3877  0E1C  085C               	movf	??_can_status_check,w
  3878  0E1D  00F8               	movwf	SPI_exchange@len
  3879  0E1E  30B3               	movlw	(low (_buf| 0))& (0+255)
  3880  0E1F  318C  2480  318E   	fcall	_SPI_exchange
  3881  0E22  0020               	movlb	0	; select bank0
  3882  0E23  00DD               	movwf	??_can_status_check+1
  3883  0E24  085D               	movf	??_can_status_check+1,w
  3884  0E25  00DE               	movwf	can_status_check@bytes_written
  3885                           
  3886                           ;mcp2515.c: 254: uint8_t status = buf[1];
  3887  0E26  0021               	movlb	1	; select bank1
  3888  0E27  0834               	movf	(_buf^(0+128)+1),w
  3889  0E28  0020               	movlb	0	; select bank0
  3890  0E29  00DC               	movwf	??_can_status_check
  3891  0E2A  085C               	movf	??_can_status_check,w
  3892  0E2B  00DF               	movwf	can_status_check@status
  3893                           
  3894                           ;mcp2515.c: 255: if (status == 0x00) {
  3895  0E2C  085F               	movf	can_status_check@status,w
  3896  0E2D  1D03               	btfss	3,2
  3897  0E2E  2E31               	goto	l332
  3898                           
  3899                           ;mcp2515.c: 256: return 1;
  3900  0E2F  3001               	movlw	1
  3901  0E30  0008               	return
  3902  0E31                     l332:	
  3903                           ;mcp2515.c: 257: } else if ((status & 0b00000010) > 0) {
  3904                           
  3905  0E31  1CDF               	btfss	can_status_check@status,1
  3906  0E32  2E42               	goto	l335
  3907                           
  3908                           ;mcp2515.c: 258: if (mode.debug) printf("RX1IF is on\n");
  3909  0E33  0862               	movf	_mode,w
  3910  0E34  1903               	btfsc	3,2
  3911  0E35  2E3D               	goto	l336
  3912  0E36  30B9               	movlw	low (STR_36| (0+32768))
  3913  0E37  00A2               	movwf	printf@f
  3914  0E38  3093               	movlw	high (STR_36| (0+32768))
  3915  0E39  00A3               	movwf	printf@f+1
  3916  0E3A  3185  25B3  318E   	fcall	_printf
  3917  0E3D                     l336:	
  3918                           
  3919                           ;mcp2515.c: 259: receive(1);
  3920  0E3D  3001               	movlw	1
  3921  0E3E  3180  20B6  318E   	fcall	_receive
  3922                           
  3923                           ;mcp2515.c: 260: } else if ((status & 0b00000001) > 0) {
  3924  0E41  2E61               	goto	l2289
  3925  0E42                     l335:	
  3926  0E42  1C5F               	btfss	can_status_check@status,0
  3927  0E43  2E53               	goto	l338
  3928                           
  3929                           ;mcp2515.c: 261: if (mode.debug) printf("RX0IF is on\n");
  3930  0E44  0862               	movf	_mode,w
  3931  0E45  1903               	btfsc	3,2
  3932  0E46  2E4E               	goto	l339
  3933  0E47  30AC               	movlw	low (STR_37| (0+32768))
  3934  0E48  00A2               	movwf	printf@f
  3935  0E49  3093               	movlw	high (STR_37| (0+32768))
  3936  0E4A  00A3               	movwf	printf@f+1
  3937  0E4B  3185  25B3  318E   	fcall	_printf
  3938  0E4E                     l339:	
  3939                           
  3940                           ;mcp2515.c: 262: receive(0);
  3941  0E4E  3000               	movlw	0
  3942  0E4F  3180  20B6  318E   	fcall	_receive
  3943                           
  3944                           ;mcp2515.c: 263: } else if ((status & 0b00001000) > 0) {
  3945  0E52  2E61               	goto	l2289
  3946  0E53                     l338:	
  3947  0E53  1DDF               	btfss	can_status_check@status,3
  3948  0E54  2E57               	goto	l341
  3949                           
  3950                           ;mcp2515.c: 264: txf_clear(0);
  3951  0E55  3000               	movlw	0
  3952  0E56  2E5E               	goto	L4
  3953  0E57                     l341:	
  3954                           ;mcp2515.c: 265: } else if ((status & 0b00100000) > 0) {
  3955                           
  3956  0E57  1EDF               	btfss	can_status_check@status,5
  3957  0E58  2E5B               	goto	l343
  3958                           
  3959                           ;mcp2515.c: 266: txf_clear(1);
  3960  0E59  3001               	movlw	1
  3961  0E5A  2E5E               	goto	L4
  3962  0E5B                     l343:	
  3963                           ;mcp2515.c: 267: } else if ((status & 0b10000000) > 0) {
  3964                           
  3965  0E5B  1FDF               	btfss	can_status_check@status,7
  3966  0E5C  2E61               	goto	l2289
  3967                           
  3968                           ;mcp2515.c: 268: txf_clear(2);
  3969  0E5D  3002               	movlw	2
  3970  0E5E                     L4:	
  3971  0E5E  3180  2008  318E   	fcall	_txf_clear
  3972  0E61                     l2289:	
  3973                           
  3974                           ;mcp2515.c: 269: }
  3975                           ;mcp2515.c: 270: if ((status & 0b00010000) > 0) {
  3976  0E61  0020               	movlb	0	; select bank0
  3977  0E62  1E5F               	btfss	can_status_check@status,4
  3978  0E63  2E66               	goto	l2297
  3979                           
  3980                           ;mcp2515.c: 271: return 0;
  3981  0E64  3000               	movlw	0
  3982                           
  3983                           ;mcp2515.c: 272: } else {
  3984  0E65  0008               	return
  3985  0E66                     l2297:	
  3986                           
  3987                           ;mcp2515.c: 273: return 1;
  3988  0E66  3001               	movlw	1
  3989  0E67  0008               	return
  3990  0E68                     __end_of_can_status_check:	
  3991                           
  3992                           	psect	text2
  3993  0008                     __ptext2:	
  3994 ;; *************** function _txf_clear *****************
  3995 ;; Defined at:
  3996 ;;		line 129 in file "mcp2515.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  n               1    wreg     unsigned char 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  n               1    4[BANK0 ] unsigned char 
  4001 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4002 ;;  mask            1    2[BANK0 ] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      unsigned char 
  4005 ;; Registers used:
  4006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;Total ram usage:        5 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    3
  4019 ;; This function calls:
  4020 ;;		_SPI_exchange
  4021 ;; This function is called by:
  4022 ;;		_can_status_check
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _txf_clear
  4028  0008                     _txf_clear:	
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4032                           ;txf_clear@n stored from wreg
  4033  0008  0020               	movlb	0	; select bank0
  4034  0009  00A4               	movwf	txf_clear@n
  4035                           
  4036                           ;mcp2515.c: 130: uint8_t mask = 0b00000001 << (n + 2);
  4037  000A  3001               	movlw	1
  4038  000B  00A0               	movwf	??_txf_clear
  4039  000C  0824               	movf	txf_clear@n,w
  4040  000D  3E02               	addlw	2
  4041  000E  0A89               	incf	9,f
  4042  000F  2811               	goto	u1824
  4043  0010                     u1825:	
  4044  0010  35A0               	lslf	??_txf_clear,f
  4045  0011                     u1824:	
  4046  0011  0B89               	decfsz	9,f
  4047  0012  2810               	goto	u1825
  4048  0013  0820               	movf	??_txf_clear,w
  4049  0014  00A1               	movwf	??_txf_clear+1
  4050  0015  0821               	movf	??_txf_clear+1,w
  4051  0016  00A2               	movwf	txf_clear@mask
  4052                           
  4053                           ;mcp2515.c: 131: buf[0] =0b00000101;
  4054  0017  3005               	movlw	5
  4055  0018  00A0               	movwf	??_txf_clear
  4056  0019  0820               	movf	??_txf_clear,w
  4057  001A  0021               	movlb	1	; select bank1
  4058  001B  00B3               	movwf	_buf^(0+128)
  4059                           
  4060                           ;mcp2515.c: 132: buf[1] = 0x2c;
  4061  001C  302C               	movlw	44
  4062  001D  0020               	movlb	0	; select bank0
  4063  001E  00A0               	movwf	??_txf_clear
  4064  001F  0820               	movf	??_txf_clear,w
  4065  0020  0021               	movlb	1	; select bank1
  4066  0021  00B4               	movwf	(_buf^(0+128)+1)
  4067                           
  4068                           ;mcp2515.c: 133: buf[2] = mask;
  4069  0022  0020               	movlb	0	; select bank0
  4070  0023  0822               	movf	txf_clear@mask,w
  4071  0024  00A0               	movwf	??_txf_clear
  4072  0025  0820               	movf	??_txf_clear,w
  4073  0026  0021               	movlb	1	; select bank1
  4074  0027  00B5               	movwf	(_buf^(0+128)+2)
  4075                           
  4076                           ;mcp2515.c: 134: buf[3] = 0x00;
  4077  0028  01B6               	clrf	(_buf^(0+128)+3)
  4078                           
  4079                           ;mcp2515.c: 135: uint8_t bytes_written = SPI_exchange(buf, 4);
  4080  0029  3004               	movlw	4
  4081  002A  0020               	movlb	0	; select bank0
  4082  002B  00A0               	movwf	??_txf_clear
  4083  002C  0820               	movf	??_txf_clear,w
  4084  002D  00F8               	movwf	SPI_exchange@len
  4085  002E  30B3               	movlw	(low (_buf| 0))& (0+255)
  4086  002F  318C  2480         	fcall	_SPI_exchange
  4087  0031  0020               	movlb	0	; select bank0
  4088  0032  00A1               	movwf	??_txf_clear+1
  4089  0033  0821               	movf	??_txf_clear+1,w
  4090  0034  00A3               	movwf	txf_clear@bytes_written
  4091                           
  4092                           ;mcp2515.c: 139: return 0;
  4093                           ;	Return value of _txf_clear is never used
  4094                           
  4095                           ;mcp2515.c: 138: } else {
  4096                           
  4097                           ;mcp2515.c: 137: return 1;
  4098                           ;	Return value of _txf_clear is never used
  4099  0035  0008               	return
  4100  0036                     __end_of_txf_clear:	
  4101                           
  4102                           	psect	text3
  4103  00B6                     __ptext3:	
  4104 ;; *************** function _receive *****************
  4105 ;; Defined at:
  4106 ;;		line 146 in file "mcp2515.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  n               1    wreg     unsigned char 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  n               1   59[BANK0 ] unsigned char 
  4111 ;;  rx_buf         15   40[BANK0 ] unsigned char [15]
  4112 ;;  sid             2   56[BANK0 ] unsigned int 
  4113 ;;  dlc             1   58[BANK0 ] unsigned char 
  4114 ;;  pbuf            1   55[BANK0 ] PTR unsigned char 
  4115 ;;		 -> receive@rx_buf(15), 
  4116 ;;  bytes_read      1   39[BANK0 ] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;Total ram usage:       26 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    4
  4133 ;; This function calls:
  4134 ;;		Absolute function
  4135 ;;		_SPI_exchange
  4136 ;;		_printf
  4137 ;;		_receive_handler
  4138 ;; This function is called by:
  4139 ;;		_can_status_check
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _receive
  4145  00B6                     _receive:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4149                           ;receive@n stored from wreg
  4150  00B6  0020               	movlb	0	; select bank0
  4151  00B7  00DB               	movwf	receive@n
  4152                           
  4153                           ;mcp2515.c: 150: uint8_t rx_buf[15];
  4154                           ;mcp2515.c: 153: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  4155  00B8  085B               	movf	receive@n,w
  4156  00B9  3E2A               	addlw	low (_nm| (0+32768))
  4157  00BA  0084               	movwf	4
  4158  00BB  3094               	movlw	high (_nm| (0+32768))
  4159  00BC  1803               	skipnc
  4160  00BD  3E01               	addlw	1
  4161  00BE  0085               	movwf	5
  4162  00BF  0800               	movf	0,w	;code access
  4163  00C0  0709               	addwf	9,w
  4164  00C1  3E90               	addlw	144
  4165  00C2  00C2               	movwf	??_receive
  4166  00C3  0842               	movf	??_receive,w
  4167  00C4  00C8               	movwf	receive@rx_buf
  4168                           
  4169                           ;mcp2515.c: 154: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4170  00C5  300E               	movlw	14
  4171  00C6  00C2               	movwf	??_receive
  4172  00C7  0842               	movf	??_receive,w
  4173  00C8  00F8               	movwf	SPI_exchange@len
  4174  00C9  3048               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4175  00CA  318C  2480  3180   	fcall	_SPI_exchange
  4176  00CD  0020               	movlb	0	; select bank0
  4177  00CE  00C3               	movwf	??_receive+1
  4178  00CF  0843               	movf	??_receive+1,w
  4179  00D0  00C7               	movwf	receive@bytes_read
  4180                           
  4181                           ;mcp2515.c: 155: uint8_t dlc = rx_buf[5];
  4182  00D1  084D               	movf	receive@rx_buf+5,w
  4183  00D2  00C2               	movwf	??_receive
  4184  00D3  0842               	movf	??_receive,w
  4185  00D4  00DA               	movwf	receive@dlc
  4186                           
  4187                           ;mcp2515.c: 156: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4188  00D5  084A               	movf	receive@rx_buf+2,w
  4189  00D6  00C2               	movwf	??_receive
  4190  00D7  3005               	movlw	5
  4191  00D8                     u1835:	
  4192  00D8  36C2               	lsrf	??_receive,f
  4193  00D9  0B89               	decfsz	9,f
  4194  00DA  28D8               	goto	u1835
  4195  00DB  0842               	movf	??_receive,w
  4196  00DC  00C3               	movwf	??_receive+1
  4197  00DD  01C4               	clrf	??_receive+2
  4198  00DE  0849               	movf	receive@rx_buf+1,w
  4199  00DF  00C5               	movwf	??_receive+3
  4200  00E0  01C6               	clrf	??_receive+4
  4201  00E1  35C5               	lslf	??_receive+3,f
  4202  00E2  0DC6               	rlf	??_receive+4,f
  4203  00E3  35C5               	lslf	??_receive+3,f
  4204  00E4  0DC6               	rlf	??_receive+4,f
  4205  00E5  35C5               	lslf	??_receive+3,f
  4206  00E6  0DC6               	rlf	??_receive+4,f
  4207  00E7  0843               	movf	??_receive+1,w
  4208  00E8  0745               	addwf	??_receive+3,w
  4209  00E9  00D8               	movwf	receive@sid
  4210  00EA  0844               	movf	??_receive+2,w
  4211  00EB  3D46               	addwfc	??_receive+4,w
  4212  00EC  00D9               	movwf	receive@sid+1
  4213                           
  4214                           ;mcp2515.c: 157: sid = sid & 0b0000011111111111;
  4215  00ED  30FF               	movlw	255
  4216  00EE  0558               	andwf	receive@sid,w
  4217  00EF  00D8               	movwf	receive@sid
  4218  00F0  3007               	movlw	7
  4219  00F1  0559               	andwf	receive@sid+1,w
  4220  00F2  00D9               	movwf	receive@sid+1
  4221                           
  4222                           ;mcp2515.c: 158: rx_buf[6+dlc] = '\0';
  4223  00F3  085A               	movf	receive@dlc,w
  4224  00F4  3E06               	addlw	6
  4225  00F5  3E48               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4226  00F6  0086               	movwf	6
  4227  00F7  0187               	clrf	7
  4228  00F8  0181               	clrf	1
  4229                           
  4230                           ;mcp2515.c: 160: if (mode.debug) {
  4231  00F9  0862               	movf	_mode,w
  4232  00FA  1903               	btfsc	3,2
  4233  00FB  2953               	goto	l2191
  4234                           
  4235                           ;mcp2515.c: 161: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4236  00FC  30B1               	movlw	low (STR_25| (0+32768))
  4237  00FD  00A2               	movwf	printf@f
  4238  00FE  3092               	movlw	high (STR_25| (0+32768))
  4239  00FF  00A3               	movwf	printf@f+1
  4240  0100  085B               	movf	receive@n,w
  4241  0101  00C2               	movwf	??_receive
  4242  0102  01C3               	clrf	??_receive+1
  4243  0103  0842               	movf	??_receive,w
  4244  0104  00A4               	movwf	?_printf+2
  4245  0105  0843               	movf	??_receive+1,w
  4246  0106  00A5               	movwf	?_printf+3
  4247  0107  0849               	movf	receive@rx_buf+1,w
  4248  0108  00C4               	movwf	??_receive+2
  4249  0109  01C5               	clrf	??_receive+3
  4250  010A  0844               	movf	??_receive+2,w
  4251  010B  00A6               	movwf	?_printf+4
  4252  010C  0845               	movf	??_receive+3,w
  4253  010D  00A7               	movwf	?_printf+5
  4254  010E  3185  25B3  3180   	fcall	_printf
  4255                           
  4256                           ;mcp2515.c: 162: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4257  0111  30D3               	movlw	low (STR_26| (0+32768))
  4258  0112  0020               	movlb	0	; select bank0
  4259  0113  00A2               	movwf	printf@f
  4260  0114  3092               	movlw	high (STR_26| (0+32768))
  4261  0115  00A3               	movwf	printf@f+1
  4262  0116  085B               	movf	receive@n,w
  4263  0117  00C2               	movwf	??_receive
  4264  0118  01C3               	clrf	??_receive+1
  4265  0119  0842               	movf	??_receive,w
  4266  011A  00A4               	movwf	?_printf+2
  4267  011B  0843               	movf	??_receive+1,w
  4268  011C  00A5               	movwf	?_printf+3
  4269  011D  084A               	movf	receive@rx_buf+2,w
  4270  011E  00C4               	movwf	??_receive+2
  4271  011F  01C5               	clrf	??_receive+3
  4272  0120  0844               	movf	??_receive+2,w
  4273  0121  00A6               	movwf	?_printf+4
  4274  0122  0845               	movf	??_receive+3,w
  4275  0123  00A7               	movwf	?_printf+5
  4276  0124  3185  25B3  3180   	fcall	_printf
  4277                           
  4278                           ;mcp2515.c: 163: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4279  0127  30F5               	movlw	low (STR_27| (0+32768))
  4280  0128  0020               	movlb	0	; select bank0
  4281  0129  00A2               	movwf	printf@f
  4282  012A  3092               	movlw	high (STR_27| (0+32768))
  4283  012B  00A3               	movwf	printf@f+1
  4284  012C  085B               	movf	receive@n,w
  4285  012D  00C2               	movwf	??_receive
  4286  012E  01C3               	clrf	??_receive+1
  4287  012F  0842               	movf	??_receive,w
  4288  0130  00A4               	movwf	?_printf+2
  4289  0131  0843               	movf	??_receive+1,w
  4290  0132  00A5               	movwf	?_printf+3
  4291  0133  084D               	movf	receive@rx_buf+5,w
  4292  0134  00C4               	movwf	??_receive+2
  4293  0135  01C5               	clrf	??_receive+3
  4294  0136  0844               	movf	??_receive+2,w
  4295  0137  00A6               	movwf	?_printf+4
  4296  0138  0845               	movf	??_receive+3,w
  4297  0139  00A7               	movwf	?_printf+5
  4298  013A  3185  25B3  3180   	fcall	_printf
  4299                           
  4300                           ;mcp2515.c: 164: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4301  013D  3055               	movlw	low (STR_28| (0+32768))
  4302  013E  0020               	movlb	0	; select bank0
  4303  013F  00A2               	movwf	printf@f
  4304  0140  3093               	movlw	high (STR_28| (0+32768))
  4305  0141  00A3               	movwf	printf@f+1
  4306  0142  085B               	movf	receive@n,w
  4307  0143  00C2               	movwf	??_receive
  4308  0144  01C3               	clrf	??_receive+1
  4309  0145  0842               	movf	??_receive,w
  4310  0146  00A4               	movwf	?_printf+2
  4311  0147  0843               	movf	??_receive+1,w
  4312  0148  00A5               	movwf	?_printf+3
  4313  0149  084E               	movf	receive@rx_buf+6,w
  4314  014A  00C4               	movwf	??_receive+2
  4315  014B  01C5               	clrf	??_receive+3
  4316  014C  0844               	movf	??_receive+2,w
  4317  014D  00A6               	movwf	?_printf+4
  4318  014E  0845               	movf	??_receive+3,w
  4319  014F  00A7               	movwf	?_printf+5
  4320  0150  3185  25B3  3180   	fcall	_printf
  4321  0153                     l2191:	
  4322                           
  4323                           ;mcp2515.c: 165: }
  4324                           ;mcp2515.c: 168: uint8_t *pbuf = &rx_buf[6];
  4325  0153  304E               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4326  0154  0020               	movlb	0	; select bank0
  4327  0155  00C2               	movwf	??_receive
  4328  0156  0842               	movf	??_receive,w
  4329  0157  00D7               	movwf	receive@pbuf
  4330                           
  4331                           ;mcp2515.c: 169: handler(sid, pbuf, dlc);
  4332  0158  0858               	movf	receive@sid,w
  4333  0159  00C2               	movwf	??_receive
  4334  015A  0842               	movf	??_receive,w
  4335  015B  00BB               	movwf	receive_handler@sid
  4336  015C  0857               	movf	receive@pbuf,w
  4337  015D  00C3               	movwf	??_receive+1
  4338  015E  0843               	movf	??_receive+1,w
  4339  015F  00BC               	movwf	receive_handler@pbuf
  4340  0160  085A               	movf	receive@dlc,w
  4341  0161  00C4               	movwf	??_receive+2
  4342  0162  0844               	movf	??_receive+2,w
  4343  0163  00BD               	movwf	receive_handler@dlc
  4344  0164  086A               	movf	_handler+1,w
  4345  0165  008A               	movwf	10
  4346  0166  0869               	movf	_handler,w
  4347  0167  000A               	callw
  4348  0168  3180               	pagesel	$
  4349  0169  0008               	return
  4350  016A                     __end_of_receive:	
  4351                           
  4352                           	psect	text4
  4353  0EBF                     __ptext4:	
  4354 ;; *************** function _receive_handler *****************
  4355 ;; Defined at:
  4356 ;;		line 30 in file "main.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  sid             1   27[BANK0 ] unsigned char 
  4359 ;;  pbuf            1   28[BANK0 ] PTR unsigned char 
  4360 ;;		 -> receive@rx_buf(15), 
  4361 ;;  dlc             1   29[BANK0 ] unsigned char 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  i               1   33[BANK0 ] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  1    wreg      void 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;Total ram usage:        7 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    3
  4380 ;; This function calls:
  4381 ;;		_printf
  4382 ;; This function is called by:
  4383 ;;		_main
  4384 ;;		_receive
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _receive_handler
  4390  0EBF                     _receive_handler:	
  4391                           
  4392                           ;main.c: 31: uint8_t i;
  4393                           ;main.c: 32: if (output_format.with_sid) {
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4397  0EBF  0020               	movlb	0	; select bank0
  4398  0EC0  0866               	movf	_output_format,w
  4399  0EC1  1903               	btfsc	3,2
  4400  0EC2  2ED5               	goto	l2071
  4401                           
  4402                           ;main.c: 33: printf("%d,%s\n", sid, pbuf);
  4403  0EC3  3003               	movlw	low (STR_1| (0+32768))
  4404  0EC4  00A2               	movwf	printf@f
  4405  0EC5  3094               	movlw	high (STR_1| (0+32768))
  4406  0EC6  00A3               	movwf	printf@f+1
  4407  0EC7  083B               	movf	receive_handler@sid,w
  4408  0EC8  00BE               	movwf	??_receive_handler
  4409  0EC9  01BF               	clrf	??_receive_handler+1
  4410  0ECA  083E               	movf	??_receive_handler,w
  4411  0ECB  00A4               	movwf	?_printf+2
  4412  0ECC  083F               	movf	??_receive_handler+1,w
  4413  0ECD  00A5               	movwf	?_printf+3
  4414  0ECE  083C               	movf	receive_handler@pbuf,w
  4415  0ECF  00A6               	movwf	low ((?_printf| 0+4))
  4416  0ED0  3000               	movlw	0
  4417  0ED1  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4418  0ED2  3185  25B3         	fcall	_printf
  4419                           
  4420                           ;main.c: 34: } else if (output_format.hex_output) {
  4421  0ED4  0008               	return
  4422  0ED5                     l2071:	
  4423  0ED5  0020               	movlb	0	; select bank0
  4424  0ED6  0867               	movf	_output_format+1,w
  4425  0ED7  1903               	btfsc	3,2
  4426  0ED8  2F0E               	goto	l2085
  4427                           
  4428                           ;main.c: 35: printf("%02x:", sid);
  4429  0ED9  3010               	movlw	low (STR_2| (0+32768))
  4430  0EDA  00A2               	movwf	printf@f
  4431  0EDB  3094               	movlw	high (STR_2| (0+32768))
  4432  0EDC  00A3               	movwf	printf@f+1
  4433  0EDD  083B               	movf	receive_handler@sid,w
  4434  0EDE  00BE               	movwf	??_receive_handler
  4435  0EDF  01BF               	clrf	??_receive_handler+1
  4436  0EE0  083E               	movf	??_receive_handler,w
  4437  0EE1  00A4               	movwf	?_printf+2
  4438  0EE2  083F               	movf	??_receive_handler+1,w
  4439  0EE3  00A5               	movwf	?_printf+3
  4440  0EE4  3185  25B3  318E   	fcall	_printf
  4441                           
  4442                           ;main.c: 36: for(i=0; i<dlc; i++) {
  4443  0EE7  0020               	movlb	0	; select bank0
  4444  0EE8  01C1               	clrf	receive_handler@i
  4445  0EE9                     l2081:	
  4446  0EE9  083D               	movf	receive_handler@dlc,w
  4447  0EEA  0241               	subwf	receive_handler@i,w
  4448  0EEB  1803               	btfsc	3,0
  4449  0EEC  2F07               	goto	l2083
  4450                           
  4451                           ;main.c: 37: printf(" %02x", pbuf[i]);
  4452  0EED  3016               	movlw	low (STR_3| (0+32768))
  4453  0EEE  00A2               	movwf	printf@f
  4454  0EEF  3094               	movlw	high (STR_3| (0+32768))
  4455  0EF0  00A3               	movwf	printf@f+1
  4456  0EF1  0841               	movf	receive_handler@i,w
  4457  0EF2  073C               	addwf	receive_handler@pbuf,w
  4458  0EF3  00BE               	movwf	??_receive_handler
  4459  0EF4  083E               	movf	??_receive_handler,w
  4460  0EF5  0086               	movwf	6
  4461  0EF6  0187               	clrf	7
  4462  0EF7  0801               	movf	1,w
  4463  0EF8  00BF               	movwf	??_receive_handler+1
  4464  0EF9  01C0               	clrf	??_receive_handler+2
  4465  0EFA  083F               	movf	??_receive_handler+1,w
  4466  0EFB  00A4               	movwf	?_printf+2
  4467  0EFC  0840               	movf	??_receive_handler+2,w
  4468  0EFD  00A5               	movwf	?_printf+3
  4469  0EFE  3185  25B3  318E   	fcall	_printf
  4470  0F01  3001               	movlw	1
  4471  0F02  0020               	movlb	0	; select bank0
  4472  0F03  00BE               	movwf	??_receive_handler
  4473  0F04  083E               	movf	??_receive_handler,w
  4474  0F05  07C1               	addwf	receive_handler@i,f
  4475  0F06  2EE9               	goto	l2081
  4476  0F07                     l2083:	
  4477                           
  4478                           ;main.c: 38: }
  4479                           ;main.c: 39: printf("\n");
  4480  0F07  301F               	movlw	low ((STR_38+3)| (0+32768))
  4481  0F08  00A2               	movwf	printf@f
  4482  0F09  3094               	movlw	high ((STR_38+3)| (0+32768))
  4483  0F0A  00A3               	movwf	printf@f+1
  4484  0F0B  3185  25B3         	fcall	_printf
  4485                           
  4486                           ;main.c: 40: } else {
  4487  0F0D  0008               	return
  4488  0F0E                     l2085:	
  4489                           
  4490                           ;main.c: 41: printf("%s\n", pbuf);
  4491  0F0E  309C               	movlw	low ((STR_35+14)| (0+32768))
  4492  0F0F  0020               	movlb	0	; select bank0
  4493  0F10  00A2               	movwf	printf@f
  4494  0F11  3092               	movlw	high ((STR_35+14)| (0+32768))
  4495  0F12  00A3               	movwf	printf@f+1
  4496  0F13  083C               	movf	receive_handler@pbuf,w
  4497  0F14  00A4               	movwf	low ((?_printf| 0+2))
  4498  0F15  3000               	movlw	0
  4499  0F16  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4500  0F17  3185  25B3         	fcall	_printf
  4501  0F19  0008               	return
  4502  0F1A                     __end_of_receive_handler:	
  4503                           
  4504                           	psect	text5
  4505  0036                     __ptext5:	
  4506 ;; *************** function _can_set_mask *****************
  4507 ;; Defined at:
  4508 ;;		line 105 in file "mcp2515.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  cmd             1    wreg     unsigned char 
  4511 ;;  n               1   31[BANK0 ] unsigned char 
  4512 ;;  mask            1   32[BANK0 ] unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  cmd             1   41[BANK0 ] unsigned char 
  4515 ;;  mask_sidl       1   43[BANK0 ] unsigned char 
  4516 ;;  mask_sidh       1   42[BANK0 ] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4526 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;Total ram usage:       13 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		_SPI_exchange
  4535 ;;		_can_ope_mode
  4536 ;;		_printf
  4537 ;; This function is called by:
  4538 ;;		_main
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _can_set_mask
  4544  0036                     _can_set_mask:	
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4548                           ;can_set_mask@cmd stored from wreg
  4549  0036  0020               	movlb	0	; select bank0
  4550  0037  00C9               	movwf	can_set_mask@cmd
  4551                           
  4552                           ;mcp2515.c: 106: can_ope_mode(0b10000000);
  4553  0038  3080               	movlw	128
  4554  0039  318E  2668  3180   	fcall	_can_ope_mode
  4555                           
  4556                           ;mcp2515.c: 107: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4557  003C  0020               	movlb	0	; select bank0
  4558  003D  0840               	movf	can_set_mask@mask,w
  4559  003E  00C1               	movwf	??_can_set_mask
  4560  003F  3003               	movlw	3
  4561  0040                     u2025:	
  4562  0040  36C1               	lsrf	??_can_set_mask,f
  4563  0041  0B89               	decfsz	9,f
  4564  0042  2840               	goto	u2025
  4565  0043  0841               	movf	??_can_set_mask,w
  4566  0044  00C2               	movwf	??_can_set_mask+1
  4567  0045  0842               	movf	??_can_set_mask+1,w
  4568  0046  00CA               	movwf	can_set_mask@mask_sidh
  4569                           
  4570                           ;mcp2515.c: 108: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4571  0047  0840               	movf	can_set_mask@mask,w
  4572  0048  3907               	andlw	7
  4573  0049  00C1               	movwf	??_can_set_mask
  4574  004A  3004               	movlw	4
  4575  004B                     u2035:	
  4576  004B  35C1               	lslf	??_can_set_mask,f
  4577  004C  3EFF               	addlw	-1
  4578  004D  1D03               	skipz
  4579  004E  284B               	goto	u2035
  4580  004F  3541               	lslf	??_can_set_mask,w
  4581  0050  00C2               	movwf	??_can_set_mask+1
  4582  0051  0842               	movf	??_can_set_mask+1,w
  4583  0052  00CB               	movwf	can_set_mask@mask_sidl
  4584                           
  4585                           ;mcp2515.c: 109: if (mode.debug) {
  4586  0053  0862               	movf	_mode,w
  4587  0054  1903               	btfsc	3,2
  4588  0055  287A               	goto	l2393
  4589                           
  4590                           ;mcp2515.c: 110: if (cmd == 0) {
  4591  0056  0849               	movf	can_set_mask@cmd,w
  4592  0057  1D03               	btfss	3,2
  4593  0058  285D               	goto	l2391
  4594                           
  4595                           ;mcp2515.c: 111: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4596  0059  303D               	movlw	low (STR_23| (0+32768))
  4597  005A  00A2               	movwf	printf@f
  4598  005B  3092               	movlw	high (STR_23| (0+32768))
  4599  005C  2861               	goto	L6
  4600  005D                     l2391:	
  4601                           ;mcp2515.c: 112: } else {
  4602                           
  4603                           
  4604                           ;mcp2515.c: 113: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4605  005D  3010               	movlw	low (STR_24| (0+32768))
  4606  005E  0020               	movlb	0	; select bank0
  4607  005F  00A2               	movwf	printf@f
  4608  0060  3092               	movlw	high (STR_24| (0+32768))
  4609  0061                     L6:	
  4610  0061  00A3               	movwf	printf@f+1
  4611  0062  083F               	movf	can_set_mask@n,w
  4612  0063  00C1               	movwf	??_can_set_mask
  4613  0064  01C2               	clrf	??_can_set_mask+1
  4614  0065  0841               	movf	??_can_set_mask,w
  4615  0066  00A4               	movwf	?_printf+2
  4616  0067  0842               	movf	??_can_set_mask+1,w
  4617  0068  00A5               	movwf	?_printf+3
  4618  0069  084A               	movf	can_set_mask@mask_sidh,w
  4619  006A  00C3               	movwf	??_can_set_mask+2
  4620  006B  01C4               	clrf	??_can_set_mask+3
  4621  006C  0843               	movf	??_can_set_mask+2,w
  4622  006D  00A6               	movwf	?_printf+4
  4623  006E  0844               	movf	??_can_set_mask+3,w
  4624  006F  00A7               	movwf	?_printf+5
  4625  0070  084B               	movf	can_set_mask@mask_sidl,w
  4626  0071  00C5               	movwf	??_can_set_mask+4
  4627  0072  01C6               	clrf	??_can_set_mask+5
  4628  0073  0845               	movf	??_can_set_mask+4,w
  4629  0074  00A8               	movwf	?_printf+6
  4630  0075  0846               	movf	??_can_set_mask+5,w
  4631  0076  00A9               	movwf	?_printf+7
  4632  0077  3185  25B3  3180   	fcall	_printf
  4633  007A                     l2393:	
  4634                           
  4635                           ;mcp2515.c: 114: }
  4636                           ;mcp2515.c: 115: }
  4637                           ;mcp2515.c: 116: buf[0] = 0b00000010;
  4638  007A  3002               	movlw	2
  4639  007B  0020               	movlb	0	; select bank0
  4640  007C  00C1               	movwf	??_can_set_mask
  4641  007D  0841               	movf	??_can_set_mask,w
  4642  007E  0021               	movlb	1	; select bank1
  4643  007F  00B3               	movwf	_buf^(0+128)
  4644                           
  4645                           ;mcp2515.c: 117: buf[1] = (cmd == 0)? rxmnsidh[n]: rxfnsidh[n];
  4646  0080  0020               	movlb	0	; select bank0
  4647  0081  0849               	movf	can_set_mask@cmd,w
  4648  0082  1903               	btfsc	3,2
  4649  0083  2889               	goto	l2399
  4650  0084  083F               	movf	can_set_mask@n,w
  4651  0085  3E0A               	addlw	low (_rxfnsidh| (0+32768))
  4652  0086  0084               	movwf	4
  4653  0087  3094               	movlw	high (_rxfnsidh| (0+32768))
  4654  0088  288D               	goto	L5
  4655  0089                     l2399:	
  4656  0089  083F               	movf	can_set_mask@n,w
  4657  008A  3E2C               	addlw	low (_rxmnsidh| (0+32768))
  4658  008B  0084               	movwf	4
  4659  008C  3094               	movlw	high (_rxmnsidh| (0+32768))
  4660  008D                     L5:	
  4661  008D  1803               	skipnc
  4662  008E  3E01               	addlw	1
  4663  008F  0085               	movwf	5
  4664  0090  0800               	movf	0,w	;code access
  4665  0091  00C1               	movwf	??_can_set_mask
  4666  0092  01C2               	clrf	??_can_set_mask+1
  4667  0093  0841               	movf	??_can_set_mask,w
  4668  0094  00C7               	movwf	_can_set_mask$492
  4669  0095  0842               	movf	??_can_set_mask+1,w
  4670  0096  00C8               	movwf	_can_set_mask$492+1
  4671  0097  0847               	movf	_can_set_mask$492,w
  4672  0098  00C1               	movwf	??_can_set_mask
  4673  0099  0841               	movf	??_can_set_mask,w
  4674  009A  0021               	movlb	1	; select bank1
  4675  009B  00B4               	movwf	(_buf^(0+128)+1)
  4676                           
  4677                           ;mcp2515.c: 118: buf[2] = mask_sidh;
  4678  009C  0020               	movlb	0	; select bank0
  4679  009D  084A               	movf	can_set_mask@mask_sidh,w
  4680  009E  00C1               	movwf	??_can_set_mask
  4681  009F  0841               	movf	??_can_set_mask,w
  4682  00A0  0021               	movlb	1	; select bank1
  4683  00A1  00B5               	movwf	(_buf^(0+128)+2)
  4684                           
  4685                           ;mcp2515.c: 119: buf[3] = mask_sidl;
  4686  00A2  0020               	movlb	0	; select bank0
  4687  00A3  084B               	movf	can_set_mask@mask_sidl,w
  4688  00A4  00C1               	movwf	??_can_set_mask
  4689  00A5  0841               	movf	??_can_set_mask,w
  4690  00A6  0021               	movlb	1	; select bank1
  4691  00A7  00B6               	movwf	(_buf^(0+128)+3)
  4692                           
  4693                           ;mcp2515.c: 121: SPI_exchange(buf, 4);
  4694  00A8  3004               	movlw	4
  4695  00A9  0020               	movlb	0	; select bank0
  4696  00AA  00C1               	movwf	??_can_set_mask
  4697  00AB  0841               	movf	??_can_set_mask,w
  4698  00AC  00F8               	movwf	SPI_exchange@len
  4699  00AD  30B3               	movlw	(low (_buf| 0))& (0+255)
  4700  00AE  318C  2480  3180   	fcall	_SPI_exchange
  4701                           
  4702                           ;mcp2515.c: 123: can_ope_mode(operation_mode);
  4703  00B1  0020               	movlb	0	; select bank0
  4704  00B2  0868               	movf	_operation_mode,w
  4705  00B3  318E  2668         	fcall	_can_ope_mode
  4706  00B5  0008               	return
  4707  00B6                     __end_of_can_set_mask:	
  4708                           
  4709                           	psect	text6
  4710  0276                     __ptext6:	
  4711 ;; *************** function _can_send *****************
  4712 ;; Defined at:
  4713 ;;		line 175 in file "mcp2515.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  data_buf        1    wreg     PTR unsigned char 
  4716 ;;		 -> main@buf(9), 
  4717 ;;  dlc             1   27[BANK0 ] unsigned char 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  data_buf        1   35[BANK0 ] PTR unsigned char 
  4720 ;;		 -> main@buf(9), 
  4721 ;;  n               1   37[BANK0 ] unsigned char 
  4722 ;;  i               1   36[BANK0 ] unsigned char 
  4723 ;;  status          1   34[BANK0 ] unsigned char 
  4724 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  4725 ;;  len             1   32[BANK0 ] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      unsigned char 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;Total ram usage:       11 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    3
  4742 ;; This function calls:
  4743 ;;		_SPI_exchange
  4744 ;;		_printf
  4745 ;; This function is called by:
  4746 ;;		_main
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _can_send
  4752  0276                     _can_send:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;can_send@data_buf stored from wreg
  4757  0276  0020               	movlb	0	; select bank0
  4758  0277  00C3               	movwf	can_send@data_buf
  4759                           
  4760                           ;mcp2515.c: 176: uint8_t i;
  4761                           ;mcp2515.c: 177: uint8_t n = 0;
  4762  0278  01C5               	clrf	can_send@n
  4763                           
  4764                           ;mcp2515.c: 179: buf[0] = 0b10100000;
  4765  0279  30A0               	movlw	160
  4766  027A  00BC               	movwf	??_can_send
  4767  027B  083C               	movf	??_can_send,w
  4768  027C  0021               	movlb	1	; select bank1
  4769  027D  00B3               	movwf	_buf^(0+128)
  4770                           
  4771                           ;mcp2515.c: 180: buf[1] = 0x00;
  4772  027E  01B4               	clrf	(_buf^(0+128)+1)
  4773                           
  4774                           ;mcp2515.c: 181: uint8_t bytes_written = SPI_exchange(buf, 2);
  4775  027F  3002               	movlw	2
  4776  0280  0020               	movlb	0	; select bank0
  4777  0281  00BC               	movwf	??_can_send
  4778  0282  083C               	movf	??_can_send,w
  4779  0283  00F8               	movwf	SPI_exchange@len
  4780  0284  30B3               	movlw	(low (_buf| 0))& (0+255)
  4781  0285  318C  2480  3182   	fcall	_SPI_exchange
  4782  0288  0020               	movlb	0	; select bank0
  4783  0289  00BD               	movwf	??_can_send+1
  4784  028A  083D               	movf	??_can_send+1,w
  4785  028B  00C1               	movwf	can_send@bytes_written
  4786                           
  4787                           ;mcp2515.c: 182: uint8_t status = buf[1];
  4788  028C  0021               	movlb	1	; select bank1
  4789  028D  0834               	movf	(_buf^(0+128)+1),w
  4790  028E  0020               	movlb	0	; select bank0
  4791  028F  00BC               	movwf	??_can_send
  4792  0290  083C               	movf	??_can_send,w
  4793  0291  00C2               	movwf	can_send@status
  4794                           
  4795                           ;mcp2515.c: 183: if ((status & 0b01000000) == 0) {
  4796  0292  1B42               	btfsc	can_send@status,6
  4797  0293  2AA4               	goto	l312
  4798                           
  4799                           ;mcp2515.c: 184: if (mode.debug) printf("TXB2 is idle\n");
  4800  0294  0862               	movf	_mode,w
  4801  0295  1903               	btfsc	3,2
  4802  0296  2A9E               	goto	l2429
  4803  0297  309E               	movlw	low (STR_29| (0+32768))
  4804  0298  00A2               	movwf	printf@f
  4805  0299  3093               	movlw	high (STR_29| (0+32768))
  4806  029A  00A3               	movwf	printf@f+1
  4807  029B  3185  25B3  3182   	fcall	_printf
  4808  029E                     l2429:	
  4809                           
  4810                           ;mcp2515.c: 185: n = 2;
  4811  029E  3002               	movlw	2
  4812  029F  0020               	movlb	0	; select bank0
  4813  02A0  00BC               	movwf	??_can_send
  4814  02A1  083C               	movf	??_can_send,w
  4815  02A2  00C5               	movwf	can_send@n
  4816                           
  4817                           ;mcp2515.c: 186: } else if ((status & 0b00010000) == 0) {
  4818  02A3  2AC2               	goto	l2443
  4819  02A4                     l312:	
  4820  02A4  1A42               	btfsc	can_send@status,4
  4821  02A5  2AB4               	goto	l315
  4822                           
  4823                           ;mcp2515.c: 187: if (mode.debug) printf("TXB1 is idle\n");
  4824  02A6  0862               	movf	_mode,w
  4825  02A7  1903               	btfsc	3,2
  4826  02A8  2AB0               	goto	l2435
  4827  02A9  3090               	movlw	low (STR_30| (0+32768))
  4828  02AA  00A2               	movwf	printf@f
  4829  02AB  3093               	movlw	high (STR_30| (0+32768))
  4830  02AC  00A3               	movwf	printf@f+1
  4831  02AD  3185  25B3  3182   	fcall	_printf
  4832  02B0                     l2435:	
  4833                           
  4834                           ;mcp2515.c: 188: n = 1;
  4835  02B0  0020               	movlb	0	; select bank0
  4836  02B1  01C5               	clrf	can_send@n
  4837  02B2  0AC5               	incf	can_send@n,f
  4838                           
  4839                           ;mcp2515.c: 189: } else if ((status & 0b00000100) == 0) {
  4840  02B3  2AC2               	goto	l2443
  4841  02B4                     l315:	
  4842  02B4  1942               	btfsc	can_send@status,2
  4843  02B5  2AC2               	goto	l2443
  4844                           
  4845                           ;mcp2515.c: 190: if (mode.debug) printf("TXB0 is idle\n");
  4846  02B6  0862               	movf	_mode,w
  4847  02B7  1903               	btfsc	3,2
  4848  02B8  2AC0               	goto	l2441
  4849  02B9  3082               	movlw	low (STR_31| (0+32768))
  4850  02BA  00A2               	movwf	printf@f
  4851  02BB  3093               	movlw	high (STR_31| (0+32768))
  4852  02BC  00A3               	movwf	printf@f+1
  4853  02BD  3185  25B3  3182   	fcall	_printf
  4854  02C0                     l2441:	
  4855                           
  4856                           ;mcp2515.c: 191: n = 0;
  4857  02C0  0020               	movlb	0	; select bank0
  4858  02C1  01C5               	clrf	can_send@n
  4859  02C2                     l2443:	
  4860                           
  4861                           ;mcp2515.c: 192: }
  4862                           ;mcp2515.c: 198: buf[0] = 0b01000000 + abc[n];
  4863  02C2  0845               	movf	can_send@n,w
  4864  02C3  3E24               	addlw	low (_abc| (0+32768))
  4865  02C4  0084               	movwf	4
  4866  02C5  3094               	movlw	high (_abc| (0+32768))
  4867  02C6  1803               	skipnc
  4868  02C7  3E01               	addlw	1
  4869  02C8  0085               	movwf	5
  4870  02C9  0800               	movf	0,w	;code access
  4871  02CA  3E40               	addlw	64
  4872  02CB  00BC               	movwf	??_can_send
  4873  02CC  083C               	movf	??_can_send,w
  4874  02CD  0021               	movlb	1	; select bank1
  4875  02CE  00B3               	movwf	_buf^(0+128)
  4876                           
  4877                           ;mcp2515.c: 200: buf[1] = sid.sidh;
  4878  02CF  0020               	movlb	0	; select bank0
  4879  02D0  0864               	movf	_sid,w
  4880  02D1  00BC               	movwf	??_can_send
  4881  02D2  083C               	movf	??_can_send,w
  4882  02D3  0021               	movlb	1	; select bank1
  4883  02D4  00B4               	movwf	(_buf^(0+128)+1)
  4884                           
  4885                           ;mcp2515.c: 202: buf[2] = sid.sidl;
  4886  02D5  0020               	movlb	0	; select bank0
  4887  02D6  0865               	movf	_sid+1,w
  4888  02D7  00BC               	movwf	??_can_send
  4889  02D8  083C               	movf	??_can_send,w
  4890  02D9  0021               	movlb	1	; select bank1
  4891  02DA  00B5               	movwf	(_buf^(0+128)+2)
  4892                           
  4893                           ;mcp2515.c: 204: buf[3] = 0;
  4894  02DB  01B6               	clrf	(_buf^(0+128)+3)
  4895                           
  4896                           ;mcp2515.c: 206: buf[4] = 0;
  4897  02DC  01B7               	clrf	(_buf^(0+128)+4)
  4898                           
  4899                           ;mcp2515.c: 208: buf[5] = dlc;
  4900  02DD  0020               	movlb	0	; select bank0
  4901  02DE  083B               	movf	can_send@dlc,w
  4902  02DF  00BC               	movwf	??_can_send
  4903  02E0  083C               	movf	??_can_send,w
  4904  02E1  0021               	movlb	1	; select bank1
  4905  02E2  00B8               	movwf	(_buf^(0+128)+5)
  4906                           
  4907                           ;mcp2515.c: 211: for(i=0; i<dlc; i++) {
  4908  02E3  0020               	movlb	0	; select bank0
  4909  02E4  01C4               	clrf	can_send@i
  4910  02E5                     l2465:	
  4911  02E5  083B               	movf	can_send@dlc,w
  4912  02E6  0244               	subwf	can_send@i,w
  4913  02E7  1803               	btfsc	3,0
  4914  02E8  2B15               	goto	l2467
  4915                           
  4916                           ;mcp2515.c: 212: buf[6+i] = data_buf[i];
  4917  02E9  0844               	movf	can_send@i,w
  4918  02EA  0743               	addwf	can_send@data_buf,w
  4919  02EB  00BC               	movwf	??_can_send
  4920  02EC  083C               	movf	??_can_send,w
  4921  02ED  0086               	movwf	6
  4922  02EE  0187               	clrf	7
  4923  02EF  0801               	movf	1,w
  4924  02F0  00BD               	movwf	??_can_send+1
  4925  02F1  0844               	movf	can_send@i,w
  4926  02F2  3E06               	addlw	6
  4927  02F3  3EB3               	addlw	(low (_buf| 0))& (0+255)
  4928  02F4  0086               	movwf	6
  4929  02F5  0187               	clrf	7
  4930  02F6  083D               	movf	??_can_send+1,w
  4931  02F7  0081               	movwf	1
  4932                           
  4933                           ;mcp2515.c: 213: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4934  02F8  0862               	movf	_mode,w
  4935  02F9  1903               	btfsc	3,2
  4936  02FA  2B0F               	goto	l2463
  4937  02FB  3067               	movlw	low (STR_32| (0+32768))
  4938  02FC  00A2               	movwf	printf@f
  4939  02FD  3092               	movlw	high (STR_32| (0+32768))
  4940  02FE  00A3               	movwf	printf@f+1
  4941  02FF  0844               	movf	can_send@i,w
  4942  0300  0743               	addwf	can_send@data_buf,w
  4943  0301  00BC               	movwf	??_can_send
  4944  0302  083C               	movf	??_can_send,w
  4945  0303  0086               	movwf	6
  4946  0304  0187               	clrf	7
  4947  0305  0801               	movf	1,w
  4948  0306  00BD               	movwf	??_can_send+1
  4949  0307  01BE               	clrf	??_can_send+2
  4950  0308  083D               	movf	??_can_send+1,w
  4951  0309  00A4               	movwf	?_printf+2
  4952  030A  083E               	movf	??_can_send+2,w
  4953  030B  00A5               	movwf	?_printf+3
  4954  030C  3185  25B3  3182   	fcall	_printf
  4955  030F                     l2463:	
  4956  030F  3001               	movlw	1
  4957  0310  0020               	movlb	0	; select bank0
  4958  0311  00BC               	movwf	??_can_send
  4959  0312  083C               	movf	??_can_send,w
  4960  0313  07C4               	addwf	can_send@i,f
  4961  0314  2AE5               	goto	l2465
  4962  0315                     l2467:	
  4963                           
  4964                           ;mcp2515.c: 214: }
  4965                           ;mcp2515.c: 217: uint8_t len = 6 + dlc;
  4966  0315  083B               	movf	can_send@dlc,w
  4967  0316  3E06               	addlw	6
  4968  0317  00BC               	movwf	??_can_send
  4969  0318  083C               	movf	??_can_send,w
  4970  0319  00C0               	movwf	can_send@len
  4971                           
  4972                           ;mcp2515.c: 218: uint8_t bytes_written = SPI_exchange(buf, len);
  4973  031A  0840               	movf	can_send@len,w
  4974  031B  00BC               	movwf	??_can_send
  4975  031C  083C               	movf	??_can_send,w
  4976  031D  00F8               	movwf	SPI_exchange@len
  4977  031E  30B3               	movlw	(low (_buf| 0))& (0+255)
  4978  031F  318C  2480  3182   	fcall	_SPI_exchange
  4979  0322  0020               	movlb	0	; select bank0
  4980  0323  00BD               	movwf	??_can_send+1
  4981  0324  083D               	movf	??_can_send+1,w
  4982  0325  00C1               	movwf	can_send@bytes_written
  4983                           
  4984                           ;mcp2515.c: 220: buf[0] = 0b00000011;
  4985  0326  3003               	movlw	3
  4986  0327  00BC               	movwf	??_can_send
  4987  0328  083C               	movf	??_can_send,w
  4988  0329  0021               	movlb	1	; select bank1
  4989  032A  00B3               	movwf	_buf^(0+128)
  4990                           
  4991                           ;mcp2515.c: 221: buf[1] = txbnsidh[n];
  4992  032B  0020               	movlb	0	; select bank0
  4993  032C  0845               	movf	can_send@n,w
  4994  032D  3E21               	addlw	low (_txbnsidh| (0+32768))
  4995  032E  0084               	movwf	4
  4996  032F  3094               	movlw	high (_txbnsidh| (0+32768))
  4997  0330  1803               	skipnc
  4998  0331  3E01               	addlw	1
  4999  0332  0085               	movwf	5
  5000  0333  0800               	movf	0,w	;code access
  5001  0334  00BC               	movwf	??_can_send
  5002  0335  083C               	movf	??_can_send,w
  5003  0336  0021               	movlb	1	; select bank1
  5004  0337  00B4               	movwf	(_buf^(0+128)+1)
  5005                           
  5006                           ;mcp2515.c: 222: buf[2] = 0x00;
  5007  0338  01B5               	clrf	(_buf^(0+128)+2)
  5008                           
  5009                           ;mcp2515.c: 223: SPI_exchange(buf, 3);
  5010  0339  3003               	movlw	3
  5011  033A  0020               	movlb	0	; select bank0
  5012  033B  00BC               	movwf	??_can_send
  5013  033C  083C               	movf	??_can_send,w
  5014  033D  00F8               	movwf	SPI_exchange@len
  5015  033E  30B3               	movlw	(low (_buf| 0))& (0+255)
  5016  033F  318C  2480  3182   	fcall	_SPI_exchange
  5017                           
  5018                           ;mcp2515.c: 225: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5019  0342  0020               	movlb	0	; select bank0
  5020  0343  0862               	movf	_mode,w
  5021  0344  1903               	btfsc	3,2
  5022  0345  2B5D               	goto	l2483
  5023  0346  30C2               	movlw	low (STR_33| (0+32768))
  5024  0347  00A2               	movwf	printf@f
  5025  0348  3092               	movlw	high (STR_33| (0+32768))
  5026  0349  00A3               	movwf	printf@f+1
  5027  034A  0845               	movf	can_send@n,w
  5028  034B  00BC               	movwf	??_can_send
  5029  034C  01BD               	clrf	??_can_send+1
  5030  034D  083C               	movf	??_can_send,w
  5031  034E  00A4               	movwf	?_printf+2
  5032  034F  083D               	movf	??_can_send+1,w
  5033  0350  00A5               	movwf	?_printf+3
  5034  0351  0021               	movlb	1	; select bank1
  5035  0352  0835               	movf	(_buf^(0+128)+2),w
  5036  0353  0020               	movlb	0	; select bank0
  5037  0354  00BE               	movwf	??_can_send+2
  5038  0355  01BF               	clrf	??_can_send+3
  5039  0356  083E               	movf	??_can_send+2,w
  5040  0357  00A6               	movwf	?_printf+4
  5041  0358  083F               	movf	??_can_send+3,w
  5042  0359  00A7               	movwf	?_printf+5
  5043  035A  3185  25B3  3182   	fcall	_printf
  5044  035D                     l2483:	
  5045                           
  5046                           ;mcp2515.c: 226: buf[0] = 0b00000011;
  5047  035D  3003               	movlw	3
  5048  035E  0020               	movlb	0	; select bank0
  5049  035F  00BC               	movwf	??_can_send
  5050  0360  083C               	movf	??_can_send,w
  5051  0361  0021               	movlb	1	; select bank1
  5052  0362  00B3               	movwf	_buf^(0+128)
  5053                           
  5054                           ;mcp2515.c: 227: buf[1] = txbnsidh[n] + 1;
  5055  0363  0020               	movlb	0	; select bank0
  5056  0364  0845               	movf	can_send@n,w
  5057  0365  3E21               	addlw	low (_txbnsidh| (0+32768))
  5058  0366  0084               	movwf	4
  5059  0367  3094               	movlw	high (_txbnsidh| (0+32768))
  5060  0368  1803               	skipnc
  5061  0369  3E01               	addlw	1
  5062  036A  0085               	movwf	5
  5063  036B  0800               	movf	0,w	;code access
  5064  036C  3E01               	addlw	1
  5065  036D  00BC               	movwf	??_can_send
  5066  036E  083C               	movf	??_can_send,w
  5067  036F  0021               	movlb	1	; select bank1
  5068  0370  00B4               	movwf	(_buf^(0+128)+1)
  5069                           
  5070                           ;mcp2515.c: 228: buf[2] = 0x00;
  5071  0371  01B5               	clrf	(_buf^(0+128)+2)
  5072                           
  5073                           ;mcp2515.c: 229: SPI_exchange(buf, 3);
  5074  0372  3003               	movlw	3
  5075  0373  0020               	movlb	0	; select bank0
  5076  0374  00BC               	movwf	??_can_send
  5077  0375  083C               	movf	??_can_send,w
  5078  0376  00F8               	movwf	SPI_exchange@len
  5079  0377  30B3               	movlw	(low (_buf| 0))& (0+255)
  5080  0378  318C  2480  3182   	fcall	_SPI_exchange
  5081                           
  5082                           ;mcp2515.c: 231: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5083  037B  0020               	movlb	0	; select bank0
  5084  037C  0862               	movf	_mode,w
  5085  037D  1903               	btfsc	3,2
  5086  037E  2B96               	goto	l2495
  5087  037F  30E4               	movlw	low (STR_34| (0+32768))
  5088  0380  00A2               	movwf	printf@f
  5089  0381  3092               	movlw	high (STR_34| (0+32768))
  5090  0382  00A3               	movwf	printf@f+1
  5091  0383  0845               	movf	can_send@n,w
  5092  0384  00BC               	movwf	??_can_send
  5093  0385  01BD               	clrf	??_can_send+1
  5094  0386  083C               	movf	??_can_send,w
  5095  0387  00A4               	movwf	?_printf+2
  5096  0388  083D               	movf	??_can_send+1,w
  5097  0389  00A5               	movwf	?_printf+3
  5098  038A  0021               	movlb	1	; select bank1
  5099  038B  0835               	movf	(_buf^(0+128)+2),w
  5100  038C  0020               	movlb	0	; select bank0
  5101  038D  00BE               	movwf	??_can_send+2
  5102  038E  01BF               	clrf	??_can_send+3
  5103  038F  083E               	movf	??_can_send+2,w
  5104  0390  00A6               	movwf	?_printf+4
  5105  0391  083F               	movf	??_can_send+3,w
  5106  0392  00A7               	movwf	?_printf+5
  5107  0393  3185  25B3  3182   	fcall	_printf
  5108  0396                     l2495:	
  5109                           
  5110                           ;mcp2515.c: 233: if (bytes_written == len) {
  5111  0396  0020               	movlb	0	; select bank0
  5112  0397  0841               	movf	can_send@bytes_written,w
  5113  0398  0640               	xorwf	can_send@len,w
  5114  0399  1D03               	skipz
  5115  039A  0008               	return
  5116                           
  5117                           ;mcp2515.c: 235: buf[0] = 0b10000000 + (0b00000001 << n);
  5118  039B  3001               	movlw	1
  5119  039C  00BC               	movwf	??_can_send
  5120  039D  0A45               	incf	can_send@n,w
  5121  039E  2BA0               	goto	u2184
  5122  039F                     u2185:	
  5123  039F  35BC               	lslf	??_can_send,f
  5124  03A0                     u2184:	
  5125  03A0  0B89               	decfsz	9,f
  5126  03A1  2B9F               	goto	u2185
  5127  03A2  083C               	movf	??_can_send,w
  5128  03A3  3E80               	addlw	128
  5129  03A4  00BD               	movwf	??_can_send+1
  5130  03A5  083D               	movf	??_can_send+1,w
  5131  03A6  0021               	movlb	1	; select bank1
  5132  03A7  00B3               	movwf	_buf^(0+128)
  5133                           
  5134                           ;mcp2515.c: 236: bytes_written = SPI_exchange(buf, 1);
  5135  03A8  01F8               	clrf	SPI_exchange@len
  5136  03A9  0AF8               	incf	SPI_exchange@len,f
  5137  03AA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5138  03AB  318C  2480  3182   	fcall	_SPI_exchange
  5139  03AE  0020               	movlb	0	; select bank0
  5140  03AF  00BC               	movwf	??_can_send
  5141  03B0  083C               	movf	??_can_send,w
  5142  03B1  00C1               	movwf	can_send@bytes_written
  5143                           
  5144                           ;mcp2515.c: 237: if (bytes_written == 1) {
  5145  03B2  0341               	decf	can_send@bytes_written,w
  5146  03B3  1D03               	btfss	3,2
  5147  03B4  0008               	return
  5148                           
  5149                           ;mcp2515.c: 238: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5150  03B5  0862               	movf	_mode,w
  5151  03B6  1903               	btfsc	3,2
  5152  03B7  0008               	return
  5153  03B8  308E               	movlw	low (STR_35| (0+32768))
  5154  03B9  00A2               	movwf	printf@f
  5155  03BA  3092               	movlw	high (STR_35| (0+32768))
  5156  03BB  00A3               	movwf	printf@f+1
  5157  03BC  0843               	movf	can_send@data_buf,w
  5158  03BD  00A4               	movwf	low ((?_printf| 0+2))
  5159  03BE  3000               	movlw	0
  5160  03BF  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5161  03C0  3185  25B3         	fcall	_printf
  5162                           
  5163                           ;mcp2515.c: 239: return 1;
  5164                           ;	Return value of _can_send is never used
  5165  03C2  0008               	return
  5166  03C3                     __end_of_can_send:	
  5167                           ;mcp2515.c: 240: }
  5168                           ;mcp2515.c: 241: }
  5169                           ;mcp2515.c: 243: return 0;
  5170                           ;	Return value of _can_send is never used
  5171                           
  5172                           
  5173                           	psect	text7
  5174  0C58                     __ptext7:	
  5175 ;; *************** function _can_logging_mode *****************
  5176 ;; Defined at:
  5177 ;;		line 26 in file "mcp2515.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  debug           1    wreg     unsigned char 
  5180 ;;  verbose         1    0[COMMON] unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  debug           1    2[COMMON] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        3 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; This function calls:
  5199 ;;		Nothing
  5200 ;; This function is called by:
  5201 ;;		_main
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           
  5206                           ;psect for function _can_logging_mode
  5207  0C58                     _can_logging_mode:	
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _can_logging_mode: [wreg]
  5211                           ;can_logging_mode@debug stored from wreg
  5212  0C58  00F2               	movwf	can_logging_mode@debug
  5213                           
  5214                           ;mcp2515.c: 27: mode.debug = debug;
  5215  0C59  0872               	movf	can_logging_mode@debug,w
  5216  0C5A  00F1               	movwf	??_can_logging_mode
  5217  0C5B  0871               	movf	??_can_logging_mode,w
  5218  0C5C  0020               	movlb	0	; select bank0
  5219  0C5D  00E2               	movwf	_mode
  5220                           
  5221                           ;mcp2515.c: 28: mode.verbose = verbose;
  5222  0C5E  0870               	movf	can_logging_mode@verbose,w
  5223  0C5F  00F1               	movwf	??_can_logging_mode
  5224  0C60  0871               	movf	??_can_logging_mode,w
  5225  0C61  00E3               	movwf	_mode+1
  5226  0C62  0008               	return
  5227  0C63                     __end_of_can_logging_mode:	
  5228                           
  5229                           	psect	text8
  5230  0F81                     __ptext8:	
  5231 ;; *************** function _can_init *****************
  5232 ;; Defined at:
  5233 ;;		line 49 in file "mcp2515.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  receive_hand    2   31[BANK0 ] PTR void 
  5236 ;;		 -> receive_handler(1), 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5248 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;Total ram usage:        3 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    4
  5255 ;; This function calls:
  5256 ;;		_SPI_exchange
  5257 ;;		_can_ope_mode
  5258 ;;		_can_set_sid
  5259 ;; This function is called by:
  5260 ;;		_main
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           
  5265                           ;psect for function _can_init
  5266  0F81                     _can_init:	
  5267                           
  5268                           ;mcp2515.c: 50: can_set_sid(0);
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5272  0F81  3000               	movlw	0
  5273  0F82  00F0               	movwf	can_set_sid@can_node
  5274  0F83  00F1               	movwf	can_set_sid@can_node+1
  5275  0F84  318C  24E0  318F   	fcall	_can_set_sid
  5276                           
  5277                           ;mcp2515.c: 51: handler = receive_handler;
  5278  0F87  0020               	movlb	0	; select bank0
  5279  0F88  0840               	movf	can_init@receive_handler+1,w
  5280  0F89  00EA               	movwf	_handler+1
  5281  0F8A  083F               	movf	can_init@receive_handler,w
  5282  0F8B  00E9               	movwf	_handler
  5283                           
  5284                           ;mcp2515.c: 53: can_ope_mode(0b10000000);
  5285  0F8C  3080               	movlw	128
  5286  0F8D  318E  2668  318F   	fcall	_can_ope_mode
  5287                           
  5288                           ;mcp2515.c: 54: buf[0] = 0b11000000;
  5289  0F90  30C0               	movlw	192
  5290  0F91  0020               	movlb	0	; select bank0
  5291  0F92  00C1               	movwf	??_can_init
  5292  0F93  0841               	movf	??_can_init,w
  5293  0F94  0021               	movlb	1	; select bank1
  5294  0F95  00B3               	movwf	_buf^(0+128)
  5295                           
  5296                           ;mcp2515.c: 55: SPI_exchange(buf, 1);
  5297  0F96  01F8               	clrf	SPI_exchange@len
  5298  0F97  0AF8               	incf	SPI_exchange@len,f
  5299  0F98  30B3               	movlw	(low (_buf| 0))& (0+255)
  5300  0F99  318C  2480  318F   	fcall	_SPI_exchange
  5301                           
  5302                           ;mcp2515.c: 57: buf[0] = 0b00000010;
  5303  0F9C  3002               	movlw	2
  5304  0F9D  0020               	movlb	0	; select bank0
  5305  0F9E  00C1               	movwf	??_can_init
  5306  0F9F  0841               	movf	??_can_init,w
  5307  0FA0  0021               	movlb	1	; select bank1
  5308  0FA1  00B3               	movwf	_buf^(0+128)
  5309                           
  5310                           ;mcp2515.c: 58: buf[1] = 0x28;
  5311  0FA2  3028               	movlw	40
  5312  0FA3  0020               	movlb	0	; select bank0
  5313  0FA4  00C1               	movwf	??_can_init
  5314  0FA5  0841               	movf	??_can_init,w
  5315  0FA6  0021               	movlb	1	; select bank1
  5316  0FA7  00B4               	movwf	(_buf^(0+128)+1)
  5317                           
  5318                           ;mcp2515.c: 59: buf[2] = 0b00000101;
  5319  0FA8  3005               	movlw	5
  5320  0FA9  0020               	movlb	0	; select bank0
  5321  0FAA  00C1               	movwf	??_can_init
  5322  0FAB  0841               	movf	??_can_init,w
  5323  0FAC  0021               	movlb	1	; select bank1
  5324  0FAD  00B5               	movwf	(_buf^(0+128)+2)
  5325                           
  5326                           ;mcp2515.c: 60: buf[4] = 0b11110001;
  5327  0FAE  30F1               	movlw	241
  5328  0FAF  0020               	movlb	0	; select bank0
  5329  0FB0  00C1               	movwf	??_can_init
  5330  0FB1  0841               	movf	??_can_init,w
  5331  0FB2  0021               	movlb	1	; select bank1
  5332  0FB3  00B7               	movwf	(_buf^(0+128)+4)
  5333                           
  5334                           ;mcp2515.c: 61: buf[5] = 0b01000001;
  5335  0FB4  3041               	movlw	65
  5336  0FB5  0020               	movlb	0	; select bank0
  5337  0FB6  00C1               	movwf	??_can_init
  5338  0FB7  0841               	movf	??_can_init,w
  5339  0FB8  0021               	movlb	1	; select bank1
  5340  0FB9  00B8               	movwf	(_buf^(0+128)+5)
  5341                           
  5342                           ;mcp2515.c: 62: SPI_exchange(buf, 5);
  5343  0FBA  3005               	movlw	5
  5344  0FBB  0020               	movlb	0	; select bank0
  5345  0FBC  00C1               	movwf	??_can_init
  5346  0FBD  0841               	movf	??_can_init,w
  5347  0FBE  00F8               	movwf	SPI_exchange@len
  5348  0FBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5349  0FC0  318C  2480  318F   	fcall	_SPI_exchange
  5350                           
  5351                           ;mcp2515.c: 64: buf[0] = 0b00000010;
  5352  0FC3  3002               	movlw	2
  5353  0FC4  0020               	movlb	0	; select bank0
  5354  0FC5  00C1               	movwf	??_can_init
  5355  0FC6  0841               	movf	??_can_init,w
  5356  0FC7  0021               	movlb	1	; select bank1
  5357  0FC8  00B3               	movwf	_buf^(0+128)
  5358                           
  5359                           ;mcp2515.c: 65: buf[1] = 0x60;
  5360  0FC9  3060               	movlw	96
  5361  0FCA  0020               	movlb	0	; select bank0
  5362  0FCB  00C1               	movwf	??_can_init
  5363  0FCC  0841               	movf	??_can_init,w
  5364  0FCD  0021               	movlb	1	; select bank1
  5365  0FCE  00B4               	movwf	(_buf^(0+128)+1)
  5366                           
  5367                           ;mcp2515.c: 66: buf[2] = 0b00100100;
  5368  0FCF  3024               	movlw	36
  5369  0FD0  0020               	movlb	0	; select bank0
  5370  0FD1  00C1               	movwf	??_can_init
  5371  0FD2  0841               	movf	??_can_init,w
  5372  0FD3  0021               	movlb	1	; select bank1
  5373  0FD4  00B5               	movwf	(_buf^(0+128)+2)
  5374                           
  5375                           ;mcp2515.c: 67: SPI_exchange(buf, 3);
  5376  0FD5  3003               	movlw	3
  5377  0FD6  0020               	movlb	0	; select bank0
  5378  0FD7  00C1               	movwf	??_can_init
  5379  0FD8  0841               	movf	??_can_init,w
  5380  0FD9  00F8               	movwf	SPI_exchange@len
  5381  0FDA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5382  0FDB  318C  2480  318F   	fcall	_SPI_exchange
  5383                           
  5384                           ;mcp2515.c: 69: buf[0] = 0b00000010;
  5385  0FDE  3002               	movlw	2
  5386  0FDF  0020               	movlb	0	; select bank0
  5387  0FE0  00C1               	movwf	??_can_init
  5388  0FE1  0841               	movf	??_can_init,w
  5389  0FE2  0021               	movlb	1	; select bank1
  5390  0FE3  00B3               	movwf	_buf^(0+128)
  5391                           
  5392                           ;mcp2515.c: 70: buf[1] = 0x70;
  5393  0FE4  3070               	movlw	112
  5394  0FE5  0020               	movlb	0	; select bank0
  5395  0FE6  00C1               	movwf	??_can_init
  5396  0FE7  0841               	movf	??_can_init,w
  5397  0FE8  0021               	movlb	1	; select bank1
  5398  0FE9  00B4               	movwf	(_buf^(0+128)+1)
  5399                           
  5400                           ;mcp2515.c: 71: buf[2] = 0b00100000;
  5401  0FEA  3020               	movlw	32
  5402  0FEB  0020               	movlb	0	; select bank0
  5403  0FEC  00C1               	movwf	??_can_init
  5404  0FED  0841               	movf	??_can_init,w
  5405  0FEE  0021               	movlb	1	; select bank1
  5406  0FEF  00B5               	movwf	(_buf^(0+128)+2)
  5407                           
  5408                           ;mcp2515.c: 72: SPI_exchange(buf, 3);
  5409  0FF0  3003               	movlw	3
  5410  0FF1  0020               	movlb	0	; select bank0
  5411  0FF2  00C1               	movwf	??_can_init
  5412  0FF3  0841               	movf	??_can_init,w
  5413  0FF4  00F8               	movwf	SPI_exchange@len
  5414  0FF5  30B3               	movlw	(low (_buf| 0))& (0+255)
  5415  0FF6  318C  2480  318F   	fcall	_SPI_exchange
  5416                           
  5417                           ;mcp2515.c: 74: mode.debug = 0;
  5418  0FF9  0020               	movlb	0	; select bank0
  5419  0FFA  01E2               	clrf	_mode
  5420                           
  5421                           ;mcp2515.c: 75: mode.verbose = 0;
  5422  0FFB  01E3               	clrf	_mode+1
  5423                           
  5424                           ;mcp2515.c: 77: can_ope_mode(0b00000000);
  5425  0FFC  3000               	movlw	0
  5426  0FFD  318E  2668         	fcall	_can_ope_mode
  5427  0FFF  0008               	return
  5428  1000                     __end_of_can_init:	
  5429                           
  5430                           	psect	text9
  5431  0CE0                     __ptext9:	
  5432 ;; *************** function _can_set_sid *****************
  5433 ;; Defined at:
  5434 ;;		line 39 in file "mcp2515.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  can_node        2    0[COMMON] unsigned int 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  sidl            1    6[COMMON] unsigned char 
  5439 ;;  sidh            1    5[COMMON] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;Total ram usage:        7 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_main
  5459 ;;		_can_init
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _can_set_sid
  5465  0CE0                     _can_set_sid:	
  5466                           
  5467                           ;mcp2515.c: 40: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5471  0CE0  0871               	movf	can_set_sid@can_node+1,w
  5472  0CE1  00F3               	movwf	??_can_set_sid+1
  5473  0CE2  0870               	movf	can_set_sid@can_node,w
  5474  0CE3  00F2               	movwf	??_can_set_sid
  5475  0CE4  36F3               	lsrf	??_can_set_sid+1,f
  5476  0CE5  0CF2               	rrf	??_can_set_sid,f
  5477  0CE6  36F3               	lsrf	??_can_set_sid+1,f
  5478  0CE7  0CF2               	rrf	??_can_set_sid,f
  5479  0CE8  36F3               	lsrf	??_can_set_sid+1,f
  5480  0CE9  0CF2               	rrf	??_can_set_sid,f
  5481  0CEA  0872               	movf	??_can_set_sid,w
  5482  0CEB  00F4               	movwf	??_can_set_sid+2
  5483  0CEC  0874               	movf	??_can_set_sid+2,w
  5484  0CED  00F5               	movwf	can_set_sid@sidh
  5485                           
  5486                           ;mcp2515.c: 41: uint8_t sidl = (can_node << 5) & 0x00e0;
  5487  0CEE  0870               	movf	can_set_sid@can_node,w
  5488  0CEF  00F2               	movwf	??_can_set_sid
  5489  0CF0  3004               	movlw	4
  5490  0CF1                     u1785:	
  5491  0CF1  35F2               	lslf	??_can_set_sid,f
  5492  0CF2  3EFF               	addlw	-1
  5493  0CF3  1D03               	skipz
  5494  0CF4  2CF1               	goto	u1785
  5495  0CF5  3572               	lslf	??_can_set_sid,w
  5496  0CF6  39E0               	andlw	224
  5497  0CF7  00F3               	movwf	??_can_set_sid+1
  5498  0CF8  0873               	movf	??_can_set_sid+1,w
  5499  0CF9  00F6               	movwf	can_set_sid@sidl
  5500                           
  5501                           ;mcp2515.c: 42: sid.sidh = sidh;
  5502  0CFA  0875               	movf	can_set_sid@sidh,w
  5503  0CFB  00F2               	movwf	??_can_set_sid
  5504  0CFC  0872               	movf	??_can_set_sid,w
  5505  0CFD  0020               	movlb	0	; select bank0
  5506  0CFE  00E4               	movwf	_sid
  5507                           
  5508                           ;mcp2515.c: 43: sid.sidl = sidl;
  5509  0CFF  0876               	movf	can_set_sid@sidl,w
  5510  0D00  00F2               	movwf	??_can_set_sid
  5511  0D01  0872               	movf	??_can_set_sid,w
  5512  0D02  00E5               	movwf	_sid+1
  5513  0D03  0008               	return
  5514  0D04                     __end_of_can_set_sid:	
  5515                           
  5516                           	psect	text10
  5517  016A                     __ptext10:	
  5518 ;; *************** function _can_dump_registers *****************
  5519 ;; Defined at:
  5520 ;;		line 321 in file "mcp2515.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;		None
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;Total ram usage:        2 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    4
  5541 ;; This function calls:
  5542 ;;		_printf
  5543 ;;		_read_register
  5544 ;; This function is called by:
  5545 ;;		_main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _can_dump_registers
  5551  016A                     _can_dump_registers:	
  5552                           
  5553                           ;mcp2515.c: 322: printf("---\n");
  5554                           
  5555                           ;incstack = 0
  5556                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5557  016A  301C               	movlw	low (STR_38| (0+32768))
  5558  016B  0020               	movlb	0	; select bank0
  5559  016C  00A2               	movwf	printf@f
  5560  016D  3094               	movlw	high (STR_38| (0+32768))
  5561  016E  00A3               	movwf	printf@f+1
  5562  016F  3185  25B3  3181   	fcall	_printf
  5563                           
  5564                           ;mcp2515.c: 323: printf("SIDH: %02x\n", sid.sidh);
  5565  0172  30B6               	movlw	low ((STR_25+5)| (0+32768))
  5566  0173  0020               	movlb	0	; select bank0
  5567  0174  00A2               	movwf	printf@f
  5568  0175  3092               	movlw	high ((STR_25+5)| (0+32768))
  5569  0176  00A3               	movwf	printf@f+1
  5570  0177  0864               	movf	_sid,w
  5571  0178  00BB               	movwf	??_can_dump_registers
  5572  0179  01BC               	clrf	??_can_dump_registers+1
  5573  017A  083B               	movf	??_can_dump_registers,w
  5574  017B  00A4               	movwf	?_printf+2
  5575  017C  083C               	movf	??_can_dump_registers+1,w
  5576  017D  00A5               	movwf	?_printf+3
  5577  017E  3185  25B3  3181   	fcall	_printf
  5578                           
  5579                           ;mcp2515.c: 324: printf("SIDL: %02x\n", sid.sidl);
  5580  0181  30D8               	movlw	low ((STR_26+5)| (0+32768))
  5581  0182  0020               	movlb	0	; select bank0
  5582  0183  00A2               	movwf	printf@f
  5583  0184  3092               	movlw	high ((STR_26+5)| (0+32768))
  5584  0185  00A3               	movwf	printf@f+1
  5585  0186  0865               	movf	_sid+1,w
  5586  0187  00BB               	movwf	??_can_dump_registers
  5587  0188  01BC               	clrf	??_can_dump_registers+1
  5588  0189  083B               	movf	??_can_dump_registers,w
  5589  018A  00A4               	movwf	?_printf+2
  5590  018B  083C               	movf	??_can_dump_registers+1,w
  5591  018C  00A5               	movwf	?_printf+3
  5592  018D  3185  25B3  3181   	fcall	_printf
  5593                           
  5594                           ;mcp2515.c: 325: printf("\n");
  5595  0190  301F               	movlw	low ((STR_38+3)| (0+32768))
  5596  0191  0020               	movlb	0	; select bank0
  5597  0192  00A2               	movwf	printf@f
  5598  0193  3094               	movlw	high ((STR_38+3)| (0+32768))
  5599  0194  00A3               	movwf	printf@f+1
  5600  0195  3185  25B3  3181   	fcall	_printf
  5601                           
  5602                           ;mcp2515.c: 327: printf("CNF1: %02x\n", read_register(0x2a));
  5603  0198  30C6               	movlw	low (STR_42| (0+32768))
  5604  0199  0020               	movlb	0	; select bank0
  5605  019A  00A2               	movwf	printf@f
  5606  019B  3093               	movlw	high (STR_42| (0+32768))
  5607  019C  00A3               	movwf	printf@f+1
  5608  019D  302A               	movlw	42
  5609  019E  318C  24AC  3181   	fcall	_read_register
  5610  01A1  0020               	movlb	0	; select bank0
  5611  01A2  00BB               	movwf	??_can_dump_registers
  5612  01A3  01BC               	clrf	??_can_dump_registers+1
  5613  01A4  083B               	movf	??_can_dump_registers,w
  5614  01A5  00A4               	movwf	?_printf+2
  5615  01A6  083C               	movf	??_can_dump_registers+1,w
  5616  01A7  00A5               	movwf	?_printf+3
  5617  01A8  3185  25B3  3181   	fcall	_printf
  5618                           
  5619                           ;mcp2515.c: 328: printf("CNF2: %02x\n", read_register(0x29));
  5620  01AB  30D2               	movlw	low (STR_43| (0+32768))
  5621  01AC  0020               	movlb	0	; select bank0
  5622  01AD  00A2               	movwf	printf@f
  5623  01AE  3093               	movlw	high (STR_43| (0+32768))
  5624  01AF  00A3               	movwf	printf@f+1
  5625  01B0  3029               	movlw	41
  5626  01B1  318C  24AC  3181   	fcall	_read_register
  5627  01B4  0020               	movlb	0	; select bank0
  5628  01B5  00BB               	movwf	??_can_dump_registers
  5629  01B6  01BC               	clrf	??_can_dump_registers+1
  5630  01B7  083B               	movf	??_can_dump_registers,w
  5631  01B8  00A4               	movwf	?_printf+2
  5632  01B9  083C               	movf	??_can_dump_registers+1,w
  5633  01BA  00A5               	movwf	?_printf+3
  5634  01BB  3185  25B3  3181   	fcall	_printf
  5635                           
  5636                           ;mcp2515.c: 329: printf("CNF3: %02x\n", read_register(0x28));
  5637  01BE  30DE               	movlw	low (STR_44| (0+32768))
  5638  01BF  0020               	movlb	0	; select bank0
  5639  01C0  00A2               	movwf	printf@f
  5640  01C1  3093               	movlw	high (STR_44| (0+32768))
  5641  01C2  00A3               	movwf	printf@f+1
  5642  01C3  3028               	movlw	40
  5643  01C4  318C  24AC  3181   	fcall	_read_register
  5644  01C7  0020               	movlb	0	; select bank0
  5645  01C8  00BB               	movwf	??_can_dump_registers
  5646  01C9  01BC               	clrf	??_can_dump_registers+1
  5647  01CA  083B               	movf	??_can_dump_registers,w
  5648  01CB  00A4               	movwf	?_printf+2
  5649  01CC  083C               	movf	??_can_dump_registers+1,w
  5650  01CD  00A5               	movwf	?_printf+3
  5651  01CE  3185  25B3  3181   	fcall	_printf
  5652                           
  5653                           ;mcp2515.c: 330: printf("\n");
  5654  01D1  301F               	movlw	low ((STR_38+3)| (0+32768))
  5655  01D2  0020               	movlb	0	; select bank0
  5656  01D3  00A2               	movwf	printf@f
  5657  01D4  3094               	movlw	high ((STR_38+3)| (0+32768))
  5658  01D5  00A3               	movwf	printf@f+1
  5659  01D6  3185  25B3  3181   	fcall	_printf
  5660                           
  5661                           ;mcp2515.c: 332: printf("TXB0CTRL: %02x\n", read_register(0x30));
  5662  01D9  3015               	movlw	low (STR_46| (0+32768))
  5663  01DA  0020               	movlb	0	; select bank0
  5664  01DB  00A2               	movwf	printf@f
  5665  01DC  3093               	movlw	high (STR_46| (0+32768))
  5666  01DD  00A3               	movwf	printf@f+1
  5667  01DE  3030               	movlw	48
  5668  01DF  318C  24AC  3181   	fcall	_read_register
  5669  01E2  0020               	movlb	0	; select bank0
  5670  01E3  00BB               	movwf	??_can_dump_registers
  5671  01E4  01BC               	clrf	??_can_dump_registers+1
  5672  01E5  083B               	movf	??_can_dump_registers,w
  5673  01E6  00A4               	movwf	?_printf+2
  5674  01E7  083C               	movf	??_can_dump_registers+1,w
  5675  01E8  00A5               	movwf	?_printf+3
  5676  01E9  3185  25B3  3181   	fcall	_printf
  5677                           
  5678                           ;mcp2515.c: 333: printf("TXB1CTRL: %02x\n", read_register(0x40));
  5679  01EC  3035               	movlw	low (STR_47| (0+32768))
  5680  01ED  0020               	movlb	0	; select bank0
  5681  01EE  00A2               	movwf	printf@f
  5682  01EF  3093               	movlw	high (STR_47| (0+32768))
  5683  01F0  00A3               	movwf	printf@f+1
  5684  01F1  3040               	movlw	64
  5685  01F2  318C  24AC  3181   	fcall	_read_register
  5686  01F5  0020               	movlb	0	; select bank0
  5687  01F6  00BB               	movwf	??_can_dump_registers
  5688  01F7  01BC               	clrf	??_can_dump_registers+1
  5689  01F8  083B               	movf	??_can_dump_registers,w
  5690  01F9  00A4               	movwf	?_printf+2
  5691  01FA  083C               	movf	??_can_dump_registers+1,w
  5692  01FB  00A5               	movwf	?_printf+3
  5693  01FC  3185  25B3  3181   	fcall	_printf
  5694                           
  5695                           ;mcp2515.c: 334: printf("TXB2CTRL: %02x\n", read_register(0x50));
  5696  01FF  3045               	movlw	low (STR_48| (0+32768))
  5697  0200  0020               	movlb	0	; select bank0
  5698  0201  00A2               	movwf	printf@f
  5699  0202  3093               	movlw	high (STR_48| (0+32768))
  5700  0203  00A3               	movwf	printf@f+1
  5701  0204  3050               	movlw	80
  5702  0205  318C  24AC  3181   	fcall	_read_register
  5703  0208  0020               	movlb	0	; select bank0
  5704  0209  00BB               	movwf	??_can_dump_registers
  5705  020A  01BC               	clrf	??_can_dump_registers+1
  5706  020B  083B               	movf	??_can_dump_registers,w
  5707  020C  00A4               	movwf	?_printf+2
  5708  020D  083C               	movf	??_can_dump_registers+1,w
  5709  020E  00A5               	movwf	?_printf+3
  5710  020F  3185  25B3  3181   	fcall	_printf
  5711                           
  5712                           ;mcp2515.c: 335: printf("\n");
  5713  0212  301F               	movlw	low ((STR_38+3)| (0+32768))
  5714  0213  0020               	movlb	0	; select bank0
  5715  0214  00A2               	movwf	printf@f
  5716  0215  3094               	movlw	high ((STR_38+3)| (0+32768))
  5717  0216  00A3               	movwf	printf@f+1
  5718  0217  3185  25B3  3181   	fcall	_printf
  5719                           
  5720                           ;mcp2515.c: 337: printf("RXB0CTRL: %02x\n", read_register(0x60));
  5721  021A  3005               	movlw	low (STR_50| (0+32768))
  5722  021B  0020               	movlb	0	; select bank0
  5723  021C  00A2               	movwf	printf@f
  5724  021D  3093               	movlw	high (STR_50| (0+32768))
  5725  021E  00A3               	movwf	printf@f+1
  5726  021F  3060               	movlw	96
  5727  0220  318C  24AC  3181   	fcall	_read_register
  5728  0223  0020               	movlb	0	; select bank0
  5729  0224  00BB               	movwf	??_can_dump_registers
  5730  0225  01BC               	clrf	??_can_dump_registers+1
  5731  0226  083B               	movf	??_can_dump_registers,w
  5732  0227  00A4               	movwf	?_printf+2
  5733  0228  083C               	movf	??_can_dump_registers+1,w
  5734  0229  00A5               	movwf	?_printf+3
  5735  022A  3185  25B3  3181   	fcall	_printf
  5736                           
  5737                           ;mcp2515.c: 338: printf("RXB1CTRL: %02x\n", read_register(0x70));
  5738  022D  3025               	movlw	low (STR_51| (0+32768))
  5739  022E  0020               	movlb	0	; select bank0
  5740  022F  00A2               	movwf	printf@f
  5741  0230  3093               	movlw	high (STR_51| (0+32768))
  5742  0231  00A3               	movwf	printf@f+1
  5743  0232  3070               	movlw	112
  5744  0233  318C  24AC  3181   	fcall	_read_register
  5745  0236  0020               	movlb	0	; select bank0
  5746  0237  00BB               	movwf	??_can_dump_registers
  5747  0238  01BC               	clrf	??_can_dump_registers+1
  5748  0239  083B               	movf	??_can_dump_registers,w
  5749  023A  00A4               	movwf	?_printf+2
  5750  023B  083C               	movf	??_can_dump_registers+1,w
  5751  023C  00A5               	movwf	?_printf+3
  5752  023D  3185  25B3  3181   	fcall	_printf
  5753                           
  5754                           ;mcp2515.c: 339: printf("\n");
  5755  0240  301F               	movlw	low ((STR_38+3)| (0+32768))
  5756  0241  0020               	movlb	0	; select bank0
  5757  0242  00A2               	movwf	printf@f
  5758  0243  3094               	movlw	high ((STR_38+3)| (0+32768))
  5759  0244  00A3               	movwf	printf@f+1
  5760  0245  3185  25B3  3181   	fcall	_printf
  5761                           
  5762                           ;mcp2515.c: 341: printf("CANCTRL: %02x\n", read_register(0x0f));
  5763  0248  3064               	movlw	low (STR_53| (0+32768))
  5764  0249  0020               	movlb	0	; select bank0
  5765  024A  00A2               	movwf	printf@f
  5766  024B  3093               	movlw	high (STR_53| (0+32768))
  5767  024C  00A3               	movwf	printf@f+1
  5768  024D  300F               	movlw	15
  5769  024E  318C  24AC  3181   	fcall	_read_register
  5770  0251  0020               	movlb	0	; select bank0
  5771  0252  00BB               	movwf	??_can_dump_registers
  5772  0253  01BC               	clrf	??_can_dump_registers+1
  5773  0254  083B               	movf	??_can_dump_registers,w
  5774  0255  00A4               	movwf	?_printf+2
  5775  0256  083C               	movf	??_can_dump_registers+1,w
  5776  0257  00A5               	movwf	?_printf+3
  5777  0258  3185  25B3  3181   	fcall	_printf
  5778                           
  5779                           ;mcp2515.c: 342: printf("CANSTAT: %02x\n", read_register(0x0e));
  5780  025B  3073               	movlw	low (STR_22| (0+32768))
  5781  025C  0020               	movlb	0	; select bank0
  5782  025D  00A2               	movwf	printf@f
  5783  025E  3093               	movlw	high (STR_22| (0+32768))
  5784  025F  00A3               	movwf	printf@f+1
  5785  0260  300E               	movlw	14
  5786  0261  318C  24AC  3181   	fcall	_read_register
  5787  0264  0020               	movlb	0	; select bank0
  5788  0265  00BB               	movwf	??_can_dump_registers
  5789  0266  01BC               	clrf	??_can_dump_registers+1
  5790  0267  083B               	movf	??_can_dump_registers,w
  5791  0268  00A4               	movwf	?_printf+2
  5792  0269  083C               	movf	??_can_dump_registers+1,w
  5793  026A  00A5               	movwf	?_printf+3
  5794  026B  3185  25B3  3181   	fcall	_printf
  5795                           
  5796                           ;mcp2515.c: 343: printf("---\n");
  5797  026E  301C               	movlw	low (STR_38| (0+32768))
  5798  026F  0020               	movlb	0	; select bank0
  5799  0270  00A2               	movwf	printf@f
  5800  0271  3094               	movlw	high (STR_38| (0+32768))
  5801  0272  00A3               	movwf	printf@f+1
  5802  0273  3185  25B3         	fcall	_printf
  5803  0275  0008               	return
  5804  0276                     __end_of_can_dump_registers:	
  5805                           
  5806                           	psect	text11
  5807  0CAC                     __ptext11:	
  5808 ;; *************** function _read_register *****************
  5809 ;; Defined at:
  5810 ;;		line 310 in file "mcp2515.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  addr            1    wreg     unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  addr            1    1[BANK0 ] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      unsigned char 
  5817 ;; Registers used:
  5818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;Total ram usage:        2 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    3
  5831 ;; This function calls:
  5832 ;;		_SPI_exchange
  5833 ;; This function is called by:
  5834 ;;		_can_dump_registers
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _read_register
  5840  0CAC                     _read_register:	
  5841                           
  5842                           ;incstack = 0
  5843                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5844                           ;read_register@addr stored from wreg
  5845  0CAC  0020               	movlb	0	; select bank0
  5846  0CAD  00A1               	movwf	read_register@addr
  5847                           
  5848                           ;mcp2515.c: 311: buf[0] = 0b00000011;
  5849  0CAE  3003               	movlw	3
  5850  0CAF  00A0               	movwf	??_read_register
  5851  0CB0  0820               	movf	??_read_register,w
  5852  0CB1  0021               	movlb	1	; select bank1
  5853  0CB2  00B3               	movwf	_buf^(0+128)
  5854                           
  5855                           ;mcp2515.c: 312: buf[1] = addr;
  5856  0CB3  0020               	movlb	0	; select bank0
  5857  0CB4  0821               	movf	read_register@addr,w
  5858  0CB5  00A0               	movwf	??_read_register
  5859  0CB6  0820               	movf	??_read_register,w
  5860  0CB7  0021               	movlb	1	; select bank1
  5861  0CB8  00B4               	movwf	(_buf^(0+128)+1)
  5862                           
  5863                           ;mcp2515.c: 313: buf[2] = 0x00;
  5864  0CB9  01B5               	clrf	(_buf^(0+128)+2)
  5865                           
  5866                           ;mcp2515.c: 314: SPI_exchange(buf, 3);
  5867  0CBA  3003               	movlw	3
  5868  0CBB  0020               	movlb	0	; select bank0
  5869  0CBC  00A0               	movwf	??_read_register
  5870  0CBD  0820               	movf	??_read_register,w
  5871  0CBE  00F8               	movwf	SPI_exchange@len
  5872  0CBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5873  0CC0  318C  2480         	fcall	_SPI_exchange
  5874                           
  5875                           ;mcp2515.c: 315: return buf[2];
  5876  0CC2  0021               	movlb	1	; select bank1
  5877  0CC3  0835               	movf	(_buf^(0+128)+2),w
  5878  0CC4  0008               	return
  5879  0CC5                     __end_of_read_register:	
  5880                           
  5881                           	psect	text12
  5882  0D5D                     __ptext12:	
  5883 ;; *************** function _can_baudrate *****************
  5884 ;; Defined at:
  5885 ;;		line 277 in file "mcp2515.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  bpr             1    wreg     unsigned char 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  bpr             1   33[BANK0 ] unsigned char 
  5890 ;;  bytes_writte    1   35[BANK0 ] unsigned char 
  5891 ;;  mask            1   34[BANK0 ] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      unsigned char 
  5894 ;; Registers used:
  5895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;Total ram usage:        5 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    4
  5908 ;; This function calls:
  5909 ;;		_SPI_exchange
  5910 ;;		_can_ope_mode
  5911 ;; This function is called by:
  5912 ;;		_main
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           
  5917                           ;psect for function _can_baudrate
  5918  0D5D                     _can_baudrate:	
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5922                           ;can_baudrate@bpr stored from wreg
  5923  0D5D  0020               	movlb	0	; select bank0
  5924  0D5E  00C1               	movwf	can_baudrate@bpr
  5925                           
  5926                           ;mcp2515.c: 278: can_ope_mode(0b10000000);
  5927  0D5F  3080               	movlw	128
  5928  0D60  318E  2668  318D   	fcall	_can_ope_mode
  5929                           
  5930                           ;mcp2515.c: 280: uint8_t mask = 0b00111111;
  5931  0D63  303F               	movlw	63
  5932  0D64  0020               	movlb	0	; select bank0
  5933  0D65  00BF               	movwf	??_can_baudrate
  5934  0D66  083F               	movf	??_can_baudrate,w
  5935  0D67  00C2               	movwf	can_baudrate@mask
  5936                           
  5937                           ;mcp2515.c: 281: buf[0] = 0b00000101;
  5938  0D68  3005               	movlw	5
  5939  0D69  00BF               	movwf	??_can_baudrate
  5940  0D6A  083F               	movf	??_can_baudrate,w
  5941  0D6B  0021               	movlb	1	; select bank1
  5942  0D6C  00B3               	movwf	_buf^(0+128)
  5943                           
  5944                           ;mcp2515.c: 282: buf[1] = 0x2a;
  5945  0D6D  302A               	movlw	42
  5946  0D6E  0020               	movlb	0	; select bank0
  5947  0D6F  00BF               	movwf	??_can_baudrate
  5948  0D70  083F               	movf	??_can_baudrate,w
  5949  0D71  0021               	movlb	1	; select bank1
  5950  0D72  00B4               	movwf	(_buf^(0+128)+1)
  5951                           
  5952                           ;mcp2515.c: 283: buf[2] = mask;
  5953  0D73  0020               	movlb	0	; select bank0
  5954  0D74  0842               	movf	can_baudrate@mask,w
  5955  0D75  00BF               	movwf	??_can_baudrate
  5956  0D76  083F               	movf	??_can_baudrate,w
  5957  0D77  0021               	movlb	1	; select bank1
  5958  0D78  00B5               	movwf	(_buf^(0+128)+2)
  5959                           
  5960                           ;mcp2515.c: 284: buf[3] = bpr;
  5961  0D79  0020               	movlb	0	; select bank0
  5962  0D7A  0841               	movf	can_baudrate@bpr,w
  5963  0D7B  00BF               	movwf	??_can_baudrate
  5964  0D7C  083F               	movf	??_can_baudrate,w
  5965  0D7D  0021               	movlb	1	; select bank1
  5966  0D7E  00B6               	movwf	(_buf^(0+128)+3)
  5967                           
  5968                           ;mcp2515.c: 285: uint8_t bytes_written = SPI_exchange(buf, 4);
  5969  0D7F  3004               	movlw	4
  5970  0D80  0020               	movlb	0	; select bank0
  5971  0D81  00BF               	movwf	??_can_baudrate
  5972  0D82  083F               	movf	??_can_baudrate,w
  5973  0D83  00F8               	movwf	SPI_exchange@len
  5974  0D84  30B3               	movlw	(low (_buf| 0))& (0+255)
  5975  0D85  318C  2480  318D   	fcall	_SPI_exchange
  5976  0D88  0020               	movlb	0	; select bank0
  5977  0D89  00C0               	movwf	??_can_baudrate+1
  5978  0D8A  0840               	movf	??_can_baudrate+1,w
  5979  0D8B  00C3               	movwf	can_baudrate@bytes_written
  5980                           
  5981                           ;mcp2515.c: 286: can_ope_mode(operation_mode);
  5982  0D8C  0868               	movf	_operation_mode,w
  5983  0D8D  318E  2668         	fcall	_can_ope_mode
  5984                           
  5985                           ;mcp2515.c: 290: return 0;
  5986                           ;	Return value of _can_baudrate is never used
  5987                           
  5988                           ;mcp2515.c: 289: } else {
  5989                           
  5990                           ;mcp2515.c: 288: return 1;
  5991                           ;	Return value of _can_baudrate is never used
  5992  0D8F  0008               	return
  5993  0D90                     __end_of_can_baudrate:	
  5994                           
  5995                           	psect	text13
  5996  0D30                     __ptext13:	
  5997 ;; *************** function _can_abort *****************
  5998 ;; Defined at:
  5999 ;;		line 294 in file "mcp2515.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      unsigned char 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6017 ;;Total ram usage:        3 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    4
  6020 ;; This function calls:
  6021 ;;		_SPI_exchange
  6022 ;;		_can_ope_mode
  6023 ;; This function is called by:
  6024 ;;		_main
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           
  6029                           ;psect for function _can_abort
  6030  0D30                     _can_abort:	
  6031                           
  6032                           ;mcp2515.c: 295: can_ope_mode(0b10000000);
  6033                           
  6034                           ;incstack = 0
  6035                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6036  0D30  3080               	movlw	128
  6037  0D31  318E  2668  318D   	fcall	_can_ope_mode
  6038                           
  6039                           ;mcp2515.c: 297: buf[0] = 0b00000101;
  6040  0D34  3005               	movlw	5
  6041  0D35  0020               	movlb	0	; select bank0
  6042  0D36  00BF               	movwf	??_can_abort
  6043  0D37  083F               	movf	??_can_abort,w
  6044  0D38  0021               	movlb	1	; select bank1
  6045  0D39  00B3               	movwf	_buf^(0+128)
  6046                           
  6047                           ;mcp2515.c: 298: buf[1] = 0x0f;
  6048  0D3A  300F               	movlw	15
  6049  0D3B  0020               	movlb	0	; select bank0
  6050  0D3C  00BF               	movwf	??_can_abort
  6051  0D3D  083F               	movf	??_can_abort,w
  6052  0D3E  0021               	movlb	1	; select bank1
  6053  0D3F  00B4               	movwf	(_buf^(0+128)+1)
  6054                           
  6055                           ;mcp2515.c: 299: buf[2] = 0b00010000;
  6056  0D40  3010               	movlw	16
  6057  0D41  0020               	movlb	0	; select bank0
  6058  0D42  00BF               	movwf	??_can_abort
  6059  0D43  083F               	movf	??_can_abort,w
  6060  0D44  0021               	movlb	1	; select bank1
  6061  0D45  00B5               	movwf	(_buf^(0+128)+2)
  6062                           
  6063                           ;mcp2515.c: 300: buf[3] = 0b00010000;
  6064  0D46  3010               	movlw	16
  6065  0D47  0020               	movlb	0	; select bank0
  6066  0D48  00BF               	movwf	??_can_abort
  6067  0D49  083F               	movf	??_can_abort,w
  6068  0D4A  0021               	movlb	1	; select bank1
  6069  0D4B  00B6               	movwf	(_buf^(0+128)+3)
  6070                           
  6071                           ;mcp2515.c: 301: uint8_t bytes_written = SPI_exchange(buf, 4);
  6072  0D4C  3004               	movlw	4
  6073  0D4D  0020               	movlb	0	; select bank0
  6074  0D4E  00BF               	movwf	??_can_abort
  6075  0D4F  083F               	movf	??_can_abort,w
  6076  0D50  00F8               	movwf	SPI_exchange@len
  6077  0D51  30B3               	movlw	(low (_buf| 0))& (0+255)
  6078  0D52  318C  2480  318D   	fcall	_SPI_exchange
  6079  0D55  0020               	movlb	0	; select bank0
  6080  0D56  00C0               	movwf	??_can_abort+1
  6081  0D57  0840               	movf	??_can_abort+1,w
  6082  0D58  00C1               	movwf	can_abort@bytes_written
  6083                           
  6084                           ;mcp2515.c: 302: can_ope_mode(operation_mode);
  6085  0D59  0868               	movf	_operation_mode,w
  6086  0D5A  318E  2668         	fcall	_can_ope_mode
  6087                           
  6088                           ;mcp2515.c: 306: return 0;
  6089                           ;	Return value of _can_abort is never used
  6090                           
  6091                           ;mcp2515.c: 305: } else {
  6092                           
  6093                           ;mcp2515.c: 304: return 1;
  6094                           ;	Return value of _can_abort is never used
  6095  0D5C  0008               	return
  6096  0D5D                     __end_of_can_abort:	
  6097                           
  6098                           	psect	text14
  6099  0E68                     __ptext14:	
  6100 ;; *************** function _can_ope_mode *****************
  6101 ;; Defined at:
  6102 ;;		line 83 in file "mcp2515.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  ope_mode        1    wreg     unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  ope_mode        1   30[BANK0 ] unsigned char 
  6107 ;;  bytes_writte    1   29[BANK0 ] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      unsigned char 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;Total ram usage:        4 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    3
  6124 ;; This function calls:
  6125 ;;		_SPI_exchange
  6126 ;;		_printf
  6127 ;; This function is called by:
  6128 ;;		_main
  6129 ;;		_can_init
  6130 ;;		_can_set_mask
  6131 ;;		_can_baudrate
  6132 ;;		_can_abort
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           
  6137                           ;psect for function _can_ope_mode
  6138  0E68                     _can_ope_mode:	
  6139                           
  6140                           ;incstack = 0
  6141                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6142                           ;can_ope_mode@ope_mode stored from wreg
  6143  0E68  0020               	movlb	0	; select bank0
  6144  0E69  00BE               	movwf	can_ope_mode@ope_mode
  6145                           
  6146                           ;mcp2515.c: 84: buf[0] = 0b00000010;
  6147  0E6A  3002               	movlw	2
  6148  0E6B  00BB               	movwf	??_can_ope_mode
  6149  0E6C  083B               	movf	??_can_ope_mode,w
  6150  0E6D  0021               	movlb	1	; select bank1
  6151  0E6E  00B3               	movwf	_buf^(0+128)
  6152                           
  6153                           ;mcp2515.c: 85: buf[1] = 0x0f;
  6154  0E6F  300F               	movlw	15
  6155  0E70  0020               	movlb	0	; select bank0
  6156  0E71  00BB               	movwf	??_can_ope_mode
  6157  0E72  083B               	movf	??_can_ope_mode,w
  6158  0E73  0021               	movlb	1	; select bank1
  6159  0E74  00B4               	movwf	(_buf^(0+128)+1)
  6160                           
  6161                           ;mcp2515.c: 86: buf[2] = ope_mode;
  6162  0E75  0020               	movlb	0	; select bank0
  6163  0E76  083E               	movf	can_ope_mode@ope_mode,w
  6164  0E77  00BB               	movwf	??_can_ope_mode
  6165  0E78  083B               	movf	??_can_ope_mode,w
  6166  0E79  0021               	movlb	1	; select bank1
  6167  0E7A  00B5               	movwf	(_buf^(0+128)+2)
  6168                           
  6169                           ;mcp2515.c: 87: uint8_t bytes_written = SPI_exchange(buf, 3);
  6170  0E7B  3003               	movlw	3
  6171  0E7C  0020               	movlb	0	; select bank0
  6172  0E7D  00BB               	movwf	??_can_ope_mode
  6173  0E7E  083B               	movf	??_can_ope_mode,w
  6174  0E7F  00F8               	movwf	SPI_exchange@len
  6175  0E80  30B3               	movlw	(low (_buf| 0))& (0+255)
  6176  0E81  318C  2480  318E   	fcall	_SPI_exchange
  6177  0E84  0020               	movlb	0	; select bank0
  6178  0E85  00BC               	movwf	??_can_ope_mode+1
  6179  0E86  083C               	movf	??_can_ope_mode+1,w
  6180  0E87  00BD               	movwf	can_ope_mode@bytes_written
  6181                           
  6182                           ;mcp2515.c: 89: if (ope_mode != 0b10000000) operation_mode = ope_mode;
  6183  0E88  3080               	movlw	128
  6184  0E89  063E               	xorwf	can_ope_mode@ope_mode,w
  6185  0E8A  1903               	btfsc	3,2
  6186  0E8B  2E90               	goto	l2143
  6187  0E8C  083E               	movf	can_ope_mode@ope_mode,w
  6188  0E8D  00BB               	movwf	??_can_ope_mode
  6189  0E8E  083B               	movf	??_can_ope_mode,w
  6190  0E8F  00E8               	movwf	_operation_mode
  6191  0E90                     l2143:	
  6192                           
  6193                           ;mcp2515.c: 91: if (bytes_written == 3) {
  6194  0E90  3003               	movlw	3
  6195  0E91  063D               	xorwf	can_ope_mode@bytes_written,w
  6196  0E92  1D03               	btfss	3,2
  6197  0E93  0008               	return
  6198                           
  6199                           ;mcp2515.c: 92: buf[0] = 0b00000011;
  6200  0E94  3003               	movlw	3
  6201  0E95  00BB               	movwf	??_can_ope_mode
  6202  0E96  083B               	movf	??_can_ope_mode,w
  6203  0E97  0021               	movlb	1	; select bank1
  6204  0E98  00B3               	movwf	_buf^(0+128)
  6205                           
  6206                           ;mcp2515.c: 93: buf[1] = 0x0e;
  6207  0E99  300E               	movlw	14
  6208  0E9A  0020               	movlb	0	; select bank0
  6209  0E9B  00BB               	movwf	??_can_ope_mode
  6210  0E9C  083B               	movf	??_can_ope_mode,w
  6211  0E9D  0021               	movlb	1	; select bank1
  6212  0E9E  00B4               	movwf	(_buf^(0+128)+1)
  6213                           
  6214                           ;mcp2515.c: 94: bytes_written = SPI_exchange(buf, 3);
  6215  0E9F  3003               	movlw	3
  6216  0EA0  0020               	movlb	0	; select bank0
  6217  0EA1  00BB               	movwf	??_can_ope_mode
  6218  0EA2  083B               	movf	??_can_ope_mode,w
  6219  0EA3  00F8               	movwf	SPI_exchange@len
  6220  0EA4  30B3               	movlw	(low (_buf| 0))& (0+255)
  6221  0EA5  318C  2480  318E   	fcall	_SPI_exchange
  6222  0EA8  0020               	movlb	0	; select bank0
  6223  0EA9  00BC               	movwf	??_can_ope_mode+1
  6224  0EAA  083C               	movf	??_can_ope_mode+1,w
  6225  0EAB  00BD               	movwf	can_ope_mode@bytes_written
  6226                           
  6227                           ;mcp2515.c: 95: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6228  0EAC  0862               	movf	_mode,w
  6229  0EAD  1903               	btfsc	3,2
  6230  0EAE  0008               	return
  6231  0EAF  3073               	movlw	low (STR_22| (0+32768))
  6232  0EB0  00A2               	movwf	printf@f
  6233  0EB1  3093               	movlw	high (STR_22| (0+32768))
  6234  0EB2  00A3               	movwf	printf@f+1
  6235  0EB3  0021               	movlb	1	; select bank1
  6236  0EB4  0835               	movf	(_buf^(0+128)+2),w
  6237  0EB5  0020               	movlb	0	; select bank0
  6238  0EB6  00BB               	movwf	??_can_ope_mode
  6239  0EB7  01BC               	clrf	??_can_ope_mode+1
  6240  0EB8  083B               	movf	??_can_ope_mode,w
  6241  0EB9  00A4               	movwf	?_printf+2
  6242  0EBA  083C               	movf	??_can_ope_mode+1,w
  6243  0EBB  00A5               	movwf	?_printf+3
  6244  0EBC  3185  25B3         	fcall	_printf
  6245                           
  6246                           ;mcp2515.c: 98: return 0;
  6247                           ;	Return value of _can_ope_mode is never used
  6248                           
  6249                           ;mcp2515.c: 97: } else {
  6250                           
  6251                           ;mcp2515.c: 96: return 1;
  6252                           ;	Return value of _can_ope_mode is never used
  6253  0EBE  0008               	return
  6254  0EBF                     __end_of_can_ope_mode:	
  6255                           
  6256                           	psect	text15
  6257  05B3                     __ptext15:	
  6258 ;; *************** function _printf *****************
  6259 ;; Defined at:
  6260 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6263 ;;		 -> STR_55(5), STR_54(15), STR_53(15), STR_52(2), 
  6264 ;;		 -> STR_51(16), STR_50(16), STR_49(2), STR_48(16), 
  6265 ;;		 -> STR_47(16), STR_46(16), STR_45(2), STR_44(12), 
  6266 ;;		 -> STR_43(12), STR_42(12), STR_41(2), STR_40(12), 
  6267 ;;		 -> STR_39(12), STR_38(5), STR_37(13), STR_36(13), 
  6268 ;;		 -> STR_35(18), STR_34(17), STR_33(17), STR_32(20), 
  6269 ;;		 -> STR_31(14), STR_30(14), STR_29(14), STR_28(15), 
  6270 ;;		 -> STR_27(16), STR_26(17), STR_25(17), STR_24(23), 
  6271 ;;		 -> STR_23(21), STR_22(15), STR_21(22), STR_20(44), 
  6272 ;;		 -> STR_19(57), STR_18(26), STR_17(21), STR_16(38), 
  6273 ;;		 -> STR_15(25), STR_14(42), STR_13(38), STR_12(58), 
  6274 ;;		 -> STR_11(54), STR_10(59), STR_9(51), STR_7(36), 
  6275 ;;		 -> STR_6(3), STR_5(4), STR_4(2), STR_3(6), 
  6276 ;;		 -> STR_2(6), STR_1(7), 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  idx             1   14[BANK0 ] unsigned char 
  6279 ;;  tmpval          4    0        struct .
  6280 ;;  width           2   24[BANK0 ] int 
  6281 ;;  val             2   21[BANK0 ] unsigned int 
  6282 ;;  len             2   18[BANK0 ] unsigned int 
  6283 ;;  cp              2   16[BANK0 ] PTR const unsigned char 
  6284 ;;		 -> STR_56(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6285 ;;		 -> txf_clear@n(1), STR_8(19), main@buf(9), 
  6286 ;;  c               1   26[BANK0 ] char 
  6287 ;;  flag            1   23[BANK0 ] unsigned char 
  6288 ;;  ap              1   20[BANK0 ] PTR void [1]
  6289 ;;		 -> ?_printf(2), 
  6290 ;;  prec            1   15[BANK0 ] char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  2    2[BANK0 ] int 
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:       25 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    2
  6307 ;; This function calls:
  6308 ;;		___lwdiv
  6309 ;;		___lwmod
  6310 ;;		___wmul
  6311 ;;		_isdigit
  6312 ;;		_putch
  6313 ;; This function is called by:
  6314 ;;		_receive_handler
  6315 ;;		_main
  6316 ;;		_can_ope_mode
  6317 ;;		_can_set_mask
  6318 ;;		_receive
  6319 ;;		_can_send
  6320 ;;		_can_status_check
  6321 ;;		_can_dump_registers
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _printf
  6327  05B3                     _printf:	
  6328                           
  6329                           ;doprnt.c: 466: va_list ap;
  6330                           ;doprnt.c: 499: signed char c;
  6331                           ;doprnt.c: 501: int width;
  6332                           ;doprnt.c: 506: signed char prec;
  6333                           ;doprnt.c: 508: unsigned char flag;
  6334                           ;doprnt.c: 523: union {
  6335                           ;doprnt.c: 524: unsigned long vd;
  6336                           ;doprnt.c: 525: double integ;
  6337                           ;doprnt.c: 526: } tmpval;
  6338                           ;doprnt.c: 528: unsigned int val;
  6339                           ;doprnt.c: 529: unsigned len;
  6340                           ;doprnt.c: 530: const char * cp;
  6341                           ;doprnt.c: 533: *ap = __va_start();
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6345  05B3  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6346  05B4  0020               	movlb	0	; select bank0
  6347  05B5  00AA               	movwf	??_printf
  6348  05B6  082A               	movf	??_printf,w
  6349  05B7  00B4               	movwf	printf@ap
  6350  05B8                     l2065:	
  6351                           ;doprnt.c: 536: while(c = *f++) {
  6352                           
  6353  05B8  0020               	movlb	0	; select bank0
  6354  05B9  0823               	movf	printf@f+1,w
  6355  05BA  00AB               	movwf	??_printf+1
  6356  05BB  0822               	movf	printf@f,w
  6357  05BC  00AA               	movwf	??_printf
  6358  05BD  0AA2               	incf	printf@f,f
  6359  05BE  1903               	skipnz
  6360  05BF  0AA3               	incf	printf@f+1,f
  6361  05C0  082A               	movf	??_printf,w
  6362  05C1  0084               	movwf	4
  6363  05C2  082B               	movf	??_printf+1,w
  6364  05C3  0085               	movwf	5
  6365  05C4  0800               	movf	0,w	;code access
  6366  05C5  00AC               	movwf	??_printf+2
  6367  05C6  082C               	movf	??_printf+2,w
  6368  05C7  00BA               	movwf	printf@c
  6369  05C8  083A               	movf	printf@c,w
  6370  05C9  1903               	btfsc	3,2
  6371  05CA  0008               	return
  6372                           
  6373                           ;doprnt.c: 538: if(c != '%')
  6374  05CB  3025               	movlw	37
  6375  05CC  063A               	xorwf	printf@c,w
  6376  05CD  1903               	btfsc	3,2
  6377  05CE  2DD4               	goto	l1917
  6378                           
  6379                           ;doprnt.c: 540: {
  6380                           ;doprnt.c: 541: (putch(c) );
  6381  05CF  083A               	movf	printf@c,w
  6382  05D0  318C  2419  3185   	fcall	_putch
  6383                           
  6384                           ;doprnt.c: 542: continue;
  6385  05D3  2DB8               	goto	l2065
  6386  05D4                     l1917:	
  6387                           
  6388                           ;doprnt.c: 543: }
  6389                           ;doprnt.c: 546: width = 0;
  6390  05D4  0020               	movlb	0	; select bank0
  6391  05D5  01B8               	clrf	printf@width
  6392  05D6  01B9               	clrf	printf@width+1
  6393                           
  6394                           ;doprnt.c: 548: flag = 0;
  6395  05D7  01B7               	clrf	printf@flag
  6396                           
  6397                           ;doprnt.c: 551: switch(*f) {
  6398                           
  6399                           ;doprnt.c: 550: for(;;) {
  6400  05D8  2DDE               	goto	l1923
  6401  05D9                     l383:	
  6402                           ;doprnt.c: 579: case '0':
  6403                           
  6404                           
  6405                           ;doprnt.c: 580: flag |= 0x04;
  6406  05D9  1537               	bsf	printf@flag,2
  6407                           
  6408                           ;doprnt.c: 581: f++;
  6409  05DA  3001               	movlw	1
  6410  05DB  07A2               	addwf	printf@f,f
  6411  05DC  3000               	movlw	0
  6412  05DD  3DA3               	addwfc	printf@f+1,f
  6413  05DE                     l1923:	
  6414                           ;doprnt.c: 584: }
  6415                           
  6416                           ;doprnt.c: 582: continue;
  6417                           
  6418  05DE  0822               	movf	printf@f,w
  6419  05DF  0084               	movwf	4
  6420  05E0  0823               	movf	printf@f+1,w
  6421  05E1  0085               	movwf	5
  6422  05E2  0800               	movf	0,w	;code access
  6423                           
  6424                           ; Switch size 1, requested type "space"
  6425                           ; Number of cases is 1, Range of values is 48 to 48
  6426                           ; switch strategies available:
  6427                           ; Name         Instructions Cycles
  6428                           ; simple_byte            4     3 (average)
  6429                           ; direct_byte           11     9 (fixed)
  6430                           ; jumptable            263     9 (fixed)
  6431                           ;	Chosen strategy is simple_byte
  6432  05E3  3A30               	xorlw	48	; case 48
  6433  05E4  1903               	skipnz
  6434  05E5  2DD9               	goto	l383
  6435  05E6  2DE7               	goto	l1925
  6436  05E7                     l1925:	
  6437                           ;doprnt.c: 586: }
  6438                           
  6439                           ;doprnt.c: 585: break;
  6440                           
  6441                           
  6442                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6443  05E7  0822               	movf	printf@f,w
  6444  05E8  0084               	movwf	4
  6445  05E9  0823               	movf	printf@f+1,w
  6446  05EA  0085               	movwf	5
  6447  05EB  0800               	movf	0,w	;code access
  6448  05EC  318C  2463  3185   	fcall	_isdigit
  6449  05EF  1C03               	btfss	3,0
  6450  05F0  2E92               	goto	l1977
  6451                           
  6452                           ;doprnt.c: 598: width = 0;
  6453  05F1  0020               	movlb	0	; select bank0
  6454  05F2  01B8               	clrf	printf@width
  6455  05F3  01B9               	clrf	printf@width+1
  6456  05F4                     l1929:	
  6457                           ;doprnt.c: 599: do {
  6458                           
  6459                           
  6460                           ;doprnt.c: 600: width *= 10;
  6461  05F4  300A               	movlw	10
  6462  05F5  00F0               	movwf	___wmul@multiplier
  6463  05F6  3000               	movlw	0
  6464  05F7  00F1               	movwf	___wmul@multiplier+1
  6465  05F8  0020               	movlb	0	; select bank0
  6466  05F9  0839               	movf	printf@width+1,w
  6467  05FA  00F3               	movwf	___wmul@multiplicand+1
  6468  05FB  0838               	movf	printf@width,w
  6469  05FC  00F2               	movwf	___wmul@multiplicand
  6470  05FD  318C  24C5  3185   	fcall	___wmul
  6471  0600  0871               	movf	?___wmul+1,w
  6472  0601  0020               	movlb	0	; select bank0
  6473  0602  00B9               	movwf	printf@width+1
  6474  0603  0870               	movf	?___wmul,w
  6475  0604  00B8               	movwf	printf@width
  6476                           
  6477                           ;doprnt.c: 601: width += *f++ - '0';
  6478  0605  0822               	movf	printf@f,w
  6479  0606  0084               	movwf	4
  6480  0607  0823               	movf	printf@f+1,w
  6481  0608  0085               	movwf	5
  6482  0609  0800               	movf	0,w	;code access
  6483  060A  3ED0               	addlw	208
  6484  060B  00AA               	movwf	??_printf
  6485  060C  30FF               	movlw	255
  6486  060D  1803               	skipnc
  6487  060E  3000               	movlw	0
  6488  060F  00AB               	movwf	??_printf+1
  6489  0610  082A               	movf	??_printf,w
  6490  0611  07B8               	addwf	printf@width,f
  6491  0612  082B               	movf	??_printf+1,w
  6492  0613  3DB9               	addwfc	printf@width+1,f
  6493  0614  3001               	movlw	1
  6494  0615  07A2               	addwf	printf@f,f
  6495  0616  3000               	movlw	0
  6496  0617  3DA3               	addwfc	printf@f+1,f
  6497                           
  6498                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6499  0618  0822               	movf	printf@f,w
  6500  0619  0084               	movwf	4
  6501  061A  0823               	movf	printf@f+1,w
  6502  061B  0085               	movwf	5
  6503  061C  0800               	movf	0,w	;code access
  6504  061D  318C  2463  3185   	fcall	_isdigit
  6505  0620  1C03               	btfss	3,0
  6506  0621  2E92               	goto	l1977
  6507  0622  2DF4               	goto	l1929
  6508  0623                     l396:	
  6509                           ;doprnt.c: 718: case 'x':
  6510                           
  6511                           ;doprnt.c: 698: case 'i':
  6512                           ;doprnt.c: 699: break;
  6513                           
  6514                           ;doprnt.c: 697: case 'd':
  6515                           
  6516                           ;doprnt.c: 638: goto alldone;
  6517                           
  6518                           ;doprnt.c: 637: case 0:
  6519                           
  6520                           ;doprnt.c: 608: }
  6521                           ;doprnt.c: 635: switch(c = *f++) {
  6522                           
  6523                           
  6524                           ;doprnt.c: 721: flag |= 0x80;
  6525  0623  17B7               	bsf	printf@flag,7
  6526                           
  6527                           ;doprnt.c: 723: break;
  6528  0624  2EB3               	goto	l395
  6529  0625                     l1937:	
  6530                           ;doprnt.c: 728: case 's':
  6531                           
  6532                           
  6533                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6534  0625  0834               	movf	printf@ap,w
  6535  0626  0086               	movwf	6
  6536  0627  0187               	clrf	7
  6537  0628  3F40               	moviw [0]fsr1
  6538  0629  00B0               	movwf	printf@cp
  6539  062A  3F41               	moviw [1]fsr1
  6540  062B  00B1               	movwf	printf@cp+1
  6541  062C  3002               	movlw	2
  6542  062D  00AA               	movwf	??_printf
  6543  062E  082A               	movf	??_printf,w
  6544  062F  07B4               	addwf	printf@ap,f
  6545                           
  6546                           ;doprnt.c: 740: if(!cp)
  6547  0630  0830               	movf	printf@cp,w
  6548  0631  0431               	iorwf	printf@cp+1,w
  6549  0632  1D03               	btfss	3,2
  6550  0633  2E38               	goto	l1945
  6551                           
  6552                           ;doprnt.c: 741: cp = "(null)";
  6553  0634  30FC               	movlw	low (STR_56| (0+32768))
  6554  0635  00B0               	movwf	printf@cp
  6555  0636  3093               	movlw	high (STR_56| (0+32768))
  6556  0637  00B1               	movwf	printf@cp+1
  6557  0638                     l1945:	
  6558                           
  6559                           ;doprnt.c: 745: len = 0;
  6560  0638  01B2               	clrf	printf@len
  6561  0639  01B3               	clrf	printf@len+1
  6562  063A                     l1949:	
  6563                           ;doprnt.c: 746: while(cp[len])
  6564                           
  6565  063A  0830               	movf	printf@cp,w
  6566  063B  0732               	addwf	printf@len,w
  6567  063C  0084               	movwf	4
  6568  063D  0831               	movf	printf@cp+1,w
  6569  063E  3D33               	addwfc	printf@len+1,w
  6570  063F  0085               	movwf	5
  6571  0640  0012               	moviw fsr0++
  6572  0641  1903               	btfsc	3,2
  6573  0642  2E48               	goto	l1951
  6574                           
  6575                           ;doprnt.c: 747: len++;
  6576  0643  3001               	movlw	1
  6577  0644  07B2               	addwf	printf@len,f
  6578  0645  3000               	movlw	0
  6579  0646  3DB3               	addwfc	printf@len+1,f
  6580  0647  2E3A               	goto	l1949
  6581  0648                     l1951:	
  6582                           ;doprnt.c: 750: dostring:
  6583                           
  6584                           
  6585                           ;doprnt.c: 757: if(width > len)
  6586  0648  0839               	movf	printf@width+1,w
  6587  0649  0233               	subwf	printf@len+1,w
  6588  064A  1D03               	skipz
  6589  064B  2E4E               	goto	u1525
  6590  064C  0838               	movf	printf@width,w
  6591  064D  0232               	subwf	printf@len,w
  6592  064E                     u1525:	
  6593  064E  1803               	skipnc
  6594  064F  2E55               	goto	l1955
  6595                           
  6596                           ;doprnt.c: 758: width -= len;
  6597  0650  0832               	movf	printf@len,w
  6598  0651  02B8               	subwf	printf@width,f
  6599  0652  0833               	movf	printf@len+1,w
  6600  0653  3BB9               	subwfb	printf@width+1,f
  6601  0654  2E57               	goto	l1959
  6602  0655                     l1955:	
  6603                           
  6604                           ;doprnt.c: 759: else
  6605                           ;doprnt.c: 760: width = 0;
  6606  0655  01B8               	clrf	printf@width
  6607  0656  01B9               	clrf	printf@width+1
  6608  0657                     l1959:	
  6609                           ;doprnt.c: 764: while(width--)
  6610                           
  6611  0657  30FF               	movlw	255
  6612  0658  0020               	movlb	0	; select bank0
  6613  0659  07B8               	addwf	printf@width,f
  6614  065A  30FF               	movlw	255
  6615  065B  3DB9               	addwfc	printf@width+1,f
  6616  065C  0A38               	incf	printf@width,w
  6617  065D  1903               	btfsc	3,2
  6618  065E  0A39               	incf	printf@width+1,w
  6619  065F  1903               	btfsc	3,2
  6620  0660  2E73               	goto	l1965
  6621                           
  6622                           ;doprnt.c: 765: (putch(' ') );
  6623  0661  3020               	movlw	32
  6624  0662  318C  2419  3185   	fcall	_putch
  6625  0665  2E57               	goto	l1959
  6626  0666                     l1961:	
  6627                           ;doprnt.c: 767: while(len--)
  6628                           
  6629                           
  6630                           ;doprnt.c: 768: (putch(*cp++) );
  6631  0666  0830               	movf	printf@cp,w
  6632  0667  0084               	movwf	4
  6633  0668  0831               	movf	printf@cp+1,w
  6634  0669  0085               	movwf	5
  6635  066A  0800               	movf	0,w	;code access
  6636  066B  318C  2419  3185   	fcall	_putch
  6637  066E  3001               	movlw	1
  6638  066F  0020               	movlb	0	; select bank0
  6639  0670  07B0               	addwf	printf@cp,f
  6640  0671  3000               	movlw	0
  6641  0672  3DB1               	addwfc	printf@cp+1,f
  6642  0673                     l1965:	
  6643  0673  3001               	movlw	1
  6644  0674  02B2               	subwf	printf@len,f
  6645  0675  3000               	movlw	0
  6646  0676  3BB3               	subwfb	printf@len+1,f
  6647  0677  0A32               	incf	printf@len,w
  6648  0678  1D03               	skipz
  6649  0679  2E66               	goto	l1961
  6650  067A  0A33               	incf	printf@len+1,w
  6651  067B  1903               	btfsc	3,2
  6652  067C  2DB8               	goto	l2065
  6653  067D  2E66               	goto	l1961
  6654  067E                     l1967:	
  6655                           ;doprnt.c: 784: case 'c':
  6656                           
  6657                           ;doprnt.c: 774: continue;
  6658                           
  6659                           
  6660                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6661  067E  0834               	movf	printf@ap,w
  6662  067F  0086               	movwf	6
  6663  0680  0187               	clrf	7
  6664  0681  0801               	movf	1,w
  6665  0682  00AA               	movwf	??_printf
  6666  0683  082A               	movf	??_printf,w
  6667  0684  00BA               	movwf	printf@c
  6668  0685  3002               	movlw	2
  6669  0686  00AA               	movwf	??_printf
  6670  0687  082A               	movf	??_printf,w
  6671  0688  07B4               	addwf	printf@ap,f
  6672  0689                     l1971:	
  6673                           ;doprnt.c: 802: default:
  6674                           
  6675                           
  6676                           ;doprnt.c: 805: cp = (char *)&c;
  6677  0689  303A               	movlw	low printf@c
  6678  068A  00B0               	movwf	printf@cp
  6679  068B  3000               	movlw	high printf@c
  6680  068C  00B1               	movwf	printf@cp+1
  6681                           
  6682                           ;doprnt.c: 806: len = 1;
  6683  068D  3001               	movlw	1
  6684  068E  00B2               	movwf	printf@len
  6685  068F  3000               	movlw	0
  6686  0690  00B3               	movwf	printf@len+1
  6687                           
  6688                           ;doprnt.c: 807: goto dostring;
  6689  0691  2E48               	goto	l1951
  6690  0692                     l1977:	
  6691                           ;doprnt.c: 822: }
  6692                           
  6693  0692  0020               	movlb	0	; select bank0
  6694  0693  0823               	movf	printf@f+1,w
  6695  0694  00AB               	movwf	??_printf+1
  6696  0695  0822               	movf	printf@f,w
  6697  0696  00AA               	movwf	??_printf
  6698  0697  0AA2               	incf	printf@f,f
  6699  0698  1903               	skipnz
  6700  0699  0AA3               	incf	printf@f+1,f
  6701  069A  082A               	movf	??_printf,w
  6702  069B  0084               	movwf	4
  6703  069C  082B               	movf	??_printf+1,w
  6704  069D  0085               	movwf	5
  6705  069E  0800               	movf	0,w	;code access
  6706  069F  00BA               	movwf	printf@c
  6707                           
  6708                           ; Switch size 1, requested type "space"
  6709                           ; Number of cases is 6, Range of values is 0 to 120
  6710                           ; switch strategies available:
  6711                           ; Name         Instructions Cycles
  6712                           ; simple_byte           19    10 (average)
  6713                           ; direct_byte          248     6 (fixed)
  6714                           ; jumptable            260     6 (fixed)
  6715                           ;	Chosen strategy is simple_byte
  6716  06A0  3A00               	xorlw	0	; case 0
  6717  06A1  1903               	skipnz
  6718  06A2  2FED               	goto	l447
  6719  06A3  3A63               	xorlw	99	; case 99
  6720  06A4  1903               	skipnz
  6721  06A5  2E7E               	goto	l1967
  6722  06A6  3A07               	xorlw	7	; case 100
  6723  06A7  1903               	skipnz
  6724  06A8  2EB3               	goto	l395
  6725  06A9  3A0D               	xorlw	13	; case 105
  6726  06AA  1903               	skipnz
  6727  06AB  2EB3               	goto	l395
  6728  06AC  3A1A               	xorlw	26	; case 115
  6729  06AD  1903               	skipnz
  6730  06AE  2E25               	goto	l1937
  6731  06AF  3A0B               	xorlw	11	; case 120
  6732  06B0  1903               	skipnz
  6733  06B1  2E23               	goto	l396
  6734  06B2  2E89               	goto	l1971
  6735  06B3                     l395:	
  6736                           
  6737                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6738  06B3  0020               	movlb	0	; select bank0
  6739  06B4  1BB7               	btfsc	printf@flag,7
  6740  06B5  2ECD               	goto	l1989
  6741                           
  6742                           ;doprnt.c: 1253: {
  6743                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6744  06B6  0834               	movf	printf@ap,w
  6745  06B7  0086               	movwf	6
  6746  06B8  0187               	clrf	7
  6747  06B9  3F40               	moviw [0]fsr1
  6748  06BA  00B5               	movwf	printf@val
  6749  06BB  3F41               	moviw [1]fsr1
  6750  06BC  00B6               	movwf	printf@val+1
  6751  06BD  3002               	movlw	2
  6752  06BE  00AA               	movwf	??_printf
  6753  06BF  082A               	movf	??_printf,w
  6754  06C0  07B4               	addwf	printf@ap,f
  6755                           
  6756                           ;doprnt.c: 1261: if((int)val < 0) {
  6757  06C1  1FB6               	btfss	printf@val+1,7
  6758  06C2  2F1D               	goto	l2015
  6759                           
  6760                           ;doprnt.c: 1262: flag |= 0x03;
  6761  06C3  3003               	movlw	3
  6762  06C4  00AA               	movwf	??_printf
  6763  06C5  082A               	movf	??_printf,w
  6764  06C6  04B7               	iorwf	printf@flag,f
  6765                           
  6766                           ;doprnt.c: 1263: val = -val;
  6767  06C7  09B5               	comf	printf@val,f
  6768  06C8  09B6               	comf	printf@val+1,f
  6769  06C9  0AB5               	incf	printf@val,f
  6770  06CA  1903               	skipnz
  6771  06CB  0AB6               	incf	printf@val+1,f
  6772                           
  6773                           ;doprnt.c: 1264: }
  6774                           ;doprnt.c: 1266: }
  6775  06CC  2F1D               	goto	l2015
  6776  06CD                     l1989:	
  6777                           
  6778                           ;doprnt.c: 1268: else
  6779                           ;doprnt.c: 1273: {
  6780                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6781  06CD  0834               	movf	printf@ap,w
  6782  06CE  0086               	movwf	6
  6783  06CF  0187               	clrf	7
  6784  06D0  3F40               	moviw [0]fsr1
  6785  06D1  00B5               	movwf	printf@val
  6786  06D2  3F41               	moviw [1]fsr1
  6787  06D3  00B6               	movwf	printf@val+1
  6788  06D4  3002               	movlw	2
  6789  06D5  00AA               	movwf	??_printf
  6790  06D6  082A               	movf	??_printf,w
  6791  06D7  07B4               	addwf	printf@ap,f
  6792                           
  6793                           ;doprnt.c: 1287: }
  6794                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6795  06D8  2F1D               	goto	l2015
  6796  06D9                     l417:	
  6797                           ;doprnt.c: 1299: case 0x00:
  6798                           
  6799                           
  6800                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6801  06D9  01BA               	clrf	printf@c
  6802  06DA  0ABA               	incf	printf@c,f
  6803  06DB                     L9:	
  6804  06DB  3005               	movlw	5
  6805  06DC  063A               	xorwf	printf@c,w
  6806  06DD  1903               	btfsc	3,2
  6807  06DE  2F26               	goto	l2017
  6808                           
  6809                           ;doprnt.c: 1306: if(val < dpowers[c])
  6810  06DF  083A               	movf	printf@c,w
  6811  06E0  00AA               	movwf	??_printf
  6812  06E1  01AB               	clrf	??_printf+1
  6813  06E2  35AA               	lslf	??_printf,f
  6814  06E3  0DAB               	rlf	??_printf+1,f
  6815  06E4  30EA               	movlw	low (_dpowers| (0+32768))
  6816  06E5  072A               	addwf	??_printf,w
  6817  06E6  0084               	movwf	4
  6818  06E7  3093               	movlw	high (_dpowers| (0+32768))
  6819  06E8  3D2B               	addwfc	??_printf+1,w
  6820  06E9  0085               	movwf	5
  6821  06EA  3F00               	moviw [0]fsr0
  6822  06EB  00AC               	movwf	??_printf+2
  6823  06EC  3F01               	moviw [1]fsr0
  6824  06ED  00AD               	movwf	??_printf+3
  6825  06EE  082D               	movf	??_printf+3,w
  6826  06EF  0236               	subwf	printf@val+1,w
  6827  06F0  1D03               	skipz
  6828  06F1  2EF4               	goto	u1585
  6829  06F2  082C               	movf	??_printf+2,w
  6830  06F3  0235               	subwf	printf@val,w
  6831  06F4                     u1585:	
  6832  06F4  1C03               	btfss	3,0
  6833  06F5  2F26               	goto	l2017
  6834                           
  6835                           ;doprnt.c: 1307: break;
  6836  06F6  3001               	movlw	1
  6837  06F7  00AA               	movwf	??_printf
  6838  06F8  082A               	movf	??_printf,w
  6839  06F9  07BA               	addwf	printf@c,f
  6840  06FA  2EDB               	goto	L9
  6841  06FB                     l422:	
  6842                           ;doprnt.c: 1314: case 0x80:
  6843                           
  6844                           ;doprnt.c: 1309: break;
  6845                           
  6846                           
  6847                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6848  06FB  01BA               	clrf	printf@c
  6849  06FC  0ABA               	incf	printf@c,f
  6850  06FD                     L10:	
  6851  06FD  3004               	movlw	4
  6852  06FE  063A               	xorwf	printf@c,w
  6853  06FF  1903               	btfsc	3,2
  6854  0700  2F26               	goto	l2017
  6855                           
  6856                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6857  0701  083A               	movf	printf@c,w
  6858  0702  00AA               	movwf	??_printf
  6859  0703  01AB               	clrf	??_printf+1
  6860  0704  35AA               	lslf	??_printf,f
  6861  0705  0DAB               	rlf	??_printf+1,f
  6862  0706  30F4               	movlw	low (_hexpowers| (0+32768))
  6863  0707  072A               	addwf	??_printf,w
  6864  0708  0084               	movwf	4
  6865  0709  3093               	movlw	high (_hexpowers| (0+32768))
  6866  070A  3D2B               	addwfc	??_printf+1,w
  6867  070B  0085               	movwf	5
  6868  070C  3F00               	moviw [0]fsr0
  6869  070D  00AC               	movwf	??_printf+2
  6870  070E  3F01               	moviw [1]fsr0
  6871  070F  00AD               	movwf	??_printf+3
  6872  0710  082D               	movf	??_printf+3,w
  6873  0711  0236               	subwf	printf@val+1,w
  6874  0712  1D03               	skipz
  6875  0713  2F16               	goto	u1615
  6876  0714  082C               	movf	??_printf+2,w
  6877  0715  0235               	subwf	printf@val,w
  6878  0716                     u1615:	
  6879  0716  1C03               	btfss	3,0
  6880  0717  2F26               	goto	l2017
  6881                           
  6882                           ;doprnt.c: 1318: break;
  6883  0718  3001               	movlw	1
  6884  0719  00AA               	movwf	??_printf
  6885  071A  082A               	movf	??_printf,w
  6886  071B  07BA               	addwf	printf@c,f
  6887  071C  2EFD               	goto	L10
  6888  071D                     l2015:	
  6889                           ;doprnt.c: 1336: }
  6890                           
  6891                           ;doprnt.c: 1320: break;
  6892                           
  6893  071D  0837               	movf	printf@flag,w
  6894  071E  3980               	andlw	128
  6895                           
  6896                           ; Switch size 1, requested type "space"
  6897                           ; Number of cases is 2, Range of values is 0 to 128
  6898                           ; switch strategies available:
  6899                           ; Name         Instructions Cycles
  6900                           ; simple_byte            7     4 (average)
  6901                           ; jumptable            260     6 (fixed)
  6902                           ;	Chosen strategy is simple_byte
  6903  071F  3A00               	xorlw	0	; case 0
  6904  0720  1903               	skipnz
  6905  0721  2ED9               	goto	l417
  6906  0722  3A80               	xorlw	128	; case 128
  6907  0723  1903               	skipnz
  6908  0724  2EFB               	goto	l422
  6909  0725  2F26               	goto	l2017
  6910  0726                     l2017:	
  6911                           
  6912                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6913  0726  0838               	movf	printf@width,w
  6914  0727  0439               	iorwf	printf@width+1,w
  6915  0728  1903               	btfsc	3,2
  6916  0729  2F32               	goto	l426
  6917  072A  0837               	movf	printf@flag,w
  6918  072B  3903               	andlw	3
  6919  072C  1903               	btfsc	3,2
  6920  072D  2F32               	goto	l426
  6921                           
  6922                           ;doprnt.c: 1346: width--;
  6923  072E  30FF               	movlw	255
  6924  072F  07B8               	addwf	printf@width,f
  6925  0730  30FF               	movlw	255
  6926  0731  3DB9               	addwfc	printf@width+1,f
  6927  0732                     l426:	
  6928                           
  6929                           ;doprnt.c: 1381: if(width > c)
  6930  0732  083A               	movf	printf@c,w
  6931  0733  00AA               	movwf	??_printf
  6932  0734  01AB               	clrf	??_printf+1
  6933  0735  1BAA               	btfsc	??_printf,7
  6934  0736  03AB               	decf	??_printf+1,f
  6935  0737  082B               	movf	??_printf+1,w
  6936  0738  3A80               	xorlw	128
  6937  0739  00AC               	movwf	??_printf+2
  6938  073A  0839               	movf	printf@width+1,w
  6939  073B  3A80               	xorlw	128
  6940  073C  022C               	subwf	??_printf+2,w
  6941  073D  1D03               	skipz
  6942  073E  2F41               	goto	u1655
  6943  073F  0838               	movf	printf@width,w
  6944  0740  022A               	subwf	??_printf,w
  6945  0741                     u1655:	
  6946  0741  1803               	skipnc
  6947  0742  2F4E               	goto	l2025
  6948                           
  6949                           ;doprnt.c: 1382: width -= c;
  6950  0743  0020               	movlb	0	; select bank0
  6951  0744  083A               	movf	printf@c,w
  6952  0745  00AA               	movwf	??_printf
  6953  0746  01AB               	clrf	??_printf+1
  6954  0747  1BAA               	btfsc	??_printf,7
  6955  0748  03AB               	decf	??_printf+1,f
  6956  0749  082A               	movf	??_printf,w
  6957  074A  02B8               	subwf	printf@width,f
  6958  074B  082B               	movf	??_printf+1,w
  6959  074C  3BB9               	subwfb	printf@width+1,f
  6960  074D  2F51               	goto	l2027
  6961  074E                     l2025:	
  6962                           
  6963                           ;doprnt.c: 1383: else
  6964                           ;doprnt.c: 1384: width = 0;
  6965  074E  0020               	movlb	0	; select bank0
  6966  074F  01B8               	clrf	printf@width
  6967  0750  01B9               	clrf	printf@width+1
  6968  0751                     l2027:	
  6969                           
  6970                           ;doprnt.c: 1387: if(flag & 0x04) {
  6971  0751  1D37               	btfss	printf@flag,2
  6972  0752  2F6A               	goto	l2039
  6973                           
  6974                           ;doprnt.c: 1392: if(flag & 0x03)
  6975  0753  0837               	movf	printf@flag,w
  6976  0754  3903               	andlw	3
  6977  0755  1903               	btfsc	3,2
  6978  0756  2F5B               	goto	l2033
  6979                           
  6980                           ;doprnt.c: 1393: (putch('-') );
  6981  0757  302D               	movlw	45
  6982  0758  318C  2419  3185   	fcall	_putch
  6983  075B                     l2033:	
  6984                           
  6985                           ;doprnt.c: 1415: if(width)
  6986  075B  0020               	movlb	0	; select bank0
  6987  075C                     L11:	
  6988  075C  0838               	movf	printf@width,w
  6989  075D  0439               	iorwf	printf@width+1,w
  6990  075E  1903               	btfsc	3,2
  6991  075F  2F83               	goto	l2049
  6992                           
  6993                           ;doprnt.c: 1417: (putch('0') );
  6994                           
  6995                           ;doprnt.c: 1416: do
  6996  0760  3030               	movlw	48
  6997  0761  318C  2419  3185   	fcall	_putch
  6998                           
  6999                           ;doprnt.c: 1418: while(--width);
  7000  0764  30FF               	movlw	255
  7001  0765  0020               	movlb	0	; select bank0
  7002  0766  07B8               	addwf	printf@width,f
  7003  0767  30FF               	movlw	255
  7004  0768  3DB9               	addwfc	printf@width+1,f
  7005  0769  2F5C               	goto	L11
  7006  076A                     l2039:	
  7007                           ;doprnt.c: 1420: } else
  7008                           
  7009                           
  7010                           ;doprnt.c: 1422: {
  7011                           ;doprnt.c: 1424: if(width
  7012                           ;doprnt.c: 1428: )
  7013  076A  0838               	movf	printf@width,w
  7014  076B  0439               	iorwf	printf@width+1,w
  7015  076C  1903               	btfsc	3,2
  7016  076D  2F7B               	goto	l2045
  7017  076E                     l2041:	
  7018                           ;doprnt.c: 1429: do
  7019                           
  7020                           
  7021                           ;doprnt.c: 1430: (putch(' ') );
  7022  076E  3020               	movlw	32
  7023  076F  318C  2419  3185   	fcall	_putch
  7024                           
  7025                           ;doprnt.c: 1431: while(--width);
  7026  0772  30FF               	movlw	255
  7027  0773  0020               	movlb	0	; select bank0
  7028  0774  07B8               	addwf	printf@width,f
  7029  0775  30FF               	movlw	255
  7030  0776  3DB9               	addwfc	printf@width+1,f
  7031  0777  0838               	movf	printf@width,w
  7032  0778  0439               	iorwf	printf@width+1,w
  7033  0779  1D03               	btfss	3,2
  7034  077A  2F6E               	goto	l2041
  7035  077B                     l2045:	
  7036                           
  7037                           ;doprnt.c: 1438: if(flag & 0x03)
  7038  077B  0837               	movf	printf@flag,w
  7039  077C  3903               	andlw	3
  7040  077D  1903               	btfsc	3,2
  7041  077E  2F83               	goto	l2049
  7042                           
  7043                           ;doprnt.c: 1439: (putch('-') );
  7044  077F  302D               	movlw	45
  7045  0780  318C  2419  3185   	fcall	_putch
  7046  0783                     l2049:	
  7047                           
  7048                           ;doprnt.c: 1469: }
  7049                           ;doprnt.c: 1472: prec = c;
  7050  0783  0020               	movlb	0	; select bank0
  7051  0784  083A               	movf	printf@c,w
  7052  0785  00AA               	movwf	??_printf
  7053  0786  082A               	movf	??_printf,w
  7054  0787  00AF               	movwf	printf@prec
  7055                           
  7056                           ;doprnt.c: 1474: while(prec--) {
  7057  0788  2FDB               	goto	l2063
  7058  0789                     l2051:	
  7059                           ;doprnt.c: 1478: {
  7060                           ;doprnt.c: 1483: case 0x00:
  7061                           
  7062                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7063                           
  7064                           
  7065                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7066  0789  300A               	movlw	10
  7067  078A  00F8               	movwf	___lwmod@divisor
  7068  078B  3000               	movlw	0
  7069  078C  00F9               	movwf	___lwmod@divisor+1
  7070  078D  082F               	movf	printf@prec,w
  7071  078E  00AA               	movwf	??_printf
  7072  078F  01AB               	clrf	??_printf+1
  7073  0790  35AA               	lslf	??_printf,f
  7074  0791  0DAB               	rlf	??_printf+1,f
  7075  0792  30EA               	movlw	low (_dpowers| (0+32768))
  7076  0793  072A               	addwf	??_printf,w
  7077  0794  0084               	movwf	4
  7078  0795  3093               	movlw	high (_dpowers| (0+32768))
  7079  0796  3D2B               	addwfc	??_printf+1,w
  7080  0797  0085               	movwf	5
  7081  0798  3F00               	moviw [0]fsr0
  7082  0799  00F0               	movwf	___lwdiv@divisor
  7083  079A  3F01               	moviw [1]fsr0
  7084  079B  00F1               	movwf	___lwdiv@divisor+1
  7085  079C  0836               	movf	printf@val+1,w
  7086  079D  00F3               	movwf	___lwdiv@dividend+1
  7087  079E  0835               	movf	printf@val,w
  7088  079F  00F2               	movwf	___lwdiv@dividend
  7089  07A0  318D  2590  3185   	fcall	___lwdiv
  7090  07A3  0871               	movf	?___lwdiv+1,w
  7091  07A4  00FB               	movwf	___lwmod@dividend+1
  7092  07A5  0870               	movf	?___lwdiv,w
  7093  07A6  00FA               	movwf	___lwmod@dividend
  7094  07A7  318D  2504  3185   	fcall	___lwmod
  7095  07AA  0878               	movf	?___lwmod,w
  7096  07AB  3E30               	addlw	48
  7097  07AC  0020               	movlb	0	; select bank0
  7098  07AD  00AC               	movwf	??_printf+2
  7099  07AE  082C               	movf	??_printf+2,w
  7100  07AF  2FD6               	goto	L8
  7101  07B0                     l2053:	
  7102                           ;doprnt.c: 1497: case 0x80:
  7103                           
  7104                           ;doprnt.c: 1491: break;
  7105                           
  7106                           
  7107                           ;doprnt.c: 1499: {
  7108                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7109  07B0  082F               	movf	printf@prec,w
  7110  07B1  00AA               	movwf	??_printf
  7111  07B2  01AB               	clrf	??_printf+1
  7112  07B3  35AA               	lslf	??_printf,f
  7113  07B4  0DAB               	rlf	??_printf+1,f
  7114  07B5  30F4               	movlw	low (_hexpowers| (0+32768))
  7115  07B6  072A               	addwf	??_printf,w
  7116  07B7  0084               	movwf	4
  7117  07B8  3093               	movlw	high (_hexpowers| (0+32768))
  7118  07B9  3D2B               	addwfc	??_printf+1,w
  7119  07BA  0085               	movwf	5
  7120  07BB  3F00               	moviw [0]fsr0
  7121  07BC  00F0               	movwf	___lwdiv@divisor
  7122  07BD  3F01               	moviw [1]fsr0
  7123  07BE  00F1               	movwf	___lwdiv@divisor+1
  7124  07BF  0836               	movf	printf@val+1,w
  7125  07C0  00F3               	movwf	___lwdiv@dividend+1
  7126  07C1  0835               	movf	printf@val,w
  7127  07C2  00F2               	movwf	___lwdiv@dividend
  7128  07C3  318D  2590  3185   	fcall	___lwdiv
  7129  07C6  0870               	movf	?___lwdiv,w
  7130  07C7  390F               	andlw	15
  7131  07C8  0020               	movlb	0	; select bank0
  7132  07C9  00AC               	movwf	??_printf+2
  7133  07CA  082C               	movf	??_printf+2,w
  7134  07CB  00AE               	movwf	printf@idx
  7135                           
  7136                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7137  07CC  082E               	movf	printf@idx,w
  7138  07CD  3EA0               	addlw	low (STR_57| (0+32768))
  7139  07CE  0084               	movwf	4
  7140  07CF  3092               	movlw	high (STR_57| (0+32768))
  7141  07D0  1803               	skipnc
  7142  07D1  3E01               	addlw	1
  7143  07D2  0085               	movwf	5
  7144  07D3  0800               	movf	0,w	;code access
  7145  07D4  00AA               	movwf	??_printf
  7146  07D5  082A               	movf	??_printf,w
  7147  07D6                     L8:	
  7148  07D6  00BA               	movwf	printf@c
  7149  07D7                     l2061:	
  7150                           ;doprnt.c: 1523: }
  7151                           
  7152                           ;doprnt.c: 1508: }
  7153                           ;doprnt.c: 1510: break;
  7154                           
  7155                           
  7156                           ;doprnt.c: 1524: (putch(c) );
  7157  07D7  083A               	movf	printf@c,w
  7158  07D8  318C  2419  3185   	fcall	_putch
  7159  07DB                     l2063:	
  7160  07DB  30FF               	movlw	255
  7161  07DC  0020               	movlb	0	; select bank0
  7162  07DD  00AA               	movwf	??_printf
  7163  07DE  082A               	movf	??_printf,w
  7164  07DF  07AF               	addwf	printf@prec,f
  7165  07E0  0A2F               	incf	printf@prec,w
  7166  07E1  1903               	btfsc	3,2
  7167  07E2  2DB8               	goto	l2065
  7168  07E3  0837               	movf	printf@flag,w
  7169  07E4  3980               	andlw	128
  7170                           
  7171                           ; Switch size 1, requested type "space"
  7172                           ; Number of cases is 2, Range of values is 0 to 128
  7173                           ; switch strategies available:
  7174                           ; Name         Instructions Cycles
  7175                           ; simple_byte            7     4 (average)
  7176                           ; jumptable            260     6 (fixed)
  7177                           ;	Chosen strategy is simple_byte
  7178  07E5  3A00               	xorlw	0	; case 0
  7179  07E6  1903               	skipnz
  7180  07E7  2F89               	goto	l2051
  7181  07E8  3A80               	xorlw	128	; case 128
  7182  07E9  1903               	skipnz
  7183  07EA  2FB0               	goto	l2053
  7184  07EB  2FD7               	goto	l2061
  7185  07EC  2FD7               	goto	l2061
  7186  07ED                     l447:	
  7187                           ;doprnt.c: 1540: return 0;
  7188                           ;	Return value of _printf is never used
  7189                           
  7190                           ;doprnt.c: 1525: }
  7191                           ;doprnt.c: 1533: }
  7192                           ;doprnt.c: 1535: alldone:
  7193                           
  7194  07ED  0008               	return
  7195  07EE                     __end_of_printf:	
  7196                           
  7197                           	psect	text16
  7198  0C19                     __ptext16:	
  7199 ;; *************** function _putch *****************
  7200 ;; Defined at:
  7201 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  txData          1    wreg     unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  txData          1    1[COMMON] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0, pclath, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        1 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    1
  7222 ;; This function calls:
  7223 ;;		_EUSART_Write
  7224 ;; This function is called by:
  7225 ;;		_printf
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _putch
  7231  0C19                     _putch:	
  7232                           
  7233                           ;incstack = 0
  7234                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7235                           ;putch@txData stored from wreg
  7236  0C19  00F1               	movwf	putch@txData
  7237                           
  7238                           ;eusart.c: 109: EUSART_Write(txData);
  7239  0C1A  0871               	movf	putch@txData,w
  7240  0C1B  318C  2432         	fcall	_EUSART_Write
  7241  0C1D  0008               	return
  7242  0C1E                     __end_of_putch:	
  7243                           
  7244                           	psect	text17
  7245  0C32                     __ptext17:	
  7246 ;; *************** function _EUSART_Write *****************
  7247 ;; Defined at:
  7248 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  txData          1    wreg     unsigned char 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  txData          1    0[COMMON] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;Total ram usage:        1 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_putch
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           
  7276                           ;psect for function _EUSART_Write
  7277  0C32                     _EUSART_Write:	
  7278                           
  7279                           ;incstack = 0
  7280                           ; Regs used in _EUSART_Write: [wreg]
  7281                           ;EUSART_Write@txData stored from wreg
  7282  0C32  00F0               	movwf	EUSART_Write@txData
  7283  0C33                     l58:	
  7284                           ;eusart.c: 96: {
  7285                           
  7286                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7287                           
  7288  0C33  0020               	movlb	0	; select bank0
  7289  0C34  1E11               	btfss	17,4	;volatile
  7290  0C35  2C33               	goto	l58
  7291                           
  7292                           ;eusart.c: 97: }
  7293                           ;eusart.c: 99: TXREG = txData;
  7294  0C36  0870               	movf	EUSART_Write@txData,w
  7295  0C37  0023               	movlb	3	; select bank3
  7296  0C38  009A               	movwf	26	;volatile
  7297  0C39  0008               	return
  7298  0C3A                     __end_of_EUSART_Write:	
  7299                           
  7300                           	psect	text18
  7301  0D04                     __ptext18:	
  7302 ;; *************** function ___lwmod *****************
  7303 ;; Defined at:
  7304 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  divisor         2    8[COMMON] unsigned int 
  7307 ;;  dividend        2   10[COMMON] unsigned int 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  counter         1   13[COMMON] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  2    8[COMMON] unsigned int 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, status,0
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        6 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_printf
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function ___lwmod
  7334  0D04                     ___lwmod:	
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7338  0D04  0878               	movf	___lwmod@divisor,w
  7339  0D05  0479               	iorwf	___lwmod@divisor+1,w
  7340  0D06  1903               	btfsc	3,2
  7341  0D07  2D2B               	goto	l1875
  7342  0D08  01FD               	clrf	___lwmod@counter
  7343  0D09  0AFD               	incf	___lwmod@counter,f
  7344  0D0A                     l1865:	
  7345  0D0A  1BF9               	btfsc	___lwmod@divisor+1,7
  7346  0D0B  2D16               	goto	l1867
  7347  0D0C  3001               	movlw	1
  7348  0D0D                     u1365:	
  7349  0D0D  35F8               	lslf	___lwmod@divisor,f
  7350  0D0E  0DF9               	rlf	___lwmod@divisor+1,f
  7351  0D0F  0B89               	decfsz	9,f
  7352  0D10  2D0D               	goto	u1365
  7353  0D11  3001               	movlw	1
  7354  0D12  00FC               	movwf	??___lwmod
  7355  0D13  087C               	movf	??___lwmod,w
  7356  0D14  07FD               	addwf	___lwmod@counter,f
  7357  0D15  2D0A               	goto	l1865
  7358  0D16                     l1867:	
  7359  0D16  0879               	movf	___lwmod@divisor+1,w
  7360  0D17  027B               	subwf	___lwmod@dividend+1,w
  7361  0D18  1D03               	skipz
  7362  0D19  2D1C               	goto	u1385
  7363  0D1A  0878               	movf	___lwmod@divisor,w
  7364  0D1B  027A               	subwf	___lwmod@dividend,w
  7365  0D1C                     u1385:	
  7366  0D1C  1C03               	skipc
  7367  0D1D  2D22               	goto	l1871
  7368  0D1E  0878               	movf	___lwmod@divisor,w
  7369  0D1F  02FA               	subwf	___lwmod@dividend,f
  7370  0D20  0879               	movf	___lwmod@divisor+1,w
  7371  0D21  3BFB               	subwfb	___lwmod@dividend+1,f
  7372  0D22                     l1871:	
  7373  0D22  3001               	movlw	1
  7374  0D23                     u1395:	
  7375  0D23  36F9               	lsrf	___lwmod@divisor+1,f
  7376  0D24  0CF8               	rrf	___lwmod@divisor,f
  7377  0D25  0B89               	decfsz	9,f
  7378  0D26  2D23               	goto	u1395
  7379  0D27  3001               	movlw	1
  7380  0D28  02FD               	subwf	___lwmod@counter,f
  7381  0D29  1D03               	btfss	3,2
  7382  0D2A  2D16               	goto	l1867
  7383  0D2B                     l1875:	
  7384  0D2B  087B               	movf	___lwmod@dividend+1,w
  7385  0D2C  00F9               	movwf	?___lwmod+1
  7386  0D2D  087A               	movf	___lwmod@dividend,w
  7387  0D2E  00F8               	movwf	?___lwmod
  7388  0D2F  0008               	return
  7389  0D30                     __end_of___lwmod:	
  7390                           
  7391                           	psect	text19
  7392  0D90                     __ptext19:	
  7393 ;; *************** function ___lwdiv *****************
  7394 ;; Defined at:
  7395 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;  divisor         2    0[COMMON] unsigned int 
  7398 ;;  dividend        2    2[COMMON] unsigned int 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  quotient        2    5[COMMON] unsigned int 
  7401 ;;  counter         1    7[COMMON] unsigned char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  2    0[COMMON] unsigned int 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2, status,0
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:        8 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_printf
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function ___lwdiv
  7426  0D90                     ___lwdiv:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7430  0D90  01F5               	clrf	___lwdiv@quotient
  7431  0D91  01F6               	clrf	___lwdiv@quotient+1
  7432  0D92  0870               	movf	___lwdiv@divisor,w
  7433  0D93  0471               	iorwf	___lwdiv@divisor+1,w
  7434  0D94  1903               	btfsc	3,2
  7435  0D95  2DBF               	goto	l1853
  7436  0D96  01F7               	clrf	___lwdiv@counter
  7437  0D97  0AF7               	incf	___lwdiv@counter,f
  7438  0D98                     l1841:	
  7439  0D98  1BF1               	btfsc	___lwdiv@divisor+1,7
  7440  0D99  2DA4               	goto	l1843
  7441  0D9A  3001               	movlw	1
  7442  0D9B                     u1295:	
  7443  0D9B  35F0               	lslf	___lwdiv@divisor,f
  7444  0D9C  0DF1               	rlf	___lwdiv@divisor+1,f
  7445  0D9D  0B89               	decfsz	9,f
  7446  0D9E  2D9B               	goto	u1295
  7447  0D9F  3001               	movlw	1
  7448  0DA0  00F4               	movwf	??___lwdiv
  7449  0DA1  0874               	movf	??___lwdiv,w
  7450  0DA2  07F7               	addwf	___lwdiv@counter,f
  7451  0DA3  2D98               	goto	l1841
  7452  0DA4                     l1843:	
  7453  0DA4  3001               	movlw	1
  7454  0DA5                     u1315:	
  7455  0DA5  35F5               	lslf	___lwdiv@quotient,f
  7456  0DA6  0DF6               	rlf	___lwdiv@quotient+1,f
  7457  0DA7  0B89               	decfsz	9,f
  7458  0DA8  2DA5               	goto	u1315
  7459  0DA9  0871               	movf	___lwdiv@divisor+1,w
  7460  0DAA  0273               	subwf	___lwdiv@dividend+1,w
  7461  0DAB  1D03               	skipz
  7462  0DAC  2DAF               	goto	u1325
  7463  0DAD  0870               	movf	___lwdiv@divisor,w
  7464  0DAE  0272               	subwf	___lwdiv@dividend,w
  7465  0DAF                     u1325:	
  7466  0DAF  1C03               	skipc
  7467  0DB0  2DB6               	goto	l1849
  7468  0DB1  0870               	movf	___lwdiv@divisor,w
  7469  0DB2  02F2               	subwf	___lwdiv@dividend,f
  7470  0DB3  0871               	movf	___lwdiv@divisor+1,w
  7471  0DB4  3BF3               	subwfb	___lwdiv@dividend+1,f
  7472  0DB5  1475               	bsf	___lwdiv@quotient,0
  7473  0DB6                     l1849:	
  7474  0DB6  3001               	movlw	1
  7475  0DB7                     u1335:	
  7476  0DB7  36F1               	lsrf	___lwdiv@divisor+1,f
  7477  0DB8  0CF0               	rrf	___lwdiv@divisor,f
  7478  0DB9  0B89               	decfsz	9,f
  7479  0DBA  2DB7               	goto	u1335
  7480  0DBB  3001               	movlw	1
  7481  0DBC  02F7               	subwf	___lwdiv@counter,f
  7482  0DBD  1D03               	btfss	3,2
  7483  0DBE  2DA4               	goto	l1843
  7484  0DBF                     l1853:	
  7485  0DBF  0876               	movf	___lwdiv@quotient+1,w
  7486  0DC0  00F1               	movwf	?___lwdiv+1
  7487  0DC1  0875               	movf	___lwdiv@quotient,w
  7488  0DC2  00F0               	movwf	?___lwdiv
  7489  0DC3  0008               	return
  7490  0DC4                     __end_of___lwdiv:	
  7491                           
  7492                           	psect	text20
  7493  0C80                     __ptext20:	
  7494 ;; *************** function _SPI_exchange *****************
  7495 ;; Defined at:
  7496 ;;		line 4 in file "spi.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  buf             1    wreg     PTR unsigned char 
  7499 ;;		 -> receive@rx_buf(15), buf(16), 
  7500 ;;  len             1    8[COMMON] unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  buf             1   13[COMMON] PTR unsigned char 
  7503 ;;		 -> receive@rx_buf(15), buf(16), 
  7504 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      unsigned char 
  7507 ;; Registers used:
  7508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        6 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    2
  7521 ;; This function calls:
  7522 ;;		_SPI_Exchange8bitBuffer
  7523 ;; This function is called by:
  7524 ;;		_can_init
  7525 ;;		_can_ope_mode
  7526 ;;		_can_set_mask
  7527 ;;		_txf_clear
  7528 ;;		_receive
  7529 ;;		_can_send
  7530 ;;		_can_status_check
  7531 ;;		_can_baudrate
  7532 ;;		_can_abort
  7533 ;;		_read_register
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           
  7538                           ;psect for function _SPI_exchange
  7539  0C80                     _SPI_exchange:	
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7543                           ;SPI_exchange@buf stored from wreg
  7544  0C80  00FD               	movwf	SPI_exchange@buf
  7545                           
  7546                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7547  0C81  0022               	movlb	2	; select bank2
  7548  0C82  120C               	bcf	12,4	;volatile
  7549                           
  7550                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7551  0C83  0878               	movf	SPI_exchange@len,w
  7552  0C84  00F9               	movwf	??_SPI_exchange
  7553  0C85  0879               	movf	??_SPI_exchange,w
  7554  0C86  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7555  0C87  087D               	movf	SPI_exchange@buf,w
  7556  0C88  00FA               	movwf	??_SPI_exchange+1
  7557  0C89  087A               	movf	??_SPI_exchange+1,w
  7558  0C8A  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7559  0C8B  087D               	movf	SPI_exchange@buf,w
  7560  0C8C  318D  25C4         	fcall	_SPI_Exchange8bitBuffer
  7561  0C8E  00FB               	movwf	??_SPI_exchange+2
  7562  0C8F  087B               	movf	??_SPI_exchange+2,w
  7563  0C90  00FC               	movwf	SPI_exchange@bytes_written
  7564                           
  7565                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7566  0C91  0022               	movlb	2	; select bank2
  7567  0C92  160C               	bsf	12,4	;volatile
  7568                           
  7569                           ;spi.c: 8: return bytes_written;
  7570  0C93  087C               	movf	SPI_exchange@bytes_written,w
  7571  0C94  0008               	return
  7572  0C95                     __end_of_SPI_exchange:	
  7573                           
  7574                           	psect	text21
  7575  0DC4                     __ptext21:	
  7576 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7577 ;; Defined at:
  7578 ;;		line 91 in file "mcc_generated_files/spi.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  dataIn          1    wreg     PTR unsigned char 
  7581 ;;		 -> receive@rx_buf(15), buf(16), 
  7582 ;;  bufLen          1    1[COMMON] unsigned char 
  7583 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7584 ;;		 -> receive@rx_buf(15), buf(16), 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7587 ;;		 -> receive@rx_buf(15), buf(16), 
  7588 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      unsigned char 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;Total ram usage:        7 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    1
  7605 ;; This function calls:
  7606 ;;		_SPI_Exchange8bit
  7607 ;; This function is called by:
  7608 ;;		_SPI_exchange
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _SPI_Exchange8bitBuffer
  7614  0DC4                     _SPI_Exchange8bitBuffer:	
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7618                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7619  0DC4  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7620                           
  7621                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7622  0DC5  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7623                           
  7624                           ;spi.c: 95: if(bufLen != 0)
  7625  0DC6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7626  0DC7  1903               	btfsc	3,2
  7627  0DC8  2E10               	goto	l1907
  7628                           
  7629                           ;spi.c: 96: {
  7630                           ;spi.c: 97: if(dataIn != (0))
  7631  0DC9  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7632  0DCA  1D03               	btfss	3,2
  7633  0DCB  2DF2               	goto	l1895
  7634  0DCC  2DF7               	goto	l1897
  7635  0DCD                     l1887:	
  7636                           ;spi.c: 98: {
  7637                           ;spi.c: 99: while(bytesWritten < bufLen)
  7638                           
  7639                           
  7640                           ;spi.c: 100: {
  7641                           ;spi.c: 101: if(dataOut == (0))
  7642  0DCD  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7643  0DCE  1D03               	btfss	3,2
  7644  0DCF  2DDB               	goto	l1891
  7645                           
  7646                           ;spi.c: 102: {
  7647                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7648  0DD0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7649  0DD1  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7650  0DD2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7651  0DD3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7652  0DD4  0086               	movwf	6
  7653  0DD5  0187               	clrf	7
  7654  0DD6  0801               	movf	1,w
  7655  0DD7  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7656                           
  7657                           ;spi.c: 104: }
  7658  0DDA  2DEE               	goto	l1893
  7659  0DDB                     l1891:	
  7660                           
  7661                           ;spi.c: 105: else
  7662                           ;spi.c: 106: {
  7663                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7664  0DDB  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7665  0DDC  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7666  0DDD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7667  0DDE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7668  0DDF  0086               	movwf	6
  7669  0DE0  0187               	clrf	7
  7670  0DE1  0801               	movf	1,w
  7671  0DE2  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7672  0DE5  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7673  0DE6  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7674  0DE7  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7675  0DE8  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7676  0DE9  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7677  0DEA  0086               	movwf	6
  7678  0DEB  0187               	clrf	7
  7679  0DEC  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7680  0DED  0081               	movwf	1
  7681  0DEE                     l1893:	
  7682                           
  7683                           ;spi.c: 108: }
  7684                           ;spi.c: 110: bytesWritten++;
  7685  0DEE  3001               	movlw	1
  7686  0DEF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7687  0DF0  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7688  0DF1  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7689  0DF2                     l1895:	
  7690  0DF2  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7691  0DF3  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7692  0DF4  1803               	btfsc	3,0
  7693  0DF5  2E10               	goto	l1907
  7694  0DF6  2DCD               	goto	l1887
  7695  0DF7                     l1897:	
  7696                           ;spi.c: 111: }
  7697                           ;spi.c: 112: }
  7698                           
  7699                           
  7700                           ;spi.c: 113: else
  7701                           ;spi.c: 114: {
  7702                           ;spi.c: 115: if(dataOut != (0))
  7703  0DF7  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7704  0DF8  1D03               	btfss	3,2
  7705  0DF9  2E0C               	goto	l1905
  7706  0DFA  2E10               	goto	l1907
  7707  0DFB                     l1901:	
  7708                           ;spi.c: 116: {
  7709                           ;spi.c: 117: while(bytesWritten < bufLen )
  7710                           
  7711                           
  7712                           ;spi.c: 118: {
  7713                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7714  0DFB  3000               	movlw	0
  7715  0DFC  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7716  0DFF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7717  0E00  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7718  0E01  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7719  0E02  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7720  0E03  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7721  0E04  0086               	movwf	6
  7722  0E05  0187               	clrf	7
  7723  0E06  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7724  0E07  0081               	movwf	1
  7725                           
  7726                           ;spi.c: 121: bytesWritten++;
  7727  0E08  3001               	movlw	1
  7728  0E09  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7729  0E0A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7730  0E0B  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7731  0E0C                     l1905:	
  7732  0E0C  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7733  0E0D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7734  0E0E  1C03               	skipc
  7735  0E0F  2DFB               	goto	l1901
  7736  0E10                     l1907:	
  7737                           
  7738                           ;spi.c: 122: }
  7739                           ;spi.c: 123: }
  7740                           ;spi.c: 124: }
  7741                           ;spi.c: 125: }
  7742                           ;spi.c: 127: return bytesWritten;
  7743  0E10  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7744  0E11  0008               	return
  7745  0E12                     __end_of_SPI_Exchange8bitBuffer:	
  7746                           
  7747                           	psect	text22
  7748  0C3A                     __ptext22:	
  7749 ;; *************** function _SPI_Exchange8bit *****************
  7750 ;; Defined at:
  7751 ;;		line 77 in file "mcc_generated_files/spi.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  data            1    wreg     unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  data            1    0[COMMON] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      unsigned char 
  7758 ;; Registers used:
  7759 ;;		wreg
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        1 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_SPI_Exchange8bitBuffer
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           
  7779                           ;psect for function _SPI_Exchange8bit
  7780  0C3A                     _SPI_Exchange8bit:	
  7781                           
  7782                           ;incstack = 0
  7783                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7784                           ;SPI_Exchange8bit@data stored from wreg
  7785  0C3A  00F0               	movwf	SPI_Exchange8bit@data
  7786                           
  7787                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7788  0C3B  0024               	movlb	4	; select bank4
  7789  0C3C  1395               	bcf	21,7	;volatile
  7790                           
  7791                           ;spi.c: 82: SSP1BUF = data;
  7792  0C3D  0870               	movf	SPI_Exchange8bit@data,w
  7793  0C3E  0091               	movwf	17	;volatile
  7794  0C3F                     l113:	
  7795                           ;spi.c: 85: {
  7796                           
  7797                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7798                           
  7799  0C3F  1C14               	btfss	20,0	;volatile
  7800  0C40  2C3F               	goto	l113
  7801                           
  7802                           ;spi.c: 86: }
  7803                           ;spi.c: 88: return (SSP1BUF);
  7804  0C41  0811               	movf	17,w	;volatile
  7805  0C42  0008               	return
  7806  0C43                     __end_of_SPI_Exchange8bit:	
  7807                           
  7808                           	psect	text23
  7809  0F1A                     __ptext23:	
  7810 ;; *************** function _atoi *****************
  7811 ;; Defined at:
  7812 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  s               1    wreg     PTR const unsigned char 
  7815 ;;		 -> main@buf(9), 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  s               1   13[COMMON] PTR const unsigned char 
  7818 ;;		 -> main@buf(9), 
  7819 ;;  a               2   11[COMMON] int 
  7820 ;;  sign            1   10[COMMON] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  2    6[COMMON] int 
  7823 ;; Registers used:
  7824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        8 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    1
  7837 ;; This function calls:
  7838 ;;		___wmul
  7839 ;;		_isdigit
  7840 ;; This function is called by:
  7841 ;;		_main
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           
  7846                           ;psect for function _atoi
  7847  0F1A                     _atoi:	
  7848                           
  7849                           ;incstack = 0
  7850                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7851                           ;atoi@s stored from wreg
  7852  0F1A  00FD               	movwf	atoi@s
  7853  0F1B                     l2305:	
  7854  0F1B  087D               	movf	atoi@s,w
  7855  0F1C  0086               	movwf	6
  7856  0F1D  0187               	clrf	7
  7857  0F1E  3020               	movlw	32
  7858  0F1F  0601               	xorwf	1,w
  7859  0F20  1D03               	btfss	3,2
  7860  0F21  2F27               	goto	l2307
  7861  0F22                     l2303:	
  7862  0F22  3001               	movlw	1
  7863  0F23  00F8               	movwf	??_atoi
  7864  0F24  0878               	movf	??_atoi,w
  7865  0F25  07FD               	addwf	atoi@s,f
  7866  0F26  2F1B               	goto	l2305
  7867  0F27                     l2307:	
  7868  0F27  087D               	movf	atoi@s,w
  7869  0F28  0086               	movwf	6
  7870  0F29  0187               	clrf	7
  7871  0F2A  3009               	movlw	9
  7872  0F2B  0601               	xorwf	1,w
  7873  0F2C  1903               	btfsc	3,2
  7874  0F2D  2F22               	goto	l2303
  7875  0F2E  01FB               	clrf	atoi@a
  7876  0F2F  01FC               	clrf	atoi@a+1
  7877  0F30  01FA               	clrf	atoi@sign
  7878  0F31  087D               	movf	atoi@s,w
  7879  0F32  0086               	movwf	6
  7880  0F33  0187               	clrf	7
  7881  0F34  302D               	movlw	45
  7882  0F35  0601               	xorwf	1,w
  7883  0F36  1D03               	btfss	3,2
  7884  0F37  2F3D               	goto	l2315
  7885  0F38  3001               	movlw	1
  7886  0F39  00F8               	movwf	??_atoi
  7887  0F3A  0878               	movf	??_atoi,w
  7888  0F3B  07FA               	addwf	atoi@sign,f
  7889  0F3C  2F44               	goto	l2321
  7890  0F3D                     l2315:	
  7891  0F3D  087D               	movf	atoi@s,w
  7892  0F3E  0086               	movwf	6
  7893  0F3F  0187               	clrf	7
  7894  0F40  302B               	movlw	43
  7895  0F41  0601               	xorwf	1,w
  7896  0F42  1D03               	btfss	3,2
  7897  0F43  2F48               	goto	l2323
  7898  0F44                     l2321:	
  7899  0F44  3001               	movlw	1
  7900  0F45  00F8               	movwf	??_atoi
  7901  0F46  0878               	movf	??_atoi,w
  7902  0F47  07FD               	addwf	atoi@s,f
  7903  0F48                     l2323:	
  7904  0F48  087D               	movf	atoi@s,w
  7905  0F49  0086               	movwf	6
  7906  0F4A  0187               	clrf	7
  7907  0F4B  0801               	movf	1,w
  7908  0F4C  318C  2463  318F   	fcall	_isdigit
  7909  0F4F  1C03               	btfss	3,0
  7910  0F50  2F6D               	goto	l2325
  7911  0F51  087C               	movf	atoi@a+1,w
  7912  0F52  00F1               	movwf	___wmul@multiplier+1
  7913  0F53  087B               	movf	atoi@a,w
  7914  0F54  00F0               	movwf	___wmul@multiplier
  7915  0F55  300A               	movlw	10
  7916  0F56  00F2               	movwf	___wmul@multiplicand
  7917  0F57  3000               	movlw	0
  7918  0F58  00F3               	movwf	___wmul@multiplicand+1
  7919  0F59  318C  24C5  318F   	fcall	___wmul
  7920  0F5C  087D               	movf	atoi@s,w
  7921  0F5D  0086               	movwf	6
  7922  0F5E  0187               	clrf	7
  7923  0F5F  0801               	movf	1,w
  7924  0F60  0770               	addwf	?___wmul,w
  7925  0F61  00F8               	movwf	??_atoi
  7926  0F62  0871               	movf	?___wmul+1,w
  7927  0F63  1803               	skipnc
  7928  0F64  0A71               	incf	?___wmul+1,w
  7929  0F65  00F9               	movwf	??_atoi+1
  7930  0F66  0878               	movf	??_atoi,w
  7931  0F67  3ED0               	addlw	208
  7932  0F68  00FB               	movwf	atoi@a
  7933  0F69  30FF               	movlw	255
  7934  0F6A  3D79               	addwfc	??_atoi+1,w
  7935  0F6B  00FC               	movwf	atoi@a+1
  7936  0F6C  2F44               	goto	l2321
  7937  0F6D                     l2325:	
  7938  0F6D  087A               	movf	atoi@sign,w
  7939  0F6E  1903               	btfsc	3,2
  7940  0F6F  2F7C               	goto	l2331
  7941  0F70  097B               	comf	atoi@a,w
  7942  0F71  00F8               	movwf	??_atoi
  7943  0F72  097C               	comf	atoi@a+1,w
  7944  0F73  00F9               	movwf	??_atoi+1
  7945  0F74  0AF8               	incf	??_atoi,f
  7946  0F75  1903               	skipnz
  7947  0F76  0AF9               	incf	??_atoi+1,f
  7948  0F77  0878               	movf	??_atoi,w
  7949  0F78  00F6               	movwf	?_atoi
  7950  0F79  0879               	movf	??_atoi+1,w
  7951  0F7A  00F7               	movwf	?_atoi+1
  7952  0F7B  0008               	return
  7953  0F7C                     l2331:	
  7954  0F7C  087C               	movf	atoi@a+1,w
  7955  0F7D  00F7               	movwf	?_atoi+1
  7956  0F7E  087B               	movf	atoi@a,w
  7957  0F7F  00F6               	movwf	?_atoi
  7958  0F80  0008               	return
  7959  0F81                     __end_of_atoi:	
  7960                           
  7961                           	psect	text24
  7962  0C63                     __ptext24:	
  7963 ;; *************** function _isdigit *****************
  7964 ;; Defined at:
  7965 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  c               1    wreg     unsigned char 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  c               1    1[COMMON] unsigned char 
  7970 ;; Return value:  Size  Location     Type
  7971 ;;		None               void
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;Total ram usage:        2 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		_printf
  7989 ;;		_atoi
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function _isdigit
  7995  0C63                     _isdigit:	
  7996                           
  7997                           ;incstack = 0
  7998                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7999                           ;isdigit@c stored from wreg
  8000  0C63  00F1               	movwf	isdigit@c
  8001  0C64  01F0               	clrf	_isdigit$786
  8002  0C65  303A               	movlw	58
  8003  0C66  0271               	subwf	isdigit@c,w
  8004  0C67  1803               	skipnc
  8005  0C68  2C6F               	goto	l1813
  8006  0C69  3030               	movlw	48
  8007  0C6A  0271               	subwf	isdigit@c,w
  8008  0C6B  1C03               	skipc
  8009  0C6C  2C6F               	goto	l1813
  8010  0C6D  01F0               	clrf	_isdigit$786
  8011  0C6E  0AF0               	incf	_isdigit$786,f
  8012  0C6F                     l1813:	
  8013  0C6F  0C70               	rrf	_isdigit$786,w
  8014  0C70  0008               	return
  8015  0C71                     __end_of_isdigit:	
  8016                           
  8017                           	psect	text25
  8018  0CC5                     __ptext25:	
  8019 ;; *************** function ___wmul *****************
  8020 ;; Defined at:
  8021 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  multiplier      2    0[COMMON] unsigned int 
  8024 ;;  multiplicand    2    2[COMMON] unsigned int 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  product         2    4[COMMON] unsigned int 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  2    0[COMMON] unsigned int 
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;Total ram usage:        6 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; This function calls:
  8043 ;;		Nothing
  8044 ;; This function is called by:
  8045 ;;		_printf
  8046 ;;		_atoi
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function ___wmul
  8052  0CC5                     ___wmul:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8056  0CC5  01F4               	clrf	___wmul@product
  8057  0CC6  01F5               	clrf	___wmul@product+1
  8058  0CC7                     l1819:	
  8059  0CC7  1C70               	btfss	___wmul@multiplier,0
  8060  0CC8  2CCD               	goto	l531
  8061  0CC9  0872               	movf	___wmul@multiplicand,w
  8062  0CCA  07F4               	addwf	___wmul@product,f
  8063  0CCB  0873               	movf	___wmul@multiplicand+1,w
  8064  0CCC  3DF5               	addwfc	___wmul@product+1,f
  8065  0CCD                     l531:	
  8066  0CCD  3001               	movlw	1
  8067  0CCE                     u1255:	
  8068  0CCE  35F2               	lslf	___wmul@multiplicand,f
  8069  0CCF  0DF3               	rlf	___wmul@multiplicand+1,f
  8070  0CD0  0B89               	decfsz	9,f
  8071  0CD1  2CCE               	goto	u1255
  8072  0CD2  3001               	movlw	1
  8073  0CD3                     u1265:	
  8074  0CD3  36F1               	lsrf	___wmul@multiplier+1,f
  8075  0CD4  0CF0               	rrf	___wmul@multiplier,f
  8076  0CD5  0B89               	decfsz	9,f
  8077  0CD6  2CD3               	goto	u1265
  8078  0CD7  0870               	movf	___wmul@multiplier,w
  8079  0CD8  0471               	iorwf	___wmul@multiplier+1,w
  8080  0CD9  1D03               	btfss	3,2
  8081  0CDA  2CC7               	goto	l1819
  8082  0CDB  0875               	movf	___wmul@product+1,w
  8083  0CDC  00F1               	movwf	?___wmul+1
  8084  0CDD  0874               	movf	___wmul@product,w
  8085  0CDE  00F0               	movwf	?___wmul
  8086  0CDF  0008               	return
  8087  0CE0                     __end_of___wmul:	
  8088                           
  8089                           	psect	text26
  8090  0C71                     __ptext26:	
  8091 ;; *************** function _SYSTEM_Initialize *****************
  8092 ;; Defined at:
  8093 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0, pclath, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;Total ram usage:        0 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    1
  8114 ;; This function calls:
  8115 ;;		_EUSART_Initialize
  8116 ;;		_OSCILLATOR_Initialize
  8117 ;;		_PIN_MANAGER_Initialize
  8118 ;;		_SPI_Initialize
  8119 ;;		_WDT_Initialize
  8120 ;; This function is called by:
  8121 ;;		_main
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _SYSTEM_Initialize
  8127  0C71                     _SYSTEM_Initialize:	
  8128                           
  8129                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8133  0C71  318C  2495  318C   	fcall	_PIN_MANAGER_Initialize
  8134                           
  8135                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8136  0C74  318C  2424  318C   	fcall	_OSCILLATOR_Initialize
  8137                           
  8138                           ;mcc.c: 75: WDT_Initialize();
  8139  0C77  3180  2004  318C   	fcall	_WDT_Initialize
  8140                           
  8141                           ;mcc.c: 76: SPI_Initialize();
  8142  0C7A  318C  242B  318C   	fcall	_SPI_Initialize
  8143                           
  8144                           ;mcc.c: 77: EUSART_Initialize();
  8145  0C7D  318C  244D         	fcall	_EUSART_Initialize
  8146  0C7F  0008               	return
  8147  0C80                     __end_of_SYSTEM_Initialize:	
  8148                           
  8149                           	psect	text27
  8150  0004                     __ptext27:	
  8151 ;; *************** function _WDT_Initialize *****************
  8152 ;; Defined at:
  8153 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; This function calls:
  8174 ;;		Nothing
  8175 ;; This function is called by:
  8176 ;;		_SYSTEM_Initialize
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function _WDT_Initialize
  8182  0004                     _WDT_Initialize:	
  8183                           
  8184                           ;mcc.c: 93: WDTCON = 0x16;
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _WDT_Initialize: [wreg]
  8188  0004  3016               	movlw	22
  8189  0005  0021               	movlb	1	; select bank1
  8190  0006  0097               	movwf	23	;volatile
  8191  0007  0008               	return
  8192  0008                     __end_of_WDT_Initialize:	
  8193                           
  8194                           	psect	text28
  8195  0C2B                     __ptext28:	
  8196 ;; *************** function _SPI_Initialize *****************
  8197 ;; Defined at:
  8198 ;;		line 63 in file "mcc_generated_files/spi.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		wreg, status,2
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;Total ram usage:        0 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; This function calls:
  8219 ;;		Nothing
  8220 ;; This function is called by:
  8221 ;;		_SYSTEM_Initialize
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           
  8226                           ;psect for function _SPI_Initialize
  8227  0C2B                     _SPI_Initialize:	
  8228                           
  8229                           ;spi.c: 68: SSP1STAT = 0x40;
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8233  0C2B  3040               	movlw	64
  8234  0C2C  0024               	movlb	4	; select bank4
  8235  0C2D  0094               	movwf	20	;volatile
  8236                           
  8237                           ;spi.c: 71: SSP1CON1 = 0x20;
  8238  0C2E  3020               	movlw	32
  8239  0C2F  0095               	movwf	21	;volatile
  8240                           
  8241                           ;spi.c: 74: SSP1ADD = 0x00;
  8242  0C30  0192               	clrf	18	;volatile
  8243  0C31  0008               	return
  8244  0C32                     __end_of_SPI_Initialize:	
  8245                           
  8246                           	psect	text29
  8247  0C95                     __ptext29:	
  8248 ;; *************** function _PIN_MANAGER_Initialize *****************
  8249 ;; Defined at:
  8250 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;		None
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;Total ram usage:        0 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; This function calls:
  8271 ;;		Nothing
  8272 ;; This function is called by:
  8273 ;;		_SYSTEM_Initialize
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function _PIN_MANAGER_Initialize
  8279  0C95                     _PIN_MANAGER_Initialize:	
  8280                           
  8281                           ;pin_manager.c: 57: LATA = 0x10;
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8285  0C95  3010               	movlw	16
  8286  0C96  0022               	movlb	2	; select bank2
  8287  0C97  008C               	movwf	12	;volatile
  8288                           
  8289                           ;pin_manager.c: 58: LATC = 0x00;
  8290  0C98  018E               	clrf	14	;volatile
  8291                           
  8292                           ;pin_manager.c: 63: TRISA = 0x2F;
  8293  0C99  302F               	movlw	47
  8294  0C9A  0021               	movlb	1	; select bank1
  8295  0C9B  008C               	movwf	12	;volatile
  8296                           
  8297                           ;pin_manager.c: 64: TRISC = 0x32;
  8298  0C9C  3032               	movlw	50
  8299  0C9D  008E               	movwf	14	;volatile
  8300                           
  8301                           ;pin_manager.c: 69: ANSELC = 0x00;
  8302  0C9E  0023               	movlb	3	; select bank3
  8303  0C9F  018E               	clrf	14	;volatile
  8304                           
  8305                           ;pin_manager.c: 70: ANSELA = 0x07;
  8306  0CA0  3007               	movlw	7
  8307  0CA1  008C               	movwf	12	;volatile
  8308                           
  8309                           ;pin_manager.c: 75: WPUA = 0x00;
  8310  0CA2  0024               	movlb	4	; select bank4
  8311  0CA3  018C               	clrf	12	;volatile
  8312                           
  8313                           ;pin_manager.c: 76: WPUC = 0x30;
  8314  0CA4  3030               	movlw	48
  8315  0CA5  008E               	movwf	14	;volatile
  8316                           
  8317                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8318  0CA6  0021               	movlb	1	; select bank1
  8319  0CA7  1395               	bcf	21,7	;volatile
  8320                           
  8321                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8322  0CA8  0022               	movlb	2	; select bank2
  8323  0CA9  019E               	clrf	30	;volatile
  8324                           
  8325                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8326  0CAA  019D               	clrf	29	;volatile
  8327  0CAB  0008               	return
  8328  0CAC                     __end_of_PIN_MANAGER_Initialize:	
  8329                           
  8330                           	psect	text30
  8331  0C24                     __ptext30:	
  8332 ;; *************** function _OSCILLATOR_Initialize *****************
  8333 ;; Defined at:
  8334 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		_SYSTEM_Initialize
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function _OSCILLATOR_Initialize
  8363  0C24                     _OSCILLATOR_Initialize:	
  8364                           
  8365                           ;mcc.c: 83: OSCCON = 0x60;
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8369  0C24  3060               	movlw	96
  8370  0C25  0021               	movlb	1	; select bank1
  8371  0C26  0099               	movwf	25	;volatile
  8372                           
  8373                           ;mcc.c: 85: OSCTUNE = 0x00;
  8374  0C27  0198               	clrf	24	;volatile
  8375                           
  8376                           ;mcc.c: 87: BORCON = 0x00;
  8377  0C28  0022               	movlb	2	; select bank2
  8378  0C29  0196               	clrf	22	;volatile
  8379  0C2A  0008               	return
  8380  0C2B                     __end_of_OSCILLATOR_Initialize:	
  8381                           
  8382                           	psect	text31
  8383  0C4D                     __ptext31:	
  8384 ;; *************** function _EUSART_Initialize *****************
  8385 ;; Defined at:
  8386 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      void 
  8393 ;; Registers used:
  8394 ;;		wreg, status,2
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;Total ram usage:        0 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; This function calls:
  8407 ;;		Nothing
  8408 ;; This function is called by:
  8409 ;;		_SYSTEM_Initialize
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function _EUSART_Initialize
  8415  0C4D                     _EUSART_Initialize:	
  8416                           
  8417                           ;eusart.c: 58: BAUDCON = 0x08;
  8418                           
  8419                           ;incstack = 0
  8420                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8421  0C4D  3008               	movlw	8
  8422  0C4E  0023               	movlb	3	; select bank3
  8423  0C4F  009F               	movwf	31	;volatile
  8424                           
  8425                           ;eusart.c: 61: RCSTA = 0x90;
  8426  0C50  3090               	movlw	144
  8427  0C51  009D               	movwf	29	;volatile
  8428                           
  8429                           ;eusart.c: 64: TXSTA = 0x24;
  8430  0C52  3024               	movlw	36
  8431  0C53  009E               	movwf	30	;volatile
  8432                           
  8433                           ;eusart.c: 67: SPBRGL = 0x33;
  8434  0C54  3033               	movlw	51
  8435  0C55  009B               	movwf	27	;volatile
  8436                           
  8437                           ;eusart.c: 70: SPBRGH = 0x00;
  8438  0C56  019C               	clrf	28	;volatile
  8439  0C57  0008               	return
  8440  0C58                     __end_of_EUSART_Initialize:	
  8441                           
  8442                           	psect	text32
  8443  0C43                     __ptext32:	
  8444 ;; *************** function _EUSART_Read *****************
  8445 ;; Defined at:
  8446 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;		None
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;		None
  8451 ;; Return value:  Size  Location     Type
  8452 ;;                  1    wreg      unsigned char 
  8453 ;; Registers used:
  8454 ;;		wreg
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;Total ram usage:        0 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; This function calls:
  8467 ;;		Nothing
  8468 ;; This function is called by:
  8469 ;;		_main
  8470 ;;		_getch
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           
  8475                           ;psect for function _EUSART_Read
  8476  0C43                     _EUSART_Read:	
  8477  0C43                     l51:	
  8478                           ;eusart.c: 78: {
  8479                           
  8480                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8481                           
  8482                           ;incstack = 0
  8483                           ; Regs used in _EUSART_Read: [wreg]
  8484                           
  8485  0C43  0020               	movlb	0	; select bank0
  8486  0C44  1E91               	btfss	17,5	;volatile
  8487  0C45  2C43               	goto	l51
  8488                           
  8489                           ;eusart.c: 79: }
  8490                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8491  0C46  0023               	movlb	3	; select bank3
  8492  0C47  1C9D               	btfss	29,1	;volatile
  8493  0C48  2C4B               	goto	l2211
  8494                           
  8495                           ;eusart.c: 83: {
  8496                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8497  0C49  121D               	bcf	29,4	;volatile
  8498                           
  8499                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8500  0C4A  161D               	bsf	29,4	;volatile
  8501  0C4B                     l2211:	
  8502                           
  8503                           ;eusart.c: 88: }
  8504                           ;eusart.c: 90: return RCREG;
  8505  0C4B  0819               	movf	25,w	;volatile
  8506  0C4C  0008               	return
  8507  0C4D                     __end_of_EUSART_Read:	
  8508  007E                     btemp	set	126	;btemp
  8509  007E                     wtemp0	set	126


Data Sizes:
    Strings     1036
    Constant    35
    Data        0
    BSS         23
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      75
    BANK1            80     19      35
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_56(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[19]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_55(CODE[5]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[2]), 
		 -> STR_51(CODE[16]), STR_50(CODE[16]), STR_49(CODE[2]), STR_48(CODE[16]), 
		 -> STR_47(CODE[16]), STR_46(CODE[16]), STR_45(CODE[2]), STR_44(CODE[12]), 
		 -> STR_43(CODE[12]), STR_42(CODE[12]), STR_41(CODE[2]), STR_40(CODE[12]), 
		 -> STR_39(CODE[12]), STR_38(CODE[5]), STR_37(CODE[13]), STR_36(CODE[13]), 
		 -> STR_35(CODE[18]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[20]), 
		 -> STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[14]), STR_28(CODE[15]), 
		 -> STR_27(CODE[16]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[23]), 
		 -> STR_23(CODE[21]), STR_22(CODE[15]), STR_21(CODE[22]), STR_20(CODE[44]), 
		 -> STR_19(CODE[57]), STR_18(CODE[26]), STR_17(CODE[21]), STR_16(CODE[38]), 
		 -> STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), STR_12(CODE[58]), 
		 -> STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), STR_7(CODE[36]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_abort->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  108915
                                             64 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   25699
                                             60 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14901
                                             34 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6203
                                             27 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        13    11      2   17148
                                             31 BANK0     13    11      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9035
                                             27 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   10966
                                             31 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8256
                                             27 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   10730
                                             31 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            3     3      0   10685
                                             31 BANK0      3     3      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8324
                                             27 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    21      8    5896
                                              2 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      23       7       43.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 17 06:19:52 2018

                    _SPI_Initialize 0C2B                         __CFG_CP$OFF 0000  
                  ?_receive_handler 003B                                  l51 0C43  
                                l58 0C33             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 142A                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C3F                                 l202 03E4  
                               l203 03E6                                 l312 02A4  
                               l315 02B4                                 l332 0E31  
                               l341 0E57                                 l422 06FB  
                               l343 0E5B                                 l335 0E42  
                               l336 0E3D                                 l417 06D9  
                               l426 0732                                 l338 0E53  
                               l531 0CCD                                 l339 0E4E  
                               l447 07ED                                 l383 05D9  
                               l395 06B3                                 l396 0623  
          __end_of_can_status_check 0E68                        __CFG_CPD$OFF 0000  
                               _abc 1424                                 _buf 00B3  
                               _sid 0064                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
             can_logging_mode@debug 0072                        ?_EUSART_Read 0070  
                              l2015 071D                                l2041 076E  
                              l2033 075B                                l2025 074E  
                              l2017 0726                                l2211 0C4B  
                              l2051 0789                                l2027 0751  
                              l2053 07B0                                l2061 07D7  
                              l2045 077B                                l2303 0F22  
                              l2063 07DB                                l2039 076A  
                              l2143 0E90                                l2071 0ED5  
                              l2321 0F44                                l2305 0F1B  
                              l2049 0783                                l2065 05B8  
                              l2081 0EE9                                l2331 0F7C  
                              l2323 0F48                                l2315 0F3D  
                              l2307 0F27                                l2083 0F07  
                              l2325 0F6D                                l2085 0F0E  
                              l2191 0153                                l2441 02C0  
                              l2435 02B0                                l2443 02C2  
                              l1813 0C6F                                l1901 0DFB  
                              l2429 029E                                l2621 04E3  
                              l2613 04C6                                l2605 04A1  
                              l2463 030F                                l2391 005D  
                              l2623 04EF                                l2631 058F  
                              l2527 03D6                                l1905 0E0C  
                              l1841 0D98                                l2465 02E5  
                              l2393 007A                                l2297 0E66  
                              l2289 0E61                                l2617 04DB  
                              l2553 043C                                l2633 0590  
                              l1819 0CC7                                l1907 0E10  
                              l1843 0DA4                                l1923 05DE  
                              l2483 035D                                l2467 0315  
                              l2619 04DF                                l2571 045F  
                              l2627 0564                                l2539 0405  
                              l1853 0DBF                                l1925 05E7  
                              l1917 05D4                                l2565 0453  
                              l2549 0426                                l2629 0586  
                              l1871 0D22                                l1951 0648  
                              l2495 0396                                l2399 0089  
                              l2591 0482                                l2583 0475  
                              l2575 0465                                l2559 0445  
                              l1849 0DB6                                l1865 0D0A  
                              l1961 0666                                l1945 0638  
                              l1937 0625                                l1929 05F4  
                              l1891 0DDB                                l1867 0D16  
                              l1875 0D2B                                l1971 0689  
                              l1955 0655                                l2579 046E  
                              l1893 0DEE                                l1965 0673  
                              l1949 063A                                l2589 0480  
                              l1887 0DCD                                l1895 0DF2  
                              l1967 067E                                l1959 0657  
                              l2599 048F                                l1897 0DF7  
                              l1977 0692                                l1989 06CD  
                              STR_1 1403                                STR_2 1410  
                              STR_3 1416                                STR_4 141F  
                              STR_5 129C                                STR_6 1427  
                              STR_7 11B9                                STR_8 127B  
                              STR_9 10E4                                u2025 0040  
                              u1315 0DA5                                u2035 004B  
                              u1325 0DAF                                _LATA 010C  
                              u1255 0CCE                                u1335 0DB7  
                              _LATC 010E                                u1265 0CD3  
                              u1365 0D0D                                u1525 064E  
                              u1295 0D9B                                u1615 0716  
                              u2184 03A0                                u1385 0D1C  
                              u2185 039F                                u1395 0D23  
                              u1655 0741                                u1824 0011  
                              u1585 06F4                                u1825 0010  
                              u1835 00D8                                u1785 0CF1  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 0F1A                                _main 03C3  
                              _mode 0062                     can_baudrate@bpr 0041  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 0C32  
                      _SPI_exchange 0C80                       __CFG_MCLRE$ON 0000  
                  can_send@data_buf 0043          __end_of_can_dump_registers 0276  
    __end_of_SPI_Exchange8bitBuffer 0E12                       ?_EUSART_Write 0070  
    __size_of_OSCILLATOR_Initialize 0007       __end_of_OSCILLATOR_Initialize 0C2B  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 1000                               STR_11 10AE  
                             STR_20 1117                               STR_12 103B  
                             STR_21 1227                               STR_13 116D  
                             STR_30 1390                               STR_22 1373  
                             STR_14 1143                               STR_31 1382  
                             STR_23 123D                               STR_15 11F7  
                             STR_40 12D8                               STR_32 1267  
                             STR_24 1210                               STR_16 1193  
                             STR_41 141F                               STR_33 12C2  
                             STR_25 12B1                               STR_17 1252  
                     __CFG_WDTE$OFF 0000                               STR_42 13C6  
                             STR_50 1305                               STR_34 12E4  
                             STR_26 12D3                               STR_18 11DD  
                             STR_43 13D2                               STR_51 1325  
                             STR_27 12F5                               STR_35 128E  
                             STR_19 1075                               STR_52 141F  
                             STR_44 13DE                               STR_36 13B9  
                             STR_28 1355                               STR_45 141F  
                             STR_37 13AC                               STR_29 139E  
                             STR_53 1364                               STR_54 1373  
                             STR_38 141C                               STR_46 1315  
                             STR_55 141C                               STR_39 12B6  
                             STR_47 1335                               STR_56 13FC  
                             STR_48 1345                               STR_49 141F  
                             STR_57 12A0                __size_of_can_set_sid 0024  
                   __end_of___lwdiv 0DC4                     __end_of___lwmod 0D30  
     can_status_check@bytes_written 005E                               _RCREG 0199  
                             _RCSTA 019D                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                     SPI_exchange@buf 007D  
                   SPI_exchange@len 0078                     __end_of_dpowers 13F4  
                    _WDT_Initialize 0004                     __end_of_max_idx 142F  
                   __end_of_isdigit 0C71                     __end_of_receive 016A  
                             atoi@a 007B                    can_baudrate@mask 0042  
                             atoi@s 007D                               _putch 0C19  
                             main@c 00B0                               main@n 00A6  
                             pclath 000A                               status 0003  
                             wtemp0 007E                       receive@rx_buf 0048  
                   ?_SPI_Initialize 0070                     __initialization 07EE  
             __size_of_can_baudrate 0033                        __end_of_atoi 0F81  
                      __end_of_main 05B3                       main@echo_back 00A5  
                    ??_EUSART_Write 0070              can_status_check@status 005F  
                            ??_atoi 0078                              ??_main 0060  
             can_set_mask@mask_sidh 004A               can_set_mask@mask_sidl 004B  
           can_logging_mode@verbose 0070                      __CFG_PLLEN$OFF 0000  
            __end_of_WDT_Initialize 0008                       can_set_mask@n 003F  
          __end_of_SPI_Exchange8bit 0C43               __size_of_can_ope_mode 0057  
             __size_of_can_set_mask 0080                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_init 1000  
                      _can_baudrate 0D5D                    __end_of_can_send 03C3  
                  receive_handler@i 0041                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0CC5                       _output_format 0066  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                         ??___lwmod 007C                              _printf 05B3  
                      _can_ope_mode 0E68                        _can_set_mask 0036  
                         ??_isdigit 0070                           ??_receive 0042  
                   ?_WDT_Initialize 0070           __size_of_can_logging_mode 000B  
                  __end_of_rxfnsidh 1410                    __end_of_txbnsidh 1424  
                  __end_of_rxmnsidh 142E                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 0C71           SPI_exchange@bytes_written 007C  
           __end_of__initialization 07FD              __size_of_read_register 0019  
                ?_SYSTEM_Initialize 0070                  __size_of_can_abort 002D  
                    __pcstackCOMMON 0070                 ??_SYSTEM_Initialize 0070  
                    can_send@status 0042                       __end_of_putch 0C1E  
                       receive@pbuf 0057                          __end_of_nm 142C  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 005C              can_abort@bytes_written 0041  
         __end_of_SYSTEM_Initialize 0C80                             ??_putch 0071  
                        __pbssBANK0 0062                          __pbssBANK1 00B3  
              __end_of_EUSART_Write 0C3A                    can_set_mask@mask 0040  
                        __pmaintext 03C3                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E                             ?_printf 0022  
                     _read_register 0CAC                           ?_can_init 003F  
                         ?_can_send 003B                  _can_dump_registers 016A  
          __size_of_receive_handler 005B                             _OSCTUNE 0098  
                 __end_of_can_abort 0D5D                             _SSP1ADD 0212  
                           _SSP1BUF 0211                 ?_can_dump_registers 0070  
                __size_of_txf_clear 002E                    ??_SPI_Initialize 0070  
                   __size_of___wmul 001B                ??_can_dump_registers 003B  
                     ??_can_set_sid 0072                             ___lwdiv 0D90  
                           ___lwmod 0D04                      ?_read_register 0070  
                           _handler 0069                             __ptext1 0E12  
                           __ptext2 0008                             __ptext3 00B6  
                           __ptext4 0EBF                             __ptext5 0036  
                           __ptext6 0276                             __ptext7 0C58  
                           __ptext8 0F81                             __ptext9 0CE0  
                   __size_of_printf 023B                   __end_of_hexpowers 13FC  
                           _dpowers 13EA                          ??_can_init 0041  
             _OSCILLATOR_Initialize 0C24                             _max_idx 142E  
                        ??_can_send 003C                             _isdigit 0C63  
                           _receive 00B6            ??_PIN_MANAGER_Initialize 0070  
                  _can_logging_mode 0C58                   ?_SPI_Exchange8bit 0070  
                           main@cmd 00B1              txf_clear@bytes_written 0023  
                           main@buf 00A7                             main@bpr 00A1  
        __size_of_SYSTEM_Initialize 000F                             main@idx 00B2  
                           main@sid 00A0                             clrloop0 0C1F  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070                      _operation_mode 0068  
                 _EUSART_Initialize 0C4D                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 003A  
                           printf@f 0022                   __end_of_txf_clear 0036  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_set_sid 0D04                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                   ??_receive_handler 003E  
         __end_of_EUSART_Initialize 0C58                         printf@width 0038  
          ??_SPI_Exchange8bitBuffer 0073                          main@status 00A2  
               receive_handler@pbuf 003C                     ??_read_register 0020  
                    __end_of___wmul 0CE0                        _EUSART_Write 0C32  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 07EE  
               start_initialization 07EE     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 1427                    _can_set_mask$492 0047  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         can_baudrate@bytes_written 0043           __size_of_can_status_check 0056  
         can_ope_mode@bytes_written 003D                       ?_SPI_exchange 0078  
                          ??___wmul 0074                       txf_clear@mask 0022  
                       _can_set_sid 0CE0                            ??_printf 002A  
                         ___latbits 0002                       __pcstackBANK0 0020  
                     __pcstackBANK1 00A0                 can_set_sid@can_node 0070  
                 read_register@addr 0021                   __size_of_can_init 007F  
                 __size_of_can_send 014D                          receive@dlc 005A  
     SPI_Exchange8bitBuffer@dataOut 0072                          receive@sid 0058  
                         _can_abort 0D30          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0C4D                           __pnvBANK0 0069  
                   can_set_mask@cmd 0049                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0C95                     can_set_sid@sidh 0075  
                   can_set_sid@sidl 0076            __end_of_can_logging_mode 0C63  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                            ?_receive 0070  
                         can_send@i 0044                           can_send@n 0045  
                         _hexpowers 13F4                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                          ?_can_abort 0070  
                     ?_can_baudrate 0070                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
                         clear_ram0 0C1E                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214         __size_of_can_dump_registers 010C  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
                     ?_can_set_mask 003F              _SPI_Exchange8bitBuffer 0DC4  
                   _receive_handler 0EBF                          printf@flag 0037  
                        printf@prec 002F                           _txf_clear 0008  
                receive_handler@dlc 003D                  receive_handler@sid 003B  
                       _EUSART_Read 0C43                      ??_can_baudrate 003F  
                       can_send@dlc 003B                         can_send@len 0040  
                  _can_status_check 0E12             __size_of_SPI_Initialize 0007  
           ??_OSCILLATOR_Initialize 0070                      ??_can_ope_mode 003B  
                  __size_of___lwdiv 0034                    __size_of___lwmod 002C  
                    ??_can_set_mask 0041        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$786 0070                can_ope_mode@ope_mode 003E  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_init 0F81  
                          _can_send 0276                          txf_clear@n 0024  
                        ?_txf_clear 0070                __end_of_SPI_exchange 0C95  
                  __size_of_isdigit 000E                    __size_of_receive 00B4  
                   ___lwdiv@divisor 0070                     ___lwdiv@counter 0077  
                          __ptext10 016A                            __ptext11 0CAC  
                          __ptext20 0C80                            __ptext12 0D5D  
                          __ptext21 0DC4                            __ptext13 0D30  
                          __ptext30 0C24                            __ptext22 0C3A  
                          __ptext14 0E68                            __ptext31 0C4D  
                          __ptext23 0F1A                            __ptext15 05B3  
                          __ptext32 0C43                            __ptext24 0C63  
                          __ptext16 0C19                            __ptext25 0CC5  
                          __ptext17 0C32                            __ptext26 0C71  
                          __ptext18 0D04                            __ptext27 0004  
                          __ptext19 0D90                            __ptext28 0C2B  
                          __ptext29 0C95                        _SSP1CON1bits 0215  
                       ??_can_abort 003F                       __size_of_atoi 0067  
                     __size_of_main 01F0                            atoi@sign 007A  
           __end_of_receive_handler 0F1A                        ?_can_set_sid 0070  
                         printf@idx 002E                           printf@len 0032  
                         printf@val 0035                        _SSP1STATbits 0214  
                          main@mask 00A3                            _rxfnsidh 140A  
             __end_of_read_register 0CC5                            _txbnsidh 1421  
                          _rxmnsidh 142C                      __pstringtext10 103B  
                    __pstringtext11 1075                      __pstringtext20 11F7  
                    __pstringtext12 10AE                      __pstringtext21 1210  
                    __pstringtext13 10E4                      __pstringtext30 12C2  
                    __pstringtext22 1227                      __pstringtext14 1117  
                    __pstringtext31 12D3                      __pstringtext23 123D  
                    __pstringtext15 1143                      __pstringtext40 1364  
                    __pstringtext32 12E4                      __pstringtext24 1252  
                    __pstringtext16 116D                      __pstringtext41 1373  
                    __pstringtext33 12F5                      __pstringtext25 1267  
                    __pstringtext17 1193                      __pstringtext50 13FC  
                    __pstringtext42 1382                      __pstringtext34 1305  
                    __pstringtext26 127B                      __pstringtext18 11B9  
                    __pstringtext51 1403                      __pstringtext43 1390  
                    __pstringtext35 1315                      __pstringtext27 128E  
                    __pstringtext19 11DD                      __pstringtext52 1410  
                    __pstringtext44 139E                      __pstringtext36 1325  
                    __pstringtext28 12A0                      __pstringtext53 1416  
                    __pstringtext45 13AC                      __pstringtext37 1335  
                    __pstringtext29 12B1                      __pstringtext54 141C  
                    __pstringtext46 13B9                      __pstringtext38 1345  
                    __pstringtext55 1427                      __pstringtext47 13C6  
                    __pstringtext39 1355                      __pstringtext56 0000  
                    __pstringtext48 13D2                      __pstringtext49 13DE  
                          isdigit@c 0071             __size_of_WDT_Initialize 0004  
                          receive@n 005B                    ___lwmod@dividend 007A  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                   receive@bytes_read 0047  
                  _SPI_Exchange8bit 0C3A               can_send@bytes_written 0041  
                          printf@ap 0034                            printf@cp 0030  
                 ?_can_logging_mode 0070             can_init@receive_handler 003F  
                ??_can_logging_mode 0071                __end_of_can_baudrate 0D90  
                     __pstringtext1 13EA                       __pstringtext2 13F4  
                     __pstringtext3 140A                       __pstringtext4 1421  
                     __pstringtext5 1424                       __pstringtext6 142A  
                     __pstringtext7 142C                       __pstringtext8 142E  
                     __pstringtext9 1000                         ??_txf_clear 0020  
                   ___lwmod@divisor 0078                     ___lwmod@counter 007D  
                EUSART_Write@txData 0070      __end_of_PIN_MANAGER_Initialize 0CAC  
              __end_of_can_ope_mode 0EBF                __end_of_can_set_mask 00B6  
