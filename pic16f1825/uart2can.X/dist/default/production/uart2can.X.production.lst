

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 17:19:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	stringtext13,global,class=STRCODE,delta=2
    17                           	psect	stringtext14,global,class=STRCODE,delta=2
    18                           	psect	stringtext15,global,class=STRCODE,delta=2
    19                           	psect	stringtext16,global,class=STRCODE,delta=2
    20                           	psect	stringtext17,global,class=STRCODE,delta=2
    21                           	psect	stringtext18,global,class=STRCODE,delta=2
    22                           	psect	stringtext19,global,class=STRCODE,delta=2
    23                           	psect	stringtext20,global,class=STRCODE,delta=2
    24                           	psect	stringtext21,global,class=STRCODE,delta=2
    25                           	psect	stringtext22,global,class=STRCODE,delta=2
    26                           	psect	stringtext23,global,class=STRCODE,delta=2
    27                           	psect	stringtext24,global,class=STRCODE,delta=2
    28                           	psect	stringtext25,global,class=STRCODE,delta=2
    29                           	psect	stringtext26,global,class=STRCODE,delta=2
    30                           	psect	stringtext27,global,class=STRCODE,delta=2
    31                           	psect	stringtext28,global,class=STRCODE,delta=2
    32                           	psect	stringtext29,global,class=STRCODE,delta=2
    33                           	psect	stringtext30,global,class=STRCODE,delta=2
    34                           	psect	stringtext31,global,class=STRCODE,delta=2
    35                           	psect	stringtext32,global,class=STRCODE,delta=2
    36                           	psect	stringtext33,global,class=STRCODE,delta=2
    37                           	psect	stringtext34,global,class=STRCODE,delta=2
    38                           	psect	stringtext35,global,class=STRCODE,delta=2
    39                           	psect	stringtext36,global,class=STRCODE,delta=2
    40                           	psect	stringtext37,global,class=STRCODE,delta=2
    41                           	psect	stringtext38,global,class=STRCODE,delta=2
    42                           	psect	stringtext39,global,class=STRCODE,delta=2
    43                           	psect	stringtext40,global,class=STRCODE,delta=2
    44                           	psect	stringtext41,global,class=STRCODE,delta=2
    45                           	psect	stringtext42,global,class=STRCODE,delta=2
    46                           	psect	stringtext43,global,class=STRCODE,delta=2
    47                           	psect	stringtext44,global,class=STRCODE,delta=2
    48                           	psect	stringtext45,global,class=STRCODE,delta=2
    49                           	psect	stringtext46,global,class=STRCODE,delta=2
    50                           	psect	stringtext47,global,class=STRCODE,delta=2
    51                           	psect	stringtext48,global,class=STRCODE,delta=2
    52                           	psect	stringtext49,global,class=STRCODE,delta=2
    53                           	psect	stringtext50,global,class=STRCODE,delta=2
    54                           	psect	stringtext51,global,class=STRCODE,delta=2
    55                           	psect	stringtext52,global,class=STRCODE,delta=2
    56                           	psect	stringtext53,global,class=STRCODE,delta=2
    57                           	psect	stringtext54,global,class=STRCODE,delta=2
    58                           	psect	stringtext55,global,class=STRCODE,delta=2
    59                           	psect	stringtext56,global,class=STRCODE,delta=2
    60                           	psect	stringtext57,global,class=STRCODE,delta=2
    61                           	psect	stringtext58,global,class=STRCODE,delta=2
    62                           	psect	stringtext59,global,class=STRCODE,delta=2
    63                           	psect	cinit,global,class=CODE,merge=1,delta=2
    64                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    65                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	clrtext,global,class=CODE,delta=2
    67                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    68                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    69                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    70                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    71                           	psect	text1,local,class=CODE,merge=1,delta=2
    72                           	psect	text2,local,class=CODE,merge=1,delta=2
    73                           	psect	text3,local,class=CODE,merge=1,delta=2
    74                           	psect	text4,local,class=CODE,merge=1,delta=2
    75                           	psect	text5,local,class=CODE,merge=1,delta=2
    76                           	psect	text6,local,class=CODE,merge=1,delta=2
    77                           	psect	text7,local,class=CODE,merge=1,delta=2
    78                           	psect	text8,local,class=CODE,merge=1,delta=2
    79                           	psect	text9,local,class=CODE,merge=1,delta=2
    80                           	psect	text10,local,class=CODE,merge=1,delta=2
    81                           	psect	text11,local,class=CODE,merge=1,delta=2
    82                           	psect	text12,local,class=CODE,merge=1,delta=2
    83                           	psect	text13,local,class=CODE,merge=1,delta=2
    84                           	psect	text14,local,class=CODE,merge=1,delta=2
    85                           	psect	text15,local,class=CODE,merge=1,delta=2
    86                           	psect	text16,local,class=CODE,merge=1,delta=2
    87                           	psect	text17,local,class=CODE,merge=1,delta=2
    88                           	psect	text18,local,class=CODE,merge=1,delta=2
    89                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text21,local,class=CODE,merge=1,delta=2
    92                           	psect	text22,local,class=CODE,merge=1,delta=2
    93                           	psect	text23,local,class=CODE,merge=1,delta=2
    94                           	psect	text24,local,class=CODE,merge=1,delta=2
    95                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text28,local,class=CODE,merge=1,delta=2
    99                           	psect	text29,local,class=CODE,merge=1,delta=2
   100                           	psect	text30,local,class=CODE,merge=1,delta=2
   101                           	psect	text31,local,class=CODE,merge=1,delta=2
   102                           	psect	text32,local,class=CODE,merge=1,delta=2
   103                           	psect	text33,local,class=CODE,merge=1,delta=2
   104                           	psect	text34,local,class=CODE,merge=1,delta=2
   105                           	dabs	1,0x7E,2
   106  0000                     
   107                           ; Version 1.45
   108                           ; Generated 16/11/2017 GMT
   109                           ; 
   110                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   111                           ; All rights reserved.
   112                           ; 
   113                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   114                           ; 
   115                           ; Redistribution and use in source and binary forms, with or without modification, are
   116                           ; permitted provided that the following conditions are met:
   117                           ; 
   118                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   119                           ;        conditions and the following disclaimer.
   120                           ; 
   121                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   122                           ;        of conditions and the following disclaimer in the documentation and/or other
   123                           ;        materials provided with the distribution.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC16F1825 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000E                     	;# 
   155  0011                     	;# 
   156  0012                     	;# 
   157  0013                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  008C                     	;# 
   170  008E                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0093                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0097                     	;# 
   177  0098                     	;# 
   178  0099                     	;# 
   179  009A                     	;# 
   180  009B                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  010C                     	;# 
   186  010E                     	;# 
   187  0111                     	;# 
   188  0112                     	;# 
   189  0113                     	;# 
   190  0114                     	;# 
   191  0115                     	;# 
   192  0116                     	;# 
   193  0117                     	;# 
   194  0118                     	;# 
   195  0119                     	;# 
   196  011A                     	;# 
   197  011B                     	;# 
   198  011D                     	;# 
   199  011E                     	;# 
   200  018C                     	;# 
   201  018E                     	;# 
   202  0191                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0193                     	;# 
   206  0193                     	;# 
   207  0193                     	;# 
   208  0194                     	;# 
   209  0195                     	;# 
   210  0196                     	;# 
   211  0199                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019F                     	;# 
   219  020C                     	;# 
   220  020E                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0298                     	;# 
   245  0298                     	;# 
   246  0299                     	;# 
   247  029A                     	;# 
   248  029B                     	;# 
   249  029C                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  0311                     	;# 
   253  0311                     	;# 
   254  0312                     	;# 
   255  0313                     	;# 
   256  0318                     	;# 
   257  0318                     	;# 
   258  0319                     	;# 
   259  031A                     	;# 
   260  038C                     	;# 
   261  038E                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0415                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  041C                     	;# 
   274  041D                     	;# 
   275  041E                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000E                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  008C                     	;# 
   316  008E                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0095                     	;# 
   321  0096                     	;# 
   322  0097                     	;# 
   323  0098                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010E                     	;# 
   333  0111                     	;# 
   334  0112                     	;# 
   335  0113                     	;# 
   336  0114                     	;# 
   337  0115                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  0118                     	;# 
   341  0119                     	;# 
   342  011A                     	;# 
   343  011B                     	;# 
   344  011D                     	;# 
   345  011E                     	;# 
   346  018C                     	;# 
   347  018E                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019D                     	;# 
   363  019E                     	;# 
   364  019F                     	;# 
   365  020C                     	;# 
   366  020E                     	;# 
   367  0211                     	;# 
   368  0211                     	;# 
   369  0212                     	;# 
   370  0212                     	;# 
   371  0213                     	;# 
   372  0213                     	;# 
   373  0214                     	;# 
   374  0214                     	;# 
   375  0215                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0216                     	;# 
   379  0216                     	;# 
   380  0217                     	;# 
   381  0217                     	;# 
   382  0291                     	;# 
   383  0291                     	;# 
   384  0292                     	;# 
   385  0293                     	;# 
   386  0294                     	;# 
   387  0295                     	;# 
   388  0295                     	;# 
   389  0296                     	;# 
   390  0298                     	;# 
   391  0298                     	;# 
   392  0299                     	;# 
   393  029A                     	;# 
   394  029B                     	;# 
   395  029C                     	;# 
   396  029D                     	;# 
   397  029E                     	;# 
   398  0311                     	;# 
   399  0311                     	;# 
   400  0312                     	;# 
   401  0313                     	;# 
   402  0318                     	;# 
   403  0318                     	;# 
   404  0319                     	;# 
   405  031A                     	;# 
   406  038C                     	;# 
   407  038E                     	;# 
   408  0391                     	;# 
   409  0392                     	;# 
   410  0393                     	;# 
   411  039A                     	;# 
   412  039C                     	;# 
   413  039D                     	;# 
   414  039E                     	;# 
   415  039F                     	;# 
   416  0415                     	;# 
   417  0416                     	;# 
   418  0417                     	;# 
   419  041C                     	;# 
   420  041D                     	;# 
   421  041E                     	;# 
   422  0FE4                     	;# 
   423  0FE5                     	;# 
   424  0FE6                     	;# 
   425  0FE7                     	;# 
   426  0FE8                     	;# 
   427  0FE9                     	;# 
   428  0FEA                     	;# 
   429  0FEB                     	;# 
   430  0FED                     	;# 
   431  0FEE                     	;# 
   432  0FEF                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000E                     	;# 
   447  0011                     	;# 
   448  0012                     	;# 
   449  0013                     	;# 
   450  0015                     	;# 
   451  0016                     	;# 
   452  0016                     	;# 
   453  0017                     	;# 
   454  0018                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001E                     	;# 
   460  001F                     	;# 
   461  008C                     	;# 
   462  008E                     	;# 
   463  0091                     	;# 
   464  0092                     	;# 
   465  0093                     	;# 
   466  0095                     	;# 
   467  0096                     	;# 
   468  0097                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009A                     	;# 
   472  009B                     	;# 
   473  009B                     	;# 
   474  009C                     	;# 
   475  009D                     	;# 
   476  009E                     	;# 
   477  010C                     	;# 
   478  010E                     	;# 
   479  0111                     	;# 
   480  0112                     	;# 
   481  0113                     	;# 
   482  0114                     	;# 
   483  0115                     	;# 
   484  0116                     	;# 
   485  0117                     	;# 
   486  0118                     	;# 
   487  0119                     	;# 
   488  011A                     	;# 
   489  011B                     	;# 
   490  011D                     	;# 
   491  011E                     	;# 
   492  018C                     	;# 
   493  018E                     	;# 
   494  0191                     	;# 
   495  0191                     	;# 
   496  0192                     	;# 
   497  0193                     	;# 
   498  0193                     	;# 
   499  0193                     	;# 
   500  0194                     	;# 
   501  0195                     	;# 
   502  0196                     	;# 
   503  0199                     	;# 
   504  019A                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019C                     	;# 
   508  019D                     	;# 
   509  019E                     	;# 
   510  019F                     	;# 
   511  020C                     	;# 
   512  020E                     	;# 
   513  0211                     	;# 
   514  0211                     	;# 
   515  0212                     	;# 
   516  0212                     	;# 
   517  0213                     	;# 
   518  0213                     	;# 
   519  0214                     	;# 
   520  0214                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0215                     	;# 
   524  0216                     	;# 
   525  0216                     	;# 
   526  0217                     	;# 
   527  0217                     	;# 
   528  0291                     	;# 
   529  0291                     	;# 
   530  0292                     	;# 
   531  0293                     	;# 
   532  0294                     	;# 
   533  0295                     	;# 
   534  0295                     	;# 
   535  0296                     	;# 
   536  0298                     	;# 
   537  0298                     	;# 
   538  0299                     	;# 
   539  029A                     	;# 
   540  029B                     	;# 
   541  029C                     	;# 
   542  029D                     	;# 
   543  029E                     	;# 
   544  0311                     	;# 
   545  0311                     	;# 
   546  0312                     	;# 
   547  0313                     	;# 
   548  0318                     	;# 
   549  0318                     	;# 
   550  0319                     	;# 
   551  031A                     	;# 
   552  038C                     	;# 
   553  038E                     	;# 
   554  0391                     	;# 
   555  0392                     	;# 
   556  0393                     	;# 
   557  039A                     	;# 
   558  039C                     	;# 
   559  039D                     	;# 
   560  039E                     	;# 
   561  039F                     	;# 
   562  0415                     	;# 
   563  0416                     	;# 
   564  0417                     	;# 
   565  041C                     	;# 
   566  041D                     	;# 
   567  041E                     	;# 
   568  0FE4                     	;# 
   569  0FE5                     	;# 
   570  0FE6                     	;# 
   571  0FE7                     	;# 
   572  0FE8                     	;# 
   573  0FE9                     	;# 
   574  0FEA                     	;# 
   575  0FEB                     	;# 
   576  0FED                     	;# 
   577  0FEE                     	;# 
   578  0FEF                     	;# 
   579  0000                     	;# 
   580  0001                     	;# 
   581  0002                     	;# 
   582  0003                     	;# 
   583  0004                     	;# 
   584  0005                     	;# 
   585  0006                     	;# 
   586  0007                     	;# 
   587  0008                     	;# 
   588  0009                     	;# 
   589  000A                     	;# 
   590  000B                     	;# 
   591  000C                     	;# 
   592  000E                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0013                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001E                     	;# 
   606  001F                     	;# 
   607  008C                     	;# 
   608  008E                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0097                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  010C                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011A                     	;# 
   635  011B                     	;# 
   636  011D                     	;# 
   637  011E                     	;# 
   638  018C                     	;# 
   639  018E                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020C                     	;# 
   658  020E                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0294                     	;# 
   679  0295                     	;# 
   680  0295                     	;# 
   681  0296                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029B                     	;# 
   687  029C                     	;# 
   688  029D                     	;# 
   689  029E                     	;# 
   690  0311                     	;# 
   691  0311                     	;# 
   692  0312                     	;# 
   693  0313                     	;# 
   694  0318                     	;# 
   695  0318                     	;# 
   696  0319                     	;# 
   697  031A                     	;# 
   698  038C                     	;# 
   699  038E                     	;# 
   700  0391                     	;# 
   701  0392                     	;# 
   702  0393                     	;# 
   703  039A                     	;# 
   704  039C                     	;# 
   705  039D                     	;# 
   706  039E                     	;# 
   707  039F                     	;# 
   708  0415                     	;# 
   709  0416                     	;# 
   710  0417                     	;# 
   711  041C                     	;# 
   712  041D                     	;# 
   713  041E                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000E                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0013                     	;# 
   742  0015                     	;# 
   743  0016                     	;# 
   744  0016                     	;# 
   745  0017                     	;# 
   746  0018                     	;# 
   747  0019                     	;# 
   748  001A                     	;# 
   749  001B                     	;# 
   750  001C                     	;# 
   751  001E                     	;# 
   752  001F                     	;# 
   753  008C                     	;# 
   754  008E                     	;# 
   755  0091                     	;# 
   756  0092                     	;# 
   757  0093                     	;# 
   758  0095                     	;# 
   759  0096                     	;# 
   760  0097                     	;# 
   761  0098                     	;# 
   762  0099                     	;# 
   763  009A                     	;# 
   764  009B                     	;# 
   765  009B                     	;# 
   766  009C                     	;# 
   767  009D                     	;# 
   768  009E                     	;# 
   769  010C                     	;# 
   770  010E                     	;# 
   771  0111                     	;# 
   772  0112                     	;# 
   773  0113                     	;# 
   774  0114                     	;# 
   775  0115                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  0118                     	;# 
   779  0119                     	;# 
   780  011A                     	;# 
   781  011B                     	;# 
   782  011D                     	;# 
   783  011E                     	;# 
   784  018C                     	;# 
   785  018E                     	;# 
   786  0191                     	;# 
   787  0191                     	;# 
   788  0192                     	;# 
   789  0193                     	;# 
   790  0193                     	;# 
   791  0193                     	;# 
   792  0194                     	;# 
   793  0195                     	;# 
   794  0196                     	;# 
   795  0199                     	;# 
   796  019A                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019D                     	;# 
   801  019E                     	;# 
   802  019F                     	;# 
   803  020C                     	;# 
   804  020E                     	;# 
   805  0211                     	;# 
   806  0211                     	;# 
   807  0212                     	;# 
   808  0212                     	;# 
   809  0213                     	;# 
   810  0213                     	;# 
   811  0214                     	;# 
   812  0214                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0216                     	;# 
   817  0216                     	;# 
   818  0217                     	;# 
   819  0217                     	;# 
   820  0291                     	;# 
   821  0291                     	;# 
   822  0292                     	;# 
   823  0293                     	;# 
   824  0294                     	;# 
   825  0295                     	;# 
   826  0295                     	;# 
   827  0296                     	;# 
   828  0298                     	;# 
   829  0298                     	;# 
   830  0299                     	;# 
   831  029A                     	;# 
   832  029B                     	;# 
   833  029C                     	;# 
   834  029D                     	;# 
   835  029E                     	;# 
   836  0311                     	;# 
   837  0311                     	;# 
   838  0312                     	;# 
   839  0313                     	;# 
   840  0318                     	;# 
   841  0318                     	;# 
   842  0319                     	;# 
   843  031A                     	;# 
   844  038C                     	;# 
   845  038E                     	;# 
   846  0391                     	;# 
   847  0392                     	;# 
   848  0393                     	;# 
   849  039A                     	;# 
   850  039C                     	;# 
   851  039D                     	;# 
   852  039E                     	;# 
   853  039F                     	;# 
   854  0415                     	;# 
   855  0416                     	;# 
   856  0417                     	;# 
   857  041C                     	;# 
   858  041D                     	;# 
   859  041E                     	;# 
   860  0FE4                     	;# 
   861  0FE5                     	;# 
   862  0FE6                     	;# 
   863  0FE7                     	;# 
   864  0FE8                     	;# 
   865  0FE9                     	;# 
   866  0FEA                     	;# 
   867  0FEB                     	;# 
   868  0FED                     	;# 
   869  0FEE                     	;# 
   870  0FEF                     	;# 
   871  0000                     	;# 
   872  0001                     	;# 
   873  0002                     	;# 
   874  0003                     	;# 
   875  0004                     	;# 
   876  0005                     	;# 
   877  0006                     	;# 
   878  0007                     	;# 
   879  0008                     	;# 
   880  0009                     	;# 
   881  000A                     	;# 
   882  000B                     	;# 
   883  000C                     	;# 
   884  000E                     	;# 
   885  0011                     	;# 
   886  0012                     	;# 
   887  0013                     	;# 
   888  0015                     	;# 
   889  0016                     	;# 
   890  0016                     	;# 
   891  0017                     	;# 
   892  0018                     	;# 
   893  0019                     	;# 
   894  001A                     	;# 
   895  001B                     	;# 
   896  001C                     	;# 
   897  001E                     	;# 
   898  001F                     	;# 
   899  008C                     	;# 
   900  008E                     	;# 
   901  0091                     	;# 
   902  0092                     	;# 
   903  0093                     	;# 
   904  0095                     	;# 
   905  0096                     	;# 
   906  0097                     	;# 
   907  0098                     	;# 
   908  0099                     	;# 
   909  009A                     	;# 
   910  009B                     	;# 
   911  009B                     	;# 
   912  009C                     	;# 
   913  009D                     	;# 
   914  009E                     	;# 
   915  010C                     	;# 
   916  010E                     	;# 
   917  0111                     	;# 
   918  0112                     	;# 
   919  0113                     	;# 
   920  0114                     	;# 
   921  0115                     	;# 
   922  0116                     	;# 
   923  0117                     	;# 
   924  0118                     	;# 
   925  0119                     	;# 
   926  011A                     	;# 
   927  011B                     	;# 
   928  011D                     	;# 
   929  011E                     	;# 
   930  018C                     	;# 
   931  018E                     	;# 
   932  0191                     	;# 
   933  0191                     	;# 
   934  0192                     	;# 
   935  0193                     	;# 
   936  0193                     	;# 
   937  0193                     	;# 
   938  0194                     	;# 
   939  0195                     	;# 
   940  0196                     	;# 
   941  0199                     	;# 
   942  019A                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019C                     	;# 
   946  019D                     	;# 
   947  019E                     	;# 
   948  019F                     	;# 
   949  020C                     	;# 
   950  020E                     	;# 
   951  0211                     	;# 
   952  0211                     	;# 
   953  0212                     	;# 
   954  0212                     	;# 
   955  0213                     	;# 
   956  0213                     	;# 
   957  0214                     	;# 
   958  0214                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0216                     	;# 
   963  0216                     	;# 
   964  0217                     	;# 
   965  0217                     	;# 
   966  0291                     	;# 
   967  0291                     	;# 
   968  0292                     	;# 
   969  0293                     	;# 
   970  0294                     	;# 
   971  0295                     	;# 
   972  0295                     	;# 
   973  0296                     	;# 
   974  0298                     	;# 
   975  0298                     	;# 
   976  0299                     	;# 
   977  029A                     	;# 
   978  029B                     	;# 
   979  029C                     	;# 
   980  029D                     	;# 
   981  029E                     	;# 
   982  0311                     	;# 
   983  0311                     	;# 
   984  0312                     	;# 
   985  0313                     	;# 
   986  0318                     	;# 
   987  0318                     	;# 
   988  0319                     	;# 
   989  031A                     	;# 
   990  038C                     	;# 
   991  038E                     	;# 
   992  0391                     	;# 
   993  0392                     	;# 
   994  0393                     	;# 
   995  039A                     	;# 
   996  039C                     	;# 
   997  039D                     	;# 
   998  039E                     	;# 
   999  039F                     	;# 
  1000  0415                     	;# 
  1001  0416                     	;# 
  1002  0417                     	;# 
  1003  041C                     	;# 
  1004  041D                     	;# 
  1005  041E                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000E                     	;# 
  1031  0011                     	;# 
  1032  0012                     	;# 
  1033  0013                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001B                     	;# 
  1042  001C                     	;# 
  1043  001E                     	;# 
  1044  001F                     	;# 
  1045  008C                     	;# 
  1046  008E                     	;# 
  1047  0091                     	;# 
  1048  0092                     	;# 
  1049  0093                     	;# 
  1050  0095                     	;# 
  1051  0096                     	;# 
  1052  0097                     	;# 
  1053  0098                     	;# 
  1054  0099                     	;# 
  1055  009A                     	;# 
  1056  009B                     	;# 
  1057  009B                     	;# 
  1058  009C                     	;# 
  1059  009D                     	;# 
  1060  009E                     	;# 
  1061  010C                     	;# 
  1062  010E                     	;# 
  1063  0111                     	;# 
  1064  0112                     	;# 
  1065  0113                     	;# 
  1066  0114                     	;# 
  1067  0115                     	;# 
  1068  0116                     	;# 
  1069  0117                     	;# 
  1070  0118                     	;# 
  1071  0119                     	;# 
  1072  011A                     	;# 
  1073  011B                     	;# 
  1074  011D                     	;# 
  1075  011E                     	;# 
  1076  018C                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0193                     	;# 
  1084  0194                     	;# 
  1085  0195                     	;# 
  1086  0196                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019F                     	;# 
  1095  020C                     	;# 
  1096  020E                     	;# 
  1097  0211                     	;# 
  1098  0211                     	;# 
  1099  0212                     	;# 
  1100  0212                     	;# 
  1101  0213                     	;# 
  1102  0213                     	;# 
  1103  0214                     	;# 
  1104  0214                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0216                     	;# 
  1109  0216                     	;# 
  1110  0217                     	;# 
  1111  0217                     	;# 
  1112  0291                     	;# 
  1113  0291                     	;# 
  1114  0292                     	;# 
  1115  0293                     	;# 
  1116  0294                     	;# 
  1117  0295                     	;# 
  1118  0295                     	;# 
  1119  0296                     	;# 
  1120  0298                     	;# 
  1121  0298                     	;# 
  1122  0299                     	;# 
  1123  029A                     	;# 
  1124  029B                     	;# 
  1125  029C                     	;# 
  1126  029D                     	;# 
  1127  029E                     	;# 
  1128  0311                     	;# 
  1129  0311                     	;# 
  1130  0312                     	;# 
  1131  0313                     	;# 
  1132  0318                     	;# 
  1133  0318                     	;# 
  1134  0319                     	;# 
  1135  031A                     	;# 
  1136  038C                     	;# 
  1137  038E                     	;# 
  1138  0391                     	;# 
  1139  0392                     	;# 
  1140  0393                     	;# 
  1141  039A                     	;# 
  1142  039C                     	;# 
  1143  039D                     	;# 
  1144  039E                     	;# 
  1145  039F                     	;# 
  1146  0415                     	;# 
  1147  0416                     	;# 
  1148  0417                     	;# 
  1149  041C                     	;# 
  1150  041D                     	;# 
  1151  041E                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163                           
  1164                           	psect	stringtext1
  1165  1473                     __pstringtext1:	
  1166  1473                     _dpowers:	
  1167  1473  3401               	retlw	1
  1168  1474  3400               	retlw	0
  1169  1475  340A               	retlw	10
  1170  1476  3400               	retlw	0
  1171  1477  3464               	retlw	100
  1172  1478  3400               	retlw	0
  1173  1479  34E8               	retlw	232
  1174  147A  3403               	retlw	3
  1175  147B  3410               	retlw	16
  1176  147C  3427               	retlw	39
  1177  147D                     __end_of_dpowers:	
  1178                           
  1179                           	psect	stringtext2
  1180  147D                     __pstringtext2:	
  1181  147D                     _hexpowers:	
  1182  147D  3401               	retlw	1
  1183  147E  3400               	retlw	0
  1184  147F  3410               	retlw	16
  1185  1480  3400               	retlw	0
  1186  1481  3400               	retlw	0
  1187  1482  3401               	retlw	1
  1188  1483  3400               	retlw	0
  1189  1484  3410               	retlw	16
  1190  1485                     __end_of_hexpowers:	
  1191                           
  1192                           	psect	stringtext3
  1193  1493                     __pstringtext3:	
  1194  1493                     _rxfnsidh:	
  1195  1493  3400               	retlw	0
  1196  1494  3404               	retlw	4
  1197  1495  3408               	retlw	8
  1198  1496  3410               	retlw	16
  1199  1497  3414               	retlw	20
  1200  1498  3418               	retlw	24
  1201  1499                     __end_of_rxfnsidh:	
  1202                           
  1203                           	psect	stringtext4
  1204  14AA                     __pstringtext4:	
  1205  14AA                     _txbnsidh:	
  1206  14AA  3431               	retlw	49
  1207  14AB  3441               	retlw	65
  1208  14AC  3451               	retlw	81
  1209  14AD                     __end_of_txbnsidh:	
  1210                           
  1211                           	psect	stringtext5
  1212  14AD                     __pstringtext5:	
  1213  14AD                     _abc:	
  1214  14AD  3400               	retlw	0
  1215  14AE  3402               	retlw	2
  1216  14AF  3404               	retlw	4
  1217  14B0                     __end_of_abc:	
  1218                           
  1219                           	psect	stringtext6
  1220  14B3                     __pstringtext6:	
  1221  14B3                     _nm:	
  1222  14B3  3400               	retlw	0
  1223  14B4  3402               	retlw	2
  1224  14B5                     __end_of_nm:	
  1225                           
  1226                           	psect	stringtext7
  1227  14B5                     __pstringtext7:	
  1228  14B5                     _rxmnsidh:	
  1229  14B5  3420               	retlw	32
  1230  14B6  3424               	retlw	36
  1231  14B7                     __end_of_rxmnsidh:	
  1232                           
  1233                           	psect	stringtext8
  1234  1000                     __pstringtext8:	
  1235  1000                     _max_idx:	
  1236  1000  3407               	retlw	7
  1237  1001                     __end_of_max_idx:	
  1238  0011                     _PIR1bits	set	17
  1239  0095                     _OPTION_REGbits	set	149
  1240  008E                     _TRISC	set	142
  1241  008C                     _TRISA	set	140
  1242  0097                     _WDTCON	set	151
  1243  0098                     _OSCTUNE	set	152
  1244  0099                     _OSCCON	set	153
  1245  010C                     _LATAbits	set	268
  1246  010E                     _LATCbits	set	270
  1247  011D                     _APFCON0	set	285
  1248  011E                     _APFCON1	set	286
  1249  010E                     _LATC	set	270
  1250  010C                     _LATA	set	268
  1251  0116                     _BORCON	set	278
  1252  018C                     _ANSELA	set	396
  1253  018E                     _ANSELC	set	398
  1254  019A                     _TXREG	set	410
  1255  0199                     _RCREG	set	409
  1256  019D                     _RCSTAbits	set	413
  1257  019C                     _SPBRGH	set	412
  1258  019B                     _SPBRGL	set	411
  1259  019E                     _TXSTA	set	414
  1260  019D                     _RCSTA	set	413
  1261  019F                     _BAUDCON	set	415
  1262  0214                     _SSP1STATbits	set	532
  1263  0211                     _SSP1BUF	set	529
  1264  0215                     _SSP1CON1bits	set	533
  1265  0212                     _SSP1ADD	set	530
  1266  0215                     _SSP1CON1	set	533
  1267  0214                     _SSP1STAT	set	532
  1268  020E                     _WPUC	set	526
  1269  020C                     _WPUA	set	524
  1270  1001                     STR_10:	
  1271  1001  345B               	retlw	91	;'['
  1272  1002  3453               	retlw	83	;'S'
  1273  1003  3465               	retlw	101	;'e'
  1274  1004  3474               	retlw	116	;'t'
  1275  1005  3420               	retlw	32	;' '
  1276  1006  346F               	retlw	111	;'o'
  1277  1007  3475               	retlw	117	;'u'
  1278  1008  3474               	retlw	116	;'t'
  1279  1009  3470               	retlw	112	;'p'
  1280  100A  3475               	retlw	117	;'u'
  1281  100B  3474               	retlw	116	;'t'
  1282  100C  3420               	retlw	32	;' '
  1283  100D  346D               	retlw	109	;'m'
  1284  100E  346F               	retlw	111	;'o'
  1285  100F  3464               	retlw	100	;'d'
  1286  1010  3465               	retlw	101	;'e'
  1287  1011  345D               	retlw	93	;']'
  1288  1012  3420               	retlw	32	;' '
  1289  1013  347B               	retlw	123	;'{'
  1290  1014  3464               	retlw	100	;'d'
  1291  1015  3465               	retlw	101	;'e'
  1292  1016  3462               	retlw	98	;'b'
  1293  1017  3475               	retlw	117	;'u'
  1294  1018  3467               	retlw	103	;'g'
  1295  1019  343A               	retlw	58	;':'
  1296  101A  3420               	retlw	32	;' '
  1297  101B  3440               	retlw	64	;'@'
  1298  101C  3476               	retlw	118	;'v'
  1299  101D  3464               	retlw	100	;'d'
  1300  101E  342C               	retlw	44	;','
  1301  101F  3420               	retlw	32	;' '
  1302  1020  3476               	retlw	118	;'v'
  1303  1021  3465               	retlw	101	;'e'
  1304  1022  3472               	retlw	114	;'r'
  1305  1023  3462               	retlw	98	;'b'
  1306  1024  346F               	retlw	111	;'o'
  1307  1025  3473               	retlw	115	;'s'
  1308  1026  3465               	retlw	101	;'e'
  1309  1027  343A               	retlw	58	;':'
  1310  1028  3420               	retlw	32	;' '
  1311  1029  3440               	retlw	64	;'@'
  1312  102A  3476               	retlw	118	;'v'
  1313  102B  3476               	retlw	118	;'v'
  1314  102C  342C               	retlw	44	;','
  1315  102D  3420               	retlw	32	;' '
  1316  102E  346E               	retlw	110	;'n'
  1317  102F  346F               	retlw	111	;'o'
  1318  1030  3472               	retlw	114	;'r'
  1319  1031  346D               	retlw	109	;'m'
  1320  1032  3461               	retlw	97	;'a'
  1321  1033  346C               	retlw	108	;'l'
  1322  1034  343A               	retlw	58	;':'
  1323  1035  3420               	retlw	32	;' '
  1324  1036  3440               	retlw	64	;'@'
  1325  1037  3476               	retlw	118	;'v'
  1326  1038  346E               	retlw	110	;'n'
  1327  1039  347D               	retlw	125	;'}'
  1328  103A  340A               	retlw	10
  1329  103B  3400               	retlw	0
  1330                           
  1331                           	psect	stringtext9
  1332  103C                     __pstringtext9:	
  1333  103C                     STR_12:	
  1334  103C  3420               	retlw	32	;' '
  1335  103D  3420               	retlw	32	;' '
  1336  103E  3420               	retlw	32	;' '
  1337  103F  3420               	retlw	32	;' '
  1338  1040  3420               	retlw	32	;' '
  1339  1041  3477               	retlw	119	;'w'
  1340  1042  3469               	retlw	105	;'i'
  1341  1043  3474               	retlw	116	;'t'
  1342  1044  3468               	retlw	104	;'h'
  1343  1045  3420               	retlw	32	;' '
  1344  1046  3453               	retlw	83	;'S'
  1345  1047  3449               	retlw	73	;'I'
  1346  1048  3444               	retlw	68	;'D'
  1347  1049  343A               	retlw	58	;':'
  1348  104A  3420               	retlw	32	;' '
  1349  104B  3440               	retlw	64	;'@'
  1350  104C  346F               	retlw	111	;'o'
  1351  104D  346C               	retlw	108	;'l'
  1352  104E  3473               	retlw	115	;'s'
  1353  104F  3420               	retlw	32	;' '
  1354  1050  346F               	retlw	111	;'o'
  1355  1051  3472               	retlw	114	;'r'
  1356  1052  3420               	retlw	32	;' '
  1357  1053  3440               	retlw	64	;'@'
  1358  1054  346F               	retlw	111	;'o'
  1359  1055  346E               	retlw	110	;'n'
  1360  1056  3473               	retlw	115	;'s'
  1361  1057  342C               	retlw	44	;','
  1362  1058  3420               	retlw	32	;' '
  1363  1059  3469               	retlw	105	;'i'
  1364  105A  346E               	retlw	110	;'n'
  1365  105B  3420               	retlw	32	;' '
  1366  105C  3468               	retlw	104	;'h'
  1367  105D  3465               	retlw	101	;'e'
  1368  105E  3478               	retlw	120	;'x'
  1369  105F  3420               	retlw	32	;' '
  1370  1060  3466               	retlw	102	;'f'
  1371  1061  346F               	retlw	111	;'o'
  1372  1062  3472               	retlw	114	;'r'
  1373  1063  346D               	retlw	109	;'m'
  1374  1064  3461               	retlw	97	;'a'
  1375  1065  3474               	retlw	116	;'t'
  1376  1066  343A               	retlw	58	;':'
  1377  1067  3420               	retlw	32	;' '
  1378  1068  3440               	retlw	64	;'@'
  1379  1069  346F               	retlw	111	;'o'
  1380  106A  346C               	retlw	108	;'l'
  1381  106B  3468               	retlw	104	;'h'
  1382  106C  3420               	retlw	32	;' '
  1383  106D  346F               	retlw	111	;'o'
  1384  106E  3472               	retlw	114	;'r'
  1385  106F  3420               	retlw	32	;' '
  1386  1070  3440               	retlw	64	;'@'
  1387  1071  346F               	retlw	111	;'o'
  1388  1072  346E               	retlw	110	;'n'
  1389  1073  3468               	retlw	104	;'h'
  1390  1074  340A               	retlw	10
  1391  1075  3400               	retlw	0
  1392                           
  1393                           	psect	stringtext10
  1394  1076                     __pstringtext10:	
  1395  1076                     STR_20:	
  1396  1076  345B               	retlw	91	;'['
  1397  1077  3453               	retlw	83	;'S'
  1398  1078  3465               	retlw	101	;'e'
  1399  1079  346E               	retlw	110	;'n'
  1400  107A  3464               	retlw	100	;'d'
  1401  107B  3420               	retlw	32	;' '
  1402  107C  346D               	retlw	109	;'m'
  1403  107D  3465               	retlw	101	;'e'
  1404  107E  3473               	retlw	115	;'s'
  1405  107F  3473               	retlw	115	;'s'
  1406  1080  3461               	retlw	97	;'a'
  1407  1081  3467               	retlw	103	;'g'
  1408  1082  3465               	retlw	101	;'e'
  1409  1083  3420               	retlw	32	;' '
  1410  1084  3462               	retlw	98	;'b'
  1411  1085  3465               	retlw	101	;'e'
  1412  1086  3467               	retlw	103	;'g'
  1413  1087  3469               	retlw	105	;'i'
  1414  1088  346E               	retlw	110	;'n'
  1415  1089  346E               	retlw	110	;'n'
  1416  108A  3469               	retlw	105	;'i'
  1417  108B  346E               	retlw	110	;'n'
  1418  108C  3467               	retlw	103	;'g'
  1419  108D  3420               	retlw	32	;' '
  1420  108E  3477               	retlw	119	;'w'
  1421  108F  3469               	retlw	105	;'i'
  1422  1090  3474               	retlw	116	;'t'
  1423  1091  3468               	retlw	104	;'h'
  1424  1092  3420               	retlw	32	;' '
  1425  1093  3427               	retlw	39	;'''
  1426  1094  3440               	retlw	64	;'@'
  1427  1095  3427               	retlw	39	;'''
  1428  1096  3420               	retlw	32	;' '
  1429  1097  3463               	retlw	99	;'c'
  1430  1098  3468               	retlw	104	;'h'
  1431  1099  3461               	retlw	97	;'a'
  1432  109A  3472               	retlw	114	;'r'
  1433  109B  3461               	retlw	97	;'a'
  1434  109C  3463               	retlw	99	;'c'
  1435  109D  3474               	retlw	116	;'t'
  1436  109E  3465               	retlw	101	;'e'
  1437  109F  3472               	retlw	114	;'r'
  1438  10A0  345D               	retlw	93	;']'
  1439  10A1  3420               	retlw	32	;' '
  1440  10A2  3440               	retlw	64	;'@'
  1441  10A3  343C               	retlw	60	;'<'
  1442  10A4  3440               	retlw	64	;'@'
  1443  10A5  346D               	retlw	109	;'m'
  1444  10A6  3465               	retlw	101	;'e'
  1445  10A7  3473               	retlw	115	;'s'
  1446  10A8  3473               	retlw	115	;'s'
  1447  10A9  3461               	retlw	97	;'a'
  1448  10AA  3467               	retlw	103	;'g'
  1449  10AB  3465               	retlw	101	;'e'
  1450  10AC  343E               	retlw	62	;'>'
  1451  10AD  340A               	retlw	10
  1452  10AE  3400               	retlw	0
  1453                           
  1454                           	psect	stringtext11
  1455  10AF                     __pstringtext11:	
  1456  10AF                     STR_11:	
  1457  10AF  345B               	retlw	91	;'['
  1458  10B0  3445               	retlw	69	;'E'
  1459  10B1  346E               	retlw	110	;'n'
  1460  10B2  3461               	retlw	97	;'a'
  1461  10B3  3462               	retlw	98	;'b'
  1462  10B4  346C               	retlw	108	;'l'
  1463  10B5  3465               	retlw	101	;'e'
  1464  10B6  3420               	retlw	32	;' '
  1465  10B7  346F               	retlw	111	;'o'
  1466  10B8  3470               	retlw	112	;'p'
  1467  10B9  3465               	retlw	101	;'e'
  1468  10BA  3472               	retlw	114	;'r'
  1469  10BB  3461               	retlw	97	;'a'
  1470  10BC  3474               	retlw	116	;'t'
  1471  10BD  3469               	retlw	105	;'i'
  1472  10BE  346F               	retlw	111	;'o'
  1473  10BF  346E               	retlw	110	;'n'
  1474  10C0  3420               	retlw	32	;' '
  1475  10C1  346D               	retlw	109	;'m'
  1476  10C2  346F               	retlw	111	;'o'
  1477  10C3  3464               	retlw	100	;'d'
  1478  10C4  3465               	retlw	101	;'e'
  1479  10C5  345D               	retlw	93	;']'
  1480  10C6  3420               	retlw	32	;' '
  1481  10C7  347B               	retlw	123	;'{'
  1482  10C8  346C               	retlw	108	;'l'
  1483  10C9  346F               	retlw	111	;'o'
  1484  10CA  346F               	retlw	111	;'o'
  1485  10CB  3470               	retlw	112	;'p'
  1486  10CC  3462               	retlw	98	;'b'
  1487  10CD  3461               	retlw	97	;'a'
  1488  10CE  3463               	retlw	99	;'c'
  1489  10CF  346B               	retlw	107	;'k'
  1490  10D0  343A               	retlw	58	;':'
  1491  10D1  3420               	retlw	32	;' '
  1492  10D2  3440               	retlw	64	;'@'
  1493  10D3  346F               	retlw	111	;'o'
  1494  10D4  346C               	retlw	108	;'l'
  1495  10D5  342C               	retlw	44	;','
  1496  10D6  3420               	retlw	32	;' '
  1497  10D7  346E               	retlw	110	;'n'
  1498  10D8  346F               	retlw	111	;'o'
  1499  10D9  3472               	retlw	114	;'r'
  1500  10DA  346D               	retlw	109	;'m'
  1501  10DB  3461               	retlw	97	;'a'
  1502  10DC  346C               	retlw	108	;'l'
  1503  10DD  343A               	retlw	58	;':'
  1504  10DE  3420               	retlw	32	;' '
  1505  10DF  3440               	retlw	64	;'@'
  1506  10E0  346F               	retlw	111	;'o'
  1507  10E1  346E               	retlw	110	;'n'
  1508  10E2  347D               	retlw	125	;'}'
  1509  10E3  340A               	retlw	10
  1510  10E4  3400               	retlw	0
  1511                           
  1512                           	psect	stringtext12
  1513  10E5                     __pstringtext12:	
  1514  10E5                     STR_9:	
  1515  10E5  345B               	retlw	91	;'['
  1516  10E6  3453               	retlw	83	;'S'
  1517  10E7  3465               	retlw	101	;'e'
  1518  10E8  3474               	retlw	116	;'t'
  1519  10E9  3420               	retlw	32	;' '
  1520  10EA  3473               	retlw	115	;'s'
  1521  10EB  3474               	retlw	116	;'t'
  1522  10EC  3461               	retlw	97	;'a'
  1523  10ED  346E               	retlw	110	;'n'
  1524  10EE  3464               	retlw	100	;'d'
  1525  10EF  3461               	retlw	97	;'a'
  1526  10F0  3472               	retlw	114	;'r'
  1527  10F1  3464               	retlw	100	;'d'
  1528  10F2  3420               	retlw	32	;' '
  1529  10F3  3469               	retlw	105	;'i'
  1530  10F4  3464               	retlw	100	;'d'
  1531  10F5  3465               	retlw	101	;'e'
  1532  10F6  346E               	retlw	110	;'n'
  1533  10F7  3474               	retlw	116	;'t'
  1534  10F8  3469               	retlw	105	;'i'
  1535  10F9  3466               	retlw	102	;'f'
  1536  10FA  3469               	retlw	105	;'i'
  1537  10FB  3465               	retlw	101	;'e'
  1538  10FC  3472               	retlw	114	;'r'
  1539  10FD  345D               	retlw	93	;']'
  1540  10FE  3420               	retlw	32	;' '
  1541  10FF  3440               	retlw	64	;'@'
  1542  1100  3469               	retlw	105	;'i'
  1543  1101  343C               	retlw	60	;'<'
  1544  1102  3473               	retlw	115	;'s'
  1545  1103  3474               	retlw	116	;'t'
  1546  1104  3461               	retlw	97	;'a'
  1547  1105  346E               	retlw	110	;'n'
  1548  1106  3464               	retlw	100	;'d'
  1549  1107  3461               	retlw	97	;'a'
  1550  1108  3472               	retlw	114	;'r'
  1551  1109  3464               	retlw	100	;'d'
  1552  110A  3420               	retlw	32	;' '
  1553  110B  3469               	retlw	105	;'i'
  1554  110C  3464               	retlw	100	;'d'
  1555  110D  3465               	retlw	101	;'e'
  1556  110E  346E               	retlw	110	;'n'
  1557  110F  3474               	retlw	116	;'t'
  1558  1110  3469               	retlw	105	;'i'
  1559  1111  3466               	retlw	102	;'f'
  1560  1112  3469               	retlw	105	;'i'
  1561  1113  3465               	retlw	101	;'e'
  1562  1114  3472               	retlw	114	;'r'
  1563  1115  343E               	retlw	62	;'>'
  1564  1116  340A               	retlw	10
  1565  1117  3400               	retlw	0
  1566                           
  1567                           	psect	stringtext13
  1568  1118                     __pstringtext13:	
  1569  1118                     STR_41:	
  1570  1118  3452               	retlw	82	;'R'
  1571  1119  3458               	retlw	88	;'X'
  1572  111A  3446               	retlw	70	;'F'
  1573  111B  3425               	retlw	37	;'%'
  1574  111C  3464               	retlw	100	;'d'
  1575  111D  3420               	retlw	32	;' '
  1576  111E  3452               	retlw	82	;'R'
  1577  111F  3458               	retlw	88	;'X'
  1578  1120  3446               	retlw	70	;'F'
  1579  1121  3425               	retlw	37	;'%'
  1580  1122  3464               	retlw	100	;'d'
  1581  1123  3453               	retlw	83	;'S'
  1582  1124  3449               	retlw	73	;'I'
  1583  1125  3444               	retlw	68	;'D'
  1584  1126  3448               	retlw	72	;'H'
  1585  1127  3420               	retlw	32	;' '
  1586  1128  3452               	retlw	82	;'R'
  1587  1129  3458               	retlw	88	;'X'
  1588  112A  3446               	retlw	70	;'F'
  1589  112B  3425               	retlw	37	;'%'
  1590  112C  3464               	retlw	100	;'d'
  1591  112D  3453               	retlw	83	;'S'
  1592  112E  3449               	retlw	73	;'I'
  1593  112F  3444               	retlw	68	;'D'
  1594  1130  344C               	retlw	76	;'L'
  1595  1131  343A               	retlw	58	;':'
  1596  1132  3420               	retlw	32	;' '
  1597  1133  3425               	retlw	37	;'%'
  1598  1134  3434               	retlw	52	;'4'
  1599  1135  3464               	retlw	100	;'d'
  1600  1136  3420               	retlw	32	;' '
  1601  1137  3425               	retlw	37	;'%'
  1602  1138  3430               	retlw	48	;'0'
  1603  1139  3432               	retlw	50	;'2'
  1604  113A  3458               	retlw	88	;'X'
  1605  113B  3468               	retlw	104	;'h'
  1606  113C  3420               	retlw	32	;' '
  1607  113D  3425               	retlw	37	;'%'
  1608  113E  3430               	retlw	48	;'0'
  1609  113F  3432               	retlw	50	;'2'
  1610  1140  3458               	retlw	88	;'X'
  1611  1141  3468               	retlw	104	;'h'
  1612  1142  340A               	retlw	10
  1613  1143  3400               	retlw	0
  1614                           
  1615                           	psect	stringtext14
  1616  1144                     __pstringtext14:	
  1617  1144                     STR_40:	
  1618  1144  3452               	retlw	82	;'R'
  1619  1145  3458               	retlw	88	;'X'
  1620  1146  344D               	retlw	77	;'M'
  1621  1147  3425               	retlw	37	;'%'
  1622  1148  3464               	retlw	100	;'d'
  1623  1149  3420               	retlw	32	;' '
  1624  114A  3452               	retlw	82	;'R'
  1625  114B  3458               	retlw	88	;'X'
  1626  114C  344D               	retlw	77	;'M'
  1627  114D  3425               	retlw	37	;'%'
  1628  114E  3464               	retlw	100	;'d'
  1629  114F  3453               	retlw	83	;'S'
  1630  1150  3449               	retlw	73	;'I'
  1631  1151  3444               	retlw	68	;'D'
  1632  1152  3448               	retlw	72	;'H'
  1633  1153  3420               	retlw	32	;' '
  1634  1154  3452               	retlw	82	;'R'
  1635  1155  3458               	retlw	88	;'X'
  1636  1156  344D               	retlw	77	;'M'
  1637  1157  3425               	retlw	37	;'%'
  1638  1158  3464               	retlw	100	;'d'
  1639  1159  3453               	retlw	83	;'S'
  1640  115A  3449               	retlw	73	;'I'
  1641  115B  3444               	retlw	68	;'D'
  1642  115C  344C               	retlw	76	;'L'
  1643  115D  343A               	retlw	58	;':'
  1644  115E  3420               	retlw	32	;' '
  1645  115F  3425               	retlw	37	;'%'
  1646  1160  3434               	retlw	52	;'4'
  1647  1161  3464               	retlw	100	;'d'
  1648  1162  3420               	retlw	32	;' '
  1649  1163  3425               	retlw	37	;'%'
  1650  1164  3430               	retlw	48	;'0'
  1651  1165  3432               	retlw	50	;'2'
  1652  1166  3458               	retlw	88	;'X'
  1653  1167  3468               	retlw	104	;'h'
  1654  1168  3420               	retlw	32	;' '
  1655  1169  3425               	retlw	37	;'%'
  1656  116A  3430               	retlw	48	;'0'
  1657  116B  3432               	retlw	50	;'2'
  1658  116C  3458               	retlw	88	;'X'
  1659  116D  3468               	retlw	104	;'h'
  1660  116E  340A               	retlw	10
  1661  116F  3400               	retlw	0
  1662                           
  1663                           	psect	stringtext15
  1664  1170                     __pstringtext15:	
  1665  1170                     STR_21:	
  1666  1170  345B               	retlw	91	;'['
  1667  1171  3452               	retlw	82	;'R'
  1668  1172  3465               	retlw	101	;'e'
  1669  1173  3463               	retlw	99	;'c'
  1670  1174  3465               	retlw	101	;'e'
  1671  1175  3469               	retlw	105	;'i'
  1672  1176  3476               	retlw	118	;'v'
  1673  1177  3465               	retlw	101	;'e'
  1674  1178  3420               	retlw	32	;' '
  1675  1179  346D               	retlw	109	;'m'
  1676  117A  3465               	retlw	101	;'e'
  1677  117B  3473               	retlw	115	;'s'
  1678  117C  3473               	retlw	115	;'s'
  1679  117D  3461               	retlw	97	;'a'
  1680  117E  3467               	retlw	103	;'g'
  1681  117F  3465               	retlw	101	;'e'
  1682  1180  345D               	retlw	93	;']'
  1683  1181  3420               	retlw	32	;' '
  1684  1182  343C               	retlw	60	;'<'
  1685  1183  346D               	retlw	109	;'m'
  1686  1184  3465               	retlw	101	;'e'
  1687  1185  3473               	retlw	115	;'s'
  1688  1186  3473               	retlw	115	;'s'
  1689  1187  3461               	retlw	97	;'a'
  1690  1188  3467               	retlw	103	;'g'
  1691  1189  3465               	retlw	101	;'e'
  1692  118A  343E               	retlw	62	;'>'
  1693  118B  3420               	retlw	32	;' '
  1694  118C  3477               	retlw	119	;'w'
  1695  118D  3469               	retlw	105	;'i'
  1696  118E  346C               	retlw	108	;'l'
  1697  118F  346C               	retlw	108	;'l'
  1698  1190  3420               	retlw	32	;' '
  1699  1191  3462               	retlw	98	;'b'
  1700  1192  3465               	retlw	101	;'e'
  1701  1193  3420               	retlw	32	;' '
  1702  1194  346F               	retlw	111	;'o'
  1703  1195  3475               	retlw	117	;'u'
  1704  1196  3474               	retlw	116	;'t'
  1705  1197  3470               	retlw	112	;'p'
  1706  1198  3475               	retlw	117	;'u'
  1707  1199  3474               	retlw	116	;'t'
  1708  119A  340A               	retlw	10
  1709  119B  3400               	retlw	0
  1710                           
  1711                           	psect	stringtext16
  1712  119C                     __pstringtext16:	
  1713  119C                     STR_14:	
  1714  119C  345B               	retlw	91	;'['
  1715  119D  3453               	retlw	83	;'S'
  1716  119E  3465               	retlw	101	;'e'
  1717  119F  3474               	retlw	116	;'t'
  1718  11A0  3420               	retlw	32	;' '
  1719  11A1  3466               	retlw	102	;'f'
  1720  11A2  3469               	retlw	105	;'i'
  1721  11A3  346C               	retlw	108	;'l'
  1722  11A4  3474               	retlw	116	;'t'
  1723  11A5  3465               	retlw	101	;'e'
  1724  11A6  3472               	retlw	114	;'r'
  1725  11A7  345D               	retlw	93	;']'
  1726  11A8  3420               	retlw	32	;' '
  1727  11A9  3440               	retlw	64	;'@'
  1728  11AA  3466               	retlw	102	;'f'
  1729  11AB  343C               	retlw	60	;'<'
  1730  11AC  346E               	retlw	110	;'n'
  1731  11AD  343E               	retlw	62	;'>'
  1732  11AE  343C               	retlw	60	;'<'
  1733  11AF  3466               	retlw	102	;'f'
  1734  11B0  3469               	retlw	105	;'i'
  1735  11B1  346C               	retlw	108	;'l'
  1736  11B2  3474               	retlw	116	;'t'
  1737  11B3  3465               	retlw	101	;'e'
  1738  11B4  3472               	retlw	114	;'r'
  1739  11B5  3428               	retlw	40	;'('
  1740  11B6  3453               	retlw	83	;'S'
  1741  11B7  3449               	retlw	73	;'I'
  1742  11B8  3444               	retlw	68	;'D'
  1743  11B9  3431               	retlw	49	;'1'
  1744  11BA  3430               	retlw	48	;'0'
  1745  11BB  3420               	retlw	32	;' '
  1746  11BC  347E               	retlw	126	;'~'
  1747  11BD  3420               	retlw	32	;' '
  1748  11BE  3453               	retlw	83	;'S'
  1749  11BF  3449               	retlw	73	;'I'
  1750  11C0  3444               	retlw	68	;'D'
  1751  11C1  3430               	retlw	48	;'0'
  1752  11C2  3429               	retlw	41	;')'
  1753  11C3  343E               	retlw	62	;'>'
  1754  11C4  340A               	retlw	10
  1755  11C5  3400               	retlw	0
  1756                           
  1757                           	psect	stringtext17
  1758  11C6                     __pstringtext17:	
  1759  11C6                     STR_13:	
  1760  11C6  345B               	retlw	91	;'['
  1761  11C7  3453               	retlw	83	;'S'
  1762  11C8  3465               	retlw	101	;'e'
  1763  11C9  3474               	retlw	116	;'t'
  1764  11CA  3420               	retlw	32	;' '
  1765  11CB  346D               	retlw	109	;'m'
  1766  11CC  3461               	retlw	97	;'a'
  1767  11CD  3473               	retlw	115	;'s'
  1768  11CE  346B               	retlw	107	;'k'
  1769  11CF  345D               	retlw	93	;']'
  1770  11D0  3420               	retlw	32	;' '
  1771  11D1  3440               	retlw	64	;'@'
  1772  11D2  346D               	retlw	109	;'m'
  1773  11D3  343C               	retlw	60	;'<'
  1774  11D4  346E               	retlw	110	;'n'
  1775  11D5  343E               	retlw	62	;'>'
  1776  11D6  343C               	retlw	60	;'<'
  1777  11D7  346D               	retlw	109	;'m'
  1778  11D8  3461               	retlw	97	;'a'
  1779  11D9  3473               	retlw	115	;'s'
  1780  11DA  346B               	retlw	107	;'k'
  1781  11DB  3428               	retlw	40	;'('
  1782  11DC  3453               	retlw	83	;'S'
  1783  11DD  3449               	retlw	73	;'I'
  1784  11DE  3444               	retlw	68	;'D'
  1785  11DF  3431               	retlw	49	;'1'
  1786  11E0  3430               	retlw	48	;'0'
  1787  11E1  3420               	retlw	32	;' '
  1788  11E2  347E               	retlw	126	;'~'
  1789  11E3  3420               	retlw	32	;' '
  1790  11E4  3453               	retlw	83	;'S'
  1791  11E5  3449               	retlw	73	;'I'
  1792  11E6  3444               	retlw	68	;'D'
  1793  11E7  3430               	retlw	48	;'0'
  1794  11E8  3429               	retlw	41	;')'
  1795  11E9  343E               	retlw	62	;'>'
  1796  11EA  340A               	retlw	10
  1797  11EB  3400               	retlw	0
  1798                           
  1799                           	psect	stringtext18
  1800  11EC                     __pstringtext18:	
  1801  11EC                     STR_16:	
  1802  11EC  345B               	retlw	91	;'['
  1803  11ED  3441               	retlw	65	;'A'
  1804  11EE  3462               	retlw	98	;'b'
  1805  11EF  346F               	retlw	111	;'o'
  1806  11F0  3472               	retlw	114	;'r'
  1807  11F1  3474               	retlw	116	;'t'
  1808  11F2  3420               	retlw	32	;' '
  1809  11F3  3461               	retlw	97	;'a'
  1810  11F4  346C               	retlw	108	;'l'
  1811  11F5  346C               	retlw	108	;'l'
  1812  11F6  3420               	retlw	32	;' '
  1813  11F7  3470               	retlw	112	;'p'
  1814  11F8  3465               	retlw	101	;'e'
  1815  11F9  346E               	retlw	110	;'n'
  1816  11FA  3464               	retlw	100	;'d'
  1817  11FB  3469               	retlw	105	;'i'
  1818  11FC  346E               	retlw	110	;'n'
  1819  11FD  3467               	retlw	103	;'g'
  1820  11FE  3420               	retlw	32	;' '
  1821  11FF  3474               	retlw	116	;'t'
  1822  1200  3472               	retlw	114	;'r'
  1823  1201  3461               	retlw	97	;'a'
  1824  1202  346E               	retlw	110	;'n'
  1825  1203  3473               	retlw	115	;'s'
  1826  1204  346D               	retlw	109	;'m'
  1827  1205  3469               	retlw	105	;'i'
  1828  1206  3473               	retlw	115	;'s'
  1829  1207  3473               	retlw	115	;'s'
  1830  1208  3469               	retlw	105	;'i'
  1831  1209  346F               	retlw	111	;'o'
  1832  120A  346E               	retlw	110	;'n'
  1833  120B  3473               	retlw	115	;'s'
  1834  120C  345D               	retlw	93	;']'
  1835  120D  3420               	retlw	32	;' '
  1836  120E  3440               	retlw	64	;'@'
  1837  120F  3461               	retlw	97	;'a'
  1838  1210  340A               	retlw	10
  1839  1211  3400               	retlw	0
  1840                           
  1841                           	psect	stringtext19
  1842  1212                     __pstringtext19:	
  1843  1212                     STR_7:	
  1844  1212  342F               	retlw	47	;'/'
  1845  1213  342F               	retlw	47	;'/'
  1846  1214  342F               	retlw	47	;'/'
  1847  1215  3420               	retlw	32	;' '
  1848  1216  3455               	retlw	85	;'U'
  1849  1217  3441               	retlw	65	;'A'
  1850  1218  3452               	retlw	82	;'R'
  1851  1219  3454               	retlw	84	;'T'
  1852  121A  3432               	retlw	50	;'2'
  1853  121B  3443               	retlw	67	;'C'
  1854  121C  3441               	retlw	65	;'A'
  1855  121D  344E               	retlw	78	;'N'
  1856  121E  3420               	retlw	32	;' '
  1857  121F  3448               	retlw	72	;'H'
  1858  1220  3445               	retlw	69	;'E'
  1859  1221  344C               	retlw	76	;'L'
  1860  1222  3450               	retlw	80	;'P'
  1861  1223  3420               	retlw	32	;' '
  1862  1224  3428               	retlw	40	;'('
  1863  1225  3476               	retlw	118	;'v'
  1864  1226  3465               	retlw	101	;'e'
  1865  1227  3472               	retlw	114	;'r'
  1866  1228  3473               	retlw	115	;'s'
  1867  1229  3469               	retlw	105	;'i'
  1868  122A  346F               	retlw	111	;'o'
  1869  122B  346E               	retlw	110	;'n'
  1870  122C  3420               	retlw	32	;' '
  1871  122D  3425               	retlw	37	;'%'
  1872  122E  3473               	retlw	115	;'s'
  1873  122F  3429               	retlw	41	;')'
  1874  1230  3420               	retlw	32	;' '
  1875  1231  342F               	retlw	47	;'/'
  1876  1232  342F               	retlw	47	;'/'
  1877  1233  342F               	retlw	47	;'/'
  1878  1234  340A               	retlw	10
  1879  1235  3400               	retlw	0
  1880                           
  1881                           	psect	stringtext20
  1882  1236                     __pstringtext20:	
  1883  1236                     STR_17:	
  1884  1236  345B               	retlw	91	;'['
  1885  1237  3444               	retlw	68	;'D'
  1886  1238  3475               	retlw	117	;'u'
  1887  1239  346D               	retlw	109	;'m'
  1888  123A  3470               	retlw	112	;'p'
  1889  123B  3420               	retlw	32	;' '
  1890  123C  346D               	retlw	109	;'m'
  1891  123D  3461               	retlw	97	;'a'
  1892  123E  3473               	retlw	115	;'s'
  1893  123F  346B               	retlw	107	;'k'
  1894  1240  3473               	retlw	115	;'s'
  1895  1241  3420               	retlw	32	;' '
  1896  1242  3461               	retlw	97	;'a'
  1897  1243  346E               	retlw	110	;'n'
  1898  1244  3464               	retlw	100	;'d'
  1899  1245  3420               	retlw	32	;' '
  1900  1246  3466               	retlw	102	;'f'
  1901  1247  3469               	retlw	105	;'i'
  1902  1248  346C               	retlw	108	;'l'
  1903  1249  3474               	retlw	116	;'t'
  1904  124A  3465               	retlw	101	;'e'
  1905  124B  3472               	retlw	114	;'r'
  1906  124C  3473               	retlw	115	;'s'
  1907  124D  345D               	retlw	93	;']'
  1908  124E  3420               	retlw	32	;' '
  1909  124F  3440               	retlw	64	;'@'
  1910  1250  3446               	retlw	70	;'F'
  1911  1251  340A               	retlw	10
  1912  1252  3400               	retlw	0
  1913                           
  1914                           	psect	stringtext21
  1915  1253                     __pstringtext21:	
  1916  1253                     STR_19:	
  1917  1253  345B               	retlw	91	;'['
  1918  1254  3453               	retlw	83	;'S'
  1919  1255  3465               	retlw	101	;'e'
  1920  1256  346E               	retlw	110	;'n'
  1921  1257  3464               	retlw	100	;'d'
  1922  1258  3420               	retlw	32	;' '
  1923  1259  346D               	retlw	109	;'m'
  1924  125A  3465               	retlw	101	;'e'
  1925  125B  3473               	retlw	115	;'s'
  1926  125C  3473               	retlw	115	;'s'
  1927  125D  3461               	retlw	97	;'a'
  1928  125E  3467               	retlw	103	;'g'
  1929  125F  3465               	retlw	101	;'e'
  1930  1260  345D               	retlw	93	;']'
  1931  1261  3420               	retlw	32	;' '
  1932  1262  343C               	retlw	60	;'<'
  1933  1263  346D               	retlw	109	;'m'
  1934  1264  3465               	retlw	101	;'e'
  1935  1265  3473               	retlw	115	;'s'
  1936  1266  3473               	retlw	115	;'s'
  1937  1267  3461               	retlw	97	;'a'
  1938  1268  3467               	retlw	103	;'g'
  1939  1269  3465               	retlw	101	;'e'
  1940  126A  343E               	retlw	62	;'>'
  1941  126B  340A               	retlw	10
  1942  126C  3400               	retlw	0
  1943                           
  1944                           	psect	stringtext22
  1945  126D                     __pstringtext22:	
  1946  126D                     STR_15:	
  1947  126D  345B               	retlw	91	;'['
  1948  126E  3453               	retlw	83	;'S'
  1949  126F  3465               	retlw	101	;'e'
  1950  1270  3474               	retlw	116	;'t'
  1951  1271  3420               	retlw	32	;' '
  1952  1272  3462               	retlw	98	;'b'
  1953  1273  3461               	retlw	97	;'a'
  1954  1274  3475               	retlw	117	;'u'
  1955  1275  3464               	retlw	100	;'d'
  1956  1276  3420               	retlw	32	;' '
  1957  1277  3472               	retlw	114	;'r'
  1958  1278  3461               	retlw	97	;'a'
  1959  1279  3474               	retlw	116	;'t'
  1960  127A  3465               	retlw	101	;'e'
  1961  127B  345D               	retlw	93	;']'
  1962  127C  3420               	retlw	32	;' '
  1963  127D  3440               	retlw	64	;'@'
  1964  127E  3462               	retlw	98	;'b'
  1965  127F  343C               	retlw	60	;'<'
  1966  1280  3462               	retlw	98	;'b'
  1967  1281  3470               	retlw	112	;'p'
  1968  1282  3472               	retlw	114	;'r'
  1969  1283  343E               	retlw	62	;'>'
  1970  1284  340A               	retlw	10
  1971  1285  3400               	retlw	0
  1972                           
  1973                           	psect	stringtext23
  1974  1286                     __pstringtext23:	
  1975  1286                     STR_25:	
  1976  1286  3466               	retlw	102	;'f'
  1977  1287  3469               	retlw	105	;'i'
  1978  1288  346C               	retlw	108	;'l'
  1979  1289  3474               	retlw	116	;'t'
  1980  128A  3465               	retlw	101	;'e'
  1981  128B  3472               	retlw	114	;'r'
  1982  128C  3428               	retlw	40	;'('
  1983  128D  3425               	retlw	37	;'%'
  1984  128E  3464               	retlw	100	;'d'
  1985  128F  3429               	retlw	41	;')'
  1986  1290  343A               	retlw	58	;':'
  1987  1291  3420               	retlw	32	;' '
  1988  1292  3425               	retlw	37	;'%'
  1989  1293  3430               	retlw	48	;'0'
  1990  1294  3432               	retlw	50	;'2'
  1991  1295  3478               	retlw	120	;'x'
  1992  1296  3420               	retlw	32	;' '
  1993  1297  3425               	retlw	37	;'%'
  1994  1298  3430               	retlw	48	;'0'
  1995  1299  3432               	retlw	50	;'2'
  1996  129A  3478               	retlw	120	;'x'
  1997  129B  340A               	retlw	10
  1998  129C  3400               	retlw	0
  1999                           
  2000                           	psect	stringtext24
  2001  129D                     __pstringtext24:	
  2002  129D                     STR_22:	
  2003  129D  345B               	retlw	91	;'['
  2004  129E  3453               	retlw	83	;'S'
  2005  129F  3468               	retlw	104	;'h'
  2006  12A0  346F               	retlw	111	;'o'
  2007  12A1  3477               	retlw	119	;'w'
  2008  12A2  3420               	retlw	32	;' '
  2009  12A3  3474               	retlw	116	;'t'
  2010  12A4  3468               	retlw	104	;'h'
  2011  12A5  3469               	retlw	105	;'i'
  2012  12A6  3473               	retlw	115	;'s'
  2013  12A7  3420               	retlw	32	;' '
  2014  12A8  3468               	retlw	104	;'h'
  2015  12A9  3465               	retlw	101	;'e'
  2016  12AA  346C               	retlw	108	;'l'
  2017  12AB  3470               	retlw	112	;'p'
  2018  12AC  345D               	retlw	93	;']'
  2019  12AD  343A               	retlw	58	;':'
  2020  12AE  3420               	retlw	32	;' '
  2021  12AF  3440               	retlw	64	;'@'
  2022  12B0  3468               	retlw	104	;'h'
  2023  12B1  340A               	retlw	10
  2024  12B2  3400               	retlw	0
  2025                           
  2026                           	psect	stringtext25
  2027  12B3                     __pstringtext25:	
  2028  12B3                     STR_24:	
  2029  12B3  346D               	retlw	109	;'m'
  2030  12B4  3461               	retlw	97	;'a'
  2031  12B5  3473               	retlw	115	;'s'
  2032  12B6  346B               	retlw	107	;'k'
  2033  12B7  3428               	retlw	40	;'('
  2034  12B8  3425               	retlw	37	;'%'
  2035  12B9  3464               	retlw	100	;'d'
  2036  12BA  3429               	retlw	41	;')'
  2037  12BB  343A               	retlw	58	;':'
  2038  12BC  3420               	retlw	32	;' '
  2039  12BD  3425               	retlw	37	;'%'
  2040  12BE  3430               	retlw	48	;'0'
  2041  12BF  3432               	retlw	50	;'2'
  2042  12C0  3478               	retlw	120	;'x'
  2043  12C1  3420               	retlw	32	;' '
  2044  12C2  3425               	retlw	37	;'%'
  2045  12C3  3430               	retlw	48	;'0'
  2046  12C4  3432               	retlw	50	;'2'
  2047  12C5  3478               	retlw	120	;'x'
  2048  12C6  340A               	retlw	10
  2049  12C7  3400               	retlw	0
  2050                           
  2051                           	psect	stringtext26
  2052  12C8                     __pstringtext26:	
  2053  12C8                     STR_18:	
  2054  12C8  345B               	retlw	91	;'['
  2055  12C9  3444               	retlw	68	;'D'
  2056  12CA  3475               	retlw	117	;'u'
  2057  12CB  346D               	retlw	109	;'m'
  2058  12CC  3470               	retlw	112	;'p'
  2059  12CD  3420               	retlw	32	;' '
  2060  12CE  3472               	retlw	114	;'r'
  2061  12CF  3465               	retlw	101	;'e'
  2062  12D0  3467               	retlw	103	;'g'
  2063  12D1  3469               	retlw	105	;'i'
  2064  12D2  3473               	retlw	115	;'s'
  2065  12D3  3474               	retlw	116	;'t'
  2066  12D4  3465               	retlw	101	;'e'
  2067  12D5  3472               	retlw	114	;'r'
  2068  12D6  3473               	retlw	115	;'s'
  2069  12D7  345D               	retlw	93	;']'
  2070  12D8  3420               	retlw	32	;' '
  2071  12D9  3440               	retlw	64	;'@'
  2072  12DA  3464               	retlw	100	;'d'
  2073  12DB  340A               	retlw	10
  2074  12DC  3400               	retlw	0
  2075                           
  2076                           	psect	stringtext27
  2077  12DD                     __pstringtext27:	
  2078  12DD                     STR_8:	
  2079  12DD  3430               	retlw	48	;'0'
  2080  12DE  342E               	retlw	46	;'.'
  2081  12DF  3431               	retlw	49	;'1'
  2082  12E0  3431               	retlw	49	;'1'
  2083  12E1  3420               	retlw	32	;' '
  2084  12E2  3420               	retlw	32	;' '
  2085  12E3  344D               	retlw	77	;'M'
  2086  12E4  3461               	retlw	97	;'a'
  2087  12E5  3472               	retlw	114	;'r'
  2088  12E6  3463               	retlw	99	;'c'
  2089  12E7  3468               	retlw	104	;'h'
  2090  12E8  3420               	retlw	32	;' '
  2091  12E9  3431               	retlw	49	;'1'
  2092  12EA  3439               	retlw	57	;'9'
  2093  12EB  342C               	retlw	44	;','
  2094  12EC  3420               	retlw	32	;' '
  2095  12ED  3432               	retlw	50	;'2'
  2096  12EE  3430               	retlw	48	;'0'
  2097  12EF  3431               	retlw	49	;'1'
  2098  12F0  3438               	retlw	56	;'8'
  2099  12F1  3400               	retlw	0
  2100                           
  2101                           	psect	stringtext28
  2102  12F2                     __pstringtext28:	
  2103  12F2                     STR_33:	
  2104  12F2  3443               	retlw	67	;'C'
  2105  12F3  346F               	retlw	111	;'o'
  2106  12F4  3470               	retlw	112	;'p'
  2107  12F5  3479               	retlw	121	;'y'
  2108  12F6  3469               	retlw	105	;'i'
  2109  12F7  346E               	retlw	110	;'n'
  2110  12F8  3467               	retlw	103	;'g'
  2111  12F9  3420               	retlw	32	;' '
  2112  12FA  3462               	retlw	98	;'b'
  2113  12FB  3475               	retlw	117	;'u'
  2114  12FC  3466               	retlw	102	;'f'
  2115  12FD  3466               	retlw	102	;'f'
  2116  12FE  3465               	retlw	101	;'e'
  2117  12FF  3472               	retlw	114	;'r'
  2118  1300  343A               	retlw	58	;':'
  2119  1301  3420               	retlw	32	;' '
  2120  1302  3425               	retlw	37	;'%'
  2121  1303  3463               	retlw	99	;'c'
  2122  1304  340A               	retlw	10
  2123  1305  3400               	retlw	0
  2124                           
  2125                           	psect	stringtext29
  2126  1306                     __pstringtext29:	
  2127  1306                     STR_36:	
  2128  1306  344D               	retlw	77	;'M'
  2129  1307  3465               	retlw	101	;'e'
  2130  1308  3473               	retlw	115	;'s'
  2131  1309  3473               	retlw	115	;'s'
  2132  130A  3461               	retlw	97	;'a'
  2133  130B  3467               	retlw	103	;'g'
  2134  130C  3465               	retlw	101	;'e'
  2135  130D  3420               	retlw	32	;' '
  2136  130E  3473               	retlw	115	;'s'
  2137  130F  3465               	retlw	101	;'e'
  2138  1310  346E               	retlw	110	;'n'
  2139  1311  3474               	retlw	116	;'t'
  2140  1312  343A               	retlw	58	;':'
  2141  1313  3420               	retlw	32	;' '
  2142  1314  3425               	retlw	37	;'%'
  2143  1315  3473               	retlw	115	;'s'
  2144  1316  340A               	retlw	10
  2145  1317  3400               	retlw	0
  2146                           
  2147                           	psect	stringtext30
  2148  1318                     __pstringtext30:	
  2149  1318                     STR_62:	
  2150  1318  3430               	retlw	48	;'0'
  2151  1319  3431               	retlw	49	;'1'
  2152  131A  3432               	retlw	50	;'2'
  2153  131B  3433               	retlw	51	;'3'
  2154  131C  3434               	retlw	52	;'4'
  2155  131D  3435               	retlw	53	;'5'
  2156  131E  3436               	retlw	54	;'6'
  2157  131F  3437               	retlw	55	;'7'
  2158  1320  3438               	retlw	56	;'8'
  2159  1321  3439               	retlw	57	;'9'
  2160  1322  3441               	retlw	65	;'A'
  2161  1323  3442               	retlw	66	;'B'
  2162  1324  3443               	retlw	67	;'C'
  2163  1325  3444               	retlw	68	;'D'
  2164  1326  3445               	retlw	69	;'E'
  2165  1327  3446               	retlw	70	;'F'
  2166  1328  3400               	retlw	0
  2167                           
  2168                           	psect	stringtext31
  2169  1329                     __pstringtext31:	
  2170  1329                     STR_63:	
  2171  1329  3430               	retlw	48	;'0'
  2172  132A  3431               	retlw	49	;'1'
  2173  132B  3432               	retlw	50	;'2'
  2174  132C  3433               	retlw	51	;'3'
  2175  132D  3434               	retlw	52	;'4'
  2176  132E  3435               	retlw	53	;'5'
  2177  132F  3436               	retlw	54	;'6'
  2178  1330  3437               	retlw	55	;'7'
  2179  1331  3438               	retlw	56	;'8'
  2180  1332  3439               	retlw	57	;'9'
  2181  1333  3461               	retlw	97	;'a'
  2182  1334  3462               	retlw	98	;'b'
  2183  1335  3463               	retlw	99	;'c'
  2184  1336  3464               	retlw	100	;'d'
  2185  1337  3465               	retlw	101	;'e'
  2186  1338  3466               	retlw	102	;'f'
  2187  1339  3400               	retlw	0
  2188                           
  2189                           	psect	stringtext32
  2190  133A                     __pstringtext32:	
  2191  133A                     STR_26:	
  2192  133A  3452               	retlw	82	;'R'
  2193  133B  3458               	retlw	88	;'X'
  2194  133C  3442               	retlw	66	;'B'
  2195  133D  3425               	retlw	37	;'%'
  2196  133E  3464               	retlw	100	;'d'
  2197  133F  3453               	retlw	83	;'S'
  2198  1340  3449               	retlw	73	;'I'
  2199  1341  3444               	retlw	68	;'D'
  2200  1342  3448               	retlw	72	;'H'
  2201  1343  343A               	retlw	58	;':'
  2202  1344  3420               	retlw	32	;' '
  2203  1345  3425               	retlw	37	;'%'
  2204  1346  3430               	retlw	48	;'0'
  2205  1347  3432               	retlw	50	;'2'
  2206  1348  3478               	retlw	120	;'x'
  2207  1349  340A               	retlw	10
  2208  134A  3400               	retlw	0
  2209                           
  2210                           	psect	stringtext33
  2211  134B                     __pstringtext33:	
  2212  134B                     STR_34:	
  2213  134B  3454               	retlw	84	;'T'
  2214  134C  3458               	retlw	88	;'X'
  2215  134D  3442               	retlw	66	;'B'
  2216  134E  3425               	retlw	37	;'%'
  2217  134F  3464               	retlw	100	;'d'
  2218  1350  3453               	retlw	83	;'S'
  2219  1351  3449               	retlw	73	;'I'
  2220  1352  3444               	retlw	68	;'D'
  2221  1353  3448               	retlw	72	;'H'
  2222  1354  343A               	retlw	58	;':'
  2223  1355  3420               	retlw	32	;' '
  2224  1356  3425               	retlw	37	;'%'
  2225  1357  3430               	retlw	48	;'0'
  2226  1358  3432               	retlw	50	;'2'
  2227  1359  3478               	retlw	120	;'x'
  2228  135A  340A               	retlw	10
  2229  135B  3400               	retlw	0
  2230                           
  2231                           	psect	stringtext34
  2232  135C                     __pstringtext34:	
  2233  135C                     STR_27:	
  2234  135C  3452               	retlw	82	;'R'
  2235  135D  3458               	retlw	88	;'X'
  2236  135E  3442               	retlw	66	;'B'
  2237  135F  3425               	retlw	37	;'%'
  2238  1360  3464               	retlw	100	;'d'
  2239  1361  3453               	retlw	83	;'S'
  2240  1362  3449               	retlw	73	;'I'
  2241  1363  3444               	retlw	68	;'D'
  2242  1364  344C               	retlw	76	;'L'
  2243  1365  343A               	retlw	58	;':'
  2244  1366  3420               	retlw	32	;' '
  2245  1367  3425               	retlw	37	;'%'
  2246  1368  3430               	retlw	48	;'0'
  2247  1369  3432               	retlw	50	;'2'
  2248  136A  3478               	retlw	120	;'x'
  2249  136B  340A               	retlw	10
  2250  136C  3400               	retlw	0
  2251                           
  2252                           	psect	stringtext35
  2253  136D                     __pstringtext35:	
  2254  136D                     STR_35:	
  2255  136D  3454               	retlw	84	;'T'
  2256  136E  3458               	retlw	88	;'X'
  2257  136F  3442               	retlw	66	;'B'
  2258  1370  3425               	retlw	37	;'%'
  2259  1371  3464               	retlw	100	;'d'
  2260  1372  3453               	retlw	83	;'S'
  2261  1373  3449               	retlw	73	;'I'
  2262  1374  3444               	retlw	68	;'D'
  2263  1375  344C               	retlw	76	;'L'
  2264  1376  343A               	retlw	58	;':'
  2265  1377  3420               	retlw	32	;' '
  2266  1378  3425               	retlw	37	;'%'
  2267  1379  3430               	retlw	48	;'0'
  2268  137A  3432               	retlw	50	;'2'
  2269  137B  3478               	retlw	120	;'x'
  2270  137C  340A               	retlw	10
  2271  137D  3400               	retlw	0
  2272                           
  2273                           	psect	stringtext36
  2274  137E                     __pstringtext36:	
  2275  137E                     STR_28:	
  2276  137E  3452               	retlw	82	;'R'
  2277  137F  3458               	retlw	88	;'X'
  2278  1380  3442               	retlw	66	;'B'
  2279  1381  3425               	retlw	37	;'%'
  2280  1382  3464               	retlw	100	;'d'
  2281  1383  3444               	retlw	68	;'D'
  2282  1384  344C               	retlw	76	;'L'
  2283  1385  3443               	retlw	67	;'C'
  2284  1386  343A               	retlw	58	;':'
  2285  1387  3420               	retlw	32	;' '
  2286  1388  3425               	retlw	37	;'%'
  2287  1389  3430               	retlw	48	;'0'
  2288  138A  3432               	retlw	50	;'2'
  2289  138B  3478               	retlw	120	;'x'
  2290  138C  340A               	retlw	10
  2291  138D  3400               	retlw	0
  2292                           
  2293                           	psect	stringtext37
  2294  138E                     __pstringtext37:	
  2295  138E                     STR_55:	
  2296  138E  3452               	retlw	82	;'R'
  2297  138F  3458               	retlw	88	;'X'
  2298  1390  3442               	retlw	66	;'B'
  2299  1391  3430               	retlw	48	;'0'
  2300  1392  3443               	retlw	67	;'C'
  2301  1393  3454               	retlw	84	;'T'
  2302  1394  3452               	retlw	82	;'R'
  2303  1395  344C               	retlw	76	;'L'
  2304  1396  343A               	retlw	58	;':'
  2305  1397  3420               	retlw	32	;' '
  2306  1398  3425               	retlw	37	;'%'
  2307  1399  3430               	retlw	48	;'0'
  2308  139A  3432               	retlw	50	;'2'
  2309  139B  3478               	retlw	120	;'x'
  2310  139C  340A               	retlw	10
  2311  139D  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext38
  2314  139E                     __pstringtext38:	
  2315  139E                     STR_51:	
  2316  139E  3454               	retlw	84	;'T'
  2317  139F  3458               	retlw	88	;'X'
  2318  13A0  3442               	retlw	66	;'B'
  2319  13A1  3430               	retlw	48	;'0'
  2320  13A2  3443               	retlw	67	;'C'
  2321  13A3  3454               	retlw	84	;'T'
  2322  13A4  3452               	retlw	82	;'R'
  2323  13A5  344C               	retlw	76	;'L'
  2324  13A6  343A               	retlw	58	;':'
  2325  13A7  3420               	retlw	32	;' '
  2326  13A8  3425               	retlw	37	;'%'
  2327  13A9  3430               	retlw	48	;'0'
  2328  13AA  3432               	retlw	50	;'2'
  2329  13AB  3478               	retlw	120	;'x'
  2330  13AC  340A               	retlw	10
  2331  13AD  3400               	retlw	0
  2332                           
  2333                           	psect	stringtext39
  2334  13AE                     __pstringtext39:	
  2335  13AE                     STR_56:	
  2336  13AE  3452               	retlw	82	;'R'
  2337  13AF  3458               	retlw	88	;'X'
  2338  13B0  3442               	retlw	66	;'B'
  2339  13B1  3431               	retlw	49	;'1'
  2340  13B2  3443               	retlw	67	;'C'
  2341  13B3  3454               	retlw	84	;'T'
  2342  13B4  3452               	retlw	82	;'R'
  2343  13B5  344C               	retlw	76	;'L'
  2344  13B6  343A               	retlw	58	;':'
  2345  13B7  3420               	retlw	32	;' '
  2346  13B8  3425               	retlw	37	;'%'
  2347  13B9  3430               	retlw	48	;'0'
  2348  13BA  3432               	retlw	50	;'2'
  2349  13BB  3478               	retlw	120	;'x'
  2350  13BC  340A               	retlw	10
  2351  13BD  3400               	retlw	0
  2352                           
  2353                           	psect	stringtext40
  2354  13BE                     __pstringtext40:	
  2355  13BE                     STR_52:	
  2356  13BE  3454               	retlw	84	;'T'
  2357  13BF  3458               	retlw	88	;'X'
  2358  13C0  3442               	retlw	66	;'B'
  2359  13C1  3431               	retlw	49	;'1'
  2360  13C2  3443               	retlw	67	;'C'
  2361  13C3  3454               	retlw	84	;'T'
  2362  13C4  3452               	retlw	82	;'R'
  2363  13C5  344C               	retlw	76	;'L'
  2364  13C6  343A               	retlw	58	;':'
  2365  13C7  3420               	retlw	32	;' '
  2366  13C8  3425               	retlw	37	;'%'
  2367  13C9  3430               	retlw	48	;'0'
  2368  13CA  3432               	retlw	50	;'2'
  2369  13CB  3478               	retlw	120	;'x'
  2370  13CC  340A               	retlw	10
  2371  13CD  3400               	retlw	0
  2372                           
  2373                           	psect	stringtext41
  2374  13CE                     __pstringtext41:	
  2375  13CE                     STR_53:	
  2376  13CE  3454               	retlw	84	;'T'
  2377  13CF  3458               	retlw	88	;'X'
  2378  13D0  3442               	retlw	66	;'B'
  2379  13D1  3432               	retlw	50	;'2'
  2380  13D2  3443               	retlw	67	;'C'
  2381  13D3  3454               	retlw	84	;'T'
  2382  13D4  3452               	retlw	82	;'R'
  2383  13D5  344C               	retlw	76	;'L'
  2384  13D6  343A               	retlw	58	;':'
  2385  13D7  3420               	retlw	32	;' '
  2386  13D8  3425               	retlw	37	;'%'
  2387  13D9  3430               	retlw	48	;'0'
  2388  13DA  3432               	retlw	50	;'2'
  2389  13DB  3478               	retlw	120	;'x'
  2390  13DC  340A               	retlw	10
  2391  13DD  3400               	retlw	0
  2392                           
  2393                           	psect	stringtext42
  2394  13DE                     __pstringtext42:	
  2395  13DE                     STR_29:	
  2396  13DE  3452               	retlw	82	;'R'
  2397  13DF  3458               	retlw	88	;'X'
  2398  13E0  3442               	retlw	66	;'B'
  2399  13E1  3425               	retlw	37	;'%'
  2400  13E2  3464               	retlw	100	;'d'
  2401  13E3  3444               	retlw	68	;'D'
  2402  13E4  3430               	retlw	48	;'0'
  2403  13E5  343A               	retlw	58	;':'
  2404  13E6  3420               	retlw	32	;' '
  2405  13E7  3425               	retlw	37	;'%'
  2406  13E8  3430               	retlw	48	;'0'
  2407  13E9  3432               	retlw	50	;'2'
  2408  13EA  3478               	retlw	120	;'x'
  2409  13EB  340A               	retlw	10
  2410  13EC  3400               	retlw	0
  2411                           
  2412                           	psect	stringtext43
  2413  13ED                     __pstringtext43:	
  2414  13ED                     STR_58:	
  2415  13ED  3443               	retlw	67	;'C'
  2416  13EE  3441               	retlw	65	;'A'
  2417  13EF  344E               	retlw	78	;'N'
  2418  13F0  3443               	retlw	67	;'C'
  2419  13F1  3454               	retlw	84	;'T'
  2420  13F2  3452               	retlw	82	;'R'
  2421  13F3  344C               	retlw	76	;'L'
  2422  13F4  343A               	retlw	58	;':'
  2423  13F5  3420               	retlw	32	;' '
  2424  13F6  3425               	retlw	37	;'%'
  2425  13F7  3430               	retlw	48	;'0'
  2426  13F8  3432               	retlw	50	;'2'
  2427  13F9  3478               	retlw	120	;'x'
  2428  13FA  340A               	retlw	10
  2429  13FB  3400               	retlw	0
  2430                           
  2431                           	psect	stringtext44
  2432  13FC                     __pstringtext44:	
  2433  13FC                     STR_23:	
  2434  13FC  3443               	retlw	67	;'C'
  2435  13FD  3441               	retlw	65	;'A'
  2436  13FE  344E               	retlw	78	;'N'
  2437  13FF  3453               	retlw	83	;'S'
  2438  1400  3454               	retlw	84	;'T'
  2439  1401  3441               	retlw	65	;'A'
  2440  1402  3454               	retlw	84	;'T'
  2441  1403  343A               	retlw	58	;':'
  2442  1404  3420               	retlw	32	;' '
  2443  1405  3425               	retlw	37	;'%'
  2444  1406  3430               	retlw	48	;'0'
  2445  1407  3432               	retlw	50	;'2'
  2446  1408  3478               	retlw	120	;'x'
  2447  1409  340A               	retlw	10
  2448  140A  3400               	retlw	0
  2449                           
  2450                           	psect	stringtext45
  2451  140B                     __pstringtext45:	
  2452  140B                     STR_32:	
  2453  140B  3454               	retlw	84	;'T'
  2454  140C  3458               	retlw	88	;'X'
  2455  140D  3442               	retlw	66	;'B'
  2456  140E  3430               	retlw	48	;'0'
  2457  140F  3420               	retlw	32	;' '
  2458  1410  3469               	retlw	105	;'i'
  2459  1411  3473               	retlw	115	;'s'
  2460  1412  3420               	retlw	32	;' '
  2461  1413  3469               	retlw	105	;'i'
  2462  1414  3464               	retlw	100	;'d'
  2463  1415  346C               	retlw	108	;'l'
  2464  1416  3465               	retlw	101	;'e'
  2465  1417  340A               	retlw	10
  2466  1418  3400               	retlw	0
  2467                           
  2468                           	psect	stringtext46
  2469  1419                     __pstringtext46:	
  2470  1419                     STR_31:	
  2471  1419  3454               	retlw	84	;'T'
  2472  141A  3458               	retlw	88	;'X'
  2473  141B  3442               	retlw	66	;'B'
  2474  141C  3431               	retlw	49	;'1'
  2475  141D  3420               	retlw	32	;' '
  2476  141E  3469               	retlw	105	;'i'
  2477  141F  3473               	retlw	115	;'s'
  2478  1420  3420               	retlw	32	;' '
  2479  1421  3469               	retlw	105	;'i'
  2480  1422  3464               	retlw	100	;'d'
  2481  1423  346C               	retlw	108	;'l'
  2482  1424  3465               	retlw	101	;'e'
  2483  1425  340A               	retlw	10
  2484  1426  3400               	retlw	0
  2485                           
  2486                           	psect	stringtext47
  2487  1427                     __pstringtext47:	
  2488  1427                     STR_30:	
  2489  1427  3454               	retlw	84	;'T'
  2490  1428  3458               	retlw	88	;'X'
  2491  1429  3442               	retlw	66	;'B'
  2492  142A  3432               	retlw	50	;'2'
  2493  142B  3420               	retlw	32	;' '
  2494  142C  3469               	retlw	105	;'i'
  2495  142D  3473               	retlw	115	;'s'
  2496  142E  3420               	retlw	32	;' '
  2497  142F  3469               	retlw	105	;'i'
  2498  1430  3464               	retlw	100	;'d'
  2499  1431  346C               	retlw	108	;'l'
  2500  1432  3465               	retlw	101	;'e'
  2501  1433  340A               	retlw	10
  2502  1434  3400               	retlw	0
  2503                           
  2504                           	psect	stringtext48
  2505  1435                     __pstringtext48:	
  2506  1435                     STR_38:	
  2507  1435  3452               	retlw	82	;'R'
  2508  1436  3458               	retlw	88	;'X'
  2509  1437  3430               	retlw	48	;'0'
  2510  1438  3449               	retlw	73	;'I'
  2511  1439  3446               	retlw	70	;'F'
  2512  143A  3420               	retlw	32	;' '
  2513  143B  3469               	retlw	105	;'i'
  2514  143C  3473               	retlw	115	;'s'
  2515  143D  3420               	retlw	32	;' '
  2516  143E  346F               	retlw	111	;'o'
  2517  143F  346E               	retlw	110	;'n'
  2518  1440  340A               	retlw	10
  2519  1441  3400               	retlw	0
  2520                           
  2521                           	psect	stringtext49
  2522  1442                     __pstringtext49:	
  2523  1442                     STR_37:	
  2524  1442  3452               	retlw	82	;'R'
  2525  1443  3458               	retlw	88	;'X'
  2526  1444  3431               	retlw	49	;'1'
  2527  1445  3449               	retlw	73	;'I'
  2528  1446  3446               	retlw	70	;'F'
  2529  1447  3420               	retlw	32	;' '
  2530  1448  3469               	retlw	105	;'i'
  2531  1449  3473               	retlw	115	;'s'
  2532  144A  3420               	retlw	32	;' '
  2533  144B  346F               	retlw	111	;'o'
  2534  144C  346E               	retlw	110	;'n'
  2535  144D  340A               	retlw	10
  2536  144E  3400               	retlw	0
  2537                           
  2538                           	psect	stringtext50
  2539  144F                     __pstringtext50:	
  2540  144F                     STR_47:	
  2541  144F  3443               	retlw	67	;'C'
  2542  1450  344E               	retlw	78	;'N'
  2543  1451  3446               	retlw	70	;'F'
  2544  1452  3431               	retlw	49	;'1'
  2545  1453  343A               	retlw	58	;':'
  2546  1454  3420               	retlw	32	;' '
  2547  1455  3425               	retlw	37	;'%'
  2548  1456  3430               	retlw	48	;'0'
  2549  1457  3432               	retlw	50	;'2'
  2550  1458  3478               	retlw	120	;'x'
  2551  1459  340A               	retlw	10
  2552  145A  3400               	retlw	0
  2553                           
  2554                           	psect	stringtext51
  2555  145B                     __pstringtext51:	
  2556  145B                     STR_48:	
  2557  145B  3443               	retlw	67	;'C'
  2558  145C  344E               	retlw	78	;'N'
  2559  145D  3446               	retlw	70	;'F'
  2560  145E  3432               	retlw	50	;'2'
  2561  145F  343A               	retlw	58	;':'
  2562  1460  3420               	retlw	32	;' '
  2563  1461  3425               	retlw	37	;'%'
  2564  1462  3430               	retlw	48	;'0'
  2565  1463  3432               	retlw	50	;'2'
  2566  1464  3478               	retlw	120	;'x'
  2567  1465  340A               	retlw	10
  2568  1466  3400               	retlw	0
  2569                           
  2570                           	psect	stringtext52
  2571  1467                     __pstringtext52:	
  2572  1467                     STR_49:	
  2573  1467  3443               	retlw	67	;'C'
  2574  1468  344E               	retlw	78	;'N'
  2575  1469  3446               	retlw	70	;'F'
  2576  146A  3433               	retlw	51	;'3'
  2577  146B  343A               	retlw	58	;':'
  2578  146C  3420               	retlw	32	;' '
  2579  146D  3425               	retlw	37	;'%'
  2580  146E  3430               	retlw	48	;'0'
  2581  146F  3432               	retlw	50	;'2'
  2582  1470  3478               	retlw	120	;'x'
  2583  1471  340A               	retlw	10
  2584  1472  3400               	retlw	0
  2585                           
  2586                           	psect	stringtext53
  2587  1485                     __pstringtext53:	
  2588  1485                     STR_61:	
  2589  1485  3428               	retlw	40	;'('
  2590  1486  346E               	retlw	110	;'n'
  2591  1487  3475               	retlw	117	;'u'
  2592  1488  346C               	retlw	108	;'l'
  2593  1489  346C               	retlw	108	;'l'
  2594  148A  3429               	retlw	41	;')'
  2595  148B  3400               	retlw	0
  2596                           
  2597                           	psect	stringtext54
  2598  148C                     __pstringtext54:	
  2599  148C                     STR_1:	
  2600  148C  3425               	retlw	37	;'%'
  2601  148D  3464               	retlw	100	;'d'
  2602  148E  342C               	retlw	44	;','
  2603  148F  3425               	retlw	37	;'%'
  2604  1490  3473               	retlw	115	;'s'
  2605  1491  340A               	retlw	10
  2606  1492  3400               	retlw	0
  2607                           
  2608                           	psect	stringtext55
  2609  1499                     __pstringtext55:	
  2610  1499                     STR_2:	
  2611  1499  3425               	retlw	37	;'%'
  2612  149A  3430               	retlw	48	;'0'
  2613  149B  3432               	retlw	50	;'2'
  2614  149C  3478               	retlw	120	;'x'
  2615  149D  343A               	retlw	58	;':'
  2616  149E  3400               	retlw	0
  2617                           
  2618                           	psect	stringtext56
  2619  149F                     __pstringtext56:	
  2620  149F                     STR_3:	
  2621  149F  3420               	retlw	32	;' '
  2622  14A0  3425               	retlw	37	;'%'
  2623  14A1  3430               	retlw	48	;'0'
  2624  14A2  3432               	retlw	50	;'2'
  2625  14A3  3478               	retlw	120	;'x'
  2626  14A4  3400               	retlw	0
  2627                           
  2628                           	psect	stringtext57
  2629  14A5                     __pstringtext57:	
  2630  14A5                     STR_39:	
  2631  14A5  342D               	retlw	45	;'-'
  2632  14A6  342D               	retlw	45	;'-'
  2633  14A7  342D               	retlw	45	;'-'
  2634  14A8  340A               	retlw	10
  2635  14A9  3400               	retlw	0
  2636                           
  2637                           	psect	stringtext58
  2638  14B0                     __pstringtext58:	
  2639  14B0                     STR_6:	
  2640  14B0  3425               	retlw	37	;'%'
  2641  14B1  3463               	retlw	99	;'c'
  2642  14B2  3400               	retlw	0
  2643                           
  2644                           	psect	stringtext59
  2645  0000                     __pstringtext59:	
  2646  14A8                     
  2647                           ; #config settings
  2648  0000                     
  2649                           	psect	cinit
  2650  07F0                     start_initialization:	
  2651  07F0                     __initialization:	
  2652                           
  2653                           ; Clear objects allocated to BANK0
  2654  07F0  0020               	movlb	0	; select bank0
  2655  07F1  01EA               	clrf	__pbssBANK0& (0+127)
  2656  07F2  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2657  07F3  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2658  07F4  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  2659  07F5  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  2660                           
  2661                           ; Clear objects allocated to BANK1
  2662  07F6  30A0               	movlw	low __pbssBANK1
  2663  07F7  0084               	movwf	4
  2664  07F8  3000               	movlw	high __pbssBANK1
  2665  07F9  0085               	movwf	5
  2666  07FA  3024               	movlw	36
  2667  07FB  318A  22F7         	fcall	clear_ram0
  2668  07FD                     end_of_initialization:	
  2669                           ;End of C runtime variable initialization code
  2670                           
  2671  07FD                     __end_of__initialization:	
  2672  07FD  0020               	movlb	0
  2673  07FE  3183  2BA2         	ljmp	_main	;jump to C main() function
  2674                           
  2675                           	psect	bssBANK0
  2676  006A                     __pbssBANK0:	
  2677  006A                     _mode:	
  2678  006A                     	ds	2
  2679  006C                     _output_format:	
  2680  006C                     	ds	2
  2681  006E                     _operation_mode:	
  2682  006E                     	ds	1
  2683                           
  2684                           	psect	bssBANK1
  2685  00A0                     __pbssBANK1:	
  2686  00A0                     _save_rxfn:	
  2687  00A0                     	ds	12
  2688  00AC                     _save_rxmn:	
  2689  00AC                     	ds	4
  2690  00B0                     _handler:	
  2691  00B0                     	ds	2
  2692  00B2                     _sid:	
  2693  00B2                     	ds	2
  2694  00B4                     _buf:	
  2695  00B4                     	ds	16
  2696                           
  2697                           	psect	clrtext
  2698  0AF7                     clear_ram0:	
  2699                           ;	Called with FSR0 containing the base address, and
  2700                           ;	WREG with the size to clear
  2701                           
  2702  0AF7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2703  0AF8                     clrloop0:	
  2704  0AF8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2705  0AF9  3101               	addfsr 0,1
  2706  0AFA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2707  0AFB  2AF8               	goto	clrloop0	;have we reached the end yet?
  2708  0AFC  3400               	retlw	0	;all done for this memory range, return
  2709                           
  2710                           	psect	cstackBANK1
  2711  00C4                     __pcstackBANK1:	
  2712  00C4                     main@sid:	
  2713                           
  2714                           ; 1 bytes @ 0x0
  2715  00C4                     	ds	1
  2716  00C5                     main@bpr:	
  2717                           
  2718                           ; 1 bytes @ 0x1
  2719  00C5                     	ds	1
  2720  00C6                     main@status:	
  2721                           
  2722                           ; 1 bytes @ 0x2
  2723  00C6                     	ds	1
  2724  00C7                     main@mask:	
  2725                           
  2726                           ; 2 bytes @ 0x3
  2727  00C7                     	ds	2
  2728  00C9                     main@echo_back:	
  2729                           
  2730                           ; 1 bytes @ 0x5
  2731  00C9                     	ds	1
  2732  00CA                     main@n:	
  2733                           
  2734                           ; 1 bytes @ 0x6
  2735  00CA                     	ds	1
  2736  00CB                     main@buf:	
  2737                           
  2738                           ; 9 bytes @ 0x7
  2739  00CB                     	ds	9
  2740  00D4                     main@c:	
  2741                           
  2742                           ; 1 bytes @ 0x10
  2743  00D4                     	ds	1
  2744  00D5                     main@cmd:	
  2745                           
  2746                           ; 1 bytes @ 0x11
  2747  00D5                     	ds	1
  2748  00D6                     main@idx:	
  2749                           
  2750                           ; 1 bytes @ 0x12
  2751  00D6                     	ds	1
  2752                           
  2753                           	psect	cstackCOMMON
  2754  0070                     __pcstackCOMMON:	
  2755  0070                     ?_isdigit:	
  2756  0070                     ?_PIN_MANAGER_Initialize:	
  2757                           ; 1 bit 
  2758                           
  2759  0070                     ??_PIN_MANAGER_Initialize:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ?_OSCILLATOR_Initialize:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ??_OSCILLATOR_Initialize:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ?_WDT_Initialize:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ??_WDT_Initialize:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_SPI_Initialize:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ??_SPI_Initialize:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_EUSART_Initialize:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ??_EUSART_Initialize:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_can_status_check:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_can_set_sid:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_can_logging_mode:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_can_ope_mode:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_can_abort:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_can_baudrate:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_can_dump_masks_and_filters:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_can_dump_registers:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ??_isdigit:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_SYSTEM_Initialize:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ??_SYSTEM_Initialize:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_EUSART_Read:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ??_EUSART_Read:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_EUSART_Write:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ??_EUSART_Write:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_putch:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_SPI_Exchange8bit:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ??_SPI_Exchange8bit:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_main:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_abort_pending_transmissions:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_txf_clear:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_receive:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ?_read_register:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?___wmul:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?___lwdiv:	
  2859                           ; 2 bytes @ 0x0
  2860                           
  2861  0070                     EUSART_Write@txData:	
  2862                           ; 2 bytes @ 0x0
  2863                           
  2864  0070                     SPI_Exchange8bit@data:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     can_logging_mode@verbose:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     _isdigit$815:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     can_set_sid@can_node:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ___wmul@multiplier:	
  2877                           ; 2 bytes @ 0x0
  2878                           
  2879  0070                     ___lwdiv@divisor:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882                           
  2883                           ; 2 bytes @ 0x0
  2884  0070                     	ds	1
  2885  0071                     ??_can_logging_mode:	
  2886  0071                     ??_putch:	
  2887                           ; 1 bytes @ 0x1
  2888                           
  2889  0071                     ?_SPI_Exchange8bitBuffer:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0071                     putch@txData:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0071                     isdigit@c:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0x1
  2903  0071                     	ds	1
  2904  0072                     ??_can_set_sid:	
  2905  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2906                           ; 1 bytes @ 0x2
  2907                           
  2908  0072                     can_logging_mode@debug:	
  2909                           ; 1 bytes @ 0x2
  2910                           
  2911  0072                     ___wmul@multiplicand:	
  2912                           ; 1 bytes @ 0x2
  2913                           
  2914  0072                     ___lwdiv@dividend:	
  2915                           ; 2 bytes @ 0x2
  2916                           
  2917                           
  2918                           ; 2 bytes @ 0x2
  2919  0072                     	ds	1
  2920  0073                     ??_SPI_Exchange8bitBuffer:	
  2921                           
  2922                           ; 1 bytes @ 0x3
  2923  0073                     	ds	1
  2924  0074                     ??___wmul:	
  2925  0074                     ??___lwdiv:	
  2926                           ; 1 bytes @ 0x4
  2927                           
  2928  0074                     ___wmul@product:	
  2929                           ; 1 bytes @ 0x4
  2930                           
  2931                           
  2932                           ; 2 bytes @ 0x4
  2933  0074                     	ds	1
  2934  0075                     can_set_sid@sidh:	
  2935  0075                     ___lwdiv@quotient:	
  2936                           ; 1 bytes @ 0x5
  2937                           
  2938                           
  2939                           ; 2 bytes @ 0x5
  2940  0075                     	ds	1
  2941  0076                     ?_atoi:	
  2942  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2943                           ; 2 bytes @ 0x6
  2944                           
  2945  0076                     can_set_sid@sidl:	
  2946                           ; 1 bytes @ 0x6
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0x6
  2950  0076                     	ds	1
  2951  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2952  0077                     ___lwdiv@counter:	
  2953                           ; 1 bytes @ 0x7
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x7
  2957  0077                     	ds	1
  2958  0078                     ??_atoi:	
  2959  0078                     ?_SPI_exchange:	
  2960                           ; 1 bytes @ 0x8
  2961                           
  2962  0078                     ?___lwmod:	
  2963                           ; 1 bytes @ 0x8
  2964                           
  2965  0078                     SPI_exchange@len:	
  2966                           ; 2 bytes @ 0x8
  2967                           
  2968  0078                     ___lwmod@divisor:	
  2969                           ; 1 bytes @ 0x8
  2970                           
  2971                           
  2972                           ; 2 bytes @ 0x8
  2973  0078                     	ds	1
  2974  0079                     ??_SPI_exchange:	
  2975                           
  2976                           ; 1 bytes @ 0x9
  2977  0079                     	ds	1
  2978  007A                     atoi@sign:	
  2979  007A                     ___lwmod@dividend:	
  2980                           ; 1 bytes @ 0xA
  2981                           
  2982                           
  2983                           ; 2 bytes @ 0xA
  2984  007A                     	ds	1
  2985  007B                     atoi@a:	
  2986                           
  2987                           ; 2 bytes @ 0xB
  2988  007B                     	ds	1
  2989  007C                     ??___lwmod:	
  2990  007C                     SPI_exchange@bytes_written:	
  2991                           ; 1 bytes @ 0xC
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0xC
  2995  007C                     	ds	1
  2996  007D                     SPI_exchange@buf:	
  2997  007D                     atoi@s:	
  2998                           ; 1 bytes @ 0xD
  2999                           
  3000  007D                     ___lwmod@counter:	
  3001                           ; 1 bytes @ 0xD
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0xD
  3005  007D                     	ds	1
  3006                           
  3007                           	psect	cstackBANK0
  3008  0020                     __pcstackBANK0:	
  3009  0020                     ??_abort_pending_transmissions:	
  3010  0020                     ??_txf_clear:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0020                     ??_read_register:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016                           
  3017                           ; 1 bytes @ 0x0
  3018  0020                     	ds	1
  3019  0021                     read_register@addr:	
  3020                           
  3021                           ; 1 bytes @ 0x1
  3022  0021                     	ds	1
  3023  0022                     ?_printf:	
  3024  0022                     abort_pending_transmissions@bytes_written:	
  3025                           ; 2 bytes @ 0x2
  3026                           
  3027  0022                     txf_clear@mask:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     printf@f:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033                           
  3034                           ; 2 bytes @ 0x2
  3035  0022                     	ds	1
  3036  0023                     txf_clear@bytes_written:	
  3037                           
  3038                           ; 1 bytes @ 0x3
  3039  0023                     	ds	1
  3040  0024                     txf_clear@n:	
  3041                           
  3042                           ; 1 bytes @ 0x4
  3043  0024                     	ds	12
  3044  0030                     ??_printf:	
  3045                           
  3046                           ; 1 bytes @ 0x10
  3047  0030                     	ds	4
  3048  0034                     _printf$624:	
  3049                           
  3050                           ; 2 bytes @ 0x14
  3051  0034                     	ds	2
  3052  0036                     printf@idx:	
  3053                           
  3054                           ; 1 bytes @ 0x16
  3055  0036                     	ds	1
  3056  0037                     printf@prec:	
  3057                           
  3058                           ; 1 bytes @ 0x17
  3059  0037                     	ds	1
  3060  0038                     printf@cp:	
  3061                           
  3062                           ; 2 bytes @ 0x18
  3063  0038                     	ds	2
  3064  003A                     printf@len:	
  3065                           
  3066                           ; 2 bytes @ 0x1A
  3067  003A                     	ds	2
  3068  003C                     printf@ap:	
  3069                           
  3070                           ; 1 bytes @ 0x1C
  3071  003C                     	ds	1
  3072  003D                     printf@val:	
  3073                           
  3074                           ; 2 bytes @ 0x1D
  3075  003D                     	ds	2
  3076  003F                     printf@flag:	
  3077                           
  3078                           ; 1 bytes @ 0x1F
  3079  003F                     	ds	1
  3080  0040                     printf@width:	
  3081                           
  3082                           ; 2 bytes @ 0x20
  3083  0040                     	ds	2
  3084  0042                     printf@c:	
  3085                           
  3086                           ; 1 bytes @ 0x22
  3087  0042                     	ds	1
  3088  0043                     ??_can_ope_mode:	
  3089  0043                     ??_can_dump_masks_and_filters:	
  3090                           ; 1 bytes @ 0x23
  3091                           
  3092  0043                     ??_can_dump_registers:	
  3093                           ; 1 bytes @ 0x23
  3094                           
  3095  0043                     ?_can_send:	
  3096                           ; 1 bytes @ 0x23
  3097                           
  3098  0043                     ?_receive_handler:	
  3099                           ; 1 bytes @ 0x23
  3100                           
  3101  0043                     receive_handler@sid:	
  3102                           ; 1 bytes @ 0x23
  3103                           
  3104  0043                     can_send@dlc:	
  3105                           ; 1 bytes @ 0x23
  3106                           
  3107                           
  3108                           ; 1 bytes @ 0x23
  3109  0043                     	ds	1
  3110  0044                     ??_can_send:	
  3111  0044                     receive_handler@pbuf:	
  3112                           ; 1 bytes @ 0x24
  3113                           
  3114                           
  3115                           ; 1 bytes @ 0x24
  3116  0044                     	ds	1
  3117  0045                     receive_handler@dlc:	
  3118  0045                     can_ope_mode@bytes_written:	
  3119                           ; 1 bytes @ 0x25
  3120                           
  3121                           
  3122                           ; 1 bytes @ 0x25
  3123  0045                     	ds	1
  3124  0046                     ??_receive_handler:	
  3125  0046                     can_ope_mode@ope_mode:	
  3126                           ; 1 bytes @ 0x26
  3127                           
  3128                           
  3129                           ; 1 bytes @ 0x26
  3130  0046                     	ds	1
  3131  0047                     ?_can_init:	
  3132  0047                     ??_can_abort:	
  3133                           ; 1 bytes @ 0x27
  3134                           
  3135  0047                     ??_can_baudrate:	
  3136                           ; 1 bytes @ 0x27
  3137                           
  3138  0047                     ?_can_set_mask:	
  3139                           ; 1 bytes @ 0x27
  3140                           
  3141  0047                     can_set_mask@n:	
  3142                           ; 1 bytes @ 0x27
  3143                           
  3144  0047                     can_init@receive_handler:	
  3145                           ; 1 bytes @ 0x27
  3146                           
  3147                           
  3148                           ; 2 bytes @ 0x27
  3149  0047                     	ds	1
  3150  0048                     can_send@len:	
  3151  0048                     can_abort@bytes_written:	
  3152                           ; 1 bytes @ 0x28
  3153                           
  3154  0048                     can_set_mask@mask:	
  3155                           ; 1 bytes @ 0x28
  3156                           
  3157                           
  3158                           ; 2 bytes @ 0x28
  3159  0048                     	ds	1
  3160  0049                     ??_can_init:	
  3161  0049                     receive_handler@i:	
  3162                           ; 1 bytes @ 0x29
  3163                           
  3164  0049                     can_send@bytes_written:	
  3165                           ; 1 bytes @ 0x29
  3166                           
  3167  0049                     can_baudrate@bpr:	
  3168                           ; 1 bytes @ 0x29
  3169                           
  3170                           
  3171                           ; 1 bytes @ 0x29
  3172  0049                     	ds	1
  3173  004A                     ??_can_set_mask:	
  3174  004A                     ??_receive:	
  3175                           ; 1 bytes @ 0x2A
  3176                           
  3177  004A                     can_send@status:	
  3178                           ; 1 bytes @ 0x2A
  3179                           
  3180  004A                     can_baudrate@mask:	
  3181                           ; 1 bytes @ 0x2A
  3182                           
  3183                           
  3184                           ; 1 bytes @ 0x2A
  3185  004A                     	ds	1
  3186  004B                     can_send@data_buf:	
  3187  004B                     can_baudrate@bytes_written:	
  3188                           ; 1 bytes @ 0x2B
  3189                           
  3190                           
  3191                           ; 1 bytes @ 0x2B
  3192  004B                     	ds	1
  3193  004C                     can_send@i:	
  3194                           
  3195                           ; 1 bytes @ 0x2C
  3196  004C                     	ds	1
  3197  004D                     can_send@n:	
  3198  004D                     can_dump_masks_and_filters@h:	
  3199                           ; 1 bytes @ 0x2D
  3200                           
  3201                           
  3202                           ; 1 bytes @ 0x2D
  3203  004D                     	ds	1
  3204  004E                     can_dump_masks_and_filters@l:	
  3205                           
  3206                           ; 1 bytes @ 0x2E
  3207  004E                     	ds	1
  3208  004F                     receive@bytes_read:	
  3209  004F                     can_dump_masks_and_filters@m:	
  3210                           ; 1 bytes @ 0x2F
  3211                           
  3212                           
  3213                           ; 2 bytes @ 0x2F
  3214  004F                     	ds	1
  3215  0050                     _can_set_mask$508:	
  3216  0050                     receive@rx_buf:	
  3217                           ; 2 bytes @ 0x30
  3218                           
  3219                           
  3220                           ; 15 bytes @ 0x30
  3221  0050                     	ds	1
  3222  0051                     can_dump_masks_and_filters@i:	
  3223                           
  3224                           ; 1 bytes @ 0x31
  3225  0051                     	ds	1
  3226  0052                     can_set_mask@cmd:	
  3227                           
  3228                           ; 1 bytes @ 0x32
  3229  0052                     	ds	1
  3230  0053                     can_set_mask@mask_sidh:	
  3231                           
  3232                           ; 1 bytes @ 0x33
  3233  0053                     	ds	1
  3234  0054                     can_set_mask@mask_sidl:	
  3235                           
  3236                           ; 1 bytes @ 0x34
  3237  0054                     	ds	11
  3238  005F                     receive@pbuf:	
  3239                           
  3240                           ; 1 bytes @ 0x3F
  3241  005F                     	ds	1
  3242  0060                     receive@id:	
  3243                           
  3244                           ; 2 bytes @ 0x40
  3245  0060                     	ds	2
  3246  0062                     receive@dlc:	
  3247                           
  3248                           ; 1 bytes @ 0x42
  3249  0062                     	ds	1
  3250  0063                     receive@n:	
  3251                           
  3252                           ; 1 bytes @ 0x43
  3253  0063                     	ds	1
  3254  0064                     ??_can_status_check:	
  3255                           
  3256                           ; 1 bytes @ 0x44
  3257  0064                     	ds	2
  3258  0066                     can_status_check@bytes_written:	
  3259                           
  3260                           ; 1 bytes @ 0x46
  3261  0066                     	ds	1
  3262  0067                     can_status_check@status:	
  3263                           
  3264                           ; 1 bytes @ 0x47
  3265  0067                     	ds	1
  3266  0068                     ??_main:	
  3267                           
  3268                           ; 1 bytes @ 0x48
  3269  0068                     	ds	2
  3270                           
  3271                           	psect	maintext
  3272  03A2                     __pmaintext:	
  3273 ;;
  3274 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3275 ;;
  3276 ;; *************** function _main *****************
  3277 ;; Defined at:
  3278 ;;		line 46 in file "main.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  status          1    2[BANK1 ] unsigned char 
  3283 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3284 ;;  mask            2    3[BANK1 ] unsigned int 
  3285 ;;  idx             1   18[BANK1 ] unsigned char 
  3286 ;;  cmd             1   17[BANK1 ] unsigned char 
  3287 ;;  c               1   16[BANK1 ] unsigned char 
  3288 ;;  n               1    6[BANK1 ] unsigned char 
  3289 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3290 ;;  bpr             1    1[BANK1 ] unsigned char 
  3291 ;;  sid             1    0[BANK1 ] unsigned char 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : B1F/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3302 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;Total ram usage:       21 bytes
  3306 ;; Hardware stack levels required when called:    6
  3307 ;; This function calls:
  3308 ;;		_EUSART_Read
  3309 ;;		_SYSTEM_Initialize
  3310 ;;		_atoi
  3311 ;;		_can_abort
  3312 ;;		_can_baudrate
  3313 ;;		_can_dump_masks_and_filters
  3314 ;;		_can_dump_registers
  3315 ;;		_can_init
  3316 ;;		_can_logging_mode
  3317 ;;		_can_ope_mode
  3318 ;;		_can_send
  3319 ;;		_can_set_mask
  3320 ;;		_can_set_sid
  3321 ;;		_can_status_check
  3322 ;;		_printf
  3323 ;; This function is called by:
  3324 ;;		Startup code after reset
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _main
  3330  03A2                     _main:	
  3331                           
  3332                           ;main.c: 48: LATCbits.LATC3 = 1;
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3336  03A2  0022               	movlb	2	; select bank2
  3337  03A3  158E               	bsf	14,3	;volatile
  3338                           
  3339                           ;main.c: 50: uint8_t buf[9];
  3340                           ;main.c: 51: bool echo_back = 0;
  3341  03A4  0021               	movlb	1	; select bank1
  3342  03A5  01C9               	clrf	main@echo_back^(0+128)
  3343                           
  3344                           ;main.c: 52: uint8_t c, idx;
  3345                           ;main.c: 54: uint8_t cmd, sid, n, bpr;
  3346                           ;main.c: 55: uint16_t mask;
  3347                           ;main.c: 57: SYSTEM_Initialize();
  3348  03A6  318B  233C  3183   	fcall	_SYSTEM_Initialize
  3349                           
  3350                           ;main.c: 62: output_format.with_sid = 0;
  3351  03A9  0020               	movlb	0	; select bank0
  3352  03AA  01EC               	clrf	_output_format
  3353                           
  3354                           ;main.c: 63: output_format.hex_output = 0;
  3355  03AB  01ED               	clrf	_output_format+1
  3356                           
  3357                           ;main.c: 64: can_init(receive_handler);
  3358  03AC  30C0               	movlw	low _receive_handler
  3359  03AD  00C7               	movwf	can_init@receive_handler
  3360  03AE  300D               	movlw	high _receive_handler
  3361  03AF  00C8               	movwf	can_init@receive_handler+1
  3362  03B0  318E  261B  3183   	fcall	_can_init
  3363  03B3                     L1:	
  3364                           
  3365                           ;main.c: 66: idx = 0;
  3366  03B3  0021               	movlb	1	; select bank1
  3367  03B4  01D6               	clrf	main@idx^(0+128)
  3368  03B5                     l2682:	
  3369                           ;main.c: 68: while (1)
  3370                           
  3371                           
  3372                           ;main.c: 69: {
  3373                           ;main.c: 70: bool status = can_status_check();
  3374  03B5  318D  2513  3183   	fcall	_can_status_check
  3375  03B8  0020               	movlb	0	; select bank0
  3376  03B9  00E8               	movwf	??_main
  3377  03BA  0868               	movf	??_main,w
  3378  03BB  0021               	movlb	1	; select bank1
  3379  03BC  00C6               	movwf	main@status^(0+128)
  3380                           
  3381                           ;main.c: 71: if (status) {
  3382  03BD  0846               	movf	main@status^(0+128),w
  3383  03BE  1903               	btfsc	3,2
  3384  03BF  2BC3               	goto	l204
  3385                           
  3386                           ;main.c: 72: LATCbits.LATC3 = 0;
  3387  03C0  0022               	movlb	2	; select bank2
  3388  03C1  118E               	bcf	14,3	;volatile
  3389                           
  3390                           ;main.c: 73: } else {
  3391  03C2  2BC5               	goto	l205
  3392  03C3                     l204:	
  3393                           
  3394                           ;main.c: 74: LATCbits.LATC3 = 1;
  3395  03C3  0022               	movlb	2	; select bank2
  3396  03C4  158E               	bsf	14,3	;volatile
  3397  03C5                     l205:	
  3398                           
  3399                           ;main.c: 75: }
  3400                           ;main.c: 76: if ((PIR1bits.RCIF)) {
  3401  03C5  0020               	movlb	0	; select bank0
  3402  03C6  1E91               	btfss	17,5	;volatile
  3403  03C7  2BB5               	goto	l2682
  3404                           
  3405                           ;main.c: 77: c = EUSART_Read();
  3406  03C8  318B  231C  3183   	fcall	_EUSART_Read
  3407  03CB  0020               	movlb	0	; select bank0
  3408  03CC  00E8               	movwf	??_main
  3409  03CD  0868               	movf	??_main,w
  3410  03CE  0021               	movlb	1	; select bank1
  3411  03CF  00D4               	movwf	main@c^(0+128)
  3412                           
  3413                           ;main.c: 78: if (echo_back) printf("%c", c);
  3414  03D0  0849               	movf	main@echo_back^(0+128),w
  3415  03D1  1903               	btfsc	3,2
  3416  03D2  2BE4               	goto	l2694
  3417  03D3  30B0               	movlw	low (STR_6| (0+32768))
  3418  03D4  0020               	movlb	0	; select bank0
  3419  03D5  00A2               	movwf	printf@f
  3420  03D6  3094               	movlw	high (STR_6| (0+32768))
  3421  03D7  00A3               	movwf	printf@f+1
  3422  03D8  0021               	movlb	1	; select bank1
  3423  03D9  0854               	movf	main@c^(0+128),w
  3424  03DA  0020               	movlb	0	; select bank0
  3425  03DB  00E8               	movwf	??_main
  3426  03DC  01E9               	clrf	??_main+1
  3427  03DD  0868               	movf	??_main,w
  3428  03DE  00A4               	movwf	?_printf+2
  3429  03DF  0869               	movf	??_main+1,w
  3430  03E0  00A5               	movwf	?_printf+3
  3431  03E1  3185  25A5  3183   	fcall	_printf
  3432  03E4                     l2694:	
  3433                           
  3434                           ;main.c: 80: buf[idx] = c;
  3435  03E4  0021               	movlb	1	; select bank1
  3436  03E5  0854               	movf	main@c^(0+128),w
  3437  03E6  0020               	movlb	0	; select bank0
  3438  03E7  00E8               	movwf	??_main
  3439  03E8  0021               	movlb	1	; select bank1
  3440  03E9  0856               	movf	main@idx^(0+128),w
  3441  03EA  3ECB               	addlw	(low (main@buf| 0))& (0+255)
  3442  03EB  0086               	movwf	6
  3443  03EC  0187               	clrf	7
  3444  03ED  0020               	movlb	0	; select bank0
  3445  03EE  0868               	movf	??_main,w
  3446  03EF  0081               	movwf	1
  3447                           
  3448                           ;main.c: 81: if (c == '\n') {
  3449  03F0  300A               	movlw	10
  3450  03F1  0021               	movlb	1	; select bank1
  3451  03F2  0654               	xorwf	main@c^(0+128),w
  3452  03F3  1D03               	btfss	3,2
  3453  03F4  2D82               	goto	l2790
  3454                           
  3455                           ;main.c: 82: buf[idx] = '\0';
  3456  03F5  0856               	movf	main@idx^(0+128),w
  3457  03F6  3ECB               	addlw	(low (main@buf| 0))& (0+255)
  3458  03F7  0086               	movwf	6
  3459  03F8  0187               	clrf	7
  3460  03F9  0181               	clrf	1
  3461                           
  3462                           ;main.c: 83: if (buf[0] == '@') {
  3463  03FA  3040               	movlw	64
  3464  03FB  064B               	xorwf	main@buf^(0+128),w
  3465  03FC  1D03               	btfss	3,2
  3466  03FD  2D78               	goto	l2786
  3467                           
  3468                           ;main.c: 84: cmd = buf[1];
  3469  03FE  084C               	movf	(main@buf^(0+128)+1),w
  3470  03FF  0020               	movlb	0	; select bank0
  3471  0400  00E8               	movwf	??_main
  3472  0401  0868               	movf	??_main,w
  3473  0402  0021               	movlb	1	; select bank1
  3474  0403  00D5               	movwf	main@cmd^(0+128)
  3475                           
  3476                           ;main.c: 85: switch(cmd) {
  3477  0404  2D53               	goto	l2784
  3478  0405                     l2704:	
  3479                           ;main.c: 86: case 'i':
  3480                           
  3481                           
  3482                           ;main.c: 87: sid = (uint8_t)atoi(&buf[2]);
  3483  0405  30CD               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3484  0406  3180  2012  3183   	fcall	_atoi
  3485  0409  0876               	movf	?_atoi,w
  3486  040A  0020               	movlb	0	; select bank0
  3487  040B  00E8               	movwf	??_main
  3488  040C  0868               	movf	??_main,w
  3489  040D  0021               	movlb	1	; select bank1
  3490  040E  00C4               	movwf	main@sid^(0+128)
  3491                           
  3492                           ;main.c: 88: can_set_sid(sid);
  3493  040F  0844               	movf	main@sid^(0+128),w
  3494  0410  0020               	movlb	0	; select bank0
  3495  0411  00E8               	movwf	??_main
  3496  0412  01E9               	clrf	??_main+1
  3497  0413  0868               	movf	??_main,w
  3498  0414  00F0               	movwf	can_set_sid@can_node
  3499  0415  0869               	movf	??_main+1,w
  3500  0416  00F1               	movwf	can_set_sid@can_node+1
  3501  0417  318B  23BA  3183   	fcall	_can_set_sid
  3502                           
  3503                           ;main.c: 89: break;
  3504  041A  2BB3               	goto	L1
  3505  041B                     l2708:	
  3506                           ;main.c: 90: case 'v':
  3507                           
  3508                           
  3509                           ;main.c: 91: if (buf[2] == 'd') {
  3510  041B  3064               	movlw	100
  3511  041C  0021               	movlb	1	; select bank1
  3512  041D  064D               	xorwf	(main@buf^(0+128)+2),w
  3513  041E  1D03               	btfss	3,2
  3514  041F  2C24               	goto	l2714
  3515                           
  3516                           ;main.c: 92: can_logging_mode(1, 1);
  3517  0420  01F0               	clrf	can_logging_mode@verbose
  3518  0421  0AF0               	incf	can_logging_mode@verbose,f
  3519  0422  3001               	movlw	1
  3520  0423  2C2B               	goto	L2
  3521  0424                     l2714:	
  3522                           ;main.c: 94: } else if (buf[2] == 'v') {
  3523                           
  3524                           ;main.c: 93: echo_back = 1;
  3525                           
  3526  0424  3076               	movlw	118
  3527  0425  064D               	xorwf	(main@buf^(0+128)+2),w
  3528  0426  1D03               	btfss	3,2
  3529  0427  2C32               	goto	l2720
  3530                           
  3531                           ;main.c: 95: can_logging_mode(0, 1);
  3532  0428  01F0               	clrf	can_logging_mode@verbose
  3533  0429  0AF0               	incf	can_logging_mode@verbose,f
  3534  042A  3000               	movlw	0
  3535  042B                     L2:	
  3536  042B  318B  2331  3183   	fcall	_can_logging_mode
  3537                           
  3538                           ;main.c: 96: echo_back = 1;
  3539  042E  0021               	movlb	1	; select bank1
  3540  042F  01C9               	clrf	main@echo_back^(0+128)
  3541  0430  0AC9               	incf	main@echo_back^(0+128),f
  3542                           
  3543                           ;main.c: 97: } else if (buf[2] == 'n') {
  3544  0431  2BB3               	goto	L1
  3545  0432                     l2720:	
  3546  0432  306E               	movlw	110
  3547  0433  064D               	xorwf	(main@buf^(0+128)+2),w
  3548  0434  1D03               	btfss	3,2
  3549  0435  2BB3               	goto	L1
  3550                           
  3551                           ;main.c: 98: can_logging_mode(0, 0);
  3552  0436  01F0               	clrf	can_logging_mode@verbose
  3553  0437  3000               	movlw	0
  3554  0438  318B  2331  3183   	fcall	_can_logging_mode
  3555                           
  3556                           ;main.c: 99: echo_back = 0;
  3557  043B  0021               	movlb	1	; select bank1
  3558  043C  01C9               	clrf	main@echo_back^(0+128)
  3559                           
  3560                           ;main.c: 100: }
  3561                           ;main.c: 101: break;
  3562  043D  2BB3               	goto	L1
  3563  043E                     l2726:	
  3564                           ;main.c: 102: case 'o':
  3565                           
  3566                           
  3567                           ;main.c: 103: if (buf[2] == 'l') {
  3568  043E  306C               	movlw	108
  3569  043F  064D               	xorwf	(main@buf^(0+128)+2),w
  3570  0440  1D03               	btfss	3,2
  3571  0441  2C44               	goto	l2730
  3572                           
  3573                           ;main.c: 104: can_ope_mode(0b01000000u);
  3574  0442  3040               	movlw	64
  3575  0443  2C4A               	goto	L3
  3576  0444                     l2730:	
  3577                           ;main.c: 105: } else if (buf[2] == 'n') {
  3578                           
  3579  0444  306E               	movlw	110
  3580  0445  0021               	movlb	1	; select bank1
  3581  0446  064D               	xorwf	(main@buf^(0+128)+2),w
  3582  0447  1D03               	btfss	3,2
  3583  0448  2C4D               	goto	l2734
  3584                           
  3585                           ;main.c: 106: can_ope_mode(0b00000000u);
  3586  0449  3000               	movlw	0
  3587  044A                     L3:	
  3588  044A  318D  2569  3183   	fcall	_can_ope_mode
  3589  044D                     l2734:	
  3590                           
  3591                           ;main.c: 107: }
  3592                           ;main.c: 108: if (buf[3] == '\0') {
  3593  044D  0021               	movlb	1	; select bank1
  3594  044E  084E               	movf	(main@buf^(0+128)+3),w
  3595  044F  1D03               	btfss	3,2
  3596  0450  2C54               	goto	l2738
  3597                           
  3598                           ;main.c: 109: output_format.with_sid = 0;
  3599  0451  0020               	movlb	0	; select bank0
  3600  0452  01EC               	clrf	_output_format
  3601  0453  2C5F               	goto	l2744
  3602  0454                     l2738:	
  3603                           ;main.c: 111: } else if (buf[3] == 's' && buf[4] == '\0') {
  3604                           
  3605                           ;main.c: 110: output_format.hex_output = 0;
  3606                           
  3607  0454  3073               	movlw	115
  3608  0455  0021               	movlb	1	; select bank1
  3609  0456  064E               	xorwf	(main@buf^(0+128)+3),w
  3610  0457  1D03               	btfss	3,2
  3611  0458  2C61               	goto	l2746
  3612  0459  084F               	movf	(main@buf^(0+128)+4),w
  3613  045A  1D03               	btfss	3,2
  3614  045B  2C61               	goto	l2746
  3615                           
  3616                           ;main.c: 112: output_format.with_sid = 1;
  3617  045C  0020               	movlb	0	; select bank0
  3618  045D  01EC               	clrf	_output_format
  3619  045E  0AEC               	incf	_output_format,f
  3620  045F                     l2744:	
  3621                           
  3622                           ;main.c: 113: output_format.hex_output = 0;
  3623  045F  01ED               	clrf	_output_format+1
  3624                           
  3625                           ;main.c: 114: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3626  0460  2BB3               	goto	L1
  3627  0461                     l2746:	
  3628  0461  3068               	movlw	104
  3629  0462  0021               	movlb	1	; select bank1
  3630  0463  064E               	xorwf	(main@buf^(0+128)+3),w
  3631  0464  1D03               	btfss	3,2
  3632  0465  2BB3               	goto	L1
  3633  0466  084F               	movf	(main@buf^(0+128)+4),w
  3634  0467  1D03               	btfss	3,2
  3635  0468  2BB3               	goto	L1
  3636                           
  3637                           ;main.c: 115: output_format.with_sid = 0;
  3638  0469  0020               	movlb	0	; select bank0
  3639  046A  01EC               	clrf	_output_format
  3640                           
  3641                           ;main.c: 116: output_format.hex_output = 1;
  3642  046B  01ED               	clrf	_output_format+1
  3643  046C  0AED               	incf	_output_format+1,f
  3644                           
  3645                           ;main.c: 117: }
  3646                           ;main.c: 118: break;
  3647  046D  2BB3               	goto	L1
  3648  046E                     l2754:	
  3649                           ;main.c: 119: case 'b':
  3650                           
  3651                           
  3652                           ;main.c: 120: can_abort();
  3653  046E  318B  234B  3183   	fcall	_can_abort
  3654                           
  3655                           ;main.c: 121: bpr = (uint8_t)atoi(&buf[2]);
  3656  0471  30CD               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3657  0472  3180  2012  3183   	fcall	_atoi
  3658  0475  0876               	movf	?_atoi,w
  3659  0476  0020               	movlb	0	; select bank0
  3660  0477  00E8               	movwf	??_main
  3661  0478  0868               	movf	??_main,w
  3662  0479  0021               	movlb	1	; select bank1
  3663  047A  00C5               	movwf	main@bpr^(0+128)
  3664                           
  3665                           ;main.c: 122: can_baudrate(bpr);
  3666  047B  0845               	movf	main@bpr^(0+128),w
  3667  047C  318C  245E  3183   	fcall	_can_baudrate
  3668                           
  3669                           ;main.c: 123: break;
  3670  047F  2BB3               	goto	L1
  3671  0480                     l2760:	
  3672                           ;main.c: 124: case 'm':
  3673                           
  3674                           
  3675                           ;main.c: 125: case 'f':
  3676                           ;main.c: 126: n = buf[2] - 0x30u;
  3677  0480  0021               	movlb	1	; select bank1
  3678  0481  084D               	movf	(main@buf^(0+128)+2),w
  3679  0482  3ED0               	addlw	208
  3680  0483  0020               	movlb	0	; select bank0
  3681  0484  00E8               	movwf	??_main
  3682  0485  0868               	movf	??_main,w
  3683  0486  0021               	movlb	1	; select bank1
  3684  0487  00CA               	movwf	main@n^(0+128)
  3685                           
  3686                           ;main.c: 127: mask = (uint16_t)atoi(&buf[3]);
  3687  0488  30CE               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3688  0489  3180  2012  3183   	fcall	_atoi
  3689  048C  0877               	movf	?_atoi+1,w
  3690  048D  0021               	movlb	1	; select bank1
  3691  048E  00C8               	movwf	(main@mask+1)^(0+128)
  3692  048F  0876               	movf	?_atoi,w
  3693  0490  00C7               	movwf	main@mask^(0+128)
  3694                           
  3695                           ;main.c: 128: if (cmd == 'm') {
  3696  0491  306D               	movlw	109
  3697  0492  0655               	xorwf	main@cmd^(0+128),w
  3698  0493  1D03               	btfss	3,2
  3699  0494  2CA7               	goto	l2768
  3700                           
  3701                           ;main.c: 129: can_set_mask(0u, n, mask);
  3702  0495  084A               	movf	main@n^(0+128),w
  3703  0496  0020               	movlb	0	; select bank0
  3704  0497  00E8               	movwf	??_main
  3705  0498  0868               	movf	??_main,w
  3706  0499  00C7               	movwf	can_set_mask@n
  3707  049A  0021               	movlb	1	; select bank1
  3708  049B  0848               	movf	(main@mask+1)^(0+128),w
  3709  049C  0020               	movlb	0	; select bank0
  3710  049D  00C9               	movwf	can_set_mask@mask+1
  3711  049E  0021               	movlb	1	; select bank1
  3712  049F  0847               	movf	main@mask^(0+128),w
  3713  04A0  0020               	movlb	0	; select bank0
  3714  04A1  00C8               	movwf	can_set_mask@mask
  3715  04A2  3000               	movlw	0
  3716  04A3  318E  26A6  3183   	fcall	_can_set_mask
  3717                           
  3718                           ;main.c: 130: } else if (cmd == 'f') {
  3719  04A6  2BB3               	goto	L1
  3720  04A7                     l2768:	
  3721  04A7  3066               	movlw	102
  3722  04A8  0021               	movlb	1	; select bank1
  3723  04A9  0655               	xorwf	main@cmd^(0+128),w
  3724  04AA  1D03               	btfss	3,2
  3725  04AB  2BB3               	goto	L1
  3726                           
  3727                           ;main.c: 131: can_set_mask(1u, n, mask);
  3728  04AC  084A               	movf	main@n^(0+128),w
  3729  04AD  0020               	movlb	0	; select bank0
  3730  04AE  00E8               	movwf	??_main
  3731  04AF  0868               	movf	??_main,w
  3732  04B0  00C7               	movwf	can_set_mask@n
  3733  04B1  0021               	movlb	1	; select bank1
  3734  04B2  0848               	movf	(main@mask+1)^(0+128),w
  3735  04B3  0020               	movlb	0	; select bank0
  3736  04B4  00C9               	movwf	can_set_mask@mask+1
  3737  04B5  0021               	movlb	1	; select bank1
  3738  04B6  0847               	movf	main@mask^(0+128),w
  3739  04B7  0020               	movlb	0	; select bank0
  3740  04B8  00C8               	movwf	can_set_mask@mask
  3741  04B9  3001               	movlw	1
  3742  04BA  318E  26A6  3183   	fcall	_can_set_mask
  3743                           
  3744                           ;main.c: 132: }
  3745                           ;main.c: 133: break;
  3746  04BD  2BB3               	goto	L1
  3747  04BE                     l2772:	
  3748                           ;main.c: 134: case 'a':
  3749                           
  3750                           
  3751                           ;main.c: 135: can_abort();
  3752  04BE  318B  234B  3183   	fcall	_can_abort
  3753                           
  3754                           ;main.c: 136: break;
  3755  04C1  2BB3               	goto	L1
  3756  04C2                     l2774:	
  3757                           ;main.c: 137: case 'F':
  3758                           
  3759                           
  3760                           ;main.c: 138: can_dump_masks_and_filters();
  3761  04C2  3180  2079  3183   	fcall	_can_dump_masks_and_filters
  3762                           
  3763                           ;main.c: 139: break;
  3764  04C5  2BB3               	goto	L1
  3765  04C6                     l2776:	
  3766                           ;main.c: 140: case 'd':
  3767                           
  3768                           
  3769                           ;main.c: 141: can_dump_registers();
  3770  04C6  3181  2145  3183   	fcall	_can_dump_registers
  3771                           
  3772                           ;main.c: 142: break;
  3773  04C9  2BB3               	goto	L1
  3774  04CA                     l2778:	
  3775                           ;main.c: 143: case '@':
  3776                           
  3777                           
  3778                           ;main.c: 144: can_send(&buf[1], idx - 1u);
  3779  04CA  0021               	movlb	1	; select bank1
  3780  04CB  0856               	movf	main@idx^(0+128),w
  3781  04CC  3EFF               	addlw	255
  3782  04CD  0020               	movlb	0	; select bank0
  3783  04CE  00E8               	movwf	??_main
  3784  04CF  0868               	movf	??_main,w
  3785  04D0  00C3               	movwf	can_send@dlc
  3786  04D1  30CC               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3787  04D2  3182  2255  3183   	fcall	_can_send
  3788                           
  3789                           ;main.c: 145: break;
  3790  04D5  2BB3               	goto	L1
  3791  04D6                     l2780:	
  3792                           ;main.c: 146: case 'h':
  3793                           
  3794                           
  3795                           ;main.c: 147: printf("/// UART2CAN HELP (version %s) ///\n", "0.11  March 19, 2018");
  3796  04D6  3012               	movlw	low (STR_7| (0+32768))
  3797  04D7  0020               	movlb	0	; select bank0
  3798  04D8  00A2               	movwf	printf@f
  3799  04D9  3092               	movlw	high (STR_7| (0+32768))
  3800  04DA  00A3               	movwf	printf@f+1
  3801  04DB  30DD               	movlw	low (STR_8| (0+32768))
  3802  04DC  00A4               	movwf	low ((?_printf| 0+2))
  3803  04DD  3092               	movlw	high (STR_8| (0+32768))
  3804  04DE  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3805  04DF  3185  25A5  3183   	fcall	_printf
  3806                           
  3807                           ;main.c: 148: printf("[Set standard identifier] @i<standard identifier>\n");
  3808  04E2  30E5               	movlw	low (STR_9| (0+32768))
  3809  04E3  0020               	movlb	0	; select bank0
  3810  04E4  00A2               	movwf	printf@f
  3811  04E5  3090               	movlw	high (STR_9| (0+32768))
  3812  04E6  00A3               	movwf	printf@f+1
  3813  04E7  3185  25A5  3183   	fcall	_printf
  3814                           
  3815                           ;main.c: 149: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3816  04EA  3001               	movlw	low (STR_10| (0+32768))
  3817  04EB  0020               	movlb	0	; select bank0
  3818  04EC  00A2               	movwf	printf@f
  3819  04ED  3090               	movlw	high (STR_10| (0+32768))
  3820  04EE  00A3               	movwf	printf@f+1
  3821  04EF  3185  25A5  3183   	fcall	_printf
  3822                           
  3823                           ;main.c: 150: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3824  04F2  30AF               	movlw	low (STR_11| (0+32768))
  3825  04F3  0020               	movlb	0	; select bank0
  3826  04F4  00A2               	movwf	printf@f
  3827  04F5  3090               	movlw	high (STR_11| (0+32768))
  3828  04F6  00A3               	movwf	printf@f+1
  3829  04F7  3185  25A5  3183   	fcall	_printf
  3830                           
  3831                           ;main.c: 151: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3832  04FA  303C               	movlw	low (STR_12| (0+32768))
  3833  04FB  0020               	movlb	0	; select bank0
  3834  04FC  00A2               	movwf	printf@f
  3835  04FD  3090               	movlw	high (STR_12| (0+32768))
  3836  04FE  00A3               	movwf	printf@f+1
  3837  04FF  3185  25A5  3183   	fcall	_printf
  3838                           
  3839                           ;main.c: 152: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3840  0502  30C6               	movlw	low (STR_13| (0+32768))
  3841  0503  0020               	movlb	0	; select bank0
  3842  0504  00A2               	movwf	printf@f
  3843  0505  3091               	movlw	high (STR_13| (0+32768))
  3844  0506  00A3               	movwf	printf@f+1
  3845  0507  3185  25A5  3183   	fcall	_printf
  3846                           
  3847                           ;main.c: 153: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3848  050A  309C               	movlw	low (STR_14| (0+32768))
  3849  050B  0020               	movlb	0	; select bank0
  3850  050C  00A2               	movwf	printf@f
  3851  050D  3091               	movlw	high (STR_14| (0+32768))
  3852  050E  00A3               	movwf	printf@f+1
  3853  050F  3185  25A5  3183   	fcall	_printf
  3854                           
  3855                           ;main.c: 154: printf("[Set baud rate] @b<bpr>\n");
  3856  0512  306D               	movlw	low (STR_15| (0+32768))
  3857  0513  0020               	movlb	0	; select bank0
  3858  0514  00A2               	movwf	printf@f
  3859  0515  3092               	movlw	high (STR_15| (0+32768))
  3860  0516  00A3               	movwf	printf@f+1
  3861  0517  3185  25A5  3183   	fcall	_printf
  3862                           
  3863                           ;main.c: 155: printf("[Abort all pending transmissions] @a\n");
  3864  051A  30EC               	movlw	low (STR_16| (0+32768))
  3865  051B  0020               	movlb	0	; select bank0
  3866  051C  00A2               	movwf	printf@f
  3867  051D  3091               	movlw	high (STR_16| (0+32768))
  3868  051E  00A3               	movwf	printf@f+1
  3869  051F  3185  25A5  3183   	fcall	_printf
  3870                           
  3871                           ;main.c: 156: printf("[Dump masks and filters] @F\n");
  3872  0522  3036               	movlw	low (STR_17| (0+32768))
  3873  0523  0020               	movlb	0	; select bank0
  3874  0524  00A2               	movwf	printf@f
  3875  0525  3092               	movlw	high (STR_17| (0+32768))
  3876  0526  00A3               	movwf	printf@f+1
  3877  0527  3185  25A5  3183   	fcall	_printf
  3878                           
  3879                           ;main.c: 157: printf("[Dump registers] @d\n");
  3880  052A  30C8               	movlw	low (STR_18| (0+32768))
  3881  052B  0020               	movlb	0	; select bank0
  3882  052C  00A2               	movwf	printf@f
  3883  052D  3092               	movlw	high (STR_18| (0+32768))
  3884  052E  00A3               	movwf	printf@f+1
  3885  052F  3185  25A5  3183   	fcall	_printf
  3886                           
  3887                           ;main.c: 158: printf("[Send message] <message>\n");
  3888  0532  3053               	movlw	low (STR_19| (0+32768))
  3889  0533  0020               	movlb	0	; select bank0
  3890  0534  00A2               	movwf	printf@f
  3891  0535  3092               	movlw	high (STR_19| (0+32768))
  3892  0536  00A3               	movwf	printf@f+1
  3893  0537  3185  25A5  3183   	fcall	_printf
  3894                           
  3895                           ;main.c: 159: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3896  053A  3076               	movlw	low (STR_20| (0+32768))
  3897  053B  0020               	movlb	0	; select bank0
  3898  053C  00A2               	movwf	printf@f
  3899  053D  3090               	movlw	high (STR_20| (0+32768))
  3900  053E  00A3               	movwf	printf@f+1
  3901  053F  3185  25A5  3183   	fcall	_printf
  3902                           
  3903                           ;main.c: 160: printf("[Receive message] <message> will be output\n");
  3904  0542  3070               	movlw	low (STR_21| (0+32768))
  3905  0543  0020               	movlb	0	; select bank0
  3906  0544  00A2               	movwf	printf@f
  3907  0545  3091               	movlw	high (STR_21| (0+32768))
  3908  0546  00A3               	movwf	printf@f+1
  3909  0547  3185  25A5  3183   	fcall	_printf
  3910                           
  3911                           ;main.c: 161: printf("[Show this help]: @h\n");
  3912  054A  309D               	movlw	low (STR_22| (0+32768))
  3913  054B  0020               	movlb	0	; select bank0
  3914  054C  00A2               	movwf	printf@f
  3915  054D  3092               	movlw	high (STR_22| (0+32768))
  3916  054E  00A3               	movwf	printf@f+1
  3917  054F  3185  25A5  3183   	fcall	_printf
  3918                           
  3919                           ;main.c: 163: }
  3920                           
  3921                           ;main.c: 162: break;
  3922  0552  2BB3               	goto	L1
  3923  0553                     l2784:	
  3924  0553  0021               	movlb	1	; select bank1
  3925  0554  0855               	movf	main@cmd^(0+128),w
  3926                           
  3927                           ; Switch size 1, requested type "space"
  3928                           ; Number of cases is 11, Range of values is 64 to 118
  3929                           ; switch strategies available:
  3930                           ; Name         Instructions Cycles
  3931                           ; simple_byte           34    18 (average)
  3932                           ; direct_byte          119     9 (fixed)
  3933                           ; jumptable            263     9 (fixed)
  3934                           ;	Chosen strategy is simple_byte
  3935  0555  3A40               	xorlw	64	; case 64
  3936  0556  1903               	skipnz
  3937  0557  2CCA               	goto	l2778
  3938  0558  3A06               	xorlw	6	; case 70
  3939  0559  1903               	skipnz
  3940  055A  2CC2               	goto	l2774
  3941  055B  3A27               	xorlw	39	; case 97
  3942  055C  1903               	skipnz
  3943  055D  2CBE               	goto	l2772
  3944  055E  3A03               	xorlw	3	; case 98
  3945  055F  1903               	skipnz
  3946  0560  2C6E               	goto	l2754
  3947  0561  3A06               	xorlw	6	; case 100
  3948  0562  1903               	skipnz
  3949  0563  2CC6               	goto	l2776
  3950  0564  3A02               	xorlw	2	; case 102
  3951  0565  1903               	skipnz
  3952  0566  2C80               	goto	l2760
  3953  0567  3A0E               	xorlw	14	; case 104
  3954  0568  1903               	skipnz
  3955  0569  2CD6               	goto	l2780
  3956  056A  3A01               	xorlw	1	; case 105
  3957  056B  1903               	skipnz
  3958  056C  2C05               	goto	l2704
  3959  056D  3A04               	xorlw	4	; case 109
  3960  056E  1903               	skipnz
  3961  056F  2C80               	goto	l2760
  3962  0570  3A02               	xorlw	2	; case 111
  3963  0571  1903               	skipnz
  3964  0572  2C3E               	goto	l2726
  3965  0573  3A19               	xorlw	25	; case 118
  3966  0574  1903               	skipnz
  3967  0575  2C1B               	goto	l2708
  3968  0576  2D81               	goto	l2788
  3969                           
  3970                           ;main.c: 164: } else {
  3971  0577  2BB3               	goto	L1
  3972  0578                     l2786:	
  3973                           
  3974                           ;main.c: 165: can_send(buf, idx);
  3975  0578  0856               	movf	main@idx^(0+128),w
  3976  0579  0020               	movlb	0	; select bank0
  3977  057A  00E8               	movwf	??_main
  3978  057B  0868               	movf	??_main,w
  3979  057C  00C3               	movwf	can_send@dlc
  3980  057D  30CB               	movlw	(low (main@buf| 0))& (0+255)
  3981  057E  3182  2255  3183   	fcall	_can_send
  3982  0581                     l2788:	
  3983  0581  2BB3               	goto	L1
  3984  0582                     l2790:	
  3985                           ;main.c: 169: } else if (++idx > max_idx) {
  3986                           
  3987                           ;main.c: 166: }
  3988                           ;main.c: 167: idx = 0;
  3989                           
  3990  0582  3001               	movlw	1
  3991  0583  0020               	movlb	0	; select bank0
  3992  0584  00E8               	movwf	??_main
  3993  0585  0868               	movf	??_main,w
  3994  0586  0021               	movlb	1	; select bank1
  3995  0587  07D6               	addwf	main@idx^(0+128),f
  3996  0588  3000               	movlw	low (_max_idx| (0+32768))
  3997  0589  0084               	movwf	4
  3998  058A  3090               	movlw	high (_max_idx| (0+32768))
  3999  058B  0085               	movwf	5
  4000  058C  0800               	movf	0,w	;code access
  4001  058D  0020               	movlb	0	; select bank0
  4002  058E  00E9               	movwf	??_main+1
  4003  058F  0021               	movlb	1	; select bank1
  4004  0590  0856               	movf	main@idx^(0+128),w
  4005  0591  0020               	movlb	0	; select bank0
  4006  0592  0269               	subwf	??_main+1,w
  4007  0593  1803               	skipnc
  4008  0594  2BB5               	goto	l2682
  4009                           
  4010                           ;main.c: 170: buf[idx] = '\0';
  4011  0595  0021               	movlb	1	; select bank1
  4012  0596  0856               	movf	main@idx^(0+128),w
  4013  0597  3ECB               	addlw	(low (main@buf| 0))& (0+255)
  4014  0598  0086               	movwf	6
  4015  0599  0187               	clrf	7
  4016  059A  0181               	clrf	1
  4017                           
  4018                           ;main.c: 171: can_send(buf, idx);
  4019  059B  0856               	movf	main@idx^(0+128),w
  4020  059C  0020               	movlb	0	; select bank0
  4021  059D  00E8               	movwf	??_main
  4022  059E  0868               	movf	??_main,w
  4023  059F  00C3               	movwf	can_send@dlc
  4024  05A0  30CB               	movlw	(low (main@buf| 0))& (0+255)
  4025  05A1  3182  2255  3183   	fcall	_can_send
  4026  05A4  2BB3               	goto	L1
  4027  05A5                     __end_of_main:	
  4028                           ;main.c: 172: idx = 0;
  4029                           
  4030                           
  4031                           	psect	text1
  4032  0D13                     __ptext1:	
  4033 ;; *************** function _can_status_check *****************
  4034 ;; Defined at:
  4035 ;;		line 274 in file "mcp2515.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  status          1   71[BANK0 ] unsigned char 
  4040 ;;  bytes_writte    1   70[BANK0 ] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      unsigned char 
  4043 ;; Registers used:
  4044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;Total ram usage:        4 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    5
  4057 ;; This function calls:
  4058 ;;		_SPI_exchange
  4059 ;;		_printf
  4060 ;;		_receive
  4061 ;;		_txf_clear
  4062 ;; This function is called by:
  4063 ;;		_main
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _can_status_check
  4069  0D13                     _can_status_check:	
  4070                           
  4071                           ;mcp2515.c: 276: buf[0] = 0b10100000u;
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4075  0D13  30A0               	movlw	160
  4076  0D14  0020               	movlb	0	; select bank0
  4077  0D15  00E4               	movwf	??_can_status_check
  4078  0D16  0864               	movf	??_can_status_check,w
  4079  0D17  0021               	movlb	1	; select bank1
  4080  0D18  00B4               	movwf	_buf^(0+128)
  4081                           
  4082                           ;mcp2515.c: 277: buf[1] = 0x00;
  4083  0D19  01B5               	clrf	(_buf^(0+128)+1)
  4084                           
  4085                           ;mcp2515.c: 278: uint8_t bytes_written = SPI_exchange(buf, 2);
  4086  0D1A  3002               	movlw	2
  4087  0D1B  0020               	movlb	0	; select bank0
  4088  0D1C  00E4               	movwf	??_can_status_check
  4089  0D1D  0864               	movf	??_can_status_check,w
  4090  0D1E  00F8               	movwf	SPI_exchange@len
  4091  0D1F  30B4               	movlw	(low (_buf| 0))& (0+255)
  4092  0D20  318B  235A  318D   	fcall	_SPI_exchange
  4093  0D23  0020               	movlb	0	; select bank0
  4094  0D24  00E5               	movwf	??_can_status_check+1
  4095  0D25  0865               	movf	??_can_status_check+1,w
  4096  0D26  00E6               	movwf	can_status_check@bytes_written
  4097                           
  4098                           ;mcp2515.c: 279: uint8_t status = buf[1];
  4099  0D27  0021               	movlb	1	; select bank1
  4100  0D28  0835               	movf	(_buf^(0+128)+1),w
  4101  0D29  0020               	movlb	0	; select bank0
  4102  0D2A  00E4               	movwf	??_can_status_check
  4103  0D2B  0864               	movf	??_can_status_check,w
  4104  0D2C  00E7               	movwf	can_status_check@status
  4105                           
  4106                           ;mcp2515.c: 280: if (status == 0x00) {
  4107  0D2D  0867               	movf	can_status_check@status,w
  4108  0D2E  1D03               	btfss	3,2
  4109  0D2F  2D32               	goto	l349
  4110                           
  4111                           ;mcp2515.c: 281: return 1;
  4112  0D30  3001               	movlw	1
  4113  0D31  0008               	return
  4114  0D32                     l349:	
  4115                           ;mcp2515.c: 282: } else if ((status & 0b00000010u) > 0) {
  4116                           
  4117  0D32  1CE7               	btfss	can_status_check@status,1
  4118  0D33  2D43               	goto	l352
  4119                           
  4120                           ;mcp2515.c: 283: if (mode.debug) printf("RX1IF is on\n");
  4121  0D34  086A               	movf	_mode,w
  4122  0D35  1903               	btfsc	3,2
  4123  0D36  2D3E               	goto	l353
  4124  0D37  3042               	movlw	low (STR_37| (0+32768))
  4125  0D38  00A2               	movwf	printf@f
  4126  0D39  3094               	movlw	high (STR_37| (0+32768))
  4127  0D3A  00A3               	movwf	printf@f+1
  4128  0D3B  3185  25A5  318D   	fcall	_printf
  4129  0D3E                     l353:	
  4130                           
  4131                           ;mcp2515.c: 284: receive(1);
  4132  0D3E  3001               	movlw	1
  4133  0D3F  318F  274B  318D   	fcall	_receive
  4134                           
  4135                           ;mcp2515.c: 285: } else if ((status & 0b00000001u) > 0) {
  4136  0D42  2D62               	goto	l2398
  4137  0D43                     l352:	
  4138  0D43  1C67               	btfss	can_status_check@status,0
  4139  0D44  2D54               	goto	l355
  4140                           
  4141                           ;mcp2515.c: 286: if (mode.debug) printf("RX0IF is on\n");
  4142  0D45  086A               	movf	_mode,w
  4143  0D46  1903               	btfsc	3,2
  4144  0D47  2D4F               	goto	l356
  4145  0D48  3035               	movlw	low (STR_38| (0+32768))
  4146  0D49  00A2               	movwf	printf@f
  4147  0D4A  3094               	movlw	high (STR_38| (0+32768))
  4148  0D4B  00A3               	movwf	printf@f+1
  4149  0D4C  3185  25A5  318D   	fcall	_printf
  4150  0D4F                     l356:	
  4151                           
  4152                           ;mcp2515.c: 287: receive(0);
  4153  0D4F  3000               	movlw	0
  4154  0D50  318F  274B  318D   	fcall	_receive
  4155                           
  4156                           ;mcp2515.c: 288: } else if ((status & 0b00001000u) > 0) {
  4157  0D53  2D62               	goto	l2398
  4158  0D54                     l355:	
  4159  0D54  1DE7               	btfss	can_status_check@status,3
  4160  0D55  2D58               	goto	l358
  4161                           
  4162                           ;mcp2515.c: 289: txf_clear(0);
  4163  0D56  3000               	movlw	0
  4164  0D57  2D5F               	goto	L4
  4165  0D58                     l358:	
  4166                           ;mcp2515.c: 290: } else if ((status & 0b00100000u) > 0) {
  4167                           
  4168  0D58  1EE7               	btfss	can_status_check@status,5
  4169  0D59  2D5C               	goto	l360
  4170                           
  4171                           ;mcp2515.c: 291: txf_clear(1);
  4172  0D5A  3001               	movlw	1
  4173  0D5B  2D5F               	goto	L4
  4174  0D5C                     l360:	
  4175                           ;mcp2515.c: 292: } else if ((status & 0b10000000u) > 0) {
  4176                           
  4177  0D5C  1FE7               	btfss	can_status_check@status,7
  4178  0D5D  2D62               	goto	l2398
  4179                           
  4180                           ;mcp2515.c: 293: txf_clear(2);
  4181  0D5E  3002               	movlw	2
  4182  0D5F                     L4:	
  4183  0D5F  318C  2430  318D   	fcall	_txf_clear
  4184  0D62                     l2398:	
  4185                           
  4186                           ;mcp2515.c: 294: }
  4187                           ;mcp2515.c: 295: if ((status & 0b00010000u) > 0) {
  4188  0D62  0020               	movlb	0	; select bank0
  4189  0D63  1E67               	btfss	can_status_check@status,4
  4190  0D64  2D67               	goto	l2406
  4191                           
  4192                           ;mcp2515.c: 296: return 0;
  4193  0D65  3000               	movlw	0
  4194                           
  4195                           ;mcp2515.c: 297: } else {
  4196  0D66  0008               	return
  4197  0D67                     l2406:	
  4198                           
  4199                           ;mcp2515.c: 298: return 1;
  4200  0D67  3001               	movlw	1
  4201  0D68  0008               	return
  4202  0D69                     __end_of_can_status_check:	
  4203                           
  4204                           	psect	text2
  4205  0C30                     __ptext2:	
  4206 ;; *************** function _txf_clear *****************
  4207 ;; Defined at:
  4208 ;;		line 154 in file "mcp2515.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  n               1    wreg     unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  n               1    4[BANK0 ] unsigned char 
  4213 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4214 ;;  mask            1    2[BANK0 ] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      unsigned char 
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;Total ram usage:        5 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    3
  4231 ;; This function calls:
  4232 ;;		_SPI_exchange
  4233 ;; This function is called by:
  4234 ;;		_can_status_check
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _txf_clear
  4240  0C30                     _txf_clear:	
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4244                           ;txf_clear@n stored from wreg
  4245  0C30  0020               	movlb	0	; select bank0
  4246  0C31  00A4               	movwf	txf_clear@n
  4247                           
  4248                           ;mcp2515.c: 155: uint8_t mask = 0b00000001u << (n + 2);
  4249  0C32  3001               	movlw	1
  4250  0C33  00A0               	movwf	??_txf_clear
  4251  0C34  0824               	movf	txf_clear@n,w
  4252  0C35  3E02               	addlw	2
  4253  0C36  0A89               	incf	9,f
  4254  0C37  2C39               	goto	u1914
  4255  0C38                     u1915:	
  4256  0C38  35A0               	lslf	??_txf_clear,f
  4257  0C39                     u1914:	
  4258  0C39  0B89               	decfsz	9,f
  4259  0C3A  2C38               	goto	u1915
  4260  0C3B  0820               	movf	??_txf_clear,w
  4261  0C3C  00A1               	movwf	??_txf_clear+1
  4262  0C3D  0821               	movf	??_txf_clear+1,w
  4263  0C3E  00A2               	movwf	txf_clear@mask
  4264                           
  4265                           ;mcp2515.c: 156: buf[0] =0b00000101u;
  4266  0C3F  3005               	movlw	5
  4267  0C40  00A0               	movwf	??_txf_clear
  4268  0C41  0820               	movf	??_txf_clear,w
  4269  0C42  0021               	movlb	1	; select bank1
  4270  0C43  00B4               	movwf	_buf^(0+128)
  4271                           
  4272                           ;mcp2515.c: 157: buf[1] = 0x2c;
  4273  0C44  302C               	movlw	44
  4274  0C45  0020               	movlb	0	; select bank0
  4275  0C46  00A0               	movwf	??_txf_clear
  4276  0C47  0820               	movf	??_txf_clear,w
  4277  0C48  0021               	movlb	1	; select bank1
  4278  0C49  00B5               	movwf	(_buf^(0+128)+1)
  4279                           
  4280                           ;mcp2515.c: 158: buf[2] = mask;
  4281  0C4A  0020               	movlb	0	; select bank0
  4282  0C4B  0822               	movf	txf_clear@mask,w
  4283  0C4C  00A0               	movwf	??_txf_clear
  4284  0C4D  0820               	movf	??_txf_clear,w
  4285  0C4E  0021               	movlb	1	; select bank1
  4286  0C4F  00B6               	movwf	(_buf^(0+128)+2)
  4287                           
  4288                           ;mcp2515.c: 159: buf[3] = 0x00;
  4289  0C50  01B7               	clrf	(_buf^(0+128)+3)
  4290                           
  4291                           ;mcp2515.c: 160: uint8_t bytes_written = SPI_exchange(buf, 4);
  4292  0C51  3004               	movlw	4
  4293  0C52  0020               	movlb	0	; select bank0
  4294  0C53  00A0               	movwf	??_txf_clear
  4295  0C54  0820               	movf	??_txf_clear,w
  4296  0C55  00F8               	movwf	SPI_exchange@len
  4297  0C56  30B4               	movlw	(low (_buf| 0))& (0+255)
  4298  0C57  318B  235A         	fcall	_SPI_exchange
  4299  0C59  0020               	movlb	0	; select bank0
  4300  0C5A  00A1               	movwf	??_txf_clear+1
  4301  0C5B  0821               	movf	??_txf_clear+1,w
  4302  0C5C  00A3               	movwf	txf_clear@bytes_written
  4303                           
  4304                           ;mcp2515.c: 164: return 0;
  4305                           ;	Return value of _txf_clear is never used
  4306                           
  4307                           ;mcp2515.c: 163: } else {
  4308                           
  4309                           ;mcp2515.c: 162: return 1;
  4310                           ;	Return value of _txf_clear is never used
  4311  0C5D  0008               	return
  4312  0C5E                     __end_of_txf_clear:	
  4313                           
  4314                           	psect	text3
  4315  0F4B                     __ptext3:	
  4316 ;; *************** function _receive *****************
  4317 ;; Defined at:
  4318 ;;		line 171 in file "mcp2515.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  n               1    wreg     unsigned char 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  n               1   67[BANK0 ] unsigned char 
  4323 ;;  rx_buf         15   48[BANK0 ] unsigned char [15]
  4324 ;;  id              2   64[BANK0 ] unsigned int 
  4325 ;;  dlc             1   66[BANK0 ] unsigned char 
  4326 ;;  pbuf            1   63[BANK0 ] PTR unsigned char 
  4327 ;;		 -> receive@rx_buf(15), 
  4328 ;;  bytes_read      1   47[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;Total ram usage:       26 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    4
  4345 ;; This function calls:
  4346 ;;		Absolute function
  4347 ;;		_SPI_exchange
  4348 ;;		_printf
  4349 ;;		_receive_handler
  4350 ;; This function is called by:
  4351 ;;		_can_status_check
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _receive
  4357  0F4B                     _receive:	
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4361                           ;receive@n stored from wreg
  4362  0F4B  0020               	movlb	0	; select bank0
  4363  0F4C  00E3               	movwf	receive@n
  4364                           
  4365                           ;mcp2515.c: 175: uint8_t rx_buf[15];
  4366                           ;mcp2515.c: 178: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  4367  0F4D  0863               	movf	receive@n,w
  4368  0F4E  3EB3               	addlw	low (_nm| (0+32768))
  4369  0F4F  0084               	movwf	4
  4370  0F50  3094               	movlw	high (_nm| (0+32768))
  4371  0F51  1803               	skipnc
  4372  0F52  3E01               	addlw	1
  4373  0F53  0085               	movwf	5
  4374  0F54  0800               	movf	0,w	;code access
  4375  0F55  0709               	addwf	9,w
  4376  0F56  3E90               	addlw	144
  4377  0F57  00CA               	movwf	??_receive
  4378  0F58  084A               	movf	??_receive,w
  4379  0F59  00D0               	movwf	receive@rx_buf
  4380                           
  4381                           ;mcp2515.c: 179: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4382  0F5A  300E               	movlw	14
  4383  0F5B  00CA               	movwf	??_receive
  4384  0F5C  084A               	movf	??_receive,w
  4385  0F5D  00F8               	movwf	SPI_exchange@len
  4386  0F5E  3050               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4387  0F5F  318B  235A  318F   	fcall	_SPI_exchange
  4388  0F62  0020               	movlb	0	; select bank0
  4389  0F63  00CB               	movwf	??_receive+1
  4390  0F64  084B               	movf	??_receive+1,w
  4391  0F65  00CF               	movwf	receive@bytes_read
  4392                           
  4393                           ;mcp2515.c: 180: uint8_t dlc = rx_buf[5];
  4394  0F66  0855               	movf	receive@rx_buf+5,w
  4395  0F67  00CA               	movwf	??_receive
  4396  0F68  084A               	movf	??_receive,w
  4397  0F69  00E2               	movwf	receive@dlc
  4398                           
  4399                           ;mcp2515.c: 181: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4400  0F6A  0852               	movf	receive@rx_buf+2,w
  4401  0F6B  00CA               	movwf	??_receive
  4402  0F6C  3005               	movlw	5
  4403  0F6D                     u1925:	
  4404  0F6D  36CA               	lsrf	??_receive,f
  4405  0F6E  0B89               	decfsz	9,f
  4406  0F6F  2F6D               	goto	u1925
  4407  0F70  084A               	movf	??_receive,w
  4408  0F71  00CB               	movwf	??_receive+1
  4409  0F72  01CC               	clrf	??_receive+2
  4410  0F73  0851               	movf	receive@rx_buf+1,w
  4411  0F74  00CD               	movwf	??_receive+3
  4412  0F75  01CE               	clrf	??_receive+4
  4413  0F76  35CD               	lslf	??_receive+3,f
  4414  0F77  0DCE               	rlf	??_receive+4,f
  4415  0F78  35CD               	lslf	??_receive+3,f
  4416  0F79  0DCE               	rlf	??_receive+4,f
  4417  0F7A  35CD               	lslf	??_receive+3,f
  4418  0F7B  0DCE               	rlf	??_receive+4,f
  4419  0F7C  084B               	movf	??_receive+1,w
  4420  0F7D  074D               	addwf	??_receive+3,w
  4421  0F7E  00E0               	movwf	receive@id
  4422  0F7F  084C               	movf	??_receive+2,w
  4423  0F80  3D4E               	addwfc	??_receive+4,w
  4424  0F81  00E1               	movwf	receive@id+1
  4425                           
  4426                           ;mcp2515.c: 182: id = id & 0b0000011111111111u;
  4427  0F82  30FF               	movlw	255
  4428  0F83  0560               	andwf	receive@id,w
  4429  0F84  00E0               	movwf	receive@id
  4430  0F85  3007               	movlw	7
  4431  0F86  0561               	andwf	receive@id+1,w
  4432  0F87  00E1               	movwf	receive@id+1
  4433                           
  4434                           ;mcp2515.c: 183: rx_buf[6u+dlc] = (uint8_t)'\0';
  4435  0F88  0862               	movf	receive@dlc,w
  4436  0F89  3E06               	addlw	6
  4437  0F8A  3E50               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4438  0F8B  0086               	movwf	6
  4439  0F8C  0187               	clrf	7
  4440  0F8D  0181               	clrf	1
  4441                           
  4442                           ;mcp2515.c: 185: if (mode.debug) {
  4443  0F8E  086A               	movf	_mode,w
  4444  0F8F  1903               	btfsc	3,2
  4445  0F90  2FE8               	goto	l2298
  4446                           
  4447                           ;mcp2515.c: 186: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4448  0F91  303A               	movlw	low (STR_26| (0+32768))
  4449  0F92  00A2               	movwf	printf@f
  4450  0F93  3093               	movlw	high (STR_26| (0+32768))
  4451  0F94  00A3               	movwf	printf@f+1
  4452  0F95  0863               	movf	receive@n,w
  4453  0F96  00CA               	movwf	??_receive
  4454  0F97  01CB               	clrf	??_receive+1
  4455  0F98  084A               	movf	??_receive,w
  4456  0F99  00A4               	movwf	?_printf+2
  4457  0F9A  084B               	movf	??_receive+1,w
  4458  0F9B  00A5               	movwf	?_printf+3
  4459  0F9C  0851               	movf	receive@rx_buf+1,w
  4460  0F9D  00CC               	movwf	??_receive+2
  4461  0F9E  01CD               	clrf	??_receive+3
  4462  0F9F  084C               	movf	??_receive+2,w
  4463  0FA0  00A6               	movwf	?_printf+4
  4464  0FA1  084D               	movf	??_receive+3,w
  4465  0FA2  00A7               	movwf	?_printf+5
  4466  0FA3  3185  25A5  318F   	fcall	_printf
  4467                           
  4468                           ;mcp2515.c: 187: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4469  0FA6  305C               	movlw	low (STR_27| (0+32768))
  4470  0FA7  0020               	movlb	0	; select bank0
  4471  0FA8  00A2               	movwf	printf@f
  4472  0FA9  3093               	movlw	high (STR_27| (0+32768))
  4473  0FAA  00A3               	movwf	printf@f+1
  4474  0FAB  0863               	movf	receive@n,w
  4475  0FAC  00CA               	movwf	??_receive
  4476  0FAD  01CB               	clrf	??_receive+1
  4477  0FAE  084A               	movf	??_receive,w
  4478  0FAF  00A4               	movwf	?_printf+2
  4479  0FB0  084B               	movf	??_receive+1,w
  4480  0FB1  00A5               	movwf	?_printf+3
  4481  0FB2  0852               	movf	receive@rx_buf+2,w
  4482  0FB3  00CC               	movwf	??_receive+2
  4483  0FB4  01CD               	clrf	??_receive+3
  4484  0FB5  084C               	movf	??_receive+2,w
  4485  0FB6  00A6               	movwf	?_printf+4
  4486  0FB7  084D               	movf	??_receive+3,w
  4487  0FB8  00A7               	movwf	?_printf+5
  4488  0FB9  3185  25A5  318F   	fcall	_printf
  4489                           
  4490                           ;mcp2515.c: 188: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4491  0FBC  307E               	movlw	low (STR_28| (0+32768))
  4492  0FBD  0020               	movlb	0	; select bank0
  4493  0FBE  00A2               	movwf	printf@f
  4494  0FBF  3093               	movlw	high (STR_28| (0+32768))
  4495  0FC0  00A3               	movwf	printf@f+1
  4496  0FC1  0863               	movf	receive@n,w
  4497  0FC2  00CA               	movwf	??_receive
  4498  0FC3  01CB               	clrf	??_receive+1
  4499  0FC4  084A               	movf	??_receive,w
  4500  0FC5  00A4               	movwf	?_printf+2
  4501  0FC6  084B               	movf	??_receive+1,w
  4502  0FC7  00A5               	movwf	?_printf+3
  4503  0FC8  0855               	movf	receive@rx_buf+5,w
  4504  0FC9  00CC               	movwf	??_receive+2
  4505  0FCA  01CD               	clrf	??_receive+3
  4506  0FCB  084C               	movf	??_receive+2,w
  4507  0FCC  00A6               	movwf	?_printf+4
  4508  0FCD  084D               	movf	??_receive+3,w
  4509  0FCE  00A7               	movwf	?_printf+5
  4510  0FCF  3185  25A5  318F   	fcall	_printf
  4511                           
  4512                           ;mcp2515.c: 189: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4513  0FD2  30DE               	movlw	low (STR_29| (0+32768))
  4514  0FD3  0020               	movlb	0	; select bank0
  4515  0FD4  00A2               	movwf	printf@f
  4516  0FD5  3093               	movlw	high (STR_29| (0+32768))
  4517  0FD6  00A3               	movwf	printf@f+1
  4518  0FD7  0863               	movf	receive@n,w
  4519  0FD8  00CA               	movwf	??_receive
  4520  0FD9  01CB               	clrf	??_receive+1
  4521  0FDA  084A               	movf	??_receive,w
  4522  0FDB  00A4               	movwf	?_printf+2
  4523  0FDC  084B               	movf	??_receive+1,w
  4524  0FDD  00A5               	movwf	?_printf+3
  4525  0FDE  0856               	movf	receive@rx_buf+6,w
  4526  0FDF  00CC               	movwf	??_receive+2
  4527  0FE0  01CD               	clrf	??_receive+3
  4528  0FE1  084C               	movf	??_receive+2,w
  4529  0FE2  00A6               	movwf	?_printf+4
  4530  0FE3  084D               	movf	??_receive+3,w
  4531  0FE4  00A7               	movwf	?_printf+5
  4532  0FE5  3185  25A5  318F   	fcall	_printf
  4533  0FE8                     l2298:	
  4534                           
  4535                           ;mcp2515.c: 190: }
  4536                           ;mcp2515.c: 193: uint8_t *pbuf = &rx_buf[6];
  4537  0FE8  3056               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4538  0FE9  0020               	movlb	0	; select bank0
  4539  0FEA  00CA               	movwf	??_receive
  4540  0FEB  084A               	movf	??_receive,w
  4541  0FEC  00DF               	movwf	receive@pbuf
  4542                           
  4543                           ;mcp2515.c: 194: handler(id, pbuf, dlc);
  4544  0FED  0860               	movf	receive@id,w
  4545  0FEE  00CA               	movwf	??_receive
  4546  0FEF  084A               	movf	??_receive,w
  4547  0FF0  00C3               	movwf	receive_handler@sid
  4548  0FF1  085F               	movf	receive@pbuf,w
  4549  0FF2  00CB               	movwf	??_receive+1
  4550  0FF3  084B               	movf	??_receive+1,w
  4551  0FF4  00C4               	movwf	receive_handler@pbuf
  4552  0FF5  0862               	movf	receive@dlc,w
  4553  0FF6  00CC               	movwf	??_receive+2
  4554  0FF7  084C               	movf	??_receive+2,w
  4555  0FF8  00C5               	movwf	receive_handler@dlc
  4556  0FF9  0021               	movlb	1	; select bank1
  4557  0FFA  0831               	movf	(_handler+1)^(0+128),w
  4558  0FFB  008A               	movwf	10
  4559  0FFC  0830               	movf	_handler^(0+128),w
  4560  0FFD  000A               	callw
  4561  0FFE  318F               	pagesel	$
  4562  0FFF  0008               	return
  4563  1000                     __end_of_receive:	
  4564                           
  4565                           	psect	text4
  4566  0DC0                     __ptext4:	
  4567 ;; *************** function _receive_handler *****************
  4568 ;; Defined at:
  4569 ;;		line 31 in file "main.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  sid             1   35[BANK0 ] unsigned char 
  4572 ;;  pbuf            1   36[BANK0 ] PTR unsigned char 
  4573 ;;		 -> receive@rx_buf(15), 
  4574 ;;  dlc             1   37[BANK0 ] unsigned char 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  i               1   41[BANK0 ] unsigned char 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4586 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;Total ram usage:        7 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    3
  4593 ;; This function calls:
  4594 ;;		_printf
  4595 ;; This function is called by:
  4596 ;;		_main
  4597 ;;		_receive
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _receive_handler
  4603  0DC0                     _receive_handler:	
  4604                           
  4605                           ;main.c: 32: uint8_t i;
  4606                           ;main.c: 33: if (output_format.with_sid) {
  4607                           
  4608                           ;incstack = 0
  4609                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4610  0DC0  0020               	movlb	0	; select bank0
  4611  0DC1  086C               	movf	_output_format,w
  4612  0DC2  1903               	btfsc	3,2
  4613  0DC3  2DD6               	goto	l2170
  4614                           
  4615                           ;main.c: 34: printf("%d,%s\n", sid, pbuf);
  4616  0DC4  308C               	movlw	low (STR_1| (0+32768))
  4617  0DC5  00A2               	movwf	printf@f
  4618  0DC6  3094               	movlw	high (STR_1| (0+32768))
  4619  0DC7  00A3               	movwf	printf@f+1
  4620  0DC8  0843               	movf	receive_handler@sid,w
  4621  0DC9  00C6               	movwf	??_receive_handler
  4622  0DCA  01C7               	clrf	??_receive_handler+1
  4623  0DCB  0846               	movf	??_receive_handler,w
  4624  0DCC  00A4               	movwf	?_printf+2
  4625  0DCD  0847               	movf	??_receive_handler+1,w
  4626  0DCE  00A5               	movwf	?_printf+3
  4627  0DCF  0844               	movf	receive_handler@pbuf,w
  4628  0DD0  00A6               	movwf	low ((?_printf| 0+4))
  4629  0DD1  3000               	movlw	0
  4630  0DD2  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4631  0DD3  3185  25A5         	fcall	_printf
  4632                           
  4633                           ;main.c: 35: } else if (output_format.hex_output) {
  4634  0DD5  0008               	return
  4635  0DD6                     l2170:	
  4636  0DD6  0020               	movlb	0	; select bank0
  4637  0DD7  086D               	movf	_output_format+1,w
  4638  0DD8  1903               	btfsc	3,2
  4639  0DD9  2E0F               	goto	l2184
  4640                           
  4641                           ;main.c: 36: printf("%02x:", sid);
  4642  0DDA  3099               	movlw	low (STR_2| (0+32768))
  4643  0DDB  00A2               	movwf	printf@f
  4644  0DDC  3094               	movlw	high (STR_2| (0+32768))
  4645  0DDD  00A3               	movwf	printf@f+1
  4646  0DDE  0843               	movf	receive_handler@sid,w
  4647  0DDF  00C6               	movwf	??_receive_handler
  4648  0DE0  01C7               	clrf	??_receive_handler+1
  4649  0DE1  0846               	movf	??_receive_handler,w
  4650  0DE2  00A4               	movwf	?_printf+2
  4651  0DE3  0847               	movf	??_receive_handler+1,w
  4652  0DE4  00A5               	movwf	?_printf+3
  4653  0DE5  3185  25A5  318D   	fcall	_printf
  4654                           
  4655                           ;main.c: 37: for(i=0; i<dlc; i++) {
  4656  0DE8  0020               	movlb	0	; select bank0
  4657  0DE9  01C9               	clrf	receive_handler@i
  4658  0DEA                     l2180:	
  4659  0DEA  0845               	movf	receive_handler@dlc,w
  4660  0DEB  0249               	subwf	receive_handler@i,w
  4661  0DEC  1803               	btfsc	3,0
  4662  0DED  2E08               	goto	l2182
  4663                           
  4664                           ;main.c: 38: printf(" %02x", pbuf[i]);
  4665  0DEE  309F               	movlw	low (STR_3| (0+32768))
  4666  0DEF  00A2               	movwf	printf@f
  4667  0DF0  3094               	movlw	high (STR_3| (0+32768))
  4668  0DF1  00A3               	movwf	printf@f+1
  4669  0DF2  0849               	movf	receive_handler@i,w
  4670  0DF3  0744               	addwf	receive_handler@pbuf,w
  4671  0DF4  00C6               	movwf	??_receive_handler
  4672  0DF5  0846               	movf	??_receive_handler,w
  4673  0DF6  0086               	movwf	6
  4674  0DF7  0187               	clrf	7
  4675  0DF8  0801               	movf	1,w
  4676  0DF9  00C7               	movwf	??_receive_handler+1
  4677  0DFA  01C8               	clrf	??_receive_handler+2
  4678  0DFB  0847               	movf	??_receive_handler+1,w
  4679  0DFC  00A4               	movwf	?_printf+2
  4680  0DFD  0848               	movf	??_receive_handler+2,w
  4681  0DFE  00A5               	movwf	?_printf+3
  4682  0DFF  3185  25A5  318D   	fcall	_printf
  4683  0E02  3001               	movlw	1
  4684  0E03  0020               	movlb	0	; select bank0
  4685  0E04  00C6               	movwf	??_receive_handler
  4686  0E05  0846               	movf	??_receive_handler,w
  4687  0E06  07C9               	addwf	receive_handler@i,f
  4688  0E07  2DEA               	goto	l2180
  4689  0E08                     l2182:	
  4690                           
  4691                           ;main.c: 39: }
  4692                           ;main.c: 40: printf("\n");
  4693  0E08  30A8               	movlw	low ((STR_39+3)| (0+32768))
  4694  0E09  00A2               	movwf	printf@f
  4695  0E0A  3094               	movlw	high ((STR_39+3)| (0+32768))
  4696  0E0B  00A3               	movwf	printf@f+1
  4697  0E0C  3185  25A5         	fcall	_printf
  4698                           
  4699                           ;main.c: 41: } else {
  4700  0E0E  0008               	return
  4701  0E0F                     l2184:	
  4702                           
  4703                           ;main.c: 42: printf("%s\n", pbuf);
  4704  0E0F  3014               	movlw	low ((STR_36+14)| (0+32768))
  4705  0E10  0020               	movlb	0	; select bank0
  4706  0E11  00A2               	movwf	printf@f
  4707  0E12  3093               	movlw	high ((STR_36+14)| (0+32768))
  4708  0E13  00A3               	movwf	printf@f+1
  4709  0E14  0844               	movf	receive_handler@pbuf,w
  4710  0E15  00A4               	movwf	low ((?_printf| 0+2))
  4711  0E16  3000               	movlw	0
  4712  0E17  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4713  0E18  3185  25A5         	fcall	_printf
  4714  0E1A  0008               	return
  4715  0E1B                     __end_of_receive_handler:	
  4716                           
  4717                           	psect	text5
  4718  0EA6                     __ptext5:	
  4719 ;; *************** function _can_set_mask *****************
  4720 ;; Defined at:
  4721 ;;		line 127 in file "mcp2515.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  cmd             1    wreg     unsigned char 
  4724 ;;  n               1   39[BANK0 ] unsigned char 
  4725 ;;  mask            2   40[BANK0 ] unsigned int 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  cmd             1   50[BANK0 ] unsigned char 
  4728 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  4729 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4739 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;Total ram usage:       14 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    4
  4746 ;; This function calls:
  4747 ;;		_SPI_exchange
  4748 ;;		_abort_pending_transmissions
  4749 ;;		_can_ope_mode
  4750 ;;		_printf
  4751 ;; This function is called by:
  4752 ;;		_main
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _can_set_mask
  4758  0EA6                     _can_set_mask:	
  4759                           
  4760                           ;incstack = 0
  4761                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4762                           ;can_set_mask@cmd stored from wreg
  4763  0EA6  0020               	movlb	0	; select bank0
  4764  0EA7  00D2               	movwf	can_set_mask@cmd
  4765                           
  4766                           ;mcp2515.c: 128: can_ope_mode(0b10000000u);
  4767  0EA8  3080               	movlw	128
  4768  0EA9  318D  2569  318E   	fcall	_can_ope_mode
  4769                           
  4770                           ;mcp2515.c: 129: abort_pending_transmissions();
  4771  0EAC  318B  23DE  318E   	fcall	_abort_pending_transmissions
  4772                           
  4773                           ;mcp2515.c: 130: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  4774  0EAF  3008               	movlw	8
  4775  0EB0  0020               	movlb	0	; select bank0
  4776  0EB1  0249               	subwf	can_set_mask@mask+1,w
  4777  0EB2  3000               	movlw	0
  4778  0EB3  1903               	skipnz
  4779  0EB4  0248               	subwf	can_set_mask@mask,w
  4780  0EB5  1C03               	btfss	3,0
  4781  0EB6  2EBB               	goto	l2490
  4782  0EB7  30FF               	movlw	255
  4783  0EB8  00C8               	movwf	can_set_mask@mask
  4784  0EB9  3007               	movlw	7
  4785  0EBA  00C9               	movwf	can_set_mask@mask+1
  4786  0EBB                     l2490:	
  4787                           
  4788                           ;mcp2515.c: 131: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  4789  0EBB  0849               	movf	can_set_mask@mask+1,w
  4790  0EBC  00CB               	movwf	??_can_set_mask+1
  4791  0EBD  0848               	movf	can_set_mask@mask,w
  4792  0EBE  00CA               	movwf	??_can_set_mask
  4793  0EBF  36CB               	lsrf	??_can_set_mask+1,f
  4794  0EC0  0CCA               	rrf	??_can_set_mask,f
  4795  0EC1  36CB               	lsrf	??_can_set_mask+1,f
  4796  0EC2  0CCA               	rrf	??_can_set_mask,f
  4797  0EC3  36CB               	lsrf	??_can_set_mask+1,f
  4798  0EC4  0CCA               	rrf	??_can_set_mask,f
  4799  0EC5  084A               	movf	??_can_set_mask,w
  4800  0EC6  00CC               	movwf	??_can_set_mask+2
  4801  0EC7  084C               	movf	??_can_set_mask+2,w
  4802  0EC8  00D3               	movwf	can_set_mask@mask_sidh
  4803                           
  4804                           ;mcp2515.c: 132: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  4805  0EC9  0848               	movf	can_set_mask@mask,w
  4806  0ECA  3907               	andlw	7
  4807  0ECB  00CA               	movwf	??_can_set_mask
  4808  0ECC  3004               	movlw	4
  4809  0ECD                     u2125:	
  4810  0ECD  35CA               	lslf	??_can_set_mask,f
  4811  0ECE  3EFF               	addlw	-1
  4812  0ECF  1D03               	skipz
  4813  0ED0  2ECD               	goto	u2125
  4814  0ED1  354A               	lslf	??_can_set_mask,w
  4815  0ED2  00CB               	movwf	??_can_set_mask+1
  4816  0ED3  084B               	movf	??_can_set_mask+1,w
  4817  0ED4  00D4               	movwf	can_set_mask@mask_sidl
  4818                           
  4819                           ;mcp2515.c: 134: if (cmd == 0u) {
  4820  0ED5  0852               	movf	can_set_mask@cmd,w
  4821  0ED6  1D03               	btfss	3,2
  4822  0ED7  2EE7               	goto	l2502
  4823                           
  4824                           ;mcp2515.c: 135: save_rxmn[n] = mask;
  4825  0ED8  3547               	lslf	can_set_mask@n,w
  4826  0ED9  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  4827  0EDA  0086               	movwf	6
  4828  0EDB  0187               	clrf	7
  4829  0EDC  0848               	movf	can_set_mask@mask,w
  4830  0EDD  3FC0               	movwi [0]fsr1
  4831  0EDE  0849               	movf	can_set_mask@mask+1,w
  4832  0EDF  3FC1               	movwi [1]fsr1
  4833                           
  4834                           ;mcp2515.c: 136: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  4835  0EE0  086A               	movf	_mode,w
  4836  0EE1  1903               	btfsc	3,2
  4837  0EE2  2F0F               	goto	l2508
  4838  0EE3  30B3               	movlw	low (STR_24| (0+32768))
  4839  0EE4  00A2               	movwf	printf@f
  4840  0EE5  3092               	movlw	high (STR_24| (0+32768))
  4841  0EE6  2EF6               	goto	L6
  4842  0EE7                     l2502:	
  4843                           ;mcp2515.c: 137: } else {
  4844                           
  4845                           
  4846                           ;mcp2515.c: 138: save_rxfn[n] = mask;
  4847  0EE7  0020               	movlb	0	; select bank0
  4848  0EE8  3547               	lslf	can_set_mask@n,w
  4849  0EE9  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  4850  0EEA  0086               	movwf	6
  4851  0EEB  0187               	clrf	7
  4852  0EEC  0848               	movf	can_set_mask@mask,w
  4853  0EED  3FC0               	movwi [0]fsr1
  4854  0EEE  0849               	movf	can_set_mask@mask+1,w
  4855  0EEF  3FC1               	movwi [1]fsr1
  4856                           
  4857                           ;mcp2515.c: 139: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  4858  0EF0  086A               	movf	_mode,w
  4859  0EF1  1903               	btfsc	3,2
  4860  0EF2  2F0F               	goto	l2508
  4861  0EF3  3086               	movlw	low (STR_25| (0+32768))
  4862  0EF4  00A2               	movwf	printf@f
  4863  0EF5  3092               	movlw	high (STR_25| (0+32768))
  4864  0EF6                     L6:	
  4865  0EF6  00A3               	movwf	printf@f+1
  4866  0EF7  0847               	movf	can_set_mask@n,w
  4867  0EF8  00CA               	movwf	??_can_set_mask
  4868  0EF9  01CB               	clrf	??_can_set_mask+1
  4869  0EFA  084A               	movf	??_can_set_mask,w
  4870  0EFB  00A4               	movwf	?_printf+2
  4871  0EFC  084B               	movf	??_can_set_mask+1,w
  4872  0EFD  00A5               	movwf	?_printf+3
  4873  0EFE  0853               	movf	can_set_mask@mask_sidh,w
  4874  0EFF  00CC               	movwf	??_can_set_mask+2
  4875  0F00  01CD               	clrf	??_can_set_mask+3
  4876  0F01  084C               	movf	??_can_set_mask+2,w
  4877  0F02  00A6               	movwf	?_printf+4
  4878  0F03  084D               	movf	??_can_set_mask+3,w
  4879  0F04  00A7               	movwf	?_printf+5
  4880  0F05  0854               	movf	can_set_mask@mask_sidl,w
  4881  0F06  00CE               	movwf	??_can_set_mask+4
  4882  0F07  01CF               	clrf	??_can_set_mask+5
  4883  0F08  084E               	movf	??_can_set_mask+4,w
  4884  0F09  00A8               	movwf	?_printf+6
  4885  0F0A  084F               	movf	??_can_set_mask+5,w
  4886  0F0B  00A9               	movwf	?_printf+7
  4887  0F0C  3185  25A5  318E   	fcall	_printf
  4888  0F0F                     l2508:	
  4889                           
  4890                           ;mcp2515.c: 140: }
  4891                           ;mcp2515.c: 142: buf[0] = 0b00000010u;
  4892  0F0F  3002               	movlw	2
  4893  0F10  0020               	movlb	0	; select bank0
  4894  0F11  00CA               	movwf	??_can_set_mask
  4895  0F12  084A               	movf	??_can_set_mask,w
  4896  0F13  0021               	movlb	1	; select bank1
  4897  0F14  00B4               	movwf	_buf^(0+128)
  4898                           
  4899                           ;mcp2515.c: 143: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  4900  0F15  0020               	movlb	0	; select bank0
  4901  0F16  0852               	movf	can_set_mask@cmd,w
  4902  0F17  1903               	btfsc	3,2
  4903  0F18  2F1E               	goto	l2514
  4904  0F19  0847               	movf	can_set_mask@n,w
  4905  0F1A  3E93               	addlw	low (_rxfnsidh| (0+32768))
  4906  0F1B  0084               	movwf	4
  4907  0F1C  3094               	movlw	high (_rxfnsidh| (0+32768))
  4908  0F1D  2F22               	goto	L5
  4909  0F1E                     l2514:	
  4910  0F1E  0847               	movf	can_set_mask@n,w
  4911  0F1F  3EB5               	addlw	low (_rxmnsidh| (0+32768))
  4912  0F20  0084               	movwf	4
  4913  0F21  3094               	movlw	high (_rxmnsidh| (0+32768))
  4914  0F22                     L5:	
  4915  0F22  1803               	skipnc
  4916  0F23  3E01               	addlw	1
  4917  0F24  0085               	movwf	5
  4918  0F25  0800               	movf	0,w	;code access
  4919  0F26  00CA               	movwf	??_can_set_mask
  4920  0F27  01CB               	clrf	??_can_set_mask+1
  4921  0F28  084A               	movf	??_can_set_mask,w
  4922  0F29  00D0               	movwf	_can_set_mask$508
  4923  0F2A  084B               	movf	??_can_set_mask+1,w
  4924  0F2B  00D1               	movwf	_can_set_mask$508+1
  4925  0F2C  0850               	movf	_can_set_mask$508,w
  4926  0F2D  00CA               	movwf	??_can_set_mask
  4927  0F2E  084A               	movf	??_can_set_mask,w
  4928  0F2F  0021               	movlb	1	; select bank1
  4929  0F30  00B5               	movwf	(_buf^(0+128)+1)
  4930                           
  4931                           ;mcp2515.c: 144: buf[2] = mask_sidh;
  4932  0F31  0020               	movlb	0	; select bank0
  4933  0F32  0853               	movf	can_set_mask@mask_sidh,w
  4934  0F33  00CA               	movwf	??_can_set_mask
  4935  0F34  084A               	movf	??_can_set_mask,w
  4936  0F35  0021               	movlb	1	; select bank1
  4937  0F36  00B6               	movwf	(_buf^(0+128)+2)
  4938                           
  4939                           ;mcp2515.c: 145: buf[3] = mask_sidl;
  4940  0F37  0020               	movlb	0	; select bank0
  4941  0F38  0854               	movf	can_set_mask@mask_sidl,w
  4942  0F39  00CA               	movwf	??_can_set_mask
  4943  0F3A  084A               	movf	??_can_set_mask,w
  4944  0F3B  0021               	movlb	1	; select bank1
  4945  0F3C  00B7               	movwf	(_buf^(0+128)+3)
  4946                           
  4947                           ;mcp2515.c: 146: SPI_exchange(buf, 4);
  4948  0F3D  3004               	movlw	4
  4949  0F3E  0020               	movlb	0	; select bank0
  4950  0F3F  00CA               	movwf	??_can_set_mask
  4951  0F40  084A               	movf	??_can_set_mask,w
  4952  0F41  00F8               	movwf	SPI_exchange@len
  4953  0F42  30B4               	movlw	(low (_buf| 0))& (0+255)
  4954  0F43  318B  235A  318E   	fcall	_SPI_exchange
  4955                           
  4956                           ;mcp2515.c: 148: can_ope_mode(operation_mode);
  4957  0F46  0020               	movlb	0	; select bank0
  4958  0F47  086E               	movf	_operation_mode,w
  4959  0F48  318D  2569         	fcall	_can_ope_mode
  4960  0F4A  0008               	return
  4961  0F4B                     __end_of_can_set_mask:	
  4962                           
  4963                           	psect	text6
  4964  0255                     __ptext6:	
  4965 ;; *************** function _can_send *****************
  4966 ;; Defined at:
  4967 ;;		line 200 in file "mcp2515.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  data_buf        1    wreg     PTR unsigned char 
  4970 ;;		 -> main@buf(9), 
  4971 ;;  dlc             1   35[BANK0 ] unsigned char 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  4974 ;;		 -> main@buf(9), 
  4975 ;;  n               1   45[BANK0 ] unsigned char 
  4976 ;;  i               1   44[BANK0 ] unsigned char 
  4977 ;;  status          1   42[BANK0 ] unsigned char 
  4978 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  4979 ;;  len             1   40[BANK0 ] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      unsigned char 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;Total ram usage:       11 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    3
  4996 ;; This function calls:
  4997 ;;		_SPI_exchange
  4998 ;;		_printf
  4999 ;; This function is called by:
  5000 ;;		_main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _can_send
  5006  0255                     _can_send:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5010                           ;can_send@data_buf stored from wreg
  5011  0255  0020               	movlb	0	; select bank0
  5012  0256  00CB               	movwf	can_send@data_buf
  5013                           
  5014                           ;mcp2515.c: 201: uint8_t i;
  5015                           ;mcp2515.c: 202: uint8_t n = 0;
  5016  0257  01CD               	clrf	can_send@n
  5017                           
  5018                           ;mcp2515.c: 204: buf[0] = 0b10100000u;
  5019  0258  30A0               	movlw	160
  5020  0259  00C4               	movwf	??_can_send
  5021  025A  0844               	movf	??_can_send,w
  5022  025B  0021               	movlb	1	; select bank1
  5023  025C  00B4               	movwf	_buf^(0+128)
  5024                           
  5025                           ;mcp2515.c: 205: buf[1] = 0x00;
  5026  025D  01B5               	clrf	(_buf^(0+128)+1)
  5027                           
  5028                           ;mcp2515.c: 206: uint8_t bytes_written = SPI_exchange(buf, 2);
  5029  025E  3002               	movlw	2
  5030  025F  0020               	movlb	0	; select bank0
  5031  0260  00C4               	movwf	??_can_send
  5032  0261  0844               	movf	??_can_send,w
  5033  0262  00F8               	movwf	SPI_exchange@len
  5034  0263  30B4               	movlw	(low (_buf| 0))& (0+255)
  5035  0264  318B  235A  3182   	fcall	_SPI_exchange
  5036  0267  0020               	movlb	0	; select bank0
  5037  0268  00C5               	movwf	??_can_send+1
  5038  0269  0845               	movf	??_can_send+1,w
  5039  026A  00C9               	movwf	can_send@bytes_written
  5040                           
  5041                           ;mcp2515.c: 207: uint8_t status = buf[1];
  5042  026B  0021               	movlb	1	; select bank1
  5043  026C  0835               	movf	(_buf^(0+128)+1),w
  5044  026D  0020               	movlb	0	; select bank0
  5045  026E  00C4               	movwf	??_can_send
  5046  026F  0844               	movf	??_can_send,w
  5047  0270  00CA               	movwf	can_send@status
  5048                           
  5049                           ;mcp2515.c: 208: if ((status & 0b01000000u) == 0) {
  5050  0271  1B4A               	btfsc	can_send@status,6
  5051  0272  2A83               	goto	l329
  5052                           
  5053                           ;mcp2515.c: 209: if (mode.debug) printf("TXB2 is idle\n");
  5054  0273  086A               	movf	_mode,w
  5055  0274  1903               	btfsc	3,2
  5056  0275  2A7D               	goto	l2584
  5057  0276  3027               	movlw	low (STR_30| (0+32768))
  5058  0277  00A2               	movwf	printf@f
  5059  0278  3094               	movlw	high (STR_30| (0+32768))
  5060  0279  00A3               	movwf	printf@f+1
  5061  027A  3185  25A5  3182   	fcall	_printf
  5062  027D                     l2584:	
  5063                           
  5064                           ;mcp2515.c: 210: n = 2;
  5065  027D  3002               	movlw	2
  5066  027E  0020               	movlb	0	; select bank0
  5067  027F  00C4               	movwf	??_can_send
  5068  0280  0844               	movf	??_can_send,w
  5069  0281  00CD               	movwf	can_send@n
  5070                           
  5071                           ;mcp2515.c: 211: } else if ((status & 0b00010000u) == 0) {
  5072  0282  2AA1               	goto	l2598
  5073  0283                     l329:	
  5074  0283  1A4A               	btfsc	can_send@status,4
  5075  0284  2A93               	goto	l332
  5076                           
  5077                           ;mcp2515.c: 212: if (mode.debug) printf("TXB1 is idle\n");
  5078  0285  086A               	movf	_mode,w
  5079  0286  1903               	btfsc	3,2
  5080  0287  2A8F               	goto	l2590
  5081  0288  3019               	movlw	low (STR_31| (0+32768))
  5082  0289  00A2               	movwf	printf@f
  5083  028A  3094               	movlw	high (STR_31| (0+32768))
  5084  028B  00A3               	movwf	printf@f+1
  5085  028C  3185  25A5  3182   	fcall	_printf
  5086  028F                     l2590:	
  5087                           
  5088                           ;mcp2515.c: 213: n = 1;
  5089  028F  0020               	movlb	0	; select bank0
  5090  0290  01CD               	clrf	can_send@n
  5091  0291  0ACD               	incf	can_send@n,f
  5092                           
  5093                           ;mcp2515.c: 214: } else if ((status & 0b00000100u) == 0) {
  5094  0292  2AA1               	goto	l2598
  5095  0293                     l332:	
  5096  0293  194A               	btfsc	can_send@status,2
  5097  0294  2AA1               	goto	l2598
  5098                           
  5099                           ;mcp2515.c: 215: if (mode.debug) printf("TXB0 is idle\n");
  5100  0295  086A               	movf	_mode,w
  5101  0296  1903               	btfsc	3,2
  5102  0297  2A9F               	goto	l2596
  5103  0298  300B               	movlw	low (STR_32| (0+32768))
  5104  0299  00A2               	movwf	printf@f
  5105  029A  3094               	movlw	high (STR_32| (0+32768))
  5106  029B  00A3               	movwf	printf@f+1
  5107  029C  3185  25A5  3182   	fcall	_printf
  5108  029F                     l2596:	
  5109                           
  5110                           ;mcp2515.c: 216: n = 0;
  5111  029F  0020               	movlb	0	; select bank0
  5112  02A0  01CD               	clrf	can_send@n
  5113  02A1                     l2598:	
  5114                           
  5115                           ;mcp2515.c: 217: }
  5116                           ;mcp2515.c: 223: buf[0] = 0b01000000u + abc[n];
  5117  02A1  084D               	movf	can_send@n,w
  5118  02A2  3EAD               	addlw	low (_abc| (0+32768))
  5119  02A3  0084               	movwf	4
  5120  02A4  3094               	movlw	high (_abc| (0+32768))
  5121  02A5  1803               	skipnc
  5122  02A6  3E01               	addlw	1
  5123  02A7  0085               	movwf	5
  5124  02A8  0800               	movf	0,w	;code access
  5125  02A9  3E40               	addlw	64
  5126  02AA  00C4               	movwf	??_can_send
  5127  02AB  0844               	movf	??_can_send,w
  5128  02AC  0021               	movlb	1	; select bank1
  5129  02AD  00B4               	movwf	_buf^(0+128)
  5130                           
  5131                           ;mcp2515.c: 225: buf[1] = sid.sidh;
  5132  02AE  0832               	movf	_sid^(0+128),w
  5133  02AF  0020               	movlb	0	; select bank0
  5134  02B0  00C4               	movwf	??_can_send
  5135  02B1  0844               	movf	??_can_send,w
  5136  02B2  0021               	movlb	1	; select bank1
  5137  02B3  00B5               	movwf	(_buf^(0+128)+1)
  5138                           
  5139                           ;mcp2515.c: 227: buf[2] = sid.sidl;
  5140  02B4  0833               	movf	(_sid^(0+128)+1),w
  5141  02B5  0020               	movlb	0	; select bank0
  5142  02B6  00C4               	movwf	??_can_send
  5143  02B7  0844               	movf	??_can_send,w
  5144  02B8  0021               	movlb	1	; select bank1
  5145  02B9  00B6               	movwf	(_buf^(0+128)+2)
  5146                           
  5147                           ;mcp2515.c: 229: buf[3] = 0;
  5148  02BA  01B7               	clrf	(_buf^(0+128)+3)
  5149                           
  5150                           ;mcp2515.c: 231: buf[4] = 0;
  5151  02BB  01B8               	clrf	(_buf^(0+128)+4)
  5152                           
  5153                           ;mcp2515.c: 233: buf[5] = dlc;
  5154  02BC  0020               	movlb	0	; select bank0
  5155  02BD  0843               	movf	can_send@dlc,w
  5156  02BE  00C4               	movwf	??_can_send
  5157  02BF  0844               	movf	??_can_send,w
  5158  02C0  0021               	movlb	1	; select bank1
  5159  02C1  00B9               	movwf	(_buf^(0+128)+5)
  5160                           
  5161                           ;mcp2515.c: 236: for(i=0; i<dlc; i++) {
  5162  02C2  0020               	movlb	0	; select bank0
  5163  02C3  01CC               	clrf	can_send@i
  5164  02C4                     l2620:	
  5165  02C4  0843               	movf	can_send@dlc,w
  5166  02C5  024C               	subwf	can_send@i,w
  5167  02C6  1803               	btfsc	3,0
  5168  02C7  2AF4               	goto	l2622
  5169                           
  5170                           ;mcp2515.c: 237: buf[6u+i] = data_buf[i];
  5171  02C8  084C               	movf	can_send@i,w
  5172  02C9  074B               	addwf	can_send@data_buf,w
  5173  02CA  00C4               	movwf	??_can_send
  5174  02CB  0844               	movf	??_can_send,w
  5175  02CC  0086               	movwf	6
  5176  02CD  0187               	clrf	7
  5177  02CE  0801               	movf	1,w
  5178  02CF  00C5               	movwf	??_can_send+1
  5179  02D0  084C               	movf	can_send@i,w
  5180  02D1  3E06               	addlw	6
  5181  02D2  3EB4               	addlw	(low (_buf| 0))& (0+255)
  5182  02D3  0086               	movwf	6
  5183  02D4  0187               	clrf	7
  5184  02D5  0845               	movf	??_can_send+1,w
  5185  02D6  0081               	movwf	1
  5186                           
  5187                           ;mcp2515.c: 238: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  5188  02D7  086A               	movf	_mode,w
  5189  02D8  1903               	btfsc	3,2
  5190  02D9  2AEE               	goto	l2618
  5191  02DA  30F2               	movlw	low (STR_33| (0+32768))
  5192  02DB  00A2               	movwf	printf@f
  5193  02DC  3092               	movlw	high (STR_33| (0+32768))
  5194  02DD  00A3               	movwf	printf@f+1
  5195  02DE  084C               	movf	can_send@i,w
  5196  02DF  074B               	addwf	can_send@data_buf,w
  5197  02E0  00C4               	movwf	??_can_send
  5198  02E1  0844               	movf	??_can_send,w
  5199  02E2  0086               	movwf	6
  5200  02E3  0187               	clrf	7
  5201  02E4  0801               	movf	1,w
  5202  02E5  00C5               	movwf	??_can_send+1
  5203  02E6  01C6               	clrf	??_can_send+2
  5204  02E7  0845               	movf	??_can_send+1,w
  5205  02E8  00A4               	movwf	?_printf+2
  5206  02E9  0846               	movf	??_can_send+2,w
  5207  02EA  00A5               	movwf	?_printf+3
  5208  02EB  3185  25A5  3182   	fcall	_printf
  5209  02EE                     l2618:	
  5210  02EE  3001               	movlw	1
  5211  02EF  0020               	movlb	0	; select bank0
  5212  02F0  00C4               	movwf	??_can_send
  5213  02F1  0844               	movf	??_can_send,w
  5214  02F2  07CC               	addwf	can_send@i,f
  5215  02F3  2AC4               	goto	l2620
  5216  02F4                     l2622:	
  5217                           
  5218                           ;mcp2515.c: 239: }
  5219                           ;mcp2515.c: 242: uint8_t len = 6u + dlc;
  5220  02F4  0843               	movf	can_send@dlc,w
  5221  02F5  3E06               	addlw	6
  5222  02F6  00C4               	movwf	??_can_send
  5223  02F7  0844               	movf	??_can_send,w
  5224  02F8  00C8               	movwf	can_send@len
  5225                           
  5226                           ;mcp2515.c: 243: uint8_t bytes_written = SPI_exchange(buf, len);
  5227  02F9  0848               	movf	can_send@len,w
  5228  02FA  00C4               	movwf	??_can_send
  5229  02FB  0844               	movf	??_can_send,w
  5230  02FC  00F8               	movwf	SPI_exchange@len
  5231  02FD  30B4               	movlw	(low (_buf| 0))& (0+255)
  5232  02FE  318B  235A  3182   	fcall	_SPI_exchange
  5233  0301  0020               	movlb	0	; select bank0
  5234  0302  00C5               	movwf	??_can_send+1
  5235  0303  0845               	movf	??_can_send+1,w
  5236  0304  00C9               	movwf	can_send@bytes_written
  5237                           
  5238                           ;mcp2515.c: 245: buf[0] = 0b00000011u;
  5239  0305  3003               	movlw	3
  5240  0306  00C4               	movwf	??_can_send
  5241  0307  0844               	movf	??_can_send,w
  5242  0308  0021               	movlb	1	; select bank1
  5243  0309  00B4               	movwf	_buf^(0+128)
  5244                           
  5245                           ;mcp2515.c: 246: buf[1] = txbnsidh[n];
  5246  030A  0020               	movlb	0	; select bank0
  5247  030B  084D               	movf	can_send@n,w
  5248  030C  3EAA               	addlw	low (_txbnsidh| (0+32768))
  5249  030D  0084               	movwf	4
  5250  030E  3094               	movlw	high (_txbnsidh| (0+32768))
  5251  030F  1803               	skipnc
  5252  0310  3E01               	addlw	1
  5253  0311  0085               	movwf	5
  5254  0312  0800               	movf	0,w	;code access
  5255  0313  00C4               	movwf	??_can_send
  5256  0314  0844               	movf	??_can_send,w
  5257  0315  0021               	movlb	1	; select bank1
  5258  0316  00B5               	movwf	(_buf^(0+128)+1)
  5259                           
  5260                           ;mcp2515.c: 247: buf[2] = 0x00;
  5261  0317  01B6               	clrf	(_buf^(0+128)+2)
  5262                           
  5263                           ;mcp2515.c: 248: SPI_exchange(buf, 3);
  5264  0318  3003               	movlw	3
  5265  0319  0020               	movlb	0	; select bank0
  5266  031A  00C4               	movwf	??_can_send
  5267  031B  0844               	movf	??_can_send,w
  5268  031C  00F8               	movwf	SPI_exchange@len
  5269  031D  30B4               	movlw	(low (_buf| 0))& (0+255)
  5270  031E  318B  235A  3182   	fcall	_SPI_exchange
  5271                           
  5272                           ;mcp2515.c: 250: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5273  0321  0020               	movlb	0	; select bank0
  5274  0322  086A               	movf	_mode,w
  5275  0323  1903               	btfsc	3,2
  5276  0324  2B3C               	goto	l2638
  5277  0325  304B               	movlw	low (STR_34| (0+32768))
  5278  0326  00A2               	movwf	printf@f
  5279  0327  3093               	movlw	high (STR_34| (0+32768))
  5280  0328  00A3               	movwf	printf@f+1
  5281  0329  084D               	movf	can_send@n,w
  5282  032A  00C4               	movwf	??_can_send
  5283  032B  01C5               	clrf	??_can_send+1
  5284  032C  0844               	movf	??_can_send,w
  5285  032D  00A4               	movwf	?_printf+2
  5286  032E  0845               	movf	??_can_send+1,w
  5287  032F  00A5               	movwf	?_printf+3
  5288  0330  0021               	movlb	1	; select bank1
  5289  0331  0836               	movf	(_buf^(0+128)+2),w
  5290  0332  0020               	movlb	0	; select bank0
  5291  0333  00C6               	movwf	??_can_send+2
  5292  0334  01C7               	clrf	??_can_send+3
  5293  0335  0846               	movf	??_can_send+2,w
  5294  0336  00A6               	movwf	?_printf+4
  5295  0337  0847               	movf	??_can_send+3,w
  5296  0338  00A7               	movwf	?_printf+5
  5297  0339  3185  25A5  3182   	fcall	_printf
  5298  033C                     l2638:	
  5299                           
  5300                           ;mcp2515.c: 251: buf[0] = 0b00000011u;
  5301  033C  3003               	movlw	3
  5302  033D  0020               	movlb	0	; select bank0
  5303  033E  00C4               	movwf	??_can_send
  5304  033F  0844               	movf	??_can_send,w
  5305  0340  0021               	movlb	1	; select bank1
  5306  0341  00B4               	movwf	_buf^(0+128)
  5307                           
  5308                           ;mcp2515.c: 252: buf[1] = txbnsidh[n] + 1u;
  5309  0342  0020               	movlb	0	; select bank0
  5310  0343  084D               	movf	can_send@n,w
  5311  0344  3EAA               	addlw	low (_txbnsidh| (0+32768))
  5312  0345  0084               	movwf	4
  5313  0346  3094               	movlw	high (_txbnsidh| (0+32768))
  5314  0347  1803               	skipnc
  5315  0348  3E01               	addlw	1
  5316  0349  0085               	movwf	5
  5317  034A  0800               	movf	0,w	;code access
  5318  034B  3E01               	addlw	1
  5319  034C  00C4               	movwf	??_can_send
  5320  034D  0844               	movf	??_can_send,w
  5321  034E  0021               	movlb	1	; select bank1
  5322  034F  00B5               	movwf	(_buf^(0+128)+1)
  5323                           
  5324                           ;mcp2515.c: 253: buf[2] = 0x00;
  5325  0350  01B6               	clrf	(_buf^(0+128)+2)
  5326                           
  5327                           ;mcp2515.c: 254: SPI_exchange(buf, 3);
  5328  0351  3003               	movlw	3
  5329  0352  0020               	movlb	0	; select bank0
  5330  0353  00C4               	movwf	??_can_send
  5331  0354  0844               	movf	??_can_send,w
  5332  0355  00F8               	movwf	SPI_exchange@len
  5333  0356  30B4               	movlw	(low (_buf| 0))& (0+255)
  5334  0357  318B  235A  3182   	fcall	_SPI_exchange
  5335                           
  5336                           ;mcp2515.c: 256: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5337  035A  0020               	movlb	0	; select bank0
  5338  035B  086A               	movf	_mode,w
  5339  035C  1903               	btfsc	3,2
  5340  035D  2B75               	goto	l2650
  5341  035E  306D               	movlw	low (STR_35| (0+32768))
  5342  035F  00A2               	movwf	printf@f
  5343  0360  3093               	movlw	high (STR_35| (0+32768))
  5344  0361  00A3               	movwf	printf@f+1
  5345  0362  084D               	movf	can_send@n,w
  5346  0363  00C4               	movwf	??_can_send
  5347  0364  01C5               	clrf	??_can_send+1
  5348  0365  0844               	movf	??_can_send,w
  5349  0366  00A4               	movwf	?_printf+2
  5350  0367  0845               	movf	??_can_send+1,w
  5351  0368  00A5               	movwf	?_printf+3
  5352  0369  0021               	movlb	1	; select bank1
  5353  036A  0836               	movf	(_buf^(0+128)+2),w
  5354  036B  0020               	movlb	0	; select bank0
  5355  036C  00C6               	movwf	??_can_send+2
  5356  036D  01C7               	clrf	??_can_send+3
  5357  036E  0846               	movf	??_can_send+2,w
  5358  036F  00A6               	movwf	?_printf+4
  5359  0370  0847               	movf	??_can_send+3,w
  5360  0371  00A7               	movwf	?_printf+5
  5361  0372  3185  25A5  3182   	fcall	_printf
  5362  0375                     l2650:	
  5363                           
  5364                           ;mcp2515.c: 258: if (bytes_written == len) {
  5365  0375  0020               	movlb	0	; select bank0
  5366  0376  0849               	movf	can_send@bytes_written,w
  5367  0377  0648               	xorwf	can_send@len,w
  5368  0378  1D03               	skipz
  5369  0379  0008               	return
  5370                           
  5371                           ;mcp2515.c: 260: buf[0] = 0b10000000u + (0b00000001u << n);
  5372  037A  3001               	movlw	1
  5373  037B  00C4               	movwf	??_can_send
  5374  037C  0A4D               	incf	can_send@n,w
  5375  037D  2B7F               	goto	u2344
  5376  037E                     u2345:	
  5377  037E  35C4               	lslf	??_can_send,f
  5378  037F                     u2344:	
  5379  037F  0B89               	decfsz	9,f
  5380  0380  2B7E               	goto	u2345
  5381  0381  0844               	movf	??_can_send,w
  5382  0382  3E80               	addlw	128
  5383  0383  00C5               	movwf	??_can_send+1
  5384  0384  0845               	movf	??_can_send+1,w
  5385  0385  0021               	movlb	1	; select bank1
  5386  0386  00B4               	movwf	_buf^(0+128)
  5387                           
  5388                           ;mcp2515.c: 261: bytes_written = SPI_exchange(buf, 1);
  5389  0387  01F8               	clrf	SPI_exchange@len
  5390  0388  0AF8               	incf	SPI_exchange@len,f
  5391  0389  30B4               	movlw	(low (_buf| 0))& (0+255)
  5392  038A  318B  235A  3182   	fcall	_SPI_exchange
  5393  038D  0020               	movlb	0	; select bank0
  5394  038E  00C4               	movwf	??_can_send
  5395  038F  0844               	movf	??_can_send,w
  5396  0390  00C9               	movwf	can_send@bytes_written
  5397                           
  5398                           ;mcp2515.c: 262: if (bytes_written == 1) {
  5399  0391  0349               	decf	can_send@bytes_written,w
  5400  0392  1D03               	btfss	3,2
  5401  0393  0008               	return
  5402                           
  5403                           ;mcp2515.c: 263: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5404  0394  086A               	movf	_mode,w
  5405  0395  1903               	btfsc	3,2
  5406  0396  0008               	return
  5407  0397  3006               	movlw	low (STR_36| (0+32768))
  5408  0398  00A2               	movwf	printf@f
  5409  0399  3093               	movlw	high (STR_36| (0+32768))
  5410  039A  00A3               	movwf	printf@f+1
  5411  039B  084B               	movf	can_send@data_buf,w
  5412  039C  00A4               	movwf	low ((?_printf| 0+2))
  5413  039D  3000               	movlw	0
  5414  039E  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5415  039F  3185  25A5         	fcall	_printf
  5416                           
  5417                           ;mcp2515.c: 264: return 1;
  5418                           ;	Return value of _can_send is never used
  5419  03A1  0008               	return
  5420  03A2                     __end_of_can_send:	
  5421                           ;mcp2515.c: 265: }
  5422                           ;mcp2515.c: 266: }
  5423                           ;mcp2515.c: 268: return 0;
  5424                           ;	Return value of _can_send is never used
  5425                           
  5426                           
  5427                           	psect	text7
  5428  0B31                     __ptext7:	
  5429 ;; *************** function _can_logging_mode *****************
  5430 ;; Defined at:
  5431 ;;		line 35 in file "mcp2515.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  debug           1    wreg     unsigned char 
  5434 ;;  verbose         1    0[COMMON] unsigned char 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  debug           1    2[COMMON] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		wreg
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5446 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;Total ram usage:        3 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _can_logging_mode
  5461  0B31                     _can_logging_mode:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _can_logging_mode: [wreg]
  5465                           ;can_logging_mode@debug stored from wreg
  5466  0B31  00F2               	movwf	can_logging_mode@debug
  5467                           
  5468                           ;mcp2515.c: 36: mode.debug = debug;
  5469  0B32  0872               	movf	can_logging_mode@debug,w
  5470  0B33  00F1               	movwf	??_can_logging_mode
  5471  0B34  0871               	movf	??_can_logging_mode,w
  5472  0B35  0020               	movlb	0	; select bank0
  5473  0B36  00EA               	movwf	_mode
  5474                           
  5475                           ;mcp2515.c: 37: mode.verbose = verbose;
  5476  0B37  0870               	movf	can_logging_mode@verbose,w
  5477  0B38  00F1               	movwf	??_can_logging_mode
  5478  0B39  0871               	movf	??_can_logging_mode,w
  5479  0B3A  00EB               	movwf	_mode+1
  5480  0B3B  0008               	return
  5481  0B3C                     __end_of_can_logging_mode:	
  5482                           
  5483                           	psect	text8
  5484  0E1B                     __ptext8:	
  5485 ;; *************** function _can_init *****************
  5486 ;; Defined at:
  5487 ;;		line 58 in file "mcp2515.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5490 ;;		 -> receive_handler(1), 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        3 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    4
  5509 ;; This function calls:
  5510 ;;		_SPI_exchange
  5511 ;;		_can_ope_mode
  5512 ;;		_can_set_sid
  5513 ;; This function is called by:
  5514 ;;		_main
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function _can_init
  5520  0E1B                     _can_init:	
  5521                           
  5522                           ;mcp2515.c: 59: _delay((unsigned long)((100)*(2000000/4000.0)));
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5526  0E1B  3041               	movlw	65
  5527  0E1C  0020               	movlb	0	; select bank0
  5528  0E1D  00C9               	movwf	??_can_init
  5529  0E1E  30EE               	movlw	238
  5530  0E1F                     u2557:	
  5531  0E1F  0B89               	decfsz	9,f
  5532  0E20  2E1F               	goto	u2557
  5533  0E21  0BC9               	decfsz	??_can_init,f
  5534  0E22  2E1F               	goto	u2557
  5535  0E23  0000               	nop
  5536                           
  5537                           ;mcp2515.c: 61: can_set_sid(0);
  5538  0E24  3000               	movlw	0
  5539  0E25  00F0               	movwf	can_set_sid@can_node
  5540  0E26  00F1               	movwf	can_set_sid@can_node+1
  5541  0E27  318B  23BA  318E   	fcall	_can_set_sid
  5542                           
  5543                           ;mcp2515.c: 62: handler = receive_handler;
  5544  0E2A  0020               	movlb	0	; select bank0
  5545  0E2B  0848               	movf	can_init@receive_handler+1,w
  5546  0E2C  0021               	movlb	1	; select bank1
  5547  0E2D  00B1               	movwf	(_handler+1)^(0+128)
  5548  0E2E  0020               	movlb	0	; select bank0
  5549  0E2F  0847               	movf	can_init@receive_handler,w
  5550  0E30  0021               	movlb	1	; select bank1
  5551  0E31  00B0               	movwf	_handler^(0+128)
  5552                           
  5553                           ;mcp2515.c: 65: buf[0] = 0b11000000u;
  5554  0E32  30C0               	movlw	192
  5555  0E33  0020               	movlb	0	; select bank0
  5556  0E34  00C9               	movwf	??_can_init
  5557  0E35  0849               	movf	??_can_init,w
  5558  0E36  0021               	movlb	1	; select bank1
  5559  0E37  00B4               	movwf	_buf^(0+128)
  5560                           
  5561                           ;mcp2515.c: 66: SPI_exchange(buf, 1);
  5562  0E38  01F8               	clrf	SPI_exchange@len
  5563  0E39  0AF8               	incf	SPI_exchange@len,f
  5564  0E3A  30B4               	movlw	(low (_buf| 0))& (0+255)
  5565  0E3B  318B  235A  318E   	fcall	_SPI_exchange
  5566                           
  5567                           ;mcp2515.c: 68: _delay((unsigned long)((2+48)*(2000000/4000000.0)));
  5568  0E3E  3008               	movlw	8
  5569  0E3F                     u2567:	
  5570  0E3F  0B89               	decfsz	9,f
  5571  0E40  2E3F               	goto	u2567
  5572  0E41  0000               	nop
  5573                           
  5574                           ;mcp2515.c: 70: buf[0] = 0b00000010u;
  5575  0E42  3002               	movlw	2
  5576  0E43  0020               	movlb	0	; select bank0
  5577  0E44  00C9               	movwf	??_can_init
  5578  0E45  0849               	movf	??_can_init,w
  5579  0E46  0021               	movlb	1	; select bank1
  5580  0E47  00B4               	movwf	_buf^(0+128)
  5581                           
  5582                           ;mcp2515.c: 71: buf[1] = 0x28u;
  5583  0E48  3028               	movlw	40
  5584  0E49  0020               	movlb	0	; select bank0
  5585  0E4A  00C9               	movwf	??_can_init
  5586  0E4B  0849               	movf	??_can_init,w
  5587  0E4C  0021               	movlb	1	; select bank1
  5588  0E4D  00B5               	movwf	(_buf^(0+128)+1)
  5589                           
  5590                           ;mcp2515.c: 72: buf[2] = 0b00000101u;
  5591  0E4E  3005               	movlw	5
  5592  0E4F  0020               	movlb	0	; select bank0
  5593  0E50  00C9               	movwf	??_can_init
  5594  0E51  0849               	movf	??_can_init,w
  5595  0E52  0021               	movlb	1	; select bank1
  5596  0E53  00B6               	movwf	(_buf^(0+128)+2)
  5597                           
  5598                           ;mcp2515.c: 73: buf[3] = 0b11110001u;
  5599  0E54  30F1               	movlw	241
  5600  0E55  0020               	movlb	0	; select bank0
  5601  0E56  00C9               	movwf	??_can_init
  5602  0E57  0849               	movf	??_can_init,w
  5603  0E58  0021               	movlb	1	; select bank1
  5604  0E59  00B7               	movwf	(_buf^(0+128)+3)
  5605                           
  5606                           ;mcp2515.c: 74: buf[4] = 0b01000001u;
  5607  0E5A  3041               	movlw	65
  5608  0E5B  0020               	movlb	0	; select bank0
  5609  0E5C  00C9               	movwf	??_can_init
  5610  0E5D  0849               	movf	??_can_init,w
  5611  0E5E  0021               	movlb	1	; select bank1
  5612  0E5F  00B8               	movwf	(_buf^(0+128)+4)
  5613                           
  5614                           ;mcp2515.c: 75: SPI_exchange(buf, 5);
  5615  0E60  3005               	movlw	5
  5616  0E61  0020               	movlb	0	; select bank0
  5617  0E62  00C9               	movwf	??_can_init
  5618  0E63  0849               	movf	??_can_init,w
  5619  0E64  00F8               	movwf	SPI_exchange@len
  5620  0E65  30B4               	movlw	(low (_buf| 0))& (0+255)
  5621  0E66  318B  235A  318E   	fcall	_SPI_exchange
  5622                           
  5623                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  5624  0E69  3002               	movlw	2
  5625  0E6A  0020               	movlb	0	; select bank0
  5626  0E6B  00C9               	movwf	??_can_init
  5627  0E6C  0849               	movf	??_can_init,w
  5628  0E6D  0021               	movlb	1	; select bank1
  5629  0E6E  00B4               	movwf	_buf^(0+128)
  5630                           
  5631                           ;mcp2515.c: 78: buf[1] = 0x60u;
  5632  0E6F  3060               	movlw	96
  5633  0E70  0020               	movlb	0	; select bank0
  5634  0E71  00C9               	movwf	??_can_init
  5635  0E72  0849               	movf	??_can_init,w
  5636  0E73  0021               	movlb	1	; select bank1
  5637  0E74  00B5               	movwf	(_buf^(0+128)+1)
  5638                           
  5639                           ;mcp2515.c: 79: buf[2] = 0b00100100u;
  5640  0E75  3024               	movlw	36
  5641  0E76  0020               	movlb	0	; select bank0
  5642  0E77  00C9               	movwf	??_can_init
  5643  0E78  0849               	movf	??_can_init,w
  5644  0E79  0021               	movlb	1	; select bank1
  5645  0E7A  00B6               	movwf	(_buf^(0+128)+2)
  5646                           
  5647                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  5648  0E7B  3003               	movlw	3
  5649  0E7C  0020               	movlb	0	; select bank0
  5650  0E7D  00C9               	movwf	??_can_init
  5651  0E7E  0849               	movf	??_can_init,w
  5652  0E7F  00F8               	movwf	SPI_exchange@len
  5653  0E80  30B4               	movlw	(low (_buf| 0))& (0+255)
  5654  0E81  318B  235A  318E   	fcall	_SPI_exchange
  5655                           
  5656                           ;mcp2515.c: 82: buf[0] = 0b00000010u;
  5657  0E84  3002               	movlw	2
  5658  0E85  0020               	movlb	0	; select bank0
  5659  0E86  00C9               	movwf	??_can_init
  5660  0E87  0849               	movf	??_can_init,w
  5661  0E88  0021               	movlb	1	; select bank1
  5662  0E89  00B4               	movwf	_buf^(0+128)
  5663                           
  5664                           ;mcp2515.c: 83: buf[1] = 0x70u;
  5665  0E8A  3070               	movlw	112
  5666  0E8B  0020               	movlb	0	; select bank0
  5667  0E8C  00C9               	movwf	??_can_init
  5668  0E8D  0849               	movf	??_can_init,w
  5669  0E8E  0021               	movlb	1	; select bank1
  5670  0E8F  00B5               	movwf	(_buf^(0+128)+1)
  5671                           
  5672                           ;mcp2515.c: 84: buf[2] = 0b00100000u;
  5673  0E90  3020               	movlw	32
  5674  0E91  0020               	movlb	0	; select bank0
  5675  0E92  00C9               	movwf	??_can_init
  5676  0E93  0849               	movf	??_can_init,w
  5677  0E94  0021               	movlb	1	; select bank1
  5678  0E95  00B6               	movwf	(_buf^(0+128)+2)
  5679                           
  5680                           ;mcp2515.c: 85: SPI_exchange(buf, 3);
  5681  0E96  3003               	movlw	3
  5682  0E97  0020               	movlb	0	; select bank0
  5683  0E98  00C9               	movwf	??_can_init
  5684  0E99  0849               	movf	??_can_init,w
  5685  0E9A  00F8               	movwf	SPI_exchange@len
  5686  0E9B  30B4               	movlw	(low (_buf| 0))& (0+255)
  5687  0E9C  318B  235A  318E   	fcall	_SPI_exchange
  5688                           
  5689                           ;mcp2515.c: 87: mode.debug = 0;
  5690  0E9F  0020               	movlb	0	; select bank0
  5691  0EA0  01EA               	clrf	_mode
  5692                           
  5693                           ;mcp2515.c: 88: mode.verbose = 0;
  5694  0EA1  01EB               	clrf	_mode+1
  5695                           
  5696                           ;mcp2515.c: 90: can_ope_mode(0b00000000u);
  5697  0EA2  3000               	movlw	0
  5698  0EA3  318D  2569         	fcall	_can_ope_mode
  5699  0EA5  0008               	return
  5700  0EA6                     __end_of_can_init:	
  5701                           
  5702                           	psect	text9
  5703  0BBA                     __ptext9:	
  5704 ;; *************** function _can_set_sid *****************
  5705 ;; Defined at:
  5706 ;;		line 48 in file "mcp2515.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  can_node        2    0[COMMON] unsigned int 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  sidl            1    6[COMMON] unsigned char 
  5711 ;;  sidh            1    5[COMMON] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:        7 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; This function calls:
  5728 ;;		Nothing
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;;		_can_init
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _can_set_sid
  5737  0BBA                     _can_set_sid:	
  5738                           
  5739                           ;mcp2515.c: 49: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5743  0BBA  0871               	movf	can_set_sid@can_node+1,w
  5744  0BBB  00F3               	movwf	??_can_set_sid+1
  5745  0BBC  0870               	movf	can_set_sid@can_node,w
  5746  0BBD  00F2               	movwf	??_can_set_sid
  5747  0BBE  36F3               	lsrf	??_can_set_sid+1,f
  5748  0BBF  0CF2               	rrf	??_can_set_sid,f
  5749  0BC0  36F3               	lsrf	??_can_set_sid+1,f
  5750  0BC1  0CF2               	rrf	??_can_set_sid,f
  5751  0BC2  36F3               	lsrf	??_can_set_sid+1,f
  5752  0BC3  0CF2               	rrf	??_can_set_sid,f
  5753  0BC4  0872               	movf	??_can_set_sid,w
  5754  0BC5  00F4               	movwf	??_can_set_sid+2
  5755  0BC6  0874               	movf	??_can_set_sid+2,w
  5756  0BC7  00F5               	movwf	can_set_sid@sidh
  5757                           
  5758                           ;mcp2515.c: 50: uint8_t sidl = (can_node << 5) & 0x00e0;
  5759  0BC8  0870               	movf	can_set_sid@can_node,w
  5760  0BC9  00F2               	movwf	??_can_set_sid
  5761  0BCA  3004               	movlw	4
  5762  0BCB                     u1875:	
  5763  0BCB  35F2               	lslf	??_can_set_sid,f
  5764  0BCC  3EFF               	addlw	-1
  5765  0BCD  1D03               	skipz
  5766  0BCE  2BCB               	goto	u1875
  5767  0BCF  3572               	lslf	??_can_set_sid,w
  5768  0BD0  39E0               	andlw	224
  5769  0BD1  00F3               	movwf	??_can_set_sid+1
  5770  0BD2  0873               	movf	??_can_set_sid+1,w
  5771  0BD3  00F6               	movwf	can_set_sid@sidl
  5772                           
  5773                           ;mcp2515.c: 51: sid.sidh = sidh;
  5774  0BD4  0875               	movf	can_set_sid@sidh,w
  5775  0BD5  00F2               	movwf	??_can_set_sid
  5776  0BD6  0872               	movf	??_can_set_sid,w
  5777  0BD7  0021               	movlb	1	; select bank1
  5778  0BD8  00B2               	movwf	_sid^(0+128)
  5779                           
  5780                           ;mcp2515.c: 52: sid.sidl = sidl;
  5781  0BD9  0876               	movf	can_set_sid@sidl,w
  5782  0BDA  00F2               	movwf	??_can_set_sid
  5783  0BDB  0872               	movf	??_can_set_sid,w
  5784  0BDC  00B3               	movwf	(_sid^(0+128)+1)
  5785  0BDD  0008               	return
  5786  0BDE                     __end_of_can_set_sid:	
  5787                           
  5788                           	psect	text10
  5789  0145                     __ptext10:	
  5790 ;; *************** function _can_dump_registers *****************
  5791 ;; Defined at:
  5792 ;;		line 361 in file "mcp2515.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;Total ram usage:        2 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    4
  5813 ;; This function calls:
  5814 ;;		_printf
  5815 ;;		_read_register
  5816 ;; This function is called by:
  5817 ;;		_main
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _can_dump_registers
  5823  0145                     _can_dump_registers:	
  5824                           
  5825                           ;mcp2515.c: 362: printf("---\n");
  5826                           
  5827                           ;incstack = 0
  5828                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5829  0145  30A5               	movlw	low (STR_39| (0+32768))
  5830  0146  0020               	movlb	0	; select bank0
  5831  0147  00A2               	movwf	printf@f
  5832  0148  3094               	movlw	high (STR_39| (0+32768))
  5833  0149  00A3               	movwf	printf@f+1
  5834  014A  3185  25A5  3181   	fcall	_printf
  5835                           
  5836                           ;mcp2515.c: 363: printf("SIDH: %02x\n", sid.sidh);
  5837  014D  303F               	movlw	low ((STR_26+5)| (0+32768))
  5838  014E  0020               	movlb	0	; select bank0
  5839  014F  00A2               	movwf	printf@f
  5840  0150  3093               	movlw	high ((STR_26+5)| (0+32768))
  5841  0151  00A3               	movwf	printf@f+1
  5842  0152  0021               	movlb	1	; select bank1
  5843  0153  0832               	movf	_sid^(0+128),w
  5844  0154  0020               	movlb	0	; select bank0
  5845  0155  00C3               	movwf	??_can_dump_registers
  5846  0156  01C4               	clrf	??_can_dump_registers+1
  5847  0157  0843               	movf	??_can_dump_registers,w
  5848  0158  00A4               	movwf	?_printf+2
  5849  0159  0844               	movf	??_can_dump_registers+1,w
  5850  015A  00A5               	movwf	?_printf+3
  5851  015B  3185  25A5  3181   	fcall	_printf
  5852                           
  5853                           ;mcp2515.c: 364: printf("SIDL: %02x\n", sid.sidl);
  5854  015E  3061               	movlw	low ((STR_27+5)| (0+32768))
  5855  015F  0020               	movlb	0	; select bank0
  5856  0160  00A2               	movwf	printf@f
  5857  0161  3093               	movlw	high ((STR_27+5)| (0+32768))
  5858  0162  00A3               	movwf	printf@f+1
  5859  0163  0021               	movlb	1	; select bank1
  5860  0164  0833               	movf	(_sid^(0+128)+1),w
  5861  0165  0020               	movlb	0	; select bank0
  5862  0166  00C3               	movwf	??_can_dump_registers
  5863  0167  01C4               	clrf	??_can_dump_registers+1
  5864  0168  0843               	movf	??_can_dump_registers,w
  5865  0169  00A4               	movwf	?_printf+2
  5866  016A  0844               	movf	??_can_dump_registers+1,w
  5867  016B  00A5               	movwf	?_printf+3
  5868  016C  3185  25A5  3181   	fcall	_printf
  5869                           
  5870                           ;mcp2515.c: 365: printf("\n");
  5871  016F  30A8               	movlw	low ((STR_39+3)| (0+32768))
  5872  0170  0020               	movlb	0	; select bank0
  5873  0171  00A2               	movwf	printf@f
  5874  0172  3094               	movlw	high ((STR_39+3)| (0+32768))
  5875  0173  00A3               	movwf	printf@f+1
  5876  0174  3185  25A5  3181   	fcall	_printf
  5877                           
  5878                           ;mcp2515.c: 367: printf("CNF1: %02x\n", read_register(0x2au));
  5879  0177  304F               	movlw	low (STR_47| (0+32768))
  5880  0178  0020               	movlb	0	; select bank0
  5881  0179  00A2               	movwf	printf@f
  5882  017A  3094               	movlw	high (STR_47| (0+32768))
  5883  017B  00A3               	movwf	printf@f+1
  5884  017C  302A               	movlw	42
  5885  017D  318B  2386  3181   	fcall	_read_register
  5886  0180  0020               	movlb	0	; select bank0
  5887  0181  00C3               	movwf	??_can_dump_registers
  5888  0182  01C4               	clrf	??_can_dump_registers+1
  5889  0183  0843               	movf	??_can_dump_registers,w
  5890  0184  00A4               	movwf	?_printf+2
  5891  0185  0844               	movf	??_can_dump_registers+1,w
  5892  0186  00A5               	movwf	?_printf+3
  5893  0187  3185  25A5  3181   	fcall	_printf
  5894                           
  5895                           ;mcp2515.c: 368: printf("CNF2: %02x\n", read_register(0x29u));
  5896  018A  305B               	movlw	low (STR_48| (0+32768))
  5897  018B  0020               	movlb	0	; select bank0
  5898  018C  00A2               	movwf	printf@f
  5899  018D  3094               	movlw	high (STR_48| (0+32768))
  5900  018E  00A3               	movwf	printf@f+1
  5901  018F  3029               	movlw	41
  5902  0190  318B  2386  3181   	fcall	_read_register
  5903  0193  0020               	movlb	0	; select bank0
  5904  0194  00C3               	movwf	??_can_dump_registers
  5905  0195  01C4               	clrf	??_can_dump_registers+1
  5906  0196  0843               	movf	??_can_dump_registers,w
  5907  0197  00A4               	movwf	?_printf+2
  5908  0198  0844               	movf	??_can_dump_registers+1,w
  5909  0199  00A5               	movwf	?_printf+3
  5910  019A  3185  25A5  3181   	fcall	_printf
  5911                           
  5912                           ;mcp2515.c: 369: printf("CNF3: %02x\n", read_register(0x28u));
  5913  019D  3067               	movlw	low (STR_49| (0+32768))
  5914  019E  0020               	movlb	0	; select bank0
  5915  019F  00A2               	movwf	printf@f
  5916  01A0  3094               	movlw	high (STR_49| (0+32768))
  5917  01A1  00A3               	movwf	printf@f+1
  5918  01A2  3028               	movlw	40
  5919  01A3  318B  2386  3181   	fcall	_read_register
  5920  01A6  0020               	movlb	0	; select bank0
  5921  01A7  00C3               	movwf	??_can_dump_registers
  5922  01A8  01C4               	clrf	??_can_dump_registers+1
  5923  01A9  0843               	movf	??_can_dump_registers,w
  5924  01AA  00A4               	movwf	?_printf+2
  5925  01AB  0844               	movf	??_can_dump_registers+1,w
  5926  01AC  00A5               	movwf	?_printf+3
  5927  01AD  3185  25A5  3181   	fcall	_printf
  5928                           
  5929                           ;mcp2515.c: 370: printf("\n");
  5930  01B0  30A8               	movlw	low ((STR_39+3)| (0+32768))
  5931  01B1  0020               	movlb	0	; select bank0
  5932  01B2  00A2               	movwf	printf@f
  5933  01B3  3094               	movlw	high ((STR_39+3)| (0+32768))
  5934  01B4  00A3               	movwf	printf@f+1
  5935  01B5  3185  25A5  3181   	fcall	_printf
  5936                           
  5937                           ;mcp2515.c: 372: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  5938  01B8  309E               	movlw	low (STR_51| (0+32768))
  5939  01B9  0020               	movlb	0	; select bank0
  5940  01BA  00A2               	movwf	printf@f
  5941  01BB  3093               	movlw	high (STR_51| (0+32768))
  5942  01BC  00A3               	movwf	printf@f+1
  5943  01BD  3030               	movlw	48
  5944  01BE  318B  2386  3181   	fcall	_read_register
  5945  01C1  0020               	movlb	0	; select bank0
  5946  01C2  00C3               	movwf	??_can_dump_registers
  5947  01C3  01C4               	clrf	??_can_dump_registers+1
  5948  01C4  0843               	movf	??_can_dump_registers,w
  5949  01C5  00A4               	movwf	?_printf+2
  5950  01C6  0844               	movf	??_can_dump_registers+1,w
  5951  01C7  00A5               	movwf	?_printf+3
  5952  01C8  3185  25A5  3181   	fcall	_printf
  5953                           
  5954                           ;mcp2515.c: 373: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  5955  01CB  30BE               	movlw	low (STR_52| (0+32768))
  5956  01CC  0020               	movlb	0	; select bank0
  5957  01CD  00A2               	movwf	printf@f
  5958  01CE  3093               	movlw	high (STR_52| (0+32768))
  5959  01CF  00A3               	movwf	printf@f+1
  5960  01D0  3040               	movlw	64
  5961  01D1  318B  2386  3181   	fcall	_read_register
  5962  01D4  0020               	movlb	0	; select bank0
  5963  01D5  00C3               	movwf	??_can_dump_registers
  5964  01D6  01C4               	clrf	??_can_dump_registers+1
  5965  01D7  0843               	movf	??_can_dump_registers,w
  5966  01D8  00A4               	movwf	?_printf+2
  5967  01D9  0844               	movf	??_can_dump_registers+1,w
  5968  01DA  00A5               	movwf	?_printf+3
  5969  01DB  3185  25A5  3181   	fcall	_printf
  5970                           
  5971                           ;mcp2515.c: 374: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  5972  01DE  30CE               	movlw	low (STR_53| (0+32768))
  5973  01DF  0020               	movlb	0	; select bank0
  5974  01E0  00A2               	movwf	printf@f
  5975  01E1  3093               	movlw	high (STR_53| (0+32768))
  5976  01E2  00A3               	movwf	printf@f+1
  5977  01E3  3050               	movlw	80
  5978  01E4  318B  2386  3181   	fcall	_read_register
  5979  01E7  0020               	movlb	0	; select bank0
  5980  01E8  00C3               	movwf	??_can_dump_registers
  5981  01E9  01C4               	clrf	??_can_dump_registers+1
  5982  01EA  0843               	movf	??_can_dump_registers,w
  5983  01EB  00A4               	movwf	?_printf+2
  5984  01EC  0844               	movf	??_can_dump_registers+1,w
  5985  01ED  00A5               	movwf	?_printf+3
  5986  01EE  3185  25A5  3181   	fcall	_printf
  5987                           
  5988                           ;mcp2515.c: 375: printf("\n");
  5989  01F1  30A8               	movlw	low ((STR_39+3)| (0+32768))
  5990  01F2  0020               	movlb	0	; select bank0
  5991  01F3  00A2               	movwf	printf@f
  5992  01F4  3094               	movlw	high ((STR_39+3)| (0+32768))
  5993  01F5  00A3               	movwf	printf@f+1
  5994  01F6  3185  25A5  3181   	fcall	_printf
  5995                           
  5996                           ;mcp2515.c: 377: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  5997  01F9  308E               	movlw	low (STR_55| (0+32768))
  5998  01FA  0020               	movlb	0	; select bank0
  5999  01FB  00A2               	movwf	printf@f
  6000  01FC  3093               	movlw	high (STR_55| (0+32768))
  6001  01FD  00A3               	movwf	printf@f+1
  6002  01FE  3060               	movlw	96
  6003  01FF  318B  2386  3181   	fcall	_read_register
  6004  0202  0020               	movlb	0	; select bank0
  6005  0203  00C3               	movwf	??_can_dump_registers
  6006  0204  01C4               	clrf	??_can_dump_registers+1
  6007  0205  0843               	movf	??_can_dump_registers,w
  6008  0206  00A4               	movwf	?_printf+2
  6009  0207  0844               	movf	??_can_dump_registers+1,w
  6010  0208  00A5               	movwf	?_printf+3
  6011  0209  3185  25A5  3181   	fcall	_printf
  6012                           
  6013                           ;mcp2515.c: 378: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6014  020C  30AE               	movlw	low (STR_56| (0+32768))
  6015  020D  0020               	movlb	0	; select bank0
  6016  020E  00A2               	movwf	printf@f
  6017  020F  3093               	movlw	high (STR_56| (0+32768))
  6018  0210  00A3               	movwf	printf@f+1
  6019  0211  3070               	movlw	112
  6020  0212  318B  2386  3181   	fcall	_read_register
  6021  0215  0020               	movlb	0	; select bank0
  6022  0216  00C3               	movwf	??_can_dump_registers
  6023  0217  01C4               	clrf	??_can_dump_registers+1
  6024  0218  0843               	movf	??_can_dump_registers,w
  6025  0219  00A4               	movwf	?_printf+2
  6026  021A  0844               	movf	??_can_dump_registers+1,w
  6027  021B  00A5               	movwf	?_printf+3
  6028  021C  3185  25A5  3181   	fcall	_printf
  6029                           
  6030                           ;mcp2515.c: 379: printf("\n");
  6031  021F  30A8               	movlw	low ((STR_39+3)| (0+32768))
  6032  0220  0020               	movlb	0	; select bank0
  6033  0221  00A2               	movwf	printf@f
  6034  0222  3094               	movlw	high ((STR_39+3)| (0+32768))
  6035  0223  00A3               	movwf	printf@f+1
  6036  0224  3185  25A5  3181   	fcall	_printf
  6037                           
  6038                           ;mcp2515.c: 381: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6039  0227  30ED               	movlw	low (STR_58| (0+32768))
  6040  0228  0020               	movlb	0	; select bank0
  6041  0229  00A2               	movwf	printf@f
  6042  022A  3093               	movlw	high (STR_58| (0+32768))
  6043  022B  00A3               	movwf	printf@f+1
  6044  022C  300F               	movlw	15
  6045  022D  318B  2386  3181   	fcall	_read_register
  6046  0230  0020               	movlb	0	; select bank0
  6047  0231  00C3               	movwf	??_can_dump_registers
  6048  0232  01C4               	clrf	??_can_dump_registers+1
  6049  0233  0843               	movf	??_can_dump_registers,w
  6050  0234  00A4               	movwf	?_printf+2
  6051  0235  0844               	movf	??_can_dump_registers+1,w
  6052  0236  00A5               	movwf	?_printf+3
  6053  0237  3185  25A5  3181   	fcall	_printf
  6054                           
  6055                           ;mcp2515.c: 382: printf("CANSTAT: %02x\n", read_register(0x0e));
  6056  023A  30FC               	movlw	low (STR_23| (0+32768))
  6057  023B  0020               	movlb	0	; select bank0
  6058  023C  00A2               	movwf	printf@f
  6059  023D  3093               	movlw	high (STR_23| (0+32768))
  6060  023E  00A3               	movwf	printf@f+1
  6061  023F  300E               	movlw	14
  6062  0240  318B  2386  3181   	fcall	_read_register
  6063  0243  0020               	movlb	0	; select bank0
  6064  0244  00C3               	movwf	??_can_dump_registers
  6065  0245  01C4               	clrf	??_can_dump_registers+1
  6066  0246  0843               	movf	??_can_dump_registers,w
  6067  0247  00A4               	movwf	?_printf+2
  6068  0248  0844               	movf	??_can_dump_registers+1,w
  6069  0249  00A5               	movwf	?_printf+3
  6070  024A  3185  25A5  3181   	fcall	_printf
  6071                           
  6072                           ;mcp2515.c: 383: printf("---\n");
  6073  024D  30A5               	movlw	low (STR_39| (0+32768))
  6074  024E  0020               	movlb	0	; select bank0
  6075  024F  00A2               	movwf	printf@f
  6076  0250  3094               	movlw	high (STR_39| (0+32768))
  6077  0251  00A3               	movwf	printf@f+1
  6078  0252  3185  25A5         	fcall	_printf
  6079  0254  0008               	return
  6080  0255                     __end_of_can_dump_registers:	
  6081                           
  6082                           	psect	text11
  6083  0B86                     __ptext11:	
  6084 ;; *************** function _read_register *****************
  6085 ;; Defined at:
  6086 ;;		line 331 in file "mcp2515.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  addr            1    wreg     unsigned char 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  addr            1    1[BANK0 ] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      unsigned char 
  6093 ;; Registers used:
  6094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;Total ram usage:        2 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    3
  6107 ;; This function calls:
  6108 ;;		_SPI_exchange
  6109 ;; This function is called by:
  6110 ;;		_can_dump_registers
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function _read_register
  6116  0B86                     _read_register:	
  6117                           
  6118                           ;incstack = 0
  6119                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6120                           ;read_register@addr stored from wreg
  6121  0B86  0020               	movlb	0	; select bank0
  6122  0B87  00A1               	movwf	read_register@addr
  6123                           
  6124                           ;mcp2515.c: 332: buf[0] = 0b00000011u;
  6125  0B88  3003               	movlw	3
  6126  0B89  00A0               	movwf	??_read_register
  6127  0B8A  0820               	movf	??_read_register,w
  6128  0B8B  0021               	movlb	1	; select bank1
  6129  0B8C  00B4               	movwf	_buf^(0+128)
  6130                           
  6131                           ;mcp2515.c: 333: buf[1] = addr;
  6132  0B8D  0020               	movlb	0	; select bank0
  6133  0B8E  0821               	movf	read_register@addr,w
  6134  0B8F  00A0               	movwf	??_read_register
  6135  0B90  0820               	movf	??_read_register,w
  6136  0B91  0021               	movlb	1	; select bank1
  6137  0B92  00B5               	movwf	(_buf^(0+128)+1)
  6138                           
  6139                           ;mcp2515.c: 334: buf[2] = 0x00;
  6140  0B93  01B6               	clrf	(_buf^(0+128)+2)
  6141                           
  6142                           ;mcp2515.c: 335: SPI_exchange(buf, 3);
  6143  0B94  3003               	movlw	3
  6144  0B95  0020               	movlb	0	; select bank0
  6145  0B96  00A0               	movwf	??_read_register
  6146  0B97  0820               	movf	??_read_register,w
  6147  0B98  00F8               	movwf	SPI_exchange@len
  6148  0B99  30B4               	movlw	(low (_buf| 0))& (0+255)
  6149  0B9A  318B  235A         	fcall	_SPI_exchange
  6150                           
  6151                           ;mcp2515.c: 336: return buf[2];
  6152  0B9C  0021               	movlb	1	; select bank1
  6153  0B9D  0836               	movf	(_buf^(0+128)+2),w
  6154  0B9E  0008               	return
  6155  0B9F                     __end_of_read_register:	
  6156                           
  6157                           	psect	text12
  6158  0079                     __ptext12:	
  6159 ;; *************** function _can_dump_masks_and_filters *****************
  6160 ;; Defined at:
  6161 ;;		line 339 in file "mcp2515.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  m               2   47[BANK0 ] unsigned int 
  6166 ;;  i               1   49[BANK0 ] unsigned char 
  6167 ;;  l               1   46[BANK0 ] unsigned char 
  6168 ;;  h               1   45[BANK0 ] unsigned char 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;Total ram usage:       15 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    3
  6185 ;; This function calls:
  6186 ;;		_printf
  6187 ;; This function is called by:
  6188 ;;		_main
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function _can_dump_masks_and_filters
  6194  0079                     _can_dump_masks_and_filters:	
  6195                           
  6196                           ;mcp2515.c: 340: uint8_t i, h, l;
  6197                           ;mcp2515.c: 341: uint16_t m;
  6198                           ;mcp2515.c: 342: printf("---\n");
  6199                           
  6200                           ;incstack = 0
  6201                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6202  0079  30A5               	movlw	low (STR_39| (0+32768))
  6203  007A  0020               	movlb	0	; select bank0
  6204  007B  00A2               	movwf	printf@f
  6205  007C  3094               	movlw	high (STR_39| (0+32768))
  6206  007D  00A3               	movwf	printf@f+1
  6207  007E  3185  25A5  3180   	fcall	_printf
  6208                           
  6209                           ;mcp2515.c: 343: for(i=0; i<2; i++) {
  6210  0081  0020               	movlb	0	; select bank0
  6211  0082  01D1               	clrf	can_dump_masks_and_filters@i
  6212  0083  3002               	movlw	2
  6213  0084  0251               	subwf	can_dump_masks_and_filters@i,w
  6214  0085  1803               	btfsc	3,0
  6215  0086  28E0               	goto	l2546
  6216  0087                     l2534:	
  6217                           
  6218                           ;mcp2515.c: 344: m = save_rxmn[i];
  6219  0087  3551               	lslf	can_dump_masks_and_filters@i,w
  6220  0088  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6221  0089  0086               	movwf	6
  6222  008A  0187               	clrf	7
  6223  008B  3F40               	moviw [0]fsr1
  6224  008C  00CF               	movwf	can_dump_masks_and_filters@m
  6225  008D  3F41               	moviw [1]fsr1
  6226  008E  00D0               	movwf	can_dump_masks_and_filters@m+1
  6227                           
  6228                           ;mcp2515.c: 345: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6229  008F  0850               	movf	can_dump_masks_and_filters@m+1,w
  6230  0090  00C4               	movwf	??_can_dump_masks_and_filters+1
  6231  0091  084F               	movf	can_dump_masks_and_filters@m,w
  6232  0092  00C3               	movwf	??_can_dump_masks_and_filters
  6233  0093  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6234  0094  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6235  0095  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6236  0096  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6237  0097  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6238  0098  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6239  0099  0843               	movf	??_can_dump_masks_and_filters,w
  6240  009A  00C5               	movwf	??_can_dump_masks_and_filters+2
  6241  009B  0845               	movf	??_can_dump_masks_and_filters+2,w
  6242  009C  00CD               	movwf	can_dump_masks_and_filters@h
  6243                           
  6244                           ;mcp2515.c: 346: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6245  009D  084F               	movf	can_dump_masks_and_filters@m,w
  6246  009E  3907               	andlw	7
  6247  009F  00C3               	movwf	??_can_dump_masks_and_filters
  6248  00A0  3004               	movlw	4
  6249  00A1                     u2185:	
  6250  00A1  35C3               	lslf	??_can_dump_masks_and_filters,f
  6251  00A2  3EFF               	addlw	-1
  6252  00A3  1D03               	skipz
  6253  00A4  28A1               	goto	u2185
  6254  00A5  3543               	lslf	??_can_dump_masks_and_filters,w
  6255  00A6  00C4               	movwf	??_can_dump_masks_and_filters+1
  6256  00A7  0844               	movf	??_can_dump_masks_and_filters+1,w
  6257  00A8  00CE               	movwf	can_dump_masks_and_filters@l
  6258                           
  6259                           ;mcp2515.c: 347: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6260  00A9  3044               	movlw	low (STR_40| (0+32768))
  6261  00AA  00A2               	movwf	printf@f
  6262  00AB  3091               	movlw	high (STR_40| (0+32768))
  6263  00AC  00A3               	movwf	printf@f+1
  6264  00AD  0851               	movf	can_dump_masks_and_filters@i,w
  6265  00AE  00C3               	movwf	??_can_dump_masks_and_filters
  6266  00AF  01C4               	clrf	??_can_dump_masks_and_filters+1
  6267  00B0  0843               	movf	??_can_dump_masks_and_filters,w
  6268  00B1  00A4               	movwf	?_printf+2
  6269  00B2  0844               	movf	??_can_dump_masks_and_filters+1,w
  6270  00B3  00A5               	movwf	?_printf+3
  6271  00B4  0851               	movf	can_dump_masks_and_filters@i,w
  6272  00B5  00C5               	movwf	??_can_dump_masks_and_filters+2
  6273  00B6  01C6               	clrf	??_can_dump_masks_and_filters+3
  6274  00B7  0845               	movf	??_can_dump_masks_and_filters+2,w
  6275  00B8  00A6               	movwf	?_printf+4
  6276  00B9  0846               	movf	??_can_dump_masks_and_filters+3,w
  6277  00BA  00A7               	movwf	?_printf+5
  6278  00BB  0851               	movf	can_dump_masks_and_filters@i,w
  6279  00BC  00C7               	movwf	??_can_dump_masks_and_filters+4
  6280  00BD  01C8               	clrf	??_can_dump_masks_and_filters+5
  6281  00BE  0847               	movf	??_can_dump_masks_and_filters+4,w
  6282  00BF  00A8               	movwf	?_printf+6
  6283  00C0  0848               	movf	??_can_dump_masks_and_filters+5,w
  6284  00C1  00A9               	movwf	?_printf+7
  6285  00C2  0850               	movf	can_dump_masks_and_filters@m+1,w
  6286  00C3  00AB               	movwf	?_printf+9
  6287  00C4  084F               	movf	can_dump_masks_and_filters@m,w
  6288  00C5  00AA               	movwf	?_printf+8
  6289  00C6  084D               	movf	can_dump_masks_and_filters@h,w
  6290  00C7  00C9               	movwf	??_can_dump_masks_and_filters+6
  6291  00C8  01CA               	clrf	??_can_dump_masks_and_filters+7
  6292  00C9  0849               	movf	??_can_dump_masks_and_filters+6,w
  6293  00CA  00AC               	movwf	?_printf+10
  6294  00CB  084A               	movf	??_can_dump_masks_and_filters+7,w
  6295  00CC  00AD               	movwf	?_printf+11
  6296  00CD  084E               	movf	can_dump_masks_and_filters@l,w
  6297  00CE  00CB               	movwf	??_can_dump_masks_and_filters+8
  6298  00CF  01CC               	clrf	??_can_dump_masks_and_filters+9
  6299  00D0  084B               	movf	??_can_dump_masks_and_filters+8,w
  6300  00D1  00AE               	movwf	?_printf+12
  6301  00D2  084C               	movf	??_can_dump_masks_and_filters+9,w
  6302  00D3  00AF               	movwf	?_printf+13
  6303  00D4  3185  25A5  3180   	fcall	_printf
  6304  00D7  3001               	movlw	1
  6305  00D8  0020               	movlb	0	; select bank0
  6306  00D9  00C3               	movwf	??_can_dump_masks_and_filters
  6307  00DA  0843               	movf	??_can_dump_masks_and_filters,w
  6308  00DB  07D1               	addwf	can_dump_masks_and_filters@i,f
  6309  00DC  3002               	movlw	2
  6310  00DD  0251               	subwf	can_dump_masks_and_filters@i,w
  6311  00DE  1C03               	skipc
  6312  00DF  2887               	goto	l2534
  6313  00E0                     l2546:	
  6314                           
  6315                           ;mcp2515.c: 348: }
  6316                           ;mcp2515.c: 349: for(i=0; i<6; i++) {
  6317  00E0  01D1               	clrf	can_dump_masks_and_filters@i
  6318  00E1  3006               	movlw	6
  6319  00E2  0251               	subwf	can_dump_masks_and_filters@i,w
  6320  00E3  1803               	btfsc	3,0
  6321  00E4  293E               	goto	l2564
  6322  00E5                     l2552:	
  6323                           
  6324                           ;mcp2515.c: 350: m = save_rxfn[i];
  6325  00E5  3551               	lslf	can_dump_masks_and_filters@i,w
  6326  00E6  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6327  00E7  0086               	movwf	6
  6328  00E8  0187               	clrf	7
  6329  00E9  3F40               	moviw [0]fsr1
  6330  00EA  00CF               	movwf	can_dump_masks_and_filters@m
  6331  00EB  3F41               	moviw [1]fsr1
  6332  00EC  00D0               	movwf	can_dump_masks_and_filters@m+1
  6333                           
  6334                           ;mcp2515.c: 351: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6335  00ED  0850               	movf	can_dump_masks_and_filters@m+1,w
  6336  00EE  00C4               	movwf	??_can_dump_masks_and_filters+1
  6337  00EF  084F               	movf	can_dump_masks_and_filters@m,w
  6338  00F0  00C3               	movwf	??_can_dump_masks_and_filters
  6339  00F1  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6340  00F2  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6341  00F3  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6342  00F4  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6343  00F5  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6344  00F6  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6345  00F7  0843               	movf	??_can_dump_masks_and_filters,w
  6346  00F8  00C5               	movwf	??_can_dump_masks_and_filters+2
  6347  00F9  0845               	movf	??_can_dump_masks_and_filters+2,w
  6348  00FA  00CD               	movwf	can_dump_masks_and_filters@h
  6349                           
  6350                           ;mcp2515.c: 352: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6351  00FB  084F               	movf	can_dump_masks_and_filters@m,w
  6352  00FC  3907               	andlw	7
  6353  00FD  00C3               	movwf	??_can_dump_masks_and_filters
  6354  00FE  3004               	movlw	4
  6355  00FF                     u2215:	
  6356  00FF  35C3               	lslf	??_can_dump_masks_and_filters,f
  6357  0100  3EFF               	addlw	-1
  6358  0101  1D03               	skipz
  6359  0102  28FF               	goto	u2215
  6360  0103  3543               	lslf	??_can_dump_masks_and_filters,w
  6361  0104  00C4               	movwf	??_can_dump_masks_and_filters+1
  6362  0105  0844               	movf	??_can_dump_masks_and_filters+1,w
  6363  0106  00CE               	movwf	can_dump_masks_and_filters@l
  6364                           
  6365                           ;mcp2515.c: 353: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6366  0107  3018               	movlw	low (STR_41| (0+32768))
  6367  0108  00A2               	movwf	printf@f
  6368  0109  3091               	movlw	high (STR_41| (0+32768))
  6369  010A  00A3               	movwf	printf@f+1
  6370  010B  0851               	movf	can_dump_masks_and_filters@i,w
  6371  010C  00C3               	movwf	??_can_dump_masks_and_filters
  6372  010D  01C4               	clrf	??_can_dump_masks_and_filters+1
  6373  010E  0843               	movf	??_can_dump_masks_and_filters,w
  6374  010F  00A4               	movwf	?_printf+2
  6375  0110  0844               	movf	??_can_dump_masks_and_filters+1,w
  6376  0111  00A5               	movwf	?_printf+3
  6377  0112  0851               	movf	can_dump_masks_and_filters@i,w
  6378  0113  00C5               	movwf	??_can_dump_masks_and_filters+2
  6379  0114  01C6               	clrf	??_can_dump_masks_and_filters+3
  6380  0115  0845               	movf	??_can_dump_masks_and_filters+2,w
  6381  0116  00A6               	movwf	?_printf+4
  6382  0117  0846               	movf	??_can_dump_masks_and_filters+3,w
  6383  0118  00A7               	movwf	?_printf+5
  6384  0119  0851               	movf	can_dump_masks_and_filters@i,w
  6385  011A  00C7               	movwf	??_can_dump_masks_and_filters+4
  6386  011B  01C8               	clrf	??_can_dump_masks_and_filters+5
  6387  011C  0847               	movf	??_can_dump_masks_and_filters+4,w
  6388  011D  00A8               	movwf	?_printf+6
  6389  011E  0848               	movf	??_can_dump_masks_and_filters+5,w
  6390  011F  00A9               	movwf	?_printf+7
  6391  0120  0850               	movf	can_dump_masks_and_filters@m+1,w
  6392  0121  00AB               	movwf	?_printf+9
  6393  0122  084F               	movf	can_dump_masks_and_filters@m,w
  6394  0123  00AA               	movwf	?_printf+8
  6395  0124  084D               	movf	can_dump_masks_and_filters@h,w
  6396  0125  00C9               	movwf	??_can_dump_masks_and_filters+6
  6397  0126  01CA               	clrf	??_can_dump_masks_and_filters+7
  6398  0127  0849               	movf	??_can_dump_masks_and_filters+6,w
  6399  0128  00AC               	movwf	?_printf+10
  6400  0129  084A               	movf	??_can_dump_masks_and_filters+7,w
  6401  012A  00AD               	movwf	?_printf+11
  6402  012B  084E               	movf	can_dump_masks_and_filters@l,w
  6403  012C  00CB               	movwf	??_can_dump_masks_and_filters+8
  6404  012D  01CC               	clrf	??_can_dump_masks_and_filters+9
  6405  012E  084B               	movf	??_can_dump_masks_and_filters+8,w
  6406  012F  00AE               	movwf	?_printf+12
  6407  0130  084C               	movf	??_can_dump_masks_and_filters+9,w
  6408  0131  00AF               	movwf	?_printf+13
  6409  0132  3185  25A5  3180   	fcall	_printf
  6410  0135  3001               	movlw	1
  6411  0136  0020               	movlb	0	; select bank0
  6412  0137  00C3               	movwf	??_can_dump_masks_and_filters
  6413  0138  0843               	movf	??_can_dump_masks_and_filters,w
  6414  0139  07D1               	addwf	can_dump_masks_and_filters@i,f
  6415  013A  3006               	movlw	6
  6416  013B  0251               	subwf	can_dump_masks_and_filters@i,w
  6417  013C  1C03               	skipc
  6418  013D  28E5               	goto	l2552
  6419  013E                     l2564:	
  6420                           
  6421                           ;mcp2515.c: 354: }
  6422                           ;mcp2515.c: 355: printf("---\n");
  6423  013E  30A5               	movlw	low (STR_39| (0+32768))
  6424  013F  00A2               	movwf	printf@f
  6425  0140  3094               	movlw	high (STR_39| (0+32768))
  6426  0141  00A3               	movwf	printf@f+1
  6427  0142  3185  25A5         	fcall	_printf
  6428  0144  0008               	return
  6429  0145                     __end_of_can_dump_masks_and_filters:	
  6430                           
  6431                           	psect	text13
  6432  0C5E                     __ptext13:	
  6433 ;; *************** function _can_baudrate *****************
  6434 ;; Defined at:
  6435 ;;		line 302 in file "mcp2515.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  bpr             1    wreg     unsigned char 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  bpr             1   41[BANK0 ] unsigned char 
  6440 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  6441 ;;  mask            1   42[BANK0 ] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      unsigned char 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        5 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    4
  6458 ;; This function calls:
  6459 ;;		_SPI_exchange
  6460 ;;		_can_ope_mode
  6461 ;; This function is called by:
  6462 ;;		_main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _can_baudrate
  6468  0C5E                     _can_baudrate:	
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6472                           ;can_baudrate@bpr stored from wreg
  6473  0C5E  0020               	movlb	0	; select bank0
  6474  0C5F  00C9               	movwf	can_baudrate@bpr
  6475                           
  6476                           ;mcp2515.c: 303: can_ope_mode(0b10000000u);
  6477  0C60  3080               	movlw	128
  6478  0C61  318D  2569  318C   	fcall	_can_ope_mode
  6479                           
  6480                           ;mcp2515.c: 306: uint8_t mask = 0b00111111;
  6481  0C64  303F               	movlw	63
  6482  0C65  0020               	movlb	0	; select bank0
  6483  0C66  00C7               	movwf	??_can_baudrate
  6484  0C67  0847               	movf	??_can_baudrate,w
  6485  0C68  00CA               	movwf	can_baudrate@mask
  6486                           
  6487                           ;mcp2515.c: 307: buf[0] = 0b00000101u;
  6488  0C69  3005               	movlw	5
  6489  0C6A  00C7               	movwf	??_can_baudrate
  6490  0C6B  0847               	movf	??_can_baudrate,w
  6491  0C6C  0021               	movlb	1	; select bank1
  6492  0C6D  00B4               	movwf	_buf^(0+128)
  6493                           
  6494                           ;mcp2515.c: 308: buf[1] = 0x2au;
  6495  0C6E  302A               	movlw	42
  6496  0C6F  0020               	movlb	0	; select bank0
  6497  0C70  00C7               	movwf	??_can_baudrate
  6498  0C71  0847               	movf	??_can_baudrate,w
  6499  0C72  0021               	movlb	1	; select bank1
  6500  0C73  00B5               	movwf	(_buf^(0+128)+1)
  6501                           
  6502                           ;mcp2515.c: 309: buf[2] = mask;
  6503  0C74  0020               	movlb	0	; select bank0
  6504  0C75  084A               	movf	can_baudrate@mask,w
  6505  0C76  00C7               	movwf	??_can_baudrate
  6506  0C77  0847               	movf	??_can_baudrate,w
  6507  0C78  0021               	movlb	1	; select bank1
  6508  0C79  00B6               	movwf	(_buf^(0+128)+2)
  6509                           
  6510                           ;mcp2515.c: 310: buf[3] = bpr;
  6511  0C7A  0020               	movlb	0	; select bank0
  6512  0C7B  0849               	movf	can_baudrate@bpr,w
  6513  0C7C  00C7               	movwf	??_can_baudrate
  6514  0C7D  0847               	movf	??_can_baudrate,w
  6515  0C7E  0021               	movlb	1	; select bank1
  6516  0C7F  00B7               	movwf	(_buf^(0+128)+3)
  6517                           
  6518                           ;mcp2515.c: 311: uint8_t bytes_written = SPI_exchange(buf, 4);
  6519  0C80  3004               	movlw	4
  6520  0C81  0020               	movlb	0	; select bank0
  6521  0C82  00C7               	movwf	??_can_baudrate
  6522  0C83  0847               	movf	??_can_baudrate,w
  6523  0C84  00F8               	movwf	SPI_exchange@len
  6524  0C85  30B4               	movlw	(low (_buf| 0))& (0+255)
  6525  0C86  318B  235A  318C   	fcall	_SPI_exchange
  6526  0C89  0020               	movlb	0	; select bank0
  6527  0C8A  00C8               	movwf	??_can_baudrate+1
  6528  0C8B  0848               	movf	??_can_baudrate+1,w
  6529  0C8C  00CB               	movwf	can_baudrate@bytes_written
  6530                           
  6531                           ;mcp2515.c: 312: can_ope_mode(operation_mode);
  6532  0C8D  086E               	movf	_operation_mode,w
  6533  0C8E  318D  2569         	fcall	_can_ope_mode
  6534                           
  6535                           ;mcp2515.c: 316: return 0;
  6536                           ;	Return value of _can_baudrate is never used
  6537                           
  6538                           ;mcp2515.c: 315: } else {
  6539                           
  6540                           ;mcp2515.c: 314: return 1;
  6541                           ;	Return value of _can_baudrate is never used
  6542  0C90  0008               	return
  6543  0C91                     __end_of_can_baudrate:	
  6544                           
  6545                           	psect	text14
  6546  0B4B                     __ptext14:	
  6547 ;; *************** function _can_abort *****************
  6548 ;; Defined at:
  6549 ;;		line 320 in file "mcp2515.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      unsigned char 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        2 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    4
  6570 ;; This function calls:
  6571 ;;		_abort_pending_transmissions
  6572 ;;		_can_ope_mode
  6573 ;; This function is called by:
  6574 ;;		_main
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           
  6579                           ;psect for function _can_abort
  6580  0B4B                     _can_abort:	
  6581                           
  6582                           ;mcp2515.c: 321: can_ope_mode(0b10000000u);
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6586  0B4B  3080               	movlw	128
  6587  0B4C  318D  2569  318B   	fcall	_can_ope_mode
  6588                           
  6589                           ;mcp2515.c: 322: uint8_t bytes_written = abort_pending_transmissions();
  6590  0B4F  318B  23DE  318B   	fcall	_abort_pending_transmissions
  6591  0B52  0020               	movlb	0	; select bank0
  6592  0B53  00C7               	movwf	??_can_abort
  6593  0B54  0847               	movf	??_can_abort,w
  6594  0B55  00C8               	movwf	can_abort@bytes_written
  6595                           
  6596                           ;mcp2515.c: 323: can_ope_mode(operation_mode);
  6597  0B56  086E               	movf	_operation_mode,w
  6598  0B57  318D  2569         	fcall	_can_ope_mode
  6599                           
  6600                           ;mcp2515.c: 327: return 0;
  6601                           ;	Return value of _can_abort is never used
  6602                           
  6603                           ;mcp2515.c: 326: } else {
  6604                           
  6605                           ;mcp2515.c: 325: return 1;
  6606                           ;	Return value of _can_abort is never used
  6607  0B59  0008               	return
  6608  0B5A                     __end_of_can_abort:	
  6609                           
  6610                           	psect	text15
  6611  0D69                     __ptext15:	
  6612 ;; *************** function _can_ope_mode *****************
  6613 ;; Defined at:
  6614 ;;		line 96 in file "mcp2515.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  ope_mode        1    wreg     unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  6619 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      unsigned char 
  6622 ;; Registers used:
  6623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;Total ram usage:        4 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    3
  6636 ;; This function calls:
  6637 ;;		_SPI_exchange
  6638 ;;		_printf
  6639 ;; This function is called by:
  6640 ;;		_main
  6641 ;;		_can_init
  6642 ;;		_can_set_mask
  6643 ;;		_can_baudrate
  6644 ;;		_can_abort
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           
  6649                           ;psect for function _can_ope_mode
  6650  0D69                     _can_ope_mode:	
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6654                           ;can_ope_mode@ope_mode stored from wreg
  6655  0D69  0020               	movlb	0	; select bank0
  6656  0D6A  00C6               	movwf	can_ope_mode@ope_mode
  6657                           
  6658                           ;mcp2515.c: 97: buf[0] = 0b00000010u;
  6659  0D6B  3002               	movlw	2
  6660  0D6C  00C3               	movwf	??_can_ope_mode
  6661  0D6D  0843               	movf	??_can_ope_mode,w
  6662  0D6E  0021               	movlb	1	; select bank1
  6663  0D6F  00B4               	movwf	_buf^(0+128)
  6664                           
  6665                           ;mcp2515.c: 98: buf[1] = 0x0fu;
  6666  0D70  300F               	movlw	15
  6667  0D71  0020               	movlb	0	; select bank0
  6668  0D72  00C3               	movwf	??_can_ope_mode
  6669  0D73  0843               	movf	??_can_ope_mode,w
  6670  0D74  0021               	movlb	1	; select bank1
  6671  0D75  00B5               	movwf	(_buf^(0+128)+1)
  6672                           
  6673                           ;mcp2515.c: 99: buf[2] = ope_mode;
  6674  0D76  0020               	movlb	0	; select bank0
  6675  0D77  0846               	movf	can_ope_mode@ope_mode,w
  6676  0D78  00C3               	movwf	??_can_ope_mode
  6677  0D79  0843               	movf	??_can_ope_mode,w
  6678  0D7A  0021               	movlb	1	; select bank1
  6679  0D7B  00B6               	movwf	(_buf^(0+128)+2)
  6680                           
  6681                           ;mcp2515.c: 100: uint8_t bytes_written = SPI_exchange(buf, 3);
  6682  0D7C  3003               	movlw	3
  6683  0D7D  0020               	movlb	0	; select bank0
  6684  0D7E  00C3               	movwf	??_can_ope_mode
  6685  0D7F  0843               	movf	??_can_ope_mode,w
  6686  0D80  00F8               	movwf	SPI_exchange@len
  6687  0D81  30B4               	movlw	(low (_buf| 0))& (0+255)
  6688  0D82  318B  235A  318D   	fcall	_SPI_exchange
  6689  0D85  0020               	movlb	0	; select bank0
  6690  0D86  00C4               	movwf	??_can_ope_mode+1
  6691  0D87  0844               	movf	??_can_ope_mode+1,w
  6692  0D88  00C5               	movwf	can_ope_mode@bytes_written
  6693                           
  6694                           ;mcp2515.c: 102: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  6695  0D89  3080               	movlw	128
  6696  0D8A  0646               	xorwf	can_ope_mode@ope_mode,w
  6697  0D8B  1903               	btfsc	3,2
  6698  0D8C  2D91               	goto	l2242
  6699  0D8D  0846               	movf	can_ope_mode@ope_mode,w
  6700  0D8E  00C3               	movwf	??_can_ope_mode
  6701  0D8F  0843               	movf	??_can_ope_mode,w
  6702  0D90  00EE               	movwf	_operation_mode
  6703  0D91                     l2242:	
  6704                           
  6705                           ;mcp2515.c: 104: if (bytes_written == 3) {
  6706  0D91  3003               	movlw	3
  6707  0D92  0645               	xorwf	can_ope_mode@bytes_written,w
  6708  0D93  1D03               	btfss	3,2
  6709  0D94  0008               	return
  6710                           
  6711                           ;mcp2515.c: 105: buf[0] = 0b00000011u;
  6712  0D95  3003               	movlw	3
  6713  0D96  00C3               	movwf	??_can_ope_mode
  6714  0D97  0843               	movf	??_can_ope_mode,w
  6715  0D98  0021               	movlb	1	; select bank1
  6716  0D99  00B4               	movwf	_buf^(0+128)
  6717                           
  6718                           ;mcp2515.c: 106: buf[1] = 0x0e;
  6719  0D9A  300E               	movlw	14
  6720  0D9B  0020               	movlb	0	; select bank0
  6721  0D9C  00C3               	movwf	??_can_ope_mode
  6722  0D9D  0843               	movf	??_can_ope_mode,w
  6723  0D9E  0021               	movlb	1	; select bank1
  6724  0D9F  00B5               	movwf	(_buf^(0+128)+1)
  6725                           
  6726                           ;mcp2515.c: 107: bytes_written = SPI_exchange(buf, 3);
  6727  0DA0  3003               	movlw	3
  6728  0DA1  0020               	movlb	0	; select bank0
  6729  0DA2  00C3               	movwf	??_can_ope_mode
  6730  0DA3  0843               	movf	??_can_ope_mode,w
  6731  0DA4  00F8               	movwf	SPI_exchange@len
  6732  0DA5  30B4               	movlw	(low (_buf| 0))& (0+255)
  6733  0DA6  318B  235A  318D   	fcall	_SPI_exchange
  6734  0DA9  0020               	movlb	0	; select bank0
  6735  0DAA  00C4               	movwf	??_can_ope_mode+1
  6736  0DAB  0844               	movf	??_can_ope_mode+1,w
  6737  0DAC  00C5               	movwf	can_ope_mode@bytes_written
  6738                           
  6739                           ;mcp2515.c: 108: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6740  0DAD  086A               	movf	_mode,w
  6741  0DAE  1903               	btfsc	3,2
  6742  0DAF  0008               	return
  6743  0DB0  30FC               	movlw	low (STR_23| (0+32768))
  6744  0DB1  00A2               	movwf	printf@f
  6745  0DB2  3093               	movlw	high (STR_23| (0+32768))
  6746  0DB3  00A3               	movwf	printf@f+1
  6747  0DB4  0021               	movlb	1	; select bank1
  6748  0DB5  0836               	movf	(_buf^(0+128)+2),w
  6749  0DB6  0020               	movlb	0	; select bank0
  6750  0DB7  00C3               	movwf	??_can_ope_mode
  6751  0DB8  01C4               	clrf	??_can_ope_mode+1
  6752  0DB9  0843               	movf	??_can_ope_mode,w
  6753  0DBA  00A4               	movwf	?_printf+2
  6754  0DBB  0844               	movf	??_can_ope_mode+1,w
  6755  0DBC  00A5               	movwf	?_printf+3
  6756  0DBD  3185  25A5         	fcall	_printf
  6757                           
  6758                           ;mcp2515.c: 111: return 0;
  6759                           ;	Return value of _can_ope_mode is never used
  6760                           
  6761                           ;mcp2515.c: 110: } else {
  6762                           
  6763                           ;mcp2515.c: 109: return 1;
  6764                           ;	Return value of _can_ope_mode is never used
  6765  0DBF  0008               	return
  6766  0DC0                     __end_of_can_ope_mode:	
  6767                           
  6768                           	psect	text16
  6769  05A5                     __ptext16:	
  6770 ;; *************** function _printf *****************
  6771 ;; Defined at:
  6772 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6775 ;;		 -> STR_60(5), STR_59(15), STR_58(15), STR_57(2), 
  6776 ;;		 -> STR_56(16), STR_55(16), STR_54(2), STR_53(16), 
  6777 ;;		 -> STR_52(16), STR_51(16), STR_50(2), STR_49(12), 
  6778 ;;		 -> STR_48(12), STR_47(12), STR_46(2), STR_45(12), 
  6779 ;;		 -> STR_44(12), STR_43(5), STR_42(5), STR_41(44), 
  6780 ;;		 -> STR_40(44), STR_39(5), STR_38(13), STR_37(13), 
  6781 ;;		 -> STR_36(18), STR_35(17), STR_34(17), STR_33(20), 
  6782 ;;		 -> STR_32(14), STR_31(14), STR_30(14), STR_29(15), 
  6783 ;;		 -> STR_28(16), STR_27(17), STR_26(17), STR_25(23), 
  6784 ;;		 -> STR_24(21), STR_23(15), STR_22(22), STR_21(44), 
  6785 ;;		 -> STR_20(57), STR_19(26), STR_18(21), STR_17(29), 
  6786 ;;		 -> STR_16(38), STR_15(25), STR_14(42), STR_13(38), 
  6787 ;;		 -> STR_12(58), STR_11(54), STR_10(59), STR_9(51), 
  6788 ;;		 -> STR_7(36), STR_6(3), STR_5(4), STR_4(2), 
  6789 ;;		 -> STR_3(6), STR_2(6), STR_1(7), 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  idx             1   22[BANK0 ] unsigned char 
  6792 ;;  tmpval          4    0        struct .
  6793 ;;  width           2   32[BANK0 ] int 
  6794 ;;  val             2   29[BANK0 ] unsigned int 
  6795 ;;  len             2   26[BANK0 ] unsigned int 
  6796 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  6797 ;;		 -> STR_61(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6798 ;;		 -> txf_clear@n(1), STR_8(21), main@buf(9), 
  6799 ;;  c               1   34[BANK0 ] char 
  6800 ;;  flag            1   31[BANK0 ] unsigned char 
  6801 ;;  ap              1   28[BANK0 ] PTR void [1]
  6802 ;;		 -> ?_printf(2), 
  6803 ;;  prec            1   23[BANK0 ] char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  2    2[BANK0 ] int 
  6806 ;; Registers used:
  6807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6813 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;Total ram usage:       33 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    2
  6820 ;; This function calls:
  6821 ;;		___lwdiv
  6822 ;;		___lwmod
  6823 ;;		___wmul
  6824 ;;		_isdigit
  6825 ;;		_putch
  6826 ;; This function is called by:
  6827 ;;		_receive_handler
  6828 ;;		_main
  6829 ;;		_can_ope_mode
  6830 ;;		_can_set_mask
  6831 ;;		_receive
  6832 ;;		_can_send
  6833 ;;		_can_status_check
  6834 ;;		_can_dump_masks_and_filters
  6835 ;;		_can_dump_registers
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _printf
  6841  05A5                     _printf:	
  6842                           
  6843                           ;doprnt.c: 466: va_list ap;
  6844                           ;doprnt.c: 499: signed char c;
  6845                           ;doprnt.c: 501: int width;
  6846                           ;doprnt.c: 506: signed char prec;
  6847                           ;doprnt.c: 508: unsigned char flag;
  6848                           ;doprnt.c: 523: union {
  6849                           ;doprnt.c: 524: unsigned long vd;
  6850                           ;doprnt.c: 525: double integ;
  6851                           ;doprnt.c: 526: } tmpval;
  6852                           ;doprnt.c: 528: unsigned int val;
  6853                           ;doprnt.c: 529: unsigned len;
  6854                           ;doprnt.c: 530: const char * cp;
  6855                           ;doprnt.c: 533: *ap = __va_start();
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6859  05A5  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6860  05A6  0020               	movlb	0	; select bank0
  6861  05A7  00B0               	movwf	??_printf
  6862  05A8  0830               	movf	??_printf,w
  6863  05A9  00BC               	movwf	printf@ap
  6864  05AA                     l2164:	
  6865                           ;doprnt.c: 536: while(c = *f++) {
  6866                           
  6867  05AA  0020               	movlb	0	; select bank0
  6868  05AB  0823               	movf	printf@f+1,w
  6869  05AC  00B1               	movwf	??_printf+1
  6870  05AD  0822               	movf	printf@f,w
  6871  05AE  00B0               	movwf	??_printf
  6872  05AF  0AA2               	incf	printf@f,f
  6873  05B0  1903               	skipnz
  6874  05B1  0AA3               	incf	printf@f+1,f
  6875  05B2  0830               	movf	??_printf,w
  6876  05B3  0084               	movwf	4
  6877  05B4  0831               	movf	??_printf+1,w
  6878  05B5  0085               	movwf	5
  6879  05B6  0800               	movf	0,w	;code access
  6880  05B7  00B2               	movwf	??_printf+2
  6881  05B8  0832               	movf	??_printf+2,w
  6882  05B9  00C2               	movwf	printf@c
  6883  05BA  0842               	movf	printf@c,w
  6884  05BB  1903               	btfsc	3,2
  6885  05BC  0008               	return
  6886                           
  6887                           ;doprnt.c: 538: if(c != '%')
  6888  05BD  3025               	movlw	37
  6889  05BE  0642               	xorwf	printf@c,w
  6890  05BF  1903               	btfsc	3,2
  6891  05C0  2DC6               	goto	l2010
  6892                           
  6893                           ;doprnt.c: 540: {
  6894                           ;doprnt.c: 541: (putch(c) );
  6895  05C1  0842               	movf	printf@c,w
  6896  05C2  318A  22F2  3185   	fcall	_putch
  6897                           
  6898                           ;doprnt.c: 542: continue;
  6899  05C5  2DAA               	goto	l2164
  6900  05C6                     l2010:	
  6901                           
  6902                           ;doprnt.c: 543: }
  6903                           ;doprnt.c: 546: width = 0;
  6904  05C6  0020               	movlb	0	; select bank0
  6905  05C7  01C0               	clrf	printf@width
  6906  05C8  01C1               	clrf	printf@width+1
  6907                           
  6908                           ;doprnt.c: 548: flag = 0;
  6909  05C9  01BF               	clrf	printf@flag
  6910                           
  6911                           ;doprnt.c: 551: switch(*f) {
  6912                           
  6913                           ;doprnt.c: 550: for(;;) {
  6914  05CA  2DD0               	goto	l2016
  6915  05CB                     l407:	
  6916                           ;doprnt.c: 579: case '0':
  6917                           
  6918                           
  6919                           ;doprnt.c: 580: flag |= 0x04;
  6920  05CB  153F               	bsf	printf@flag,2
  6921                           
  6922                           ;doprnt.c: 581: f++;
  6923  05CC  3001               	movlw	1
  6924  05CD  07A2               	addwf	printf@f,f
  6925  05CE  3000               	movlw	0
  6926  05CF  3DA3               	addwfc	printf@f+1,f
  6927  05D0                     l2016:	
  6928                           ;doprnt.c: 584: }
  6929                           
  6930                           ;doprnt.c: 582: continue;
  6931                           
  6932  05D0  0822               	movf	printf@f,w
  6933  05D1  0084               	movwf	4
  6934  05D2  0823               	movf	printf@f+1,w
  6935  05D3  0085               	movwf	5
  6936  05D4  0800               	movf	0,w	;code access
  6937                           
  6938                           ; Switch size 1, requested type "space"
  6939                           ; Number of cases is 1, Range of values is 48 to 48
  6940                           ; switch strategies available:
  6941                           ; Name         Instructions Cycles
  6942                           ; simple_byte            4     3 (average)
  6943                           ; direct_byte           11     9 (fixed)
  6944                           ; jumptable            263     9 (fixed)
  6945                           ;	Chosen strategy is simple_byte
  6946  05D5  3A30               	xorlw	48	; case 48
  6947  05D6  1903               	skipnz
  6948  05D7  2DCB               	goto	l407
  6949  05D8  2DD9               	goto	l2018
  6950  05D9                     l2018:	
  6951                           ;doprnt.c: 586: }
  6952                           
  6953                           ;doprnt.c: 585: break;
  6954                           
  6955                           
  6956                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6957  05D9  0822               	movf	printf@f,w
  6958  05DA  0084               	movwf	4
  6959  05DB  0823               	movf	printf@f+1,w
  6960  05DC  0085               	movwf	5
  6961  05DD  0800               	movf	0,w	;code access
  6962  05DE  3180  2004  3185   	fcall	_isdigit
  6963  05E1  1C03               	btfss	3,0
  6964  05E2  2E85               	goto	l2070
  6965                           
  6966                           ;doprnt.c: 598: width = 0;
  6967  05E3  0020               	movlb	0	; select bank0
  6968  05E4  01C0               	clrf	printf@width
  6969  05E5  01C1               	clrf	printf@width+1
  6970  05E6                     l2022:	
  6971                           ;doprnt.c: 599: do {
  6972                           
  6973                           
  6974                           ;doprnt.c: 600: width *= 10;
  6975  05E6  300A               	movlw	10
  6976  05E7  00F0               	movwf	___wmul@multiplier
  6977  05E8  3000               	movlw	0
  6978  05E9  00F1               	movwf	___wmul@multiplier+1
  6979  05EA  0020               	movlb	0	; select bank0
  6980  05EB  0841               	movf	printf@width+1,w
  6981  05EC  00F3               	movwf	___wmul@multiplicand+1
  6982  05ED  0840               	movf	printf@width,w
  6983  05EE  00F2               	movwf	___wmul@multiplicand
  6984  05EF  318B  239F  3185   	fcall	___wmul
  6985  05F2  0871               	movf	?___wmul+1,w
  6986  05F3  0020               	movlb	0	; select bank0
  6987  05F4  00C1               	movwf	printf@width+1
  6988  05F5  0870               	movf	?___wmul,w
  6989  05F6  00C0               	movwf	printf@width
  6990                           
  6991                           ;doprnt.c: 601: width += *f++ - '0';
  6992  05F7  0822               	movf	printf@f,w
  6993  05F8  0084               	movwf	4
  6994  05F9  0823               	movf	printf@f+1,w
  6995  05FA  0085               	movwf	5
  6996  05FB  0800               	movf	0,w	;code access
  6997  05FC  3ED0               	addlw	208
  6998  05FD  00B0               	movwf	??_printf
  6999  05FE  30FF               	movlw	255
  7000  05FF  1803               	skipnc
  7001  0600  3000               	movlw	0
  7002  0601  00B1               	movwf	??_printf+1
  7003  0602  0830               	movf	??_printf,w
  7004  0603  07C0               	addwf	printf@width,f
  7005  0604  0831               	movf	??_printf+1,w
  7006  0605  3DC1               	addwfc	printf@width+1,f
  7007  0606  3001               	movlw	1
  7008  0607  07A2               	addwf	printf@f,f
  7009  0608  3000               	movlw	0
  7010  0609  3DA3               	addwfc	printf@f+1,f
  7011                           
  7012                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7013  060A  0822               	movf	printf@f,w
  7014  060B  0084               	movwf	4
  7015  060C  0823               	movf	printf@f+1,w
  7016  060D  0085               	movwf	5
  7017  060E  0800               	movf	0,w	;code access
  7018  060F  3180  2004  3185   	fcall	_isdigit
  7019  0612  1C03               	btfss	3,0
  7020  0613  2E85               	goto	l2070
  7021  0614  2DE6               	goto	l2022
  7022  0615                     l420:	
  7023                           ;doprnt.c: 712: case 'X':
  7024                           
  7025                           ;doprnt.c: 698: case 'i':
  7026                           ;doprnt.c: 699: break;
  7027                           
  7028                           ;doprnt.c: 697: case 'd':
  7029                           
  7030                           ;doprnt.c: 638: goto alldone;
  7031                           
  7032                           ;doprnt.c: 637: case 0:
  7033                           
  7034                           ;doprnt.c: 608: }
  7035                           ;doprnt.c: 635: switch(c = *f++) {
  7036                           
  7037                           
  7038                           ;doprnt.c: 714: flag |= 0x20;
  7039  0615  16BF               	bsf	printf@flag,5
  7040  0616                     l421:	
  7041                           ;doprnt.c: 718: case 'x':
  7042                           
  7043                           
  7044                           ;doprnt.c: 721: flag |= 0x80;
  7045  0616  17BF               	bsf	printf@flag,7
  7046                           
  7047                           ;doprnt.c: 723: break;
  7048  0617  2EA9               	goto	l419
  7049  0618                     l2030:	
  7050                           ;doprnt.c: 728: case 's':
  7051                           
  7052                           
  7053                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7054  0618  083C               	movf	printf@ap,w
  7055  0619  0086               	movwf	6
  7056  061A  0187               	clrf	7
  7057  061B  3F40               	moviw [0]fsr1
  7058  061C  00B8               	movwf	printf@cp
  7059  061D  3F41               	moviw [1]fsr1
  7060  061E  00B9               	movwf	printf@cp+1
  7061  061F  3002               	movlw	2
  7062  0620  00B0               	movwf	??_printf
  7063  0621  0830               	movf	??_printf,w
  7064  0622  07BC               	addwf	printf@ap,f
  7065                           
  7066                           ;doprnt.c: 740: if(!cp)
  7067  0623  0838               	movf	printf@cp,w
  7068  0624  0439               	iorwf	printf@cp+1,w
  7069  0625  1D03               	btfss	3,2
  7070  0626  2E2B               	goto	l2038
  7071                           
  7072                           ;doprnt.c: 741: cp = "(null)";
  7073  0627  3085               	movlw	low (STR_61| (0+32768))
  7074  0628  00B8               	movwf	printf@cp
  7075  0629  3094               	movlw	high (STR_61| (0+32768))
  7076  062A  00B9               	movwf	printf@cp+1
  7077  062B                     l2038:	
  7078                           
  7079                           ;doprnt.c: 745: len = 0;
  7080  062B  01BA               	clrf	printf@len
  7081  062C  01BB               	clrf	printf@len+1
  7082  062D                     l2042:	
  7083                           ;doprnt.c: 746: while(cp[len])
  7084                           
  7085  062D  0838               	movf	printf@cp,w
  7086  062E  073A               	addwf	printf@len,w
  7087  062F  0084               	movwf	4
  7088  0630  0839               	movf	printf@cp+1,w
  7089  0631  3D3B               	addwfc	printf@len+1,w
  7090  0632  0085               	movwf	5
  7091  0633  0012               	moviw fsr0++
  7092  0634  1903               	btfsc	3,2
  7093  0635  2E3B               	goto	l2044
  7094                           
  7095                           ;doprnt.c: 747: len++;
  7096  0636  3001               	movlw	1
  7097  0637  07BA               	addwf	printf@len,f
  7098  0638  3000               	movlw	0
  7099  0639  3DBB               	addwfc	printf@len+1,f
  7100  063A  2E2D               	goto	l2042
  7101  063B                     l2044:	
  7102                           ;doprnt.c: 750: dostring:
  7103                           
  7104                           
  7105                           ;doprnt.c: 757: if(width > len)
  7106  063B  0841               	movf	printf@width+1,w
  7107  063C  023B               	subwf	printf@len+1,w
  7108  063D  1D03               	skipz
  7109  063E  2E41               	goto	u1605
  7110  063F  0840               	movf	printf@width,w
  7111  0640  023A               	subwf	printf@len,w
  7112  0641                     u1605:	
  7113  0641  1803               	skipnc
  7114  0642  2E48               	goto	l2048
  7115                           
  7116                           ;doprnt.c: 758: width -= len;
  7117  0643  083A               	movf	printf@len,w
  7118  0644  02C0               	subwf	printf@width,f
  7119  0645  083B               	movf	printf@len+1,w
  7120  0646  3BC1               	subwfb	printf@width+1,f
  7121  0647  2E4A               	goto	l2052
  7122  0648                     l2048:	
  7123                           
  7124                           ;doprnt.c: 759: else
  7125                           ;doprnt.c: 760: width = 0;
  7126  0648  01C0               	clrf	printf@width
  7127  0649  01C1               	clrf	printf@width+1
  7128  064A                     l2052:	
  7129                           ;doprnt.c: 764: while(width--)
  7130                           
  7131  064A  30FF               	movlw	255
  7132  064B  0020               	movlb	0	; select bank0
  7133  064C  07C0               	addwf	printf@width,f
  7134  064D  30FF               	movlw	255
  7135  064E  3DC1               	addwfc	printf@width+1,f
  7136  064F  0A40               	incf	printf@width,w
  7137  0650  1903               	btfsc	3,2
  7138  0651  0A41               	incf	printf@width+1,w
  7139  0652  1903               	btfsc	3,2
  7140  0653  2E66               	goto	l2058
  7141                           
  7142                           ;doprnt.c: 765: (putch(' ') );
  7143  0654  3020               	movlw	32
  7144  0655  318A  22F2  3185   	fcall	_putch
  7145  0658  2E4A               	goto	l2052
  7146  0659                     l2054:	
  7147                           ;doprnt.c: 767: while(len--)
  7148                           
  7149                           
  7150                           ;doprnt.c: 768: (putch(*cp++) );
  7151  0659  0838               	movf	printf@cp,w
  7152  065A  0084               	movwf	4
  7153  065B  0839               	movf	printf@cp+1,w
  7154  065C  0085               	movwf	5
  7155  065D  0800               	movf	0,w	;code access
  7156  065E  318A  22F2  3185   	fcall	_putch
  7157  0661  3001               	movlw	1
  7158  0662  0020               	movlb	0	; select bank0
  7159  0663  07B8               	addwf	printf@cp,f
  7160  0664  3000               	movlw	0
  7161  0665  3DB9               	addwfc	printf@cp+1,f
  7162  0666                     l2058:	
  7163  0666  3001               	movlw	1
  7164  0667  02BA               	subwf	printf@len,f
  7165  0668  3000               	movlw	0
  7166  0669  3BBB               	subwfb	printf@len+1,f
  7167  066A  0A3A               	incf	printf@len,w
  7168  066B  1D03               	skipz
  7169  066C  2E59               	goto	l2054
  7170  066D  0A3B               	incf	printf@len+1,w
  7171  066E  1903               	btfsc	3,2
  7172  066F  2DAA               	goto	l2164
  7173  0670  2E59               	goto	l2054
  7174  0671                     l2060:	
  7175                           ;doprnt.c: 784: case 'c':
  7176                           
  7177                           ;doprnt.c: 774: continue;
  7178                           
  7179                           
  7180                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7181  0671  083C               	movf	printf@ap,w
  7182  0672  0086               	movwf	6
  7183  0673  0187               	clrf	7
  7184  0674  0801               	movf	1,w
  7185  0675  00B0               	movwf	??_printf
  7186  0676  0830               	movf	??_printf,w
  7187  0677  00C2               	movwf	printf@c
  7188  0678  3002               	movlw	2
  7189  0679  00B0               	movwf	??_printf
  7190  067A  0830               	movf	??_printf,w
  7191  067B  07BC               	addwf	printf@ap,f
  7192  067C                     l2064:	
  7193                           ;doprnt.c: 802: default:
  7194                           
  7195                           
  7196                           ;doprnt.c: 805: cp = (char *)&c;
  7197  067C  3042               	movlw	low printf@c
  7198  067D  00B8               	movwf	printf@cp
  7199  067E  3000               	movlw	high printf@c
  7200  067F  00B9               	movwf	printf@cp+1
  7201                           
  7202                           ;doprnt.c: 806: len = 1;
  7203  0680  3001               	movlw	1
  7204  0681  00BA               	movwf	printf@len
  7205  0682  3000               	movlw	0
  7206  0683  00BB               	movwf	printf@len+1
  7207                           
  7208                           ;doprnt.c: 807: goto dostring;
  7209  0684  2E3B               	goto	l2044
  7210  0685                     l2070:	
  7211                           ;doprnt.c: 822: }
  7212                           
  7213  0685  0020               	movlb	0	; select bank0
  7214  0686  0823               	movf	printf@f+1,w
  7215  0687  00B1               	movwf	??_printf+1
  7216  0688  0822               	movf	printf@f,w
  7217  0689  00B0               	movwf	??_printf
  7218  068A  0AA2               	incf	printf@f,f
  7219  068B  1903               	skipnz
  7220  068C  0AA3               	incf	printf@f+1,f
  7221  068D  0830               	movf	??_printf,w
  7222  068E  0084               	movwf	4
  7223  068F  0831               	movf	??_printf+1,w
  7224  0690  0085               	movwf	5
  7225  0691  0800               	movf	0,w	;code access
  7226  0692  00C2               	movwf	printf@c
  7227                           
  7228                           ; Switch size 1, requested type "space"
  7229                           ; Number of cases is 7, Range of values is 0 to 120
  7230                           ; switch strategies available:
  7231                           ; Name         Instructions Cycles
  7232                           ; simple_byte           22    12 (average)
  7233                           ; direct_byte          248     6 (fixed)
  7234                           ; jumptable            260     6 (fixed)
  7235                           ;	Chosen strategy is simple_byte
  7236  0693  3A00               	xorlw	0	; case 0
  7237  0694  1903               	skipnz
  7238  0695  2FEF               	goto	l476
  7239  0696  3A58               	xorlw	88	; case 88
  7240  0697  1903               	skipnz
  7241  0698  2E15               	goto	l420
  7242  0699  3A3B               	xorlw	59	; case 99
  7243  069A  1903               	skipnz
  7244  069B  2E71               	goto	l2060
  7245  069C  3A07               	xorlw	7	; case 100
  7246  069D  1903               	skipnz
  7247  069E  2EA9               	goto	l419
  7248  069F  3A0D               	xorlw	13	; case 105
  7249  06A0  1903               	skipnz
  7250  06A1  2EA9               	goto	l419
  7251  06A2  3A1A               	xorlw	26	; case 115
  7252  06A3  1903               	skipnz
  7253  06A4  2E18               	goto	l2030
  7254  06A5  3A0B               	xorlw	11	; case 120
  7255  06A6  1903               	skipnz
  7256  06A7  2E16               	goto	l421
  7257  06A8  2E7C               	goto	l2064
  7258  06A9                     l419:	
  7259                           
  7260                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7261  06A9  0020               	movlb	0	; select bank0
  7262  06AA  1BBF               	btfsc	printf@flag,7
  7263  06AB  2EC3               	goto	l2082
  7264                           
  7265                           ;doprnt.c: 1253: {
  7266                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7267  06AC  083C               	movf	printf@ap,w
  7268  06AD  0086               	movwf	6
  7269  06AE  0187               	clrf	7
  7270  06AF  3F40               	moviw [0]fsr1
  7271  06B0  00BD               	movwf	printf@val
  7272  06B1  3F41               	moviw [1]fsr1
  7273  06B2  00BE               	movwf	printf@val+1
  7274  06B3  3002               	movlw	2
  7275  06B4  00B0               	movwf	??_printf
  7276  06B5  0830               	movf	??_printf,w
  7277  06B6  07BC               	addwf	printf@ap,f
  7278                           
  7279                           ;doprnt.c: 1261: if((int)val < 0) {
  7280  06B7  1FBE               	btfss	printf@val+1,7
  7281  06B8  2F13               	goto	l2108
  7282                           
  7283                           ;doprnt.c: 1262: flag |= 0x03;
  7284  06B9  3003               	movlw	3
  7285  06BA  00B0               	movwf	??_printf
  7286  06BB  0830               	movf	??_printf,w
  7287  06BC  04BF               	iorwf	printf@flag,f
  7288                           
  7289                           ;doprnt.c: 1263: val = -val;
  7290  06BD  09BD               	comf	printf@val,f
  7291  06BE  09BE               	comf	printf@val+1,f
  7292  06BF  0ABD               	incf	printf@val,f
  7293  06C0  1903               	skipnz
  7294  06C1  0ABE               	incf	printf@val+1,f
  7295                           
  7296                           ;doprnt.c: 1264: }
  7297                           ;doprnt.c: 1266: }
  7298  06C2  2F13               	goto	l2108
  7299  06C3                     l2082:	
  7300                           
  7301                           ;doprnt.c: 1268: else
  7302                           ;doprnt.c: 1273: {
  7303                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7304  06C3  083C               	movf	printf@ap,w
  7305  06C4  0086               	movwf	6
  7306  06C5  0187               	clrf	7
  7307  06C6  3F40               	moviw [0]fsr1
  7308  06C7  00BD               	movwf	printf@val
  7309  06C8  3F41               	moviw [1]fsr1
  7310  06C9  00BE               	movwf	printf@val+1
  7311  06CA  3002               	movlw	2
  7312  06CB  00B0               	movwf	??_printf
  7313  06CC  0830               	movf	??_printf,w
  7314  06CD  07BC               	addwf	printf@ap,f
  7315                           
  7316                           ;doprnt.c: 1287: }
  7317                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7318  06CE  2F13               	goto	l2108
  7319  06CF                     l442:	
  7320                           ;doprnt.c: 1299: case 0x00:
  7321                           
  7322                           
  7323                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7324  06CF  01C2               	clrf	printf@c
  7325  06D0  0AC2               	incf	printf@c,f
  7326  06D1                     L10:	
  7327  06D1  3005               	movlw	5
  7328  06D2  0642               	xorwf	printf@c,w
  7329  06D3  1903               	btfsc	3,2
  7330  06D4  2F1C               	goto	l2110
  7331                           
  7332                           ;doprnt.c: 1306: if(val < dpowers[c])
  7333  06D5  0842               	movf	printf@c,w
  7334  06D6  00B0               	movwf	??_printf
  7335  06D7  01B1               	clrf	??_printf+1
  7336  06D8  35B0               	lslf	??_printf,f
  7337  06D9  0DB1               	rlf	??_printf+1,f
  7338  06DA  3073               	movlw	low (_dpowers| (0+32768))
  7339  06DB  0730               	addwf	??_printf,w
  7340  06DC  0084               	movwf	4
  7341  06DD  3094               	movlw	high (_dpowers| (0+32768))
  7342  06DE  3D31               	addwfc	??_printf+1,w
  7343  06DF  0085               	movwf	5
  7344  06E0  3F00               	moviw [0]fsr0
  7345  06E1  00B2               	movwf	??_printf+2
  7346  06E2  3F01               	moviw [1]fsr0
  7347  06E3  00B3               	movwf	??_printf+3
  7348  06E4  0833               	movf	??_printf+3,w
  7349  06E5  023E               	subwf	printf@val+1,w
  7350  06E6  1D03               	skipz
  7351  06E7  2EEA               	goto	u1665
  7352  06E8  0832               	movf	??_printf+2,w
  7353  06E9  023D               	subwf	printf@val,w
  7354  06EA                     u1665:	
  7355  06EA  1C03               	btfss	3,0
  7356  06EB  2F1C               	goto	l2110
  7357                           
  7358                           ;doprnt.c: 1307: break;
  7359  06EC  3001               	movlw	1
  7360  06ED  00B0               	movwf	??_printf
  7361  06EE  0830               	movf	??_printf,w
  7362  06EF  07C2               	addwf	printf@c,f
  7363  06F0  2ED1               	goto	L10
  7364  06F1                     l447:	
  7365                           ;doprnt.c: 1314: case 0x80:
  7366                           
  7367                           ;doprnt.c: 1309: break;
  7368                           
  7369                           
  7370                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7371  06F1  01C2               	clrf	printf@c
  7372  06F2  0AC2               	incf	printf@c,f
  7373  06F3                     L11:	
  7374  06F3  3004               	movlw	4
  7375  06F4  0642               	xorwf	printf@c,w
  7376  06F5  1903               	btfsc	3,2
  7377  06F6  2F1C               	goto	l2110
  7378                           
  7379                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7380  06F7  0842               	movf	printf@c,w
  7381  06F8  00B0               	movwf	??_printf
  7382  06F9  01B1               	clrf	??_printf+1
  7383  06FA  35B0               	lslf	??_printf,f
  7384  06FB  0DB1               	rlf	??_printf+1,f
  7385  06FC  307D               	movlw	low (_hexpowers| (0+32768))
  7386  06FD  0730               	addwf	??_printf,w
  7387  06FE  0084               	movwf	4
  7388  06FF  3094               	movlw	high (_hexpowers| (0+32768))
  7389  0700  3D31               	addwfc	??_printf+1,w
  7390  0701  0085               	movwf	5
  7391  0702  3F00               	moviw [0]fsr0
  7392  0703  00B2               	movwf	??_printf+2
  7393  0704  3F01               	moviw [1]fsr0
  7394  0705  00B3               	movwf	??_printf+3
  7395  0706  0833               	movf	??_printf+3,w
  7396  0707  023E               	subwf	printf@val+1,w
  7397  0708  1D03               	skipz
  7398  0709  2F0C               	goto	u1695
  7399  070A  0832               	movf	??_printf+2,w
  7400  070B  023D               	subwf	printf@val,w
  7401  070C                     u1695:	
  7402  070C  1C03               	btfss	3,0
  7403  070D  2F1C               	goto	l2110
  7404                           
  7405                           ;doprnt.c: 1318: break;
  7406  070E  3001               	movlw	1
  7407  070F  00B0               	movwf	??_printf
  7408  0710  0830               	movf	??_printf,w
  7409  0711  07C2               	addwf	printf@c,f
  7410  0712  2EF3               	goto	L11
  7411  0713                     l2108:	
  7412                           ;doprnt.c: 1336: }
  7413                           
  7414                           ;doprnt.c: 1320: break;
  7415                           
  7416  0713  083F               	movf	printf@flag,w
  7417  0714  3980               	andlw	128
  7418                           
  7419                           ; Switch size 1, requested type "space"
  7420                           ; Number of cases is 2, Range of values is 0 to 128
  7421                           ; switch strategies available:
  7422                           ; Name         Instructions Cycles
  7423                           ; simple_byte            7     4 (average)
  7424                           ; jumptable            260     6 (fixed)
  7425                           ;	Chosen strategy is simple_byte
  7426  0715  3A00               	xorlw	0	; case 0
  7427  0716  1903               	skipnz
  7428  0717  2ECF               	goto	l442
  7429  0718  3A80               	xorlw	128	; case 128
  7430  0719  1903               	skipnz
  7431  071A  2EF1               	goto	l447
  7432  071B  2F1C               	goto	l2110
  7433  071C                     l2110:	
  7434                           
  7435                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7436  071C  0840               	movf	printf@width,w
  7437  071D  0441               	iorwf	printf@width+1,w
  7438  071E  1903               	btfsc	3,2
  7439  071F  2F28               	goto	l451
  7440  0720  083F               	movf	printf@flag,w
  7441  0721  3903               	andlw	3
  7442  0722  1903               	btfsc	3,2
  7443  0723  2F28               	goto	l451
  7444                           
  7445                           ;doprnt.c: 1346: width--;
  7446  0724  30FF               	movlw	255
  7447  0725  07C0               	addwf	printf@width,f
  7448  0726  30FF               	movlw	255
  7449  0727  3DC1               	addwfc	printf@width+1,f
  7450  0728                     l451:	
  7451                           
  7452                           ;doprnt.c: 1381: if(width > c)
  7453  0728  0842               	movf	printf@c,w
  7454  0729  00B0               	movwf	??_printf
  7455  072A  01B1               	clrf	??_printf+1
  7456  072B  1BB0               	btfsc	??_printf,7
  7457  072C  03B1               	decf	??_printf+1,f
  7458  072D  0831               	movf	??_printf+1,w
  7459  072E  3A80               	xorlw	128
  7460  072F  00B2               	movwf	??_printf+2
  7461  0730  0841               	movf	printf@width+1,w
  7462  0731  3A80               	xorlw	128
  7463  0732  0232               	subwf	??_printf+2,w
  7464  0733  1D03               	skipz
  7465  0734  2F37               	goto	u1735
  7466  0735  0840               	movf	printf@width,w
  7467  0736  0230               	subwf	??_printf,w
  7468  0737                     u1735:	
  7469  0737  1803               	skipnc
  7470  0738  2F44               	goto	l2118
  7471                           
  7472                           ;doprnt.c: 1382: width -= c;
  7473  0739  0020               	movlb	0	; select bank0
  7474  073A  0842               	movf	printf@c,w
  7475  073B  00B0               	movwf	??_printf
  7476  073C  01B1               	clrf	??_printf+1
  7477  073D  1BB0               	btfsc	??_printf,7
  7478  073E  03B1               	decf	??_printf+1,f
  7479  073F  0830               	movf	??_printf,w
  7480  0740  02C0               	subwf	printf@width,f
  7481  0741  0831               	movf	??_printf+1,w
  7482  0742  3BC1               	subwfb	printf@width+1,f
  7483  0743  2F47               	goto	l2120
  7484  0744                     l2118:	
  7485                           
  7486                           ;doprnt.c: 1383: else
  7487                           ;doprnt.c: 1384: width = 0;
  7488  0744  0020               	movlb	0	; select bank0
  7489  0745  01C0               	clrf	printf@width
  7490  0746  01C1               	clrf	printf@width+1
  7491  0747                     l2120:	
  7492                           
  7493                           ;doprnt.c: 1387: if(flag & 0x04) {
  7494  0747  1D3F               	btfss	printf@flag,2
  7495  0748  2F60               	goto	l2132
  7496                           
  7497                           ;doprnt.c: 1392: if(flag & 0x03)
  7498  0749  083F               	movf	printf@flag,w
  7499  074A  3903               	andlw	3
  7500  074B  1903               	btfsc	3,2
  7501  074C  2F51               	goto	l2126
  7502                           
  7503                           ;doprnt.c: 1393: (putch('-') );
  7504  074D  302D               	movlw	45
  7505  074E  318A  22F2  3185   	fcall	_putch
  7506  0751                     l2126:	
  7507                           
  7508                           ;doprnt.c: 1415: if(width)
  7509  0751  0020               	movlb	0	; select bank0
  7510  0752                     L12:	
  7511  0752  0840               	movf	printf@width,w
  7512  0753  0441               	iorwf	printf@width+1,w
  7513  0754  1903               	btfsc	3,2
  7514  0755  2F79               	goto	l2142
  7515                           
  7516                           ;doprnt.c: 1417: (putch('0') );
  7517                           
  7518                           ;doprnt.c: 1416: do
  7519  0756  3030               	movlw	48
  7520  0757  318A  22F2  3185   	fcall	_putch
  7521                           
  7522                           ;doprnt.c: 1418: while(--width);
  7523  075A  30FF               	movlw	255
  7524  075B  0020               	movlb	0	; select bank0
  7525  075C  07C0               	addwf	printf@width,f
  7526  075D  30FF               	movlw	255
  7527  075E  3DC1               	addwfc	printf@width+1,f
  7528  075F  2F52               	goto	L12
  7529  0760                     l2132:	
  7530                           ;doprnt.c: 1420: } else
  7531                           
  7532                           
  7533                           ;doprnt.c: 1422: {
  7534                           ;doprnt.c: 1424: if(width
  7535                           ;doprnt.c: 1428: )
  7536  0760  0840               	movf	printf@width,w
  7537  0761  0441               	iorwf	printf@width+1,w
  7538  0762  1903               	btfsc	3,2
  7539  0763  2F71               	goto	l2138
  7540  0764                     l2134:	
  7541                           ;doprnt.c: 1429: do
  7542                           
  7543                           
  7544                           ;doprnt.c: 1430: (putch(' ') );
  7545  0764  3020               	movlw	32
  7546  0765  318A  22F2  3185   	fcall	_putch
  7547                           
  7548                           ;doprnt.c: 1431: while(--width);
  7549  0768  30FF               	movlw	255
  7550  0769  0020               	movlb	0	; select bank0
  7551  076A  07C0               	addwf	printf@width,f
  7552  076B  30FF               	movlw	255
  7553  076C  3DC1               	addwfc	printf@width+1,f
  7554  076D  0840               	movf	printf@width,w
  7555  076E  0441               	iorwf	printf@width+1,w
  7556  076F  1D03               	btfss	3,2
  7557  0770  2F64               	goto	l2134
  7558  0771                     l2138:	
  7559                           
  7560                           ;doprnt.c: 1438: if(flag & 0x03)
  7561  0771  083F               	movf	printf@flag,w
  7562  0772  3903               	andlw	3
  7563  0773  1903               	btfsc	3,2
  7564  0774  2F79               	goto	l2142
  7565                           
  7566                           ;doprnt.c: 1439: (putch('-') );
  7567  0775  302D               	movlw	45
  7568  0776  318A  22F2  3185   	fcall	_putch
  7569  0779                     l2142:	
  7570                           
  7571                           ;doprnt.c: 1469: }
  7572                           ;doprnt.c: 1472: prec = c;
  7573  0779  0020               	movlb	0	; select bank0
  7574  077A  0842               	movf	printf@c,w
  7575  077B  00B0               	movwf	??_printf
  7576  077C  0830               	movf	??_printf,w
  7577  077D  00B7               	movwf	printf@prec
  7578                           
  7579                           ;doprnt.c: 1474: while(prec--) {
  7580  077E  2FDD               	goto	l2162
  7581  077F                     l2144:	
  7582                           ;doprnt.c: 1478: {
  7583                           ;doprnt.c: 1483: case 0x00:
  7584                           
  7585                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7586                           
  7587                           
  7588                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7589  077F  300A               	movlw	10
  7590  0780  00F8               	movwf	___lwmod@divisor
  7591  0781  3000               	movlw	0
  7592  0782  00F9               	movwf	___lwmod@divisor+1
  7593  0783  0837               	movf	printf@prec,w
  7594  0784  00B0               	movwf	??_printf
  7595  0785  01B1               	clrf	??_printf+1
  7596  0786  35B0               	lslf	??_printf,f
  7597  0787  0DB1               	rlf	??_printf+1,f
  7598  0788  3073               	movlw	low (_dpowers| (0+32768))
  7599  0789  0730               	addwf	??_printf,w
  7600  078A  0084               	movwf	4
  7601  078B  3094               	movlw	high (_dpowers| (0+32768))
  7602  078C  3D31               	addwfc	??_printf+1,w
  7603  078D  0085               	movwf	5
  7604  078E  3F00               	moviw [0]fsr0
  7605  078F  00F0               	movwf	___lwdiv@divisor
  7606  0790  3F01               	moviw [1]fsr0
  7607  0791  00F1               	movwf	___lwdiv@divisor+1
  7608  0792  083E               	movf	printf@val+1,w
  7609  0793  00F3               	movwf	___lwdiv@dividend+1
  7610  0794  083D               	movf	printf@val,w
  7611  0795  00F2               	movwf	___lwdiv@dividend
  7612  0796  318C  2491  3185   	fcall	___lwdiv
  7613  0799  0871               	movf	?___lwdiv+1,w
  7614  079A  00FB               	movwf	___lwmod@dividend+1
  7615  079B  0870               	movf	?___lwdiv,w
  7616  079C  00FA               	movwf	___lwmod@dividend
  7617  079D  318C  2404  3185   	fcall	___lwmod
  7618  07A0  0878               	movf	?___lwmod,w
  7619  07A1  3E30               	addlw	48
  7620  07A2  0020               	movlb	0	; select bank0
  7621  07A3  2FD6               	goto	L8
  7622  07A4                     l2146:	
  7623                           ;doprnt.c: 1497: case 0x80:
  7624                           
  7625                           ;doprnt.c: 1491: break;
  7626                           
  7627                           
  7628                           ;doprnt.c: 1499: {
  7629                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7630  07A4  0837               	movf	printf@prec,w
  7631  07A5  00B0               	movwf	??_printf
  7632  07A6  01B1               	clrf	??_printf+1
  7633  07A7  35B0               	lslf	??_printf,f
  7634  07A8  0DB1               	rlf	??_printf+1,f
  7635  07A9  307D               	movlw	low (_hexpowers| (0+32768))
  7636  07AA  0730               	addwf	??_printf,w
  7637  07AB  0084               	movwf	4
  7638  07AC  3094               	movlw	high (_hexpowers| (0+32768))
  7639  07AD  3D31               	addwfc	??_printf+1,w
  7640  07AE  0085               	movwf	5
  7641  07AF  3F00               	moviw [0]fsr0
  7642  07B0  00F0               	movwf	___lwdiv@divisor
  7643  07B1  3F01               	moviw [1]fsr0
  7644  07B2  00F1               	movwf	___lwdiv@divisor+1
  7645  07B3  083E               	movf	printf@val+1,w
  7646  07B4  00F3               	movwf	___lwdiv@dividend+1
  7647  07B5  083D               	movf	printf@val,w
  7648  07B6  00F2               	movwf	___lwdiv@dividend
  7649  07B7  318C  2491  3185   	fcall	___lwdiv
  7650  07BA  0870               	movf	?___lwdiv,w
  7651  07BB  390F               	andlw	15
  7652  07BC  0020               	movlb	0	; select bank0
  7653  07BD  00B2               	movwf	??_printf+2
  7654  07BE  0832               	movf	??_printf+2,w
  7655  07BF  00B6               	movwf	printf@idx
  7656                           
  7657                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7658  07C0  1ABF               	btfsc	printf@flag,5
  7659  07C1  2FC6               	goto	l2152
  7660  07C2  3029               	movlw	low (STR_63| (0+32768))
  7661  07C3  00B4               	movwf	_printf$624
  7662  07C4  3093               	movlw	high (STR_63| (0+32768))
  7663  07C5  2FC9               	goto	L9
  7664  07C6                     l2152:	
  7665  07C6  3018               	movlw	low (STR_62| (0+32768))
  7666  07C7  00B4               	movwf	_printf$624
  7667  07C8  3093               	movlw	high (STR_62| (0+32768))
  7668  07C9                     L9:	
  7669  07C9  00B5               	movwf	_printf$624+1
  7670  07CA  0835               	movf	_printf$624+1,w
  7671  07CB  00B1               	movwf	??_printf+1
  7672  07CC  0834               	movf	_printf$624,w
  7673  07CD  00B0               	movwf	??_printf
  7674  07CE  0836               	movf	printf@idx,w
  7675  07CF  0730               	addwf	??_printf,w
  7676  07D0  0084               	movwf	4
  7677  07D1  0831               	movf	??_printf+1,w
  7678  07D2  1803               	skipnc
  7679  07D3  0A31               	incf	??_printf+1,w
  7680  07D4  0085               	movwf	5
  7681  07D5  0800               	movf	0,w	;code access
  7682  07D6                     L8:	
  7683  07D6  00B2               	movwf	??_printf+2
  7684  07D7  0832               	movf	??_printf+2,w
  7685  07D8  00C2               	movwf	printf@c
  7686  07D9                     l2160:	
  7687                           ;doprnt.c: 1523: }
  7688                           
  7689                           ;doprnt.c: 1508: }
  7690                           ;doprnt.c: 1510: break;
  7691                           
  7692                           
  7693                           ;doprnt.c: 1524: (putch(c) );
  7694  07D9  0842               	movf	printf@c,w
  7695  07DA  318A  22F2  3185   	fcall	_putch
  7696  07DD                     l2162:	
  7697  07DD  30FF               	movlw	255
  7698  07DE  0020               	movlb	0	; select bank0
  7699  07DF  00B0               	movwf	??_printf
  7700  07E0  0830               	movf	??_printf,w
  7701  07E1  07B7               	addwf	printf@prec,f
  7702  07E2  0A37               	incf	printf@prec,w
  7703  07E3  1903               	btfsc	3,2
  7704  07E4  2DAA               	goto	l2164
  7705  07E5  083F               	movf	printf@flag,w
  7706  07E6  3980               	andlw	128
  7707                           
  7708                           ; Switch size 1, requested type "space"
  7709                           ; Number of cases is 2, Range of values is 0 to 128
  7710                           ; switch strategies available:
  7711                           ; Name         Instructions Cycles
  7712                           ; simple_byte            7     4 (average)
  7713                           ; jumptable            260     6 (fixed)
  7714                           ;	Chosen strategy is simple_byte
  7715  07E7  3A00               	xorlw	0	; case 0
  7716  07E8  1903               	skipnz
  7717  07E9  2F7F               	goto	l2144
  7718  07EA  3A80               	xorlw	128	; case 128
  7719  07EB  1903               	skipnz
  7720  07EC  2FA4               	goto	l2146
  7721  07ED  2FD9               	goto	l2160
  7722  07EE  2FD9               	goto	l2160
  7723  07EF                     l476:	
  7724                           ;doprnt.c: 1540: return 0;
  7725                           ;	Return value of _printf is never used
  7726                           
  7727                           ;doprnt.c: 1525: }
  7728                           ;doprnt.c: 1533: }
  7729                           ;doprnt.c: 1535: alldone:
  7730                           
  7731  07EF  0008               	return
  7732  07F0                     __end_of_printf:	
  7733                           
  7734                           	psect	text17
  7735  0AF2                     __ptext17:	
  7736 ;; *************** function _putch *****************
  7737 ;; Defined at:
  7738 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  txData          1    wreg     unsigned char 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  txData          1    1[COMMON] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0, pclath, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;Total ram usage:        1 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    1
  7759 ;; This function calls:
  7760 ;;		_EUSART_Write
  7761 ;; This function is called by:
  7762 ;;		_printf
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           
  7767                           ;psect for function _putch
  7768  0AF2                     _putch:	
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7772                           ;putch@txData stored from wreg
  7773  0AF2  00F1               	movwf	putch@txData
  7774                           
  7775                           ;eusart.c: 109: EUSART_Write(txData);
  7776  0AF3  0871               	movf	putch@txData,w
  7777  0AF4  318B  230B         	fcall	_EUSART_Write
  7778  0AF6  0008               	return
  7779  0AF7                     __end_of_putch:	
  7780                           
  7781                           	psect	text18
  7782  0B0B                     __ptext18:	
  7783 ;; *************** function _EUSART_Write *****************
  7784 ;; Defined at:
  7785 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  txData          1    wreg     unsigned char 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  txData          1    0[COMMON] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;Total ram usage:        1 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_putch
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function _EUSART_Write
  7814  0B0B                     _EUSART_Write:	
  7815                           
  7816                           ;incstack = 0
  7817                           ; Regs used in _EUSART_Write: [wreg]
  7818                           ;EUSART_Write@txData stored from wreg
  7819  0B0B  00F0               	movwf	EUSART_Write@txData
  7820  0B0C                     l58:	
  7821                           ;eusart.c: 96: {
  7822                           
  7823                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7824                           
  7825  0B0C  0020               	movlb	0	; select bank0
  7826  0B0D  1E11               	btfss	17,4	;volatile
  7827  0B0E  2B0C               	goto	l58
  7828                           
  7829                           ;eusart.c: 97: }
  7830                           ;eusart.c: 99: TXREG = txData;
  7831  0B0F  0870               	movf	EUSART_Write@txData,w
  7832  0B10  0023               	movlb	3	; select bank3
  7833  0B11  009A               	movwf	26	;volatile
  7834  0B12  0008               	return
  7835  0B13                     __end_of_EUSART_Write:	
  7836                           
  7837                           	psect	text19
  7838  0C04                     __ptext19:	
  7839 ;; *************** function ___lwmod *****************
  7840 ;; Defined at:
  7841 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  divisor         2    8[COMMON] unsigned int 
  7844 ;;  dividend        2   10[COMMON] unsigned int 
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;  counter         1   13[COMMON] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  2    8[COMMON] unsigned int 
  7849 ;; Registers used:
  7850 ;;		wreg, status,2, status,0
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;Total ram usage:        6 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_printf
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function ___lwmod
  7871  0C04                     ___lwmod:	
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7875  0C04  0878               	movf	___lwmod@divisor,w
  7876  0C05  0479               	iorwf	___lwmod@divisor+1,w
  7877  0C06  1903               	btfsc	3,2
  7878  0C07  2C2B               	goto	l1968
  7879  0C08  01FD               	clrf	___lwmod@counter
  7880  0C09  0AFD               	incf	___lwmod@counter,f
  7881  0C0A                     l1958:	
  7882  0C0A  1BF9               	btfsc	___lwmod@divisor+1,7
  7883  0C0B  2C16               	goto	l1960
  7884  0C0C  3001               	movlw	1
  7885  0C0D                     u1445:	
  7886  0C0D  35F8               	lslf	___lwmod@divisor,f
  7887  0C0E  0DF9               	rlf	___lwmod@divisor+1,f
  7888  0C0F  0B89               	decfsz	9,f
  7889  0C10  2C0D               	goto	u1445
  7890  0C11  3001               	movlw	1
  7891  0C12  00FC               	movwf	??___lwmod
  7892  0C13  087C               	movf	??___lwmod,w
  7893  0C14  07FD               	addwf	___lwmod@counter,f
  7894  0C15  2C0A               	goto	l1958
  7895  0C16                     l1960:	
  7896  0C16  0879               	movf	___lwmod@divisor+1,w
  7897  0C17  027B               	subwf	___lwmod@dividend+1,w
  7898  0C18  1D03               	skipz
  7899  0C19  2C1C               	goto	u1465
  7900  0C1A  0878               	movf	___lwmod@divisor,w
  7901  0C1B  027A               	subwf	___lwmod@dividend,w
  7902  0C1C                     u1465:	
  7903  0C1C  1C03               	skipc
  7904  0C1D  2C22               	goto	l1964
  7905  0C1E  0878               	movf	___lwmod@divisor,w
  7906  0C1F  02FA               	subwf	___lwmod@dividend,f
  7907  0C20  0879               	movf	___lwmod@divisor+1,w
  7908  0C21  3BFB               	subwfb	___lwmod@dividend+1,f
  7909  0C22                     l1964:	
  7910  0C22  3001               	movlw	1
  7911  0C23                     u1475:	
  7912  0C23  36F9               	lsrf	___lwmod@divisor+1,f
  7913  0C24  0CF8               	rrf	___lwmod@divisor,f
  7914  0C25  0B89               	decfsz	9,f
  7915  0C26  2C23               	goto	u1475
  7916  0C27  3001               	movlw	1
  7917  0C28  02FD               	subwf	___lwmod@counter,f
  7918  0C29  1D03               	btfss	3,2
  7919  0C2A  2C16               	goto	l1960
  7920  0C2B                     l1968:	
  7921  0C2B  087B               	movf	___lwmod@dividend+1,w
  7922  0C2C  00F9               	movwf	?___lwmod+1
  7923  0C2D  087A               	movf	___lwmod@dividend,w
  7924  0C2E  00F8               	movwf	?___lwmod
  7925  0C2F  0008               	return
  7926  0C30                     __end_of___lwmod:	
  7927                           
  7928                           	psect	text20
  7929  0C91                     __ptext20:	
  7930 ;; *************** function ___lwdiv *****************
  7931 ;; Defined at:
  7932 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;  divisor         2    0[COMMON] unsigned int 
  7935 ;;  dividend        2    2[COMMON] unsigned int 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  quotient        2    5[COMMON] unsigned int 
  7938 ;;  counter         1    7[COMMON] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  2    0[COMMON] unsigned int 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;Total ram usage:        8 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		_printf
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           
  7962                           ;psect for function ___lwdiv
  7963  0C91                     ___lwdiv:	
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7967  0C91  01F5               	clrf	___lwdiv@quotient
  7968  0C92  01F6               	clrf	___lwdiv@quotient+1
  7969  0C93  0870               	movf	___lwdiv@divisor,w
  7970  0C94  0471               	iorwf	___lwdiv@divisor+1,w
  7971  0C95  1903               	btfsc	3,2
  7972  0C96  2CC0               	goto	l1946
  7973  0C97  01F7               	clrf	___lwdiv@counter
  7974  0C98  0AF7               	incf	___lwdiv@counter,f
  7975  0C99                     l1934:	
  7976  0C99  1BF1               	btfsc	___lwdiv@divisor+1,7
  7977  0C9A  2CA5               	goto	l1936
  7978  0C9B  3001               	movlw	1
  7979  0C9C                     u1375:	
  7980  0C9C  35F0               	lslf	___lwdiv@divisor,f
  7981  0C9D  0DF1               	rlf	___lwdiv@divisor+1,f
  7982  0C9E  0B89               	decfsz	9,f
  7983  0C9F  2C9C               	goto	u1375
  7984  0CA0  3001               	movlw	1
  7985  0CA1  00F4               	movwf	??___lwdiv
  7986  0CA2  0874               	movf	??___lwdiv,w
  7987  0CA3  07F7               	addwf	___lwdiv@counter,f
  7988  0CA4  2C99               	goto	l1934
  7989  0CA5                     l1936:	
  7990  0CA5  3001               	movlw	1
  7991  0CA6                     u1395:	
  7992  0CA6  35F5               	lslf	___lwdiv@quotient,f
  7993  0CA7  0DF6               	rlf	___lwdiv@quotient+1,f
  7994  0CA8  0B89               	decfsz	9,f
  7995  0CA9  2CA6               	goto	u1395
  7996  0CAA  0871               	movf	___lwdiv@divisor+1,w
  7997  0CAB  0273               	subwf	___lwdiv@dividend+1,w
  7998  0CAC  1D03               	skipz
  7999  0CAD  2CB0               	goto	u1405
  8000  0CAE  0870               	movf	___lwdiv@divisor,w
  8001  0CAF  0272               	subwf	___lwdiv@dividend,w
  8002  0CB0                     u1405:	
  8003  0CB0  1C03               	skipc
  8004  0CB1  2CB7               	goto	l1942
  8005  0CB2  0870               	movf	___lwdiv@divisor,w
  8006  0CB3  02F2               	subwf	___lwdiv@dividend,f
  8007  0CB4  0871               	movf	___lwdiv@divisor+1,w
  8008  0CB5  3BF3               	subwfb	___lwdiv@dividend+1,f
  8009  0CB6  1475               	bsf	___lwdiv@quotient,0
  8010  0CB7                     l1942:	
  8011  0CB7  3001               	movlw	1
  8012  0CB8                     u1415:	
  8013  0CB8  36F1               	lsrf	___lwdiv@divisor+1,f
  8014  0CB9  0CF0               	rrf	___lwdiv@divisor,f
  8015  0CBA  0B89               	decfsz	9,f
  8016  0CBB  2CB8               	goto	u1415
  8017  0CBC  3001               	movlw	1
  8018  0CBD  02F7               	subwf	___lwdiv@counter,f
  8019  0CBE  1D03               	btfss	3,2
  8020  0CBF  2CA5               	goto	l1936
  8021  0CC0                     l1946:	
  8022  0CC0  0876               	movf	___lwdiv@quotient+1,w
  8023  0CC1  00F1               	movwf	?___lwdiv+1
  8024  0CC2  0875               	movf	___lwdiv@quotient,w
  8025  0CC3  00F0               	movwf	?___lwdiv
  8026  0CC4  0008               	return
  8027  0CC5                     __end_of___lwdiv:	
  8028                           
  8029                           	psect	text21
  8030  0BDE                     __ptext21:	
  8031 ;; *************** function _abort_pending_transmissions *****************
  8032 ;; Defined at:
  8033 ;;		line 115 in file "mcp2515.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;		None
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      unsigned char 
  8040 ;; Registers used:
  8041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        3 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    3
  8054 ;; This function calls:
  8055 ;;		_SPI_exchange
  8056 ;; This function is called by:
  8057 ;;		_can_set_mask
  8058 ;;		_can_abort
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _abort_pending_transmissions
  8064  0BDE                     _abort_pending_transmissions:	
  8065                           
  8066                           ;mcp2515.c: 116: buf[0] = 0b00000101u;
  8067                           
  8068                           ;incstack = 0
  8069                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8070  0BDE  3005               	movlw	5
  8071  0BDF  0020               	movlb	0	; select bank0
  8072  0BE0  00A0               	movwf	??_abort_pending_transmissions
  8073  0BE1  0820               	movf	??_abort_pending_transmissions,w
  8074  0BE2  0021               	movlb	1	; select bank1
  8075  0BE3  00B4               	movwf	_buf^(0+128)
  8076                           
  8077                           ;mcp2515.c: 117: buf[1] = 0x0fu;
  8078  0BE4  300F               	movlw	15
  8079  0BE5  0020               	movlb	0	; select bank0
  8080  0BE6  00A0               	movwf	??_abort_pending_transmissions
  8081  0BE7  0820               	movf	??_abort_pending_transmissions,w
  8082  0BE8  0021               	movlb	1	; select bank1
  8083  0BE9  00B5               	movwf	(_buf^(0+128)+1)
  8084                           
  8085                           ;mcp2515.c: 118: buf[2] = 0b00010000u;
  8086  0BEA  3010               	movlw	16
  8087  0BEB  0020               	movlb	0	; select bank0
  8088  0BEC  00A0               	movwf	??_abort_pending_transmissions
  8089  0BED  0820               	movf	??_abort_pending_transmissions,w
  8090  0BEE  0021               	movlb	1	; select bank1
  8091  0BEF  00B6               	movwf	(_buf^(0+128)+2)
  8092                           
  8093                           ;mcp2515.c: 119: buf[3] = 0b00010000u;
  8094  0BF0  3010               	movlw	16
  8095  0BF1  0020               	movlb	0	; select bank0
  8096  0BF2  00A0               	movwf	??_abort_pending_transmissions
  8097  0BF3  0820               	movf	??_abort_pending_transmissions,w
  8098  0BF4  0021               	movlb	1	; select bank1
  8099  0BF5  00B7               	movwf	(_buf^(0+128)+3)
  8100                           
  8101                           ;mcp2515.c: 120: uint8_t bytes_written = SPI_exchange(buf, 4);
  8102  0BF6  3004               	movlw	4
  8103  0BF7  0020               	movlb	0	; select bank0
  8104  0BF8  00A0               	movwf	??_abort_pending_transmissions
  8105  0BF9  0820               	movf	??_abort_pending_transmissions,w
  8106  0BFA  00F8               	movwf	SPI_exchange@len
  8107  0BFB  30B4               	movlw	(low (_buf| 0))& (0+255)
  8108  0BFC  318B  235A         	fcall	_SPI_exchange
  8109  0BFE  0020               	movlb	0	; select bank0
  8110  0BFF  00A1               	movwf	??_abort_pending_transmissions+1
  8111  0C00  0821               	movf	??_abort_pending_transmissions+1,w
  8112  0C01  00A2               	movwf	abort_pending_transmissions@bytes_written
  8113                           
  8114                           ;mcp2515.c: 121: return bytes_written;
  8115  0C02  0822               	movf	abort_pending_transmissions@bytes_written,w
  8116  0C03  0008               	return
  8117  0C04                     __end_of_abort_pending_transmissions:	
  8118                           
  8119                           	psect	text22
  8120  0B5A                     __ptext22:	
  8121 ;; *************** function _SPI_exchange *****************
  8122 ;; Defined at:
  8123 ;;		line 4 in file "spi.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  buf             1    wreg     PTR unsigned char 
  8126 ;;		 -> receive@rx_buf(15), buf(16), 
  8127 ;;  len             1    8[COMMON] unsigned char 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  buf             1   13[COMMON] PTR unsigned char 
  8130 ;;		 -> receive@rx_buf(15), buf(16), 
  8131 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      unsigned char 
  8134 ;; Registers used:
  8135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8141 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;Total ram usage:        6 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    2
  8148 ;; This function calls:
  8149 ;;		_SPI_Exchange8bitBuffer
  8150 ;; This function is called by:
  8151 ;;		_can_init
  8152 ;;		_can_ope_mode
  8153 ;;		_abort_pending_transmissions
  8154 ;;		_can_set_mask
  8155 ;;		_txf_clear
  8156 ;;		_receive
  8157 ;;		_can_send
  8158 ;;		_can_status_check
  8159 ;;		_can_baudrate
  8160 ;;		_read_register
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function _SPI_exchange
  8166  0B5A                     _SPI_exchange:	
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8170                           ;SPI_exchange@buf stored from wreg
  8171  0B5A  00FD               	movwf	SPI_exchange@buf
  8172                           
  8173                           ;spi.c: 5: LATAbits.LATA4 = 0;
  8174  0B5B  0022               	movlb	2	; select bank2
  8175  0B5C  120C               	bcf	12,4	;volatile
  8176                           
  8177                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  8178  0B5D  0878               	movf	SPI_exchange@len,w
  8179  0B5E  00F9               	movwf	??_SPI_exchange
  8180  0B5F  0879               	movf	??_SPI_exchange,w
  8181  0B60  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8182  0B61  087D               	movf	SPI_exchange@buf,w
  8183  0B62  00FA               	movwf	??_SPI_exchange+1
  8184  0B63  087A               	movf	??_SPI_exchange+1,w
  8185  0B64  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8186  0B65  087D               	movf	SPI_exchange@buf,w
  8187  0B66  318C  24C5         	fcall	_SPI_Exchange8bitBuffer
  8188  0B68  00FB               	movwf	??_SPI_exchange+2
  8189  0B69  087B               	movf	??_SPI_exchange+2,w
  8190  0B6A  00FC               	movwf	SPI_exchange@bytes_written
  8191                           
  8192                           ;spi.c: 7: LATAbits.LATA4 = 1;
  8193  0B6B  0022               	movlb	2	; select bank2
  8194  0B6C  160C               	bsf	12,4	;volatile
  8195                           
  8196                           ;spi.c: 8: return bytes_written;
  8197  0B6D  087C               	movf	SPI_exchange@bytes_written,w
  8198  0B6E  0008               	return
  8199  0B6F                     __end_of_SPI_exchange:	
  8200                           
  8201                           	psect	text23
  8202  0CC5                     __ptext23:	
  8203 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8204 ;; Defined at:
  8205 ;;		line 91 in file "mcc_generated_files/spi.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  dataIn          1    wreg     PTR unsigned char 
  8208 ;;		 -> receive@rx_buf(15), buf(16), 
  8209 ;;  bufLen          1    1[COMMON] unsigned char 
  8210 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8211 ;;		 -> receive@rx_buf(15), buf(16), 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8214 ;;		 -> receive@rx_buf(15), buf(16), 
  8215 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      unsigned char 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        7 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    1
  8232 ;; This function calls:
  8233 ;;		_SPI_Exchange8bit
  8234 ;; This function is called by:
  8235 ;;		_SPI_exchange
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _SPI_Exchange8bitBuffer
  8241  0CC5                     _SPI_Exchange8bitBuffer:	
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8245                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8246  0CC5  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8247                           
  8248                           ;spi.c: 93: uint8_t bytesWritten = 0;
  8249  0CC6  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8250                           
  8251                           ;spi.c: 95: if(bufLen != 0)
  8252  0CC7  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8253  0CC8  1903               	btfsc	3,2
  8254  0CC9  2D11               	goto	l2000
  8255                           
  8256                           ;spi.c: 96: {
  8257                           ;spi.c: 97: if(dataIn != (0))
  8258  0CCA  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8259  0CCB  1D03               	btfss	3,2
  8260  0CCC  2CF3               	goto	l1988
  8261  0CCD  2CF8               	goto	l1990
  8262  0CCE                     l1980:	
  8263                           ;spi.c: 98: {
  8264                           ;spi.c: 99: while(bytesWritten < bufLen)
  8265                           
  8266                           
  8267                           ;spi.c: 100: {
  8268                           ;spi.c: 101: if(dataOut == (0))
  8269  0CCE  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8270  0CCF  1D03               	btfss	3,2
  8271  0CD0  2CDC               	goto	l1984
  8272                           
  8273                           ;spi.c: 102: {
  8274                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  8275  0CD1  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8276  0CD2  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8277  0CD3  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8278  0CD4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8279  0CD5  0086               	movwf	6
  8280  0CD6  0187               	clrf	7
  8281  0CD7  0801               	movf	1,w
  8282  0CD8  318B  2313  318C   	fcall	_SPI_Exchange8bit
  8283                           
  8284                           ;spi.c: 104: }
  8285  0CDB  2CEF               	goto	l1986
  8286  0CDC                     l1984:	
  8287                           
  8288                           ;spi.c: 105: else
  8289                           ;spi.c: 106: {
  8290                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8291  0CDC  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8292  0CDD  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8293  0CDE  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8294  0CDF  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8295  0CE0  0086               	movwf	6
  8296  0CE1  0187               	clrf	7
  8297  0CE2  0801               	movf	1,w
  8298  0CE3  318B  2313  318C   	fcall	_SPI_Exchange8bit
  8299  0CE6  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8300  0CE7  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8301  0CE8  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8302  0CE9  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  8303  0CEA  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  8304  0CEB  0086               	movwf	6
  8305  0CEC  0187               	clrf	7
  8306  0CED  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8307  0CEE  0081               	movwf	1
  8308  0CEF                     l1986:	
  8309                           
  8310                           ;spi.c: 108: }
  8311                           ;spi.c: 110: bytesWritten++;
  8312  0CEF  3001               	movlw	1
  8313  0CF0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8314  0CF1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8315  0CF2  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8316  0CF3                     l1988:	
  8317  0CF3  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8318  0CF4  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8319  0CF5  1803               	btfsc	3,0
  8320  0CF6  2D11               	goto	l2000
  8321  0CF7  2CCE               	goto	l1980
  8322  0CF8                     l1990:	
  8323                           ;spi.c: 111: }
  8324                           ;spi.c: 112: }
  8325                           
  8326                           
  8327                           ;spi.c: 113: else
  8328                           ;spi.c: 114: {
  8329                           ;spi.c: 115: if(dataOut != (0))
  8330  0CF8  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8331  0CF9  1D03               	btfss	3,2
  8332  0CFA  2D0D               	goto	l1998
  8333  0CFB  2D11               	goto	l2000
  8334  0CFC                     l1994:	
  8335                           ;spi.c: 116: {
  8336                           ;spi.c: 117: while(bytesWritten < bufLen )
  8337                           
  8338                           
  8339                           ;spi.c: 118: {
  8340                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8341  0CFC  3000               	movlw	0
  8342  0CFD  318B  2313  318C   	fcall	_SPI_Exchange8bit
  8343  0D00  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8344  0D01  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8345  0D02  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8346  0D03  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8347  0D04  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8348  0D05  0086               	movwf	6
  8349  0D06  0187               	clrf	7
  8350  0D07  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8351  0D08  0081               	movwf	1
  8352                           
  8353                           ;spi.c: 121: bytesWritten++;
  8354  0D09  3001               	movlw	1
  8355  0D0A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8356  0D0B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8357  0D0C  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8358  0D0D                     l1998:	
  8359  0D0D  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8360  0D0E  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8361  0D0F  1C03               	skipc
  8362  0D10  2CFC               	goto	l1994
  8363  0D11                     l2000:	
  8364                           
  8365                           ;spi.c: 122: }
  8366                           ;spi.c: 123: }
  8367                           ;spi.c: 124: }
  8368                           ;spi.c: 125: }
  8369                           ;spi.c: 127: return bytesWritten;
  8370  0D11  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8371  0D12  0008               	return
  8372  0D13                     __end_of_SPI_Exchange8bitBuffer:	
  8373                           
  8374                           	psect	text24
  8375  0B13                     __ptext24:	
  8376 ;; *************** function _SPI_Exchange8bit *****************
  8377 ;; Defined at:
  8378 ;;		line 77 in file "mcc_generated_files/spi.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  data            1    wreg     unsigned char 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  data            1    0[COMMON] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      unsigned char 
  8385 ;; Registers used:
  8386 ;;		wreg
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        1 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; This function calls:
  8399 ;;		Nothing
  8400 ;; This function is called by:
  8401 ;;		_SPI_Exchange8bitBuffer
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           
  8406                           ;psect for function _SPI_Exchange8bit
  8407  0B13                     _SPI_Exchange8bit:	
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8411                           ;SPI_Exchange8bit@data stored from wreg
  8412  0B13  00F0               	movwf	SPI_Exchange8bit@data
  8413                           
  8414                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  8415  0B14  0024               	movlb	4	; select bank4
  8416  0B15  1395               	bcf	21,7	;volatile
  8417                           
  8418                           ;spi.c: 82: SSP1BUF = data;
  8419  0B16  0870               	movf	SPI_Exchange8bit@data,w
  8420  0B17  0091               	movwf	17	;volatile
  8421  0B18                     l113:	
  8422                           ;spi.c: 85: {
  8423                           
  8424                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  8425                           
  8426  0B18  1C14               	btfss	20,0	;volatile
  8427  0B19  2B18               	goto	l113
  8428                           
  8429                           ;spi.c: 86: }
  8430                           ;spi.c: 88: return (SSP1BUF);
  8431  0B1A  0811               	movf	17,w	;volatile
  8432  0B1B  0008               	return
  8433  0B1C                     __end_of_SPI_Exchange8bit:	
  8434                           
  8435                           	psect	text25
  8436  0012                     __ptext25:	
  8437 ;; *************** function _atoi *****************
  8438 ;; Defined at:
  8439 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  s               1    wreg     PTR const unsigned char 
  8442 ;;		 -> main@buf(9), 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  s               1   13[COMMON] PTR const unsigned char 
  8445 ;;		 -> main@buf(9), 
  8446 ;;  a               2   11[COMMON] int 
  8447 ;;  sign            1   10[COMMON] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  2    6[COMMON] int 
  8450 ;; Registers used:
  8451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;Total ram usage:        8 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    1
  8464 ;; This function calls:
  8465 ;;		___wmul
  8466 ;;		_isdigit
  8467 ;; This function is called by:
  8468 ;;		_main
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           
  8473                           ;psect for function _atoi
  8474  0012                     _atoi:	
  8475                           
  8476                           ;incstack = 0
  8477                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8478                           ;atoi@s stored from wreg
  8479  0012  00FD               	movwf	atoi@s
  8480  0013                     l2414:	
  8481  0013  087D               	movf	atoi@s,w
  8482  0014  0086               	movwf	6
  8483  0015  0187               	clrf	7
  8484  0016  3020               	movlw	32
  8485  0017  0601               	xorwf	1,w
  8486  0018  1D03               	btfss	3,2
  8487  0019  281F               	goto	l2416
  8488  001A                     l2412:	
  8489  001A  3001               	movlw	1
  8490  001B  00F8               	movwf	??_atoi
  8491  001C  0878               	movf	??_atoi,w
  8492  001D  07FD               	addwf	atoi@s,f
  8493  001E  2813               	goto	l2414
  8494  001F                     l2416:	
  8495  001F  087D               	movf	atoi@s,w
  8496  0020  0086               	movwf	6
  8497  0021  0187               	clrf	7
  8498  0022  3009               	movlw	9
  8499  0023  0601               	xorwf	1,w
  8500  0024  1903               	btfsc	3,2
  8501  0025  281A               	goto	l2412
  8502  0026  01FB               	clrf	atoi@a
  8503  0027  01FC               	clrf	atoi@a+1
  8504  0028  01FA               	clrf	atoi@sign
  8505  0029  087D               	movf	atoi@s,w
  8506  002A  0086               	movwf	6
  8507  002B  0187               	clrf	7
  8508  002C  302D               	movlw	45
  8509  002D  0601               	xorwf	1,w
  8510  002E  1D03               	btfss	3,2
  8511  002F  2835               	goto	l2424
  8512  0030  3001               	movlw	1
  8513  0031  00F8               	movwf	??_atoi
  8514  0032  0878               	movf	??_atoi,w
  8515  0033  07FA               	addwf	atoi@sign,f
  8516  0034  283C               	goto	l2430
  8517  0035                     l2424:	
  8518  0035  087D               	movf	atoi@s,w
  8519  0036  0086               	movwf	6
  8520  0037  0187               	clrf	7
  8521  0038  302B               	movlw	43
  8522  0039  0601               	xorwf	1,w
  8523  003A  1D03               	btfss	3,2
  8524  003B  2840               	goto	l2432
  8525  003C                     l2430:	
  8526  003C  3001               	movlw	1
  8527  003D  00F8               	movwf	??_atoi
  8528  003E  0878               	movf	??_atoi,w
  8529  003F  07FD               	addwf	atoi@s,f
  8530  0040                     l2432:	
  8531  0040  087D               	movf	atoi@s,w
  8532  0041  0086               	movwf	6
  8533  0042  0187               	clrf	7
  8534  0043  0801               	movf	1,w
  8535  0044  3180  2004  3180   	fcall	_isdigit
  8536  0047  1C03               	btfss	3,0
  8537  0048  2865               	goto	l2434
  8538  0049  087C               	movf	atoi@a+1,w
  8539  004A  00F1               	movwf	___wmul@multiplier+1
  8540  004B  087B               	movf	atoi@a,w
  8541  004C  00F0               	movwf	___wmul@multiplier
  8542  004D  300A               	movlw	10
  8543  004E  00F2               	movwf	___wmul@multiplicand
  8544  004F  3000               	movlw	0
  8545  0050  00F3               	movwf	___wmul@multiplicand+1
  8546  0051  318B  239F  3180   	fcall	___wmul
  8547  0054  087D               	movf	atoi@s,w
  8548  0055  0086               	movwf	6
  8549  0056  0187               	clrf	7
  8550  0057  0801               	movf	1,w
  8551  0058  0770               	addwf	?___wmul,w
  8552  0059  00F8               	movwf	??_atoi
  8553  005A  0871               	movf	?___wmul+1,w
  8554  005B  1803               	skipnc
  8555  005C  0A71               	incf	?___wmul+1,w
  8556  005D  00F9               	movwf	??_atoi+1
  8557  005E  0878               	movf	??_atoi,w
  8558  005F  3ED0               	addlw	208
  8559  0060  00FB               	movwf	atoi@a
  8560  0061  30FF               	movlw	255
  8561  0062  3D79               	addwfc	??_atoi+1,w
  8562  0063  00FC               	movwf	atoi@a+1
  8563  0064  283C               	goto	l2430
  8564  0065                     l2434:	
  8565  0065  087A               	movf	atoi@sign,w
  8566  0066  1903               	btfsc	3,2
  8567  0067  2874               	goto	l2440
  8568  0068  097B               	comf	atoi@a,w
  8569  0069  00F8               	movwf	??_atoi
  8570  006A  097C               	comf	atoi@a+1,w
  8571  006B  00F9               	movwf	??_atoi+1
  8572  006C  0AF8               	incf	??_atoi,f
  8573  006D  1903               	skipnz
  8574  006E  0AF9               	incf	??_atoi+1,f
  8575  006F  0878               	movf	??_atoi,w
  8576  0070  00F6               	movwf	?_atoi
  8577  0071  0879               	movf	??_atoi+1,w
  8578  0072  00F7               	movwf	?_atoi+1
  8579  0073  0008               	return
  8580  0074                     l2440:	
  8581  0074  087C               	movf	atoi@a+1,w
  8582  0075  00F7               	movwf	?_atoi+1
  8583  0076  087B               	movf	atoi@a,w
  8584  0077  00F6               	movwf	?_atoi
  8585  0078  0008               	return
  8586  0079                     __end_of_atoi:	
  8587                           
  8588                           	psect	text26
  8589  0004                     __ptext26:	
  8590 ;; *************** function _isdigit *****************
  8591 ;; Defined at:
  8592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  c               1    wreg     unsigned char 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  c               1    1[COMMON] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;Total ram usage:        2 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; This function calls:
  8613 ;;		Nothing
  8614 ;; This function is called by:
  8615 ;;		_printf
  8616 ;;		_atoi
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function _isdigit
  8622  0004                     _isdigit:	
  8623                           
  8624                           ;incstack = 0
  8625                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8626                           ;isdigit@c stored from wreg
  8627  0004  00F1               	movwf	isdigit@c
  8628  0005  01F0               	clrf	_isdigit$815
  8629  0006  303A               	movlw	58
  8630  0007  0271               	subwf	isdigit@c,w
  8631  0008  1803               	skipnc
  8632  0009  2810               	goto	l1906
  8633  000A  3030               	movlw	48
  8634  000B  0271               	subwf	isdigit@c,w
  8635  000C  1C03               	skipc
  8636  000D  2810               	goto	l1906
  8637  000E  01F0               	clrf	_isdigit$815
  8638  000F  0AF0               	incf	_isdigit$815,f
  8639  0010                     l1906:	
  8640  0010  0C70               	rrf	_isdigit$815,w
  8641  0011  0008               	return
  8642  0012                     __end_of_isdigit:	
  8643                           
  8644                           	psect	text27
  8645  0B9F                     __ptext27:	
  8646 ;; *************** function ___wmul *****************
  8647 ;; Defined at:
  8648 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  multiplier      2    0[COMMON] unsigned int 
  8651 ;;  multiplicand    2    2[COMMON] unsigned int 
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  product         2    4[COMMON] unsigned int 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  2    0[COMMON] unsigned int 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;Total ram usage:        6 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; This function calls:
  8670 ;;		Nothing
  8671 ;; This function is called by:
  8672 ;;		_printf
  8673 ;;		_atoi
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           
  8678                           ;psect for function ___wmul
  8679  0B9F                     ___wmul:	
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8683  0B9F  01F4               	clrf	___wmul@product
  8684  0BA0  01F5               	clrf	___wmul@product+1
  8685  0BA1                     l1912:	
  8686  0BA1  1C70               	btfss	___wmul@multiplier,0
  8687  0BA2  2BA7               	goto	l560
  8688  0BA3  0872               	movf	___wmul@multiplicand,w
  8689  0BA4  07F4               	addwf	___wmul@product,f
  8690  0BA5  0873               	movf	___wmul@multiplicand+1,w
  8691  0BA6  3DF5               	addwfc	___wmul@product+1,f
  8692  0BA7                     l560:	
  8693  0BA7  3001               	movlw	1
  8694  0BA8                     u1335:	
  8695  0BA8  35F2               	lslf	___wmul@multiplicand,f
  8696  0BA9  0DF3               	rlf	___wmul@multiplicand+1,f
  8697  0BAA  0B89               	decfsz	9,f
  8698  0BAB  2BA8               	goto	u1335
  8699  0BAC  3001               	movlw	1
  8700  0BAD                     u1345:	
  8701  0BAD  36F1               	lsrf	___wmul@multiplier+1,f
  8702  0BAE  0CF0               	rrf	___wmul@multiplier,f
  8703  0BAF  0B89               	decfsz	9,f
  8704  0BB0  2BAD               	goto	u1345
  8705  0BB1  0870               	movf	___wmul@multiplier,w
  8706  0BB2  0471               	iorwf	___wmul@multiplier+1,w
  8707  0BB3  1D03               	btfss	3,2
  8708  0BB4  2BA1               	goto	l1912
  8709  0BB5  0875               	movf	___wmul@product+1,w
  8710  0BB6  00F1               	movwf	?___wmul+1
  8711  0BB7  0874               	movf	___wmul@product,w
  8712  0BB8  00F0               	movwf	?___wmul
  8713  0BB9  0008               	return
  8714  0BBA                     __end_of___wmul:	
  8715                           
  8716                           	psect	text28
  8717  0B3C                     __ptext28:	
  8718 ;; *************** function _SYSTEM_Initialize *****************
  8719 ;; Defined at:
  8720 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		wreg, status,2, status,0, pclath, cstack
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    1
  8741 ;; This function calls:
  8742 ;;		_EUSART_Initialize
  8743 ;;		_OSCILLATOR_Initialize
  8744 ;;		_PIN_MANAGER_Initialize
  8745 ;;		_SPI_Initialize
  8746 ;;		_WDT_Initialize
  8747 ;; This function is called by:
  8748 ;;		_main
  8749 ;; This function uses a non-reentrant model
  8750 ;;
  8751                           
  8752                           
  8753                           ;psect for function _SYSTEM_Initialize
  8754  0B3C                     _SYSTEM_Initialize:	
  8755                           
  8756                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8757                           
  8758                           ;incstack = 0
  8759                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8760  0B3C  318B  236F  318B   	fcall	_PIN_MANAGER_Initialize
  8761                           
  8762                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8763  0B3F  318A  22FD  318B   	fcall	_OSCILLATOR_Initialize
  8764                           
  8765                           ;mcc.c: 75: WDT_Initialize();
  8766  0B42  318A  22EE  318B   	fcall	_WDT_Initialize
  8767                           
  8768                           ;mcc.c: 76: SPI_Initialize();
  8769  0B45  318B  2304  318B   	fcall	_SPI_Initialize
  8770                           
  8771                           ;mcc.c: 77: EUSART_Initialize();
  8772  0B48  318B  2326         	fcall	_EUSART_Initialize
  8773  0B4A  0008               	return
  8774  0B4B                     __end_of_SYSTEM_Initialize:	
  8775                           
  8776                           	psect	text29
  8777  0AEE                     __ptext29:	
  8778 ;; *************** function _WDT_Initialize *****************
  8779 ;; Defined at:
  8780 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;		None
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		wreg
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;Total ram usage:        0 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; This function calls:
  8801 ;;		Nothing
  8802 ;; This function is called by:
  8803 ;;		_SYSTEM_Initialize
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _WDT_Initialize
  8809  0AEE                     _WDT_Initialize:	
  8810                           
  8811                           ;mcc.c: 93: WDTCON = 0x16;
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _WDT_Initialize: [wreg]
  8815  0AEE  3016               	movlw	22
  8816  0AEF  0021               	movlb	1	; select bank1
  8817  0AF0  0097               	movwf	23	;volatile
  8818  0AF1  0008               	return
  8819  0AF2                     __end_of_WDT_Initialize:	
  8820                           
  8821                           	psect	text30
  8822  0B04                     __ptext30:	
  8823 ;; *************** function _SPI_Initialize *****************
  8824 ;; Defined at:
  8825 ;;		line 63 in file "mcc_generated_files/spi.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;Total ram usage:        0 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; This function calls:
  8846 ;;		Nothing
  8847 ;; This function is called by:
  8848 ;;		_SYSTEM_Initialize
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _SPI_Initialize
  8854  0B04                     _SPI_Initialize:	
  8855                           
  8856                           ;spi.c: 68: SSP1STAT = 0x40;
  8857                           
  8858                           ;incstack = 0
  8859                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8860  0B04  3040               	movlw	64
  8861  0B05  0024               	movlb	4	; select bank4
  8862  0B06  0094               	movwf	20	;volatile
  8863                           
  8864                           ;spi.c: 71: SSP1CON1 = 0x20;
  8865  0B07  3020               	movlw	32
  8866  0B08  0095               	movwf	21	;volatile
  8867                           
  8868                           ;spi.c: 74: SSP1ADD = 0x00;
  8869  0B09  0192               	clrf	18	;volatile
  8870  0B0A  0008               	return
  8871  0B0B                     __end_of_SPI_Initialize:	
  8872                           
  8873                           	psect	text31
  8874  0B6F                     __ptext31:	
  8875 ;; *************** function _PIN_MANAGER_Initialize *****************
  8876 ;; Defined at:
  8877 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, status,2
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_SYSTEM_Initialize
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _PIN_MANAGER_Initialize
  8906  0B6F                     _PIN_MANAGER_Initialize:	
  8907                           
  8908                           ;pin_manager.c: 57: LATA = 0x10;
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8912  0B6F  3010               	movlw	16
  8913  0B70  0022               	movlb	2	; select bank2
  8914  0B71  008C               	movwf	12	;volatile
  8915                           
  8916                           ;pin_manager.c: 58: LATC = 0x00;
  8917  0B72  018E               	clrf	14	;volatile
  8918                           
  8919                           ;pin_manager.c: 63: TRISA = 0x2F;
  8920  0B73  302F               	movlw	47
  8921  0B74  0021               	movlb	1	; select bank1
  8922  0B75  008C               	movwf	12	;volatile
  8923                           
  8924                           ;pin_manager.c: 64: TRISC = 0x32;
  8925  0B76  3032               	movlw	50
  8926  0B77  008E               	movwf	14	;volatile
  8927                           
  8928                           ;pin_manager.c: 69: ANSELC = 0x00;
  8929  0B78  0023               	movlb	3	; select bank3
  8930  0B79  018E               	clrf	14	;volatile
  8931                           
  8932                           ;pin_manager.c: 70: ANSELA = 0x07;
  8933  0B7A  3007               	movlw	7
  8934  0B7B  008C               	movwf	12	;volatile
  8935                           
  8936                           ;pin_manager.c: 75: WPUA = 0x00;
  8937  0B7C  0024               	movlb	4	; select bank4
  8938  0B7D  018C               	clrf	12	;volatile
  8939                           
  8940                           ;pin_manager.c: 76: WPUC = 0x30;
  8941  0B7E  3030               	movlw	48
  8942  0B7F  008E               	movwf	14	;volatile
  8943                           
  8944                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8945  0B80  0021               	movlb	1	; select bank1
  8946  0B81  1395               	bcf	21,7	;volatile
  8947                           
  8948                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8949  0B82  0022               	movlb	2	; select bank2
  8950  0B83  019E               	clrf	30	;volatile
  8951                           
  8952                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8953  0B84  019D               	clrf	29	;volatile
  8954  0B85  0008               	return
  8955  0B86                     __end_of_PIN_MANAGER_Initialize:	
  8956                           
  8957                           	psect	text32
  8958  0AFD                     __ptext32:	
  8959 ;; *************** function _OSCILLATOR_Initialize *****************
  8960 ;; Defined at:
  8961 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;		None
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		wreg, status,2
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;Total ram usage:        0 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_SYSTEM_Initialize
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           
  8989                           ;psect for function _OSCILLATOR_Initialize
  8990  0AFD                     _OSCILLATOR_Initialize:	
  8991                           
  8992                           ;mcc.c: 83: OSCCON = 0x60;
  8993                           
  8994                           ;incstack = 0
  8995                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8996  0AFD  3060               	movlw	96
  8997  0AFE  0021               	movlb	1	; select bank1
  8998  0AFF  0099               	movwf	25	;volatile
  8999                           
  9000                           ;mcc.c: 85: OSCTUNE = 0x00;
  9001  0B00  0198               	clrf	24	;volatile
  9002                           
  9003                           ;mcc.c: 87: BORCON = 0x00;
  9004  0B01  0022               	movlb	2	; select bank2
  9005  0B02  0196               	clrf	22	;volatile
  9006  0B03  0008               	return
  9007  0B04                     __end_of_OSCILLATOR_Initialize:	
  9008                           
  9009                           	psect	text33
  9010  0B26                     __ptext33:	
  9011 ;; *************** function _EUSART_Initialize *****************
  9012 ;; Defined at:
  9013 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;		None
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;		None
  9018 ;; Return value:  Size  Location     Type
  9019 ;;                  1    wreg      void 
  9020 ;; Registers used:
  9021 ;;		wreg, status,2
  9022 ;; Tracked objects:
  9023 ;;		On entry : 0/0
  9024 ;;		On exit  : 0/0
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;Total ram usage:        0 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_SYSTEM_Initialize
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function _EUSART_Initialize
  9042  0B26                     _EUSART_Initialize:	
  9043                           
  9044                           ;eusart.c: 58: BAUDCON = 0x08;
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9048  0B26  3008               	movlw	8
  9049  0B27  0023               	movlb	3	; select bank3
  9050  0B28  009F               	movwf	31	;volatile
  9051                           
  9052                           ;eusart.c: 61: RCSTA = 0x90;
  9053  0B29  3090               	movlw	144
  9054  0B2A  009D               	movwf	29	;volatile
  9055                           
  9056                           ;eusart.c: 64: TXSTA = 0x24;
  9057  0B2B  3024               	movlw	36
  9058  0B2C  009E               	movwf	30	;volatile
  9059                           
  9060                           ;eusart.c: 67: SPBRGL = 0x33;
  9061  0B2D  3033               	movlw	51
  9062  0B2E  009B               	movwf	27	;volatile
  9063                           
  9064                           ;eusart.c: 70: SPBRGH = 0x00;
  9065  0B2F  019C               	clrf	28	;volatile
  9066  0B30  0008               	return
  9067  0B31                     __end_of_EUSART_Initialize:	
  9068                           
  9069                           	psect	text34
  9070  0B1C                     __ptext34:	
  9071 ;; *************** function _EUSART_Read *****************
  9072 ;; Defined at:
  9073 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;		None
  9076 ;; Auto vars:     Size  Location     Type
  9077 ;;		None
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  1    wreg      unsigned char 
  9080 ;; Registers used:
  9081 ;;		wreg
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;Total ram usage:        0 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; This function calls:
  9094 ;;		Nothing
  9095 ;; This function is called by:
  9096 ;;		_main
  9097 ;;		_getch
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           
  9102                           ;psect for function _EUSART_Read
  9103  0B1C                     _EUSART_Read:	
  9104  0B1C                     l51:	
  9105                           ;eusart.c: 78: {
  9106                           
  9107                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9108                           
  9109                           ;incstack = 0
  9110                           ; Regs used in _EUSART_Read: [wreg]
  9111                           
  9112  0B1C  0020               	movlb	0	; select bank0
  9113  0B1D  1E91               	btfss	17,5	;volatile
  9114  0B1E  2B1C               	goto	l51
  9115                           
  9116                           ;eusart.c: 79: }
  9117                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9118  0B1F  0023               	movlb	3	; select bank3
  9119  0B20  1C9D               	btfss	29,1	;volatile
  9120  0B21  2B24               	goto	l2318
  9121                           
  9122                           ;eusart.c: 83: {
  9123                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9124  0B22  121D               	bcf	29,4	;volatile
  9125                           
  9126                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9127  0B23  161D               	bsf	29,4	;volatile
  9128  0B24                     l2318:	
  9129                           
  9130                           ;eusart.c: 88: }
  9131                           ;eusart.c: 90: return RCREG;
  9132  0B24  0819               	movf	25,w	;volatile
  9133  0B25  0008               	return
  9134  0B26                     __end_of_EUSART_Read:	
  9135  007E                     btemp	set	126	;btemp
  9136  007E                     wtemp0	set	126


Data Sizes:
    Strings     1172
    Constant    35
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      79
    BANK1            80     19      55
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf$624	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_63(CODE[17]), STR_62(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_61(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[21]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_60(CODE[5]), STR_59(CODE[15]), STR_58(CODE[15]), STR_57(CODE[2]), 
		 -> STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[2]), STR_53(CODE[16]), 
		 -> STR_52(CODE[16]), STR_51(CODE[16]), STR_50(CODE[2]), STR_49(CODE[12]), 
		 -> STR_48(CODE[12]), STR_47(CODE[12]), STR_46(CODE[2]), STR_45(CODE[12]), 
		 -> STR_44(CODE[12]), STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[44]), 
		 -> STR_40(CODE[44]), STR_39(CODE[5]), STR_38(CODE[13]), STR_37(CODE[13]), 
		 -> STR_36(CODE[18]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[20]), 
		 -> STR_32(CODE[14]), STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[15]), 
		 -> STR_28(CODE[16]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[23]), 
		 -> STR_24(CODE[21]), STR_23(CODE[15]), STR_22(CODE[22]), STR_21(CODE[44]), 
		 -> STR_20(CODE[57]), STR_19(CODE[26]), STR_18(CODE[21]), STR_17(CODE[29]), 
		 -> STR_16(CODE[38]), STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), 
		 -> STR_12(CODE[58]), STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), 
		 -> STR_7(CODE[36]), STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  122571
                                             72 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   26800
                                             68 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   15635
                                             42 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6570
                                             35 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   20354
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9402
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   11333
                                             39 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8623
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    6757
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11097
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11075
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8691
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    6263
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      37       7       68.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      94      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      94      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 17:19:54 2018

                          _SPI_Initialize 0B04                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0043                                        l51 0B1C  
                                      l58 0B0C                   ?_SPI_Exchange8bitBuffer 0071  
                                      _nm 14B3                       ___wmul@multiplicand 0072  
                   __size_of_SPI_exchange 0015                               __CFG_LVP$ON 0000  
                                     l113 0B18                                       l204 03C3  
                                     l205 03C5                                       l420 0615  
                                     l332 0293                                       l421 0616  
                                     l407 05CB                                       l360 0D5C  
                                     l352 0D43                                       l329 0283  
                                     l353 0D3E                                       l442 06CF  
                                     l451 0728                                       l419 06A9  
                                     l355 0D54                                       l356 0D4F  
                                     l349 0D32                                       l358 0D58  
                                     l447 06F1                                       l560 0BA7  
                                     l476 07EF                  __end_of_can_status_check 0D69  
                            __CFG_CPD$OFF 0000                                       _abc 14AD  
                                     _buf 00B4                                       _sid 00B2  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                     can_logging_mode@debug 0072  
                            ?_EUSART_Read 0070                                      l2000 0D11  
                                    l2010 05C6                                      l2110 071C  
                                    l2030 0618                                      l2022 05E6  
                                    l2120 0747                                      l2016 05D0  
                                    l2042 062D                                      l2018 05D9  
                                    l2132 0760                                      l2108 0713  
                                    l2060 0671                                      l2052 064A  
                                    l2044 063B                                      l2134 0764  
                                    l2142 0779                                      l2126 0751  
                                    l2118 0744                                      l2054 0659  
                                    l2038 062B                                      l2070 0685  
                                    l2152 07C6                                      l2160 07D9  
                                    l2144 077F                                      l2064 067C  
                                    l2048 0648                                      l2146 07A4  
                                    l2162 07DD                                      l2138 0771  
                                    l2082 06C3                                      l2058 0666  
                                    l2242 0D91                                      l2170 0DD6  
                                    l2412 001A                                      l2164 05AA  
                                    l2180 0DEA                                      l2318 0B24  
                                    l2430 003C                                      l2414 0013  
                                    l2502 0EE7                                      l2182 0E08  
                                    l2406 0D67                                      l2440 0074  
                                    l2432 0040                                      l2424 0035  
                                    l2416 001F                                      l2184 0E0F  
                                    l2434 0065                                      l2514 0F1E  
                                    l2620 02C4                                      l2508 0F0F  
                                    l2534 0087                                      l2622 02F4  
                                    l1912 0BA1                                      l2552 00E5  
                                    l2720 0432                                      l2704 0405  
                                    l1906 0010                                      l2546 00E0  
                                    l2650 0375                                      l2618 02EE  
                                    l2490 0EBB                                      l2298 0FE8  
                                    l2730 0444                                      l2714 0424  
                                    l2564 013E                                      l2708 041B  
                                    l1942 0CB7                                      l1934 0C99  
                                    l2638 033C                                      l2590 028F  
                                    l2398 0D62                                      l2734 044D  
                                    l2726 043E                                      l1936 0CA5  
                                    l1960 0C16                                      l2584 027D  
                                    l2760 0480                                      l2744 045F  
                                    l1946 0CC0                                      l2754 046E  
                                    l2746 0461                                      l2738 0454  
                                    l2682 03B5                                      l1980 0CCE  
                                    l1964 0C22                                      l2596 029F  
                                    l2780 04D6                                      l2772 04BE  
                                    l1990 0CF8                                      l1958 0C0A  
                                    l2598 02A1                                      l2774 04C2  
                                    l2790 0582                                      l2694 03E4  
                                    l1984 0CDC                                      l1968 0C2B  
                                    l2776 04C6                                      l2768 04A7  
                                    l2784 0553                                      l1994 0CFC  
                                    l1986 0CEF                                      l2778 04CA  
                                    l2786 0578                                      l1988 0CF3  
                                    l2788 0581                                      l1998 0D0D  
                                    STR_1 148C                                      STR_2 1499  
                                    STR_3 149F                                      STR_4 14A8  
                                    STR_5 1314                                      STR_6 14B0  
                                    STR_7 1212                                      STR_8 12DD  
                                    STR_9 10E5                                      u1405 0CB0  
                                    u2125 0ECD                                      _LATA 010C  
                                    u1335 0BA8                                      u1415 0CB8  
                                    u2215 00FF                                      _LATC 010E  
                                    u1345 0BAD                                      u1445 0C0D  
                                    u1605 0641                                      u1375 0C9C  
                                    u2344 037F                                      u1465 0C1C  
                                    u2185 00A1                                      u2345 037E  
                                    u1395 0CA6                                      u1475 0C23  
                                    u1735 0737                                      u1665 06EA  
                                    u1914 0C39                                      u1915 0C38  
                                    u2557 0E1F                                      u1925 0F6D  
                                    u1695 070C                                      u2567 0E3F  
                                    u1875 0BCB                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _atoi 0012  
                                    _main 03A2                                      _mode 006A  
                         can_baudrate@bpr 0049                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 0002  
                  __end_of_SPI_Initialize 0B0B                              _SPI_exchange 0B5A  
                           __CFG_MCLRE$ON 0000                          can_send@data_buf 004B  
              __end_of_can_dump_registers 0255            __end_of_SPI_Exchange8bitBuffer 0D13  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0007  
           __end_of_OSCILLATOR_Initialize 0B04                                     ?_atoi 0076  
                                   ?_main 0070                                     STR_10 1001  
                                   STR_11 10AF                                     STR_20 1076  
                                   STR_12 103C                                     STR_13 11C6  
                                   STR_21 1170                                     STR_30 1427  
                                   STR_22 129D                                     STR_14 119C  
                                   STR_31 1419                                     STR_23 13FC  
                                   STR_15 126D                                     STR_32 140B  
                                   STR_24 12B3                                     STR_16 11EC  
                                   STR_40 1144                                     STR_33 12F2  
                                   STR_25 1286                                     STR_17 1236  
                                   STR_41 1118                             __CFG_WDTE$OFF 0000  
                                   STR_50 14A8                                     STR_42 14A5  
                                   STR_34 134B                                     STR_26 133A  
                                   STR_18 12C8                                     STR_43 14A5  
                                   STR_51 139E                                     STR_35 136D  
                                   STR_27 135C                                     STR_19 1253  
                                   STR_60 14A5                                     STR_44 133F  
                                   STR_52 13BE                                     STR_28 137E  
                                   STR_36 1306                                     STR_45 1361  
                                   STR_61 1485                                     STR_37 1442  
                                   STR_29 13DE                                     STR_53 13CE  
                                   STR_54 14A8                                     STR_46 14A8  
                                   STR_38 1435                                     STR_62 1318  
                                   STR_39 14A5                                     STR_47 144F  
                                   STR_55 138E                                     STR_63 1329  
                                   STR_48 145B                                     STR_56 13AE  
                                   STR_57 14A8                                     STR_49 1467  
                                   STR_58 13ED                                     STR_59 13FC  
                    __size_of_can_set_sid 0024                           __end_of___lwdiv 0CC5  
                         __end_of___lwmod 0C30             can_status_check@bytes_written 0066  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                         SPI_exchange@buf 007D                           SPI_exchange@len 0078  
                         __end_of_dpowers 147D                            _WDT_Initialize 0AEE  
                         __end_of_max_idx 1001                           __end_of_isdigit 0012  
                         __end_of_receive 1000                                     atoi@a 007B  
                        can_baudrate@mask 004A                                     atoi@s 007D  
                                   _putch 0AF2                                     main@c 00D4  
                                   main@n 00CA              ?_abort_pending_transmissions 0070  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                             receive@rx_buf 0050  
                         ?_SPI_Initialize 0070       __size_of_can_dump_masks_and_filters 00CC  
                         __initialization 07F0                     __size_of_can_baudrate 0033  
                            __end_of_atoi 0079                              __end_of_main 05A5  
                           main@echo_back 00C9                            ??_EUSART_Write 0070  
                  can_status_check@status 0067                                    ??_atoi 0078  
                                  ??_main 0068                     can_set_mask@mask_sidh 0053  
                   can_set_mask@mask_sidl 0054                   can_logging_mode@verbose 0070  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 0AF2  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 0B1C  
                   __size_of_can_ope_mode 0057                     __size_of_can_set_mask 00A5  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                        __end_of_can_init 0EA6                              _can_baudrate 0C5E  
                        __end_of_can_send 03A2                          receive_handler@i 0049  
                          __CFG_PWRTE$OFF 0000                                    ___wmul 0B9F  
                           _output_format 006C                            __CFG_STVREN$ON 0000  
                               ??___lwdiv 0074                                 ??___lwmod 007C  
                                  _printf 05A5                              _can_ope_mode 0D69  
                            _can_set_mask 0EA6                                 ??_isdigit 0070  
                               ??_receive 004A                           ?_WDT_Initialize 0070  
               __size_of_can_logging_mode 000B                          __end_of_rxfnsidh 1499  
                        __end_of_txbnsidh 14AD                          __end_of_rxmnsidh 14B7  
                    __size_of_EUSART_Read 000A                         _SYSTEM_Initialize 0B3C  
               SPI_exchange@bytes_written 007C                   __end_of__initialization 07FD  
                  __size_of_read_register 0019                        ?_SYSTEM_Initialize 0070  
                      __size_of_can_abort 000F                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0070                            can_send@status 004A  
    __size_of_abort_pending_transmissions 0026                             __end_of_putch 0AF7  
                             receive@pbuf 005F        __end_of_can_dump_masks_and_filters 0145  
              _can_dump_masks_and_filters 0079                                __end_of_nm 14B5  
                       ?_can_status_check 0070                            _OPTION_REGbits 0095  
                      ??_can_status_check 0064                    can_abort@bytes_written 0048  
               __end_of_SYSTEM_Initialize 0B4B                                   ??_putch 0071  
                              __pbssBANK0 006A                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 0B13                          can_set_mask@mask 0048  
                              __pmaintext 03A2                                   ?___wmul 0070  
                                 _BAUDCON 019F                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0022  
                           _read_register 0B86                                 ?_can_init 0047  
                               ?_can_send 0043                        _can_dump_registers 0145  
                __size_of_receive_handler 005B                                   _OSCTUNE 0098  
                       __end_of_can_abort 0B5A                                   _SSP1ADD 0212  
                                 _SSP1BUF 0211                       ?_can_dump_registers 0070  
                      __size_of_txf_clear 002E                          ??_SPI_Initialize 0070  
                         __size_of___wmul 001B                      ??_can_dump_registers 0043  
                           ??_can_set_sid 0072                                   ___lwdiv 0C91  
                                 ___lwmod 0C04                            ?_read_register 0070  
                                 _handler 00B0                                   __ptext1 0D13  
                                 __ptext2 0C30                                   __ptext3 0F4B  
                                 __ptext4 0DC0                                   __ptext5 0EA6  
                                 __ptext6 0255                                   __ptext7 0B31  
                                 __ptext8 0E1B                                   __ptext9 0BBA  
                         __size_of_printf 024B                         __end_of_hexpowers 1485  
                                 _dpowers 1473                                ??_can_init 0049  
                   _OSCILLATOR_Initialize 0AFD                                   _max_idx 1000  
                              ??_can_send 0044                                   _isdigit 0004  
                                 _receive 0F4B                  ??_PIN_MANAGER_Initialize 0070  
                        _can_logging_mode 0B31                         ?_SPI_Exchange8bit 0070  
                                 main@cmd 00D5                    txf_clear@bytes_written 0023  
                                 main@buf 00CB                                   main@bpr 00C5  
              __size_of_SYSTEM_Initialize 000F                                   main@idx 00D6  
                                 main@sid 00C4                                   clrloop0 0AF8  
                    end_of_initialization 07FD                        ??_SPI_Exchange8bit 0070  
                    SPI_Exchange8bit@data 0070                            _operation_mode 006E  
                       _EUSART_Initialize 0B26                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0042  
                                 printf@f 0022                                _printf$624 0034  
                       __end_of_txf_clear 0C5E                       ??_EUSART_Initialize 0070  
                        ??_WDT_Initialize 0070                       __end_of_can_set_sid 0BDE  
                        __CFG_FOSC$INTOSC 0000              ??_can_dump_masks_and_filters 0043  
                   __size_of_EUSART_Write 0008                         ??_receive_handler 0046  
               __end_of_EUSART_Initialize 0B31                               printf@width 0040  
                ??_SPI_Exchange8bitBuffer 0073                                main@status 00C6  
                     receive_handler@pbuf 0044  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0BBA  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0B0B  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07F0  
                     start_initialization 07F0           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 14B0                          _can_set_mask$508 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0C04  
             _abort_pending_transmissions 0BDE                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
               can_ope_mode@bytes_written 0045             ??_abort_pending_transmissions 0020  
                           ?_SPI_exchange 0078                                  ??___wmul 0074  
                           txf_clear@mask 0022                               _can_set_sid 0BBA  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00C4  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008B                         __size_of_can_send 014D  
                              receive@dlc 0062             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 0B4B                __size_of_EUSART_Initialize 000B  
                     __end_of_EUSART_Read 0B26                           can_set_mask@cmd 0052  
                          ??_SPI_exchange 0079           __size_of_SPI_Exchange8bitBuffer 004E  
                        ___lwdiv@dividend 0072                    _PIN_MANAGER_Initialize 0B6F  
                         can_set_sid@sidh 0075                           can_set_sid@sidl 0076  
                __end_of_can_logging_mode 0B3C                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                                 _hexpowers 147D  
                        ___lwdiv@quotient 0075                            __size_of_putch 0005  
                              ?_can_abort 0070                             ?_can_baudrate 0070  
                          ___wmul@product 0074                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 0AF7  
                               _save_rxfn 00A0                                 _save_rxmn 00AC  
                                _PIR1bits 0011                 __size_of_SPI_Exchange8bit 0009  
                                _SSP1CON1 0215                                  _SSP1STAT 0214  
             __size_of_can_dump_registers 0110                             ?_can_ope_mode 0070  
                       ___wmul@multiplier 0070                             ?_can_set_mask 0047  
                  _SPI_Exchange8bitBuffer 0CC5                           _receive_handler 0DC0  
                              printf@flag 003F                                printf@prec 0037  
                               _txf_clear 0C30                        receive_handler@dlc 0045  
                      receive_handler@sid 0043                               _EUSART_Read 0B1C  
                          ??_can_baudrate 0047                               can_send@dlc 0043  
                             can_send@len 0048                          _can_status_check 0D13  
                 __size_of_SPI_Initialize 0007                   ??_OSCILLATOR_Initialize 0070  
                          ??_can_ope_mode 0043                          __size_of___lwdiv 0034  
                        __size_of___lwmod 002C                            ??_can_set_mask 004A  
            SPI_Exchange8bitBuffer@dataIn 0076                                 receive@id 0060  
                             _isdigit$815 0070                      can_ope_mode@ope_mode 0046  
            SPI_Exchange8bitBuffer@bufLen 0071                                  _can_init 0E1B  
                                _can_send 0255                                txf_clear@n 0024  
                              ?_txf_clear 0070                      __end_of_SPI_exchange 0B6F  
                        __size_of_isdigit 000E                          __size_of_receive 00B5  
                         ___lwdiv@divisor 0070                           ___lwdiv@counter 0077  
                                __ptext10 0145                                  __ptext11 0B86  
                                __ptext20 0C91                                  __ptext12 0079  
                                __ptext21 0BDE                                  __ptext13 0C5E  
                                __ptext30 0B04                                  __ptext22 0B5A  
                                __ptext14 0B4B                                  __ptext31 0B6F  
                                __ptext23 0CC5                                  __ptext15 0D69  
                                __ptext32 0AFD                                  __ptext24 0B13  
                                __ptext16 05A5                                  __ptext33 0B26  
                                __ptext25 0012                                  __ptext17 0AF2  
                                __ptext34 0B1C                                  __ptext26 0004  
                                __ptext18 0B0B                                  __ptext27 0B9F  
                                __ptext19 0C04                                  __ptext28 0B3C  
                                __ptext29 0AEE                              _SSP1CON1bits 0215  
                             ??_can_abort 0047                             __size_of_atoi 0067  
                           __size_of_main 0203                                  atoi@sign 007A  
                 __end_of_receive_handler 0E1B                              ?_can_set_sid 0070  
                               printf@idx 0036                                 printf@len 003A  
                               printf@val 003D                              _SSP1STATbits 0214  
                                main@mask 00C7                                  _rxfnsidh 1493  
                   __end_of_read_register 0B9F                                  _txbnsidh 14AA  
                                _rxmnsidh 14B5                            __pstringtext10 1076  
                          __pstringtext11 10AF                            __pstringtext20 1236  
                          __pstringtext12 10E5                            __pstringtext21 1253  
                          __pstringtext13 1118                            __pstringtext30 1318  
                          __pstringtext22 126D                            __pstringtext14 1144  
                          __pstringtext31 1329                            __pstringtext23 1286  
                          __pstringtext15 1170                            __pstringtext40 13BE  
                          __pstringtext32 133A                            __pstringtext24 129D  
                          __pstringtext16 119C                            __pstringtext41 13CE  
                          __pstringtext33 134B                            __pstringtext25 12B3  
                          __pstringtext17 11C6                            __pstringtext50 144F  
                          __pstringtext42 13DE                            __pstringtext34 135C  
                          __pstringtext26 12C8                            __pstringtext18 11EC  
                          __pstringtext51 145B                            __pstringtext43 13ED  
                          __pstringtext35 136D                            __pstringtext27 12DD  
                          __pstringtext19 1212                            __pstringtext52 1467  
                          __pstringtext44 13FC                            __pstringtext36 137E  
                          __pstringtext28 12F2                            __pstringtext53 1485  
                          __pstringtext45 140B                            __pstringtext37 138E  
                          __pstringtext29 1306                            __pstringtext54 148C  
                          __pstringtext46 1419                            __pstringtext38 139E  
                          __pstringtext55 1499                            __pstringtext47 1427  
                          __pstringtext39 13AE                            __pstringtext56 149F  
                          __pstringtext48 1435                            __pstringtext57 14A5  
                          __pstringtext49 1442                            __pstringtext58 14B0  
                          __pstringtext59 0000                                  isdigit@c 0071  
                 __size_of_WDT_Initialize 0004                                  receive@n 0063  
                        ___lwmod@dividend 007A                   ?_PIN_MANAGER_Initialize 0070  
                       __CFG_CLKOUTEN$OFF 0000        SPI_Exchange8bitBuffer@bytesWritten 0077  
                       receive@bytes_read 004F                          _SPI_Exchange8bit 0B13  
                   can_send@bytes_written 0049                                  printf@ap 003C  
                                printf@cp 0038                         ?_can_logging_mode 0070  
                 can_init@receive_handler 0047                        ??_can_logging_mode 0071  
                    __end_of_can_baudrate 0C91                             __pstringtext1 1473  
                           __pstringtext2 147D                             __pstringtext3 1493  
                           __pstringtext4 14AA                             __pstringtext5 14AD  
                           __pstringtext6 14B3                             __pstringtext7 14B5  
                           __pstringtext8 1000                             __pstringtext9 103C  
                             ??_txf_clear 0020                           ___lwmod@divisor 0078  
                         ___lwmod@counter 007D                        EUSART_Write@txData 0070  
          __end_of_PIN_MANAGER_Initialize 0B86                      __end_of_can_ope_mode 0DC0  
                    __end_of_can_set_mask 0F4B  
