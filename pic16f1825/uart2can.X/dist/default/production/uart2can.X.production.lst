

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 14 04:53:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	cinit,global,class=CODE,merge=1,delta=2
    50                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    51                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    52                           	psect	clrtext,global,class=CODE,delta=2
    53                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    54                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    55                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    56                           	psect	text1,local,class=CODE,merge=1,delta=2
    57                           	psect	text2,local,class=CODE,merge=1,delta=2
    58                           	psect	text3,local,class=CODE,merge=1,delta=2
    59                           	psect	text4,local,class=CODE,merge=1,delta=2
    60                           	psect	text5,local,class=CODE,merge=1,delta=2
    61                           	psect	text6,local,class=CODE,merge=1,delta=2
    62                           	psect	text7,local,class=CODE,merge=1,delta=2
    63                           	psect	text8,local,class=CODE,merge=1,delta=2
    64                           	psect	text9,local,class=CODE,merge=1,delta=2
    65                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text12,local,class=CODE,merge=1,delta=2
    68                           	psect	text13,local,class=CODE,merge=1,delta=2
    69                           	psect	text14,local,class=CODE,merge=1,delta=2
    70                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text18,local,class=CODE,merge=1,delta=2
    74                           	psect	text19,local,class=CODE,merge=1,delta=2
    75                           	psect	text20,local,class=CODE,merge=1,delta=2
    76                           	psect	text21,local,class=CODE,merge=1,delta=2
    77                           	psect	text22,local,class=CODE,merge=1,delta=2
    78                           	psect	text23,local,class=CODE,merge=1,delta=2
    79                           	psect	text24,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     
    82                           ; Version 1.45
    83                           ; Generated 16/11/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16F1825 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000E                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  008C                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011D                     	;# 
   174  011E                     	;# 
   175  018C                     	;# 
   176  018E                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029D                     	;# 
   226  029E                     	;# 
   227  0311                     	;# 
   228  0311                     	;# 
   229  0312                     	;# 
   230  0313                     	;# 
   231  0318                     	;# 
   232  0318                     	;# 
   233  0319                     	;# 
   234  031A                     	;# 
   235  038C                     	;# 
   236  038E                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000E                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  008C                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011A                     	;# 
   318  011B                     	;# 
   319  011D                     	;# 
   320  011E                     	;# 
   321  018C                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0193                     	;# 
   329  0194                     	;# 
   330  0195                     	;# 
   331  0196                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020C                     	;# 
   341  020E                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0294                     	;# 
   362  0295                     	;# 
   363  0295                     	;# 
   364  0296                     	;# 
   365  0298                     	;# 
   366  0298                     	;# 
   367  0299                     	;# 
   368  029A                     	;# 
   369  029B                     	;# 
   370  029C                     	;# 
   371  029D                     	;# 
   372  029E                     	;# 
   373  0311                     	;# 
   374  0311                     	;# 
   375  0312                     	;# 
   376  0313                     	;# 
   377  0318                     	;# 
   378  0318                     	;# 
   379  0319                     	;# 
   380  031A                     	;# 
   381  038C                     	;# 
   382  038E                     	;# 
   383  0391                     	;# 
   384  0392                     	;# 
   385  0393                     	;# 
   386  039A                     	;# 
   387  039C                     	;# 
   388  039D                     	;# 
   389  039E                     	;# 
   390  039F                     	;# 
   391  0415                     	;# 
   392  0416                     	;# 
   393  0417                     	;# 
   394  041C                     	;# 
   395  041D                     	;# 
   396  041E                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000E                     	;# 
   422  0011                     	;# 
   423  0012                     	;# 
   424  0013                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  008C                     	;# 
   437  008E                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  011E                     	;# 
   467  018C                     	;# 
   468  018E                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019D                     	;# 
   484  019E                     	;# 
   485  019F                     	;# 
   486  020C                     	;# 
   487  020E                     	;# 
   488  0211                     	;# 
   489  0211                     	;# 
   490  0212                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0213                     	;# 
   494  0214                     	;# 
   495  0214                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0215                     	;# 
   499  0216                     	;# 
   500  0216                     	;# 
   501  0217                     	;# 
   502  0217                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0294                     	;# 
   508  0295                     	;# 
   509  0295                     	;# 
   510  0296                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  029B                     	;# 
   516  029C                     	;# 
   517  029D                     	;# 
   518  029E                     	;# 
   519  0311                     	;# 
   520  0311                     	;# 
   521  0312                     	;# 
   522  0313                     	;# 
   523  0318                     	;# 
   524  0318                     	;# 
   525  0319                     	;# 
   526  031A                     	;# 
   527  038C                     	;# 
   528  038E                     	;# 
   529  0391                     	;# 
   530  0392                     	;# 
   531  0393                     	;# 
   532  039A                     	;# 
   533  039C                     	;# 
   534  039D                     	;# 
   535  039E                     	;# 
   536  039F                     	;# 
   537  0415                     	;# 
   538  0416                     	;# 
   539  0417                     	;# 
   540  041C                     	;# 
   541  041D                     	;# 
   542  041E                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0013                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001E                     	;# 
   581  001F                     	;# 
   582  008C                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011A                     	;# 
   610  011B                     	;# 
   611  011D                     	;# 
   612  011E                     	;# 
   613  018C                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  020C                     	;# 
   633  020E                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0291                     	;# 
   650  0291                     	;# 
   651  0292                     	;# 
   652  0293                     	;# 
   653  0294                     	;# 
   654  0295                     	;# 
   655  0295                     	;# 
   656  0296                     	;# 
   657  0298                     	;# 
   658  0298                     	;# 
   659  0299                     	;# 
   660  029A                     	;# 
   661  029B                     	;# 
   662  029C                     	;# 
   663  029D                     	;# 
   664  029E                     	;# 
   665  0311                     	;# 
   666  0311                     	;# 
   667  0312                     	;# 
   668  0313                     	;# 
   669  0318                     	;# 
   670  0318                     	;# 
   671  0319                     	;# 
   672  031A                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  039A                     	;# 
   679  039C                     	;# 
   680  039D                     	;# 
   681  039E                     	;# 
   682  039F                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  041C                     	;# 
   687  041D                     	;# 
   688  041E                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000E                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  001E                     	;# 
   727  001F                     	;# 
   728  008C                     	;# 
   729  008E                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0093                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0098                     	;# 
   737  0099                     	;# 
   738  009A                     	;# 
   739  009B                     	;# 
   740  009B                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009E                     	;# 
   744  010C                     	;# 
   745  010E                     	;# 
   746  0111                     	;# 
   747  0112                     	;# 
   748  0113                     	;# 
   749  0114                     	;# 
   750  0115                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0118                     	;# 
   754  0119                     	;# 
   755  011A                     	;# 
   756  011B                     	;# 
   757  011D                     	;# 
   758  011E                     	;# 
   759  018C                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020C                     	;# 
   779  020E                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029D                     	;# 
   810  029E                     	;# 
   811  0311                     	;# 
   812  0311                     	;# 
   813  0312                     	;# 
   814  0313                     	;# 
   815  0318                     	;# 
   816  0318                     	;# 
   817  0319                     	;# 
   818  031A                     	;# 
   819  038C                     	;# 
   820  038E                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  0393                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846                           
   847                           	psect	idataBANK1
   848  0E4C                     __pidataBANK1:	
   849                           
   850                           ;initializer for can_status_check@F2968
   851  0E4C  34A0               	retlw	160
   852  0E4D  3400               	retlw	0
   853                           
   854                           ;initializer for can_send@F2958
   855  0E4E  34A0               	retlw	160
   856  0E4F  3400               	retlw	0
   857                           
   858                           	psect	stringtext1
   859  1322                     __pstringtext1:	
   860  1322                     _dpowers:	
   861  1322  3401               	retlw	1
   862  1323  3400               	retlw	0
   863  1324  340A               	retlw	10
   864  1325  3400               	retlw	0
   865  1326  3464               	retlw	100
   866  1327  3400               	retlw	0
   867  1328  34E8               	retlw	232
   868  1329  3403               	retlw	3
   869  132A  3410               	retlw	16
   870  132B  3427               	retlw	39
   871  132C                     __end_of_dpowers:	
   872                           
   873                           	psect	stringtext2
   874  132C                     __pstringtext2:	
   875  132C                     _hexpowers:	
   876  132C  3401               	retlw	1
   877  132D  3400               	retlw	0
   878  132E  3410               	retlw	16
   879  132F  3400               	retlw	0
   880  1330  3400               	retlw	0
   881  1331  3401               	retlw	1
   882  1332  3400               	retlw	0
   883  1333  3410               	retlw	16
   884  1334                     __end_of_hexpowers:	
   885                           
   886                           	psect	stringtext3
   887  133B                     __pstringtext3:	
   888  133B                     _rxfnsidh:	
   889  133B  3400               	retlw	0
   890  133C  3404               	retlw	4
   891  133D  3408               	retlw	8
   892  133E  3410               	retlw	16
   893  133F  3414               	retlw	20
   894  1340  3418               	retlw	24
   895  1341                     __end_of_rxfnsidh:	
   896                           
   897                           	psect	stringtext4
   898  1341                     __pstringtext4:	
   899  1341                     _txbnsidh:	
   900  1341  3431               	retlw	49
   901  1342  3441               	retlw	65
   902  1343  3451               	retlw	81
   903  1344                     __end_of_txbnsidh:	
   904                           
   905                           	psect	stringtext5
   906  1344                     __pstringtext5:	
   907  1344                     _abc:	
   908  1344  3400               	retlw	0
   909  1345  3402               	retlw	2
   910  1346  3404               	retlw	4
   911  1347                     __end_of_abc:	
   912                           
   913                           	psect	stringtext6
   914  134A                     __pstringtext6:	
   915  134A                     _nm:	
   916  134A  3400               	retlw	0
   917  134B  3402               	retlw	2
   918  134C                     __end_of_nm:	
   919                           
   920                           	psect	stringtext7
   921  134C                     __pstringtext7:	
   922  134C                     _rxmnsidh:	
   923  134C  3420               	retlw	32
   924  134D  3424               	retlw	36
   925  134E                     __end_of_rxmnsidh:	
   926                           
   927                           	psect	stringtext8
   928  1000                     __pstringtext8:	
   929  1000                     _max_idx:	
   930  1000  3407               	retlw	7
   931  1001                     __end_of_max_idx:	
   932  0011                     _PIR1bits	set	17
   933  0095                     _OPTION_REGbits	set	149
   934  008E                     _TRISC	set	142
   935  008C                     _TRISA	set	140
   936  0097                     _WDTCON	set	151
   937  0098                     _OSCTUNE	set	152
   938  0099                     _OSCCON	set	153
   939  010E                     _LATCbits	set	270
   940  010C                     _LATAbits	set	268
   941  011D                     _APFCON0	set	285
   942  011E                     _APFCON1	set	286
   943  010E                     _LATC	set	270
   944  010C                     _LATA	set	268
   945  0116                     _BORCON	set	278
   946  018C                     _ANSELA	set	396
   947  018E                     _ANSELC	set	398
   948  019A                     _TXREG	set	410
   949  0199                     _RCREG	set	409
   950  019D                     _RCSTAbits	set	413
   951  019C                     _SPBRGH	set	412
   952  019B                     _SPBRGL	set	411
   953  019E                     _TXSTA	set	414
   954  019D                     _RCSTA	set	413
   955  019F                     _BAUDCON	set	415
   956  0214                     _SSP1STATbits	set	532
   957  0211                     _SSP1BUF	set	529
   958  0215                     _SSP1CON1bits	set	533
   959  0212                     _SSP1ADD	set	530
   960  0215                     _SSP1CON1	set	533
   961  0214                     _SSP1STAT	set	532
   962  020E                     _WPUC	set	526
   963  020C                     _WPUA	set	524
   964  1001                     STR_28:	
   965  1001  345B               	retlw	91	;'['
   966  1002  3453               	retlw	83	;'S'
   967  1003  3465               	retlw	101	;'e'
   968  1004  3474               	retlw	116	;'t'
   969  1005  3420               	retlw	32	;' '
   970  1006  346F               	retlw	111	;'o'
   971  1007  3475               	retlw	117	;'u'
   972  1008  3474               	retlw	116	;'t'
   973  1009  3470               	retlw	112	;'p'
   974  100A  3475               	retlw	117	;'u'
   975  100B  3474               	retlw	116	;'t'
   976  100C  3420               	retlw	32	;' '
   977  100D  346D               	retlw	109	;'m'
   978  100E  346F               	retlw	111	;'o'
   979  100F  3464               	retlw	100	;'d'
   980  1010  3465               	retlw	101	;'e'
   981  1011  345D               	retlw	93	;']'
   982  1012  3420               	retlw	32	;' '
   983  1013  347B               	retlw	123	;'{'
   984  1014  3464               	retlw	100	;'d'
   985  1015  3465               	retlw	101	;'e'
   986  1016  3462               	retlw	98	;'b'
   987  1017  3475               	retlw	117	;'u'
   988  1018  3467               	retlw	103	;'g'
   989  1019  343A               	retlw	58	;':'
   990  101A  3420               	retlw	32	;' '
   991  101B  3440               	retlw	64	;'@'
   992  101C  3476               	retlw	118	;'v'
   993  101D  3464               	retlw	100	;'d'
   994  101E  342C               	retlw	44	;','
   995  101F  3420               	retlw	32	;' '
   996  1020  3476               	retlw	118	;'v'
   997  1021  3465               	retlw	101	;'e'
   998  1022  3472               	retlw	114	;'r'
   999  1023  3462               	retlw	98	;'b'
  1000  1024  346F               	retlw	111	;'o'
  1001  1025  3473               	retlw	115	;'s'
  1002  1026  3465               	retlw	101	;'e'
  1003  1027  343A               	retlw	58	;':'
  1004  1028  3420               	retlw	32	;' '
  1005  1029  3440               	retlw	64	;'@'
  1006  102A  3476               	retlw	118	;'v'
  1007  102B  3476               	retlw	118	;'v'
  1008  102C  342C               	retlw	44	;','
  1009  102D  3420               	retlw	32	;' '
  1010  102E  346E               	retlw	110	;'n'
  1011  102F  346F               	retlw	111	;'o'
  1012  1030  3472               	retlw	114	;'r'
  1013  1031  346D               	retlw	109	;'m'
  1014  1032  3461               	retlw	97	;'a'
  1015  1033  346C               	retlw	108	;'l'
  1016  1034  343A               	retlw	58	;':'
  1017  1035  3420               	retlw	32	;' '
  1018  1036  3440               	retlw	64	;'@'
  1019  1037  3476               	retlw	118	;'v'
  1020  1038  346E               	retlw	110	;'n'
  1021  1039  347D               	retlw	125	;'}'
  1022  103A  340A               	retlw	10
  1023  103B  3400               	retlw	0
  1024                           
  1025                           	psect	stringtext9
  1026  103C                     __pstringtext9:	
  1027  103C                     STR_29:	
  1028  103C  345B               	retlw	91	;'['
  1029  103D  3445               	retlw	69	;'E'
  1030  103E  346E               	retlw	110	;'n'
  1031  103F  3461               	retlw	97	;'a'
  1032  1040  3462               	retlw	98	;'b'
  1033  1041  346C               	retlw	108	;'l'
  1034  1042  3465               	retlw	101	;'e'
  1035  1043  3420               	retlw	32	;' '
  1036  1044  346F               	retlw	111	;'o'
  1037  1045  3470               	retlw	112	;'p'
  1038  1046  3465               	retlw	101	;'e'
  1039  1047  3472               	retlw	114	;'r'
  1040  1048  3461               	retlw	97	;'a'
  1041  1049  3474               	retlw	116	;'t'
  1042  104A  3469               	retlw	105	;'i'
  1043  104B  346F               	retlw	111	;'o'
  1044  104C  346E               	retlw	110	;'n'
  1045  104D  3420               	retlw	32	;' '
  1046  104E  346D               	retlw	109	;'m'
  1047  104F  346F               	retlw	111	;'o'
  1048  1050  3464               	retlw	100	;'d'
  1049  1051  3465               	retlw	101	;'e'
  1050  1052  345D               	retlw	93	;']'
  1051  1053  3420               	retlw	32	;' '
  1052  1054  347B               	retlw	123	;'{'
  1053  1055  346C               	retlw	108	;'l'
  1054  1056  346F               	retlw	111	;'o'
  1055  1057  346F               	retlw	111	;'o'
  1056  1058  3470               	retlw	112	;'p'
  1057  1059  3462               	retlw	98	;'b'
  1058  105A  3461               	retlw	97	;'a'
  1059  105B  3463               	retlw	99	;'c'
  1060  105C  346B               	retlw	107	;'k'
  1061  105D  343A               	retlw	58	;':'
  1062  105E  3420               	retlw	32	;' '
  1063  105F  3440               	retlw	64	;'@'
  1064  1060  346F               	retlw	111	;'o'
  1065  1061  346C               	retlw	108	;'l'
  1066  1062  342C               	retlw	44	;','
  1067  1063  3420               	retlw	32	;' '
  1068  1064  346E               	retlw	110	;'n'
  1069  1065  346F               	retlw	111	;'o'
  1070  1066  3472               	retlw	114	;'r'
  1071  1067  346D               	retlw	109	;'m'
  1072  1068  3461               	retlw	97	;'a'
  1073  1069  346C               	retlw	108	;'l'
  1074  106A  343A               	retlw	58	;':'
  1075  106B  3420               	retlw	32	;' '
  1076  106C  3440               	retlw	64	;'@'
  1077  106D  346F               	retlw	111	;'o'
  1078  106E  346E               	retlw	110	;'n'
  1079  106F  347D               	retlw	125	;'}'
  1080  1070  340A               	retlw	10
  1081  1071  3400               	retlw	0
  1082                           
  1083                           	psect	stringtext10
  1084  1072                     __pstringtext10:	
  1085  1072                     STR_27:	
  1086  1072  345B               	retlw	91	;'['
  1087  1073  3453               	retlw	83	;'S'
  1088  1074  3465               	retlw	101	;'e'
  1089  1075  3474               	retlw	116	;'t'
  1090  1076  3420               	retlw	32	;' '
  1091  1077  3473               	retlw	115	;'s'
  1092  1078  3474               	retlw	116	;'t'
  1093  1079  3461               	retlw	97	;'a'
  1094  107A  346E               	retlw	110	;'n'
  1095  107B  3464               	retlw	100	;'d'
  1096  107C  3461               	retlw	97	;'a'
  1097  107D  3472               	retlw	114	;'r'
  1098  107E  3464               	retlw	100	;'d'
  1099  107F  3420               	retlw	32	;' '
  1100  1080  3469               	retlw	105	;'i'
  1101  1081  3464               	retlw	100	;'d'
  1102  1082  3465               	retlw	101	;'e'
  1103  1083  346E               	retlw	110	;'n'
  1104  1084  3474               	retlw	116	;'t'
  1105  1085  3469               	retlw	105	;'i'
  1106  1086  3466               	retlw	102	;'f'
  1107  1087  3469               	retlw	105	;'i'
  1108  1088  3465               	retlw	101	;'e'
  1109  1089  3472               	retlw	114	;'r'
  1110  108A  345D               	retlw	93	;']'
  1111  108B  3420               	retlw	32	;' '
  1112  108C  3440               	retlw	64	;'@'
  1113  108D  3469               	retlw	105	;'i'
  1114  108E  343C               	retlw	60	;'<'
  1115  108F  3453               	retlw	83	;'S'
  1116  1090  3474               	retlw	116	;'t'
  1117  1091  3461               	retlw	97	;'a'
  1118  1092  346E               	retlw	110	;'n'
  1119  1093  3464               	retlw	100	;'d'
  1120  1094  3461               	retlw	97	;'a'
  1121  1095  3472               	retlw	114	;'r'
  1122  1096  3464               	retlw	100	;'d'
  1123  1097  3420               	retlw	32	;' '
  1124  1098  3449               	retlw	73	;'I'
  1125  1099  3464               	retlw	100	;'d'
  1126  109A  3465               	retlw	101	;'e'
  1127  109B  346E               	retlw	110	;'n'
  1128  109C  3474               	retlw	116	;'t'
  1129  109D  3469               	retlw	105	;'i'
  1130  109E  3466               	retlw	102	;'f'
  1131  109F  3469               	retlw	105	;'i'
  1132  10A0  3465               	retlw	101	;'e'
  1133  10A1  3472               	retlw	114	;'r'
  1134  10A2  343E               	retlw	62	;'>'
  1135  10A3  340A               	retlw	10
  1136  10A4  3400               	retlw	0
  1137                           
  1138                           	psect	stringtext11
  1139  10A5                     __pstringtext11:	
  1140  10A5                     STR_33:	
  1141  10A5  345B               	retlw	91	;'['
  1142  10A6  3452               	retlw	82	;'R'
  1143  10A7  3465               	retlw	101	;'e'
  1144  10A8  3463               	retlw	99	;'c'
  1145  10A9  3465               	retlw	101	;'e'
  1146  10AA  3469               	retlw	105	;'i'
  1147  10AB  3476               	retlw	118	;'v'
  1148  10AC  3465               	retlw	101	;'e'
  1149  10AD  3420               	retlw	32	;' '
  1150  10AE  346D               	retlw	109	;'m'
  1151  10AF  3465               	retlw	101	;'e'
  1152  10B0  3473               	retlw	115	;'s'
  1153  10B1  3473               	retlw	115	;'s'
  1154  10B2  3461               	retlw	97	;'a'
  1155  10B3  3467               	retlw	103	;'g'
  1156  10B4  3465               	retlw	101	;'e'
  1157  10B5  345D               	retlw	93	;']'
  1158  10B6  3420               	retlw	32	;' '
  1159  10B7  343C               	retlw	60	;'<'
  1160  10B8  346D               	retlw	109	;'m'
  1161  10B9  3465               	retlw	101	;'e'
  1162  10BA  3473               	retlw	115	;'s'
  1163  10BB  3473               	retlw	115	;'s'
  1164  10BC  3461               	retlw	97	;'a'
  1165  10BD  3467               	retlw	103	;'g'
  1166  10BE  3465               	retlw	101	;'e'
  1167  10BF  343E               	retlw	62	;'>'
  1168  10C0  3420               	retlw	32	;' '
  1169  10C1  3477               	retlw	119	;'w'
  1170  10C2  3469               	retlw	105	;'i'
  1171  10C3  346C               	retlw	108	;'l'
  1172  10C4  346C               	retlw	108	;'l'
  1173  10C5  3420               	retlw	32	;' '
  1174  10C6  3462               	retlw	98	;'b'
  1175  10C7  3465               	retlw	101	;'e'
  1176  10C8  3420               	retlw	32	;' '
  1177  10C9  346F               	retlw	111	;'o'
  1178  10CA  3475               	retlw	117	;'u'
  1179  10CB  3474               	retlw	116	;'t'
  1180  10CC  3470               	retlw	112	;'p'
  1181  10CD  3475               	retlw	117	;'u'
  1182  10CE  3474               	retlw	116	;'t'
  1183  10CF  340A               	retlw	10
  1184  10D0  3400               	retlw	0
  1185                           
  1186                           	psect	stringtext12
  1187  10D1                     __pstringtext12:	
  1188  10D1                     STR_31:	
  1189  10D1  345B               	retlw	91	;'['
  1190  10D2  3453               	retlw	83	;'S'
  1191  10D3  3465               	retlw	101	;'e'
  1192  10D4  3474               	retlw	116	;'t'
  1193  10D5  3420               	retlw	32	;' '
  1194  10D6  3466               	retlw	102	;'f'
  1195  10D7  3469               	retlw	105	;'i'
  1196  10D8  346C               	retlw	108	;'l'
  1197  10D9  3474               	retlw	116	;'t'
  1198  10DA  3465               	retlw	101	;'e'
  1199  10DB  3472               	retlw	114	;'r'
  1200  10DC  345D               	retlw	93	;']'
  1201  10DD  3420               	retlw	32	;' '
  1202  10DE  3440               	retlw	64	;'@'
  1203  10DF  3466               	retlw	102	;'f'
  1204  10E0  343C               	retlw	60	;'<'
  1205  10E1  346E               	retlw	110	;'n'
  1206  10E2  343E               	retlw	62	;'>'
  1207  10E3  343C               	retlw	60	;'<'
  1208  10E4  3466               	retlw	102	;'f'
  1209  10E5  3469               	retlw	105	;'i'
  1210  10E6  346C               	retlw	108	;'l'
  1211  10E7  3474               	retlw	116	;'t'
  1212  10E8  3465               	retlw	101	;'e'
  1213  10E9  3472               	retlw	114	;'r'
  1214  10EA  3428               	retlw	40	;'('
  1215  10EB  3453               	retlw	83	;'S'
  1216  10EC  3449               	retlw	73	;'I'
  1217  10ED  3444               	retlw	68	;'D'
  1218  10EE  3431               	retlw	49	;'1'
  1219  10EF  3430               	retlw	48	;'0'
  1220  10F0  3420               	retlw	32	;' '
  1221  10F1  347E               	retlw	126	;'~'
  1222  10F2  3420               	retlw	32	;' '
  1223  10F3  3453               	retlw	83	;'S'
  1224  10F4  3449               	retlw	73	;'I'
  1225  10F5  3444               	retlw	68	;'D'
  1226  10F6  3430               	retlw	48	;'0'
  1227  10F7  3429               	retlw	41	;')'
  1228  10F8  343E               	retlw	62	;'>'
  1229  10F9  340A               	retlw	10
  1230  10FA  3400               	retlw	0
  1231                           
  1232                           	psect	stringtext13
  1233  10FB                     __pstringtext13:	
  1234  10FB                     STR_30:	
  1235  10FB  345B               	retlw	91	;'['
  1236  10FC  3453               	retlw	83	;'S'
  1237  10FD  3465               	retlw	101	;'e'
  1238  10FE  3474               	retlw	116	;'t'
  1239  10FF  3420               	retlw	32	;' '
  1240  1100  346D               	retlw	109	;'m'
  1241  1101  3461               	retlw	97	;'a'
  1242  1102  3473               	retlw	115	;'s'
  1243  1103  346B               	retlw	107	;'k'
  1244  1104  345D               	retlw	93	;']'
  1245  1105  3420               	retlw	32	;' '
  1246  1106  3440               	retlw	64	;'@'
  1247  1107  346D               	retlw	109	;'m'
  1248  1108  343C               	retlw	60	;'<'
  1249  1109  346E               	retlw	110	;'n'
  1250  110A  343E               	retlw	62	;'>'
  1251  110B  343C               	retlw	60	;'<'
  1252  110C  346D               	retlw	109	;'m'
  1253  110D  3461               	retlw	97	;'a'
  1254  110E  3473               	retlw	115	;'s'
  1255  110F  346B               	retlw	107	;'k'
  1256  1110  3428               	retlw	40	;'('
  1257  1111  3453               	retlw	83	;'S'
  1258  1112  3449               	retlw	73	;'I'
  1259  1113  3444               	retlw	68	;'D'
  1260  1114  3431               	retlw	49	;'1'
  1261  1115  3430               	retlw	48	;'0'
  1262  1116  3420               	retlw	32	;' '
  1263  1117  347E               	retlw	126	;'~'
  1264  1118  3420               	retlw	32	;' '
  1265  1119  3453               	retlw	83	;'S'
  1266  111A  3449               	retlw	73	;'I'
  1267  111B  3444               	retlw	68	;'D'
  1268  111C  3430               	retlw	48	;'0'
  1269  111D  3429               	retlw	41	;')'
  1270  111E  343E               	retlw	62	;'>'
  1271  111F  340A               	retlw	10
  1272  1120  3400               	retlw	0
  1273                           
  1274                           	psect	stringtext14
  1275  1121                     __pstringtext14:	
  1276  1121                     STR_32:	
  1277  1121  345B               	retlw	91	;'['
  1278  1122  3453               	retlw	83	;'S'
  1279  1123  3465               	retlw	101	;'e'
  1280  1124  346E               	retlw	110	;'n'
  1281  1125  3464               	retlw	100	;'d'
  1282  1126  3420               	retlw	32	;' '
  1283  1127  346D               	retlw	109	;'m'
  1284  1128  3465               	retlw	101	;'e'
  1285  1129  3473               	retlw	115	;'s'
  1286  112A  3473               	retlw	115	;'s'
  1287  112B  3461               	retlw	97	;'a'
  1288  112C  3467               	retlw	103	;'g'
  1289  112D  3465               	retlw	101	;'e'
  1290  112E  345D               	retlw	93	;']'
  1291  112F  3420               	retlw	32	;' '
  1292  1130  343C               	retlw	60	;'<'
  1293  1131  346D               	retlw	109	;'m'
  1294  1132  3465               	retlw	101	;'e'
  1295  1133  3473               	retlw	115	;'s'
  1296  1134  3473               	retlw	115	;'s'
  1297  1135  3461               	retlw	97	;'a'
  1298  1136  3467               	retlw	103	;'g'
  1299  1137  3465               	retlw	101	;'e'
  1300  1138  343E               	retlw	62	;'>'
  1301  1139  340A               	retlw	10
  1302  113A  3400               	retlw	0
  1303                           
  1304                           	psect	stringtext15
  1305  113B                     __pstringtext15:	
  1306  113B                     STR_38:	
  1307  113B  340A               	retlw	10
  1308  113C  3455               	retlw	85	;'U'
  1309  113D  346E               	retlw	110	;'n'
  1310  113E  3461               	retlw	97	;'a'
  1311  113F  3462               	retlw	98	;'b'
  1312  1140  346C               	retlw	108	;'l'
  1313  1141  3465               	retlw	101	;'e'
  1314  1142  3420               	retlw	32	;' '
  1315  1143  3474               	retlw	116	;'t'
  1316  1144  346F               	retlw	111	;'o'
  1317  1145  3420               	retlw	32	;' '
  1318  1146  3473               	retlw	115	;'s'
  1319  1147  3465               	retlw	101	;'e'
  1320  1148  346E               	retlw	110	;'n'
  1321  1149  3464               	retlw	100	;'d'
  1322  114A  3420               	retlw	32	;' '
  1323  114B  346D               	retlw	109	;'m'
  1324  114C  3465               	retlw	101	;'e'
  1325  114D  3473               	retlw	115	;'s'
  1326  114E  3473               	retlw	115	;'s'
  1327  114F  3461               	retlw	97	;'a'
  1328  1150  3467               	retlw	103	;'g'
  1329  1151  3465               	retlw	101	;'e'
  1330  1152  340A               	retlw	10
  1331  1153  3400               	retlw	0
  1332                           
  1333                           	psect	stringtext16
  1334  1154                     __pstringtext16:	
  1335  1154                     STR_7:	
  1336  1154  344D               	retlw	77	;'M'
  1337  1155  3465               	retlw	101	;'e'
  1338  1156  3473               	retlw	115	;'s'
  1339  1157  3473               	retlw	115	;'s'
  1340  1158  3461               	retlw	97	;'a'
  1341  1159  3467               	retlw	103	;'g'
  1342  115A  3465               	retlw	101	;'e'
  1343  115B  3420               	retlw	32	;' '
  1344  115C  3472               	retlw	114	;'r'
  1345  115D  3465               	retlw	101	;'e'
  1346  115E  3463               	retlw	99	;'c'
  1347  115F  3465               	retlw	101	;'e'
  1348  1160  3469               	retlw	105	;'i'
  1349  1161  3476               	retlw	118	;'v'
  1350  1162  3465               	retlw	101	;'e'
  1351  1163  3464               	retlw	100	;'d'
  1352  1164  343A               	retlw	58	;':'
  1353  1165  3420               	retlw	32	;' '
  1354  1166  3425               	retlw	37	;'%'
  1355  1167  3464               	retlw	100	;'d'
  1356  1168  342C               	retlw	44	;','
  1357  1169  3425               	retlw	37	;'%'
  1358  116A  3473               	retlw	115	;'s'
  1359  116B  340A               	retlw	10
  1360  116C  3400               	retlw	0
  1361                           
  1362                           	psect	stringtext17
  1363  116D                     __pstringtext17:	
  1364  116D                     STR_26:	
  1365  116D  342D               	retlw	45	;'-'
  1366  116E  342D               	retlw	45	;'-'
  1367  116F  342D               	retlw	45	;'-'
  1368  1170  3420               	retlw	32	;' '
  1369  1171  3455               	retlw	85	;'U'
  1370  1172  3441               	retlw	65	;'A'
  1371  1173  3452               	retlw	82	;'R'
  1372  1174  3454               	retlw	84	;'T'
  1373  1175  3432               	retlw	50	;'2'
  1374  1176  3443               	retlw	67	;'C'
  1375  1177  3441               	retlw	65	;'A'
  1376  1178  344E               	retlw	78	;'N'
  1377  1179  3420               	retlw	32	;' '
  1378  117A  3448               	retlw	72	;'H'
  1379  117B  3445               	retlw	69	;'E'
  1380  117C  344C               	retlw	76	;'L'
  1381  117D  3450               	retlw	80	;'P'
  1382  117E  3420               	retlw	32	;' '
  1383  117F  342D               	retlw	45	;'-'
  1384  1180  342D               	retlw	45	;'-'
  1385  1181  342D               	retlw	45	;'-'
  1386  1182  340A               	retlw	10
  1387  1183  3400               	retlw	0
  1388                           
  1389                           	psect	stringtext18
  1390  1184                     __pstringtext18:	
  1391  1184                     STR_21:	
  1392  1184  3466               	retlw	102	;'f'
  1393  1185  3469               	retlw	105	;'i'
  1394  1186  346C               	retlw	108	;'l'
  1395  1187  3474               	retlw	116	;'t'
  1396  1188  3465               	retlw	101	;'e'
  1397  1189  3472               	retlw	114	;'r'
  1398  118A  3428               	retlw	40	;'('
  1399  118B  3425               	retlw	37	;'%'
  1400  118C  3464               	retlw	100	;'d'
  1401  118D  3429               	retlw	41	;')'
  1402  118E  343A               	retlw	58	;':'
  1403  118F  3420               	retlw	32	;' '
  1404  1190  3425               	retlw	37	;'%'
  1405  1191  3430               	retlw	48	;'0'
  1406  1192  3432               	retlw	50	;'2'
  1407  1193  3478               	retlw	120	;'x'
  1408  1194  3420               	retlw	32	;' '
  1409  1195  3425               	retlw	37	;'%'
  1410  1196  3430               	retlw	48	;'0'
  1411  1197  3432               	retlw	50	;'2'
  1412  1198  3478               	retlw	120	;'x'
  1413  1199  340A               	retlw	10
  1414  119A  3400               	retlw	0
  1415                           
  1416                           	psect	stringtext19
  1417  119B                     __pstringtext19:	
  1418  119B                     STR_34:	
  1419  119B  345B               	retlw	91	;'['
  1420  119C  3453               	retlw	83	;'S'
  1421  119D  3468               	retlw	104	;'h'
  1422  119E  346F               	retlw	111	;'o'
  1423  119F  3477               	retlw	119	;'w'
  1424  11A0  3420               	retlw	32	;' '
  1425  11A1  3474               	retlw	116	;'t'
  1426  11A2  3468               	retlw	104	;'h'
  1427  11A3  3469               	retlw	105	;'i'
  1428  11A4  3473               	retlw	115	;'s'
  1429  11A5  3420               	retlw	32	;' '
  1430  11A6  3468               	retlw	104	;'h'
  1431  11A7  3465               	retlw	101	;'e'
  1432  11A8  346C               	retlw	108	;'l'
  1433  11A9  3470               	retlw	112	;'p'
  1434  11AA  345D               	retlw	93	;']'
  1435  11AB  343A               	retlw	58	;':'
  1436  11AC  3420               	retlw	32	;' '
  1437  11AD  3440               	retlw	64	;'@'
  1438  11AE  3468               	retlw	104	;'h'
  1439  11AF  340A               	retlw	10
  1440  11B0  3400               	retlw	0
  1441                           
  1442                           	psect	stringtext20
  1443  11B1                     __pstringtext20:	
  1444  11B1                     STR_8:	
  1445  11B1  344D               	retlw	77	;'M'
  1446  11B2  3465               	retlw	101	;'e'
  1447  11B3  3473               	retlw	115	;'s'
  1448  11B4  3473               	retlw	115	;'s'
  1449  11B5  3461               	retlw	97	;'a'
  1450  11B6  3467               	retlw	103	;'g'
  1451  11B7  3465               	retlw	101	;'e'
  1452  11B8  3420               	retlw	32	;' '
  1453  11B9  3472               	retlw	114	;'r'
  1454  11BA  3465               	retlw	101	;'e'
  1455  11BB  3463               	retlw	99	;'c'
  1456  11BC  3465               	retlw	101	;'e'
  1457  11BD  3469               	retlw	105	;'i'
  1458  11BE  3476               	retlw	118	;'v'
  1459  11BF  3465               	retlw	101	;'e'
  1460  11C0  3464               	retlw	100	;'d'
  1461  11C1  343A               	retlw	58	;':'
  1462  11C2  3420               	retlw	32	;' '
  1463  11C3  3425               	retlw	37	;'%'
  1464  11C4  3473               	retlw	115	;'s'
  1465  11C5  340A               	retlw	10
  1466  11C6  3400               	retlw	0
  1467                           
  1468                           	psect	stringtext21
  1469  11C7                     __pstringtext21:	
  1470  11C7                     STR_20:	
  1471  11C7  346D               	retlw	109	;'m'
  1472  11C8  3461               	retlw	97	;'a'
  1473  11C9  3473               	retlw	115	;'s'
  1474  11CA  346B               	retlw	107	;'k'
  1475  11CB  3428               	retlw	40	;'('
  1476  11CC  3425               	retlw	37	;'%'
  1477  11CD  3464               	retlw	100	;'d'
  1478  11CE  3429               	retlw	41	;')'
  1479  11CF  343A               	retlw	58	;':'
  1480  11D0  3420               	retlw	32	;' '
  1481  11D1  3425               	retlw	37	;'%'
  1482  11D2  3430               	retlw	48	;'0'
  1483  11D3  3432               	retlw	50	;'2'
  1484  11D4  3478               	retlw	120	;'x'
  1485  11D5  3420               	retlw	32	;' '
  1486  11D6  3425               	retlw	37	;'%'
  1487  11D7  3430               	retlw	48	;'0'
  1488  11D8  3432               	retlw	50	;'2'
  1489  11D9  3478               	retlw	120	;'x'
  1490  11DA  340A               	retlw	10
  1491  11DB  3400               	retlw	0
  1492                           
  1493                           	psect	stringtext22
  1494  11DC                     __pstringtext22:	
  1495  11DC                     STR_14:	
  1496  11DC  3443               	retlw	67	;'C'
  1497  11DD  346F               	retlw	111	;'o'
  1498  11DE  3470               	retlw	112	;'p'
  1499  11DF  3479               	retlw	121	;'y'
  1500  11E0  3469               	retlw	105	;'i'
  1501  11E1  346E               	retlw	110	;'n'
  1502  11E2  3467               	retlw	103	;'g'
  1503  11E3  3420               	retlw	32	;' '
  1504  11E4  3462               	retlw	98	;'b'
  1505  11E5  3475               	retlw	117	;'u'
  1506  11E6  3466               	retlw	102	;'f'
  1507  11E7  3466               	retlw	102	;'f'
  1508  11E8  3465               	retlw	101	;'e'
  1509  11E9  3472               	retlw	114	;'r'
  1510  11EA  343A               	retlw	58	;':'
  1511  11EB  3420               	retlw	32	;' '
  1512  11EC  3425               	retlw	37	;'%'
  1513  11ED  3463               	retlw	99	;'c'
  1514  11EE  340A               	retlw	10
  1515  11EF  3400               	retlw	0
  1516                           
  1517                           	psect	stringtext23
  1518  11F0                     __pstringtext23:	
  1519  11F0                     STR_1:	
  1520  11F0  3453               	retlw	83	;'S'
  1521  11F1  3449               	retlw	73	;'I'
  1522  11F2  3444               	retlw	68	;'D'
  1523  11F3  3420               	retlw	32	;' '
  1524  11F4  3473               	retlw	115	;'s'
  1525  11F5  3465               	retlw	101	;'e'
  1526  11F6  3474               	retlw	116	;'t'
  1527  11F7  343A               	retlw	58	;':'
  1528  11F8  3420               	retlw	32	;' '
  1529  11F9  3425               	retlw	37	;'%'
  1530  11FA  3430               	retlw	48	;'0'
  1531  11FB  3432               	retlw	50	;'2'
  1532  11FC  3478               	retlw	120	;'x'
  1533  11FD  3420               	retlw	32	;' '
  1534  11FE  3425               	retlw	37	;'%'
  1535  11FF  3430               	retlw	48	;'0'
  1536  1200  3432               	retlw	50	;'2'
  1537  1201  3478               	retlw	120	;'x'
  1538  1202  340A               	retlw	10
  1539  1203  3400               	retlw	0
  1540                           
  1541                           	psect	stringtext24
  1542  1204                     __pstringtext24:	
  1543  1204                     STR_37:	
  1544  1204  340A               	retlw	10
  1545  1205  344D               	retlw	77	;'M'
  1546  1206  3465               	retlw	101	;'e'
  1547  1207  3473               	retlw	115	;'s'
  1548  1208  3473               	retlw	115	;'s'
  1549  1209  3461               	retlw	97	;'a'
  1550  120A  3467               	retlw	103	;'g'
  1551  120B  3465               	retlw	101	;'e'
  1552  120C  3420               	retlw	32	;' '
  1553  120D  3473               	retlw	115	;'s'
  1554  120E  3465               	retlw	101	;'e'
  1555  120F  346E               	retlw	110	;'n'
  1556  1210  3474               	retlw	116	;'t'
  1557  1211  343A               	retlw	58	;':'
  1558  1212  3420               	retlw	32	;' '
  1559  1213  3425               	retlw	37	;'%'
  1560  1214  3473               	retlw	115	;'s'
  1561  1215  340A               	retlw	10
  1562  1216  3400               	retlw	0
  1563                           
  1564                           	psect	stringtext25
  1565  1217                     __pstringtext25:	
  1566  1217                     STR_40:	
  1567  1217  3430               	retlw	48	;'0'
  1568  1218  3431               	retlw	49	;'1'
  1569  1219  3432               	retlw	50	;'2'
  1570  121A  3433               	retlw	51	;'3'
  1571  121B  3434               	retlw	52	;'4'
  1572  121C  3435               	retlw	53	;'5'
  1573  121D  3436               	retlw	54	;'6'
  1574  121E  3437               	retlw	55	;'7'
  1575  121F  3438               	retlw	56	;'8'
  1576  1220  3439               	retlw	57	;'9'
  1577  1221  3461               	retlw	97	;'a'
  1578  1222  3462               	retlw	98	;'b'
  1579  1223  3463               	retlw	99	;'c'
  1580  1224  3464               	retlw	100	;'d'
  1581  1225  3465               	retlw	101	;'e'
  1582  1226  3466               	retlw	102	;'f'
  1583  1227  3400               	retlw	0
  1584                           
  1585                           	psect	stringtext26
  1586  1228                     __pstringtext26:	
  1587  1228                     STR_3:	
  1588  1228  3452               	retlw	82	;'R'
  1589  1229  3458               	retlw	88	;'X'
  1590  122A  3442               	retlw	66	;'B'
  1591  122B  3425               	retlw	37	;'%'
  1592  122C  3464               	retlw	100	;'d'
  1593  122D  3453               	retlw	83	;'S'
  1594  122E  3449               	retlw	73	;'I'
  1595  122F  3444               	retlw	68	;'D'
  1596  1230  3448               	retlw	72	;'H'
  1597  1231  343A               	retlw	58	;':'
  1598  1232  3420               	retlw	32	;' '
  1599  1233  3425               	retlw	37	;'%'
  1600  1234  3430               	retlw	48	;'0'
  1601  1235  3432               	retlw	50	;'2'
  1602  1236  3478               	retlw	120	;'x'
  1603  1237  340A               	retlw	10
  1604  1238  3400               	retlw	0
  1605                           
  1606                           	psect	stringtext27
  1607  1239                     __pstringtext27:	
  1608  1239                     STR_15:	
  1609  1239  3454               	retlw	84	;'T'
  1610  123A  3458               	retlw	88	;'X'
  1611  123B  3442               	retlw	66	;'B'
  1612  123C  3425               	retlw	37	;'%'
  1613  123D  3464               	retlw	100	;'d'
  1614  123E  3453               	retlw	83	;'S'
  1615  123F  3449               	retlw	73	;'I'
  1616  1240  3444               	retlw	68	;'D'
  1617  1241  3448               	retlw	72	;'H'
  1618  1242  343A               	retlw	58	;':'
  1619  1243  3420               	retlw	32	;' '
  1620  1244  3425               	retlw	37	;'%'
  1621  1245  3430               	retlw	48	;'0'
  1622  1246  3432               	retlw	50	;'2'
  1623  1247  3478               	retlw	120	;'x'
  1624  1248  340A               	retlw	10
  1625  1249  3400               	retlw	0
  1626                           
  1627                           	psect	stringtext28
  1628  124A                     __pstringtext28:	
  1629  124A                     STR_24:	
  1630  124A  3452               	retlw	82	;'R'
  1631  124B  3458               	retlw	88	;'X'
  1632  124C  3446               	retlw	70	;'F'
  1633  124D  3425               	retlw	37	;'%'
  1634  124E  3464               	retlw	100	;'d'
  1635  124F  3453               	retlw	83	;'S'
  1636  1250  3449               	retlw	73	;'I'
  1637  1251  3444               	retlw	68	;'D'
  1638  1252  3448               	retlw	72	;'H'
  1639  1253  343A               	retlw	58	;':'
  1640  1254  3420               	retlw	32	;' '
  1641  1255  3425               	retlw	37	;'%'
  1642  1256  3430               	retlw	48	;'0'
  1643  1257  3432               	retlw	50	;'2'
  1644  1258  3478               	retlw	120	;'x'
  1645  1259  340A               	retlw	10
  1646  125A  3400               	retlw	0
  1647                           
  1648                           	psect	stringtext29
  1649  125B                     __pstringtext29:	
  1650  125B                     STR_22:	
  1651  125B  3452               	retlw	82	;'R'
  1652  125C  3458               	retlw	88	;'X'
  1653  125D  344D               	retlw	77	;'M'
  1654  125E  3425               	retlw	37	;'%'
  1655  125F  3464               	retlw	100	;'d'
  1656  1260  3453               	retlw	83	;'S'
  1657  1261  3449               	retlw	73	;'I'
  1658  1262  3444               	retlw	68	;'D'
  1659  1263  3448               	retlw	72	;'H'
  1660  1264  343A               	retlw	58	;':'
  1661  1265  3420               	retlw	32	;' '
  1662  1266  3425               	retlw	37	;'%'
  1663  1267  3430               	retlw	48	;'0'
  1664  1268  3432               	retlw	50	;'2'
  1665  1269  3478               	retlw	120	;'x'
  1666  126A  340A               	retlw	10
  1667  126B  3400               	retlw	0
  1668                           
  1669                           	psect	stringtext30
  1670  126C                     __pstringtext30:	
  1671  126C                     STR_4:	
  1672  126C  3452               	retlw	82	;'R'
  1673  126D  3458               	retlw	88	;'X'
  1674  126E  3442               	retlw	66	;'B'
  1675  126F  3425               	retlw	37	;'%'
  1676  1270  3464               	retlw	100	;'d'
  1677  1271  3453               	retlw	83	;'S'
  1678  1272  3449               	retlw	73	;'I'
  1679  1273  3444               	retlw	68	;'D'
  1680  1274  344C               	retlw	76	;'L'
  1681  1275  343A               	retlw	58	;':'
  1682  1276  3420               	retlw	32	;' '
  1683  1277  3425               	retlw	37	;'%'
  1684  1278  3430               	retlw	48	;'0'
  1685  1279  3432               	retlw	50	;'2'
  1686  127A  3478               	retlw	120	;'x'
  1687  127B  340A               	retlw	10
  1688  127C  3400               	retlw	0
  1689                           
  1690                           	psect	stringtext31
  1691  127D                     __pstringtext31:	
  1692  127D                     STR_16:	
  1693  127D  3454               	retlw	84	;'T'
  1694  127E  3458               	retlw	88	;'X'
  1695  127F  3442               	retlw	66	;'B'
  1696  1280  3425               	retlw	37	;'%'
  1697  1281  3464               	retlw	100	;'d'
  1698  1282  3453               	retlw	83	;'S'
  1699  1283  3449               	retlw	73	;'I'
  1700  1284  3444               	retlw	68	;'D'
  1701  1285  344C               	retlw	76	;'L'
  1702  1286  343A               	retlw	58	;':'
  1703  1287  3420               	retlw	32	;' '
  1704  1288  3425               	retlw	37	;'%'
  1705  1289  3430               	retlw	48	;'0'
  1706  128A  3432               	retlw	50	;'2'
  1707  128B  3478               	retlw	120	;'x'
  1708  128C  340A               	retlw	10
  1709  128D  3400               	retlw	0
  1710                           
  1711                           	psect	stringtext32
  1712  128E                     __pstringtext32:	
  1713  128E                     STR_25:	
  1714  128E  3452               	retlw	82	;'R'
  1715  128F  3458               	retlw	88	;'X'
  1716  1290  3446               	retlw	70	;'F'
  1717  1291  3425               	retlw	37	;'%'
  1718  1292  3464               	retlw	100	;'d'
  1719  1293  3453               	retlw	83	;'S'
  1720  1294  3449               	retlw	73	;'I'
  1721  1295  3444               	retlw	68	;'D'
  1722  1296  344C               	retlw	76	;'L'
  1723  1297  343A               	retlw	58	;':'
  1724  1298  3420               	retlw	32	;' '
  1725  1299  3425               	retlw	37	;'%'
  1726  129A  3430               	retlw	48	;'0'
  1727  129B  3432               	retlw	50	;'2'
  1728  129C  3478               	retlw	120	;'x'
  1729  129D  340A               	retlw	10
  1730  129E  3400               	retlw	0
  1731                           
  1732                           	psect	stringtext33
  1733  129F                     __pstringtext33:	
  1734  129F                     STR_23:	
  1735  129F  3452               	retlw	82	;'R'
  1736  12A0  3458               	retlw	88	;'X'
  1737  12A1  344D               	retlw	77	;'M'
  1738  12A2  3425               	retlw	37	;'%'
  1739  12A3  3464               	retlw	100	;'d'
  1740  12A4  3453               	retlw	83	;'S'
  1741  12A5  3449               	retlw	73	;'I'
  1742  12A6  3444               	retlw	68	;'D'
  1743  12A7  344C               	retlw	76	;'L'
  1744  12A8  343A               	retlw	58	;':'
  1745  12A9  3420               	retlw	32	;' '
  1746  12AA  3425               	retlw	37	;'%'
  1747  12AB  3430               	retlw	48	;'0'
  1748  12AC  3432               	retlw	50	;'2'
  1749  12AD  3478               	retlw	120	;'x'
  1750  12AE  340A               	retlw	10
  1751  12AF  3400               	retlw	0
  1752                           
  1753                           	psect	stringtext34
  1754  12B0                     __pstringtext34:	
  1755  12B0                     STR_5:	
  1756  12B0  3452               	retlw	82	;'R'
  1757  12B1  3458               	retlw	88	;'X'
  1758  12B2  3442               	retlw	66	;'B'
  1759  12B3  3425               	retlw	37	;'%'
  1760  12B4  3464               	retlw	100	;'d'
  1761  12B5  3444               	retlw	68	;'D'
  1762  12B6  344C               	retlw	76	;'L'
  1763  12B7  3443               	retlw	67	;'C'
  1764  12B8  343A               	retlw	58	;':'
  1765  12B9  3420               	retlw	32	;' '
  1766  12BA  3425               	retlw	37	;'%'
  1767  12BB  3430               	retlw	48	;'0'
  1768  12BC  3432               	retlw	50	;'2'
  1769  12BD  3478               	retlw	120	;'x'
  1770  12BE  340A               	retlw	10
  1771  12BF  3400               	retlw	0
  1772                           
  1773                           	psect	stringtext35
  1774  12C0                     __pstringtext35:	
  1775  12C0                     STR_6:	
  1776  12C0  3452               	retlw	82	;'R'
  1777  12C1  3458               	retlw	88	;'X'
  1778  12C2  3442               	retlw	66	;'B'
  1779  12C3  3425               	retlw	37	;'%'
  1780  12C4  3464               	retlw	100	;'d'
  1781  12C5  3444               	retlw	68	;'D'
  1782  12C6  3430               	retlw	48	;'0'
  1783  12C7  343A               	retlw	58	;':'
  1784  12C8  3420               	retlw	32	;' '
  1785  12C9  3425               	retlw	37	;'%'
  1786  12CA  3430               	retlw	48	;'0'
  1787  12CB  3432               	retlw	50	;'2'
  1788  12CC  3478               	retlw	120	;'x'
  1789  12CD  340A               	retlw	10
  1790  12CE  3400               	retlw	0
  1791                           
  1792                           	psect	stringtext36
  1793  12CF                     __pstringtext36:	
  1794  12CF                     STR_2:	
  1795  12CF  3443               	retlw	67	;'C'
  1796  12D0  3441               	retlw	65	;'A'
  1797  12D1  344E               	retlw	78	;'N'
  1798  12D2  3453               	retlw	83	;'S'
  1799  12D3  3454               	retlw	84	;'T'
  1800  12D4  3441               	retlw	65	;'A'
  1801  12D5  3454               	retlw	84	;'T'
  1802  12D6  343A               	retlw	58	;':'
  1803  12D7  3420               	retlw	32	;' '
  1804  12D8  3425               	retlw	37	;'%'
  1805  12D9  3430               	retlw	48	;'0'
  1806  12DA  3432               	retlw	50	;'2'
  1807  12DB  3478               	retlw	120	;'x'
  1808  12DC  340A               	retlw	10
  1809  12DD  3400               	retlw	0
  1810                           
  1811                           	psect	stringtext37
  1812  12DE                     __pstringtext37:	
  1813  12DE                     STR_11:	
  1814  12DE  3454               	retlw	84	;'T'
  1815  12DF  3458               	retlw	88	;'X'
  1816  12E0  3442               	retlw	66	;'B'
  1817  12E1  3430               	retlw	48	;'0'
  1818  12E2  3420               	retlw	32	;' '
  1819  12E3  3469               	retlw	105	;'i'
  1820  12E4  3473               	retlw	115	;'s'
  1821  12E5  3420               	retlw	32	;' '
  1822  12E6  3469               	retlw	105	;'i'
  1823  12E7  3464               	retlw	100	;'d'
  1824  12E8  346C               	retlw	108	;'l'
  1825  12E9  3465               	retlw	101	;'e'
  1826  12EA  340A               	retlw	10
  1827  12EB  3400               	retlw	0
  1828                           
  1829                           	psect	stringtext38
  1830  12EC                     __pstringtext38:	
  1831  12EC                     STR_12:	
  1832  12EC  3454               	retlw	84	;'T'
  1833  12ED  3458               	retlw	88	;'X'
  1834  12EE  3442               	retlw	66	;'B'
  1835  12EF  3431               	retlw	49	;'1'
  1836  12F0  3420               	retlw	32	;' '
  1837  12F1  3469               	retlw	105	;'i'
  1838  12F2  3473               	retlw	115	;'s'
  1839  12F3  3420               	retlw	32	;' '
  1840  12F4  3469               	retlw	105	;'i'
  1841  12F5  3464               	retlw	100	;'d'
  1842  12F6  346C               	retlw	108	;'l'
  1843  12F7  3465               	retlw	101	;'e'
  1844  12F8  340A               	retlw	10
  1845  12F9  3400               	retlw	0
  1846                           
  1847                           	psect	stringtext39
  1848  12FA                     __pstringtext39:	
  1849  12FA                     STR_13:	
  1850  12FA  3454               	retlw	84	;'T'
  1851  12FB  3458               	retlw	88	;'X'
  1852  12FC  3442               	retlw	66	;'B'
  1853  12FD  3432               	retlw	50	;'2'
  1854  12FE  3420               	retlw	32	;' '
  1855  12FF  3469               	retlw	105	;'i'
  1856  1300  3473               	retlw	115	;'s'
  1857  1301  3420               	retlw	32	;' '
  1858  1302  3469               	retlw	105	;'i'
  1859  1303  3464               	retlw	100	;'d'
  1860  1304  346C               	retlw	108	;'l'
  1861  1305  3465               	retlw	101	;'e'
  1862  1306  340A               	retlw	10
  1863  1307  3400               	retlw	0
  1864                           
  1865                           	psect	stringtext40
  1866  1308                     __pstringtext40:	
  1867  1308                     STR_17:	
  1868  1308  3452               	retlw	82	;'R'
  1869  1309  3458               	retlw	88	;'X'
  1870  130A  3430               	retlw	48	;'0'
  1871  130B  3449               	retlw	73	;'I'
  1872  130C  3446               	retlw	70	;'F'
  1873  130D  3420               	retlw	32	;' '
  1874  130E  3469               	retlw	105	;'i'
  1875  130F  3473               	retlw	115	;'s'
  1876  1310  3420               	retlw	32	;' '
  1877  1311  346F               	retlw	111	;'o'
  1878  1312  346E               	retlw	110	;'n'
  1879  1313  340A               	retlw	10
  1880  1314  3400               	retlw	0
  1881                           
  1882                           	psect	stringtext41
  1883  1315                     __pstringtext41:	
  1884  1315                     STR_18:	
  1885  1315  3452               	retlw	82	;'R'
  1886  1316  3458               	retlw	88	;'X'
  1887  1317  3431               	retlw	49	;'1'
  1888  1318  3449               	retlw	73	;'I'
  1889  1319  3446               	retlw	70	;'F'
  1890  131A  3420               	retlw	32	;' '
  1891  131B  3469               	retlw	105	;'i'
  1892  131C  3473               	retlw	115	;'s'
  1893  131D  3420               	retlw	32	;' '
  1894  131E  346F               	retlw	111	;'o'
  1895  131F  346E               	retlw	110	;'n'
  1896  1320  340A               	retlw	10
  1897  1321  3400               	retlw	0
  1898                           
  1899                           	psect	stringtext42
  1900  1334                     __pstringtext42:	
  1901  1334                     STR_39:	
  1902  1334  3428               	retlw	40	;'('
  1903  1335  346E               	retlw	110	;'n'
  1904  1336  3475               	retlw	117	;'u'
  1905  1337  346C               	retlw	108	;'l'
  1906  1338  346C               	retlw	108	;'l'
  1907  1339  3429               	retlw	41	;')'
  1908  133A  3400               	retlw	0
  1909                           
  1910                           	psect	stringtext43
  1911  1347                     __pstringtext43:	
  1912  1347                     STR_19:	
  1913  1347  3425               	retlw	37	;'%'
  1914  1348  3463               	retlw	99	;'c'
  1915  1349  3400               	retlw	0
  1916                           
  1917                           	psect	stringtext44
  1918  0000                     __pstringtext44:	
  1919  113C                     
  1920                           ; #config settings
  1921  0000                     
  1922                           	psect	cinit
  1923  07E5                     start_initialization:	
  1924  07E5                     __initialization:	
  1925                           
  1926                           ; Initialize objects allocated to BANK1
  1927  07E5  0021               	movlb	1	; select bank1
  1928  07E6  318E  264C  3187   	fcall	__pidataBANK1	;fetch initializer
  1929  07E9  00B1               	movwf	__pdataBANK1& (0+127)
  1930  07EA  318E  264D  3187   	fcall	__pidataBANK1+1	;fetch initializer
  1931  07ED  00B2               	movwf	(__pdataBANK1+1)& (0+127)
  1932  07EE  318E  264E  3187   	fcall	__pidataBANK1+2	;fetch initializer
  1933  07F1  00B3               	movwf	(__pdataBANK1+2)& (0+127)
  1934  07F2  318E  264F  3187   	fcall	__pidataBANK1+3	;fetch initializer
  1935  07F5  00B4               	movwf	(__pdataBANK1+3)& (0+127)
  1936                           
  1937                           ; Clear objects allocated to BANK1
  1938  07F6  30A0               	movlw	low __pbssBANK1
  1939  07F7  0084               	movwf	4
  1940  07F8  3000               	movlw	high __pbssBANK1
  1941  07F9  0085               	movwf	5
  1942  07FA  3011               	movlw	17
  1943  07FB  318E  2655         	fcall	clear_ram0
  1944  07FD                     end_of_initialization:	
  1945                           ;End of C runtime variable initialization code
  1946                           
  1947  07FD                     __end_of__initialization:	
  1948  07FD  0020               	movlb	0
  1949  07FE  3185  2D68         	ljmp	_main	;jump to C main() function
  1950                           
  1951                           	psect	bssBANK1
  1952  00A0                     __pbssBANK1:	
  1953  00A0                     _mode:	
  1954  00A0                     	ds	4
  1955  00A4                     _sid:	
  1956  00A4                     	ds	2
  1957  00A6                     _idx:	
  1958  00A6                     	ds	1
  1959  00A7                     _c:	
  1960  00A7                     	ds	1
  1961  00A8                     _buf:	
  1962  00A8                     	ds	9
  1963                           
  1964                           	psect	dataBANK1
  1965  00B1                     __pdataBANK1:	
  1966  00B1                     can_status_check@F2968:	
  1967  00B1                     	ds	2
  1968  00B3                     can_send@F2958:	
  1969  00B3                     	ds	2
  1970                           
  1971                           	psect	clrtext
  1972  0E55                     clear_ram0:	
  1973                           ;	Called with FSR0 containing the base address, and
  1974                           ;	WREG with the size to clear
  1975                           
  1976  0E55  0064               	clrwdt	;clear the watchdog before getting into this loop
  1977  0E56                     clrloop0:	
  1978  0E56  0180               	clrf	0	;clear RAM location pointed to by FSR
  1979  0E57  3101               	addfsr 0,1
  1980  0E58  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1981  0E59  2E56               	goto	clrloop0	;have we reached the end yet?
  1982  0E5A  3400               	retlw	0	;all done for this memory range, return
  1983                           
  1984                           	psect	cstackCOMMON
  1985  0070                     __pcstackCOMMON:	
  1986  0070                     ?_isdigit:	
  1987  0070                     ?_PIN_MANAGER_Initialize:	
  1988                           ; 1 bit 
  1989                           
  1990  0070                     ??_PIN_MANAGER_Initialize:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_OSCILLATOR_Initialize:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ??_OSCILLATOR_Initialize:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_WDT_Initialize:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ??_WDT_Initialize:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_SPI_Initialize:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ??_SPI_Initialize:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_EUSART_Initialize:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ??_EUSART_Initialize:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ??_isdigit:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_SYSTEM_Initialize:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ??_SYSTEM_Initialize:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_EUSART_Read:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ??_EUSART_Read:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ?_EUSART_Write:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     ??_EUSART_Write:	
  2036                           ; 1 bytes @ 0x0
  2037                           
  2038  0070                     ?_putch:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ?_SPI_Exchange8bit:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ??_SPI_Exchange8bit:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047  0070                     ?_can_ope_mode:	
  2048                           ; 1 bytes @ 0x0
  2049                           
  2050  0070                     ?_can_txf_clear:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     ?_can_receive:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ?_can_status_check:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ?_main:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ?___wmul:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?___lwdiv:	
  2066                           ; 2 bytes @ 0x0
  2067                           
  2068  0070                     EUSART_Write@txData:	
  2069                           ; 2 bytes @ 0x0
  2070                           
  2071  0070                     SPI_Exchange8bit@data:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     _isdigit$681:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ___wmul@multiplier:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ___lwdiv@divisor:	
  2081                           ; 2 bytes @ 0x0
  2082                           
  2083                           
  2084                           ; 2 bytes @ 0x0
  2085  0070                     	ds	1
  2086  0071                     ??_putch:	
  2087  0071                     ?_SPI_Exchange8bitBuffer:	
  2088                           ; 1 bytes @ 0x1
  2089                           
  2090  0071                     putch@txData:	
  2091                           ; 1 bytes @ 0x1
  2092                           
  2093  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2094                           ; 1 bytes @ 0x1
  2095                           
  2096  0071                     isdigit@c:	
  2097                           ; 1 bytes @ 0x1
  2098                           
  2099                           
  2100                           ; 1 bytes @ 0x1
  2101  0071                     	ds	1
  2102  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2103  0072                     ___wmul@multiplicand:	
  2104                           ; 1 bytes @ 0x2
  2105                           
  2106  0072                     ___lwdiv@dividend:	
  2107                           ; 2 bytes @ 0x2
  2108                           
  2109                           
  2110                           ; 2 bytes @ 0x2
  2111  0072                     	ds	1
  2112  0073                     ??_SPI_Exchange8bitBuffer:	
  2113                           
  2114                           ; 1 bytes @ 0x3
  2115  0073                     	ds	1
  2116  0074                     ??___wmul:	
  2117  0074                     ??___lwdiv:	
  2118                           ; 1 bytes @ 0x4
  2119                           
  2120  0074                     ___wmul@product:	
  2121                           ; 1 bytes @ 0x4
  2122                           
  2123                           
  2124                           ; 2 bytes @ 0x4
  2125  0074                     	ds	1
  2126  0075                     ___lwdiv@quotient:	
  2127                           
  2128                           ; 2 bytes @ 0x5
  2129  0075                     	ds	1
  2130  0076                     ?_atoi:	
  2131  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2132                           ; 2 bytes @ 0x6
  2133                           
  2134                           
  2135                           ; 1 bytes @ 0x6
  2136  0076                     	ds	1
  2137  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2138  0077                     ___lwdiv@counter:	
  2139                           ; 1 bytes @ 0x7
  2140                           
  2141                           
  2142                           ; 1 bytes @ 0x7
  2143  0077                     	ds	1
  2144  0078                     ??_atoi:	
  2145  0078                     ?_SPI_exchange:	
  2146                           ; 1 bytes @ 0x8
  2147                           
  2148  0078                     ?___lwmod:	
  2149                           ; 1 bytes @ 0x8
  2150                           
  2151  0078                     SPI_exchange@len:	
  2152                           ; 2 bytes @ 0x8
  2153                           
  2154  0078                     ___lwmod@divisor:	
  2155                           ; 1 bytes @ 0x8
  2156                           
  2157                           
  2158                           ; 2 bytes @ 0x8
  2159  0078                     	ds	1
  2160  0079                     ??_SPI_exchange:	
  2161                           
  2162                           ; 1 bytes @ 0x9
  2163  0079                     	ds	1
  2164  007A                     atoi@sign:	
  2165  007A                     ___lwmod@dividend:	
  2166                           ; 1 bytes @ 0xA
  2167                           
  2168                           
  2169                           ; 2 bytes @ 0xA
  2170  007A                     	ds	1
  2171  007B                     atoi@a:	
  2172                           
  2173                           ; 2 bytes @ 0xB
  2174  007B                     	ds	1
  2175  007C                     ??___lwmod:	
  2176  007C                     SPI_exchange@bytes_written:	
  2177                           ; 1 bytes @ 0xC
  2178                           
  2179                           
  2180                           ; 1 bytes @ 0xC
  2181  007C                     	ds	1
  2182  007D                     SPI_exchange@buf:	
  2183  007D                     atoi@s:	
  2184                           ; 1 bytes @ 0xD
  2185                           
  2186  007D                     ___lwmod@counter:	
  2187                           ; 1 bytes @ 0xD
  2188                           
  2189                           
  2190                           ; 1 bytes @ 0xD
  2191  007D                     	ds	1
  2192                           
  2193                           	psect	cstackBANK0
  2194  0020                     __pcstackBANK0:	
  2195  0020                     ??_can_txf_clear:	
  2196  0020                     ?_printf:	
  2197                           ; 1 bytes @ 0x0
  2198                           
  2199  0020                     printf@f:	
  2200                           ; 2 bytes @ 0x0
  2201                           
  2202                           
  2203                           ; 2 bytes @ 0x0
  2204  0020                     	ds	2
  2205  0022                     can_txf_clear@n:	
  2206                           
  2207                           ; 1 bytes @ 0x2
  2208  0022                     	ds	1
  2209  0023                     can_txf_clear@mask:	
  2210                           
  2211                           ; 1 bytes @ 0x3
  2212  0023                     	ds	1
  2213  0024                     can_txf_clear@bytes_written:	
  2214                           
  2215                           ; 1 bytes @ 0x4
  2216  0024                     	ds	1
  2217  0025                     can_txf_clear@can_int_flag:	
  2218                           
  2219                           ; 4 bytes @ 0x5
  2220  0025                     	ds	3
  2221  0028                     ??_printf:	
  2222                           
  2223                           ; 1 bytes @ 0x8
  2224  0028                     	ds	4
  2225  002C                     printf@idx:	
  2226                           
  2227                           ; 1 bytes @ 0xC
  2228  002C                     	ds	1
  2229  002D                     printf@prec:	
  2230                           
  2231                           ; 1 bytes @ 0xD
  2232  002D                     	ds	1
  2233  002E                     printf@cp:	
  2234                           
  2235                           ; 2 bytes @ 0xE
  2236  002E                     	ds	2
  2237  0030                     printf@len:	
  2238                           
  2239                           ; 2 bytes @ 0x10
  2240  0030                     	ds	2
  2241  0032                     printf@ap:	
  2242                           
  2243                           ; 1 bytes @ 0x12
  2244  0032                     	ds	1
  2245  0033                     printf@val:	
  2246                           
  2247                           ; 2 bytes @ 0x13
  2248  0033                     	ds	2
  2249  0035                     printf@flag:	
  2250                           
  2251                           ; 1 bytes @ 0x15
  2252  0035                     	ds	1
  2253  0036                     printf@width:	
  2254                           
  2255                           ; 2 bytes @ 0x16
  2256  0036                     	ds	2
  2257  0038                     printf@c:	
  2258                           
  2259                           ; 1 bytes @ 0x18
  2260  0038                     	ds	1
  2261  0039                     ?_set_sid:	
  2262  0039                     ??_can_ope_mode:	
  2263                           ; 1 bytes @ 0x19
  2264                           
  2265  0039                     ??_can_receive:	
  2266                           ; 1 bytes @ 0x19
  2267                           
  2268  0039                     ?_can_send:	
  2269                           ; 1 bytes @ 0x19
  2270                           
  2271  0039                     can_send@dlc:	
  2272                           ; 1 bytes @ 0x19
  2273                           
  2274  0039                     set_sid@can_node:	
  2275                           ; 1 bytes @ 0x19
  2276                           
  2277                           
  2278                           ; 2 bytes @ 0x19
  2279  0039                     	ds	1
  2280  003A                     ??_can_send:	
  2281                           
  2282                           ; 1 bytes @ 0x1A
  2283  003A                     	ds	1
  2284  003B                     ??_set_sid:	
  2285  003B                     can_ope_mode@ope_mode:	
  2286                           ; 1 bytes @ 0x1B
  2287                           
  2288                           
  2289                           ; 1 bytes @ 0x1B
  2290  003B                     	ds	1
  2291  003C                     can_ope_mode@bytes_written:	
  2292                           
  2293                           ; 1 bytes @ 0x1C
  2294  003C                     	ds	1
  2295  003D                     can_ope_mode@can_ctrl_buf:	
  2296                           
  2297                           ; 3 bytes @ 0x1D
  2298  003D                     	ds	1
  2299  003E                     can_receive@bytes_read:	
  2300  003E                     can_send@tx_buf:	
  2301                           ; 1 bytes @ 0x1E
  2302                           
  2303                           
  2304                           ; 14 bytes @ 0x1E
  2305  003E                     	ds	1
  2306  003F                     set_sid@sidh:	
  2307  003F                     can_receive@rx_buf:	
  2308                           ; 1 bytes @ 0x1F
  2309                           
  2310                           
  2311                           ; 15 bytes @ 0x1F
  2312  003F                     	ds	1
  2313  0040                     set_sid@sidl:	
  2314                           
  2315                           ; 1 bytes @ 0x20
  2316  0040                     	ds	12
  2317  004C                     can_send@can_status_buf:	
  2318                           
  2319                           ; 2 bytes @ 0x2C
  2320  004C                     	ds	2
  2321  004E                     can_receive@dlc:	
  2322  004E                     can_send@buf:	
  2323                           ; 1 bytes @ 0x2E
  2324                           
  2325                           
  2326                           ; 1 bytes @ 0x2E
  2327  004E                     	ds	1
  2328  004F                     can_send@len:	
  2329  004F                     can_receive@sid:	
  2330                           ; 1 bytes @ 0x2F
  2331                           
  2332                           
  2333                           ; 2 bytes @ 0x2F
  2334  004F                     	ds	1
  2335  0050                     can_send@bytes_written:	
  2336                           
  2337                           ; 1 bytes @ 0x30
  2338  0050                     	ds	1
  2339  0051                     can_receive@rx_buf_ptr:	
  2340  0051                     can_send@txb_ctrl_buf:	
  2341                           ; 1 bytes @ 0x31
  2342                           
  2343                           
  2344                           ; 1 bytes @ 0x31
  2345  0051                     	ds	1
  2346  0052                     can_receive@n:	
  2347  0052                     can_send@status:	
  2348                           ; 1 bytes @ 0x32
  2349                           
  2350                           
  2351                           ; 1 bytes @ 0x32
  2352  0052                     	ds	1
  2353  0053                     ??_can_status_check:	
  2354  0053                     can_send@debug_buf:	
  2355                           ; 1 bytes @ 0x33
  2356                           
  2357                           
  2358                           ; 3 bytes @ 0x33
  2359  0053                     	ds	2
  2360  0055                     can_status_check@bytes_written:	
  2361                           
  2362                           ; 1 bytes @ 0x35
  2363  0055                     	ds	1
  2364  0056                     can_send@i:	
  2365  0056                     can_status_check@can_status_buf:	
  2366                           ; 1 bytes @ 0x36
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x36
  2370  0056                     	ds	1
  2371  0057                     can_send@n:	
  2372                           
  2373                           ; 1 bytes @ 0x37
  2374  0057                     	ds	1
  2375  0058                     can_status_check@status:	
  2376                           
  2377                           ; 1 bytes @ 0x38
  2378  0058                     	ds	1
  2379  0059                     ??_main:	
  2380                           
  2381                           ; 1 bytes @ 0x39
  2382  0059                     	ds	6
  2383  005F                     _main$431:	
  2384                           
  2385                           ; 2 bytes @ 0x3F
  2386  005F                     	ds	2
  2387  0061                     _main$432:	
  2388                           
  2389                           ; 2 bytes @ 0x41
  2390  0061                     	ds	2
  2391  0063                     main@sid:	
  2392                           
  2393                           ; 1 bytes @ 0x43
  2394  0063                     	ds	1
  2395  0064                     main@rc:	
  2396                           
  2397                           ; 1 bytes @ 0x44
  2398  0064                     	ds	1
  2399  0065                     main@rc_450:	
  2400                           
  2401                           ; 1 bytes @ 0x45
  2402  0065                     	ds	1
  2403  0066                     main@mask:	
  2404                           
  2405                           ; 2 bytes @ 0x46
  2406  0066                     	ds	2
  2407  0068                     main@mask_sidh:	
  2408                           
  2409                           ; 1 bytes @ 0x48
  2410  0068                     	ds	1
  2411  0069                     main@mask_sidl:	
  2412                           
  2413                           ; 1 bytes @ 0x49
  2414  0069                     	ds	1
  2415  006A                     main@mask_buf:	
  2416                           
  2417                           ; 4 bytes @ 0x4A
  2418  006A                     	ds	4
  2419  006E                     main@cmd:	
  2420                           
  2421                           ; 1 bytes @ 0x4E
  2422  006E                     	ds	1
  2423  006F                     main@n:	
  2424                           
  2425                           ; 1 bytes @ 0x4F
  2426  006F                     	ds	1
  2427                           
  2428                           	psect	maintext
  2429  0568                     __pmaintext:	
  2430 ;;
  2431 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2432 ;;
  2433 ;; *************** function _main *****************
  2434 ;; Defined at:
  2435 ;;		line 246 in file "main.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  rc              1   68[BANK0 ] unsigned char 
  2440 ;;  mask_buf        4   74[BANK0 ] unsigned char [4]
  2441 ;;  mask            2   70[BANK0 ] unsigned int 
  2442 ;;  n               1   79[BANK0 ] unsigned char 
  2443 ;;  cmd             1   78[BANK0 ] unsigned char 
  2444 ;;  mask_sidl       1   73[BANK0 ] unsigned char 
  2445 ;;  mask_sidh       1   72[BANK0 ] unsigned char 
  2446 ;;  sid             1   67[BANK0 ] unsigned char 
  2447 ;;  rc              1   69[BANK0 ] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : B1F/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2458 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2459 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2460 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2461 ;;Total ram usage:       23 bytes
  2462 ;; Hardware stack levels required when called:    5
  2463 ;; This function calls:
  2464 ;;		_EUSART_Read
  2465 ;;		_SPI_exchange
  2466 ;;		_SYSTEM_Initialize
  2467 ;;		_atoi
  2468 ;;		_can_ope_mode
  2469 ;;		_can_send
  2470 ;;		_can_status_check
  2471 ;;		_printf
  2472 ;;		_set_sid
  2473 ;; This function is called by:
  2474 ;;		Startup code after reset
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           
  2479                           ;psect for function _main
  2480  0568                     _main:	
  2481                           
  2482                           ;main.c: 248: SYSTEM_Initialize();
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2486  0568  318E  2695  3185   	fcall	_SYSTEM_Initialize
  2487                           
  2488                           ;main.c: 253: set_sid(0);
  2489  056B  3000               	movlw	0
  2490  056C  0020               	movlb	0	; select bank0
  2491  056D  00B9               	movwf	set_sid@can_node
  2492  056E  00BA               	movwf	set_sid@can_node+1
  2493  056F  318F  2773  3185   	fcall	_set_sid
  2494                           
  2495                           ;main.c: 255: mode.debug = 0;
  2496  0572  0021               	movlb	1	; select bank1
  2497  0573  01A0               	clrf	_mode^(0+128)
  2498                           
  2499                           ;main.c: 256: mode.verbose = 0;
  2500  0574  01A1               	clrf	(_mode^(0+128)+1)
  2501                           
  2502                           ;main.c: 257: mode.ope_mode = 0b00000000;
  2503  0575  01A2               	clrf	(_mode^(0+128)+2)
  2504                           
  2505                           ;main.c: 258: can_ope_mode(0b00000000);
  2506  0576  3000               	movlw	0
  2507  0577  3180  200C  3185   	fcall	_can_ope_mode
  2508                           
  2509                           ;main.c: 259: mode.with_sid = 0;
  2510  057A  0021               	movlb	1	; select bank1
  2511  057B  01A3               	clrf	(_mode^(0+128)+3)
  2512  057C                     L3:	
  2513                           
  2514                           ;main.c: 261: idx = 0;
  2515  057C  01A6               	clrf	_idx^(0+128)
  2516  057D                     l2208:	
  2517                           ;main.c: 263: while (1)
  2518                           
  2519                           
  2520                           ;main.c: 264: {
  2521                           ;main.c: 265: can_status_check();
  2522  057D  3180  2051  3185   	fcall	_can_status_check
  2523                           
  2524                           ;main.c: 267: if ((PIR1bits.RCIF)) {
  2525  0580  0020               	movlb	0	; select bank0
  2526  0581  1E91               	btfss	17,5	;volatile
  2527  0582  2D7D               	goto	l2208
  2528                           
  2529                           ;main.c: 268: c = EUSART_Read();
  2530  0583  318E  2672  3185   	fcall	_EUSART_Read
  2531  0586  0020               	movlb	0	; select bank0
  2532  0587  00D9               	movwf	??_main
  2533  0588  0859               	movf	??_main,w
  2534  0589  0021               	movlb	1	; select bank1
  2535  058A  00A7               	movwf	_c^(0+128)
  2536                           
  2537                           ;main.c: 269: if (mode.verbose) printf("%c", c);
  2538  058B  0821               	movf	(_mode^(0+128)+1),w
  2539  058C  1903               	btfsc	3,2
  2540  058D  2D9F               	goto	l2218
  2541  058E  3047               	movlw	low (STR_19| (0+32768))
  2542  058F  0020               	movlb	0	; select bank0
  2543  0590  00A0               	movwf	printf@f
  2544  0591  3093               	movlw	high (STR_19| (0+32768))
  2545  0592  00A1               	movwf	printf@f+1
  2546  0593  0021               	movlb	1	; select bank1
  2547  0594  0827               	movf	_c^(0+128),w
  2548  0595  0020               	movlb	0	; select bank0
  2549  0596  00D9               	movwf	??_main
  2550  0597  01DA               	clrf	??_main+1
  2551  0598  0859               	movf	??_main,w
  2552  0599  00A2               	movwf	?_printf+2
  2553  059A  085A               	movf	??_main+1,w
  2554  059B  00A3               	movwf	?_printf+3
  2555  059C  3183  232D  3185   	fcall	_printf
  2556  059F                     l2218:	
  2557                           
  2558                           ;main.c: 272: buf[idx] = c;
  2559  059F  0021               	movlb	1	; select bank1
  2560  05A0  0827               	movf	_c^(0+128),w
  2561  05A1  0020               	movlb	0	; select bank0
  2562  05A2  00D9               	movwf	??_main
  2563  05A3  0021               	movlb	1	; select bank1
  2564  05A4  0826               	movf	_idx^(0+128),w
  2565  05A5  3EA8               	addlw	(low (_buf| 0))& (0+255)
  2566  05A6  0086               	movwf	6
  2567  05A7  0187               	clrf	7
  2568  05A8  0020               	movlb	0	; select bank0
  2569  05A9  0859               	movf	??_main,w
  2570  05AA  0081               	movwf	1
  2571                           
  2572                           ;main.c: 273: if (c == '\n') {
  2573  05AB  300A               	movlw	10
  2574  05AC  0021               	movlb	1	; select bank1
  2575  05AD  0627               	xorwf	_c^(0+128),w
  2576  05AE  1D03               	btfss	3,2
  2577  05AF  2FA0               	goto	l2346
  2578                           
  2579                           ;main.c: 274: buf[idx] = '\0';
  2580  05B0  0826               	movf	_idx^(0+128),w
  2581  05B1  3EA8               	addlw	(low (_buf| 0))& (0+255)
  2582  05B2  0086               	movwf	6
  2583  05B3  0187               	clrf	7
  2584  05B4  0181               	clrf	1
  2585                           
  2586                           ;main.c: 275: if (buf[0] == '@') {
  2587  05B5  3040               	movlw	64
  2588  05B6  0628               	xorwf	_buf^(0+128),w
  2589  05B7  1D03               	btfss	3,2
  2590  05B8  2F74               	goto	l2332
  2591                           
  2592                           ;main.c: 276: uint8_t cmd = buf[1];
  2593  05B9  0829               	movf	(_buf^(0+128)+1),w
  2594  05BA  0020               	movlb	0	; select bank0
  2595  05BB  00D9               	movwf	??_main
  2596  05BC  0859               	movf	??_main,w
  2597  05BD  00EE               	movwf	main@cmd
  2598                           
  2599                           ;main.c: 277: uint8_t sid;
  2600                           ;main.c: 278: uint8_t n;
  2601                           ;main.c: 279: uint16_t mask;
  2602                           ;main.c: 280: uint8_t mask_sidh;
  2603                           ;main.c: 281: uint8_t mask_sidl;
  2604                           ;main.c: 282: uint8_t mask_buf[4];
  2605                           ;main.c: 283: switch(cmd) {
  2606  05BE  2F5E               	goto	l2330
  2607  05BF                     l2228:	
  2608                           ;main.c: 284: case 'i':
  2609                           
  2610                           
  2611                           ;main.c: 285: sid = atoi(&buf[2]);
  2612  05BF  30AA               	movlw	(low ((_buf| 0+2)))& (0+255)
  2613  05C0  3180  20A2  3185   	fcall	_atoi
  2614  05C3  0876               	movf	?_atoi,w
  2615  05C4  0020               	movlb	0	; select bank0
  2616  05C5  00D9               	movwf	??_main
  2617  05C6  0859               	movf	??_main,w
  2618  05C7  00E3               	movwf	main@sid
  2619                           
  2620                           ;main.c: 286: set_sid(sid);
  2621  05C8  0863               	movf	main@sid,w
  2622  05C9  00D9               	movwf	??_main
  2623  05CA  01DA               	clrf	??_main+1
  2624  05CB  0859               	movf	??_main,w
  2625  05CC  00B9               	movwf	set_sid@can_node
  2626  05CD  085A               	movf	??_main+1,w
  2627  05CE  00BA               	movwf	set_sid@can_node+1
  2628  05CF  318F  2773  3185   	fcall	_set_sid
  2629                           
  2630                           ;main.c: 287: break;
  2631  05D2  2FE3               	goto	l2362
  2632  05D3                     l2232:	
  2633                           ;main.c: 288: case 'v':
  2634                           
  2635                           
  2636                           ;main.c: 289: if (buf[2] == 'd') {
  2637  05D3  3064               	movlw	100
  2638  05D4  0021               	movlb	1	; select bank1
  2639  05D5  062A               	xorwf	(_buf^(0+128)+2),w
  2640  05D6  1D03               	btfss	3,2
  2641  05D7  2DDB               	goto	l2236
  2642                           
  2643                           ;main.c: 290: mode.debug = 1;
  2644  05D8  01A0               	clrf	_mode^(0+128)
  2645  05D9  0AA0               	incf	_mode^(0+128),f
  2646  05DA  2DE0               	goto	l2240
  2647  05DB                     l2236:	
  2648                           ;main.c: 292: } else if (buf[2] == 'v') {
  2649                           
  2650                           ;main.c: 291: mode.verbose = 1;
  2651                           
  2652  05DB  3076               	movlw	118
  2653  05DC  062A               	xorwf	(_buf^(0+128)+2),w
  2654  05DD  1D03               	btfss	3,2
  2655  05DE  2DE3               	goto	l2242
  2656                           
  2657                           ;main.c: 293: mode.debug = 0;
  2658  05DF  01A0               	clrf	_mode^(0+128)
  2659  05E0                     l2240:	
  2660                           
  2661                           ;main.c: 294: mode.verbose = 1;
  2662  05E0  01A1               	clrf	(_mode^(0+128)+1)
  2663  05E1  0AA1               	incf	(_mode^(0+128)+1),f
  2664                           
  2665                           ;main.c: 295: } else if (buf[2] == 'n') {
  2666  05E2  2FE3               	goto	l2362
  2667  05E3                     l2242:	
  2668  05E3  306E               	movlw	110
  2669  05E4  062A               	xorwf	(_buf^(0+128)+2),w
  2670  05E5  1D03               	btfss	3,2
  2671  05E6  2FE3               	goto	l2362
  2672                           
  2673                           ;main.c: 296: mode.debug = 0;
  2674  05E7  01A0               	clrf	_mode^(0+128)
  2675                           
  2676                           ;main.c: 297: mode.verbose = 0;
  2677  05E8  01A1               	clrf	(_mode^(0+128)+1)
  2678                           
  2679                           ;main.c: 298: }
  2680                           ;main.c: 299: break;
  2681  05E9  2FE3               	goto	l2362
  2682  05EA                     l2246:	
  2683                           ;main.c: 300: case 'o':
  2684                           
  2685                           
  2686                           ;main.c: 301: if (buf[2] == 'l') {
  2687  05EA  306C               	movlw	108
  2688  05EB  0021               	movlb	1	; select bank1
  2689  05EC  062A               	xorwf	(_buf^(0+128)+2),w
  2690  05ED  1D03               	btfss	3,2
  2691  05EE  2DF7               	goto	l2252
  2692                           
  2693                           ;main.c: 302: mode.ope_mode = 0b01000000;
  2694  05EF  3040               	movlw	64
  2695  05F0  0020               	movlb	0	; select bank0
  2696  05F1  00D9               	movwf	??_main
  2697  05F2  0859               	movf	??_main,w
  2698  05F3  0021               	movlb	1	; select bank1
  2699  05F4  00A2               	movwf	(_mode^(0+128)+2)
  2700                           
  2701                           ;main.c: 303: can_ope_mode(0b01000000);
  2702  05F5  3040               	movlw	64
  2703  05F6  2DFE               	goto	L4
  2704  05F7                     l2252:	
  2705                           ;main.c: 304: } else if (buf[2] == 'n') {
  2706                           
  2707  05F7  306E               	movlw	110
  2708  05F8  0021               	movlb	1	; select bank1
  2709  05F9  062A               	xorwf	(_buf^(0+128)+2),w
  2710  05FA  1D03               	btfss	3,2
  2711  05FB  2E01               	goto	l2258
  2712                           
  2713                           ;main.c: 305: mode.ope_mode = 0b00000000;
  2714  05FC  01A2               	clrf	(_mode^(0+128)+2)
  2715                           
  2716                           ;main.c: 306: can_ope_mode(0b00000000);
  2717  05FD  3000               	movlw	0
  2718  05FE                     L4:	
  2719  05FE  3180  200C  3185   	fcall	_can_ope_mode
  2720  0601                     l2258:	
  2721                           
  2722                           ;main.c: 307: }
  2723                           ;main.c: 308: if (buf[3] != '\0') {
  2724  0601  0021               	movlb	1	; select bank1
  2725  0602  082B               	movf	(_buf^(0+128)+3),w
  2726  0603  1903               	btfsc	3,2
  2727  0604  2FE3               	goto	l2362
  2728                           
  2729                           ;main.c: 309: if (buf[3] == 'n') {
  2730  0605  306E               	movlw	110
  2731  0606  062B               	xorwf	(_buf^(0+128)+3),w
  2732  0607  1D03               	btfss	3,2
  2733  0608  2E0B               	goto	l2264
  2734                           
  2735                           ;main.c: 310: mode.with_sid = 0;
  2736  0609  01A3               	clrf	(_mode^(0+128)+3)
  2737                           
  2738                           ;main.c: 311: } else if (buf[3] == 's') {
  2739  060A  2FE3               	goto	l2362
  2740  060B                     l2264:	
  2741  060B  3073               	movlw	115
  2742  060C  062B               	xorwf	(_buf^(0+128)+3),w
  2743  060D  1D03               	btfss	3,2
  2744  060E  2FE3               	goto	l2362
  2745                           
  2746                           ;main.c: 312: mode.with_sid = 1;
  2747  060F  01A3               	clrf	(_mode^(0+128)+3)
  2748  0610  0AA3               	incf	(_mode^(0+128)+3),f
  2749                           
  2750                           ;main.c: 313: }
  2751                           ;main.c: 314: }
  2752                           ;main.c: 315: break;
  2753  0611  2FE3               	goto	l2362
  2754  0612                     l2268:	
  2755                           ;main.c: 316: case 'm':
  2756                           
  2757                           
  2758                           ;main.c: 317: case 'f':
  2759                           ;main.c: 318: can_ope_mode(0b10000000);
  2760  0612  3080               	movlw	128
  2761  0613  3180  200C  3185   	fcall	_can_ope_mode
  2762                           
  2763                           ;main.c: 319: n = buf[2] - 0x30;
  2764  0616  0021               	movlb	1	; select bank1
  2765  0617  082A               	movf	(_buf^(0+128)+2),w
  2766  0618  3ED0               	addlw	208
  2767  0619  0020               	movlb	0	; select bank0
  2768  061A  00D9               	movwf	??_main
  2769  061B  0859               	movf	??_main,w
  2770  061C  00EF               	movwf	main@n
  2771                           
  2772                           ;main.c: 320: mask = atoi(&buf[3]);
  2773  061D  30AB               	movlw	(low ((_buf| 0+3)))& (0+255)
  2774  061E  3180  20A2  3185   	fcall	_atoi
  2775  0621  0877               	movf	?_atoi+1,w
  2776  0622  0020               	movlb	0	; select bank0
  2777  0623  00E7               	movwf	main@mask+1
  2778  0624  0876               	movf	?_atoi,w
  2779  0625  00E6               	movwf	main@mask
  2780                           
  2781                           ;main.c: 321: mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  2782  0626  0867               	movf	main@mask+1,w
  2783  0627  00DA               	movwf	??_main+1
  2784  0628  0866               	movf	main@mask,w
  2785  0629  00D9               	movwf	??_main
  2786  062A  36DA               	lsrf	??_main+1,f
  2787  062B  0CD9               	rrf	??_main,f
  2788  062C  36DA               	lsrf	??_main+1,f
  2789  062D  0CD9               	rrf	??_main,f
  2790  062E  36DA               	lsrf	??_main+1,f
  2791  062F  0CD9               	rrf	??_main,f
  2792  0630  0859               	movf	??_main,w
  2793  0631  00DB               	movwf	??_main+2
  2794  0632  085B               	movf	??_main+2,w
  2795  0633  00E8               	movwf	main@mask_sidh
  2796                           
  2797                           ;main.c: 322: mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  2798  0634  0866               	movf	main@mask,w
  2799  0635  3907               	andlw	7
  2800  0636  00D9               	movwf	??_main
  2801  0637  3004               	movlw	4
  2802  0638                     u2355:	
  2803  0638  35D9               	lslf	??_main,f
  2804  0639  3EFF               	addlw	-1
  2805  063A  1D03               	skipz
  2806  063B  2E38               	goto	u2355
  2807  063C  3559               	lslf	??_main,w
  2808  063D  00DA               	movwf	??_main+1
  2809  063E  085A               	movf	??_main+1,w
  2810  063F  00E9               	movwf	main@mask_sidl
  2811                           
  2812                           ;main.c: 323: if (mode.debug) {
  2813  0640  0021               	movlb	1	; select bank1
  2814  0641  0820               	movf	_mode^(0+128),w
  2815  0642  1903               	btfsc	3,2
  2816  0643  2E6A               	goto	l2286
  2817                           
  2818                           ;main.c: 324: if (cmd == 'm') {
  2819  0644  306D               	movlw	109
  2820  0645  0020               	movlb	0	; select bank0
  2821  0646  066E               	xorwf	main@cmd,w
  2822  0647  1D03               	btfss	3,2
  2823  0648  2E4D               	goto	l2284
  2824                           
  2825                           ;main.c: 325: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2826  0649  30C7               	movlw	low (STR_20| (0+32768))
  2827  064A  00A0               	movwf	printf@f
  2828  064B  3091               	movlw	high (STR_20| (0+32768))
  2829  064C  2E51               	goto	L5
  2830  064D                     l2284:	
  2831                           ;main.c: 326: } else {
  2832                           
  2833                           
  2834                           ;main.c: 327: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2835  064D  3084               	movlw	low (STR_21| (0+32768))
  2836  064E  0020               	movlb	0	; select bank0
  2837  064F  00A0               	movwf	printf@f
  2838  0650  3091               	movlw	high (STR_21| (0+32768))
  2839  0651                     L5:	
  2840  0651  00A1               	movwf	printf@f+1
  2841  0652  086F               	movf	main@n,w
  2842  0653  00D9               	movwf	??_main
  2843  0654  01DA               	clrf	??_main+1
  2844  0655  0859               	movf	??_main,w
  2845  0656  00A2               	movwf	?_printf+2
  2846  0657  085A               	movf	??_main+1,w
  2847  0658  00A3               	movwf	?_printf+3
  2848  0659  0868               	movf	main@mask_sidh,w
  2849  065A  00DB               	movwf	??_main+2
  2850  065B  01DC               	clrf	??_main+3
  2851  065C  085B               	movf	??_main+2,w
  2852  065D  00A4               	movwf	?_printf+4
  2853  065E  085C               	movf	??_main+3,w
  2854  065F  00A5               	movwf	?_printf+5
  2855  0660  0869               	movf	main@mask_sidl,w
  2856  0661  00DD               	movwf	??_main+4
  2857  0662  01DE               	clrf	??_main+5
  2858  0663  085D               	movf	??_main+4,w
  2859  0664  00A6               	movwf	?_printf+6
  2860  0665  085E               	movf	??_main+5,w
  2861  0666  00A7               	movwf	?_printf+7
  2862  0667  3183  232D  3185   	fcall	_printf
  2863  066A                     l2286:	
  2864                           
  2865                           ;main.c: 328: }
  2866                           ;main.c: 329: }
  2867                           ;main.c: 330: mask_buf[0] = 0b00000010;
  2868  066A  3002               	movlw	2
  2869  066B  0020               	movlb	0	; select bank0
  2870  066C  00D9               	movwf	??_main
  2871  066D  0859               	movf	??_main,w
  2872  066E  00EA               	movwf	main@mask_buf
  2873                           
  2874                           ;main.c: 331: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2875  066F  306D               	movlw	109
  2876  0670  066E               	xorwf	main@cmd,w
  2877  0671  1903               	btfsc	3,2
  2878  0672  2E78               	goto	l2292
  2879  0673  086F               	movf	main@n,w
  2880  0674  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2881  0675  0084               	movwf	4
  2882  0676  3093               	movlw	high (_rxfnsidh| (0+32768))
  2883  0677  2E7C               	goto	L1
  2884  0678                     l2292:	
  2885  0678  086F               	movf	main@n,w
  2886  0679  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2887  067A  0084               	movwf	4
  2888  067B  3093               	movlw	high (_rxmnsidh| (0+32768))
  2889  067C                     L1:	
  2890  067C  1803               	skipnc
  2891  067D  3E01               	addlw	1
  2892  067E  0085               	movwf	5
  2893  067F  0800               	movf	0,w	;code access
  2894  0680  00D9               	movwf	??_main
  2895  0681  01DA               	clrf	??_main+1
  2896  0682  0859               	movf	??_main,w
  2897  0683  00DF               	movwf	_main$431
  2898  0684  085A               	movf	??_main+1,w
  2899  0685  00E0               	movwf	_main$431+1
  2900  0686  085F               	movf	_main$431,w
  2901  0687  00D9               	movwf	??_main
  2902  0688  0859               	movf	??_main,w
  2903  0689  00EB               	movwf	main@mask_buf+1
  2904                           
  2905                           ;main.c: 332: mask_buf[2] = mask_sidh;
  2906  068A  0868               	movf	main@mask_sidh,w
  2907  068B  00D9               	movwf	??_main
  2908  068C  0859               	movf	??_main,w
  2909  068D  00EC               	movwf	main@mask_buf+2
  2910                           
  2911                           ;main.c: 333: mask_buf[3] = mask_sidl;
  2912  068E  0869               	movf	main@mask_sidl,w
  2913  068F  00D9               	movwf	??_main
  2914  0690  0859               	movf	??_main,w
  2915  0691  00ED               	movwf	main@mask_buf+3
  2916                           
  2917                           ;main.c: 334: SPI_exchange(mask_buf, 4);
  2918  0692  3004               	movlw	4
  2919  0693  00D9               	movwf	??_main
  2920  0694  0859               	movf	??_main,w
  2921  0695  00F8               	movwf	SPI_exchange@len
  2922  0696  306A               	movlw	(low (main@mask_buf| 0))& (0+255)
  2923  0697  318E  26A4  3185   	fcall	_SPI_exchange
  2924                           
  2925                           ;main.c: 336: if (mode.debug) {
  2926  069A  0021               	movlb	1	; select bank1
  2927  069B  0820               	movf	_mode^(0+128),w
  2928  069C  1903               	btfsc	3,2
  2929  069D  2F13               	goto	l281
  2930                           
  2931                           ;main.c: 337: mask_buf[0] = 0b00000011;
  2932  069E  3003               	movlw	3
  2933  069F  0020               	movlb	0	; select bank0
  2934  06A0  00D9               	movwf	??_main
  2935  06A1  0859               	movf	??_main,w
  2936  06A2  00EA               	movwf	main@mask_buf
  2937                           
  2938                           ;main.c: 338: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2939  06A3  306D               	movlw	109
  2940  06A4  066E               	xorwf	main@cmd,w
  2941  06A5  1903               	btfsc	3,2
  2942  06A6  2EAC               	goto	l2310
  2943  06A7  086F               	movf	main@n,w
  2944  06A8  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2945  06A9  0084               	movwf	4
  2946  06AA  3093               	movlw	high (_rxfnsidh| (0+32768))
  2947  06AB  2EB0               	goto	L2
  2948  06AC                     l2310:	
  2949  06AC  086F               	movf	main@n,w
  2950  06AD  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2951  06AE  0084               	movwf	4
  2952  06AF  3093               	movlw	high (_rxmnsidh| (0+32768))
  2953  06B0                     L2:	
  2954  06B0  1803               	skipnc
  2955  06B1  3E01               	addlw	1
  2956  06B2  0085               	movwf	5
  2957  06B3  0800               	movf	0,w	;code access
  2958  06B4  00D9               	movwf	??_main
  2959  06B5  01DA               	clrf	??_main+1
  2960  06B6  0859               	movf	??_main,w
  2961  06B7  00E1               	movwf	_main$432
  2962  06B8  085A               	movf	??_main+1,w
  2963  06B9  00E2               	movwf	_main$432+1
  2964  06BA  0861               	movf	_main$432,w
  2965  06BB  00D9               	movwf	??_main
  2966  06BC  0859               	movf	??_main,w
  2967  06BD  00EB               	movwf	main@mask_buf+1
  2968                           
  2969                           ;main.c: 339: mask_buf[2] = 0x00;
  2970  06BE  01EC               	clrf	main@mask_buf+2
  2971                           
  2972                           ;main.c: 340: mask_buf[3] = 0x00;
  2973  06BF  01ED               	clrf	main@mask_buf+3
  2974                           
  2975                           ;main.c: 341: SPI_exchange(mask_buf, 4);
  2976  06C0  3004               	movlw	4
  2977  06C1  00D9               	movwf	??_main
  2978  06C2  0859               	movf	??_main,w
  2979  06C3  00F8               	movwf	SPI_exchange@len
  2980  06C4  306A               	movlw	(low (main@mask_buf| 0))& (0+255)
  2981  06C5  318E  26A4  3185   	fcall	_SPI_exchange
  2982                           
  2983                           ;main.c: 342: if (cmd == 'm') {
  2984  06C8  306D               	movlw	109
  2985  06C9  0020               	movlb	0	; select bank0
  2986  06CA  066E               	xorwf	main@cmd,w
  2987  06CB  1D03               	btfss	3,2
  2988  06CC  2EE7               	goto	l2324
  2989                           
  2990                           ;main.c: 343: printf("RXM%dSIDH: %02x\n", n, mask_buf[2]);
  2991  06CD  305B               	movlw	low (STR_22| (0+32768))
  2992  06CE  00A0               	movwf	printf@f
  2993  06CF  3092               	movlw	high (STR_22| (0+32768))
  2994  06D0  00A1               	movwf	printf@f+1
  2995  06D1  086F               	movf	main@n,w
  2996  06D2  00D9               	movwf	??_main
  2997  06D3  01DA               	clrf	??_main+1
  2998  06D4  0859               	movf	??_main,w
  2999  06D5  00A2               	movwf	?_printf+2
  3000  06D6  085A               	movf	??_main+1,w
  3001  06D7  00A3               	movwf	?_printf+3
  3002  06D8  086C               	movf	main@mask_buf+2,w
  3003  06D9  00DB               	movwf	??_main+2
  3004  06DA  01DC               	clrf	??_main+3
  3005  06DB  085B               	movf	??_main+2,w
  3006  06DC  00A4               	movwf	?_printf+4
  3007  06DD  085C               	movf	??_main+3,w
  3008  06DE  00A5               	movwf	?_printf+5
  3009  06DF  3183  232D  3185   	fcall	_printf
  3010                           
  3011                           ;main.c: 344: printf("RXM%dSIDL: %02x\n", n, mask_buf[3]);
  3012  06E2  309F               	movlw	low (STR_23| (0+32768))
  3013  06E3  0020               	movlb	0	; select bank0
  3014  06E4  00A0               	movwf	printf@f
  3015  06E5  3092               	movlw	high (STR_23| (0+32768))
  3016  06E6  2F01               	goto	L6
  3017  06E7                     l2324:	
  3018                           ;main.c: 345: } else {
  3019                           
  3020                           
  3021                           ;main.c: 346: printf("RXF%dSIDH: %02x\n", n, mask_buf[2]);
  3022  06E7  304A               	movlw	low (STR_24| (0+32768))
  3023  06E8  0020               	movlb	0	; select bank0
  3024  06E9  00A0               	movwf	printf@f
  3025  06EA  3092               	movlw	high (STR_24| (0+32768))
  3026  06EB  00A1               	movwf	printf@f+1
  3027  06EC  086F               	movf	main@n,w
  3028  06ED  00D9               	movwf	??_main
  3029  06EE  01DA               	clrf	??_main+1
  3030  06EF  0859               	movf	??_main,w
  3031  06F0  00A2               	movwf	?_printf+2
  3032  06F1  085A               	movf	??_main+1,w
  3033  06F2  00A3               	movwf	?_printf+3
  3034  06F3  086C               	movf	main@mask_buf+2,w
  3035  06F4  00DB               	movwf	??_main+2
  3036  06F5  01DC               	clrf	??_main+3
  3037  06F6  085B               	movf	??_main+2,w
  3038  06F7  00A4               	movwf	?_printf+4
  3039  06F8  085C               	movf	??_main+3,w
  3040  06F9  00A5               	movwf	?_printf+5
  3041  06FA  3183  232D  3185   	fcall	_printf
  3042                           
  3043                           ;main.c: 347: printf("RXF%dSIDL: %02x\n", n, mask_buf[3]);
  3044  06FD  308E               	movlw	low (STR_25| (0+32768))
  3045  06FE  0020               	movlb	0	; select bank0
  3046  06FF  00A0               	movwf	printf@f
  3047  0700  3092               	movlw	high (STR_25| (0+32768))
  3048  0701                     L6:	
  3049  0701  00A1               	movwf	printf@f+1
  3050  0702  086F               	movf	main@n,w
  3051  0703  00D9               	movwf	??_main
  3052  0704  01DA               	clrf	??_main+1
  3053  0705  0859               	movf	??_main,w
  3054  0706  00A2               	movwf	?_printf+2
  3055  0707  085A               	movf	??_main+1,w
  3056  0708  00A3               	movwf	?_printf+3
  3057  0709  086D               	movf	main@mask_buf+3,w
  3058  070A  00DB               	movwf	??_main+2
  3059  070B  01DC               	clrf	??_main+3
  3060  070C  085B               	movf	??_main+2,w
  3061  070D  00A4               	movwf	?_printf+4
  3062  070E  085C               	movf	??_main+3,w
  3063  070F  00A5               	movwf	?_printf+5
  3064  0710  3183  232D  3185   	fcall	_printf
  3065  0713                     l281:	
  3066                           
  3067                           ;main.c: 348: }
  3068                           ;main.c: 349: }
  3069                           ;main.c: 351: can_ope_mode(mode.ope_mode);
  3070  0713  0021               	movlb	1	; select bank1
  3071  0714  0822               	movf	(_mode^(0+128)+2),w
  3072  0715  3180  200C  3185   	fcall	_can_ope_mode
  3073                           
  3074                           ;main.c: 352: break;
  3075  0718  2FE3               	goto	l2362
  3076  0719                     l2326:	
  3077                           ;main.c: 353: case 'h':
  3078                           
  3079                           
  3080                           ;main.c: 354: printf("--- UART2CAN HELP ---\n");
  3081  0719  306D               	movlw	low (STR_26| (0+32768))
  3082  071A  0020               	movlb	0	; select bank0
  3083  071B  00A0               	movwf	printf@f
  3084  071C  3091               	movlw	high (STR_26| (0+32768))
  3085  071D  00A1               	movwf	printf@f+1
  3086  071E  3183  232D  3185   	fcall	_printf
  3087                           
  3088                           ;main.c: 355: printf("[Set standard identifier] @i<Standard Identifier>\n");
  3089  0721  3072               	movlw	low (STR_27| (0+32768))
  3090  0722  0020               	movlb	0	; select bank0
  3091  0723  00A0               	movwf	printf@f
  3092  0724  3090               	movlw	high (STR_27| (0+32768))
  3093  0725  00A1               	movwf	printf@f+1
  3094  0726  3183  232D  3185   	fcall	_printf
  3095                           
  3096                           ;main.c: 356: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3097  0729  3001               	movlw	low (STR_28| (0+32768))
  3098  072A  0020               	movlb	0	; select bank0
  3099  072B  00A0               	movwf	printf@f
  3100  072C  3090               	movlw	high (STR_28| (0+32768))
  3101  072D  00A1               	movwf	printf@f+1
  3102  072E  3183  232D  3185   	fcall	_printf
  3103                           
  3104                           ;main.c: 357: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3105  0731  303C               	movlw	low (STR_29| (0+32768))
  3106  0732  0020               	movlb	0	; select bank0
  3107  0733  00A0               	movwf	printf@f
  3108  0734  3090               	movlw	high (STR_29| (0+32768))
  3109  0735  00A1               	movwf	printf@f+1
  3110  0736  3183  232D  3185   	fcall	_printf
  3111                           
  3112                           ;main.c: 358: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3113  0739  30FB               	movlw	low (STR_30| (0+32768))
  3114  073A  0020               	movlb	0	; select bank0
  3115  073B  00A0               	movwf	printf@f
  3116  073C  3090               	movlw	high (STR_30| (0+32768))
  3117  073D  00A1               	movwf	printf@f+1
  3118  073E  3183  232D  3185   	fcall	_printf
  3119                           
  3120                           ;main.c: 359: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3121  0741  30D1               	movlw	low (STR_31| (0+32768))
  3122  0742  0020               	movlb	0	; select bank0
  3123  0743  00A0               	movwf	printf@f
  3124  0744  3090               	movlw	high (STR_31| (0+32768))
  3125  0745  00A1               	movwf	printf@f+1
  3126  0746  3183  232D  3185   	fcall	_printf
  3127                           
  3128                           ;main.c: 360: printf("[Send message] <message>\n");
  3129  0749  3021               	movlw	low (STR_32| (0+32768))
  3130  074A  0020               	movlb	0	; select bank0
  3131  074B  00A0               	movwf	printf@f
  3132  074C  3091               	movlw	high (STR_32| (0+32768))
  3133  074D  00A1               	movwf	printf@f+1
  3134  074E  3183  232D  3185   	fcall	_printf
  3135                           
  3136                           ;main.c: 361: printf("[Receive message] <message> will be output\n");
  3137  0751  30A5               	movlw	low (STR_33| (0+32768))
  3138  0752  0020               	movlb	0	; select bank0
  3139  0753  00A0               	movwf	printf@f
  3140  0754  3090               	movlw	high (STR_33| (0+32768))
  3141  0755  00A1               	movwf	printf@f+1
  3142  0756  3183  232D  3185   	fcall	_printf
  3143                           
  3144                           ;main.c: 362: printf("[Show this help]: @h\n");
  3145  0759  309B               	movlw	low (STR_34| (0+32768))
  3146  075A  0020               	movlb	0	; select bank0
  3147  075B  00A0               	movwf	printf@f
  3148  075C  3091               	movlw	high (STR_34| (0+32768))
  3149  075D  2F9B               	goto	L7
  3150  075E                     l2330:	
  3151                           ;main.c: 364: }
  3152                           
  3153                           ;main.c: 363: break;
  3154                           
  3155  075E  0020               	movlb	0	; select bank0
  3156  075F  086E               	movf	main@cmd,w
  3157                           
  3158                           ; Switch size 1, requested type "space"
  3159                           ; Number of cases is 6, Range of values is 102 to 118
  3160                           ; switch strategies available:
  3161                           ; Name         Instructions Cycles
  3162                           ; simple_byte           19    10 (average)
  3163                           ; direct_byte           43     9 (fixed)
  3164                           ; jumptable            263     9 (fixed)
  3165                           ;	Chosen strategy is simple_byte
  3166  0760  3A66               	xorlw	102	; case 102
  3167  0761  1903               	skipnz
  3168  0762  2E12               	goto	l2268
  3169  0763  3A0E               	xorlw	14	; case 104
  3170  0764  1903               	skipnz
  3171  0765  2F19               	goto	l2326
  3172  0766  3A01               	xorlw	1	; case 105
  3173  0767  1903               	skipnz
  3174  0768  2DBF               	goto	l2228
  3175  0769  3A04               	xorlw	4	; case 109
  3176  076A  1903               	skipnz
  3177  076B  2E12               	goto	l2268
  3178  076C  3A02               	xorlw	2	; case 111
  3179  076D  1903               	skipnz
  3180  076E  2DEA               	goto	l2246
  3181  076F  3A19               	xorlw	25	; case 118
  3182  0770  1903               	skipnz
  3183  0771  2DD3               	goto	l2232
  3184  0772  2F9F               	goto	l2344
  3185                           
  3186                           ;main.c: 365: } else {
  3187  0773  2FE3               	goto	l2362
  3188  0774                     l2332:	
  3189                           
  3190                           ;main.c: 366: bool rc = can_send(buf, idx);
  3191  0774  0021               	movlb	1	; select bank1
  3192  0775  0826               	movf	_idx^(0+128),w
  3193  0776  0020               	movlb	0	; select bank0
  3194  0777  00D9               	movwf	??_main
  3195  0778  0859               	movf	??_main,w
  3196  0779  00B9               	movwf	can_send@dlc
  3197  077A  30A8               	movlw	(low (_buf| 0))& (0+255)
  3198  077B  3181  21E8  3185   	fcall	_can_send
  3199  077E  0020               	movlb	0	; select bank0
  3200  077F  00DA               	movwf	??_main+1
  3201  0780  085A               	movf	??_main+1,w
  3202  0781  00E4               	movwf	main@rc
  3203                           
  3204                           ;main.c: 367: if (rc) {
  3205  0782  0864               	movf	main@rc,w
  3206  0783  1903               	btfsc	3,2
  3207  0784  2F93               	goto	l2340
  3208                           
  3209                           ;main.c: 368: if (mode.verbose) printf("Message sent: %s\n", buf);
  3210  0785  0021               	movlb	1	; select bank1
  3211  0786  0821               	movf	(_mode^(0+128)+1),w
  3212  0787  1903               	btfsc	3,2
  3213  0788  2FE3               	goto	l2362
  3214  0789  3005               	movlw	low ((STR_37+1)| (0+32768))
  3215  078A  0020               	movlb	0	; select bank0
  3216  078B  00A0               	movwf	printf@f
  3217  078C  3092               	movlw	high ((STR_37+1)| (0+32768))
  3218  078D  00A1               	movwf	printf@f+1
  3219  078E  30A8               	movlw	(low (_buf| 0))& (0+255)
  3220  078F  00D9               	movwf	??_main
  3221  0790  0859               	movf	??_main,w
  3222  0791  00A2               	movwf	low ((?_printf| 0+2))
  3223  0792  2F9C               	goto	L8
  3224  0793                     l2340:	
  3225                           ;main.c: 369: } else {
  3226                           
  3227                           
  3228                           ;main.c: 370: if (mode.verbose) printf("Unable to send message\n");
  3229  0793  0021               	movlb	1	; select bank1
  3230  0794  0821               	movf	(_mode^(0+128)+1),w
  3231  0795  1903               	btfsc	3,2
  3232  0796  2FE3               	goto	l2362
  3233  0797  303C               	movlw	low ((STR_38+1)| (0+32768))
  3234  0798  0020               	movlb	0	; select bank0
  3235  0799  00A0               	movwf	printf@f
  3236  079A  3091               	movlw	high ((STR_38+1)| (0+32768))
  3237  079B                     L7:	
  3238  079B  00A1               	movwf	printf@f+1
  3239  079C                     L8:	
  3240  079C  3183  232D  3185   	fcall	_printf
  3241  079F                     l2344:	
  3242  079F  2FE3               	goto	l2362
  3243  07A0                     l2346:	
  3244                           ;main.c: 374: } else if (++idx > max_idx) {
  3245                           
  3246                           ;main.c: 371: }
  3247                           ;main.c: 372: }
  3248                           ;main.c: 373: idx = 0;
  3249                           
  3250  07A0  3001               	movlw	1
  3251  07A1  0020               	movlb	0	; select bank0
  3252  07A2  00D9               	movwf	??_main
  3253  07A3  0859               	movf	??_main,w
  3254  07A4  0021               	movlb	1	; select bank1
  3255  07A5  07A6               	addwf	_idx^(0+128),f
  3256  07A6  3000               	movlw	low (_max_idx| (0+32768))
  3257  07A7  0084               	movwf	4
  3258  07A8  3090               	movlw	high (_max_idx| (0+32768))
  3259  07A9  0085               	movwf	5
  3260  07AA  0800               	movf	0,w	;code access
  3261  07AB  0020               	movlb	0	; select bank0
  3262  07AC  00DA               	movwf	??_main+1
  3263  07AD  0021               	movlb	1	; select bank1
  3264  07AE  0826               	movf	_idx^(0+128),w
  3265  07AF  0020               	movlb	0	; select bank0
  3266  07B0  025A               	subwf	??_main+1,w
  3267  07B1  1803               	skipnc
  3268  07B2  2D7D               	goto	l2208
  3269                           
  3270                           ;main.c: 375: buf[idx] = '\0';
  3271  07B3  0021               	movlb	1	; select bank1
  3272  07B4  0826               	movf	_idx^(0+128),w
  3273  07B5  3EA8               	addlw	(low (_buf| 0))& (0+255)
  3274  07B6  0086               	movwf	6
  3275  07B7  0187               	clrf	7
  3276  07B8  0181               	clrf	1
  3277                           
  3278                           ;main.c: 376: bool rc = can_send(buf, idx);
  3279  07B9  0826               	movf	_idx^(0+128),w
  3280  07BA  0020               	movlb	0	; select bank0
  3281  07BB  00D9               	movwf	??_main
  3282  07BC  0859               	movf	??_main,w
  3283  07BD  00B9               	movwf	can_send@dlc
  3284  07BE  30A8               	movlw	(low (_buf| 0))& (0+255)
  3285  07BF  3181  21E8  3185   	fcall	_can_send
  3286  07C2  0020               	movlb	0	; select bank0
  3287  07C3  00DA               	movwf	??_main+1
  3288  07C4  085A               	movf	??_main+1,w
  3289  07C5  00E5               	movwf	main@rc_450
  3290                           
  3291                           ;main.c: 377: if (rc) {
  3292  07C6  0865               	movf	main@rc_450,w
  3293  07C7  1903               	btfsc	3,2
  3294  07C8  2FD7               	goto	l2358
  3295                           
  3296                           ;main.c: 378: if (mode.verbose) printf("\nMessage sent: %s\n", buf);
  3297  07C9  0021               	movlb	1	; select bank1
  3298  07CA  0821               	movf	(_mode^(0+128)+1),w
  3299  07CB  1903               	btfsc	3,2
  3300  07CC  2FE3               	goto	l2362
  3301  07CD  3004               	movlw	low (STR_37| (0+32768))
  3302  07CE  0020               	movlb	0	; select bank0
  3303  07CF  00A0               	movwf	printf@f
  3304  07D0  3092               	movlw	high (STR_37| (0+32768))
  3305  07D1  00A1               	movwf	printf@f+1
  3306  07D2  30A8               	movlw	(low (_buf| 0))& (0+255)
  3307  07D3  00D9               	movwf	??_main
  3308  07D4  0859               	movf	??_main,w
  3309  07D5  00A2               	movwf	low ((?_printf| 0+2))
  3310  07D6  2FE0               	goto	L9
  3311  07D7                     l2358:	
  3312                           ;main.c: 379: } else {
  3313                           
  3314                           
  3315                           ;main.c: 380: if (mode.verbose) printf("\nUnable to send message\n");
  3316  07D7  0021               	movlb	1	; select bank1
  3317  07D8  0821               	movf	(_mode^(0+128)+1),w
  3318  07D9  1903               	btfsc	3,2
  3319  07DA  2FE3               	goto	l2362
  3320  07DB  303B               	movlw	low (STR_38| (0+32768))
  3321  07DC  0020               	movlb	0	; select bank0
  3322  07DD  00A0               	movwf	printf@f
  3323  07DE  3091               	movlw	high (STR_38| (0+32768))
  3324  07DF  00A1               	movwf	printf@f+1
  3325  07E0                     L9:	
  3326  07E0  3183  232D  3185   	fcall	_printf
  3327  07E3                     l2362:	
  3328                           
  3329                           ;main.c: 381: }
  3330                           ;main.c: 382: idx = 0;
  3331  07E3  0021               	movlb	1	; select bank1
  3332  07E4  2D7C               	goto	L3
  3333  07E5                     __end_of_main:	
  3334                           
  3335                           	psect	text1
  3336  0F73                     __ptext1:	
  3337 ;; *************** function _set_sid *****************
  3338 ;; Defined at:
  3339 ;;		line 37 in file "main.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  can_node        2   25[BANK0 ] unsigned int 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  sidl            1   32[BANK0 ] unsigned char 
  3344 ;;  sidh            1   31[BANK0 ] unsigned char 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3354 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3358 ;;Total ram usage:        8 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    3
  3361 ;; This function calls:
  3362 ;;		_printf
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _set_sid
  3370  0F73                     _set_sid:	
  3371                           
  3372                           ;main.c: 38: uint8_t sidh = (can_node >> 3) & 0x00ff;
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3376  0F73  0020               	movlb	0	; select bank0
  3377  0F74  083A               	movf	set_sid@can_node+1,w
  3378  0F75  00BC               	movwf	??_set_sid+1
  3379  0F76  0839               	movf	set_sid@can_node,w
  3380  0F77  00BB               	movwf	??_set_sid
  3381  0F78  36BC               	lsrf	??_set_sid+1,f
  3382  0F79  0CBB               	rrf	??_set_sid,f
  3383  0F7A  36BC               	lsrf	??_set_sid+1,f
  3384  0F7B  0CBB               	rrf	??_set_sid,f
  3385  0F7C  36BC               	lsrf	??_set_sid+1,f
  3386  0F7D  0CBB               	rrf	??_set_sid,f
  3387  0F7E  083B               	movf	??_set_sid,w
  3388  0F7F  00BD               	movwf	??_set_sid+2
  3389  0F80  083D               	movf	??_set_sid+2,w
  3390  0F81  00BF               	movwf	set_sid@sidh
  3391                           
  3392                           ;main.c: 39: uint8_t sidl = (can_node << 5) & 0x00e0;
  3393  0F82  0839               	movf	set_sid@can_node,w
  3394  0F83  00BB               	movwf	??_set_sid
  3395  0F84  3004               	movlw	4
  3396  0F85                     u1905:	
  3397  0F85  35BB               	lslf	??_set_sid,f
  3398  0F86  3EFF               	addlw	-1
  3399  0F87  1D03               	skipz
  3400  0F88  2F85               	goto	u1905
  3401  0F89  353B               	lslf	??_set_sid,w
  3402  0F8A  39E0               	andlw	224
  3403  0F8B  00BC               	movwf	??_set_sid+1
  3404  0F8C  083C               	movf	??_set_sid+1,w
  3405  0F8D  00C0               	movwf	set_sid@sidl
  3406                           
  3407                           ;main.c: 40: sid.sidh = sidh;
  3408  0F8E  083F               	movf	set_sid@sidh,w
  3409  0F8F  00BB               	movwf	??_set_sid
  3410  0F90  083B               	movf	??_set_sid,w
  3411  0F91  0021               	movlb	1	; select bank1
  3412  0F92  00A4               	movwf	_sid^(0+128)
  3413                           
  3414                           ;main.c: 41: sid.sidl = sidl;
  3415  0F93  0020               	movlb	0	; select bank0
  3416  0F94  0840               	movf	set_sid@sidl,w
  3417  0F95  00BB               	movwf	??_set_sid
  3418  0F96  083B               	movf	??_set_sid,w
  3419  0F97  0021               	movlb	1	; select bank1
  3420  0F98  00A5               	movwf	(_sid^(0+128)+1)
  3421                           
  3422                           ;main.c: 42: if (mode.debug) printf("SID set: %02x %02x\n", sidh, sidl);
  3423  0F99  0820               	movf	_mode^(0+128),w
  3424  0F9A  1903               	btfsc	3,2
  3425  0F9B  0008               	return
  3426  0F9C  30F0               	movlw	low (STR_1| (0+32768))
  3427  0F9D  0020               	movlb	0	; select bank0
  3428  0F9E  00A0               	movwf	printf@f
  3429  0F9F  3091               	movlw	high (STR_1| (0+32768))
  3430  0FA0  00A1               	movwf	printf@f+1
  3431  0FA1  083F               	movf	set_sid@sidh,w
  3432  0FA2  00BB               	movwf	??_set_sid
  3433  0FA3  01BC               	clrf	??_set_sid+1
  3434  0FA4  083B               	movf	??_set_sid,w
  3435  0FA5  00A2               	movwf	?_printf+2
  3436  0FA6  083C               	movf	??_set_sid+1,w
  3437  0FA7  00A3               	movwf	?_printf+3
  3438  0FA8  0840               	movf	set_sid@sidl,w
  3439  0FA9  00BD               	movwf	??_set_sid+2
  3440  0FAA  01BE               	clrf	??_set_sid+3
  3441  0FAB  083D               	movf	??_set_sid+2,w
  3442  0FAC  00A4               	movwf	?_printf+4
  3443  0FAD  083E               	movf	??_set_sid+3,w
  3444  0FAE  00A5               	movwf	?_printf+5
  3445  0FAF  3183  232D         	fcall	_printf
  3446  0FB1  0008               	return
  3447  0FB2                     __end_of_set_sid:	
  3448                           
  3449                           	psect	text2
  3450  0051                     __ptext2:	
  3451 ;; *************** function _can_status_check *****************
  3452 ;; Defined at:
  3453 ;;		line 223 in file "main.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  can_status_b    2   54[BANK0 ] unsigned char [2]
  3458 ;;  status          1   56[BANK0 ] unsigned char 
  3459 ;;  bytes_writte    1   53[BANK0 ] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        6 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    4
  3476 ;; This function calls:
  3477 ;;		_SPI_exchange
  3478 ;;		_can_receive
  3479 ;;		_can_txf_clear
  3480 ;;		_printf
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _can_status_check
  3488  0051                     _can_status_check:	
  3489                           
  3490                           ;main.c: 225: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3494  0051  0021               	movlb	1	; select bank1
  3495  0052  0832               	movf	(can_status_check@F2968+1)^(0+128),w
  3496  0053  0020               	movlb	0	; select bank0
  3497  0054  00D7               	movwf	can_status_check@can_status_buf+1
  3498  0055  0021               	movlb	1	; select bank1
  3499  0056  0831               	movf	can_status_check@F2968^(0+128),w
  3500  0057  0020               	movlb	0	; select bank0
  3501  0058  00D6               	movwf	can_status_check@can_status_buf
  3502                           
  3503                           ;main.c: 226: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  3504  0059  3002               	movlw	2
  3505  005A  00D3               	movwf	??_can_status_check
  3506  005B  0853               	movf	??_can_status_check,w
  3507  005C  00F8               	movwf	SPI_exchange@len
  3508  005D  3056               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3509  005E  318E  26A4  3180   	fcall	_SPI_exchange
  3510  0061  0020               	movlb	0	; select bank0
  3511  0062  00D4               	movwf	??_can_status_check+1
  3512  0063  0854               	movf	??_can_status_check+1,w
  3513  0064  00D5               	movwf	can_status_check@bytes_written
  3514                           
  3515                           ;main.c: 227: uint8_t status = can_status_buf[1];
  3516  0065  0857               	movf	can_status_check@can_status_buf+1,w
  3517  0066  00D3               	movwf	??_can_status_check
  3518  0067  0853               	movf	??_can_status_check,w
  3519  0068  00D8               	movwf	can_status_check@status
  3520                           
  3521                           ;main.c: 228: if (status == 0x00) {
  3522  0069  0858               	movf	can_status_check@status,w
  3523  006A  1903               	btfsc	3,2
  3524  006B  0008               	return
  3525                           
  3526                           ;main.c: 230: } else if ((status & 0b00000001) > 0) {
  3527                           
  3528                           ;main.c: 229: return;
  3529  006C  1C58               	btfss	can_status_check@status,0
  3530  006D  287E               	goto	l235
  3531                           
  3532                           ;main.c: 231: if (mode.debug) printf("RX0IF is on\n");
  3533  006E  0021               	movlb	1	; select bank1
  3534  006F  0820               	movf	_mode^(0+128),w
  3535  0070  1903               	btfsc	3,2
  3536  0071  287A               	goto	l236
  3537  0072  3008               	movlw	low (STR_17| (0+32768))
  3538  0073  0020               	movlb	0	; select bank0
  3539  0074  00A0               	movwf	printf@f
  3540  0075  3093               	movlw	high (STR_17| (0+32768))
  3541  0076  00A1               	movwf	printf@f+1
  3542  0077  3183  232D  3180   	fcall	_printf
  3543  007A                     l236:	
  3544                           
  3545                           ;main.c: 232: can_receive(0);
  3546  007A  3000               	movlw	0
  3547  007B  3181  2109         	fcall	_can_receive
  3548                           
  3549                           ;main.c: 233: } else if ((status & 0b00000010) > 0) {
  3550  007D  0008               	return
  3551  007E                     l235:	
  3552  007E  1CD8               	btfss	can_status_check@status,1
  3553  007F  2890               	goto	l238
  3554                           
  3555                           ;main.c: 234: if (mode.debug) printf("RX1IF is on\n");
  3556  0080  0021               	movlb	1	; select bank1
  3557  0081  0820               	movf	_mode^(0+128),w
  3558  0082  1903               	btfsc	3,2
  3559  0083  288C               	goto	l239
  3560  0084  3015               	movlw	low (STR_18| (0+32768))
  3561  0085  0020               	movlb	0	; select bank0
  3562  0086  00A0               	movwf	printf@f
  3563  0087  3093               	movlw	high (STR_18| (0+32768))
  3564  0088  00A1               	movwf	printf@f+1
  3565  0089  3183  232D  3180   	fcall	_printf
  3566  008C                     l239:	
  3567                           
  3568                           ;main.c: 235: can_receive(1);
  3569  008C  3001               	movlw	1
  3570  008D  3181  2109         	fcall	_can_receive
  3571                           
  3572                           ;main.c: 236: } else if ((status & 0b00001000) > 0) {
  3573  008F  0008               	return
  3574  0090                     l238:	
  3575  0090  1DD8               	btfss	can_status_check@status,3
  3576  0091  2896               	goto	l241
  3577                           
  3578                           ;main.c: 237: can_txf_clear(0);
  3579  0092  3000               	movlw	0
  3580  0093  318E  26EB         	fcall	_can_txf_clear
  3581                           
  3582                           ;main.c: 238: } else if ((status & 0b00100000) > 0) {
  3583  0095  0008               	return
  3584  0096                     l241:	
  3585  0096  1ED8               	btfss	can_status_check@status,5
  3586  0097  289C               	goto	l243
  3587                           
  3588                           ;main.c: 239: can_txf_clear(1);
  3589  0098  3001               	movlw	1
  3590  0099  318E  26EB         	fcall	_can_txf_clear
  3591                           
  3592                           ;main.c: 240: } else if ((status & 0b10000000) > 0) {
  3593  009B  0008               	return
  3594  009C                     l243:	
  3595  009C  1FD8               	btfss	can_status_check@status,7
  3596  009D  0008               	return
  3597                           
  3598                           ;main.c: 241: can_txf_clear(2);
  3599  009E  3002               	movlw	2
  3600  009F  318E  26EB         	fcall	_can_txf_clear
  3601  00A1  0008               	return
  3602  00A2                     __end_of_can_status_check:	
  3603                           ;main.c: 242: }
  3604                           ;main.c: 243: return;
  3605                           
  3606                           
  3607                           	psect	text3
  3608  0EEB                     __ptext3:	
  3609 ;; *************** function _can_txf_clear *****************
  3610 ;; Defined at:
  3611 ;;		line 75 in file "main.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  n               1    wreg     unsigned char 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  n               1    2[BANK0 ] unsigned char 
  3616 ;;  can_int_flag    4    5[BANK0 ] unsigned char [4]
  3617 ;;  bytes_writte    1    4[BANK0 ] unsigned char 
  3618 ;;  mask            1    3[BANK0 ] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;Total ram usage:        9 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    3
  3635 ;; This function calls:
  3636 ;;		_SPI_exchange
  3637 ;; This function is called by:
  3638 ;;		_can_status_check
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _can_txf_clear
  3644  0EEB                     _can_txf_clear:	
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3648                           ;can_txf_clear@n stored from wreg
  3649  0EEB  0020               	movlb	0	; select bank0
  3650  0EEC  00A2               	movwf	can_txf_clear@n
  3651                           
  3652                           ;main.c: 76: uint8_t mask = 0b00000001 << (n + 2);
  3653  0EED  3001               	movlw	1
  3654  0EEE  00A0               	movwf	??_can_txf_clear
  3655  0EEF  0822               	movf	can_txf_clear@n,w
  3656  0EF0  3E02               	addlw	2
  3657  0EF1  0A89               	incf	9,f
  3658  0EF2  2EF4               	goto	u1804
  3659  0EF3                     u1805:	
  3660  0EF3  35A0               	lslf	??_can_txf_clear,f
  3661  0EF4                     u1804:	
  3662  0EF4  0B89               	decfsz	9,f
  3663  0EF5  2EF3               	goto	u1805
  3664  0EF6  0820               	movf	??_can_txf_clear,w
  3665  0EF7  00A1               	movwf	??_can_txf_clear+1
  3666  0EF8  0821               	movf	??_can_txf_clear+1,w
  3667  0EF9  00A3               	movwf	can_txf_clear@mask
  3668                           
  3669                           ;main.c: 77: uint8_t can_int_flag[4];
  3670                           ;main.c: 78: can_int_flag[0] =0b00000101;
  3671  0EFA  3005               	movlw	5
  3672  0EFB  00A0               	movwf	??_can_txf_clear
  3673  0EFC  0820               	movf	??_can_txf_clear,w
  3674  0EFD  00A5               	movwf	can_txf_clear@can_int_flag
  3675                           
  3676                           ;main.c: 79: can_int_flag[1] = 0x2c;
  3677  0EFE  302C               	movlw	44
  3678  0EFF  00A0               	movwf	??_can_txf_clear
  3679  0F00  0820               	movf	??_can_txf_clear,w
  3680  0F01  00A6               	movwf	can_txf_clear@can_int_flag+1
  3681                           
  3682                           ;main.c: 80: can_int_flag[2] = mask;
  3683  0F02  0823               	movf	can_txf_clear@mask,w
  3684  0F03  00A0               	movwf	??_can_txf_clear
  3685  0F04  0820               	movf	??_can_txf_clear,w
  3686  0F05  00A7               	movwf	can_txf_clear@can_int_flag+2
  3687                           
  3688                           ;main.c: 81: can_int_flag[3] = 0x00;
  3689  0F06  01A8               	clrf	can_txf_clear@can_int_flag+3
  3690                           
  3691                           ;main.c: 82: uint8_t bytes_written = SPI_exchange(can_int_flag, 4);
  3692  0F07  3004               	movlw	4
  3693  0F08  00A0               	movwf	??_can_txf_clear
  3694  0F09  0820               	movf	??_can_txf_clear,w
  3695  0F0A  00F8               	movwf	SPI_exchange@len
  3696  0F0B  3025               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  3697  0F0C  318E  26A4         	fcall	_SPI_exchange
  3698  0F0E  0020               	movlb	0	; select bank0
  3699  0F0F  00A1               	movwf	??_can_txf_clear+1
  3700  0F10  0821               	movf	??_can_txf_clear+1,w
  3701  0F11  00A4               	movwf	can_txf_clear@bytes_written
  3702                           
  3703                           ;main.c: 86: return 0;
  3704                           ;	Return value of _can_txf_clear is never used
  3705                           
  3706                           ;main.c: 85: } else {
  3707                           
  3708                           ;main.c: 84: return 1;
  3709                           ;	Return value of _can_txf_clear is never used
  3710  0F12  0008               	return
  3711  0F13                     __end_of_can_txf_clear:	
  3712                           
  3713                           	psect	text4
  3714  0109                     __ptext4:	
  3715 ;; *************** function _can_receive *****************
  3716 ;; Defined at:
  3717 ;;		line 93 in file "main.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  n               1    wreg     unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  n               1   50[BANK0 ] unsigned char 
  3722 ;;  rx_buf         15   31[BANK0 ] unsigned char [15]
  3723 ;;  sid             2   47[BANK0 ] unsigned int 
  3724 ;;  rx_buf_ptr      1   49[BANK0 ] PTR unsigned char 
  3725 ;;		 -> can_receive@rx_buf(15), 
  3726 ;;  dlc             1   46[BANK0 ] unsigned char 
  3727 ;;  bytes_read      1   30[BANK0 ] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3741 ;;Total ram usage:       26 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    3
  3744 ;; This function calls:
  3745 ;;		_SPI_exchange
  3746 ;;		_printf
  3747 ;; This function is called by:
  3748 ;;		_can_status_check
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _can_receive
  3754  0109                     _can_receive:	
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3758                           ;can_receive@n stored from wreg
  3759  0109  0020               	movlb	0	; select bank0
  3760  010A  00D2               	movwf	can_receive@n
  3761                           
  3762                           ;main.c: 97: uint8_t rx_buf[15];
  3763                           ;main.c: 100: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  3764  010B  0852               	movf	can_receive@n,w
  3765  010C  3E4A               	addlw	low (_nm| (0+32768))
  3766  010D  0084               	movwf	4
  3767  010E  3093               	movlw	high (_nm| (0+32768))
  3768  010F  1803               	skipnc
  3769  0110  3E01               	addlw	1
  3770  0111  0085               	movwf	5
  3771  0112  0800               	movf	0,w	;code access
  3772  0113  0709               	addwf	9,w
  3773  0114  3E90               	addlw	144
  3774  0115  00B9               	movwf	??_can_receive
  3775  0116  0839               	movf	??_can_receive,w
  3776  0117  00BF               	movwf	can_receive@rx_buf
  3777                           
  3778                           ;main.c: 101: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  3779  0118  300E               	movlw	14
  3780  0119  00B9               	movwf	??_can_receive
  3781  011A  0839               	movf	??_can_receive,w
  3782  011B  00F8               	movwf	SPI_exchange@len
  3783  011C  303F               	movlw	(low (can_receive@rx_buf| 0))& (0+255)
  3784  011D  318E  26A4  3181   	fcall	_SPI_exchange
  3785  0120  0020               	movlb	0	; select bank0
  3786  0121  00BA               	movwf	??_can_receive+1
  3787  0122  083A               	movf	??_can_receive+1,w
  3788  0123  00BE               	movwf	can_receive@bytes_read
  3789                           
  3790                           ;main.c: 102: uint8_t dlc = rx_buf[5];
  3791  0124  0844               	movf	can_receive@rx_buf+5,w
  3792  0125  00B9               	movwf	??_can_receive
  3793  0126  0839               	movf	??_can_receive,w
  3794  0127  00CE               	movwf	can_receive@dlc
  3795                           
  3796                           ;main.c: 103: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  3797  0128  0841               	movf	can_receive@rx_buf+2,w
  3798  0129  00B9               	movwf	??_can_receive
  3799  012A  3005               	movlw	5
  3800  012B                     u1815:	
  3801  012B  36B9               	lsrf	??_can_receive,f
  3802  012C  0B89               	decfsz	9,f
  3803  012D  292B               	goto	u1815
  3804  012E  0839               	movf	??_can_receive,w
  3805  012F  00BA               	movwf	??_can_receive+1
  3806  0130  01BB               	clrf	??_can_receive+2
  3807  0131  0840               	movf	can_receive@rx_buf+1,w
  3808  0132  00BC               	movwf	??_can_receive+3
  3809  0133  01BD               	clrf	??_can_receive+4
  3810  0134  35BC               	lslf	??_can_receive+3,f
  3811  0135  0DBD               	rlf	??_can_receive+4,f
  3812  0136  35BC               	lslf	??_can_receive+3,f
  3813  0137  0DBD               	rlf	??_can_receive+4,f
  3814  0138  35BC               	lslf	??_can_receive+3,f
  3815  0139  0DBD               	rlf	??_can_receive+4,f
  3816  013A  083A               	movf	??_can_receive+1,w
  3817  013B  073C               	addwf	??_can_receive+3,w
  3818  013C  00CF               	movwf	can_receive@sid
  3819  013D  083B               	movf	??_can_receive+2,w
  3820  013E  3D3D               	addwfc	??_can_receive+4,w
  3821  013F  00D0               	movwf	can_receive@sid+1
  3822                           
  3823                           ;main.c: 104: sid = sid & 0b0000011111111111;
  3824  0140  30FF               	movlw	255
  3825  0141  054F               	andwf	can_receive@sid,w
  3826  0142  00CF               	movwf	can_receive@sid
  3827  0143  3007               	movlw	7
  3828  0144  0550               	andwf	can_receive@sid+1,w
  3829  0145  00D0               	movwf	can_receive@sid+1
  3830                           
  3831                           ;main.c: 105: rx_buf[6+dlc] = '\0';
  3832  0146  084E               	movf	can_receive@dlc,w
  3833  0147  3E06               	addlw	6
  3834  0148  3E3F               	addlw	(low (can_receive@rx_buf| 0))& (0+255)
  3835  0149  0086               	movwf	6
  3836  014A  0187               	clrf	7
  3837  014B  0181               	clrf	1
  3838                           
  3839                           ;main.c: 107: if (mode.debug) {
  3840  014C  0021               	movlb	1	; select bank1
  3841  014D  0820               	movf	_mode^(0+128),w
  3842  014E  1903               	btfsc	3,2
  3843  014F  29A8               	goto	l1974
  3844                           
  3845                           ;main.c: 108: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  3846  0150  3028               	movlw	low (STR_3| (0+32768))
  3847  0151  0020               	movlb	0	; select bank0
  3848  0152  00A0               	movwf	printf@f
  3849  0153  3092               	movlw	high (STR_3| (0+32768))
  3850  0154  00A1               	movwf	printf@f+1
  3851  0155  0852               	movf	can_receive@n,w
  3852  0156  00B9               	movwf	??_can_receive
  3853  0157  01BA               	clrf	??_can_receive+1
  3854  0158  0839               	movf	??_can_receive,w
  3855  0159  00A2               	movwf	?_printf+2
  3856  015A  083A               	movf	??_can_receive+1,w
  3857  015B  00A3               	movwf	?_printf+3
  3858  015C  0840               	movf	can_receive@rx_buf+1,w
  3859  015D  00BB               	movwf	??_can_receive+2
  3860  015E  01BC               	clrf	??_can_receive+3
  3861  015F  083B               	movf	??_can_receive+2,w
  3862  0160  00A4               	movwf	?_printf+4
  3863  0161  083C               	movf	??_can_receive+3,w
  3864  0162  00A5               	movwf	?_printf+5
  3865  0163  3183  232D  3181   	fcall	_printf
  3866                           
  3867                           ;main.c: 109: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  3868  0166  306C               	movlw	low (STR_4| (0+32768))
  3869  0167  0020               	movlb	0	; select bank0
  3870  0168  00A0               	movwf	printf@f
  3871  0169  3092               	movlw	high (STR_4| (0+32768))
  3872  016A  00A1               	movwf	printf@f+1
  3873  016B  0852               	movf	can_receive@n,w
  3874  016C  00B9               	movwf	??_can_receive
  3875  016D  01BA               	clrf	??_can_receive+1
  3876  016E  0839               	movf	??_can_receive,w
  3877  016F  00A2               	movwf	?_printf+2
  3878  0170  083A               	movf	??_can_receive+1,w
  3879  0171  00A3               	movwf	?_printf+3
  3880  0172  0841               	movf	can_receive@rx_buf+2,w
  3881  0173  00BB               	movwf	??_can_receive+2
  3882  0174  01BC               	clrf	??_can_receive+3
  3883  0175  083B               	movf	??_can_receive+2,w
  3884  0176  00A4               	movwf	?_printf+4
  3885  0177  083C               	movf	??_can_receive+3,w
  3886  0178  00A5               	movwf	?_printf+5
  3887  0179  3183  232D  3181   	fcall	_printf
  3888                           
  3889                           ;main.c: 110: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  3890  017C  30B0               	movlw	low (STR_5| (0+32768))
  3891  017D  0020               	movlb	0	; select bank0
  3892  017E  00A0               	movwf	printf@f
  3893  017F  3092               	movlw	high (STR_5| (0+32768))
  3894  0180  00A1               	movwf	printf@f+1
  3895  0181  0852               	movf	can_receive@n,w
  3896  0182  00B9               	movwf	??_can_receive
  3897  0183  01BA               	clrf	??_can_receive+1
  3898  0184  0839               	movf	??_can_receive,w
  3899  0185  00A2               	movwf	?_printf+2
  3900  0186  083A               	movf	??_can_receive+1,w
  3901  0187  00A3               	movwf	?_printf+3
  3902  0188  0844               	movf	can_receive@rx_buf+5,w
  3903  0189  00BB               	movwf	??_can_receive+2
  3904  018A  01BC               	clrf	??_can_receive+3
  3905  018B  083B               	movf	??_can_receive+2,w
  3906  018C  00A4               	movwf	?_printf+4
  3907  018D  083C               	movf	??_can_receive+3,w
  3908  018E  00A5               	movwf	?_printf+5
  3909  018F  3183  232D  3181   	fcall	_printf
  3910                           
  3911                           ;main.c: 111: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  3912  0192  30C0               	movlw	low (STR_6| (0+32768))
  3913  0193  0020               	movlb	0	; select bank0
  3914  0194  00A0               	movwf	printf@f
  3915  0195  3092               	movlw	high (STR_6| (0+32768))
  3916  0196  00A1               	movwf	printf@f+1
  3917  0197  0852               	movf	can_receive@n,w
  3918  0198  00B9               	movwf	??_can_receive
  3919  0199  01BA               	clrf	??_can_receive+1
  3920  019A  0839               	movf	??_can_receive,w
  3921  019B  00A2               	movwf	?_printf+2
  3922  019C  083A               	movf	??_can_receive+1,w
  3923  019D  00A3               	movwf	?_printf+3
  3924  019E  0845               	movf	can_receive@rx_buf+6,w
  3925  019F  00BB               	movwf	??_can_receive+2
  3926  01A0  01BC               	clrf	??_can_receive+3
  3927  01A1  083B               	movf	??_can_receive+2,w
  3928  01A2  00A4               	movwf	?_printf+4
  3929  01A3  083C               	movf	??_can_receive+3,w
  3930  01A4  00A5               	movwf	?_printf+5
  3931  01A5  3183  232D  3181   	fcall	_printf
  3932  01A8                     l1974:	
  3933                           
  3934                           ;main.c: 112: }
  3935                           ;main.c: 127: uint8_t *rx_buf_ptr = &rx_buf[6];
  3936  01A8  3045               	movlw	(low ((can_receive@rx_buf| 0+6)))& (0+255)
  3937  01A9  0020               	movlb	0	; select bank0
  3938  01AA  00B9               	movwf	??_can_receive
  3939  01AB  0839               	movf	??_can_receive,w
  3940  01AC  00D1               	movwf	can_receive@rx_buf_ptr
  3941                           
  3942                           ;main.c: 128: if (mode.verbose) {
  3943  01AD  0021               	movlb	1	; select bank1
  3944  01AE  0821               	movf	(_mode^(0+128)+1),w
  3945  01AF  1903               	btfsc	3,2
  3946  01B0  29BE               	goto	l1984
  3947                           
  3948                           ;main.c: 129: if (mode.with_sid) {
  3949  01B1  0823               	movf	(_mode^(0+128)+3),w
  3950  01B2  1903               	btfsc	3,2
  3951  01B3  29B9               	goto	l1982
  3952                           
  3953                           ;main.c: 130: printf("Message received: %d,%s\n", sid, rx_buf_ptr);
  3954  01B4  3054               	movlw	low (STR_7| (0+32768))
  3955  01B5  0020               	movlb	0	; select bank0
  3956  01B6  00A0               	movwf	printf@f
  3957  01B7  3091               	movlw	high (STR_7| (0+32768))
  3958  01B8  29C6               	goto	L11
  3959  01B9                     l1982:	
  3960                           ;main.c: 131: } else {
  3961                           
  3962                           
  3963                           ;main.c: 132: printf("Message received: %s\n", rx_buf_ptr);
  3964  01B9  30B1               	movlw	low (STR_8| (0+32768))
  3965  01BA  0020               	movlb	0	; select bank0
  3966  01BB  00A0               	movwf	printf@f
  3967  01BC  3091               	movlw	high (STR_8| (0+32768))
  3968  01BD  29D4               	goto	L12
  3969  01BE                     l1984:	
  3970                           ;main.c: 133: }
  3971                           ;main.c: 134: } else {
  3972                           
  3973                           
  3974                           ;main.c: 135: if (mode.with_sid) {
  3975  01BE  0021               	movlb	1	; select bank1
  3976  01BF  0823               	movf	(_mode^(0+128)+3),w
  3977  01C0  1903               	btfsc	3,2
  3978  01C1  29D0               	goto	l1988
  3979                           
  3980                           ;main.c: 136: printf("%d,%s\n", sid, rx_buf_ptr);
  3981  01C2  3066               	movlw	low ((STR_7+18)| (0+32768))
  3982  01C3  0020               	movlb	0	; select bank0
  3983  01C4  00A0               	movwf	printf@f
  3984  01C5  3091               	movlw	high ((STR_7+18)| (0+32768))
  3985  01C6                     L11:	
  3986  01C6  00A1               	movwf	printf@f+1
  3987  01C7  0850               	movf	can_receive@sid+1,w
  3988  01C8  00A3               	movwf	?_printf+3
  3989  01C9  084F               	movf	can_receive@sid,w
  3990  01CA  00A2               	movwf	?_printf+2
  3991  01CB  0851               	movf	can_receive@rx_buf_ptr,w
  3992  01CC  00B9               	movwf	??_can_receive
  3993  01CD  0839               	movf	??_can_receive,w
  3994  01CE  00A4               	movwf	low ((?_printf| 0+4))
  3995  01CF  29D9               	goto	L10
  3996  01D0                     l1988:	
  3997                           ;main.c: 137: } else {
  3998                           
  3999                           
  4000                           ;main.c: 138: printf("%s\n", rx_buf_ptr);
  4001  01D0  30C3               	movlw	low ((STR_8+18)| (0+32768))
  4002  01D1  0020               	movlb	0	; select bank0
  4003  01D2  00A0               	movwf	printf@f
  4004  01D3  3091               	movlw	high ((STR_8+18)| (0+32768))
  4005  01D4                     L12:	
  4006  01D4  00A1               	movwf	printf@f+1
  4007  01D5  0851               	movf	can_receive@rx_buf_ptr,w
  4008  01D6  00B9               	movwf	??_can_receive
  4009  01D7  0839               	movf	??_can_receive,w
  4010  01D8  00A2               	movwf	low ((?_printf| 0+2))
  4011  01D9                     L10:	
  4012  01D9  3183  232D  3181   	fcall	_printf
  4013                           
  4014                           ;main.c: 139: }
  4015                           ;main.c: 140: }
  4016                           ;main.c: 141: LATCbits.LATC3 = !LATCbits.LATC3;
  4017  01DC  1003               	clrc
  4018  01DD  0022               	movlb	2	; select bank2
  4019  01DE  1D8E               	btfss	14,3	;volatile
  4020  01DF  1403               	setc
  4021  01E0  1C03               	btfss	3,0
  4022  01E1  29E5               	goto	u1860
  4023  01E2  0022               	movlb	2	; select bank2
  4024  01E3  158E               	bsf	14,3	;volatile
  4025  01E4  0008               	return
  4026  01E5                     u1860:	
  4027  01E5  0022               	movlb	2	; select bank2
  4028  01E6  118E               	bcf	14,3	;volatile
  4029  01E7  0008               	return
  4030  01E8                     __end_of_can_receive:	
  4031                           
  4032                           	psect	text5
  4033  01E8                     __ptext5:	
  4034 ;; *************** function _can_send *****************
  4035 ;; Defined at:
  4036 ;;		line 147 in file "main.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  buf             1    wreg     PTR unsigned char 
  4039 ;;		 -> buf(9), 
  4040 ;;  dlc             1   25[BANK0 ] unsigned char 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  buf             1   46[BANK0 ] PTR unsigned char 
  4043 ;;		 -> buf(9), 
  4044 ;;  txb_ctrl_buf    1   49[BANK0 ] unsigned char [1]
  4045 ;;  tx_buf         14   30[BANK0 ] unsigned char [14]
  4046 ;;  debug_buf       3   51[BANK0 ] unsigned char [3]
  4047 ;;  can_status_b    2   44[BANK0 ] unsigned char [2]
  4048 ;;  n               1   55[BANK0 ] unsigned char 
  4049 ;;  i               1   54[BANK0 ] unsigned char 
  4050 ;;  status          1   50[BANK0 ] unsigned char 
  4051 ;;  bytes_writte    1   48[BANK0 ] unsigned char 
  4052 ;;  len             1   47[BANK0 ] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      unsigned char 
  4055 ;; Registers used:
  4056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4062 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;Total ram usage:       31 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		_SPI_exchange
  4071 ;;		_printf
  4072 ;; This function is called by:
  4073 ;;		_main
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _can_send
  4079  01E8                     _can_send:	
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4083                           ;can_send@buf stored from wreg
  4084  01E8  0020               	movlb	0	; select bank0
  4085  01E9  00CE               	movwf	can_send@buf
  4086                           
  4087                           ;main.c: 148: uint8_t i;
  4088                           ;main.c: 149: uint8_t n = 0;
  4089  01EA  01D7               	clrf	can_send@n
  4090                           
  4091                           ;main.c: 151: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  4092  01EB  0021               	movlb	1	; select bank1
  4093  01EC  0834               	movf	(can_send@F2958+1)^(0+128),w
  4094  01ED  0020               	movlb	0	; select bank0
  4095  01EE  00CD               	movwf	can_send@can_status_buf+1
  4096  01EF  0021               	movlb	1	; select bank1
  4097  01F0  0833               	movf	can_send@F2958^(0+128),w
  4098  01F1  0020               	movlb	0	; select bank0
  4099  01F2  00CC               	movwf	can_send@can_status_buf
  4100                           
  4101                           ;main.c: 152: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  4102  01F3  3002               	movlw	2
  4103  01F4  00BA               	movwf	??_can_send
  4104  01F5  083A               	movf	??_can_send,w
  4105  01F6  00F8               	movwf	SPI_exchange@len
  4106  01F7  304C               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  4107  01F8  318E  26A4  3181   	fcall	_SPI_exchange
  4108  01FB  0020               	movlb	0	; select bank0
  4109  01FC  00BB               	movwf	??_can_send+1
  4110  01FD  083B               	movf	??_can_send+1,w
  4111  01FE  00D0               	movwf	can_send@bytes_written
  4112                           
  4113                           ;main.c: 153: uint8_t status = can_status_buf[1];
  4114  01FF  084D               	movf	can_send@can_status_buf+1,w
  4115  0200  00BA               	movwf	??_can_send
  4116  0201  083A               	movf	??_can_send,w
  4117  0202  00D2               	movwf	can_send@status
  4118                           
  4119                           ;main.c: 154: if ((status & 0b00000100) == 0) {
  4120  0203  1952               	btfsc	can_send@status,2
  4121  0204  2A14               	goto	l211
  4122                           
  4123                           ;main.c: 155: if (mode.debug) printf("TXB0 is idle\n");
  4124  0205  0021               	movlb	1	; select bank1
  4125  0206  0820               	movf	_mode^(0+128),w
  4126  0207  1903               	btfsc	3,2
  4127  0208  2A11               	goto	l2042
  4128  0209  30DE               	movlw	low (STR_11| (0+32768))
  4129  020A  0020               	movlb	0	; select bank0
  4130  020B  00A0               	movwf	printf@f
  4131  020C  3092               	movlw	high (STR_11| (0+32768))
  4132  020D  00A1               	movwf	printf@f+1
  4133  020E  3183  232D  3181   	fcall	_printf
  4134  0211                     l2042:	
  4135                           
  4136                           ;main.c: 156: n = 0;
  4137  0211  0020               	movlb	0	; select bank0
  4138  0212  01D7               	clrf	can_send@n
  4139                           
  4140                           ;main.c: 157: } else if ((status & 0b00010000) == 0) {
  4141  0213  2A39               	goto	l2056
  4142  0214                     l211:	
  4143  0214  1A52               	btfsc	can_send@status,4
  4144  0215  2A26               	goto	l214
  4145                           
  4146                           ;main.c: 158: if (mode.debug) printf("TXB1 is idle\n");
  4147  0216  0021               	movlb	1	; select bank1
  4148  0217  0820               	movf	_mode^(0+128),w
  4149  0218  1903               	btfsc	3,2
  4150  0219  2A22               	goto	l2048
  4151  021A  30EC               	movlw	low (STR_12| (0+32768))
  4152  021B  0020               	movlb	0	; select bank0
  4153  021C  00A0               	movwf	printf@f
  4154  021D  3092               	movlw	high (STR_12| (0+32768))
  4155  021E  00A1               	movwf	printf@f+1
  4156  021F  3183  232D  3181   	fcall	_printf
  4157  0222                     l2048:	
  4158                           
  4159                           ;main.c: 159: n = 1;
  4160  0222  0020               	movlb	0	; select bank0
  4161  0223  01D7               	clrf	can_send@n
  4162  0224  0AD7               	incf	can_send@n,f
  4163                           
  4164                           ;main.c: 160: } else if ((status & 0b01000000) > 0) {
  4165  0225  2A39               	goto	l2056
  4166  0226                     l214:	
  4167  0226  1F52               	btfss	can_send@status,6
  4168  0227  2A39               	goto	l2056
  4169                           
  4170                           ;main.c: 161: if (mode.debug) printf("TXB2 is idle\n");
  4171  0228  0021               	movlb	1	; select bank1
  4172  0229  0820               	movf	_mode^(0+128),w
  4173  022A  1903               	btfsc	3,2
  4174  022B  2A34               	goto	l2054
  4175  022C  30FA               	movlw	low (STR_13| (0+32768))
  4176  022D  0020               	movlb	0	; select bank0
  4177  022E  00A0               	movwf	printf@f
  4178  022F  3092               	movlw	high (STR_13| (0+32768))
  4179  0230  00A1               	movwf	printf@f+1
  4180  0231  3183  232D  3181   	fcall	_printf
  4181  0234                     l2054:	
  4182                           
  4183                           ;main.c: 162: n = 2;
  4184  0234  3002               	movlw	2
  4185  0235  0020               	movlb	0	; select bank0
  4186  0236  00BA               	movwf	??_can_send
  4187  0237  083A               	movf	??_can_send,w
  4188  0238  00D7               	movwf	can_send@n
  4189  0239                     l2056:	
  4190                           
  4191                           ;main.c: 163: }
  4192                           ;main.c: 167: uint8_t tx_buf[14];
  4193                           ;main.c: 170: tx_buf[0] = 0b01000000 + abc[n];
  4194  0239  0857               	movf	can_send@n,w
  4195  023A  3E44               	addlw	low (_abc| (0+32768))
  4196  023B  0084               	movwf	4
  4197  023C  3093               	movlw	high (_abc| (0+32768))
  4198  023D  1803               	skipnc
  4199  023E  3E01               	addlw	1
  4200  023F  0085               	movwf	5
  4201  0240  0800               	movf	0,w	;code access
  4202  0241  3E40               	addlw	64
  4203  0242  00BA               	movwf	??_can_send
  4204  0243  083A               	movf	??_can_send,w
  4205  0244  00BE               	movwf	can_send@tx_buf
  4206                           
  4207                           ;main.c: 172: tx_buf[1] = sid.sidh;
  4208  0245  0021               	movlb	1	; select bank1
  4209  0246  0824               	movf	_sid^(0+128),w
  4210  0247  0020               	movlb	0	; select bank0
  4211  0248  00BA               	movwf	??_can_send
  4212  0249  083A               	movf	??_can_send,w
  4213  024A  00BF               	movwf	can_send@tx_buf+1
  4214                           
  4215                           ;main.c: 174: tx_buf[2] = sid.sidl;
  4216  024B  0021               	movlb	1	; select bank1
  4217  024C  0825               	movf	(_sid^(0+128)+1),w
  4218  024D  0020               	movlb	0	; select bank0
  4219  024E  00BA               	movwf	??_can_send
  4220  024F  083A               	movf	??_can_send,w
  4221  0250  00C0               	movwf	can_send@tx_buf+2
  4222                           
  4223                           ;main.c: 176: tx_buf[3] = 0;
  4224  0251  01C1               	clrf	can_send@tx_buf+3
  4225                           
  4226                           ;main.c: 178: tx_buf[4] = 0;
  4227  0252  01C2               	clrf	can_send@tx_buf+4
  4228                           
  4229                           ;main.c: 180: tx_buf[5] = dlc;
  4230  0253  0839               	movf	can_send@dlc,w
  4231  0254  00BA               	movwf	??_can_send
  4232  0255  083A               	movf	??_can_send,w
  4233  0256  00C3               	movwf	can_send@tx_buf+5
  4234                           
  4235                           ;main.c: 183: for(i=0; i<dlc; i++) {
  4236  0257  01D6               	clrf	can_send@i
  4237  0258                     l2078:	
  4238  0258  0839               	movf	can_send@dlc,w
  4239  0259  0256               	subwf	can_send@i,w
  4240  025A  1803               	btfsc	3,0
  4241  025B  2A89               	goto	l2080
  4242                           
  4243                           ;main.c: 184: tx_buf[6+i] = buf[i];
  4244  025C  0856               	movf	can_send@i,w
  4245  025D  074E               	addwf	can_send@buf,w
  4246  025E  00BA               	movwf	??_can_send
  4247  025F  083A               	movf	??_can_send,w
  4248  0260  0086               	movwf	6
  4249  0261  0187               	clrf	7
  4250  0262  0801               	movf	1,w
  4251  0263  00BB               	movwf	??_can_send+1
  4252  0264  0856               	movf	can_send@i,w
  4253  0265  3E06               	addlw	6
  4254  0266  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4255  0267  0086               	movwf	6
  4256  0268  0187               	clrf	7
  4257  0269  083B               	movf	??_can_send+1,w
  4258  026A  0081               	movwf	1
  4259                           
  4260                           ;main.c: 185: if (mode.debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4261  026B  0021               	movlb	1	; select bank1
  4262  026C  0820               	movf	_mode^(0+128),w
  4263  026D  1903               	btfsc	3,2
  4264  026E  2A83               	goto	l2076
  4265  026F  30DC               	movlw	low (STR_14| (0+32768))
  4266  0270  0020               	movlb	0	; select bank0
  4267  0271  00A0               	movwf	printf@f
  4268  0272  3091               	movlw	high (STR_14| (0+32768))
  4269  0273  00A1               	movwf	printf@f+1
  4270  0274  0856               	movf	can_send@i,w
  4271  0275  3E06               	addlw	6
  4272  0276  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4273  0277  0086               	movwf	6
  4274  0278  0187               	clrf	7
  4275  0279  0801               	movf	1,w
  4276  027A  00BA               	movwf	??_can_send
  4277  027B  01BB               	clrf	??_can_send+1
  4278  027C  083A               	movf	??_can_send,w
  4279  027D  00A2               	movwf	?_printf+2
  4280  027E  083B               	movf	??_can_send+1,w
  4281  027F  00A3               	movwf	?_printf+3
  4282  0280  3183  232D  3181   	fcall	_printf
  4283  0283                     l2076:	
  4284  0283  3001               	movlw	1
  4285  0284  0020               	movlb	0	; select bank0
  4286  0285  00BA               	movwf	??_can_send
  4287  0286  083A               	movf	??_can_send,w
  4288  0287  07D6               	addwf	can_send@i,f
  4289  0288  2A58               	goto	l2078
  4290  0289                     l2080:	
  4291                           
  4292                           ;main.c: 186: }
  4293                           ;main.c: 189: uint8_t len = 6 + dlc;
  4294  0289  0839               	movf	can_send@dlc,w
  4295  028A  3E06               	addlw	6
  4296  028B  00BA               	movwf	??_can_send
  4297  028C  083A               	movf	??_can_send,w
  4298  028D  00CF               	movwf	can_send@len
  4299                           
  4300                           ;main.c: 190: uint8_t bytes_written = SPI_exchange(tx_buf, len);
  4301  028E  084F               	movf	can_send@len,w
  4302  028F  00BA               	movwf	??_can_send
  4303  0290  083A               	movf	??_can_send,w
  4304  0291  00F8               	movwf	SPI_exchange@len
  4305  0292  303E               	movlw	(low (can_send@tx_buf| 0))& (0+255)
  4306  0293  318E  26A4  3181   	fcall	_SPI_exchange
  4307  0296  0020               	movlb	0	; select bank0
  4308  0297  00BB               	movwf	??_can_send+1
  4309  0298  083B               	movf	??_can_send+1,w
  4310  0299  00D0               	movwf	can_send@bytes_written
  4311                           
  4312                           ;main.c: 192: uint8_t debug_buf[3];
  4313                           ;main.c: 193: debug_buf[0] = 0b00000011;
  4314  029A  3003               	movlw	3
  4315  029B  00BA               	movwf	??_can_send
  4316  029C  083A               	movf	??_can_send,w
  4317  029D  00D3               	movwf	can_send@debug_buf
  4318                           
  4319                           ;main.c: 194: debug_buf[1] = txbnsidh[n];
  4320  029E  0857               	movf	can_send@n,w
  4321  029F  3E41               	addlw	low (_txbnsidh| (0+32768))
  4322  02A0  0084               	movwf	4
  4323  02A1  3093               	movlw	high (_txbnsidh| (0+32768))
  4324  02A2  1803               	skipnc
  4325  02A3  3E01               	addlw	1
  4326  02A4  0085               	movwf	5
  4327  02A5  0800               	movf	0,w	;code access
  4328  02A6  00BA               	movwf	??_can_send
  4329  02A7  083A               	movf	??_can_send,w
  4330  02A8  00D4               	movwf	can_send@debug_buf+1
  4331                           
  4332                           ;main.c: 195: debug_buf[2] = 0x00;
  4333  02A9  01D5               	clrf	can_send@debug_buf+2
  4334                           
  4335                           ;main.c: 196: SPI_exchange(debug_buf, 3);
  4336  02AA  3003               	movlw	3
  4337  02AB  00BA               	movwf	??_can_send
  4338  02AC  083A               	movf	??_can_send,w
  4339  02AD  00F8               	movwf	SPI_exchange@len
  4340  02AE  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4341  02AF  318E  26A4  3181   	fcall	_SPI_exchange
  4342                           
  4343                           ;main.c: 198: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  4344  02B2  0021               	movlb	1	; select bank1
  4345  02B3  0820               	movf	_mode^(0+128),w
  4346  02B4  1903               	btfsc	3,2
  4347  02B5  2ACC               	goto	l2096
  4348  02B6  3039               	movlw	low (STR_15| (0+32768))
  4349  02B7  0020               	movlb	0	; select bank0
  4350  02B8  00A0               	movwf	printf@f
  4351  02B9  3092               	movlw	high (STR_15| (0+32768))
  4352  02BA  00A1               	movwf	printf@f+1
  4353  02BB  0857               	movf	can_send@n,w
  4354  02BC  00BA               	movwf	??_can_send
  4355  02BD  01BB               	clrf	??_can_send+1
  4356  02BE  083A               	movf	??_can_send,w
  4357  02BF  00A2               	movwf	?_printf+2
  4358  02C0  083B               	movf	??_can_send+1,w
  4359  02C1  00A3               	movwf	?_printf+3
  4360  02C2  0855               	movf	can_send@debug_buf+2,w
  4361  02C3  00BC               	movwf	??_can_send+2
  4362  02C4  01BD               	clrf	??_can_send+3
  4363  02C5  083C               	movf	??_can_send+2,w
  4364  02C6  00A4               	movwf	?_printf+4
  4365  02C7  083D               	movf	??_can_send+3,w
  4366  02C8  00A5               	movwf	?_printf+5
  4367  02C9  3183  232D  3181   	fcall	_printf
  4368  02CC                     l2096:	
  4369                           
  4370                           ;main.c: 199: debug_buf[0] = 0b00000011;
  4371  02CC  3003               	movlw	3
  4372  02CD  0020               	movlb	0	; select bank0
  4373  02CE  00BA               	movwf	??_can_send
  4374  02CF  083A               	movf	??_can_send,w
  4375  02D0  00D3               	movwf	can_send@debug_buf
  4376                           
  4377                           ;main.c: 200: debug_buf[1] = txbnsidh[n] + 1;
  4378  02D1  0857               	movf	can_send@n,w
  4379  02D2  3E41               	addlw	low (_txbnsidh| (0+32768))
  4380  02D3  0084               	movwf	4
  4381  02D4  3093               	movlw	high (_txbnsidh| (0+32768))
  4382  02D5  1803               	skipnc
  4383  02D6  3E01               	addlw	1
  4384  02D7  0085               	movwf	5
  4385  02D8  0800               	movf	0,w	;code access
  4386  02D9  3E01               	addlw	1
  4387  02DA  00BA               	movwf	??_can_send
  4388  02DB  083A               	movf	??_can_send,w
  4389  02DC  00D4               	movwf	can_send@debug_buf+1
  4390                           
  4391                           ;main.c: 201: debug_buf[2] = 0x00;
  4392  02DD  01D5               	clrf	can_send@debug_buf+2
  4393                           
  4394                           ;main.c: 202: SPI_exchange(debug_buf, 3);
  4395  02DE  3003               	movlw	3
  4396  02DF  00BA               	movwf	??_can_send
  4397  02E0  083A               	movf	??_can_send,w
  4398  02E1  00F8               	movwf	SPI_exchange@len
  4399  02E2  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4400  02E3  318E  26A4  3181   	fcall	_SPI_exchange
  4401                           
  4402                           ;main.c: 204: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  4403  02E6  0021               	movlb	1	; select bank1
  4404  02E7  0820               	movf	_mode^(0+128),w
  4405  02E8  1903               	btfsc	3,2
  4406  02E9  2B00               	goto	l2108
  4407  02EA  307D               	movlw	low (STR_16| (0+32768))
  4408  02EB  0020               	movlb	0	; select bank0
  4409  02EC  00A0               	movwf	printf@f
  4410  02ED  3092               	movlw	high (STR_16| (0+32768))
  4411  02EE  00A1               	movwf	printf@f+1
  4412  02EF  0857               	movf	can_send@n,w
  4413  02F0  00BA               	movwf	??_can_send
  4414  02F1  01BB               	clrf	??_can_send+1
  4415  02F2  083A               	movf	??_can_send,w
  4416  02F3  00A2               	movwf	?_printf+2
  4417  02F4  083B               	movf	??_can_send+1,w
  4418  02F5  00A3               	movwf	?_printf+3
  4419  02F6  0855               	movf	can_send@debug_buf+2,w
  4420  02F7  00BC               	movwf	??_can_send+2
  4421  02F8  01BD               	clrf	??_can_send+3
  4422  02F9  083C               	movf	??_can_send+2,w
  4423  02FA  00A4               	movwf	?_printf+4
  4424  02FB  083D               	movf	??_can_send+3,w
  4425  02FC  00A5               	movwf	?_printf+5
  4426  02FD  3183  232D  3181   	fcall	_printf
  4427  0300                     l2108:	
  4428                           
  4429                           ;main.c: 206: if (bytes_written == len) {
  4430  0300  0020               	movlb	0	; select bank0
  4431  0301  0850               	movf	can_send@bytes_written,w
  4432  0302  064F               	xorwf	can_send@len,w
  4433  0303  1D03               	skipz
  4434  0304  2B2B               	goto	l2122
  4435                           
  4436                           ;main.c: 208: uint8_t txb_ctrl_buf[1];
  4437                           ;main.c: 209: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  4438  0305  3001               	movlw	1
  4439  0306  00BA               	movwf	??_can_send
  4440  0307  0A57               	incf	can_send@n,w
  4441  0308  2B0A               	goto	u2054
  4442  0309                     u2055:	
  4443  0309  35BA               	lslf	??_can_send,f
  4444  030A                     u2054:	
  4445  030A  0B89               	decfsz	9,f
  4446  030B  2B09               	goto	u2055
  4447  030C  083A               	movf	??_can_send,w
  4448  030D  3E80               	addlw	128
  4449  030E  00BB               	movwf	??_can_send+1
  4450  030F  083B               	movf	??_can_send+1,w
  4451  0310  00D1               	movwf	can_send@txb_ctrl_buf
  4452                           
  4453                           ;main.c: 210: bytes_written = SPI_exchange(txb_ctrl_buf, 1);
  4454  0311  01F8               	clrf	SPI_exchange@len
  4455  0312  0AF8               	incf	SPI_exchange@len,f
  4456  0313  3051               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4457  0314  318E  26A4  3181   	fcall	_SPI_exchange
  4458  0317  0020               	movlb	0	; select bank0
  4459  0318  00BA               	movwf	??_can_send
  4460  0319  083A               	movf	??_can_send,w
  4461  031A  00D0               	movwf	can_send@bytes_written
  4462                           
  4463                           ;main.c: 211: if (bytes_written == 1) {
  4464  031B  0350               	decf	can_send@bytes_written,w
  4465  031C  1D03               	btfss	3,2
  4466  031D  2B2B               	goto	l2122
  4467                           
  4468                           ;main.c: 212: LATCbits.LATC3 = !LATCbits.LATC3;
  4469  031E  1003               	clrc
  4470  031F  0022               	movlb	2	; select bank2
  4471  0320  1D8E               	btfss	14,3	;volatile
  4472  0321  1403               	setc
  4473  0322  1C03               	btfss	3,0
  4474  0323  2B27               	goto	u2070
  4475  0324  0022               	movlb	2	; select bank2
  4476  0325  158E               	bsf	14,3	;volatile
  4477  0326  2B29               	goto	l2118
  4478  0327                     u2070:	
  4479  0327  0022               	movlb	2	; select bank2
  4480  0328  118E               	bcf	14,3	;volatile
  4481  0329                     l2118:	
  4482                           
  4483                           ;main.c: 213: return 1;
  4484  0329  3001               	movlw	1
  4485  032A  0008               	return
  4486  032B                     l2122:	
  4487                           
  4488                           ;main.c: 214: }
  4489                           ;main.c: 215: }
  4490                           ;main.c: 217: return 0;
  4491  032B  3000               	movlw	0
  4492  032C  0008               	return
  4493  032D                     __end_of_can_send:	
  4494                           
  4495                           	psect	text6
  4496  000C                     __ptext6:	
  4497 ;; *************** function _can_ope_mode *****************
  4498 ;; Defined at:
  4499 ;;		line 55 in file "main.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  ope_mode        1    wreg     unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  ope_mode        1   27[BANK0 ] unsigned char 
  4504 ;;  can_ctrl_buf    3   29[BANK0 ] unsigned char [3]
  4505 ;;  bytes_writte    1   28[BANK0 ] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      unsigned char 
  4508 ;; Registers used:
  4509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;Total ram usage:        7 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    3
  4522 ;; This function calls:
  4523 ;;		_SPI_exchange
  4524 ;;		_printf
  4525 ;; This function is called by:
  4526 ;;		_main
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _can_ope_mode
  4532  000C                     _can_ope_mode:	
  4533                           
  4534                           ;incstack = 0
  4535                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4536                           ;can_ope_mode@ope_mode stored from wreg
  4537  000C  0020               	movlb	0	; select bank0
  4538  000D  00BB               	movwf	can_ope_mode@ope_mode
  4539                           
  4540                           ;main.c: 56: uint8_t can_ctrl_buf[3];
  4541                           ;main.c: 57: can_ctrl_buf[0] = 0b00000010;
  4542  000E  3002               	movlw	2
  4543  000F  00B9               	movwf	??_can_ope_mode
  4544  0010  0839               	movf	??_can_ope_mode,w
  4545  0011  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4546                           
  4547                           ;main.c: 58: can_ctrl_buf[1] = 0x0f;
  4548  0012  300F               	movlw	15
  4549  0013  00B9               	movwf	??_can_ope_mode
  4550  0014  0839               	movf	??_can_ope_mode,w
  4551  0015  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4552                           
  4553                           ;main.c: 59: can_ctrl_buf[2] = ope_mode;
  4554  0016  083B               	movf	can_ope_mode@ope_mode,w
  4555  0017  00B9               	movwf	??_can_ope_mode
  4556  0018  0839               	movf	??_can_ope_mode,w
  4557  0019  00BF               	movwf	can_ope_mode@can_ctrl_buf+2
  4558                           
  4559                           ;main.c: 60: uint8_t bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4560  001A  3003               	movlw	3
  4561  001B  00B9               	movwf	??_can_ope_mode
  4562  001C  0839               	movf	??_can_ope_mode,w
  4563  001D  00F8               	movwf	SPI_exchange@len
  4564  001E  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4565  001F  318E  26A4  3180   	fcall	_SPI_exchange
  4566  0022  0020               	movlb	0	; select bank0
  4567  0023  00BA               	movwf	??_can_ope_mode+1
  4568  0024  083A               	movf	??_can_ope_mode+1,w
  4569  0025  00BC               	movwf	can_ope_mode@bytes_written
  4570                           
  4571                           ;main.c: 61: if (bytes_written == 3) {
  4572  0026  3003               	movlw	3
  4573  0027  063C               	xorwf	can_ope_mode@bytes_written,w
  4574  0028  1D03               	btfss	3,2
  4575  0029  0008               	return
  4576                           
  4577                           ;main.c: 62: can_ctrl_buf[0] = 0b00000011;
  4578  002A  3003               	movlw	3
  4579  002B  00B9               	movwf	??_can_ope_mode
  4580  002C  0839               	movf	??_can_ope_mode,w
  4581  002D  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4582                           
  4583                           ;main.c: 63: can_ctrl_buf[1] = 0x0e;
  4584  002E  300E               	movlw	14
  4585  002F  00B9               	movwf	??_can_ope_mode
  4586  0030  0839               	movf	??_can_ope_mode,w
  4587  0031  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4588                           
  4589                           ;main.c: 64: bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4590  0032  3003               	movlw	3
  4591  0033  00B9               	movwf	??_can_ope_mode
  4592  0034  0839               	movf	??_can_ope_mode,w
  4593  0035  00F8               	movwf	SPI_exchange@len
  4594  0036  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4595  0037  318E  26A4  3180   	fcall	_SPI_exchange
  4596  003A  0020               	movlb	0	; select bank0
  4597  003B  00BA               	movwf	??_can_ope_mode+1
  4598  003C  083A               	movf	??_can_ope_mode+1,w
  4599  003D  00BC               	movwf	can_ope_mode@bytes_written
  4600                           
  4601                           ;main.c: 65: if (mode.debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  4602  003E  0021               	movlb	1	; select bank1
  4603  003F  0820               	movf	_mode^(0+128),w
  4604  0040  1903               	btfsc	3,2
  4605  0041  0008               	return
  4606  0042  30CF               	movlw	low (STR_2| (0+32768))
  4607  0043  0020               	movlb	0	; select bank0
  4608  0044  00A0               	movwf	printf@f
  4609  0045  3092               	movlw	high (STR_2| (0+32768))
  4610  0046  00A1               	movwf	printf@f+1
  4611  0047  083F               	movf	can_ope_mode@can_ctrl_buf+2,w
  4612  0048  00B9               	movwf	??_can_ope_mode
  4613  0049  01BA               	clrf	??_can_ope_mode+1
  4614  004A  0839               	movf	??_can_ope_mode,w
  4615  004B  00A2               	movwf	?_printf+2
  4616  004C  083A               	movf	??_can_ope_mode+1,w
  4617  004D  00A3               	movwf	?_printf+3
  4618  004E  3183  232D         	fcall	_printf
  4619                           
  4620                           ;main.c: 68: return 0;
  4621                           ;	Return value of _can_ope_mode is never used
  4622                           
  4623                           ;main.c: 67: } else {
  4624                           
  4625                           ;main.c: 66: return 1;
  4626                           ;	Return value of _can_ope_mode is never used
  4627  0050  0008               	return
  4628  0051                     __end_of_can_ope_mode:	
  4629                           
  4630                           	psect	text7
  4631  032D                     __ptext7:	
  4632 ;; *************** function _printf *****************
  4633 ;; Defined at:
  4634 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  4637 ;;		 -> STR_38(25), STR_37(19), STR_36(24), STR_35(18), 
  4638 ;;		 -> STR_34(22), STR_33(44), STR_32(26), STR_31(42), 
  4639 ;;		 -> STR_30(38), STR_29(54), STR_28(59), STR_27(51), 
  4640 ;;		 -> STR_26(23), STR_25(17), STR_24(17), STR_23(17), 
  4641 ;;		 -> STR_22(17), STR_21(23), STR_20(21), STR_19(3), 
  4642 ;;		 -> STR_18(13), STR_17(13), STR_16(17), STR_15(17), 
  4643 ;;		 -> STR_14(20), STR_13(14), STR_12(14), STR_11(14), 
  4644 ;;		 -> STR_10(4), STR_9(7), STR_8(22), STR_7(25), 
  4645 ;;		 -> STR_6(15), STR_5(16), STR_4(17), STR_3(17), 
  4646 ;;		 -> STR_2(15), STR_1(20), 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  idx             1   12[BANK0 ] unsigned char 
  4649 ;;  tmpval          4    0        struct .
  4650 ;;  width           2   22[BANK0 ] int 
  4651 ;;  val             2   19[BANK0 ] unsigned int 
  4652 ;;  len             2   16[BANK0 ] unsigned int 
  4653 ;;  cp              2   14[BANK0 ] PTR const unsigned char 
  4654 ;;		 -> STR_39(7), printf@c(1), buf(9), can_receive@rx_buf(15), 
  4655 ;;  c               1   24[BANK0 ] char 
  4656 ;;  flag            1   21[BANK0 ] unsigned char 
  4657 ;;  ap              1   18[BANK0 ] PTR void [1]
  4658 ;;		 -> ?_printf(2), 
  4659 ;;  prec            1   13[BANK0 ] char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  2    0[BANK0 ] int 
  4662 ;; Registers used:
  4663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4669 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;Total ram usage:       25 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    2
  4676 ;; This function calls:
  4677 ;;		___lwdiv
  4678 ;;		___lwmod
  4679 ;;		___wmul
  4680 ;;		_isdigit
  4681 ;;		_putch
  4682 ;; This function is called by:
  4683 ;;		_set_sid
  4684 ;;		_can_ope_mode
  4685 ;;		_can_receive
  4686 ;;		_can_send
  4687 ;;		_can_status_check
  4688 ;;		_main
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _printf
  4694  032D                     _printf:	
  4695                           
  4696                           ;doprnt.c: 466: va_list ap;
  4697                           ;doprnt.c: 499: signed char c;
  4698                           ;doprnt.c: 501: int width;
  4699                           ;doprnt.c: 506: signed char prec;
  4700                           ;doprnt.c: 508: unsigned char flag;
  4701                           ;doprnt.c: 523: union {
  4702                           ;doprnt.c: 524: unsigned long vd;
  4703                           ;doprnt.c: 525: double integ;
  4704                           ;doprnt.c: 526: } tmpval;
  4705                           ;doprnt.c: 528: unsigned int val;
  4706                           ;doprnt.c: 529: unsigned len;
  4707                           ;doprnt.c: 530: const char * cp;
  4708                           ;doprnt.c: 533: *ap = __va_start();
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4712  032D  3022               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4713  032E  0020               	movlb	0	; select bank0
  4714  032F  00A8               	movwf	??_printf
  4715  0330  0828               	movf	??_printf,w
  4716  0331  00B2               	movwf	printf@ap
  4717  0332                     l1896:	
  4718                           ;doprnt.c: 536: while(c = *f++) {
  4719                           
  4720  0332  0020               	movlb	0	; select bank0
  4721  0333  0821               	movf	printf@f+1,w
  4722  0334  00A9               	movwf	??_printf+1
  4723  0335  0820               	movf	printf@f,w
  4724  0336  00A8               	movwf	??_printf
  4725  0337  0AA0               	incf	printf@f,f
  4726  0338  1903               	skipnz
  4727  0339  0AA1               	incf	printf@f+1,f
  4728  033A  0828               	movf	??_printf,w
  4729  033B  0084               	movwf	4
  4730  033C  0829               	movf	??_printf+1,w
  4731  033D  0085               	movwf	5
  4732  033E  0800               	movf	0,w	;code access
  4733  033F  00AA               	movwf	??_printf+2
  4734  0340  082A               	movf	??_printf+2,w
  4735  0341  00B8               	movwf	printf@c
  4736  0342  0838               	movf	printf@c,w
  4737  0343  1903               	btfsc	3,2
  4738  0344  0008               	return
  4739                           
  4740                           ;doprnt.c: 538: if(c != '%')
  4741  0345  3025               	movlw	37
  4742  0346  0638               	xorwf	printf@c,w
  4743  0347  1903               	btfsc	3,2
  4744  0348  2B4E               	goto	l1748
  4745                           
  4746                           ;doprnt.c: 540: {
  4747                           ;doprnt.c: 541: (putch(c) );
  4748  0349  0838               	movf	printf@c,w
  4749  034A  318E  2650  3183   	fcall	_putch
  4750                           
  4751                           ;doprnt.c: 542: continue;
  4752  034D  2B32               	goto	l1896
  4753  034E                     l1748:	
  4754                           
  4755                           ;doprnt.c: 543: }
  4756                           ;doprnt.c: 546: width = 0;
  4757  034E  0020               	movlb	0	; select bank0
  4758  034F  01B6               	clrf	printf@width
  4759  0350  01B7               	clrf	printf@width+1
  4760                           
  4761                           ;doprnt.c: 548: flag = 0;
  4762  0351  01B5               	clrf	printf@flag
  4763                           
  4764                           ;doprnt.c: 551: switch(*f) {
  4765                           
  4766                           ;doprnt.c: 550: for(;;) {
  4767  0352  2B58               	goto	l1754
  4768  0353                     l322:	
  4769                           ;doprnt.c: 579: case '0':
  4770                           
  4771                           
  4772                           ;doprnt.c: 580: flag |= 0x04;
  4773  0353  1535               	bsf	printf@flag,2
  4774                           
  4775                           ;doprnt.c: 581: f++;
  4776  0354  3001               	movlw	1
  4777  0355  07A0               	addwf	printf@f,f
  4778  0356  3000               	movlw	0
  4779  0357  3DA1               	addwfc	printf@f+1,f
  4780  0358                     l1754:	
  4781                           ;doprnt.c: 584: }
  4782                           
  4783                           ;doprnt.c: 582: continue;
  4784                           
  4785  0358  0820               	movf	printf@f,w
  4786  0359  0084               	movwf	4
  4787  035A  0821               	movf	printf@f+1,w
  4788  035B  0085               	movwf	5
  4789  035C  0800               	movf	0,w	;code access
  4790                           
  4791                           ; Switch size 1, requested type "space"
  4792                           ; Number of cases is 1, Range of values is 48 to 48
  4793                           ; switch strategies available:
  4794                           ; Name         Instructions Cycles
  4795                           ; simple_byte            4     3 (average)
  4796                           ; direct_byte           11     9 (fixed)
  4797                           ; jumptable            263     9 (fixed)
  4798                           ;	Chosen strategy is simple_byte
  4799  035D  3A30               	xorlw	48	; case 48
  4800  035E  1903               	skipnz
  4801  035F  2B53               	goto	l322
  4802  0360  2B61               	goto	l1756
  4803  0361                     l1756:	
  4804                           ;doprnt.c: 586: }
  4805                           
  4806                           ;doprnt.c: 585: break;
  4807                           
  4808                           
  4809                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4810  0361  0820               	movf	printf@f,w
  4811  0362  0084               	movwf	4
  4812  0363  0821               	movf	printf@f+1,w
  4813  0364  0085               	movwf	5
  4814  0365  0800               	movf	0,w	;code access
  4815  0366  318E  2687  3183   	fcall	_isdigit
  4816  0369  1C03               	btfss	3,0
  4817  036A  2C0C               	goto	l1808
  4818                           
  4819                           ;doprnt.c: 598: width = 0;
  4820  036B  0020               	movlb	0	; select bank0
  4821  036C  01B6               	clrf	printf@width
  4822  036D  01B7               	clrf	printf@width+1
  4823  036E                     l1760:	
  4824                           ;doprnt.c: 599: do {
  4825                           
  4826                           
  4827                           ;doprnt.c: 600: width *= 10;
  4828  036E  300A               	movlw	10
  4829  036F  00F0               	movwf	___wmul@multiplier
  4830  0370  3000               	movlw	0
  4831  0371  00F1               	movwf	___wmul@multiplier+1
  4832  0372  0020               	movlb	0	; select bank0
  4833  0373  0837               	movf	printf@width+1,w
  4834  0374  00F3               	movwf	___wmul@multiplicand+1
  4835  0375  0836               	movf	printf@width,w
  4836  0376  00F2               	movwf	___wmul@multiplicand
  4837  0377  318E  26D0  3183   	fcall	___wmul
  4838  037A  0871               	movf	?___wmul+1,w
  4839  037B  0020               	movlb	0	; select bank0
  4840  037C  00B7               	movwf	printf@width+1
  4841  037D  0870               	movf	?___wmul,w
  4842  037E  00B6               	movwf	printf@width
  4843                           
  4844                           ;doprnt.c: 601: width += *f++ - '0';
  4845  037F  0820               	movf	printf@f,w
  4846  0380  0084               	movwf	4
  4847  0381  0821               	movf	printf@f+1,w
  4848  0382  0085               	movwf	5
  4849  0383  0800               	movf	0,w	;code access
  4850  0384  3ED0               	addlw	208
  4851  0385  00A8               	movwf	??_printf
  4852  0386  30FF               	movlw	255
  4853  0387  1803               	skipnc
  4854  0388  3000               	movlw	0
  4855  0389  00A9               	movwf	??_printf+1
  4856  038A  0828               	movf	??_printf,w
  4857  038B  07B6               	addwf	printf@width,f
  4858  038C  0829               	movf	??_printf+1,w
  4859  038D  3DB7               	addwfc	printf@width+1,f
  4860  038E  3001               	movlw	1
  4861  038F  07A0               	addwf	printf@f,f
  4862  0390  3000               	movlw	0
  4863  0391  3DA1               	addwfc	printf@f+1,f
  4864                           
  4865                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4866  0392  0820               	movf	printf@f,w
  4867  0393  0084               	movwf	4
  4868  0394  0821               	movf	printf@f+1,w
  4869  0395  0085               	movwf	5
  4870  0396  0800               	movf	0,w	;code access
  4871  0397  318E  2687  3183   	fcall	_isdigit
  4872  039A  1C03               	btfss	3,0
  4873  039B  2C0C               	goto	l1808
  4874  039C  2B6E               	goto	l1760
  4875  039D                     l335:	
  4876                           ;doprnt.c: 718: case 'x':
  4877                           
  4878                           ;doprnt.c: 698: case 'i':
  4879                           ;doprnt.c: 699: break;
  4880                           
  4881                           ;doprnt.c: 697: case 'd':
  4882                           
  4883                           ;doprnt.c: 638: goto alldone;
  4884                           
  4885                           ;doprnt.c: 637: case 0:
  4886                           
  4887                           ;doprnt.c: 608: }
  4888                           ;doprnt.c: 635: switch(c = *f++) {
  4889                           
  4890                           
  4891                           ;doprnt.c: 721: flag |= 0x80;
  4892  039D  17B5               	bsf	printf@flag,7
  4893                           
  4894                           ;doprnt.c: 723: break;
  4895  039E  2C2D               	goto	l334
  4896  039F                     l1768:	
  4897                           ;doprnt.c: 728: case 's':
  4898                           
  4899                           
  4900                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4901  039F  0832               	movf	printf@ap,w
  4902  03A0  0086               	movwf	6
  4903  03A1  0187               	clrf	7
  4904  03A2  0801               	movf	1,w
  4905  03A3  00AE               	movwf	printf@cp
  4906  03A4  3000               	movlw	0
  4907  03A5  00AF               	movwf	printf@cp+1
  4908  03A6  3001               	movlw	1
  4909  03A7  00A8               	movwf	??_printf
  4910  03A8  0828               	movf	??_printf,w
  4911  03A9  07B2               	addwf	printf@ap,f
  4912                           
  4913                           ;doprnt.c: 740: if(!cp)
  4914  03AA  082E               	movf	printf@cp,w
  4915  03AB  042F               	iorwf	printf@cp+1,w
  4916  03AC  1D03               	btfss	3,2
  4917  03AD  2BB2               	goto	l1776
  4918                           
  4919                           ;doprnt.c: 741: cp = "(null)";
  4920  03AE  3034               	movlw	low (STR_39| (0+32768))
  4921  03AF  00AE               	movwf	printf@cp
  4922  03B0  3093               	movlw	high (STR_39| (0+32768))
  4923  03B1  00AF               	movwf	printf@cp+1
  4924  03B2                     l1776:	
  4925                           
  4926                           ;doprnt.c: 745: len = 0;
  4927  03B2  01B0               	clrf	printf@len
  4928  03B3  01B1               	clrf	printf@len+1
  4929  03B4                     l1780:	
  4930                           ;doprnt.c: 746: while(cp[len])
  4931                           
  4932  03B4  082E               	movf	printf@cp,w
  4933  03B5  0730               	addwf	printf@len,w
  4934  03B6  0084               	movwf	4
  4935  03B7  082F               	movf	printf@cp+1,w
  4936  03B8  3D31               	addwfc	printf@len+1,w
  4937  03B9  0085               	movwf	5
  4938  03BA  0012               	moviw fsr0++
  4939  03BB  1903               	btfsc	3,2
  4940  03BC  2BC2               	goto	l1782
  4941                           
  4942                           ;doprnt.c: 747: len++;
  4943  03BD  3001               	movlw	1
  4944  03BE  07B0               	addwf	printf@len,f
  4945  03BF  3000               	movlw	0
  4946  03C0  3DB1               	addwfc	printf@len+1,f
  4947  03C1  2BB4               	goto	l1780
  4948  03C2                     l1782:	
  4949                           ;doprnt.c: 750: dostring:
  4950                           
  4951                           
  4952                           ;doprnt.c: 757: if(width > len)
  4953  03C2  0837               	movf	printf@width+1,w
  4954  03C3  0231               	subwf	printf@len+1,w
  4955  03C4  1D03               	skipz
  4956  03C5  2BC8               	goto	u1575
  4957  03C6  0836               	movf	printf@width,w
  4958  03C7  0230               	subwf	printf@len,w
  4959  03C8                     u1575:	
  4960  03C8  1803               	skipnc
  4961  03C9  2BCF               	goto	l1786
  4962                           
  4963                           ;doprnt.c: 758: width -= len;
  4964  03CA  0830               	movf	printf@len,w
  4965  03CB  02B6               	subwf	printf@width,f
  4966  03CC  0831               	movf	printf@len+1,w
  4967  03CD  3BB7               	subwfb	printf@width+1,f
  4968  03CE  2BD1               	goto	l1790
  4969  03CF                     l1786:	
  4970                           
  4971                           ;doprnt.c: 759: else
  4972                           ;doprnt.c: 760: width = 0;
  4973  03CF  01B6               	clrf	printf@width
  4974  03D0  01B7               	clrf	printf@width+1
  4975  03D1                     l1790:	
  4976                           ;doprnt.c: 764: while(width--)
  4977                           
  4978  03D1  30FF               	movlw	255
  4979  03D2  0020               	movlb	0	; select bank0
  4980  03D3  07B6               	addwf	printf@width,f
  4981  03D4  30FF               	movlw	255
  4982  03D5  3DB7               	addwfc	printf@width+1,f
  4983  03D6  0A36               	incf	printf@width,w
  4984  03D7  1903               	btfsc	3,2
  4985  03D8  0A37               	incf	printf@width+1,w
  4986  03D9  1903               	btfsc	3,2
  4987  03DA  2BED               	goto	l1796
  4988                           
  4989                           ;doprnt.c: 765: (putch(' ') );
  4990  03DB  3020               	movlw	32
  4991  03DC  318E  2650  3183   	fcall	_putch
  4992  03DF  2BD1               	goto	l1790
  4993  03E0                     l1792:	
  4994                           ;doprnt.c: 767: while(len--)
  4995                           
  4996                           
  4997                           ;doprnt.c: 768: (putch(*cp++) );
  4998  03E0  082E               	movf	printf@cp,w
  4999  03E1  0084               	movwf	4
  5000  03E2  082F               	movf	printf@cp+1,w
  5001  03E3  0085               	movwf	5
  5002  03E4  0800               	movf	0,w	;code access
  5003  03E5  318E  2650  3183   	fcall	_putch
  5004  03E8  3001               	movlw	1
  5005  03E9  0020               	movlb	0	; select bank0
  5006  03EA  07AE               	addwf	printf@cp,f
  5007  03EB  3000               	movlw	0
  5008  03EC  3DAF               	addwfc	printf@cp+1,f
  5009  03ED                     l1796:	
  5010  03ED  3001               	movlw	1
  5011  03EE  02B0               	subwf	printf@len,f
  5012  03EF  3000               	movlw	0
  5013  03F0  3BB1               	subwfb	printf@len+1,f
  5014  03F1  0A30               	incf	printf@len,w
  5015  03F2  1D03               	skipz
  5016  03F3  2BE0               	goto	l1792
  5017  03F4  0A31               	incf	printf@len+1,w
  5018  03F5  1903               	btfsc	3,2
  5019  03F6  2B32               	goto	l1896
  5020  03F7  2BE0               	goto	l1792
  5021  03F8                     l1798:	
  5022                           ;doprnt.c: 784: case 'c':
  5023                           
  5024                           ;doprnt.c: 774: continue;
  5025                           
  5026                           
  5027                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5028  03F8  0832               	movf	printf@ap,w
  5029  03F9  0086               	movwf	6
  5030  03FA  0187               	clrf	7
  5031  03FB  0801               	movf	1,w
  5032  03FC  00A8               	movwf	??_printf
  5033  03FD  0828               	movf	??_printf,w
  5034  03FE  00B8               	movwf	printf@c
  5035  03FF  3002               	movlw	2
  5036  0400  00A8               	movwf	??_printf
  5037  0401  0828               	movf	??_printf,w
  5038  0402  07B2               	addwf	printf@ap,f
  5039  0403                     l1802:	
  5040                           ;doprnt.c: 802: default:
  5041                           
  5042                           
  5043                           ;doprnt.c: 805: cp = (char *)&c;
  5044  0403  3038               	movlw	low printf@c
  5045  0404  00AE               	movwf	printf@cp
  5046  0405  3000               	movlw	high printf@c
  5047  0406  00AF               	movwf	printf@cp+1
  5048                           
  5049                           ;doprnt.c: 806: len = 1;
  5050  0407  3001               	movlw	1
  5051  0408  00B0               	movwf	printf@len
  5052  0409  3000               	movlw	0
  5053  040A  00B1               	movwf	printf@len+1
  5054                           
  5055                           ;doprnt.c: 807: goto dostring;
  5056  040B  2BC2               	goto	l1782
  5057  040C                     l1808:	
  5058                           ;doprnt.c: 822: }
  5059                           
  5060  040C  0020               	movlb	0	; select bank0
  5061  040D  0821               	movf	printf@f+1,w
  5062  040E  00A9               	movwf	??_printf+1
  5063  040F  0820               	movf	printf@f,w
  5064  0410  00A8               	movwf	??_printf
  5065  0411  0AA0               	incf	printf@f,f
  5066  0412  1903               	skipnz
  5067  0413  0AA1               	incf	printf@f+1,f
  5068  0414  0828               	movf	??_printf,w
  5069  0415  0084               	movwf	4
  5070  0416  0829               	movf	??_printf+1,w
  5071  0417  0085               	movwf	5
  5072  0418  0800               	movf	0,w	;code access
  5073  0419  00B8               	movwf	printf@c
  5074                           
  5075                           ; Switch size 1, requested type "space"
  5076                           ; Number of cases is 6, Range of values is 0 to 120
  5077                           ; switch strategies available:
  5078                           ; Name         Instructions Cycles
  5079                           ; simple_byte           19    10 (average)
  5080                           ; direct_byte          248     6 (fixed)
  5081                           ; jumptable            260     6 (fixed)
  5082                           ;	Chosen strategy is simple_byte
  5083  041A  3A00               	xorlw	0	; case 0
  5084  041B  1903               	skipnz
  5085  041C  2D67               	goto	l386
  5086  041D  3A63               	xorlw	99	; case 99
  5087  041E  1903               	skipnz
  5088  041F  2BF8               	goto	l1798
  5089  0420  3A07               	xorlw	7	; case 100
  5090  0421  1903               	skipnz
  5091  0422  2C2D               	goto	l334
  5092  0423  3A0D               	xorlw	13	; case 105
  5093  0424  1903               	skipnz
  5094  0425  2C2D               	goto	l334
  5095  0426  3A1A               	xorlw	26	; case 115
  5096  0427  1903               	skipnz
  5097  0428  2B9F               	goto	l1768
  5098  0429  3A0B               	xorlw	11	; case 120
  5099  042A  1903               	skipnz
  5100  042B  2B9D               	goto	l335
  5101  042C  2C03               	goto	l1802
  5102  042D                     l334:	
  5103                           
  5104                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5105  042D  0020               	movlb	0	; select bank0
  5106  042E  1BB5               	btfsc	printf@flag,7
  5107  042F  2C47               	goto	l1820
  5108                           
  5109                           ;doprnt.c: 1253: {
  5110                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5111  0430  0832               	movf	printf@ap,w
  5112  0431  0086               	movwf	6
  5113  0432  0187               	clrf	7
  5114  0433  3F40               	moviw [0]fsr1
  5115  0434  00B3               	movwf	printf@val
  5116  0435  3F41               	moviw [1]fsr1
  5117  0436  00B4               	movwf	printf@val+1
  5118  0437  3002               	movlw	2
  5119  0438  00A8               	movwf	??_printf
  5120  0439  0828               	movf	??_printf,w
  5121  043A  07B2               	addwf	printf@ap,f
  5122                           
  5123                           ;doprnt.c: 1261: if((int)val < 0) {
  5124  043B  1FB4               	btfss	printf@val+1,7
  5125  043C  2C97               	goto	l1846
  5126                           
  5127                           ;doprnt.c: 1262: flag |= 0x03;
  5128  043D  3003               	movlw	3
  5129  043E  00A8               	movwf	??_printf
  5130  043F  0828               	movf	??_printf,w
  5131  0440  04B5               	iorwf	printf@flag,f
  5132                           
  5133                           ;doprnt.c: 1263: val = -val;
  5134  0441  09B3               	comf	printf@val,f
  5135  0442  09B4               	comf	printf@val+1,f
  5136  0443  0AB3               	incf	printf@val,f
  5137  0444  1903               	skipnz
  5138  0445  0AB4               	incf	printf@val+1,f
  5139                           
  5140                           ;doprnt.c: 1264: }
  5141                           ;doprnt.c: 1266: }
  5142  0446  2C97               	goto	l1846
  5143  0447                     l1820:	
  5144                           
  5145                           ;doprnt.c: 1268: else
  5146                           ;doprnt.c: 1273: {
  5147                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5148  0447  0832               	movf	printf@ap,w
  5149  0448  0086               	movwf	6
  5150  0449  0187               	clrf	7
  5151  044A  3F40               	moviw [0]fsr1
  5152  044B  00B3               	movwf	printf@val
  5153  044C  3F41               	moviw [1]fsr1
  5154  044D  00B4               	movwf	printf@val+1
  5155  044E  3002               	movlw	2
  5156  044F  00A8               	movwf	??_printf
  5157  0450  0828               	movf	??_printf,w
  5158  0451  07B2               	addwf	printf@ap,f
  5159                           
  5160                           ;doprnt.c: 1287: }
  5161                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5162  0452  2C97               	goto	l1846
  5163  0453                     l356:	
  5164                           ;doprnt.c: 1299: case 0x00:
  5165                           
  5166                           
  5167                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5168  0453  01B8               	clrf	printf@c
  5169  0454  0AB8               	incf	printf@c,f
  5170  0455                     L15:	
  5171  0455  3005               	movlw	5
  5172  0456  0638               	xorwf	printf@c,w
  5173  0457  1903               	btfsc	3,2
  5174  0458  2CA0               	goto	l1848
  5175                           
  5176                           ;doprnt.c: 1306: if(val < dpowers[c])
  5177  0459  0838               	movf	printf@c,w
  5178  045A  00A8               	movwf	??_printf
  5179  045B  01A9               	clrf	??_printf+1
  5180  045C  35A8               	lslf	??_printf,f
  5181  045D  0DA9               	rlf	??_printf+1,f
  5182  045E  3022               	movlw	low (_dpowers| (0+32768))
  5183  045F  0728               	addwf	??_printf,w
  5184  0460  0084               	movwf	4
  5185  0461  3093               	movlw	high (_dpowers| (0+32768))
  5186  0462  3D29               	addwfc	??_printf+1,w
  5187  0463  0085               	movwf	5
  5188  0464  3F00               	moviw [0]fsr0
  5189  0465  00AA               	movwf	??_printf+2
  5190  0466  3F01               	moviw [1]fsr0
  5191  0467  00AB               	movwf	??_printf+3
  5192  0468  082B               	movf	??_printf+3,w
  5193  0469  0234               	subwf	printf@val+1,w
  5194  046A  1D03               	skipz
  5195  046B  2C6E               	goto	u1635
  5196  046C  082A               	movf	??_printf+2,w
  5197  046D  0233               	subwf	printf@val,w
  5198  046E                     u1635:	
  5199  046E  1C03               	btfss	3,0
  5200  046F  2CA0               	goto	l1848
  5201                           
  5202                           ;doprnt.c: 1307: break;
  5203  0470  3001               	movlw	1
  5204  0471  00A8               	movwf	??_printf
  5205  0472  0828               	movf	??_printf,w
  5206  0473  07B8               	addwf	printf@c,f
  5207  0474  2C55               	goto	L15
  5208  0475                     l361:	
  5209                           ;doprnt.c: 1314: case 0x80:
  5210                           
  5211                           ;doprnt.c: 1309: break;
  5212                           
  5213                           
  5214                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5215  0475  01B8               	clrf	printf@c
  5216  0476  0AB8               	incf	printf@c,f
  5217  0477                     L16:	
  5218  0477  3004               	movlw	4
  5219  0478  0638               	xorwf	printf@c,w
  5220  0479  1903               	btfsc	3,2
  5221  047A  2CA0               	goto	l1848
  5222                           
  5223                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5224  047B  0838               	movf	printf@c,w
  5225  047C  00A8               	movwf	??_printf
  5226  047D  01A9               	clrf	??_printf+1
  5227  047E  35A8               	lslf	??_printf,f
  5228  047F  0DA9               	rlf	??_printf+1,f
  5229  0480  302C               	movlw	low (_hexpowers| (0+32768))
  5230  0481  0728               	addwf	??_printf,w
  5231  0482  0084               	movwf	4
  5232  0483  3093               	movlw	high (_hexpowers| (0+32768))
  5233  0484  3D29               	addwfc	??_printf+1,w
  5234  0485  0085               	movwf	5
  5235  0486  3F00               	moviw [0]fsr0
  5236  0487  00AA               	movwf	??_printf+2
  5237  0488  3F01               	moviw [1]fsr0
  5238  0489  00AB               	movwf	??_printf+3
  5239  048A  082B               	movf	??_printf+3,w
  5240  048B  0234               	subwf	printf@val+1,w
  5241  048C  1D03               	skipz
  5242  048D  2C90               	goto	u1665
  5243  048E  082A               	movf	??_printf+2,w
  5244  048F  0233               	subwf	printf@val,w
  5245  0490                     u1665:	
  5246  0490  1C03               	btfss	3,0
  5247  0491  2CA0               	goto	l1848
  5248                           
  5249                           ;doprnt.c: 1318: break;
  5250  0492  3001               	movlw	1
  5251  0493  00A8               	movwf	??_printf
  5252  0494  0828               	movf	??_printf,w
  5253  0495  07B8               	addwf	printf@c,f
  5254  0496  2C77               	goto	L16
  5255  0497                     l1846:	
  5256                           ;doprnt.c: 1336: }
  5257                           
  5258                           ;doprnt.c: 1320: break;
  5259                           
  5260  0497  0835               	movf	printf@flag,w
  5261  0498  3980               	andlw	128
  5262                           
  5263                           ; Switch size 1, requested type "space"
  5264                           ; Number of cases is 2, Range of values is 0 to 128
  5265                           ; switch strategies available:
  5266                           ; Name         Instructions Cycles
  5267                           ; simple_byte            7     4 (average)
  5268                           ; jumptable            260     6 (fixed)
  5269                           ;	Chosen strategy is simple_byte
  5270  0499  3A00               	xorlw	0	; case 0
  5271  049A  1903               	skipnz
  5272  049B  2C53               	goto	l356
  5273  049C  3A80               	xorlw	128	; case 128
  5274  049D  1903               	skipnz
  5275  049E  2C75               	goto	l361
  5276  049F  2CA0               	goto	l1848
  5277  04A0                     l1848:	
  5278                           
  5279                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5280  04A0  0836               	movf	printf@width,w
  5281  04A1  0437               	iorwf	printf@width+1,w
  5282  04A2  1903               	btfsc	3,2
  5283  04A3  2CAC               	goto	l365
  5284  04A4  0835               	movf	printf@flag,w
  5285  04A5  3903               	andlw	3
  5286  04A6  1903               	btfsc	3,2
  5287  04A7  2CAC               	goto	l365
  5288                           
  5289                           ;doprnt.c: 1346: width--;
  5290  04A8  30FF               	movlw	255
  5291  04A9  07B6               	addwf	printf@width,f
  5292  04AA  30FF               	movlw	255
  5293  04AB  3DB7               	addwfc	printf@width+1,f
  5294  04AC                     l365:	
  5295                           
  5296                           ;doprnt.c: 1381: if(width > c)
  5297  04AC  0838               	movf	printf@c,w
  5298  04AD  00A8               	movwf	??_printf
  5299  04AE  01A9               	clrf	??_printf+1
  5300  04AF  1BA8               	btfsc	??_printf,7
  5301  04B0  03A9               	decf	??_printf+1,f
  5302  04B1  0829               	movf	??_printf+1,w
  5303  04B2  3A80               	xorlw	128
  5304  04B3  00AA               	movwf	??_printf+2
  5305  04B4  0837               	movf	printf@width+1,w
  5306  04B5  3A80               	xorlw	128
  5307  04B6  022A               	subwf	??_printf+2,w
  5308  04B7  1D03               	skipz
  5309  04B8  2CBB               	goto	u1705
  5310  04B9  0836               	movf	printf@width,w
  5311  04BA  0228               	subwf	??_printf,w
  5312  04BB                     u1705:	
  5313  04BB  1803               	skipnc
  5314  04BC  2CC8               	goto	l1856
  5315                           
  5316                           ;doprnt.c: 1382: width -= c;
  5317  04BD  0020               	movlb	0	; select bank0
  5318  04BE  0838               	movf	printf@c,w
  5319  04BF  00A8               	movwf	??_printf
  5320  04C0  01A9               	clrf	??_printf+1
  5321  04C1  1BA8               	btfsc	??_printf,7
  5322  04C2  03A9               	decf	??_printf+1,f
  5323  04C3  0828               	movf	??_printf,w
  5324  04C4  02B6               	subwf	printf@width,f
  5325  04C5  0829               	movf	??_printf+1,w
  5326  04C6  3BB7               	subwfb	printf@width+1,f
  5327  04C7  2CCB               	goto	l1858
  5328  04C8                     l1856:	
  5329                           
  5330                           ;doprnt.c: 1383: else
  5331                           ;doprnt.c: 1384: width = 0;
  5332  04C8  0020               	movlb	0	; select bank0
  5333  04C9  01B6               	clrf	printf@width
  5334  04CA  01B7               	clrf	printf@width+1
  5335  04CB                     l1858:	
  5336                           
  5337                           ;doprnt.c: 1387: if(flag & 0x04) {
  5338  04CB  1D35               	btfss	printf@flag,2
  5339  04CC  2CE4               	goto	l1870
  5340                           
  5341                           ;doprnt.c: 1392: if(flag & 0x03)
  5342  04CD  0835               	movf	printf@flag,w
  5343  04CE  3903               	andlw	3
  5344  04CF  1903               	btfsc	3,2
  5345  04D0  2CD5               	goto	l1864
  5346                           
  5347                           ;doprnt.c: 1393: (putch('-') );
  5348  04D1  302D               	movlw	45
  5349  04D2  318E  2650  3183   	fcall	_putch
  5350  04D5                     l1864:	
  5351                           
  5352                           ;doprnt.c: 1415: if(width)
  5353  04D5  0020               	movlb	0	; select bank0
  5354  04D6                     L17:	
  5355  04D6  0836               	movf	printf@width,w
  5356  04D7  0437               	iorwf	printf@width+1,w
  5357  04D8  1903               	btfsc	3,2
  5358  04D9  2CFD               	goto	l1880
  5359                           
  5360                           ;doprnt.c: 1417: (putch('0') );
  5361                           
  5362                           ;doprnt.c: 1416: do
  5363  04DA  3030               	movlw	48
  5364  04DB  318E  2650  3183   	fcall	_putch
  5365                           
  5366                           ;doprnt.c: 1418: while(--width);
  5367  04DE  30FF               	movlw	255
  5368  04DF  0020               	movlb	0	; select bank0
  5369  04E0  07B6               	addwf	printf@width,f
  5370  04E1  30FF               	movlw	255
  5371  04E2  3DB7               	addwfc	printf@width+1,f
  5372  04E3  2CD6               	goto	L17
  5373  04E4                     l1870:	
  5374                           ;doprnt.c: 1420: } else
  5375                           
  5376                           
  5377                           ;doprnt.c: 1422: {
  5378                           ;doprnt.c: 1424: if(width
  5379                           ;doprnt.c: 1428: )
  5380  04E4  0836               	movf	printf@width,w
  5381  04E5  0437               	iorwf	printf@width+1,w
  5382  04E6  1903               	btfsc	3,2
  5383  04E7  2CF5               	goto	l1876
  5384  04E8                     l1872:	
  5385                           ;doprnt.c: 1429: do
  5386                           
  5387                           
  5388                           ;doprnt.c: 1430: (putch(' ') );
  5389  04E8  3020               	movlw	32
  5390  04E9  318E  2650  3183   	fcall	_putch
  5391                           
  5392                           ;doprnt.c: 1431: while(--width);
  5393  04EC  30FF               	movlw	255
  5394  04ED  0020               	movlb	0	; select bank0
  5395  04EE  07B6               	addwf	printf@width,f
  5396  04EF  30FF               	movlw	255
  5397  04F0  3DB7               	addwfc	printf@width+1,f
  5398  04F1  0836               	movf	printf@width,w
  5399  04F2  0437               	iorwf	printf@width+1,w
  5400  04F3  1D03               	btfss	3,2
  5401  04F4  2CE8               	goto	l1872
  5402  04F5                     l1876:	
  5403                           
  5404                           ;doprnt.c: 1438: if(flag & 0x03)
  5405  04F5  0835               	movf	printf@flag,w
  5406  04F6  3903               	andlw	3
  5407  04F7  1903               	btfsc	3,2
  5408  04F8  2CFD               	goto	l1880
  5409                           
  5410                           ;doprnt.c: 1439: (putch('-') );
  5411  04F9  302D               	movlw	45
  5412  04FA  318E  2650  3183   	fcall	_putch
  5413  04FD                     l1880:	
  5414                           
  5415                           ;doprnt.c: 1469: }
  5416                           ;doprnt.c: 1472: prec = c;
  5417  04FD  0020               	movlb	0	; select bank0
  5418  04FE  0838               	movf	printf@c,w
  5419  04FF  00A8               	movwf	??_printf
  5420  0500  0828               	movf	??_printf,w
  5421  0501  00AD               	movwf	printf@prec
  5422                           
  5423                           ;doprnt.c: 1474: while(prec--) {
  5424  0502  2D55               	goto	l1894
  5425  0503                     l1882:	
  5426                           ;doprnt.c: 1478: {
  5427                           ;doprnt.c: 1483: case 0x00:
  5428                           
  5429                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  5430                           
  5431                           
  5432                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5433  0503  300A               	movlw	10
  5434  0504  00F8               	movwf	___lwmod@divisor
  5435  0505  3000               	movlw	0
  5436  0506  00F9               	movwf	___lwmod@divisor+1
  5437  0507  082D               	movf	printf@prec,w
  5438  0508  00A8               	movwf	??_printf
  5439  0509  01A9               	clrf	??_printf+1
  5440  050A  35A8               	lslf	??_printf,f
  5441  050B  0DA9               	rlf	??_printf+1,f
  5442  050C  3022               	movlw	low (_dpowers| (0+32768))
  5443  050D  0728               	addwf	??_printf,w
  5444  050E  0084               	movwf	4
  5445  050F  3093               	movlw	high (_dpowers| (0+32768))
  5446  0510  3D29               	addwfc	??_printf+1,w
  5447  0511  0085               	movwf	5
  5448  0512  3F00               	moviw [0]fsr0
  5449  0513  00F0               	movwf	___lwdiv@divisor
  5450  0514  3F01               	moviw [1]fsr0
  5451  0515  00F1               	movwf	___lwdiv@divisor+1
  5452  0516  0834               	movf	printf@val+1,w
  5453  0517  00F3               	movwf	___lwdiv@dividend+1
  5454  0518  0833               	movf	printf@val,w
  5455  0519  00F2               	movwf	___lwdiv@dividend
  5456  051A  318F  273F  3183   	fcall	___lwdiv
  5457  051D  0871               	movf	?___lwdiv+1,w
  5458  051E  00FB               	movwf	___lwmod@dividend+1
  5459  051F  0870               	movf	?___lwdiv,w
  5460  0520  00FA               	movwf	___lwmod@dividend
  5461  0521  318F  2713  3183   	fcall	___lwmod
  5462  0524  0878               	movf	?___lwmod,w
  5463  0525  3E30               	addlw	48
  5464  0526  0020               	movlb	0	; select bank0
  5465  0527  00AA               	movwf	??_printf+2
  5466  0528  082A               	movf	??_printf+2,w
  5467  0529  2D50               	goto	L14
  5468  052A                     l1884:	
  5469                           ;doprnt.c: 1497: case 0x80:
  5470                           
  5471                           ;doprnt.c: 1491: break;
  5472                           
  5473                           
  5474                           ;doprnt.c: 1499: {
  5475                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5476  052A  082D               	movf	printf@prec,w
  5477  052B  00A8               	movwf	??_printf
  5478  052C  01A9               	clrf	??_printf+1
  5479  052D  35A8               	lslf	??_printf,f
  5480  052E  0DA9               	rlf	??_printf+1,f
  5481  052F  302C               	movlw	low (_hexpowers| (0+32768))
  5482  0530  0728               	addwf	??_printf,w
  5483  0531  0084               	movwf	4
  5484  0532  3093               	movlw	high (_hexpowers| (0+32768))
  5485  0533  3D29               	addwfc	??_printf+1,w
  5486  0534  0085               	movwf	5
  5487  0535  3F00               	moviw [0]fsr0
  5488  0536  00F0               	movwf	___lwdiv@divisor
  5489  0537  3F01               	moviw [1]fsr0
  5490  0538  00F1               	movwf	___lwdiv@divisor+1
  5491  0539  0834               	movf	printf@val+1,w
  5492  053A  00F3               	movwf	___lwdiv@dividend+1
  5493  053B  0833               	movf	printf@val,w
  5494  053C  00F2               	movwf	___lwdiv@dividend
  5495  053D  318F  273F  3183   	fcall	___lwdiv
  5496  0540  0870               	movf	?___lwdiv,w
  5497  0541  390F               	andlw	15
  5498  0542  0020               	movlb	0	; select bank0
  5499  0543  00AA               	movwf	??_printf+2
  5500  0544  082A               	movf	??_printf+2,w
  5501  0545  00AC               	movwf	printf@idx
  5502                           
  5503                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5504  0546  082C               	movf	printf@idx,w
  5505  0547  3E17               	addlw	low (STR_40| (0+32768))
  5506  0548  0084               	movwf	4
  5507  0549  3092               	movlw	high (STR_40| (0+32768))
  5508  054A  1803               	skipnc
  5509  054B  3E01               	addlw	1
  5510  054C  0085               	movwf	5
  5511  054D  0800               	movf	0,w	;code access
  5512  054E  00A8               	movwf	??_printf
  5513  054F  0828               	movf	??_printf,w
  5514  0550                     L14:	
  5515  0550  00B8               	movwf	printf@c
  5516  0551                     l1892:	
  5517                           ;doprnt.c: 1523: }
  5518                           
  5519                           ;doprnt.c: 1508: }
  5520                           ;doprnt.c: 1510: break;
  5521                           
  5522                           
  5523                           ;doprnt.c: 1524: (putch(c) );
  5524  0551  0838               	movf	printf@c,w
  5525  0552  318E  2650  3183   	fcall	_putch
  5526  0555                     l1894:	
  5527  0555  30FF               	movlw	255
  5528  0556  0020               	movlb	0	; select bank0
  5529  0557  00A8               	movwf	??_printf
  5530  0558  0828               	movf	??_printf,w
  5531  0559  07AD               	addwf	printf@prec,f
  5532  055A  0A2D               	incf	printf@prec,w
  5533  055B  1903               	btfsc	3,2
  5534  055C  2B32               	goto	l1896
  5535  055D  0835               	movf	printf@flag,w
  5536  055E  3980               	andlw	128
  5537                           
  5538                           ; Switch size 1, requested type "space"
  5539                           ; Number of cases is 2, Range of values is 0 to 128
  5540                           ; switch strategies available:
  5541                           ; Name         Instructions Cycles
  5542                           ; simple_byte            7     4 (average)
  5543                           ; jumptable            260     6 (fixed)
  5544                           ;	Chosen strategy is simple_byte
  5545  055F  3A00               	xorlw	0	; case 0
  5546  0560  1903               	skipnz
  5547  0561  2D03               	goto	l1882
  5548  0562  3A80               	xorlw	128	; case 128
  5549  0563  1903               	skipnz
  5550  0564  2D2A               	goto	l1884
  5551  0565  2D51               	goto	l1892
  5552  0566  2D51               	goto	l1892
  5553  0567                     l386:	
  5554                           ;doprnt.c: 1540: return 0;
  5555                           ;	Return value of _printf is never used
  5556                           
  5557                           ;doprnt.c: 1525: }
  5558                           ;doprnt.c: 1533: }
  5559                           ;doprnt.c: 1535: alldone:
  5560                           
  5561  0567  0008               	return
  5562  0568                     __end_of_printf:	
  5563                           
  5564                           	psect	text8
  5565  0E50                     __ptext8:	
  5566 ;; *************** function _putch *****************
  5567 ;; Defined at:
  5568 ;;		line 107 in file "mcc_generated_files/eusart.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  txData          1    wreg     unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  txData          1    1[COMMON] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;Total ram usage:        1 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    1
  5589 ;; This function calls:
  5590 ;;		_EUSART_Write
  5591 ;; This function is called by:
  5592 ;;		_printf
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _putch
  5598  0E50                     _putch:	
  5599                           
  5600                           ;incstack = 0
  5601                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5602                           ;putch@txData stored from wreg
  5603  0E50  00F1               	movwf	putch@txData
  5604                           
  5605                           ;eusart.c: 109: EUSART_Write(txData);
  5606  0E51  0871               	movf	putch@txData,w
  5607  0E52  3180  2004         	fcall	_EUSART_Write
  5608  0E54  0008               	return
  5609  0E55                     __end_of_putch:	
  5610                           
  5611                           	psect	text9
  5612  0004                     __ptext9:	
  5613 ;; *************** function _EUSART_Write *****************
  5614 ;; Defined at:
  5615 ;;		line 93 in file "mcc_generated_files/eusart.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  txData          1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  txData          1    0[COMMON] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;Total ram usage:        1 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_putch
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _EUSART_Write
  5644  0004                     _EUSART_Write:	
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _EUSART_Write: [wreg]
  5648                           ;EUSART_Write@txData stored from wreg
  5649  0004  00F0               	movwf	EUSART_Write@txData
  5650  0005                     l58:	
  5651                           ;eusart.c: 96: {
  5652                           
  5653                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  5654                           
  5655  0005  0020               	movlb	0	; select bank0
  5656  0006  1E11               	btfss	17,4	;volatile
  5657  0007  2805               	goto	l58
  5658                           
  5659                           ;eusart.c: 97: }
  5660                           ;eusart.c: 99: TXREG = txData;
  5661  0008  0870               	movf	EUSART_Write@txData,w
  5662  0009  0023               	movlb	3	; select bank3
  5663  000A  009A               	movwf	26	;volatile
  5664  000B  0008               	return
  5665  000C                     __end_of_EUSART_Write:	
  5666                           
  5667                           	psect	text10
  5668  0F13                     __ptext10:	
  5669 ;; *************** function ___lwmod *****************
  5670 ;; Defined at:
  5671 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;  divisor         2    8[COMMON] unsigned int 
  5674 ;;  dividend        2   10[COMMON] unsigned int 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  counter         1   13[COMMON] unsigned char 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  2    8[COMMON] unsigned int 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        6 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; This function calls:
  5693 ;;		Nothing
  5694 ;; This function is called by:
  5695 ;;		_printf
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function ___lwmod
  5701  0F13                     ___lwmod:	
  5702                           
  5703                           ;incstack = 0
  5704                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5705  0F13  0878               	movf	___lwmod@divisor,w
  5706  0F14  0479               	iorwf	___lwmod@divisor+1,w
  5707  0F15  1903               	btfsc	3,2
  5708  0F16  2F3A               	goto	l1738
  5709  0F17  01FD               	clrf	___lwmod@counter
  5710  0F18  0AFD               	incf	___lwmod@counter,f
  5711  0F19                     l1728:	
  5712  0F19  1BF9               	btfsc	___lwmod@divisor+1,7
  5713  0F1A  2F25               	goto	l1730
  5714  0F1B  3001               	movlw	1
  5715  0F1C                     u1475:	
  5716  0F1C  35F8               	lslf	___lwmod@divisor,f
  5717  0F1D  0DF9               	rlf	___lwmod@divisor+1,f
  5718  0F1E  0B89               	decfsz	9,f
  5719  0F1F  2F1C               	goto	u1475
  5720  0F20  3001               	movlw	1
  5721  0F21  00FC               	movwf	??___lwmod
  5722  0F22  087C               	movf	??___lwmod,w
  5723  0F23  07FD               	addwf	___lwmod@counter,f
  5724  0F24  2F19               	goto	l1728
  5725  0F25                     l1730:	
  5726  0F25  0879               	movf	___lwmod@divisor+1,w
  5727  0F26  027B               	subwf	___lwmod@dividend+1,w
  5728  0F27  1D03               	skipz
  5729  0F28  2F2B               	goto	u1495
  5730  0F29  0878               	movf	___lwmod@divisor,w
  5731  0F2A  027A               	subwf	___lwmod@dividend,w
  5732  0F2B                     u1495:	
  5733  0F2B  1C03               	skipc
  5734  0F2C  2F31               	goto	l1734
  5735  0F2D  0878               	movf	___lwmod@divisor,w
  5736  0F2E  02FA               	subwf	___lwmod@dividend,f
  5737  0F2F  0879               	movf	___lwmod@divisor+1,w
  5738  0F30  3BFB               	subwfb	___lwmod@dividend+1,f
  5739  0F31                     l1734:	
  5740  0F31  3001               	movlw	1
  5741  0F32                     u1505:	
  5742  0F32  36F9               	lsrf	___lwmod@divisor+1,f
  5743  0F33  0CF8               	rrf	___lwmod@divisor,f
  5744  0F34  0B89               	decfsz	9,f
  5745  0F35  2F32               	goto	u1505
  5746  0F36  3001               	movlw	1
  5747  0F37  02FD               	subwf	___lwmod@counter,f
  5748  0F38  1D03               	btfss	3,2
  5749  0F39  2F25               	goto	l1730
  5750  0F3A                     l1738:	
  5751  0F3A  087B               	movf	___lwmod@dividend+1,w
  5752  0F3B  00F9               	movwf	?___lwmod+1
  5753  0F3C  087A               	movf	___lwmod@dividend,w
  5754  0F3D  00F8               	movwf	?___lwmod
  5755  0F3E  0008               	return
  5756  0F3F                     __end_of___lwmod:	
  5757                           
  5758                           	psect	text11
  5759  0F3F                     __ptext11:	
  5760 ;; *************** function ___lwdiv *****************
  5761 ;; Defined at:
  5762 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  divisor         2    0[COMMON] unsigned int 
  5765 ;;  dividend        2    2[COMMON] unsigned int 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  quotient        2    5[COMMON] unsigned int 
  5768 ;;  counter         1    7[COMMON] unsigned char 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  2    0[COMMON] unsigned int 
  5771 ;; Registers used:
  5772 ;;		wreg, status,2, status,0
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5778 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;Total ram usage:        8 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_printf
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function ___lwdiv
  5793  0F3F                     ___lwdiv:	
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5797  0F3F  01F5               	clrf	___lwdiv@quotient
  5798  0F40  01F6               	clrf	___lwdiv@quotient+1
  5799  0F41  0870               	movf	___lwdiv@divisor,w
  5800  0F42  0471               	iorwf	___lwdiv@divisor+1,w
  5801  0F43  1903               	btfsc	3,2
  5802  0F44  2F6E               	goto	l1716
  5803  0F45  01F7               	clrf	___lwdiv@counter
  5804  0F46  0AF7               	incf	___lwdiv@counter,f
  5805  0F47                     l1704:	
  5806  0F47  1BF1               	btfsc	___lwdiv@divisor+1,7
  5807  0F48  2F53               	goto	l1706
  5808  0F49  3001               	movlw	1
  5809  0F4A                     u1405:	
  5810  0F4A  35F0               	lslf	___lwdiv@divisor,f
  5811  0F4B  0DF1               	rlf	___lwdiv@divisor+1,f
  5812  0F4C  0B89               	decfsz	9,f
  5813  0F4D  2F4A               	goto	u1405
  5814  0F4E  3001               	movlw	1
  5815  0F4F  00F4               	movwf	??___lwdiv
  5816  0F50  0874               	movf	??___lwdiv,w
  5817  0F51  07F7               	addwf	___lwdiv@counter,f
  5818  0F52  2F47               	goto	l1704
  5819  0F53                     l1706:	
  5820  0F53  3001               	movlw	1
  5821  0F54                     u1425:	
  5822  0F54  35F5               	lslf	___lwdiv@quotient,f
  5823  0F55  0DF6               	rlf	___lwdiv@quotient+1,f
  5824  0F56  0B89               	decfsz	9,f
  5825  0F57  2F54               	goto	u1425
  5826  0F58  0871               	movf	___lwdiv@divisor+1,w
  5827  0F59  0273               	subwf	___lwdiv@dividend+1,w
  5828  0F5A  1D03               	skipz
  5829  0F5B  2F5E               	goto	u1435
  5830  0F5C  0870               	movf	___lwdiv@divisor,w
  5831  0F5D  0272               	subwf	___lwdiv@dividend,w
  5832  0F5E                     u1435:	
  5833  0F5E  1C03               	skipc
  5834  0F5F  2F65               	goto	l1712
  5835  0F60  0870               	movf	___lwdiv@divisor,w
  5836  0F61  02F2               	subwf	___lwdiv@dividend,f
  5837  0F62  0871               	movf	___lwdiv@divisor+1,w
  5838  0F63  3BF3               	subwfb	___lwdiv@dividend+1,f
  5839  0F64  1475               	bsf	___lwdiv@quotient,0
  5840  0F65                     l1712:	
  5841  0F65  3001               	movlw	1
  5842  0F66                     u1445:	
  5843  0F66  36F1               	lsrf	___lwdiv@divisor+1,f
  5844  0F67  0CF0               	rrf	___lwdiv@divisor,f
  5845  0F68  0B89               	decfsz	9,f
  5846  0F69  2F66               	goto	u1445
  5847  0F6A  3001               	movlw	1
  5848  0F6B  02F7               	subwf	___lwdiv@counter,f
  5849  0F6C  1D03               	btfss	3,2
  5850  0F6D  2F53               	goto	l1706
  5851  0F6E                     l1716:	
  5852  0F6E  0876               	movf	___lwdiv@quotient+1,w
  5853  0F6F  00F1               	movwf	?___lwdiv+1
  5854  0F70  0875               	movf	___lwdiv@quotient,w
  5855  0F71  00F0               	movwf	?___lwdiv
  5856  0F72  0008               	return
  5857  0F73                     __end_of___lwdiv:	
  5858                           
  5859                           	psect	text12
  5860  0EA4                     __ptext12:	
  5861 ;; *************** function _SPI_exchange *****************
  5862 ;; Defined at:
  5863 ;;		line 45 in file "main.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  buf             1    wreg     PTR unsigned char 
  5866 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5867 ;;		 -> can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), can_txf_clear@can_int_flag(4), 
  5868 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5869 ;;  len             1    8[COMMON] unsigned char 
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;  buf             1   13[COMMON] PTR unsigned char 
  5872 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5873 ;;		 -> can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), can_txf_clear@can_int_flag(4), 
  5874 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5875 ;;  bytes_writte    1   12[COMMON] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      unsigned char 
  5878 ;; Registers used:
  5879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5885 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;Total ram usage:        6 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    2
  5892 ;; This function calls:
  5893 ;;		_SPI_Exchange8bitBuffer
  5894 ;; This function is called by:
  5895 ;;		_can_ope_mode
  5896 ;;		_can_txf_clear
  5897 ;;		_can_receive
  5898 ;;		_can_send
  5899 ;;		_can_status_check
  5900 ;;		_main
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function _SPI_exchange
  5906  0EA4                     _SPI_exchange:	
  5907                           
  5908                           ;incstack = 0
  5909                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5910                           ;SPI_exchange@buf stored from wreg
  5911  0EA4  00FD               	movwf	SPI_exchange@buf
  5912                           
  5913                           ;main.c: 46: LATAbits.LATA4 = 0;
  5914  0EA5  0022               	movlb	2	; select bank2
  5915  0EA6  120C               	bcf	12,4	;volatile
  5916                           
  5917                           ;main.c: 47: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  5918  0EA7  0878               	movf	SPI_exchange@len,w
  5919  0EA8  00F9               	movwf	??_SPI_exchange
  5920  0EA9  0879               	movf	??_SPI_exchange,w
  5921  0EAA  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  5922  0EAB  087D               	movf	SPI_exchange@buf,w
  5923  0EAC  00FA               	movwf	??_SPI_exchange+1
  5924  0EAD  087A               	movf	??_SPI_exchange+1,w
  5925  0EAE  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  5926  0EAF  087D               	movf	SPI_exchange@buf,w
  5927  0EB0  318F  27B2         	fcall	_SPI_Exchange8bitBuffer
  5928  0EB2  00FB               	movwf	??_SPI_exchange+2
  5929  0EB3  087B               	movf	??_SPI_exchange+2,w
  5930  0EB4  00FC               	movwf	SPI_exchange@bytes_written
  5931                           
  5932                           ;main.c: 48: LATAbits.LATA4 = 1;
  5933  0EB5  0022               	movlb	2	; select bank2
  5934  0EB6  160C               	bsf	12,4	;volatile
  5935                           
  5936                           ;main.c: 49: return bytes_written;
  5937  0EB7  087C               	movf	SPI_exchange@bytes_written,w
  5938  0EB8  0008               	return
  5939  0EB9                     __end_of_SPI_exchange:	
  5940                           
  5941                           	psect	text13
  5942  0FB2                     __ptext13:	
  5943 ;; *************** function _SPI_Exchange8bitBuffer *****************
  5944 ;; Defined at:
  5945 ;;		line 91 in file "mcc_generated_files/spi.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  dataIn          1    wreg     PTR unsigned char 
  5948 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5949 ;;		 -> can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), can_txf_clear@can_int_flag(4), 
  5950 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5951 ;;  bufLen          1    1[COMMON] unsigned char 
  5952 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  5953 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5954 ;;		 -> can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), can_txf_clear@can_int_flag(4), 
  5955 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  5958 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5959 ;;		 -> can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), can_txf_clear@can_int_flag(4), 
  5960 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5961 ;;  bytesWritten    1    7[COMMON] unsigned char 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      unsigned char 
  5964 ;; Registers used:
  5965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;Total ram usage:        7 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    1
  5978 ;; This function calls:
  5979 ;;		_SPI_Exchange8bit
  5980 ;; This function is called by:
  5981 ;;		_SPI_exchange
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           
  5986                           ;psect for function _SPI_Exchange8bitBuffer
  5987  0FB2                     _SPI_Exchange8bitBuffer:	
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5991                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  5992  0FB2  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  5993                           
  5994                           ;spi.c: 93: uint8_t bytesWritten = 0;
  5995  0FB3  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  5996                           
  5997                           ;spi.c: 95: if(bufLen != 0)
  5998  0FB4  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  5999  0FB5  1903               	btfsc	3,2
  6000  0FB6  2FFE               	goto	l1664
  6001                           
  6002                           ;spi.c: 96: {
  6003                           ;spi.c: 97: if(dataIn != (0))
  6004  0FB7  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  6005  0FB8  1D03               	btfss	3,2
  6006  0FB9  2FE0               	goto	l1652
  6007  0FBA  2FE5               	goto	l1654
  6008  0FBB                     l1644:	
  6009                           ;spi.c: 98: {
  6010                           ;spi.c: 99: while(bytesWritten < bufLen)
  6011                           
  6012                           
  6013                           ;spi.c: 100: {
  6014                           ;spi.c: 101: if(dataOut == (0))
  6015  0FBB  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6016  0FBC  1D03               	btfss	3,2
  6017  0FBD  2FC9               	goto	l1648
  6018                           
  6019                           ;spi.c: 102: {
  6020                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  6021  0FBE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6022  0FBF  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6023  0FC0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6024  0FC1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6025  0FC2  0086               	movwf	6
  6026  0FC3  0187               	clrf	7
  6027  0FC4  0801               	movf	1,w
  6028  0FC5  318E  2669  318F   	fcall	_SPI_Exchange8bit
  6029                           
  6030                           ;spi.c: 104: }
  6031  0FC8  2FDC               	goto	l1650
  6032  0FC9                     l1648:	
  6033                           
  6034                           ;spi.c: 105: else
  6035                           ;spi.c: 106: {
  6036                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  6037  0FC9  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6038  0FCA  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6039  0FCB  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6040  0FCC  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6041  0FCD  0086               	movwf	6
  6042  0FCE  0187               	clrf	7
  6043  0FCF  0801               	movf	1,w
  6044  0FD0  318E  2669  318F   	fcall	_SPI_Exchange8bit
  6045  0FD3  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6046  0FD4  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6047  0FD5  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6048  0FD6  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  6049  0FD7  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  6050  0FD8  0086               	movwf	6
  6051  0FD9  0187               	clrf	7
  6052  0FDA  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6053  0FDB  0081               	movwf	1
  6054  0FDC                     l1650:	
  6055                           
  6056                           ;spi.c: 108: }
  6057                           ;spi.c: 110: bytesWritten++;
  6058  0FDC  3001               	movlw	1
  6059  0FDD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6060  0FDE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6061  0FDF  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6062  0FE0                     l1652:	
  6063  0FE0  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6064  0FE1  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6065  0FE2  1803               	btfsc	3,0
  6066  0FE3  2FFE               	goto	l1664
  6067  0FE4  2FBB               	goto	l1644
  6068  0FE5                     l1654:	
  6069                           ;spi.c: 111: }
  6070                           ;spi.c: 112: }
  6071                           
  6072                           
  6073                           ;spi.c: 113: else
  6074                           ;spi.c: 114: {
  6075                           ;spi.c: 115: if(dataOut != (0))
  6076  0FE5  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6077  0FE6  1D03               	btfss	3,2
  6078  0FE7  2FFA               	goto	l1662
  6079  0FE8  2FFE               	goto	l1664
  6080  0FE9                     l1658:	
  6081                           ;spi.c: 116: {
  6082                           ;spi.c: 117: while(bytesWritten < bufLen )
  6083                           
  6084                           
  6085                           ;spi.c: 118: {
  6086                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  6087  0FE9  3000               	movlw	0
  6088  0FEA  318E  2669  318F   	fcall	_SPI_Exchange8bit
  6089  0FED  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6090  0FEE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6091  0FEF  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6092  0FF0  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6093  0FF1  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6094  0FF2  0086               	movwf	6
  6095  0FF3  0187               	clrf	7
  6096  0FF4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6097  0FF5  0081               	movwf	1
  6098                           
  6099                           ;spi.c: 121: bytesWritten++;
  6100  0FF6  3001               	movlw	1
  6101  0FF7  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6102  0FF8  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6103  0FF9  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6104  0FFA                     l1662:	
  6105  0FFA  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6106  0FFB  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6107  0FFC  1C03               	skipc
  6108  0FFD  2FE9               	goto	l1658
  6109  0FFE                     l1664:	
  6110                           
  6111                           ;spi.c: 122: }
  6112                           ;spi.c: 123: }
  6113                           ;spi.c: 124: }
  6114                           ;spi.c: 125: }
  6115                           ;spi.c: 127: return bytesWritten;
  6116  0FFE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6117  0FFF  0008               	return
  6118  1000                     __end_of_SPI_Exchange8bitBuffer:	
  6119                           
  6120                           	psect	text14
  6121  0E69                     __ptext14:	
  6122 ;; *************** function _SPI_Exchange8bit *****************
  6123 ;; Defined at:
  6124 ;;		line 77 in file "mcc_generated_files/spi.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  data            1    wreg     unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  data            1    0[COMMON] unsigned char 
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      unsigned char 
  6131 ;; Registers used:
  6132 ;;		wreg
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;Total ram usage:        1 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_SPI_Exchange8bitBuffer
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _SPI_Exchange8bit
  6153  0E69                     _SPI_Exchange8bit:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _SPI_Exchange8bit: [wreg]
  6157                           ;SPI_Exchange8bit@data stored from wreg
  6158  0E69  00F0               	movwf	SPI_Exchange8bit@data
  6159                           
  6160                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  6161  0E6A  0024               	movlb	4	; select bank4
  6162  0E6B  1395               	bcf	21,7	;volatile
  6163                           
  6164                           ;spi.c: 82: SSP1BUF = data;
  6165  0E6C  0870               	movf	SPI_Exchange8bit@data,w
  6166  0E6D  0091               	movwf	17	;volatile
  6167  0E6E                     l113:	
  6168                           ;spi.c: 85: {
  6169                           
  6170                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  6171                           
  6172  0E6E  1C14               	btfss	20,0	;volatile
  6173  0E6F  2E6E               	goto	l113
  6174                           
  6175                           ;spi.c: 86: }
  6176                           ;spi.c: 88: return (SSP1BUF);
  6177  0E70  0811               	movf	17,w	;volatile
  6178  0E71  0008               	return
  6179  0E72                     __end_of_SPI_Exchange8bit:	
  6180                           
  6181                           	psect	text15
  6182  00A2                     __ptext15:	
  6183 ;; *************** function _atoi *****************
  6184 ;; Defined at:
  6185 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  s               1    wreg     PTR const unsigned char 
  6188 ;;		 -> buf(9), 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  s               1   13[COMMON] PTR const unsigned char 
  6191 ;;		 -> buf(9), 
  6192 ;;  a               2   11[COMMON] int 
  6193 ;;  sign            1   10[COMMON] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  2    6[COMMON] int 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        8 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    1
  6210 ;; This function calls:
  6211 ;;		___wmul
  6212 ;;		_isdigit
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _atoi
  6220  00A2                     _atoi:	
  6221                           
  6222                           ;incstack = 0
  6223                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6224                           ;atoi@s stored from wreg
  6225  00A2  00FD               	movwf	atoi@s
  6226  00A3                     l2158:	
  6227  00A3  087D               	movf	atoi@s,w
  6228  00A4  0086               	movwf	6
  6229  00A5  0187               	clrf	7
  6230  00A6  3020               	movlw	32
  6231  00A7  0601               	xorwf	1,w
  6232  00A8  1D03               	btfss	3,2
  6233  00A9  28AF               	goto	l2160
  6234  00AA                     l2156:	
  6235  00AA  3001               	movlw	1
  6236  00AB  00F8               	movwf	??_atoi
  6237  00AC  0878               	movf	??_atoi,w
  6238  00AD  07FD               	addwf	atoi@s,f
  6239  00AE  28A3               	goto	l2158
  6240  00AF                     l2160:	
  6241  00AF  087D               	movf	atoi@s,w
  6242  00B0  0086               	movwf	6
  6243  00B1  0187               	clrf	7
  6244  00B2  3009               	movlw	9
  6245  00B3  0601               	xorwf	1,w
  6246  00B4  1903               	btfsc	3,2
  6247  00B5  28AA               	goto	l2156
  6248  00B6  01FB               	clrf	atoi@a
  6249  00B7  01FC               	clrf	atoi@a+1
  6250  00B8  01FA               	clrf	atoi@sign
  6251  00B9  087D               	movf	atoi@s,w
  6252  00BA  0086               	movwf	6
  6253  00BB  0187               	clrf	7
  6254  00BC  302D               	movlw	45
  6255  00BD  0601               	xorwf	1,w
  6256  00BE  1D03               	btfss	3,2
  6257  00BF  28C5               	goto	l2168
  6258  00C0  3001               	movlw	1
  6259  00C1  00F8               	movwf	??_atoi
  6260  00C2  0878               	movf	??_atoi,w
  6261  00C3  07FA               	addwf	atoi@sign,f
  6262  00C4  28CC               	goto	l2174
  6263  00C5                     l2168:	
  6264  00C5  087D               	movf	atoi@s,w
  6265  00C6  0086               	movwf	6
  6266  00C7  0187               	clrf	7
  6267  00C8  302B               	movlw	43
  6268  00C9  0601               	xorwf	1,w
  6269  00CA  1D03               	btfss	3,2
  6270  00CB  28D0               	goto	l2176
  6271  00CC                     l2174:	
  6272  00CC  3001               	movlw	1
  6273  00CD  00F8               	movwf	??_atoi
  6274  00CE  0878               	movf	??_atoi,w
  6275  00CF  07FD               	addwf	atoi@s,f
  6276  00D0                     l2176:	
  6277  00D0  087D               	movf	atoi@s,w
  6278  00D1  0086               	movwf	6
  6279  00D2  0187               	clrf	7
  6280  00D3  0801               	movf	1,w
  6281  00D4  318E  2687  3180   	fcall	_isdigit
  6282  00D7  1C03               	btfss	3,0
  6283  00D8  28F5               	goto	l2178
  6284  00D9  087C               	movf	atoi@a+1,w
  6285  00DA  00F1               	movwf	___wmul@multiplier+1
  6286  00DB  087B               	movf	atoi@a,w
  6287  00DC  00F0               	movwf	___wmul@multiplier
  6288  00DD  300A               	movlw	10
  6289  00DE  00F2               	movwf	___wmul@multiplicand
  6290  00DF  3000               	movlw	0
  6291  00E0  00F3               	movwf	___wmul@multiplicand+1
  6292  00E1  318E  26D0  3180   	fcall	___wmul
  6293  00E4  087D               	movf	atoi@s,w
  6294  00E5  0086               	movwf	6
  6295  00E6  0187               	clrf	7
  6296  00E7  0801               	movf	1,w
  6297  00E8  0770               	addwf	?___wmul,w
  6298  00E9  00F8               	movwf	??_atoi
  6299  00EA  0871               	movf	?___wmul+1,w
  6300  00EB  1803               	skipnc
  6301  00EC  0A71               	incf	?___wmul+1,w
  6302  00ED  00F9               	movwf	??_atoi+1
  6303  00EE  0878               	movf	??_atoi,w
  6304  00EF  3ED0               	addlw	208
  6305  00F0  00FB               	movwf	atoi@a
  6306  00F1  30FF               	movlw	255
  6307  00F2  3D79               	addwfc	??_atoi+1,w
  6308  00F3  00FC               	movwf	atoi@a+1
  6309  00F4  28CC               	goto	l2174
  6310  00F5                     l2178:	
  6311  00F5  087A               	movf	atoi@sign,w
  6312  00F6  1903               	btfsc	3,2
  6313  00F7  2904               	goto	l2184
  6314  00F8  097B               	comf	atoi@a,w
  6315  00F9  00F8               	movwf	??_atoi
  6316  00FA  097C               	comf	atoi@a+1,w
  6317  00FB  00F9               	movwf	??_atoi+1
  6318  00FC  0AF8               	incf	??_atoi,f
  6319  00FD  1903               	skipnz
  6320  00FE  0AF9               	incf	??_atoi+1,f
  6321  00FF  0878               	movf	??_atoi,w
  6322  0100  00F6               	movwf	?_atoi
  6323  0101  0879               	movf	??_atoi+1,w
  6324  0102  00F7               	movwf	?_atoi+1
  6325  0103  0008               	return
  6326  0104                     l2184:	
  6327  0104  087C               	movf	atoi@a+1,w
  6328  0105  00F7               	movwf	?_atoi+1
  6329  0106  087B               	movf	atoi@a,w
  6330  0107  00F6               	movwf	?_atoi
  6331  0108  0008               	return
  6332  0109                     __end_of_atoi:	
  6333                           
  6334                           	psect	text16
  6335  0E87                     __ptext16:	
  6336 ;; *************** function _isdigit *****************
  6337 ;; Defined at:
  6338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  c               1    wreg     unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  c               1    1[COMMON] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;Total ram usage:        2 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; This function calls:
  6359 ;;		Nothing
  6360 ;; This function is called by:
  6361 ;;		_printf
  6362 ;;		_atoi
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _isdigit
  6368  0E87                     _isdigit:	
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6372                           ;isdigit@c stored from wreg
  6373  0E87  00F1               	movwf	isdigit@c
  6374  0E88  01F0               	clrf	_isdigit$681
  6375  0E89  303A               	movlw	58
  6376  0E8A  0271               	subwf	isdigit@c,w
  6377  0E8B  1803               	skipnc
  6378  0E8C  2E93               	goto	l1676
  6379  0E8D  3030               	movlw	48
  6380  0E8E  0271               	subwf	isdigit@c,w
  6381  0E8F  1C03               	skipc
  6382  0E90  2E93               	goto	l1676
  6383  0E91  01F0               	clrf	_isdigit$681
  6384  0E92  0AF0               	incf	_isdigit$681,f
  6385  0E93                     l1676:	
  6386  0E93  0C70               	rrf	_isdigit$681,w
  6387  0E94  0008               	return
  6388  0E95                     __end_of_isdigit:	
  6389                           
  6390                           	psect	text17
  6391  0ED0                     __ptext17:	
  6392 ;; *************** function ___wmul *****************
  6393 ;; Defined at:
  6394 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  multiplier      2    0[COMMON] unsigned int 
  6397 ;;  multiplicand    2    2[COMMON] unsigned int 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  product         2    4[COMMON] unsigned int 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  2    0[COMMON] unsigned int 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2, status,0
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;Total ram usage:        6 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_printf
  6419 ;;		_atoi
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function ___wmul
  6425  0ED0                     ___wmul:	
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6429  0ED0  01F4               	clrf	___wmul@product
  6430  0ED1  01F5               	clrf	___wmul@product+1
  6431  0ED2                     l1682:	
  6432  0ED2  1C70               	btfss	___wmul@multiplier,0
  6433  0ED3  2ED8               	goto	l470
  6434  0ED4  0872               	movf	___wmul@multiplicand,w
  6435  0ED5  07F4               	addwf	___wmul@product,f
  6436  0ED6  0873               	movf	___wmul@multiplicand+1,w
  6437  0ED7  3DF5               	addwfc	___wmul@product+1,f
  6438  0ED8                     l470:	
  6439  0ED8  3001               	movlw	1
  6440  0ED9                     u1365:	
  6441  0ED9  35F2               	lslf	___wmul@multiplicand,f
  6442  0EDA  0DF3               	rlf	___wmul@multiplicand+1,f
  6443  0EDB  0B89               	decfsz	9,f
  6444  0EDC  2ED9               	goto	u1365
  6445  0EDD  3001               	movlw	1
  6446  0EDE                     u1375:	
  6447  0EDE  36F1               	lsrf	___wmul@multiplier+1,f
  6448  0EDF  0CF0               	rrf	___wmul@multiplier,f
  6449  0EE0  0B89               	decfsz	9,f
  6450  0EE1  2EDE               	goto	u1375
  6451  0EE2  0870               	movf	___wmul@multiplier,w
  6452  0EE3  0471               	iorwf	___wmul@multiplier+1,w
  6453  0EE4  1D03               	btfss	3,2
  6454  0EE5  2ED2               	goto	l1682
  6455  0EE6  0875               	movf	___wmul@product+1,w
  6456  0EE7  00F1               	movwf	?___wmul+1
  6457  0EE8  0874               	movf	___wmul@product,w
  6458  0EE9  00F0               	movwf	?___wmul
  6459  0EEA  0008               	return
  6460  0EEB                     __end_of___wmul:	
  6461                           
  6462                           	psect	text18
  6463  0E95                     __ptext18:	
  6464 ;; *************** function _SYSTEM_Initialize *****************
  6465 ;; Defined at:
  6466 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    1
  6487 ;; This function calls:
  6488 ;;		_EUSART_Initialize
  6489 ;;		_OSCILLATOR_Initialize
  6490 ;;		_PIN_MANAGER_Initialize
  6491 ;;		_SPI_Initialize
  6492 ;;		_WDT_Initialize
  6493 ;; This function is called by:
  6494 ;;		_main
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _SYSTEM_Initialize
  6500  0E95                     _SYSTEM_Initialize:	
  6501                           
  6502                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6506  0E95  318E  26B9  318E   	fcall	_PIN_MANAGER_Initialize
  6507                           
  6508                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6509  0E98  318E  265B  318E   	fcall	_OSCILLATOR_Initialize
  6510                           
  6511                           ;mcc.c: 75: WDT_Initialize();
  6512  0E9B  318E  2648  318E   	fcall	_WDT_Initialize
  6513                           
  6514                           ;mcc.c: 76: SPI_Initialize();
  6515  0E9E  318E  2662  318E   	fcall	_SPI_Initialize
  6516                           
  6517                           ;mcc.c: 77: EUSART_Initialize();
  6518  0EA1  318E  267C         	fcall	_EUSART_Initialize
  6519  0EA3  0008               	return
  6520  0EA4                     __end_of_SYSTEM_Initialize:	
  6521                           
  6522                           	psect	text19
  6523  0E48                     __ptext19:	
  6524 ;; *************** function _WDT_Initialize *****************
  6525 ;; Defined at:
  6526 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_SYSTEM_Initialize
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           
  6554                           ;psect for function _WDT_Initialize
  6555  0E48                     _WDT_Initialize:	
  6556                           
  6557                           ;mcc.c: 93: WDTCON = 0x16;
  6558                           
  6559                           ;incstack = 0
  6560                           ; Regs used in _WDT_Initialize: [wreg]
  6561  0E48  3016               	movlw	22
  6562  0E49  0021               	movlb	1	; select bank1
  6563  0E4A  0097               	movwf	23	;volatile
  6564  0E4B  0008               	return
  6565  0E4C                     __end_of_WDT_Initialize:	
  6566                           
  6567                           	psect	text20
  6568  0E62                     __ptext20:	
  6569 ;; *************** function _SPI_Initialize *****************
  6570 ;; Defined at:
  6571 ;;		line 63 in file "mcc_generated_files/spi.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      void 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;Total ram usage:        0 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_SYSTEM_Initialize
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _SPI_Initialize
  6600  0E62                     _SPI_Initialize:	
  6601                           
  6602                           ;spi.c: 68: SSP1STAT = 0x40;
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  6606  0E62  3040               	movlw	64
  6607  0E63  0024               	movlb	4	; select bank4
  6608  0E64  0094               	movwf	20	;volatile
  6609                           
  6610                           ;spi.c: 71: SSP1CON1 = 0x20;
  6611  0E65  3020               	movlw	32
  6612  0E66  0095               	movwf	21	;volatile
  6613                           
  6614                           ;spi.c: 74: SSP1ADD = 0x00;
  6615  0E67  0192               	clrf	18	;volatile
  6616  0E68  0008               	return
  6617  0E69                     __end_of_SPI_Initialize:	
  6618                           
  6619                           	psect	text21
  6620  0EB9                     __ptext21:	
  6621 ;; *************** function _PIN_MANAGER_Initialize *****************
  6622 ;; Defined at:
  6623 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;		None
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, status,2
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;Total ram usage:        0 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; This function calls:
  6644 ;;		Nothing
  6645 ;; This function is called by:
  6646 ;;		_SYSTEM_Initialize
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _PIN_MANAGER_Initialize
  6652  0EB9                     _PIN_MANAGER_Initialize:	
  6653                           
  6654                           ;pin_manager.c: 57: LATA = 0x10;
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6658  0EB9  3010               	movlw	16
  6659  0EBA  0022               	movlb	2	; select bank2
  6660  0EBB  008C               	movwf	12	;volatile
  6661                           
  6662                           ;pin_manager.c: 58: LATC = 0x00;
  6663  0EBC  018E               	clrf	14	;volatile
  6664                           
  6665                           ;pin_manager.c: 63: TRISA = 0x2F;
  6666  0EBD  302F               	movlw	47
  6667  0EBE  0021               	movlb	1	; select bank1
  6668  0EBF  008C               	movwf	12	;volatile
  6669                           
  6670                           ;pin_manager.c: 64: TRISC = 0x32;
  6671  0EC0  3032               	movlw	50
  6672  0EC1  008E               	movwf	14	;volatile
  6673                           
  6674                           ;pin_manager.c: 69: ANSELC = 0x00;
  6675  0EC2  0023               	movlb	3	; select bank3
  6676  0EC3  018E               	clrf	14	;volatile
  6677                           
  6678                           ;pin_manager.c: 70: ANSELA = 0x07;
  6679  0EC4  3007               	movlw	7
  6680  0EC5  008C               	movwf	12	;volatile
  6681                           
  6682                           ;pin_manager.c: 75: WPUA = 0x00;
  6683  0EC6  0024               	movlb	4	; select bank4
  6684  0EC7  018C               	clrf	12	;volatile
  6685                           
  6686                           ;pin_manager.c: 76: WPUC = 0x30;
  6687  0EC8  3030               	movlw	48
  6688  0EC9  008E               	movwf	14	;volatile
  6689                           
  6690                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6691  0ECA  0021               	movlb	1	; select bank1
  6692  0ECB  1395               	bcf	21,7	;volatile
  6693                           
  6694                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6695  0ECC  0022               	movlb	2	; select bank2
  6696  0ECD  019E               	clrf	30	;volatile
  6697                           
  6698                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6699  0ECE  019D               	clrf	29	;volatile
  6700  0ECF  0008               	return
  6701  0ED0                     __end_of_PIN_MANAGER_Initialize:	
  6702                           
  6703                           	psect	text22
  6704  0E5B                     __ptext22:	
  6705 ;; *************** function _OSCILLATOR_Initialize *****************
  6706 ;; Defined at:
  6707 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		_SYSTEM_Initialize
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           
  6735                           ;psect for function _OSCILLATOR_Initialize
  6736  0E5B                     _OSCILLATOR_Initialize:	
  6737                           
  6738                           ;mcc.c: 83: OSCCON = 0x60;
  6739                           
  6740                           ;incstack = 0
  6741                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6742  0E5B  3060               	movlw	96
  6743  0E5C  0021               	movlb	1	; select bank1
  6744  0E5D  0099               	movwf	25	;volatile
  6745                           
  6746                           ;mcc.c: 85: OSCTUNE = 0x00;
  6747  0E5E  0198               	clrf	24	;volatile
  6748                           
  6749                           ;mcc.c: 87: BORCON = 0x00;
  6750  0E5F  0022               	movlb	2	; select bank2
  6751  0E60  0196               	clrf	22	;volatile
  6752  0E61  0008               	return
  6753  0E62                     __end_of_OSCILLATOR_Initialize:	
  6754                           
  6755                           	psect	text23
  6756  0E7C                     __ptext23:	
  6757 ;; *************** function _EUSART_Initialize *****************
  6758 ;; Defined at:
  6759 ;;		line 53 in file "mcc_generated_files/eusart.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;Total ram usage:        0 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_SYSTEM_Initialize
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           
  6787                           ;psect for function _EUSART_Initialize
  6788  0E7C                     _EUSART_Initialize:	
  6789                           
  6790                           ;eusart.c: 58: BAUDCON = 0x08;
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6794  0E7C  3008               	movlw	8
  6795  0E7D  0023               	movlb	3	; select bank3
  6796  0E7E  009F               	movwf	31	;volatile
  6797                           
  6798                           ;eusart.c: 61: RCSTA = 0x90;
  6799  0E7F  3090               	movlw	144
  6800  0E80  009D               	movwf	29	;volatile
  6801                           
  6802                           ;eusart.c: 64: TXSTA = 0x24;
  6803  0E81  3024               	movlw	36
  6804  0E82  009E               	movwf	30	;volatile
  6805                           
  6806                           ;eusart.c: 67: SPBRGL = 0x33;
  6807  0E83  3033               	movlw	51
  6808  0E84  009B               	movwf	27	;volatile
  6809                           
  6810                           ;eusart.c: 70: SPBRGH = 0x00;
  6811  0E85  019C               	clrf	28	;volatile
  6812  0E86  0008               	return
  6813  0E87                     __end_of_EUSART_Initialize:	
  6814                           
  6815                           	psect	text24
  6816  0E72                     __ptext24:	
  6817 ;; *************** function _EUSART_Read *****************
  6818 ;; Defined at:
  6819 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;		None
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      unsigned char 
  6826 ;; Registers used:
  6827 ;;		wreg
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;Total ram usage:        0 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_main
  6843 ;;		_getch
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           
  6848                           ;psect for function _EUSART_Read
  6849  0E72                     _EUSART_Read:	
  6850  0E72                     l51:	
  6851                           ;eusart.c: 78: {
  6852                           
  6853                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _EUSART_Read: [wreg]
  6857                           
  6858  0E72  0020               	movlb	0	; select bank0
  6859  0E73  1E91               	btfss	17,5	;volatile
  6860  0E74  2E72               	goto	l51
  6861                           
  6862                           ;eusart.c: 79: }
  6863                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  6864  0E75  0023               	movlb	3	; select bank3
  6865  0E76  1C9D               	btfss	29,1	;volatile
  6866  0E77  2E7A               	goto	l1998
  6867                           
  6868                           ;eusart.c: 83: {
  6869                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  6870  0E78  121D               	bcf	29,4	;volatile
  6871                           
  6872                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  6873  0E79  161D               	bsf	29,4	;volatile
  6874  0E7A                     l1998:	
  6875                           
  6876                           ;eusart.c: 88: }
  6877                           ;eusart.c: 90: return RCREG;
  6878  0E7A  0819               	movf	25,w	;volatile
  6879  0E7B  0008               	return
  6880  0E7C                     __end_of_EUSART_Read:	
  6881  007E                     btemp	set	126	;btemp
  6882  007E                     wtemp0	set	126


Data Sizes:
    Strings     811
    Constant    35
    Data        4
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80      0      21
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_39(CODE[7]), printf@c(BANK0[1]), buf(BANK1[9]), can_receive@rx_buf(BANK0[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_38(CODE[25]), STR_37(CODE[19]), STR_36(CODE[24]), STR_35(CODE[18]), 
		 -> STR_34(CODE[22]), STR_33(CODE[44]), STR_32(CODE[26]), STR_31(CODE[42]), 
		 -> STR_30(CODE[38]), STR_29(CODE[54]), STR_28(CODE[59]), STR_27(CODE[51]), 
		 -> STR_26(CODE[23]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[21]), STR_19(CODE[3]), 
		 -> STR_18(CODE[13]), STR_17(CODE[13]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[20]), STR_13(CODE[14]), STR_12(CODE[14]), STR_11(CODE[14]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[22]), STR_7(CODE[25]), 
		 -> STR_6(CODE[15]), STR_5(CODE[16]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    can_receive@rx_buf_ptr	PTR unsigned char  size(1) Largest target is 15
		 -> can_receive@rx_buf(BANK0[15]), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_SPI_exchange
    _main->_atoi
    _can_status_check->_SPI_exchange
    _can_txf_clear->_SPI_exchange
    _can_receive->_SPI_exchange
    _can_send->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_receive->_printf
    _can_send->_printf
    _can_ope_mode->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   43967
                                             57 BANK0     23    23      0
                        _EUSART_Read
                       _SPI_exchange
                  _SYSTEM_Initialize
                               _atoi
                       _can_ope_mode
                           _can_send
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    5134
                                             25 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     6     6      0   15950
                                             51 BANK0      6     6      0
                       _SPI_exchange
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                        9     9      0    1943
                                              0 BANK0      9     9      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         26    26      0    7175
                                             25 BANK0     26    26      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            31    30      1    7778
                                             25 BANK0     31    30      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_ope_mode                                         7     7      0    6839
                                             25 BANK0      7     7      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              29    21      8    4872
                                              0 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    1774
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     704
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SPI_exchange
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      15       7       26.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      73      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      73      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 14 04:53:56 2018

                    _SPI_Initialize 0E62               __end_of_can_txf_clear 0F13  
                                 _c 00A7                         __CFG_CP$OFF 0000  
                                l51 0E72                                  l58 0005  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 134A  
               ___wmul@multiplicand 0072               __size_of_SPI_exchange 0015  
                       __CFG_LVP$ON 0000                                 l113 0E6E  
                               l211 0214                                 l214 0226  
                               l241 0096                                 l322 0353  
                               l243 009C                                 l235 007E  
                               l236 007A                                 l334 042D  
                               l238 0090                                 l335 039D  
                               l239 008C                                 l361 0475  
                               l281 0713                                 l356 0453  
                               l365 04AC                                 l470 0ED8  
                               l386 0567            __end_of_can_status_check 00A2  
                      __CFG_CPD$OFF 0000                                 _abc 1344  
                               _buf 00A8                                 _idx 00A6  
                               _sid 00A4                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
                 can_receive@rx_buf 003F                        ?_EUSART_Read 0070  
                              l2122 032B                                l2042 0211  
                              l2108 0300                                l2118 0329  
                              l2054 0234                                l2310 06AC  
                              l2160 00AF                                l2080 0289  
                              l2048 0222                                l2056 0239  
                              l2240 05E0                                l2232 05D3  
                              l2208 057D                                l2242 05E3  
                              l2330 075E                                l2218 059F  
                              l2156 00AA                                l2076 0283  
                              l2340 0793                                l2324 06E7  
                              l2252 05F7                                l2236 05DB  
                              l2228 05BF                                l2332 0774  
                              l2174 00CC                                l2158 00A3  
                              l2078 0258                                l2326 0719  
                              l2246 05EA                                l2184 0104  
                              l2176 00D0                                l2168 00C5  
                              l1712 0F65                                l1704 0F47  
                              l2096 02CC                                l2264 060B  
                              l2344 079F                                l2178 00F5  
                              l1650 0FDC                                l1706 0F53  
                              l1730 0F25                                l1802 0403  
                              l2362 07E3                                l2258 0601  
                              l2346 07A0                                l1644 0FBB  
                              l1652 0FE0                                l1716 0F6E  
                              l1820 0447                                l2292 0678  
                              l2284 064D                                l2268 0612  
                              l1662 0FFA                                l1654 0FE5  
                              l1734 0F31                                l2358 07D7  
                              l2286 066A                                l1648 0FC9  
                              l1664 0FFE                                l1728 0F19  
                              l1760 036E                                l1808 040C  
                              l1682 0ED2                                l1658 0FE9  
                              l1738 0F3A                                l1754 0358  
                              l1676 0E93                                l1780 03B4  
                              l1756 0361                                l1748 034E  
                              l1870 04E4                                l1846 0497  
                              l1790 03D1                                l1782 03C2  
                              l1872 04E8                                l1880 04FD  
                              l1864 04D5                                l1856 04C8  
                              l1848 04A0                                l1792 03E0  
                              l1776 03B2                                l1768 039F  
                              l1882 0503                                l1858 04CB  
                              l1786 03CF                                l1884 052A  
                              l1892 0551                                l1876 04F5  
                              l1796 03ED                                l1894 0555  
                              l1798 03F8                                l1982 01B9  
                              l1974 01A8                                l1896 0332  
                              l1984 01BE                                l1988 01D0  
                              l1998 0E7A                                STR_1 11F0  
                              STR_2 12CF                                STR_3 1228  
                              STR_4 126C                                STR_5 12B0  
                              STR_6 12C0                                STR_7 1154  
                              STR_8 11B1                                STR_9 1166  
                              u1405 0F4A                                _LATA 010C  
                              u2070 0327                                u2054 030A  
                              u2055 0309                                _LATC 010E  
                              u1425 0F54                                u1505 0F32  
                              u1435 0F5E                                u1365 0ED9  
                              u1445 0F66                                u1375 0EDE  
                              u1705 04BB                                u1475 0F1C  
                              u1635 046E                                u2355 0638  
                              u1804 0EF4                                u1805 0EF3  
                              u1495 0F2B                                u1575 03C8  
                              u1815 012B                                u1665 0490  
                              u1905 0F85                                u1860 01E5  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 00A2                                _main 0568  
                              _mode 00A0                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0002  
            __end_of_SPI_Initialize 0E69                        _SPI_exchange 0EA4  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 1000  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 00DF       __end_of_OSCILLATOR_Initialize 0E62  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 11C3                               STR_11 12DE  
                             STR_12 12EC                               STR_20 11C7  
                             STR_13 12FA                               STR_21 1184  
                             STR_22 125B                               STR_14 11DC  
                             STR_30 10FB                               STR_23 129F  
                             STR_15 1239                               STR_31 10D1  
                             STR_16 127D                               STR_24 124A  
                             STR_40 1217                               STR_32 1121  
                             STR_17 1308                               STR_25 128E  
                             STR_33 10A5                       __CFG_WDTE$OFF 0000  
                             STR_18 1315                               STR_34 119B  
                             STR_26 116D                               STR_35 1205  
                             STR_19 1347                               STR_27 1072  
                             STR_36 113C                               STR_28 1001  
                             STR_37 1204                               STR_29 103C  
                             STR_38 113B                               STR_39 1334  
                   __end_of___lwdiv 0F73                     __end_of___lwmod 0F3F  
     can_status_check@bytes_written 0055                               _RCREG 0199  
                             _RCSTA 019D                        main@mask_buf 006A  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 132C                      _WDT_Initialize 0E48  
                   __end_of_max_idx 1001                     __end_of_isdigit 0E95  
                             atoi@a 007B                               atoi@s 007D  
                             _putch 0E50                               main@n 006F  
                     can_send@F2958 00B3                     __end_of_set_sid 0FB2  
                             status 0003                               wtemp0 007E  
            can_send@can_status_buf 004C                     ?_SPI_Initialize 0070  
                   __initialization 07E5                   can_send@debug_buf 0053  
                      __end_of_atoi 0109                        __end_of_main 07E5  
                    ??_EUSART_Write 0070              can_status_check@status 0058  
                            ??_atoi 0078                              ??_main 0059  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0E4C  
          __end_of_SPI_Exchange8bit 0E72               __size_of_can_ope_mode 0045  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                     main@mask_sidh 0068                       main@mask_sidl 0069  
                  __end_of_can_send 032D                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0ED0                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
         can_txf_clear@can_int_flag 0025                              _printf 032D  
                      _can_ope_mode 000C                              main@rc 0064  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 003B                    __end_of_rxfnsidh 1341  
                  __end_of_txbnsidh 1344                    __end_of_rxmnsidh 134E  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0E95  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
                    can_receive@dlc 004E                      can_receive@sid 004F  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK1 0E4C                 ??_SYSTEM_Initialize 0070  
                    can_send@tx_buf 003E                      can_send@status 0052  
                     __end_of_putch 0E55                          __end_of_nm 134C  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 0053           __end_of_SYSTEM_Initialize 0EA4  
                           ??_putch 0071                          __pbssBANK1 00A0  
              __end_of_EUSART_Write 000C                          __pmaintext 0568  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0020                           ?_can_send 0039  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211              __size_of_can_txf_clear 0028  
                  ??_SPI_Initialize 0070                       ??_can_receive 0039  
                   __size_of___wmul 001B                             ___lwdiv 0F3F  
                           ___lwmod 0F13                             __ptext1 0F73  
                           __ptext2 0051                             __ptext3 0EEB  
                           __ptext4 0109                             __ptext5 01E8  
                           __ptext6 000C                             __ptext7 032D  
                           __ptext8 0E50                             __ptext9 0004  
                   __size_of_printf 023B                   __end_of_hexpowers 1334  
                           _dpowers 1322               _OSCILLATOR_Initialize 0E5B  
                           _max_idx 1000                          ??_can_send 003A  
                           _isdigit 0E87            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 0F73      can_status_check@can_status_buf 0056  
                 ?_SPI_Exchange8bit 0070                             main@cmd 006E  
                    can_txf_clear@n 0022                         set_sid@sidh 003F  
                       set_sid@sidl 0040          __size_of_SYSTEM_Initialize 000F  
                           main@sid 0063                             clrloop0 0E56  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070               can_receive@bytes_read 003E  
                 _EUSART_Initialize 0E7C                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 0038  
                           printf@f 0020                       _can_txf_clear 0EEB  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_receive 01E8                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008           __end_of_EUSART_Initialize 0E87  
                        main@rc_450 0065                   can_txf_clear@mask 0023  
                       printf@width 0036            ??_SPI_Exchange8bitBuffer 0073  
          can_ope_mode@can_ctrl_buf 003D               can_receive@rx_buf_ptr 0051  
                    ?_can_txf_clear 0070                      __end_of___wmul 0EEB  
             can_status_check@F2968 00B1                        _EUSART_Write 0004  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 0568  
               start_initialization 07E5                        can_receive@n 0052  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 1347  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         __size_of_can_status_check 0051           can_ope_mode@bytes_written 003C  
                     ?_SPI_exchange 0078                            ??___wmul 0074  
                       _can_receive 0109                         __pdataBANK1 00B1  
                          ??_printf 0028                           ___latbits 0002  
                     __pcstackBANK0 0020                   __size_of_can_send 0145  
     SPI_Exchange8bitBuffer@dataOut 0072          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0E7C                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                     ??_can_txf_clear 0020  
                  ___lwdiv@dividend 0072              _PIN_MANAGER_Initialize 0EB9  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                           can_send@i 0056  
                         can_send@n 0057                            ?_set_sid 0039  
                         _hexpowers 132C                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
                         clear_ram0 0E55                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214                       ?_can_ope_mode 0070  
                 ___wmul@multiplier 0070              _SPI_Exchange8bitBuffer 0FB2  
                        printf@flag 0035                          printf@prec 002D  
                       _EUSART_Read 0E72                         can_send@dlc 0039  
                       can_send@buf 004E                         can_send@len 004F  
                  _can_status_check 0051             __size_of_SPI_Initialize 0007  
           ??_OSCILLATOR_Initialize 0070                      ??_can_ope_mode 0039  
                  __size_of___lwdiv 0034                    __size_of___lwmod 002C  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$681 0070  
              can_ope_mode@ope_mode 003B        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_send 01E8                __end_of_SPI_exchange 0EB9  
                  __size_of_isdigit 000E                            _main$431 005F  
                          _main$432 0061                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0F13  
                          __ptext11 0F3F                            __ptext20 0E62  
                          __ptext12 0EA4                            __ptext21 0EB9  
                          __ptext13 0FB2                            __ptext22 0E5B  
                          __ptext14 0E69                            __ptext23 0E7C  
                          __ptext15 00A2                            __ptext24 0E72  
                          __ptext16 0E87                            __ptext17 0ED0  
                          __ptext18 0E95                            __ptext19 0E48  
                  __size_of_set_sid 003F                        _SSP1CON1bits 0215  
                     __size_of_atoi 0067                       __size_of_main 027D  
              can_send@txb_ctrl_buf 0051                        ?_can_receive 0070  
                          atoi@sign 007A                           printf@idx 002C  
                         printf@len 0030                           printf@val 0033  
                      _SSP1STATbits 0214                            main@mask 0066  
                          _rxfnsidh 133B                            _txbnsidh 1341  
                          _rxmnsidh 134C                      __pstringtext10 1072  
                    __pstringtext11 10A5                      __pstringtext20 11B1  
                    __pstringtext12 10D1                      __pstringtext21 11C7  
                    __pstringtext13 10FB                      __pstringtext30 126C  
                    __pstringtext22 11DC                      __pstringtext14 1121  
                    __pstringtext31 127D                      __pstringtext23 11F0  
                    __pstringtext15 113B                      __pstringtext40 1308  
                    __pstringtext32 128E                      __pstringtext24 1204  
                    __pstringtext16 1154                      __pstringtext41 1315  
                    __pstringtext33 129F                      __pstringtext25 1217  
                    __pstringtext17 116D                      __pstringtext42 1334  
                    __pstringtext34 12B0                      __pstringtext26 1228  
                    __pstringtext18 1184                      __pstringtext43 1347  
                    __pstringtext35 12C0                      __pstringtext27 1239  
                    __pstringtext19 119B                      __pstringtext44 0000  
                    __pstringtext36 12CF                      __pstringtext28 124A  
                    __pstringtext37 12DE                      __pstringtext29 125B  
                    __pstringtext38 12EC                      __pstringtext39 12FA  
                          isdigit@c 0071             __size_of_WDT_Initialize 0004  
                  ___lwmod@dividend 007A             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                  _SPI_Exchange8bit 0E69               can_send@bytes_written 0050  
                          printf@ap 0032                            printf@cp 002E  
        can_txf_clear@bytes_written 0024                       __pstringtext1 1322  
                     __pstringtext2 132C                       __pstringtext3 133B  
                     __pstringtext4 1341                       __pstringtext5 1344  
                     __pstringtext6 134A                       __pstringtext7 134C  
                     __pstringtext8 1000                       __pstringtext9 103C  
                   ___lwmod@divisor 0078                     ___lwmod@counter 007D  
                EUSART_Write@txData 0070      __end_of_PIN_MANAGER_Initialize 0ED0  
              __end_of_can_ope_mode 0051                     set_sid@can_node 0039  
