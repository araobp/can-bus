

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 16 08:47:29 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	stringtext18,global,class=STRCODE,delta=2
    24                           	psect	stringtext19,global,class=STRCODE,delta=2
    25                           	psect	stringtext20,global,class=STRCODE,delta=2
    26                           	psect	stringtext21,global,class=STRCODE,delta=2
    27                           	psect	stringtext22,global,class=STRCODE,delta=2
    28                           	psect	stringtext23,global,class=STRCODE,delta=2
    29                           	psect	stringtext24,global,class=STRCODE,delta=2
    30                           	psect	stringtext25,global,class=STRCODE,delta=2
    31                           	psect	stringtext26,global,class=STRCODE,delta=2
    32                           	psect	stringtext27,global,class=STRCODE,delta=2
    33                           	psect	stringtext28,global,class=STRCODE,delta=2
    34                           	psect	stringtext29,global,class=STRCODE,delta=2
    35                           	psect	stringtext30,global,class=STRCODE,delta=2
    36                           	psect	stringtext31,global,class=STRCODE,delta=2
    37                           	psect	stringtext32,global,class=STRCODE,delta=2
    38                           	psect	stringtext33,global,class=STRCODE,delta=2
    39                           	psect	stringtext34,global,class=STRCODE,delta=2
    40                           	psect	stringtext35,global,class=STRCODE,delta=2
    41                           	psect	stringtext36,global,class=STRCODE,delta=2
    42                           	psect	stringtext37,global,class=STRCODE,delta=2
    43                           	psect	stringtext38,global,class=STRCODE,delta=2
    44                           	psect	stringtext39,global,class=STRCODE,delta=2
    45                           	psect	stringtext40,global,class=STRCODE,delta=2
    46                           	psect	stringtext41,global,class=STRCODE,delta=2
    47                           	psect	stringtext42,global,class=STRCODE,delta=2
    48                           	psect	stringtext43,global,class=STRCODE,delta=2
    49                           	psect	stringtext44,global,class=STRCODE,delta=2
    50                           	psect	stringtext45,global,class=STRCODE,delta=2
    51                           	psect	stringtext46,global,class=STRCODE,delta=2
    52                           	psect	stringtext47,global,class=STRCODE,delta=2
    53                           	psect	stringtext48,global,class=STRCODE,delta=2
    54                           	psect	stringtext49,global,class=STRCODE,delta=2
    55                           	psect	stringtext50,global,class=STRCODE,delta=2
    56                           	psect	stringtext51,global,class=STRCODE,delta=2
    57                           	psect	cinit,global,class=CODE,merge=1,delta=2
    58                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    59                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    60                           	psect	inittext,global,class=CODE,delta=2
    61                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    62                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    63                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    64                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    65                           	psect	text1,local,class=CODE,merge=1,delta=2
    66                           	psect	text2,local,class=CODE,merge=1,delta=2
    67                           	psect	text3,local,class=CODE,merge=1,delta=2
    68                           	psect	text4,local,class=CODE,merge=1,delta=2
    69                           	psect	text5,local,class=CODE,merge=1,delta=2
    70                           	psect	text6,local,class=CODE,merge=1,delta=2
    71                           	psect	text7,local,class=CODE,merge=1,delta=2
    72                           	psect	text8,local,class=CODE,merge=1,delta=2
    73                           	psect	text9,local,class=CODE,merge=1,delta=2
    74                           	psect	text10,local,class=CODE,merge=1,delta=2
    75                           	psect	text11,local,class=CODE,merge=1,delta=2
    76                           	psect	text12,local,class=CODE,merge=1,delta=2
    77                           	psect	text13,local,class=CODE,merge=1,delta=2
    78                           	psect	text14,local,class=CODE,merge=1,delta=2
    79                           	psect	text15,local,class=CODE,merge=1,delta=2
    80                           	psect	text16,local,class=CODE,merge=1,delta=2
    81                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text19,local,class=CODE,merge=1,delta=2
    84                           	psect	text20,local,class=CODE,merge=1,delta=2
    85                           	psect	text21,local,class=CODE,merge=1,delta=2
    86                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text25,local,class=CODE,merge=1,delta=2
    90                           	psect	text26,local,class=CODE,merge=1,delta=2
    91                           	psect	text27,local,class=CODE,merge=1,delta=2
    92                           	psect	text28,local,class=CODE,merge=1,delta=2
    93                           	psect	text29,local,class=CODE,merge=1,delta=2
    94                           	psect	text30,local,class=CODE,merge=1,delta=2
    95                           	psect	text31,local,class=CODE,merge=1,delta=2
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.45
    99                           ; Generated 16/11/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1825 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000E                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  008C                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  010C                     	;# 
   177  010E                     	;# 
   178  0111                     	;# 
   179  0112                     	;# 
   180  0113                     	;# 
   181  0114                     	;# 
   182  0115                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  018C                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0194                     	;# 
   200  0195                     	;# 
   201  0196                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020E                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0298                     	;# 
   236  0298                     	;# 
   237  0299                     	;# 
   238  029A                     	;# 
   239  029B                     	;# 
   240  029C                     	;# 
   241  029D                     	;# 
   242  029E                     	;# 
   243  0311                     	;# 
   244  0311                     	;# 
   245  0312                     	;# 
   246  0313                     	;# 
   247  0318                     	;# 
   248  0318                     	;# 
   249  0319                     	;# 
   250  031A                     	;# 
   251  038C                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  039A                     	;# 
   257  039C                     	;# 
   258  039D                     	;# 
   259  039E                     	;# 
   260  039F                     	;# 
   261  0415                     	;# 
   262  0416                     	;# 
   263  0417                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000E                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0013                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  001E                     	;# 
   305  001F                     	;# 
   306  008C                     	;# 
   307  008E                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0098                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010E                     	;# 
   324  0111                     	;# 
   325  0112                     	;# 
   326  0113                     	;# 
   327  0114                     	;# 
   328  0115                     	;# 
   329  0116                     	;# 
   330  0117                     	;# 
   331  0118                     	;# 
   332  0119                     	;# 
   333  011A                     	;# 
   334  011B                     	;# 
   335  011D                     	;# 
   336  011E                     	;# 
   337  018C                     	;# 
   338  018E                     	;# 
   339  0191                     	;# 
   340  0191                     	;# 
   341  0192                     	;# 
   342  0193                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0199                     	;# 
   349  019A                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020C                     	;# 
   357  020E                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0294                     	;# 
   378  0295                     	;# 
   379  0295                     	;# 
   380  0296                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  029B                     	;# 
   386  029C                     	;# 
   387  029D                     	;# 
   388  029E                     	;# 
   389  0311                     	;# 
   390  0311                     	;# 
   391  0312                     	;# 
   392  0313                     	;# 
   393  0318                     	;# 
   394  0318                     	;# 
   395  0319                     	;# 
   396  031A                     	;# 
   397  038C                     	;# 
   398  038E                     	;# 
   399  0391                     	;# 
   400  0392                     	;# 
   401  0393                     	;# 
   402  039A                     	;# 
   403  039C                     	;# 
   404  039D                     	;# 
   405  039E                     	;# 
   406  039F                     	;# 
   407  0415                     	;# 
   408  0416                     	;# 
   409  0417                     	;# 
   410  041C                     	;# 
   411  041D                     	;# 
   412  041E                     	;# 
   413  0FE4                     	;# 
   414  0FE5                     	;# 
   415  0FE6                     	;# 
   416  0FE7                     	;# 
   417  0FE8                     	;# 
   418  0FE9                     	;# 
   419  0FEA                     	;# 
   420  0FEB                     	;# 
   421  0FED                     	;# 
   422  0FEE                     	;# 
   423  0FEF                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0008                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000E                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  001A                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001E                     	;# 
   451  001F                     	;# 
   452  008C                     	;# 
   453  008E                     	;# 
   454  0091                     	;# 
   455  0092                     	;# 
   456  0093                     	;# 
   457  0095                     	;# 
   458  0096                     	;# 
   459  0097                     	;# 
   460  0098                     	;# 
   461  0099                     	;# 
   462  009A                     	;# 
   463  009B                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009E                     	;# 
   468  010C                     	;# 
   469  010E                     	;# 
   470  0111                     	;# 
   471  0112                     	;# 
   472  0113                     	;# 
   473  0114                     	;# 
   474  0115                     	;# 
   475  0116                     	;# 
   476  0117                     	;# 
   477  0118                     	;# 
   478  0119                     	;# 
   479  011A                     	;# 
   480  011B                     	;# 
   481  011D                     	;# 
   482  011E                     	;# 
   483  018C                     	;# 
   484  018E                     	;# 
   485  0191                     	;# 
   486  0191                     	;# 
   487  0192                     	;# 
   488  0193                     	;# 
   489  0193                     	;# 
   490  0193                     	;# 
   491  0194                     	;# 
   492  0195                     	;# 
   493  0196                     	;# 
   494  0199                     	;# 
   495  019A                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019C                     	;# 
   499  019D                     	;# 
   500  019E                     	;# 
   501  019F                     	;# 
   502  020C                     	;# 
   503  020E                     	;# 
   504  0211                     	;# 
   505  0211                     	;# 
   506  0212                     	;# 
   507  0212                     	;# 
   508  0213                     	;# 
   509  0213                     	;# 
   510  0214                     	;# 
   511  0214                     	;# 
   512  0215                     	;# 
   513  0215                     	;# 
   514  0215                     	;# 
   515  0216                     	;# 
   516  0216                     	;# 
   517  0217                     	;# 
   518  0217                     	;# 
   519  0291                     	;# 
   520  0291                     	;# 
   521  0292                     	;# 
   522  0293                     	;# 
   523  0294                     	;# 
   524  0295                     	;# 
   525  0295                     	;# 
   526  0296                     	;# 
   527  0298                     	;# 
   528  0298                     	;# 
   529  0299                     	;# 
   530  029A                     	;# 
   531  029B                     	;# 
   532  029C                     	;# 
   533  029D                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  038C                     	;# 
   544  038E                     	;# 
   545  0391                     	;# 
   546  0392                     	;# 
   547  0393                     	;# 
   548  039A                     	;# 
   549  039C                     	;# 
   550  039D                     	;# 
   551  039E                     	;# 
   552  039F                     	;# 
   553  0415                     	;# 
   554  0416                     	;# 
   555  0417                     	;# 
   556  041C                     	;# 
   557  041D                     	;# 
   558  041E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008E                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010E                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018E                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019F                     	;# 
   648  020C                     	;# 
   649  020E                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0217                     	;# 
   665  0291                     	;# 
   666  0291                     	;# 
   667  0292                     	;# 
   668  0293                     	;# 
   669  0294                     	;# 
   670  0295                     	;# 
   671  0295                     	;# 
   672  0296                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  029B                     	;# 
   678  029C                     	;# 
   679  029D                     	;# 
   680  029E                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0318                     	;# 
   686  0318                     	;# 
   687  0319                     	;# 
   688  031A                     	;# 
   689  038C                     	;# 
   690  038E                     	;# 
   691  0391                     	;# 
   692  0392                     	;# 
   693  0393                     	;# 
   694  039A                     	;# 
   695  039C                     	;# 
   696  039D                     	;# 
   697  039E                     	;# 
   698  039F                     	;# 
   699  0415                     	;# 
   700  0416                     	;# 
   701  0417                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  0FE4                     	;# 
   706  0FE5                     	;# 
   707  0FE6                     	;# 
   708  0FE7                     	;# 
   709  0FE8                     	;# 
   710  0FE9                     	;# 
   711  0FEA                     	;# 
   712  0FEB                     	;# 
   713  0FED                     	;# 
   714  0FEE                     	;# 
   715  0FEF                     	;# 
   716  0000                     	;# 
   717  0001                     	;# 
   718  0002                     	;# 
   719  0003                     	;# 
   720  0004                     	;# 
   721  0005                     	;# 
   722  0006                     	;# 
   723  0007                     	;# 
   724  0008                     	;# 
   725  0009                     	;# 
   726  000A                     	;# 
   727  000B                     	;# 
   728  000C                     	;# 
   729  000E                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0013                     	;# 
   733  0015                     	;# 
   734  0016                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001C                     	;# 
   742  001E                     	;# 
   743  001F                     	;# 
   744  008C                     	;# 
   745  008E                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0097                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010E                     	;# 
   762  0111                     	;# 
   763  0112                     	;# 
   764  0113                     	;# 
   765  0114                     	;# 
   766  0115                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  0118                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011B                     	;# 
   773  011D                     	;# 
   774  011E                     	;# 
   775  018C                     	;# 
   776  018E                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020C                     	;# 
   795  020E                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0294                     	;# 
   816  0295                     	;# 
   817  0295                     	;# 
   818  0296                     	;# 
   819  0298                     	;# 
   820  0298                     	;# 
   821  0299                     	;# 
   822  029A                     	;# 
   823  029B                     	;# 
   824  029C                     	;# 
   825  029D                     	;# 
   826  029E                     	;# 
   827  0311                     	;# 
   828  0311                     	;# 
   829  0312                     	;# 
   830  0313                     	;# 
   831  0318                     	;# 
   832  0318                     	;# 
   833  0319                     	;# 
   834  031A                     	;# 
   835  038C                     	;# 
   836  038E                     	;# 
   837  0391                     	;# 
   838  0392                     	;# 
   839  0393                     	;# 
   840  039A                     	;# 
   841  039C                     	;# 
   842  039D                     	;# 
   843  039E                     	;# 
   844  039F                     	;# 
   845  0415                     	;# 
   846  0416                     	;# 
   847  0417                     	;# 
   848  041C                     	;# 
   849  041D                     	;# 
   850  041E                     	;# 
   851  0FE4                     	;# 
   852  0FE5                     	;# 
   853  0FE6                     	;# 
   854  0FE7                     	;# 
   855  0FE8                     	;# 
   856  0FE9                     	;# 
   857  0FEA                     	;# 
   858  0FEB                     	;# 
   859  0FED                     	;# 
   860  0FEE                     	;# 
   861  0FEF                     	;# 
   862  0000                     	;# 
   863  0001                     	;# 
   864  0002                     	;# 
   865  0003                     	;# 
   866  0004                     	;# 
   867  0005                     	;# 
   868  0006                     	;# 
   869  0007                     	;# 
   870  0008                     	;# 
   871  0009                     	;# 
   872  000A                     	;# 
   873  000B                     	;# 
   874  000C                     	;# 
   875  000E                     	;# 
   876  0011                     	;# 
   877  0012                     	;# 
   878  0013                     	;# 
   879  0015                     	;# 
   880  0016                     	;# 
   881  0016                     	;# 
   882  0017                     	;# 
   883  0018                     	;# 
   884  0019                     	;# 
   885  001A                     	;# 
   886  001B                     	;# 
   887  001C                     	;# 
   888  001E                     	;# 
   889  001F                     	;# 
   890  008C                     	;# 
   891  008E                     	;# 
   892  0091                     	;# 
   893  0092                     	;# 
   894  0093                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0097                     	;# 
   898  0098                     	;# 
   899  0099                     	;# 
   900  009A                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  010C                     	;# 
   907  010E                     	;# 
   908  0111                     	;# 
   909  0112                     	;# 
   910  0113                     	;# 
   911  0114                     	;# 
   912  0115                     	;# 
   913  0116                     	;# 
   914  0117                     	;# 
   915  0118                     	;# 
   916  0119                     	;# 
   917  011A                     	;# 
   918  011B                     	;# 
   919  011D                     	;# 
   920  011E                     	;# 
   921  018C                     	;# 
   922  018E                     	;# 
   923  0191                     	;# 
   924  0191                     	;# 
   925  0192                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0193                     	;# 
   929  0194                     	;# 
   930  0195                     	;# 
   931  0196                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019C                     	;# 
   937  019D                     	;# 
   938  019E                     	;# 
   939  019F                     	;# 
   940  020C                     	;# 
   941  020E                     	;# 
   942  0211                     	;# 
   943  0211                     	;# 
   944  0212                     	;# 
   945  0212                     	;# 
   946  0213                     	;# 
   947  0213                     	;# 
   948  0214                     	;# 
   949  0214                     	;# 
   950  0215                     	;# 
   951  0215                     	;# 
   952  0215                     	;# 
   953  0216                     	;# 
   954  0216                     	;# 
   955  0217                     	;# 
   956  0217                     	;# 
   957  0291                     	;# 
   958  0291                     	;# 
   959  0292                     	;# 
   960  0293                     	;# 
   961  0294                     	;# 
   962  0295                     	;# 
   963  0295                     	;# 
   964  0296                     	;# 
   965  0298                     	;# 
   966  0298                     	;# 
   967  0299                     	;# 
   968  029A                     	;# 
   969  029B                     	;# 
   970  029C                     	;# 
   971  029D                     	;# 
   972  029E                     	;# 
   973  0311                     	;# 
   974  0311                     	;# 
   975  0312                     	;# 
   976  0313                     	;# 
   977  0318                     	;# 
   978  0318                     	;# 
   979  0319                     	;# 
   980  031A                     	;# 
   981  038C                     	;# 
   982  038E                     	;# 
   983  0391                     	;# 
   984  0392                     	;# 
   985  0393                     	;# 
   986  039A                     	;# 
   987  039C                     	;# 
   988  039D                     	;# 
   989  039E                     	;# 
   990  039F                     	;# 
   991  0415                     	;# 
   992  0416                     	;# 
   993  0417                     	;# 
   994  041C                     	;# 
   995  041D                     	;# 
   996  041E                     	;# 
   997  0FE4                     	;# 
   998  0FE5                     	;# 
   999  0FE6                     	;# 
  1000  0FE7                     	;# 
  1001  0FE8                     	;# 
  1002  0FE9                     	;# 
  1003  0FEA                     	;# 
  1004  0FEB                     	;# 
  1005  0FED                     	;# 
  1006  0FEE                     	;# 
  1007  0FEF                     	;# 
  1008  0000                     	;# 
  1009  0001                     	;# 
  1010  0002                     	;# 
  1011  0003                     	;# 
  1012  0004                     	;# 
  1013  0005                     	;# 
  1014  0006                     	;# 
  1015  0007                     	;# 
  1016  0008                     	;# 
  1017  0009                     	;# 
  1018  000A                     	;# 
  1019  000B                     	;# 
  1020  000C                     	;# 
  1021  000E                     	;# 
  1022  0011                     	;# 
  1023  0012                     	;# 
  1024  0013                     	;# 
  1025  0015                     	;# 
  1026  0016                     	;# 
  1027  0016                     	;# 
  1028  0017                     	;# 
  1029  0018                     	;# 
  1030  0019                     	;# 
  1031  001A                     	;# 
  1032  001B                     	;# 
  1033  001C                     	;# 
  1034  001E                     	;# 
  1035  001F                     	;# 
  1036  008C                     	;# 
  1037  008E                     	;# 
  1038  0091                     	;# 
  1039  0092                     	;# 
  1040  0093                     	;# 
  1041  0095                     	;# 
  1042  0096                     	;# 
  1043  0097                     	;# 
  1044  0098                     	;# 
  1045  0099                     	;# 
  1046  009A                     	;# 
  1047  009B                     	;# 
  1048  009B                     	;# 
  1049  009C                     	;# 
  1050  009D                     	;# 
  1051  009E                     	;# 
  1052  010C                     	;# 
  1053  010E                     	;# 
  1054  0111                     	;# 
  1055  0112                     	;# 
  1056  0113                     	;# 
  1057  0114                     	;# 
  1058  0115                     	;# 
  1059  0116                     	;# 
  1060  0117                     	;# 
  1061  0118                     	;# 
  1062  0119                     	;# 
  1063  011A                     	;# 
  1064  011B                     	;# 
  1065  011D                     	;# 
  1066  011E                     	;# 
  1067  018C                     	;# 
  1068  018E                     	;# 
  1069  0191                     	;# 
  1070  0191                     	;# 
  1071  0192                     	;# 
  1072  0193                     	;# 
  1073  0193                     	;# 
  1074  0193                     	;# 
  1075  0194                     	;# 
  1076  0195                     	;# 
  1077  0196                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019D                     	;# 
  1084  019E                     	;# 
  1085  019F                     	;# 
  1086  020C                     	;# 
  1087  020E                     	;# 
  1088  0211                     	;# 
  1089  0211                     	;# 
  1090  0212                     	;# 
  1091  0212                     	;# 
  1092  0213                     	;# 
  1093  0213                     	;# 
  1094  0214                     	;# 
  1095  0214                     	;# 
  1096  0215                     	;# 
  1097  0215                     	;# 
  1098  0215                     	;# 
  1099  0216                     	;# 
  1100  0216                     	;# 
  1101  0217                     	;# 
  1102  0217                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0294                     	;# 
  1108  0295                     	;# 
  1109  0295                     	;# 
  1110  0296                     	;# 
  1111  0298                     	;# 
  1112  0298                     	;# 
  1113  0299                     	;# 
  1114  029A                     	;# 
  1115  029B                     	;# 
  1116  029C                     	;# 
  1117  029D                     	;# 
  1118  029E                     	;# 
  1119  0311                     	;# 
  1120  0311                     	;# 
  1121  0312                     	;# 
  1122  0313                     	;# 
  1123  0318                     	;# 
  1124  0318                     	;# 
  1125  0319                     	;# 
  1126  031A                     	;# 
  1127  038C                     	;# 
  1128  038E                     	;# 
  1129  0391                     	;# 
  1130  0392                     	;# 
  1131  0393                     	;# 
  1132  039A                     	;# 
  1133  039C                     	;# 
  1134  039D                     	;# 
  1135  039E                     	;# 
  1136  039F                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  041C                     	;# 
  1141  041D                     	;# 
  1142  041E                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154                           
  1155                           	psect	idataBANK1
  1156  0C90                     __pidataBANK1:	
  1157                           
  1158                           ;initializer for can_init@F2806
  1159  0C90  3402               	retlw	2
  1160  0C91  3428               	retlw	40
  1161  0C92  3405               	retlw	5
  1162  0C93  34F1               	retlw	241
  1163  0C94  3441               	retlw	65
  1164                           
  1165                           ;initializer for can_status_check@F2846
  1166  0C95  34A0               	retlw	160
  1167  0C96  3400               	retlw	0
  1168                           
  1169                           ;initializer for can_send@F2837
  1170  0C97  34A0               	retlw	160
  1171  0C98  3400               	retlw	0
  1172                           
  1173                           	psect	stringtext1
  1174  137B                     __pstringtext1:	
  1175  137B                     _dpowers:	
  1176  137B  3401               	retlw	1
  1177  137C  3400               	retlw	0
  1178  137D  340A               	retlw	10
  1179  137E  3400               	retlw	0
  1180  137F  3464               	retlw	100
  1181  1380  3400               	retlw	0
  1182  1381  34E8               	retlw	232
  1183  1382  3403               	retlw	3
  1184  1383  3410               	retlw	16
  1185  1384  3427               	retlw	39
  1186  1385                     __end_of_dpowers:	
  1187                           
  1188                           	psect	stringtext2
  1189  1385                     __pstringtext2:	
  1190  1385                     _hexpowers:	
  1191  1385  3401               	retlw	1
  1192  1386  3400               	retlw	0
  1193  1387  3410               	retlw	16
  1194  1388  3400               	retlw	0
  1195  1389  3400               	retlw	0
  1196  138A  3401               	retlw	1
  1197  138B  3400               	retlw	0
  1198  138C  3410               	retlw	16
  1199  138D                     __end_of_hexpowers:	
  1200                           
  1201                           	psect	stringtext3
  1202  139B                     __pstringtext3:	
  1203  139B                     _rxfnsidh:	
  1204  139B  3400               	retlw	0
  1205  139C  3404               	retlw	4
  1206  139D  3408               	retlw	8
  1207  139E  3410               	retlw	16
  1208  139F  3414               	retlw	20
  1209  13A0  3418               	retlw	24
  1210  13A1                     __end_of_rxfnsidh:	
  1211                           
  1212                           	psect	stringtext4
  1213  13AD                     __pstringtext4:	
  1214  13AD                     _txbnsidh:	
  1215  13AD  3431               	retlw	49
  1216  13AE  3441               	retlw	65
  1217  13AF  3451               	retlw	81
  1218  13B0                     __end_of_txbnsidh:	
  1219                           
  1220                           	psect	stringtext5
  1221  13B0                     __pstringtext5:	
  1222  13B0                     _abc:	
  1223  13B0  3400               	retlw	0
  1224  13B1  3402               	retlw	2
  1225  13B2  3404               	retlw	4
  1226  13B3                     __end_of_abc:	
  1227                           
  1228                           	psect	stringtext6
  1229  13B6                     __pstringtext6:	
  1230  13B6                     _nm:	
  1231  13B6  3400               	retlw	0
  1232  13B7  3402               	retlw	2
  1233  13B8                     __end_of_nm:	
  1234                           
  1235                           	psect	stringtext7
  1236  13B8                     __pstringtext7:	
  1237  13B8                     _rxmnsidh:	
  1238  13B8  3420               	retlw	32
  1239  13B9  3424               	retlw	36
  1240  13BA                     __end_of_rxmnsidh:	
  1241                           
  1242                           	psect	stringtext8
  1243  13BA                     __pstringtext8:	
  1244  13BA                     _max_idx:	
  1245  13BA  3407               	retlw	7
  1246  13BB                     __end_of_max_idx:	
  1247                           
  1248                           	psect	nvBANK1
  1249  00BC                     __pnvBANK1:	
  1250  00BC                     _handler:	
  1251  00BC                     	ds	2
  1252  0011                     _PIR1bits	set	17
  1253  0095                     _OPTION_REGbits	set	149
  1254  008E                     _TRISC	set	142
  1255  008C                     _TRISA	set	140
  1256  0097                     _WDTCON	set	151
  1257  0098                     _OSCTUNE	set	152
  1258  0099                     _OSCCON	set	153
  1259  010C                     _LATAbits	set	268
  1260  010E                     _LATCbits	set	270
  1261  011D                     _APFCON0	set	285
  1262  011E                     _APFCON1	set	286
  1263  010E                     _LATC	set	270
  1264  010C                     _LATA	set	268
  1265  0116                     _BORCON	set	278
  1266  018C                     _ANSELA	set	396
  1267  018E                     _ANSELC	set	398
  1268  019A                     _TXREG	set	410
  1269  0199                     _RCREG	set	409
  1270  019D                     _RCSTAbits	set	413
  1271  019C                     _SPBRGH	set	412
  1272  019B                     _SPBRGL	set	411
  1273  019E                     _TXSTA	set	414
  1274  019D                     _RCSTA	set	413
  1275  019F                     _BAUDCON	set	415
  1276  0214                     _SSP1STATbits	set	532
  1277  0211                     _SSP1BUF	set	529
  1278  0215                     _SSP1CON1bits	set	533
  1279  0212                     _SSP1ADD	set	530
  1280  0215                     _SSP1CON1	set	533
  1281  0214                     _SSP1STAT	set	532
  1282  020E                     _WPUC	set	526
  1283  020C                     _WPUA	set	524
  1284                           
  1285                           	psect	stringtext9
  1286  1000                     __pstringtext9:	
  1287  1000                     STR_9:	
  1288  1000  345B               	retlw	91	;'['
  1289  1001  3453               	retlw	83	;'S'
  1290  1002  3465               	retlw	101	;'e'
  1291  1003  3474               	retlw	116	;'t'
  1292  1004  3420               	retlw	32	;' '
  1293  1005  346F               	retlw	111	;'o'
  1294  1006  3475               	retlw	117	;'u'
  1295  1007  3474               	retlw	116	;'t'
  1296  1008  3470               	retlw	112	;'p'
  1297  1009  3475               	retlw	117	;'u'
  1298  100A  3474               	retlw	116	;'t'
  1299  100B  3420               	retlw	32	;' '
  1300  100C  346D               	retlw	109	;'m'
  1301  100D  346F               	retlw	111	;'o'
  1302  100E  3464               	retlw	100	;'d'
  1303  100F  3465               	retlw	101	;'e'
  1304  1010  345D               	retlw	93	;']'
  1305  1011  3420               	retlw	32	;' '
  1306  1012  347B               	retlw	123	;'{'
  1307  1013  3464               	retlw	100	;'d'
  1308  1014  3465               	retlw	101	;'e'
  1309  1015  3462               	retlw	98	;'b'
  1310  1016  3475               	retlw	117	;'u'
  1311  1017  3467               	retlw	103	;'g'
  1312  1018  343A               	retlw	58	;':'
  1313  1019  3420               	retlw	32	;' '
  1314  101A  3440               	retlw	64	;'@'
  1315  101B  3476               	retlw	118	;'v'
  1316  101C  3464               	retlw	100	;'d'
  1317  101D  342C               	retlw	44	;','
  1318  101E  3420               	retlw	32	;' '
  1319  101F  3476               	retlw	118	;'v'
  1320  1020  3465               	retlw	101	;'e'
  1321  1021  3472               	retlw	114	;'r'
  1322  1022  3462               	retlw	98	;'b'
  1323  1023  346F               	retlw	111	;'o'
  1324  1024  3473               	retlw	115	;'s'
  1325  1025  3465               	retlw	101	;'e'
  1326  1026  343A               	retlw	58	;':'
  1327  1027  3420               	retlw	32	;' '
  1328  1028  3440               	retlw	64	;'@'
  1329  1029  3476               	retlw	118	;'v'
  1330  102A  3476               	retlw	118	;'v'
  1331  102B  342C               	retlw	44	;','
  1332  102C  3420               	retlw	32	;' '
  1333  102D  346E               	retlw	110	;'n'
  1334  102E  346F               	retlw	111	;'o'
  1335  102F  3472               	retlw	114	;'r'
  1336  1030  346D               	retlw	109	;'m'
  1337  1031  3461               	retlw	97	;'a'
  1338  1032  346C               	retlw	108	;'l'
  1339  1033  343A               	retlw	58	;':'
  1340  1034  3420               	retlw	32	;' '
  1341  1035  3440               	retlw	64	;'@'
  1342  1036  3476               	retlw	118	;'v'
  1343  1037  346E               	retlw	110	;'n'
  1344  1038  347D               	retlw	125	;'}'
  1345  1039  340A               	retlw	10
  1346  103A  3400               	retlw	0
  1347                           
  1348                           	psect	stringtext10
  1349  103B                     __pstringtext10:	
  1350  103B                     STR_11:	
  1351  103B  3420               	retlw	32	;' '
  1352  103C  3420               	retlw	32	;' '
  1353  103D  3420               	retlw	32	;' '
  1354  103E  3420               	retlw	32	;' '
  1355  103F  3420               	retlw	32	;' '
  1356  1040  3477               	retlw	119	;'w'
  1357  1041  3469               	retlw	105	;'i'
  1358  1042  3474               	retlw	116	;'t'
  1359  1043  3468               	retlw	104	;'h'
  1360  1044  3420               	retlw	32	;' '
  1361  1045  3453               	retlw	83	;'S'
  1362  1046  3449               	retlw	73	;'I'
  1363  1047  3444               	retlw	68	;'D'
  1364  1048  343A               	retlw	58	;':'
  1365  1049  3420               	retlw	32	;' '
  1366  104A  3440               	retlw	64	;'@'
  1367  104B  346F               	retlw	111	;'o'
  1368  104C  346C               	retlw	108	;'l'
  1369  104D  3473               	retlw	115	;'s'
  1370  104E  3420               	retlw	32	;' '
  1371  104F  346F               	retlw	111	;'o'
  1372  1050  3472               	retlw	114	;'r'
  1373  1051  3420               	retlw	32	;' '
  1374  1052  3440               	retlw	64	;'@'
  1375  1053  346F               	retlw	111	;'o'
  1376  1054  346E               	retlw	110	;'n'
  1377  1055  3473               	retlw	115	;'s'
  1378  1056  342C               	retlw	44	;','
  1379  1057  3420               	retlw	32	;' '
  1380  1058  3469               	retlw	105	;'i'
  1381  1059  346E               	retlw	110	;'n'
  1382  105A  3420               	retlw	32	;' '
  1383  105B  3468               	retlw	104	;'h'
  1384  105C  3465               	retlw	101	;'e'
  1385  105D  3478               	retlw	120	;'x'
  1386  105E  3420               	retlw	32	;' '
  1387  105F  3466               	retlw	102	;'f'
  1388  1060  346F               	retlw	111	;'o'
  1389  1061  3472               	retlw	114	;'r'
  1390  1062  346D               	retlw	109	;'m'
  1391  1063  3461               	retlw	97	;'a'
  1392  1064  3474               	retlw	116	;'t'
  1393  1065  343A               	retlw	58	;':'
  1394  1066  3420               	retlw	32	;' '
  1395  1067  3440               	retlw	64	;'@'
  1396  1068  346F               	retlw	111	;'o'
  1397  1069  346C               	retlw	108	;'l'
  1398  106A  3468               	retlw	104	;'h'
  1399  106B  3420               	retlw	32	;' '
  1400  106C  346F               	retlw	111	;'o'
  1401  106D  3472               	retlw	114	;'r'
  1402  106E  3420               	retlw	32	;' '
  1403  106F  3440               	retlw	64	;'@'
  1404  1070  346F               	retlw	111	;'o'
  1405  1071  346E               	retlw	110	;'n'
  1406  1072  3468               	retlw	104	;'h'
  1407  1073  340A               	retlw	10
  1408  1074  3400               	retlw	0
  1409                           
  1410                           	psect	stringtext11
  1411  1075                     __pstringtext11:	
  1412  1075                     STR_10:	
  1413  1075  345B               	retlw	91	;'['
  1414  1076  3445               	retlw	69	;'E'
  1415  1077  346E               	retlw	110	;'n'
  1416  1078  3461               	retlw	97	;'a'
  1417  1079  3462               	retlw	98	;'b'
  1418  107A  346C               	retlw	108	;'l'
  1419  107B  3465               	retlw	101	;'e'
  1420  107C  3420               	retlw	32	;' '
  1421  107D  346F               	retlw	111	;'o'
  1422  107E  3470               	retlw	112	;'p'
  1423  107F  3465               	retlw	101	;'e'
  1424  1080  3472               	retlw	114	;'r'
  1425  1081  3461               	retlw	97	;'a'
  1426  1082  3474               	retlw	116	;'t'
  1427  1083  3469               	retlw	105	;'i'
  1428  1084  346F               	retlw	111	;'o'
  1429  1085  346E               	retlw	110	;'n'
  1430  1086  3420               	retlw	32	;' '
  1431  1087  346D               	retlw	109	;'m'
  1432  1088  346F               	retlw	111	;'o'
  1433  1089  3464               	retlw	100	;'d'
  1434  108A  3465               	retlw	101	;'e'
  1435  108B  345D               	retlw	93	;']'
  1436  108C  3420               	retlw	32	;' '
  1437  108D  347B               	retlw	123	;'{'
  1438  108E  346C               	retlw	108	;'l'
  1439  108F  346F               	retlw	111	;'o'
  1440  1090  346F               	retlw	111	;'o'
  1441  1091  3470               	retlw	112	;'p'
  1442  1092  3462               	retlw	98	;'b'
  1443  1093  3461               	retlw	97	;'a'
  1444  1094  3463               	retlw	99	;'c'
  1445  1095  346B               	retlw	107	;'k'
  1446  1096  343A               	retlw	58	;':'
  1447  1097  3420               	retlw	32	;' '
  1448  1098  3440               	retlw	64	;'@'
  1449  1099  346F               	retlw	111	;'o'
  1450  109A  346C               	retlw	108	;'l'
  1451  109B  342C               	retlw	44	;','
  1452  109C  3420               	retlw	32	;' '
  1453  109D  346E               	retlw	110	;'n'
  1454  109E  346F               	retlw	111	;'o'
  1455  109F  3472               	retlw	114	;'r'
  1456  10A0  346D               	retlw	109	;'m'
  1457  10A1  3461               	retlw	97	;'a'
  1458  10A2  346C               	retlw	108	;'l'
  1459  10A3  343A               	retlw	58	;':'
  1460  10A4  3420               	retlw	32	;' '
  1461  10A5  3440               	retlw	64	;'@'
  1462  10A6  346F               	retlw	111	;'o'
  1463  10A7  346E               	retlw	110	;'n'
  1464  10A8  347D               	retlw	125	;'}'
  1465  10A9  340A               	retlw	10
  1466  10AA  3400               	retlw	0
  1467                           
  1468                           	psect	stringtext12
  1469  10AB                     __pstringtext12:	
  1470  10AB                     STR_8:	
  1471  10AB  345B               	retlw	91	;'['
  1472  10AC  3453               	retlw	83	;'S'
  1473  10AD  3465               	retlw	101	;'e'
  1474  10AE  3474               	retlw	116	;'t'
  1475  10AF  3420               	retlw	32	;' '
  1476  10B0  3473               	retlw	115	;'s'
  1477  10B1  3474               	retlw	116	;'t'
  1478  10B2  3461               	retlw	97	;'a'
  1479  10B3  346E               	retlw	110	;'n'
  1480  10B4  3464               	retlw	100	;'d'
  1481  10B5  3461               	retlw	97	;'a'
  1482  10B6  3472               	retlw	114	;'r'
  1483  10B7  3464               	retlw	100	;'d'
  1484  10B8  3420               	retlw	32	;' '
  1485  10B9  3469               	retlw	105	;'i'
  1486  10BA  3464               	retlw	100	;'d'
  1487  10BB  3465               	retlw	101	;'e'
  1488  10BC  346E               	retlw	110	;'n'
  1489  10BD  3474               	retlw	116	;'t'
  1490  10BE  3469               	retlw	105	;'i'
  1491  10BF  3466               	retlw	102	;'f'
  1492  10C0  3469               	retlw	105	;'i'
  1493  10C1  3465               	retlw	101	;'e'
  1494  10C2  3472               	retlw	114	;'r'
  1495  10C3  345D               	retlw	93	;']'
  1496  10C4  3420               	retlw	32	;' '
  1497  10C5  3440               	retlw	64	;'@'
  1498  10C6  3469               	retlw	105	;'i'
  1499  10C7  343C               	retlw	60	;'<'
  1500  10C8  3473               	retlw	115	;'s'
  1501  10C9  3474               	retlw	116	;'t'
  1502  10CA  3461               	retlw	97	;'a'
  1503  10CB  346E               	retlw	110	;'n'
  1504  10CC  3464               	retlw	100	;'d'
  1505  10CD  3461               	retlw	97	;'a'
  1506  10CE  3472               	retlw	114	;'r'
  1507  10CF  3464               	retlw	100	;'d'
  1508  10D0  3420               	retlw	32	;' '
  1509  10D1  3469               	retlw	105	;'i'
  1510  10D2  3464               	retlw	100	;'d'
  1511  10D3  3465               	retlw	101	;'e'
  1512  10D4  346E               	retlw	110	;'n'
  1513  10D5  3474               	retlw	116	;'t'
  1514  10D6  3469               	retlw	105	;'i'
  1515  10D7  3466               	retlw	102	;'f'
  1516  10D8  3469               	retlw	105	;'i'
  1517  10D9  3465               	retlw	101	;'e'
  1518  10DA  3472               	retlw	114	;'r'
  1519  10DB  343E               	retlw	62	;'>'
  1520  10DC  340A               	retlw	10
  1521  10DD  3400               	retlw	0
  1522                           
  1523                           	psect	stringtext13
  1524  10DE                     __pstringtext13:	
  1525  10DE                     STR_17:	
  1526  10DE  345B               	retlw	91	;'['
  1527  10DF  3452               	retlw	82	;'R'
  1528  10E0  3465               	retlw	101	;'e'
  1529  10E1  3463               	retlw	99	;'c'
  1530  10E2  3465               	retlw	101	;'e'
  1531  10E3  3469               	retlw	105	;'i'
  1532  10E4  3476               	retlw	118	;'v'
  1533  10E5  3465               	retlw	101	;'e'
  1534  10E6  3420               	retlw	32	;' '
  1535  10E7  346D               	retlw	109	;'m'
  1536  10E8  3465               	retlw	101	;'e'
  1537  10E9  3473               	retlw	115	;'s'
  1538  10EA  3473               	retlw	115	;'s'
  1539  10EB  3461               	retlw	97	;'a'
  1540  10EC  3467               	retlw	103	;'g'
  1541  10ED  3465               	retlw	101	;'e'
  1542  10EE  345D               	retlw	93	;']'
  1543  10EF  3420               	retlw	32	;' '
  1544  10F0  343C               	retlw	60	;'<'
  1545  10F1  346D               	retlw	109	;'m'
  1546  10F2  3465               	retlw	101	;'e'
  1547  10F3  3473               	retlw	115	;'s'
  1548  10F4  3473               	retlw	115	;'s'
  1549  10F5  3461               	retlw	97	;'a'
  1550  10F6  3467               	retlw	103	;'g'
  1551  10F7  3465               	retlw	101	;'e'
  1552  10F8  343E               	retlw	62	;'>'
  1553  10F9  3420               	retlw	32	;' '
  1554  10FA  3477               	retlw	119	;'w'
  1555  10FB  3469               	retlw	105	;'i'
  1556  10FC  346C               	retlw	108	;'l'
  1557  10FD  346C               	retlw	108	;'l'
  1558  10FE  3420               	retlw	32	;' '
  1559  10FF  3462               	retlw	98	;'b'
  1560  1100  3465               	retlw	101	;'e'
  1561  1101  3420               	retlw	32	;' '
  1562  1102  346F               	retlw	111	;'o'
  1563  1103  3475               	retlw	117	;'u'
  1564  1104  3474               	retlw	116	;'t'
  1565  1105  3470               	retlw	112	;'p'
  1566  1106  3475               	retlw	117	;'u'
  1567  1107  3474               	retlw	116	;'t'
  1568  1108  340A               	retlw	10
  1569  1109  3400               	retlw	0
  1570                           
  1571                           	psect	stringtext14
  1572  110A                     __pstringtext14:	
  1573  110A                     STR_13:	
  1574  110A  345B               	retlw	91	;'['
  1575  110B  3453               	retlw	83	;'S'
  1576  110C  3465               	retlw	101	;'e'
  1577  110D  3474               	retlw	116	;'t'
  1578  110E  3420               	retlw	32	;' '
  1579  110F  3466               	retlw	102	;'f'
  1580  1110  3469               	retlw	105	;'i'
  1581  1111  346C               	retlw	108	;'l'
  1582  1112  3474               	retlw	116	;'t'
  1583  1113  3465               	retlw	101	;'e'
  1584  1114  3472               	retlw	114	;'r'
  1585  1115  345D               	retlw	93	;']'
  1586  1116  3420               	retlw	32	;' '
  1587  1117  3440               	retlw	64	;'@'
  1588  1118  3466               	retlw	102	;'f'
  1589  1119  343C               	retlw	60	;'<'
  1590  111A  346E               	retlw	110	;'n'
  1591  111B  343E               	retlw	62	;'>'
  1592  111C  343C               	retlw	60	;'<'
  1593  111D  3466               	retlw	102	;'f'
  1594  111E  3469               	retlw	105	;'i'
  1595  111F  346C               	retlw	108	;'l'
  1596  1120  3474               	retlw	116	;'t'
  1597  1121  3465               	retlw	101	;'e'
  1598  1122  3472               	retlw	114	;'r'
  1599  1123  3428               	retlw	40	;'('
  1600  1124  3453               	retlw	83	;'S'
  1601  1125  3449               	retlw	73	;'I'
  1602  1126  3444               	retlw	68	;'D'
  1603  1127  3431               	retlw	49	;'1'
  1604  1128  3430               	retlw	48	;'0'
  1605  1129  3420               	retlw	32	;' '
  1606  112A  347E               	retlw	126	;'~'
  1607  112B  3420               	retlw	32	;' '
  1608  112C  3453               	retlw	83	;'S'
  1609  112D  3449               	retlw	73	;'I'
  1610  112E  3444               	retlw	68	;'D'
  1611  112F  3430               	retlw	48	;'0'
  1612  1130  3429               	retlw	41	;')'
  1613  1131  343E               	retlw	62	;'>'
  1614  1132  340A               	retlw	10
  1615  1133  3400               	retlw	0
  1616                           
  1617                           	psect	stringtext15
  1618  1134                     __pstringtext15:	
  1619  1134                     STR_12:	
  1620  1134  345B               	retlw	91	;'['
  1621  1135  3453               	retlw	83	;'S'
  1622  1136  3465               	retlw	101	;'e'
  1623  1137  3474               	retlw	116	;'t'
  1624  1138  3420               	retlw	32	;' '
  1625  1139  346D               	retlw	109	;'m'
  1626  113A  3461               	retlw	97	;'a'
  1627  113B  3473               	retlw	115	;'s'
  1628  113C  346B               	retlw	107	;'k'
  1629  113D  345D               	retlw	93	;']'
  1630  113E  3420               	retlw	32	;' '
  1631  113F  3440               	retlw	64	;'@'
  1632  1140  346D               	retlw	109	;'m'
  1633  1141  343C               	retlw	60	;'<'
  1634  1142  346E               	retlw	110	;'n'
  1635  1143  343E               	retlw	62	;'>'
  1636  1144  343C               	retlw	60	;'<'
  1637  1145  346D               	retlw	109	;'m'
  1638  1146  3461               	retlw	97	;'a'
  1639  1147  3473               	retlw	115	;'s'
  1640  1148  346B               	retlw	107	;'k'
  1641  1149  3428               	retlw	40	;'('
  1642  114A  3453               	retlw	83	;'S'
  1643  114B  3449               	retlw	73	;'I'
  1644  114C  3444               	retlw	68	;'D'
  1645  114D  3431               	retlw	49	;'1'
  1646  114E  3430               	retlw	48	;'0'
  1647  114F  3420               	retlw	32	;' '
  1648  1150  347E               	retlw	126	;'~'
  1649  1151  3420               	retlw	32	;' '
  1650  1152  3453               	retlw	83	;'S'
  1651  1153  3449               	retlw	73	;'I'
  1652  1154  3444               	retlw	68	;'D'
  1653  1155  3430               	retlw	48	;'0'
  1654  1156  3429               	retlw	41	;')'
  1655  1157  343E               	retlw	62	;'>'
  1656  1158  340A               	retlw	10
  1657  1159  3400               	retlw	0
  1658                           
  1659                           	psect	stringtext16
  1660  115A                     __pstringtext16:	
  1661  115A                     STR_47:	
  1662  115A  3452               	retlw	82	;'R'
  1663  115B  3458               	retlw	88	;'X'
  1664  115C  3446               	retlw	70	;'F'
  1665  115D  3425               	retlw	37	;'%'
  1666  115E  3464               	retlw	100	;'d'
  1667  115F  3453               	retlw	83	;'S'
  1668  1160  3449               	retlw	73	;'I'
  1669  1161  3444               	retlw	68	;'D'
  1670  1162  3448               	retlw	72	;'H'
  1671  1163  3420               	retlw	32	;' '
  1672  1164  3452               	retlw	82	;'R'
  1673  1165  3458               	retlw	88	;'X'
  1674  1166  3446               	retlw	70	;'F'
  1675  1167  3425               	retlw	37	;'%'
  1676  1168  3464               	retlw	100	;'d'
  1677  1169  3453               	retlw	83	;'S'
  1678  116A  3449               	retlw	73	;'I'
  1679  116B  3444               	retlw	68	;'D'
  1680  116C  344C               	retlw	76	;'L'
  1681  116D  343A               	retlw	58	;':'
  1682  116E  3420               	retlw	32	;' '
  1683  116F  3425               	retlw	37	;'%'
  1684  1170  3430               	retlw	48	;'0'
  1685  1171  3432               	retlw	50	;'2'
  1686  1172  3478               	retlw	120	;'x'
  1687  1173  3420               	retlw	32	;' '
  1688  1174  3425               	retlw	37	;'%'
  1689  1175  3430               	retlw	48	;'0'
  1690  1176  3432               	retlw	50	;'2'
  1691  1177  3478               	retlw	120	;'x'
  1692  1178  340A               	retlw	10
  1693  1179  3400               	retlw	0
  1694                           
  1695                           	psect	stringtext17
  1696  117A                     __pstringtext17:	
  1697  117A                     STR_46:	
  1698  117A  3452               	retlw	82	;'R'
  1699  117B  3458               	retlw	88	;'X'
  1700  117C  344D               	retlw	77	;'M'
  1701  117D  3425               	retlw	37	;'%'
  1702  117E  3464               	retlw	100	;'d'
  1703  117F  3453               	retlw	83	;'S'
  1704  1180  3449               	retlw	73	;'I'
  1705  1181  3444               	retlw	68	;'D'
  1706  1182  3448               	retlw	72	;'H'
  1707  1183  3420               	retlw	32	;' '
  1708  1184  3452               	retlw	82	;'R'
  1709  1185  3458               	retlw	88	;'X'
  1710  1186  344D               	retlw	77	;'M'
  1711  1187  3425               	retlw	37	;'%'
  1712  1188  3464               	retlw	100	;'d'
  1713  1189  3453               	retlw	83	;'S'
  1714  118A  3449               	retlw	73	;'I'
  1715  118B  3444               	retlw	68	;'D'
  1716  118C  344C               	retlw	76	;'L'
  1717  118D  343A               	retlw	58	;':'
  1718  118E  3420               	retlw	32	;' '
  1719  118F  3425               	retlw	37	;'%'
  1720  1190  3430               	retlw	48	;'0'
  1721  1191  3432               	retlw	50	;'2'
  1722  1192  3478               	retlw	120	;'x'
  1723  1193  3420               	retlw	32	;' '
  1724  1194  3425               	retlw	37	;'%'
  1725  1195  3430               	retlw	48	;'0'
  1726  1196  3432               	retlw	50	;'2'
  1727  1197  3478               	retlw	120	;'x'
  1728  1198  340A               	retlw	10
  1729  1199  3400               	retlw	0
  1730                           
  1731                           	psect	stringtext18
  1732  119A                     __pstringtext18:	
  1733  119A                     STR_16:	
  1734  119A  345B               	retlw	91	;'['
  1735  119B  3453               	retlw	83	;'S'
  1736  119C  3465               	retlw	101	;'e'
  1737  119D  346E               	retlw	110	;'n'
  1738  119E  3464               	retlw	100	;'d'
  1739  119F  3420               	retlw	32	;' '
  1740  11A0  346D               	retlw	109	;'m'
  1741  11A1  3465               	retlw	101	;'e'
  1742  11A2  3473               	retlw	115	;'s'
  1743  11A3  3473               	retlw	115	;'s'
  1744  11A4  3461               	retlw	97	;'a'
  1745  11A5  3467               	retlw	103	;'g'
  1746  11A6  3465               	retlw	101	;'e'
  1747  11A7  345D               	retlw	93	;']'
  1748  11A8  3420               	retlw	32	;' '
  1749  11A9  343C               	retlw	60	;'<'
  1750  11AA  346D               	retlw	109	;'m'
  1751  11AB  3465               	retlw	101	;'e'
  1752  11AC  3473               	retlw	115	;'s'
  1753  11AD  3473               	retlw	115	;'s'
  1754  11AE  3461               	retlw	97	;'a'
  1755  11AF  3467               	retlw	103	;'g'
  1756  11B0  3465               	retlw	101	;'e'
  1757  11B1  343E               	retlw	62	;'>'
  1758  11B2  340A               	retlw	10
  1759  11B3  3400               	retlw	0
  1760                           
  1761                           	psect	stringtext19
  1762  11B4                     __pstringtext19:	
  1763  11B4                     STR_14:	
  1764  11B4  345B               	retlw	91	;'['
  1765  11B5  3453               	retlw	83	;'S'
  1766  11B6  3465               	retlw	101	;'e'
  1767  11B7  3474               	retlw	116	;'t'
  1768  11B8  3420               	retlw	32	;' '
  1769  11B9  3462               	retlw	98	;'b'
  1770  11BA  3461               	retlw	97	;'a'
  1771  11BB  3475               	retlw	117	;'u'
  1772  11BC  3464               	retlw	100	;'d'
  1773  11BD  3420               	retlw	32	;' '
  1774  11BE  3472               	retlw	114	;'r'
  1775  11BF  3461               	retlw	97	;'a'
  1776  11C0  3474               	retlw	116	;'t'
  1777  11C1  3465               	retlw	101	;'e'
  1778  11C2  345D               	retlw	93	;']'
  1779  11C3  3420               	retlw	32	;' '
  1780  11C4  3440               	retlw	64	;'@'
  1781  11C5  3462               	retlw	98	;'b'
  1782  11C6  343C               	retlw	60	;'<'
  1783  11C7  3462               	retlw	98	;'b'
  1784  11C8  3470               	retlw	112	;'p'
  1785  11C9  3472               	retlw	114	;'r'
  1786  11CA  343E               	retlw	62	;'>'
  1787  11CB  340A               	retlw	10
  1788  11CC  3400               	retlw	0
  1789                           
  1790                           	psect	stringtext20
  1791  11CD                     __pstringtext20:	
  1792  11CD                     STR_21:	
  1793  11CD  3466               	retlw	102	;'f'
  1794  11CE  3469               	retlw	105	;'i'
  1795  11CF  346C               	retlw	108	;'l'
  1796  11D0  3474               	retlw	116	;'t'
  1797  11D1  3465               	retlw	101	;'e'
  1798  11D2  3472               	retlw	114	;'r'
  1799  11D3  3428               	retlw	40	;'('
  1800  11D4  3425               	retlw	37	;'%'
  1801  11D5  3464               	retlw	100	;'d'
  1802  11D6  3429               	retlw	41	;')'
  1803  11D7  343A               	retlw	58	;':'
  1804  11D8  3420               	retlw	32	;' '
  1805  11D9  3425               	retlw	37	;'%'
  1806  11DA  3430               	retlw	48	;'0'
  1807  11DB  3432               	retlw	50	;'2'
  1808  11DC  3478               	retlw	120	;'x'
  1809  11DD  3420               	retlw	32	;' '
  1810  11DE  3425               	retlw	37	;'%'
  1811  11DF  3430               	retlw	48	;'0'
  1812  11E0  3432               	retlw	50	;'2'
  1813  11E1  3478               	retlw	120	;'x'
  1814  11E2  340A               	retlw	10
  1815  11E3  3400               	retlw	0
  1816                           
  1817                           	psect	stringtext21
  1818  11E4                     __pstringtext21:	
  1819  11E4                     STR_7:	
  1820  11E4  342D               	retlw	45	;'-'
  1821  11E5  342D               	retlw	45	;'-'
  1822  11E6  342D               	retlw	45	;'-'
  1823  11E7  3420               	retlw	32	;' '
  1824  11E8  3455               	retlw	85	;'U'
  1825  11E9  3441               	retlw	65	;'A'
  1826  11EA  3452               	retlw	82	;'R'
  1827  11EB  3454               	retlw	84	;'T'
  1828  11EC  3432               	retlw	50	;'2'
  1829  11ED  3443               	retlw	67	;'C'
  1830  11EE  3441               	retlw	65	;'A'
  1831  11EF  344E               	retlw	78	;'N'
  1832  11F0  3420               	retlw	32	;' '
  1833  11F1  3448               	retlw	72	;'H'
  1834  11F2  3445               	retlw	69	;'E'
  1835  11F3  344C               	retlw	76	;'L'
  1836  11F4  3450               	retlw	80	;'P'
  1837  11F5  3420               	retlw	32	;' '
  1838  11F6  342D               	retlw	45	;'-'
  1839  11F7  342D               	retlw	45	;'-'
  1840  11F8  342D               	retlw	45	;'-'
  1841  11F9  340A               	retlw	10
  1842  11FA  3400               	retlw	0
  1843                           
  1844                           	psect	stringtext22
  1845  11FB                     __pstringtext22:	
  1846  11FB                     STR_18:	
  1847  11FB  345B               	retlw	91	;'['
  1848  11FC  3453               	retlw	83	;'S'
  1849  11FD  3468               	retlw	104	;'h'
  1850  11FE  346F               	retlw	111	;'o'
  1851  11FF  3477               	retlw	119	;'w'
  1852  1200  3420               	retlw	32	;' '
  1853  1201  3474               	retlw	116	;'t'
  1854  1202  3468               	retlw	104	;'h'
  1855  1203  3469               	retlw	105	;'i'
  1856  1204  3473               	retlw	115	;'s'
  1857  1205  3420               	retlw	32	;' '
  1858  1206  3468               	retlw	104	;'h'
  1859  1207  3465               	retlw	101	;'e'
  1860  1208  346C               	retlw	108	;'l'
  1861  1209  3470               	retlw	112	;'p'
  1862  120A  345D               	retlw	93	;']'
  1863  120B  343A               	retlw	58	;':'
  1864  120C  3420               	retlw	32	;' '
  1865  120D  3440               	retlw	64	;'@'
  1866  120E  3468               	retlw	104	;'h'
  1867  120F  340A               	retlw	10
  1868  1210  3400               	retlw	0
  1869                           
  1870                           	psect	stringtext23
  1871  1211                     __pstringtext23:	
  1872  1211                     STR_20:	
  1873  1211  346D               	retlw	109	;'m'
  1874  1212  3461               	retlw	97	;'a'
  1875  1213  3473               	retlw	115	;'s'
  1876  1214  346B               	retlw	107	;'k'
  1877  1215  3428               	retlw	40	;'('
  1878  1216  3425               	retlw	37	;'%'
  1879  1217  3464               	retlw	100	;'d'
  1880  1218  3429               	retlw	41	;')'
  1881  1219  343A               	retlw	58	;':'
  1882  121A  3420               	retlw	32	;' '
  1883  121B  3425               	retlw	37	;'%'
  1884  121C  3430               	retlw	48	;'0'
  1885  121D  3432               	retlw	50	;'2'
  1886  121E  3478               	retlw	120	;'x'
  1887  121F  3420               	retlw	32	;' '
  1888  1220  3425               	retlw	37	;'%'
  1889  1221  3430               	retlw	48	;'0'
  1890  1222  3432               	retlw	50	;'2'
  1891  1223  3478               	retlw	120	;'x'
  1892  1224  340A               	retlw	10
  1893  1225  3400               	retlw	0
  1894                           
  1895                           	psect	stringtext24
  1896  1226                     __pstringtext24:	
  1897  1226                     STR_15:	
  1898  1226  345B               	retlw	91	;'['
  1899  1227  3444               	retlw	68	;'D'
  1900  1228  3475               	retlw	117	;'u'
  1901  1229  346D               	retlw	109	;'m'
  1902  122A  3470               	retlw	112	;'p'
  1903  122B  3420               	retlw	32	;' '
  1904  122C  3472               	retlw	114	;'r'
  1905  122D  3465               	retlw	101	;'e'
  1906  122E  3467               	retlw	103	;'g'
  1907  122F  3469               	retlw	105	;'i'
  1908  1230  3473               	retlw	115	;'s'
  1909  1231  3474               	retlw	116	;'t'
  1910  1232  3465               	retlw	101	;'e'
  1911  1233  3472               	retlw	114	;'r'
  1912  1234  3473               	retlw	115	;'s'
  1913  1235  345D               	retlw	93	;']'
  1914  1236  3420               	retlw	32	;' '
  1915  1237  3440               	retlw	64	;'@'
  1916  1238  3464               	retlw	100	;'d'
  1917  1239  340A               	retlw	10
  1918  123A  3400               	retlw	0
  1919                           
  1920                           	psect	stringtext25
  1921  123B                     __pstringtext25:	
  1922  123B                     STR_29:	
  1923  123B  3443               	retlw	67	;'C'
  1924  123C  346F               	retlw	111	;'o'
  1925  123D  3470               	retlw	112	;'p'
  1926  123E  3479               	retlw	121	;'y'
  1927  123F  3469               	retlw	105	;'i'
  1928  1240  346E               	retlw	110	;'n'
  1929  1241  3467               	retlw	103	;'g'
  1930  1242  3420               	retlw	32	;' '
  1931  1243  3462               	retlw	98	;'b'
  1932  1244  3475               	retlw	117	;'u'
  1933  1245  3466               	retlw	102	;'f'
  1934  1246  3466               	retlw	102	;'f'
  1935  1247  3465               	retlw	101	;'e'
  1936  1248  3472               	retlw	114	;'r'
  1937  1249  343A               	retlw	58	;':'
  1938  124A  3420               	retlw	32	;' '
  1939  124B  3425               	retlw	37	;'%'
  1940  124C  3463               	retlw	99	;'c'
  1941  124D  340A               	retlw	10
  1942  124E  3400               	retlw	0
  1943                           
  1944                           	psect	stringtext26
  1945  124F                     __pstringtext26:	
  1946  124F                     STR_32:	
  1947  124F  344D               	retlw	77	;'M'
  1948  1250  3465               	retlw	101	;'e'
  1949  1251  3473               	retlw	115	;'s'
  1950  1252  3473               	retlw	115	;'s'
  1951  1253  3461               	retlw	97	;'a'
  1952  1254  3467               	retlw	103	;'g'
  1953  1255  3465               	retlw	101	;'e'
  1954  1256  3420               	retlw	32	;' '
  1955  1257  3473               	retlw	115	;'s'
  1956  1258  3465               	retlw	101	;'e'
  1957  1259  346E               	retlw	110	;'n'
  1958  125A  3474               	retlw	116	;'t'
  1959  125B  343A               	retlw	58	;':'
  1960  125C  3420               	retlw	32	;' '
  1961  125D  3425               	retlw	37	;'%'
  1962  125E  3473               	retlw	115	;'s'
  1963  125F  340A               	retlw	10
  1964  1260  3400               	retlw	0
  1965                           
  1966                           	psect	stringtext27
  1967  1261                     __pstringtext27:	
  1968  1261                     STR_53:	
  1969  1261  3430               	retlw	48	;'0'
  1970  1262  3431               	retlw	49	;'1'
  1971  1263  3432               	retlw	50	;'2'
  1972  1264  3433               	retlw	51	;'3'
  1973  1265  3434               	retlw	52	;'4'
  1974  1266  3435               	retlw	53	;'5'
  1975  1267  3436               	retlw	54	;'6'
  1976  1268  3437               	retlw	55	;'7'
  1977  1269  3438               	retlw	56	;'8'
  1978  126A  3439               	retlw	57	;'9'
  1979  126B  3461               	retlw	97	;'a'
  1980  126C  3462               	retlw	98	;'b'
  1981  126D  3463               	retlw	99	;'c'
  1982  126E  3464               	retlw	100	;'d'
  1983  126F  3465               	retlw	101	;'e'
  1984  1270  3466               	retlw	102	;'f'
  1985  1271  3400               	retlw	0
  1986                           
  1987                           	psect	stringtext28
  1988  1272                     __pstringtext28:	
  1989  1272                     STR_22:	
  1990  1272  3452               	retlw	82	;'R'
  1991  1273  3458               	retlw	88	;'X'
  1992  1274  3442               	retlw	66	;'B'
  1993  1275  3425               	retlw	37	;'%'
  1994  1276  3464               	retlw	100	;'d'
  1995  1277  3453               	retlw	83	;'S'
  1996  1278  3449               	retlw	73	;'I'
  1997  1279  3444               	retlw	68	;'D'
  1998  127A  3448               	retlw	72	;'H'
  1999  127B  343A               	retlw	58	;':'
  2000  127C  3420               	retlw	32	;' '
  2001  127D  3425               	retlw	37	;'%'
  2002  127E  3430               	retlw	48	;'0'
  2003  127F  3432               	retlw	50	;'2'
  2004  1280  3478               	retlw	120	;'x'
  2005  1281  340A               	retlw	10
  2006  1282  3400               	retlw	0
  2007                           
  2008                           	psect	stringtext29
  2009  1283                     __pstringtext29:	
  2010  1283                     STR_30:	
  2011  1283  3454               	retlw	84	;'T'
  2012  1284  3458               	retlw	88	;'X'
  2013  1285  3442               	retlw	66	;'B'
  2014  1286  3425               	retlw	37	;'%'
  2015  1287  3464               	retlw	100	;'d'
  2016  1288  3453               	retlw	83	;'S'
  2017  1289  3449               	retlw	73	;'I'
  2018  128A  3444               	retlw	68	;'D'
  2019  128B  3448               	retlw	72	;'H'
  2020  128C  343A               	retlw	58	;':'
  2021  128D  3420               	retlw	32	;' '
  2022  128E  3425               	retlw	37	;'%'
  2023  128F  3430               	retlw	48	;'0'
  2024  1290  3432               	retlw	50	;'2'
  2025  1291  3478               	retlw	120	;'x'
  2026  1292  340A               	retlw	10
  2027  1293  3400               	retlw	0
  2028                           
  2029                           	psect	stringtext30
  2030  1294                     __pstringtext30:	
  2031  1294                     STR_23:	
  2032  1294  3452               	retlw	82	;'R'
  2033  1295  3458               	retlw	88	;'X'
  2034  1296  3442               	retlw	66	;'B'
  2035  1297  3425               	retlw	37	;'%'
  2036  1298  3464               	retlw	100	;'d'
  2037  1299  3453               	retlw	83	;'S'
  2038  129A  3449               	retlw	73	;'I'
  2039  129B  3444               	retlw	68	;'D'
  2040  129C  344C               	retlw	76	;'L'
  2041  129D  343A               	retlw	58	;':'
  2042  129E  3420               	retlw	32	;' '
  2043  129F  3425               	retlw	37	;'%'
  2044  12A0  3430               	retlw	48	;'0'
  2045  12A1  3432               	retlw	50	;'2'
  2046  12A2  3478               	retlw	120	;'x'
  2047  12A3  340A               	retlw	10
  2048  12A4  3400               	retlw	0
  2049                           
  2050                           	psect	stringtext31
  2051  12A5                     __pstringtext31:	
  2052  12A5                     STR_31:	
  2053  12A5  3454               	retlw	84	;'T'
  2054  12A6  3458               	retlw	88	;'X'
  2055  12A7  3442               	retlw	66	;'B'
  2056  12A8  3425               	retlw	37	;'%'
  2057  12A9  3464               	retlw	100	;'d'
  2058  12AA  3453               	retlw	83	;'S'
  2059  12AB  3449               	retlw	73	;'I'
  2060  12AC  3444               	retlw	68	;'D'
  2061  12AD  344C               	retlw	76	;'L'
  2062  12AE  343A               	retlw	58	;':'
  2063  12AF  3420               	retlw	32	;' '
  2064  12B0  3425               	retlw	37	;'%'
  2065  12B1  3430               	retlw	48	;'0'
  2066  12B2  3432               	retlw	50	;'2'
  2067  12B3  3478               	retlw	120	;'x'
  2068  12B4  340A               	retlw	10
  2069  12B5  3400               	retlw	0
  2070                           
  2071                           	psect	stringtext32
  2072  12B6                     __pstringtext32:	
  2073  12B6                     STR_24:	
  2074  12B6  3452               	retlw	82	;'R'
  2075  12B7  3458               	retlw	88	;'X'
  2076  12B8  3442               	retlw	66	;'B'
  2077  12B9  3425               	retlw	37	;'%'
  2078  12BA  3464               	retlw	100	;'d'
  2079  12BB  3444               	retlw	68	;'D'
  2080  12BC  344C               	retlw	76	;'L'
  2081  12BD  3443               	retlw	67	;'C'
  2082  12BE  343A               	retlw	58	;':'
  2083  12BF  3420               	retlw	32	;' '
  2084  12C0  3425               	retlw	37	;'%'
  2085  12C1  3430               	retlw	48	;'0'
  2086  12C2  3432               	retlw	50	;'2'
  2087  12C3  3478               	retlw	120	;'x'
  2088  12C4  340A               	retlw	10
  2089  12C5  3400               	retlw	0
  2090                           
  2091                           	psect	stringtext33
  2092  12C6                     __pstringtext33:	
  2093  12C6                     STR_43:	
  2094  12C6  3452               	retlw	82	;'R'
  2095  12C7  3458               	retlw	88	;'X'
  2096  12C8  3442               	retlw	66	;'B'
  2097  12C9  3430               	retlw	48	;'0'
  2098  12CA  3443               	retlw	67	;'C'
  2099  12CB  3454               	retlw	84	;'T'
  2100  12CC  3452               	retlw	82	;'R'
  2101  12CD  344C               	retlw	76	;'L'
  2102  12CE  343A               	retlw	58	;':'
  2103  12CF  3420               	retlw	32	;' '
  2104  12D0  3425               	retlw	37	;'%'
  2105  12D1  3430               	retlw	48	;'0'
  2106  12D2  3432               	retlw	50	;'2'
  2107  12D3  3478               	retlw	120	;'x'
  2108  12D4  340A               	retlw	10
  2109  12D5  3400               	retlw	0
  2110                           
  2111                           	psect	stringtext34
  2112  12D6                     __pstringtext34:	
  2113  12D6                     STR_44:	
  2114  12D6  3452               	retlw	82	;'R'
  2115  12D7  3458               	retlw	88	;'X'
  2116  12D8  3442               	retlw	66	;'B'
  2117  12D9  3431               	retlw	49	;'1'
  2118  12DA  3443               	retlw	67	;'C'
  2119  12DB  3454               	retlw	84	;'T'
  2120  12DC  3452               	retlw	82	;'R'
  2121  12DD  344C               	retlw	76	;'L'
  2122  12DE  343A               	retlw	58	;':'
  2123  12DF  3420               	retlw	32	;' '
  2124  12E0  3425               	retlw	37	;'%'
  2125  12E1  3430               	retlw	48	;'0'
  2126  12E2  3432               	retlw	50	;'2'
  2127  12E3  3478               	retlw	120	;'x'
  2128  12E4  340A               	retlw	10
  2129  12E5  3400               	retlw	0
  2130                           
  2131                           	psect	stringtext35
  2132  12E6                     __pstringtext35:	
  2133  12E6                     STR_25:	
  2134  12E6  3452               	retlw	82	;'R'
  2135  12E7  3458               	retlw	88	;'X'
  2136  12E8  3442               	retlw	66	;'B'
  2137  12E9  3425               	retlw	37	;'%'
  2138  12EA  3464               	retlw	100	;'d'
  2139  12EB  3444               	retlw	68	;'D'
  2140  12EC  3430               	retlw	48	;'0'
  2141  12ED  343A               	retlw	58	;':'
  2142  12EE  3420               	retlw	32	;' '
  2143  12EF  3425               	retlw	37	;'%'
  2144  12F0  3430               	retlw	48	;'0'
  2145  12F1  3432               	retlw	50	;'2'
  2146  12F2  3478               	retlw	120	;'x'
  2147  12F3  340A               	retlw	10
  2148  12F4  3400               	retlw	0
  2149                           
  2150                           	psect	stringtext36
  2151  12F5                     __pstringtext36:	
  2152  12F5                     STR_49:	
  2153  12F5  3443               	retlw	67	;'C'
  2154  12F6  3441               	retlw	65	;'A'
  2155  12F7  344E               	retlw	78	;'N'
  2156  12F8  3443               	retlw	67	;'C'
  2157  12F9  3454               	retlw	84	;'T'
  2158  12FA  3452               	retlw	82	;'R'
  2159  12FB  344C               	retlw	76	;'L'
  2160  12FC  343A               	retlw	58	;':'
  2161  12FD  3420               	retlw	32	;' '
  2162  12FE  3425               	retlw	37	;'%'
  2163  12FF  3430               	retlw	48	;'0'
  2164  1300  3432               	retlw	50	;'2'
  2165  1301  3478               	retlw	120	;'x'
  2166  1302  340A               	retlw	10
  2167  1303  3400               	retlw	0
  2168                           
  2169                           	psect	stringtext37
  2170  1304                     __pstringtext37:	
  2171  1304                     STR_19:	
  2172  1304  3443               	retlw	67	;'C'
  2173  1305  3441               	retlw	65	;'A'
  2174  1306  344E               	retlw	78	;'N'
  2175  1307  3453               	retlw	83	;'S'
  2176  1308  3454               	retlw	84	;'T'
  2177  1309  3441               	retlw	65	;'A'
  2178  130A  3454               	retlw	84	;'T'
  2179  130B  343A               	retlw	58	;':'
  2180  130C  3420               	retlw	32	;' '
  2181  130D  3425               	retlw	37	;'%'
  2182  130E  3430               	retlw	48	;'0'
  2183  130F  3432               	retlw	50	;'2'
  2184  1310  3478               	retlw	120	;'x'
  2185  1311  340A               	retlw	10
  2186  1312  3400               	retlw	0
  2187                           
  2188                           	psect	stringtext38
  2189  1313                     __pstringtext38:	
  2190  1313                     STR_28:	
  2191  1313  3454               	retlw	84	;'T'
  2192  1314  3458               	retlw	88	;'X'
  2193  1315  3442               	retlw	66	;'B'
  2194  1316  3430               	retlw	48	;'0'
  2195  1317  3420               	retlw	32	;' '
  2196  1318  3469               	retlw	105	;'i'
  2197  1319  3473               	retlw	115	;'s'
  2198  131A  3420               	retlw	32	;' '
  2199  131B  3469               	retlw	105	;'i'
  2200  131C  3464               	retlw	100	;'d'
  2201  131D  346C               	retlw	108	;'l'
  2202  131E  3465               	retlw	101	;'e'
  2203  131F  340A               	retlw	10
  2204  1320  3400               	retlw	0
  2205                           
  2206                           	psect	stringtext39
  2207  1321                     __pstringtext39:	
  2208  1321                     STR_27:	
  2209  1321  3454               	retlw	84	;'T'
  2210  1322  3458               	retlw	88	;'X'
  2211  1323  3442               	retlw	66	;'B'
  2212  1324  3431               	retlw	49	;'1'
  2213  1325  3420               	retlw	32	;' '
  2214  1326  3469               	retlw	105	;'i'
  2215  1327  3473               	retlw	115	;'s'
  2216  1328  3420               	retlw	32	;' '
  2217  1329  3469               	retlw	105	;'i'
  2218  132A  3464               	retlw	100	;'d'
  2219  132B  346C               	retlw	108	;'l'
  2220  132C  3465               	retlw	101	;'e'
  2221  132D  340A               	retlw	10
  2222  132E  3400               	retlw	0
  2223                           
  2224                           	psect	stringtext40
  2225  132F                     __pstringtext40:	
  2226  132F                     STR_26:	
  2227  132F  3454               	retlw	84	;'T'
  2228  1330  3458               	retlw	88	;'X'
  2229  1331  3442               	retlw	66	;'B'
  2230  1332  3432               	retlw	50	;'2'
  2231  1333  3420               	retlw	32	;' '
  2232  1334  3469               	retlw	105	;'i'
  2233  1335  3473               	retlw	115	;'s'
  2234  1336  3420               	retlw	32	;' '
  2235  1337  3469               	retlw	105	;'i'
  2236  1338  3464               	retlw	100	;'d'
  2237  1339  346C               	retlw	108	;'l'
  2238  133A  3465               	retlw	101	;'e'
  2239  133B  340A               	retlw	10
  2240  133C  3400               	retlw	0
  2241                           
  2242                           	psect	stringtext41
  2243  133D                     __pstringtext41:	
  2244  133D                     STR_34:	
  2245  133D  3452               	retlw	82	;'R'
  2246  133E  3458               	retlw	88	;'X'
  2247  133F  3430               	retlw	48	;'0'
  2248  1340  3449               	retlw	73	;'I'
  2249  1341  3446               	retlw	70	;'F'
  2250  1342  3420               	retlw	32	;' '
  2251  1343  3469               	retlw	105	;'i'
  2252  1344  3473               	retlw	115	;'s'
  2253  1345  3420               	retlw	32	;' '
  2254  1346  346F               	retlw	111	;'o'
  2255  1347  346E               	retlw	110	;'n'
  2256  1348  340A               	retlw	10
  2257  1349  3400               	retlw	0
  2258                           
  2259                           	psect	stringtext42
  2260  134A                     __pstringtext42:	
  2261  134A                     STR_33:	
  2262  134A  3452               	retlw	82	;'R'
  2263  134B  3458               	retlw	88	;'X'
  2264  134C  3431               	retlw	49	;'1'
  2265  134D  3449               	retlw	73	;'I'
  2266  134E  3446               	retlw	70	;'F'
  2267  134F  3420               	retlw	32	;' '
  2268  1350  3469               	retlw	105	;'i'
  2269  1351  3473               	retlw	115	;'s'
  2270  1352  3420               	retlw	32	;' '
  2271  1353  346F               	retlw	111	;'o'
  2272  1354  346E               	retlw	110	;'n'
  2273  1355  340A               	retlw	10
  2274  1356  3400               	retlw	0
  2275                           
  2276                           	psect	stringtext43
  2277  1357                     __pstringtext43:	
  2278  1357                     STR_39:	
  2279  1357  3443               	retlw	67	;'C'
  2280  1358  344E               	retlw	78	;'N'
  2281  1359  3446               	retlw	70	;'F'
  2282  135A  3431               	retlw	49	;'1'
  2283  135B  343A               	retlw	58	;':'
  2284  135C  3420               	retlw	32	;' '
  2285  135D  3425               	retlw	37	;'%'
  2286  135E  3430               	retlw	48	;'0'
  2287  135F  3432               	retlw	50	;'2'
  2288  1360  3478               	retlw	120	;'x'
  2289  1361  340A               	retlw	10
  2290  1362  3400               	retlw	0
  2291                           
  2292                           	psect	stringtext44
  2293  1363                     __pstringtext44:	
  2294  1363                     STR_40:	
  2295  1363  3443               	retlw	67	;'C'
  2296  1364  344E               	retlw	78	;'N'
  2297  1365  3446               	retlw	70	;'F'
  2298  1366  3432               	retlw	50	;'2'
  2299  1367  343A               	retlw	58	;':'
  2300  1368  3420               	retlw	32	;' '
  2301  1369  3425               	retlw	37	;'%'
  2302  136A  3430               	retlw	48	;'0'
  2303  136B  3432               	retlw	50	;'2'
  2304  136C  3478               	retlw	120	;'x'
  2305  136D  340A               	retlw	10
  2306  136E  3400               	retlw	0
  2307                           
  2308                           	psect	stringtext45
  2309  136F                     __pstringtext45:	
  2310  136F                     STR_41:	
  2311  136F  3443               	retlw	67	;'C'
  2312  1370  344E               	retlw	78	;'N'
  2313  1371  3446               	retlw	70	;'F'
  2314  1372  3433               	retlw	51	;'3'
  2315  1373  343A               	retlw	58	;':'
  2316  1374  3420               	retlw	32	;' '
  2317  1375  3425               	retlw	37	;'%'
  2318  1376  3430               	retlw	48	;'0'
  2319  1377  3432               	retlw	50	;'2'
  2320  1378  3478               	retlw	120	;'x'
  2321  1379  340A               	retlw	10
  2322  137A  3400               	retlw	0
  2323                           
  2324                           	psect	stringtext46
  2325  138D                     __pstringtext46:	
  2326  138D                     STR_52:	
  2327  138D  3428               	retlw	40	;'('
  2328  138E  346E               	retlw	110	;'n'
  2329  138F  3475               	retlw	117	;'u'
  2330  1390  346C               	retlw	108	;'l'
  2331  1391  346C               	retlw	108	;'l'
  2332  1392  3429               	retlw	41	;')'
  2333  1393  3400               	retlw	0
  2334                           
  2335                           	psect	stringtext47
  2336  1394                     __pstringtext47:	
  2337  1394                     STR_1:	
  2338  1394  3425               	retlw	37	;'%'
  2339  1395  3464               	retlw	100	;'d'
  2340  1396  342C               	retlw	44	;','
  2341  1397  3425               	retlw	37	;'%'
  2342  1398  3473               	retlw	115	;'s'
  2343  1399  340A               	retlw	10
  2344  139A  3400               	retlw	0
  2345                           
  2346                           	psect	stringtext48
  2347  13A1                     __pstringtext48:	
  2348  13A1                     STR_2:	
  2349  13A1  3425               	retlw	37	;'%'
  2350  13A2  3430               	retlw	48	;'0'
  2351  13A3  3432               	retlw	50	;'2'
  2352  13A4  3478               	retlw	120	;'x'
  2353  13A5  343A               	retlw	58	;':'
  2354  13A6  3400               	retlw	0
  2355                           
  2356                           	psect	stringtext49
  2357  13A7                     __pstringtext49:	
  2358  13A7                     STR_3:	
  2359  13A7  3420               	retlw	32	;' '
  2360  13A8  3425               	retlw	37	;'%'
  2361  13A9  3430               	retlw	48	;'0'
  2362  13AA  3432               	retlw	50	;'2'
  2363  13AB  3478               	retlw	120	;'x'
  2364  13AC  3400               	retlw	0
  2365                           
  2366                           	psect	stringtext50
  2367  13B3                     __pstringtext50:	
  2368  13B3                     STR_6:	
  2369  13B3  3425               	retlw	37	;'%'
  2370  13B4  3463               	retlw	99	;'c'
  2371  13B5  3400               	retlw	0
  2372                           
  2373                           	psect	stringtext51
  2374  0000                     __pstringtext51:	
  2375  11F9                     
  2376                           ; #config settings
  2377  0000                     
  2378                           	psect	cinit
  2379  07EB                     start_initialization:	
  2380  07EB                     __initialization:	
  2381                           
  2382                           ; Initialize objects allocated to BANK1
  2383  07EB  3090               	movlw	low __pidataBANK1
  2384  07EC  0084               	movwf	4
  2385  07ED  308C               	movlw	(high __pidataBANK1)| (0+128)
  2386  07EE  0085               	movwf	5
  2387  07EF  30B3               	movlw	low __pdataBANK1
  2388  07F0  0086               	movwf	6
  2389  07F1  3000               	movlw	high __pdataBANK1
  2390  07F2  0087               	movwf	7
  2391  07F3  3009               	movlw	9
  2392  07F4  318C  246B         	fcall	init_ram
  2393                           
  2394                           ; Clear objects allocated to BANK0
  2395  07F6  01E9               	clrf	__pbssBANK0& (0+127)
  2396  07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2397  07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2398  07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2399  07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
  2400  07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
  2401  07FC  01EF               	clrf	(__pbssBANK0+6)& (0+127)
  2402  07FD                     end_of_initialization:	
  2403                           ;End of C runtime variable initialization code
  2404                           
  2405  07FD                     __end_of__initialization:	
  2406  07FD  0020               	movlb	0
  2407  07FE  3183  2BEA         	ljmp	_main	;jump to C main() function
  2408                           
  2409                           	psect	bssBANK0
  2410  0069                     __pbssBANK0:	
  2411  0069                     _mode:	
  2412  0069                     	ds	2
  2413  006B                     _sid:	
  2414  006B                     	ds	2
  2415  006D                     _output_format:	
  2416  006D                     	ds	2
  2417  006F                     _operation_mode:	
  2418  006F                     	ds	1
  2419                           
  2420                           	psect	dataBANK1
  2421  00B3                     __pdataBANK1:	
  2422  00B3                     can_init@F2806:	
  2423  00B3                     	ds	5
  2424  00B8                     can_status_check@F2846:	
  2425  00B8                     	ds	2
  2426  00BA                     can_send@F2837:	
  2427  00BA                     	ds	2
  2428                           
  2429                           	psect	inittext
  2430  0C6B                     init_ram:	
  2431  0C6B  00FE               	movwf	126
  2432  0C6C                     initloop:	
  2433  0C6C  0012               	moviw fsr0++
  2434  0C6D  001E               	movwi fsr1++
  2435  0C6E  0BFE               	decfsz	126,f
  2436  0C6F  2C6C               	goto	initloop
  2437  0C70  3400               	retlw	0
  2438                           
  2439                           	psect	cstackBANK1
  2440  00A0                     __pcstackBANK1:	
  2441  00A0                     main@sid:	
  2442                           
  2443                           ; 1 bytes @ 0x0
  2444  00A0                     	ds	1
  2445  00A1                     main@bpr:	
  2446                           
  2447                           ; 1 bytes @ 0x1
  2448  00A1                     	ds	1
  2449  00A2                     main@success:	
  2450                           
  2451                           ; 1 bytes @ 0x2
  2452  00A2                     	ds	1
  2453  00A3                     main@mask:	
  2454                           
  2455                           ; 2 bytes @ 0x3
  2456  00A3                     	ds	2
  2457  00A5                     main@echo_back:	
  2458                           
  2459                           ; 1 bytes @ 0x5
  2460  00A5                     	ds	1
  2461  00A6                     main@n:	
  2462                           
  2463                           ; 1 bytes @ 0x6
  2464  00A6                     	ds	1
  2465  00A7                     main@buf:	
  2466                           
  2467                           ; 9 bytes @ 0x7
  2468  00A7                     	ds	9
  2469  00B0                     main@c:	
  2470                           
  2471                           ; 1 bytes @ 0x10
  2472  00B0                     	ds	1
  2473  00B1                     main@cmd:	
  2474                           
  2475                           ; 1 bytes @ 0x11
  2476  00B1                     	ds	1
  2477  00B2                     main@idx:	
  2478                           
  2479                           ; 1 bytes @ 0x12
  2480  00B2                     	ds	1
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0070                     __pcstackCOMMON:	
  2484  0070                     ?_isdigit:	
  2485  0070                     ?_PIN_MANAGER_Initialize:	
  2486                           ; 1 bit 
  2487                           
  2488  0070                     ??_PIN_MANAGER_Initialize:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?_OSCILLATOR_Initialize:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ??_OSCILLATOR_Initialize:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ?_WDT_Initialize:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ??_WDT_Initialize:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ?_SPI_Initialize:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ??_SPI_Initialize:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ?_EUSART_Initialize:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ??_EUSART_Initialize:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_can_status_check:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ?_can_set_sid:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0070                     ?_can_logging_mode:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0070                     ?_can_ope_mode:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     ?_can_baudrate:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ?_can_dump_registers:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     ??_isdigit:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0070                     ?_SYSTEM_Initialize:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0070                     ??_SYSTEM_Initialize:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0070                     ?_EUSART_Read:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ??_EUSART_Read:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_EUSART_Write:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ??_EUSART_Write:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_putch:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_SPI_Exchange8bit:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ??_SPI_Exchange8bit:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_main:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ?_txf_clear:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ?_receive:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_read_register:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0070                     ?___wmul:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?___lwdiv:	
  2579                           ; 2 bytes @ 0x0
  2580                           
  2581  0070                     EUSART_Write@txData:	
  2582                           ; 2 bytes @ 0x0
  2583                           
  2584  0070                     SPI_Exchange8bit@data:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     can_logging_mode@verbose:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     _isdigit$793:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     can_set_sid@can_node:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ___wmul@multiplier:	
  2597                           ; 2 bytes @ 0x0
  2598                           
  2599  0070                     ___lwdiv@divisor:	
  2600                           ; 2 bytes @ 0x0
  2601                           
  2602                           
  2603                           ; 2 bytes @ 0x0
  2604  0070                     	ds	1
  2605  0071                     ??_can_logging_mode:	
  2606  0071                     ??_putch:	
  2607                           ; 1 bytes @ 0x1
  2608                           
  2609  0071                     ?_SPI_Exchange8bitBuffer:	
  2610                           ; 1 bytes @ 0x1
  2611                           
  2612  0071                     putch@txData:	
  2613                           ; 1 bytes @ 0x1
  2614                           
  2615  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2616                           ; 1 bytes @ 0x1
  2617                           
  2618  0071                     isdigit@c:	
  2619                           ; 1 bytes @ 0x1
  2620                           
  2621                           
  2622                           ; 1 bytes @ 0x1
  2623  0071                     	ds	1
  2624  0072                     ??_can_set_sid:	
  2625  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2626                           ; 1 bytes @ 0x2
  2627                           
  2628  0072                     can_logging_mode@debug:	
  2629                           ; 1 bytes @ 0x2
  2630                           
  2631  0072                     ___wmul@multiplicand:	
  2632                           ; 1 bytes @ 0x2
  2633                           
  2634  0072                     ___lwdiv@dividend:	
  2635                           ; 2 bytes @ 0x2
  2636                           
  2637                           
  2638                           ; 2 bytes @ 0x2
  2639  0072                     	ds	1
  2640  0073                     ??_SPI_Exchange8bitBuffer:	
  2641                           
  2642                           ; 1 bytes @ 0x3
  2643  0073                     	ds	1
  2644  0074                     ??___wmul:	
  2645  0074                     ??___lwdiv:	
  2646                           ; 1 bytes @ 0x4
  2647                           
  2648  0074                     ___wmul@product:	
  2649                           ; 1 bytes @ 0x4
  2650                           
  2651                           
  2652                           ; 2 bytes @ 0x4
  2653  0074                     	ds	1
  2654  0075                     can_set_sid@sidh:	
  2655  0075                     ___lwdiv@quotient:	
  2656                           ; 1 bytes @ 0x5
  2657                           
  2658                           
  2659                           ; 2 bytes @ 0x5
  2660  0075                     	ds	1
  2661  0076                     ?_atoi:	
  2662  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2663                           ; 2 bytes @ 0x6
  2664                           
  2665  0076                     can_set_sid@sidl:	
  2666                           ; 1 bytes @ 0x6
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0x6
  2670  0076                     	ds	1
  2671  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2672  0077                     ___lwdiv@counter:	
  2673                           ; 1 bytes @ 0x7
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0x7
  2677  0077                     	ds	1
  2678  0078                     ??_atoi:	
  2679  0078                     ?_SPI_exchange:	
  2680                           ; 1 bytes @ 0x8
  2681                           
  2682  0078                     ?___lwmod:	
  2683                           ; 1 bytes @ 0x8
  2684                           
  2685  0078                     SPI_exchange@len:	
  2686                           ; 2 bytes @ 0x8
  2687                           
  2688  0078                     ___lwmod@divisor:	
  2689                           ; 1 bytes @ 0x8
  2690                           
  2691                           
  2692                           ; 2 bytes @ 0x8
  2693  0078                     	ds	1
  2694  0079                     ??_SPI_exchange:	
  2695                           
  2696                           ; 1 bytes @ 0x9
  2697  0079                     	ds	1
  2698  007A                     atoi@sign:	
  2699  007A                     ___lwmod@dividend:	
  2700                           ; 1 bytes @ 0xA
  2701                           
  2702                           
  2703                           ; 2 bytes @ 0xA
  2704  007A                     	ds	1
  2705  007B                     atoi@a:	
  2706                           
  2707                           ; 2 bytes @ 0xB
  2708  007B                     	ds	1
  2709  007C                     ??___lwmod:	
  2710  007C                     SPI_exchange@bytes_written:	
  2711                           ; 1 bytes @ 0xC
  2712                           
  2713                           
  2714                           ; 1 bytes @ 0xC
  2715  007C                     	ds	1
  2716  007D                     SPI_exchange@buf:	
  2717  007D                     atoi@s:	
  2718                           ; 1 bytes @ 0xD
  2719                           
  2720  007D                     ___lwmod@counter:	
  2721                           ; 1 bytes @ 0xD
  2722                           
  2723                           
  2724                           ; 1 bytes @ 0xD
  2725  007D                     	ds	1
  2726                           
  2727                           	psect	cstackBANK0
  2728  0020                     __pcstackBANK0:	
  2729  0020                     ??_txf_clear:	
  2730  0020                     ??_read_register:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733                           
  2734                           ; 1 bytes @ 0x0
  2735  0020                     	ds	1
  2736  0021                     read_register@addr:	
  2737                           
  2738                           ; 1 bytes @ 0x1
  2739  0021                     	ds	1
  2740  0022                     txf_clear@n:	
  2741  0022                     read_register@read_buf:	
  2742                           ; 1 bytes @ 0x2
  2743                           
  2744                           
  2745                           ; 3 bytes @ 0x2
  2746  0022                     	ds	1
  2747  0023                     txf_clear@mask:	
  2748                           
  2749                           ; 1 bytes @ 0x3
  2750  0023                     	ds	1
  2751  0024                     txf_clear@bytes_written:	
  2752                           
  2753                           ; 1 bytes @ 0x4
  2754  0024                     	ds	1
  2755  0025                     ?_printf:	
  2756  0025                     printf@f:	
  2757                           ; 2 bytes @ 0x5
  2758                           
  2759  0025                     txf_clear@can_int_flag:	
  2760                           ; 2 bytes @ 0x5
  2761                           
  2762                           
  2763                           ; 4 bytes @ 0x5
  2764  0025                     	ds	10
  2765  002F                     ??_printf:	
  2766                           
  2767                           ; 1 bytes @ 0xF
  2768  002F                     	ds	4
  2769  0033                     printf@idx:	
  2770                           
  2771                           ; 1 bytes @ 0x13
  2772  0033                     	ds	1
  2773  0034                     printf@prec:	
  2774                           
  2775                           ; 1 bytes @ 0x14
  2776  0034                     	ds	1
  2777  0035                     printf@cp:	
  2778                           
  2779                           ; 2 bytes @ 0x15
  2780  0035                     	ds	2
  2781  0037                     printf@len:	
  2782                           
  2783                           ; 2 bytes @ 0x17
  2784  0037                     	ds	2
  2785  0039                     printf@ap:	
  2786                           
  2787                           ; 1 bytes @ 0x19
  2788  0039                     	ds	1
  2789  003A                     printf@val:	
  2790                           
  2791                           ; 2 bytes @ 0x1A
  2792  003A                     	ds	2
  2793  003C                     printf@flag:	
  2794                           
  2795                           ; 1 bytes @ 0x1C
  2796  003C                     	ds	1
  2797  003D                     printf@width:	
  2798                           
  2799                           ; 2 bytes @ 0x1D
  2800  003D                     	ds	2
  2801  003F                     printf@c:	
  2802                           
  2803                           ; 1 bytes @ 0x1F
  2804  003F                     	ds	1
  2805  0040                     ??_can_ope_mode:	
  2806  0040                     ??_can_dump_registers:	
  2807                           ; 1 bytes @ 0x20
  2808                           
  2809  0040                     ?_can_send:	
  2810                           ; 1 bytes @ 0x20
  2811                           
  2812  0040                     ?_receive_handler:	
  2813                           ; 1 bytes @ 0x20
  2814                           
  2815  0040                     receive_handler@sid:	
  2816                           ; 1 bytes @ 0x20
  2817                           
  2818  0040                     can_send@dlc:	
  2819                           ; 1 bytes @ 0x20
  2820                           
  2821                           
  2822                           ; 1 bytes @ 0x20
  2823  0040                     	ds	1
  2824  0041                     ??_can_send:	
  2825  0041                     receive_handler@pbuf:	
  2826                           ; 1 bytes @ 0x21
  2827                           
  2828                           
  2829                           ; 1 bytes @ 0x21
  2830  0041                     	ds	1
  2831  0042                     receive_handler@dlc:	
  2832  0042                     can_ope_mode@bytes_written:	
  2833                           ; 1 bytes @ 0x22
  2834                           
  2835                           
  2836                           ; 1 bytes @ 0x22
  2837  0042                     	ds	1
  2838  0043                     ??_receive_handler:	
  2839  0043                     can_ope_mode@can_ctrl_buf:	
  2840                           ; 1 bytes @ 0x23
  2841                           
  2842                           
  2843                           ; 3 bytes @ 0x23
  2844  0043                     	ds	2
  2845  0045                     can_send@tx_buf:	
  2846                           
  2847                           ; 14 bytes @ 0x25
  2848  0045                     	ds	1
  2849  0046                     receive_handler@i:	
  2850  0046                     can_ope_mode@ope_mode:	
  2851                           ; 1 bytes @ 0x26
  2852                           
  2853                           
  2854                           ; 1 bytes @ 0x26
  2855  0046                     	ds	1
  2856  0047                     ?_can_init:	
  2857  0047                     ??_can_baudrate:	
  2858                           ; 1 bytes @ 0x27
  2859                           
  2860  0047                     ?_can_set_mask:	
  2861                           ; 1 bytes @ 0x27
  2862                           
  2863  0047                     ??_receive:	
  2864                           ; 1 bytes @ 0x27
  2865                           
  2866  0047                     can_set_mask@n:	
  2867                           ; 1 bytes @ 0x27
  2868                           
  2869  0047                     can_init@receive_handler:	
  2870                           ; 1 bytes @ 0x27
  2871                           
  2872                           
  2873                           ; 2 bytes @ 0x27
  2874  0047                     	ds	1
  2875  0048                     can_set_mask@mask:	
  2876  0048                     can_dump_registers@mask_sidh:	
  2877                           ; 1 bytes @ 0x28
  2878                           
  2879                           
  2880                           ; 1 bytes @ 0x28
  2881  0048                     	ds	1
  2882  0049                     ??_can_init:	
  2883  0049                     ??_can_set_mask:	
  2884                           ; 1 bytes @ 0x29
  2885                           
  2886  0049                     can_baudrate@bpr:	
  2887                           ; 1 bytes @ 0x29
  2888                           
  2889  0049                     can_dump_registers@mask_sidl:	
  2890                           ; 1 bytes @ 0x29
  2891                           
  2892                           
  2893                           ; 1 bytes @ 0x29
  2894  0049                     	ds	1
  2895  004A                     can_baudrate@mask:	
  2896  004A                     can_dump_registers@n:	
  2897                           ; 1 bytes @ 0x2A
  2898                           
  2899  004A                     can_init@cnf_buf:	
  2900                           ; 1 bytes @ 0x2A
  2901                           
  2902                           
  2903                           ; 5 bytes @ 0x2A
  2904  004A                     	ds	1
  2905  004B                     can_baudrate@bytes_written:	
  2906                           
  2907                           ; 1 bytes @ 0x2B
  2908  004B                     	ds	1
  2909  004C                     receive@bytes_read:	
  2910  004C                     can_baudrate@cnf1_buf:	
  2911                           ; 1 bytes @ 0x2C
  2912                           
  2913                           
  2914                           ; 4 bytes @ 0x2C
  2915  004C                     	ds	1
  2916  004D                     receive@rx_buf:	
  2917                           
  2918                           ; 15 bytes @ 0x2D
  2919  004D                     	ds	2
  2920  004F                     _can_set_mask$488:	
  2921                           
  2922                           ; 2 bytes @ 0x2F
  2923  004F                     	ds	2
  2924  0051                     can_set_mask@mask_buf:	
  2925                           
  2926                           ; 4 bytes @ 0x31
  2927  0051                     	ds	2
  2928  0053                     can_send@can_status_buf:	
  2929                           
  2930                           ; 2 bytes @ 0x33
  2931  0053                     	ds	2
  2932  0055                     can_set_mask@cmd:	
  2933  0055                     can_send@len:	
  2934                           ; 1 bytes @ 0x35
  2935                           
  2936                           
  2937                           ; 1 bytes @ 0x35
  2938  0055                     	ds	1
  2939  0056                     can_set_mask@mask_sidh:	
  2940  0056                     can_send@buf:	
  2941                           ; 1 bytes @ 0x36
  2942                           
  2943                           
  2944                           ; 1 bytes @ 0x36
  2945  0056                     	ds	1
  2946  0057                     can_set_mask@mask_sidl:	
  2947  0057                     can_send@bytes_written:	
  2948                           ; 1 bytes @ 0x37
  2949                           
  2950                           
  2951                           ; 1 bytes @ 0x37
  2952  0057                     	ds	1
  2953  0058                     can_send@txb_ctrl_buf:	
  2954                           
  2955                           ; 1 bytes @ 0x38
  2956  0058                     	ds	1
  2957  0059                     can_send@status:	
  2958                           
  2959                           ; 1 bytes @ 0x39
  2960  0059                     	ds	1
  2961  005A                     can_send@debug_buf:	
  2962                           
  2963                           ; 3 bytes @ 0x3A
  2964  005A                     	ds	2
  2965  005C                     receive@pbuf:	
  2966                           
  2967                           ; 1 bytes @ 0x3C
  2968  005C                     	ds	1
  2969  005D                     can_send@i:	
  2970  005D                     receive@sid:	
  2971                           ; 1 bytes @ 0x3D
  2972                           
  2973                           
  2974                           ; 2 bytes @ 0x3D
  2975  005D                     	ds	1
  2976  005E                     can_send@n:	
  2977                           
  2978                           ; 1 bytes @ 0x3E
  2979  005E                     	ds	1
  2980  005F                     receive@dlc:	
  2981                           
  2982                           ; 1 bytes @ 0x3F
  2983  005F                     	ds	1
  2984  0060                     receive@n:	
  2985                           
  2986                           ; 1 bytes @ 0x40
  2987  0060                     	ds	1
  2988  0061                     ??_can_status_check:	
  2989                           
  2990                           ; 1 bytes @ 0x41
  2991  0061                     	ds	2
  2992  0063                     can_status_check@bytes_written:	
  2993                           
  2994                           ; 1 bytes @ 0x43
  2995  0063                     	ds	1
  2996  0064                     can_status_check@can_status_buf:	
  2997                           
  2998                           ; 2 bytes @ 0x44
  2999  0064                     	ds	2
  3000  0066                     can_status_check@status:	
  3001                           
  3002                           ; 1 bytes @ 0x46
  3003  0066                     	ds	1
  3004  0067                     ??_main:	
  3005                           
  3006                           ; 1 bytes @ 0x47
  3007  0067                     	ds	2
  3008                           
  3009                           	psect	maintext
  3010  03EA                     __pmaintext:	
  3011 ;;
  3012 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3013 ;;
  3014 ;; *************** function _main *****************
  3015 ;; Defined at:
  3016 ;;		line 39 in file "main.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  success         1    2[BANK1 ] unsigned char 
  3021 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3022 ;;  mask            2    3[BANK1 ] unsigned int 
  3023 ;;  idx             1   18[BANK1 ] unsigned char 
  3024 ;;  cmd             1   17[BANK1 ] unsigned char 
  3025 ;;  c               1   16[BANK1 ] unsigned char 
  3026 ;;  n               1    6[BANK1 ] unsigned char 
  3027 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3028 ;;  bpr             1    1[BANK1 ] unsigned char 
  3029 ;;  sid             1    0[BANK1 ] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : B1F/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3042 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3043 ;;Total ram usage:       21 bytes
  3044 ;; Hardware stack levels required when called:    6
  3045 ;; This function calls:
  3046 ;;		_EUSART_Read
  3047 ;;		_SYSTEM_Initialize
  3048 ;;		_atoi
  3049 ;;		_can_baudrate
  3050 ;;		_can_dump_registers
  3051 ;;		_can_init
  3052 ;;		_can_logging_mode
  3053 ;;		_can_ope_mode
  3054 ;;		_can_send
  3055 ;;		_can_set_mask
  3056 ;;		_can_set_sid
  3057 ;;		_can_status_check
  3058 ;;		_printf
  3059 ;; This function is called by:
  3060 ;;		Startup code after reset
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _main
  3066  03EA                     _main:	
  3067                           
  3068                           ;main.c: 41: uint8_t buf[9];
  3069                           ;main.c: 42: bool echo_back = 0;
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3073  03EA  0021               	movlb	1	; select bank1
  3074  03EB  01A5               	clrf	main@echo_back^(0+128)
  3075                           
  3076                           ;main.c: 43: uint8_t c, idx;
  3077                           ;main.c: 45: uint8_t cmd, sid, n, bpr;
  3078                           ;main.c: 46: uint16_t mask;
  3079                           ;main.c: 48: SYSTEM_Initialize();
  3080  03EC  318C  24BC  3183   	fcall	_SYSTEM_Initialize
  3081                           
  3082                           ;main.c: 53: output_format.with_sid = 0;
  3083  03EF  0020               	movlb	0	; select bank0
  3084  03F0  01ED               	clrf	_output_format
  3085                           
  3086                           ;main.c: 54: output_format.hex_output = 0;
  3087  03F1  01EE               	clrf	_output_format+1
  3088                           
  3089                           ;main.c: 55: can_init(receive_handler);
  3090  03F2  303E               	movlw	low _receive_handler
  3091  03F3  00C7               	movwf	can_init@receive_handler
  3092  03F4  300F               	movlw	high _receive_handler
  3093  03F5  00C8               	movwf	can_init@receive_handler+1
  3094  03F6  318E  26E4  3183   	fcall	_can_init
  3095                           
  3096                           ;main.c: 72: switch(cmd) {
  3097  03F9  2D10               	goto	L1
  3098  03FA                     l2503:	
  3099                           ;main.c: 73: case 'i':
  3100                           
  3101                           
  3102                           ;main.c: 74: sid = atoi(&buf[2]);
  3103  03FA  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3104  03FB  318F  2799  3183   	fcall	_atoi
  3105  03FE  0876               	movf	?_atoi,w
  3106  03FF  0020               	movlb	0	; select bank0
  3107  0400  00E7               	movwf	??_main
  3108  0401  0867               	movf	??_main,w
  3109  0402  0021               	movlb	1	; select bank1
  3110  0403  00A0               	movwf	main@sid^(0+128)
  3111                           
  3112                           ;main.c: 75: can_set_sid(sid);
  3113  0404  0820               	movf	main@sid^(0+128),w
  3114  0405  0020               	movlb	0	; select bank0
  3115  0406  00E7               	movwf	??_main
  3116  0407  01E8               	clrf	??_main+1
  3117  0408  0867               	movf	??_main,w
  3118  0409  00F0               	movwf	can_set_sid@can_node
  3119  040A  0868               	movf	??_main+1,w
  3120  040B  00F1               	movwf	can_set_sid@can_node+1
  3121  040C  318D  2527  3183   	fcall	_can_set_sid
  3122                           
  3123                           ;main.c: 76: break;
  3124  040F  2D10               	goto	L1
  3125  0410                     l2507:	
  3126                           ;main.c: 77: case 'v':
  3127                           
  3128                           
  3129                           ;main.c: 78: if (buf[2] == 'd') {
  3130  0410  3064               	movlw	100
  3131  0411  0021               	movlb	1	; select bank1
  3132  0412  0629               	xorwf	(main@buf^(0+128)+2),w
  3133  0413  1D03               	btfss	3,2
  3134  0414  2C19               	goto	l2513
  3135                           
  3136                           ;main.c: 79: can_logging_mode(1, 1);
  3137  0415  01F0               	clrf	can_logging_mode@verbose
  3138  0416  0AF0               	incf	can_logging_mode@verbose,f
  3139  0417  3001               	movlw	1
  3140  0418  2C20               	goto	L2
  3141  0419                     l2513:	
  3142                           ;main.c: 81: } else if (buf[2] == 'v') {
  3143                           
  3144                           ;main.c: 80: echo_back = 1;
  3145                           
  3146  0419  3076               	movlw	118
  3147  041A  0629               	xorwf	(main@buf^(0+128)+2),w
  3148  041B  1D03               	btfss	3,2
  3149  041C  2C27               	goto	l2519
  3150                           
  3151                           ;main.c: 82: can_logging_mode(0, 1);
  3152  041D  01F0               	clrf	can_logging_mode@verbose
  3153  041E  0AF0               	incf	can_logging_mode@verbose,f
  3154  041F  3000               	movlw	0
  3155  0420                     L2:	
  3156  0420  3180  2006  3183   	fcall	_can_logging_mode
  3157                           
  3158                           ;main.c: 83: echo_back = 1;
  3159  0423  0021               	movlb	1	; select bank1
  3160  0424  01A5               	clrf	main@echo_back^(0+128)
  3161  0425  0AA5               	incf	main@echo_back^(0+128),f
  3162                           
  3163                           ;main.c: 84: } else if (buf[2] == 'n') {
  3164  0426  2D10               	goto	L1
  3165  0427                     l2519:	
  3166  0427  306E               	movlw	110
  3167  0428  0629               	xorwf	(main@buf^(0+128)+2),w
  3168  0429  1D03               	btfss	3,2
  3169  042A  2D10               	goto	L1
  3170                           
  3171                           ;main.c: 85: can_logging_mode(0, 0);
  3172  042B  01F0               	clrf	can_logging_mode@verbose
  3173  042C  3000               	movlw	0
  3174  042D  3180  2006  3183   	fcall	_can_logging_mode
  3175                           
  3176                           ;main.c: 86: echo_back = 0;
  3177  0430  0021               	movlb	1	; select bank1
  3178  0431  01A5               	clrf	main@echo_back^(0+128)
  3179                           
  3180                           ;main.c: 87: }
  3181                           ;main.c: 88: break;
  3182  0432  2D10               	goto	L1
  3183  0433                     l2525:	
  3184                           ;main.c: 89: case 'o':
  3185                           
  3186                           
  3187                           ;main.c: 90: if (buf[2] == 'l') {
  3188  0433  306C               	movlw	108
  3189  0434  0629               	xorwf	(main@buf^(0+128)+2),w
  3190  0435  1D03               	btfss	3,2
  3191  0436  2C39               	goto	l2529
  3192                           
  3193                           ;main.c: 91: can_ope_mode(0b01000000);
  3194  0437  3040               	movlw	64
  3195  0438  2C3F               	goto	L3
  3196  0439                     l2529:	
  3197                           ;main.c: 92: } else if (buf[2] == 'n') {
  3198                           
  3199  0439  306E               	movlw	110
  3200  043A  0021               	movlb	1	; select bank1
  3201  043B  0629               	xorwf	(main@buf^(0+128)+2),w
  3202  043C  1D03               	btfss	3,2
  3203  043D  2C42               	goto	l2533
  3204                           
  3205                           ;main.c: 93: can_ope_mode(0b00000000);
  3206  043E  3000               	movlw	0
  3207  043F                     L3:	
  3208  043F  318D  25FE  3183   	fcall	_can_ope_mode
  3209  0442                     l2533:	
  3210                           
  3211                           ;main.c: 94: }
  3212                           ;main.c: 95: if (buf[3] == '\0') {
  3213  0442  0021               	movlb	1	; select bank1
  3214  0443  082A               	movf	(main@buf^(0+128)+3),w
  3215  0444  1D03               	btfss	3,2
  3216  0445  2C49               	goto	l2537
  3217                           
  3218                           ;main.c: 96: output_format.with_sid = 0;
  3219  0446  0020               	movlb	0	; select bank0
  3220  0447  01ED               	clrf	_output_format
  3221  0448  2C54               	goto	l2543
  3222  0449                     l2537:	
  3223                           ;main.c: 98: } else if (buf[3] == 's' && buf[4] == '\0') {
  3224                           
  3225                           ;main.c: 97: output_format.hex_output = 0;
  3226                           
  3227  0449  3073               	movlw	115
  3228  044A  0021               	movlb	1	; select bank1
  3229  044B  062A               	xorwf	(main@buf^(0+128)+3),w
  3230  044C  1D03               	btfss	3,2
  3231  044D  2C56               	goto	l2545
  3232  044E  082B               	movf	(main@buf^(0+128)+4),w
  3233  044F  1D03               	btfss	3,2
  3234  0450  2C56               	goto	l2545
  3235                           
  3236                           ;main.c: 99: output_format.with_sid = 1;
  3237  0451  0020               	movlb	0	; select bank0
  3238  0452  01ED               	clrf	_output_format
  3239  0453  0AED               	incf	_output_format,f
  3240  0454                     l2543:	
  3241                           
  3242                           ;main.c: 100: output_format.hex_output = 0;
  3243  0454  01EE               	clrf	_output_format+1
  3244                           
  3245                           ;main.c: 101: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3246  0455  2D10               	goto	L1
  3247  0456                     l2545:	
  3248  0456  3068               	movlw	104
  3249  0457  0021               	movlb	1	; select bank1
  3250  0458  062A               	xorwf	(main@buf^(0+128)+3),w
  3251  0459  1D03               	btfss	3,2
  3252  045A  2D10               	goto	L1
  3253  045B  082B               	movf	(main@buf^(0+128)+4),w
  3254  045C  1D03               	btfss	3,2
  3255  045D  2D10               	goto	L1
  3256                           
  3257                           ;main.c: 102: output_format.with_sid = 0;
  3258  045E  0020               	movlb	0	; select bank0
  3259  045F  01ED               	clrf	_output_format
  3260                           
  3261                           ;main.c: 103: output_format.hex_output = 1;
  3262  0460  01EE               	clrf	_output_format+1
  3263  0461  0AEE               	incf	_output_format+1,f
  3264                           
  3265                           ;main.c: 104: }
  3266                           ;main.c: 105: break;
  3267  0462  2D10               	goto	L1
  3268  0463                     l2553:	
  3269                           ;main.c: 106: case 'b':
  3270                           
  3271                           
  3272                           ;main.c: 107: bpr = atoi(&buf[2]);
  3273  0463  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3274  0464  318F  2799  3183   	fcall	_atoi
  3275  0467  0876               	movf	?_atoi,w
  3276  0468  0020               	movlb	0	; select bank0
  3277  0469  00E7               	movwf	??_main
  3278  046A  0867               	movf	??_main,w
  3279  046B  0021               	movlb	1	; select bank1
  3280  046C  00A1               	movwf	main@bpr^(0+128)
  3281                           
  3282                           ;main.c: 108: can_baudrate(bpr);
  3283  046D  0821               	movf	main@bpr^(0+128),w
  3284  046E  318D  2573  3183   	fcall	_can_baudrate
  3285                           
  3286                           ;main.c: 109: break;
  3287  0471  2D10               	goto	L1
  3288  0472                     l2557:	
  3289                           ;main.c: 110: case 'm':
  3290                           
  3291                           
  3292                           ;main.c: 111: case 'f':
  3293                           ;main.c: 112: n = buf[2] - 0x30;
  3294  0472  0021               	movlb	1	; select bank1
  3295  0473  0829               	movf	(main@buf^(0+128)+2),w
  3296  0474  3ED0               	addlw	208
  3297  0475  0020               	movlb	0	; select bank0
  3298  0476  00E7               	movwf	??_main
  3299  0477  0867               	movf	??_main,w
  3300  0478  0021               	movlb	1	; select bank1
  3301  0479  00A6               	movwf	main@n^(0+128)
  3302                           
  3303                           ;main.c: 113: mask = atoi(&buf[3]);
  3304  047A  30AA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3305  047B  318F  2799  3183   	fcall	_atoi
  3306  047E  0877               	movf	?_atoi+1,w
  3307  047F  0021               	movlb	1	; select bank1
  3308  0480  00A4               	movwf	(main@mask+1)^(0+128)
  3309  0481  0876               	movf	?_atoi,w
  3310  0482  00A3               	movwf	main@mask^(0+128)
  3311                           
  3312                           ;main.c: 114: if (cmd == 'm') {
  3313  0483  306D               	movlw	109
  3314  0484  0631               	xorwf	main@cmd^(0+128),w
  3315  0485  1D03               	btfss	3,2
  3316  0486  2C97               	goto	l2565
  3317                           
  3318                           ;main.c: 115: can_set_mask(0, n, mask);
  3319  0487  0826               	movf	main@n^(0+128),w
  3320  0488  0020               	movlb	0	; select bank0
  3321  0489  00E7               	movwf	??_main
  3322  048A  0867               	movf	??_main,w
  3323  048B  00C7               	movwf	can_set_mask@n
  3324  048C  0021               	movlb	1	; select bank1
  3325  048D  0823               	movf	main@mask^(0+128),w
  3326  048E  0020               	movlb	0	; select bank0
  3327  048F  00E8               	movwf	??_main+1
  3328  0490  0868               	movf	??_main+1,w
  3329  0491  00C8               	movwf	can_set_mask@mask
  3330  0492  3000               	movlw	0
  3331  0493  3180  2011  3183   	fcall	_can_set_mask
  3332                           
  3333                           ;main.c: 116: } else if (cmd == 'f') {
  3334  0496  2D10               	goto	L1
  3335  0497                     l2565:	
  3336  0497  3066               	movlw	102
  3337  0498  0021               	movlb	1	; select bank1
  3338  0499  0631               	xorwf	main@cmd^(0+128),w
  3339  049A  1D03               	btfss	3,2
  3340  049B  2D10               	goto	L1
  3341                           
  3342                           ;main.c: 117: can_set_mask(1, n, mask);
  3343  049C  0826               	movf	main@n^(0+128),w
  3344  049D  0020               	movlb	0	; select bank0
  3345  049E  00E7               	movwf	??_main
  3346  049F  0867               	movf	??_main,w
  3347  04A0  00C7               	movwf	can_set_mask@n
  3348  04A1  0021               	movlb	1	; select bank1
  3349  04A2  0823               	movf	main@mask^(0+128),w
  3350  04A3  0020               	movlb	0	; select bank0
  3351  04A4  00E8               	movwf	??_main+1
  3352  04A5  0868               	movf	??_main+1,w
  3353  04A6  00C8               	movwf	can_set_mask@mask
  3354  04A7  3001               	movlw	1
  3355  04A8  3180  2011  3183   	fcall	_can_set_mask
  3356                           
  3357                           ;main.c: 118: }
  3358                           ;main.c: 119: break;
  3359  04AB  2D10               	goto	L1
  3360  04AC                     l2569:	
  3361                           ;main.c: 120: case 'd':
  3362                           
  3363                           
  3364                           ;main.c: 121: can_dump_registers();
  3365  04AC  3182  2277  3183   	fcall	_can_dump_registers
  3366                           
  3367                           ;main.c: 122: break;
  3368  04AF  2D10               	goto	L1
  3369  04B0                     l2571:	
  3370                           ;main.c: 123: case 'h':
  3371                           
  3372                           
  3373                           ;main.c: 124: printf("--- UART2CAN HELP ---\n");
  3374  04B0  30E4               	movlw	low (STR_7| (0+32768))
  3375  04B1  0020               	movlb	0	; select bank0
  3376  04B2  00A5               	movwf	printf@f
  3377  04B3  3091               	movlw	high (STR_7| (0+32768))
  3378  04B4  00A6               	movwf	printf@f+1
  3379  04B5  3185  25B0  3183   	fcall	_printf
  3380                           
  3381                           ;main.c: 125: printf("[Set standard identifier] @i<standard identifier>\n");
  3382  04B8  30AB               	movlw	low (STR_8| (0+32768))
  3383  04B9  0020               	movlb	0	; select bank0
  3384  04BA  00A5               	movwf	printf@f
  3385  04BB  3090               	movlw	high (STR_8| (0+32768))
  3386  04BC  00A6               	movwf	printf@f+1
  3387  04BD  3185  25B0  3183   	fcall	_printf
  3388                           
  3389                           ;main.c: 126: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3390  04C0  3000               	movlw	low (STR_9| (0+32768))
  3391  04C1  0020               	movlb	0	; select bank0
  3392  04C2  00A5               	movwf	printf@f
  3393  04C3  3090               	movlw	high (STR_9| (0+32768))
  3394  04C4  00A6               	movwf	printf@f+1
  3395  04C5  3185  25B0  3183   	fcall	_printf
  3396                           
  3397                           ;main.c: 127: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3398  04C8  3075               	movlw	low (STR_10| (0+32768))
  3399  04C9  0020               	movlb	0	; select bank0
  3400  04CA  00A5               	movwf	printf@f
  3401  04CB  3090               	movlw	high (STR_10| (0+32768))
  3402  04CC  00A6               	movwf	printf@f+1
  3403  04CD  3185  25B0  3183   	fcall	_printf
  3404                           
  3405                           ;main.c: 128: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3406  04D0  303B               	movlw	low (STR_11| (0+32768))
  3407  04D1  0020               	movlb	0	; select bank0
  3408  04D2  00A5               	movwf	printf@f
  3409  04D3  3090               	movlw	high (STR_11| (0+32768))
  3410  04D4  00A6               	movwf	printf@f+1
  3411  04D5  3185  25B0  3183   	fcall	_printf
  3412                           
  3413                           ;main.c: 129: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3414  04D8  3034               	movlw	low (STR_12| (0+32768))
  3415  04D9  0020               	movlb	0	; select bank0
  3416  04DA  00A5               	movwf	printf@f
  3417  04DB  3091               	movlw	high (STR_12| (0+32768))
  3418  04DC  00A6               	movwf	printf@f+1
  3419  04DD  3185  25B0  3183   	fcall	_printf
  3420                           
  3421                           ;main.c: 130: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3422  04E0  300A               	movlw	low (STR_13| (0+32768))
  3423  04E1  0020               	movlb	0	; select bank0
  3424  04E2  00A5               	movwf	printf@f
  3425  04E3  3091               	movlw	high (STR_13| (0+32768))
  3426  04E4  00A6               	movwf	printf@f+1
  3427  04E5  3185  25B0  3183   	fcall	_printf
  3428                           
  3429                           ;main.c: 131: printf("[Set baud rate] @b<bpr>\n");
  3430  04E8  30B4               	movlw	low (STR_14| (0+32768))
  3431  04E9  0020               	movlb	0	; select bank0
  3432  04EA  00A5               	movwf	printf@f
  3433  04EB  3091               	movlw	high (STR_14| (0+32768))
  3434  04EC  00A6               	movwf	printf@f+1
  3435  04ED  3185  25B0  3183   	fcall	_printf
  3436                           
  3437                           ;main.c: 132: printf("[Dump registers] @d\n");
  3438  04F0  3026               	movlw	low (STR_15| (0+32768))
  3439  04F1  0020               	movlb	0	; select bank0
  3440  04F2  00A5               	movwf	printf@f
  3441  04F3  3092               	movlw	high (STR_15| (0+32768))
  3442  04F4  00A6               	movwf	printf@f+1
  3443  04F5  3185  25B0  3183   	fcall	_printf
  3444                           
  3445                           ;main.c: 133: printf("[Send message] <message>\n");
  3446  04F8  309A               	movlw	low (STR_16| (0+32768))
  3447  04F9  0020               	movlb	0	; select bank0
  3448  04FA  00A5               	movwf	printf@f
  3449  04FB  3091               	movlw	high (STR_16| (0+32768))
  3450  04FC  00A6               	movwf	printf@f+1
  3451  04FD  3185  25B0  3183   	fcall	_printf
  3452                           
  3453                           ;main.c: 134: printf("[Receive message] <message> will be output\n");
  3454  0500  30DE               	movlw	low (STR_17| (0+32768))
  3455  0501  0020               	movlb	0	; select bank0
  3456  0502  00A5               	movwf	printf@f
  3457  0503  3090               	movlw	high (STR_17| (0+32768))
  3458  0504  00A6               	movwf	printf@f+1
  3459  0505  3185  25B0  3183   	fcall	_printf
  3460                           
  3461                           ;main.c: 135: printf("[Show this help]: @h\n");
  3462  0508  30FB               	movlw	low (STR_18| (0+32768))
  3463  0509  0020               	movlb	0	; select bank0
  3464  050A  00A5               	movwf	printf@f
  3465  050B  3091               	movlw	high (STR_18| (0+32768))
  3466  050C  00A6               	movwf	printf@f+1
  3467  050D  3185  25B0  3183   	fcall	_printf
  3468  0510                     L1:	
  3469                           ;main.c: 137: }
  3470                           
  3471                           ;main.c: 136: break;
  3472                           
  3473                           
  3474                           ;main.c: 57: idx = 0;
  3475  0510  0021               	movlb	1	; select bank1
  3476  0511  01B2               	clrf	main@idx^(0+128)
  3477  0512                     l2483:	
  3478                           ;main.c: 59: while (1)
  3479                           
  3480                           
  3481                           ;main.c: 60: {
  3482                           ;main.c: 61: can_status_check();
  3483  0512  318E  2649  3183   	fcall	_can_status_check
  3484                           
  3485                           ;main.c: 63: if ((PIR1bits.RCIF)) {
  3486  0515  0020               	movlb	0	; select bank0
  3487  0516  1E91               	btfss	17,5	;volatile
  3488  0517  2D12               	goto	l2483
  3489                           
  3490                           ;main.c: 64: c = EUSART_Read();
  3491  0518  318C  2499  3183   	fcall	_EUSART_Read
  3492  051B  0020               	movlb	0	; select bank0
  3493  051C  00E7               	movwf	??_main
  3494  051D  0867               	movf	??_main,w
  3495  051E  0021               	movlb	1	; select bank1
  3496  051F  00B0               	movwf	main@c^(0+128)
  3497                           
  3498                           ;main.c: 65: if (echo_back) printf("%c", c);
  3499  0520  0825               	movf	main@echo_back^(0+128),w
  3500  0521  1903               	btfsc	3,2
  3501  0522  2D34               	goto	l2493
  3502  0523  30B3               	movlw	low (STR_6| (0+32768))
  3503  0524  0020               	movlb	0	; select bank0
  3504  0525  00A5               	movwf	printf@f
  3505  0526  3093               	movlw	high (STR_6| (0+32768))
  3506  0527  00A6               	movwf	printf@f+1
  3507  0528  0021               	movlb	1	; select bank1
  3508  0529  0830               	movf	main@c^(0+128),w
  3509  052A  0020               	movlb	0	; select bank0
  3510  052B  00E7               	movwf	??_main
  3511  052C  01E8               	clrf	??_main+1
  3512  052D  0867               	movf	??_main,w
  3513  052E  00A7               	movwf	?_printf+2
  3514  052F  0868               	movf	??_main+1,w
  3515  0530  00A8               	movwf	?_printf+3
  3516  0531  3185  25B0  3183   	fcall	_printf
  3517  0534                     l2493:	
  3518                           
  3519                           ;main.c: 67: buf[idx] = c;
  3520  0534  0021               	movlb	1	; select bank1
  3521  0535  0830               	movf	main@c^(0+128),w
  3522  0536  0020               	movlb	0	; select bank0
  3523  0537  00E7               	movwf	??_main
  3524  0538  0021               	movlb	1	; select bank1
  3525  0539  0832               	movf	main@idx^(0+128),w
  3526  053A  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3527  053B  0086               	movwf	6
  3528  053C  0187               	clrf	7
  3529  053D  0020               	movlb	0	; select bank0
  3530  053E  0867               	movf	??_main,w
  3531  053F  0081               	movwf	1
  3532                           
  3533                           ;main.c: 68: if (c == '\n') {
  3534  0540  300A               	movlw	10
  3535  0541  0021               	movlb	1	; select bank1
  3536  0542  0630               	xorwf	main@c^(0+128),w
  3537  0543  1D03               	btfss	3,2
  3538  0544  2D8D               	goto	l2585
  3539                           
  3540                           ;main.c: 69: buf[idx] = '\0';
  3541  0545  0832               	movf	main@idx^(0+128),w
  3542  0546  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3543  0547  0086               	movwf	6
  3544  0548  0187               	clrf	7
  3545  0549  0181               	clrf	1
  3546                           
  3547                           ;main.c: 70: if (buf[0] == '@') {
  3548  054A  3040               	movlw	64
  3549  054B  0627               	xorwf	main@buf^(0+128),w
  3550  054C  1D03               	btfss	3,2
  3551  054D  2D70               	goto	l2577
  3552                           
  3553                           ;main.c: 71: cmd = buf[1];
  3554  054E  0828               	movf	(main@buf^(0+128)+1),w
  3555  054F  0020               	movlb	0	; select bank0
  3556  0550  00E7               	movwf	??_main
  3557  0551  0867               	movf	??_main,w
  3558  0552  0021               	movlb	1	; select bank1
  3559  0553  00B1               	movwf	main@cmd^(0+128)
  3560  0554  0021               	movlb	1	; select bank1
  3561  0555  0831               	movf	main@cmd^(0+128),w
  3562                           
  3563                           ; Switch size 1, requested type "space"
  3564                           ; Number of cases is 8, Range of values is 98 to 118
  3565                           ; switch strategies available:
  3566                           ; Name         Instructions Cycles
  3567                           ; simple_byte           25    13 (average)
  3568                           ; direct_byte           51     9 (fixed)
  3569                           ; jumptable            263     9 (fixed)
  3570                           ;	Chosen strategy is simple_byte
  3571  0556  3A62               	xorlw	98	; case 98
  3572  0557  1903               	skipnz
  3573  0558  2C63               	goto	l2553
  3574  0559  3A06               	xorlw	6	; case 100
  3575  055A  1903               	skipnz
  3576  055B  2CAC               	goto	l2569
  3577  055C  3A02               	xorlw	2	; case 102
  3578  055D  1903               	skipnz
  3579  055E  2C72               	goto	l2557
  3580  055F  3A0E               	xorlw	14	; case 104
  3581  0560  1903               	skipnz
  3582  0561  2CB0               	goto	l2571
  3583  0562  3A01               	xorlw	1	; case 105
  3584  0563  1903               	skipnz
  3585  0564  2BFA               	goto	l2503
  3586  0565  3A04               	xorlw	4	; case 109
  3587  0566  1903               	skipnz
  3588  0567  2C72               	goto	l2557
  3589  0568  3A02               	xorlw	2	; case 111
  3590  0569  1903               	skipnz
  3591  056A  2C33               	goto	l2525
  3592  056B  3A19               	xorlw	25	; case 118
  3593  056C  1903               	skipnz
  3594  056D  2C10               	goto	l2507
  3595  056E  2D8C               	goto	l2583
  3596                           
  3597                           ;main.c: 138: } else {
  3598  056F  2D10               	goto	L1
  3599  0570                     l2577:	
  3600                           
  3601                           ;main.c: 139: bool success = can_send(buf, idx);
  3602  0570  0832               	movf	main@idx^(0+128),w
  3603  0571  0020               	movlb	0	; select bank0
  3604  0572  00E7               	movwf	??_main
  3605  0573  0867               	movf	??_main,w
  3606  0574  00C0               	movwf	can_send@dlc
  3607  0575  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3608  0576  3181  213E  3183   	fcall	_can_send
  3609  0579  0020               	movlb	0	; select bank0
  3610  057A  00E8               	movwf	??_main+1
  3611  057B  0868               	movf	??_main+1,w
  3612  057C  0021               	movlb	1	; select bank1
  3613  057D  00A2               	movwf	main@success^(0+128)
  3614                           
  3615                           ;main.c: 140: if(success) {
  3616  057E  0822               	movf	main@success^(0+128),w
  3617  057F  1903               	btfsc	3,2
  3618  0580  2D10               	goto	L1
  3619                           
  3620                           ;main.c: 141: LATCbits.LATC3 = !LATCbits.LATC3;
  3621  0581  1003               	clrc
  3622  0582  0022               	movlb	2	; select bank2
  3623  0583  1D8E               	btfss	14,3	;volatile
  3624  0584  1403               	setc
  3625  0585  1C03               	btfss	3,0
  3626  0586  2D8A               	goto	u2480
  3627  0587  0022               	movlb	2	; select bank2
  3628  0588  158E               	bsf	14,3	;volatile
  3629  0589  2D10               	goto	L1
  3630  058A                     u2480:	
  3631  058A  0022               	movlb	2	; select bank2
  3632  058B  118E               	bcf	14,3	;volatile
  3633  058C                     l2583:	
  3634  058C  2D10               	goto	L1
  3635  058D                     l2585:	
  3636                           ;main.c: 145: } else if (++idx > max_idx) {
  3637                           
  3638                           ;main.c: 142: }
  3639                           ;main.c: 143: }
  3640                           ;main.c: 144: idx = 0;
  3641                           
  3642  058D  3001               	movlw	1
  3643  058E  0020               	movlb	0	; select bank0
  3644  058F  00E7               	movwf	??_main
  3645  0590  0867               	movf	??_main,w
  3646  0591  0021               	movlb	1	; select bank1
  3647  0592  07B2               	addwf	main@idx^(0+128),f
  3648  0593  30BA               	movlw	low (_max_idx| (0+32768))
  3649  0594  0084               	movwf	4
  3650  0595  3093               	movlw	high (_max_idx| (0+32768))
  3651  0596  0085               	movwf	5
  3652  0597  0800               	movf	0,w	;code access
  3653  0598  0020               	movlb	0	; select bank0
  3654  0599  00E8               	movwf	??_main+1
  3655  059A  0021               	movlb	1	; select bank1
  3656  059B  0832               	movf	main@idx^(0+128),w
  3657  059C  0020               	movlb	0	; select bank0
  3658  059D  0268               	subwf	??_main+1,w
  3659  059E  1803               	skipnc
  3660  059F  2D12               	goto	l2483
  3661                           
  3662                           ;main.c: 146: buf[idx] = '\0';
  3663  05A0  0021               	movlb	1	; select bank1
  3664  05A1  0832               	movf	main@idx^(0+128),w
  3665  05A2  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3666  05A3  0086               	movwf	6
  3667  05A4  0187               	clrf	7
  3668  05A5  0181               	clrf	1
  3669                           
  3670                           ;main.c: 147: can_send(buf, idx);
  3671  05A6  0832               	movf	main@idx^(0+128),w
  3672  05A7  0020               	movlb	0	; select bank0
  3673  05A8  00E7               	movwf	??_main
  3674  05A9  0867               	movf	??_main,w
  3675  05AA  00C0               	movwf	can_send@dlc
  3676  05AB  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3677  05AC  3181  213E  3183   	fcall	_can_send
  3678  05AF  2D10               	goto	L1
  3679  05B0                     __end_of_main:	
  3680                           ;main.c: 148: idx = 0;
  3681                           
  3682                           
  3683                           	psect	text1
  3684  0E49                     __ptext1:	
  3685 ;; *************** function _can_status_check *****************
  3686 ;; Defined at:
  3687 ;;		line 247 in file "mcp2515.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  can_status_b    2   68[BANK0 ] unsigned char [2]
  3692 ;;  status          1   70[BANK0 ] unsigned char 
  3693 ;;  bytes_writte    1   67[BANK0 ] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  1    wreg      void 
  3696 ;; Registers used:
  3697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3707 ;;Total ram usage:        6 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    5
  3710 ;; This function calls:
  3711 ;;		_SPI_exchange
  3712 ;;		_printf
  3713 ;;		_receive
  3714 ;;		_txf_clear
  3715 ;; This function is called by:
  3716 ;;		_main
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _can_status_check
  3722  0E49                     _can_status_check:	
  3723                           
  3724                           ;mcp2515.c: 249: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3728  0E49  0021               	movlb	1	; select bank1
  3729  0E4A  0839               	movf	(can_status_check@F2846+1)^(0+128),w
  3730  0E4B  0020               	movlb	0	; select bank0
  3731  0E4C  00E5               	movwf	can_status_check@can_status_buf+1
  3732  0E4D  0021               	movlb	1	; select bank1
  3733  0E4E  0838               	movf	can_status_check@F2846^(0+128),w
  3734  0E4F  0020               	movlb	0	; select bank0
  3735  0E50  00E4               	movwf	can_status_check@can_status_buf
  3736                           
  3737                           ;mcp2515.c: 250: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  3738  0E51  3002               	movlw	2
  3739  0E52  00E1               	movwf	??_can_status_check
  3740  0E53  0861               	movf	??_can_status_check,w
  3741  0E54  00F8               	movwf	SPI_exchange@len
  3742  0E55  3064               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3743  0E56  318C  24CB  318E   	fcall	_SPI_exchange
  3744  0E59  0020               	movlb	0	; select bank0
  3745  0E5A  00E2               	movwf	??_can_status_check+1
  3746  0E5B  0862               	movf	??_can_status_check+1,w
  3747  0E5C  00E3               	movwf	can_status_check@bytes_written
  3748                           
  3749                           ;mcp2515.c: 251: uint8_t status = can_status_buf[1];
  3750  0E5D  0865               	movf	can_status_check@can_status_buf+1,w
  3751  0E5E  00E1               	movwf	??_can_status_check
  3752  0E5F  0861               	movf	??_can_status_check,w
  3753  0E60  00E6               	movwf	can_status_check@status
  3754                           
  3755                           ;mcp2515.c: 252: if (status == 0x00) {
  3756  0E61  0866               	movf	can_status_check@status,w
  3757  0E62  1903               	btfsc	3,2
  3758  0E63  0008               	return
  3759                           
  3760                           ;mcp2515.c: 254: } else if ((status & 0b00000010) > 0) {
  3761                           
  3762                           ;mcp2515.c: 253: return;
  3763  0E64  1CE6               	btfss	can_status_check@status,1
  3764  0E65  2E74               	goto	l334
  3765                           
  3766                           ;mcp2515.c: 255: if (mode.debug) printf("RX1IF is on\n");
  3767  0E66  0869               	movf	_mode,w
  3768  0E67  1903               	btfsc	3,2
  3769  0E68  2E70               	goto	l335
  3770  0E69  304A               	movlw	low (STR_33| (0+32768))
  3771  0E6A  00A5               	movwf	printf@f
  3772  0E6B  3093               	movlw	high (STR_33| (0+32768))
  3773  0E6C  00A6               	movwf	printf@f+1
  3774  0E6D  3185  25B0  318E   	fcall	_printf
  3775  0E70                     l335:	
  3776                           
  3777                           ;mcp2515.c: 256: receive(1);
  3778  0E70  3001               	movlw	1
  3779  0E71  3180  2089         	fcall	_receive
  3780                           
  3781                           ;mcp2515.c: 257: } else if ((status & 0b00000001) > 0) {
  3782  0E73  0008               	return
  3783  0E74                     l334:	
  3784  0E74  1C66               	btfss	can_status_check@status,0
  3785  0E75  2E84               	goto	l337
  3786                           
  3787                           ;mcp2515.c: 258: if (mode.debug) printf("RX0IF is on\n");
  3788  0E76  0869               	movf	_mode,w
  3789  0E77  1903               	btfsc	3,2
  3790  0E78  2E80               	goto	l338
  3791  0E79  303D               	movlw	low (STR_34| (0+32768))
  3792  0E7A  00A5               	movwf	printf@f
  3793  0E7B  3093               	movlw	high (STR_34| (0+32768))
  3794  0E7C  00A6               	movwf	printf@f+1
  3795  0E7D  3185  25B0  318E   	fcall	_printf
  3796  0E80                     l338:	
  3797                           
  3798                           ;mcp2515.c: 259: receive(0);
  3799  0E80  3000               	movlw	0
  3800  0E81  3180  2089         	fcall	_receive
  3801                           
  3802                           ;mcp2515.c: 260: } else if ((status & 0b00001000) > 0) {
  3803  0E83  0008               	return
  3804  0E84                     l337:	
  3805  0E84  1DE6               	btfss	can_status_check@status,3
  3806  0E85  2E8A               	goto	l340
  3807                           
  3808                           ;mcp2515.c: 261: txf_clear(0);
  3809  0E86  3000               	movlw	0
  3810  0E87  318D  254B         	fcall	_txf_clear
  3811                           
  3812                           ;mcp2515.c: 262: } else if ((status & 0b00100000) > 0) {
  3813  0E89  0008               	return
  3814  0E8A                     l340:	
  3815  0E8A  1EE6               	btfss	can_status_check@status,5
  3816  0E8B  2E90               	goto	l342
  3817                           
  3818                           ;mcp2515.c: 263: txf_clear(1);
  3819  0E8C  3001               	movlw	1
  3820  0E8D  318D  254B         	fcall	_txf_clear
  3821                           
  3822                           ;mcp2515.c: 264: } else if ((status & 0b10000000) > 0) {
  3823  0E8F  0008               	return
  3824  0E90                     l342:	
  3825  0E90  1FE6               	btfss	can_status_check@status,7
  3826  0E91  0008               	return
  3827                           
  3828                           ;mcp2515.c: 265: txf_clear(2);
  3829  0E92  3002               	movlw	2
  3830  0E93  318D  254B         	fcall	_txf_clear
  3831  0E95  0008               	return
  3832  0E96                     __end_of_can_status_check:	
  3833                           ;mcp2515.c: 266: }
  3834                           ;mcp2515.c: 267: return;
  3835                           
  3836                           
  3837                           	psect	text2
  3838  0D4B                     __ptext2:	
  3839 ;; *************** function _txf_clear *****************
  3840 ;; Defined at:
  3841 ;;		line 124 in file "mcp2515.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  n               1    wreg     unsigned char 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  n               1    2[BANK0 ] unsigned char 
  3846 ;;  can_int_flag    4    5[BANK0 ] unsigned char [4]
  3847 ;;  bytes_writte    1    4[BANK0 ] unsigned char 
  3848 ;;  mask            1    3[BANK0 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      unsigned char 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3862 ;;Total ram usage:        9 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    3
  3865 ;; This function calls:
  3866 ;;		_SPI_exchange
  3867 ;; This function is called by:
  3868 ;;		_can_status_check
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _txf_clear
  3874  0D4B                     _txf_clear:	
  3875                           
  3876                           ;incstack = 0
  3877                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3878                           ;txf_clear@n stored from wreg
  3879  0D4B  0020               	movlb	0	; select bank0
  3880  0D4C  00A2               	movwf	txf_clear@n
  3881                           
  3882                           ;mcp2515.c: 125: uint8_t mask = 0b00000001 << (n + 2);
  3883  0D4D  3001               	movlw	1
  3884  0D4E  00A0               	movwf	??_txf_clear
  3885  0D4F  0822               	movf	txf_clear@n,w
  3886  0D50  3E02               	addlw	2
  3887  0D51  0A89               	incf	9,f
  3888  0D52  2D54               	goto	u1884
  3889  0D53                     u1885:	
  3890  0D53  35A0               	lslf	??_txf_clear,f
  3891  0D54                     u1884:	
  3892  0D54  0B89               	decfsz	9,f
  3893  0D55  2D53               	goto	u1885
  3894  0D56  0820               	movf	??_txf_clear,w
  3895  0D57  00A1               	movwf	??_txf_clear+1
  3896  0D58  0821               	movf	??_txf_clear+1,w
  3897  0D59  00A3               	movwf	txf_clear@mask
  3898                           
  3899                           ;mcp2515.c: 126: uint8_t can_int_flag[4];
  3900                           ;mcp2515.c: 127: can_int_flag[0] =0b00000101;
  3901  0D5A  3005               	movlw	5
  3902  0D5B  00A0               	movwf	??_txf_clear
  3903  0D5C  0820               	movf	??_txf_clear,w
  3904  0D5D  00A5               	movwf	txf_clear@can_int_flag
  3905                           
  3906                           ;mcp2515.c: 128: can_int_flag[1] = 0x2c;
  3907  0D5E  302C               	movlw	44
  3908  0D5F  00A0               	movwf	??_txf_clear
  3909  0D60  0820               	movf	??_txf_clear,w
  3910  0D61  00A6               	movwf	txf_clear@can_int_flag+1
  3911                           
  3912                           ;mcp2515.c: 129: can_int_flag[2] = mask;
  3913  0D62  0823               	movf	txf_clear@mask,w
  3914  0D63  00A0               	movwf	??_txf_clear
  3915  0D64  0820               	movf	??_txf_clear,w
  3916  0D65  00A7               	movwf	txf_clear@can_int_flag+2
  3917                           
  3918                           ;mcp2515.c: 130: can_int_flag[3] = 0x00;
  3919  0D66  01A8               	clrf	txf_clear@can_int_flag+3
  3920                           
  3921                           ;mcp2515.c: 131: uint8_t bytes_written = SPI_exchange(can_int_flag, 4);
  3922  0D67  3004               	movlw	4
  3923  0D68  00A0               	movwf	??_txf_clear
  3924  0D69  0820               	movf	??_txf_clear,w
  3925  0D6A  00F8               	movwf	SPI_exchange@len
  3926  0D6B  3025               	movlw	(low (txf_clear@can_int_flag| 0))& (0+255)
  3927  0D6C  318C  24CB         	fcall	_SPI_exchange
  3928  0D6E  0020               	movlb	0	; select bank0
  3929  0D6F  00A1               	movwf	??_txf_clear+1
  3930  0D70  0821               	movf	??_txf_clear+1,w
  3931  0D71  00A4               	movwf	txf_clear@bytes_written
  3932                           
  3933                           ;mcp2515.c: 135: return 0;
  3934                           ;	Return value of _txf_clear is never used
  3935                           
  3936                           ;mcp2515.c: 134: } else {
  3937                           
  3938                           ;mcp2515.c: 133: return 1;
  3939                           ;	Return value of _txf_clear is never used
  3940  0D72  0008               	return
  3941  0D73                     __end_of_txf_clear:	
  3942                           
  3943                           	psect	text3
  3944  0089                     __ptext3:	
  3945 ;; *************** function _receive *****************
  3946 ;; Defined at:
  3947 ;;		line 142 in file "mcp2515.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  n               1    wreg     unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  n               1   64[BANK0 ] unsigned char 
  3952 ;;  rx_buf         15   45[BANK0 ] unsigned char [15]
  3953 ;;  sid             2   61[BANK0 ] unsigned int 
  3954 ;;  dlc             1   63[BANK0 ] unsigned char 
  3955 ;;  pbuf            1   60[BANK0 ] PTR unsigned char 
  3956 ;;		 -> receive@rx_buf(15), 
  3957 ;;  bytes_read      1   44[BANK0 ] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;Total ram usage:       26 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    4
  3974 ;; This function calls:
  3975 ;;		Absolute function
  3976 ;;		_SPI_exchange
  3977 ;;		_printf
  3978 ;;		_receive_handler
  3979 ;; This function is called by:
  3980 ;;		_can_status_check
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function _receive
  3986  0089                     _receive:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3990                           ;receive@n stored from wreg
  3991  0089  0020               	movlb	0	; select bank0
  3992  008A  00E0               	movwf	receive@n
  3993                           
  3994                           ;mcp2515.c: 146: uint8_t rx_buf[15];
  3995                           ;mcp2515.c: 149: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  3996  008B  0860               	movf	receive@n,w
  3997  008C  3EB6               	addlw	low (_nm| (0+32768))
  3998  008D  0084               	movwf	4
  3999  008E  3093               	movlw	high (_nm| (0+32768))
  4000  008F  1803               	skipnc
  4001  0090  3E01               	addlw	1
  4002  0091  0085               	movwf	5
  4003  0092  0800               	movf	0,w	;code access
  4004  0093  0709               	addwf	9,w
  4005  0094  3E90               	addlw	144
  4006  0095  00C7               	movwf	??_receive
  4007  0096  0847               	movf	??_receive,w
  4008  0097  00CD               	movwf	receive@rx_buf
  4009                           
  4010                           ;mcp2515.c: 150: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4011  0098  300E               	movlw	14
  4012  0099  00C7               	movwf	??_receive
  4013  009A  0847               	movf	??_receive,w
  4014  009B  00F8               	movwf	SPI_exchange@len
  4015  009C  304D               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4016  009D  318C  24CB  3180   	fcall	_SPI_exchange
  4017  00A0  0020               	movlb	0	; select bank0
  4018  00A1  00C8               	movwf	??_receive+1
  4019  00A2  0848               	movf	??_receive+1,w
  4020  00A3  00CC               	movwf	receive@bytes_read
  4021                           
  4022                           ;mcp2515.c: 151: uint8_t dlc = rx_buf[5];
  4023  00A4  0852               	movf	receive@rx_buf+5,w
  4024  00A5  00C7               	movwf	??_receive
  4025  00A6  0847               	movf	??_receive,w
  4026  00A7  00DF               	movwf	receive@dlc
  4027                           
  4028                           ;mcp2515.c: 152: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4029  00A8  084F               	movf	receive@rx_buf+2,w
  4030  00A9  00C7               	movwf	??_receive
  4031  00AA  3005               	movlw	5
  4032  00AB                     u1895:	
  4033  00AB  36C7               	lsrf	??_receive,f
  4034  00AC  0B89               	decfsz	9,f
  4035  00AD  28AB               	goto	u1895
  4036  00AE  0847               	movf	??_receive,w
  4037  00AF  00C8               	movwf	??_receive+1
  4038  00B0  01C9               	clrf	??_receive+2
  4039  00B1  084E               	movf	receive@rx_buf+1,w
  4040  00B2  00CA               	movwf	??_receive+3
  4041  00B3  01CB               	clrf	??_receive+4
  4042  00B4  35CA               	lslf	??_receive+3,f
  4043  00B5  0DCB               	rlf	??_receive+4,f
  4044  00B6  35CA               	lslf	??_receive+3,f
  4045  00B7  0DCB               	rlf	??_receive+4,f
  4046  00B8  35CA               	lslf	??_receive+3,f
  4047  00B9  0DCB               	rlf	??_receive+4,f
  4048  00BA  0848               	movf	??_receive+1,w
  4049  00BB  074A               	addwf	??_receive+3,w
  4050  00BC  00DD               	movwf	receive@sid
  4051  00BD  0849               	movf	??_receive+2,w
  4052  00BE  3D4B               	addwfc	??_receive+4,w
  4053  00BF  00DE               	movwf	receive@sid+1
  4054                           
  4055                           ;mcp2515.c: 153: sid = sid & 0b0000011111111111;
  4056  00C0  30FF               	movlw	255
  4057  00C1  055D               	andwf	receive@sid,w
  4058  00C2  00DD               	movwf	receive@sid
  4059  00C3  3007               	movlw	7
  4060  00C4  055E               	andwf	receive@sid+1,w
  4061  00C5  00DE               	movwf	receive@sid+1
  4062                           
  4063                           ;mcp2515.c: 154: rx_buf[6+dlc] = '\0';
  4064  00C6  085F               	movf	receive@dlc,w
  4065  00C7  3E06               	addlw	6
  4066  00C8  3E4D               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4067  00C9  0086               	movwf	6
  4068  00CA  0187               	clrf	7
  4069  00CB  0181               	clrf	1
  4070                           
  4071                           ;mcp2515.c: 156: if (mode.debug) {
  4072  00CC  0869               	movf	_mode,w
  4073  00CD  1903               	btfsc	3,2
  4074  00CE  2926               	goto	l2165
  4075                           
  4076                           ;mcp2515.c: 157: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4077  00CF  3072               	movlw	low (STR_22| (0+32768))
  4078  00D0  00A5               	movwf	printf@f
  4079  00D1  3092               	movlw	high (STR_22| (0+32768))
  4080  00D2  00A6               	movwf	printf@f+1
  4081  00D3  0860               	movf	receive@n,w
  4082  00D4  00C7               	movwf	??_receive
  4083  00D5  01C8               	clrf	??_receive+1
  4084  00D6  0847               	movf	??_receive,w
  4085  00D7  00A7               	movwf	?_printf+2
  4086  00D8  0848               	movf	??_receive+1,w
  4087  00D9  00A8               	movwf	?_printf+3
  4088  00DA  084E               	movf	receive@rx_buf+1,w
  4089  00DB  00C9               	movwf	??_receive+2
  4090  00DC  01CA               	clrf	??_receive+3
  4091  00DD  0849               	movf	??_receive+2,w
  4092  00DE  00A9               	movwf	?_printf+4
  4093  00DF  084A               	movf	??_receive+3,w
  4094  00E0  00AA               	movwf	?_printf+5
  4095  00E1  3185  25B0  3180   	fcall	_printf
  4096                           
  4097                           ;mcp2515.c: 158: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4098  00E4  3094               	movlw	low (STR_23| (0+32768))
  4099  00E5  0020               	movlb	0	; select bank0
  4100  00E6  00A5               	movwf	printf@f
  4101  00E7  3092               	movlw	high (STR_23| (0+32768))
  4102  00E8  00A6               	movwf	printf@f+1
  4103  00E9  0860               	movf	receive@n,w
  4104  00EA  00C7               	movwf	??_receive
  4105  00EB  01C8               	clrf	??_receive+1
  4106  00EC  0847               	movf	??_receive,w
  4107  00ED  00A7               	movwf	?_printf+2
  4108  00EE  0848               	movf	??_receive+1,w
  4109  00EF  00A8               	movwf	?_printf+3
  4110  00F0  084F               	movf	receive@rx_buf+2,w
  4111  00F1  00C9               	movwf	??_receive+2
  4112  00F2  01CA               	clrf	??_receive+3
  4113  00F3  0849               	movf	??_receive+2,w
  4114  00F4  00A9               	movwf	?_printf+4
  4115  00F5  084A               	movf	??_receive+3,w
  4116  00F6  00AA               	movwf	?_printf+5
  4117  00F7  3185  25B0  3180   	fcall	_printf
  4118                           
  4119                           ;mcp2515.c: 159: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4120  00FA  30B6               	movlw	low (STR_24| (0+32768))
  4121  00FB  0020               	movlb	0	; select bank0
  4122  00FC  00A5               	movwf	printf@f
  4123  00FD  3092               	movlw	high (STR_24| (0+32768))
  4124  00FE  00A6               	movwf	printf@f+1
  4125  00FF  0860               	movf	receive@n,w
  4126  0100  00C7               	movwf	??_receive
  4127  0101  01C8               	clrf	??_receive+1
  4128  0102  0847               	movf	??_receive,w
  4129  0103  00A7               	movwf	?_printf+2
  4130  0104  0848               	movf	??_receive+1,w
  4131  0105  00A8               	movwf	?_printf+3
  4132  0106  0852               	movf	receive@rx_buf+5,w
  4133  0107  00C9               	movwf	??_receive+2
  4134  0108  01CA               	clrf	??_receive+3
  4135  0109  0849               	movf	??_receive+2,w
  4136  010A  00A9               	movwf	?_printf+4
  4137  010B  084A               	movf	??_receive+3,w
  4138  010C  00AA               	movwf	?_printf+5
  4139  010D  3185  25B0  3180   	fcall	_printf
  4140                           
  4141                           ;mcp2515.c: 160: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4142  0110  30E6               	movlw	low (STR_25| (0+32768))
  4143  0111  0020               	movlb	0	; select bank0
  4144  0112  00A5               	movwf	printf@f
  4145  0113  3092               	movlw	high (STR_25| (0+32768))
  4146  0114  00A6               	movwf	printf@f+1
  4147  0115  0860               	movf	receive@n,w
  4148  0116  00C7               	movwf	??_receive
  4149  0117  01C8               	clrf	??_receive+1
  4150  0118  0847               	movf	??_receive,w
  4151  0119  00A7               	movwf	?_printf+2
  4152  011A  0848               	movf	??_receive+1,w
  4153  011B  00A8               	movwf	?_printf+3
  4154  011C  0853               	movf	receive@rx_buf+6,w
  4155  011D  00C9               	movwf	??_receive+2
  4156  011E  01CA               	clrf	??_receive+3
  4157  011F  0849               	movf	??_receive+2,w
  4158  0120  00A9               	movwf	?_printf+4
  4159  0121  084A               	movf	??_receive+3,w
  4160  0122  00AA               	movwf	?_printf+5
  4161  0123  3185  25B0  3180   	fcall	_printf
  4162  0126                     l2165:	
  4163                           
  4164                           ;mcp2515.c: 161: }
  4165                           ;mcp2515.c: 164: uint8_t *pbuf = &rx_buf[6];
  4166  0126  3053               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4167  0127  0020               	movlb	0	; select bank0
  4168  0128  00C7               	movwf	??_receive
  4169  0129  0847               	movf	??_receive,w
  4170  012A  00DC               	movwf	receive@pbuf
  4171                           
  4172                           ;mcp2515.c: 165: handler(sid, pbuf, dlc);
  4173  012B  085D               	movf	receive@sid,w
  4174  012C  00C7               	movwf	??_receive
  4175  012D  0847               	movf	??_receive,w
  4176  012E  00C0               	movwf	receive_handler@sid
  4177  012F  085C               	movf	receive@pbuf,w
  4178  0130  00C8               	movwf	??_receive+1
  4179  0131  0848               	movf	??_receive+1,w
  4180  0132  00C1               	movwf	receive_handler@pbuf
  4181  0133  085F               	movf	receive@dlc,w
  4182  0134  00C9               	movwf	??_receive+2
  4183  0135  0849               	movf	??_receive+2,w
  4184  0136  00C2               	movwf	receive_handler@dlc
  4185  0137  0021               	movlb	1	; select bank1
  4186  0138  083D               	movf	(_handler+1)^(0+128),w
  4187  0139  008A               	movwf	10
  4188  013A  083C               	movf	_handler^(0+128),w
  4189  013B  000A               	callw
  4190  013C  3180               	pagesel	$
  4191  013D  0008               	return
  4192  013E                     __end_of_receive:	
  4193                           
  4194                           	psect	text4
  4195  0F3E                     __ptext4:	
  4196 ;; *************** function _receive_handler *****************
  4197 ;; Defined at:
  4198 ;;		line 24 in file "main.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  sid             1   32[BANK0 ] unsigned char 
  4201 ;;  pbuf            1   33[BANK0 ] PTR unsigned char 
  4202 ;;		 -> receive@rx_buf(15), 
  4203 ;;  dlc             1   34[BANK0 ] unsigned char 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  i               1   38[BANK0 ] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      void 
  4208 ;; Registers used:
  4209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4215 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;Total ram usage:        7 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    3
  4222 ;; This function calls:
  4223 ;;		_printf
  4224 ;; This function is called by:
  4225 ;;		_main
  4226 ;;		_receive
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _receive_handler
  4232  0F3E                     _receive_handler:	
  4233                           
  4234                           ;main.c: 25: uint8_t i;
  4235                           ;main.c: 26: if (output_format.with_sid) {
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4239  0F3E  0020               	movlb	0	; select bank0
  4240  0F3F  086D               	movf	_output_format,w
  4241  0F40  1903               	btfsc	3,2
  4242  0F41  2F54               	goto	l2045
  4243                           
  4244                           ;main.c: 27: printf("%d,%s\n", sid, pbuf);
  4245  0F42  3094               	movlw	low (STR_1| (0+32768))
  4246  0F43  00A5               	movwf	printf@f
  4247  0F44  3093               	movlw	high (STR_1| (0+32768))
  4248  0F45  00A6               	movwf	printf@f+1
  4249  0F46  0840               	movf	receive_handler@sid,w
  4250  0F47  00C3               	movwf	??_receive_handler
  4251  0F48  01C4               	clrf	??_receive_handler+1
  4252  0F49  0843               	movf	??_receive_handler,w
  4253  0F4A  00A7               	movwf	?_printf+2
  4254  0F4B  0844               	movf	??_receive_handler+1,w
  4255  0F4C  00A8               	movwf	?_printf+3
  4256  0F4D  0841               	movf	receive_handler@pbuf,w
  4257  0F4E  00C5               	movwf	??_receive_handler+2
  4258  0F4F  0845               	movf	??_receive_handler+2,w
  4259  0F50  00A9               	movwf	low ((?_printf| 0+4))
  4260  0F51  3185  25B0         	fcall	_printf
  4261                           
  4262                           ;main.c: 28: } else if (output_format.hex_output) {
  4263  0F53  0008               	return
  4264  0F54                     l2045:	
  4265  0F54  0020               	movlb	0	; select bank0
  4266  0F55  086E               	movf	_output_format+1,w
  4267  0F56  1903               	btfsc	3,2
  4268  0F57  2F8D               	goto	l2059
  4269                           
  4270                           ;main.c: 29: printf("%02x:", sid);
  4271  0F58  30A1               	movlw	low (STR_2| (0+32768))
  4272  0F59  00A5               	movwf	printf@f
  4273  0F5A  3093               	movlw	high (STR_2| (0+32768))
  4274  0F5B  00A6               	movwf	printf@f+1
  4275  0F5C  0840               	movf	receive_handler@sid,w
  4276  0F5D  00C3               	movwf	??_receive_handler
  4277  0F5E  01C4               	clrf	??_receive_handler+1
  4278  0F5F  0843               	movf	??_receive_handler,w
  4279  0F60  00A7               	movwf	?_printf+2
  4280  0F61  0844               	movf	??_receive_handler+1,w
  4281  0F62  00A8               	movwf	?_printf+3
  4282  0F63  3185  25B0  318F   	fcall	_printf
  4283                           
  4284                           ;main.c: 30: for(i=0; i<dlc; i++) {
  4285  0F66  0020               	movlb	0	; select bank0
  4286  0F67  01C6               	clrf	receive_handler@i
  4287  0F68                     l2055:	
  4288  0F68  0842               	movf	receive_handler@dlc,w
  4289  0F69  0246               	subwf	receive_handler@i,w
  4290  0F6A  1803               	btfsc	3,0
  4291  0F6B  2F86               	goto	l2057
  4292                           
  4293                           ;main.c: 31: printf(" %02x", pbuf[i]);
  4294  0F6C  30A7               	movlw	low (STR_3| (0+32768))
  4295  0F6D  00A5               	movwf	printf@f
  4296  0F6E  3093               	movlw	high (STR_3| (0+32768))
  4297  0F6F  00A6               	movwf	printf@f+1
  4298  0F70  0846               	movf	receive_handler@i,w
  4299  0F71  0741               	addwf	receive_handler@pbuf,w
  4300  0F72  00C3               	movwf	??_receive_handler
  4301  0F73  0843               	movf	??_receive_handler,w
  4302  0F74  0086               	movwf	6
  4303  0F75  0187               	clrf	7
  4304  0F76  0801               	movf	1,w
  4305  0F77  00C4               	movwf	??_receive_handler+1
  4306  0F78  01C5               	clrf	??_receive_handler+2
  4307  0F79  0844               	movf	??_receive_handler+1,w
  4308  0F7A  00A7               	movwf	?_printf+2
  4309  0F7B  0845               	movf	??_receive_handler+2,w
  4310  0F7C  00A8               	movwf	?_printf+3
  4311  0F7D  3185  25B0  318F   	fcall	_printf
  4312  0F80  3001               	movlw	1
  4313  0F81  0020               	movlb	0	; select bank0
  4314  0F82  00C3               	movwf	??_receive_handler
  4315  0F83  0843               	movf	??_receive_handler,w
  4316  0F84  07C6               	addwf	receive_handler@i,f
  4317  0F85  2F68               	goto	l2055
  4318  0F86                     l2057:	
  4319                           
  4320                           ;main.c: 32: }
  4321                           ;main.c: 33: printf("\n");
  4322  0F86  30F9               	movlw	low ((STR_7+21)| (0+32768))
  4323  0F87  00A5               	movwf	printf@f
  4324  0F88  3091               	movlw	high ((STR_7+21)| (0+32768))
  4325  0F89  00A6               	movwf	printf@f+1
  4326  0F8A  3185  25B0         	fcall	_printf
  4327                           
  4328                           ;main.c: 34: } else {
  4329  0F8C  0008               	return
  4330  0F8D                     l2059:	
  4331                           
  4332                           ;main.c: 35: printf("%s\n", pbuf);
  4333  0F8D  305D               	movlw	low ((STR_32+14)| (0+32768))
  4334  0F8E  0020               	movlb	0	; select bank0
  4335  0F8F  00A5               	movwf	printf@f
  4336  0F90  3092               	movlw	high ((STR_32+14)| (0+32768))
  4337  0F91  00A6               	movwf	printf@f+1
  4338  0F92  0841               	movf	receive_handler@pbuf,w
  4339  0F93  00C3               	movwf	??_receive_handler
  4340  0F94  0843               	movf	??_receive_handler,w
  4341  0F95  00A7               	movwf	low ((?_printf| 0+2))
  4342  0F96  3185  25B0         	fcall	_printf
  4343  0F98  0008               	return
  4344  0F99                     __end_of_receive_handler:	
  4345                           
  4346                           	psect	text5
  4347  0011                     __ptext5:	
  4348 ;; *************** function _can_set_mask *****************
  4349 ;; Defined at:
  4350 ;;		line 98 in file "mcp2515.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  cmd             1    wreg     unsigned char 
  4353 ;;  n               1   39[BANK0 ] unsigned char 
  4354 ;;  mask            1   40[BANK0 ] unsigned char 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  cmd             1   53[BANK0 ] unsigned char 
  4357 ;;  mask_buf        4   49[BANK0 ] unsigned char [4]
  4358 ;;  mask_sidl       1   55[BANK0 ] unsigned char 
  4359 ;;  mask_sidh       1   54[BANK0 ] unsigned char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:       17 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    4
  4376 ;; This function calls:
  4377 ;;		_SPI_exchange
  4378 ;;		_can_ope_mode
  4379 ;;		_printf
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _can_set_mask
  4387  0011                     _can_set_mask:	
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4391                           ;can_set_mask@cmd stored from wreg
  4392  0011  0020               	movlb	0	; select bank0
  4393  0012  00D5               	movwf	can_set_mask@cmd
  4394                           
  4395                           ;mcp2515.c: 99: uint8_t mask_buf[4];
  4396                           ;mcp2515.c: 101: can_ope_mode(0b10000000);
  4397  0013  3080               	movlw	128
  4398  0014  318D  25FE  3180   	fcall	_can_ope_mode
  4399                           
  4400                           ;mcp2515.c: 102: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4401  0017  0020               	movlb	0	; select bank0
  4402  0018  0848               	movf	can_set_mask@mask,w
  4403  0019  00C9               	movwf	??_can_set_mask
  4404  001A  3003               	movlw	3
  4405  001B                     u2085:	
  4406  001B  36C9               	lsrf	??_can_set_mask,f
  4407  001C  0B89               	decfsz	9,f
  4408  001D  281B               	goto	u2085
  4409  001E  0849               	movf	??_can_set_mask,w
  4410  001F  00CA               	movwf	??_can_set_mask+1
  4411  0020  084A               	movf	??_can_set_mask+1,w
  4412  0021  00D6               	movwf	can_set_mask@mask_sidh
  4413                           
  4414                           ;mcp2515.c: 103: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4415  0022  0848               	movf	can_set_mask@mask,w
  4416  0023  3907               	andlw	7
  4417  0024  00C9               	movwf	??_can_set_mask
  4418  0025  3004               	movlw	4
  4419  0026                     u2095:	
  4420  0026  35C9               	lslf	??_can_set_mask,f
  4421  0027  3EFF               	addlw	-1
  4422  0028  1D03               	skipz
  4423  0029  2826               	goto	u2095
  4424  002A  3549               	lslf	??_can_set_mask,w
  4425  002B  00CA               	movwf	??_can_set_mask+1
  4426  002C  084A               	movf	??_can_set_mask+1,w
  4427  002D  00D7               	movwf	can_set_mask@mask_sidl
  4428                           
  4429                           ;mcp2515.c: 104: if (mode.debug) {
  4430  002E  0869               	movf	_mode,w
  4431  002F  1903               	btfsc	3,2
  4432  0030  2855               	goto	l2321
  4433                           
  4434                           ;mcp2515.c: 105: if (cmd == 0) {
  4435  0031  0855               	movf	can_set_mask@cmd,w
  4436  0032  1D03               	btfss	3,2
  4437  0033  2838               	goto	l2319
  4438                           
  4439                           ;mcp2515.c: 106: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4440  0034  3011               	movlw	low (STR_20| (0+32768))
  4441  0035  00A5               	movwf	printf@f
  4442  0036  3092               	movlw	high (STR_20| (0+32768))
  4443  0037  283C               	goto	L5
  4444  0038                     l2319:	
  4445                           ;mcp2515.c: 107: } else {
  4446                           
  4447                           
  4448                           ;mcp2515.c: 108: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4449  0038  30CD               	movlw	low (STR_21| (0+32768))
  4450  0039  0020               	movlb	0	; select bank0
  4451  003A  00A5               	movwf	printf@f
  4452  003B  3091               	movlw	high (STR_21| (0+32768))
  4453  003C                     L5:	
  4454  003C  00A6               	movwf	printf@f+1
  4455  003D  0847               	movf	can_set_mask@n,w
  4456  003E  00C9               	movwf	??_can_set_mask
  4457  003F  01CA               	clrf	??_can_set_mask+1
  4458  0040  0849               	movf	??_can_set_mask,w
  4459  0041  00A7               	movwf	?_printf+2
  4460  0042  084A               	movf	??_can_set_mask+1,w
  4461  0043  00A8               	movwf	?_printf+3
  4462  0044  0856               	movf	can_set_mask@mask_sidh,w
  4463  0045  00CB               	movwf	??_can_set_mask+2
  4464  0046  01CC               	clrf	??_can_set_mask+3
  4465  0047  084B               	movf	??_can_set_mask+2,w
  4466  0048  00A9               	movwf	?_printf+4
  4467  0049  084C               	movf	??_can_set_mask+3,w
  4468  004A  00AA               	movwf	?_printf+5
  4469  004B  0857               	movf	can_set_mask@mask_sidl,w
  4470  004C  00CD               	movwf	??_can_set_mask+4
  4471  004D  01CE               	clrf	??_can_set_mask+5
  4472  004E  084D               	movf	??_can_set_mask+4,w
  4473  004F  00AB               	movwf	?_printf+6
  4474  0050  084E               	movf	??_can_set_mask+5,w
  4475  0051  00AC               	movwf	?_printf+7
  4476  0052  3185  25B0  3180   	fcall	_printf
  4477  0055                     l2321:	
  4478                           
  4479                           ;mcp2515.c: 109: }
  4480                           ;mcp2515.c: 110: }
  4481                           ;mcp2515.c: 111: mask_buf[0] = 0b00000010;
  4482  0055  3002               	movlw	2
  4483  0056  0020               	movlb	0	; select bank0
  4484  0057  00C9               	movwf	??_can_set_mask
  4485  0058  0849               	movf	??_can_set_mask,w
  4486  0059  00D1               	movwf	can_set_mask@mask_buf
  4487                           
  4488                           ;mcp2515.c: 112: mask_buf[1] = (cmd == 0)? rxmnsidh[n]: rxfnsidh[n];
  4489  005A  0855               	movf	can_set_mask@cmd,w
  4490  005B  1903               	btfsc	3,2
  4491  005C  2862               	goto	l2327
  4492  005D  0847               	movf	can_set_mask@n,w
  4493  005E  3E9B               	addlw	low (_rxfnsidh| (0+32768))
  4494  005F  0084               	movwf	4
  4495  0060  3093               	movlw	high (_rxfnsidh| (0+32768))
  4496  0061  2866               	goto	L4
  4497  0062                     l2327:	
  4498  0062  0847               	movf	can_set_mask@n,w
  4499  0063  3EB8               	addlw	low (_rxmnsidh| (0+32768))
  4500  0064  0084               	movwf	4
  4501  0065  3093               	movlw	high (_rxmnsidh| (0+32768))
  4502  0066                     L4:	
  4503  0066  1803               	skipnc
  4504  0067  3E01               	addlw	1
  4505  0068  0085               	movwf	5
  4506  0069  0800               	movf	0,w	;code access
  4507  006A  00C9               	movwf	??_can_set_mask
  4508  006B  01CA               	clrf	??_can_set_mask+1
  4509  006C  0849               	movf	??_can_set_mask,w
  4510  006D  00CF               	movwf	_can_set_mask$488
  4511  006E  084A               	movf	??_can_set_mask+1,w
  4512  006F  00D0               	movwf	_can_set_mask$488+1
  4513  0070  084F               	movf	_can_set_mask$488,w
  4514  0071  00C9               	movwf	??_can_set_mask
  4515  0072  0849               	movf	??_can_set_mask,w
  4516  0073  00D2               	movwf	can_set_mask@mask_buf+1
  4517                           
  4518                           ;mcp2515.c: 113: mask_buf[2] = mask_sidh;
  4519  0074  0856               	movf	can_set_mask@mask_sidh,w
  4520  0075  00C9               	movwf	??_can_set_mask
  4521  0076  0849               	movf	??_can_set_mask,w
  4522  0077  00D3               	movwf	can_set_mask@mask_buf+2
  4523                           
  4524                           ;mcp2515.c: 114: mask_buf[3] = mask_sidl;
  4525  0078  0857               	movf	can_set_mask@mask_sidl,w
  4526  0079  00C9               	movwf	??_can_set_mask
  4527  007A  0849               	movf	??_can_set_mask,w
  4528  007B  00D4               	movwf	can_set_mask@mask_buf+3
  4529                           
  4530                           ;mcp2515.c: 116: SPI_exchange(mask_buf, 4);
  4531  007C  3004               	movlw	4
  4532  007D  00C9               	movwf	??_can_set_mask
  4533  007E  0849               	movf	??_can_set_mask,w
  4534  007F  00F8               	movwf	SPI_exchange@len
  4535  0080  3051               	movlw	(low (can_set_mask@mask_buf| 0))& (0+255)
  4536  0081  318C  24CB  3180   	fcall	_SPI_exchange
  4537                           
  4538                           ;mcp2515.c: 118: can_ope_mode(operation_mode);
  4539  0084  0020               	movlb	0	; select bank0
  4540  0085  086F               	movf	_operation_mode,w
  4541  0086  318D  25FE         	fcall	_can_ope_mode
  4542  0088  0008               	return
  4543  0089                     __end_of_can_set_mask:	
  4544                           
  4545                           	psect	text6
  4546  013E                     __ptext6:	
  4547 ;; *************** function _can_send *****************
  4548 ;; Defined at:
  4549 ;;		line 171 in file "mcp2515.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  buf             1    wreg     PTR unsigned char 
  4552 ;;		 -> main@buf(9), 
  4553 ;;  dlc             1   32[BANK0 ] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  buf             1   54[BANK0 ] PTR unsigned char 
  4556 ;;		 -> main@buf(9), 
  4557 ;;  txb_ctrl_buf    1   56[BANK0 ] unsigned char [1]
  4558 ;;  tx_buf         14   37[BANK0 ] unsigned char [14]
  4559 ;;  debug_buf       3   58[BANK0 ] unsigned char [3]
  4560 ;;  can_status_b    2   51[BANK0 ] unsigned char [2]
  4561 ;;  n               1   62[BANK0 ] unsigned char 
  4562 ;;  i               1   61[BANK0 ] unsigned char 
  4563 ;;  status          1   57[BANK0 ] unsigned char 
  4564 ;;  bytes_writte    1   55[BANK0 ] unsigned char 
  4565 ;;  len             1   53[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:       31 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    3
  4582 ;; This function calls:
  4583 ;;		_SPI_exchange
  4584 ;;		_printf
  4585 ;; This function is called by:
  4586 ;;		_main
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _can_send
  4592  013E                     _can_send:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4596                           ;can_send@buf stored from wreg
  4597  013E  0020               	movlb	0	; select bank0
  4598  013F  00D6               	movwf	can_send@buf
  4599                           
  4600                           ;mcp2515.c: 172: uint8_t i;
  4601                           ;mcp2515.c: 173: uint8_t n = 0;
  4602  0140  01DE               	clrf	can_send@n
  4603                           
  4604                           ;mcp2515.c: 175: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  4605  0141  0021               	movlb	1	; select bank1
  4606  0142  083B               	movf	(can_send@F2837+1)^(0+128),w
  4607  0143  0020               	movlb	0	; select bank0
  4608  0144  00D4               	movwf	can_send@can_status_buf+1
  4609  0145  0021               	movlb	1	; select bank1
  4610  0146  083A               	movf	can_send@F2837^(0+128),w
  4611  0147  0020               	movlb	0	; select bank0
  4612  0148  00D3               	movwf	can_send@can_status_buf
  4613                           
  4614                           ;mcp2515.c: 176: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  4615  0149  3002               	movlw	2
  4616  014A  00C1               	movwf	??_can_send
  4617  014B  0841               	movf	??_can_send,w
  4618  014C  00F8               	movwf	SPI_exchange@len
  4619  014D  3053               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  4620  014E  318C  24CB  3181   	fcall	_SPI_exchange
  4621  0151  0020               	movlb	0	; select bank0
  4622  0152  00C2               	movwf	??_can_send+1
  4623  0153  0842               	movf	??_can_send+1,w
  4624  0154  00D7               	movwf	can_send@bytes_written
  4625                           
  4626                           ;mcp2515.c: 177: uint8_t status = can_status_buf[1];
  4627  0155  0854               	movf	can_send@can_status_buf+1,w
  4628  0156  00C1               	movwf	??_can_send
  4629  0157  0841               	movf	??_can_send,w
  4630  0158  00D9               	movwf	can_send@status
  4631                           
  4632                           ;mcp2515.c: 178: if ((status & 0b01000000) == 0) {
  4633  0159  1B59               	btfsc	can_send@status,6
  4634  015A  296B               	goto	l309
  4635                           
  4636                           ;mcp2515.c: 179: if (mode.debug) printf("TXB2 is idle\n");
  4637  015B  0869               	movf	_mode,w
  4638  015C  1903               	btfsc	3,2
  4639  015D  2965               	goto	l2381
  4640  015E  302F               	movlw	low (STR_26| (0+32768))
  4641  015F  00A5               	movwf	printf@f
  4642  0160  3093               	movlw	high (STR_26| (0+32768))
  4643  0161  00A6               	movwf	printf@f+1
  4644  0162  3185  25B0  3181   	fcall	_printf
  4645  0165                     l2381:	
  4646                           
  4647                           ;mcp2515.c: 180: n = 2;
  4648  0165  3002               	movlw	2
  4649  0166  0020               	movlb	0	; select bank0
  4650  0167  00C1               	movwf	??_can_send
  4651  0168  0841               	movf	??_can_send,w
  4652  0169  00DE               	movwf	can_send@n
  4653                           
  4654                           ;mcp2515.c: 181: } else if ((status & 0b00010000) == 0) {
  4655  016A  2989               	goto	l2395
  4656  016B                     l309:	
  4657  016B  1A59               	btfsc	can_send@status,4
  4658  016C  297B               	goto	l312
  4659                           
  4660                           ;mcp2515.c: 182: if (mode.debug) printf("TXB1 is idle\n");
  4661  016D  0869               	movf	_mode,w
  4662  016E  1903               	btfsc	3,2
  4663  016F  2977               	goto	l2387
  4664  0170  3021               	movlw	low (STR_27| (0+32768))
  4665  0171  00A5               	movwf	printf@f
  4666  0172  3093               	movlw	high (STR_27| (0+32768))
  4667  0173  00A6               	movwf	printf@f+1
  4668  0174  3185  25B0  3181   	fcall	_printf
  4669  0177                     l2387:	
  4670                           
  4671                           ;mcp2515.c: 183: n = 1;
  4672  0177  0020               	movlb	0	; select bank0
  4673  0178  01DE               	clrf	can_send@n
  4674  0179  0ADE               	incf	can_send@n,f
  4675                           
  4676                           ;mcp2515.c: 184: } else if ((status & 0b00000100) == 0) {
  4677  017A  2989               	goto	l2395
  4678  017B                     l312:	
  4679  017B  1959               	btfsc	can_send@status,2
  4680  017C  2989               	goto	l2395
  4681                           
  4682                           ;mcp2515.c: 185: if (mode.debug) printf("TXB0 is idle\n");
  4683  017D  0869               	movf	_mode,w
  4684  017E  1903               	btfsc	3,2
  4685  017F  2987               	goto	l2393
  4686  0180  3013               	movlw	low (STR_28| (0+32768))
  4687  0181  00A5               	movwf	printf@f
  4688  0182  3093               	movlw	high (STR_28| (0+32768))
  4689  0183  00A6               	movwf	printf@f+1
  4690  0184  3185  25B0  3181   	fcall	_printf
  4691  0187                     l2393:	
  4692                           
  4693                           ;mcp2515.c: 186: n = 0;
  4694  0187  0020               	movlb	0	; select bank0
  4695  0188  01DE               	clrf	can_send@n
  4696  0189                     l2395:	
  4697                           
  4698                           ;mcp2515.c: 187: }
  4699                           ;mcp2515.c: 191: uint8_t tx_buf[14];
  4700                           ;mcp2515.c: 194: tx_buf[0] = 0b01000000 + abc[n];
  4701  0189  085E               	movf	can_send@n,w
  4702  018A  3EB0               	addlw	low (_abc| (0+32768))
  4703  018B  0084               	movwf	4
  4704  018C  3093               	movlw	high (_abc| (0+32768))
  4705  018D  1803               	skipnc
  4706  018E  3E01               	addlw	1
  4707  018F  0085               	movwf	5
  4708  0190  0800               	movf	0,w	;code access
  4709  0191  3E40               	addlw	64
  4710  0192  00C1               	movwf	??_can_send
  4711  0193  0841               	movf	??_can_send,w
  4712  0194  00C5               	movwf	can_send@tx_buf
  4713                           
  4714                           ;mcp2515.c: 196: tx_buf[1] = sid.sidh;
  4715  0195  086B               	movf	_sid,w
  4716  0196  00C1               	movwf	??_can_send
  4717  0197  0841               	movf	??_can_send,w
  4718  0198  00C6               	movwf	can_send@tx_buf+1
  4719                           
  4720                           ;mcp2515.c: 198: tx_buf[2] = sid.sidl;
  4721  0199  086C               	movf	_sid+1,w
  4722  019A  00C1               	movwf	??_can_send
  4723  019B  0841               	movf	??_can_send,w
  4724  019C  00C7               	movwf	can_send@tx_buf+2
  4725                           
  4726                           ;mcp2515.c: 200: tx_buf[3] = 0;
  4727  019D  01C8               	clrf	can_send@tx_buf+3
  4728                           
  4729                           ;mcp2515.c: 202: tx_buf[4] = 0;
  4730  019E  01C9               	clrf	can_send@tx_buf+4
  4731                           
  4732                           ;mcp2515.c: 204: tx_buf[5] = dlc;
  4733  019F  0840               	movf	can_send@dlc,w
  4734  01A0  00C1               	movwf	??_can_send
  4735  01A1  0841               	movf	??_can_send,w
  4736  01A2  00CA               	movwf	can_send@tx_buf+5
  4737                           
  4738                           ;mcp2515.c: 207: for(i=0; i<dlc; i++) {
  4739  01A3  01DD               	clrf	can_send@i
  4740  01A4                     l2417:	
  4741  01A4  0840               	movf	can_send@dlc,w
  4742  01A5  025D               	subwf	can_send@i,w
  4743  01A6  1803               	btfsc	3,0
  4744  01A7  29D3               	goto	l2419
  4745                           
  4746                           ;mcp2515.c: 208: tx_buf[6+i] = buf[i];
  4747  01A8  085D               	movf	can_send@i,w
  4748  01A9  0756               	addwf	can_send@buf,w
  4749  01AA  00C1               	movwf	??_can_send
  4750  01AB  0841               	movf	??_can_send,w
  4751  01AC  0086               	movwf	6
  4752  01AD  0187               	clrf	7
  4753  01AE  0801               	movf	1,w
  4754  01AF  00C2               	movwf	??_can_send+1
  4755  01B0  085D               	movf	can_send@i,w
  4756  01B1  3E06               	addlw	6
  4757  01B2  3E45               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4758  01B3  0086               	movwf	6
  4759  01B4  0187               	clrf	7
  4760  01B5  0842               	movf	??_can_send+1,w
  4761  01B6  0081               	movwf	1
  4762                           
  4763                           ;mcp2515.c: 209: if (mode.debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4764  01B7  0869               	movf	_mode,w
  4765  01B8  1903               	btfsc	3,2
  4766  01B9  29CD               	goto	l2415
  4767  01BA  303B               	movlw	low (STR_29| (0+32768))
  4768  01BB  00A5               	movwf	printf@f
  4769  01BC  3092               	movlw	high (STR_29| (0+32768))
  4770  01BD  00A6               	movwf	printf@f+1
  4771  01BE  085D               	movf	can_send@i,w
  4772  01BF  3E06               	addlw	6
  4773  01C0  3E45               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4774  01C1  0086               	movwf	6
  4775  01C2  0187               	clrf	7
  4776  01C3  0801               	movf	1,w
  4777  01C4  00C1               	movwf	??_can_send
  4778  01C5  01C2               	clrf	??_can_send+1
  4779  01C6  0841               	movf	??_can_send,w
  4780  01C7  00A7               	movwf	?_printf+2
  4781  01C8  0842               	movf	??_can_send+1,w
  4782  01C9  00A8               	movwf	?_printf+3
  4783  01CA  3185  25B0  3181   	fcall	_printf
  4784  01CD                     l2415:	
  4785  01CD  3001               	movlw	1
  4786  01CE  0020               	movlb	0	; select bank0
  4787  01CF  00C1               	movwf	??_can_send
  4788  01D0  0841               	movf	??_can_send,w
  4789  01D1  07DD               	addwf	can_send@i,f
  4790  01D2  29A4               	goto	l2417
  4791  01D3                     l2419:	
  4792                           
  4793                           ;mcp2515.c: 210: }
  4794                           ;mcp2515.c: 213: uint8_t len = 6 + dlc;
  4795  01D3  0840               	movf	can_send@dlc,w
  4796  01D4  3E06               	addlw	6
  4797  01D5  00C1               	movwf	??_can_send
  4798  01D6  0841               	movf	??_can_send,w
  4799  01D7  00D5               	movwf	can_send@len
  4800                           
  4801                           ;mcp2515.c: 214: uint8_t bytes_written = SPI_exchange(tx_buf, len);
  4802  01D8  0855               	movf	can_send@len,w
  4803  01D9  00C1               	movwf	??_can_send
  4804  01DA  0841               	movf	??_can_send,w
  4805  01DB  00F8               	movwf	SPI_exchange@len
  4806  01DC  3045               	movlw	(low (can_send@tx_buf| 0))& (0+255)
  4807  01DD  318C  24CB  3181   	fcall	_SPI_exchange
  4808  01E0  0020               	movlb	0	; select bank0
  4809  01E1  00C2               	movwf	??_can_send+1
  4810  01E2  0842               	movf	??_can_send+1,w
  4811  01E3  00D7               	movwf	can_send@bytes_written
  4812                           
  4813                           ;mcp2515.c: 216: uint8_t debug_buf[3];
  4814                           ;mcp2515.c: 217: debug_buf[0] = 0b00000011;
  4815  01E4  3003               	movlw	3
  4816  01E5  00C1               	movwf	??_can_send
  4817  01E6  0841               	movf	??_can_send,w
  4818  01E7  00DA               	movwf	can_send@debug_buf
  4819                           
  4820                           ;mcp2515.c: 218: debug_buf[1] = txbnsidh[n];
  4821  01E8  085E               	movf	can_send@n,w
  4822  01E9  3EAD               	addlw	low (_txbnsidh| (0+32768))
  4823  01EA  0084               	movwf	4
  4824  01EB  3093               	movlw	high (_txbnsidh| (0+32768))
  4825  01EC  1803               	skipnc
  4826  01ED  3E01               	addlw	1
  4827  01EE  0085               	movwf	5
  4828  01EF  0800               	movf	0,w	;code access
  4829  01F0  00C1               	movwf	??_can_send
  4830  01F1  0841               	movf	??_can_send,w
  4831  01F2  00DB               	movwf	can_send@debug_buf+1
  4832                           
  4833                           ;mcp2515.c: 219: debug_buf[2] = 0x00;
  4834  01F3  01DC               	clrf	can_send@debug_buf+2
  4835                           
  4836                           ;mcp2515.c: 220: SPI_exchange(debug_buf, 3);
  4837  01F4  3003               	movlw	3
  4838  01F5  00C1               	movwf	??_can_send
  4839  01F6  0841               	movf	??_can_send,w
  4840  01F7  00F8               	movwf	SPI_exchange@len
  4841  01F8  305A               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4842  01F9  318C  24CB  3181   	fcall	_SPI_exchange
  4843                           
  4844                           ;mcp2515.c: 222: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  4845  01FC  0020               	movlb	0	; select bank0
  4846  01FD  0869               	movf	_mode,w
  4847  01FE  1903               	btfsc	3,2
  4848  01FF  2A15               	goto	l2435
  4849  0200  3083               	movlw	low (STR_30| (0+32768))
  4850  0201  00A5               	movwf	printf@f
  4851  0202  3092               	movlw	high (STR_30| (0+32768))
  4852  0203  00A6               	movwf	printf@f+1
  4853  0204  085E               	movf	can_send@n,w
  4854  0205  00C1               	movwf	??_can_send
  4855  0206  01C2               	clrf	??_can_send+1
  4856  0207  0841               	movf	??_can_send,w
  4857  0208  00A7               	movwf	?_printf+2
  4858  0209  0842               	movf	??_can_send+1,w
  4859  020A  00A8               	movwf	?_printf+3
  4860  020B  085C               	movf	can_send@debug_buf+2,w
  4861  020C  00C3               	movwf	??_can_send+2
  4862  020D  01C4               	clrf	??_can_send+3
  4863  020E  0843               	movf	??_can_send+2,w
  4864  020F  00A9               	movwf	?_printf+4
  4865  0210  0844               	movf	??_can_send+3,w
  4866  0211  00AA               	movwf	?_printf+5
  4867  0212  3185  25B0  3181   	fcall	_printf
  4868  0215                     l2435:	
  4869                           
  4870                           ;mcp2515.c: 223: debug_buf[0] = 0b00000011;
  4871  0215  3003               	movlw	3
  4872  0216  0020               	movlb	0	; select bank0
  4873  0217  00C1               	movwf	??_can_send
  4874  0218  0841               	movf	??_can_send,w
  4875  0219  00DA               	movwf	can_send@debug_buf
  4876                           
  4877                           ;mcp2515.c: 224: debug_buf[1] = txbnsidh[n] + 1;
  4878  021A  085E               	movf	can_send@n,w
  4879  021B  3EAD               	addlw	low (_txbnsidh| (0+32768))
  4880  021C  0084               	movwf	4
  4881  021D  3093               	movlw	high (_txbnsidh| (0+32768))
  4882  021E  1803               	skipnc
  4883  021F  3E01               	addlw	1
  4884  0220  0085               	movwf	5
  4885  0221  0800               	movf	0,w	;code access
  4886  0222  3E01               	addlw	1
  4887  0223  00C1               	movwf	??_can_send
  4888  0224  0841               	movf	??_can_send,w
  4889  0225  00DB               	movwf	can_send@debug_buf+1
  4890                           
  4891                           ;mcp2515.c: 225: debug_buf[2] = 0x00;
  4892  0226  01DC               	clrf	can_send@debug_buf+2
  4893                           
  4894                           ;mcp2515.c: 226: SPI_exchange(debug_buf, 3);
  4895  0227  3003               	movlw	3
  4896  0228  00C1               	movwf	??_can_send
  4897  0229  0841               	movf	??_can_send,w
  4898  022A  00F8               	movwf	SPI_exchange@len
  4899  022B  305A               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4900  022C  318C  24CB  3181   	fcall	_SPI_exchange
  4901                           
  4902                           ;mcp2515.c: 228: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  4903  022F  0020               	movlb	0	; select bank0
  4904  0230  0869               	movf	_mode,w
  4905  0231  1903               	btfsc	3,2
  4906  0232  2A48               	goto	l2447
  4907  0233  30A5               	movlw	low (STR_31| (0+32768))
  4908  0234  00A5               	movwf	printf@f
  4909  0235  3092               	movlw	high (STR_31| (0+32768))
  4910  0236  00A6               	movwf	printf@f+1
  4911  0237  085E               	movf	can_send@n,w
  4912  0238  00C1               	movwf	??_can_send
  4913  0239  01C2               	clrf	??_can_send+1
  4914  023A  0841               	movf	??_can_send,w
  4915  023B  00A7               	movwf	?_printf+2
  4916  023C  0842               	movf	??_can_send+1,w
  4917  023D  00A8               	movwf	?_printf+3
  4918  023E  085C               	movf	can_send@debug_buf+2,w
  4919  023F  00C3               	movwf	??_can_send+2
  4920  0240  01C4               	clrf	??_can_send+3
  4921  0241  0843               	movf	??_can_send+2,w
  4922  0242  00A9               	movwf	?_printf+4
  4923  0243  0844               	movf	??_can_send+3,w
  4924  0244  00AA               	movwf	?_printf+5
  4925  0245  3185  25B0  3181   	fcall	_printf
  4926  0248                     l2447:	
  4927                           
  4928                           ;mcp2515.c: 230: if (bytes_written == len) {
  4929  0248  0020               	movlb	0	; select bank0
  4930  0249  0857               	movf	can_send@bytes_written,w
  4931  024A  0655               	xorwf	can_send@len,w
  4932  024B  1D03               	skipz
  4933  024C  2A75               	goto	l2463
  4934                           
  4935                           ;mcp2515.c: 232: uint8_t txb_ctrl_buf[1];
  4936                           ;mcp2515.c: 233: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  4937  024D  3001               	movlw	1
  4938  024E  00C1               	movwf	??_can_send
  4939  024F  0A5E               	incf	can_send@n,w
  4940  0250  2A52               	goto	u2284
  4941  0251                     u2285:	
  4942  0251  35C1               	lslf	??_can_send,f
  4943  0252                     u2284:	
  4944  0252  0B89               	decfsz	9,f
  4945  0253  2A51               	goto	u2285
  4946  0254  0841               	movf	??_can_send,w
  4947  0255  3E80               	addlw	128
  4948  0256  00C2               	movwf	??_can_send+1
  4949  0257  0842               	movf	??_can_send+1,w
  4950  0258  00D8               	movwf	can_send@txb_ctrl_buf
  4951                           
  4952                           ;mcp2515.c: 234: bytes_written = SPI_exchange(txb_ctrl_buf, 1);
  4953  0259  01F8               	clrf	SPI_exchange@len
  4954  025A  0AF8               	incf	SPI_exchange@len,f
  4955  025B  3058               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4956  025C  318C  24CB  3181   	fcall	_SPI_exchange
  4957  025F  0020               	movlb	0	; select bank0
  4958  0260  00C1               	movwf	??_can_send
  4959  0261  0841               	movf	??_can_send,w
  4960  0262  00D7               	movwf	can_send@bytes_written
  4961                           
  4962                           ;mcp2515.c: 235: if (bytes_written == 1) {
  4963  0263  0357               	decf	can_send@bytes_written,w
  4964  0264  1D03               	btfss	3,2
  4965  0265  2A75               	goto	l2463
  4966                           
  4967                           ;mcp2515.c: 236: if (mode.debug) printf("Message sent: %s\n", buf);
  4968  0266  0869               	movf	_mode,w
  4969  0267  1903               	btfsc	3,2
  4970  0268  2A73               	goto	l2459
  4971  0269  304F               	movlw	low (STR_32| (0+32768))
  4972  026A  00A5               	movwf	printf@f
  4973  026B  3092               	movlw	high (STR_32| (0+32768))
  4974  026C  00A6               	movwf	printf@f+1
  4975  026D  0856               	movf	can_send@buf,w
  4976  026E  00C1               	movwf	??_can_send
  4977  026F  0841               	movf	??_can_send,w
  4978  0270  00A7               	movwf	low ((?_printf| 0+2))
  4979  0271  3185  25B0         	fcall	_printf
  4980  0273                     l2459:	
  4981                           
  4982                           ;mcp2515.c: 237: return 1;
  4983  0273  3001               	movlw	1
  4984  0274  0008               	return
  4985  0275                     l2463:	
  4986                           
  4987                           ;mcp2515.c: 238: }
  4988                           ;mcp2515.c: 239: }
  4989                           ;mcp2515.c: 241: return 0;
  4990  0275  3000               	movlw	0
  4991  0276  0008               	return
  4992  0277                     __end_of_can_send:	
  4993                           
  4994                           	psect	text7
  4995  0006                     __ptext7:	
  4996 ;; *************** function _can_logging_mode *****************
  4997 ;; Defined at:
  4998 ;;		line 26 in file "mcp2515.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  debug           1    wreg     unsigned char 
  5001 ;;  verbose         1    0[COMMON] unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  debug           1    2[COMMON] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5013 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;Total ram usage:        3 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _can_logging_mode
  5028  0006                     _can_logging_mode:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _can_logging_mode: [wreg]
  5032                           ;can_logging_mode@debug stored from wreg
  5033  0006  00F2               	movwf	can_logging_mode@debug
  5034                           
  5035                           ;mcp2515.c: 27: mode.debug = debug;
  5036  0007  0872               	movf	can_logging_mode@debug,w
  5037  0008  00F1               	movwf	??_can_logging_mode
  5038  0009  0871               	movf	??_can_logging_mode,w
  5039  000A  0020               	movlb	0	; select bank0
  5040  000B  00E9               	movwf	_mode
  5041                           
  5042                           ;mcp2515.c: 28: mode.verbose = verbose;
  5043  000C  0870               	movf	can_logging_mode@verbose,w
  5044  000D  00F1               	movwf	??_can_logging_mode
  5045  000E  0871               	movf	??_can_logging_mode,w
  5046  000F  00EA               	movwf	_mode+1
  5047  0010  0008               	return
  5048  0011                     __end_of_can_logging_mode:	
  5049                           
  5050                           	psect	text8
  5051  0EE4                     __ptext8:	
  5052 ;; *************** function _can_init *****************
  5053 ;; Defined at:
  5054 ;;		line 47 in file "mcp2515.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5057 ;;		 -> receive_handler(1), 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  cnf_buf         5   42[BANK0 ] unsigned char [5]
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5069 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;Total ram usage:        8 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    4
  5076 ;; This function calls:
  5077 ;;		_SPI_exchange
  5078 ;;		_can_ope_mode
  5079 ;;		_can_set_sid
  5080 ;; This function is called by:
  5081 ;;		_main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _can_init
  5087  0EE4                     _can_init:	
  5088                           
  5089                           ;mcp2515.c: 48: can_set_sid(0);
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5093  0EE4  3000               	movlw	0
  5094  0EE5  00F0               	movwf	can_set_sid@can_node
  5095  0EE6  00F1               	movwf	can_set_sid@can_node+1
  5096  0EE7  318D  2527  318E   	fcall	_can_set_sid
  5097                           
  5098                           ;mcp2515.c: 50: handler = receive_handler;
  5099  0EEA  0020               	movlb	0	; select bank0
  5100  0EEB  0848               	movf	can_init@receive_handler+1,w
  5101  0EEC  0021               	movlb	1	; select bank1
  5102  0EED  00BD               	movwf	(_handler+1)^(0+128)
  5103  0EEE  0020               	movlb	0	; select bank0
  5104  0EEF  0847               	movf	can_init@receive_handler,w
  5105  0EF0  0021               	movlb	1	; select bank1
  5106  0EF1  00BC               	movwf	_handler^(0+128)
  5107                           
  5108                           ;mcp2515.c: 52: can_ope_mode(0b10000000);
  5109  0EF2  3080               	movlw	128
  5110  0EF3  318D  25FE  318E   	fcall	_can_ope_mode
  5111                           
  5112                           ;mcp2515.c: 53: uint8_t cnf_buf[5] = {0b00000010, 0x28, 0b00000101, 0b11110001, 0b010000
      +                          01};
  5113  0EF6  30B3               	movlw	low can_init@F2806
  5114  0EF7  0086               	movwf	6
  5115  0EF8  3000               	movlw	high can_init@F2806
  5116  0EF9  0087               	movwf	7
  5117  0EFA  304A               	movlw	low can_init@cnf_buf
  5118  0EFB  0084               	movwf	4
  5119  0EFC  3000               	movlw	high can_init@cnf_buf
  5120  0EFD  0085               	movwf	5
  5121  0EFE  3005               	movlw	5
  5122  0EFF  0020               	movlb	0	; select bank0
  5123  0F00  00C9               	movwf	??_can_init
  5124  0F01                     u1930:	
  5125  0F01  0016               	moviw fsr1++
  5126  0F02  001A               	movwi fsr0++
  5127  0F03  0BC9               	decfsz	??_can_init,f
  5128  0F04  2F01               	goto	u1930
  5129                           
  5130                           ;mcp2515.c: 54: SPI_exchange(cnf_buf, 5);
  5131  0F05  3005               	movlw	5
  5132  0F06  00C9               	movwf	??_can_init
  5133  0F07  0849               	movf	??_can_init,w
  5134  0F08  00F8               	movwf	SPI_exchange@len
  5135  0F09  304A               	movlw	(low (can_init@cnf_buf| 0))& (0+255)
  5136  0F0A  318C  24CB  318E   	fcall	_SPI_exchange
  5137                           
  5138                           ;mcp2515.c: 56: cnf_buf[0] = 0b00000010;
  5139  0F0D  3002               	movlw	2
  5140  0F0E  0020               	movlb	0	; select bank0
  5141  0F0F  00C9               	movwf	??_can_init
  5142  0F10  0849               	movf	??_can_init,w
  5143  0F11  00CA               	movwf	can_init@cnf_buf
  5144                           
  5145                           ;mcp2515.c: 57: cnf_buf[1] = 0x60;
  5146  0F12  3060               	movlw	96
  5147  0F13  00C9               	movwf	??_can_init
  5148  0F14  0849               	movf	??_can_init,w
  5149  0F15  00CB               	movwf	can_init@cnf_buf+1
  5150                           
  5151                           ;mcp2515.c: 58: cnf_buf[2] = 0b00100100;
  5152  0F16  3024               	movlw	36
  5153  0F17  00C9               	movwf	??_can_init
  5154  0F18  0849               	movf	??_can_init,w
  5155  0F19  00CC               	movwf	can_init@cnf_buf+2
  5156                           
  5157                           ;mcp2515.c: 59: SPI_exchange(cnf_buf, 3);
  5158  0F1A  3003               	movlw	3
  5159  0F1B  00C9               	movwf	??_can_init
  5160  0F1C  0849               	movf	??_can_init,w
  5161  0F1D  00F8               	movwf	SPI_exchange@len
  5162  0F1E  304A               	movlw	(low (can_init@cnf_buf| 0))& (0+255)
  5163  0F1F  318C  24CB  318E   	fcall	_SPI_exchange
  5164                           
  5165                           ;mcp2515.c: 61: cnf_buf[0] = 0b00000010;
  5166  0F22  3002               	movlw	2
  5167  0F23  0020               	movlb	0	; select bank0
  5168  0F24  00C9               	movwf	??_can_init
  5169  0F25  0849               	movf	??_can_init,w
  5170  0F26  00CA               	movwf	can_init@cnf_buf
  5171                           
  5172                           ;mcp2515.c: 62: cnf_buf[1] = 0x70;
  5173  0F27  3070               	movlw	112
  5174  0F28  00C9               	movwf	??_can_init
  5175  0F29  0849               	movf	??_can_init,w
  5176  0F2A  00CB               	movwf	can_init@cnf_buf+1
  5177                           
  5178                           ;mcp2515.c: 63: cnf_buf[2] = 0b00100000;
  5179  0F2B  3020               	movlw	32
  5180  0F2C  00C9               	movwf	??_can_init
  5181  0F2D  0849               	movf	??_can_init,w
  5182  0F2E  00CC               	movwf	can_init@cnf_buf+2
  5183                           
  5184                           ;mcp2515.c: 64: SPI_exchange(cnf_buf, 3);
  5185  0F2F  3003               	movlw	3
  5186  0F30  00C9               	movwf	??_can_init
  5187  0F31  0849               	movf	??_can_init,w
  5188  0F32  00F8               	movwf	SPI_exchange@len
  5189  0F33  304A               	movlw	(low (can_init@cnf_buf| 0))& (0+255)
  5190  0F34  318C  24CB  318E   	fcall	_SPI_exchange
  5191                           
  5192                           ;mcp2515.c: 66: mode.debug = 0;
  5193  0F37  0020               	movlb	0	; select bank0
  5194  0F38  01E9               	clrf	_mode
  5195                           
  5196                           ;mcp2515.c: 67: mode.verbose = 0;
  5197  0F39  01EA               	clrf	_mode+1
  5198                           
  5199                           ;mcp2515.c: 69: can_ope_mode(0b00000000);
  5200  0F3A  3000               	movlw	0
  5201  0F3B  318D  25FE         	fcall	_can_ope_mode
  5202  0F3D  0008               	return
  5203  0F3E                     __end_of_can_init:	
  5204                           
  5205                           	psect	text9
  5206  0D27                     __ptext9:	
  5207 ;; *************** function _can_set_sid *****************
  5208 ;; Defined at:
  5209 ;;		line 37 in file "mcp2515.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  can_node        2    0[COMMON] unsigned int 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  sidl            1    6[COMMON] unsigned char 
  5214 ;;  sidh            1    5[COMMON] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        7 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_main
  5234 ;;		_can_init
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _can_set_sid
  5240  0D27                     _can_set_sid:	
  5241                           
  5242                           ;mcp2515.c: 38: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5246  0D27  0871               	movf	can_set_sid@can_node+1,w
  5247  0D28  00F3               	movwf	??_can_set_sid+1
  5248  0D29  0870               	movf	can_set_sid@can_node,w
  5249  0D2A  00F2               	movwf	??_can_set_sid
  5250  0D2B  36F3               	lsrf	??_can_set_sid+1,f
  5251  0D2C  0CF2               	rrf	??_can_set_sid,f
  5252  0D2D  36F3               	lsrf	??_can_set_sid+1,f
  5253  0D2E  0CF2               	rrf	??_can_set_sid,f
  5254  0D2F  36F3               	lsrf	??_can_set_sid+1,f
  5255  0D30  0CF2               	rrf	??_can_set_sid,f
  5256  0D31  0872               	movf	??_can_set_sid,w
  5257  0D32  00F4               	movwf	??_can_set_sid+2
  5258  0D33  0874               	movf	??_can_set_sid+2,w
  5259  0D34  00F5               	movwf	can_set_sid@sidh
  5260                           
  5261                           ;mcp2515.c: 39: uint8_t sidl = (can_node << 5) & 0x00e0;
  5262  0D35  0870               	movf	can_set_sid@can_node,w
  5263  0D36  00F2               	movwf	??_can_set_sid
  5264  0D37  3004               	movlw	4
  5265  0D38                     u1845:	
  5266  0D38  35F2               	lslf	??_can_set_sid,f
  5267  0D39  3EFF               	addlw	-1
  5268  0D3A  1D03               	skipz
  5269  0D3B  2D38               	goto	u1845
  5270  0D3C  3572               	lslf	??_can_set_sid,w
  5271  0D3D  39E0               	andlw	224
  5272  0D3E  00F3               	movwf	??_can_set_sid+1
  5273  0D3F  0873               	movf	??_can_set_sid+1,w
  5274  0D40  00F6               	movwf	can_set_sid@sidl
  5275                           
  5276                           ;mcp2515.c: 40: sid.sidh = sidh;
  5277  0D41  0875               	movf	can_set_sid@sidh,w
  5278  0D42  00F2               	movwf	??_can_set_sid
  5279  0D43  0872               	movf	??_can_set_sid,w
  5280  0D44  0020               	movlb	0	; select bank0
  5281  0D45  00EB               	movwf	_sid
  5282                           
  5283                           ;mcp2515.c: 41: sid.sidl = sidl;
  5284  0D46  0876               	movf	can_set_sid@sidl,w
  5285  0D47  00F2               	movwf	??_can_set_sid
  5286  0D48  0872               	movf	??_can_set_sid,w
  5287  0D49  00EC               	movwf	_sid+1
  5288  0D4A  0008               	return
  5289  0D4B                     __end_of_can_set_sid:	
  5290                           
  5291                           	psect	text10
  5292  0277                     __ptext10:	
  5293 ;; *************** function _can_dump_registers *****************
  5294 ;; Defined at:
  5295 ;;		line 300 in file "mcp2515.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  n               1   42[BANK0 ] unsigned char 
  5300 ;;  mask_sidl       1   41[BANK0 ] unsigned char 
  5301 ;;  mask_sidh       1   40[BANK0 ] unsigned char 
  5302 ;;  i               1    0        unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:       11 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    4
  5319 ;; This function calls:
  5320 ;;		_printf
  5321 ;;		_read_register
  5322 ;; This function is called by:
  5323 ;;		_main
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function _can_dump_registers
  5329  0277                     _can_dump_registers:	
  5330                           
  5331                           ;mcp2515.c: 301: printf("---\n");
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5335  0277  30F6               	movlw	low ((STR_7+18)| (0+32768))
  5336  0278  0020               	movlb	0	; select bank0
  5337  0279  00A5               	movwf	printf@f
  5338  027A  3091               	movlw	high ((STR_7+18)| (0+32768))
  5339  027B  00A6               	movwf	printf@f+1
  5340  027C  3185  25B0  3182   	fcall	_printf
  5341                           
  5342                           ;mcp2515.c: 302: printf("SIDH: %02x\n", sid.sidh);
  5343  027F  3077               	movlw	low ((STR_22+5)| (0+32768))
  5344  0280  0020               	movlb	0	; select bank0
  5345  0281  00A5               	movwf	printf@f
  5346  0282  3092               	movlw	high ((STR_22+5)| (0+32768))
  5347  0283  00A6               	movwf	printf@f+1
  5348  0284  086B               	movf	_sid,w
  5349  0285  00C0               	movwf	??_can_dump_registers
  5350  0286  01C1               	clrf	??_can_dump_registers+1
  5351  0287  0840               	movf	??_can_dump_registers,w
  5352  0288  00A7               	movwf	?_printf+2
  5353  0289  0841               	movf	??_can_dump_registers+1,w
  5354  028A  00A8               	movwf	?_printf+3
  5355  028B  3185  25B0  3182   	fcall	_printf
  5356                           
  5357                           ;mcp2515.c: 303: printf("SIDL: %02x\n", sid.sidl);
  5358  028E  3099               	movlw	low ((STR_23+5)| (0+32768))
  5359  028F  0020               	movlb	0	; select bank0
  5360  0290  00A5               	movwf	printf@f
  5361  0291  3092               	movlw	high ((STR_23+5)| (0+32768))
  5362  0292  00A6               	movwf	printf@f+1
  5363  0293  086C               	movf	_sid+1,w
  5364  0294  00C0               	movwf	??_can_dump_registers
  5365  0295  01C1               	clrf	??_can_dump_registers+1
  5366  0296  0840               	movf	??_can_dump_registers,w
  5367  0297  00A7               	movwf	?_printf+2
  5368  0298  0841               	movf	??_can_dump_registers+1,w
  5369  0299  00A8               	movwf	?_printf+3
  5370  029A  3185  25B0  3182   	fcall	_printf
  5371                           
  5372                           ;mcp2515.c: 304: printf("\n");
  5373  029D  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5374  029E  0020               	movlb	0	; select bank0
  5375  029F  00A5               	movwf	printf@f
  5376  02A0  3091               	movlw	high ((STR_7+21)| (0+32768))
  5377  02A1  00A6               	movwf	printf@f+1
  5378  02A2  3185  25B0  3182   	fcall	_printf
  5379                           
  5380                           ;mcp2515.c: 306: printf("CNF1: %02x\n", read_register(0x2a));
  5381  02A5  3057               	movlw	low (STR_39| (0+32768))
  5382  02A6  0020               	movlb	0	; select bank0
  5383  02A7  00A5               	movwf	printf@f
  5384  02A8  3093               	movlw	high (STR_39| (0+32768))
  5385  02A9  00A6               	movwf	printf@f+1
  5386  02AA  302A               	movlw	42
  5387  02AB  318C  24E0  3182   	fcall	_read_register
  5388  02AE  0020               	movlb	0	; select bank0
  5389  02AF  00C0               	movwf	??_can_dump_registers
  5390  02B0  01C1               	clrf	??_can_dump_registers+1
  5391  02B1  0840               	movf	??_can_dump_registers,w
  5392  02B2  00A7               	movwf	?_printf+2
  5393  02B3  0841               	movf	??_can_dump_registers+1,w
  5394  02B4  00A8               	movwf	?_printf+3
  5395  02B5  3185  25B0  3182   	fcall	_printf
  5396                           
  5397                           ;mcp2515.c: 307: printf("CNF2: %02x\n", read_register(0x29));
  5398  02B8  3063               	movlw	low (STR_40| (0+32768))
  5399  02B9  0020               	movlb	0	; select bank0
  5400  02BA  00A5               	movwf	printf@f
  5401  02BB  3093               	movlw	high (STR_40| (0+32768))
  5402  02BC  00A6               	movwf	printf@f+1
  5403  02BD  3029               	movlw	41
  5404  02BE  318C  24E0  3182   	fcall	_read_register
  5405  02C1  0020               	movlb	0	; select bank0
  5406  02C2  00C0               	movwf	??_can_dump_registers
  5407  02C3  01C1               	clrf	??_can_dump_registers+1
  5408  02C4  0840               	movf	??_can_dump_registers,w
  5409  02C5  00A7               	movwf	?_printf+2
  5410  02C6  0841               	movf	??_can_dump_registers+1,w
  5411  02C7  00A8               	movwf	?_printf+3
  5412  02C8  3185  25B0  3182   	fcall	_printf
  5413                           
  5414                           ;mcp2515.c: 308: printf("CNF3: %02x\n", read_register(0x28));
  5415  02CB  306F               	movlw	low (STR_41| (0+32768))
  5416  02CC  0020               	movlb	0	; select bank0
  5417  02CD  00A5               	movwf	printf@f
  5418  02CE  3093               	movlw	high (STR_41| (0+32768))
  5419  02CF  00A6               	movwf	printf@f+1
  5420  02D0  3028               	movlw	40
  5421  02D1  318C  24E0  3182   	fcall	_read_register
  5422  02D4  0020               	movlb	0	; select bank0
  5423  02D5  00C0               	movwf	??_can_dump_registers
  5424  02D6  01C1               	clrf	??_can_dump_registers+1
  5425  02D7  0840               	movf	??_can_dump_registers,w
  5426  02D8  00A7               	movwf	?_printf+2
  5427  02D9  0841               	movf	??_can_dump_registers+1,w
  5428  02DA  00A8               	movwf	?_printf+3
  5429  02DB  3185  25B0  3182   	fcall	_printf
  5430                           
  5431                           ;mcp2515.c: 309: printf("\n");
  5432  02DE  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5433  02DF  0020               	movlb	0	; select bank0
  5434  02E0  00A5               	movwf	printf@f
  5435  02E1  3091               	movlw	high ((STR_7+21)| (0+32768))
  5436  02E2  00A6               	movwf	printf@f+1
  5437  02E3  3185  25B0  3182   	fcall	_printf
  5438                           
  5439                           ;mcp2515.c: 311: printf("RXB0CTRL: %02x\n", read_register(0x60));
  5440  02E6  30C6               	movlw	low (STR_43| (0+32768))
  5441  02E7  0020               	movlb	0	; select bank0
  5442  02E8  00A5               	movwf	printf@f
  5443  02E9  3092               	movlw	high (STR_43| (0+32768))
  5444  02EA  00A6               	movwf	printf@f+1
  5445  02EB  3060               	movlw	96
  5446  02EC  318C  24E0  3182   	fcall	_read_register
  5447  02EF  0020               	movlb	0	; select bank0
  5448  02F0  00C0               	movwf	??_can_dump_registers
  5449  02F1  01C1               	clrf	??_can_dump_registers+1
  5450  02F2  0840               	movf	??_can_dump_registers,w
  5451  02F3  00A7               	movwf	?_printf+2
  5452  02F4  0841               	movf	??_can_dump_registers+1,w
  5453  02F5  00A8               	movwf	?_printf+3
  5454  02F6  3185  25B0  3182   	fcall	_printf
  5455                           
  5456                           ;mcp2515.c: 312: printf("RXB1CTRL: %02x\n", read_register(0x70));
  5457  02F9  30D6               	movlw	low (STR_44| (0+32768))
  5458  02FA  0020               	movlb	0	; select bank0
  5459  02FB  00A5               	movwf	printf@f
  5460  02FC  3092               	movlw	high (STR_44| (0+32768))
  5461  02FD  00A6               	movwf	printf@f+1
  5462  02FE  3070               	movlw	112
  5463  02FF  318C  24E0  3182   	fcall	_read_register
  5464  0302  0020               	movlb	0	; select bank0
  5465  0303  00C0               	movwf	??_can_dump_registers
  5466  0304  01C1               	clrf	??_can_dump_registers+1
  5467  0305  0840               	movf	??_can_dump_registers,w
  5468  0306  00A7               	movwf	?_printf+2
  5469  0307  0841               	movf	??_can_dump_registers+1,w
  5470  0308  00A8               	movwf	?_printf+3
  5471  0309  3185  25B0  3182   	fcall	_printf
  5472                           
  5473                           ;mcp2515.c: 313: printf("\n");
  5474  030C  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5475  030D  0020               	movlb	0	; select bank0
  5476  030E  00A5               	movwf	printf@f
  5477  030F  3091               	movlw	high ((STR_7+21)| (0+32768))
  5478  0310  00A6               	movwf	printf@f+1
  5479  0311  3185  25B0  3182   	fcall	_printf
  5480                           
  5481                           ;mcp2515.c: 315: uint8_t n;
  5482                           ;mcp2515.c: 316: uint8_t i;
  5483                           ;mcp2515.c: 317: uint8_t mask_sidh;
  5484                           ;mcp2515.c: 318: uint8_t mask_sidl;
  5485                           ;mcp2515.c: 319: for (n=0; n<2; n++) {
  5486  0314  0020               	movlb	0	; select bank0
  5487  0315  01CA               	clrf	can_dump_registers@n
  5488  0316  3002               	movlw	2
  5489  0317  024A               	subwf	can_dump_registers@n,w
  5490  0318  1803               	btfsc	3,0
  5491  0319  2B65               	goto	l2353
  5492  031A                     l2347:	
  5493                           
  5494                           ;mcp2515.c: 320: mask_sidh = read_register(rxmnsidh[n]);
  5495  031A  084A               	movf	can_dump_registers@n,w
  5496  031B  3EB8               	addlw	low (_rxmnsidh| (0+32768))
  5497  031C  0084               	movwf	4
  5498  031D  3093               	movlw	high (_rxmnsidh| (0+32768))
  5499  031E  1803               	skipnc
  5500  031F  3E01               	addlw	1
  5501  0320  0085               	movwf	5
  5502  0321  0800               	movf	0,w	;code access
  5503  0322  318C  24E0  3182   	fcall	_read_register
  5504  0325  0020               	movlb	0	; select bank0
  5505  0326  00C0               	movwf	??_can_dump_registers
  5506  0327  0840               	movf	??_can_dump_registers,w
  5507  0328  00C8               	movwf	can_dump_registers@mask_sidh
  5508                           
  5509                           ;mcp2515.c: 321: mask_sidl = read_register(rxmnsidh[n]+1);
  5510  0329  084A               	movf	can_dump_registers@n,w
  5511  032A  3EB8               	addlw	low (_rxmnsidh| (0+32768))
  5512  032B  0084               	movwf	4
  5513  032C  3093               	movlw	high (_rxmnsidh| (0+32768))
  5514  032D  1803               	skipnc
  5515  032E  3E01               	addlw	1
  5516  032F  0085               	movwf	5
  5517  0330  0800               	movf	0,w	;code access
  5518  0331  3E01               	addlw	1
  5519  0332  318C  24E0  3182   	fcall	_read_register
  5520  0335  0020               	movlb	0	; select bank0
  5521  0336  00C0               	movwf	??_can_dump_registers
  5522  0337  0840               	movf	??_can_dump_registers,w
  5523  0338  00C9               	movwf	can_dump_registers@mask_sidl
  5524                           
  5525                           ;mcp2515.c: 322: printf("RXM%dSIDH RXM%dSIDL: %02x %02x\n", n, n, mask_sidh, mask_sidl);
  5526  0339  307A               	movlw	low (STR_46| (0+32768))
  5527  033A  00A5               	movwf	printf@f
  5528  033B  3091               	movlw	high (STR_46| (0+32768))
  5529  033C  00A6               	movwf	printf@f+1
  5530  033D  084A               	movf	can_dump_registers@n,w
  5531  033E  00C0               	movwf	??_can_dump_registers
  5532  033F  01C1               	clrf	??_can_dump_registers+1
  5533  0340  0840               	movf	??_can_dump_registers,w
  5534  0341  00A7               	movwf	?_printf+2
  5535  0342  0841               	movf	??_can_dump_registers+1,w
  5536  0343  00A8               	movwf	?_printf+3
  5537  0344  084A               	movf	can_dump_registers@n,w
  5538  0345  00C2               	movwf	??_can_dump_registers+2
  5539  0346  01C3               	clrf	??_can_dump_registers+3
  5540  0347  0842               	movf	??_can_dump_registers+2,w
  5541  0348  00A9               	movwf	?_printf+4
  5542  0349  0843               	movf	??_can_dump_registers+3,w
  5543  034A  00AA               	movwf	?_printf+5
  5544  034B  0848               	movf	can_dump_registers@mask_sidh,w
  5545  034C  00C4               	movwf	??_can_dump_registers+4
  5546  034D  01C5               	clrf	??_can_dump_registers+5
  5547  034E  0844               	movf	??_can_dump_registers+4,w
  5548  034F  00AB               	movwf	?_printf+6
  5549  0350  0845               	movf	??_can_dump_registers+5,w
  5550  0351  00AC               	movwf	?_printf+7
  5551  0352  0849               	movf	can_dump_registers@mask_sidl,w
  5552  0353  00C6               	movwf	??_can_dump_registers+6
  5553  0354  01C7               	clrf	??_can_dump_registers+7
  5554  0355  0846               	movf	??_can_dump_registers+6,w
  5555  0356  00AD               	movwf	?_printf+8
  5556  0357  0847               	movf	??_can_dump_registers+7,w
  5557  0358  00AE               	movwf	?_printf+9
  5558  0359  3185  25B0  3182   	fcall	_printf
  5559  035C  3001               	movlw	1
  5560  035D  0020               	movlb	0	; select bank0
  5561  035E  00C0               	movwf	??_can_dump_registers
  5562  035F  0840               	movf	??_can_dump_registers,w
  5563  0360  07CA               	addwf	can_dump_registers@n,f
  5564  0361  3002               	movlw	2
  5565  0362  024A               	subwf	can_dump_registers@n,w
  5566  0363  1C03               	skipc
  5567  0364  2B1A               	goto	l2347
  5568  0365                     l2353:	
  5569                           
  5570                           ;mcp2515.c: 323: }
  5571                           ;mcp2515.c: 324: for (n=0; n<6; n++) {
  5572  0365  01CA               	clrf	can_dump_registers@n
  5573  0366  3006               	movlw	6
  5574  0367  024A               	subwf	can_dump_registers@n,w
  5575  0368  1803               	btfsc	3,0
  5576  0369  2BB5               	goto	l2365
  5577  036A                     l2359:	
  5578                           
  5579                           ;mcp2515.c: 325: mask_sidh = read_register(rxfnsidh[n]);
  5580  036A  084A               	movf	can_dump_registers@n,w
  5581  036B  3E9B               	addlw	low (_rxfnsidh| (0+32768))
  5582  036C  0084               	movwf	4
  5583  036D  3093               	movlw	high (_rxfnsidh| (0+32768))
  5584  036E  1803               	skipnc
  5585  036F  3E01               	addlw	1
  5586  0370  0085               	movwf	5
  5587  0371  0800               	movf	0,w	;code access
  5588  0372  318C  24E0  3182   	fcall	_read_register
  5589  0375  0020               	movlb	0	; select bank0
  5590  0376  00C0               	movwf	??_can_dump_registers
  5591  0377  0840               	movf	??_can_dump_registers,w
  5592  0378  00C8               	movwf	can_dump_registers@mask_sidh
  5593                           
  5594                           ;mcp2515.c: 326: mask_sidl = read_register(rxfnsidh[n]+1);
  5595  0379  084A               	movf	can_dump_registers@n,w
  5596  037A  3E9B               	addlw	low (_rxfnsidh| (0+32768))
  5597  037B  0084               	movwf	4
  5598  037C  3093               	movlw	high (_rxfnsidh| (0+32768))
  5599  037D  1803               	skipnc
  5600  037E  3E01               	addlw	1
  5601  037F  0085               	movwf	5
  5602  0380  0800               	movf	0,w	;code access
  5603  0381  3E01               	addlw	1
  5604  0382  318C  24E0  3182   	fcall	_read_register
  5605  0385  0020               	movlb	0	; select bank0
  5606  0386  00C0               	movwf	??_can_dump_registers
  5607  0387  0840               	movf	??_can_dump_registers,w
  5608  0388  00C9               	movwf	can_dump_registers@mask_sidl
  5609                           
  5610                           ;mcp2515.c: 327: printf("RXF%dSIDH RXF%dSIDL: %02x %02x\n", n, n, mask_sidh, mask_sidl);
  5611  0389  305A               	movlw	low (STR_47| (0+32768))
  5612  038A  00A5               	movwf	printf@f
  5613  038B  3091               	movlw	high (STR_47| (0+32768))
  5614  038C  00A6               	movwf	printf@f+1
  5615  038D  084A               	movf	can_dump_registers@n,w
  5616  038E  00C0               	movwf	??_can_dump_registers
  5617  038F  01C1               	clrf	??_can_dump_registers+1
  5618  0390  0840               	movf	??_can_dump_registers,w
  5619  0391  00A7               	movwf	?_printf+2
  5620  0392  0841               	movf	??_can_dump_registers+1,w
  5621  0393  00A8               	movwf	?_printf+3
  5622  0394  084A               	movf	can_dump_registers@n,w
  5623  0395  00C2               	movwf	??_can_dump_registers+2
  5624  0396  01C3               	clrf	??_can_dump_registers+3
  5625  0397  0842               	movf	??_can_dump_registers+2,w
  5626  0398  00A9               	movwf	?_printf+4
  5627  0399  0843               	movf	??_can_dump_registers+3,w
  5628  039A  00AA               	movwf	?_printf+5
  5629  039B  0848               	movf	can_dump_registers@mask_sidh,w
  5630  039C  00C4               	movwf	??_can_dump_registers+4
  5631  039D  01C5               	clrf	??_can_dump_registers+5
  5632  039E  0844               	movf	??_can_dump_registers+4,w
  5633  039F  00AB               	movwf	?_printf+6
  5634  03A0  0845               	movf	??_can_dump_registers+5,w
  5635  03A1  00AC               	movwf	?_printf+7
  5636  03A2  0849               	movf	can_dump_registers@mask_sidl,w
  5637  03A3  00C6               	movwf	??_can_dump_registers+6
  5638  03A4  01C7               	clrf	??_can_dump_registers+7
  5639  03A5  0846               	movf	??_can_dump_registers+6,w
  5640  03A6  00AD               	movwf	?_printf+8
  5641  03A7  0847               	movf	??_can_dump_registers+7,w
  5642  03A8  00AE               	movwf	?_printf+9
  5643  03A9  3185  25B0  3182   	fcall	_printf
  5644  03AC  3001               	movlw	1
  5645  03AD  0020               	movlb	0	; select bank0
  5646  03AE  00C0               	movwf	??_can_dump_registers
  5647  03AF  0840               	movf	??_can_dump_registers,w
  5648  03B0  07CA               	addwf	can_dump_registers@n,f
  5649  03B1  3006               	movlw	6
  5650  03B2  024A               	subwf	can_dump_registers@n,w
  5651  03B3  1C03               	skipc
  5652  03B4  2B6A               	goto	l2359
  5653  03B5                     l2365:	
  5654                           
  5655                           ;mcp2515.c: 328: }
  5656                           ;mcp2515.c: 329: printf("\n");
  5657  03B5  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5658  03B6  00A5               	movwf	printf@f
  5659  03B7  3091               	movlw	high ((STR_7+21)| (0+32768))
  5660  03B8  00A6               	movwf	printf@f+1
  5661  03B9  3185  25B0  3182   	fcall	_printf
  5662                           
  5663                           ;mcp2515.c: 331: printf("CANCTRL: %02x\n", read_register(0x0f));
  5664  03BC  30F5               	movlw	low (STR_49| (0+32768))
  5665  03BD  0020               	movlb	0	; select bank0
  5666  03BE  00A5               	movwf	printf@f
  5667  03BF  3092               	movlw	high (STR_49| (0+32768))
  5668  03C0  00A6               	movwf	printf@f+1
  5669  03C1  300F               	movlw	15
  5670  03C2  318C  24E0  3182   	fcall	_read_register
  5671  03C5  0020               	movlb	0	; select bank0
  5672  03C6  00C0               	movwf	??_can_dump_registers
  5673  03C7  01C1               	clrf	??_can_dump_registers+1
  5674  03C8  0840               	movf	??_can_dump_registers,w
  5675  03C9  00A7               	movwf	?_printf+2
  5676  03CA  0841               	movf	??_can_dump_registers+1,w
  5677  03CB  00A8               	movwf	?_printf+3
  5678  03CC  3185  25B0  3182   	fcall	_printf
  5679                           
  5680                           ;mcp2515.c: 332: printf("CANSTAT: %02x\n", read_register(0x0e));
  5681  03CF  3004               	movlw	low (STR_19| (0+32768))
  5682  03D0  0020               	movlb	0	; select bank0
  5683  03D1  00A5               	movwf	printf@f
  5684  03D2  3093               	movlw	high (STR_19| (0+32768))
  5685  03D3  00A6               	movwf	printf@f+1
  5686  03D4  300E               	movlw	14
  5687  03D5  318C  24E0  3182   	fcall	_read_register
  5688  03D8  0020               	movlb	0	; select bank0
  5689  03D9  00C0               	movwf	??_can_dump_registers
  5690  03DA  01C1               	clrf	??_can_dump_registers+1
  5691  03DB  0840               	movf	??_can_dump_registers,w
  5692  03DC  00A7               	movwf	?_printf+2
  5693  03DD  0841               	movf	??_can_dump_registers+1,w
  5694  03DE  00A8               	movwf	?_printf+3
  5695  03DF  3185  25B0  3182   	fcall	_printf
  5696                           
  5697                           ;mcp2515.c: 333: printf("---\n");
  5698  03E2  30F6               	movlw	low ((STR_7+18)| (0+32768))
  5699  03E3  0020               	movlb	0	; select bank0
  5700  03E4  00A5               	movwf	printf@f
  5701  03E5  3091               	movlw	high ((STR_7+18)| (0+32768))
  5702  03E6  00A6               	movwf	printf@f+1
  5703  03E7  3185  25B0         	fcall	_printf
  5704  03E9  0008               	return
  5705  03EA                     __end_of_can_dump_registers:	
  5706                           
  5707                           	psect	text11
  5708  0CE0                     __ptext11:	
  5709 ;; *************** function _read_register *****************
  5710 ;; Defined at:
  5711 ;;		line 288 in file "mcp2515.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  addr            1    wreg     unsigned char 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  addr            1    1[BANK0 ] unsigned char 
  5716 ;;  read_buf        3    2[BANK0 ] unsigned char [3]
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      unsigned char 
  5719 ;; Registers used:
  5720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;Total ram usage:        5 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    3
  5733 ;; This function calls:
  5734 ;;		_SPI_exchange
  5735 ;; This function is called by:
  5736 ;;		_can_dump_registers
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           
  5741                           ;psect for function _read_register
  5742  0CE0                     _read_register:	
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5746                           ;read_register@addr stored from wreg
  5747  0CE0  0020               	movlb	0	; select bank0
  5748  0CE1  00A1               	movwf	read_register@addr
  5749                           
  5750                           ;mcp2515.c: 289: uint8_t read_buf[3];
  5751                           ;mcp2515.c: 290: read_buf[0] = 0b00000011;
  5752  0CE2  3003               	movlw	3
  5753  0CE3  00A0               	movwf	??_read_register
  5754  0CE4  0820               	movf	??_read_register,w
  5755  0CE5  00A2               	movwf	read_register@read_buf
  5756                           
  5757                           ;mcp2515.c: 291: read_buf[1] = addr;
  5758  0CE6  0821               	movf	read_register@addr,w
  5759  0CE7  00A0               	movwf	??_read_register
  5760  0CE8  0820               	movf	??_read_register,w
  5761  0CE9  00A3               	movwf	read_register@read_buf+1
  5762                           
  5763                           ;mcp2515.c: 292: read_buf[2] = 0x00;
  5764  0CEA  01A4               	clrf	read_register@read_buf+2
  5765                           
  5766                           ;mcp2515.c: 293: SPI_exchange(read_buf, 3);
  5767  0CEB  3003               	movlw	3
  5768  0CEC  00A0               	movwf	??_read_register
  5769  0CED  0820               	movf	??_read_register,w
  5770  0CEE  00F8               	movwf	SPI_exchange@len
  5771  0CEF  3022               	movlw	(low (read_register@read_buf| 0))& (0+255)
  5772  0CF0  318C  24CB         	fcall	_SPI_exchange
  5773                           
  5774                           ;mcp2515.c: 294: return read_buf[2];
  5775  0CF2  0020               	movlb	0	; select bank0
  5776  0CF3  0824               	movf	read_register@read_buf+2,w
  5777  0CF4  0008               	return
  5778  0CF5                     __end_of_read_register:	
  5779                           
  5780                           	psect	text12
  5781  0D73                     __ptext12:	
  5782 ;; *************** function _can_baudrate *****************
  5783 ;; Defined at:
  5784 ;;		line 270 in file "mcp2515.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  bpr             1    wreg     unsigned char 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  bpr             1   41[BANK0 ] unsigned char 
  5789 ;;  cnf1_buf        4   44[BANK0 ] unsigned char [4]
  5790 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  5791 ;;  mask            1   42[BANK0 ] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      unsigned char 
  5794 ;; Registers used:
  5795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;Total ram usage:        9 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    4
  5808 ;; This function calls:
  5809 ;;		_SPI_exchange
  5810 ;;		_can_ope_mode
  5811 ;; This function is called by:
  5812 ;;		_main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _can_baudrate
  5818  0D73                     _can_baudrate:	
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5822                           ;can_baudrate@bpr stored from wreg
  5823  0D73  0020               	movlb	0	; select bank0
  5824  0D74  00C9               	movwf	can_baudrate@bpr
  5825                           
  5826                           ;mcp2515.c: 271: can_ope_mode(0b10000000);
  5827  0D75  3080               	movlw	128
  5828  0D76  318D  25FE  318D   	fcall	_can_ope_mode
  5829                           
  5830                           ;mcp2515.c: 273: uint8_t mask = 0b00111111;
  5831  0D79  303F               	movlw	63
  5832  0D7A  0020               	movlb	0	; select bank0
  5833  0D7B  00C7               	movwf	??_can_baudrate
  5834  0D7C  0847               	movf	??_can_baudrate,w
  5835  0D7D  00CA               	movwf	can_baudrate@mask
  5836                           
  5837                           ;mcp2515.c: 274: uint8_t cnf1_buf[4];
  5838                           ;mcp2515.c: 275: cnf1_buf[0] = 0b00000101;
  5839  0D7E  3005               	movlw	5
  5840  0D7F  00C7               	movwf	??_can_baudrate
  5841  0D80  0847               	movf	??_can_baudrate,w
  5842  0D81  00CC               	movwf	can_baudrate@cnf1_buf
  5843                           
  5844                           ;mcp2515.c: 276: cnf1_buf[1] = 0x2a;
  5845  0D82  302A               	movlw	42
  5846  0D83  00C7               	movwf	??_can_baudrate
  5847  0D84  0847               	movf	??_can_baudrate,w
  5848  0D85  00CD               	movwf	can_baudrate@cnf1_buf+1
  5849                           
  5850                           ;mcp2515.c: 277: cnf1_buf[2] = mask;
  5851  0D86  084A               	movf	can_baudrate@mask,w
  5852  0D87  00C7               	movwf	??_can_baudrate
  5853  0D88  0847               	movf	??_can_baudrate,w
  5854  0D89  00CE               	movwf	can_baudrate@cnf1_buf+2
  5855                           
  5856                           ;mcp2515.c: 278: cnf1_buf[3] = bpr;
  5857  0D8A  0849               	movf	can_baudrate@bpr,w
  5858  0D8B  00C7               	movwf	??_can_baudrate
  5859  0D8C  0847               	movf	??_can_baudrate,w
  5860  0D8D  00CF               	movwf	can_baudrate@cnf1_buf+3
  5861                           
  5862                           ;mcp2515.c: 279: uint8_t bytes_written = SPI_exchange(cnf1_buf, 4);
  5863  0D8E  3004               	movlw	4
  5864  0D8F  00C7               	movwf	??_can_baudrate
  5865  0D90  0847               	movf	??_can_baudrate,w
  5866  0D91  00F8               	movwf	SPI_exchange@len
  5867  0D92  304C               	movlw	(low (can_baudrate@cnf1_buf| 0))& (0+255)
  5868  0D93  318C  24CB  318D   	fcall	_SPI_exchange
  5869  0D96  0020               	movlb	0	; select bank0
  5870  0D97  00C8               	movwf	??_can_baudrate+1
  5871  0D98  0848               	movf	??_can_baudrate+1,w
  5872  0D99  00CB               	movwf	can_baudrate@bytes_written
  5873                           
  5874                           ;mcp2515.c: 280: can_ope_mode(operation_mode);
  5875  0D9A  086F               	movf	_operation_mode,w
  5876  0D9B  318D  25FE         	fcall	_can_ope_mode
  5877                           
  5878                           ;mcp2515.c: 284: return 0;
  5879                           ;	Return value of _can_baudrate is never used
  5880                           
  5881                           ;mcp2515.c: 283: } else {
  5882                           
  5883                           ;mcp2515.c: 282: return 1;
  5884                           ;	Return value of _can_baudrate is never used
  5885  0D9D  0008               	return
  5886  0D9E                     __end_of_can_baudrate:	
  5887                           
  5888                           	psect	text13
  5889  0DFE                     __ptext13:	
  5890 ;; *************** function _can_ope_mode *****************
  5891 ;; Defined at:
  5892 ;;		line 75 in file "mcp2515.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  ope_mode        1    wreg     unsigned char 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  5897 ;;  can_ctrl_buf    3   35[BANK0 ] unsigned char [3]
  5898 ;;  bytes_writte    1   34[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      unsigned char 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;Total ram usage:        7 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    3
  5915 ;; This function calls:
  5916 ;;		_SPI_exchange
  5917 ;;		_printf
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;;		_can_init
  5921 ;;		_can_set_mask
  5922 ;;		_can_baudrate
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           
  5927                           ;psect for function _can_ope_mode
  5928  0DFE                     _can_ope_mode:	
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5932                           ;can_ope_mode@ope_mode stored from wreg
  5933  0DFE  0020               	movlb	0	; select bank0
  5934  0DFF  00C6               	movwf	can_ope_mode@ope_mode
  5935                           
  5936                           ;mcp2515.c: 76: uint8_t can_ctrl_buf[3];
  5937                           ;mcp2515.c: 77: can_ctrl_buf[0] = 0b00000010;
  5938  0E00  3002               	movlw	2
  5939  0E01  00C0               	movwf	??_can_ope_mode
  5940  0E02  0840               	movf	??_can_ope_mode,w
  5941  0E03  00C3               	movwf	can_ope_mode@can_ctrl_buf
  5942                           
  5943                           ;mcp2515.c: 78: can_ctrl_buf[1] = 0x0f;
  5944  0E04  300F               	movlw	15
  5945  0E05  00C0               	movwf	??_can_ope_mode
  5946  0E06  0840               	movf	??_can_ope_mode,w
  5947  0E07  00C4               	movwf	can_ope_mode@can_ctrl_buf+1
  5948                           
  5949                           ;mcp2515.c: 79: can_ctrl_buf[2] = ope_mode;
  5950  0E08  0846               	movf	can_ope_mode@ope_mode,w
  5951  0E09  00C0               	movwf	??_can_ope_mode
  5952  0E0A  0840               	movf	??_can_ope_mode,w
  5953  0E0B  00C5               	movwf	can_ope_mode@can_ctrl_buf+2
  5954                           
  5955                           ;mcp2515.c: 80: uint8_t bytes_written = SPI_exchange(can_ctrl_buf, 3);
  5956  0E0C  3003               	movlw	3
  5957  0E0D  00C0               	movwf	??_can_ope_mode
  5958  0E0E  0840               	movf	??_can_ope_mode,w
  5959  0E0F  00F8               	movwf	SPI_exchange@len
  5960  0E10  3043               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  5961  0E11  318C  24CB  318D   	fcall	_SPI_exchange
  5962  0E14  0020               	movlb	0	; select bank0
  5963  0E15  00C1               	movwf	??_can_ope_mode+1
  5964  0E16  0841               	movf	??_can_ope_mode+1,w
  5965  0E17  00C2               	movwf	can_ope_mode@bytes_written
  5966                           
  5967                           ;mcp2515.c: 82: if (ope_mode != 0b10000000) operation_mode = ope_mode;
  5968  0E18  3080               	movlw	128
  5969  0E19  0646               	xorwf	can_ope_mode@ope_mode,w
  5970  0E1A  1903               	btfsc	3,2
  5971  0E1B  2E20               	goto	l2117
  5972  0E1C  0846               	movf	can_ope_mode@ope_mode,w
  5973  0E1D  00C0               	movwf	??_can_ope_mode
  5974  0E1E  0840               	movf	??_can_ope_mode,w
  5975  0E1F  00EF               	movwf	_operation_mode
  5976  0E20                     l2117:	
  5977                           
  5978                           ;mcp2515.c: 84: if (bytes_written == 3) {
  5979  0E20  3003               	movlw	3
  5980  0E21  0642               	xorwf	can_ope_mode@bytes_written,w
  5981  0E22  1D03               	btfss	3,2
  5982  0E23  0008               	return
  5983                           
  5984                           ;mcp2515.c: 85: can_ctrl_buf[0] = 0b00000011;
  5985  0E24  3003               	movlw	3
  5986  0E25  00C0               	movwf	??_can_ope_mode
  5987  0E26  0840               	movf	??_can_ope_mode,w
  5988  0E27  00C3               	movwf	can_ope_mode@can_ctrl_buf
  5989                           
  5990                           ;mcp2515.c: 86: can_ctrl_buf[1] = 0x0e;
  5991  0E28  300E               	movlw	14
  5992  0E29  00C0               	movwf	??_can_ope_mode
  5993  0E2A  0840               	movf	??_can_ope_mode,w
  5994  0E2B  00C4               	movwf	can_ope_mode@can_ctrl_buf+1
  5995                           
  5996                           ;mcp2515.c: 87: bytes_written = SPI_exchange(can_ctrl_buf, 3);
  5997  0E2C  3003               	movlw	3
  5998  0E2D  00C0               	movwf	??_can_ope_mode
  5999  0E2E  0840               	movf	??_can_ope_mode,w
  6000  0E2F  00F8               	movwf	SPI_exchange@len
  6001  0E30  3043               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  6002  0E31  318C  24CB  318D   	fcall	_SPI_exchange
  6003  0E34  0020               	movlb	0	; select bank0
  6004  0E35  00C1               	movwf	??_can_ope_mode+1
  6005  0E36  0841               	movf	??_can_ope_mode+1,w
  6006  0E37  00C2               	movwf	can_ope_mode@bytes_written
  6007                           
  6008                           ;mcp2515.c: 88: if (mode.debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  6009  0E38  0869               	movf	_mode,w
  6010  0E39  1903               	btfsc	3,2
  6011  0E3A  0008               	return
  6012  0E3B  3004               	movlw	low (STR_19| (0+32768))
  6013  0E3C  00A5               	movwf	printf@f
  6014  0E3D  3093               	movlw	high (STR_19| (0+32768))
  6015  0E3E  00A6               	movwf	printf@f+1
  6016  0E3F  0845               	movf	can_ope_mode@can_ctrl_buf+2,w
  6017  0E40  00C0               	movwf	??_can_ope_mode
  6018  0E41  01C1               	clrf	??_can_ope_mode+1
  6019  0E42  0840               	movf	??_can_ope_mode,w
  6020  0E43  00A7               	movwf	?_printf+2
  6021  0E44  0841               	movf	??_can_ope_mode+1,w
  6022  0E45  00A8               	movwf	?_printf+3
  6023  0E46  3185  25B0         	fcall	_printf
  6024                           
  6025                           ;mcp2515.c: 91: return 0;
  6026                           ;	Return value of _can_ope_mode is never used
  6027                           
  6028                           ;mcp2515.c: 90: } else {
  6029                           
  6030                           ;mcp2515.c: 89: return 1;
  6031                           ;	Return value of _can_ope_mode is never used
  6032  0E48  0008               	return
  6033  0E49                     __end_of_can_ope_mode:	
  6034                           
  6035                           	psect	text14
  6036  05B0                     __ptext14:	
  6037 ;; *************** function _printf *****************
  6038 ;; Defined at:
  6039 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  f               2    5[BANK0 ] PTR const unsigned char 
  6042 ;;		 -> STR_51(5), STR_50(15), STR_49(15), STR_48(2), 
  6043 ;;		 -> STR_47(32), STR_46(32), STR_45(2), STR_44(16), 
  6044 ;;		 -> STR_43(16), STR_42(2), STR_41(12), STR_40(12), 
  6045 ;;		 -> STR_39(12), STR_38(2), STR_37(12), STR_36(12), 
  6046 ;;		 -> STR_35(5), STR_34(13), STR_33(13), STR_32(18), 
  6047 ;;		 -> STR_31(17), STR_30(17), STR_29(20), STR_28(14), 
  6048 ;;		 -> STR_27(14), STR_26(14), STR_25(15), STR_24(16), 
  6049 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(21), 
  6050 ;;		 -> STR_19(15), STR_18(22), STR_17(44), STR_16(26), 
  6051 ;;		 -> STR_15(21), STR_14(25), STR_13(42), STR_12(38), 
  6052 ;;		 -> STR_11(58), STR_10(54), STR_9(59), STR_8(51), 
  6053 ;;		 -> STR_7(23), STR_6(3), STR_5(4), STR_4(2), 
  6054 ;;		 -> STR_3(6), STR_2(6), STR_1(7), 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  idx             1   19[BANK0 ] unsigned char 
  6057 ;;  tmpval          4    0        struct .
  6058 ;;  width           2   29[BANK0 ] int 
  6059 ;;  val             2   26[BANK0 ] unsigned int 
  6060 ;;  len             2   23[BANK0 ] unsigned int 
  6061 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  6062 ;;		 -> STR_52(7), printf@c(1), receive@rx_buf(15), main@buf(9), 
  6063 ;;  c               1   31[BANK0 ] char 
  6064 ;;  flag            1   28[BANK0 ] unsigned char 
  6065 ;;  ap              1   25[BANK0 ] PTR void [1]
  6066 ;;		 -> ?_printf(2), 
  6067 ;;  prec            1   20[BANK0 ] char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2    5[BANK0 ] int 
  6070 ;; Registers used:
  6071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6077 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;Total ram usage:       27 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    2
  6084 ;; This function calls:
  6085 ;;		___lwdiv
  6086 ;;		___lwmod
  6087 ;;		___wmul
  6088 ;;		_isdigit
  6089 ;;		_putch
  6090 ;; This function is called by:
  6091 ;;		_receive_handler
  6092 ;;		_main
  6093 ;;		_can_ope_mode
  6094 ;;		_can_set_mask
  6095 ;;		_receive
  6096 ;;		_can_send
  6097 ;;		_can_status_check
  6098 ;;		_can_dump_registers
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _printf
  6104  05B0                     _printf:	
  6105                           
  6106                           ;doprnt.c: 466: va_list ap;
  6107                           ;doprnt.c: 499: signed char c;
  6108                           ;doprnt.c: 501: int width;
  6109                           ;doprnt.c: 506: signed char prec;
  6110                           ;doprnt.c: 508: unsigned char flag;
  6111                           ;doprnt.c: 523: union {
  6112                           ;doprnt.c: 524: unsigned long vd;
  6113                           ;doprnt.c: 525: double integ;
  6114                           ;doprnt.c: 526: } tmpval;
  6115                           ;doprnt.c: 528: unsigned int val;
  6116                           ;doprnt.c: 529: unsigned len;
  6117                           ;doprnt.c: 530: const char * cp;
  6118                           ;doprnt.c: 533: *ap = __va_start();
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6122  05B0  3027               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6123  05B1  0020               	movlb	0	; select bank0
  6124  05B2  00AF               	movwf	??_printf
  6125  05B3  082F               	movf	??_printf,w
  6126  05B4  00B9               	movwf	printf@ap
  6127  05B5                     l2039:	
  6128                           ;doprnt.c: 536: while(c = *f++) {
  6129                           
  6130  05B5  0020               	movlb	0	; select bank0
  6131  05B6  0826               	movf	printf@f+1,w
  6132  05B7  00B0               	movwf	??_printf+1
  6133  05B8  0825               	movf	printf@f,w
  6134  05B9  00AF               	movwf	??_printf
  6135  05BA  0AA5               	incf	printf@f,f
  6136  05BB  1903               	skipnz
  6137  05BC  0AA6               	incf	printf@f+1,f
  6138  05BD  082F               	movf	??_printf,w
  6139  05BE  0084               	movwf	4
  6140  05BF  0830               	movf	??_printf+1,w
  6141  05C0  0085               	movwf	5
  6142  05C1  0800               	movf	0,w	;code access
  6143  05C2  00B1               	movwf	??_printf+2
  6144  05C3  0831               	movf	??_printf+2,w
  6145  05C4  00BF               	movwf	printf@c
  6146  05C5  083F               	movf	printf@c,w
  6147  05C6  1903               	btfsc	3,2
  6148  05C7  0008               	return
  6149                           
  6150                           ;doprnt.c: 538: if(c != '%')
  6151  05C8  3025               	movlw	37
  6152  05C9  063F               	xorwf	printf@c,w
  6153  05CA  1903               	btfsc	3,2
  6154  05CB  2DD1               	goto	l1891
  6155                           
  6156                           ;doprnt.c: 540: {
  6157                           ;doprnt.c: 541: (putch(c) );
  6158  05CC  083F               	movf	printf@c,w
  6159  05CD  318C  2466  3185   	fcall	_putch
  6160                           
  6161                           ;doprnt.c: 542: continue;
  6162  05D0  2DB5               	goto	l2039
  6163  05D1                     l1891:	
  6164                           
  6165                           ;doprnt.c: 543: }
  6166                           ;doprnt.c: 546: width = 0;
  6167  05D1  0020               	movlb	0	; select bank0
  6168  05D2  01BD               	clrf	printf@width
  6169  05D3  01BE               	clrf	printf@width+1
  6170                           
  6171                           ;doprnt.c: 548: flag = 0;
  6172  05D4  01BC               	clrf	printf@flag
  6173                           
  6174                           ;doprnt.c: 551: switch(*f) {
  6175                           
  6176                           ;doprnt.c: 550: for(;;) {
  6177  05D5  2DDB               	goto	l1897
  6178  05D6                     l379:	
  6179                           ;doprnt.c: 579: case '0':
  6180                           
  6181                           
  6182                           ;doprnt.c: 580: flag |= 0x04;
  6183  05D6  153C               	bsf	printf@flag,2
  6184                           
  6185                           ;doprnt.c: 581: f++;
  6186  05D7  3001               	movlw	1
  6187  05D8  07A5               	addwf	printf@f,f
  6188  05D9  3000               	movlw	0
  6189  05DA  3DA6               	addwfc	printf@f+1,f
  6190  05DB                     l1897:	
  6191                           ;doprnt.c: 584: }
  6192                           
  6193                           ;doprnt.c: 582: continue;
  6194                           
  6195  05DB  0825               	movf	printf@f,w
  6196  05DC  0084               	movwf	4
  6197  05DD  0826               	movf	printf@f+1,w
  6198  05DE  0085               	movwf	5
  6199  05DF  0800               	movf	0,w	;code access
  6200                           
  6201                           ; Switch size 1, requested type "space"
  6202                           ; Number of cases is 1, Range of values is 48 to 48
  6203                           ; switch strategies available:
  6204                           ; Name         Instructions Cycles
  6205                           ; simple_byte            4     3 (average)
  6206                           ; direct_byte           11     9 (fixed)
  6207                           ; jumptable            263     9 (fixed)
  6208                           ;	Chosen strategy is simple_byte
  6209  05E0  3A30               	xorlw	48	; case 48
  6210  05E1  1903               	skipnz
  6211  05E2  2DD6               	goto	l379
  6212  05E3  2DE4               	goto	l1899
  6213  05E4                     l1899:	
  6214                           ;doprnt.c: 586: }
  6215                           
  6216                           ;doprnt.c: 585: break;
  6217                           
  6218                           
  6219                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6220  05E4  0825               	movf	printf@f,w
  6221  05E5  0084               	movwf	4
  6222  05E6  0826               	movf	printf@f+1,w
  6223  05E7  0085               	movwf	5
  6224  05E8  0800               	movf	0,w	;code access
  6225  05E9  318C  24AE  3185   	fcall	_isdigit
  6226  05EC  1C03               	btfss	3,0
  6227  05ED  2E8F               	goto	l1951
  6228                           
  6229                           ;doprnt.c: 598: width = 0;
  6230  05EE  0020               	movlb	0	; select bank0
  6231  05EF  01BD               	clrf	printf@width
  6232  05F0  01BE               	clrf	printf@width+1
  6233  05F1                     l1903:	
  6234                           ;doprnt.c: 599: do {
  6235                           
  6236                           
  6237                           ;doprnt.c: 600: width *= 10;
  6238  05F1  300A               	movlw	10
  6239  05F2  00F0               	movwf	___wmul@multiplier
  6240  05F3  3000               	movlw	0
  6241  05F4  00F1               	movwf	___wmul@multiplier+1
  6242  05F5  0020               	movlb	0	; select bank0
  6243  05F6  083E               	movf	printf@width+1,w
  6244  05F7  00F3               	movwf	___wmul@multiplicand+1
  6245  05F8  083D               	movf	printf@width,w
  6246  05F9  00F2               	movwf	___wmul@multiplicand
  6247  05FA  318D  250C  3185   	fcall	___wmul
  6248  05FD  0871               	movf	?___wmul+1,w
  6249  05FE  0020               	movlb	0	; select bank0
  6250  05FF  00BE               	movwf	printf@width+1
  6251  0600  0870               	movf	?___wmul,w
  6252  0601  00BD               	movwf	printf@width
  6253                           
  6254                           ;doprnt.c: 601: width += *f++ - '0';
  6255  0602  0825               	movf	printf@f,w
  6256  0603  0084               	movwf	4
  6257  0604  0826               	movf	printf@f+1,w
  6258  0605  0085               	movwf	5
  6259  0606  0800               	movf	0,w	;code access
  6260  0607  3ED0               	addlw	208
  6261  0608  00AF               	movwf	??_printf
  6262  0609  30FF               	movlw	255
  6263  060A  1803               	skipnc
  6264  060B  3000               	movlw	0
  6265  060C  00B0               	movwf	??_printf+1
  6266  060D  082F               	movf	??_printf,w
  6267  060E  07BD               	addwf	printf@width,f
  6268  060F  0830               	movf	??_printf+1,w
  6269  0610  3DBE               	addwfc	printf@width+1,f
  6270  0611  3001               	movlw	1
  6271  0612  07A5               	addwf	printf@f,f
  6272  0613  3000               	movlw	0
  6273  0614  3DA6               	addwfc	printf@f+1,f
  6274                           
  6275                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6276  0615  0825               	movf	printf@f,w
  6277  0616  0084               	movwf	4
  6278  0617  0826               	movf	printf@f+1,w
  6279  0618  0085               	movwf	5
  6280  0619  0800               	movf	0,w	;code access
  6281  061A  318C  24AE  3185   	fcall	_isdigit
  6282  061D  1C03               	btfss	3,0
  6283  061E  2E8F               	goto	l1951
  6284  061F  2DF1               	goto	l1903
  6285  0620                     l392:	
  6286                           ;doprnt.c: 718: case 'x':
  6287                           
  6288                           ;doprnt.c: 698: case 'i':
  6289                           ;doprnt.c: 699: break;
  6290                           
  6291                           ;doprnt.c: 697: case 'd':
  6292                           
  6293                           ;doprnt.c: 638: goto alldone;
  6294                           
  6295                           ;doprnt.c: 637: case 0:
  6296                           
  6297                           ;doprnt.c: 608: }
  6298                           ;doprnt.c: 635: switch(c = *f++) {
  6299                           
  6300                           
  6301                           ;doprnt.c: 721: flag |= 0x80;
  6302  0620  17BC               	bsf	printf@flag,7
  6303                           
  6304                           ;doprnt.c: 723: break;
  6305  0621  2EB0               	goto	l391
  6306  0622                     l1911:	
  6307                           ;doprnt.c: 728: case 's':
  6308                           
  6309                           
  6310                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6311  0622  0839               	movf	printf@ap,w
  6312  0623  0086               	movwf	6
  6313  0624  0187               	clrf	7
  6314  0625  0801               	movf	1,w
  6315  0626  00B5               	movwf	printf@cp
  6316  0627  3000               	movlw	0
  6317  0628  00B6               	movwf	printf@cp+1
  6318  0629  3001               	movlw	1
  6319  062A  00AF               	movwf	??_printf
  6320  062B  082F               	movf	??_printf,w
  6321  062C  07B9               	addwf	printf@ap,f
  6322                           
  6323                           ;doprnt.c: 740: if(!cp)
  6324  062D  0835               	movf	printf@cp,w
  6325  062E  0436               	iorwf	printf@cp+1,w
  6326  062F  1D03               	btfss	3,2
  6327  0630  2E35               	goto	l1919
  6328                           
  6329                           ;doprnt.c: 741: cp = "(null)";
  6330  0631  308D               	movlw	low (STR_52| (0+32768))
  6331  0632  00B5               	movwf	printf@cp
  6332  0633  3093               	movlw	high (STR_52| (0+32768))
  6333  0634  00B6               	movwf	printf@cp+1
  6334  0635                     l1919:	
  6335                           
  6336                           ;doprnt.c: 745: len = 0;
  6337  0635  01B7               	clrf	printf@len
  6338  0636  01B8               	clrf	printf@len+1
  6339  0637                     l1923:	
  6340                           ;doprnt.c: 746: while(cp[len])
  6341                           
  6342  0637  0835               	movf	printf@cp,w
  6343  0638  0737               	addwf	printf@len,w
  6344  0639  0084               	movwf	4
  6345  063A  0836               	movf	printf@cp+1,w
  6346  063B  3D38               	addwfc	printf@len+1,w
  6347  063C  0085               	movwf	5
  6348  063D  0012               	moviw fsr0++
  6349  063E  1903               	btfsc	3,2
  6350  063F  2E45               	goto	l1925
  6351                           
  6352                           ;doprnt.c: 747: len++;
  6353  0640  3001               	movlw	1
  6354  0641  07B7               	addwf	printf@len,f
  6355  0642  3000               	movlw	0
  6356  0643  3DB8               	addwfc	printf@len+1,f
  6357  0644  2E37               	goto	l1923
  6358  0645                     l1925:	
  6359                           ;doprnt.c: 750: dostring:
  6360                           
  6361                           
  6362                           ;doprnt.c: 757: if(width > len)
  6363  0645  083E               	movf	printf@width+1,w
  6364  0646  0238               	subwf	printf@len+1,w
  6365  0647  1D03               	skipz
  6366  0648  2E4B               	goto	u1585
  6367  0649  083D               	movf	printf@width,w
  6368  064A  0237               	subwf	printf@len,w
  6369  064B                     u1585:	
  6370  064B  1803               	skipnc
  6371  064C  2E52               	goto	l1929
  6372                           
  6373                           ;doprnt.c: 758: width -= len;
  6374  064D  0837               	movf	printf@len,w
  6375  064E  02BD               	subwf	printf@width,f
  6376  064F  0838               	movf	printf@len+1,w
  6377  0650  3BBE               	subwfb	printf@width+1,f
  6378  0651  2E54               	goto	l1933
  6379  0652                     l1929:	
  6380                           
  6381                           ;doprnt.c: 759: else
  6382                           ;doprnt.c: 760: width = 0;
  6383  0652  01BD               	clrf	printf@width
  6384  0653  01BE               	clrf	printf@width+1
  6385  0654                     l1933:	
  6386                           ;doprnt.c: 764: while(width--)
  6387                           
  6388  0654  30FF               	movlw	255
  6389  0655  0020               	movlb	0	; select bank0
  6390  0656  07BD               	addwf	printf@width,f
  6391  0657  30FF               	movlw	255
  6392  0658  3DBE               	addwfc	printf@width+1,f
  6393  0659  0A3D               	incf	printf@width,w
  6394  065A  1903               	btfsc	3,2
  6395  065B  0A3E               	incf	printf@width+1,w
  6396  065C  1903               	btfsc	3,2
  6397  065D  2E70               	goto	l1939
  6398                           
  6399                           ;doprnt.c: 765: (putch(' ') );
  6400  065E  3020               	movlw	32
  6401  065F  318C  2466  3185   	fcall	_putch
  6402  0662  2E54               	goto	l1933
  6403  0663                     l1935:	
  6404                           ;doprnt.c: 767: while(len--)
  6405                           
  6406                           
  6407                           ;doprnt.c: 768: (putch(*cp++) );
  6408  0663  0835               	movf	printf@cp,w
  6409  0664  0084               	movwf	4
  6410  0665  0836               	movf	printf@cp+1,w
  6411  0666  0085               	movwf	5
  6412  0667  0800               	movf	0,w	;code access
  6413  0668  318C  2466  3185   	fcall	_putch
  6414  066B  3001               	movlw	1
  6415  066C  0020               	movlb	0	; select bank0
  6416  066D  07B5               	addwf	printf@cp,f
  6417  066E  3000               	movlw	0
  6418  066F  3DB6               	addwfc	printf@cp+1,f
  6419  0670                     l1939:	
  6420  0670  3001               	movlw	1
  6421  0671  02B7               	subwf	printf@len,f
  6422  0672  3000               	movlw	0
  6423  0673  3BB8               	subwfb	printf@len+1,f
  6424  0674  0A37               	incf	printf@len,w
  6425  0675  1D03               	skipz
  6426  0676  2E63               	goto	l1935
  6427  0677  0A38               	incf	printf@len+1,w
  6428  0678  1903               	btfsc	3,2
  6429  0679  2DB5               	goto	l2039
  6430  067A  2E63               	goto	l1935
  6431  067B                     l1941:	
  6432                           ;doprnt.c: 784: case 'c':
  6433                           
  6434                           ;doprnt.c: 774: continue;
  6435                           
  6436                           
  6437                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6438  067B  0839               	movf	printf@ap,w
  6439  067C  0086               	movwf	6
  6440  067D  0187               	clrf	7
  6441  067E  0801               	movf	1,w
  6442  067F  00AF               	movwf	??_printf
  6443  0680  082F               	movf	??_printf,w
  6444  0681  00BF               	movwf	printf@c
  6445  0682  3002               	movlw	2
  6446  0683  00AF               	movwf	??_printf
  6447  0684  082F               	movf	??_printf,w
  6448  0685  07B9               	addwf	printf@ap,f
  6449  0686                     l1945:	
  6450                           ;doprnt.c: 802: default:
  6451                           
  6452                           
  6453                           ;doprnt.c: 805: cp = (char *)&c;
  6454  0686  303F               	movlw	low printf@c
  6455  0687  00B5               	movwf	printf@cp
  6456  0688  3000               	movlw	high printf@c
  6457  0689  00B6               	movwf	printf@cp+1
  6458                           
  6459                           ;doprnt.c: 806: len = 1;
  6460  068A  3001               	movlw	1
  6461  068B  00B7               	movwf	printf@len
  6462  068C  3000               	movlw	0
  6463  068D  00B8               	movwf	printf@len+1
  6464                           
  6465                           ;doprnt.c: 807: goto dostring;
  6466  068E  2E45               	goto	l1925
  6467  068F                     l1951:	
  6468                           ;doprnt.c: 822: }
  6469                           
  6470  068F  0020               	movlb	0	; select bank0
  6471  0690  0826               	movf	printf@f+1,w
  6472  0691  00B0               	movwf	??_printf+1
  6473  0692  0825               	movf	printf@f,w
  6474  0693  00AF               	movwf	??_printf
  6475  0694  0AA5               	incf	printf@f,f
  6476  0695  1903               	skipnz
  6477  0696  0AA6               	incf	printf@f+1,f
  6478  0697  082F               	movf	??_printf,w
  6479  0698  0084               	movwf	4
  6480  0699  0830               	movf	??_printf+1,w
  6481  069A  0085               	movwf	5
  6482  069B  0800               	movf	0,w	;code access
  6483  069C  00BF               	movwf	printf@c
  6484                           
  6485                           ; Switch size 1, requested type "space"
  6486                           ; Number of cases is 6, Range of values is 0 to 120
  6487                           ; switch strategies available:
  6488                           ; Name         Instructions Cycles
  6489                           ; simple_byte           19    10 (average)
  6490                           ; direct_byte          248     6 (fixed)
  6491                           ; jumptable            260     6 (fixed)
  6492                           ;	Chosen strategy is simple_byte
  6493  069D  3A00               	xorlw	0	; case 0
  6494  069E  1903               	skipnz
  6495  069F  2FEA               	goto	l443
  6496  06A0  3A63               	xorlw	99	; case 99
  6497  06A1  1903               	skipnz
  6498  06A2  2E7B               	goto	l1941
  6499  06A3  3A07               	xorlw	7	; case 100
  6500  06A4  1903               	skipnz
  6501  06A5  2EB0               	goto	l391
  6502  06A6  3A0D               	xorlw	13	; case 105
  6503  06A7  1903               	skipnz
  6504  06A8  2EB0               	goto	l391
  6505  06A9  3A1A               	xorlw	26	; case 115
  6506  06AA  1903               	skipnz
  6507  06AB  2E22               	goto	l1911
  6508  06AC  3A0B               	xorlw	11	; case 120
  6509  06AD  1903               	skipnz
  6510  06AE  2E20               	goto	l392
  6511  06AF  2E86               	goto	l1945
  6512  06B0                     l391:	
  6513                           
  6514                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6515  06B0  0020               	movlb	0	; select bank0
  6516  06B1  1BBC               	btfsc	printf@flag,7
  6517  06B2  2ECA               	goto	l1963
  6518                           
  6519                           ;doprnt.c: 1253: {
  6520                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6521  06B3  0839               	movf	printf@ap,w
  6522  06B4  0086               	movwf	6
  6523  06B5  0187               	clrf	7
  6524  06B6  3F40               	moviw [0]fsr1
  6525  06B7  00BA               	movwf	printf@val
  6526  06B8  3F41               	moviw [1]fsr1
  6527  06B9  00BB               	movwf	printf@val+1
  6528  06BA  3002               	movlw	2
  6529  06BB  00AF               	movwf	??_printf
  6530  06BC  082F               	movf	??_printf,w
  6531  06BD  07B9               	addwf	printf@ap,f
  6532                           
  6533                           ;doprnt.c: 1261: if((int)val < 0) {
  6534  06BE  1FBB               	btfss	printf@val+1,7
  6535  06BF  2F1A               	goto	l1989
  6536                           
  6537                           ;doprnt.c: 1262: flag |= 0x03;
  6538  06C0  3003               	movlw	3
  6539  06C1  00AF               	movwf	??_printf
  6540  06C2  082F               	movf	??_printf,w
  6541  06C3  04BC               	iorwf	printf@flag,f
  6542                           
  6543                           ;doprnt.c: 1263: val = -val;
  6544  06C4  09BA               	comf	printf@val,f
  6545  06C5  09BB               	comf	printf@val+1,f
  6546  06C6  0ABA               	incf	printf@val,f
  6547  06C7  1903               	skipnz
  6548  06C8  0ABB               	incf	printf@val+1,f
  6549                           
  6550                           ;doprnt.c: 1264: }
  6551                           ;doprnt.c: 1266: }
  6552  06C9  2F1A               	goto	l1989
  6553  06CA                     l1963:	
  6554                           
  6555                           ;doprnt.c: 1268: else
  6556                           ;doprnt.c: 1273: {
  6557                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6558  06CA  0839               	movf	printf@ap,w
  6559  06CB  0086               	movwf	6
  6560  06CC  0187               	clrf	7
  6561  06CD  3F40               	moviw [0]fsr1
  6562  06CE  00BA               	movwf	printf@val
  6563  06CF  3F41               	moviw [1]fsr1
  6564  06D0  00BB               	movwf	printf@val+1
  6565  06D1  3002               	movlw	2
  6566  06D2  00AF               	movwf	??_printf
  6567  06D3  082F               	movf	??_printf,w
  6568  06D4  07B9               	addwf	printf@ap,f
  6569                           
  6570                           ;doprnt.c: 1287: }
  6571                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6572  06D5  2F1A               	goto	l1989
  6573  06D6                     l413:	
  6574                           ;doprnt.c: 1299: case 0x00:
  6575                           
  6576                           
  6577                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6578  06D6  01BF               	clrf	printf@c
  6579  06D7  0ABF               	incf	printf@c,f
  6580  06D8                     L8:	
  6581  06D8  3005               	movlw	5
  6582  06D9  063F               	xorwf	printf@c,w
  6583  06DA  1903               	btfsc	3,2
  6584  06DB  2F23               	goto	l1991
  6585                           
  6586                           ;doprnt.c: 1306: if(val < dpowers[c])
  6587  06DC  083F               	movf	printf@c,w
  6588  06DD  00AF               	movwf	??_printf
  6589  06DE  01B0               	clrf	??_printf+1
  6590  06DF  35AF               	lslf	??_printf,f
  6591  06E0  0DB0               	rlf	??_printf+1,f
  6592  06E1  307B               	movlw	low (_dpowers| (0+32768))
  6593  06E2  072F               	addwf	??_printf,w
  6594  06E3  0084               	movwf	4
  6595  06E4  3093               	movlw	high (_dpowers| (0+32768))
  6596  06E5  3D30               	addwfc	??_printf+1,w
  6597  06E6  0085               	movwf	5
  6598  06E7  3F00               	moviw [0]fsr0
  6599  06E8  00B1               	movwf	??_printf+2
  6600  06E9  3F01               	moviw [1]fsr0
  6601  06EA  00B2               	movwf	??_printf+3
  6602  06EB  0832               	movf	??_printf+3,w
  6603  06EC  023B               	subwf	printf@val+1,w
  6604  06ED  1D03               	skipz
  6605  06EE  2EF1               	goto	u1645
  6606  06EF  0831               	movf	??_printf+2,w
  6607  06F0  023A               	subwf	printf@val,w
  6608  06F1                     u1645:	
  6609  06F1  1C03               	btfss	3,0
  6610  06F2  2F23               	goto	l1991
  6611                           
  6612                           ;doprnt.c: 1307: break;
  6613  06F3  3001               	movlw	1
  6614  06F4  00AF               	movwf	??_printf
  6615  06F5  082F               	movf	??_printf,w
  6616  06F6  07BF               	addwf	printf@c,f
  6617  06F7  2ED8               	goto	L8
  6618  06F8                     l418:	
  6619                           ;doprnt.c: 1314: case 0x80:
  6620                           
  6621                           ;doprnt.c: 1309: break;
  6622                           
  6623                           
  6624                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6625  06F8  01BF               	clrf	printf@c
  6626  06F9  0ABF               	incf	printf@c,f
  6627  06FA                     L9:	
  6628  06FA  3004               	movlw	4
  6629  06FB  063F               	xorwf	printf@c,w
  6630  06FC  1903               	btfsc	3,2
  6631  06FD  2F23               	goto	l1991
  6632                           
  6633                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6634  06FE  083F               	movf	printf@c,w
  6635  06FF  00AF               	movwf	??_printf
  6636  0700  01B0               	clrf	??_printf+1
  6637  0701  35AF               	lslf	??_printf,f
  6638  0702  0DB0               	rlf	??_printf+1,f
  6639  0703  3085               	movlw	low (_hexpowers| (0+32768))
  6640  0704  072F               	addwf	??_printf,w
  6641  0705  0084               	movwf	4
  6642  0706  3093               	movlw	high (_hexpowers| (0+32768))
  6643  0707  3D30               	addwfc	??_printf+1,w
  6644  0708  0085               	movwf	5
  6645  0709  3F00               	moviw [0]fsr0
  6646  070A  00B1               	movwf	??_printf+2
  6647  070B  3F01               	moviw [1]fsr0
  6648  070C  00B2               	movwf	??_printf+3
  6649  070D  0832               	movf	??_printf+3,w
  6650  070E  023B               	subwf	printf@val+1,w
  6651  070F  1D03               	skipz
  6652  0710  2F13               	goto	u1675
  6653  0711  0831               	movf	??_printf+2,w
  6654  0712  023A               	subwf	printf@val,w
  6655  0713                     u1675:	
  6656  0713  1C03               	btfss	3,0
  6657  0714  2F23               	goto	l1991
  6658                           
  6659                           ;doprnt.c: 1318: break;
  6660  0715  3001               	movlw	1
  6661  0716  00AF               	movwf	??_printf
  6662  0717  082F               	movf	??_printf,w
  6663  0718  07BF               	addwf	printf@c,f
  6664  0719  2EFA               	goto	L9
  6665  071A                     l1989:	
  6666                           ;doprnt.c: 1336: }
  6667                           
  6668                           ;doprnt.c: 1320: break;
  6669                           
  6670  071A  083C               	movf	printf@flag,w
  6671  071B  3980               	andlw	128
  6672                           
  6673                           ; Switch size 1, requested type "space"
  6674                           ; Number of cases is 2, Range of values is 0 to 128
  6675                           ; switch strategies available:
  6676                           ; Name         Instructions Cycles
  6677                           ; simple_byte            7     4 (average)
  6678                           ; jumptable            260     6 (fixed)
  6679                           ;	Chosen strategy is simple_byte
  6680  071C  3A00               	xorlw	0	; case 0
  6681  071D  1903               	skipnz
  6682  071E  2ED6               	goto	l413
  6683  071F  3A80               	xorlw	128	; case 128
  6684  0720  1903               	skipnz
  6685  0721  2EF8               	goto	l418
  6686  0722  2F23               	goto	l1991
  6687  0723                     l1991:	
  6688                           
  6689                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6690  0723  083D               	movf	printf@width,w
  6691  0724  043E               	iorwf	printf@width+1,w
  6692  0725  1903               	btfsc	3,2
  6693  0726  2F2F               	goto	l422
  6694  0727  083C               	movf	printf@flag,w
  6695  0728  3903               	andlw	3
  6696  0729  1903               	btfsc	3,2
  6697  072A  2F2F               	goto	l422
  6698                           
  6699                           ;doprnt.c: 1346: width--;
  6700  072B  30FF               	movlw	255
  6701  072C  07BD               	addwf	printf@width,f
  6702  072D  30FF               	movlw	255
  6703  072E  3DBE               	addwfc	printf@width+1,f
  6704  072F                     l422:	
  6705                           
  6706                           ;doprnt.c: 1381: if(width > c)
  6707  072F  083F               	movf	printf@c,w
  6708  0730  00AF               	movwf	??_printf
  6709  0731  01B0               	clrf	??_printf+1
  6710  0732  1BAF               	btfsc	??_printf,7
  6711  0733  03B0               	decf	??_printf+1,f
  6712  0734  0830               	movf	??_printf+1,w
  6713  0735  3A80               	xorlw	128
  6714  0736  00B1               	movwf	??_printf+2
  6715  0737  083E               	movf	printf@width+1,w
  6716  0738  3A80               	xorlw	128
  6717  0739  0231               	subwf	??_printf+2,w
  6718  073A  1D03               	skipz
  6719  073B  2F3E               	goto	u1715
  6720  073C  083D               	movf	printf@width,w
  6721  073D  022F               	subwf	??_printf,w
  6722  073E                     u1715:	
  6723  073E  1803               	skipnc
  6724  073F  2F4B               	goto	l1999
  6725                           
  6726                           ;doprnt.c: 1382: width -= c;
  6727  0740  0020               	movlb	0	; select bank0
  6728  0741  083F               	movf	printf@c,w
  6729  0742  00AF               	movwf	??_printf
  6730  0743  01B0               	clrf	??_printf+1
  6731  0744  1BAF               	btfsc	??_printf,7
  6732  0745  03B0               	decf	??_printf+1,f
  6733  0746  082F               	movf	??_printf,w
  6734  0747  02BD               	subwf	printf@width,f
  6735  0748  0830               	movf	??_printf+1,w
  6736  0749  3BBE               	subwfb	printf@width+1,f
  6737  074A  2F4E               	goto	l2001
  6738  074B                     l1999:	
  6739                           
  6740                           ;doprnt.c: 1383: else
  6741                           ;doprnt.c: 1384: width = 0;
  6742  074B  0020               	movlb	0	; select bank0
  6743  074C  01BD               	clrf	printf@width
  6744  074D  01BE               	clrf	printf@width+1
  6745  074E                     l2001:	
  6746                           
  6747                           ;doprnt.c: 1387: if(flag & 0x04) {
  6748  074E  1D3C               	btfss	printf@flag,2
  6749  074F  2F67               	goto	l2013
  6750                           
  6751                           ;doprnt.c: 1392: if(flag & 0x03)
  6752  0750  083C               	movf	printf@flag,w
  6753  0751  3903               	andlw	3
  6754  0752  1903               	btfsc	3,2
  6755  0753  2F58               	goto	l2007
  6756                           
  6757                           ;doprnt.c: 1393: (putch('-') );
  6758  0754  302D               	movlw	45
  6759  0755  318C  2466  3185   	fcall	_putch
  6760  0758                     l2007:	
  6761                           
  6762                           ;doprnt.c: 1415: if(width)
  6763  0758  0020               	movlb	0	; select bank0
  6764  0759                     L10:	
  6765  0759  083D               	movf	printf@width,w
  6766  075A  043E               	iorwf	printf@width+1,w
  6767  075B  1903               	btfsc	3,2
  6768  075C  2F80               	goto	l2023
  6769                           
  6770                           ;doprnt.c: 1417: (putch('0') );
  6771                           
  6772                           ;doprnt.c: 1416: do
  6773  075D  3030               	movlw	48
  6774  075E  318C  2466  3185   	fcall	_putch
  6775                           
  6776                           ;doprnt.c: 1418: while(--width);
  6777  0761  30FF               	movlw	255
  6778  0762  0020               	movlb	0	; select bank0
  6779  0763  07BD               	addwf	printf@width,f
  6780  0764  30FF               	movlw	255
  6781  0765  3DBE               	addwfc	printf@width+1,f
  6782  0766  2F59               	goto	L10
  6783  0767                     l2013:	
  6784                           ;doprnt.c: 1420: } else
  6785                           
  6786                           
  6787                           ;doprnt.c: 1422: {
  6788                           ;doprnt.c: 1424: if(width
  6789                           ;doprnt.c: 1428: )
  6790  0767  083D               	movf	printf@width,w
  6791  0768  043E               	iorwf	printf@width+1,w
  6792  0769  1903               	btfsc	3,2
  6793  076A  2F78               	goto	l2019
  6794  076B                     l2015:	
  6795                           ;doprnt.c: 1429: do
  6796                           
  6797                           
  6798                           ;doprnt.c: 1430: (putch(' ') );
  6799  076B  3020               	movlw	32
  6800  076C  318C  2466  3185   	fcall	_putch
  6801                           
  6802                           ;doprnt.c: 1431: while(--width);
  6803  076F  30FF               	movlw	255
  6804  0770  0020               	movlb	0	; select bank0
  6805  0771  07BD               	addwf	printf@width,f
  6806  0772  30FF               	movlw	255
  6807  0773  3DBE               	addwfc	printf@width+1,f
  6808  0774  083D               	movf	printf@width,w
  6809  0775  043E               	iorwf	printf@width+1,w
  6810  0776  1D03               	btfss	3,2
  6811  0777  2F6B               	goto	l2015
  6812  0778                     l2019:	
  6813                           
  6814                           ;doprnt.c: 1438: if(flag & 0x03)
  6815  0778  083C               	movf	printf@flag,w
  6816  0779  3903               	andlw	3
  6817  077A  1903               	btfsc	3,2
  6818  077B  2F80               	goto	l2023
  6819                           
  6820                           ;doprnt.c: 1439: (putch('-') );
  6821  077C  302D               	movlw	45
  6822  077D  318C  2466  3185   	fcall	_putch
  6823  0780                     l2023:	
  6824                           
  6825                           ;doprnt.c: 1469: }
  6826                           ;doprnt.c: 1472: prec = c;
  6827  0780  0020               	movlb	0	; select bank0
  6828  0781  083F               	movf	printf@c,w
  6829  0782  00AF               	movwf	??_printf
  6830  0783  082F               	movf	??_printf,w
  6831  0784  00B4               	movwf	printf@prec
  6832                           
  6833                           ;doprnt.c: 1474: while(prec--) {
  6834  0785  2FD8               	goto	l2037
  6835  0786                     l2025:	
  6836                           ;doprnt.c: 1478: {
  6837                           ;doprnt.c: 1483: case 0x00:
  6838                           
  6839                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  6840                           
  6841                           
  6842                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6843  0786  300A               	movlw	10
  6844  0787  00F8               	movwf	___lwmod@divisor
  6845  0788  3000               	movlw	0
  6846  0789  00F9               	movwf	___lwmod@divisor+1
  6847  078A  0834               	movf	printf@prec,w
  6848  078B  00AF               	movwf	??_printf
  6849  078C  01B0               	clrf	??_printf+1
  6850  078D  35AF               	lslf	??_printf,f
  6851  078E  0DB0               	rlf	??_printf+1,f
  6852  078F  307B               	movlw	low (_dpowers| (0+32768))
  6853  0790  072F               	addwf	??_printf,w
  6854  0791  0084               	movwf	4
  6855  0792  3093               	movlw	high (_dpowers| (0+32768))
  6856  0793  3D30               	addwfc	??_printf+1,w
  6857  0794  0085               	movwf	5
  6858  0795  3F00               	moviw [0]fsr0
  6859  0796  00F0               	movwf	___lwdiv@divisor
  6860  0797  3F01               	moviw [1]fsr0
  6861  0798  00F1               	movwf	___lwdiv@divisor+1
  6862  0799  083B               	movf	printf@val+1,w
  6863  079A  00F3               	movwf	___lwdiv@dividend+1
  6864  079B  083A               	movf	printf@val,w
  6865  079C  00F2               	movwf	___lwdiv@dividend
  6866  079D  318D  25CA  3185   	fcall	___lwdiv
  6867  07A0  0871               	movf	?___lwdiv+1,w
  6868  07A1  00FB               	movwf	___lwmod@dividend+1
  6869  07A2  0870               	movf	?___lwdiv,w
  6870  07A3  00FA               	movwf	___lwmod@dividend
  6871  07A4  318D  259E  3185   	fcall	___lwmod
  6872  07A7  0878               	movf	?___lwmod,w
  6873  07A8  3E30               	addlw	48
  6874  07A9  0020               	movlb	0	; select bank0
  6875  07AA  00B1               	movwf	??_printf+2
  6876  07AB  0831               	movf	??_printf+2,w
  6877  07AC  2FD3               	goto	L7
  6878  07AD                     l2027:	
  6879                           ;doprnt.c: 1497: case 0x80:
  6880                           
  6881                           ;doprnt.c: 1491: break;
  6882                           
  6883                           
  6884                           ;doprnt.c: 1499: {
  6885                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6886  07AD  0834               	movf	printf@prec,w
  6887  07AE  00AF               	movwf	??_printf
  6888  07AF  01B0               	clrf	??_printf+1
  6889  07B0  35AF               	lslf	??_printf,f
  6890  07B1  0DB0               	rlf	??_printf+1,f
  6891  07B2  3085               	movlw	low (_hexpowers| (0+32768))
  6892  07B3  072F               	addwf	??_printf,w
  6893  07B4  0084               	movwf	4
  6894  07B5  3093               	movlw	high (_hexpowers| (0+32768))
  6895  07B6  3D30               	addwfc	??_printf+1,w
  6896  07B7  0085               	movwf	5
  6897  07B8  3F00               	moviw [0]fsr0
  6898  07B9  00F0               	movwf	___lwdiv@divisor
  6899  07BA  3F01               	moviw [1]fsr0
  6900  07BB  00F1               	movwf	___lwdiv@divisor+1
  6901  07BC  083B               	movf	printf@val+1,w
  6902  07BD  00F3               	movwf	___lwdiv@dividend+1
  6903  07BE  083A               	movf	printf@val,w
  6904  07BF  00F2               	movwf	___lwdiv@dividend
  6905  07C0  318D  25CA  3185   	fcall	___lwdiv
  6906  07C3  0870               	movf	?___lwdiv,w
  6907  07C4  390F               	andlw	15
  6908  07C5  0020               	movlb	0	; select bank0
  6909  07C6  00B1               	movwf	??_printf+2
  6910  07C7  0831               	movf	??_printf+2,w
  6911  07C8  00B3               	movwf	printf@idx
  6912                           
  6913                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6914  07C9  0833               	movf	printf@idx,w
  6915  07CA  3E61               	addlw	low (STR_53| (0+32768))
  6916  07CB  0084               	movwf	4
  6917  07CC  3092               	movlw	high (STR_53| (0+32768))
  6918  07CD  1803               	skipnc
  6919  07CE  3E01               	addlw	1
  6920  07CF  0085               	movwf	5
  6921  07D0  0800               	movf	0,w	;code access
  6922  07D1  00AF               	movwf	??_printf
  6923  07D2  082F               	movf	??_printf,w
  6924  07D3                     L7:	
  6925  07D3  00BF               	movwf	printf@c
  6926  07D4                     l2035:	
  6927                           ;doprnt.c: 1523: }
  6928                           
  6929                           ;doprnt.c: 1508: }
  6930                           ;doprnt.c: 1510: break;
  6931                           
  6932                           
  6933                           ;doprnt.c: 1524: (putch(c) );
  6934  07D4  083F               	movf	printf@c,w
  6935  07D5  318C  2466  3185   	fcall	_putch
  6936  07D8                     l2037:	
  6937  07D8  30FF               	movlw	255
  6938  07D9  0020               	movlb	0	; select bank0
  6939  07DA  00AF               	movwf	??_printf
  6940  07DB  082F               	movf	??_printf,w
  6941  07DC  07B4               	addwf	printf@prec,f
  6942  07DD  0A34               	incf	printf@prec,w
  6943  07DE  1903               	btfsc	3,2
  6944  07DF  2DB5               	goto	l2039
  6945  07E0  083C               	movf	printf@flag,w
  6946  07E1  3980               	andlw	128
  6947                           
  6948                           ; Switch size 1, requested type "space"
  6949                           ; Number of cases is 2, Range of values is 0 to 128
  6950                           ; switch strategies available:
  6951                           ; Name         Instructions Cycles
  6952                           ; simple_byte            7     4 (average)
  6953                           ; jumptable            260     6 (fixed)
  6954                           ;	Chosen strategy is simple_byte
  6955  07E2  3A00               	xorlw	0	; case 0
  6956  07E3  1903               	skipnz
  6957  07E4  2F86               	goto	l2025
  6958  07E5  3A80               	xorlw	128	; case 128
  6959  07E6  1903               	skipnz
  6960  07E7  2FAD               	goto	l2027
  6961  07E8  2FD4               	goto	l2035
  6962  07E9  2FD4               	goto	l2035
  6963  07EA                     l443:	
  6964                           ;doprnt.c: 1540: return 0;
  6965                           ;	Return value of _printf is never used
  6966                           
  6967                           ;doprnt.c: 1525: }
  6968                           ;doprnt.c: 1533: }
  6969                           ;doprnt.c: 1535: alldone:
  6970                           
  6971  07EA  0008               	return
  6972  07EB                     __end_of_printf:	
  6973                           
  6974                           	psect	text15
  6975  0C66                     __ptext15:	
  6976 ;; *************** function _putch *****************
  6977 ;; Defined at:
  6978 ;;		line 107 in file "mcc_generated_files/eusart.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  txData          1    wreg     unsigned char 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  txData          1    1[COMMON] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:        1 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    1
  6999 ;; This function calls:
  7000 ;;		_EUSART_Write
  7001 ;; This function is called by:
  7002 ;;		_printf
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _putch
  7008  0C66                     _putch:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7012                           ;putch@txData stored from wreg
  7013  0C66  00F1               	movwf	putch@txData
  7014                           
  7015                           ;eusart.c: 109: EUSART_Write(txData);
  7016  0C67  0871               	movf	putch@txData,w
  7017  0C68  318C  247F         	fcall	_EUSART_Write
  7018  0C6A  0008               	return
  7019  0C6B                     __end_of_putch:	
  7020                           
  7021                           	psect	text16
  7022  0C7F                     __ptext16:	
  7023 ;; *************** function _EUSART_Write *****************
  7024 ;; Defined at:
  7025 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;  txData          1    wreg     unsigned char 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  txData          1    0[COMMON] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;Total ram usage:        1 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_putch
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _EUSART_Write
  7054  0C7F                     _EUSART_Write:	
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _EUSART_Write: [wreg]
  7058                           ;EUSART_Write@txData stored from wreg
  7059  0C7F  00F0               	movwf	EUSART_Write@txData
  7060  0C80                     l58:	
  7061                           ;eusart.c: 96: {
  7062                           
  7063                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7064                           
  7065  0C80  0020               	movlb	0	; select bank0
  7066  0C81  1E11               	btfss	17,4	;volatile
  7067  0C82  2C80               	goto	l58
  7068                           
  7069                           ;eusart.c: 97: }
  7070                           ;eusart.c: 99: TXREG = txData;
  7071  0C83  0870               	movf	EUSART_Write@txData,w
  7072  0C84  0023               	movlb	3	; select bank3
  7073  0C85  009A               	movwf	26	;volatile
  7074  0C86  0008               	return
  7075  0C87                     __end_of_EUSART_Write:	
  7076                           
  7077                           	psect	text17
  7078  0D9E                     __ptext17:	
  7079 ;; *************** function ___lwmod *****************
  7080 ;; Defined at:
  7081 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  divisor         2    8[COMMON] unsigned int 
  7084 ;;  dividend        2   10[COMMON] unsigned int 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  counter         1   13[COMMON] unsigned char 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  2    8[COMMON] unsigned int 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;Total ram usage:        6 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_printf
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function ___lwmod
  7111  0D9E                     ___lwmod:	
  7112                           
  7113                           ;incstack = 0
  7114                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7115  0D9E  0878               	movf	___lwmod@divisor,w
  7116  0D9F  0479               	iorwf	___lwmod@divisor+1,w
  7117  0DA0  1903               	btfsc	3,2
  7118  0DA1  2DC5               	goto	l1849
  7119  0DA2  01FD               	clrf	___lwmod@counter
  7120  0DA3  0AFD               	incf	___lwmod@counter,f
  7121  0DA4                     l1839:	
  7122  0DA4  1BF9               	btfsc	___lwmod@divisor+1,7
  7123  0DA5  2DB0               	goto	l1841
  7124  0DA6  3001               	movlw	1
  7125  0DA7                     u1425:	
  7126  0DA7  35F8               	lslf	___lwmod@divisor,f
  7127  0DA8  0DF9               	rlf	___lwmod@divisor+1,f
  7128  0DA9  0B89               	decfsz	9,f
  7129  0DAA  2DA7               	goto	u1425
  7130  0DAB  3001               	movlw	1
  7131  0DAC  00FC               	movwf	??___lwmod
  7132  0DAD  087C               	movf	??___lwmod,w
  7133  0DAE  07FD               	addwf	___lwmod@counter,f
  7134  0DAF  2DA4               	goto	l1839
  7135  0DB0                     l1841:	
  7136  0DB0  0879               	movf	___lwmod@divisor+1,w
  7137  0DB1  027B               	subwf	___lwmod@dividend+1,w
  7138  0DB2  1D03               	skipz
  7139  0DB3  2DB6               	goto	u1445
  7140  0DB4  0878               	movf	___lwmod@divisor,w
  7141  0DB5  027A               	subwf	___lwmod@dividend,w
  7142  0DB6                     u1445:	
  7143  0DB6  1C03               	skipc
  7144  0DB7  2DBC               	goto	l1845
  7145  0DB8  0878               	movf	___lwmod@divisor,w
  7146  0DB9  02FA               	subwf	___lwmod@dividend,f
  7147  0DBA  0879               	movf	___lwmod@divisor+1,w
  7148  0DBB  3BFB               	subwfb	___lwmod@dividend+1,f
  7149  0DBC                     l1845:	
  7150  0DBC  3001               	movlw	1
  7151  0DBD                     u1455:	
  7152  0DBD  36F9               	lsrf	___lwmod@divisor+1,f
  7153  0DBE  0CF8               	rrf	___lwmod@divisor,f
  7154  0DBF  0B89               	decfsz	9,f
  7155  0DC0  2DBD               	goto	u1455
  7156  0DC1  3001               	movlw	1
  7157  0DC2  02FD               	subwf	___lwmod@counter,f
  7158  0DC3  1D03               	btfss	3,2
  7159  0DC4  2DB0               	goto	l1841
  7160  0DC5                     l1849:	
  7161  0DC5  087B               	movf	___lwmod@dividend+1,w
  7162  0DC6  00F9               	movwf	?___lwmod+1
  7163  0DC7  087A               	movf	___lwmod@dividend,w
  7164  0DC8  00F8               	movwf	?___lwmod
  7165  0DC9  0008               	return
  7166  0DCA                     __end_of___lwmod:	
  7167                           
  7168                           	psect	text18
  7169  0DCA                     __ptext18:	
  7170 ;; *************** function ___lwdiv *****************
  7171 ;; Defined at:
  7172 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  divisor         2    0[COMMON] unsigned int 
  7175 ;;  dividend        2    2[COMMON] unsigned int 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;  quotient        2    5[COMMON] unsigned int 
  7178 ;;  counter         1    7[COMMON] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  2    0[COMMON] unsigned int 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;Total ram usage:        8 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; This function calls:
  7195 ;;		Nothing
  7196 ;; This function is called by:
  7197 ;;		_printf
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           
  7202                           ;psect for function ___lwdiv
  7203  0DCA                     ___lwdiv:	
  7204                           
  7205                           ;incstack = 0
  7206                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7207  0DCA  01F5               	clrf	___lwdiv@quotient
  7208  0DCB  01F6               	clrf	___lwdiv@quotient+1
  7209  0DCC  0870               	movf	___lwdiv@divisor,w
  7210  0DCD  0471               	iorwf	___lwdiv@divisor+1,w
  7211  0DCE  1903               	btfsc	3,2
  7212  0DCF  2DF9               	goto	l1827
  7213  0DD0  01F7               	clrf	___lwdiv@counter
  7214  0DD1  0AF7               	incf	___lwdiv@counter,f
  7215  0DD2                     l1815:	
  7216  0DD2  1BF1               	btfsc	___lwdiv@divisor+1,7
  7217  0DD3  2DDE               	goto	l1817
  7218  0DD4  3001               	movlw	1
  7219  0DD5                     u1355:	
  7220  0DD5  35F0               	lslf	___lwdiv@divisor,f
  7221  0DD6  0DF1               	rlf	___lwdiv@divisor+1,f
  7222  0DD7  0B89               	decfsz	9,f
  7223  0DD8  2DD5               	goto	u1355
  7224  0DD9  3001               	movlw	1
  7225  0DDA  00F4               	movwf	??___lwdiv
  7226  0DDB  0874               	movf	??___lwdiv,w
  7227  0DDC  07F7               	addwf	___lwdiv@counter,f
  7228  0DDD  2DD2               	goto	l1815
  7229  0DDE                     l1817:	
  7230  0DDE  3001               	movlw	1
  7231  0DDF                     u1375:	
  7232  0DDF  35F5               	lslf	___lwdiv@quotient,f
  7233  0DE0  0DF6               	rlf	___lwdiv@quotient+1,f
  7234  0DE1  0B89               	decfsz	9,f
  7235  0DE2  2DDF               	goto	u1375
  7236  0DE3  0871               	movf	___lwdiv@divisor+1,w
  7237  0DE4  0273               	subwf	___lwdiv@dividend+1,w
  7238  0DE5  1D03               	skipz
  7239  0DE6  2DE9               	goto	u1385
  7240  0DE7  0870               	movf	___lwdiv@divisor,w
  7241  0DE8  0272               	subwf	___lwdiv@dividend,w
  7242  0DE9                     u1385:	
  7243  0DE9  1C03               	skipc
  7244  0DEA  2DF0               	goto	l1823
  7245  0DEB  0870               	movf	___lwdiv@divisor,w
  7246  0DEC  02F2               	subwf	___lwdiv@dividend,f
  7247  0DED  0871               	movf	___lwdiv@divisor+1,w
  7248  0DEE  3BF3               	subwfb	___lwdiv@dividend+1,f
  7249  0DEF  1475               	bsf	___lwdiv@quotient,0
  7250  0DF0                     l1823:	
  7251  0DF0  3001               	movlw	1
  7252  0DF1                     u1395:	
  7253  0DF1  36F1               	lsrf	___lwdiv@divisor+1,f
  7254  0DF2  0CF0               	rrf	___lwdiv@divisor,f
  7255  0DF3  0B89               	decfsz	9,f
  7256  0DF4  2DF1               	goto	u1395
  7257  0DF5  3001               	movlw	1
  7258  0DF6  02F7               	subwf	___lwdiv@counter,f
  7259  0DF7  1D03               	btfss	3,2
  7260  0DF8  2DDE               	goto	l1817
  7261  0DF9                     l1827:	
  7262  0DF9  0876               	movf	___lwdiv@quotient+1,w
  7263  0DFA  00F1               	movwf	?___lwdiv+1
  7264  0DFB  0875               	movf	___lwdiv@quotient,w
  7265  0DFC  00F0               	movwf	?___lwdiv
  7266  0DFD  0008               	return
  7267  0DFE                     __end_of___lwdiv:	
  7268                           
  7269                           	psect	text19
  7270  0CCB                     __ptext19:	
  7271 ;; *************** function _SPI_exchange *****************
  7272 ;; Defined at:
  7273 ;;		line 4 in file "spi.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  buf             1    wreg     PTR unsigned char 
  7276 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7277 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7278 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7279 ;;  len             1    8[COMMON] unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  buf             1   13[COMMON] PTR unsigned char 
  7282 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7283 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7284 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7285 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      unsigned char 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7295 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;Total ram usage:        6 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    2
  7302 ;; This function calls:
  7303 ;;		_SPI_Exchange8bitBuffer
  7304 ;; This function is called by:
  7305 ;;		_can_init
  7306 ;;		_can_ope_mode
  7307 ;;		_can_set_mask
  7308 ;;		_txf_clear
  7309 ;;		_receive
  7310 ;;		_can_send
  7311 ;;		_can_status_check
  7312 ;;		_can_baudrate
  7313 ;;		_read_register
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317                           
  7318                           ;psect for function _SPI_exchange
  7319  0CCB                     _SPI_exchange:	
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7323                           ;SPI_exchange@buf stored from wreg
  7324  0CCB  00FD               	movwf	SPI_exchange@buf
  7325                           
  7326                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7327  0CCC  0022               	movlb	2	; select bank2
  7328  0CCD  120C               	bcf	12,4	;volatile
  7329                           
  7330                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7331  0CCE  0878               	movf	SPI_exchange@len,w
  7332  0CCF  00F9               	movwf	??_SPI_exchange
  7333  0CD0  0879               	movf	??_SPI_exchange,w
  7334  0CD1  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7335  0CD2  087D               	movf	SPI_exchange@buf,w
  7336  0CD3  00FA               	movwf	??_SPI_exchange+1
  7337  0CD4  087A               	movf	??_SPI_exchange+1,w
  7338  0CD5  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7339  0CD6  087D               	movf	SPI_exchange@buf,w
  7340  0CD7  318E  2696         	fcall	_SPI_Exchange8bitBuffer
  7341  0CD9  00FB               	movwf	??_SPI_exchange+2
  7342  0CDA  087B               	movf	??_SPI_exchange+2,w
  7343  0CDB  00FC               	movwf	SPI_exchange@bytes_written
  7344                           
  7345                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7346  0CDC  0022               	movlb	2	; select bank2
  7347  0CDD  160C               	bsf	12,4	;volatile
  7348                           
  7349                           ;spi.c: 8: return bytes_written;
  7350  0CDE  087C               	movf	SPI_exchange@bytes_written,w
  7351  0CDF  0008               	return
  7352  0CE0                     __end_of_SPI_exchange:	
  7353                           
  7354                           	psect	text20
  7355  0E96                     __ptext20:	
  7356 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7357 ;; Defined at:
  7358 ;;		line 91 in file "mcc_generated_files/spi.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  dataIn          1    wreg     PTR unsigned char 
  7361 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7362 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7363 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7364 ;;  bufLen          1    1[COMMON] unsigned char 
  7365 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7366 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7367 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7368 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7371 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7372 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7373 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7374 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      unsigned char 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;Total ram usage:        7 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    1
  7391 ;; This function calls:
  7392 ;;		_SPI_Exchange8bit
  7393 ;; This function is called by:
  7394 ;;		_SPI_exchange
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function _SPI_Exchange8bitBuffer
  7400  0E96                     _SPI_Exchange8bitBuffer:	
  7401                           
  7402                           ;incstack = 0
  7403                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7404                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7405  0E96  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7406                           
  7407                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7408  0E97  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7409                           
  7410                           ;spi.c: 95: if(bufLen != 0)
  7411  0E98  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7412  0E99  1903               	btfsc	3,2
  7413  0E9A  2EE2               	goto	l1881
  7414                           
  7415                           ;spi.c: 96: {
  7416                           ;spi.c: 97: if(dataIn != (0))
  7417  0E9B  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7418  0E9C  1D03               	btfss	3,2
  7419  0E9D  2EC4               	goto	l1869
  7420  0E9E  2EC9               	goto	l1871
  7421  0E9F                     l1861:	
  7422                           ;spi.c: 98: {
  7423                           ;spi.c: 99: while(bytesWritten < bufLen)
  7424                           
  7425                           
  7426                           ;spi.c: 100: {
  7427                           ;spi.c: 101: if(dataOut == (0))
  7428  0E9F  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7429  0EA0  1D03               	btfss	3,2
  7430  0EA1  2EAD               	goto	l1865
  7431                           
  7432                           ;spi.c: 102: {
  7433                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7434  0EA2  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7435  0EA3  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7436  0EA4  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7437  0EA5  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7438  0EA6  0086               	movwf	6
  7439  0EA7  0187               	clrf	7
  7440  0EA8  0801               	movf	1,w
  7441  0EA9  318C  2487  318E   	fcall	_SPI_Exchange8bit
  7442                           
  7443                           ;spi.c: 104: }
  7444  0EAC  2EC0               	goto	l1867
  7445  0EAD                     l1865:	
  7446                           
  7447                           ;spi.c: 105: else
  7448                           ;spi.c: 106: {
  7449                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7450  0EAD  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7451  0EAE  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7452  0EAF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7453  0EB0  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7454  0EB1  0086               	movwf	6
  7455  0EB2  0187               	clrf	7
  7456  0EB3  0801               	movf	1,w
  7457  0EB4  318C  2487  318E   	fcall	_SPI_Exchange8bit
  7458  0EB7  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7459  0EB8  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7460  0EB9  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7461  0EBA  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7462  0EBB  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7463  0EBC  0086               	movwf	6
  7464  0EBD  0187               	clrf	7
  7465  0EBE  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7466  0EBF  0081               	movwf	1
  7467  0EC0                     l1867:	
  7468                           
  7469                           ;spi.c: 108: }
  7470                           ;spi.c: 110: bytesWritten++;
  7471  0EC0  3001               	movlw	1
  7472  0EC1  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7473  0EC2  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7474  0EC3  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7475  0EC4                     l1869:	
  7476  0EC4  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7477  0EC5  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7478  0EC6  1803               	btfsc	3,0
  7479  0EC7  2EE2               	goto	l1881
  7480  0EC8  2E9F               	goto	l1861
  7481  0EC9                     l1871:	
  7482                           ;spi.c: 111: }
  7483                           ;spi.c: 112: }
  7484                           
  7485                           
  7486                           ;spi.c: 113: else
  7487                           ;spi.c: 114: {
  7488                           ;spi.c: 115: if(dataOut != (0))
  7489  0EC9  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7490  0ECA  1D03               	btfss	3,2
  7491  0ECB  2EDE               	goto	l1879
  7492  0ECC  2EE2               	goto	l1881
  7493  0ECD                     l1875:	
  7494                           ;spi.c: 116: {
  7495                           ;spi.c: 117: while(bytesWritten < bufLen )
  7496                           
  7497                           
  7498                           ;spi.c: 118: {
  7499                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7500  0ECD  3000               	movlw	0
  7501  0ECE  318C  2487  318E   	fcall	_SPI_Exchange8bit
  7502  0ED1  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7503  0ED2  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7504  0ED3  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7505  0ED4  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7506  0ED5  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7507  0ED6  0086               	movwf	6
  7508  0ED7  0187               	clrf	7
  7509  0ED8  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7510  0ED9  0081               	movwf	1
  7511                           
  7512                           ;spi.c: 121: bytesWritten++;
  7513  0EDA  3001               	movlw	1
  7514  0EDB  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7515  0EDC  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7516  0EDD  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7517  0EDE                     l1879:	
  7518  0EDE  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7519  0EDF  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7520  0EE0  1C03               	skipc
  7521  0EE1  2ECD               	goto	l1875
  7522  0EE2                     l1881:	
  7523                           
  7524                           ;spi.c: 122: }
  7525                           ;spi.c: 123: }
  7526                           ;spi.c: 124: }
  7527                           ;spi.c: 125: }
  7528                           ;spi.c: 127: return bytesWritten;
  7529  0EE2  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7530  0EE3  0008               	return
  7531  0EE4                     __end_of_SPI_Exchange8bitBuffer:	
  7532                           
  7533                           	psect	text21
  7534  0C87                     __ptext21:	
  7535 ;; *************** function _SPI_Exchange8bit *****************
  7536 ;; Defined at:
  7537 ;;		line 77 in file "mcc_generated_files/spi.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  data            1    wreg     unsigned char 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  data            1    0[COMMON] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      unsigned char 
  7544 ;; Registers used:
  7545 ;;		wreg
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;Total ram usage:        1 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_SPI_Exchange8bitBuffer
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _SPI_Exchange8bit
  7566  0C87                     _SPI_Exchange8bit:	
  7567                           
  7568                           ;incstack = 0
  7569                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7570                           ;SPI_Exchange8bit@data stored from wreg
  7571  0C87  00F0               	movwf	SPI_Exchange8bit@data
  7572                           
  7573                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7574  0C88  0024               	movlb	4	; select bank4
  7575  0C89  1395               	bcf	21,7	;volatile
  7576                           
  7577                           ;spi.c: 82: SSP1BUF = data;
  7578  0C8A  0870               	movf	SPI_Exchange8bit@data,w
  7579  0C8B  0091               	movwf	17	;volatile
  7580  0C8C                     l113:	
  7581                           ;spi.c: 85: {
  7582                           
  7583                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7584                           
  7585  0C8C  1C14               	btfss	20,0	;volatile
  7586  0C8D  2C8C               	goto	l113
  7587                           
  7588                           ;spi.c: 86: }
  7589                           ;spi.c: 88: return (SSP1BUF);
  7590  0C8E  0811               	movf	17,w	;volatile
  7591  0C8F  0008               	return
  7592  0C90                     __end_of_SPI_Exchange8bit:	
  7593                           
  7594                           	psect	text22
  7595  0F99                     __ptext22:	
  7596 ;; *************** function _atoi *****************
  7597 ;; Defined at:
  7598 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  s               1    wreg     PTR const unsigned char 
  7601 ;;		 -> main@buf(9), 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  s               1   13[COMMON] PTR const unsigned char 
  7604 ;;		 -> main@buf(9), 
  7605 ;;  a               2   11[COMMON] int 
  7606 ;;  sign            1   10[COMMON] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  2    6[COMMON] int 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;Total ram usage:        8 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    1
  7623 ;; This function calls:
  7624 ;;		___wmul
  7625 ;;		_isdigit
  7626 ;; This function is called by:
  7627 ;;		_main
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           
  7632                           ;psect for function _atoi
  7633  0F99                     _atoi:	
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7637                           ;atoi@s stored from wreg
  7638  0F99  00FD               	movwf	atoi@s
  7639  0F9A                     l2253:	
  7640  0F9A  087D               	movf	atoi@s,w
  7641  0F9B  0086               	movwf	6
  7642  0F9C  0187               	clrf	7
  7643  0F9D  3020               	movlw	32
  7644  0F9E  0601               	xorwf	1,w
  7645  0F9F  1D03               	btfss	3,2
  7646  0FA0  2FA6               	goto	l2255
  7647  0FA1                     l2251:	
  7648  0FA1  3001               	movlw	1
  7649  0FA2  00F8               	movwf	??_atoi
  7650  0FA3  0878               	movf	??_atoi,w
  7651  0FA4  07FD               	addwf	atoi@s,f
  7652  0FA5  2F9A               	goto	l2253
  7653  0FA6                     l2255:	
  7654  0FA6  087D               	movf	atoi@s,w
  7655  0FA7  0086               	movwf	6
  7656  0FA8  0187               	clrf	7
  7657  0FA9  3009               	movlw	9
  7658  0FAA  0601               	xorwf	1,w
  7659  0FAB  1903               	btfsc	3,2
  7660  0FAC  2FA1               	goto	l2251
  7661  0FAD  01FB               	clrf	atoi@a
  7662  0FAE  01FC               	clrf	atoi@a+1
  7663  0FAF  01FA               	clrf	atoi@sign
  7664  0FB0  087D               	movf	atoi@s,w
  7665  0FB1  0086               	movwf	6
  7666  0FB2  0187               	clrf	7
  7667  0FB3  302D               	movlw	45
  7668  0FB4  0601               	xorwf	1,w
  7669  0FB5  1D03               	btfss	3,2
  7670  0FB6  2FBC               	goto	l2263
  7671  0FB7  3001               	movlw	1
  7672  0FB8  00F8               	movwf	??_atoi
  7673  0FB9  0878               	movf	??_atoi,w
  7674  0FBA  07FA               	addwf	atoi@sign,f
  7675  0FBB  2FC3               	goto	l2269
  7676  0FBC                     l2263:	
  7677  0FBC  087D               	movf	atoi@s,w
  7678  0FBD  0086               	movwf	6
  7679  0FBE  0187               	clrf	7
  7680  0FBF  302B               	movlw	43
  7681  0FC0  0601               	xorwf	1,w
  7682  0FC1  1D03               	btfss	3,2
  7683  0FC2  2FC7               	goto	l2271
  7684  0FC3                     l2269:	
  7685  0FC3  3001               	movlw	1
  7686  0FC4  00F8               	movwf	??_atoi
  7687  0FC5  0878               	movf	??_atoi,w
  7688  0FC6  07FD               	addwf	atoi@s,f
  7689  0FC7                     l2271:	
  7690  0FC7  087D               	movf	atoi@s,w
  7691  0FC8  0086               	movwf	6
  7692  0FC9  0187               	clrf	7
  7693  0FCA  0801               	movf	1,w
  7694  0FCB  318C  24AE  318F   	fcall	_isdigit
  7695  0FCE  1C03               	btfss	3,0
  7696  0FCF  2FEC               	goto	l2273
  7697  0FD0  087C               	movf	atoi@a+1,w
  7698  0FD1  00F1               	movwf	___wmul@multiplier+1
  7699  0FD2  087B               	movf	atoi@a,w
  7700  0FD3  00F0               	movwf	___wmul@multiplier
  7701  0FD4  300A               	movlw	10
  7702  0FD5  00F2               	movwf	___wmul@multiplicand
  7703  0FD6  3000               	movlw	0
  7704  0FD7  00F3               	movwf	___wmul@multiplicand+1
  7705  0FD8  318D  250C  318F   	fcall	___wmul
  7706  0FDB  087D               	movf	atoi@s,w
  7707  0FDC  0086               	movwf	6
  7708  0FDD  0187               	clrf	7
  7709  0FDE  0801               	movf	1,w
  7710  0FDF  0770               	addwf	?___wmul,w
  7711  0FE0  00F8               	movwf	??_atoi
  7712  0FE1  0871               	movf	?___wmul+1,w
  7713  0FE2  1803               	skipnc
  7714  0FE3  0A71               	incf	?___wmul+1,w
  7715  0FE4  00F9               	movwf	??_atoi+1
  7716  0FE5  0878               	movf	??_atoi,w
  7717  0FE6  3ED0               	addlw	208
  7718  0FE7  00FB               	movwf	atoi@a
  7719  0FE8  30FF               	movlw	255
  7720  0FE9  3D79               	addwfc	??_atoi+1,w
  7721  0FEA  00FC               	movwf	atoi@a+1
  7722  0FEB  2FC3               	goto	l2269
  7723  0FEC                     l2273:	
  7724  0FEC  087A               	movf	atoi@sign,w
  7725  0FED  1903               	btfsc	3,2
  7726  0FEE  2FFB               	goto	l2279
  7727  0FEF  097B               	comf	atoi@a,w
  7728  0FF0  00F8               	movwf	??_atoi
  7729  0FF1  097C               	comf	atoi@a+1,w
  7730  0FF2  00F9               	movwf	??_atoi+1
  7731  0FF3  0AF8               	incf	??_atoi,f
  7732  0FF4  1903               	skipnz
  7733  0FF5  0AF9               	incf	??_atoi+1,f
  7734  0FF6  0878               	movf	??_atoi,w
  7735  0FF7  00F6               	movwf	?_atoi
  7736  0FF8  0879               	movf	??_atoi+1,w
  7737  0FF9  00F7               	movwf	?_atoi+1
  7738  0FFA  0008               	return
  7739  0FFB                     l2279:	
  7740  0FFB  087C               	movf	atoi@a+1,w
  7741  0FFC  00F7               	movwf	?_atoi+1
  7742  0FFD  087B               	movf	atoi@a,w
  7743  0FFE  00F6               	movwf	?_atoi
  7744  0FFF  0008               	return
  7745  1000                     __end_of_atoi:	
  7746                           
  7747                           	psect	text23
  7748  0CAE                     __ptext23:	
  7749 ;; *************** function _isdigit *****************
  7750 ;; Defined at:
  7751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  c               1    wreg     unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  c               1    1[COMMON] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, status,2, status,0
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        2 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_printf
  7775 ;;		_atoi
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _isdigit
  7781  0CAE                     _isdigit:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7785                           ;isdigit@c stored from wreg
  7786  0CAE  00F1               	movwf	isdigit@c
  7787  0CAF  01F0               	clrf	_isdigit$793
  7788  0CB0  303A               	movlw	58
  7789  0CB1  0271               	subwf	isdigit@c,w
  7790  0CB2  1803               	skipnc
  7791  0CB3  2CBA               	goto	l1787
  7792  0CB4  3030               	movlw	48
  7793  0CB5  0271               	subwf	isdigit@c,w
  7794  0CB6  1C03               	skipc
  7795  0CB7  2CBA               	goto	l1787
  7796  0CB8  01F0               	clrf	_isdigit$793
  7797  0CB9  0AF0               	incf	_isdigit$793,f
  7798  0CBA                     l1787:	
  7799  0CBA  0C70               	rrf	_isdigit$793,w
  7800  0CBB  0008               	return
  7801  0CBC                     __end_of_isdigit:	
  7802                           
  7803                           	psect	text24
  7804  0D0C                     __ptext24:	
  7805 ;; *************** function ___wmul *****************
  7806 ;; Defined at:
  7807 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  multiplier      2    0[COMMON] unsigned int 
  7810 ;;  multiplicand    2    2[COMMON] unsigned int 
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;  product         2    4[COMMON] unsigned int 
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  2    0[COMMON] unsigned int 
  7815 ;; Registers used:
  7816 ;;		wreg, status,2, status,0
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;Total ram usage:        6 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; This function calls:
  7829 ;;		Nothing
  7830 ;; This function is called by:
  7831 ;;		_printf
  7832 ;;		_atoi
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function ___wmul
  7838  0D0C                     ___wmul:	
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7842  0D0C  01F4               	clrf	___wmul@product
  7843  0D0D  01F5               	clrf	___wmul@product+1
  7844  0D0E                     l1793:	
  7845  0D0E  1C70               	btfss	___wmul@multiplier,0
  7846  0D0F  2D14               	goto	l527
  7847  0D10  0872               	movf	___wmul@multiplicand,w
  7848  0D11  07F4               	addwf	___wmul@product,f
  7849  0D12  0873               	movf	___wmul@multiplicand+1,w
  7850  0D13  3DF5               	addwfc	___wmul@product+1,f
  7851  0D14                     l527:	
  7852  0D14  3001               	movlw	1
  7853  0D15                     u1315:	
  7854  0D15  35F2               	lslf	___wmul@multiplicand,f
  7855  0D16  0DF3               	rlf	___wmul@multiplicand+1,f
  7856  0D17  0B89               	decfsz	9,f
  7857  0D18  2D15               	goto	u1315
  7858  0D19  3001               	movlw	1
  7859  0D1A                     u1325:	
  7860  0D1A  36F1               	lsrf	___wmul@multiplier+1,f
  7861  0D1B  0CF0               	rrf	___wmul@multiplier,f
  7862  0D1C  0B89               	decfsz	9,f
  7863  0D1D  2D1A               	goto	u1325
  7864  0D1E  0870               	movf	___wmul@multiplier,w
  7865  0D1F  0471               	iorwf	___wmul@multiplier+1,w
  7866  0D20  1D03               	btfss	3,2
  7867  0D21  2D0E               	goto	l1793
  7868  0D22  0875               	movf	___wmul@product+1,w
  7869  0D23  00F1               	movwf	?___wmul+1
  7870  0D24  0874               	movf	___wmul@product,w
  7871  0D25  00F0               	movwf	?___wmul
  7872  0D26  0008               	return
  7873  0D27                     __end_of___wmul:	
  7874                           
  7875                           	psect	text25
  7876  0CBC                     __ptext25:	
  7877 ;; *************** function _SYSTEM_Initialize *****************
  7878 ;; Defined at:
  7879 ;;		line 70 in file "mcc_generated_files/mcc.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        0 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    1
  7900 ;; This function calls:
  7901 ;;		_EUSART_Initialize
  7902 ;;		_OSCILLATOR_Initialize
  7903 ;;		_PIN_MANAGER_Initialize
  7904 ;;		_SPI_Initialize
  7905 ;;		_WDT_Initialize
  7906 ;; This function is called by:
  7907 ;;		_main
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           
  7912                           ;psect for function _SYSTEM_Initialize
  7913  0CBC                     _SYSTEM_Initialize:	
  7914                           
  7915                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7919  0CBC  318C  24F5  318C   	fcall	_PIN_MANAGER_Initialize
  7920                           
  7921                           ;mcc.c: 74: OSCILLATOR_Initialize();
  7922  0CBF  318C  2471  318C   	fcall	_OSCILLATOR_Initialize
  7923                           
  7924                           ;mcc.c: 75: WDT_Initialize();
  7925  0CC2  318C  2462  318C   	fcall	_WDT_Initialize
  7926                           
  7927                           ;mcc.c: 76: SPI_Initialize();
  7928  0CC5  318C  2478  318C   	fcall	_SPI_Initialize
  7929                           
  7930                           ;mcc.c: 77: EUSART_Initialize();
  7931  0CC8  318C  24A3         	fcall	_EUSART_Initialize
  7932  0CCA  0008               	return
  7933  0CCB                     __end_of_SYSTEM_Initialize:	
  7934                           
  7935                           	psect	text26
  7936  0C62                     __ptext26:	
  7937 ;; *************** function _WDT_Initialize *****************
  7938 ;; Defined at:
  7939 ;;		line 90 in file "mcc_generated_files/mcc.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;		None
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  1    wreg      void 
  7946 ;; Registers used:
  7947 ;;		wreg
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;Total ram usage:        0 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_SYSTEM_Initialize
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _WDT_Initialize
  7968  0C62                     _WDT_Initialize:	
  7969                           
  7970                           ;mcc.c: 93: WDTCON = 0x16;
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in _WDT_Initialize: [wreg]
  7974  0C62  3016               	movlw	22
  7975  0C63  0021               	movlb	1	; select bank1
  7976  0C64  0097               	movwf	23	;volatile
  7977  0C65  0008               	return
  7978  0C66                     __end_of_WDT_Initialize:	
  7979                           
  7980                           	psect	text27
  7981  0C78                     __ptext27:	
  7982 ;; *************** function _SPI_Initialize *****************
  7983 ;; Defined at:
  7984 ;;		line 63 in file "mcc_generated_files/spi.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;Total ram usage:        0 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		_SYSTEM_Initialize
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _SPI_Initialize
  8013  0C78                     _SPI_Initialize:	
  8014                           
  8015                           ;spi.c: 68: SSP1STAT = 0x40;
  8016                           
  8017                           ;incstack = 0
  8018                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8019  0C78  3040               	movlw	64
  8020  0C79  0024               	movlb	4	; select bank4
  8021  0C7A  0094               	movwf	20	;volatile
  8022                           
  8023                           ;spi.c: 71: SSP1CON1 = 0x20;
  8024  0C7B  3020               	movlw	32
  8025  0C7C  0095               	movwf	21	;volatile
  8026                           
  8027                           ;spi.c: 74: SSP1ADD = 0x00;
  8028  0C7D  0192               	clrf	18	;volatile
  8029  0C7E  0008               	return
  8030  0C7F                     __end_of_SPI_Initialize:	
  8031                           
  8032                           	psect	text28
  8033  0CF5                     __ptext28:	
  8034 ;; *************** function _PIN_MANAGER_Initialize *****************
  8035 ;; Defined at:
  8036 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;		None
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;		None
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  1    wreg      void 
  8043 ;; Registers used:
  8044 ;;		wreg, status,2
  8045 ;; Tracked objects:
  8046 ;;		On entry : 0/0
  8047 ;;		On exit  : 0/0
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;Total ram usage:        0 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; This function calls:
  8057 ;;		Nothing
  8058 ;; This function is called by:
  8059 ;;		_SYSTEM_Initialize
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _PIN_MANAGER_Initialize
  8065  0CF5                     _PIN_MANAGER_Initialize:	
  8066                           
  8067                           ;pin_manager.c: 57: LATA = 0x10;
  8068                           
  8069                           ;incstack = 0
  8070                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8071  0CF5  3010               	movlw	16
  8072  0CF6  0022               	movlb	2	; select bank2
  8073  0CF7  008C               	movwf	12	;volatile
  8074                           
  8075                           ;pin_manager.c: 58: LATC = 0x00;
  8076  0CF8  018E               	clrf	14	;volatile
  8077                           
  8078                           ;pin_manager.c: 63: TRISA = 0x2F;
  8079  0CF9  302F               	movlw	47
  8080  0CFA  0021               	movlb	1	; select bank1
  8081  0CFB  008C               	movwf	12	;volatile
  8082                           
  8083                           ;pin_manager.c: 64: TRISC = 0x32;
  8084  0CFC  3032               	movlw	50
  8085  0CFD  008E               	movwf	14	;volatile
  8086                           
  8087                           ;pin_manager.c: 69: ANSELC = 0x00;
  8088  0CFE  0023               	movlb	3	; select bank3
  8089  0CFF  018E               	clrf	14	;volatile
  8090                           
  8091                           ;pin_manager.c: 70: ANSELA = 0x07;
  8092  0D00  3007               	movlw	7
  8093  0D01  008C               	movwf	12	;volatile
  8094                           
  8095                           ;pin_manager.c: 75: WPUA = 0x00;
  8096  0D02  0024               	movlb	4	; select bank4
  8097  0D03  018C               	clrf	12	;volatile
  8098                           
  8099                           ;pin_manager.c: 76: WPUC = 0x30;
  8100  0D04  3030               	movlw	48
  8101  0D05  008E               	movwf	14	;volatile
  8102                           
  8103                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8104  0D06  0021               	movlb	1	; select bank1
  8105  0D07  1395               	bcf	21,7	;volatile
  8106                           
  8107                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8108  0D08  0022               	movlb	2	; select bank2
  8109  0D09  019E               	clrf	30	;volatile
  8110                           
  8111                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8112  0D0A  019D               	clrf	29	;volatile
  8113  0D0B  0008               	return
  8114  0D0C                     __end_of_PIN_MANAGER_Initialize:	
  8115                           
  8116                           	psect	text29
  8117  0C71                     __ptext29:	
  8118 ;; *************** function _OSCILLATOR_Initialize *****************
  8119 ;; Defined at:
  8120 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      void 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;Total ram usage:        0 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_SYSTEM_Initialize
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _OSCILLATOR_Initialize
  8149  0C71                     _OSCILLATOR_Initialize:	
  8150                           
  8151                           ;mcc.c: 83: OSCCON = 0x60;
  8152                           
  8153                           ;incstack = 0
  8154                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8155  0C71  3060               	movlw	96
  8156  0C72  0021               	movlb	1	; select bank1
  8157  0C73  0099               	movwf	25	;volatile
  8158                           
  8159                           ;mcc.c: 85: OSCTUNE = 0x00;
  8160  0C74  0198               	clrf	24	;volatile
  8161                           
  8162                           ;mcc.c: 87: BORCON = 0x00;
  8163  0C75  0022               	movlb	2	; select bank2
  8164  0C76  0196               	clrf	22	;volatile
  8165  0C77  0008               	return
  8166  0C78                     __end_of_OSCILLATOR_Initialize:	
  8167                           
  8168                           	psect	text30
  8169  0CA3                     __ptext30:	
  8170 ;; *************** function _EUSART_Initialize *****************
  8171 ;; Defined at:
  8172 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;		None
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;		None
  8177 ;; Return value:  Size  Location     Type
  8178 ;;                  1    wreg      void 
  8179 ;; Registers used:
  8180 ;;		wreg, status,2
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;Total ram usage:        0 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; This function calls:
  8193 ;;		Nothing
  8194 ;; This function is called by:
  8195 ;;		_SYSTEM_Initialize
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           
  8200                           ;psect for function _EUSART_Initialize
  8201  0CA3                     _EUSART_Initialize:	
  8202                           
  8203                           ;eusart.c: 58: BAUDCON = 0x08;
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8207  0CA3  3008               	movlw	8
  8208  0CA4  0023               	movlb	3	; select bank3
  8209  0CA5  009F               	movwf	31	;volatile
  8210                           
  8211                           ;eusart.c: 61: RCSTA = 0x90;
  8212  0CA6  3090               	movlw	144
  8213  0CA7  009D               	movwf	29	;volatile
  8214                           
  8215                           ;eusart.c: 64: TXSTA = 0x24;
  8216  0CA8  3024               	movlw	36
  8217  0CA9  009E               	movwf	30	;volatile
  8218                           
  8219                           ;eusart.c: 67: SPBRGL = 0x33;
  8220  0CAA  3033               	movlw	51
  8221  0CAB  009B               	movwf	27	;volatile
  8222                           
  8223                           ;eusart.c: 70: SPBRGH = 0x00;
  8224  0CAC  019C               	clrf	28	;volatile
  8225  0CAD  0008               	return
  8226  0CAE                     __end_of_EUSART_Initialize:	
  8227                           
  8228                           	psect	text31
  8229  0C99                     __ptext31:	
  8230 ;; *************** function _EUSART_Read *****************
  8231 ;; Defined at:
  8232 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;		None
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  1    wreg      unsigned char 
  8239 ;; Registers used:
  8240 ;;		wreg
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        0 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_main
  8256 ;;		_getch
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _EUSART_Read
  8262  0C99                     _EUSART_Read:	
  8263  0C99                     l51:	
  8264                           ;eusart.c: 78: {
  8265                           
  8266                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in _EUSART_Read: [wreg]
  8270                           
  8271  0C99  0020               	movlb	0	; select bank0
  8272  0C9A  1E91               	btfss	17,5	;volatile
  8273  0C9B  2C99               	goto	l51
  8274                           
  8275                           ;eusart.c: 79: }
  8276                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8277  0C9C  0023               	movlb	3	; select bank3
  8278  0C9D  1C9D               	btfss	29,1	;volatile
  8279  0C9E  2CA1               	goto	l2185
  8280                           
  8281                           ;eusart.c: 83: {
  8282                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8283  0C9F  121D               	bcf	29,4	;volatile
  8284                           
  8285                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8286  0CA0  161D               	bsf	29,4	;volatile
  8287  0CA1                     l2185:	
  8288                           
  8289                           ;eusart.c: 88: }
  8290                           ;eusart.c: 90: return RCREG;
  8291  0CA1  0819               	movf	25,w	;volatile
  8292  0CA2  0008               	return
  8293  0CA3                     __end_of_EUSART_Read:	
  8294  007E                     btemp	set	126	;btemp
  8295  007E                     wtemp0	set	126


Data Sizes:
    Strings     920
    Constant    35
    Data        9
    BSS         7
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      80
    BANK1            80     19      30
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_52(CODE[7]), printf@c(BANK0[1]), receive@rx_buf(BANK0[15]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_51(CODE[5]), STR_50(CODE[15]), STR_49(CODE[15]), STR_48(CODE[2]), 
		 -> STR_47(CODE[32]), STR_46(CODE[32]), STR_45(CODE[2]), STR_44(CODE[16]), 
		 -> STR_43(CODE[16]), STR_42(CODE[2]), STR_41(CODE[12]), STR_40(CODE[12]), 
		 -> STR_39(CODE[12]), STR_38(CODE[2]), STR_37(CODE[12]), STR_36(CODE[12]), 
		 -> STR_35(CODE[5]), STR_34(CODE[13]), STR_33(CODE[13]), STR_32(CODE[18]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[20]), STR_28(CODE[14]), 
		 -> STR_27(CODE[14]), STR_26(CODE[14]), STR_25(CODE[15]), STR_24(CODE[16]), 
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[21]), 
		 -> STR_19(CODE[15]), STR_18(CODE[22]), STR_17(CODE[44]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[25]), STR_13(CODE[42]), STR_12(CODE[38]), 
		 -> STR_11(CODE[58]), STR_10(CODE[54]), STR_9(CODE[59]), STR_8(CODE[51]), 
		 -> STR_7(CODE[23]), STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   95721
                                             71 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     6     6      0   24688
                                             65 BANK0      6     6      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            9     9      0    2319
                                              0 BANK0      9     9      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14329
                                             39 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6011
                                             32 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        17    15      2   16636
                                             39 BANK0     17    15      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            31    30      1    9008
                                             32 BANK0     31    30      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             8     6      2   10716
                                             39 BANK0      8     6      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                  12    12      0    8337
                                             32 BANK0     11    11      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        5     5      0    2273
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         9     9      0   10410
                                             39 BANK0      9     9      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         7     7      0    8091
                                             32 BANK0      7     7      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    21     10    5704
                                              5 BANK0     27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2150
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      1E       7       37.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 16 08:47:29 2018

                    _SPI_Initialize 0C78                         __CFG_CP$OFF 0000  
                  ?_receive_handler 0040                                  l51 0C99  
                                l58 0C80             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 13B6                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C8C                                 l312 017B  
                               l340 0E8A                                 l413 06D6  
                               l309 016B                                 l422 072F  
                               l342 0E90                                 l334 0E74  
                               l335 0E70                                 l337 0E84  
                               l418 06F8                                 l338 0E80  
                               l443 07EA                                 l527 0D14  
                               l391 06B0                                 l392 0620  
                               l379 05D6            __end_of_can_status_check 0E96  
                      __CFG_CPD$OFF 0000                                 _abc 13B0  
                               _sid 006B                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
             can_logging_mode@debug 0072                        ?_EUSART_Read 0070  
                              l2001 074E                                l2013 0767  
                              l2015 076B                                l2023 0780  
                              l2007 0758                                l2025 0786  
                              l2027 07AD                                l2035 07D4  
                              l2019 0778                                l2037 07D8  
                              l2117 0E20                                l2045 0F54  
                              l2039 05B5                                l2055 0F68  
                              l2321 0055                                l2057 0F86  
                              l2251 0FA1                                l2059 0F8D  
                              l2253 0F9A                                l2165 0126  
                              l2271 0FC7                                l2263 0FBC  
                              l2255 0FA6                                l2415 01CD  
                              l2327 0062                                l2319 0038  
                              l2503 03FA                                l2185 0CA1  
                              l2273 0FEC                                l2353 0365  
                              l2417 01A4                                l2513 0419  
                              l2347 031A                                l2435 0215  
                              l2419 01D3                                l2507 0410  
                              l2269 0FC3                                l2365 03B5  
                              l2381 0165                                l2533 0442  
                              l2525 0433                                l2279 0FFB  
                              l1823 0DF0                                l1815 0DD2  
                              l1911 0622                                l1903 05F1  
                              l2359 036A                                l2463 0275  
                              l2447 0248                                l2543 0454  
                              l2519 0427                                l1817 0DDE  
                              l1841 0DB0                                l2393 0187  
                              l2553 0463                                l2545 0456  
                              l2537 0449                                l2529 0439  
                              l1827 0DF9                                l1923 0637  
                              l2459 0273                                l2387 0177  
                              l2395 0189                                l2571 04B0  
                              l2483 0512                                l1861 0E9F  
                              l1845 0DBC                                l1941 067B  
                              l1933 0654                                l1925 0645  
                              l2565 0497                                l2557 0472  
                              l2493 0534                                l1871 0EC9  
                              l1839 0DA4                                l1935 0663  
                              l1919 0635                                l1951 068F  
                              l2583 058C                                l1793 0D0E  
                              l1865 0EAD                                l1881 0EE2  
                              l1849 0DC5                                l1945 0686  
                              l1929 0652                                l2569 04AC  
                              l2577 0570                                l2585 058D  
                              l1787 0CBA                                l1875 0ECD  
                              l1867 0EC0                                l1963 06CA  
                              l1939 0670                                l1891 05D1  
                              l1869 0EC4                                l1879 0EDE  
                              l1991 0723                                l1897 05DB  
                              l1899 05E4                                l1989 071A  
                              l1999 074B                                STR_1 1394  
                              STR_2 13A1                                STR_3 13A7  
                              STR_4 11F9                                STR_5 125D  
                              STR_6 13B3                                STR_7 11E4  
                              STR_8 10AB                                STR_9 1000  
                              u1315 0D15                                u1325 0D1A  
                              _LATA 010C                                _LATC 010E  
                              u1425 0DA7                                u1355 0DD5  
                              u1445 0DB6                                u2085 001B  
                              u1375 0DDF                                u1455 0DBD  
                              u2095 0026                                u1385 0DE9  
                              u1395 0DF1                                u1715 073E  
                              u2284 0252                                u1645 06F1  
                              u2285 0251                                u2480 058A  
                              u1585 064B                                u1930 0F01  
                              u1675 0713                                u1845 0D38  
                              u1884 0D54                                u1885 0D53  
                              u1895 00AB                                _WPUA 020C  
                              _WPUC 020E                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _atoi 0F99  
                              _main 03EA                                _mode 0069  
                   can_baudrate@bpr 0049                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                         main@success 00A2  
                              start 0002              __end_of_SPI_Initialize 0C7F  
                      _SPI_exchange 0CCB                       __CFG_MCLRE$ON 0000  
        __end_of_can_dump_registers 03EA                       can_init@F2806 00B3  
    __end_of_SPI_Exchange8bitBuffer 0EE4                can_set_mask@mask_buf 0051  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
     __end_of_OSCILLATOR_Initialize 0C78                               ?_atoi 0076  
                             ?_main 0070                               STR_10 1075  
                             STR_11 103B                               STR_20 1211  
                             STR_12 1134                               STR_21 11CD  
                             STR_13 110A                               STR_30 1283  
                             STR_22 1272                               STR_14 11B4  
                             STR_31 12A5                               STR_23 1294  
                             STR_15 1226                               STR_40 1363  
                             STR_24 12B6                               STR_32 124F  
                             STR_16 119A                               STR_41 136F  
                             STR_33 134A                               STR_25 12E6  
                             STR_17 10DE                       __CFG_WDTE$OFF 0000  
                             STR_42 11F9                               STR_50 1304  
                             STR_34 133D                               STR_26 132F  
                             STR_18 11FB                               STR_51 11F6  
                             STR_35 11F6                               STR_27 1321  
                             STR_19 1304                               STR_43 12C6  
                             STR_36 1277                               STR_52 138D  
                             STR_28 1313                               STR_44 12D6  
                             STR_45 11F9                               STR_37 1299  
                             STR_53 1261                               STR_29 123B  
                             STR_38 11F9                               STR_46 117A  
                             STR_39 1357                               STR_47 115A  
                             STR_48 11F9                               STR_49 12F5  
              __size_of_can_set_sid 0024                     __end_of___lwdiv 0DFE  
                   __end_of___lwmod 0DCA       can_status_check@bytes_written 0063  
                             _RCREG 0199                               _RCSTA 019D  
       can_dump_registers@mask_sidh 0048         can_dump_registers@mask_sidl 0049  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 1385                      _WDT_Initialize 0C62  
                   __end_of_max_idx 13BB                     __end_of_isdigit 0CBC  
                   __end_of_receive 013E                               atoi@a 007B  
                  can_baudrate@mask 004A                               atoi@s 007D  
                             _putch 0C66                               main@c 00B0  
                             main@n 00A6                       can_send@F2837 00BA  
                             pclath 000A                               status 0003  
                             wtemp0 007E              can_send@can_status_buf 0053  
                     receive@rx_buf 004D                     ?_SPI_Initialize 0070  
                   __initialization 07EB                   can_send@debug_buf 005A  
             __size_of_can_baudrate 002B                        __end_of_atoi 1000  
                      __end_of_main 05B0                       main@echo_back 00A5  
                    ??_EUSART_Write 0070              can_status_check@status 0066  
             read_register@read_buf 0022                              ??_atoi 0078  
                            ??_main 0067               can_set_mask@mask_sidh 0056  
             can_set_mask@mask_sidl 0057             can_logging_mode@verbose 0070  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0C66  
                     can_set_mask@n 0047            __end_of_SPI_Exchange8bit 0C90  
             __size_of_can_ope_mode 004B               __size_of_can_set_mask 0078  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                  __end_of_can_init 0F3E                        _can_baudrate 0D73  
                  __end_of_can_send 0277                    receive_handler@i 0046  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0D0C  
                     _output_format 006D                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
                            _printf 05B0                        _can_ope_mode 0DFE  
                      _can_set_mask 0011                           ??_isdigit 0070  
                         ??_receive 0047                     ?_WDT_Initialize 0070  
         __size_of_can_logging_mode 000B                    __end_of_rxfnsidh 13A1  
                  __end_of_txbnsidh 13B0                    __end_of_rxmnsidh 13BA  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0CBC  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
            __size_of_read_register 0015                  ?_SYSTEM_Initialize 0070  
             txf_clear@can_int_flag 0025                      __pcstackCOMMON 0070  
                      __pidataBANK1 0C90                 ??_SYSTEM_Initialize 0070  
                    can_send@tx_buf 0045                      can_send@status 0059  
                     __end_of_putch 0C6B                         receive@pbuf 005C  
                        __end_of_nm 13B8                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 0061  
         __end_of_SYSTEM_Initialize 0CCB                             ??_putch 0071  
                        __pbssBANK0 0069                __end_of_EUSART_Write 0C87  
                  can_set_mask@mask 0048                          __pmaintext 03EA  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0025                       _read_register 0CE0  
                         ?_can_init 0047                           ?_can_send 0040  
                _can_dump_registers 0277            __size_of_receive_handler 005B  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211                     can_init@cnf_buf 004A  
               ?_can_dump_registers 0070                  __size_of_txf_clear 0028  
                  ??_SPI_Initialize 0070                     __size_of___wmul 001B  
              ??_can_dump_registers 0040                       ??_can_set_sid 0072  
                           ___lwdiv 0DCA                             ___lwmod 0D9E  
                    ?_read_register 0070                             _handler 00BC  
                           __ptext1 0E49                             __ptext2 0D4B  
                           __ptext3 0089                             __ptext4 0F3E  
                           __ptext5 0011                             __ptext6 013E  
                           __ptext7 0006                             __ptext8 0EE4  
                           __ptext9 0D27                     __size_of_printf 023B  
                 __end_of_hexpowers 138D                             _dpowers 137B  
                        ??_can_init 0049               _OSCILLATOR_Initialize 0C71  
                           _max_idx 13BA                          ??_can_send 0041  
                           _isdigit 0CAE                             _receive 0089  
          ??_PIN_MANAGER_Initialize 0070      can_status_check@can_status_buf 0064  
                  _can_logging_mode 0006                   ?_SPI_Exchange8bit 0070  
                           main@cmd 00B1              txf_clear@bytes_written 0024  
                           main@buf 00A7                             main@bpr 00A1  
        __size_of_SYSTEM_Initialize 000F                             main@idx 00B2  
                           main@sid 00A0                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
                           init_ram 0C6B                             initloop 0C6C  
                    _operation_mode 006F                   _EUSART_Initialize 0CA3  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 003F                             printf@f 0025  
                 __end_of_txf_clear 0D73                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_set_sid 0D4B  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
                 ??_receive_handler 0043           __end_of_EUSART_Initialize 0CAE  
                       printf@width 003D            ??_SPI_Exchange8bitBuffer 0073  
          can_ope_mode@can_ctrl_buf 0043                 receive_handler@pbuf 0041  
                   ??_read_register 0020                      __end_of___wmul 0D27  
             can_status_check@F2846 00B8                        _EUSART_Write 0C7F  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 07EB  
               start_initialization 07EB     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 13B3                    _can_set_mask$488 004F  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         can_baudrate@bytes_written 004B           __size_of_can_status_check 004D  
         can_ope_mode@bytes_written 0042                       ?_SPI_exchange 0078  
                          ??___wmul 0074                         __pdataBANK1 00B3  
                     txf_clear@mask 0023                         _can_set_sid 0D27  
                          ??_printf 002F                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
               can_set_sid@can_node 0070                   read_register@addr 0021  
                 __size_of_can_init 005A                   __size_of_can_send 0139  
                        receive@dlc 005F       SPI_Exchange8bitBuffer@dataOut 0072  
                        receive@sid 005D          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0CA3                           __pnvBANK1 00BC  
                   can_set_mask@cmd 0055                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0CF5                     can_set_sid@sidh 0075  
                   can_set_sid@sidl 0076            __end_of_can_logging_mode 0011  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                            ?_receive 0070  
                         can_send@i 005D                           can_send@n 005E  
                         _hexpowers 1385                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                can_baudrate@cnf1_buf 004C  
                     ?_can_baudrate 0070                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
               can_dump_registers@n 004A                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214         __size_of_can_dump_registers 0173  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
                     ?_can_set_mask 0047              _SPI_Exchange8bitBuffer 0E96  
                   _receive_handler 0F3E                          printf@flag 003C  
                        printf@prec 0034                           _txf_clear 0D4B  
                receive_handler@dlc 0042                  receive_handler@sid 0040  
                       _EUSART_Read 0C99                      ??_can_baudrate 0047  
                       can_send@dlc 0040                         can_send@buf 0056  
                       can_send@len 0055                    _can_status_check 0E49  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 0040                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C                      ??_can_set_mask 0049  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$793 0070  
              can_ope_mode@ope_mode 0046        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_init 0EE4                            _can_send 013E  
                        txf_clear@n 0022                          ?_txf_clear 0070  
              __end_of_SPI_exchange 0CE0                    __size_of_isdigit 000E  
                  __size_of_receive 00B5                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0277  
                          __ptext11 0CE0                            __ptext20 0E96  
                          __ptext12 0D73                            __ptext21 0C87  
                          __ptext13 0DFE                            __ptext30 0CA3  
                          __ptext22 0F99                            __ptext14 05B0  
                          __ptext31 0C99                            __ptext23 0CAE  
                          __ptext15 0C66                            __ptext24 0D0C  
                          __ptext16 0C7F                            __ptext25 0CBC  
                          __ptext17 0D9E                            __ptext26 0C62  
                          __ptext18 0DCA                            __ptext27 0C78  
                          __ptext19 0CCB                            __ptext28 0CF5  
                          __ptext29 0C71                        _SSP1CON1bits 0215  
                     __size_of_atoi 0067                       __size_of_main 01C6  
              can_send@txb_ctrl_buf 0058                            atoi@sign 007A  
           __end_of_receive_handler 0F99                        ?_can_set_sid 0070  
                         printf@idx 0033                           printf@len 0037  
                         printf@val 003A                        _SSP1STATbits 0214  
                          main@mask 00A3                            _rxfnsidh 139B  
             __end_of_read_register 0CF5                            _txbnsidh 13AD  
                          _rxmnsidh 13B8                      __pstringtext10 103B  
                    __pstringtext11 1075                      __pstringtext20 11CD  
                    __pstringtext12 10AB                      __pstringtext21 11E4  
                    __pstringtext13 10DE                      __pstringtext30 1294  
                    __pstringtext22 11FB                      __pstringtext14 110A  
                    __pstringtext31 12A5                      __pstringtext23 1211  
                    __pstringtext15 1134                      __pstringtext40 132F  
                    __pstringtext32 12B6                      __pstringtext24 1226  
                    __pstringtext16 115A                      __pstringtext41 133D  
                    __pstringtext33 12C6                      __pstringtext25 123B  
                    __pstringtext17 117A                      __pstringtext50 13B3  
                    __pstringtext42 134A                      __pstringtext34 12D6  
                    __pstringtext26 124F                      __pstringtext18 119A  
                    __pstringtext51 0000                      __pstringtext43 1357  
                    __pstringtext35 12E6                      __pstringtext27 1261  
                    __pstringtext19 11B4                      __pstringtext44 1363  
                    __pstringtext36 12F5                      __pstringtext28 1272  
                    __pstringtext45 136F                      __pstringtext37 1304  
                    __pstringtext29 1283                      __pstringtext46 138D  
                    __pstringtext38 1313                      __pstringtext47 1394  
                    __pstringtext39 1321                      __pstringtext48 13A1  
                    __pstringtext49 13A7                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                            receive@n 0060  
                  ___lwmod@dividend 007A             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                 receive@bytes_read 004C                    _SPI_Exchange8bit 0C87  
             can_send@bytes_written 0057                            printf@ap 0039  
                          printf@cp 0035                   ?_can_logging_mode 0070  
           can_init@receive_handler 0047                  ??_can_logging_mode 0071  
              __end_of_can_baudrate 0D9E                       __pstringtext1 137B  
                     __pstringtext2 1385                       __pstringtext3 139B  
                     __pstringtext4 13AD                       __pstringtext5 13B0  
                     __pstringtext6 13B6                       __pstringtext7 13B8  
                     __pstringtext8 13BA                       __pstringtext9 1000  
                       ??_txf_clear 0020                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0D0C                __end_of_can_ope_mode 0E49  
              __end_of_can_set_mask 0089  
