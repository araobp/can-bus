

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 15 21:52:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	stringtext18,global,class=STRCODE,delta=2
    24                           	psect	stringtext19,global,class=STRCODE,delta=2
    25                           	psect	stringtext20,global,class=STRCODE,delta=2
    26                           	psect	stringtext21,global,class=STRCODE,delta=2
    27                           	psect	stringtext22,global,class=STRCODE,delta=2
    28                           	psect	stringtext23,global,class=STRCODE,delta=2
    29                           	psect	stringtext24,global,class=STRCODE,delta=2
    30                           	psect	stringtext25,global,class=STRCODE,delta=2
    31                           	psect	stringtext26,global,class=STRCODE,delta=2
    32                           	psect	stringtext27,global,class=STRCODE,delta=2
    33                           	psect	stringtext28,global,class=STRCODE,delta=2
    34                           	psect	stringtext29,global,class=STRCODE,delta=2
    35                           	psect	stringtext30,global,class=STRCODE,delta=2
    36                           	psect	stringtext31,global,class=STRCODE,delta=2
    37                           	psect	stringtext32,global,class=STRCODE,delta=2
    38                           	psect	stringtext33,global,class=STRCODE,delta=2
    39                           	psect	stringtext34,global,class=STRCODE,delta=2
    40                           	psect	stringtext35,global,class=STRCODE,delta=2
    41                           	psect	stringtext36,global,class=STRCODE,delta=2
    42                           	psect	stringtext37,global,class=STRCODE,delta=2
    43                           	psect	stringtext38,global,class=STRCODE,delta=2
    44                           	psect	stringtext39,global,class=STRCODE,delta=2
    45                           	psect	stringtext40,global,class=STRCODE,delta=2
    46                           	psect	stringtext41,global,class=STRCODE,delta=2
    47                           	psect	stringtext42,global,class=STRCODE,delta=2
    48                           	psect	stringtext43,global,class=STRCODE,delta=2
    49                           	psect	stringtext44,global,class=STRCODE,delta=2
    50                           	psect	stringtext45,global,class=STRCODE,delta=2
    51                           	psect	stringtext46,global,class=STRCODE,delta=2
    52                           	psect	stringtext47,global,class=STRCODE,delta=2
    53                           	psect	stringtext48,global,class=STRCODE,delta=2
    54                           	psect	stringtext49,global,class=STRCODE,delta=2
    55                           	psect	stringtext50,global,class=STRCODE,delta=2
    56                           	psect	stringtext51,global,class=STRCODE,delta=2
    57                           	psect	stringtext52,global,class=STRCODE,delta=2
    58                           	psect	stringtext53,global,class=STRCODE,delta=2
    59                           	psect	cinit,global,class=CODE,merge=1,delta=2
    60                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    61                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    62                           	psect	inittext,global,class=CODE,delta=2
    63                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    65                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    66                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    67                           	psect	text1,local,class=CODE,merge=1,delta=2
    68                           	psect	text2,local,class=CODE,merge=1,delta=2
    69                           	psect	text3,local,class=CODE,merge=1,delta=2
    70                           	psect	text4,local,class=CODE,merge=1,delta=2
    71                           	psect	text5,local,class=CODE,merge=1,delta=2
    72                           	psect	text6,local,class=CODE,merge=1,delta=2
    73                           	psect	text7,local,class=CODE,merge=1,delta=2
    74                           	psect	text8,local,class=CODE,merge=1,delta=2
    75                           	psect	text9,local,class=CODE,merge=1,delta=2
    76                           	psect	text10,local,class=CODE,merge=1,delta=2
    77                           	psect	text11,local,class=CODE,merge=1,delta=2
    78                           	psect	text12,local,class=CODE,merge=1,delta=2
    79                           	psect	text13,local,class=CODE,merge=1,delta=2
    80                           	psect	text14,local,class=CODE,merge=1,delta=2
    81                           	psect	text15,local,class=CODE,merge=1,delta=2
    82                           	psect	text16,local,class=CODE,merge=1,delta=2
    83                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text19,local,class=CODE,merge=1,delta=2
    86                           	psect	text20,local,class=CODE,merge=1,delta=2
    87                           	psect	text21,local,class=CODE,merge=1,delta=2
    88                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text25,local,class=CODE,merge=1,delta=2
    92                           	psect	text26,local,class=CODE,merge=1,delta=2
    93                           	psect	text27,local,class=CODE,merge=1,delta=2
    94                           	psect	text28,local,class=CODE,merge=1,delta=2
    95                           	psect	text29,local,class=CODE,merge=1,delta=2
    96                           	psect	text30,local,class=CODE,merge=1,delta=2
    97                           	psect	text31,local,class=CODE,merge=1,delta=2
    98                           	dabs	1,0x7E,2
    99  0000                     
   100                           ; Version 1.45
   101                           ; Generated 16/11/2017 GMT
   102                           ; 
   103                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC16F1825 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000E                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008E                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0097                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009B                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  010C                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011A                     	;# 
   190  011B                     	;# 
   191  011D                     	;# 
   192  011E                     	;# 
   193  018C                     	;# 
   194  018E                     	;# 
   195  0191                     	;# 
   196  0191                     	;# 
   197  0192                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0193                     	;# 
   201  0194                     	;# 
   202  0195                     	;# 
   203  0196                     	;# 
   204  0199                     	;# 
   205  019A                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019C                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  020C                     	;# 
   213  020E                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0295                     	;# 
   235  0295                     	;# 
   236  0296                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  029B                     	;# 
   242  029C                     	;# 
   243  029D                     	;# 
   244  029E                     	;# 
   245  0311                     	;# 
   246  0311                     	;# 
   247  0312                     	;# 
   248  0313                     	;# 
   249  0318                     	;# 
   250  0318                     	;# 
   251  0319                     	;# 
   252  031A                     	;# 
   253  038C                     	;# 
   254  038E                     	;# 
   255  0391                     	;# 
   256  0392                     	;# 
   257  0393                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0415                     	;# 
   264  0416                     	;# 
   265  0417                     	;# 
   266  041C                     	;# 
   267  041D                     	;# 
   268  041E                     	;# 
   269  0FE4                     	;# 
   270  0FE5                     	;# 
   271  0FE6                     	;# 
   272  0FE7                     	;# 
   273  0FE8                     	;# 
   274  0FE9                     	;# 
   275  0FEA                     	;# 
   276  0FEB                     	;# 
   277  0FED                     	;# 
   278  0FEE                     	;# 
   279  0FEF                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000E                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0013                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  001E                     	;# 
   307  001F                     	;# 
   308  008C                     	;# 
   309  008E                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0093                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0098                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  010C                     	;# 
   325  010E                     	;# 
   326  0111                     	;# 
   327  0112                     	;# 
   328  0113                     	;# 
   329  0114                     	;# 
   330  0115                     	;# 
   331  0116                     	;# 
   332  0117                     	;# 
   333  0118                     	;# 
   334  0119                     	;# 
   335  011A                     	;# 
   336  011B                     	;# 
   337  011D                     	;# 
   338  011E                     	;# 
   339  018C                     	;# 
   340  018E                     	;# 
   341  0191                     	;# 
   342  0191                     	;# 
   343  0192                     	;# 
   344  0193                     	;# 
   345  0193                     	;# 
   346  0193                     	;# 
   347  0194                     	;# 
   348  0195                     	;# 
   349  0196                     	;# 
   350  0199                     	;# 
   351  019A                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019C                     	;# 
   355  019D                     	;# 
   356  019E                     	;# 
   357  019F                     	;# 
   358  020C                     	;# 
   359  020E                     	;# 
   360  0211                     	;# 
   361  0211                     	;# 
   362  0212                     	;# 
   363  0212                     	;# 
   364  0213                     	;# 
   365  0213                     	;# 
   366  0214                     	;# 
   367  0214                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0216                     	;# 
   372  0216                     	;# 
   373  0217                     	;# 
   374  0217                     	;# 
   375  0291                     	;# 
   376  0291                     	;# 
   377  0292                     	;# 
   378  0293                     	;# 
   379  0294                     	;# 
   380  0295                     	;# 
   381  0295                     	;# 
   382  0296                     	;# 
   383  0298                     	;# 
   384  0298                     	;# 
   385  0299                     	;# 
   386  029A                     	;# 
   387  029B                     	;# 
   388  029C                     	;# 
   389  029D                     	;# 
   390  029E                     	;# 
   391  0311                     	;# 
   392  0311                     	;# 
   393  0312                     	;# 
   394  0313                     	;# 
   395  0318                     	;# 
   396  0318                     	;# 
   397  0319                     	;# 
   398  031A                     	;# 
   399  038C                     	;# 
   400  038E                     	;# 
   401  0391                     	;# 
   402  0392                     	;# 
   403  0393                     	;# 
   404  039A                     	;# 
   405  039C                     	;# 
   406  039D                     	;# 
   407  039E                     	;# 
   408  039F                     	;# 
   409  0415                     	;# 
   410  0416                     	;# 
   411  0417                     	;# 
   412  041C                     	;# 
   413  041D                     	;# 
   414  041E                     	;# 
   415  0FE4                     	;# 
   416  0FE5                     	;# 
   417  0FE6                     	;# 
   418  0FE7                     	;# 
   419  0FE8                     	;# 
   420  0FE9                     	;# 
   421  0FEA                     	;# 
   422  0FEB                     	;# 
   423  0FED                     	;# 
   424  0FEE                     	;# 
   425  0FEF                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0008                     	;# 
   435  0009                     	;# 
   436  000A                     	;# 
   437  000B                     	;# 
   438  000C                     	;# 
   439  000E                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0016                     	;# 
   446  0017                     	;# 
   447  0018                     	;# 
   448  0019                     	;# 
   449  001A                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001E                     	;# 
   453  001F                     	;# 
   454  008C                     	;# 
   455  008E                     	;# 
   456  0091                     	;# 
   457  0092                     	;# 
   458  0093                     	;# 
   459  0095                     	;# 
   460  0096                     	;# 
   461  0097                     	;# 
   462  0098                     	;# 
   463  0099                     	;# 
   464  009A                     	;# 
   465  009B                     	;# 
   466  009B                     	;# 
   467  009C                     	;# 
   468  009D                     	;# 
   469  009E                     	;# 
   470  010C                     	;# 
   471  010E                     	;# 
   472  0111                     	;# 
   473  0112                     	;# 
   474  0113                     	;# 
   475  0114                     	;# 
   476  0115                     	;# 
   477  0116                     	;# 
   478  0117                     	;# 
   479  0118                     	;# 
   480  0119                     	;# 
   481  011A                     	;# 
   482  011B                     	;# 
   483  011D                     	;# 
   484  011E                     	;# 
   485  018C                     	;# 
   486  018E                     	;# 
   487  0191                     	;# 
   488  0191                     	;# 
   489  0192                     	;# 
   490  0193                     	;# 
   491  0193                     	;# 
   492  0193                     	;# 
   493  0194                     	;# 
   494  0195                     	;# 
   495  0196                     	;# 
   496  0199                     	;# 
   497  019A                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019C                     	;# 
   501  019D                     	;# 
   502  019E                     	;# 
   503  019F                     	;# 
   504  020C                     	;# 
   505  020E                     	;# 
   506  0211                     	;# 
   507  0211                     	;# 
   508  0212                     	;# 
   509  0212                     	;# 
   510  0213                     	;# 
   511  0213                     	;# 
   512  0214                     	;# 
   513  0214                     	;# 
   514  0215                     	;# 
   515  0215                     	;# 
   516  0215                     	;# 
   517  0216                     	;# 
   518  0216                     	;# 
   519  0217                     	;# 
   520  0217                     	;# 
   521  0291                     	;# 
   522  0291                     	;# 
   523  0292                     	;# 
   524  0293                     	;# 
   525  0294                     	;# 
   526  0295                     	;# 
   527  0295                     	;# 
   528  0296                     	;# 
   529  0298                     	;# 
   530  0298                     	;# 
   531  0299                     	;# 
   532  029A                     	;# 
   533  029B                     	;# 
   534  029C                     	;# 
   535  029D                     	;# 
   536  029E                     	;# 
   537  0311                     	;# 
   538  0311                     	;# 
   539  0312                     	;# 
   540  0313                     	;# 
   541  0318                     	;# 
   542  0318                     	;# 
   543  0319                     	;# 
   544  031A                     	;# 
   545  038C                     	;# 
   546  038E                     	;# 
   547  0391                     	;# 
   548  0392                     	;# 
   549  0393                     	;# 
   550  039A                     	;# 
   551  039C                     	;# 
   552  039D                     	;# 
   553  039E                     	;# 
   554  039F                     	;# 
   555  0415                     	;# 
   556  0416                     	;# 
   557  0417                     	;# 
   558  041C                     	;# 
   559  041D                     	;# 
   560  041E                     	;# 
   561  0FE4                     	;# 
   562  0FE5                     	;# 
   563  0FE6                     	;# 
   564  0FE7                     	;# 
   565  0FE8                     	;# 
   566  0FE9                     	;# 
   567  0FEA                     	;# 
   568  0FEB                     	;# 
   569  0FED                     	;# 
   570  0FEE                     	;# 
   571  0FEF                     	;# 
   572  0000                     	;# 
   573  0001                     	;# 
   574  0002                     	;# 
   575  0003                     	;# 
   576  0004                     	;# 
   577  0005                     	;# 
   578  0006                     	;# 
   579  0007                     	;# 
   580  0008                     	;# 
   581  0009                     	;# 
   582  000A                     	;# 
   583  000B                     	;# 
   584  000C                     	;# 
   585  000E                     	;# 
   586  0011                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001C                     	;# 
   598  001E                     	;# 
   599  001F                     	;# 
   600  008C                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010E                     	;# 
   618  0111                     	;# 
   619  0112                     	;# 
   620  0113                     	;# 
   621  0114                     	;# 
   622  0115                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  0118                     	;# 
   626  0119                     	;# 
   627  011A                     	;# 
   628  011B                     	;# 
   629  011D                     	;# 
   630  011E                     	;# 
   631  018C                     	;# 
   632  018E                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  020E                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  0291                     	;# 
   668  0291                     	;# 
   669  0292                     	;# 
   670  0293                     	;# 
   671  0294                     	;# 
   672  0295                     	;# 
   673  0295                     	;# 
   674  0296                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  029B                     	;# 
   680  029C                     	;# 
   681  029D                     	;# 
   682  029E                     	;# 
   683  0311                     	;# 
   684  0311                     	;# 
   685  0312                     	;# 
   686  0313                     	;# 
   687  0318                     	;# 
   688  0318                     	;# 
   689  0319                     	;# 
   690  031A                     	;# 
   691  038C                     	;# 
   692  038E                     	;# 
   693  0391                     	;# 
   694  0392                     	;# 
   695  0393                     	;# 
   696  039A                     	;# 
   697  039C                     	;# 
   698  039D                     	;# 
   699  039E                     	;# 
   700  039F                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000E                     	;# 
   732  0011                     	;# 
   733  0012                     	;# 
   734  0013                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0016                     	;# 
   738  0017                     	;# 
   739  0018                     	;# 
   740  0019                     	;# 
   741  001A                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  008C                     	;# 
   747  008E                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0093                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011E                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019D                     	;# 
   794  019E                     	;# 
   795  019F                     	;# 
   796  020C                     	;# 
   797  020E                     	;# 
   798  0211                     	;# 
   799  0211                     	;# 
   800  0212                     	;# 
   801  0212                     	;# 
   802  0213                     	;# 
   803  0213                     	;# 
   804  0214                     	;# 
   805  0214                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0216                     	;# 
   810  0216                     	;# 
   811  0217                     	;# 
   812  0217                     	;# 
   813  0291                     	;# 
   814  0291                     	;# 
   815  0292                     	;# 
   816  0293                     	;# 
   817  0294                     	;# 
   818  0295                     	;# 
   819  0295                     	;# 
   820  0296                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  029B                     	;# 
   826  029C                     	;# 
   827  029D                     	;# 
   828  029E                     	;# 
   829  0311                     	;# 
   830  0311                     	;# 
   831  0312                     	;# 
   832  0313                     	;# 
   833  0318                     	;# 
   834  0318                     	;# 
   835  0319                     	;# 
   836  031A                     	;# 
   837  038C                     	;# 
   838  038E                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  039A                     	;# 
   843  039C                     	;# 
   844  039D                     	;# 
   845  039E                     	;# 
   846  039F                     	;# 
   847  0415                     	;# 
   848  0416                     	;# 
   849  0417                     	;# 
   850  041C                     	;# 
   851  041D                     	;# 
   852  041E                     	;# 
   853  0FE4                     	;# 
   854  0FE5                     	;# 
   855  0FE6                     	;# 
   856  0FE7                     	;# 
   857  0FE8                     	;# 
   858  0FE9                     	;# 
   859  0FEA                     	;# 
   860  0FEB                     	;# 
   861  0FED                     	;# 
   862  0FEE                     	;# 
   863  0FEF                     	;# 
   864  0000                     	;# 
   865  0001                     	;# 
   866  0002                     	;# 
   867  0003                     	;# 
   868  0004                     	;# 
   869  0005                     	;# 
   870  0006                     	;# 
   871  0007                     	;# 
   872  0008                     	;# 
   873  0009                     	;# 
   874  000A                     	;# 
   875  000B                     	;# 
   876  000C                     	;# 
   877  000E                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0013                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  001E                     	;# 
   891  001F                     	;# 
   892  008C                     	;# 
   893  008E                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0095                     	;# 
   898  0096                     	;# 
   899  0097                     	;# 
   900  0098                     	;# 
   901  0099                     	;# 
   902  009A                     	;# 
   903  009B                     	;# 
   904  009B                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009E                     	;# 
   908  010C                     	;# 
   909  010E                     	;# 
   910  0111                     	;# 
   911  0112                     	;# 
   912  0113                     	;# 
   913  0114                     	;# 
   914  0115                     	;# 
   915  0116                     	;# 
   916  0117                     	;# 
   917  0118                     	;# 
   918  0119                     	;# 
   919  011A                     	;# 
   920  011B                     	;# 
   921  011D                     	;# 
   922  011E                     	;# 
   923  018C                     	;# 
   924  018E                     	;# 
   925  0191                     	;# 
   926  0191                     	;# 
   927  0192                     	;# 
   928  0193                     	;# 
   929  0193                     	;# 
   930  0193                     	;# 
   931  0194                     	;# 
   932  0195                     	;# 
   933  0196                     	;# 
   934  0199                     	;# 
   935  019A                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019F                     	;# 
   942  020C                     	;# 
   943  020E                     	;# 
   944  0211                     	;# 
   945  0211                     	;# 
   946  0212                     	;# 
   947  0212                     	;# 
   948  0213                     	;# 
   949  0213                     	;# 
   950  0214                     	;# 
   951  0214                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0216                     	;# 
   956  0216                     	;# 
   957  0217                     	;# 
   958  0217                     	;# 
   959  0291                     	;# 
   960  0291                     	;# 
   961  0292                     	;# 
   962  0293                     	;# 
   963  0294                     	;# 
   964  0295                     	;# 
   965  0295                     	;# 
   966  0296                     	;# 
   967  0298                     	;# 
   968  0298                     	;# 
   969  0299                     	;# 
   970  029A                     	;# 
   971  029B                     	;# 
   972  029C                     	;# 
   973  029D                     	;# 
   974  029E                     	;# 
   975  0311                     	;# 
   976  0311                     	;# 
   977  0312                     	;# 
   978  0313                     	;# 
   979  0318                     	;# 
   980  0318                     	;# 
   981  0319                     	;# 
   982  031A                     	;# 
   983  038C                     	;# 
   984  038E                     	;# 
   985  0391                     	;# 
   986  0392                     	;# 
   987  0393                     	;# 
   988  039A                     	;# 
   989  039C                     	;# 
   990  039D                     	;# 
   991  039E                     	;# 
   992  039F                     	;# 
   993  0415                     	;# 
   994  0416                     	;# 
   995  0417                     	;# 
   996  041C                     	;# 
   997  041D                     	;# 
   998  041E                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000E                     	;# 
  1024  0011                     	;# 
  1025  0012                     	;# 
  1026  0013                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  001E                     	;# 
  1037  001F                     	;# 
  1038  008C                     	;# 
  1039  008E                     	;# 
  1040  0091                     	;# 
  1041  0092                     	;# 
  1042  0093                     	;# 
  1043  0095                     	;# 
  1044  0096                     	;# 
  1045  0097                     	;# 
  1046  0098                     	;# 
  1047  0099                     	;# 
  1048  009A                     	;# 
  1049  009B                     	;# 
  1050  009B                     	;# 
  1051  009C                     	;# 
  1052  009D                     	;# 
  1053  009E                     	;# 
  1054  010C                     	;# 
  1055  010E                     	;# 
  1056  0111                     	;# 
  1057  0112                     	;# 
  1058  0113                     	;# 
  1059  0114                     	;# 
  1060  0115                     	;# 
  1061  0116                     	;# 
  1062  0117                     	;# 
  1063  0118                     	;# 
  1064  0119                     	;# 
  1065  011A                     	;# 
  1066  011B                     	;# 
  1067  011D                     	;# 
  1068  011E                     	;# 
  1069  018C                     	;# 
  1070  018E                     	;# 
  1071  0191                     	;# 
  1072  0191                     	;# 
  1073  0192                     	;# 
  1074  0193                     	;# 
  1075  0193                     	;# 
  1076  0193                     	;# 
  1077  0194                     	;# 
  1078  0195                     	;# 
  1079  0196                     	;# 
  1080  0199                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019C                     	;# 
  1085  019D                     	;# 
  1086  019E                     	;# 
  1087  019F                     	;# 
  1088  020C                     	;# 
  1089  020E                     	;# 
  1090  0211                     	;# 
  1091  0211                     	;# 
  1092  0212                     	;# 
  1093  0212                     	;# 
  1094  0213                     	;# 
  1095  0213                     	;# 
  1096  0214                     	;# 
  1097  0214                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0216                     	;# 
  1102  0216                     	;# 
  1103  0217                     	;# 
  1104  0217                     	;# 
  1105  0291                     	;# 
  1106  0291                     	;# 
  1107  0292                     	;# 
  1108  0293                     	;# 
  1109  0294                     	;# 
  1110  0295                     	;# 
  1111  0295                     	;# 
  1112  0296                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  029B                     	;# 
  1118  029C                     	;# 
  1119  029D                     	;# 
  1120  029E                     	;# 
  1121  0311                     	;# 
  1122  0311                     	;# 
  1123  0312                     	;# 
  1124  0313                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  038C                     	;# 
  1130  038E                     	;# 
  1131  0391                     	;# 
  1132  0392                     	;# 
  1133  0393                     	;# 
  1134  039A                     	;# 
  1135  039C                     	;# 
  1136  039D                     	;# 
  1137  039E                     	;# 
  1138  039F                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  041C                     	;# 
  1143  041D                     	;# 
  1144  041E                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156                           
  1157                           	psect	idataBANK1
  1158  0C85                     __pidataBANK1:	
  1159                           
  1160                           ;initializer for can_init@F2806
  1161  0C85  3402               	retlw	2
  1162  0C86  3428               	retlw	40
  1163  0C87  3405               	retlw	5
  1164  0C88  34F1               	retlw	241
  1165  0C89  3441               	retlw	65
  1166                           
  1167                           ;initializer for can_status_check@F2846
  1168  0C8A  34A0               	retlw	160
  1169  0C8B  3400               	retlw	0
  1170                           
  1171                           ;initializer for can_send@F2837
  1172  0C8C  34A0               	retlw	160
  1173  0C8D  3400               	retlw	0
  1174                           
  1175                           	psect	stringtext1
  1176  139F                     __pstringtext1:	
  1177  139F                     _dpowers:	
  1178  139F  3401               	retlw	1
  1179  13A0  3400               	retlw	0
  1180  13A1  340A               	retlw	10
  1181  13A2  3400               	retlw	0
  1182  13A3  3464               	retlw	100
  1183  13A4  3400               	retlw	0
  1184  13A5  34E8               	retlw	232
  1185  13A6  3403               	retlw	3
  1186  13A7  3410               	retlw	16
  1187  13A8  3427               	retlw	39
  1188  13A9                     __end_of_dpowers:	
  1189                           
  1190                           	psect	stringtext2
  1191  13A9                     __pstringtext2:	
  1192  13A9                     _hexpowers:	
  1193  13A9  3401               	retlw	1
  1194  13AA  3400               	retlw	0
  1195  13AB  3410               	retlw	16
  1196  13AC  3400               	retlw	0
  1197  13AD  3400               	retlw	0
  1198  13AE  3401               	retlw	1
  1199  13AF  3400               	retlw	0
  1200  13B0  3410               	retlw	16
  1201  13B1                     __end_of_hexpowers:	
  1202                           
  1203                           	psect	stringtext3
  1204  13BF                     __pstringtext3:	
  1205  13BF                     _rxfnsidh:	
  1206  13BF  3400               	retlw	0
  1207  13C0  3404               	retlw	4
  1208  13C1  3408               	retlw	8
  1209  13C2  3410               	retlw	16
  1210  13C3  3414               	retlw	20
  1211  13C4  3418               	retlw	24
  1212  13C5                     __end_of_rxfnsidh:	
  1213                           
  1214                           	psect	stringtext4
  1215  13D1                     __pstringtext4:	
  1216  13D1                     _txbnsidh:	
  1217  13D1  3431               	retlw	49
  1218  13D2  3441               	retlw	65
  1219  13D3  3451               	retlw	81
  1220  13D4                     __end_of_txbnsidh:	
  1221                           
  1222                           	psect	stringtext5
  1223  13D4                     __pstringtext5:	
  1224  13D4                     _abc:	
  1225  13D4  3400               	retlw	0
  1226  13D5  3402               	retlw	2
  1227  13D6  3404               	retlw	4
  1228  13D7                     __end_of_abc:	
  1229                           
  1230                           	psect	stringtext6
  1231  13DA                     __pstringtext6:	
  1232  13DA                     _nm:	
  1233  13DA  3400               	retlw	0
  1234  13DB  3402               	retlw	2
  1235  13DC                     __end_of_nm:	
  1236                           
  1237                           	psect	stringtext7
  1238  13DC                     __pstringtext7:	
  1239  13DC                     _rxmnsidh:	
  1240  13DC  3420               	retlw	32
  1241  13DD  3424               	retlw	36
  1242  13DE                     __end_of_rxmnsidh:	
  1243                           
  1244                           	psect	stringtext8
  1245  13DE                     __pstringtext8:	
  1246  13DE                     _max_idx:	
  1247  13DE  3407               	retlw	7
  1248  13DF                     __end_of_max_idx:	
  1249                           
  1250                           	psect	nvBANK1
  1251  00BC                     __pnvBANK1:	
  1252  00BC                     _handler:	
  1253  00BC                     	ds	2
  1254  0011                     _PIR1bits	set	17
  1255  0095                     _OPTION_REGbits	set	149
  1256  008E                     _TRISC	set	142
  1257  008C                     _TRISA	set	140
  1258  0097                     _WDTCON	set	151
  1259  0098                     _OSCTUNE	set	152
  1260  0099                     _OSCCON	set	153
  1261  010C                     _LATAbits	set	268
  1262  010E                     _LATCbits	set	270
  1263  011D                     _APFCON0	set	285
  1264  011E                     _APFCON1	set	286
  1265  010E                     _LATC	set	270
  1266  010C                     _LATA	set	268
  1267  0116                     _BORCON	set	278
  1268  018C                     _ANSELA	set	396
  1269  018E                     _ANSELC	set	398
  1270  019A                     _TXREG	set	410
  1271  0199                     _RCREG	set	409
  1272  019D                     _RCSTAbits	set	413
  1273  019C                     _SPBRGH	set	412
  1274  019B                     _SPBRGL	set	411
  1275  019E                     _TXSTA	set	414
  1276  019D                     _RCSTA	set	413
  1277  019F                     _BAUDCON	set	415
  1278  0214                     _SSP1STATbits	set	532
  1279  0211                     _SSP1BUF	set	529
  1280  0215                     _SSP1CON1bits	set	533
  1281  0212                     _SSP1ADD	set	530
  1282  0215                     _SSP1CON1	set	533
  1283  0214                     _SSP1STAT	set	532
  1284  020E                     _WPUC	set	526
  1285  020C                     _WPUA	set	524
  1286                           
  1287                           	psect	stringtext9
  1288  1000                     __pstringtext9:	
  1289  1000                     STR_9:	
  1290  1000  345B               	retlw	91	;'['
  1291  1001  3453               	retlw	83	;'S'
  1292  1002  3465               	retlw	101	;'e'
  1293  1003  3474               	retlw	116	;'t'
  1294  1004  3420               	retlw	32	;' '
  1295  1005  346F               	retlw	111	;'o'
  1296  1006  3475               	retlw	117	;'u'
  1297  1007  3474               	retlw	116	;'t'
  1298  1008  3470               	retlw	112	;'p'
  1299  1009  3475               	retlw	117	;'u'
  1300  100A  3474               	retlw	116	;'t'
  1301  100B  3420               	retlw	32	;' '
  1302  100C  346D               	retlw	109	;'m'
  1303  100D  346F               	retlw	111	;'o'
  1304  100E  3464               	retlw	100	;'d'
  1305  100F  3465               	retlw	101	;'e'
  1306  1010  345D               	retlw	93	;']'
  1307  1011  3420               	retlw	32	;' '
  1308  1012  347B               	retlw	123	;'{'
  1309  1013  3464               	retlw	100	;'d'
  1310  1014  3465               	retlw	101	;'e'
  1311  1015  3462               	retlw	98	;'b'
  1312  1016  3475               	retlw	117	;'u'
  1313  1017  3467               	retlw	103	;'g'
  1314  1018  343A               	retlw	58	;':'
  1315  1019  3420               	retlw	32	;' '
  1316  101A  3440               	retlw	64	;'@'
  1317  101B  3476               	retlw	118	;'v'
  1318  101C  3464               	retlw	100	;'d'
  1319  101D  342C               	retlw	44	;','
  1320  101E  3420               	retlw	32	;' '
  1321  101F  3476               	retlw	118	;'v'
  1322  1020  3465               	retlw	101	;'e'
  1323  1021  3472               	retlw	114	;'r'
  1324  1022  3462               	retlw	98	;'b'
  1325  1023  346F               	retlw	111	;'o'
  1326  1024  3473               	retlw	115	;'s'
  1327  1025  3465               	retlw	101	;'e'
  1328  1026  343A               	retlw	58	;':'
  1329  1027  3420               	retlw	32	;' '
  1330  1028  3440               	retlw	64	;'@'
  1331  1029  3476               	retlw	118	;'v'
  1332  102A  3476               	retlw	118	;'v'
  1333  102B  342C               	retlw	44	;','
  1334  102C  3420               	retlw	32	;' '
  1335  102D  346E               	retlw	110	;'n'
  1336  102E  346F               	retlw	111	;'o'
  1337  102F  3472               	retlw	114	;'r'
  1338  1030  346D               	retlw	109	;'m'
  1339  1031  3461               	retlw	97	;'a'
  1340  1032  346C               	retlw	108	;'l'
  1341  1033  343A               	retlw	58	;':'
  1342  1034  3420               	retlw	32	;' '
  1343  1035  3440               	retlw	64	;'@'
  1344  1036  3476               	retlw	118	;'v'
  1345  1037  346E               	retlw	110	;'n'
  1346  1038  347D               	retlw	125	;'}'
  1347  1039  340A               	retlw	10
  1348  103A  3400               	retlw	0
  1349                           
  1350                           	psect	stringtext10
  1351  103B                     __pstringtext10:	
  1352  103B                     STR_11:	
  1353  103B  3420               	retlw	32	;' '
  1354  103C  3420               	retlw	32	;' '
  1355  103D  3420               	retlw	32	;' '
  1356  103E  3420               	retlw	32	;' '
  1357  103F  3420               	retlw	32	;' '
  1358  1040  3477               	retlw	119	;'w'
  1359  1041  3469               	retlw	105	;'i'
  1360  1042  3474               	retlw	116	;'t'
  1361  1043  3468               	retlw	104	;'h'
  1362  1044  3420               	retlw	32	;' '
  1363  1045  3453               	retlw	83	;'S'
  1364  1046  3449               	retlw	73	;'I'
  1365  1047  3444               	retlw	68	;'D'
  1366  1048  343A               	retlw	58	;':'
  1367  1049  3420               	retlw	32	;' '
  1368  104A  3440               	retlw	64	;'@'
  1369  104B  346F               	retlw	111	;'o'
  1370  104C  346C               	retlw	108	;'l'
  1371  104D  3473               	retlw	115	;'s'
  1372  104E  3420               	retlw	32	;' '
  1373  104F  346F               	retlw	111	;'o'
  1374  1050  3472               	retlw	114	;'r'
  1375  1051  3420               	retlw	32	;' '
  1376  1052  3440               	retlw	64	;'@'
  1377  1053  346F               	retlw	111	;'o'
  1378  1054  346E               	retlw	110	;'n'
  1379  1055  3473               	retlw	115	;'s'
  1380  1056  342C               	retlw	44	;','
  1381  1057  3420               	retlw	32	;' '
  1382  1058  3469               	retlw	105	;'i'
  1383  1059  346E               	retlw	110	;'n'
  1384  105A  3420               	retlw	32	;' '
  1385  105B  3468               	retlw	104	;'h'
  1386  105C  3465               	retlw	101	;'e'
  1387  105D  3478               	retlw	120	;'x'
  1388  105E  3420               	retlw	32	;' '
  1389  105F  3466               	retlw	102	;'f'
  1390  1060  346F               	retlw	111	;'o'
  1391  1061  3472               	retlw	114	;'r'
  1392  1062  346D               	retlw	109	;'m'
  1393  1063  3461               	retlw	97	;'a'
  1394  1064  3474               	retlw	116	;'t'
  1395  1065  343A               	retlw	58	;':'
  1396  1066  3420               	retlw	32	;' '
  1397  1067  3440               	retlw	64	;'@'
  1398  1068  346F               	retlw	111	;'o'
  1399  1069  346C               	retlw	108	;'l'
  1400  106A  3468               	retlw	104	;'h'
  1401  106B  3420               	retlw	32	;' '
  1402  106C  346F               	retlw	111	;'o'
  1403  106D  3472               	retlw	114	;'r'
  1404  106E  3420               	retlw	32	;' '
  1405  106F  3440               	retlw	64	;'@'
  1406  1070  346F               	retlw	111	;'o'
  1407  1071  346E               	retlw	110	;'n'
  1408  1072  3468               	retlw	104	;'h'
  1409  1073  340A               	retlw	10
  1410  1074  3400               	retlw	0
  1411                           
  1412                           	psect	stringtext11
  1413  1075                     __pstringtext11:	
  1414  1075                     STR_10:	
  1415  1075  345B               	retlw	91	;'['
  1416  1076  3445               	retlw	69	;'E'
  1417  1077  346E               	retlw	110	;'n'
  1418  1078  3461               	retlw	97	;'a'
  1419  1079  3462               	retlw	98	;'b'
  1420  107A  346C               	retlw	108	;'l'
  1421  107B  3465               	retlw	101	;'e'
  1422  107C  3420               	retlw	32	;' '
  1423  107D  346F               	retlw	111	;'o'
  1424  107E  3470               	retlw	112	;'p'
  1425  107F  3465               	retlw	101	;'e'
  1426  1080  3472               	retlw	114	;'r'
  1427  1081  3461               	retlw	97	;'a'
  1428  1082  3474               	retlw	116	;'t'
  1429  1083  3469               	retlw	105	;'i'
  1430  1084  346F               	retlw	111	;'o'
  1431  1085  346E               	retlw	110	;'n'
  1432  1086  3420               	retlw	32	;' '
  1433  1087  346D               	retlw	109	;'m'
  1434  1088  346F               	retlw	111	;'o'
  1435  1089  3464               	retlw	100	;'d'
  1436  108A  3465               	retlw	101	;'e'
  1437  108B  345D               	retlw	93	;']'
  1438  108C  3420               	retlw	32	;' '
  1439  108D  347B               	retlw	123	;'{'
  1440  108E  346C               	retlw	108	;'l'
  1441  108F  346F               	retlw	111	;'o'
  1442  1090  346F               	retlw	111	;'o'
  1443  1091  3470               	retlw	112	;'p'
  1444  1092  3462               	retlw	98	;'b'
  1445  1093  3461               	retlw	97	;'a'
  1446  1094  3463               	retlw	99	;'c'
  1447  1095  346B               	retlw	107	;'k'
  1448  1096  343A               	retlw	58	;':'
  1449  1097  3420               	retlw	32	;' '
  1450  1098  3440               	retlw	64	;'@'
  1451  1099  346F               	retlw	111	;'o'
  1452  109A  346C               	retlw	108	;'l'
  1453  109B  342C               	retlw	44	;','
  1454  109C  3420               	retlw	32	;' '
  1455  109D  346E               	retlw	110	;'n'
  1456  109E  346F               	retlw	111	;'o'
  1457  109F  3472               	retlw	114	;'r'
  1458  10A0  346D               	retlw	109	;'m'
  1459  10A1  3461               	retlw	97	;'a'
  1460  10A2  346C               	retlw	108	;'l'
  1461  10A3  343A               	retlw	58	;':'
  1462  10A4  3420               	retlw	32	;' '
  1463  10A5  3440               	retlw	64	;'@'
  1464  10A6  346F               	retlw	111	;'o'
  1465  10A7  346E               	retlw	110	;'n'
  1466  10A8  347D               	retlw	125	;'}'
  1467  10A9  340A               	retlw	10
  1468  10AA  3400               	retlw	0
  1469                           
  1470                           	psect	stringtext12
  1471  10AB                     __pstringtext12:	
  1472  10AB                     STR_8:	
  1473  10AB  345B               	retlw	91	;'['
  1474  10AC  3453               	retlw	83	;'S'
  1475  10AD  3465               	retlw	101	;'e'
  1476  10AE  3474               	retlw	116	;'t'
  1477  10AF  3420               	retlw	32	;' '
  1478  10B0  3473               	retlw	115	;'s'
  1479  10B1  3474               	retlw	116	;'t'
  1480  10B2  3461               	retlw	97	;'a'
  1481  10B3  346E               	retlw	110	;'n'
  1482  10B4  3464               	retlw	100	;'d'
  1483  10B5  3461               	retlw	97	;'a'
  1484  10B6  3472               	retlw	114	;'r'
  1485  10B7  3464               	retlw	100	;'d'
  1486  10B8  3420               	retlw	32	;' '
  1487  10B9  3469               	retlw	105	;'i'
  1488  10BA  3464               	retlw	100	;'d'
  1489  10BB  3465               	retlw	101	;'e'
  1490  10BC  346E               	retlw	110	;'n'
  1491  10BD  3474               	retlw	116	;'t'
  1492  10BE  3469               	retlw	105	;'i'
  1493  10BF  3466               	retlw	102	;'f'
  1494  10C0  3469               	retlw	105	;'i'
  1495  10C1  3465               	retlw	101	;'e'
  1496  10C2  3472               	retlw	114	;'r'
  1497  10C3  345D               	retlw	93	;']'
  1498  10C4  3420               	retlw	32	;' '
  1499  10C5  3440               	retlw	64	;'@'
  1500  10C6  3469               	retlw	105	;'i'
  1501  10C7  343C               	retlw	60	;'<'
  1502  10C8  3473               	retlw	115	;'s'
  1503  10C9  3474               	retlw	116	;'t'
  1504  10CA  3461               	retlw	97	;'a'
  1505  10CB  346E               	retlw	110	;'n'
  1506  10CC  3464               	retlw	100	;'d'
  1507  10CD  3461               	retlw	97	;'a'
  1508  10CE  3472               	retlw	114	;'r'
  1509  10CF  3464               	retlw	100	;'d'
  1510  10D0  3420               	retlw	32	;' '
  1511  10D1  3469               	retlw	105	;'i'
  1512  10D2  3464               	retlw	100	;'d'
  1513  10D3  3465               	retlw	101	;'e'
  1514  10D4  346E               	retlw	110	;'n'
  1515  10D5  3474               	retlw	116	;'t'
  1516  10D6  3469               	retlw	105	;'i'
  1517  10D7  3466               	retlw	102	;'f'
  1518  10D8  3469               	retlw	105	;'i'
  1519  10D9  3465               	retlw	101	;'e'
  1520  10DA  3472               	retlw	114	;'r'
  1521  10DB  343E               	retlw	62	;'>'
  1522  10DC  340A               	retlw	10
  1523  10DD  3400               	retlw	0
  1524                           
  1525                           	psect	stringtext13
  1526  10DE                     __pstringtext13:	
  1527  10DE                     STR_17:	
  1528  10DE  345B               	retlw	91	;'['
  1529  10DF  3452               	retlw	82	;'R'
  1530  10E0  3465               	retlw	101	;'e'
  1531  10E1  3463               	retlw	99	;'c'
  1532  10E2  3465               	retlw	101	;'e'
  1533  10E3  3469               	retlw	105	;'i'
  1534  10E4  3476               	retlw	118	;'v'
  1535  10E5  3465               	retlw	101	;'e'
  1536  10E6  3420               	retlw	32	;' '
  1537  10E7  346D               	retlw	109	;'m'
  1538  10E8  3465               	retlw	101	;'e'
  1539  10E9  3473               	retlw	115	;'s'
  1540  10EA  3473               	retlw	115	;'s'
  1541  10EB  3461               	retlw	97	;'a'
  1542  10EC  3467               	retlw	103	;'g'
  1543  10ED  3465               	retlw	101	;'e'
  1544  10EE  345D               	retlw	93	;']'
  1545  10EF  3420               	retlw	32	;' '
  1546  10F0  343C               	retlw	60	;'<'
  1547  10F1  346D               	retlw	109	;'m'
  1548  10F2  3465               	retlw	101	;'e'
  1549  10F3  3473               	retlw	115	;'s'
  1550  10F4  3473               	retlw	115	;'s'
  1551  10F5  3461               	retlw	97	;'a'
  1552  10F6  3467               	retlw	103	;'g'
  1553  10F7  3465               	retlw	101	;'e'
  1554  10F8  343E               	retlw	62	;'>'
  1555  10F9  3420               	retlw	32	;' '
  1556  10FA  3477               	retlw	119	;'w'
  1557  10FB  3469               	retlw	105	;'i'
  1558  10FC  346C               	retlw	108	;'l'
  1559  10FD  346C               	retlw	108	;'l'
  1560  10FE  3420               	retlw	32	;' '
  1561  10FF  3462               	retlw	98	;'b'
  1562  1100  3465               	retlw	101	;'e'
  1563  1101  3420               	retlw	32	;' '
  1564  1102  346F               	retlw	111	;'o'
  1565  1103  3475               	retlw	117	;'u'
  1566  1104  3474               	retlw	116	;'t'
  1567  1105  3470               	retlw	112	;'p'
  1568  1106  3475               	retlw	117	;'u'
  1569  1107  3474               	retlw	116	;'t'
  1570  1108  340A               	retlw	10
  1571  1109  3400               	retlw	0
  1572                           
  1573                           	psect	stringtext14
  1574  110A                     __pstringtext14:	
  1575  110A                     STR_13:	
  1576  110A  345B               	retlw	91	;'['
  1577  110B  3453               	retlw	83	;'S'
  1578  110C  3465               	retlw	101	;'e'
  1579  110D  3474               	retlw	116	;'t'
  1580  110E  3420               	retlw	32	;' '
  1581  110F  3466               	retlw	102	;'f'
  1582  1110  3469               	retlw	105	;'i'
  1583  1111  346C               	retlw	108	;'l'
  1584  1112  3474               	retlw	116	;'t'
  1585  1113  3465               	retlw	101	;'e'
  1586  1114  3472               	retlw	114	;'r'
  1587  1115  345D               	retlw	93	;']'
  1588  1116  3420               	retlw	32	;' '
  1589  1117  3440               	retlw	64	;'@'
  1590  1118  3466               	retlw	102	;'f'
  1591  1119  343C               	retlw	60	;'<'
  1592  111A  346E               	retlw	110	;'n'
  1593  111B  343E               	retlw	62	;'>'
  1594  111C  343C               	retlw	60	;'<'
  1595  111D  3466               	retlw	102	;'f'
  1596  111E  3469               	retlw	105	;'i'
  1597  111F  346C               	retlw	108	;'l'
  1598  1120  3474               	retlw	116	;'t'
  1599  1121  3465               	retlw	101	;'e'
  1600  1122  3472               	retlw	114	;'r'
  1601  1123  3428               	retlw	40	;'('
  1602  1124  3453               	retlw	83	;'S'
  1603  1125  3449               	retlw	73	;'I'
  1604  1126  3444               	retlw	68	;'D'
  1605  1127  3431               	retlw	49	;'1'
  1606  1128  3430               	retlw	48	;'0'
  1607  1129  3420               	retlw	32	;' '
  1608  112A  347E               	retlw	126	;'~'
  1609  112B  3420               	retlw	32	;' '
  1610  112C  3453               	retlw	83	;'S'
  1611  112D  3449               	retlw	73	;'I'
  1612  112E  3444               	retlw	68	;'D'
  1613  112F  3430               	retlw	48	;'0'
  1614  1130  3429               	retlw	41	;')'
  1615  1131  343E               	retlw	62	;'>'
  1616  1132  340A               	retlw	10
  1617  1133  3400               	retlw	0
  1618                           
  1619                           	psect	stringtext15
  1620  1134                     __pstringtext15:	
  1621  1134                     STR_12:	
  1622  1134  345B               	retlw	91	;'['
  1623  1135  3453               	retlw	83	;'S'
  1624  1136  3465               	retlw	101	;'e'
  1625  1137  3474               	retlw	116	;'t'
  1626  1138  3420               	retlw	32	;' '
  1627  1139  346D               	retlw	109	;'m'
  1628  113A  3461               	retlw	97	;'a'
  1629  113B  3473               	retlw	115	;'s'
  1630  113C  346B               	retlw	107	;'k'
  1631  113D  345D               	retlw	93	;']'
  1632  113E  3420               	retlw	32	;' '
  1633  113F  3440               	retlw	64	;'@'
  1634  1140  346D               	retlw	109	;'m'
  1635  1141  343C               	retlw	60	;'<'
  1636  1142  346E               	retlw	110	;'n'
  1637  1143  343E               	retlw	62	;'>'
  1638  1144  343C               	retlw	60	;'<'
  1639  1145  346D               	retlw	109	;'m'
  1640  1146  3461               	retlw	97	;'a'
  1641  1147  3473               	retlw	115	;'s'
  1642  1148  346B               	retlw	107	;'k'
  1643  1149  3428               	retlw	40	;'('
  1644  114A  3453               	retlw	83	;'S'
  1645  114B  3449               	retlw	73	;'I'
  1646  114C  3444               	retlw	68	;'D'
  1647  114D  3431               	retlw	49	;'1'
  1648  114E  3430               	retlw	48	;'0'
  1649  114F  3420               	retlw	32	;' '
  1650  1150  347E               	retlw	126	;'~'
  1651  1151  3420               	retlw	32	;' '
  1652  1152  3453               	retlw	83	;'S'
  1653  1153  3449               	retlw	73	;'I'
  1654  1154  3444               	retlw	68	;'D'
  1655  1155  3430               	retlw	48	;'0'
  1656  1156  3429               	retlw	41	;')'
  1657  1157  343E               	retlw	62	;'>'
  1658  1158  340A               	retlw	10
  1659  1159  3400               	retlw	0
  1660                           
  1661                           	psect	stringtext16
  1662  115A                     __pstringtext16:	
  1663  115A                     STR_48:	
  1664  115A  3452               	retlw	82	;'R'
  1665  115B  3458               	retlw	88	;'X'
  1666  115C  3446               	retlw	70	;'F'
  1667  115D  3425               	retlw	37	;'%'
  1668  115E  3464               	retlw	100	;'d'
  1669  115F  3453               	retlw	83	;'S'
  1670  1160  3449               	retlw	73	;'I'
  1671  1161  3444               	retlw	68	;'D'
  1672  1162  3448               	retlw	72	;'H'
  1673  1163  3420               	retlw	32	;' '
  1674  1164  3452               	retlw	82	;'R'
  1675  1165  3458               	retlw	88	;'X'
  1676  1166  3446               	retlw	70	;'F'
  1677  1167  3425               	retlw	37	;'%'
  1678  1168  3464               	retlw	100	;'d'
  1679  1169  3453               	retlw	83	;'S'
  1680  116A  3449               	retlw	73	;'I'
  1681  116B  3444               	retlw	68	;'D'
  1682  116C  344C               	retlw	76	;'L'
  1683  116D  343A               	retlw	58	;':'
  1684  116E  3420               	retlw	32	;' '
  1685  116F  3425               	retlw	37	;'%'
  1686  1170  3430               	retlw	48	;'0'
  1687  1171  3432               	retlw	50	;'2'
  1688  1172  3478               	retlw	120	;'x'
  1689  1173  3420               	retlw	32	;' '
  1690  1174  3425               	retlw	37	;'%'
  1691  1175  3430               	retlw	48	;'0'
  1692  1176  3432               	retlw	50	;'2'
  1693  1177  3478               	retlw	120	;'x'
  1694  1178  340A               	retlw	10
  1695  1179  3400               	retlw	0
  1696                           
  1697                           	psect	stringtext17
  1698  117A                     __pstringtext17:	
  1699  117A                     STR_47:	
  1700  117A  3452               	retlw	82	;'R'
  1701  117B  3458               	retlw	88	;'X'
  1702  117C  344D               	retlw	77	;'M'
  1703  117D  3425               	retlw	37	;'%'
  1704  117E  3464               	retlw	100	;'d'
  1705  117F  3453               	retlw	83	;'S'
  1706  1180  3449               	retlw	73	;'I'
  1707  1181  3444               	retlw	68	;'D'
  1708  1182  3448               	retlw	72	;'H'
  1709  1183  3420               	retlw	32	;' '
  1710  1184  3452               	retlw	82	;'R'
  1711  1185  3458               	retlw	88	;'X'
  1712  1186  344D               	retlw	77	;'M'
  1713  1187  3425               	retlw	37	;'%'
  1714  1188  3464               	retlw	100	;'d'
  1715  1189  3453               	retlw	83	;'S'
  1716  118A  3449               	retlw	73	;'I'
  1717  118B  3444               	retlw	68	;'D'
  1718  118C  344C               	retlw	76	;'L'
  1719  118D  343A               	retlw	58	;':'
  1720  118E  3420               	retlw	32	;' '
  1721  118F  3425               	retlw	37	;'%'
  1722  1190  3430               	retlw	48	;'0'
  1723  1191  3432               	retlw	50	;'2'
  1724  1192  3478               	retlw	120	;'x'
  1725  1193  3420               	retlw	32	;' '
  1726  1194  3425               	retlw	37	;'%'
  1727  1195  3430               	retlw	48	;'0'
  1728  1196  3432               	retlw	50	;'2'
  1729  1197  3478               	retlw	120	;'x'
  1730  1198  340A               	retlw	10
  1731  1199  3400               	retlw	0
  1732                           
  1733                           	psect	stringtext18
  1734  119A                     __pstringtext18:	
  1735  119A                     STR_16:	
  1736  119A  345B               	retlw	91	;'['
  1737  119B  3453               	retlw	83	;'S'
  1738  119C  3465               	retlw	101	;'e'
  1739  119D  346E               	retlw	110	;'n'
  1740  119E  3464               	retlw	100	;'d'
  1741  119F  3420               	retlw	32	;' '
  1742  11A0  346D               	retlw	109	;'m'
  1743  11A1  3465               	retlw	101	;'e'
  1744  11A2  3473               	retlw	115	;'s'
  1745  11A3  3473               	retlw	115	;'s'
  1746  11A4  3461               	retlw	97	;'a'
  1747  11A5  3467               	retlw	103	;'g'
  1748  11A6  3465               	retlw	101	;'e'
  1749  11A7  345D               	retlw	93	;']'
  1750  11A8  3420               	retlw	32	;' '
  1751  11A9  343C               	retlw	60	;'<'
  1752  11AA  346D               	retlw	109	;'m'
  1753  11AB  3465               	retlw	101	;'e'
  1754  11AC  3473               	retlw	115	;'s'
  1755  11AD  3473               	retlw	115	;'s'
  1756  11AE  3461               	retlw	97	;'a'
  1757  11AF  3467               	retlw	103	;'g'
  1758  11B0  3465               	retlw	101	;'e'
  1759  11B1  343E               	retlw	62	;'>'
  1760  11B2  340A               	retlw	10
  1761  11B3  3400               	retlw	0
  1762                           
  1763                           	psect	stringtext19
  1764  11B4                     __pstringtext19:	
  1765  11B4                     STR_14:	
  1766  11B4  345B               	retlw	91	;'['
  1767  11B5  3453               	retlw	83	;'S'
  1768  11B6  3465               	retlw	101	;'e'
  1769  11B7  3474               	retlw	116	;'t'
  1770  11B8  3420               	retlw	32	;' '
  1771  11B9  3462               	retlw	98	;'b'
  1772  11BA  3461               	retlw	97	;'a'
  1773  11BB  3475               	retlw	117	;'u'
  1774  11BC  3464               	retlw	100	;'d'
  1775  11BD  3420               	retlw	32	;' '
  1776  11BE  3472               	retlw	114	;'r'
  1777  11BF  3461               	retlw	97	;'a'
  1778  11C0  3474               	retlw	116	;'t'
  1779  11C1  3465               	retlw	101	;'e'
  1780  11C2  345D               	retlw	93	;']'
  1781  11C3  3420               	retlw	32	;' '
  1782  11C4  3440               	retlw	64	;'@'
  1783  11C5  3462               	retlw	98	;'b'
  1784  11C6  343C               	retlw	60	;'<'
  1785  11C7  3462               	retlw	98	;'b'
  1786  11C8  3470               	retlw	112	;'p'
  1787  11C9  3472               	retlw	114	;'r'
  1788  11CA  343E               	retlw	62	;'>'
  1789  11CB  340A               	retlw	10
  1790  11CC  3400               	retlw	0
  1791                           
  1792                           	psect	stringtext20
  1793  11CD                     __pstringtext20:	
  1794  11CD                     STR_21:	
  1795  11CD  3466               	retlw	102	;'f'
  1796  11CE  3469               	retlw	105	;'i'
  1797  11CF  346C               	retlw	108	;'l'
  1798  11D0  3474               	retlw	116	;'t'
  1799  11D1  3465               	retlw	101	;'e'
  1800  11D2  3472               	retlw	114	;'r'
  1801  11D3  3428               	retlw	40	;'('
  1802  11D4  3425               	retlw	37	;'%'
  1803  11D5  3464               	retlw	100	;'d'
  1804  11D6  3429               	retlw	41	;')'
  1805  11D7  343A               	retlw	58	;':'
  1806  11D8  3420               	retlw	32	;' '
  1807  11D9  3425               	retlw	37	;'%'
  1808  11DA  3430               	retlw	48	;'0'
  1809  11DB  3432               	retlw	50	;'2'
  1810  11DC  3478               	retlw	120	;'x'
  1811  11DD  3420               	retlw	32	;' '
  1812  11DE  3425               	retlw	37	;'%'
  1813  11DF  3430               	retlw	48	;'0'
  1814  11E0  3432               	retlw	50	;'2'
  1815  11E1  3478               	retlw	120	;'x'
  1816  11E2  340A               	retlw	10
  1817  11E3  3400               	retlw	0
  1818                           
  1819                           	psect	stringtext21
  1820  11E4                     __pstringtext21:	
  1821  11E4                     STR_7:	
  1822  11E4  342D               	retlw	45	;'-'
  1823  11E5  342D               	retlw	45	;'-'
  1824  11E6  342D               	retlw	45	;'-'
  1825  11E7  3420               	retlw	32	;' '
  1826  11E8  3455               	retlw	85	;'U'
  1827  11E9  3441               	retlw	65	;'A'
  1828  11EA  3452               	retlw	82	;'R'
  1829  11EB  3454               	retlw	84	;'T'
  1830  11EC  3432               	retlw	50	;'2'
  1831  11ED  3443               	retlw	67	;'C'
  1832  11EE  3441               	retlw	65	;'A'
  1833  11EF  344E               	retlw	78	;'N'
  1834  11F0  3420               	retlw	32	;' '
  1835  11F1  3448               	retlw	72	;'H'
  1836  11F2  3445               	retlw	69	;'E'
  1837  11F3  344C               	retlw	76	;'L'
  1838  11F4  3450               	retlw	80	;'P'
  1839  11F5  3420               	retlw	32	;' '
  1840  11F6  342D               	retlw	45	;'-'
  1841  11F7  342D               	retlw	45	;'-'
  1842  11F8  342D               	retlw	45	;'-'
  1843  11F9  340A               	retlw	10
  1844  11FA  3400               	retlw	0
  1845                           
  1846                           	psect	stringtext22
  1847  11FB                     __pstringtext22:	
  1848  11FB                     STR_18:	
  1849  11FB  345B               	retlw	91	;'['
  1850  11FC  3453               	retlw	83	;'S'
  1851  11FD  3468               	retlw	104	;'h'
  1852  11FE  346F               	retlw	111	;'o'
  1853  11FF  3477               	retlw	119	;'w'
  1854  1200  3420               	retlw	32	;' '
  1855  1201  3474               	retlw	116	;'t'
  1856  1202  3468               	retlw	104	;'h'
  1857  1203  3469               	retlw	105	;'i'
  1858  1204  3473               	retlw	115	;'s'
  1859  1205  3420               	retlw	32	;' '
  1860  1206  3468               	retlw	104	;'h'
  1861  1207  3465               	retlw	101	;'e'
  1862  1208  346C               	retlw	108	;'l'
  1863  1209  3470               	retlw	112	;'p'
  1864  120A  345D               	retlw	93	;']'
  1865  120B  343A               	retlw	58	;':'
  1866  120C  3420               	retlw	32	;' '
  1867  120D  3440               	retlw	64	;'@'
  1868  120E  3468               	retlw	104	;'h'
  1869  120F  340A               	retlw	10
  1870  1210  3400               	retlw	0
  1871                           
  1872                           	psect	stringtext23
  1873  1211                     __pstringtext23:	
  1874  1211                     STR_20:	
  1875  1211  346D               	retlw	109	;'m'
  1876  1212  3461               	retlw	97	;'a'
  1877  1213  3473               	retlw	115	;'s'
  1878  1214  346B               	retlw	107	;'k'
  1879  1215  3428               	retlw	40	;'('
  1880  1216  3425               	retlw	37	;'%'
  1881  1217  3464               	retlw	100	;'d'
  1882  1218  3429               	retlw	41	;')'
  1883  1219  343A               	retlw	58	;':'
  1884  121A  3420               	retlw	32	;' '
  1885  121B  3425               	retlw	37	;'%'
  1886  121C  3430               	retlw	48	;'0'
  1887  121D  3432               	retlw	50	;'2'
  1888  121E  3478               	retlw	120	;'x'
  1889  121F  3420               	retlw	32	;' '
  1890  1220  3425               	retlw	37	;'%'
  1891  1221  3430               	retlw	48	;'0'
  1892  1222  3432               	retlw	50	;'2'
  1893  1223  3478               	retlw	120	;'x'
  1894  1224  340A               	retlw	10
  1895  1225  3400               	retlw	0
  1896                           
  1897                           	psect	stringtext24
  1898  1226                     __pstringtext24:	
  1899  1226                     STR_15:	
  1900  1226  345B               	retlw	91	;'['
  1901  1227  3444               	retlw	68	;'D'
  1902  1228  3475               	retlw	117	;'u'
  1903  1229  346D               	retlw	109	;'m'
  1904  122A  3470               	retlw	112	;'p'
  1905  122B  3420               	retlw	32	;' '
  1906  122C  3472               	retlw	114	;'r'
  1907  122D  3465               	retlw	101	;'e'
  1908  122E  3467               	retlw	103	;'g'
  1909  122F  3469               	retlw	105	;'i'
  1910  1230  3473               	retlw	115	;'s'
  1911  1231  3474               	retlw	116	;'t'
  1912  1232  3465               	retlw	101	;'e'
  1913  1233  3472               	retlw	114	;'r'
  1914  1234  3473               	retlw	115	;'s'
  1915  1235  345D               	retlw	93	;']'
  1916  1236  3420               	retlw	32	;' '
  1917  1237  3440               	retlw	64	;'@'
  1918  1238  3464               	retlw	100	;'d'
  1919  1239  340A               	retlw	10
  1920  123A  3400               	retlw	0
  1921                           
  1922                           	psect	stringtext25
  1923  123B                     __pstringtext25:	
  1924  123B                     STR_33:	
  1925  123B  3443               	retlw	67	;'C'
  1926  123C  346F               	retlw	111	;'o'
  1927  123D  3470               	retlw	112	;'p'
  1928  123E  3479               	retlw	121	;'y'
  1929  123F  3469               	retlw	105	;'i'
  1930  1240  346E               	retlw	110	;'n'
  1931  1241  3467               	retlw	103	;'g'
  1932  1242  3420               	retlw	32	;' '
  1933  1243  3462               	retlw	98	;'b'
  1934  1244  3475               	retlw	117	;'u'
  1935  1245  3466               	retlw	102	;'f'
  1936  1246  3466               	retlw	102	;'f'
  1937  1247  3465               	retlw	101	;'e'
  1938  1248  3472               	retlw	114	;'r'
  1939  1249  343A               	retlw	58	;':'
  1940  124A  3420               	retlw	32	;' '
  1941  124B  3425               	retlw	37	;'%'
  1942  124C  3463               	retlw	99	;'c'
  1943  124D  340A               	retlw	10
  1944  124E  3400               	retlw	0
  1945                           
  1946                           	psect	stringtext26
  1947  124F                     __pstringtext26:	
  1948  124F                     STR_36:	
  1949  124F  344D               	retlw	77	;'M'
  1950  1250  3465               	retlw	101	;'e'
  1951  1251  3473               	retlw	115	;'s'
  1952  1252  3473               	retlw	115	;'s'
  1953  1253  3461               	retlw	97	;'a'
  1954  1254  3467               	retlw	103	;'g'
  1955  1255  3465               	retlw	101	;'e'
  1956  1256  3420               	retlw	32	;' '
  1957  1257  3473               	retlw	115	;'s'
  1958  1258  3465               	retlw	101	;'e'
  1959  1259  346E               	retlw	110	;'n'
  1960  125A  3474               	retlw	116	;'t'
  1961  125B  343A               	retlw	58	;':'
  1962  125C  3420               	retlw	32	;' '
  1963  125D  3425               	retlw	37	;'%'
  1964  125E  3473               	retlw	115	;'s'
  1965  125F  340A               	retlw	10
  1966  1260  3400               	retlw	0
  1967                           
  1968                           	psect	stringtext27
  1969  1261                     __pstringtext27:	
  1970  1261                     STR_54:	
  1971  1261  3430               	retlw	48	;'0'
  1972  1262  3431               	retlw	49	;'1'
  1973  1263  3432               	retlw	50	;'2'
  1974  1264  3433               	retlw	51	;'3'
  1975  1265  3434               	retlw	52	;'4'
  1976  1266  3435               	retlw	53	;'5'
  1977  1267  3436               	retlw	54	;'6'
  1978  1268  3437               	retlw	55	;'7'
  1979  1269  3438               	retlw	56	;'8'
  1980  126A  3439               	retlw	57	;'9'
  1981  126B  3461               	retlw	97	;'a'
  1982  126C  3462               	retlw	98	;'b'
  1983  126D  3463               	retlw	99	;'c'
  1984  126E  3464               	retlw	100	;'d'
  1985  126F  3465               	retlw	101	;'e'
  1986  1270  3466               	retlw	102	;'f'
  1987  1271  3400               	retlw	0
  1988                           
  1989                           	psect	stringtext28
  1990  1272                     __pstringtext28:	
  1991  1272                     STR_26:	
  1992  1272  3452               	retlw	82	;'R'
  1993  1273  3458               	retlw	88	;'X'
  1994  1274  3442               	retlw	66	;'B'
  1995  1275  3425               	retlw	37	;'%'
  1996  1276  3464               	retlw	100	;'d'
  1997  1277  3453               	retlw	83	;'S'
  1998  1278  3449               	retlw	73	;'I'
  1999  1279  3444               	retlw	68	;'D'
  2000  127A  3448               	retlw	72	;'H'
  2001  127B  343A               	retlw	58	;':'
  2002  127C  3420               	retlw	32	;' '
  2003  127D  3425               	retlw	37	;'%'
  2004  127E  3430               	retlw	48	;'0'
  2005  127F  3432               	retlw	50	;'2'
  2006  1280  3478               	retlw	120	;'x'
  2007  1281  340A               	retlw	10
  2008  1282  3400               	retlw	0
  2009                           
  2010                           	psect	stringtext29
  2011  1283                     __pstringtext29:	
  2012  1283                     STR_34:	
  2013  1283  3454               	retlw	84	;'T'
  2014  1284  3458               	retlw	88	;'X'
  2015  1285  3442               	retlw	66	;'B'
  2016  1286  3425               	retlw	37	;'%'
  2017  1287  3464               	retlw	100	;'d'
  2018  1288  3453               	retlw	83	;'S'
  2019  1289  3449               	retlw	73	;'I'
  2020  128A  3444               	retlw	68	;'D'
  2021  128B  3448               	retlw	72	;'H'
  2022  128C  343A               	retlw	58	;':'
  2023  128D  3420               	retlw	32	;' '
  2024  128E  3425               	retlw	37	;'%'
  2025  128F  3430               	retlw	48	;'0'
  2026  1290  3432               	retlw	50	;'2'
  2027  1291  3478               	retlw	120	;'x'
  2028  1292  340A               	retlw	10
  2029  1293  3400               	retlw	0
  2030                           
  2031                           	psect	stringtext30
  2032  1294                     __pstringtext30:	
  2033  1294                     STR_24:	
  2034  1294  3452               	retlw	82	;'R'
  2035  1295  3458               	retlw	88	;'X'
  2036  1296  3446               	retlw	70	;'F'
  2037  1297  3425               	retlw	37	;'%'
  2038  1298  3464               	retlw	100	;'d'
  2039  1299  3453               	retlw	83	;'S'
  2040  129A  3449               	retlw	73	;'I'
  2041  129B  3444               	retlw	68	;'D'
  2042  129C  3448               	retlw	72	;'H'
  2043  129D  343A               	retlw	58	;':'
  2044  129E  3420               	retlw	32	;' '
  2045  129F  3425               	retlw	37	;'%'
  2046  12A0  3430               	retlw	48	;'0'
  2047  12A1  3432               	retlw	50	;'2'
  2048  12A2  3478               	retlw	120	;'x'
  2049  12A3  340A               	retlw	10
  2050  12A4  3400               	retlw	0
  2051                           
  2052                           	psect	stringtext31
  2053  12A5                     __pstringtext31:	
  2054  12A5                     STR_22:	
  2055  12A5  3452               	retlw	82	;'R'
  2056  12A6  3458               	retlw	88	;'X'
  2057  12A7  344D               	retlw	77	;'M'
  2058  12A8  3425               	retlw	37	;'%'
  2059  12A9  3464               	retlw	100	;'d'
  2060  12AA  3453               	retlw	83	;'S'
  2061  12AB  3449               	retlw	73	;'I'
  2062  12AC  3444               	retlw	68	;'D'
  2063  12AD  3448               	retlw	72	;'H'
  2064  12AE  343A               	retlw	58	;':'
  2065  12AF  3420               	retlw	32	;' '
  2066  12B0  3425               	retlw	37	;'%'
  2067  12B1  3430               	retlw	48	;'0'
  2068  12B2  3432               	retlw	50	;'2'
  2069  12B3  3478               	retlw	120	;'x'
  2070  12B4  340A               	retlw	10
  2071  12B5  3400               	retlw	0
  2072                           
  2073                           	psect	stringtext32
  2074  12B6                     __pstringtext32:	
  2075  12B6                     STR_27:	
  2076  12B6  3452               	retlw	82	;'R'
  2077  12B7  3458               	retlw	88	;'X'
  2078  12B8  3442               	retlw	66	;'B'
  2079  12B9  3425               	retlw	37	;'%'
  2080  12BA  3464               	retlw	100	;'d'
  2081  12BB  3453               	retlw	83	;'S'
  2082  12BC  3449               	retlw	73	;'I'
  2083  12BD  3444               	retlw	68	;'D'
  2084  12BE  344C               	retlw	76	;'L'
  2085  12BF  343A               	retlw	58	;':'
  2086  12C0  3420               	retlw	32	;' '
  2087  12C1  3425               	retlw	37	;'%'
  2088  12C2  3430               	retlw	48	;'0'
  2089  12C3  3432               	retlw	50	;'2'
  2090  12C4  3478               	retlw	120	;'x'
  2091  12C5  340A               	retlw	10
  2092  12C6  3400               	retlw	0
  2093                           
  2094                           	psect	stringtext33
  2095  12C7                     __pstringtext33:	
  2096  12C7                     STR_35:	
  2097  12C7  3454               	retlw	84	;'T'
  2098  12C8  3458               	retlw	88	;'X'
  2099  12C9  3442               	retlw	66	;'B'
  2100  12CA  3425               	retlw	37	;'%'
  2101  12CB  3464               	retlw	100	;'d'
  2102  12CC  3453               	retlw	83	;'S'
  2103  12CD  3449               	retlw	73	;'I'
  2104  12CE  3444               	retlw	68	;'D'
  2105  12CF  344C               	retlw	76	;'L'
  2106  12D0  343A               	retlw	58	;':'
  2107  12D1  3420               	retlw	32	;' '
  2108  12D2  3425               	retlw	37	;'%'
  2109  12D3  3430               	retlw	48	;'0'
  2110  12D4  3432               	retlw	50	;'2'
  2111  12D5  3478               	retlw	120	;'x'
  2112  12D6  340A               	retlw	10
  2113  12D7  3400               	retlw	0
  2114                           
  2115                           	psect	stringtext34
  2116  12D8                     __pstringtext34:	
  2117  12D8                     STR_25:	
  2118  12D8  3452               	retlw	82	;'R'
  2119  12D9  3458               	retlw	88	;'X'
  2120  12DA  3446               	retlw	70	;'F'
  2121  12DB  3425               	retlw	37	;'%'
  2122  12DC  3464               	retlw	100	;'d'
  2123  12DD  3453               	retlw	83	;'S'
  2124  12DE  3449               	retlw	73	;'I'
  2125  12DF  3444               	retlw	68	;'D'
  2126  12E0  344C               	retlw	76	;'L'
  2127  12E1  343A               	retlw	58	;':'
  2128  12E2  3420               	retlw	32	;' '
  2129  12E3  3425               	retlw	37	;'%'
  2130  12E4  3430               	retlw	48	;'0'
  2131  12E5  3432               	retlw	50	;'2'
  2132  12E6  3478               	retlw	120	;'x'
  2133  12E7  340A               	retlw	10
  2134  12E8  3400               	retlw	0
  2135                           
  2136                           	psect	stringtext35
  2137  12E9                     __pstringtext35:	
  2138  12E9                     STR_23:	
  2139  12E9  3452               	retlw	82	;'R'
  2140  12EA  3458               	retlw	88	;'X'
  2141  12EB  344D               	retlw	77	;'M'
  2142  12EC  3425               	retlw	37	;'%'
  2143  12ED  3464               	retlw	100	;'d'
  2144  12EE  3453               	retlw	83	;'S'
  2145  12EF  3449               	retlw	73	;'I'
  2146  12F0  3444               	retlw	68	;'D'
  2147  12F1  344C               	retlw	76	;'L'
  2148  12F2  343A               	retlw	58	;':'
  2149  12F3  3420               	retlw	32	;' '
  2150  12F4  3425               	retlw	37	;'%'
  2151  12F5  3430               	retlw	48	;'0'
  2152  12F6  3432               	retlw	50	;'2'
  2153  12F7  3478               	retlw	120	;'x'
  2154  12F8  340A               	retlw	10
  2155  12F9  3400               	retlw	0
  2156                           
  2157                           	psect	stringtext36
  2158  12FA                     __pstringtext36:	
  2159  12FA                     STR_28:	
  2160  12FA  3452               	retlw	82	;'R'
  2161  12FB  3458               	retlw	88	;'X'
  2162  12FC  3442               	retlw	66	;'B'
  2163  12FD  3425               	retlw	37	;'%'
  2164  12FE  3464               	retlw	100	;'d'
  2165  12FF  3444               	retlw	68	;'D'
  2166  1300  344C               	retlw	76	;'L'
  2167  1301  3443               	retlw	67	;'C'
  2168  1302  343A               	retlw	58	;':'
  2169  1303  3420               	retlw	32	;' '
  2170  1304  3425               	retlw	37	;'%'
  2171  1305  3430               	retlw	48	;'0'
  2172  1306  3432               	retlw	50	;'2'
  2173  1307  3478               	retlw	120	;'x'
  2174  1308  340A               	retlw	10
  2175  1309  3400               	retlw	0
  2176                           
  2177                           	psect	stringtext37
  2178  130A                     __pstringtext37:	
  2179  130A                     STR_29:	
  2180  130A  3452               	retlw	82	;'R'
  2181  130B  3458               	retlw	88	;'X'
  2182  130C  3442               	retlw	66	;'B'
  2183  130D  3425               	retlw	37	;'%'
  2184  130E  3464               	retlw	100	;'d'
  2185  130F  3444               	retlw	68	;'D'
  2186  1310  3430               	retlw	48	;'0'
  2187  1311  343A               	retlw	58	;':'
  2188  1312  3420               	retlw	32	;' '
  2189  1313  3425               	retlw	37	;'%'
  2190  1314  3430               	retlw	48	;'0'
  2191  1315  3432               	retlw	50	;'2'
  2192  1316  3478               	retlw	120	;'x'
  2193  1317  340A               	retlw	10
  2194  1318  3400               	retlw	0
  2195                           
  2196                           	psect	stringtext38
  2197  1319                     __pstringtext38:	
  2198  1319                     STR_50:	
  2199  1319  3443               	retlw	67	;'C'
  2200  131A  3441               	retlw	65	;'A'
  2201  131B  344E               	retlw	78	;'N'
  2202  131C  3443               	retlw	67	;'C'
  2203  131D  3454               	retlw	84	;'T'
  2204  131E  3452               	retlw	82	;'R'
  2205  131F  344C               	retlw	76	;'L'
  2206  1320  343A               	retlw	58	;':'
  2207  1321  3420               	retlw	32	;' '
  2208  1322  3425               	retlw	37	;'%'
  2209  1323  3430               	retlw	48	;'0'
  2210  1324  3432               	retlw	50	;'2'
  2211  1325  3478               	retlw	120	;'x'
  2212  1326  340A               	retlw	10
  2213  1327  3400               	retlw	0
  2214                           
  2215                           	psect	stringtext39
  2216  1328                     __pstringtext39:	
  2217  1328                     STR_19:	
  2218  1328  3443               	retlw	67	;'C'
  2219  1329  3441               	retlw	65	;'A'
  2220  132A  344E               	retlw	78	;'N'
  2221  132B  3453               	retlw	83	;'S'
  2222  132C  3454               	retlw	84	;'T'
  2223  132D  3441               	retlw	65	;'A'
  2224  132E  3454               	retlw	84	;'T'
  2225  132F  343A               	retlw	58	;':'
  2226  1330  3420               	retlw	32	;' '
  2227  1331  3425               	retlw	37	;'%'
  2228  1332  3430               	retlw	48	;'0'
  2229  1333  3432               	retlw	50	;'2'
  2230  1334  3478               	retlw	120	;'x'
  2231  1335  340A               	retlw	10
  2232  1336  3400               	retlw	0
  2233                           
  2234                           	psect	stringtext40
  2235  1337                     __pstringtext40:	
  2236  1337                     STR_30:	
  2237  1337  3454               	retlw	84	;'T'
  2238  1338  3458               	retlw	88	;'X'
  2239  1339  3442               	retlw	66	;'B'
  2240  133A  3430               	retlw	48	;'0'
  2241  133B  3420               	retlw	32	;' '
  2242  133C  3469               	retlw	105	;'i'
  2243  133D  3473               	retlw	115	;'s'
  2244  133E  3420               	retlw	32	;' '
  2245  133F  3469               	retlw	105	;'i'
  2246  1340  3464               	retlw	100	;'d'
  2247  1341  346C               	retlw	108	;'l'
  2248  1342  3465               	retlw	101	;'e'
  2249  1343  340A               	retlw	10
  2250  1344  3400               	retlw	0
  2251                           
  2252                           	psect	stringtext41
  2253  1345                     __pstringtext41:	
  2254  1345                     STR_31:	
  2255  1345  3454               	retlw	84	;'T'
  2256  1346  3458               	retlw	88	;'X'
  2257  1347  3442               	retlw	66	;'B'
  2258  1348  3431               	retlw	49	;'1'
  2259  1349  3420               	retlw	32	;' '
  2260  134A  3469               	retlw	105	;'i'
  2261  134B  3473               	retlw	115	;'s'
  2262  134C  3420               	retlw	32	;' '
  2263  134D  3469               	retlw	105	;'i'
  2264  134E  3464               	retlw	100	;'d'
  2265  134F  346C               	retlw	108	;'l'
  2266  1350  3465               	retlw	101	;'e'
  2267  1351  340A               	retlw	10
  2268  1352  3400               	retlw	0
  2269                           
  2270                           	psect	stringtext42
  2271  1353                     __pstringtext42:	
  2272  1353                     STR_32:	
  2273  1353  3454               	retlw	84	;'T'
  2274  1354  3458               	retlw	88	;'X'
  2275  1355  3442               	retlw	66	;'B'
  2276  1356  3432               	retlw	50	;'2'
  2277  1357  3420               	retlw	32	;' '
  2278  1358  3469               	retlw	105	;'i'
  2279  1359  3473               	retlw	115	;'s'
  2280  135A  3420               	retlw	32	;' '
  2281  135B  3469               	retlw	105	;'i'
  2282  135C  3464               	retlw	100	;'d'
  2283  135D  346C               	retlw	108	;'l'
  2284  135E  3465               	retlw	101	;'e'
  2285  135F  340A               	retlw	10
  2286  1360  3400               	retlw	0
  2287                           
  2288                           	psect	stringtext43
  2289  1361                     __pstringtext43:	
  2290  1361                     STR_37:	
  2291  1361  3452               	retlw	82	;'R'
  2292  1362  3458               	retlw	88	;'X'
  2293  1363  3430               	retlw	48	;'0'
  2294  1364  3449               	retlw	73	;'I'
  2295  1365  3446               	retlw	70	;'F'
  2296  1366  3420               	retlw	32	;' '
  2297  1367  3469               	retlw	105	;'i'
  2298  1368  3473               	retlw	115	;'s'
  2299  1369  3420               	retlw	32	;' '
  2300  136A  346F               	retlw	111	;'o'
  2301  136B  346E               	retlw	110	;'n'
  2302  136C  340A               	retlw	10
  2303  136D  3400               	retlw	0
  2304                           
  2305                           	psect	stringtext44
  2306  136E                     __pstringtext44:	
  2307  136E                     STR_38:	
  2308  136E  3452               	retlw	82	;'R'
  2309  136F  3458               	retlw	88	;'X'
  2310  1370  3431               	retlw	49	;'1'
  2311  1371  3449               	retlw	73	;'I'
  2312  1372  3446               	retlw	70	;'F'
  2313  1373  3420               	retlw	32	;' '
  2314  1374  3469               	retlw	105	;'i'
  2315  1375  3473               	retlw	115	;'s'
  2316  1376  3420               	retlw	32	;' '
  2317  1377  346F               	retlw	111	;'o'
  2318  1378  346E               	retlw	110	;'n'
  2319  1379  340A               	retlw	10
  2320  137A  3400               	retlw	0
  2321                           
  2322                           	psect	stringtext45
  2323  137B                     __pstringtext45:	
  2324  137B                     STR_43:	
  2325  137B  3443               	retlw	67	;'C'
  2326  137C  344E               	retlw	78	;'N'
  2327  137D  3446               	retlw	70	;'F'
  2328  137E  3431               	retlw	49	;'1'
  2329  137F  343A               	retlw	58	;':'
  2330  1380  3420               	retlw	32	;' '
  2331  1381  3425               	retlw	37	;'%'
  2332  1382  3430               	retlw	48	;'0'
  2333  1383  3432               	retlw	50	;'2'
  2334  1384  3478               	retlw	120	;'x'
  2335  1385  340A               	retlw	10
  2336  1386  3400               	retlw	0
  2337                           
  2338                           	psect	stringtext46
  2339  1387                     __pstringtext46:	
  2340  1387                     STR_44:	
  2341  1387  3443               	retlw	67	;'C'
  2342  1388  344E               	retlw	78	;'N'
  2343  1389  3446               	retlw	70	;'F'
  2344  138A  3432               	retlw	50	;'2'
  2345  138B  343A               	retlw	58	;':'
  2346  138C  3420               	retlw	32	;' '
  2347  138D  3425               	retlw	37	;'%'
  2348  138E  3430               	retlw	48	;'0'
  2349  138F  3432               	retlw	50	;'2'
  2350  1390  3478               	retlw	120	;'x'
  2351  1391  340A               	retlw	10
  2352  1392  3400               	retlw	0
  2353                           
  2354                           	psect	stringtext47
  2355  1393                     __pstringtext47:	
  2356  1393                     STR_45:	
  2357  1393  3443               	retlw	67	;'C'
  2358  1394  344E               	retlw	78	;'N'
  2359  1395  3446               	retlw	70	;'F'
  2360  1396  3433               	retlw	51	;'3'
  2361  1397  343A               	retlw	58	;':'
  2362  1398  3420               	retlw	32	;' '
  2363  1399  3425               	retlw	37	;'%'
  2364  139A  3430               	retlw	48	;'0'
  2365  139B  3432               	retlw	50	;'2'
  2366  139C  3478               	retlw	120	;'x'
  2367  139D  340A               	retlw	10
  2368  139E  3400               	retlw	0
  2369                           
  2370                           	psect	stringtext48
  2371  13B1                     __pstringtext48:	
  2372  13B1                     STR_53:	
  2373  13B1  3428               	retlw	40	;'('
  2374  13B2  346E               	retlw	110	;'n'
  2375  13B3  3475               	retlw	117	;'u'
  2376  13B4  346C               	retlw	108	;'l'
  2377  13B5  346C               	retlw	108	;'l'
  2378  13B6  3429               	retlw	41	;')'
  2379  13B7  3400               	retlw	0
  2380                           
  2381                           	psect	stringtext49
  2382  13B8                     __pstringtext49:	
  2383  13B8                     STR_1:	
  2384  13B8  3425               	retlw	37	;'%'
  2385  13B9  3464               	retlw	100	;'d'
  2386  13BA  342C               	retlw	44	;','
  2387  13BB  3425               	retlw	37	;'%'
  2388  13BC  3473               	retlw	115	;'s'
  2389  13BD  340A               	retlw	10
  2390  13BE  3400               	retlw	0
  2391                           
  2392                           	psect	stringtext50
  2393  13C5                     __pstringtext50:	
  2394  13C5                     STR_2:	
  2395  13C5  3425               	retlw	37	;'%'
  2396  13C6  3430               	retlw	48	;'0'
  2397  13C7  3432               	retlw	50	;'2'
  2398  13C8  3478               	retlw	120	;'x'
  2399  13C9  343A               	retlw	58	;':'
  2400  13CA  3400               	retlw	0
  2401                           
  2402                           	psect	stringtext51
  2403  13CB                     __pstringtext51:	
  2404  13CB                     STR_3:	
  2405  13CB  3420               	retlw	32	;' '
  2406  13CC  3425               	retlw	37	;'%'
  2407  13CD  3430               	retlw	48	;'0'
  2408  13CE  3432               	retlw	50	;'2'
  2409  13CF  3478               	retlw	120	;'x'
  2410  13D0  3400               	retlw	0
  2411                           
  2412                           	psect	stringtext52
  2413  13D7                     __pstringtext52:	
  2414  13D7                     STR_6:	
  2415  13D7  3425               	retlw	37	;'%'
  2416  13D8  3463               	retlw	99	;'c'
  2417  13D9  3400               	retlw	0
  2418                           
  2419                           	psect	stringtext53
  2420  0000                     __pstringtext53:	
  2421  11F9                     
  2422                           ; #config settings
  2423  0000                     
  2424                           	psect	cinit
  2425  07EB                     start_initialization:	
  2426  07EB                     __initialization:	
  2427                           
  2428                           ; Initialize objects allocated to BANK1
  2429  07EB  3085               	movlw	low __pidataBANK1
  2430  07EC  0084               	movwf	4
  2431  07ED  308C               	movlw	(high __pidataBANK1)| (0+128)
  2432  07EE  0085               	movwf	5
  2433  07EF  30B3               	movlw	low __pdataBANK1
  2434  07F0  0086               	movwf	6
  2435  07F1  3000               	movlw	high __pdataBANK1
  2436  07F2  0087               	movwf	7
  2437  07F3  3009               	movlw	9
  2438  07F4  318C  2460         	fcall	init_ram
  2439                           
  2440                           ; Clear objects allocated to BANK0
  2441  07F6  01E9               	clrf	__pbssBANK0& (0+127)
  2442  07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2443  07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2444  07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2445  07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
  2446  07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
  2447  07FC  01EF               	clrf	(__pbssBANK0+6)& (0+127)
  2448  07FD                     end_of_initialization:	
  2449                           ;End of C runtime variable initialization code
  2450                           
  2451  07FD                     __end_of__initialization:	
  2452  07FD  0020               	movlb	0
  2453  07FE  3184  2C02         	ljmp	_main	;jump to C main() function
  2454                           
  2455                           	psect	bssBANK0
  2456  0069                     __pbssBANK0:	
  2457  0069                     _mode:	
  2458  0069                     	ds	2
  2459  006B                     _sid:	
  2460  006B                     	ds	2
  2461  006D                     _output_format:	
  2462  006D                     	ds	2
  2463  006F                     _operation_mode:	
  2464  006F                     	ds	1
  2465                           
  2466                           	psect	dataBANK1
  2467  00B3                     __pdataBANK1:	
  2468  00B3                     can_init@F2806:	
  2469  00B3                     	ds	5
  2470  00B8                     can_status_check@F2846:	
  2471  00B8                     	ds	2
  2472  00BA                     can_send@F2837:	
  2473  00BA                     	ds	2
  2474                           
  2475                           	psect	inittext
  2476  0C60                     init_ram:	
  2477  0C60  00FE               	movwf	126
  2478  0C61                     initloop:	
  2479  0C61  0012               	moviw fsr0++
  2480  0C62  001E               	movwi fsr1++
  2481  0C63  0BFE               	decfsz	126,f
  2482  0C64  2C61               	goto	initloop
  2483  0C65  3400               	retlw	0
  2484                           
  2485                           	psect	cstackBANK1
  2486  00A0                     __pcstackBANK1:	
  2487  00A0                     main@mask:	
  2488                           
  2489                           ; 2 bytes @ 0x0
  2490  00A0                     	ds	2
  2491  00A2                     main@sid:	
  2492                           
  2493                           ; 1 bytes @ 0x2
  2494  00A2                     	ds	1
  2495  00A3                     main@n:	
  2496                           
  2497                           ; 1 bytes @ 0x3
  2498  00A3                     	ds	1
  2499  00A4                     main@bpr:	
  2500                           
  2501                           ; 1 bytes @ 0x4
  2502  00A4                     	ds	1
  2503  00A5                     main@success:	
  2504                           
  2505                           ; 1 bytes @ 0x5
  2506  00A5                     	ds	1
  2507  00A6                     main@echo_back:	
  2508                           
  2509                           ; 1 bytes @ 0x6
  2510  00A6                     	ds	1
  2511  00A7                     main@cmd:	
  2512                           
  2513                           ; 1 bytes @ 0x7
  2514  00A7                     	ds	1
  2515  00A8                     main@buf:	
  2516                           
  2517                           ; 9 bytes @ 0x8
  2518  00A8                     	ds	9
  2519  00B1                     main@c:	
  2520                           
  2521                           ; 1 bytes @ 0x11
  2522  00B1                     	ds	1
  2523  00B2                     main@idx:	
  2524                           
  2525                           ; 1 bytes @ 0x12
  2526  00B2                     	ds	1
  2527                           
  2528                           	psect	cstackCOMMON
  2529  0070                     __pcstackCOMMON:	
  2530  0070                     ?_isdigit:	
  2531  0070                     ?_PIN_MANAGER_Initialize:	
  2532                           ; 1 bit 
  2533                           
  2534  0070                     ??_PIN_MANAGER_Initialize:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?_OSCILLATOR_Initialize:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ??_OSCILLATOR_Initialize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?_WDT_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ??_WDT_Initialize:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_SPI_Initialize:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ??_SPI_Initialize:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_EUSART_Initialize:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ??_EUSART_Initialize:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_can_status_check:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_can_set_sid:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_can_logging_mode:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_can_ope_mode:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_can_baudrate:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_can_dump_registers:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ??_isdigit:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_SYSTEM_Initialize:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ??_SYSTEM_Initialize:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_EUSART_Read:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ??_EUSART_Read:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_EUSART_Write:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ??_EUSART_Write:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_putch:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_SPI_Exchange8bit:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ??_SPI_Exchange8bit:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_main:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_txf_clear:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_receive:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_read_register:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?___wmul:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?___lwdiv:	
  2625                           ; 2 bytes @ 0x0
  2626                           
  2627  0070                     EUSART_Write@txData:	
  2628                           ; 2 bytes @ 0x0
  2629                           
  2630  0070                     SPI_Exchange8bit@data:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     can_logging_mode@verbose:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     _isdigit$795:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     can_set_sid@can_node:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ___wmul@multiplier:	
  2643                           ; 2 bytes @ 0x0
  2644                           
  2645  0070                     ___lwdiv@divisor:	
  2646                           ; 2 bytes @ 0x0
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x0
  2650  0070                     	ds	1
  2651  0071                     ??_can_logging_mode:	
  2652  0071                     ??_putch:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655  0071                     ?_SPI_Exchange8bitBuffer:	
  2656                           ; 1 bytes @ 0x1
  2657                           
  2658  0071                     putch@txData:	
  2659                           ; 1 bytes @ 0x1
  2660                           
  2661  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2662                           ; 1 bytes @ 0x1
  2663                           
  2664  0071                     isdigit@c:	
  2665                           ; 1 bytes @ 0x1
  2666                           
  2667                           
  2668                           ; 1 bytes @ 0x1
  2669  0071                     	ds	1
  2670  0072                     ??_can_set_sid:	
  2671  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2672                           ; 1 bytes @ 0x2
  2673                           
  2674  0072                     can_logging_mode@debug:	
  2675                           ; 1 bytes @ 0x2
  2676                           
  2677  0072                     ___wmul@multiplicand:	
  2678                           ; 1 bytes @ 0x2
  2679                           
  2680  0072                     ___lwdiv@dividend:	
  2681                           ; 2 bytes @ 0x2
  2682                           
  2683                           
  2684                           ; 2 bytes @ 0x2
  2685  0072                     	ds	1
  2686  0073                     ??_SPI_Exchange8bitBuffer:	
  2687                           
  2688                           ; 1 bytes @ 0x3
  2689  0073                     	ds	1
  2690  0074                     ??___wmul:	
  2691  0074                     ??___lwdiv:	
  2692                           ; 1 bytes @ 0x4
  2693                           
  2694  0074                     ___wmul@product:	
  2695                           ; 1 bytes @ 0x4
  2696                           
  2697                           
  2698                           ; 2 bytes @ 0x4
  2699  0074                     	ds	1
  2700  0075                     can_set_sid@sidh:	
  2701  0075                     ___lwdiv@quotient:	
  2702                           ; 1 bytes @ 0x5
  2703                           
  2704                           
  2705                           ; 2 bytes @ 0x5
  2706  0075                     	ds	1
  2707  0076                     ?_atoi:	
  2708  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2709                           ; 2 bytes @ 0x6
  2710                           
  2711  0076                     can_set_sid@sidl:	
  2712                           ; 1 bytes @ 0x6
  2713                           
  2714                           
  2715                           ; 1 bytes @ 0x6
  2716  0076                     	ds	1
  2717  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2718  0077                     ___lwdiv@counter:	
  2719                           ; 1 bytes @ 0x7
  2720                           
  2721                           
  2722                           ; 1 bytes @ 0x7
  2723  0077                     	ds	1
  2724  0078                     ??_atoi:	
  2725  0078                     ?_SPI_exchange:	
  2726                           ; 1 bytes @ 0x8
  2727                           
  2728  0078                     ?___lwmod:	
  2729                           ; 1 bytes @ 0x8
  2730                           
  2731  0078                     SPI_exchange@len:	
  2732                           ; 2 bytes @ 0x8
  2733                           
  2734  0078                     ___lwmod@divisor:	
  2735                           ; 1 bytes @ 0x8
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x8
  2739  0078                     	ds	1
  2740  0079                     ??_SPI_exchange:	
  2741                           
  2742                           ; 1 bytes @ 0x9
  2743  0079                     	ds	1
  2744  007A                     atoi@sign:	
  2745  007A                     ___lwmod@dividend:	
  2746                           ; 1 bytes @ 0xA
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0xA
  2750  007A                     	ds	1
  2751  007B                     atoi@a:	
  2752                           
  2753                           ; 2 bytes @ 0xB
  2754  007B                     	ds	1
  2755  007C                     ??___lwmod:	
  2756  007C                     SPI_exchange@bytes_written:	
  2757                           ; 1 bytes @ 0xC
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0xC
  2761  007C                     	ds	1
  2762  007D                     SPI_exchange@buf:	
  2763  007D                     atoi@s:	
  2764                           ; 1 bytes @ 0xD
  2765                           
  2766  007D                     ___lwmod@counter:	
  2767                           ; 1 bytes @ 0xD
  2768                           
  2769                           
  2770                           ; 1 bytes @ 0xD
  2771  007D                     	ds	1
  2772                           
  2773                           	psect	cstackBANK0
  2774  0020                     __pcstackBANK0:	
  2775  0020                     ??_txf_clear:	
  2776  0020                     ??_read_register:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779                           
  2780                           ; 1 bytes @ 0x0
  2781  0020                     	ds	1
  2782  0021                     read_register@addr:	
  2783                           
  2784                           ; 1 bytes @ 0x1
  2785  0021                     	ds	1
  2786  0022                     txf_clear@n:	
  2787  0022                     read_register@read_buf:	
  2788                           ; 1 bytes @ 0x2
  2789                           
  2790                           
  2791                           ; 3 bytes @ 0x2
  2792  0022                     	ds	1
  2793  0023                     txf_clear@mask:	
  2794                           
  2795                           ; 1 bytes @ 0x3
  2796  0023                     	ds	1
  2797  0024                     txf_clear@bytes_written:	
  2798                           
  2799                           ; 1 bytes @ 0x4
  2800  0024                     	ds	1
  2801  0025                     ?_printf:	
  2802  0025                     printf@f:	
  2803                           ; 2 bytes @ 0x5
  2804                           
  2805  0025                     txf_clear@can_int_flag:	
  2806                           ; 2 bytes @ 0x5
  2807                           
  2808                           
  2809                           ; 4 bytes @ 0x5
  2810  0025                     	ds	10
  2811  002F                     ??_printf:	
  2812                           
  2813                           ; 1 bytes @ 0xF
  2814  002F                     	ds	4
  2815  0033                     printf@idx:	
  2816                           
  2817                           ; 1 bytes @ 0x13
  2818  0033                     	ds	1
  2819  0034                     printf@prec:	
  2820                           
  2821                           ; 1 bytes @ 0x14
  2822  0034                     	ds	1
  2823  0035                     printf@cp:	
  2824                           
  2825                           ; 2 bytes @ 0x15
  2826  0035                     	ds	2
  2827  0037                     printf@len:	
  2828                           
  2829                           ; 2 bytes @ 0x17
  2830  0037                     	ds	2
  2831  0039                     printf@ap:	
  2832                           
  2833                           ; 1 bytes @ 0x19
  2834  0039                     	ds	1
  2835  003A                     printf@val:	
  2836                           
  2837                           ; 2 bytes @ 0x1A
  2838  003A                     	ds	2
  2839  003C                     printf@flag:	
  2840                           
  2841                           ; 1 bytes @ 0x1C
  2842  003C                     	ds	1
  2843  003D                     printf@width:	
  2844                           
  2845                           ; 2 bytes @ 0x1D
  2846  003D                     	ds	2
  2847  003F                     printf@c:	
  2848                           
  2849                           ; 1 bytes @ 0x1F
  2850  003F                     	ds	1
  2851  0040                     ??_can_ope_mode:	
  2852  0040                     ??_can_dump_registers:	
  2853                           ; 1 bytes @ 0x20
  2854                           
  2855  0040                     ?_can_send:	
  2856                           ; 1 bytes @ 0x20
  2857                           
  2858  0040                     ?_receive_handler:	
  2859                           ; 1 bytes @ 0x20
  2860                           
  2861  0040                     receive_handler@sid:	
  2862                           ; 1 bytes @ 0x20
  2863                           
  2864  0040                     can_send@dlc:	
  2865                           ; 1 bytes @ 0x20
  2866                           
  2867                           
  2868                           ; 1 bytes @ 0x20
  2869  0040                     	ds	1
  2870  0041                     ??_can_send:	
  2871  0041                     receive_handler@pbuf:	
  2872                           ; 1 bytes @ 0x21
  2873                           
  2874                           
  2875                           ; 1 bytes @ 0x21
  2876  0041                     	ds	1
  2877  0042                     receive_handler@dlc:	
  2878  0042                     can_ope_mode@bytes_written:	
  2879                           ; 1 bytes @ 0x22
  2880                           
  2881                           
  2882                           ; 1 bytes @ 0x22
  2883  0042                     	ds	1
  2884  0043                     ??_receive_handler:	
  2885  0043                     can_ope_mode@can_ctrl_buf:	
  2886                           ; 1 bytes @ 0x23
  2887                           
  2888                           
  2889                           ; 3 bytes @ 0x23
  2890  0043                     	ds	2
  2891  0045                     can_send@tx_buf:	
  2892                           
  2893                           ; 14 bytes @ 0x25
  2894  0045                     	ds	1
  2895  0046                     receive_handler@i:	
  2896  0046                     can_ope_mode@ope_mode:	
  2897                           ; 1 bytes @ 0x26
  2898                           
  2899                           
  2900                           ; 1 bytes @ 0x26
  2901  0046                     	ds	1
  2902  0047                     ?_can_init:	
  2903  0047                     ??_can_baudrate:	
  2904                           ; 1 bytes @ 0x27
  2905                           
  2906  0047                     ?_can_set_mask:	
  2907                           ; 1 bytes @ 0x27
  2908                           
  2909  0047                     ??_receive:	
  2910                           ; 1 bytes @ 0x27
  2911                           
  2912  0047                     can_set_mask@n:	
  2913                           ; 1 bytes @ 0x27
  2914                           
  2915  0047                     can_init@receive_handler:	
  2916                           ; 1 bytes @ 0x27
  2917                           
  2918                           
  2919                           ; 2 bytes @ 0x27
  2920  0047                     	ds	1
  2921  0048                     can_set_mask@mask:	
  2922  0048                     can_dump_registers@mask_sidh:	
  2923                           ; 1 bytes @ 0x28
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x28
  2927  0048                     	ds	1
  2928  0049                     ??_can_init:	
  2929  0049                     ??_can_set_mask:	
  2930                           ; 1 bytes @ 0x29
  2931                           
  2932  0049                     can_baudrate@bpr:	
  2933                           ; 1 bytes @ 0x29
  2934                           
  2935  0049                     can_dump_registers@mask_sidl:	
  2936                           ; 1 bytes @ 0x29
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x29
  2940  0049                     	ds	1
  2941  004A                     can_baudrate@mask:	
  2942  004A                     can_dump_registers@n:	
  2943                           ; 1 bytes @ 0x2A
  2944                           
  2945  004A                     can_init@cnf_buf:	
  2946                           ; 1 bytes @ 0x2A
  2947                           
  2948                           
  2949                           ; 5 bytes @ 0x2A
  2950  004A                     	ds	1
  2951  004B                     can_baudrate@bytes_written:	
  2952                           
  2953                           ; 1 bytes @ 0x2B
  2954  004B                     	ds	1
  2955  004C                     receive@bytes_read:	
  2956  004C                     can_baudrate@cnf1_buf:	
  2957                           ; 1 bytes @ 0x2C
  2958                           
  2959                           
  2960                           ; 4 bytes @ 0x2C
  2961  004C                     	ds	1
  2962  004D                     receive@rx_buf:	
  2963                           
  2964                           ; 15 bytes @ 0x2D
  2965  004D                     	ds	2
  2966  004F                     _can_set_mask$488:	
  2967                           
  2968                           ; 2 bytes @ 0x2F
  2969  004F                     	ds	2
  2970  0051                     _can_set_mask$489:	
  2971                           
  2972                           ; 2 bytes @ 0x31
  2973  0051                     	ds	2
  2974  0053                     can_set_mask@mask_sidh:	
  2975  0053                     can_send@can_status_buf:	
  2976                           ; 1 bytes @ 0x33
  2977                           
  2978                           
  2979                           ; 2 bytes @ 0x33
  2980  0053                     	ds	1
  2981  0054                     can_set_mask@mask_sidl:	
  2982                           
  2983                           ; 1 bytes @ 0x34
  2984  0054                     	ds	1
  2985  0055                     can_set_mask@cmd:	
  2986  0055                     can_send@len:	
  2987                           ; 1 bytes @ 0x35
  2988                           
  2989                           
  2990                           ; 1 bytes @ 0x35
  2991  0055                     	ds	1
  2992  0056                     can_send@buf:	
  2993  0056                     can_set_mask@mask_buf:	
  2994                           ; 1 bytes @ 0x36
  2995                           
  2996                           
  2997                           ; 4 bytes @ 0x36
  2998  0056                     	ds	1
  2999  0057                     can_send@bytes_written:	
  3000                           
  3001                           ; 1 bytes @ 0x37
  3002  0057                     	ds	1
  3003  0058                     can_send@txb_ctrl_buf:	
  3004                           
  3005                           ; 1 bytes @ 0x38
  3006  0058                     	ds	1
  3007  0059                     can_send@status:	
  3008                           
  3009                           ; 1 bytes @ 0x39
  3010  0059                     	ds	1
  3011  005A                     can_send@debug_buf:	
  3012                           
  3013                           ; 3 bytes @ 0x3A
  3014  005A                     	ds	2
  3015  005C                     receive@pbuf:	
  3016                           
  3017                           ; 1 bytes @ 0x3C
  3018  005C                     	ds	1
  3019  005D                     can_send@i:	
  3020  005D                     receive@sid:	
  3021                           ; 1 bytes @ 0x3D
  3022                           
  3023                           
  3024                           ; 2 bytes @ 0x3D
  3025  005D                     	ds	1
  3026  005E                     can_send@n:	
  3027                           
  3028                           ; 1 bytes @ 0x3E
  3029  005E                     	ds	1
  3030  005F                     receive@dlc:	
  3031                           
  3032                           ; 1 bytes @ 0x3F
  3033  005F                     	ds	1
  3034  0060                     receive@n:	
  3035                           
  3036                           ; 1 bytes @ 0x40
  3037  0060                     	ds	1
  3038  0061                     ??_can_status_check:	
  3039                           
  3040                           ; 1 bytes @ 0x41
  3041  0061                     	ds	2
  3042  0063                     can_status_check@bytes_written:	
  3043                           
  3044                           ; 1 bytes @ 0x43
  3045  0063                     	ds	1
  3046  0064                     can_status_check@can_status_buf:	
  3047                           
  3048                           ; 2 bytes @ 0x44
  3049  0064                     	ds	2
  3050  0066                     can_status_check@status:	
  3051                           
  3052                           ; 1 bytes @ 0x46
  3053  0066                     	ds	1
  3054  0067                     ??_main:	
  3055                           
  3056                           ; 1 bytes @ 0x47
  3057  0067                     	ds	2
  3058                           
  3059                           	psect	maintext
  3060  0402                     __pmaintext:	
  3061 ;;
  3062 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3063 ;;
  3064 ;; *************** function _main *****************
  3065 ;; Defined at:
  3066 ;;		line 39 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  success         1    5[BANK1 ] unsigned char 
  3071 ;;  buf             9    8[BANK1 ] unsigned char [9]
  3072 ;;  mask            2    0[BANK1 ] unsigned int 
  3073 ;;  idx             1   18[BANK1 ] unsigned char 
  3074 ;;  c               1   17[BANK1 ] unsigned char 
  3075 ;;  cmd             1    7[BANK1 ] unsigned char 
  3076 ;;  echo_back       1    6[BANK1 ] unsigned char 
  3077 ;;  bpr             1    4[BANK1 ] unsigned char 
  3078 ;;  n               1    3[BANK1 ] unsigned char 
  3079 ;;  sid             1    2[BANK1 ] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3084 ;; Tracked objects:
  3085 ;;		On entry : B1F/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3090 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3092 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3093 ;;Total ram usage:       21 bytes
  3094 ;; Hardware stack levels required when called:    6
  3095 ;; This function calls:
  3096 ;;		_EUSART_Read
  3097 ;;		_SYSTEM_Initialize
  3098 ;;		_atoi
  3099 ;;		_can_baudrate
  3100 ;;		_can_dump_registers
  3101 ;;		_can_init
  3102 ;;		_can_logging_mode
  3103 ;;		_can_ope_mode
  3104 ;;		_can_send
  3105 ;;		_can_set_mask
  3106 ;;		_can_set_sid
  3107 ;;		_can_status_check
  3108 ;;		_printf
  3109 ;; This function is called by:
  3110 ;;		Startup code after reset
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           
  3115                           ;psect for function _main
  3116  0402                     _main:	
  3117                           
  3118                           ;main.c: 41: uint8_t buf[9];
  3119                           ;main.c: 42: bool echo_back = 0;
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3123  0402  0021               	movlb	1	; select bank1
  3124  0403  01A6               	clrf	main@echo_back^(0+128)
  3125                           
  3126                           ;main.c: 43: uint8_t c, idx;
  3127                           ;main.c: 45: uint8_t cmd, sid, n, bpr;
  3128                           ;main.c: 46: uint16_t mask;
  3129                           ;main.c: 48: SYSTEM_Initialize();
  3130  0404  318C  24BC  3184   	fcall	_SYSTEM_Initialize
  3131                           
  3132                           ;main.c: 53: output_format.with_sid = 0;
  3133  0407  0020               	movlb	0	; select bank0
  3134  0408  01ED               	clrf	_output_format
  3135                           
  3136                           ;main.c: 54: output_format.hex_output = 0;
  3137  0409  01EE               	clrf	_output_format+1
  3138                           
  3139                           ;main.c: 55: can_init(receive_handler);
  3140  040A  30F0               	movlw	low _receive_handler
  3141  040B  00C7               	movwf	can_init@receive_handler
  3142  040C  300E               	movlw	high _receive_handler
  3143  040D  00C8               	movwf	can_init@receive_handler+1
  3144  040E  318D  25A6  3184   	fcall	_can_init
  3145                           
  3146                           ;main.c: 72: switch(cmd) {
  3147  0411  2D10               	goto	L1
  3148  0412                     l2513:	
  3149                           ;main.c: 73: case 'i':
  3150                           
  3151                           
  3152                           ;main.c: 74: sid = atoi(&buf[2]);
  3153  0412  30AA               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3154  0413  3180  202B  3184   	fcall	_atoi
  3155  0416  0876               	movf	?_atoi,w
  3156  0417  0020               	movlb	0	; select bank0
  3157  0418  00E7               	movwf	??_main
  3158  0419  0867               	movf	??_main,w
  3159  041A  0021               	movlb	1	; select bank1
  3160  041B  00A2               	movwf	main@sid^(0+128)
  3161                           
  3162                           ;main.c: 75: can_set_sid(sid);
  3163  041C  0822               	movf	main@sid^(0+128),w
  3164  041D  0020               	movlb	0	; select bank0
  3165  041E  00E7               	movwf	??_main
  3166  041F  01E8               	clrf	??_main+1
  3167  0420  0867               	movf	??_main,w
  3168  0421  00F0               	movwf	can_set_sid@can_node
  3169  0422  0868               	movf	??_main+1,w
  3170  0423  00F1               	movwf	can_set_sid@can_node+1
  3171  0424  3180  2007  3184   	fcall	_can_set_sid
  3172                           
  3173                           ;main.c: 76: break;
  3174  0427  2D10               	goto	L1
  3175  0428                     l2517:	
  3176                           ;main.c: 77: case 'v':
  3177                           
  3178                           
  3179                           ;main.c: 78: if (buf[2] == 'd') {
  3180  0428  3064               	movlw	100
  3181  0429  0021               	movlb	1	; select bank1
  3182  042A  062A               	xorwf	(main@buf^(0+128)+2),w
  3183  042B  1D03               	btfss	3,2
  3184  042C  2C31               	goto	l2523
  3185                           
  3186                           ;main.c: 79: can_logging_mode(1, 1);
  3187  042D  01F0               	clrf	can_logging_mode@verbose
  3188  042E  0AF0               	incf	can_logging_mode@verbose,f
  3189  042F  3001               	movlw	1
  3190  0430  2C38               	goto	L2
  3191  0431                     l2523:	
  3192                           ;main.c: 81: } else if (buf[2] == 'v') {
  3193                           
  3194                           ;main.c: 80: echo_back = 1;
  3195                           
  3196  0431  3076               	movlw	118
  3197  0432  062A               	xorwf	(main@buf^(0+128)+2),w
  3198  0433  1D03               	btfss	3,2
  3199  0434  2C3F               	goto	l2529
  3200                           
  3201                           ;main.c: 82: can_logging_mode(0, 1);
  3202  0435  01F0               	clrf	can_logging_mode@verbose
  3203  0436  0AF0               	incf	can_logging_mode@verbose,f
  3204  0437  3000               	movlw	0
  3205  0438                     L2:	
  3206  0438  318C  24A3  3184   	fcall	_can_logging_mode
  3207                           
  3208                           ;main.c: 83: echo_back = 1;
  3209  043B  0021               	movlb	1	; select bank1
  3210  043C  01A6               	clrf	main@echo_back^(0+128)
  3211  043D  0AA6               	incf	main@echo_back^(0+128),f
  3212                           
  3213                           ;main.c: 84: } else if (buf[2] == 'n') {
  3214  043E  2D10               	goto	L1
  3215  043F                     l2529:	
  3216  043F  306E               	movlw	110
  3217  0440  062A               	xorwf	(main@buf^(0+128)+2),w
  3218  0441  1D03               	btfss	3,2
  3219  0442  2D10               	goto	L1
  3220                           
  3221                           ;main.c: 85: can_logging_mode(0, 0);
  3222  0443  01F0               	clrf	can_logging_mode@verbose
  3223  0444  3000               	movlw	0
  3224  0445  318C  24A3  3184   	fcall	_can_logging_mode
  3225                           
  3226                           ;main.c: 86: echo_back = 0;
  3227  0448  0021               	movlb	1	; select bank1
  3228  0449  01A6               	clrf	main@echo_back^(0+128)
  3229                           
  3230                           ;main.c: 87: }
  3231                           ;main.c: 88: break;
  3232  044A  2D10               	goto	L1
  3233  044B                     l2535:	
  3234                           ;main.c: 89: case 'o':
  3235                           
  3236                           
  3237                           ;main.c: 90: if (buf[2] == 'l') {
  3238  044B  306C               	movlw	108
  3239  044C  062A               	xorwf	(main@buf^(0+128)+2),w
  3240  044D  1D03               	btfss	3,2
  3241  044E  2C51               	goto	l2539
  3242                           
  3243                           ;main.c: 91: can_ope_mode(0b01000000);
  3244  044F  3040               	movlw	64
  3245  0450  2C57               	goto	L3
  3246  0451                     l2539:	
  3247                           ;main.c: 92: } else if (buf[2] == 'n') {
  3248                           
  3249  0451  306E               	movlw	110
  3250  0452  0021               	movlb	1	; select bank1
  3251  0453  062A               	xorwf	(main@buf^(0+128)+2),w
  3252  0454  1D03               	btfss	3,2
  3253  0455  2C5A               	goto	l2543
  3254                           
  3255                           ;main.c: 93: can_ope_mode(0b00000000);
  3256  0456  3000               	movlw	0
  3257  0457                     L3:	
  3258  0457  318E  260A  3184   	fcall	_can_ope_mode
  3259  045A                     l2543:	
  3260                           
  3261                           ;main.c: 94: }
  3262                           ;main.c: 95: if (buf[3] == '\0') {
  3263  045A  0021               	movlb	1	; select bank1
  3264  045B  082B               	movf	(main@buf^(0+128)+3),w
  3265  045C  1D03               	btfss	3,2
  3266  045D  2C61               	goto	l2547
  3267                           
  3268                           ;main.c: 96: output_format.with_sid = 0;
  3269  045E  0020               	movlb	0	; select bank0
  3270  045F  01ED               	clrf	_output_format
  3271  0460  2C6C               	goto	l2553
  3272  0461                     l2547:	
  3273                           ;main.c: 98: } else if (buf[3] == 's' && buf[4] == '\0') {
  3274                           
  3275                           ;main.c: 97: output_format.hex_output = 0;
  3276                           
  3277  0461  3073               	movlw	115
  3278  0462  0021               	movlb	1	; select bank1
  3279  0463  062B               	xorwf	(main@buf^(0+128)+3),w
  3280  0464  1D03               	btfss	3,2
  3281  0465  2C6E               	goto	l2555
  3282  0466  082C               	movf	(main@buf^(0+128)+4),w
  3283  0467  1D03               	btfss	3,2
  3284  0468  2C6E               	goto	l2555
  3285                           
  3286                           ;main.c: 99: output_format.with_sid = 1;
  3287  0469  0020               	movlb	0	; select bank0
  3288  046A  01ED               	clrf	_output_format
  3289  046B  0AED               	incf	_output_format,f
  3290  046C                     l2553:	
  3291                           
  3292                           ;main.c: 100: output_format.hex_output = 0;
  3293  046C  01EE               	clrf	_output_format+1
  3294                           
  3295                           ;main.c: 101: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3296  046D  2D10               	goto	L1
  3297  046E                     l2555:	
  3298  046E  3068               	movlw	104
  3299  046F  0021               	movlb	1	; select bank1
  3300  0470  062B               	xorwf	(main@buf^(0+128)+3),w
  3301  0471  1D03               	btfss	3,2
  3302  0472  2D10               	goto	L1
  3303  0473  082C               	movf	(main@buf^(0+128)+4),w
  3304  0474  1D03               	btfss	3,2
  3305  0475  2D10               	goto	L1
  3306                           
  3307                           ;main.c: 102: output_format.with_sid = 0;
  3308  0476  0020               	movlb	0	; select bank0
  3309  0477  01ED               	clrf	_output_format
  3310                           
  3311                           ;main.c: 103: output_format.hex_output = 1;
  3312  0478  01EE               	clrf	_output_format+1
  3313  0479  0AEE               	incf	_output_format+1,f
  3314                           
  3315                           ;main.c: 104: }
  3316                           ;main.c: 105: break;
  3317  047A  2D10               	goto	L1
  3318  047B                     l2563:	
  3319                           ;main.c: 106: case 'b':
  3320                           
  3321                           
  3322                           ;main.c: 107: bpr = atoi(&buf[2]);
  3323  047B  30AA               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3324  047C  3180  202B  3184   	fcall	_atoi
  3325  047F  0876               	movf	?_atoi,w
  3326  0480  0020               	movlb	0	; select bank0
  3327  0481  00E7               	movwf	??_main
  3328  0482  0867               	movf	??_main,w
  3329  0483  0021               	movlb	1	; select bank1
  3330  0484  00A4               	movwf	main@bpr^(0+128)
  3331                           
  3332                           ;main.c: 108: can_baudrate(bpr);
  3333  0485  0824               	movf	main@bpr^(0+128),w
  3334  0486  318D  254F  3184   	fcall	_can_baudrate
  3335                           
  3336                           ;main.c: 109: break;
  3337  0489  2D10               	goto	L1
  3338  048A                     l2567:	
  3339                           ;main.c: 110: case 'm':
  3340                           
  3341                           
  3342                           ;main.c: 111: case 'f':
  3343                           ;main.c: 112: n = buf[2] - 0x30;
  3344  048A  0021               	movlb	1	; select bank1
  3345  048B  082A               	movf	(main@buf^(0+128)+2),w
  3346  048C  3ED0               	addlw	208
  3347  048D  0020               	movlb	0	; select bank0
  3348  048E  00E7               	movwf	??_main
  3349  048F  0867               	movf	??_main,w
  3350  0490  0021               	movlb	1	; select bank1
  3351  0491  00A3               	movwf	main@n^(0+128)
  3352                           
  3353                           ;main.c: 113: mask = atoi(&buf[3]);
  3354  0492  30AB               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3355  0493  3180  202B  3184   	fcall	_atoi
  3356  0496  0877               	movf	?_atoi+1,w
  3357  0497  0021               	movlb	1	; select bank1
  3358  0498  00A1               	movwf	(main@mask+1)^(0+128)
  3359  0499  0876               	movf	?_atoi,w
  3360  049A  00A0               	movwf	main@mask^(0+128)
  3361                           
  3362                           ;main.c: 114: can_set_mask(cmd, n, mask);
  3363  049B  0823               	movf	main@n^(0+128),w
  3364  049C  0020               	movlb	0	; select bank0
  3365  049D  00E7               	movwf	??_main
  3366  049E  0867               	movf	??_main,w
  3367  049F  00C7               	movwf	can_set_mask@n
  3368  04A0  0021               	movlb	1	; select bank1
  3369  04A1  0820               	movf	main@mask^(0+128),w
  3370  04A2  0020               	movlb	0	; select bank0
  3371  04A3  00E8               	movwf	??_main+1
  3372  04A4  0868               	movf	??_main+1,w
  3373  04A5  00C8               	movwf	can_set_mask@mask
  3374  04A6  0021               	movlb	1	; select bank1
  3375  04A7  0827               	movf	main@cmd^(0+128),w
  3376  04A8  3180  2092  3184   	fcall	_can_set_mask
  3377                           
  3378                           ;main.c: 115: break;
  3379  04AB  2D10               	goto	L1
  3380  04AC                     l2573:	
  3381                           ;main.c: 116: case 'd':
  3382                           
  3383                           
  3384                           ;main.c: 117: can_dump_registers();
  3385  04AC  3182  22BD  3184   	fcall	_can_dump_registers
  3386                           
  3387                           ;main.c: 118: break;
  3388  04AF  2D10               	goto	L1
  3389  04B0                     l2575:	
  3390                           ;main.c: 119: case 'h':
  3391                           
  3392                           
  3393                           ;main.c: 120: printf("--- UART2CAN HELP ---\n");
  3394  04B0  30E4               	movlw	low (STR_7| (0+32768))
  3395  04B1  0020               	movlb	0	; select bank0
  3396  04B2  00A5               	movwf	printf@f
  3397  04B3  3091               	movlw	high (STR_7| (0+32768))
  3398  04B4  00A6               	movwf	printf@f+1
  3399  04B5  3185  25B0  3184   	fcall	_printf
  3400                           
  3401                           ;main.c: 121: printf("[Set standard identifier] @i<standard identifier>\n");
  3402  04B8  30AB               	movlw	low (STR_8| (0+32768))
  3403  04B9  0020               	movlb	0	; select bank0
  3404  04BA  00A5               	movwf	printf@f
  3405  04BB  3090               	movlw	high (STR_8| (0+32768))
  3406  04BC  00A6               	movwf	printf@f+1
  3407  04BD  3185  25B0  3184   	fcall	_printf
  3408                           
  3409                           ;main.c: 122: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3410  04C0  3000               	movlw	low (STR_9| (0+32768))
  3411  04C1  0020               	movlb	0	; select bank0
  3412  04C2  00A5               	movwf	printf@f
  3413  04C3  3090               	movlw	high (STR_9| (0+32768))
  3414  04C4  00A6               	movwf	printf@f+1
  3415  04C5  3185  25B0  3184   	fcall	_printf
  3416                           
  3417                           ;main.c: 123: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3418  04C8  3075               	movlw	low (STR_10| (0+32768))
  3419  04C9  0020               	movlb	0	; select bank0
  3420  04CA  00A5               	movwf	printf@f
  3421  04CB  3090               	movlw	high (STR_10| (0+32768))
  3422  04CC  00A6               	movwf	printf@f+1
  3423  04CD  3185  25B0  3184   	fcall	_printf
  3424                           
  3425                           ;main.c: 124: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3426  04D0  303B               	movlw	low (STR_11| (0+32768))
  3427  04D1  0020               	movlb	0	; select bank0
  3428  04D2  00A5               	movwf	printf@f
  3429  04D3  3090               	movlw	high (STR_11| (0+32768))
  3430  04D4  00A6               	movwf	printf@f+1
  3431  04D5  3185  25B0  3184   	fcall	_printf
  3432                           
  3433                           ;main.c: 125: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3434  04D8  3034               	movlw	low (STR_12| (0+32768))
  3435  04D9  0020               	movlb	0	; select bank0
  3436  04DA  00A5               	movwf	printf@f
  3437  04DB  3091               	movlw	high (STR_12| (0+32768))
  3438  04DC  00A6               	movwf	printf@f+1
  3439  04DD  3185  25B0  3184   	fcall	_printf
  3440                           
  3441                           ;main.c: 126: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3442  04E0  300A               	movlw	low (STR_13| (0+32768))
  3443  04E1  0020               	movlb	0	; select bank0
  3444  04E2  00A5               	movwf	printf@f
  3445  04E3  3091               	movlw	high (STR_13| (0+32768))
  3446  04E4  00A6               	movwf	printf@f+1
  3447  04E5  3185  25B0  3184   	fcall	_printf
  3448                           
  3449                           ;main.c: 127: printf("[Set baud rate] @b<bpr>\n");
  3450  04E8  30B4               	movlw	low (STR_14| (0+32768))
  3451  04E9  0020               	movlb	0	; select bank0
  3452  04EA  00A5               	movwf	printf@f
  3453  04EB  3091               	movlw	high (STR_14| (0+32768))
  3454  04EC  00A6               	movwf	printf@f+1
  3455  04ED  3185  25B0  3184   	fcall	_printf
  3456                           
  3457                           ;main.c: 128: printf("[Dump registers] @d\n");
  3458  04F0  3026               	movlw	low (STR_15| (0+32768))
  3459  04F1  0020               	movlb	0	; select bank0
  3460  04F2  00A5               	movwf	printf@f
  3461  04F3  3092               	movlw	high (STR_15| (0+32768))
  3462  04F4  00A6               	movwf	printf@f+1
  3463  04F5  3185  25B0  3184   	fcall	_printf
  3464                           
  3465                           ;main.c: 129: printf("[Send message] <message>\n");
  3466  04F8  309A               	movlw	low (STR_16| (0+32768))
  3467  04F9  0020               	movlb	0	; select bank0
  3468  04FA  00A5               	movwf	printf@f
  3469  04FB  3091               	movlw	high (STR_16| (0+32768))
  3470  04FC  00A6               	movwf	printf@f+1
  3471  04FD  3185  25B0  3184   	fcall	_printf
  3472                           
  3473                           ;main.c: 130: printf("[Receive message] <message> will be output\n");
  3474  0500  30DE               	movlw	low (STR_17| (0+32768))
  3475  0501  0020               	movlb	0	; select bank0
  3476  0502  00A5               	movwf	printf@f
  3477  0503  3090               	movlw	high (STR_17| (0+32768))
  3478  0504  00A6               	movwf	printf@f+1
  3479  0505  3185  25B0  3184   	fcall	_printf
  3480                           
  3481                           ;main.c: 131: printf("[Show this help]: @h\n");
  3482  0508  30FB               	movlw	low (STR_18| (0+32768))
  3483  0509  0020               	movlb	0	; select bank0
  3484  050A  00A5               	movwf	printf@f
  3485  050B  3091               	movlw	high (STR_18| (0+32768))
  3486  050C  00A6               	movwf	printf@f+1
  3487  050D  3185  25B0  3184   	fcall	_printf
  3488  0510                     L1:	
  3489                           ;main.c: 133: }
  3490                           
  3491                           ;main.c: 132: break;
  3492                           
  3493                           
  3494                           ;main.c: 57: idx = 0;
  3495  0510  0021               	movlb	1	; select bank1
  3496  0511  01B2               	clrf	main@idx^(0+128)
  3497  0512                     l2493:	
  3498                           ;main.c: 59: while (1)
  3499                           
  3500                           
  3501                           ;main.c: 60: {
  3502                           ;main.c: 61: can_status_check();
  3503  0512  318E  2655  3184   	fcall	_can_status_check
  3504                           
  3505                           ;main.c: 63: if ((PIR1bits.RCIF)) {
  3506  0515  0020               	movlb	0	; select bank0
  3507  0516  1E91               	btfss	17,5	;volatile
  3508  0517  2D12               	goto	l2493
  3509                           
  3510                           ;main.c: 64: c = EUSART_Read();
  3511  0518  318C  248E  3184   	fcall	_EUSART_Read
  3512  051B  0020               	movlb	0	; select bank0
  3513  051C  00E7               	movwf	??_main
  3514  051D  0867               	movf	??_main,w
  3515  051E  0021               	movlb	1	; select bank1
  3516  051F  00B1               	movwf	main@c^(0+128)
  3517                           
  3518                           ;main.c: 65: if (echo_back) printf("%c", c);
  3519  0520  0826               	movf	main@echo_back^(0+128),w
  3520  0521  1903               	btfsc	3,2
  3521  0522  2D34               	goto	l2503
  3522  0523  30D7               	movlw	low (STR_6| (0+32768))
  3523  0524  0020               	movlb	0	; select bank0
  3524  0525  00A5               	movwf	printf@f
  3525  0526  3093               	movlw	high (STR_6| (0+32768))
  3526  0527  00A6               	movwf	printf@f+1
  3527  0528  0021               	movlb	1	; select bank1
  3528  0529  0831               	movf	main@c^(0+128),w
  3529  052A  0020               	movlb	0	; select bank0
  3530  052B  00E7               	movwf	??_main
  3531  052C  01E8               	clrf	??_main+1
  3532  052D  0867               	movf	??_main,w
  3533  052E  00A7               	movwf	?_printf+2
  3534  052F  0868               	movf	??_main+1,w
  3535  0530  00A8               	movwf	?_printf+3
  3536  0531  3185  25B0  3184   	fcall	_printf
  3537  0534                     l2503:	
  3538                           
  3539                           ;main.c: 67: buf[idx] = c;
  3540  0534  0021               	movlb	1	; select bank1
  3541  0535  0831               	movf	main@c^(0+128),w
  3542  0536  0020               	movlb	0	; select bank0
  3543  0537  00E7               	movwf	??_main
  3544  0538  0021               	movlb	1	; select bank1
  3545  0539  0832               	movf	main@idx^(0+128),w
  3546  053A  3EA8               	addlw	(low (main@buf| 0))& (0+255)
  3547  053B  0086               	movwf	6
  3548  053C  0187               	clrf	7
  3549  053D  0020               	movlb	0	; select bank0
  3550  053E  0867               	movf	??_main,w
  3551  053F  0081               	movwf	1
  3552                           
  3553                           ;main.c: 68: if (c == '\n') {
  3554  0540  300A               	movlw	10
  3555  0541  0021               	movlb	1	; select bank1
  3556  0542  0631               	xorwf	main@c^(0+128),w
  3557  0543  1D03               	btfss	3,2
  3558  0544  2D8D               	goto	l2589
  3559                           
  3560                           ;main.c: 69: buf[idx] = '\0';
  3561  0545  0832               	movf	main@idx^(0+128),w
  3562  0546  3EA8               	addlw	(low (main@buf| 0))& (0+255)
  3563  0547  0086               	movwf	6
  3564  0548  0187               	clrf	7
  3565  0549  0181               	clrf	1
  3566                           
  3567                           ;main.c: 70: if (buf[0] == '@') {
  3568  054A  3040               	movlw	64
  3569  054B  0628               	xorwf	main@buf^(0+128),w
  3570  054C  1D03               	btfss	3,2
  3571  054D  2D70               	goto	l2581
  3572                           
  3573                           ;main.c: 71: cmd = buf[1];
  3574  054E  0829               	movf	(main@buf^(0+128)+1),w
  3575  054F  0020               	movlb	0	; select bank0
  3576  0550  00E7               	movwf	??_main
  3577  0551  0867               	movf	??_main,w
  3578  0552  0021               	movlb	1	; select bank1
  3579  0553  00A7               	movwf	main@cmd^(0+128)
  3580  0554  0021               	movlb	1	; select bank1
  3581  0555  0827               	movf	main@cmd^(0+128),w
  3582                           
  3583                           ; Switch size 1, requested type "space"
  3584                           ; Number of cases is 8, Range of values is 98 to 118
  3585                           ; switch strategies available:
  3586                           ; Name         Instructions Cycles
  3587                           ; simple_byte           25    13 (average)
  3588                           ; direct_byte           51     9 (fixed)
  3589                           ; jumptable            263     9 (fixed)
  3590                           ;	Chosen strategy is simple_byte
  3591  0556  3A62               	xorlw	98	; case 98
  3592  0557  1903               	skipnz
  3593  0558  2C7B               	goto	l2563
  3594  0559  3A06               	xorlw	6	; case 100
  3595  055A  1903               	skipnz
  3596  055B  2CAC               	goto	l2573
  3597  055C  3A02               	xorlw	2	; case 102
  3598  055D  1903               	skipnz
  3599  055E  2C8A               	goto	l2567
  3600  055F  3A0E               	xorlw	14	; case 104
  3601  0560  1903               	skipnz
  3602  0561  2CB0               	goto	l2575
  3603  0562  3A01               	xorlw	1	; case 105
  3604  0563  1903               	skipnz
  3605  0564  2C12               	goto	l2513
  3606  0565  3A04               	xorlw	4	; case 109
  3607  0566  1903               	skipnz
  3608  0567  2C8A               	goto	l2567
  3609  0568  3A02               	xorlw	2	; case 111
  3610  0569  1903               	skipnz
  3611  056A  2C4B               	goto	l2535
  3612  056B  3A19               	xorlw	25	; case 118
  3613  056C  1903               	skipnz
  3614  056D  2C28               	goto	l2517
  3615  056E  2D8C               	goto	l2587
  3616                           
  3617                           ;main.c: 134: } else {
  3618  056F  2D10               	goto	L1
  3619  0570                     l2581:	
  3620                           
  3621                           ;main.c: 135: bool success = can_send(buf, idx);
  3622  0570  0832               	movf	main@idx^(0+128),w
  3623  0571  0020               	movlb	0	; select bank0
  3624  0572  00E7               	movwf	??_main
  3625  0573  0867               	movf	??_main,w
  3626  0574  00C0               	movwf	can_send@dlc
  3627  0575  30A8               	movlw	(low (main@buf| 0))& (0+255)
  3628  0576  3181  2184  3184   	fcall	_can_send
  3629  0579  0020               	movlb	0	; select bank0
  3630  057A  00E8               	movwf	??_main+1
  3631  057B  0868               	movf	??_main+1,w
  3632  057C  0021               	movlb	1	; select bank1
  3633  057D  00A5               	movwf	main@success^(0+128)
  3634                           
  3635                           ;main.c: 136: if(success) {
  3636  057E  0825               	movf	main@success^(0+128),w
  3637  057F  1903               	btfsc	3,2
  3638  0580  2D10               	goto	L1
  3639                           
  3640                           ;main.c: 137: LATCbits.LATC3 = !LATCbits.LATC3;
  3641  0581  1003               	clrc
  3642  0582  0022               	movlb	2	; select bank2
  3643  0583  1D8E               	btfss	14,3	;volatile
  3644  0584  1403               	setc
  3645  0585  1C03               	btfss	3,0
  3646  0586  2D8A               	goto	u2500
  3647  0587  0022               	movlb	2	; select bank2
  3648  0588  158E               	bsf	14,3	;volatile
  3649  0589  2D10               	goto	L1
  3650  058A                     u2500:	
  3651  058A  0022               	movlb	2	; select bank2
  3652  058B  118E               	bcf	14,3	;volatile
  3653  058C                     l2587:	
  3654  058C  2D10               	goto	L1
  3655  058D                     l2589:	
  3656                           ;main.c: 141: } else if (++idx > max_idx) {
  3657                           
  3658                           ;main.c: 138: }
  3659                           ;main.c: 139: }
  3660                           ;main.c: 140: idx = 0;
  3661                           
  3662  058D  3001               	movlw	1
  3663  058E  0020               	movlb	0	; select bank0
  3664  058F  00E7               	movwf	??_main
  3665  0590  0867               	movf	??_main,w
  3666  0591  0021               	movlb	1	; select bank1
  3667  0592  07B2               	addwf	main@idx^(0+128),f
  3668  0593  30DE               	movlw	low (_max_idx| (0+32768))
  3669  0594  0084               	movwf	4
  3670  0595  3093               	movlw	high (_max_idx| (0+32768))
  3671  0596  0085               	movwf	5
  3672  0597  0800               	movf	0,w	;code access
  3673  0598  0020               	movlb	0	; select bank0
  3674  0599  00E8               	movwf	??_main+1
  3675  059A  0021               	movlb	1	; select bank1
  3676  059B  0832               	movf	main@idx^(0+128),w
  3677  059C  0020               	movlb	0	; select bank0
  3678  059D  0268               	subwf	??_main+1,w
  3679  059E  1803               	skipnc
  3680  059F  2D12               	goto	l2493
  3681                           
  3682                           ;main.c: 142: buf[idx] = '\0';
  3683  05A0  0021               	movlb	1	; select bank1
  3684  05A1  0832               	movf	main@idx^(0+128),w
  3685  05A2  3EA8               	addlw	(low (main@buf| 0))& (0+255)
  3686  05A3  0086               	movwf	6
  3687  05A4  0187               	clrf	7
  3688  05A5  0181               	clrf	1
  3689                           
  3690                           ;main.c: 143: can_send(buf, idx);
  3691  05A6  0832               	movf	main@idx^(0+128),w
  3692  05A7  0020               	movlb	0	; select bank0
  3693  05A8  00E7               	movwf	??_main
  3694  05A9  0867               	movf	??_main,w
  3695  05AA  00C0               	movwf	can_send@dlc
  3696  05AB  30A8               	movlw	(low (main@buf| 0))& (0+255)
  3697  05AC  3181  2184  3184   	fcall	_can_send
  3698  05AF  2D10               	goto	L1
  3699  05B0                     __end_of_main:	
  3700                           ;main.c: 144: idx = 0;
  3701                           
  3702                           
  3703                           	psect	text1
  3704  0E55                     __ptext1:	
  3705 ;; *************** function _can_status_check *****************
  3706 ;; Defined at:
  3707 ;;		line 251 in file "mcp2515.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  can_status_b    2   68[BANK0 ] unsigned char [2]
  3712 ;;  status          1   70[BANK0 ] unsigned char 
  3713 ;;  bytes_writte    1   67[BANK0 ] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3726 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3727 ;;Total ram usage:        6 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    5
  3730 ;; This function calls:
  3731 ;;		_SPI_exchange
  3732 ;;		_printf
  3733 ;;		_receive
  3734 ;;		_txf_clear
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function _can_status_check
  3742  0E55                     _can_status_check:	
  3743                           
  3744                           ;mcp2515.c: 253: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3748  0E55  0021               	movlb	1	; select bank1
  3749  0E56  0839               	movf	(can_status_check@F2846+1)^(0+128),w
  3750  0E57  0020               	movlb	0	; select bank0
  3751  0E58  00E5               	movwf	can_status_check@can_status_buf+1
  3752  0E59  0021               	movlb	1	; select bank1
  3753  0E5A  0838               	movf	can_status_check@F2846^(0+128),w
  3754  0E5B  0020               	movlb	0	; select bank0
  3755  0E5C  00E4               	movwf	can_status_check@can_status_buf
  3756                           
  3757                           ;mcp2515.c: 254: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  3758  0E5D  3002               	movlw	2
  3759  0E5E  00E1               	movwf	??_can_status_check
  3760  0E5F  0861               	movf	??_can_status_check,w
  3761  0E60  00F8               	movwf	SPI_exchange@len
  3762  0E61  3064               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3763  0E62  318C  24CB  318E   	fcall	_SPI_exchange
  3764  0E65  0020               	movlb	0	; select bank0
  3765  0E66  00E2               	movwf	??_can_status_check+1
  3766  0E67  0862               	movf	??_can_status_check+1,w
  3767  0E68  00E3               	movwf	can_status_check@bytes_written
  3768                           
  3769                           ;mcp2515.c: 255: uint8_t status = can_status_buf[1];
  3770  0E69  0865               	movf	can_status_check@can_status_buf+1,w
  3771  0E6A  00E1               	movwf	??_can_status_check
  3772  0E6B  0861               	movf	??_can_status_check,w
  3773  0E6C  00E6               	movwf	can_status_check@status
  3774                           
  3775                           ;mcp2515.c: 256: if (status == 0x00) {
  3776  0E6D  0866               	movf	can_status_check@status,w
  3777  0E6E  1903               	btfsc	3,2
  3778  0E6F  0008               	return
  3779                           
  3780                           ;mcp2515.c: 258: } else if ((status & 0b00000001) > 0) {
  3781                           
  3782                           ;mcp2515.c: 257: return;
  3783  0E70  1C66               	btfss	can_status_check@status,0
  3784  0E71  2E80               	goto	l338
  3785                           
  3786                           ;mcp2515.c: 259: if (mode.debug) printf("RX0IF is on\n");
  3787  0E72  0869               	movf	_mode,w
  3788  0E73  1903               	btfsc	3,2
  3789  0E74  2E7C               	goto	l339
  3790  0E75  3061               	movlw	low (STR_37| (0+32768))
  3791  0E76  00A5               	movwf	printf@f
  3792  0E77  3093               	movlw	high (STR_37| (0+32768))
  3793  0E78  00A6               	movwf	printf@f+1
  3794  0E79  3185  25B0  318E   	fcall	_printf
  3795  0E7C                     l339:	
  3796                           
  3797                           ;mcp2515.c: 260: receive(0);
  3798  0E7C  3000               	movlw	0
  3799  0E7D  318F  274B         	fcall	_receive
  3800                           
  3801                           ;mcp2515.c: 261: } else if ((status & 0b00000010) > 0) {
  3802  0E7F  0008               	return
  3803  0E80                     l338:	
  3804  0E80  1CE6               	btfss	can_status_check@status,1
  3805  0E81  2E90               	goto	l341
  3806                           
  3807                           ;mcp2515.c: 262: if (mode.debug) printf("RX1IF is on\n");
  3808  0E82  0869               	movf	_mode,w
  3809  0E83  1903               	btfsc	3,2
  3810  0E84  2E8C               	goto	l342
  3811  0E85  306E               	movlw	low (STR_38| (0+32768))
  3812  0E86  00A5               	movwf	printf@f
  3813  0E87  3093               	movlw	high (STR_38| (0+32768))
  3814  0E88  00A6               	movwf	printf@f+1
  3815  0E89  3185  25B0  318E   	fcall	_printf
  3816  0E8C                     l342:	
  3817                           
  3818                           ;mcp2515.c: 263: receive(1);
  3819  0E8C  3001               	movlw	1
  3820  0E8D  318F  274B         	fcall	_receive
  3821                           
  3822                           ;mcp2515.c: 264: } else if ((status & 0b00001000) > 0) {
  3823  0E8F  0008               	return
  3824  0E90                     l341:	
  3825  0E90  1DE6               	btfss	can_status_check@status,3
  3826  0E91  2E96               	goto	l344
  3827                           
  3828                           ;mcp2515.c: 265: txf_clear(0);
  3829  0E92  3000               	movlw	0
  3830  0E93  318D  2527         	fcall	_txf_clear
  3831                           
  3832                           ;mcp2515.c: 266: } else if ((status & 0b00100000) > 0) {
  3833  0E95  0008               	return
  3834  0E96                     l344:	
  3835  0E96  1EE6               	btfss	can_status_check@status,5
  3836  0E97  2E9C               	goto	l346
  3837                           
  3838                           ;mcp2515.c: 267: txf_clear(1);
  3839  0E98  3001               	movlw	1
  3840  0E99  318D  2527         	fcall	_txf_clear
  3841                           
  3842                           ;mcp2515.c: 268: } else if ((status & 0b10000000) > 0) {
  3843  0E9B  0008               	return
  3844  0E9C                     l346:	
  3845  0E9C  1FE6               	btfss	can_status_check@status,7
  3846  0E9D  0008               	return
  3847                           
  3848                           ;mcp2515.c: 269: txf_clear(2);
  3849  0E9E  3002               	movlw	2
  3850  0E9F  318D  2527         	fcall	_txf_clear
  3851  0EA1  0008               	return
  3852  0EA2                     __end_of_can_status_check:	
  3853                           ;mcp2515.c: 270: }
  3854                           ;mcp2515.c: 271: return;
  3855                           
  3856                           
  3857                           	psect	text2
  3858  0D27                     __ptext2:	
  3859 ;; *************** function _txf_clear *****************
  3860 ;; Defined at:
  3861 ;;		line 128 in file "mcp2515.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  n               1    wreg     unsigned char 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  n               1    2[BANK0 ] unsigned char 
  3866 ;;  can_int_flag    4    5[BANK0 ] unsigned char [4]
  3867 ;;  bytes_writte    1    4[BANK0 ] unsigned char 
  3868 ;;  mask            1    3[BANK0 ] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      unsigned char 
  3871 ;; Registers used:
  3872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;Total ram usage:        9 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    3
  3885 ;; This function calls:
  3886 ;;		_SPI_exchange
  3887 ;; This function is called by:
  3888 ;;		_can_status_check
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _txf_clear
  3894  0D27                     _txf_clear:	
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3898                           ;txf_clear@n stored from wreg
  3899  0D27  0020               	movlb	0	; select bank0
  3900  0D28  00A2               	movwf	txf_clear@n
  3901                           
  3902                           ;mcp2515.c: 129: uint8_t mask = 0b00000001 << (n + 2);
  3903  0D29  3001               	movlw	1
  3904  0D2A  00A0               	movwf	??_txf_clear
  3905  0D2B  0822               	movf	txf_clear@n,w
  3906  0D2C  3E02               	addlw	2
  3907  0D2D  0A89               	incf	9,f
  3908  0D2E  2D30               	goto	u1894
  3909  0D2F                     u1895:	
  3910  0D2F  35A0               	lslf	??_txf_clear,f
  3911  0D30                     u1894:	
  3912  0D30  0B89               	decfsz	9,f
  3913  0D31  2D2F               	goto	u1895
  3914  0D32  0820               	movf	??_txf_clear,w
  3915  0D33  00A1               	movwf	??_txf_clear+1
  3916  0D34  0821               	movf	??_txf_clear+1,w
  3917  0D35  00A3               	movwf	txf_clear@mask
  3918                           
  3919                           ;mcp2515.c: 130: uint8_t can_int_flag[4];
  3920                           ;mcp2515.c: 131: can_int_flag[0] =0b00000101;
  3921  0D36  3005               	movlw	5
  3922  0D37  00A0               	movwf	??_txf_clear
  3923  0D38  0820               	movf	??_txf_clear,w
  3924  0D39  00A5               	movwf	txf_clear@can_int_flag
  3925                           
  3926                           ;mcp2515.c: 132: can_int_flag[1] = 0x2c;
  3927  0D3A  302C               	movlw	44
  3928  0D3B  00A0               	movwf	??_txf_clear
  3929  0D3C  0820               	movf	??_txf_clear,w
  3930  0D3D  00A6               	movwf	txf_clear@can_int_flag+1
  3931                           
  3932                           ;mcp2515.c: 133: can_int_flag[2] = mask;
  3933  0D3E  0823               	movf	txf_clear@mask,w
  3934  0D3F  00A0               	movwf	??_txf_clear
  3935  0D40  0820               	movf	??_txf_clear,w
  3936  0D41  00A7               	movwf	txf_clear@can_int_flag+2
  3937                           
  3938                           ;mcp2515.c: 134: can_int_flag[3] = 0x00;
  3939  0D42  01A8               	clrf	txf_clear@can_int_flag+3
  3940                           
  3941                           ;mcp2515.c: 135: uint8_t bytes_written = SPI_exchange(can_int_flag, 4);
  3942  0D43  3004               	movlw	4
  3943  0D44  00A0               	movwf	??_txf_clear
  3944  0D45  0820               	movf	??_txf_clear,w
  3945  0D46  00F8               	movwf	SPI_exchange@len
  3946  0D47  3025               	movlw	(low (txf_clear@can_int_flag| 0))& (0+255)
  3947  0D48  318C  24CB         	fcall	_SPI_exchange
  3948  0D4A  0020               	movlb	0	; select bank0
  3949  0D4B  00A1               	movwf	??_txf_clear+1
  3950  0D4C  0821               	movf	??_txf_clear+1,w
  3951  0D4D  00A4               	movwf	txf_clear@bytes_written
  3952                           
  3953                           ;mcp2515.c: 139: return 0;
  3954                           ;	Return value of _txf_clear is never used
  3955                           
  3956                           ;mcp2515.c: 138: } else {
  3957                           
  3958                           ;mcp2515.c: 137: return 1;
  3959                           ;	Return value of _txf_clear is never used
  3960  0D4E  0008               	return
  3961  0D4F                     __end_of_txf_clear:	
  3962                           
  3963                           	psect	text3
  3964  0F4B                     __ptext3:	
  3965 ;; *************** function _receive *****************
  3966 ;; Defined at:
  3967 ;;		line 146 in file "mcp2515.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  n               1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  n               1   64[BANK0 ] unsigned char 
  3972 ;;  rx_buf         15   45[BANK0 ] unsigned char [15]
  3973 ;;  sid             2   61[BANK0 ] unsigned int 
  3974 ;;  dlc             1   63[BANK0 ] unsigned char 
  3975 ;;  pbuf            1   60[BANK0 ] PTR unsigned char 
  3976 ;;		 -> receive@rx_buf(15), 
  3977 ;;  bytes_read      1   44[BANK0 ] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3988 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3989 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;Total ram usage:       26 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    4
  3994 ;; This function calls:
  3995 ;;		Absolute function
  3996 ;;		_SPI_exchange
  3997 ;;		_printf
  3998 ;;		_receive_handler
  3999 ;; This function is called by:
  4000 ;;		_can_status_check
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _receive
  4006  0F4B                     _receive:	
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4010                           ;receive@n stored from wreg
  4011  0F4B  0020               	movlb	0	; select bank0
  4012  0F4C  00E0               	movwf	receive@n
  4013                           
  4014                           ;mcp2515.c: 150: uint8_t rx_buf[15];
  4015                           ;mcp2515.c: 153: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  4016  0F4D  0860               	movf	receive@n,w
  4017  0F4E  3EDA               	addlw	low (_nm| (0+32768))
  4018  0F4F  0084               	movwf	4
  4019  0F50  3093               	movlw	high (_nm| (0+32768))
  4020  0F51  1803               	skipnc
  4021  0F52  3E01               	addlw	1
  4022  0F53  0085               	movwf	5
  4023  0F54  0800               	movf	0,w	;code access
  4024  0F55  0709               	addwf	9,w
  4025  0F56  3E90               	addlw	144
  4026  0F57  00C7               	movwf	??_receive
  4027  0F58  0847               	movf	??_receive,w
  4028  0F59  00CD               	movwf	receive@rx_buf
  4029                           
  4030                           ;mcp2515.c: 154: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4031  0F5A  300E               	movlw	14
  4032  0F5B  00C7               	movwf	??_receive
  4033  0F5C  0847               	movf	??_receive,w
  4034  0F5D  00F8               	movwf	SPI_exchange@len
  4035  0F5E  304D               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4036  0F5F  318C  24CB  318F   	fcall	_SPI_exchange
  4037  0F62  0020               	movlb	0	; select bank0
  4038  0F63  00C8               	movwf	??_receive+1
  4039  0F64  0848               	movf	??_receive+1,w
  4040  0F65  00CC               	movwf	receive@bytes_read
  4041                           
  4042                           ;mcp2515.c: 155: uint8_t dlc = rx_buf[5];
  4043  0F66  0852               	movf	receive@rx_buf+5,w
  4044  0F67  00C7               	movwf	??_receive
  4045  0F68  0847               	movf	??_receive,w
  4046  0F69  00DF               	movwf	receive@dlc
  4047                           
  4048                           ;mcp2515.c: 156: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4049  0F6A  084F               	movf	receive@rx_buf+2,w
  4050  0F6B  00C7               	movwf	??_receive
  4051  0F6C  3005               	movlw	5
  4052  0F6D                     u1905:	
  4053  0F6D  36C7               	lsrf	??_receive,f
  4054  0F6E  0B89               	decfsz	9,f
  4055  0F6F  2F6D               	goto	u1905
  4056  0F70  0847               	movf	??_receive,w
  4057  0F71  00C8               	movwf	??_receive+1
  4058  0F72  01C9               	clrf	??_receive+2
  4059  0F73  084E               	movf	receive@rx_buf+1,w
  4060  0F74  00CA               	movwf	??_receive+3
  4061  0F75  01CB               	clrf	??_receive+4
  4062  0F76  35CA               	lslf	??_receive+3,f
  4063  0F77  0DCB               	rlf	??_receive+4,f
  4064  0F78  35CA               	lslf	??_receive+3,f
  4065  0F79  0DCB               	rlf	??_receive+4,f
  4066  0F7A  35CA               	lslf	??_receive+3,f
  4067  0F7B  0DCB               	rlf	??_receive+4,f
  4068  0F7C  0848               	movf	??_receive+1,w
  4069  0F7D  074A               	addwf	??_receive+3,w
  4070  0F7E  00DD               	movwf	receive@sid
  4071  0F7F  0849               	movf	??_receive+2,w
  4072  0F80  3D4B               	addwfc	??_receive+4,w
  4073  0F81  00DE               	movwf	receive@sid+1
  4074                           
  4075                           ;mcp2515.c: 157: sid = sid & 0b0000011111111111;
  4076  0F82  30FF               	movlw	255
  4077  0F83  055D               	andwf	receive@sid,w
  4078  0F84  00DD               	movwf	receive@sid
  4079  0F85  3007               	movlw	7
  4080  0F86  055E               	andwf	receive@sid+1,w
  4081  0F87  00DE               	movwf	receive@sid+1
  4082                           
  4083                           ;mcp2515.c: 158: rx_buf[6+dlc] = '\0';
  4084  0F88  085F               	movf	receive@dlc,w
  4085  0F89  3E06               	addlw	6
  4086  0F8A  3E4D               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4087  0F8B  0086               	movwf	6
  4088  0F8C  0187               	clrf	7
  4089  0F8D  0181               	clrf	1
  4090                           
  4091                           ;mcp2515.c: 160: if (mode.debug) {
  4092  0F8E  0869               	movf	_mode,w
  4093  0F8F  1903               	btfsc	3,2
  4094  0F90  2FE8               	goto	l2169
  4095                           
  4096                           ;mcp2515.c: 161: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4097  0F91  3072               	movlw	low (STR_26| (0+32768))
  4098  0F92  00A5               	movwf	printf@f
  4099  0F93  3092               	movlw	high (STR_26| (0+32768))
  4100  0F94  00A6               	movwf	printf@f+1
  4101  0F95  0860               	movf	receive@n,w
  4102  0F96  00C7               	movwf	??_receive
  4103  0F97  01C8               	clrf	??_receive+1
  4104  0F98  0847               	movf	??_receive,w
  4105  0F99  00A7               	movwf	?_printf+2
  4106  0F9A  0848               	movf	??_receive+1,w
  4107  0F9B  00A8               	movwf	?_printf+3
  4108  0F9C  084E               	movf	receive@rx_buf+1,w
  4109  0F9D  00C9               	movwf	??_receive+2
  4110  0F9E  01CA               	clrf	??_receive+3
  4111  0F9F  0849               	movf	??_receive+2,w
  4112  0FA0  00A9               	movwf	?_printf+4
  4113  0FA1  084A               	movf	??_receive+3,w
  4114  0FA2  00AA               	movwf	?_printf+5
  4115  0FA3  3185  25B0  318F   	fcall	_printf
  4116                           
  4117                           ;mcp2515.c: 162: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4118  0FA6  30B6               	movlw	low (STR_27| (0+32768))
  4119  0FA7  0020               	movlb	0	; select bank0
  4120  0FA8  00A5               	movwf	printf@f
  4121  0FA9  3092               	movlw	high (STR_27| (0+32768))
  4122  0FAA  00A6               	movwf	printf@f+1
  4123  0FAB  0860               	movf	receive@n,w
  4124  0FAC  00C7               	movwf	??_receive
  4125  0FAD  01C8               	clrf	??_receive+1
  4126  0FAE  0847               	movf	??_receive,w
  4127  0FAF  00A7               	movwf	?_printf+2
  4128  0FB0  0848               	movf	??_receive+1,w
  4129  0FB1  00A8               	movwf	?_printf+3
  4130  0FB2  084F               	movf	receive@rx_buf+2,w
  4131  0FB3  00C9               	movwf	??_receive+2
  4132  0FB4  01CA               	clrf	??_receive+3
  4133  0FB5  0849               	movf	??_receive+2,w
  4134  0FB6  00A9               	movwf	?_printf+4
  4135  0FB7  084A               	movf	??_receive+3,w
  4136  0FB8  00AA               	movwf	?_printf+5
  4137  0FB9  3185  25B0  318F   	fcall	_printf
  4138                           
  4139                           ;mcp2515.c: 163: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4140  0FBC  30FA               	movlw	low (STR_28| (0+32768))
  4141  0FBD  0020               	movlb	0	; select bank0
  4142  0FBE  00A5               	movwf	printf@f
  4143  0FBF  3092               	movlw	high (STR_28| (0+32768))
  4144  0FC0  00A6               	movwf	printf@f+1
  4145  0FC1  0860               	movf	receive@n,w
  4146  0FC2  00C7               	movwf	??_receive
  4147  0FC3  01C8               	clrf	??_receive+1
  4148  0FC4  0847               	movf	??_receive,w
  4149  0FC5  00A7               	movwf	?_printf+2
  4150  0FC6  0848               	movf	??_receive+1,w
  4151  0FC7  00A8               	movwf	?_printf+3
  4152  0FC8  0852               	movf	receive@rx_buf+5,w
  4153  0FC9  00C9               	movwf	??_receive+2
  4154  0FCA  01CA               	clrf	??_receive+3
  4155  0FCB  0849               	movf	??_receive+2,w
  4156  0FCC  00A9               	movwf	?_printf+4
  4157  0FCD  084A               	movf	??_receive+3,w
  4158  0FCE  00AA               	movwf	?_printf+5
  4159  0FCF  3185  25B0  318F   	fcall	_printf
  4160                           
  4161                           ;mcp2515.c: 164: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4162  0FD2  300A               	movlw	low (STR_29| (0+32768))
  4163  0FD3  0020               	movlb	0	; select bank0
  4164  0FD4  00A5               	movwf	printf@f
  4165  0FD5  3093               	movlw	high (STR_29| (0+32768))
  4166  0FD6  00A6               	movwf	printf@f+1
  4167  0FD7  0860               	movf	receive@n,w
  4168  0FD8  00C7               	movwf	??_receive
  4169  0FD9  01C8               	clrf	??_receive+1
  4170  0FDA  0847               	movf	??_receive,w
  4171  0FDB  00A7               	movwf	?_printf+2
  4172  0FDC  0848               	movf	??_receive+1,w
  4173  0FDD  00A8               	movwf	?_printf+3
  4174  0FDE  0853               	movf	receive@rx_buf+6,w
  4175  0FDF  00C9               	movwf	??_receive+2
  4176  0FE0  01CA               	clrf	??_receive+3
  4177  0FE1  0849               	movf	??_receive+2,w
  4178  0FE2  00A9               	movwf	?_printf+4
  4179  0FE3  084A               	movf	??_receive+3,w
  4180  0FE4  00AA               	movwf	?_printf+5
  4181  0FE5  3185  25B0  318F   	fcall	_printf
  4182  0FE8                     l2169:	
  4183                           
  4184                           ;mcp2515.c: 165: }
  4185                           ;mcp2515.c: 168: uint8_t *pbuf = &rx_buf[6];
  4186  0FE8  3053               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4187  0FE9  0020               	movlb	0	; select bank0
  4188  0FEA  00C7               	movwf	??_receive
  4189  0FEB  0847               	movf	??_receive,w
  4190  0FEC  00DC               	movwf	receive@pbuf
  4191                           
  4192                           ;mcp2515.c: 169: handler(sid, pbuf, dlc);
  4193  0FED  085D               	movf	receive@sid,w
  4194  0FEE  00C7               	movwf	??_receive
  4195  0FEF  0847               	movf	??_receive,w
  4196  0FF0  00C0               	movwf	receive_handler@sid
  4197  0FF1  085C               	movf	receive@pbuf,w
  4198  0FF2  00C8               	movwf	??_receive+1
  4199  0FF3  0848               	movf	??_receive+1,w
  4200  0FF4  00C1               	movwf	receive_handler@pbuf
  4201  0FF5  085F               	movf	receive@dlc,w
  4202  0FF6  00C9               	movwf	??_receive+2
  4203  0FF7  0849               	movf	??_receive+2,w
  4204  0FF8  00C2               	movwf	receive_handler@dlc
  4205  0FF9  0021               	movlb	1	; select bank1
  4206  0FFA  083D               	movf	(_handler+1)^(0+128),w
  4207  0FFB  008A               	movwf	10
  4208  0FFC  083C               	movf	_handler^(0+128),w
  4209  0FFD  000A               	callw
  4210  0FFE  318F               	pagesel	$
  4211  0FFF  0008               	return
  4212  1000                     __end_of_receive:	
  4213                           
  4214                           	psect	text4
  4215  0EF0                     __ptext4:	
  4216 ;; *************** function _receive_handler *****************
  4217 ;; Defined at:
  4218 ;;		line 24 in file "main.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  sid             1   32[BANK0 ] unsigned char 
  4221 ;;  pbuf            1   33[BANK0 ] PTR unsigned char 
  4222 ;;		 -> receive@rx_buf(15), 
  4223 ;;  dlc             1   34[BANK0 ] unsigned char 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  i               1   38[BANK0 ] unsigned char 
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4235 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;Total ram usage:        7 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    3
  4242 ;; This function calls:
  4243 ;;		_printf
  4244 ;; This function is called by:
  4245 ;;		_main
  4246 ;;		_receive
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           
  4251                           ;psect for function _receive_handler
  4252  0EF0                     _receive_handler:	
  4253                           
  4254                           ;main.c: 25: uint8_t i;
  4255                           ;main.c: 26: if (output_format.with_sid) {
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4259  0EF0  0020               	movlb	0	; select bank0
  4260  0EF1  086D               	movf	_output_format,w
  4261  0EF2  1903               	btfsc	3,2
  4262  0EF3  2F06               	goto	l2049
  4263                           
  4264                           ;main.c: 27: printf("%d,%s\n", sid, pbuf);
  4265  0EF4  30B8               	movlw	low (STR_1| (0+32768))
  4266  0EF5  00A5               	movwf	printf@f
  4267  0EF6  3093               	movlw	high (STR_1| (0+32768))
  4268  0EF7  00A6               	movwf	printf@f+1
  4269  0EF8  0840               	movf	receive_handler@sid,w
  4270  0EF9  00C3               	movwf	??_receive_handler
  4271  0EFA  01C4               	clrf	??_receive_handler+1
  4272  0EFB  0843               	movf	??_receive_handler,w
  4273  0EFC  00A7               	movwf	?_printf+2
  4274  0EFD  0844               	movf	??_receive_handler+1,w
  4275  0EFE  00A8               	movwf	?_printf+3
  4276  0EFF  0841               	movf	receive_handler@pbuf,w
  4277  0F00  00C5               	movwf	??_receive_handler+2
  4278  0F01  0845               	movf	??_receive_handler+2,w
  4279  0F02  00A9               	movwf	low ((?_printf| 0+4))
  4280  0F03  3185  25B0         	fcall	_printf
  4281                           
  4282                           ;main.c: 28: } else if (output_format.hex_output) {
  4283  0F05  0008               	return
  4284  0F06                     l2049:	
  4285  0F06  0020               	movlb	0	; select bank0
  4286  0F07  086E               	movf	_output_format+1,w
  4287  0F08  1903               	btfsc	3,2
  4288  0F09  2F3F               	goto	l2063
  4289                           
  4290                           ;main.c: 29: printf("%02x:", sid);
  4291  0F0A  30C5               	movlw	low (STR_2| (0+32768))
  4292  0F0B  00A5               	movwf	printf@f
  4293  0F0C  3093               	movlw	high (STR_2| (0+32768))
  4294  0F0D  00A6               	movwf	printf@f+1
  4295  0F0E  0840               	movf	receive_handler@sid,w
  4296  0F0F  00C3               	movwf	??_receive_handler
  4297  0F10  01C4               	clrf	??_receive_handler+1
  4298  0F11  0843               	movf	??_receive_handler,w
  4299  0F12  00A7               	movwf	?_printf+2
  4300  0F13  0844               	movf	??_receive_handler+1,w
  4301  0F14  00A8               	movwf	?_printf+3
  4302  0F15  3185  25B0  318E   	fcall	_printf
  4303                           
  4304                           ;main.c: 30: for(i=0; i<dlc; i++) {
  4305  0F18  0020               	movlb	0	; select bank0
  4306  0F19  01C6               	clrf	receive_handler@i
  4307  0F1A                     l2059:	
  4308  0F1A  0842               	movf	receive_handler@dlc,w
  4309  0F1B  0246               	subwf	receive_handler@i,w
  4310  0F1C  1803               	btfsc	3,0
  4311  0F1D  2F38               	goto	l2061
  4312                           
  4313                           ;main.c: 31: printf(" %02x", pbuf[i]);
  4314  0F1E  30CB               	movlw	low (STR_3| (0+32768))
  4315  0F1F  00A5               	movwf	printf@f
  4316  0F20  3093               	movlw	high (STR_3| (0+32768))
  4317  0F21  00A6               	movwf	printf@f+1
  4318  0F22  0846               	movf	receive_handler@i,w
  4319  0F23  0741               	addwf	receive_handler@pbuf,w
  4320  0F24  00C3               	movwf	??_receive_handler
  4321  0F25  0843               	movf	??_receive_handler,w
  4322  0F26  0086               	movwf	6
  4323  0F27  0187               	clrf	7
  4324  0F28  0801               	movf	1,w
  4325  0F29  00C4               	movwf	??_receive_handler+1
  4326  0F2A  01C5               	clrf	??_receive_handler+2
  4327  0F2B  0844               	movf	??_receive_handler+1,w
  4328  0F2C  00A7               	movwf	?_printf+2
  4329  0F2D  0845               	movf	??_receive_handler+2,w
  4330  0F2E  00A8               	movwf	?_printf+3
  4331  0F2F  3185  25B0  318E   	fcall	_printf
  4332  0F32  3001               	movlw	1
  4333  0F33  0020               	movlb	0	; select bank0
  4334  0F34  00C3               	movwf	??_receive_handler
  4335  0F35  0843               	movf	??_receive_handler,w
  4336  0F36  07C6               	addwf	receive_handler@i,f
  4337  0F37  2F1A               	goto	l2059
  4338  0F38                     l2061:	
  4339                           
  4340                           ;main.c: 32: }
  4341                           ;main.c: 33: printf("\n");
  4342  0F38  30F9               	movlw	low ((STR_7+21)| (0+32768))
  4343  0F39  00A5               	movwf	printf@f
  4344  0F3A  3091               	movlw	high ((STR_7+21)| (0+32768))
  4345  0F3B  00A6               	movwf	printf@f+1
  4346  0F3C  3185  25B0         	fcall	_printf
  4347                           
  4348                           ;main.c: 34: } else {
  4349  0F3E  0008               	return
  4350  0F3F                     l2063:	
  4351                           
  4352                           ;main.c: 35: printf("%s\n", pbuf);
  4353  0F3F  305D               	movlw	low ((STR_36+14)| (0+32768))
  4354  0F40  0020               	movlb	0	; select bank0
  4355  0F41  00A5               	movwf	printf@f
  4356  0F42  3092               	movlw	high ((STR_36+14)| (0+32768))
  4357  0F43  00A6               	movwf	printf@f+1
  4358  0F44  0841               	movf	receive_handler@pbuf,w
  4359  0F45  00C3               	movwf	??_receive_handler
  4360  0F46  0843               	movf	??_receive_handler,w
  4361  0F47  00A7               	movwf	low ((?_printf| 0+2))
  4362  0F48  3185  25B0         	fcall	_printf
  4363  0F4A  0008               	return
  4364  0F4B                     __end_of_receive_handler:	
  4365                           
  4366                           	psect	text5
  4367  0092                     __ptext5:	
  4368 ;; *************** function _can_set_mask *****************
  4369 ;; Defined at:
  4370 ;;		line 87 in file "mcp2515.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  cmd             1    wreg     unsigned char 
  4373 ;;  n               1   39[BANK0 ] unsigned char 
  4374 ;;  mask            1   40[BANK0 ] unsigned char 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  cmd             1   53[BANK0 ] unsigned char 
  4377 ;;  mask_buf        4   54[BANK0 ] unsigned char [4]
  4378 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  4379 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4393 ;;Total ram usage:       19 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    4
  4396 ;; This function calls:
  4397 ;;		_SPI_exchange
  4398 ;;		_can_ope_mode
  4399 ;;		_printf
  4400 ;; This function is called by:
  4401 ;;		_main
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           
  4406                           ;psect for function _can_set_mask
  4407  0092                     _can_set_mask:	
  4408                           
  4409                           ;incstack = 0
  4410                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4411                           ;can_set_mask@cmd stored from wreg
  4412  0092  0020               	movlb	0	; select bank0
  4413  0093  00D5               	movwf	can_set_mask@cmd
  4414                           
  4415                           ;mcp2515.c: 88: uint8_t mask_buf[4];
  4416                           ;mcp2515.c: 90: can_ope_mode(0b10000000);
  4417  0094  3080               	movlw	128
  4418  0095  318E  260A  3180   	fcall	_can_ope_mode
  4419                           
  4420                           ;mcp2515.c: 91: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4421  0098  0020               	movlb	0	; select bank0
  4422  0099  0848               	movf	can_set_mask@mask,w
  4423  009A  00C9               	movwf	??_can_set_mask
  4424  009B  3003               	movlw	3
  4425  009C                     u2095:	
  4426  009C  36C9               	lsrf	??_can_set_mask,f
  4427  009D  0B89               	decfsz	9,f
  4428  009E  289C               	goto	u2095
  4429  009F  0849               	movf	??_can_set_mask,w
  4430  00A0  00CA               	movwf	??_can_set_mask+1
  4431  00A1  084A               	movf	??_can_set_mask+1,w
  4432  00A2  00D3               	movwf	can_set_mask@mask_sidh
  4433                           
  4434                           ;mcp2515.c: 92: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4435  00A3  0848               	movf	can_set_mask@mask,w
  4436  00A4  3907               	andlw	7
  4437  00A5  00C9               	movwf	??_can_set_mask
  4438  00A6  3004               	movlw	4
  4439  00A7                     u2105:	
  4440  00A7  35C9               	lslf	??_can_set_mask,f
  4441  00A8  3EFF               	addlw	-1
  4442  00A9  1D03               	skipz
  4443  00AA  28A7               	goto	u2105
  4444  00AB  3549               	lslf	??_can_set_mask,w
  4445  00AC  00CA               	movwf	??_can_set_mask+1
  4446  00AD  084A               	movf	??_can_set_mask+1,w
  4447  00AE  00D4               	movwf	can_set_mask@mask_sidl
  4448                           
  4449                           ;mcp2515.c: 93: if (mode.debug) {
  4450  00AF  0869               	movf	_mode,w
  4451  00B0  1903               	btfsc	3,2
  4452  00B1  28D7               	goto	l2309
  4453                           
  4454                           ;mcp2515.c: 94: if (cmd == 'm') {
  4455  00B2  306D               	movlw	109
  4456  00B3  0655               	xorwf	can_set_mask@cmd,w
  4457  00B4  1D03               	btfss	3,2
  4458  00B5  28BA               	goto	l2307
  4459                           
  4460                           ;mcp2515.c: 95: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4461  00B6  3011               	movlw	low (STR_20| (0+32768))
  4462  00B7  00A5               	movwf	printf@f
  4463  00B8  3092               	movlw	high (STR_20| (0+32768))
  4464  00B9  28BE               	goto	L6
  4465  00BA                     l2307:	
  4466                           ;mcp2515.c: 96: } else {
  4467                           
  4468                           
  4469                           ;mcp2515.c: 97: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4470  00BA  30CD               	movlw	low (STR_21| (0+32768))
  4471  00BB  0020               	movlb	0	; select bank0
  4472  00BC  00A5               	movwf	printf@f
  4473  00BD  3091               	movlw	high (STR_21| (0+32768))
  4474  00BE                     L6:	
  4475  00BE  00A6               	movwf	printf@f+1
  4476  00BF  0847               	movf	can_set_mask@n,w
  4477  00C0  00C9               	movwf	??_can_set_mask
  4478  00C1  01CA               	clrf	??_can_set_mask+1
  4479  00C2  0849               	movf	??_can_set_mask,w
  4480  00C3  00A7               	movwf	?_printf+2
  4481  00C4  084A               	movf	??_can_set_mask+1,w
  4482  00C5  00A8               	movwf	?_printf+3
  4483  00C6  0853               	movf	can_set_mask@mask_sidh,w
  4484  00C7  00CB               	movwf	??_can_set_mask+2
  4485  00C8  01CC               	clrf	??_can_set_mask+3
  4486  00C9  084B               	movf	??_can_set_mask+2,w
  4487  00CA  00A9               	movwf	?_printf+4
  4488  00CB  084C               	movf	??_can_set_mask+3,w
  4489  00CC  00AA               	movwf	?_printf+5
  4490  00CD  0854               	movf	can_set_mask@mask_sidl,w
  4491  00CE  00CD               	movwf	??_can_set_mask+4
  4492  00CF  01CE               	clrf	??_can_set_mask+5
  4493  00D0  084D               	movf	??_can_set_mask+4,w
  4494  00D1  00AB               	movwf	?_printf+6
  4495  00D2  084E               	movf	??_can_set_mask+5,w
  4496  00D3  00AC               	movwf	?_printf+7
  4497  00D4  3185  25B0  3180   	fcall	_printf
  4498  00D7                     l2309:	
  4499                           
  4500                           ;mcp2515.c: 98: }
  4501                           ;mcp2515.c: 99: }
  4502                           ;mcp2515.c: 100: mask_buf[0] = 0b00000010;
  4503  00D7  3002               	movlw	2
  4504  00D8  0020               	movlb	0	; select bank0
  4505  00D9  00C9               	movwf	??_can_set_mask
  4506  00DA  0849               	movf	??_can_set_mask,w
  4507  00DB  00D6               	movwf	can_set_mask@mask_buf
  4508                           
  4509                           ;mcp2515.c: 101: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  4510  00DC  306D               	movlw	109
  4511  00DD  0655               	xorwf	can_set_mask@cmd,w
  4512  00DE  1903               	btfsc	3,2
  4513  00DF  28E5               	goto	l2315
  4514  00E0  0847               	movf	can_set_mask@n,w
  4515  00E1  3EBF               	addlw	low (_rxfnsidh| (0+32768))
  4516  00E2  0084               	movwf	4
  4517  00E3  3093               	movlw	high (_rxfnsidh| (0+32768))
  4518  00E4  28E9               	goto	L4
  4519  00E5                     l2315:	
  4520  00E5  0847               	movf	can_set_mask@n,w
  4521  00E6  3EDC               	addlw	low (_rxmnsidh| (0+32768))
  4522  00E7  0084               	movwf	4
  4523  00E8  3093               	movlw	high (_rxmnsidh| (0+32768))
  4524  00E9                     L4:	
  4525  00E9  1803               	skipnc
  4526  00EA  3E01               	addlw	1
  4527  00EB  0085               	movwf	5
  4528  00EC  0800               	movf	0,w	;code access
  4529  00ED  00C9               	movwf	??_can_set_mask
  4530  00EE  01CA               	clrf	??_can_set_mask+1
  4531  00EF  0849               	movf	??_can_set_mask,w
  4532  00F0  00CF               	movwf	_can_set_mask$488
  4533  00F1  084A               	movf	??_can_set_mask+1,w
  4534  00F2  00D0               	movwf	_can_set_mask$488+1
  4535  00F3  084F               	movf	_can_set_mask$488,w
  4536  00F4  00C9               	movwf	??_can_set_mask
  4537  00F5  0849               	movf	??_can_set_mask,w
  4538  00F6  00D7               	movwf	can_set_mask@mask_buf+1
  4539                           
  4540                           ;mcp2515.c: 102: mask_buf[2] = mask_sidh;
  4541  00F7  0853               	movf	can_set_mask@mask_sidh,w
  4542  00F8  00C9               	movwf	??_can_set_mask
  4543  00F9  0849               	movf	??_can_set_mask,w
  4544  00FA  00D8               	movwf	can_set_mask@mask_buf+2
  4545                           
  4546                           ;mcp2515.c: 103: mask_buf[3] = mask_sidl;
  4547  00FB  0854               	movf	can_set_mask@mask_sidl,w
  4548  00FC  00C9               	movwf	??_can_set_mask
  4549  00FD  0849               	movf	??_can_set_mask,w
  4550  00FE  00D9               	movwf	can_set_mask@mask_buf+3
  4551                           
  4552                           ;mcp2515.c: 104: SPI_exchange(mask_buf, 4);
  4553  00FF  3004               	movlw	4
  4554  0100  00C9               	movwf	??_can_set_mask
  4555  0101  0849               	movf	??_can_set_mask,w
  4556  0102  00F8               	movwf	SPI_exchange@len
  4557  0103  3056               	movlw	(low (can_set_mask@mask_buf| 0))& (0+255)
  4558  0104  318C  24CB  3180   	fcall	_SPI_exchange
  4559                           
  4560                           ;mcp2515.c: 106: if (mode.debug) {
  4561  0107  0020               	movlb	0	; select bank0
  4562  0108  0869               	movf	_mode,w
  4563  0109  1903               	btfsc	3,2
  4564  010A  297F               	goto	l292
  4565                           
  4566                           ;mcp2515.c: 107: mask_buf[0] = 0b00000011;
  4567  010B  3003               	movlw	3
  4568  010C  00C9               	movwf	??_can_set_mask
  4569  010D  0849               	movf	??_can_set_mask,w
  4570  010E  00D6               	movwf	can_set_mask@mask_buf
  4571                           
  4572                           ;mcp2515.c: 108: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  4573  010F  306D               	movlw	109
  4574  0110  0655               	xorwf	can_set_mask@cmd,w
  4575  0111  1903               	btfsc	3,2
  4576  0112  2918               	goto	l2333
  4577  0113  0847               	movf	can_set_mask@n,w
  4578  0114  3EBF               	addlw	low (_rxfnsidh| (0+32768))
  4579  0115  0084               	movwf	4
  4580  0116  3093               	movlw	high (_rxfnsidh| (0+32768))
  4581  0117  291C               	goto	L5
  4582  0118                     l2333:	
  4583  0118  0847               	movf	can_set_mask@n,w
  4584  0119  3EDC               	addlw	low (_rxmnsidh| (0+32768))
  4585  011A  0084               	movwf	4
  4586  011B  3093               	movlw	high (_rxmnsidh| (0+32768))
  4587  011C                     L5:	
  4588  011C  1803               	skipnc
  4589  011D  3E01               	addlw	1
  4590  011E  0085               	movwf	5
  4591  011F  0800               	movf	0,w	;code access
  4592  0120  00C9               	movwf	??_can_set_mask
  4593  0121  01CA               	clrf	??_can_set_mask+1
  4594  0122  0849               	movf	??_can_set_mask,w
  4595  0123  00D1               	movwf	_can_set_mask$489
  4596  0124  084A               	movf	??_can_set_mask+1,w
  4597  0125  00D2               	movwf	_can_set_mask$489+1
  4598  0126  0851               	movf	_can_set_mask$489,w
  4599  0127  00C9               	movwf	??_can_set_mask
  4600  0128  0849               	movf	??_can_set_mask,w
  4601  0129  00D7               	movwf	can_set_mask@mask_buf+1
  4602                           
  4603                           ;mcp2515.c: 109: mask_buf[2] = 0x00;
  4604  012A  01D8               	clrf	can_set_mask@mask_buf+2
  4605                           
  4606                           ;mcp2515.c: 110: mask_buf[3] = 0x00;
  4607  012B  01D9               	clrf	can_set_mask@mask_buf+3
  4608                           
  4609                           ;mcp2515.c: 111: SPI_exchange(mask_buf, 4);
  4610  012C  3004               	movlw	4
  4611  012D  00C9               	movwf	??_can_set_mask
  4612  012E  0849               	movf	??_can_set_mask,w
  4613  012F  00F8               	movwf	SPI_exchange@len
  4614  0130  3056               	movlw	(low (can_set_mask@mask_buf| 0))& (0+255)
  4615  0131  318C  24CB  3180   	fcall	_SPI_exchange
  4616                           
  4617                           ;mcp2515.c: 112: if (cmd == 'm') {
  4618  0134  306D               	movlw	109
  4619  0135  0020               	movlb	0	; select bank0
  4620  0136  0655               	xorwf	can_set_mask@cmd,w
  4621  0137  1D03               	btfss	3,2
  4622  0138  2953               	goto	l2347
  4623                           
  4624                           ;mcp2515.c: 113: printf("RXM%dSIDH: %02x\n", n, mask_buf[2]);
  4625  0139  30A5               	movlw	low (STR_22| (0+32768))
  4626  013A  00A5               	movwf	printf@f
  4627  013B  3092               	movlw	high (STR_22| (0+32768))
  4628  013C  00A6               	movwf	printf@f+1
  4629  013D  0847               	movf	can_set_mask@n,w
  4630  013E  00C9               	movwf	??_can_set_mask
  4631  013F  01CA               	clrf	??_can_set_mask+1
  4632  0140  0849               	movf	??_can_set_mask,w
  4633  0141  00A7               	movwf	?_printf+2
  4634  0142  084A               	movf	??_can_set_mask+1,w
  4635  0143  00A8               	movwf	?_printf+3
  4636  0144  0858               	movf	can_set_mask@mask_buf+2,w
  4637  0145  00CB               	movwf	??_can_set_mask+2
  4638  0146  01CC               	clrf	??_can_set_mask+3
  4639  0147  084B               	movf	??_can_set_mask+2,w
  4640  0148  00A9               	movwf	?_printf+4
  4641  0149  084C               	movf	??_can_set_mask+3,w
  4642  014A  00AA               	movwf	?_printf+5
  4643  014B  3185  25B0  3180   	fcall	_printf
  4644                           
  4645                           ;mcp2515.c: 114: printf("RXM%dSIDL: %02x\n", n, mask_buf[3]);
  4646  014E  30E9               	movlw	low (STR_23| (0+32768))
  4647  014F  0020               	movlb	0	; select bank0
  4648  0150  00A5               	movwf	printf@f
  4649  0151  3092               	movlw	high (STR_23| (0+32768))
  4650  0152  296D               	goto	L7
  4651  0153                     l2347:	
  4652                           ;mcp2515.c: 115: } else {
  4653                           
  4654                           
  4655                           ;mcp2515.c: 116: printf("RXF%dSIDH: %02x\n", n, mask_buf[2]);
  4656  0153  3094               	movlw	low (STR_24| (0+32768))
  4657  0154  0020               	movlb	0	; select bank0
  4658  0155  00A5               	movwf	printf@f
  4659  0156  3092               	movlw	high (STR_24| (0+32768))
  4660  0157  00A6               	movwf	printf@f+1
  4661  0158  0847               	movf	can_set_mask@n,w
  4662  0159  00C9               	movwf	??_can_set_mask
  4663  015A  01CA               	clrf	??_can_set_mask+1
  4664  015B  0849               	movf	??_can_set_mask,w
  4665  015C  00A7               	movwf	?_printf+2
  4666  015D  084A               	movf	??_can_set_mask+1,w
  4667  015E  00A8               	movwf	?_printf+3
  4668  015F  0858               	movf	can_set_mask@mask_buf+2,w
  4669  0160  00CB               	movwf	??_can_set_mask+2
  4670  0161  01CC               	clrf	??_can_set_mask+3
  4671  0162  084B               	movf	??_can_set_mask+2,w
  4672  0163  00A9               	movwf	?_printf+4
  4673  0164  084C               	movf	??_can_set_mask+3,w
  4674  0165  00AA               	movwf	?_printf+5
  4675  0166  3185  25B0  3180   	fcall	_printf
  4676                           
  4677                           ;mcp2515.c: 117: printf("RXF%dSIDL: %02x\n", n, mask_buf[3]);
  4678  0169  30D8               	movlw	low (STR_25| (0+32768))
  4679  016A  0020               	movlb	0	; select bank0
  4680  016B  00A5               	movwf	printf@f
  4681  016C  3092               	movlw	high (STR_25| (0+32768))
  4682  016D                     L7:	
  4683  016D  00A6               	movwf	printf@f+1
  4684  016E  0847               	movf	can_set_mask@n,w
  4685  016F  00C9               	movwf	??_can_set_mask
  4686  0170  01CA               	clrf	??_can_set_mask+1
  4687  0171  0849               	movf	??_can_set_mask,w
  4688  0172  00A7               	movwf	?_printf+2
  4689  0173  084A               	movf	??_can_set_mask+1,w
  4690  0174  00A8               	movwf	?_printf+3
  4691  0175  0859               	movf	can_set_mask@mask_buf+3,w
  4692  0176  00CB               	movwf	??_can_set_mask+2
  4693  0177  01CC               	clrf	??_can_set_mask+3
  4694  0178  084B               	movf	??_can_set_mask+2,w
  4695  0179  00A9               	movwf	?_printf+4
  4696  017A  084C               	movf	??_can_set_mask+3,w
  4697  017B  00AA               	movwf	?_printf+5
  4698  017C  3185  25B0  3180   	fcall	_printf
  4699  017F                     l292:	
  4700                           
  4701                           ;mcp2515.c: 118: }
  4702                           ;mcp2515.c: 119: }
  4703                           ;mcp2515.c: 121: can_ope_mode(operation_mode);
  4704  017F  0020               	movlb	0	; select bank0
  4705  0180  086F               	movf	_operation_mode,w
  4706  0181  318E  260A         	fcall	_can_ope_mode
  4707  0183  0008               	return
  4708  0184                     __end_of_can_set_mask:	
  4709                           
  4710                           	psect	text6
  4711  0184                     __ptext6:	
  4712 ;; *************** function _can_send *****************
  4713 ;; Defined at:
  4714 ;;		line 175 in file "mcp2515.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  buf             1    wreg     PTR unsigned char 
  4717 ;;		 -> main@buf(9), 
  4718 ;;  dlc             1   32[BANK0 ] unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  buf             1   54[BANK0 ] PTR unsigned char 
  4721 ;;		 -> main@buf(9), 
  4722 ;;  txb_ctrl_buf    1   56[BANK0 ] unsigned char [1]
  4723 ;;  tx_buf         14   37[BANK0 ] unsigned char [14]
  4724 ;;  debug_buf       3   58[BANK0 ] unsigned char [3]
  4725 ;;  can_status_b    2   51[BANK0 ] unsigned char [2]
  4726 ;;  n               1   62[BANK0 ] unsigned char 
  4727 ;;  i               1   61[BANK0 ] unsigned char 
  4728 ;;  status          1   57[BANK0 ] unsigned char 
  4729 ;;  bytes_writte    1   55[BANK0 ] unsigned char 
  4730 ;;  len             1   53[BANK0 ] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4740 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;Total ram usage:       31 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    3
  4747 ;; This function calls:
  4748 ;;		_SPI_exchange
  4749 ;;		_printf
  4750 ;; This function is called by:
  4751 ;;		_main
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           
  4756                           ;psect for function _can_send
  4757  0184                     _can_send:	
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4761                           ;can_send@buf stored from wreg
  4762  0184  0020               	movlb	0	; select bank0
  4763  0185  00D6               	movwf	can_send@buf
  4764                           
  4765                           ;mcp2515.c: 176: uint8_t i;
  4766                           ;mcp2515.c: 177: uint8_t n = 0;
  4767  0186  01DE               	clrf	can_send@n
  4768                           
  4769                           ;mcp2515.c: 179: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  4770  0187  0021               	movlb	1	; select bank1
  4771  0188  083B               	movf	(can_send@F2837+1)^(0+128),w
  4772  0189  0020               	movlb	0	; select bank0
  4773  018A  00D4               	movwf	can_send@can_status_buf+1
  4774  018B  0021               	movlb	1	; select bank1
  4775  018C  083A               	movf	can_send@F2837^(0+128),w
  4776  018D  0020               	movlb	0	; select bank0
  4777  018E  00D3               	movwf	can_send@can_status_buf
  4778                           
  4779                           ;mcp2515.c: 180: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  4780  018F  3002               	movlw	2
  4781  0190  00C1               	movwf	??_can_send
  4782  0191  0841               	movf	??_can_send,w
  4783  0192  00F8               	movwf	SPI_exchange@len
  4784  0193  3053               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  4785  0194  318C  24CB  3181   	fcall	_SPI_exchange
  4786  0197  0020               	movlb	0	; select bank0
  4787  0198  00C2               	movwf	??_can_send+1
  4788  0199  0842               	movf	??_can_send+1,w
  4789  019A  00D7               	movwf	can_send@bytes_written
  4790                           
  4791                           ;mcp2515.c: 181: uint8_t status = can_status_buf[1];
  4792  019B  0854               	movf	can_send@can_status_buf+1,w
  4793  019C  00C1               	movwf	??_can_send
  4794  019D  0841               	movf	??_can_send,w
  4795  019E  00D9               	movwf	can_send@status
  4796                           
  4797                           ;mcp2515.c: 182: if ((status & 0b00000100) == 0) {
  4798  019F  1959               	btfsc	can_send@status,2
  4799  01A0  29AE               	goto	l313
  4800                           
  4801                           ;mcp2515.c: 183: if (mode.debug) printf("TXB0 is idle\n");
  4802  01A1  0869               	movf	_mode,w
  4803  01A2  1903               	btfsc	3,2
  4804  01A3  29AB               	goto	l2391
  4805  01A4  3037               	movlw	low (STR_30| (0+32768))
  4806  01A5  00A5               	movwf	printf@f
  4807  01A6  3093               	movlw	high (STR_30| (0+32768))
  4808  01A7  00A6               	movwf	printf@f+1
  4809  01A8  3185  25B0  3181   	fcall	_printf
  4810  01AB                     l2391:	
  4811                           
  4812                           ;mcp2515.c: 184: n = 0;
  4813  01AB  0020               	movlb	0	; select bank0
  4814  01AC  01DE               	clrf	can_send@n
  4815                           
  4816                           ;mcp2515.c: 185: } else if ((status & 0b00010000) == 0) {
  4817  01AD  29CF               	goto	l2405
  4818  01AE                     l313:	
  4819  01AE  1A59               	btfsc	can_send@status,4
  4820  01AF  29BE               	goto	l316
  4821                           
  4822                           ;mcp2515.c: 186: if (mode.debug) printf("TXB1 is idle\n");
  4823  01B0  0869               	movf	_mode,w
  4824  01B1  1903               	btfsc	3,2
  4825  01B2  29BA               	goto	l2397
  4826  01B3  3045               	movlw	low (STR_31| (0+32768))
  4827  01B4  00A5               	movwf	printf@f
  4828  01B5  3093               	movlw	high (STR_31| (0+32768))
  4829  01B6  00A6               	movwf	printf@f+1
  4830  01B7  3185  25B0  3181   	fcall	_printf
  4831  01BA                     l2397:	
  4832                           
  4833                           ;mcp2515.c: 187: n = 1;
  4834  01BA  0020               	movlb	0	; select bank0
  4835  01BB  01DE               	clrf	can_send@n
  4836  01BC  0ADE               	incf	can_send@n,f
  4837                           
  4838                           ;mcp2515.c: 188: } else if ((status & 0b01000000) > 0) {
  4839  01BD  29CF               	goto	l2405
  4840  01BE                     l316:	
  4841  01BE  1F59               	btfss	can_send@status,6
  4842  01BF  29CF               	goto	l2405
  4843                           
  4844                           ;mcp2515.c: 189: if (mode.debug) printf("TXB2 is idle\n");
  4845  01C0  0869               	movf	_mode,w
  4846  01C1  1903               	btfsc	3,2
  4847  01C2  29CA               	goto	l2403
  4848  01C3  3053               	movlw	low (STR_32| (0+32768))
  4849  01C4  00A5               	movwf	printf@f
  4850  01C5  3093               	movlw	high (STR_32| (0+32768))
  4851  01C6  00A6               	movwf	printf@f+1
  4852  01C7  3185  25B0  3181   	fcall	_printf
  4853  01CA                     l2403:	
  4854                           
  4855                           ;mcp2515.c: 190: n = 2;
  4856  01CA  3002               	movlw	2
  4857  01CB  0020               	movlb	0	; select bank0
  4858  01CC  00C1               	movwf	??_can_send
  4859  01CD  0841               	movf	??_can_send,w
  4860  01CE  00DE               	movwf	can_send@n
  4861  01CF                     l2405:	
  4862                           
  4863                           ;mcp2515.c: 191: }
  4864                           ;mcp2515.c: 195: uint8_t tx_buf[14];
  4865                           ;mcp2515.c: 198: tx_buf[0] = 0b01000000 + abc[n];
  4866  01CF  085E               	movf	can_send@n,w
  4867  01D0  3ED4               	addlw	low (_abc| (0+32768))
  4868  01D1  0084               	movwf	4
  4869  01D2  3093               	movlw	high (_abc| (0+32768))
  4870  01D3  1803               	skipnc
  4871  01D4  3E01               	addlw	1
  4872  01D5  0085               	movwf	5
  4873  01D6  0800               	movf	0,w	;code access
  4874  01D7  3E40               	addlw	64
  4875  01D8  00C1               	movwf	??_can_send
  4876  01D9  0841               	movf	??_can_send,w
  4877  01DA  00C5               	movwf	can_send@tx_buf
  4878                           
  4879                           ;mcp2515.c: 200: tx_buf[1] = sid.sidh;
  4880  01DB  086B               	movf	_sid,w
  4881  01DC  00C1               	movwf	??_can_send
  4882  01DD  0841               	movf	??_can_send,w
  4883  01DE  00C6               	movwf	can_send@tx_buf+1
  4884                           
  4885                           ;mcp2515.c: 202: tx_buf[2] = sid.sidl;
  4886  01DF  086C               	movf	_sid+1,w
  4887  01E0  00C1               	movwf	??_can_send
  4888  01E1  0841               	movf	??_can_send,w
  4889  01E2  00C7               	movwf	can_send@tx_buf+2
  4890                           
  4891                           ;mcp2515.c: 204: tx_buf[3] = 0;
  4892  01E3  01C8               	clrf	can_send@tx_buf+3
  4893                           
  4894                           ;mcp2515.c: 206: tx_buf[4] = 0;
  4895  01E4  01C9               	clrf	can_send@tx_buf+4
  4896                           
  4897                           ;mcp2515.c: 208: tx_buf[5] = dlc;
  4898  01E5  0840               	movf	can_send@dlc,w
  4899  01E6  00C1               	movwf	??_can_send
  4900  01E7  0841               	movf	??_can_send,w
  4901  01E8  00CA               	movwf	can_send@tx_buf+5
  4902                           
  4903                           ;mcp2515.c: 211: for(i=0; i<dlc; i++) {
  4904  01E9  01DD               	clrf	can_send@i
  4905  01EA                     l2427:	
  4906  01EA  0840               	movf	can_send@dlc,w
  4907  01EB  025D               	subwf	can_send@i,w
  4908  01EC  1803               	btfsc	3,0
  4909  01ED  2A19               	goto	l2429
  4910                           
  4911                           ;mcp2515.c: 212: tx_buf[6+i] = buf[i];
  4912  01EE  085D               	movf	can_send@i,w
  4913  01EF  0756               	addwf	can_send@buf,w
  4914  01F0  00C1               	movwf	??_can_send
  4915  01F1  0841               	movf	??_can_send,w
  4916  01F2  0086               	movwf	6
  4917  01F3  0187               	clrf	7
  4918  01F4  0801               	movf	1,w
  4919  01F5  00C2               	movwf	??_can_send+1
  4920  01F6  085D               	movf	can_send@i,w
  4921  01F7  3E06               	addlw	6
  4922  01F8  3E45               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4923  01F9  0086               	movwf	6
  4924  01FA  0187               	clrf	7
  4925  01FB  0842               	movf	??_can_send+1,w
  4926  01FC  0081               	movwf	1
  4927                           
  4928                           ;mcp2515.c: 213: if (mode.debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4929  01FD  0869               	movf	_mode,w
  4930  01FE  1903               	btfsc	3,2
  4931  01FF  2A13               	goto	l2425
  4932  0200  303B               	movlw	low (STR_33| (0+32768))
  4933  0201  00A5               	movwf	printf@f
  4934  0202  3092               	movlw	high (STR_33| (0+32768))
  4935  0203  00A6               	movwf	printf@f+1
  4936  0204  085D               	movf	can_send@i,w
  4937  0205  3E06               	addlw	6
  4938  0206  3E45               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4939  0207  0086               	movwf	6
  4940  0208  0187               	clrf	7
  4941  0209  0801               	movf	1,w
  4942  020A  00C1               	movwf	??_can_send
  4943  020B  01C2               	clrf	??_can_send+1
  4944  020C  0841               	movf	??_can_send,w
  4945  020D  00A7               	movwf	?_printf+2
  4946  020E  0842               	movf	??_can_send+1,w
  4947  020F  00A8               	movwf	?_printf+3
  4948  0210  3185  25B0  3181   	fcall	_printf
  4949  0213                     l2425:	
  4950  0213  3001               	movlw	1
  4951  0214  0020               	movlb	0	; select bank0
  4952  0215  00C1               	movwf	??_can_send
  4953  0216  0841               	movf	??_can_send,w
  4954  0217  07DD               	addwf	can_send@i,f
  4955  0218  29EA               	goto	l2427
  4956  0219                     l2429:	
  4957                           
  4958                           ;mcp2515.c: 214: }
  4959                           ;mcp2515.c: 217: uint8_t len = 6 + dlc;
  4960  0219  0840               	movf	can_send@dlc,w
  4961  021A  3E06               	addlw	6
  4962  021B  00C1               	movwf	??_can_send
  4963  021C  0841               	movf	??_can_send,w
  4964  021D  00D5               	movwf	can_send@len
  4965                           
  4966                           ;mcp2515.c: 218: uint8_t bytes_written = SPI_exchange(tx_buf, len);
  4967  021E  0855               	movf	can_send@len,w
  4968  021F  00C1               	movwf	??_can_send
  4969  0220  0841               	movf	??_can_send,w
  4970  0221  00F8               	movwf	SPI_exchange@len
  4971  0222  3045               	movlw	(low (can_send@tx_buf| 0))& (0+255)
  4972  0223  318C  24CB  3181   	fcall	_SPI_exchange
  4973  0226  0020               	movlb	0	; select bank0
  4974  0227  00C2               	movwf	??_can_send+1
  4975  0228  0842               	movf	??_can_send+1,w
  4976  0229  00D7               	movwf	can_send@bytes_written
  4977                           
  4978                           ;mcp2515.c: 220: uint8_t debug_buf[3];
  4979                           ;mcp2515.c: 221: debug_buf[0] = 0b00000011;
  4980  022A  3003               	movlw	3
  4981  022B  00C1               	movwf	??_can_send
  4982  022C  0841               	movf	??_can_send,w
  4983  022D  00DA               	movwf	can_send@debug_buf
  4984                           
  4985                           ;mcp2515.c: 222: debug_buf[1] = txbnsidh[n];
  4986  022E  085E               	movf	can_send@n,w
  4987  022F  3ED1               	addlw	low (_txbnsidh| (0+32768))
  4988  0230  0084               	movwf	4
  4989  0231  3093               	movlw	high (_txbnsidh| (0+32768))
  4990  0232  1803               	skipnc
  4991  0233  3E01               	addlw	1
  4992  0234  0085               	movwf	5
  4993  0235  0800               	movf	0,w	;code access
  4994  0236  00C1               	movwf	??_can_send
  4995  0237  0841               	movf	??_can_send,w
  4996  0238  00DB               	movwf	can_send@debug_buf+1
  4997                           
  4998                           ;mcp2515.c: 223: debug_buf[2] = 0x00;
  4999  0239  01DC               	clrf	can_send@debug_buf+2
  5000                           
  5001                           ;mcp2515.c: 224: SPI_exchange(debug_buf, 3);
  5002  023A  3003               	movlw	3
  5003  023B  00C1               	movwf	??_can_send
  5004  023C  0841               	movf	??_can_send,w
  5005  023D  00F8               	movwf	SPI_exchange@len
  5006  023E  305A               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  5007  023F  318C  24CB  3181   	fcall	_SPI_exchange
  5008                           
  5009                           ;mcp2515.c: 226: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  5010  0242  0020               	movlb	0	; select bank0
  5011  0243  0869               	movf	_mode,w
  5012  0244  1903               	btfsc	3,2
  5013  0245  2A5B               	goto	l2445
  5014  0246  3083               	movlw	low (STR_34| (0+32768))
  5015  0247  00A5               	movwf	printf@f
  5016  0248  3092               	movlw	high (STR_34| (0+32768))
  5017  0249  00A6               	movwf	printf@f+1
  5018  024A  085E               	movf	can_send@n,w
  5019  024B  00C1               	movwf	??_can_send
  5020  024C  01C2               	clrf	??_can_send+1
  5021  024D  0841               	movf	??_can_send,w
  5022  024E  00A7               	movwf	?_printf+2
  5023  024F  0842               	movf	??_can_send+1,w
  5024  0250  00A8               	movwf	?_printf+3
  5025  0251  085C               	movf	can_send@debug_buf+2,w
  5026  0252  00C3               	movwf	??_can_send+2
  5027  0253  01C4               	clrf	??_can_send+3
  5028  0254  0843               	movf	??_can_send+2,w
  5029  0255  00A9               	movwf	?_printf+4
  5030  0256  0844               	movf	??_can_send+3,w
  5031  0257  00AA               	movwf	?_printf+5
  5032  0258  3185  25B0  3181   	fcall	_printf
  5033  025B                     l2445:	
  5034                           
  5035                           ;mcp2515.c: 227: debug_buf[0] = 0b00000011;
  5036  025B  3003               	movlw	3
  5037  025C  0020               	movlb	0	; select bank0
  5038  025D  00C1               	movwf	??_can_send
  5039  025E  0841               	movf	??_can_send,w
  5040  025F  00DA               	movwf	can_send@debug_buf
  5041                           
  5042                           ;mcp2515.c: 228: debug_buf[1] = txbnsidh[n] + 1;
  5043  0260  085E               	movf	can_send@n,w
  5044  0261  3ED1               	addlw	low (_txbnsidh| (0+32768))
  5045  0262  0084               	movwf	4
  5046  0263  3093               	movlw	high (_txbnsidh| (0+32768))
  5047  0264  1803               	skipnc
  5048  0265  3E01               	addlw	1
  5049  0266  0085               	movwf	5
  5050  0267  0800               	movf	0,w	;code access
  5051  0268  3E01               	addlw	1
  5052  0269  00C1               	movwf	??_can_send
  5053  026A  0841               	movf	??_can_send,w
  5054  026B  00DB               	movwf	can_send@debug_buf+1
  5055                           
  5056                           ;mcp2515.c: 229: debug_buf[2] = 0x00;
  5057  026C  01DC               	clrf	can_send@debug_buf+2
  5058                           
  5059                           ;mcp2515.c: 230: SPI_exchange(debug_buf, 3);
  5060  026D  3003               	movlw	3
  5061  026E  00C1               	movwf	??_can_send
  5062  026F  0841               	movf	??_can_send,w
  5063  0270  00F8               	movwf	SPI_exchange@len
  5064  0271  305A               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  5065  0272  318C  24CB  3181   	fcall	_SPI_exchange
  5066                           
  5067                           ;mcp2515.c: 232: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  5068  0275  0020               	movlb	0	; select bank0
  5069  0276  0869               	movf	_mode,w
  5070  0277  1903               	btfsc	3,2
  5071  0278  2A8E               	goto	l2457
  5072  0279  30C7               	movlw	low (STR_35| (0+32768))
  5073  027A  00A5               	movwf	printf@f
  5074  027B  3092               	movlw	high (STR_35| (0+32768))
  5075  027C  00A6               	movwf	printf@f+1
  5076  027D  085E               	movf	can_send@n,w
  5077  027E  00C1               	movwf	??_can_send
  5078  027F  01C2               	clrf	??_can_send+1
  5079  0280  0841               	movf	??_can_send,w
  5080  0281  00A7               	movwf	?_printf+2
  5081  0282  0842               	movf	??_can_send+1,w
  5082  0283  00A8               	movwf	?_printf+3
  5083  0284  085C               	movf	can_send@debug_buf+2,w
  5084  0285  00C3               	movwf	??_can_send+2
  5085  0286  01C4               	clrf	??_can_send+3
  5086  0287  0843               	movf	??_can_send+2,w
  5087  0288  00A9               	movwf	?_printf+4
  5088  0289  0844               	movf	??_can_send+3,w
  5089  028A  00AA               	movwf	?_printf+5
  5090  028B  3185  25B0  3181   	fcall	_printf
  5091  028E                     l2457:	
  5092                           
  5093                           ;mcp2515.c: 234: if (bytes_written == len) {
  5094  028E  0020               	movlb	0	; select bank0
  5095  028F  0857               	movf	can_send@bytes_written,w
  5096  0290  0655               	xorwf	can_send@len,w
  5097  0291  1D03               	skipz
  5098  0292  2ABB               	goto	l2473
  5099                           
  5100                           ;mcp2515.c: 236: uint8_t txb_ctrl_buf[1];
  5101                           ;mcp2515.c: 237: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  5102  0293  3001               	movlw	1
  5103  0294  00C1               	movwf	??_can_send
  5104  0295  0A5E               	incf	can_send@n,w
  5105  0296  2A98               	goto	u2324
  5106  0297                     u2325:	
  5107  0297  35C1               	lslf	??_can_send,f
  5108  0298                     u2324:	
  5109  0298  0B89               	decfsz	9,f
  5110  0299  2A97               	goto	u2325
  5111  029A  0841               	movf	??_can_send,w
  5112  029B  3E80               	addlw	128
  5113  029C  00C2               	movwf	??_can_send+1
  5114  029D  0842               	movf	??_can_send+1,w
  5115  029E  00D8               	movwf	can_send@txb_ctrl_buf
  5116                           
  5117                           ;mcp2515.c: 238: bytes_written = SPI_exchange(txb_ctrl_buf, 1);
  5118  029F  01F8               	clrf	SPI_exchange@len
  5119  02A0  0AF8               	incf	SPI_exchange@len,f
  5120  02A1  3058               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  5121  02A2  318C  24CB  3181   	fcall	_SPI_exchange
  5122  02A5  0020               	movlb	0	; select bank0
  5123  02A6  00C1               	movwf	??_can_send
  5124  02A7  0841               	movf	??_can_send,w
  5125  02A8  00D7               	movwf	can_send@bytes_written
  5126                           
  5127                           ;mcp2515.c: 239: if (bytes_written == 1) {
  5128  02A9  0357               	decf	can_send@bytes_written,w
  5129  02AA  1D03               	btfss	3,2
  5130  02AB  2ABB               	goto	l2473
  5131                           
  5132                           ;mcp2515.c: 240: if (mode.debug) printf("Message sent: %s\n", buf);
  5133  02AC  0869               	movf	_mode,w
  5134  02AD  1903               	btfsc	3,2
  5135  02AE  2AB9               	goto	l2469
  5136  02AF  304F               	movlw	low (STR_36| (0+32768))
  5137  02B0  00A5               	movwf	printf@f
  5138  02B1  3092               	movlw	high (STR_36| (0+32768))
  5139  02B2  00A6               	movwf	printf@f+1
  5140  02B3  0856               	movf	can_send@buf,w
  5141  02B4  00C1               	movwf	??_can_send
  5142  02B5  0841               	movf	??_can_send,w
  5143  02B6  00A7               	movwf	low ((?_printf| 0+2))
  5144  02B7  3185  25B0         	fcall	_printf
  5145  02B9                     l2469:	
  5146                           
  5147                           ;mcp2515.c: 241: return 1;
  5148  02B9  3001               	movlw	1
  5149  02BA  0008               	return
  5150  02BB                     l2473:	
  5151                           
  5152                           ;mcp2515.c: 242: }
  5153                           ;mcp2515.c: 243: }
  5154                           ;mcp2515.c: 245: return 0;
  5155  02BB  3000               	movlw	0
  5156  02BC  0008               	return
  5157  02BD                     __end_of_can_send:	
  5158                           
  5159                           	psect	text7
  5160  0CA3                     __ptext7:	
  5161 ;; *************** function _can_logging_mode *****************
  5162 ;; Defined at:
  5163 ;;		line 26 in file "mcp2515.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  debug           1    wreg     unsigned char 
  5166 ;;  verbose         1    0[COMMON] unsigned char 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  debug           1    2[COMMON] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      void 
  5171 ;; Registers used:
  5172 ;;		wreg
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5178 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;Total ram usage:        3 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_main
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function _can_logging_mode
  5193  0CA3                     _can_logging_mode:	
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in _can_logging_mode: [wreg]
  5197                           ;can_logging_mode@debug stored from wreg
  5198  0CA3  00F2               	movwf	can_logging_mode@debug
  5199                           
  5200                           ;mcp2515.c: 27: mode.debug = debug;
  5201  0CA4  0872               	movf	can_logging_mode@debug,w
  5202  0CA5  00F1               	movwf	??_can_logging_mode
  5203  0CA6  0871               	movf	??_can_logging_mode,w
  5204  0CA7  0020               	movlb	0	; select bank0
  5205  0CA8  00E9               	movwf	_mode
  5206                           
  5207                           ;mcp2515.c: 28: mode.verbose = verbose;
  5208  0CA9  0870               	movf	can_logging_mode@verbose,w
  5209  0CAA  00F1               	movwf	??_can_logging_mode
  5210  0CAB  0871               	movf	??_can_logging_mode,w
  5211  0CAC  00EA               	movwf	_mode+1
  5212  0CAD  0008               	return
  5213  0CAE                     __end_of_can_logging_mode:	
  5214                           
  5215                           	psect	text8
  5216  0DA6                     __ptext8:	
  5217 ;; *************** function _can_init *****************
  5218 ;; Defined at:
  5219 ;;		line 47 in file "mcp2515.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5222 ;;		 -> receive_handler(1), 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  cnf_buf         5   42[BANK0 ] unsigned char [5]
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;Total ram usage:        8 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    4
  5241 ;; This function calls:
  5242 ;;		_SPI_exchange
  5243 ;;		_can_ope_mode
  5244 ;;		_can_set_sid
  5245 ;; This function is called by:
  5246 ;;		_main
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _can_init
  5252  0DA6                     _can_init:	
  5253                           
  5254                           ;mcp2515.c: 48: can_set_sid(0);
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5258  0DA6  3000               	movlw	0
  5259  0DA7  00F0               	movwf	can_set_sid@can_node
  5260  0DA8  00F1               	movwf	can_set_sid@can_node+1
  5261  0DA9  3180  2007  318D   	fcall	_can_set_sid
  5262                           
  5263                           ;mcp2515.c: 50: handler = receive_handler;
  5264  0DAC  0020               	movlb	0	; select bank0
  5265  0DAD  0848               	movf	can_init@receive_handler+1,w
  5266  0DAE  0021               	movlb	1	; select bank1
  5267  0DAF  00BD               	movwf	(_handler+1)^(0+128)
  5268  0DB0  0020               	movlb	0	; select bank0
  5269  0DB1  0847               	movf	can_init@receive_handler,w
  5270  0DB2  0021               	movlb	1	; select bank1
  5271  0DB3  00BC               	movwf	_handler^(0+128)
  5272                           
  5273                           ;mcp2515.c: 52: can_ope_mode(0b10000000);
  5274  0DB4  3080               	movlw	128
  5275  0DB5  318E  260A  318D   	fcall	_can_ope_mode
  5276                           
  5277                           ;mcp2515.c: 53: uint8_t cnf_buf[5] = {0b00000010, 0x28, 0b00000101, 0b11110001, 0b010000
      +                          01};
  5278  0DB8  30B3               	movlw	low can_init@F2806
  5279  0DB9  0086               	movwf	6
  5280  0DBA  3000               	movlw	high can_init@F2806
  5281  0DBB  0087               	movwf	7
  5282  0DBC  304A               	movlw	low can_init@cnf_buf
  5283  0DBD  0084               	movwf	4
  5284  0DBE  3000               	movlw	high can_init@cnf_buf
  5285  0DBF  0085               	movwf	5
  5286  0DC0  3005               	movlw	5
  5287  0DC1  0020               	movlb	0	; select bank0
  5288  0DC2  00C9               	movwf	??_can_init
  5289  0DC3                     u1940:	
  5290  0DC3  0016               	moviw fsr1++
  5291  0DC4  001A               	movwi fsr0++
  5292  0DC5  0BC9               	decfsz	??_can_init,f
  5293  0DC6  2DC3               	goto	u1940
  5294                           
  5295                           ;mcp2515.c: 54: SPI_exchange(cnf_buf, 5);
  5296  0DC7  3005               	movlw	5
  5297  0DC8  00C9               	movwf	??_can_init
  5298  0DC9  0849               	movf	??_can_init,w
  5299  0DCA  00F8               	movwf	SPI_exchange@len
  5300  0DCB  304A               	movlw	(low (can_init@cnf_buf| 0))& (0+255)
  5301  0DCC  318C  24CB  318D   	fcall	_SPI_exchange
  5302                           
  5303                           ;mcp2515.c: 56: mode.debug = 0;
  5304  0DCF  0020               	movlb	0	; select bank0
  5305  0DD0  01E9               	clrf	_mode
  5306                           
  5307                           ;mcp2515.c: 57: mode.verbose = 0;
  5308  0DD1  01EA               	clrf	_mode+1
  5309                           
  5310                           ;mcp2515.c: 58: can_ope_mode(0b00000000);
  5311  0DD2  3000               	movlw	0
  5312  0DD3  318E  260A         	fcall	_can_ope_mode
  5313  0DD5  0008               	return
  5314  0DD6                     __end_of_can_init:	
  5315                           
  5316                           	psect	text9
  5317  0007                     __ptext9:	
  5318 ;; *************** function _can_set_sid *****************
  5319 ;; Defined at:
  5320 ;;		line 37 in file "mcp2515.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  can_node        2    0[COMMON] unsigned int 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  sidl            1    6[COMMON] unsigned char 
  5325 ;;  sidh            1    5[COMMON] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5339 ;;Total ram usage:        7 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;;		_can_init
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _can_set_sid
  5351  0007                     _can_set_sid:	
  5352                           
  5353                           ;mcp2515.c: 38: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5357  0007  0871               	movf	can_set_sid@can_node+1,w
  5358  0008  00F3               	movwf	??_can_set_sid+1
  5359  0009  0870               	movf	can_set_sid@can_node,w
  5360  000A  00F2               	movwf	??_can_set_sid
  5361  000B  36F3               	lsrf	??_can_set_sid+1,f
  5362  000C  0CF2               	rrf	??_can_set_sid,f
  5363  000D  36F3               	lsrf	??_can_set_sid+1,f
  5364  000E  0CF2               	rrf	??_can_set_sid,f
  5365  000F  36F3               	lsrf	??_can_set_sid+1,f
  5366  0010  0CF2               	rrf	??_can_set_sid,f
  5367  0011  0872               	movf	??_can_set_sid,w
  5368  0012  00F4               	movwf	??_can_set_sid+2
  5369  0013  0874               	movf	??_can_set_sid+2,w
  5370  0014  00F5               	movwf	can_set_sid@sidh
  5371                           
  5372                           ;mcp2515.c: 39: uint8_t sidl = (can_node << 5) & 0x00e0;
  5373  0015  0870               	movf	can_set_sid@can_node,w
  5374  0016  00F2               	movwf	??_can_set_sid
  5375  0017  3004               	movlw	4
  5376  0018                     u1855:	
  5377  0018  35F2               	lslf	??_can_set_sid,f
  5378  0019  3EFF               	addlw	-1
  5379  001A  1D03               	skipz
  5380  001B  2818               	goto	u1855
  5381  001C  3572               	lslf	??_can_set_sid,w
  5382  001D  39E0               	andlw	224
  5383  001E  00F3               	movwf	??_can_set_sid+1
  5384  001F  0873               	movf	??_can_set_sid+1,w
  5385  0020  00F6               	movwf	can_set_sid@sidl
  5386                           
  5387                           ;mcp2515.c: 40: sid.sidh = sidh;
  5388  0021  0875               	movf	can_set_sid@sidh,w
  5389  0022  00F2               	movwf	??_can_set_sid
  5390  0023  0872               	movf	??_can_set_sid,w
  5391  0024  0020               	movlb	0	; select bank0
  5392  0025  00EB               	movwf	_sid
  5393                           
  5394                           ;mcp2515.c: 41: sid.sidl = sidl;
  5395  0026  0876               	movf	can_set_sid@sidl,w
  5396  0027  00F2               	movwf	??_can_set_sid
  5397  0028  0872               	movf	??_can_set_sid,w
  5398  0029  00EC               	movwf	_sid+1
  5399  002A  0008               	return
  5400  002B                     __end_of_can_set_sid:	
  5401                           
  5402                           	psect	text10
  5403  02BD                     __ptext10:	
  5404 ;; *************** function _can_dump_registers *****************
  5405 ;; Defined at:
  5406 ;;		line 304 in file "mcp2515.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  n               1   42[BANK0 ] unsigned char 
  5411 ;;  mask_sidl       1   41[BANK0 ] unsigned char 
  5412 ;;  mask_sidh       1   40[BANK0 ] unsigned char 
  5413 ;;  i               1    0        unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;Total ram usage:       11 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    4
  5430 ;; This function calls:
  5431 ;;		_printf
  5432 ;;		_read_register
  5433 ;; This function is called by:
  5434 ;;		_main
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function _can_dump_registers
  5440  02BD                     _can_dump_registers:	
  5441                           
  5442                           ;mcp2515.c: 305: printf("---\n");
  5443                           
  5444                           ;incstack = 0
  5445                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5446  02BD  30F6               	movlw	low ((STR_7+18)| (0+32768))
  5447  02BE  0020               	movlb	0	; select bank0
  5448  02BF  00A5               	movwf	printf@f
  5449  02C0  3091               	movlw	high ((STR_7+18)| (0+32768))
  5450  02C1  00A6               	movwf	printf@f+1
  5451  02C2  3185  25B0  3182   	fcall	_printf
  5452                           
  5453                           ;mcp2515.c: 306: printf("SIDH: %02x\n", sid.sidh);
  5454  02C5  3077               	movlw	low ((STR_26+5)| (0+32768))
  5455  02C6  0020               	movlb	0	; select bank0
  5456  02C7  00A5               	movwf	printf@f
  5457  02C8  3092               	movlw	high ((STR_26+5)| (0+32768))
  5458  02C9  00A6               	movwf	printf@f+1
  5459  02CA  086B               	movf	_sid,w
  5460  02CB  00C0               	movwf	??_can_dump_registers
  5461  02CC  01C1               	clrf	??_can_dump_registers+1
  5462  02CD  0840               	movf	??_can_dump_registers,w
  5463  02CE  00A7               	movwf	?_printf+2
  5464  02CF  0841               	movf	??_can_dump_registers+1,w
  5465  02D0  00A8               	movwf	?_printf+3
  5466  02D1  3185  25B0  3182   	fcall	_printf
  5467                           
  5468                           ;mcp2515.c: 307: printf("SIDL: %02x\n", sid.sidl);
  5469  02D4  30BB               	movlw	low ((STR_27+5)| (0+32768))
  5470  02D5  0020               	movlb	0	; select bank0
  5471  02D6  00A5               	movwf	printf@f
  5472  02D7  3092               	movlw	high ((STR_27+5)| (0+32768))
  5473  02D8  00A6               	movwf	printf@f+1
  5474  02D9  086C               	movf	_sid+1,w
  5475  02DA  00C0               	movwf	??_can_dump_registers
  5476  02DB  01C1               	clrf	??_can_dump_registers+1
  5477  02DC  0840               	movf	??_can_dump_registers,w
  5478  02DD  00A7               	movwf	?_printf+2
  5479  02DE  0841               	movf	??_can_dump_registers+1,w
  5480  02DF  00A8               	movwf	?_printf+3
  5481  02E0  3185  25B0  3182   	fcall	_printf
  5482                           
  5483                           ;mcp2515.c: 308: printf("\n");
  5484  02E3  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5485  02E4  0020               	movlb	0	; select bank0
  5486  02E5  00A5               	movwf	printf@f
  5487  02E6  3091               	movlw	high ((STR_7+21)| (0+32768))
  5488  02E7  00A6               	movwf	printf@f+1
  5489  02E8  3185  25B0  3182   	fcall	_printf
  5490                           
  5491                           ;mcp2515.c: 310: printf("CNF1: %02x\n", read_register(0x2a));
  5492  02EB  307B               	movlw	low (STR_43| (0+32768))
  5493  02EC  0020               	movlb	0	; select bank0
  5494  02ED  00A5               	movwf	printf@f
  5495  02EE  3093               	movlw	high (STR_43| (0+32768))
  5496  02EF  00A6               	movwf	printf@f+1
  5497  02F0  302A               	movlw	42
  5498  02F1  318C  24E0  3182   	fcall	_read_register
  5499  02F4  0020               	movlb	0	; select bank0
  5500  02F5  00C0               	movwf	??_can_dump_registers
  5501  02F6  01C1               	clrf	??_can_dump_registers+1
  5502  02F7  0840               	movf	??_can_dump_registers,w
  5503  02F8  00A7               	movwf	?_printf+2
  5504  02F9  0841               	movf	??_can_dump_registers+1,w
  5505  02FA  00A8               	movwf	?_printf+3
  5506  02FB  3185  25B0  3182   	fcall	_printf
  5507                           
  5508                           ;mcp2515.c: 311: printf("CNF2: %02x\n", read_register(0x29));
  5509  02FE  3087               	movlw	low (STR_44| (0+32768))
  5510  02FF  0020               	movlb	0	; select bank0
  5511  0300  00A5               	movwf	printf@f
  5512  0301  3093               	movlw	high (STR_44| (0+32768))
  5513  0302  00A6               	movwf	printf@f+1
  5514  0303  3029               	movlw	41
  5515  0304  318C  24E0  3182   	fcall	_read_register
  5516  0307  0020               	movlb	0	; select bank0
  5517  0308  00C0               	movwf	??_can_dump_registers
  5518  0309  01C1               	clrf	??_can_dump_registers+1
  5519  030A  0840               	movf	??_can_dump_registers,w
  5520  030B  00A7               	movwf	?_printf+2
  5521  030C  0841               	movf	??_can_dump_registers+1,w
  5522  030D  00A8               	movwf	?_printf+3
  5523  030E  3185  25B0  3182   	fcall	_printf
  5524                           
  5525                           ;mcp2515.c: 312: printf("CNF3: %02x\n", read_register(0x28));
  5526  0311  3093               	movlw	low (STR_45| (0+32768))
  5527  0312  0020               	movlb	0	; select bank0
  5528  0313  00A5               	movwf	printf@f
  5529  0314  3093               	movlw	high (STR_45| (0+32768))
  5530  0315  00A6               	movwf	printf@f+1
  5531  0316  3028               	movlw	40
  5532  0317  318C  24E0  3182   	fcall	_read_register
  5533  031A  0020               	movlb	0	; select bank0
  5534  031B  00C0               	movwf	??_can_dump_registers
  5535  031C  01C1               	clrf	??_can_dump_registers+1
  5536  031D  0840               	movf	??_can_dump_registers,w
  5537  031E  00A7               	movwf	?_printf+2
  5538  031F  0841               	movf	??_can_dump_registers+1,w
  5539  0320  00A8               	movwf	?_printf+3
  5540  0321  3185  25B0  3182   	fcall	_printf
  5541                           
  5542                           ;mcp2515.c: 313: printf("\n");
  5543  0324  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5544  0325  0020               	movlb	0	; select bank0
  5545  0326  00A5               	movwf	printf@f
  5546  0327  3091               	movlw	high ((STR_7+21)| (0+32768))
  5547  0328  00A6               	movwf	printf@f+1
  5548  0329  3185  25B0  3182   	fcall	_printf
  5549                           
  5550                           ;mcp2515.c: 315: uint8_t n;
  5551                           ;mcp2515.c: 316: uint8_t i;
  5552                           ;mcp2515.c: 317: uint8_t mask_sidh;
  5553                           ;mcp2515.c: 318: uint8_t mask_sidl;
  5554                           ;mcp2515.c: 319: for (n=0; n<2; n++) {
  5555  032C  0020               	movlb	0	; select bank0
  5556  032D  01CA               	clrf	can_dump_registers@n
  5557  032E  3002               	movlw	2
  5558  032F  024A               	subwf	can_dump_registers@n,w
  5559  0330  1803               	btfsc	3,0
  5560  0331  2B7D               	goto	l2363
  5561  0332                     l2357:	
  5562                           
  5563                           ;mcp2515.c: 320: mask_sidh = read_register(rxmnsidh[n]);
  5564  0332  084A               	movf	can_dump_registers@n,w
  5565  0333  3EDC               	addlw	low (_rxmnsidh| (0+32768))
  5566  0334  0084               	movwf	4
  5567  0335  3093               	movlw	high (_rxmnsidh| (0+32768))
  5568  0336  1803               	skipnc
  5569  0337  3E01               	addlw	1
  5570  0338  0085               	movwf	5
  5571  0339  0800               	movf	0,w	;code access
  5572  033A  318C  24E0  3182   	fcall	_read_register
  5573  033D  0020               	movlb	0	; select bank0
  5574  033E  00C0               	movwf	??_can_dump_registers
  5575  033F  0840               	movf	??_can_dump_registers,w
  5576  0340  00C8               	movwf	can_dump_registers@mask_sidh
  5577                           
  5578                           ;mcp2515.c: 321: mask_sidl = read_register(rxmnsidh[n]+1);
  5579  0341  084A               	movf	can_dump_registers@n,w
  5580  0342  3EDC               	addlw	low (_rxmnsidh| (0+32768))
  5581  0343  0084               	movwf	4
  5582  0344  3093               	movlw	high (_rxmnsidh| (0+32768))
  5583  0345  1803               	skipnc
  5584  0346  3E01               	addlw	1
  5585  0347  0085               	movwf	5
  5586  0348  0800               	movf	0,w	;code access
  5587  0349  3E01               	addlw	1
  5588  034A  318C  24E0  3182   	fcall	_read_register
  5589  034D  0020               	movlb	0	; select bank0
  5590  034E  00C0               	movwf	??_can_dump_registers
  5591  034F  0840               	movf	??_can_dump_registers,w
  5592  0350  00C9               	movwf	can_dump_registers@mask_sidl
  5593                           
  5594                           ;mcp2515.c: 322: printf("RXM%dSIDH RXM%dSIDL: %02x %02x\n", n, n, mask_sidh, mask_sidl);
  5595  0351  307A               	movlw	low (STR_47| (0+32768))
  5596  0352  00A5               	movwf	printf@f
  5597  0353  3091               	movlw	high (STR_47| (0+32768))
  5598  0354  00A6               	movwf	printf@f+1
  5599  0355  084A               	movf	can_dump_registers@n,w
  5600  0356  00C0               	movwf	??_can_dump_registers
  5601  0357  01C1               	clrf	??_can_dump_registers+1
  5602  0358  0840               	movf	??_can_dump_registers,w
  5603  0359  00A7               	movwf	?_printf+2
  5604  035A  0841               	movf	??_can_dump_registers+1,w
  5605  035B  00A8               	movwf	?_printf+3
  5606  035C  084A               	movf	can_dump_registers@n,w
  5607  035D  00C2               	movwf	??_can_dump_registers+2
  5608  035E  01C3               	clrf	??_can_dump_registers+3
  5609  035F  0842               	movf	??_can_dump_registers+2,w
  5610  0360  00A9               	movwf	?_printf+4
  5611  0361  0843               	movf	??_can_dump_registers+3,w
  5612  0362  00AA               	movwf	?_printf+5
  5613  0363  0848               	movf	can_dump_registers@mask_sidh,w
  5614  0364  00C4               	movwf	??_can_dump_registers+4
  5615  0365  01C5               	clrf	??_can_dump_registers+5
  5616  0366  0844               	movf	??_can_dump_registers+4,w
  5617  0367  00AB               	movwf	?_printf+6
  5618  0368  0845               	movf	??_can_dump_registers+5,w
  5619  0369  00AC               	movwf	?_printf+7
  5620  036A  0849               	movf	can_dump_registers@mask_sidl,w
  5621  036B  00C6               	movwf	??_can_dump_registers+6
  5622  036C  01C7               	clrf	??_can_dump_registers+7
  5623  036D  0846               	movf	??_can_dump_registers+6,w
  5624  036E  00AD               	movwf	?_printf+8
  5625  036F  0847               	movf	??_can_dump_registers+7,w
  5626  0370  00AE               	movwf	?_printf+9
  5627  0371  3185  25B0  3182   	fcall	_printf
  5628  0374  3001               	movlw	1
  5629  0375  0020               	movlb	0	; select bank0
  5630  0376  00C0               	movwf	??_can_dump_registers
  5631  0377  0840               	movf	??_can_dump_registers,w
  5632  0378  07CA               	addwf	can_dump_registers@n,f
  5633  0379  3002               	movlw	2
  5634  037A  024A               	subwf	can_dump_registers@n,w
  5635  037B  1C03               	skipc
  5636  037C  2B32               	goto	l2357
  5637  037D                     l2363:	
  5638                           
  5639                           ;mcp2515.c: 323: }
  5640                           ;mcp2515.c: 324: for (n=0; n<6; n++) {
  5641  037D  01CA               	clrf	can_dump_registers@n
  5642  037E  3006               	movlw	6
  5643  037F  024A               	subwf	can_dump_registers@n,w
  5644  0380  1803               	btfsc	3,0
  5645  0381  2BCD               	goto	l2375
  5646  0382                     l2369:	
  5647                           
  5648                           ;mcp2515.c: 325: mask_sidh = read_register(rxfnsidh[n]);
  5649  0382  084A               	movf	can_dump_registers@n,w
  5650  0383  3EBF               	addlw	low (_rxfnsidh| (0+32768))
  5651  0384  0084               	movwf	4
  5652  0385  3093               	movlw	high (_rxfnsidh| (0+32768))
  5653  0386  1803               	skipnc
  5654  0387  3E01               	addlw	1
  5655  0388  0085               	movwf	5
  5656  0389  0800               	movf	0,w	;code access
  5657  038A  318C  24E0  3182   	fcall	_read_register
  5658  038D  0020               	movlb	0	; select bank0
  5659  038E  00C0               	movwf	??_can_dump_registers
  5660  038F  0840               	movf	??_can_dump_registers,w
  5661  0390  00C8               	movwf	can_dump_registers@mask_sidh
  5662                           
  5663                           ;mcp2515.c: 326: mask_sidl = read_register(rxfnsidh[n]+1);
  5664  0391  084A               	movf	can_dump_registers@n,w
  5665  0392  3EBF               	addlw	low (_rxfnsidh| (0+32768))
  5666  0393  0084               	movwf	4
  5667  0394  3093               	movlw	high (_rxfnsidh| (0+32768))
  5668  0395  1803               	skipnc
  5669  0396  3E01               	addlw	1
  5670  0397  0085               	movwf	5
  5671  0398  0800               	movf	0,w	;code access
  5672  0399  3E01               	addlw	1
  5673  039A  318C  24E0  3182   	fcall	_read_register
  5674  039D  0020               	movlb	0	; select bank0
  5675  039E  00C0               	movwf	??_can_dump_registers
  5676  039F  0840               	movf	??_can_dump_registers,w
  5677  03A0  00C9               	movwf	can_dump_registers@mask_sidl
  5678                           
  5679                           ;mcp2515.c: 327: printf("RXF%dSIDH RXF%dSIDL: %02x %02x\n", n, n, mask_sidh, mask_sidl);
  5680  03A1  305A               	movlw	low (STR_48| (0+32768))
  5681  03A2  00A5               	movwf	printf@f
  5682  03A3  3091               	movlw	high (STR_48| (0+32768))
  5683  03A4  00A6               	movwf	printf@f+1
  5684  03A5  084A               	movf	can_dump_registers@n,w
  5685  03A6  00C0               	movwf	??_can_dump_registers
  5686  03A7  01C1               	clrf	??_can_dump_registers+1
  5687  03A8  0840               	movf	??_can_dump_registers,w
  5688  03A9  00A7               	movwf	?_printf+2
  5689  03AA  0841               	movf	??_can_dump_registers+1,w
  5690  03AB  00A8               	movwf	?_printf+3
  5691  03AC  084A               	movf	can_dump_registers@n,w
  5692  03AD  00C2               	movwf	??_can_dump_registers+2
  5693  03AE  01C3               	clrf	??_can_dump_registers+3
  5694  03AF  0842               	movf	??_can_dump_registers+2,w
  5695  03B0  00A9               	movwf	?_printf+4
  5696  03B1  0843               	movf	??_can_dump_registers+3,w
  5697  03B2  00AA               	movwf	?_printf+5
  5698  03B3  0848               	movf	can_dump_registers@mask_sidh,w
  5699  03B4  00C4               	movwf	??_can_dump_registers+4
  5700  03B5  01C5               	clrf	??_can_dump_registers+5
  5701  03B6  0844               	movf	??_can_dump_registers+4,w
  5702  03B7  00AB               	movwf	?_printf+6
  5703  03B8  0845               	movf	??_can_dump_registers+5,w
  5704  03B9  00AC               	movwf	?_printf+7
  5705  03BA  0849               	movf	can_dump_registers@mask_sidl,w
  5706  03BB  00C6               	movwf	??_can_dump_registers+6
  5707  03BC  01C7               	clrf	??_can_dump_registers+7
  5708  03BD  0846               	movf	??_can_dump_registers+6,w
  5709  03BE  00AD               	movwf	?_printf+8
  5710  03BF  0847               	movf	??_can_dump_registers+7,w
  5711  03C0  00AE               	movwf	?_printf+9
  5712  03C1  3185  25B0  3182   	fcall	_printf
  5713  03C4  3001               	movlw	1
  5714  03C5  0020               	movlb	0	; select bank0
  5715  03C6  00C0               	movwf	??_can_dump_registers
  5716  03C7  0840               	movf	??_can_dump_registers,w
  5717  03C8  07CA               	addwf	can_dump_registers@n,f
  5718  03C9  3006               	movlw	6
  5719  03CA  024A               	subwf	can_dump_registers@n,w
  5720  03CB  1C03               	skipc
  5721  03CC  2B82               	goto	l2369
  5722  03CD                     l2375:	
  5723                           
  5724                           ;mcp2515.c: 328: }
  5725                           ;mcp2515.c: 329: printf("\n");
  5726  03CD  30F9               	movlw	low ((STR_7+21)| (0+32768))
  5727  03CE  00A5               	movwf	printf@f
  5728  03CF  3091               	movlw	high ((STR_7+21)| (0+32768))
  5729  03D0  00A6               	movwf	printf@f+1
  5730  03D1  3185  25B0  3182   	fcall	_printf
  5731                           
  5732                           ;mcp2515.c: 331: printf("CANCTRL: %02x\n", read_register(0x0f));
  5733  03D4  3019               	movlw	low (STR_50| (0+32768))
  5734  03D5  0020               	movlb	0	; select bank0
  5735  03D6  00A5               	movwf	printf@f
  5736  03D7  3093               	movlw	high (STR_50| (0+32768))
  5737  03D8  00A6               	movwf	printf@f+1
  5738  03D9  300F               	movlw	15
  5739  03DA  318C  24E0  3182   	fcall	_read_register
  5740  03DD  0020               	movlb	0	; select bank0
  5741  03DE  00C0               	movwf	??_can_dump_registers
  5742  03DF  01C1               	clrf	??_can_dump_registers+1
  5743  03E0  0840               	movf	??_can_dump_registers,w
  5744  03E1  00A7               	movwf	?_printf+2
  5745  03E2  0841               	movf	??_can_dump_registers+1,w
  5746  03E3  00A8               	movwf	?_printf+3
  5747  03E4  3185  25B0  3182   	fcall	_printf
  5748                           
  5749                           ;mcp2515.c: 332: printf("CANSTAT: %02x\n", read_register(0x0e));
  5750  03E7  3028               	movlw	low (STR_19| (0+32768))
  5751  03E8  0020               	movlb	0	; select bank0
  5752  03E9  00A5               	movwf	printf@f
  5753  03EA  3093               	movlw	high (STR_19| (0+32768))
  5754  03EB  00A6               	movwf	printf@f+1
  5755  03EC  300E               	movlw	14
  5756  03ED  318C  24E0  3182   	fcall	_read_register
  5757  03F0  0020               	movlb	0	; select bank0
  5758  03F1  00C0               	movwf	??_can_dump_registers
  5759  03F2  01C1               	clrf	??_can_dump_registers+1
  5760  03F3  0840               	movf	??_can_dump_registers,w
  5761  03F4  00A7               	movwf	?_printf+2
  5762  03F5  0841               	movf	??_can_dump_registers+1,w
  5763  03F6  00A8               	movwf	?_printf+3
  5764  03F7  3185  25B0  3182   	fcall	_printf
  5765                           
  5766                           ;mcp2515.c: 333: printf("---\n");
  5767  03FA  30F6               	movlw	low ((STR_7+18)| (0+32768))
  5768  03FB  0020               	movlb	0	; select bank0
  5769  03FC  00A5               	movwf	printf@f
  5770  03FD  3091               	movlw	high ((STR_7+18)| (0+32768))
  5771  03FE  00A6               	movwf	printf@f+1
  5772  03FF  3185  25B0         	fcall	_printf
  5773  0401  0008               	return
  5774  0402                     __end_of_can_dump_registers:	
  5775                           
  5776                           	psect	text11
  5777  0CE0                     __ptext11:	
  5778 ;; *************** function _read_register *****************
  5779 ;; Defined at:
  5780 ;;		line 292 in file "mcp2515.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  addr            1    wreg     unsigned char 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  addr            1    1[BANK0 ] unsigned char 
  5785 ;;  read_buf        3    2[BANK0 ] unsigned char [3]
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      unsigned char 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;Total ram usage:        5 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    3
  5802 ;; This function calls:
  5803 ;;		_SPI_exchange
  5804 ;; This function is called by:
  5805 ;;		_can_dump_registers
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           
  5810                           ;psect for function _read_register
  5811  0CE0                     _read_register:	
  5812                           
  5813                           ;incstack = 0
  5814                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5815                           ;read_register@addr stored from wreg
  5816  0CE0  0020               	movlb	0	; select bank0
  5817  0CE1  00A1               	movwf	read_register@addr
  5818                           
  5819                           ;mcp2515.c: 293: uint8_t read_buf[3];
  5820                           ;mcp2515.c: 294: read_buf[0] = 0b00000011;
  5821  0CE2  3003               	movlw	3
  5822  0CE3  00A0               	movwf	??_read_register
  5823  0CE4  0820               	movf	??_read_register,w
  5824  0CE5  00A2               	movwf	read_register@read_buf
  5825                           
  5826                           ;mcp2515.c: 295: read_buf[1] = addr;
  5827  0CE6  0821               	movf	read_register@addr,w
  5828  0CE7  00A0               	movwf	??_read_register
  5829  0CE8  0820               	movf	??_read_register,w
  5830  0CE9  00A3               	movwf	read_register@read_buf+1
  5831                           
  5832                           ;mcp2515.c: 296: read_buf[2] = 0x00;
  5833  0CEA  01A4               	clrf	read_register@read_buf+2
  5834                           
  5835                           ;mcp2515.c: 297: SPI_exchange(read_buf, 3);
  5836  0CEB  3003               	movlw	3
  5837  0CEC  00A0               	movwf	??_read_register
  5838  0CED  0820               	movf	??_read_register,w
  5839  0CEE  00F8               	movwf	SPI_exchange@len
  5840  0CEF  3022               	movlw	(low (read_register@read_buf| 0))& (0+255)
  5841  0CF0  318C  24CB         	fcall	_SPI_exchange
  5842                           
  5843                           ;mcp2515.c: 298: return read_buf[2];
  5844  0CF2  0020               	movlb	0	; select bank0
  5845  0CF3  0824               	movf	read_register@read_buf+2,w
  5846  0CF4  0008               	return
  5847  0CF5                     __end_of_read_register:	
  5848                           
  5849                           	psect	text12
  5850  0D4F                     __ptext12:	
  5851 ;; *************** function _can_baudrate *****************
  5852 ;; Defined at:
  5853 ;;		line 274 in file "mcp2515.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  bpr             1    wreg     unsigned char 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  bpr             1   41[BANK0 ] unsigned char 
  5858 ;;  cnf1_buf        4   44[BANK0 ] unsigned char [4]
  5859 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  5860 ;;  mask            1   42[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      unsigned char 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;Total ram usage:        9 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    4
  5877 ;; This function calls:
  5878 ;;		_SPI_exchange
  5879 ;;		_can_ope_mode
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function _can_baudrate
  5887  0D4F                     _can_baudrate:	
  5888                           
  5889                           ;incstack = 0
  5890                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5891                           ;can_baudrate@bpr stored from wreg
  5892  0D4F  0020               	movlb	0	; select bank0
  5893  0D50  00C9               	movwf	can_baudrate@bpr
  5894                           
  5895                           ;mcp2515.c: 275: can_ope_mode(0b10000000);
  5896  0D51  3080               	movlw	128
  5897  0D52  318E  260A  318D   	fcall	_can_ope_mode
  5898                           
  5899                           ;mcp2515.c: 277: uint8_t mask = 0b00111111;
  5900  0D55  303F               	movlw	63
  5901  0D56  0020               	movlb	0	; select bank0
  5902  0D57  00C7               	movwf	??_can_baudrate
  5903  0D58  0847               	movf	??_can_baudrate,w
  5904  0D59  00CA               	movwf	can_baudrate@mask
  5905                           
  5906                           ;mcp2515.c: 278: uint8_t cnf1_buf[4];
  5907                           ;mcp2515.c: 279: cnf1_buf[0] = 0b00000101;
  5908  0D5A  3005               	movlw	5
  5909  0D5B  00C7               	movwf	??_can_baudrate
  5910  0D5C  0847               	movf	??_can_baudrate,w
  5911  0D5D  00CC               	movwf	can_baudrate@cnf1_buf
  5912                           
  5913                           ;mcp2515.c: 280: cnf1_buf[1] = 0x2a;
  5914  0D5E  302A               	movlw	42
  5915  0D5F  00C7               	movwf	??_can_baudrate
  5916  0D60  0847               	movf	??_can_baudrate,w
  5917  0D61  00CD               	movwf	can_baudrate@cnf1_buf+1
  5918                           
  5919                           ;mcp2515.c: 281: cnf1_buf[2] = mask;
  5920  0D62  084A               	movf	can_baudrate@mask,w
  5921  0D63  00C7               	movwf	??_can_baudrate
  5922  0D64  0847               	movf	??_can_baudrate,w
  5923  0D65  00CE               	movwf	can_baudrate@cnf1_buf+2
  5924                           
  5925                           ;mcp2515.c: 282: cnf1_buf[3] = bpr;
  5926  0D66  0849               	movf	can_baudrate@bpr,w
  5927  0D67  00C7               	movwf	??_can_baudrate
  5928  0D68  0847               	movf	??_can_baudrate,w
  5929  0D69  00CF               	movwf	can_baudrate@cnf1_buf+3
  5930                           
  5931                           ;mcp2515.c: 283: uint8_t bytes_written = SPI_exchange(cnf1_buf, 4);
  5932  0D6A  3004               	movlw	4
  5933  0D6B  00C7               	movwf	??_can_baudrate
  5934  0D6C  0847               	movf	??_can_baudrate,w
  5935  0D6D  00F8               	movwf	SPI_exchange@len
  5936  0D6E  304C               	movlw	(low (can_baudrate@cnf1_buf| 0))& (0+255)
  5937  0D6F  318C  24CB  318D   	fcall	_SPI_exchange
  5938  0D72  0020               	movlb	0	; select bank0
  5939  0D73  00C8               	movwf	??_can_baudrate+1
  5940  0D74  0848               	movf	??_can_baudrate+1,w
  5941  0D75  00CB               	movwf	can_baudrate@bytes_written
  5942                           
  5943                           ;mcp2515.c: 284: can_ope_mode(operation_mode);
  5944  0D76  086F               	movf	_operation_mode,w
  5945  0D77  318E  260A         	fcall	_can_ope_mode
  5946                           
  5947                           ;mcp2515.c: 288: return 0;
  5948                           ;	Return value of _can_baudrate is never used
  5949                           
  5950                           ;mcp2515.c: 287: } else {
  5951                           
  5952                           ;mcp2515.c: 286: return 1;
  5953                           ;	Return value of _can_baudrate is never used
  5954  0D79  0008               	return
  5955  0D7A                     __end_of_can_baudrate:	
  5956                           
  5957                           	psect	text13
  5958  0E0A                     __ptext13:	
  5959 ;; *************** function _can_ope_mode *****************
  5960 ;; Defined at:
  5961 ;;		line 64 in file "mcp2515.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  ope_mode        1    wreg     unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  5966 ;;  can_ctrl_buf    3   35[BANK0 ] unsigned char [3]
  5967 ;;  bytes_writte    1   34[BANK0 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      unsigned char 
  5970 ;; Registers used:
  5971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        7 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    3
  5984 ;; This function calls:
  5985 ;;		_SPI_exchange
  5986 ;;		_printf
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;;		_can_init
  5990 ;;		_can_set_mask
  5991 ;;		_can_baudrate
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _can_ope_mode
  5997  0E0A                     _can_ope_mode:	
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6001                           ;can_ope_mode@ope_mode stored from wreg
  6002  0E0A  0020               	movlb	0	; select bank0
  6003  0E0B  00C6               	movwf	can_ope_mode@ope_mode
  6004                           
  6005                           ;mcp2515.c: 65: uint8_t can_ctrl_buf[3];
  6006                           ;mcp2515.c: 66: can_ctrl_buf[0] = 0b00000010;
  6007  0E0C  3002               	movlw	2
  6008  0E0D  00C0               	movwf	??_can_ope_mode
  6009  0E0E  0840               	movf	??_can_ope_mode,w
  6010  0E0F  00C3               	movwf	can_ope_mode@can_ctrl_buf
  6011                           
  6012                           ;mcp2515.c: 67: can_ctrl_buf[1] = 0x0f;
  6013  0E10  300F               	movlw	15
  6014  0E11  00C0               	movwf	??_can_ope_mode
  6015  0E12  0840               	movf	??_can_ope_mode,w
  6016  0E13  00C4               	movwf	can_ope_mode@can_ctrl_buf+1
  6017                           
  6018                           ;mcp2515.c: 68: can_ctrl_buf[2] = ope_mode;
  6019  0E14  0846               	movf	can_ope_mode@ope_mode,w
  6020  0E15  00C0               	movwf	??_can_ope_mode
  6021  0E16  0840               	movf	??_can_ope_mode,w
  6022  0E17  00C5               	movwf	can_ope_mode@can_ctrl_buf+2
  6023                           
  6024                           ;mcp2515.c: 69: uint8_t bytes_written = SPI_exchange(can_ctrl_buf, 3);
  6025  0E18  3003               	movlw	3
  6026  0E19  00C0               	movwf	??_can_ope_mode
  6027  0E1A  0840               	movf	??_can_ope_mode,w
  6028  0E1B  00F8               	movwf	SPI_exchange@len
  6029  0E1C  3043               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  6030  0E1D  318C  24CB  318E   	fcall	_SPI_exchange
  6031  0E20  0020               	movlb	0	; select bank0
  6032  0E21  00C1               	movwf	??_can_ope_mode+1
  6033  0E22  0841               	movf	??_can_ope_mode+1,w
  6034  0E23  00C2               	movwf	can_ope_mode@bytes_written
  6035                           
  6036                           ;mcp2515.c: 71: if (ope_mode != 0b10000000) operation_mode = ope_mode;
  6037  0E24  3080               	movlw	128
  6038  0E25  0646               	xorwf	can_ope_mode@ope_mode,w
  6039  0E26  1903               	btfsc	3,2
  6040  0E27  2E2C               	goto	l2121
  6041  0E28  0846               	movf	can_ope_mode@ope_mode,w
  6042  0E29  00C0               	movwf	??_can_ope_mode
  6043  0E2A  0840               	movf	??_can_ope_mode,w
  6044  0E2B  00EF               	movwf	_operation_mode
  6045  0E2C                     l2121:	
  6046                           
  6047                           ;mcp2515.c: 73: if (bytes_written == 3) {
  6048  0E2C  3003               	movlw	3
  6049  0E2D  0642               	xorwf	can_ope_mode@bytes_written,w
  6050  0E2E  1D03               	btfss	3,2
  6051  0E2F  0008               	return
  6052                           
  6053                           ;mcp2515.c: 74: can_ctrl_buf[0] = 0b00000011;
  6054  0E30  3003               	movlw	3
  6055  0E31  00C0               	movwf	??_can_ope_mode
  6056  0E32  0840               	movf	??_can_ope_mode,w
  6057  0E33  00C3               	movwf	can_ope_mode@can_ctrl_buf
  6058                           
  6059                           ;mcp2515.c: 75: can_ctrl_buf[1] = 0x0e;
  6060  0E34  300E               	movlw	14
  6061  0E35  00C0               	movwf	??_can_ope_mode
  6062  0E36  0840               	movf	??_can_ope_mode,w
  6063  0E37  00C4               	movwf	can_ope_mode@can_ctrl_buf+1
  6064                           
  6065                           ;mcp2515.c: 76: bytes_written = SPI_exchange(can_ctrl_buf, 3);
  6066  0E38  3003               	movlw	3
  6067  0E39  00C0               	movwf	??_can_ope_mode
  6068  0E3A  0840               	movf	??_can_ope_mode,w
  6069  0E3B  00F8               	movwf	SPI_exchange@len
  6070  0E3C  3043               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  6071  0E3D  318C  24CB  318E   	fcall	_SPI_exchange
  6072  0E40  0020               	movlb	0	; select bank0
  6073  0E41  00C1               	movwf	??_can_ope_mode+1
  6074  0E42  0841               	movf	??_can_ope_mode+1,w
  6075  0E43  00C2               	movwf	can_ope_mode@bytes_written
  6076                           
  6077                           ;mcp2515.c: 77: if (mode.debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  6078  0E44  0869               	movf	_mode,w
  6079  0E45  1903               	btfsc	3,2
  6080  0E46  0008               	return
  6081  0E47  3028               	movlw	low (STR_19| (0+32768))
  6082  0E48  00A5               	movwf	printf@f
  6083  0E49  3093               	movlw	high (STR_19| (0+32768))
  6084  0E4A  00A6               	movwf	printf@f+1
  6085  0E4B  0845               	movf	can_ope_mode@can_ctrl_buf+2,w
  6086  0E4C  00C0               	movwf	??_can_ope_mode
  6087  0E4D  01C1               	clrf	??_can_ope_mode+1
  6088  0E4E  0840               	movf	??_can_ope_mode,w
  6089  0E4F  00A7               	movwf	?_printf+2
  6090  0E50  0841               	movf	??_can_ope_mode+1,w
  6091  0E51  00A8               	movwf	?_printf+3
  6092  0E52  3185  25B0         	fcall	_printf
  6093                           
  6094                           ;mcp2515.c: 80: return 0;
  6095                           ;	Return value of _can_ope_mode is never used
  6096                           
  6097                           ;mcp2515.c: 79: } else {
  6098                           
  6099                           ;mcp2515.c: 78: return 1;
  6100                           ;	Return value of _can_ope_mode is never used
  6101  0E54  0008               	return
  6102  0E55                     __end_of_can_ope_mode:	
  6103                           
  6104                           	psect	text14
  6105  05B0                     __ptext14:	
  6106 ;; *************** function _printf *****************
  6107 ;; Defined at:
  6108 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  f               2    5[BANK0 ] PTR const unsigned char 
  6111 ;;		 -> STR_52(5), STR_51(15), STR_50(15), STR_49(2), 
  6112 ;;		 -> STR_48(32), STR_47(32), STR_46(2), STR_45(12), 
  6113 ;;		 -> STR_44(12), STR_43(12), STR_42(2), STR_41(12), 
  6114 ;;		 -> STR_40(12), STR_39(5), STR_38(13), STR_37(13), 
  6115 ;;		 -> STR_36(18), STR_35(17), STR_34(17), STR_33(20), 
  6116 ;;		 -> STR_32(14), STR_31(14), STR_30(14), STR_29(15), 
  6117 ;;		 -> STR_28(16), STR_27(17), STR_26(17), STR_25(17), 
  6118 ;;		 -> STR_24(17), STR_23(17), STR_22(17), STR_21(23), 
  6119 ;;		 -> STR_20(21), STR_19(15), STR_18(22), STR_17(44), 
  6120 ;;		 -> STR_16(26), STR_15(21), STR_14(25), STR_13(42), 
  6121 ;;		 -> STR_12(38), STR_11(58), STR_10(54), STR_9(59), 
  6122 ;;		 -> STR_8(51), STR_7(23), STR_6(3), STR_5(4), 
  6123 ;;		 -> STR_4(2), STR_3(6), STR_2(6), STR_1(7), 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  idx             1   19[BANK0 ] unsigned char 
  6126 ;;  tmpval          4    0        struct .
  6127 ;;  width           2   29[BANK0 ] int 
  6128 ;;  val             2   26[BANK0 ] unsigned int 
  6129 ;;  len             2   23[BANK0 ] unsigned int 
  6130 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  6131 ;;		 -> STR_53(7), printf@c(1), receive@rx_buf(15), main@buf(9), 
  6132 ;;  c               1   31[BANK0 ] char 
  6133 ;;  flag            1   28[BANK0 ] unsigned char 
  6134 ;;  ap              1   25[BANK0 ] PTR void [1]
  6135 ;;		 -> ?_printf(2), 
  6136 ;;  prec            1   20[BANK0 ] char 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  2    5[BANK0 ] int 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6146 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;Total ram usage:       27 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    2
  6153 ;; This function calls:
  6154 ;;		___lwdiv
  6155 ;;		___lwmod
  6156 ;;		___wmul
  6157 ;;		_isdigit
  6158 ;;		_putch
  6159 ;; This function is called by:
  6160 ;;		_receive_handler
  6161 ;;		_main
  6162 ;;		_can_ope_mode
  6163 ;;		_can_set_mask
  6164 ;;		_receive
  6165 ;;		_can_send
  6166 ;;		_can_status_check
  6167 ;;		_can_dump_registers
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _printf
  6173  05B0                     _printf:	
  6174                           
  6175                           ;doprnt.c: 466: va_list ap;
  6176                           ;doprnt.c: 499: signed char c;
  6177                           ;doprnt.c: 501: int width;
  6178                           ;doprnt.c: 506: signed char prec;
  6179                           ;doprnt.c: 508: unsigned char flag;
  6180                           ;doprnt.c: 523: union {
  6181                           ;doprnt.c: 524: unsigned long vd;
  6182                           ;doprnt.c: 525: double integ;
  6183                           ;doprnt.c: 526: } tmpval;
  6184                           ;doprnt.c: 528: unsigned int val;
  6185                           ;doprnt.c: 529: unsigned len;
  6186                           ;doprnt.c: 530: const char * cp;
  6187                           ;doprnt.c: 533: *ap = __va_start();
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6191  05B0  3027               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6192  05B1  0020               	movlb	0	; select bank0
  6193  05B2  00AF               	movwf	??_printf
  6194  05B3  082F               	movf	??_printf,w
  6195  05B4  00B9               	movwf	printf@ap
  6196  05B5                     l2043:	
  6197                           ;doprnt.c: 536: while(c = *f++) {
  6198                           
  6199  05B5  0020               	movlb	0	; select bank0
  6200  05B6  0826               	movf	printf@f+1,w
  6201  05B7  00B0               	movwf	??_printf+1
  6202  05B8  0825               	movf	printf@f,w
  6203  05B9  00AF               	movwf	??_printf
  6204  05BA  0AA5               	incf	printf@f,f
  6205  05BB  1903               	skipnz
  6206  05BC  0AA6               	incf	printf@f+1,f
  6207  05BD  082F               	movf	??_printf,w
  6208  05BE  0084               	movwf	4
  6209  05BF  0830               	movf	??_printf+1,w
  6210  05C0  0085               	movwf	5
  6211  05C1  0800               	movf	0,w	;code access
  6212  05C2  00B1               	movwf	??_printf+2
  6213  05C3  0831               	movf	??_printf+2,w
  6214  05C4  00BF               	movwf	printf@c
  6215  05C5  083F               	movf	printf@c,w
  6216  05C6  1903               	btfsc	3,2
  6217  05C7  0008               	return
  6218                           
  6219                           ;doprnt.c: 538: if(c != '%')
  6220  05C8  3025               	movlw	37
  6221  05C9  063F               	xorwf	printf@c,w
  6222  05CA  1903               	btfsc	3,2
  6223  05CB  2DD1               	goto	l1895
  6224                           
  6225                           ;doprnt.c: 540: {
  6226                           ;doprnt.c: 541: (putch(c) );
  6227  05CC  083F               	movf	printf@c,w
  6228  05CD  318C  245B  3185   	fcall	_putch
  6229                           
  6230                           ;doprnt.c: 542: continue;
  6231  05D0  2DB5               	goto	l2043
  6232  05D1                     l1895:	
  6233                           
  6234                           ;doprnt.c: 543: }
  6235                           ;doprnt.c: 546: width = 0;
  6236  05D1  0020               	movlb	0	; select bank0
  6237  05D2  01BD               	clrf	printf@width
  6238  05D3  01BE               	clrf	printf@width+1
  6239                           
  6240                           ;doprnt.c: 548: flag = 0;
  6241  05D4  01BC               	clrf	printf@flag
  6242                           
  6243                           ;doprnt.c: 551: switch(*f) {
  6244                           
  6245                           ;doprnt.c: 550: for(;;) {
  6246  05D5  2DDB               	goto	l1901
  6247  05D6                     l383:	
  6248                           ;doprnt.c: 579: case '0':
  6249                           
  6250                           
  6251                           ;doprnt.c: 580: flag |= 0x04;
  6252  05D6  153C               	bsf	printf@flag,2
  6253                           
  6254                           ;doprnt.c: 581: f++;
  6255  05D7  3001               	movlw	1
  6256  05D8  07A5               	addwf	printf@f,f
  6257  05D9  3000               	movlw	0
  6258  05DA  3DA6               	addwfc	printf@f+1,f
  6259  05DB                     l1901:	
  6260                           ;doprnt.c: 584: }
  6261                           
  6262                           ;doprnt.c: 582: continue;
  6263                           
  6264  05DB  0825               	movf	printf@f,w
  6265  05DC  0084               	movwf	4
  6266  05DD  0826               	movf	printf@f+1,w
  6267  05DE  0085               	movwf	5
  6268  05DF  0800               	movf	0,w	;code access
  6269                           
  6270                           ; Switch size 1, requested type "space"
  6271                           ; Number of cases is 1, Range of values is 48 to 48
  6272                           ; switch strategies available:
  6273                           ; Name         Instructions Cycles
  6274                           ; simple_byte            4     3 (average)
  6275                           ; direct_byte           11     9 (fixed)
  6276                           ; jumptable            263     9 (fixed)
  6277                           ;	Chosen strategy is simple_byte
  6278  05E0  3A30               	xorlw	48	; case 48
  6279  05E1  1903               	skipnz
  6280  05E2  2DD6               	goto	l383
  6281  05E3  2DE4               	goto	l1903
  6282  05E4                     l1903:	
  6283                           ;doprnt.c: 586: }
  6284                           
  6285                           ;doprnt.c: 585: break;
  6286                           
  6287                           
  6288                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6289  05E4  0825               	movf	printf@f,w
  6290  05E5  0084               	movwf	4
  6291  05E6  0826               	movf	printf@f+1,w
  6292  05E7  0085               	movwf	5
  6293  05E8  0800               	movf	0,w	;code access
  6294  05E9  318C  24AE  3185   	fcall	_isdigit
  6295  05EC  1C03               	btfss	3,0
  6296  05ED  2E8F               	goto	l1955
  6297                           
  6298                           ;doprnt.c: 598: width = 0;
  6299  05EE  0020               	movlb	0	; select bank0
  6300  05EF  01BD               	clrf	printf@width
  6301  05F0  01BE               	clrf	printf@width+1
  6302  05F1                     l1907:	
  6303                           ;doprnt.c: 599: do {
  6304                           
  6305                           
  6306                           ;doprnt.c: 600: width *= 10;
  6307  05F1  300A               	movlw	10
  6308  05F2  00F0               	movwf	___wmul@multiplier
  6309  05F3  3000               	movlw	0
  6310  05F4  00F1               	movwf	___wmul@multiplier+1
  6311  05F5  0020               	movlb	0	; select bank0
  6312  05F6  083E               	movf	printf@width+1,w
  6313  05F7  00F3               	movwf	___wmul@multiplicand+1
  6314  05F8  083D               	movf	printf@width,w
  6315  05F9  00F2               	movwf	___wmul@multiplicand
  6316  05FA  318D  250C  3185   	fcall	___wmul
  6317  05FD  0871               	movf	?___wmul+1,w
  6318  05FE  0020               	movlb	0	; select bank0
  6319  05FF  00BE               	movwf	printf@width+1
  6320  0600  0870               	movf	?___wmul,w
  6321  0601  00BD               	movwf	printf@width
  6322                           
  6323                           ;doprnt.c: 601: width += *f++ - '0';
  6324  0602  0825               	movf	printf@f,w
  6325  0603  0084               	movwf	4
  6326  0604  0826               	movf	printf@f+1,w
  6327  0605  0085               	movwf	5
  6328  0606  0800               	movf	0,w	;code access
  6329  0607  3ED0               	addlw	208
  6330  0608  00AF               	movwf	??_printf
  6331  0609  30FF               	movlw	255
  6332  060A  1803               	skipnc
  6333  060B  3000               	movlw	0
  6334  060C  00B0               	movwf	??_printf+1
  6335  060D  082F               	movf	??_printf,w
  6336  060E  07BD               	addwf	printf@width,f
  6337  060F  0830               	movf	??_printf+1,w
  6338  0610  3DBE               	addwfc	printf@width+1,f
  6339  0611  3001               	movlw	1
  6340  0612  07A5               	addwf	printf@f,f
  6341  0613  3000               	movlw	0
  6342  0614  3DA6               	addwfc	printf@f+1,f
  6343                           
  6344                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6345  0615  0825               	movf	printf@f,w
  6346  0616  0084               	movwf	4
  6347  0617  0826               	movf	printf@f+1,w
  6348  0618  0085               	movwf	5
  6349  0619  0800               	movf	0,w	;code access
  6350  061A  318C  24AE  3185   	fcall	_isdigit
  6351  061D  1C03               	btfss	3,0
  6352  061E  2E8F               	goto	l1955
  6353  061F  2DF1               	goto	l1907
  6354  0620                     l396:	
  6355                           ;doprnt.c: 718: case 'x':
  6356                           
  6357                           ;doprnt.c: 698: case 'i':
  6358                           ;doprnt.c: 699: break;
  6359                           
  6360                           ;doprnt.c: 697: case 'd':
  6361                           
  6362                           ;doprnt.c: 638: goto alldone;
  6363                           
  6364                           ;doprnt.c: 637: case 0:
  6365                           
  6366                           ;doprnt.c: 608: }
  6367                           ;doprnt.c: 635: switch(c = *f++) {
  6368                           
  6369                           
  6370                           ;doprnt.c: 721: flag |= 0x80;
  6371  0620  17BC               	bsf	printf@flag,7
  6372                           
  6373                           ;doprnt.c: 723: break;
  6374  0621  2EB0               	goto	l395
  6375  0622                     l1915:	
  6376                           ;doprnt.c: 728: case 's':
  6377                           
  6378                           
  6379                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6380  0622  0839               	movf	printf@ap,w
  6381  0623  0086               	movwf	6
  6382  0624  0187               	clrf	7
  6383  0625  0801               	movf	1,w
  6384  0626  00B5               	movwf	printf@cp
  6385  0627  3000               	movlw	0
  6386  0628  00B6               	movwf	printf@cp+1
  6387  0629  3001               	movlw	1
  6388  062A  00AF               	movwf	??_printf
  6389  062B  082F               	movf	??_printf,w
  6390  062C  07B9               	addwf	printf@ap,f
  6391                           
  6392                           ;doprnt.c: 740: if(!cp)
  6393  062D  0835               	movf	printf@cp,w
  6394  062E  0436               	iorwf	printf@cp+1,w
  6395  062F  1D03               	btfss	3,2
  6396  0630  2E35               	goto	l1923
  6397                           
  6398                           ;doprnt.c: 741: cp = "(null)";
  6399  0631  30B1               	movlw	low (STR_53| (0+32768))
  6400  0632  00B5               	movwf	printf@cp
  6401  0633  3093               	movlw	high (STR_53| (0+32768))
  6402  0634  00B6               	movwf	printf@cp+1
  6403  0635                     l1923:	
  6404                           
  6405                           ;doprnt.c: 745: len = 0;
  6406  0635  01B7               	clrf	printf@len
  6407  0636  01B8               	clrf	printf@len+1
  6408  0637                     l1927:	
  6409                           ;doprnt.c: 746: while(cp[len])
  6410                           
  6411  0637  0835               	movf	printf@cp,w
  6412  0638  0737               	addwf	printf@len,w
  6413  0639  0084               	movwf	4
  6414  063A  0836               	movf	printf@cp+1,w
  6415  063B  3D38               	addwfc	printf@len+1,w
  6416  063C  0085               	movwf	5
  6417  063D  0012               	moviw fsr0++
  6418  063E  1903               	btfsc	3,2
  6419  063F  2E45               	goto	l1929
  6420                           
  6421                           ;doprnt.c: 747: len++;
  6422  0640  3001               	movlw	1
  6423  0641  07B7               	addwf	printf@len,f
  6424  0642  3000               	movlw	0
  6425  0643  3DB8               	addwfc	printf@len+1,f
  6426  0644  2E37               	goto	l1927
  6427  0645                     l1929:	
  6428                           ;doprnt.c: 750: dostring:
  6429                           
  6430                           
  6431                           ;doprnt.c: 757: if(width > len)
  6432  0645  083E               	movf	printf@width+1,w
  6433  0646  0238               	subwf	printf@len+1,w
  6434  0647  1D03               	skipz
  6435  0648  2E4B               	goto	u1595
  6436  0649  083D               	movf	printf@width,w
  6437  064A  0237               	subwf	printf@len,w
  6438  064B                     u1595:	
  6439  064B  1803               	skipnc
  6440  064C  2E52               	goto	l1933
  6441                           
  6442                           ;doprnt.c: 758: width -= len;
  6443  064D  0837               	movf	printf@len,w
  6444  064E  02BD               	subwf	printf@width,f
  6445  064F  0838               	movf	printf@len+1,w
  6446  0650  3BBE               	subwfb	printf@width+1,f
  6447  0651  2E54               	goto	l1937
  6448  0652                     l1933:	
  6449                           
  6450                           ;doprnt.c: 759: else
  6451                           ;doprnt.c: 760: width = 0;
  6452  0652  01BD               	clrf	printf@width
  6453  0653  01BE               	clrf	printf@width+1
  6454  0654                     l1937:	
  6455                           ;doprnt.c: 764: while(width--)
  6456                           
  6457  0654  30FF               	movlw	255
  6458  0655  0020               	movlb	0	; select bank0
  6459  0656  07BD               	addwf	printf@width,f
  6460  0657  30FF               	movlw	255
  6461  0658  3DBE               	addwfc	printf@width+1,f
  6462  0659  0A3D               	incf	printf@width,w
  6463  065A  1903               	btfsc	3,2
  6464  065B  0A3E               	incf	printf@width+1,w
  6465  065C  1903               	btfsc	3,2
  6466  065D  2E70               	goto	l1943
  6467                           
  6468                           ;doprnt.c: 765: (putch(' ') );
  6469  065E  3020               	movlw	32
  6470  065F  318C  245B  3185   	fcall	_putch
  6471  0662  2E54               	goto	l1937
  6472  0663                     l1939:	
  6473                           ;doprnt.c: 767: while(len--)
  6474                           
  6475                           
  6476                           ;doprnt.c: 768: (putch(*cp++) );
  6477  0663  0835               	movf	printf@cp,w
  6478  0664  0084               	movwf	4
  6479  0665  0836               	movf	printf@cp+1,w
  6480  0666  0085               	movwf	5
  6481  0667  0800               	movf	0,w	;code access
  6482  0668  318C  245B  3185   	fcall	_putch
  6483  066B  3001               	movlw	1
  6484  066C  0020               	movlb	0	; select bank0
  6485  066D  07B5               	addwf	printf@cp,f
  6486  066E  3000               	movlw	0
  6487  066F  3DB6               	addwfc	printf@cp+1,f
  6488  0670                     l1943:	
  6489  0670  3001               	movlw	1
  6490  0671  02B7               	subwf	printf@len,f
  6491  0672  3000               	movlw	0
  6492  0673  3BB8               	subwfb	printf@len+1,f
  6493  0674  0A37               	incf	printf@len,w
  6494  0675  1D03               	skipz
  6495  0676  2E63               	goto	l1939
  6496  0677  0A38               	incf	printf@len+1,w
  6497  0678  1903               	btfsc	3,2
  6498  0679  2DB5               	goto	l2043
  6499  067A  2E63               	goto	l1939
  6500  067B                     l1945:	
  6501                           ;doprnt.c: 784: case 'c':
  6502                           
  6503                           ;doprnt.c: 774: continue;
  6504                           
  6505                           
  6506                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6507  067B  0839               	movf	printf@ap,w
  6508  067C  0086               	movwf	6
  6509  067D  0187               	clrf	7
  6510  067E  0801               	movf	1,w
  6511  067F  00AF               	movwf	??_printf
  6512  0680  082F               	movf	??_printf,w
  6513  0681  00BF               	movwf	printf@c
  6514  0682  3002               	movlw	2
  6515  0683  00AF               	movwf	??_printf
  6516  0684  082F               	movf	??_printf,w
  6517  0685  07B9               	addwf	printf@ap,f
  6518  0686                     l1949:	
  6519                           ;doprnt.c: 802: default:
  6520                           
  6521                           
  6522                           ;doprnt.c: 805: cp = (char *)&c;
  6523  0686  303F               	movlw	low printf@c
  6524  0687  00B5               	movwf	printf@cp
  6525  0688  3000               	movlw	high printf@c
  6526  0689  00B6               	movwf	printf@cp+1
  6527                           
  6528                           ;doprnt.c: 806: len = 1;
  6529  068A  3001               	movlw	1
  6530  068B  00B7               	movwf	printf@len
  6531  068C  3000               	movlw	0
  6532  068D  00B8               	movwf	printf@len+1
  6533                           
  6534                           ;doprnt.c: 807: goto dostring;
  6535  068E  2E45               	goto	l1929
  6536  068F                     l1955:	
  6537                           ;doprnt.c: 822: }
  6538                           
  6539  068F  0020               	movlb	0	; select bank0
  6540  0690  0826               	movf	printf@f+1,w
  6541  0691  00B0               	movwf	??_printf+1
  6542  0692  0825               	movf	printf@f,w
  6543  0693  00AF               	movwf	??_printf
  6544  0694  0AA5               	incf	printf@f,f
  6545  0695  1903               	skipnz
  6546  0696  0AA6               	incf	printf@f+1,f
  6547  0697  082F               	movf	??_printf,w
  6548  0698  0084               	movwf	4
  6549  0699  0830               	movf	??_printf+1,w
  6550  069A  0085               	movwf	5
  6551  069B  0800               	movf	0,w	;code access
  6552  069C  00BF               	movwf	printf@c
  6553                           
  6554                           ; Switch size 1, requested type "space"
  6555                           ; Number of cases is 6, Range of values is 0 to 120
  6556                           ; switch strategies available:
  6557                           ; Name         Instructions Cycles
  6558                           ; simple_byte           19    10 (average)
  6559                           ; direct_byte          248     6 (fixed)
  6560                           ; jumptable            260     6 (fixed)
  6561                           ;	Chosen strategy is simple_byte
  6562  069D  3A00               	xorlw	0	; case 0
  6563  069E  1903               	skipnz
  6564  069F  2FEA               	goto	l447
  6565  06A0  3A63               	xorlw	99	; case 99
  6566  06A1  1903               	skipnz
  6567  06A2  2E7B               	goto	l1945
  6568  06A3  3A07               	xorlw	7	; case 100
  6569  06A4  1903               	skipnz
  6570  06A5  2EB0               	goto	l395
  6571  06A6  3A0D               	xorlw	13	; case 105
  6572  06A7  1903               	skipnz
  6573  06A8  2EB0               	goto	l395
  6574  06A9  3A1A               	xorlw	26	; case 115
  6575  06AA  1903               	skipnz
  6576  06AB  2E22               	goto	l1915
  6577  06AC  3A0B               	xorlw	11	; case 120
  6578  06AD  1903               	skipnz
  6579  06AE  2E20               	goto	l396
  6580  06AF  2E86               	goto	l1949
  6581  06B0                     l395:	
  6582                           
  6583                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6584  06B0  0020               	movlb	0	; select bank0
  6585  06B1  1BBC               	btfsc	printf@flag,7
  6586  06B2  2ECA               	goto	l1967
  6587                           
  6588                           ;doprnt.c: 1253: {
  6589                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6590  06B3  0839               	movf	printf@ap,w
  6591  06B4  0086               	movwf	6
  6592  06B5  0187               	clrf	7
  6593  06B6  3F40               	moviw [0]fsr1
  6594  06B7  00BA               	movwf	printf@val
  6595  06B8  3F41               	moviw [1]fsr1
  6596  06B9  00BB               	movwf	printf@val+1
  6597  06BA  3002               	movlw	2
  6598  06BB  00AF               	movwf	??_printf
  6599  06BC  082F               	movf	??_printf,w
  6600  06BD  07B9               	addwf	printf@ap,f
  6601                           
  6602                           ;doprnt.c: 1261: if((int)val < 0) {
  6603  06BE  1FBB               	btfss	printf@val+1,7
  6604  06BF  2F1A               	goto	l1993
  6605                           
  6606                           ;doprnt.c: 1262: flag |= 0x03;
  6607  06C0  3003               	movlw	3
  6608  06C1  00AF               	movwf	??_printf
  6609  06C2  082F               	movf	??_printf,w
  6610  06C3  04BC               	iorwf	printf@flag,f
  6611                           
  6612                           ;doprnt.c: 1263: val = -val;
  6613  06C4  09BA               	comf	printf@val,f
  6614  06C5  09BB               	comf	printf@val+1,f
  6615  06C6  0ABA               	incf	printf@val,f
  6616  06C7  1903               	skipnz
  6617  06C8  0ABB               	incf	printf@val+1,f
  6618                           
  6619                           ;doprnt.c: 1264: }
  6620                           ;doprnt.c: 1266: }
  6621  06C9  2F1A               	goto	l1993
  6622  06CA                     l1967:	
  6623                           
  6624                           ;doprnt.c: 1268: else
  6625                           ;doprnt.c: 1273: {
  6626                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6627  06CA  0839               	movf	printf@ap,w
  6628  06CB  0086               	movwf	6
  6629  06CC  0187               	clrf	7
  6630  06CD  3F40               	moviw [0]fsr1
  6631  06CE  00BA               	movwf	printf@val
  6632  06CF  3F41               	moviw [1]fsr1
  6633  06D0  00BB               	movwf	printf@val+1
  6634  06D1  3002               	movlw	2
  6635  06D2  00AF               	movwf	??_printf
  6636  06D3  082F               	movf	??_printf,w
  6637  06D4  07B9               	addwf	printf@ap,f
  6638                           
  6639                           ;doprnt.c: 1287: }
  6640                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6641  06D5  2F1A               	goto	l1993
  6642  06D6                     l417:	
  6643                           ;doprnt.c: 1299: case 0x00:
  6644                           
  6645                           
  6646                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6647  06D6  01BF               	clrf	printf@c
  6648  06D7  0ABF               	incf	printf@c,f
  6649  06D8                     L10:	
  6650  06D8  3005               	movlw	5
  6651  06D9  063F               	xorwf	printf@c,w
  6652  06DA  1903               	btfsc	3,2
  6653  06DB  2F23               	goto	l1995
  6654                           
  6655                           ;doprnt.c: 1306: if(val < dpowers[c])
  6656  06DC  083F               	movf	printf@c,w
  6657  06DD  00AF               	movwf	??_printf
  6658  06DE  01B0               	clrf	??_printf+1
  6659  06DF  35AF               	lslf	??_printf,f
  6660  06E0  0DB0               	rlf	??_printf+1,f
  6661  06E1  309F               	movlw	low (_dpowers| (0+32768))
  6662  06E2  072F               	addwf	??_printf,w
  6663  06E3  0084               	movwf	4
  6664  06E4  3093               	movlw	high (_dpowers| (0+32768))
  6665  06E5  3D30               	addwfc	??_printf+1,w
  6666  06E6  0085               	movwf	5
  6667  06E7  3F00               	moviw [0]fsr0
  6668  06E8  00B1               	movwf	??_printf+2
  6669  06E9  3F01               	moviw [1]fsr0
  6670  06EA  00B2               	movwf	??_printf+3
  6671  06EB  0832               	movf	??_printf+3,w
  6672  06EC  023B               	subwf	printf@val+1,w
  6673  06ED  1D03               	skipz
  6674  06EE  2EF1               	goto	u1655
  6675  06EF  0831               	movf	??_printf+2,w
  6676  06F0  023A               	subwf	printf@val,w
  6677  06F1                     u1655:	
  6678  06F1  1C03               	btfss	3,0
  6679  06F2  2F23               	goto	l1995
  6680                           
  6681                           ;doprnt.c: 1307: break;
  6682  06F3  3001               	movlw	1
  6683  06F4  00AF               	movwf	??_printf
  6684  06F5  082F               	movf	??_printf,w
  6685  06F6  07BF               	addwf	printf@c,f
  6686  06F7  2ED8               	goto	L10
  6687  06F8                     l422:	
  6688                           ;doprnt.c: 1314: case 0x80:
  6689                           
  6690                           ;doprnt.c: 1309: break;
  6691                           
  6692                           
  6693                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6694  06F8  01BF               	clrf	printf@c
  6695  06F9  0ABF               	incf	printf@c,f
  6696  06FA                     L11:	
  6697  06FA  3004               	movlw	4
  6698  06FB  063F               	xorwf	printf@c,w
  6699  06FC  1903               	btfsc	3,2
  6700  06FD  2F23               	goto	l1995
  6701                           
  6702                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6703  06FE  083F               	movf	printf@c,w
  6704  06FF  00AF               	movwf	??_printf
  6705  0700  01B0               	clrf	??_printf+1
  6706  0701  35AF               	lslf	??_printf,f
  6707  0702  0DB0               	rlf	??_printf+1,f
  6708  0703  30A9               	movlw	low (_hexpowers| (0+32768))
  6709  0704  072F               	addwf	??_printf,w
  6710  0705  0084               	movwf	4
  6711  0706  3093               	movlw	high (_hexpowers| (0+32768))
  6712  0707  3D30               	addwfc	??_printf+1,w
  6713  0708  0085               	movwf	5
  6714  0709  3F00               	moviw [0]fsr0
  6715  070A  00B1               	movwf	??_printf+2
  6716  070B  3F01               	moviw [1]fsr0
  6717  070C  00B2               	movwf	??_printf+3
  6718  070D  0832               	movf	??_printf+3,w
  6719  070E  023B               	subwf	printf@val+1,w
  6720  070F  1D03               	skipz
  6721  0710  2F13               	goto	u1685
  6722  0711  0831               	movf	??_printf+2,w
  6723  0712  023A               	subwf	printf@val,w
  6724  0713                     u1685:	
  6725  0713  1C03               	btfss	3,0
  6726  0714  2F23               	goto	l1995
  6727                           
  6728                           ;doprnt.c: 1318: break;
  6729  0715  3001               	movlw	1
  6730  0716  00AF               	movwf	??_printf
  6731  0717  082F               	movf	??_printf,w
  6732  0718  07BF               	addwf	printf@c,f
  6733  0719  2EFA               	goto	L11
  6734  071A                     l1993:	
  6735                           ;doprnt.c: 1336: }
  6736                           
  6737                           ;doprnt.c: 1320: break;
  6738                           
  6739  071A  083C               	movf	printf@flag,w
  6740  071B  3980               	andlw	128
  6741                           
  6742                           ; Switch size 1, requested type "space"
  6743                           ; Number of cases is 2, Range of values is 0 to 128
  6744                           ; switch strategies available:
  6745                           ; Name         Instructions Cycles
  6746                           ; simple_byte            7     4 (average)
  6747                           ; jumptable            260     6 (fixed)
  6748                           ;	Chosen strategy is simple_byte
  6749  071C  3A00               	xorlw	0	; case 0
  6750  071D  1903               	skipnz
  6751  071E  2ED6               	goto	l417
  6752  071F  3A80               	xorlw	128	; case 128
  6753  0720  1903               	skipnz
  6754  0721  2EF8               	goto	l422
  6755  0722  2F23               	goto	l1995
  6756  0723                     l1995:	
  6757                           
  6758                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6759  0723  083D               	movf	printf@width,w
  6760  0724  043E               	iorwf	printf@width+1,w
  6761  0725  1903               	btfsc	3,2
  6762  0726  2F2F               	goto	l426
  6763  0727  083C               	movf	printf@flag,w
  6764  0728  3903               	andlw	3
  6765  0729  1903               	btfsc	3,2
  6766  072A  2F2F               	goto	l426
  6767                           
  6768                           ;doprnt.c: 1346: width--;
  6769  072B  30FF               	movlw	255
  6770  072C  07BD               	addwf	printf@width,f
  6771  072D  30FF               	movlw	255
  6772  072E  3DBE               	addwfc	printf@width+1,f
  6773  072F                     l426:	
  6774                           
  6775                           ;doprnt.c: 1381: if(width > c)
  6776  072F  083F               	movf	printf@c,w
  6777  0730  00AF               	movwf	??_printf
  6778  0731  01B0               	clrf	??_printf+1
  6779  0732  1BAF               	btfsc	??_printf,7
  6780  0733  03B0               	decf	??_printf+1,f
  6781  0734  0830               	movf	??_printf+1,w
  6782  0735  3A80               	xorlw	128
  6783  0736  00B1               	movwf	??_printf+2
  6784  0737  083E               	movf	printf@width+1,w
  6785  0738  3A80               	xorlw	128
  6786  0739  0231               	subwf	??_printf+2,w
  6787  073A  1D03               	skipz
  6788  073B  2F3E               	goto	u1725
  6789  073C  083D               	movf	printf@width,w
  6790  073D  022F               	subwf	??_printf,w
  6791  073E                     u1725:	
  6792  073E  1803               	skipnc
  6793  073F  2F4B               	goto	l2003
  6794                           
  6795                           ;doprnt.c: 1382: width -= c;
  6796  0740  0020               	movlb	0	; select bank0
  6797  0741  083F               	movf	printf@c,w
  6798  0742  00AF               	movwf	??_printf
  6799  0743  01B0               	clrf	??_printf+1
  6800  0744  1BAF               	btfsc	??_printf,7
  6801  0745  03B0               	decf	??_printf+1,f
  6802  0746  082F               	movf	??_printf,w
  6803  0747  02BD               	subwf	printf@width,f
  6804  0748  0830               	movf	??_printf+1,w
  6805  0749  3BBE               	subwfb	printf@width+1,f
  6806  074A  2F4E               	goto	l2005
  6807  074B                     l2003:	
  6808                           
  6809                           ;doprnt.c: 1383: else
  6810                           ;doprnt.c: 1384: width = 0;
  6811  074B  0020               	movlb	0	; select bank0
  6812  074C  01BD               	clrf	printf@width
  6813  074D  01BE               	clrf	printf@width+1
  6814  074E                     l2005:	
  6815                           
  6816                           ;doprnt.c: 1387: if(flag & 0x04) {
  6817  074E  1D3C               	btfss	printf@flag,2
  6818  074F  2F67               	goto	l2017
  6819                           
  6820                           ;doprnt.c: 1392: if(flag & 0x03)
  6821  0750  083C               	movf	printf@flag,w
  6822  0751  3903               	andlw	3
  6823  0752  1903               	btfsc	3,2
  6824  0753  2F58               	goto	l2011
  6825                           
  6826                           ;doprnt.c: 1393: (putch('-') );
  6827  0754  302D               	movlw	45
  6828  0755  318C  245B  3185   	fcall	_putch
  6829  0758                     l2011:	
  6830                           
  6831                           ;doprnt.c: 1415: if(width)
  6832  0758  0020               	movlb	0	; select bank0
  6833  0759                     L12:	
  6834  0759  083D               	movf	printf@width,w
  6835  075A  043E               	iorwf	printf@width+1,w
  6836  075B  1903               	btfsc	3,2
  6837  075C  2F80               	goto	l2027
  6838                           
  6839                           ;doprnt.c: 1417: (putch('0') );
  6840                           
  6841                           ;doprnt.c: 1416: do
  6842  075D  3030               	movlw	48
  6843  075E  318C  245B  3185   	fcall	_putch
  6844                           
  6845                           ;doprnt.c: 1418: while(--width);
  6846  0761  30FF               	movlw	255
  6847  0762  0020               	movlb	0	; select bank0
  6848  0763  07BD               	addwf	printf@width,f
  6849  0764  30FF               	movlw	255
  6850  0765  3DBE               	addwfc	printf@width+1,f
  6851  0766  2F59               	goto	L12
  6852  0767                     l2017:	
  6853                           ;doprnt.c: 1420: } else
  6854                           
  6855                           
  6856                           ;doprnt.c: 1422: {
  6857                           ;doprnt.c: 1424: if(width
  6858                           ;doprnt.c: 1428: )
  6859  0767  083D               	movf	printf@width,w
  6860  0768  043E               	iorwf	printf@width+1,w
  6861  0769  1903               	btfsc	3,2
  6862  076A  2F78               	goto	l2023
  6863  076B                     l2019:	
  6864                           ;doprnt.c: 1429: do
  6865                           
  6866                           
  6867                           ;doprnt.c: 1430: (putch(' ') );
  6868  076B  3020               	movlw	32
  6869  076C  318C  245B  3185   	fcall	_putch
  6870                           
  6871                           ;doprnt.c: 1431: while(--width);
  6872  076F  30FF               	movlw	255
  6873  0770  0020               	movlb	0	; select bank0
  6874  0771  07BD               	addwf	printf@width,f
  6875  0772  30FF               	movlw	255
  6876  0773  3DBE               	addwfc	printf@width+1,f
  6877  0774  083D               	movf	printf@width,w
  6878  0775  043E               	iorwf	printf@width+1,w
  6879  0776  1D03               	btfss	3,2
  6880  0777  2F6B               	goto	l2019
  6881  0778                     l2023:	
  6882                           
  6883                           ;doprnt.c: 1438: if(flag & 0x03)
  6884  0778  083C               	movf	printf@flag,w
  6885  0779  3903               	andlw	3
  6886  077A  1903               	btfsc	3,2
  6887  077B  2F80               	goto	l2027
  6888                           
  6889                           ;doprnt.c: 1439: (putch('-') );
  6890  077C  302D               	movlw	45
  6891  077D  318C  245B  3185   	fcall	_putch
  6892  0780                     l2027:	
  6893                           
  6894                           ;doprnt.c: 1469: }
  6895                           ;doprnt.c: 1472: prec = c;
  6896  0780  0020               	movlb	0	; select bank0
  6897  0781  083F               	movf	printf@c,w
  6898  0782  00AF               	movwf	??_printf
  6899  0783  082F               	movf	??_printf,w
  6900  0784  00B4               	movwf	printf@prec
  6901                           
  6902                           ;doprnt.c: 1474: while(prec--) {
  6903  0785  2FD8               	goto	l2041
  6904  0786                     l2029:	
  6905                           ;doprnt.c: 1478: {
  6906                           ;doprnt.c: 1483: case 0x00:
  6907                           
  6908                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  6909                           
  6910                           
  6911                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6912  0786  300A               	movlw	10
  6913  0787  00F8               	movwf	___lwmod@divisor
  6914  0788  3000               	movlw	0
  6915  0789  00F9               	movwf	___lwmod@divisor+1
  6916  078A  0834               	movf	printf@prec,w
  6917  078B  00AF               	movwf	??_printf
  6918  078C  01B0               	clrf	??_printf+1
  6919  078D  35AF               	lslf	??_printf,f
  6920  078E  0DB0               	rlf	??_printf+1,f
  6921  078F  309F               	movlw	low (_dpowers| (0+32768))
  6922  0790  072F               	addwf	??_printf,w
  6923  0791  0084               	movwf	4
  6924  0792  3093               	movlw	high (_dpowers| (0+32768))
  6925  0793  3D30               	addwfc	??_printf+1,w
  6926  0794  0085               	movwf	5
  6927  0795  3F00               	moviw [0]fsr0
  6928  0796  00F0               	movwf	___lwdiv@divisor
  6929  0797  3F01               	moviw [1]fsr0
  6930  0798  00F1               	movwf	___lwdiv@divisor+1
  6931  0799  083B               	movf	printf@val+1,w
  6932  079A  00F3               	movwf	___lwdiv@dividend+1
  6933  079B  083A               	movf	printf@val,w
  6934  079C  00F2               	movwf	___lwdiv@dividend
  6935  079D  318D  25D6  3185   	fcall	___lwdiv
  6936  07A0  0871               	movf	?___lwdiv+1,w
  6937  07A1  00FB               	movwf	___lwmod@dividend+1
  6938  07A2  0870               	movf	?___lwdiv,w
  6939  07A3  00FA               	movwf	___lwmod@dividend
  6940  07A4  318D  257A  3185   	fcall	___lwmod
  6941  07A7  0878               	movf	?___lwmod,w
  6942  07A8  3E30               	addlw	48
  6943  07A9  0020               	movlb	0	; select bank0
  6944  07AA  00B1               	movwf	??_printf+2
  6945  07AB  0831               	movf	??_printf+2,w
  6946  07AC  2FD3               	goto	L9
  6947  07AD                     l2031:	
  6948                           ;doprnt.c: 1497: case 0x80:
  6949                           
  6950                           ;doprnt.c: 1491: break;
  6951                           
  6952                           
  6953                           ;doprnt.c: 1499: {
  6954                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6955  07AD  0834               	movf	printf@prec,w
  6956  07AE  00AF               	movwf	??_printf
  6957  07AF  01B0               	clrf	??_printf+1
  6958  07B0  35AF               	lslf	??_printf,f
  6959  07B1  0DB0               	rlf	??_printf+1,f
  6960  07B2  30A9               	movlw	low (_hexpowers| (0+32768))
  6961  07B3  072F               	addwf	??_printf,w
  6962  07B4  0084               	movwf	4
  6963  07B5  3093               	movlw	high (_hexpowers| (0+32768))
  6964  07B6  3D30               	addwfc	??_printf+1,w
  6965  07B7  0085               	movwf	5
  6966  07B8  3F00               	moviw [0]fsr0
  6967  07B9  00F0               	movwf	___lwdiv@divisor
  6968  07BA  3F01               	moviw [1]fsr0
  6969  07BB  00F1               	movwf	___lwdiv@divisor+1
  6970  07BC  083B               	movf	printf@val+1,w
  6971  07BD  00F3               	movwf	___lwdiv@dividend+1
  6972  07BE  083A               	movf	printf@val,w
  6973  07BF  00F2               	movwf	___lwdiv@dividend
  6974  07C0  318D  25D6  3185   	fcall	___lwdiv
  6975  07C3  0870               	movf	?___lwdiv,w
  6976  07C4  390F               	andlw	15
  6977  07C5  0020               	movlb	0	; select bank0
  6978  07C6  00B1               	movwf	??_printf+2
  6979  07C7  0831               	movf	??_printf+2,w
  6980  07C8  00B3               	movwf	printf@idx
  6981                           
  6982                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6983  07C9  0833               	movf	printf@idx,w
  6984  07CA  3E61               	addlw	low (STR_54| (0+32768))
  6985  07CB  0084               	movwf	4
  6986  07CC  3092               	movlw	high (STR_54| (0+32768))
  6987  07CD  1803               	skipnc
  6988  07CE  3E01               	addlw	1
  6989  07CF  0085               	movwf	5
  6990  07D0  0800               	movf	0,w	;code access
  6991  07D1  00AF               	movwf	??_printf
  6992  07D2  082F               	movf	??_printf,w
  6993  07D3                     L9:	
  6994  07D3  00BF               	movwf	printf@c
  6995  07D4                     l2039:	
  6996                           ;doprnt.c: 1523: }
  6997                           
  6998                           ;doprnt.c: 1508: }
  6999                           ;doprnt.c: 1510: break;
  7000                           
  7001                           
  7002                           ;doprnt.c: 1524: (putch(c) );
  7003  07D4  083F               	movf	printf@c,w
  7004  07D5  318C  245B  3185   	fcall	_putch
  7005  07D8                     l2041:	
  7006  07D8  30FF               	movlw	255
  7007  07D9  0020               	movlb	0	; select bank0
  7008  07DA  00AF               	movwf	??_printf
  7009  07DB  082F               	movf	??_printf,w
  7010  07DC  07B4               	addwf	printf@prec,f
  7011  07DD  0A34               	incf	printf@prec,w
  7012  07DE  1903               	btfsc	3,2
  7013  07DF  2DB5               	goto	l2043
  7014  07E0  083C               	movf	printf@flag,w
  7015  07E1  3980               	andlw	128
  7016                           
  7017                           ; Switch size 1, requested type "space"
  7018                           ; Number of cases is 2, Range of values is 0 to 128
  7019                           ; switch strategies available:
  7020                           ; Name         Instructions Cycles
  7021                           ; simple_byte            7     4 (average)
  7022                           ; jumptable            260     6 (fixed)
  7023                           ;	Chosen strategy is simple_byte
  7024  07E2  3A00               	xorlw	0	; case 0
  7025  07E3  1903               	skipnz
  7026  07E4  2F86               	goto	l2029
  7027  07E5  3A80               	xorlw	128	; case 128
  7028  07E6  1903               	skipnz
  7029  07E7  2FAD               	goto	l2031
  7030  07E8  2FD4               	goto	l2039
  7031  07E9  2FD4               	goto	l2039
  7032  07EA                     l447:	
  7033                           ;doprnt.c: 1540: return 0;
  7034                           ;	Return value of _printf is never used
  7035                           
  7036                           ;doprnt.c: 1525: }
  7037                           ;doprnt.c: 1533: }
  7038                           ;doprnt.c: 1535: alldone:
  7039                           
  7040  07EA  0008               	return
  7041  07EB                     __end_of_printf:	
  7042                           
  7043                           	psect	text15
  7044  0C5B                     __ptext15:	
  7045 ;; *************** function _putch *****************
  7046 ;; Defined at:
  7047 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  txData          1    wreg     unsigned char 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  txData          1    1[COMMON] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0, pclath, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;Total ram usage:        1 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    1
  7068 ;; This function calls:
  7069 ;;		_EUSART_Write
  7070 ;; This function is called by:
  7071 ;;		_printf
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function _putch
  7077  0C5B                     _putch:	
  7078                           
  7079                           ;incstack = 0
  7080                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7081                           ;putch@txData stored from wreg
  7082  0C5B  00F1               	movwf	putch@txData
  7083                           
  7084                           ;eusart.c: 109: EUSART_Write(txData);
  7085  0C5C  0871               	movf	putch@txData,w
  7086  0C5D  318C  2474         	fcall	_EUSART_Write
  7087  0C5F  0008               	return
  7088  0C60                     __end_of_putch:	
  7089                           
  7090                           	psect	text16
  7091  0C74                     __ptext16:	
  7092 ;; *************** function _EUSART_Write *****************
  7093 ;; Defined at:
  7094 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  txData          1    wreg     unsigned char 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  txData          1    0[COMMON] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;Total ram usage:        1 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; This function calls:
  7115 ;;		Nothing
  7116 ;; This function is called by:
  7117 ;;		_putch
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           
  7122                           ;psect for function _EUSART_Write
  7123  0C74                     _EUSART_Write:	
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in _EUSART_Write: [wreg]
  7127                           ;EUSART_Write@txData stored from wreg
  7128  0C74  00F0               	movwf	EUSART_Write@txData
  7129  0C75                     l58:	
  7130                           ;eusart.c: 96: {
  7131                           
  7132                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7133                           
  7134  0C75  0020               	movlb	0	; select bank0
  7135  0C76  1E11               	btfss	17,4	;volatile
  7136  0C77  2C75               	goto	l58
  7137                           
  7138                           ;eusart.c: 97: }
  7139                           ;eusart.c: 99: TXREG = txData;
  7140  0C78  0870               	movf	EUSART_Write@txData,w
  7141  0C79  0023               	movlb	3	; select bank3
  7142  0C7A  009A               	movwf	26	;volatile
  7143  0C7B  0008               	return
  7144  0C7C                     __end_of_EUSART_Write:	
  7145                           
  7146                           	psect	text17
  7147  0D7A                     __ptext17:	
  7148 ;; *************** function ___lwmod *****************
  7149 ;; Defined at:
  7150 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  divisor         2    8[COMMON] unsigned int 
  7153 ;;  dividend        2   10[COMMON] unsigned int 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  counter         1   13[COMMON] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2    8[COMMON] unsigned int 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;Total ram usage:        6 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_printf
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function ___lwmod
  7180  0D7A                     ___lwmod:	
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7184  0D7A  0878               	movf	___lwmod@divisor,w
  7185  0D7B  0479               	iorwf	___lwmod@divisor+1,w
  7186  0D7C  1903               	btfsc	3,2
  7187  0D7D  2DA1               	goto	l1853
  7188  0D7E  01FD               	clrf	___lwmod@counter
  7189  0D7F  0AFD               	incf	___lwmod@counter,f
  7190  0D80                     l1843:	
  7191  0D80  1BF9               	btfsc	___lwmod@divisor+1,7
  7192  0D81  2D8C               	goto	l1845
  7193  0D82  3001               	movlw	1
  7194  0D83                     u1435:	
  7195  0D83  35F8               	lslf	___lwmod@divisor,f
  7196  0D84  0DF9               	rlf	___lwmod@divisor+1,f
  7197  0D85  0B89               	decfsz	9,f
  7198  0D86  2D83               	goto	u1435
  7199  0D87  3001               	movlw	1
  7200  0D88  00FC               	movwf	??___lwmod
  7201  0D89  087C               	movf	??___lwmod,w
  7202  0D8A  07FD               	addwf	___lwmod@counter,f
  7203  0D8B  2D80               	goto	l1843
  7204  0D8C                     l1845:	
  7205  0D8C  0879               	movf	___lwmod@divisor+1,w
  7206  0D8D  027B               	subwf	___lwmod@dividend+1,w
  7207  0D8E  1D03               	skipz
  7208  0D8F  2D92               	goto	u1455
  7209  0D90  0878               	movf	___lwmod@divisor,w
  7210  0D91  027A               	subwf	___lwmod@dividend,w
  7211  0D92                     u1455:	
  7212  0D92  1C03               	skipc
  7213  0D93  2D98               	goto	l1849
  7214  0D94  0878               	movf	___lwmod@divisor,w
  7215  0D95  02FA               	subwf	___lwmod@dividend,f
  7216  0D96  0879               	movf	___lwmod@divisor+1,w
  7217  0D97  3BFB               	subwfb	___lwmod@dividend+1,f
  7218  0D98                     l1849:	
  7219  0D98  3001               	movlw	1
  7220  0D99                     u1465:	
  7221  0D99  36F9               	lsrf	___lwmod@divisor+1,f
  7222  0D9A  0CF8               	rrf	___lwmod@divisor,f
  7223  0D9B  0B89               	decfsz	9,f
  7224  0D9C  2D99               	goto	u1465
  7225  0D9D  3001               	movlw	1
  7226  0D9E  02FD               	subwf	___lwmod@counter,f
  7227  0D9F  1D03               	btfss	3,2
  7228  0DA0  2D8C               	goto	l1845
  7229  0DA1                     l1853:	
  7230  0DA1  087B               	movf	___lwmod@dividend+1,w
  7231  0DA2  00F9               	movwf	?___lwmod+1
  7232  0DA3  087A               	movf	___lwmod@dividend,w
  7233  0DA4  00F8               	movwf	?___lwmod
  7234  0DA5  0008               	return
  7235  0DA6                     __end_of___lwmod:	
  7236                           
  7237                           	psect	text18
  7238  0DD6                     __ptext18:	
  7239 ;; *************** function ___lwdiv *****************
  7240 ;; Defined at:
  7241 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  divisor         2    0[COMMON] unsigned int 
  7244 ;;  dividend        2    2[COMMON] unsigned int 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  quotient        2    5[COMMON] unsigned int 
  7247 ;;  counter         1    7[COMMON] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  2    0[COMMON] unsigned int 
  7250 ;; Registers used:
  7251 ;;		wreg, status,2, status,0
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;Total ram usage:        8 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_printf
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function ___lwdiv
  7272  0DD6                     ___lwdiv:	
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7276  0DD6  01F5               	clrf	___lwdiv@quotient
  7277  0DD7  01F6               	clrf	___lwdiv@quotient+1
  7278  0DD8  0870               	movf	___lwdiv@divisor,w
  7279  0DD9  0471               	iorwf	___lwdiv@divisor+1,w
  7280  0DDA  1903               	btfsc	3,2
  7281  0DDB  2E05               	goto	l1831
  7282  0DDC  01F7               	clrf	___lwdiv@counter
  7283  0DDD  0AF7               	incf	___lwdiv@counter,f
  7284  0DDE                     l1819:	
  7285  0DDE  1BF1               	btfsc	___lwdiv@divisor+1,7
  7286  0DDF  2DEA               	goto	l1821
  7287  0DE0  3001               	movlw	1
  7288  0DE1                     u1365:	
  7289  0DE1  35F0               	lslf	___lwdiv@divisor,f
  7290  0DE2  0DF1               	rlf	___lwdiv@divisor+1,f
  7291  0DE3  0B89               	decfsz	9,f
  7292  0DE4  2DE1               	goto	u1365
  7293  0DE5  3001               	movlw	1
  7294  0DE6  00F4               	movwf	??___lwdiv
  7295  0DE7  0874               	movf	??___lwdiv,w
  7296  0DE8  07F7               	addwf	___lwdiv@counter,f
  7297  0DE9  2DDE               	goto	l1819
  7298  0DEA                     l1821:	
  7299  0DEA  3001               	movlw	1
  7300  0DEB                     u1385:	
  7301  0DEB  35F5               	lslf	___lwdiv@quotient,f
  7302  0DEC  0DF6               	rlf	___lwdiv@quotient+1,f
  7303  0DED  0B89               	decfsz	9,f
  7304  0DEE  2DEB               	goto	u1385
  7305  0DEF  0871               	movf	___lwdiv@divisor+1,w
  7306  0DF0  0273               	subwf	___lwdiv@dividend+1,w
  7307  0DF1  1D03               	skipz
  7308  0DF2  2DF5               	goto	u1395
  7309  0DF3  0870               	movf	___lwdiv@divisor,w
  7310  0DF4  0272               	subwf	___lwdiv@dividend,w
  7311  0DF5                     u1395:	
  7312  0DF5  1C03               	skipc
  7313  0DF6  2DFC               	goto	l1827
  7314  0DF7  0870               	movf	___lwdiv@divisor,w
  7315  0DF8  02F2               	subwf	___lwdiv@dividend,f
  7316  0DF9  0871               	movf	___lwdiv@divisor+1,w
  7317  0DFA  3BF3               	subwfb	___lwdiv@dividend+1,f
  7318  0DFB  1475               	bsf	___lwdiv@quotient,0
  7319  0DFC                     l1827:	
  7320  0DFC  3001               	movlw	1
  7321  0DFD                     u1405:	
  7322  0DFD  36F1               	lsrf	___lwdiv@divisor+1,f
  7323  0DFE  0CF0               	rrf	___lwdiv@divisor,f
  7324  0DFF  0B89               	decfsz	9,f
  7325  0E00  2DFD               	goto	u1405
  7326  0E01  3001               	movlw	1
  7327  0E02  02F7               	subwf	___lwdiv@counter,f
  7328  0E03  1D03               	btfss	3,2
  7329  0E04  2DEA               	goto	l1821
  7330  0E05                     l1831:	
  7331  0E05  0876               	movf	___lwdiv@quotient+1,w
  7332  0E06  00F1               	movwf	?___lwdiv+1
  7333  0E07  0875               	movf	___lwdiv@quotient,w
  7334  0E08  00F0               	movwf	?___lwdiv
  7335  0E09  0008               	return
  7336  0E0A                     __end_of___lwdiv:	
  7337                           
  7338                           	psect	text19
  7339  0CCB                     __ptext19:	
  7340 ;; *************** function _SPI_exchange *****************
  7341 ;; Defined at:
  7342 ;;		line 4 in file "spi.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  buf             1    wreg     PTR unsigned char 
  7345 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7346 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7347 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7348 ;;  len             1    8[COMMON] unsigned char 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  buf             1   13[COMMON] PTR unsigned char 
  7351 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7352 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7353 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7354 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      unsigned char 
  7357 ;; Registers used:
  7358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;Total ram usage:        6 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    2
  7371 ;; This function calls:
  7372 ;;		_SPI_Exchange8bitBuffer
  7373 ;; This function is called by:
  7374 ;;		_can_init
  7375 ;;		_can_ope_mode
  7376 ;;		_can_set_mask
  7377 ;;		_txf_clear
  7378 ;;		_receive
  7379 ;;		_can_send
  7380 ;;		_can_status_check
  7381 ;;		_can_baudrate
  7382 ;;		_read_register
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           
  7387                           ;psect for function _SPI_exchange
  7388  0CCB                     _SPI_exchange:	
  7389                           
  7390                           ;incstack = 0
  7391                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7392                           ;SPI_exchange@buf stored from wreg
  7393  0CCB  00FD               	movwf	SPI_exchange@buf
  7394                           
  7395                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7396  0CCC  0022               	movlb	2	; select bank2
  7397  0CCD  120C               	bcf	12,4	;volatile
  7398                           
  7399                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7400  0CCE  0878               	movf	SPI_exchange@len,w
  7401  0CCF  00F9               	movwf	??_SPI_exchange
  7402  0CD0  0879               	movf	??_SPI_exchange,w
  7403  0CD1  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7404  0CD2  087D               	movf	SPI_exchange@buf,w
  7405  0CD3  00FA               	movwf	??_SPI_exchange+1
  7406  0CD4  087A               	movf	??_SPI_exchange+1,w
  7407  0CD5  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7408  0CD6  087D               	movf	SPI_exchange@buf,w
  7409  0CD7  318E  26A2         	fcall	_SPI_Exchange8bitBuffer
  7410  0CD9  00FB               	movwf	??_SPI_exchange+2
  7411  0CDA  087B               	movf	??_SPI_exchange+2,w
  7412  0CDB  00FC               	movwf	SPI_exchange@bytes_written
  7413                           
  7414                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7415  0CDC  0022               	movlb	2	; select bank2
  7416  0CDD  160C               	bsf	12,4	;volatile
  7417                           
  7418                           ;spi.c: 8: return bytes_written;
  7419  0CDE  087C               	movf	SPI_exchange@bytes_written,w
  7420  0CDF  0008               	return
  7421  0CE0                     __end_of_SPI_exchange:	
  7422                           
  7423                           	psect	text20
  7424  0EA2                     __ptext20:	
  7425 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7426 ;; Defined at:
  7427 ;;		line 91 in file "mcc_generated_files/spi.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;  dataIn          1    wreg     PTR unsigned char 
  7430 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7431 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7432 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7433 ;;  bufLen          1    1[COMMON] unsigned char 
  7434 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7435 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7436 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7437 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7440 ;;		 -> read_register@read_buf(3), can_baudrate@cnf1_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1
      +), 
  7441 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), receive@rx_buf(15), 
  7442 ;;		 -> txf_clear@can_int_flag(4), can_set_mask@mask_buf(4), can_ope_mode@can_ctrl_buf(3), can_init@cnf_buf(5), 
  7443 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      unsigned char 
  7446 ;; Registers used:
  7447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;Total ram usage:        7 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    1
  7460 ;; This function calls:
  7461 ;;		_SPI_Exchange8bit
  7462 ;; This function is called by:
  7463 ;;		_SPI_exchange
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _SPI_Exchange8bitBuffer
  7469  0EA2                     _SPI_Exchange8bitBuffer:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7473                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7474  0EA2  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7475                           
  7476                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7477  0EA3  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7478                           
  7479                           ;spi.c: 95: if(bufLen != 0)
  7480  0EA4  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7481  0EA5  1903               	btfsc	3,2
  7482  0EA6  2EEE               	goto	l1885
  7483                           
  7484                           ;spi.c: 96: {
  7485                           ;spi.c: 97: if(dataIn != (0))
  7486  0EA7  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7487  0EA8  1D03               	btfss	3,2
  7488  0EA9  2ED0               	goto	l1873
  7489  0EAA  2ED5               	goto	l1875
  7490  0EAB                     l1865:	
  7491                           ;spi.c: 98: {
  7492                           ;spi.c: 99: while(bytesWritten < bufLen)
  7493                           
  7494                           
  7495                           ;spi.c: 100: {
  7496                           ;spi.c: 101: if(dataOut == (0))
  7497  0EAB  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7498  0EAC  1D03               	btfss	3,2
  7499  0EAD  2EB9               	goto	l1869
  7500                           
  7501                           ;spi.c: 102: {
  7502                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7503  0EAE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7504  0EAF  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7505  0EB0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7506  0EB1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7507  0EB2  0086               	movwf	6
  7508  0EB3  0187               	clrf	7
  7509  0EB4  0801               	movf	1,w
  7510  0EB5  318C  247C  318E   	fcall	_SPI_Exchange8bit
  7511                           
  7512                           ;spi.c: 104: }
  7513  0EB8  2ECC               	goto	l1871
  7514  0EB9                     l1869:	
  7515                           
  7516                           ;spi.c: 105: else
  7517                           ;spi.c: 106: {
  7518                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7519  0EB9  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7520  0EBA  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7521  0EBB  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7522  0EBC  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7523  0EBD  0086               	movwf	6
  7524  0EBE  0187               	clrf	7
  7525  0EBF  0801               	movf	1,w
  7526  0EC0  318C  247C  318E   	fcall	_SPI_Exchange8bit
  7527  0EC3  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7528  0EC4  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7529  0EC5  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7530  0EC6  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7531  0EC7  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7532  0EC8  0086               	movwf	6
  7533  0EC9  0187               	clrf	7
  7534  0ECA  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7535  0ECB  0081               	movwf	1
  7536  0ECC                     l1871:	
  7537                           
  7538                           ;spi.c: 108: }
  7539                           ;spi.c: 110: bytesWritten++;
  7540  0ECC  3001               	movlw	1
  7541  0ECD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7542  0ECE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7543  0ECF  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7544  0ED0                     l1873:	
  7545  0ED0  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7546  0ED1  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7547  0ED2  1803               	btfsc	3,0
  7548  0ED3  2EEE               	goto	l1885
  7549  0ED4  2EAB               	goto	l1865
  7550  0ED5                     l1875:	
  7551                           ;spi.c: 111: }
  7552                           ;spi.c: 112: }
  7553                           
  7554                           
  7555                           ;spi.c: 113: else
  7556                           ;spi.c: 114: {
  7557                           ;spi.c: 115: if(dataOut != (0))
  7558  0ED5  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7559  0ED6  1D03               	btfss	3,2
  7560  0ED7  2EEA               	goto	l1883
  7561  0ED8  2EEE               	goto	l1885
  7562  0ED9                     l1879:	
  7563                           ;spi.c: 116: {
  7564                           ;spi.c: 117: while(bytesWritten < bufLen )
  7565                           
  7566                           
  7567                           ;spi.c: 118: {
  7568                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7569  0ED9  3000               	movlw	0
  7570  0EDA  318C  247C  318E   	fcall	_SPI_Exchange8bit
  7571  0EDD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7572  0EDE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7573  0EDF  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7574  0EE0  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7575  0EE1  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7576  0EE2  0086               	movwf	6
  7577  0EE3  0187               	clrf	7
  7578  0EE4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7579  0EE5  0081               	movwf	1
  7580                           
  7581                           ;spi.c: 121: bytesWritten++;
  7582  0EE6  3001               	movlw	1
  7583  0EE7  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7584  0EE8  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7585  0EE9  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7586  0EEA                     l1883:	
  7587  0EEA  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7588  0EEB  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7589  0EEC  1C03               	skipc
  7590  0EED  2ED9               	goto	l1879
  7591  0EEE                     l1885:	
  7592                           
  7593                           ;spi.c: 122: }
  7594                           ;spi.c: 123: }
  7595                           ;spi.c: 124: }
  7596                           ;spi.c: 125: }
  7597                           ;spi.c: 127: return bytesWritten;
  7598  0EEE  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7599  0EEF  0008               	return
  7600  0EF0                     __end_of_SPI_Exchange8bitBuffer:	
  7601                           
  7602                           	psect	text21
  7603  0C7C                     __ptext21:	
  7604 ;; *************** function _SPI_Exchange8bit *****************
  7605 ;; Defined at:
  7606 ;;		line 77 in file "mcc_generated_files/spi.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  data            1    wreg     unsigned char 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  data            1    0[COMMON] unsigned char 
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      unsigned char 
  7613 ;; Registers used:
  7614 ;;		wreg
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;Total ram usage:        1 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_SPI_Exchange8bitBuffer
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           
  7634                           ;psect for function _SPI_Exchange8bit
  7635  0C7C                     _SPI_Exchange8bit:	
  7636                           
  7637                           ;incstack = 0
  7638                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7639                           ;SPI_Exchange8bit@data stored from wreg
  7640  0C7C  00F0               	movwf	SPI_Exchange8bit@data
  7641                           
  7642                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7643  0C7D  0024               	movlb	4	; select bank4
  7644  0C7E  1395               	bcf	21,7	;volatile
  7645                           
  7646                           ;spi.c: 82: SSP1BUF = data;
  7647  0C7F  0870               	movf	SPI_Exchange8bit@data,w
  7648  0C80  0091               	movwf	17	;volatile
  7649  0C81                     l113:	
  7650                           ;spi.c: 85: {
  7651                           
  7652                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7653                           
  7654  0C81  1C14               	btfss	20,0	;volatile
  7655  0C82  2C81               	goto	l113
  7656                           
  7657                           ;spi.c: 86: }
  7658                           ;spi.c: 88: return (SSP1BUF);
  7659  0C83  0811               	movf	17,w	;volatile
  7660  0C84  0008               	return
  7661  0C85                     __end_of_SPI_Exchange8bit:	
  7662                           
  7663                           	psect	text22
  7664  002B                     __ptext22:	
  7665 ;; *************** function _atoi *****************
  7666 ;; Defined at:
  7667 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  s               1    wreg     PTR const unsigned char 
  7670 ;;		 -> main@buf(9), 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  s               1   13[COMMON] PTR const unsigned char 
  7673 ;;		 -> main@buf(9), 
  7674 ;;  a               2   11[COMMON] int 
  7675 ;;  sign            1   10[COMMON] unsigned char 
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  2    6[COMMON] int 
  7678 ;; Registers used:
  7679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7688 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;Total ram usage:        8 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    1
  7692 ;; This function calls:
  7693 ;;		___wmul
  7694 ;;		_isdigit
  7695 ;; This function is called by:
  7696 ;;		_main
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           
  7701                           ;psect for function _atoi
  7702  002B                     _atoi:	
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7706                           ;atoi@s stored from wreg
  7707  002B  00FD               	movwf	atoi@s
  7708  002C                     l2241:	
  7709  002C  087D               	movf	atoi@s,w
  7710  002D  0086               	movwf	6
  7711  002E  0187               	clrf	7
  7712  002F  3020               	movlw	32
  7713  0030  0601               	xorwf	1,w
  7714  0031  1D03               	btfss	3,2
  7715  0032  2838               	goto	l2243
  7716  0033                     l2239:	
  7717  0033  3001               	movlw	1
  7718  0034  00F8               	movwf	??_atoi
  7719  0035  0878               	movf	??_atoi,w
  7720  0036  07FD               	addwf	atoi@s,f
  7721  0037  282C               	goto	l2241
  7722  0038                     l2243:	
  7723  0038  087D               	movf	atoi@s,w
  7724  0039  0086               	movwf	6
  7725  003A  0187               	clrf	7
  7726  003B  3009               	movlw	9
  7727  003C  0601               	xorwf	1,w
  7728  003D  1903               	btfsc	3,2
  7729  003E  2833               	goto	l2239
  7730  003F  01FB               	clrf	atoi@a
  7731  0040  01FC               	clrf	atoi@a+1
  7732  0041  01FA               	clrf	atoi@sign
  7733  0042  087D               	movf	atoi@s,w
  7734  0043  0086               	movwf	6
  7735  0044  0187               	clrf	7
  7736  0045  302D               	movlw	45
  7737  0046  0601               	xorwf	1,w
  7738  0047  1D03               	btfss	3,2
  7739  0048  284E               	goto	l2251
  7740  0049  3001               	movlw	1
  7741  004A  00F8               	movwf	??_atoi
  7742  004B  0878               	movf	??_atoi,w
  7743  004C  07FA               	addwf	atoi@sign,f
  7744  004D  2855               	goto	l2257
  7745  004E                     l2251:	
  7746  004E  087D               	movf	atoi@s,w
  7747  004F  0086               	movwf	6
  7748  0050  0187               	clrf	7
  7749  0051  302B               	movlw	43
  7750  0052  0601               	xorwf	1,w
  7751  0053  1D03               	btfss	3,2
  7752  0054  2859               	goto	l2259
  7753  0055                     l2257:	
  7754  0055  3001               	movlw	1
  7755  0056  00F8               	movwf	??_atoi
  7756  0057  0878               	movf	??_atoi,w
  7757  0058  07FD               	addwf	atoi@s,f
  7758  0059                     l2259:	
  7759  0059  087D               	movf	atoi@s,w
  7760  005A  0086               	movwf	6
  7761  005B  0187               	clrf	7
  7762  005C  0801               	movf	1,w
  7763  005D  318C  24AE  3180   	fcall	_isdigit
  7764  0060  1C03               	btfss	3,0
  7765  0061  287E               	goto	l2261
  7766  0062  087C               	movf	atoi@a+1,w
  7767  0063  00F1               	movwf	___wmul@multiplier+1
  7768  0064  087B               	movf	atoi@a,w
  7769  0065  00F0               	movwf	___wmul@multiplier
  7770  0066  300A               	movlw	10
  7771  0067  00F2               	movwf	___wmul@multiplicand
  7772  0068  3000               	movlw	0
  7773  0069  00F3               	movwf	___wmul@multiplicand+1
  7774  006A  318D  250C  3180   	fcall	___wmul
  7775  006D  087D               	movf	atoi@s,w
  7776  006E  0086               	movwf	6
  7777  006F  0187               	clrf	7
  7778  0070  0801               	movf	1,w
  7779  0071  0770               	addwf	?___wmul,w
  7780  0072  00F8               	movwf	??_atoi
  7781  0073  0871               	movf	?___wmul+1,w
  7782  0074  1803               	skipnc
  7783  0075  0A71               	incf	?___wmul+1,w
  7784  0076  00F9               	movwf	??_atoi+1
  7785  0077  0878               	movf	??_atoi,w
  7786  0078  3ED0               	addlw	208
  7787  0079  00FB               	movwf	atoi@a
  7788  007A  30FF               	movlw	255
  7789  007B  3D79               	addwfc	??_atoi+1,w
  7790  007C  00FC               	movwf	atoi@a+1
  7791  007D  2855               	goto	l2257
  7792  007E                     l2261:	
  7793  007E  087A               	movf	atoi@sign,w
  7794  007F  1903               	btfsc	3,2
  7795  0080  288D               	goto	l2267
  7796  0081  097B               	comf	atoi@a,w
  7797  0082  00F8               	movwf	??_atoi
  7798  0083  097C               	comf	atoi@a+1,w
  7799  0084  00F9               	movwf	??_atoi+1
  7800  0085  0AF8               	incf	??_atoi,f
  7801  0086  1903               	skipnz
  7802  0087  0AF9               	incf	??_atoi+1,f
  7803  0088  0878               	movf	??_atoi,w
  7804  0089  00F6               	movwf	?_atoi
  7805  008A  0879               	movf	??_atoi+1,w
  7806  008B  00F7               	movwf	?_atoi+1
  7807  008C  0008               	return
  7808  008D                     l2267:	
  7809  008D  087C               	movf	atoi@a+1,w
  7810  008E  00F7               	movwf	?_atoi+1
  7811  008F  087B               	movf	atoi@a,w
  7812  0090  00F6               	movwf	?_atoi
  7813  0091  0008               	return
  7814  0092                     __end_of_atoi:	
  7815                           
  7816                           	psect	text23
  7817  0CAE                     __ptext23:	
  7818 ;; *************** function _isdigit *****************
  7819 ;; Defined at:
  7820 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  c               1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  c               1    1[COMMON] unsigned char 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;		None               void
  7827 ;; Registers used:
  7828 ;;		wreg, status,2, status,0
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;Total ram usage:        2 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; This function calls:
  7841 ;;		Nothing
  7842 ;; This function is called by:
  7843 ;;		_printf
  7844 ;;		_atoi
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function _isdigit
  7850  0CAE                     _isdigit:	
  7851                           
  7852                           ;incstack = 0
  7853                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7854                           ;isdigit@c stored from wreg
  7855  0CAE  00F1               	movwf	isdigit@c
  7856  0CAF  01F0               	clrf	_isdigit$795
  7857  0CB0  303A               	movlw	58
  7858  0CB1  0271               	subwf	isdigit@c,w
  7859  0CB2  1803               	skipnc
  7860  0CB3  2CBA               	goto	l1791
  7861  0CB4  3030               	movlw	48
  7862  0CB5  0271               	subwf	isdigit@c,w
  7863  0CB6  1C03               	skipc
  7864  0CB7  2CBA               	goto	l1791
  7865  0CB8  01F0               	clrf	_isdigit$795
  7866  0CB9  0AF0               	incf	_isdigit$795,f
  7867  0CBA                     l1791:	
  7868  0CBA  0C70               	rrf	_isdigit$795,w
  7869  0CBB  0008               	return
  7870  0CBC                     __end_of_isdigit:	
  7871                           
  7872                           	psect	text24
  7873  0D0C                     __ptext24:	
  7874 ;; *************** function ___wmul *****************
  7875 ;; Defined at:
  7876 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  multiplier      2    0[COMMON] unsigned int 
  7879 ;;  multiplicand    2    2[COMMON] unsigned int 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  product         2    4[COMMON] unsigned int 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  2    0[COMMON] unsigned int 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;Total ram usage:        6 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_printf
  7901 ;;		_atoi
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function ___wmul
  7907  0D0C                     ___wmul:	
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7911  0D0C  01F4               	clrf	___wmul@product
  7912  0D0D  01F5               	clrf	___wmul@product+1
  7913  0D0E                     l1797:	
  7914  0D0E  1C70               	btfss	___wmul@multiplier,0
  7915  0D0F  2D14               	goto	l531
  7916  0D10  0872               	movf	___wmul@multiplicand,w
  7917  0D11  07F4               	addwf	___wmul@product,f
  7918  0D12  0873               	movf	___wmul@multiplicand+1,w
  7919  0D13  3DF5               	addwfc	___wmul@product+1,f
  7920  0D14                     l531:	
  7921  0D14  3001               	movlw	1
  7922  0D15                     u1325:	
  7923  0D15  35F2               	lslf	___wmul@multiplicand,f
  7924  0D16  0DF3               	rlf	___wmul@multiplicand+1,f
  7925  0D17  0B89               	decfsz	9,f
  7926  0D18  2D15               	goto	u1325
  7927  0D19  3001               	movlw	1
  7928  0D1A                     u1335:	
  7929  0D1A  36F1               	lsrf	___wmul@multiplier+1,f
  7930  0D1B  0CF0               	rrf	___wmul@multiplier,f
  7931  0D1C  0B89               	decfsz	9,f
  7932  0D1D  2D1A               	goto	u1335
  7933  0D1E  0870               	movf	___wmul@multiplier,w
  7934  0D1F  0471               	iorwf	___wmul@multiplier+1,w
  7935  0D20  1D03               	btfss	3,2
  7936  0D21  2D0E               	goto	l1797
  7937  0D22  0875               	movf	___wmul@product+1,w
  7938  0D23  00F1               	movwf	?___wmul+1
  7939  0D24  0874               	movf	___wmul@product,w
  7940  0D25  00F0               	movwf	?___wmul
  7941  0D26  0008               	return
  7942  0D27                     __end_of___wmul:	
  7943                           
  7944                           	psect	text25
  7945  0CBC                     __ptext25:	
  7946 ;; *************** function _SYSTEM_Initialize *****************
  7947 ;; Defined at:
  7948 ;;		line 70 in file "mcc_generated_files/mcc.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;		None
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;		None
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      void 
  7955 ;; Registers used:
  7956 ;;		wreg, status,2, status,0, pclath, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;Total ram usage:        0 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    1
  7969 ;; This function calls:
  7970 ;;		_EUSART_Initialize
  7971 ;;		_OSCILLATOR_Initialize
  7972 ;;		_PIN_MANAGER_Initialize
  7973 ;;		_SPI_Initialize
  7974 ;;		_WDT_Initialize
  7975 ;; This function is called by:
  7976 ;;		_main
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _SYSTEM_Initialize
  7982  0CBC                     _SYSTEM_Initialize:	
  7983                           
  7984                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7988  0CBC  318C  24F5  318C   	fcall	_PIN_MANAGER_Initialize
  7989                           
  7990                           ;mcc.c: 74: OSCILLATOR_Initialize();
  7991  0CBF  318C  2466  318C   	fcall	_OSCILLATOR_Initialize
  7992                           
  7993                           ;mcc.c: 75: WDT_Initialize();
  7994  0CC2  318C  2457  318C   	fcall	_WDT_Initialize
  7995                           
  7996                           ;mcc.c: 76: SPI_Initialize();
  7997  0CC5  318C  246D  318C   	fcall	_SPI_Initialize
  7998                           
  7999                           ;mcc.c: 77: EUSART_Initialize();
  8000  0CC8  318C  2498         	fcall	_EUSART_Initialize
  8001  0CCA  0008               	return
  8002  0CCB                     __end_of_SYSTEM_Initialize:	
  8003                           
  8004                           	psect	text26
  8005  0C57                     __ptext26:	
  8006 ;; *************** function _WDT_Initialize *****************
  8007 ;; Defined at:
  8008 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;		None
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      void 
  8015 ;; Registers used:
  8016 ;;		wreg
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;Total ram usage:        0 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; This function calls:
  8029 ;;		Nothing
  8030 ;; This function is called by:
  8031 ;;		_SYSTEM_Initialize
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _WDT_Initialize
  8037  0C57                     _WDT_Initialize:	
  8038                           
  8039                           ;mcc.c: 93: WDTCON = 0x16;
  8040                           
  8041                           ;incstack = 0
  8042                           ; Regs used in _WDT_Initialize: [wreg]
  8043  0C57  3016               	movlw	22
  8044  0C58  0021               	movlb	1	; select bank1
  8045  0C59  0097               	movwf	23	;volatile
  8046  0C5A  0008               	return
  8047  0C5B                     __end_of_WDT_Initialize:	
  8048                           
  8049                           	psect	text27
  8050  0C6D                     __ptext27:	
  8051 ;; *************** function _SPI_Initialize *****************
  8052 ;; Defined at:
  8053 ;;		line 63 in file "mcc_generated_files/spi.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, status,2
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        0 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_SYSTEM_Initialize
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           
  8081                           ;psect for function _SPI_Initialize
  8082  0C6D                     _SPI_Initialize:	
  8083                           
  8084                           ;spi.c: 68: SSP1STAT = 0x40;
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8088  0C6D  3040               	movlw	64
  8089  0C6E  0024               	movlb	4	; select bank4
  8090  0C6F  0094               	movwf	20	;volatile
  8091                           
  8092                           ;spi.c: 71: SSP1CON1 = 0x20;
  8093  0C70  3020               	movlw	32
  8094  0C71  0095               	movwf	21	;volatile
  8095                           
  8096                           ;spi.c: 74: SSP1ADD = 0x00;
  8097  0C72  0192               	clrf	18	;volatile
  8098  0C73  0008               	return
  8099  0C74                     __end_of_SPI_Initialize:	
  8100                           
  8101                           	psect	text28
  8102  0CF5                     __ptext28:	
  8103 ;; *************** function _PIN_MANAGER_Initialize *****************
  8104 ;; Defined at:
  8105 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;Total ram usage:        0 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_SYSTEM_Initialize
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function _PIN_MANAGER_Initialize
  8134  0CF5                     _PIN_MANAGER_Initialize:	
  8135                           
  8136                           ;pin_manager.c: 57: LATA = 0x10;
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8140  0CF5  3010               	movlw	16
  8141  0CF6  0022               	movlb	2	; select bank2
  8142  0CF7  008C               	movwf	12	;volatile
  8143                           
  8144                           ;pin_manager.c: 58: LATC = 0x00;
  8145  0CF8  018E               	clrf	14	;volatile
  8146                           
  8147                           ;pin_manager.c: 63: TRISA = 0x2F;
  8148  0CF9  302F               	movlw	47
  8149  0CFA  0021               	movlb	1	; select bank1
  8150  0CFB  008C               	movwf	12	;volatile
  8151                           
  8152                           ;pin_manager.c: 64: TRISC = 0x32;
  8153  0CFC  3032               	movlw	50
  8154  0CFD  008E               	movwf	14	;volatile
  8155                           
  8156                           ;pin_manager.c: 69: ANSELC = 0x00;
  8157  0CFE  0023               	movlb	3	; select bank3
  8158  0CFF  018E               	clrf	14	;volatile
  8159                           
  8160                           ;pin_manager.c: 70: ANSELA = 0x07;
  8161  0D00  3007               	movlw	7
  8162  0D01  008C               	movwf	12	;volatile
  8163                           
  8164                           ;pin_manager.c: 75: WPUA = 0x00;
  8165  0D02  0024               	movlb	4	; select bank4
  8166  0D03  018C               	clrf	12	;volatile
  8167                           
  8168                           ;pin_manager.c: 76: WPUC = 0x30;
  8169  0D04  3030               	movlw	48
  8170  0D05  008E               	movwf	14	;volatile
  8171                           
  8172                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8173  0D06  0021               	movlb	1	; select bank1
  8174  0D07  1395               	bcf	21,7	;volatile
  8175                           
  8176                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8177  0D08  0022               	movlb	2	; select bank2
  8178  0D09  019E               	clrf	30	;volatile
  8179                           
  8180                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8181  0D0A  019D               	clrf	29	;volatile
  8182  0D0B  0008               	return
  8183  0D0C                     __end_of_PIN_MANAGER_Initialize:	
  8184                           
  8185                           	psect	text29
  8186  0C66                     __ptext29:	
  8187 ;; *************** function _OSCILLATOR_Initialize *****************
  8188 ;; Defined at:
  8189 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;		None
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg, status,2
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;Total ram usage:        0 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_SYSTEM_Initialize
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _OSCILLATOR_Initialize
  8218  0C66                     _OSCILLATOR_Initialize:	
  8219                           
  8220                           ;mcc.c: 83: OSCCON = 0x60;
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8224  0C66  3060               	movlw	96
  8225  0C67  0021               	movlb	1	; select bank1
  8226  0C68  0099               	movwf	25	;volatile
  8227                           
  8228                           ;mcc.c: 85: OSCTUNE = 0x00;
  8229  0C69  0198               	clrf	24	;volatile
  8230                           
  8231                           ;mcc.c: 87: BORCON = 0x00;
  8232  0C6A  0022               	movlb	2	; select bank2
  8233  0C6B  0196               	clrf	22	;volatile
  8234  0C6C  0008               	return
  8235  0C6D                     __end_of_OSCILLATOR_Initialize:	
  8236                           
  8237                           	psect	text30
  8238  0C98                     __ptext30:	
  8239 ;; *************** function _EUSART_Initialize *****************
  8240 ;; Defined at:
  8241 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  1    wreg      void 
  8248 ;; Registers used:
  8249 ;;		wreg, status,2
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;Total ram usage:        0 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_SYSTEM_Initialize
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           
  8269                           ;psect for function _EUSART_Initialize
  8270  0C98                     _EUSART_Initialize:	
  8271                           
  8272                           ;eusart.c: 58: BAUDCON = 0x08;
  8273                           
  8274                           ;incstack = 0
  8275                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8276  0C98  3008               	movlw	8
  8277  0C99  0023               	movlb	3	; select bank3
  8278  0C9A  009F               	movwf	31	;volatile
  8279                           
  8280                           ;eusart.c: 61: RCSTA = 0x90;
  8281  0C9B  3090               	movlw	144
  8282  0C9C  009D               	movwf	29	;volatile
  8283                           
  8284                           ;eusart.c: 64: TXSTA = 0x24;
  8285  0C9D  3024               	movlw	36
  8286  0C9E  009E               	movwf	30	;volatile
  8287                           
  8288                           ;eusart.c: 67: SPBRGL = 0x33;
  8289  0C9F  3033               	movlw	51
  8290  0CA0  009B               	movwf	27	;volatile
  8291                           
  8292                           ;eusart.c: 70: SPBRGH = 0x00;
  8293  0CA1  019C               	clrf	28	;volatile
  8294  0CA2  0008               	return
  8295  0CA3                     __end_of_EUSART_Initialize:	
  8296                           
  8297                           	psect	text31
  8298  0C8E                     __ptext31:	
  8299 ;; *************** function _EUSART_Read *****************
  8300 ;; Defined at:
  8301 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      unsigned char 
  8308 ;; Registers used:
  8309 ;;		wreg
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; This function calls:
  8322 ;;		Nothing
  8323 ;; This function is called by:
  8324 ;;		_main
  8325 ;;		_getch
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           
  8330                           ;psect for function _EUSART_Read
  8331  0C8E                     _EUSART_Read:	
  8332  0C8E                     l51:	
  8333                           ;eusart.c: 78: {
  8334                           
  8335                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in _EUSART_Read: [wreg]
  8339                           
  8340  0C8E  0020               	movlb	0	; select bank0
  8341  0C8F  1E91               	btfss	17,5	;volatile
  8342  0C90  2C8E               	goto	l51
  8343                           
  8344                           ;eusart.c: 79: }
  8345                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8346  0C91  0023               	movlb	3	; select bank3
  8347  0C92  1C9D               	btfss	29,1	;volatile
  8348  0C93  2C96               	goto	l2189
  8349                           
  8350                           ;eusart.c: 83: {
  8351                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8352  0C94  121D               	bcf	29,4	;volatile
  8353                           
  8354                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8355  0C95  161D               	bsf	29,4	;volatile
  8356  0C96                     l2189:	
  8357                           
  8358                           ;eusart.c: 88: }
  8359                           ;eusart.c: 90: return RCREG;
  8360  0C96  0819               	movf	25,w	;volatile
  8361  0C97  0008               	return
  8362  0C98                     __end_of_EUSART_Read:	
  8363  007E                     btemp	set	126	;btemp
  8364  007E                     wtemp0	set	126


Data Sizes:
    Strings     956
    Constant    35
    Data        9
    BSS         7
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      80
    BANK1            80     19      30
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_53(CODE[7]), printf@c(BANK0[1]), receive@rx_buf(BANK0[15]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_52(CODE[5]), STR_51(CODE[15]), STR_50(CODE[15]), STR_49(CODE[2]), 
		 -> STR_48(CODE[32]), STR_47(CODE[32]), STR_46(CODE[2]), STR_45(CODE[12]), 
		 -> STR_44(CODE[12]), STR_43(CODE[12]), STR_42(CODE[2]), STR_41(CODE[12]), 
		 -> STR_40(CODE[12]), STR_39(CODE[5]), STR_38(CODE[13]), STR_37(CODE[13]), 
		 -> STR_36(CODE[18]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[20]), 
		 -> STR_32(CODE[14]), STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[15]), 
		 -> STR_28(CODE[16]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), 
		 -> STR_20(CODE[21]), STR_19(CODE[15]), STR_18(CODE[22]), STR_17(CODE[44]), 
		 -> STR_16(CODE[26]), STR_15(CODE[21]), STR_14(CODE[25]), STR_13(CODE[42]), 
		 -> STR_12(CODE[38]), STR_11(CODE[58]), STR_10(CODE[54]), STR_9(CODE[59]), 
		 -> STR_8(CODE[51]), STR_7(CODE[23]), STR_6(CODE[3]), STR_5(CODE[4]), 
		 -> STR_4(CODE[2]), STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> read_register@read_buf(BANK0[3]), can_baudrate@cnf1_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@can_int_flag(BANK0[4]), can_set_mask@mask_buf(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), can_init@cnf_buf(BANK0[5]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   95348
                                             71 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     6     6      0   24598
                                             65 BANK0      6     6      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            9     9      0    2225
                                              0 BANK0      9     9      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14363
                                             39 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6075
                                             32 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        19    17      2   16835
                                             39 BANK0     19    17      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            31    30      1    8978
                                             32 BANK0     31    30      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             8     6      2   10450
                                             39 BANK0      8     6      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                  12    12      0    8307
                                             32 BANK0     11    11      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        5     5      0    2179
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         9     9      0   10286
                                             39 BANK0      9     9      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         7     7      0    8061
                                             32 BANK0      7     7      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    21     10    5768
                                              5 BANK0     27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2056
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      1E       7       37.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 15 21:52:39 2018

                    _SPI_Initialize 0C6D                         __CFG_CP$OFF 0000  
                  ?_receive_handler 0040                                  l51 0C8E  
                                l58 0C75             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 13DA                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C81                                 l313 01AE  
                               l316 01BE                                 l341 0E90  
                               l422 06F8                                 l342 0E8C  
                               l344 0E96                                 l417 06D6  
                               l426 072F                                 l346 0E9C  
                               l338 0E80                                 l531 0D14  
                               l339 0E7C                                 l292 017F  
                               l447 07EA                                 l383 05D6  
                               l395 06B0                                 l396 0620  
          __end_of_can_status_check 0EA2                        __CFG_CPD$OFF 0000  
                               _abc 13D4                                 _sid 006B  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000               can_logging_mode@debug 0072  
                      ?_EUSART_Read 0070                                l2011 0758  
                              l2003 074B                                l2005 074E  
                              l2031 07AD                                l2023 0778  
                              l2041 07D8                                l2017 0767  
                              l2121 0E2C                                l2019 076B  
                              l2027 0780                                l2043 05B5  
                              l2029 0786                                l2061 0F38  
                              l2039 07D4                                l2063 0F3F  
                              l2241 002C                                l2049 0F06  
                              l2251 004E                                l2243 0038  
                              l2403 01CA                                l2315 00E5  
                              l2307 00BA                                l2059 0F1A  
                              l2261 007E                                l2405 01CF  
                              l2333 0118                                l2309 00D7  
                              l2239 0033                                l2503 0534  
                              l2257 0055                                l2425 0213  
                              l2169 0FE8                                l2513 0412  
                              l2267 008D                                l2259 0059  
                              l2363 037D                                l2427 01EA  
                              l2347 0153                                l2523 0431  
                              l2189 0C96                                l1821 0DEA  
                              l1901 05DB                                l2357 0332  
                              l2445 025B                                l2429 0219  
                              l2517 0428                                l1831 0E05  
                              l1903 05E4                                l2375 03CD  
                              l2391 01AB                                l2543 045A  
                              l2535 044B                                l2369 0382  
                              l2473 02BB                                l2457 028E  
                              l2553 046C                                l2529 043F  
                              l1827 0DFC                                l1819 0DDE  
                              l1843 0D80                                l1923 0635  
                              l1915 0622                                l1907 05F1  
                              l2563 047B                                l2555 046E  
                              l2547 0461                                l2539 0451  
                              l1845 0D8C                                l1853 0DA1  
                              l1933 0652                                l2469 02B9  
                              l2397 01BA                                l2573 04AC  
                              l2581 0570                                l2493 0512  
                              l1791 0CBA                                l1871 0ECC  
                              l1943 0670                                l1927 0637  
                              l2575 04B0                                l2567 048A  
                              l1865 0EAB                                l1873 0ED0  
                              l1849 0D98                                l1945 067B  
                              l1937 0654                                l1929 0645  
                              l1883 0EEA                                l1875 0ED5  
                              l1939 0663                                l1955 068F  
                              l2587 058C                                l1797 0D0E  
                              l1869 0EB9                                l1885 0EEE  
                              l1949 0686                                l2589 058D  
                              l1879 0ED9                                l1967 06CA  
                              l1895 05D1                                l1993 071A  
                              l1995 0723                                STR_1 13B8  
                              STR_2 13C5                                STR_3 13CB  
                              STR_4 11F9                                STR_5 125D  
                              STR_6 13D7                                STR_7 11E4  
                              STR_8 10AB                                STR_9 1000  
                              u2105 00A7                                u1325 0D15  
                              u1405 0DFD                                _LATA 010C  
                              u1335 0D1A                                _LATC 010E  
                              u1435 0D83                                u2324 0298  
                              u2500 058A                                u1365 0DE1  
                              u2325 0297                                u1455 0D92  
                              u2095 009C                                u1385 0DEB  
                              u1465 0D99                                u1395 0DF5  
                              u1725 073E                                u1655 06F1  
                              u1905 0F6D                                u1595 064B  
                              u1940 0DC3                                u1685 0713  
                              u1855 0018                                u1894 0D30  
                              u1895 0D2F                                _WPUA 020C  
                              _WPUC 020E                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _atoi 002B  
                              _main 0402                                _mode 0069  
                   can_baudrate@bpr 0049                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                         main@success 00A5  
                              start 0002              __end_of_SPI_Initialize 0C74  
                      _SPI_exchange 0CCB                       __CFG_MCLRE$ON 0000  
        __end_of_can_dump_registers 0402                       can_init@F2806 00B3  
    __end_of_SPI_Exchange8bitBuffer 0EF0                can_set_mask@mask_buf 0056  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
     __end_of_OSCILLATOR_Initialize 0C6D                               ?_atoi 0076  
                             ?_main 0070                               STR_10 1075  
                             STR_11 103B                               STR_20 1211  
                             STR_12 1134                               STR_21 11CD  
                             STR_13 110A                               STR_30 1337  
                             STR_22 12A5                               STR_14 11B4  
                             STR_31 1345                               STR_23 12E9  
                             STR_15 1226                               STR_40 1277  
                             STR_32 1353                               STR_24 1294  
                             STR_16 119A                               STR_41 12BB  
                             STR_25 12D8                               STR_33 123B  
                             STR_17 10DE                       __CFG_WDTE$OFF 0000  
                             STR_42 11F9                               STR_50 1319  
                             STR_34 1283                               STR_26 1272  
                             STR_18 11FB                               STR_51 1328  
                             STR_43 137B                               STR_19 1328  
                             STR_35 12C7                               STR_27 12B6  
                             STR_52 11F6                               STR_44 1387  
                             STR_28 12FA                               STR_36 124F  
                             STR_53 13B1                               STR_45 1393  
                             STR_37 1361                               STR_29 130A  
                             STR_46 11F9                               STR_38 136E  
                             STR_54 1261                               STR_39 11F6  
                             STR_47 117A                               STR_48 115A  
                             STR_49 11F9                __size_of_can_set_sid 0024  
                   __end_of___lwdiv 0E0A                     __end_of___lwmod 0DA6  
     can_status_check@bytes_written 0063                               _RCREG 0199  
                             _RCSTA 019D         can_dump_registers@mask_sidh 0048  
       can_dump_registers@mask_sidl 0049                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                     SPI_exchange@buf 007D  
                   SPI_exchange@len 0078                     __end_of_dpowers 13A9  
                    _WDT_Initialize 0C57                     __end_of_max_idx 13DF  
                   __end_of_isdigit 0CBC                     __end_of_receive 1000  
                             atoi@a 007B                    can_baudrate@mask 004A  
                             atoi@s 007D                               _putch 0C5B  
                             main@c 00B1                               main@n 00A3  
                     can_send@F2837 00BA                               pclath 000A  
                             status 0003                               wtemp0 007E  
            can_send@can_status_buf 0053                       receive@rx_buf 004D  
                   ?_SPI_Initialize 0070                     __initialization 07EB  
                 can_send@debug_buf 005A               __size_of_can_baudrate 002B  
                      __end_of_atoi 0092                        __end_of_main 05B0  
                     main@echo_back 00A6                      ??_EUSART_Write 0070  
            can_status_check@status 0066               read_register@read_buf 0022  
                            ??_atoi 0078                              ??_main 0067  
             can_set_mask@mask_sidh 0053               can_set_mask@mask_sidl 0054  
           can_logging_mode@verbose 0070                      __CFG_PLLEN$OFF 0000  
            __end_of_WDT_Initialize 0C5B                       can_set_mask@n 0047  
          __end_of_SPI_Exchange8bit 0C85               __size_of_can_ope_mode 004B  
             __size_of_can_set_mask 00F2                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_init 0DD6  
                      _can_baudrate 0D4F                    __end_of_can_send 02BD  
                  receive_handler@i 0046                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0D0C                       _output_format 006D  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                         ??___lwmod 007C                              _printf 05B0  
                      _can_ope_mode 0E0A                        _can_set_mask 0092  
                         ??_isdigit 0070                           ??_receive 0047  
                   ?_WDT_Initialize 0070           __size_of_can_logging_mode 000B  
                  __end_of_rxfnsidh 13C5                    __end_of_txbnsidh 13D4  
                  __end_of_rxmnsidh 13DE                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 0CBC           SPI_exchange@bytes_written 007C  
           __end_of__initialization 07FD              __size_of_read_register 0015  
                ?_SYSTEM_Initialize 0070               txf_clear@can_int_flag 0025  
                    __pcstackCOMMON 0070                        __pidataBANK1 0C85  
               ??_SYSTEM_Initialize 0070                      can_send@tx_buf 0045  
                    can_send@status 0059                       __end_of_putch 0C60  
                       receive@pbuf 005C                          __end_of_nm 13DC  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 0061           __end_of_SYSTEM_Initialize 0CCB  
                           ??_putch 0071                          __pbssBANK0 0069  
              __end_of_EUSART_Write 0C7C                    can_set_mask@mask 0048  
                        __pmaintext 0402                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E                             ?_printf 0025  
                     _read_register 0CE0                           ?_can_init 0047  
                         ?_can_send 0040                  _can_dump_registers 02BD  
          __size_of_receive_handler 005B                             _OSCTUNE 0098  
                           _SSP1ADD 0212                             _SSP1BUF 0211  
                   can_init@cnf_buf 004A                 ?_can_dump_registers 0070  
                __size_of_txf_clear 0028                    ??_SPI_Initialize 0070  
                   __size_of___wmul 001B                ??_can_dump_registers 0040  
                     ??_can_set_sid 0072                             ___lwdiv 0DD6  
                           ___lwmod 0D7A                      ?_read_register 0070  
                           _handler 00BC                             __ptext1 0E55  
                           __ptext2 0D27                             __ptext3 0F4B  
                           __ptext4 0EF0                             __ptext5 0092  
                           __ptext6 0184                             __ptext7 0CA3  
                           __ptext8 0DA6                             __ptext9 0007  
                   __size_of_printf 023B                   __end_of_hexpowers 13B1  
                           _dpowers 139F                          ??_can_init 0049  
             _OSCILLATOR_Initialize 0C66                             _max_idx 13DE  
                        ??_can_send 0041                             _isdigit 0CAE  
                           _receive 0F4B            ??_PIN_MANAGER_Initialize 0070  
    can_status_check@can_status_buf 0064                    _can_logging_mode 0CA3  
                 ?_SPI_Exchange8bit 0070                             main@cmd 00A7  
            txf_clear@bytes_written 0024                             main@buf 00A8  
                           main@bpr 00A4          __size_of_SYSTEM_Initialize 000F  
                           main@idx 00B2                             main@sid 00A2  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070                             init_ram 0C60  
                           initloop 0C61                      _operation_mode 006F  
                 _EUSART_Initialize 0C98                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 003F  
                           printf@f 0025                   __end_of_txf_clear 0D4F  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_set_sid 002B                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                   ??_receive_handler 0043  
         __end_of_EUSART_Initialize 0CA3                         printf@width 003D  
          ??_SPI_Exchange8bitBuffer 0073            can_ope_mode@can_ctrl_buf 0043  
               receive_handler@pbuf 0041                     ??_read_register 0020  
                    __end_of___wmul 0D27               can_status_check@F2846 00B8  
                      _EUSART_Write 0C74              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 07EB                 start_initialization 07EB  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 13D7  
                  _can_set_mask$488 004F                    _can_set_mask$489 0051  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         can_baudrate@bytes_written 004B           __size_of_can_status_check 004D  
         can_ope_mode@bytes_written 0042                       ?_SPI_exchange 0078  
                          ??___wmul 0074                         __pdataBANK1 00B3  
                     txf_clear@mask 0023                         _can_set_sid 0007  
                          ??_printf 002F                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
               can_set_sid@can_node 0070                   read_register@addr 0021  
                 __size_of_can_init 0030                   __size_of_can_send 0139  
                        receive@dlc 005F       SPI_Exchange8bitBuffer@dataOut 0072  
                        receive@sid 005D          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0C98                           __pnvBANK1 00BC  
                   can_set_mask@cmd 0055                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0CF5                     can_set_sid@sidh 0075  
                   can_set_sid@sidl 0076            __end_of_can_logging_mode 0CAE  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                            ?_receive 0070  
                         can_send@i 005D                           can_send@n 005E  
                         _hexpowers 13A9                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                can_baudrate@cnf1_buf 004C  
                     ?_can_baudrate 0070                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
               can_dump_registers@n 004A                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214         __size_of_can_dump_registers 0145  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
                     ?_can_set_mask 0047              _SPI_Exchange8bitBuffer 0EA2  
                   _receive_handler 0EF0                          printf@flag 003C  
                        printf@prec 0034                           _txf_clear 0D27  
                receive_handler@dlc 0042                  receive_handler@sid 0040  
                       _EUSART_Read 0C8E                      ??_can_baudrate 0047  
                       can_send@dlc 0040                         can_send@buf 0056  
                       can_send@len 0055                    _can_status_check 0E55  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 0040                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C                      ??_can_set_mask 0049  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$795 0070  
              can_ope_mode@ope_mode 0046        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_init 0DA6                            _can_send 0184  
                        txf_clear@n 0022                          ?_txf_clear 0070  
              __end_of_SPI_exchange 0CE0                    __size_of_isdigit 000E  
                  __size_of_receive 00B5                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 02BD  
                          __ptext11 0CE0                            __ptext20 0EA2  
                          __ptext12 0D4F                            __ptext21 0C7C  
                          __ptext13 0E0A                            __ptext30 0C98  
                          __ptext22 002B                            __ptext14 05B0  
                          __ptext31 0C8E                            __ptext23 0CAE  
                          __ptext15 0C5B                            __ptext24 0D0C  
                          __ptext16 0C74                            __ptext25 0CBC  
                          __ptext17 0D7A                            __ptext26 0C57  
                          __ptext18 0DD6                            __ptext27 0C6D  
                          __ptext19 0CCB                            __ptext28 0CF5  
                          __ptext29 0C66                        _SSP1CON1bits 0215  
                     __size_of_atoi 0067                       __size_of_main 01AE  
              can_send@txb_ctrl_buf 0058                            atoi@sign 007A  
           __end_of_receive_handler 0F4B                        ?_can_set_sid 0070  
                         printf@idx 0033                           printf@len 0037  
                         printf@val 003A                        _SSP1STATbits 0214  
                          main@mask 00A0                            _rxfnsidh 13BF  
             __end_of_read_register 0CF5                            _txbnsidh 13D1  
                          _rxmnsidh 13DC                      __pstringtext10 103B  
                    __pstringtext11 1075                      __pstringtext20 11CD  
                    __pstringtext12 10AB                      __pstringtext21 11E4  
                    __pstringtext13 10DE                      __pstringtext30 1294  
                    __pstringtext22 11FB                      __pstringtext14 110A  
                    __pstringtext31 12A5                      __pstringtext23 1211  
                    __pstringtext15 1134                      __pstringtext40 1337  
                    __pstringtext32 12B6                      __pstringtext24 1226  
                    __pstringtext16 115A                      __pstringtext41 1345  
                    __pstringtext33 12C7                      __pstringtext25 123B  
                    __pstringtext17 117A                      __pstringtext50 13C5  
                    __pstringtext42 1353                      __pstringtext34 12D8  
                    __pstringtext26 124F                      __pstringtext18 119A  
                    __pstringtext51 13CB                      __pstringtext43 1361  
                    __pstringtext35 12E9                      __pstringtext27 1261  
                    __pstringtext19 11B4                      __pstringtext52 13D7  
                    __pstringtext44 136E                      __pstringtext36 12FA  
                    __pstringtext28 1272                      __pstringtext53 0000  
                    __pstringtext45 137B                      __pstringtext37 130A  
                    __pstringtext29 1283                      __pstringtext46 1387  
                    __pstringtext38 1319                      __pstringtext47 1393  
                    __pstringtext39 1328                      __pstringtext48 13B1  
                    __pstringtext49 13B8                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                            receive@n 0060  
                  ___lwmod@dividend 007A             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                 receive@bytes_read 004C                    _SPI_Exchange8bit 0C7C  
             can_send@bytes_written 0057                            printf@ap 0039  
                          printf@cp 0035                   ?_can_logging_mode 0070  
           can_init@receive_handler 0047                  ??_can_logging_mode 0071  
              __end_of_can_baudrate 0D7A                       __pstringtext1 139F  
                     __pstringtext2 13A9                       __pstringtext3 13BF  
                     __pstringtext4 13D1                       __pstringtext5 13D4  
                     __pstringtext6 13DA                       __pstringtext7 13DC  
                     __pstringtext8 13DE                       __pstringtext9 1000  
                       ??_txf_clear 0020                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0D0C                __end_of_can_ope_mode 0E55  
              __end_of_can_set_mask 0184  
