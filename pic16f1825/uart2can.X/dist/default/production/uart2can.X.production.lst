

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 12 15:51:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F1825 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  010C                     	;# 
   127  010E                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011A                     	;# 
   138  011B                     	;# 
   139  011D                     	;# 
   140  011E                     	;# 
   141  018C                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  0211                     	;# 
   163  0211                     	;# 
   164  0212                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0213                     	;# 
   168  0214                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0216                     	;# 
   174  0216                     	;# 
   175  0217                     	;# 
   176  0217                     	;# 
   177  0291                     	;# 
   178  0291                     	;# 
   179  0292                     	;# 
   180  0293                     	;# 
   181  0294                     	;# 
   182  0295                     	;# 
   183  0295                     	;# 
   184  0296                     	;# 
   185  0298                     	;# 
   186  0298                     	;# 
   187  0299                     	;# 
   188  029A                     	;# 
   189  029B                     	;# 
   190  029C                     	;# 
   191  029D                     	;# 
   192  029E                     	;# 
   193  0311                     	;# 
   194  0311                     	;# 
   195  0312                     	;# 
   196  0313                     	;# 
   197  0318                     	;# 
   198  0318                     	;# 
   199  0319                     	;# 
   200  031A                     	;# 
   201  038C                     	;# 
   202  038E                     	;# 
   203  0391                     	;# 
   204  0392                     	;# 
   205  0393                     	;# 
   206  039A                     	;# 
   207  039C                     	;# 
   208  039D                     	;# 
   209  039E                     	;# 
   210  039F                     	;# 
   211  0415                     	;# 
   212  0416                     	;# 
   213  0417                     	;# 
   214  041C                     	;# 
   215  041D                     	;# 
   216  041E                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  008C                     	;# 
   257  008E                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  010C                     	;# 
   273  010E                     	;# 
   274  0111                     	;# 
   275  0112                     	;# 
   276  0113                     	;# 
   277  0114                     	;# 
   278  0115                     	;# 
   279  0116                     	;# 
   280  0117                     	;# 
   281  0118                     	;# 
   282  0119                     	;# 
   283  011A                     	;# 
   284  011B                     	;# 
   285  011D                     	;# 
   286  011E                     	;# 
   287  018C                     	;# 
   288  018E                     	;# 
   289  0191                     	;# 
   290  0191                     	;# 
   291  0192                     	;# 
   292  0193                     	;# 
   293  0193                     	;# 
   294  0193                     	;# 
   295  0194                     	;# 
   296  0195                     	;# 
   297  0196                     	;# 
   298  0199                     	;# 
   299  019A                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019D                     	;# 
   304  019E                     	;# 
   305  019F                     	;# 
   306  020C                     	;# 
   307  020E                     	;# 
   308  0211                     	;# 
   309  0211                     	;# 
   310  0212                     	;# 
   311  0212                     	;# 
   312  0213                     	;# 
   313  0213                     	;# 
   314  0214                     	;# 
   315  0214                     	;# 
   316  0215                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0216                     	;# 
   320  0216                     	;# 
   321  0217                     	;# 
   322  0217                     	;# 
   323  0291                     	;# 
   324  0291                     	;# 
   325  0292                     	;# 
   326  0293                     	;# 
   327  0294                     	;# 
   328  0295                     	;# 
   329  0295                     	;# 
   330  0296                     	;# 
   331  0298                     	;# 
   332  0298                     	;# 
   333  0299                     	;# 
   334  029A                     	;# 
   335  029B                     	;# 
   336  029C                     	;# 
   337  029D                     	;# 
   338  029E                     	;# 
   339  0311                     	;# 
   340  0311                     	;# 
   341  0312                     	;# 
   342  0313                     	;# 
   343  0318                     	;# 
   344  0318                     	;# 
   345  0319                     	;# 
   346  031A                     	;# 
   347  038C                     	;# 
   348  038E                     	;# 
   349  0391                     	;# 
   350  0392                     	;# 
   351  0393                     	;# 
   352  039A                     	;# 
   353  039C                     	;# 
   354  039D                     	;# 
   355  039E                     	;# 
   356  039F                     	;# 
   357  0415                     	;# 
   358  0416                     	;# 
   359  0417                     	;# 
   360  041C                     	;# 
   361  041D                     	;# 
   362  041E                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000E                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  008C                     	;# 
   403  008E                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0093                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010E                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011B                     	;# 
   431  011D                     	;# 
   432  011E                     	;# 
   433  018C                     	;# 
   434  018E                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020C                     	;# 
   453  020E                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0294                     	;# 
   474  0295                     	;# 
   475  0295                     	;# 
   476  0296                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  029B                     	;# 
   482  029C                     	;# 
   483  029D                     	;# 
   484  029E                     	;# 
   485  0311                     	;# 
   486  0311                     	;# 
   487  0312                     	;# 
   488  0313                     	;# 
   489  0318                     	;# 
   490  0318                     	;# 
   491  0319                     	;# 
   492  031A                     	;# 
   493  038C                     	;# 
   494  038E                     	;# 
   495  0391                     	;# 
   496  0392                     	;# 
   497  0393                     	;# 
   498  039A                     	;# 
   499  039C                     	;# 
   500  039D                     	;# 
   501  039E                     	;# 
   502  039F                     	;# 
   503  0415                     	;# 
   504  0416                     	;# 
   505  0417                     	;# 
   506  041C                     	;# 
   507  041D                     	;# 
   508  041E                     	;# 
   509  0FE4                     	;# 
   510  0FE5                     	;# 
   511  0FE6                     	;# 
   512  0FE7                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEB                     	;# 
   517  0FED                     	;# 
   518  0FEE                     	;# 
   519  0FEF                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000E                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0015                     	;# 
   538  0016                     	;# 
   539  0016                     	;# 
   540  0017                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001C                     	;# 
   546  001E                     	;# 
   547  001F                     	;# 
   548  008C                     	;# 
   549  008E                     	;# 
   550  0091                     	;# 
   551  0092                     	;# 
   552  0093                     	;# 
   553  0095                     	;# 
   554  0096                     	;# 
   555  0097                     	;# 
   556  0098                     	;# 
   557  0099                     	;# 
   558  009A                     	;# 
   559  009B                     	;# 
   560  009B                     	;# 
   561  009C                     	;# 
   562  009D                     	;# 
   563  009E                     	;# 
   564  010C                     	;# 
   565  010E                     	;# 
   566  0111                     	;# 
   567  0112                     	;# 
   568  0113                     	;# 
   569  0114                     	;# 
   570  0115                     	;# 
   571  0116                     	;# 
   572  0117                     	;# 
   573  0118                     	;# 
   574  0119                     	;# 
   575  011A                     	;# 
   576  011B                     	;# 
   577  011D                     	;# 
   578  011E                     	;# 
   579  018C                     	;# 
   580  018E                     	;# 
   581  0191                     	;# 
   582  0191                     	;# 
   583  0192                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0193                     	;# 
   587  0194                     	;# 
   588  0195                     	;# 
   589  0196                     	;# 
   590  0199                     	;# 
   591  019A                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019C                     	;# 
   595  019D                     	;# 
   596  019E                     	;# 
   597  019F                     	;# 
   598  020C                     	;# 
   599  020E                     	;# 
   600  0211                     	;# 
   601  0211                     	;# 
   602  0212                     	;# 
   603  0212                     	;# 
   604  0213                     	;# 
   605  0213                     	;# 
   606  0214                     	;# 
   607  0214                     	;# 
   608  0215                     	;# 
   609  0215                     	;# 
   610  0215                     	;# 
   611  0216                     	;# 
   612  0216                     	;# 
   613  0217                     	;# 
   614  0217                     	;# 
   615  0291                     	;# 
   616  0291                     	;# 
   617  0292                     	;# 
   618  0293                     	;# 
   619  0294                     	;# 
   620  0295                     	;# 
   621  0295                     	;# 
   622  0296                     	;# 
   623  0298                     	;# 
   624  0298                     	;# 
   625  0299                     	;# 
   626  029A                     	;# 
   627  029B                     	;# 
   628  029C                     	;# 
   629  029D                     	;# 
   630  029E                     	;# 
   631  0311                     	;# 
   632  0311                     	;# 
   633  0312                     	;# 
   634  0313                     	;# 
   635  0318                     	;# 
   636  0318                     	;# 
   637  0319                     	;# 
   638  031A                     	;# 
   639  038C                     	;# 
   640  038E                     	;# 
   641  0391                     	;# 
   642  0392                     	;# 
   643  0393                     	;# 
   644  039A                     	;# 
   645  039C                     	;# 
   646  039D                     	;# 
   647  039E                     	;# 
   648  039F                     	;# 
   649  0415                     	;# 
   650  0416                     	;# 
   651  0417                     	;# 
   652  041C                     	;# 
   653  041D                     	;# 
   654  041E                     	;# 
   655  0FE4                     	;# 
   656  0FE5                     	;# 
   657  0FE6                     	;# 
   658  0FE7                     	;# 
   659  0FE8                     	;# 
   660  0FE9                     	;# 
   661  0FEA                     	;# 
   662  0FEB                     	;# 
   663  0FED                     	;# 
   664  0FEE                     	;# 
   665  0FEF                     	;# 
   666  0000                     	;# 
   667  0001                     	;# 
   668  0002                     	;# 
   669  0003                     	;# 
   670  0004                     	;# 
   671  0005                     	;# 
   672  0006                     	;# 
   673  0007                     	;# 
   674  0008                     	;# 
   675  0009                     	;# 
   676  000A                     	;# 
   677  000B                     	;# 
   678  000C                     	;# 
   679  000E                     	;# 
   680  0011                     	;# 
   681  0012                     	;# 
   682  0013                     	;# 
   683  0015                     	;# 
   684  0016                     	;# 
   685  0016                     	;# 
   686  0017                     	;# 
   687  0018                     	;# 
   688  0019                     	;# 
   689  001A                     	;# 
   690  001B                     	;# 
   691  001C                     	;# 
   692  001E                     	;# 
   693  001F                     	;# 
   694  008C                     	;# 
   695  008E                     	;# 
   696  0091                     	;# 
   697  0092                     	;# 
   698  0093                     	;# 
   699  0095                     	;# 
   700  0096                     	;# 
   701  0097                     	;# 
   702  0098                     	;# 
   703  0099                     	;# 
   704  009A                     	;# 
   705  009B                     	;# 
   706  009B                     	;# 
   707  009C                     	;# 
   708  009D                     	;# 
   709  009E                     	;# 
   710  010C                     	;# 
   711  010E                     	;# 
   712  0111                     	;# 
   713  0112                     	;# 
   714  0113                     	;# 
   715  0114                     	;# 
   716  0115                     	;# 
   717  0116                     	;# 
   718  0117                     	;# 
   719  0118                     	;# 
   720  0119                     	;# 
   721  011A                     	;# 
   722  011B                     	;# 
   723  011D                     	;# 
   724  011E                     	;# 
   725  018C                     	;# 
   726  018E                     	;# 
   727  0191                     	;# 
   728  0191                     	;# 
   729  0192                     	;# 
   730  0193                     	;# 
   731  0193                     	;# 
   732  0193                     	;# 
   733  0194                     	;# 
   734  0195                     	;# 
   735  0196                     	;# 
   736  0199                     	;# 
   737  019A                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019C                     	;# 
   741  019D                     	;# 
   742  019E                     	;# 
   743  019F                     	;# 
   744  020C                     	;# 
   745  020E                     	;# 
   746  0211                     	;# 
   747  0211                     	;# 
   748  0212                     	;# 
   749  0212                     	;# 
   750  0213                     	;# 
   751  0213                     	;# 
   752  0214                     	;# 
   753  0214                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0215                     	;# 
   757  0216                     	;# 
   758  0216                     	;# 
   759  0217                     	;# 
   760  0217                     	;# 
   761  0291                     	;# 
   762  0291                     	;# 
   763  0292                     	;# 
   764  0293                     	;# 
   765  0294                     	;# 
   766  0295                     	;# 
   767  0295                     	;# 
   768  0296                     	;# 
   769  0298                     	;# 
   770  0298                     	;# 
   771  0299                     	;# 
   772  029A                     	;# 
   773  029B                     	;# 
   774  029C                     	;# 
   775  029D                     	;# 
   776  029E                     	;# 
   777  0311                     	;# 
   778  0311                     	;# 
   779  0312                     	;# 
   780  0313                     	;# 
   781  0318                     	;# 
   782  0318                     	;# 
   783  0319                     	;# 
   784  031A                     	;# 
   785  038C                     	;# 
   786  038E                     	;# 
   787  0391                     	;# 
   788  0392                     	;# 
   789  0393                     	;# 
   790  039A                     	;# 
   791  039C                     	;# 
   792  039D                     	;# 
   793  039E                     	;# 
   794  039F                     	;# 
   795  0415                     	;# 
   796  0416                     	;# 
   797  0417                     	;# 
   798  041C                     	;# 
   799  041D                     	;# 
   800  041E                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812                           
   813                           	psect	idataBANK0
   814  028B                     __pidataBANK0:	
   815                           
   816                           ;initializer for can_start@F2930
   817  028B  3402               	retlw	2
   818  028C  340F               	retlw	15
   819  028D  3400               	retlw	0
   820                           
   821                           ;initializer for can_status_check@F2954
   822  028E  34A0               	retlw	160
   823  028F  3400               	retlw	0
   824                           
   825                           	psect	stringtext1
   826  0854                     __pstringtext1:	
   827  0854                     _hexpowers:	
   828  0854  3401               	retlw	1
   829  0855  3400               	retlw	0
   830  0856  3410               	retlw	16
   831  0857  3400               	retlw	0
   832  0858  3400               	retlw	0
   833  0859  3401               	retlw	1
   834  085A  3400               	retlw	0
   835  085B  3410               	retlw	16
   836  085C                     __end_of_hexpowers:	
   837                           
   838                           	psect	stringtext2
   839  0869                     __pstringtext2:	
   840  0869                     _max_char:	
   841  0869  3408               	retlw	8
   842  086A                     __end_of_max_char:	
   843                           
   844                           	psect	stringtext3
   845  0863                     __pstringtext3:	
   846  0863                     _abc:	
   847  0863  3400               	retlw	0
   848  0864  3402               	retlw	2
   849  0865  3404               	retlw	4
   850  0866                     __end_of_abc:	
   851                           
   852                           	psect	stringtext4
   853  0800                     __pstringtext4:	
   854  0800                     _nm:	
   855  0800  3400               	retlw	0
   856  0801  3402               	retlw	2
   857  0802                     __end_of_nm:	
   858  0011                     _PIR1bits	set	17
   859  0095                     _OPTION_REGbits	set	149
   860  008E                     _TRISC	set	142
   861  008C                     _TRISA	set	140
   862  0097                     _WDTCON	set	151
   863  0098                     _OSCTUNE	set	152
   864  0099                     _OSCCON	set	153
   865  04D6                     _PLLR	set	1238
   866  010E                     _LATCbits	set	270
   867  010C                     _LATAbits	set	268
   868  011D                     _APFCON0	set	285
   869  011E                     _APFCON1	set	286
   870  010E                     _LATC	set	270
   871  010C                     _LATA	set	268
   872  0116                     _BORCON	set	278
   873  018C                     _ANSELA	set	396
   874  018E                     _ANSELC	set	398
   875  019A                     _TXREG	set	410
   876  0199                     _RCREG	set	409
   877  019D                     _RCSTAbits	set	413
   878  019C                     _SPBRGH	set	412
   879  019B                     _SPBRGL	set	411
   880  019E                     _TXSTA	set	414
   881  019D                     _RCSTA	set	413
   882  019F                     _BAUDCON	set	415
   883  0214                     _SSP1STATbits	set	532
   884  0211                     _SSP1BUF	set	529
   885  0215                     _SSP1CON1bits	set	533
   886  0212                     _SSP1ADD	set	530
   887  0215                     _SSP1CON1	set	533
   888  0214                     _SSP1STAT	set	532
   889  020E                     _WPUC	set	526
   890  020C                     _WPUA	set	524
   891  0802                     STR_5:	
   892  0802  340A               	retlw	10
   893  0803  3443               	retlw	67	;'C'
   894  0804  3441               	retlw	65	;'A'
   895  0805  344E               	retlw	78	;'N'
   896  0806  3420               	retlw	32	;' '
   897  0807  346D               	retlw	109	;'m'
   898  0808  3465               	retlw	101	;'e'
   899  0809  3473               	retlw	115	;'s'
   900  080A  3473               	retlw	115	;'s'
   901  080B  3461               	retlw	97	;'a'
   902  080C  3467               	retlw	103	;'g'
   903  080D  3465               	retlw	101	;'e'
   904  080E  3420               	retlw	32	;' '
   905  080F  3473               	retlw	115	;'s'
   906  0810  3465               	retlw	101	;'e'
   907  0811  346E               	retlw	110	;'n'
   908  0812  3474               	retlw	116	;'t'
   909  0813  343A               	retlw	58	;':'
   910  0814  3420               	retlw	32	;' '
   911  0815  3425               	retlw	37	;'%'
   912  0816  3473               	retlw	115	;'s'
   913  0817  340A               	retlw	10
   914  0818  3400               	retlw	0
   915                           
   916                           	psect	stringtext5
   917  0819                     __pstringtext5:	
   918  0819                     STR_2:	
   919  0819  344D               	retlw	77	;'M'
   920  081A  3465               	retlw	101	;'e'
   921  081B  3473               	retlw	115	;'s'
   922  081C  3473               	retlw	115	;'s'
   923  081D  3461               	retlw	97	;'a'
   924  081E  3467               	retlw	103	;'g'
   925  081F  3465               	retlw	101	;'e'
   926  0820  3420               	retlw	32	;' '
   927  0821  3472               	retlw	114	;'r'
   928  0822  3465               	retlw	101	;'e'
   929  0823  3463               	retlw	99	;'c'
   930  0824  3465               	retlw	101	;'e'
   931  0825  3469               	retlw	105	;'i'
   932  0826  3476               	retlw	118	;'v'
   933  0827  3465               	retlw	101	;'e'
   934  0828  3464               	retlw	100	;'d'
   935  0829  343A               	retlw	58	;':'
   936  082A  3420               	retlw	32	;' '
   937  082B  3425               	retlw	37	;'%'
   938  082C  3473               	retlw	115	;'s'
   939  082D  340A               	retlw	10
   940  082E  3400               	retlw	0
   941                           
   942                           	psect	stringtext6
   943  082F                     __pstringtext6:	
   944  082F                     STR_1:	
   945  082F  3453               	retlw	83	;'S'
   946  0830  3449               	retlw	73	;'I'
   947  0831  3444               	retlw	68	;'D'
   948  0832  3420               	retlw	32	;' '
   949  0833  3473               	retlw	115	;'s'
   950  0834  3465               	retlw	101	;'e'
   951  0835  3474               	retlw	116	;'t'
   952  0836  343A               	retlw	58	;':'
   953  0837  3420               	retlw	32	;' '
   954  0838  3425               	retlw	37	;'%'
   955  0839  3430               	retlw	48	;'0'
   956  083A  3432               	retlw	50	;'2'
   957  083B  3478               	retlw	120	;'x'
   958  083C  3420               	retlw	32	;' '
   959  083D  3425               	retlw	37	;'%'
   960  083E  3430               	retlw	48	;'0'
   961  083F  3432               	retlw	50	;'2'
   962  0840  3478               	retlw	120	;'x'
   963  0841  340A               	retlw	10
   964  0842  3400               	retlw	0
   965                           
   966                           	psect	stringtext7
   967  0843                     __pstringtext7:	
   968  0843                     STR_7:	
   969  0843  3430               	retlw	48	;'0'
   970  0844  3431               	retlw	49	;'1'
   971  0845  3432               	retlw	50	;'2'
   972  0846  3433               	retlw	51	;'3'
   973  0847  3434               	retlw	52	;'4'
   974  0848  3435               	retlw	53	;'5'
   975  0849  3436               	retlw	54	;'6'
   976  084A  3437               	retlw	55	;'7'
   977  084B  3438               	retlw	56	;'8'
   978  084C  3439               	retlw	57	;'9'
   979  084D  3461               	retlw	97	;'a'
   980  084E  3462               	retlw	98	;'b'
   981  084F  3463               	retlw	99	;'c'
   982  0850  3464               	retlw	100	;'d'
   983  0851  3465               	retlw	101	;'e'
   984  0852  3466               	retlw	102	;'f'
   985  0853  3400               	retlw	0
   986                           
   987                           	psect	stringtext8
   988  085C                     __pstringtext8:	
   989  085C                     STR_6:	
   990  085C  3428               	retlw	40	;'('
   991  085D  346E               	retlw	110	;'n'
   992  085E  3475               	retlw	117	;'u'
   993  085F  346C               	retlw	108	;'l'
   994  0860  346C               	retlw	108	;'l'
   995  0861  3429               	retlw	41	;')'
   996  0862  3400               	retlw	0
   997                           
   998                           	psect	stringtext9
   999  0866                     __pstringtext9:	
  1000  0866                     STR_3:	
  1001  0866  3425               	retlw	37	;'%'
  1002  0867  3463               	retlw	99	;'c'
  1003  0868  3400               	retlw	0
  1004                           
  1005                           	psect	stringtext10
  1006  0000                     __pstringtext10:	
  1007  0803                     
  1008                           ; #config settings
  1009  0000                     
  1010                           	psect	cinit
  1011  07E0                     start_initialization:	
  1012  07E0                     __initialization:	
  1013                           
  1014                           ; Initialize objects allocated to BANK0
  1015  07E0  308B               	movlw	low __pidataBANK0
  1016  07E1  0084               	movwf	4
  1017  07E2  3082               	movlw	(high __pidataBANK0)| (0+128)
  1018  07E3  0085               	movwf	5
  1019  07E4  0012               	moviw fsr0++
  1020  07E5  00E2               	movwf	__pdataBANK0& (0+127)
  1021  07E6  0012               	moviw fsr0++
  1022  07E7  00E3               	movwf	(__pdataBANK0+1)& (0+127)
  1023  07E8  0012               	moviw fsr0++
  1024  07E9  00E4               	movwf	(__pdataBANK0+2)& (0+127)
  1025  07EA  0012               	moviw fsr0++
  1026  07EB  00E5               	movwf	(__pdataBANK0+3)& (0+127)
  1027  07EC  0012               	moviw fsr0++
  1028  07ED  00E6               	movwf	(__pdataBANK0+4)& (0+127)
  1029                           
  1030                           ; Clear objects allocated to BANK0
  1031  07EE  3047               	movlw	low __pbssBANK0
  1032  07EF  0084               	movwf	4
  1033  07F0  3000               	movlw	high __pbssBANK0
  1034  07F1  0085               	movwf	5
  1035  07F2  301B               	movlw	27
  1036  07F3  3182  2296  3187   	fcall	clear_ram0
  1037                           
  1038                           ; Clear objects allocated to BANK1
  1039  07F6  30A0               	movlw	low __pbssBANK1
  1040  07F7  0084               	movwf	4
  1041  07F8  3000               	movlw	high __pbssBANK1
  1042  07F9  0085               	movwf	5
  1043  07FA  300F               	movlw	15
  1044  07FB  3182  2296         	fcall	clear_ram0
  1045  07FD                     end_of_initialization:	
  1046                           ;End of C runtime variable initialization code
  1047                           
  1048  07FD                     __end_of__initialization:	
  1049  07FD  0020               	movlb	0
  1050  07FE  3185  2D98         	ljmp	_main	;jump to C main() function
  1051                           
  1052                           	psect	bssBANK0
  1053  0047                     __pbssBANK0:	
  1054  0047                     _sid:	
  1055  0047                     	ds	2
  1056  0049                     _cnt:	
  1057  0049                     	ds	1
  1058  004A                     _c:	
  1059  004A                     	ds	1
  1060  004B                     _tx_buf:	
  1061  004B                     	ds	14
  1062  0059                     _buf:	
  1063  0059                     	ds	9
  1064                           
  1065                           	psect	dataBANK0
  1066  0062                     __pdataBANK0:	
  1067  0062                     can_start@F2930:	
  1068  0062                     	ds	3
  1069  0065                     can_status_check@F2954:	
  1070  0065                     	ds	2
  1071                           
  1072                           	psect	bssBANK1
  1073  00A0                     __pbssBANK1:	
  1074  00A0                     _rx_buf:	
  1075  00A0                     	ds	15
  1076                           
  1077                           	psect	clrtext
  1078  0296                     clear_ram0:	
  1079                           ;	Called with FSR0 containing the base address, and
  1080                           ;	WREG with the size to clear
  1081                           
  1082  0296  0064               	clrwdt	;clear the watchdog before getting into this loop
  1083  0297                     clrloop0:	
  1084  0297  0180               	clrf	0	;clear RAM location pointed to by FSR
  1085  0298  3101               	addfsr 0,1
  1086  0299  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1087  029A  2A97               	goto	clrloop0	;have we reached the end yet?
  1088  029B  3400               	retlw	0	;all done for this memory range, return
  1089                           
  1090                           	psect	cstackCOMMON
  1091  0070                     __pcstackCOMMON:	
  1092  0070                     ?_isdigit:	
  1093  0070                     ?_PIN_MANAGER_Initialize:	
  1094                           ; 1 bit 
  1095                           
  1096  0070                     ??_PIN_MANAGER_Initialize:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_OSCILLATOR_Initialize:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ??_OSCILLATOR_Initialize:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_WDT_Initialize:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ??_WDT_Initialize:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_SPI_Initialize:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ??_SPI_Initialize:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_EUSART_Initialize:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ??_EUSART_Initialize:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ??_isdigit:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_SYSTEM_Initialize:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ??_SYSTEM_Initialize:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_EUSART_Read:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ??_EUSART_Read:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_EUSART_Write:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ??_EUSART_Write:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_putch:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_SPI_Exchange8bit:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_SPI_Exchange8bit:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_can_start:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_can_txf_clear:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_can_receive:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_can_status_check:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_main:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?___wmul:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?___lwdiv:	
  1172                           ; 2 bytes @ 0x0
  1173                           
  1174  0070                     EUSART_Write@txData:	
  1175                           ; 2 bytes @ 0x0
  1176                           
  1177  0070                     SPI_Exchange8bit@data:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     _isdigit$622:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ___wmul@multiplier:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     ___lwdiv@divisor:	
  1187                           ; 2 bytes @ 0x0
  1188                           
  1189                           
  1190                           ; 2 bytes @ 0x0
  1191  0070                     	ds	1
  1192  0071                     ??_putch:	
  1193  0071                     ?_SPI_Exchange8bitBuffer:	
  1194                           ; 1 bytes @ 0x1
  1195                           
  1196  0071                     putch@txData:	
  1197                           ; 1 bytes @ 0x1
  1198                           
  1199  0071                     SPI_Exchange8bitBuffer@bufLen:	
  1200                           ; 1 bytes @ 0x1
  1201                           
  1202  0071                     isdigit@c:	
  1203                           ; 1 bytes @ 0x1
  1204                           
  1205                           
  1206                           ; 1 bytes @ 0x1
  1207  0071                     	ds	1
  1208  0072                     SPI_Exchange8bitBuffer@dataOut:	
  1209  0072                     ___wmul@multiplicand:	
  1210                           ; 1 bytes @ 0x2
  1211                           
  1212  0072                     ___lwdiv@dividend:	
  1213                           ; 2 bytes @ 0x2
  1214                           
  1215                           
  1216                           ; 2 bytes @ 0x2
  1217  0072                     	ds	1
  1218  0073                     ??_SPI_Exchange8bitBuffer:	
  1219                           
  1220                           ; 1 bytes @ 0x3
  1221  0073                     	ds	1
  1222  0074                     ??___wmul:	
  1223  0074                     ??___lwdiv:	
  1224                           ; 1 bytes @ 0x4
  1225                           
  1226  0074                     ___wmul@product:	
  1227                           ; 1 bytes @ 0x4
  1228                           
  1229                           
  1230                           ; 2 bytes @ 0x4
  1231  0074                     	ds	1
  1232  0075                     ___lwdiv@quotient:	
  1233                           
  1234                           ; 2 bytes @ 0x5
  1235  0075                     	ds	1
  1236  0076                     ?_atoi:	
  1237  0076                     SPI_Exchange8bitBuffer@dataIn:	
  1238                           ; 2 bytes @ 0x6
  1239                           
  1240  0076                     atoi@s:	
  1241                           ; 1 bytes @ 0x6
  1242                           
  1243                           
  1244                           ; 2 bytes @ 0x6
  1245  0076                     	ds	1
  1246  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  1247  0077                     ___lwdiv@counter:	
  1248                           ; 1 bytes @ 0x7
  1249                           
  1250                           
  1251                           ; 1 bytes @ 0x7
  1252  0077                     	ds	1
  1253  0078                     ??_atoi:	
  1254  0078                     ?_SPI_send:	
  1255                           ; 1 bytes @ 0x8
  1256                           
  1257  0078                     ?_printf:	
  1258                           ; 1 bytes @ 0x8
  1259                           
  1260  0078                     SPI_send@len:	
  1261                           ; 2 bytes @ 0x8
  1262                           
  1263  0078                     printf@f:	
  1264                           ; 1 bytes @ 0x8
  1265                           
  1266                           
  1267                           ; 2 bytes @ 0x8
  1268  0078                     	ds	1
  1269  0079                     SPI_send@rbuf:	
  1270                           
  1271                           ; 1 bytes @ 0x9
  1272  0079                     	ds	1
  1273  007A                     ??_SPI_send:	
  1274  007A                     atoi@sign:	
  1275                           ; 1 bytes @ 0xA
  1276                           
  1277                           
  1278                           ; 1 bytes @ 0xA
  1279  007A                     	ds	1
  1280  007B                     atoi@a:	
  1281                           
  1282                           ; 2 bytes @ 0xB
  1283  007B                     	ds	3
  1284                           
  1285                           	psect	cstackBANK0
  1286  0020                     __pcstackBANK0:	
  1287  0020                     ??_printf:	
  1288  0020                     SPI_send@bytes_written:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291                           
  1292                           ; 1 bytes @ 0x0
  1293  0020                     	ds	1
  1294  0021                     SPI_send@sbuf:	
  1295                           
  1296                           ; 1 bytes @ 0x1
  1297  0021                     	ds	1
  1298  0022                     ??_can_start:	
  1299  0022                     ??_can_txf_clear:	
  1300                           ; 1 bytes @ 0x2
  1301                           
  1302  0022                     ?_can_send:	
  1303                           ; 1 bytes @ 0x2
  1304                           
  1305  0022                     can_send@buf:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308                           
  1309                           ; 1 bytes @ 0x2
  1310  0022                     	ds	1
  1311  0023                     can_send@cnt:	
  1312                           
  1313                           ; 1 bytes @ 0x3
  1314  0023                     	ds	1
  1315  0024                     ??_can_send:	
  1316  0024                     printf@idx:	
  1317                           ; 1 bytes @ 0x4
  1318                           
  1319                           
  1320                           ; 1 bytes @ 0x4
  1321  0024                     	ds	1
  1322  0025                     can_txf_clear@n:	
  1323  0025                     printf@flag:	
  1324                           ; 1 bytes @ 0x5
  1325                           
  1326  0025                     can_start@can_ctrl_buf:	
  1327                           ; 1 bytes @ 0x5
  1328                           
  1329                           
  1330                           ; 3 bytes @ 0x5
  1331  0025                     	ds	1
  1332  0026                     can_txf_clear@mask:	
  1333  0026                     printf@val:	
  1334                           ; 1 bytes @ 0x6
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x6
  1338  0026                     	ds	1
  1339  0027                     can_txf_clear@bytes_written:	
  1340  0027                     can_send@n:	
  1341                           ; 1 bytes @ 0x7
  1342                           
  1343                           
  1344                           ; 1 bytes @ 0x7
  1345  0027                     	ds	1
  1346  0028                     can_start@bytes_written:	
  1347  0028                     can_send@len:	
  1348                           ; 1 bytes @ 0x8
  1349                           
  1350  0028                     printf@prec:	
  1351                           ; 1 bytes @ 0x8
  1352                           
  1353  0028                     can_txf_clear@can_int_flag:	
  1354                           ; 1 bytes @ 0x8
  1355                           
  1356                           
  1357                           ; 4 bytes @ 0x8
  1358  0028                     	ds	1
  1359  0029                     can_send@bytes_written:	
  1360  0029                     printf@cp:	
  1361                           ; 1 bytes @ 0x9
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0x9
  1365  0029                     	ds	1
  1366  002A                     can_send@i:	
  1367                           
  1368                           ; 1 bytes @ 0xA
  1369  002A                     	ds	1
  1370  002B                     can_send@txb_ctrl_buf:	
  1371  002B                     printf@ap:	
  1372                           ; 1 bytes @ 0xB
  1373                           
  1374                           
  1375                           ; 1 bytes @ 0xB
  1376  002B                     	ds	1
  1377  002C                     printf@len:	
  1378                           
  1379                           ; 2 bytes @ 0xC
  1380  002C                     	ds	2
  1381  002E                     printf@width:	
  1382                           
  1383                           ; 2 bytes @ 0xE
  1384  002E                     	ds	2
  1385  0030                     printf@c:	
  1386                           
  1387                           ; 1 bytes @ 0x10
  1388  0030                     	ds	1
  1389  0031                     ?_set_sid:	
  1390  0031                     ??_can_receive:	
  1391                           ; 1 bytes @ 0x11
  1392                           
  1393  0031                     set_sid@can_node:	
  1394                           ; 1 bytes @ 0x11
  1395                           
  1396                           
  1397                           ; 2 bytes @ 0x11
  1398  0031                     	ds	2
  1399  0033                     ??_set_sid:	
  1400                           
  1401                           ; 1 bytes @ 0x13
  1402  0033                     	ds	1
  1403  0034                     can_receive@bytes_written:	
  1404                           
  1405                           ; 1 bytes @ 0x14
  1406  0034                     	ds	1
  1407  0035                     can_receive@bytes_read:	
  1408                           
  1409                           ; 1 bytes @ 0x15
  1410  0035                     	ds	1
  1411  0036                     can_receive@mask:	
  1412                           
  1413                           ; 1 bytes @ 0x16
  1414  0036                     	ds	1
  1415  0037                     set_sid@sidh:	
  1416  0037                     can_receive@can_int_flag:	
  1417                           ; 1 bytes @ 0x17
  1418                           
  1419                           
  1420                           ; 4 bytes @ 0x17
  1421  0037                     	ds	1
  1422  0038                     set_sid@sidl:	
  1423                           
  1424                           ; 1 bytes @ 0x18
  1425  0038                     	ds	3
  1426  003B                     can_receive@n:	
  1427                           
  1428                           ; 1 bytes @ 0x1B
  1429  003B                     	ds	1
  1430  003C                     ??_can_status_check:	
  1431                           
  1432                           ; 1 bytes @ 0x1C
  1433  003C                     	ds	3
  1434  003F                     can_status_check@bytes_written:	
  1435                           
  1436                           ; 1 bytes @ 0x1F
  1437  003F                     	ds	1
  1438  0040                     can_status_check@can_status_buf:	
  1439                           
  1440                           ; 2 bytes @ 0x20
  1441  0040                     	ds	2
  1442  0042                     can_status_check@status:	
  1443                           
  1444                           ; 1 bytes @ 0x22
  1445  0042                     	ds	1
  1446  0043                     ??_main:	
  1447                           
  1448                           ; 1 bytes @ 0x23
  1449  0043                     	ds	2
  1450  0045                     main@sid:	
  1451                           
  1452                           ; 2 bytes @ 0x25
  1453  0045                     	ds	2
  1454                           
  1455                           	psect	maintext
  1456  0598                     __pmaintext:	
  1457 ;;
  1458 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1459 ;;
  1460 ;; *************** function _main *****************
  1461 ;; Defined at:
  1462 ;;		line 203 in file "main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  sid             2   37[BANK0 ] unsigned int 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : B1F/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1479 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1480 ;;Total ram usage:        4 bytes
  1481 ;; Hardware stack levels required when called:    5
  1482 ;; This function calls:
  1483 ;;		_EUSART_Read
  1484 ;;		_SYSTEM_Initialize
  1485 ;;		_atoi
  1486 ;;		_can_send
  1487 ;;		_can_start
  1488 ;;		_can_status_check
  1489 ;;		_printf
  1490 ;;		_set_sid
  1491 ;; This function is called by:
  1492 ;;		Startup code after reset
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           
  1497                           ;psect for function _main
  1498  0598                     _main:	
  1499                           
  1500                           ;main.c: 205: SYSTEM_Initialize();
  1501                           
  1502                           ;incstack = 0
  1503                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1504  0598  3182  22DB  3185   	fcall	_SYSTEM_Initialize
  1505                           
  1506                           ;main.c: 210: set_sid(0);
  1507  059B  3000               	movlw	0
  1508  059C  0020               	movlb	0	; select bank0
  1509  059D  00B1               	movwf	set_sid@can_node
  1510  059E  00B2               	movwf	set_sid@can_node+1
  1511  059F  3183  23AC  3185   	fcall	_set_sid
  1512                           
  1513                           ;main.c: 211: can_start();
  1514  05A2  3183  2301  3185   	fcall	_can_start
  1515  05A5                     l1675:	
  1516                           ;main.c: 213: while (1)
  1517                           
  1518                           
  1519                           ;main.c: 214: {
  1520                           ;main.c: 215: can_status_check();
  1521  05A5  3183  23E4  3185   	fcall	_can_status_check
  1522                           
  1523                           ;main.c: 217: if ((PIR1bits.RCIF)) {
  1524  05A8  0020               	movlb	0	; select bank0
  1525  05A9  1E91               	btfss	17,5	;volatile
  1526  05AA  2DA5               	goto	l1675
  1527                           
  1528                           ;main.c: 218: c = EUSART_Read();
  1529  05AB  3182  22AD  3185   	fcall	_EUSART_Read
  1530  05AE  0020               	movlb	0	; select bank0
  1531  05AF  00C3               	movwf	??_main
  1532  05B0  0843               	movf	??_main,w
  1533  05B1  00CA               	movwf	_c
  1534                           
  1535                           ;main.c: 219: printf("%c", c);
  1536  05B2  3066               	movlw	low (STR_3| (0+32768))
  1537  05B3  00F8               	movwf	printf@f
  1538  05B4  3088               	movlw	high (STR_3| (0+32768))
  1539  05B5  00F9               	movwf	printf@f+1
  1540  05B6  084A               	movf	_c,w
  1541  05B7  00C3               	movwf	??_main
  1542  05B8  01C4               	clrf	??_main+1
  1543  05B9  0843               	movf	??_main,w
  1544  05BA  00FA               	movwf	?_printf+2
  1545  05BB  0844               	movf	??_main+1,w
  1546  05BC  00FB               	movwf	?_printf+3
  1547  05BD  3186  263C  3185   	fcall	_printf
  1548                           
  1549                           ;main.c: 220: LATCbits.LATC3 = !LATCbits.LATC3;
  1550  05C0  1003               	clrc
  1551  05C1  0022               	movlb	2	; select bank2
  1552  05C2  1D8E               	btfss	14,3	;volatile
  1553  05C3  1403               	setc
  1554  05C4  1C03               	btfss	3,0
  1555  05C5  2DC9               	goto	u1300
  1556  05C6  0022               	movlb	2	; select bank2
  1557  05C7  158E               	bsf	14,3	;volatile
  1558  05C8  2DCB               	goto	l1685
  1559  05C9                     u1300:	
  1560  05C9  0022               	movlb	2	; select bank2
  1561  05CA  118E               	bcf	14,3	;volatile
  1562  05CB                     l1685:	
  1563                           
  1564                           ;main.c: 222: buf[cnt] = c;
  1565  05CB  0020               	movlb	0	; select bank0
  1566  05CC  084A               	movf	_c,w
  1567  05CD  00C3               	movwf	??_main
  1568  05CE  0849               	movf	_cnt,w
  1569  05CF  3E59               	addlw	(low (_buf| 0))& (0+255)
  1570  05D0  0086               	movwf	6
  1571  05D1  0187               	clrf	7
  1572  05D2  0843               	movf	??_main,w
  1573  05D3  0081               	movwf	1
  1574                           
  1575                           ;main.c: 223: if (c == '\n') {
  1576  05D4  300A               	movlw	10
  1577  05D5  064A               	xorwf	_c,w
  1578  05D6  1D03               	btfss	3,2
  1579  05D7  2E0E               	goto	l1701
  1580                           
  1581                           ;main.c: 224: buf[cnt] = '\0';
  1582  05D8  0849               	movf	_cnt,w
  1583  05D9  3E59               	addlw	(low (_buf| 0))& (0+255)
  1584  05DA  0086               	movwf	6
  1585  05DB  0187               	clrf	7
  1586  05DC  0181               	clrf	1
  1587                           
  1588                           ;main.c: 225: if (buf[0] == '@') {
  1589  05DD  3040               	movlw	64
  1590  05DE  0659               	xorwf	_buf,w
  1591  05DF  1D03               	btfss	3,2
  1592  05E0  2DFD               	goto	l1697
  1593                           
  1594                           ;main.c: 226: uint16_t sid = atoi(&buf[1]);
  1595  05E1  305A               	movlw	low (_buf+1)
  1596  05E2  00F6               	movwf	atoi@s
  1597  05E3  3000               	movlw	high (_buf+1)
  1598  05E4  00F7               	movwf	atoi@s+1
  1599  05E5  3185  252C  3185   	fcall	_atoi
  1600  05E8  0877               	movf	?_atoi+1,w
  1601  05E9  0020               	movlb	0	; select bank0
  1602  05EA  00C6               	movwf	main@sid+1
  1603  05EB  0876               	movf	?_atoi,w
  1604  05EC  00C5               	movwf	main@sid
  1605                           
  1606                           ;main.c: 227: set_sid(atoi(sid));
  1607  05ED  0846               	movf	main@sid+1,w
  1608  05EE  00F7               	movwf	atoi@s+1
  1609  05EF  0845               	movf	main@sid,w
  1610  05F0  00F6               	movwf	atoi@s
  1611  05F1  3185  252C  3185   	fcall	_atoi
  1612  05F4  0877               	movf	?_atoi+1,w
  1613  05F5  0020               	movlb	0	; select bank0
  1614  05F6  00B2               	movwf	set_sid@can_node+1
  1615  05F7  0876               	movf	?_atoi,w
  1616  05F8  00B1               	movwf	set_sid@can_node
  1617  05F9  3183  23AC  3185   	fcall	_set_sid
  1618                           
  1619                           ;main.c: 228: } else {
  1620  05FC  2E39               	goto	l1709
  1621  05FD                     l1697:	
  1622                           
  1623                           ;main.c: 229: can_send(0, buf, cnt);
  1624  05FD  3059               	movlw	(low (_buf| 0))& (0+255)
  1625  05FE  0020               	movlb	0	; select bank0
  1626  05FF  00C3               	movwf	??_main
  1627  0600  0843               	movf	??_main,w
  1628  0601  00A2               	movwf	can_send@buf
  1629  0602  0849               	movf	_cnt,w
  1630  0603  00C4               	movwf	??_main+1
  1631  0604  0844               	movf	??_main+1,w
  1632  0605  00A3               	movwf	can_send@cnt
  1633  0606  3000               	movlw	0
  1634  0607  3184  24C5  3185   	fcall	_can_send
  1635                           
  1636                           ;main.c: 230: printf("CAN message sent: %s\n", buf);
  1637  060A  3003               	movlw	low ((STR_5+1)| (0+32768))
  1638  060B  00F8               	movwf	printf@f
  1639  060C  3088               	movlw	high ((STR_5+1)| (0+32768))
  1640  060D  2E30               	goto	L1
  1641  060E                     l1701:	
  1642                           ;main.c: 233: } else if (++cnt > max_char) {
  1643                           
  1644                           ;main.c: 231: }
  1645                           ;main.c: 232: cnt = 0;
  1646                           
  1647  060E  3001               	movlw	1
  1648  060F  00C3               	movwf	??_main
  1649  0610  0843               	movf	??_main,w
  1650  0611  07C9               	addwf	_cnt,f
  1651  0612  3069               	movlw	low (_max_char| (0+32768))
  1652  0613  0084               	movwf	4
  1653  0614  3088               	movlw	high (_max_char| (0+32768))
  1654  0615  0085               	movwf	5
  1655  0616  0800               	movf	0,w	;code access
  1656  0617  00C4               	movwf	??_main+1
  1657  0618  0849               	movf	_cnt,w
  1658  0619  0244               	subwf	??_main+1,w
  1659  061A  1803               	skipnc
  1660  061B  2DA5               	goto	l1675
  1661                           
  1662                           ;main.c: 234: buf[cnt] = '\0';
  1663  061C  0849               	movf	_cnt,w
  1664  061D  3E59               	addlw	(low (_buf| 0))& (0+255)
  1665  061E  0086               	movwf	6
  1666  061F  0187               	clrf	7
  1667  0620  0181               	clrf	1
  1668                           
  1669                           ;main.c: 235: can_send(0, buf, cnt);
  1670  0621  3059               	movlw	(low (_buf| 0))& (0+255)
  1671  0622  00C3               	movwf	??_main
  1672  0623  0843               	movf	??_main,w
  1673  0624  00A2               	movwf	can_send@buf
  1674  0625  0849               	movf	_cnt,w
  1675  0626  00C4               	movwf	??_main+1
  1676  0627  0844               	movf	??_main+1,w
  1677  0628  00A3               	movwf	can_send@cnt
  1678  0629  3000               	movlw	0
  1679  062A  3184  24C5  3185   	fcall	_can_send
  1680                           
  1681                           ;main.c: 236: printf("\nCAN message sent: %s\n", buf);
  1682  062D  3002               	movlw	low (STR_5| (0+32768))
  1683  062E  00F8               	movwf	printf@f
  1684  062F  3088               	movlw	high (STR_5| (0+32768))
  1685  0630                     L1:	
  1686  0630  00F9               	movwf	printf@f+1
  1687  0631  3059               	movlw	(low (_buf| 0))& (0+255)
  1688  0632  0020               	movlb	0	; select bank0
  1689  0633  00C3               	movwf	??_main
  1690  0634  0843               	movf	??_main,w
  1691  0635  00FA               	movwf	?_printf+2
  1692  0636  3186  263C  3185   	fcall	_printf
  1693  0639                     l1709:	
  1694                           
  1695                           ;main.c: 237: cnt = 0;
  1696  0639  0020               	movlb	0	; select bank0
  1697  063A  01C9               	clrf	_cnt
  1698  063B  2DA5               	goto	l1675
  1699  063C                     __end_of_main:	
  1700                           
  1701                           	psect	text1
  1702  03AC                     __ptext1:	
  1703 ;; *************** function _set_sid *****************
  1704 ;; Defined at:
  1705 ;;		line 72 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  can_node        2   17[BANK0 ] unsigned int 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  sidl            1   24[BANK0 ] unsigned char 
  1710 ;;  sidh            1   23[BANK0 ] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1720 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1722 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1723 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1724 ;;Total ram usage:        8 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    3
  1727 ;; This function calls:
  1728 ;;		_printf
  1729 ;; This function is called by:
  1730 ;;		_main
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           
  1735                           ;psect for function _set_sid
  1736  03AC                     _set_sid:	
  1737                           
  1738                           ;main.c: 73: uint8_t sidh = (can_node >> 3) & 0x00ff;
  1739                           
  1740                           ;incstack = 0
  1741                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1742  03AC  0020               	movlb	0	; select bank0
  1743  03AD  0832               	movf	set_sid@can_node+1,w
  1744  03AE  00B4               	movwf	??_set_sid+1
  1745  03AF  0831               	movf	set_sid@can_node,w
  1746  03B0  00B3               	movwf	??_set_sid
  1747  03B1  36B4               	lsrf	??_set_sid+1,f
  1748  03B2  0CB3               	rrf	??_set_sid,f
  1749  03B3  36B4               	lsrf	??_set_sid+1,f
  1750  03B4  0CB3               	rrf	??_set_sid,f
  1751  03B5  36B4               	lsrf	??_set_sid+1,f
  1752  03B6  0CB3               	rrf	??_set_sid,f
  1753  03B7  0833               	movf	??_set_sid,w
  1754  03B8  00B5               	movwf	??_set_sid+2
  1755  03B9  0835               	movf	??_set_sid+2,w
  1756  03BA  00B7               	movwf	set_sid@sidh
  1757                           
  1758                           ;main.c: 74: uint8_t sidl = (can_node << 5) & 0x00e0;
  1759  03BB  0831               	movf	set_sid@can_node,w
  1760  03BC  00B3               	movwf	??_set_sid
  1761  03BD  3004               	movlw	4
  1762  03BE                     u1135:	
  1763  03BE  35B3               	lslf	??_set_sid,f
  1764  03BF  3EFF               	addlw	-1
  1765  03C0  1D03               	skipz
  1766  03C1  2BBE               	goto	u1135
  1767  03C2  3533               	lslf	??_set_sid,w
  1768  03C3  39E0               	andlw	224
  1769  03C4  00B4               	movwf	??_set_sid+1
  1770  03C5  0834               	movf	??_set_sid+1,w
  1771  03C6  00B8               	movwf	set_sid@sidl
  1772                           
  1773                           ;main.c: 75: sid.sidh = sidh;
  1774  03C7  0837               	movf	set_sid@sidh,w
  1775  03C8  00B3               	movwf	??_set_sid
  1776  03C9  0833               	movf	??_set_sid,w
  1777  03CA  00C7               	movwf	_sid
  1778                           
  1779                           ;main.c: 76: sid.sidl = sidl;
  1780  03CB  0838               	movf	set_sid@sidl,w
  1781  03CC  00B3               	movwf	??_set_sid
  1782  03CD  0833               	movf	??_set_sid,w
  1783  03CE  00C8               	movwf	_sid+1
  1784                           
  1785                           ;main.c: 77: printf("SID set: %02x %02x\n", sidh, sidl);
  1786  03CF  302F               	movlw	low (STR_1| (0+32768))
  1787  03D0  00F8               	movwf	printf@f
  1788  03D1  3088               	movlw	high (STR_1| (0+32768))
  1789  03D2  00F9               	movwf	printf@f+1
  1790  03D3  0837               	movf	set_sid@sidh,w
  1791  03D4  00B3               	movwf	??_set_sid
  1792  03D5  01B4               	clrf	??_set_sid+1
  1793  03D6  0833               	movf	??_set_sid,w
  1794  03D7  00FA               	movwf	?_printf+2
  1795  03D8  0834               	movf	??_set_sid+1,w
  1796  03D9  00FB               	movwf	?_printf+3
  1797  03DA  0838               	movf	set_sid@sidl,w
  1798  03DB  00B5               	movwf	??_set_sid+2
  1799  03DC  01B6               	clrf	??_set_sid+3
  1800  03DD  0835               	movf	??_set_sid+2,w
  1801  03DE  00FC               	movwf	?_printf+4
  1802  03DF  0836               	movf	??_set_sid+3,w
  1803  03E0  00FD               	movwf	?_printf+5
  1804  03E1  3186  263C         	fcall	_printf
  1805  03E3  0008               	return
  1806  03E4                     __end_of_set_sid:	
  1807                           
  1808                           	psect	text2
  1809  03E4                     __ptext2:	
  1810 ;; *************** function _can_status_check *****************
  1811 ;; Defined at:
  1812 ;;		line 183 in file "main.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  can_status_b    2   32[BANK0 ] unsigned char [2]
  1817 ;;  status          1   34[BANK0 ] unsigned char 
  1818 ;;  bytes_writte    1   31[BANK0 ] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1829 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1830 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1831 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1832 ;;Total ram usage:        7 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    4
  1835 ;; This function calls:
  1836 ;;		_SPI_send
  1837 ;;		_can_receive
  1838 ;;		_can_txf_clear
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _can_status_check
  1846  03E4                     _can_status_check:	
  1847                           
  1848                           ;main.c: 185: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1852  03E4  0020               	movlb	0	; select bank0
  1853  03E5  0866               	movf	can_status_check@F2954+1,w
  1854  03E6  00C1               	movwf	can_status_check@can_status_buf+1
  1855  03E7  0865               	movf	can_status_check@F2954,w
  1856  03E8  00C0               	movwf	can_status_check@can_status_buf
  1857                           
  1858                           ;main.c: 186: uint8_t bytes_written = SPI_send(can_status_buf, 2, can_status_buf);
  1859  03E9  3002               	movlw	2
  1860  03EA  00BC               	movwf	??_can_status_check
  1861  03EB  083C               	movf	??_can_status_check,w
  1862  03EC  00F8               	movwf	SPI_send@len
  1863  03ED  3040               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  1864  03EE  00BD               	movwf	??_can_status_check+1
  1865  03EF  083D               	movf	??_can_status_check+1,w
  1866  03F0  00F9               	movwf	SPI_send@rbuf
  1867  03F1  3040               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  1868  03F2  3183  2318  3183   	fcall	_SPI_send
  1869  03F5  0020               	movlb	0	; select bank0
  1870  03F6  00BE               	movwf	??_can_status_check+2
  1871  03F7  083E               	movf	??_can_status_check+2,w
  1872  03F8  00BF               	movwf	can_status_check@bytes_written
  1873                           
  1874                           ;main.c: 187: uint8_t status = can_status_buf[0];
  1875  03F9  0840               	movf	can_status_check@can_status_buf,w
  1876  03FA  00BC               	movwf	??_can_status_check
  1877  03FB  083C               	movf	??_can_status_check,w
  1878  03FC  00C2               	movwf	can_status_check@status
  1879                           
  1880                           ;main.c: 188: if (status != 0x00) {
  1881  03FD  0842               	movf	can_status_check@status,w
  1882  03FE  1D03               	btfss	3,2
  1883  03FF  0008               	return
  1884                           
  1885                           ;main.c: 190: } else if (status & (0b00000001 > 0)) {
  1886                           
  1887                           ;main.c: 189: return;
  1888  0400  1C42               	btfss	can_status_check@status,0
  1889  0401  2C06               	goto	l216
  1890                           
  1891                           ;main.c: 191: can_receive(0);
  1892  0402  3000               	movlw	0
  1893  0403  3184  246C         	fcall	_can_receive
  1894                           
  1895                           ;main.c: 192: } else if (status & (0b00000010 > 0)) {
  1896  0405  0008               	return
  1897  0406                     l216:	
  1898  0406  1C42               	btfss	can_status_check@status,0
  1899  0407  2C0C               	goto	l218
  1900                           
  1901                           ;main.c: 193: can_receive(1);
  1902  0408  3001               	movlw	1
  1903  0409  3184  246C         	fcall	_can_receive
  1904                           
  1905                           ;main.c: 194: } else if (status & (0b00001000 > 0)) {
  1906  040B  0008               	return
  1907  040C                     l218:	
  1908  040C  1C42               	btfss	can_status_check@status,0
  1909  040D  2C12               	goto	l220
  1910                           
  1911                           ;main.c: 195: can_txf_clear(0);
  1912  040E  3000               	movlw	0
  1913  040F  3183  234C         	fcall	_can_txf_clear
  1914                           
  1915                           ;main.c: 196: } else if (status & (0b00100000 > 0)) {
  1916  0411  0008               	return
  1917  0412                     l220:	
  1918  0412  1C42               	btfss	can_status_check@status,0
  1919  0413  2C18               	goto	l222
  1920                           
  1921                           ;main.c: 197: can_txf_clear(1);
  1922  0414  3001               	movlw	1
  1923  0415  3183  234C         	fcall	_can_txf_clear
  1924                           
  1925                           ;main.c: 198: } else if (status & (0b10000000 > 0)) {
  1926  0417  0008               	return
  1927  0418                     l222:	
  1928  0418  1C42               	btfss	can_status_check@status,0
  1929  0419  0008               	return
  1930                           
  1931                           ;main.c: 199: can_txf_clear(2);
  1932  041A  3002               	movlw	2
  1933  041B  3183  234C         	fcall	_can_txf_clear
  1934  041D  0008               	return
  1935  041E                     __end_of_can_status_check:	
  1936                           
  1937                           	psect	text3
  1938  034C                     __ptext3:	
  1939 ;; *************** function _can_txf_clear *****************
  1940 ;; Defined at:
  1941 ;;		line 103 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  n               1    wreg     unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  n               1    5[BANK0 ] unsigned char 
  1946 ;;  can_int_flag    4    8[BANK0 ] unsigned char [4]
  1947 ;;  bytes_writte    1    7[BANK0 ] unsigned char 
  1948 ;;  mask            1    6[BANK0 ] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      unsigned char 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1959 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1960 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1961 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1962 ;;Total ram usage:       10 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    3
  1965 ;; This function calls:
  1966 ;;		_SPI_send
  1967 ;; This function is called by:
  1968 ;;		_can_status_check
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           
  1973                           ;psect for function _can_txf_clear
  1974  034C                     _can_txf_clear:	
  1975                           
  1976                           ;incstack = 0
  1977                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1978                           ;can_txf_clear@n stored from wreg
  1979  034C  0020               	movlb	0	; select bank0
  1980  034D  00A5               	movwf	can_txf_clear@n
  1981                           
  1982                           ;main.c: 104: uint8_t mask = 0b00000001 << (n + 2);
  1983  034E  3001               	movlw	1
  1984  034F  00A2               	movwf	??_can_txf_clear
  1985  0350  0825               	movf	can_txf_clear@n,w
  1986  0351  3E02               	addlw	2
  1987  0352  0A89               	incf	9,f
  1988  0353  2B55               	goto	u1094
  1989  0354                     u1095:	
  1990  0354  35A2               	lslf	??_can_txf_clear,f
  1991  0355                     u1094:	
  1992  0355  0B89               	decfsz	9,f
  1993  0356  2B54               	goto	u1095
  1994  0357  0822               	movf	??_can_txf_clear,w
  1995  0358  00A3               	movwf	??_can_txf_clear+1
  1996  0359  0823               	movf	??_can_txf_clear+1,w
  1997  035A  00A6               	movwf	can_txf_clear@mask
  1998                           
  1999                           ;main.c: 105: uint8_t can_int_flag[4];
  2000                           ;main.c: 106: can_int_flag[0] =0b00000101;
  2001  035B  3005               	movlw	5
  2002  035C  00A2               	movwf	??_can_txf_clear
  2003  035D  0822               	movf	??_can_txf_clear,w
  2004  035E  00A8               	movwf	can_txf_clear@can_int_flag
  2005                           
  2006                           ;main.c: 107: can_int_flag[1] = 0x2c;
  2007  035F  302C               	movlw	44
  2008  0360  00A2               	movwf	??_can_txf_clear
  2009  0361  0822               	movf	??_can_txf_clear,w
  2010  0362  00A9               	movwf	can_txf_clear@can_int_flag+1
  2011                           
  2012                           ;main.c: 108: can_int_flag[2] = mask;
  2013  0363  0826               	movf	can_txf_clear@mask,w
  2014  0364  00A2               	movwf	??_can_txf_clear
  2015  0365  0822               	movf	??_can_txf_clear,w
  2016  0366  00AA               	movwf	can_txf_clear@can_int_flag+2
  2017                           
  2018                           ;main.c: 109: can_int_flag[3] = 0x00;
  2019  0367  01AB               	clrf	can_txf_clear@can_int_flag+3
  2020                           
  2021                           ;main.c: 110: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2022  0368  3004               	movlw	4
  2023  0369  00A2               	movwf	??_can_txf_clear
  2024  036A  0822               	movf	??_can_txf_clear,w
  2025  036B  00F8               	movwf	SPI_send@len
  2026  036C  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2027  036D  00A3               	movwf	??_can_txf_clear+1
  2028  036E  0823               	movf	??_can_txf_clear+1,w
  2029  036F  00F9               	movwf	SPI_send@rbuf
  2030  0370  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2031  0371  3183  2318         	fcall	_SPI_send
  2032  0373  0020               	movlb	0	; select bank0
  2033  0374  00A4               	movwf	??_can_txf_clear+2
  2034  0375  0824               	movf	??_can_txf_clear+2,w
  2035  0376  00A7               	movwf	can_txf_clear@bytes_written
  2036                           
  2037                           ;main.c: 114: return 0;
  2038                           ;	Return value of _can_txf_clear is never used
  2039                           
  2040                           ;main.c: 113: } else {
  2041                           
  2042                           ;main.c: 112: return 1;
  2043                           ;	Return value of _can_txf_clear is never used
  2044  0377  0008               	return
  2045  0378                     __end_of_can_txf_clear:	
  2046                           
  2047                           	psect	text4
  2048  046C                     __ptext4:	
  2049 ;; *************** function _can_receive *****************
  2050 ;; Defined at:
  2051 ;;		line 121 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  n               1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  n               1   27[BANK0 ] unsigned char 
  2056 ;;  can_int_flag    4   23[BANK0 ] unsigned char [4]
  2057 ;;  mask            1   22[BANK0 ] unsigned char 
  2058 ;;  bytes_read      1   21[BANK0 ] unsigned char 
  2059 ;;  bytes_writte    1   20[BANK0 ] unsigned char 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2070 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2071 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2073 ;;Total ram usage:       11 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    3
  2076 ;; This function calls:
  2077 ;;		_SPI_send
  2078 ;;		_printf
  2079 ;; This function is called by:
  2080 ;;		_can_status_check
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function _can_receive
  2086  046C                     _can_receive:	
  2087                           
  2088                           ;incstack = 0
  2089                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2090                           ;can_receive@n stored from wreg
  2091  046C  0020               	movlb	0	; select bank0
  2092  046D  00BB               	movwf	can_receive@n
  2093                           
  2094                           ;main.c: 123: rx_buf[0] = 0b10010000 & (nm[n] << 1);
  2095  046E  083B               	movf	can_receive@n,w
  2096  046F  3E00               	addlw	low (_nm| (0+32768))
  2097  0470  0084               	movwf	4
  2098  0471  3088               	movlw	high (_nm| (0+32768))
  2099  0472  1803               	skipnc
  2100  0473  3E01               	addlw	1
  2101  0474  0085               	movwf	5
  2102  0475  0800               	movf	0,w	;code access
  2103  0476  0709               	addwf	9,w
  2104  0477  3990               	andlw	144
  2105  0478  00B1               	movwf	??_can_receive
  2106  0479  0831               	movf	??_can_receive,w
  2107  047A  0021               	movlb	1	; select bank1
  2108  047B  00A0               	movwf	_rx_buf^(0+128)
  2109                           
  2110                           ;main.c: 124: uint8_t bytes_read = SPI_send(rx_buf, 14, buf);
  2111  047C  300E               	movlw	14
  2112  047D  0020               	movlb	0	; select bank0
  2113  047E  00B1               	movwf	??_can_receive
  2114  047F  0831               	movf	??_can_receive,w
  2115  0480  00F8               	movwf	SPI_send@len
  2116  0481  3059               	movlw	(low (_buf| 0))& (0+255)
  2117  0482  00B2               	movwf	??_can_receive+1
  2118  0483  0832               	movf	??_can_receive+1,w
  2119  0484  00F9               	movwf	SPI_send@rbuf
  2120  0485  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2121  0486  3183  2318  3184   	fcall	_SPI_send
  2122  0489  0020               	movlb	0	; select bank0
  2123  048A  00B3               	movwf	??_can_receive+2
  2124  048B  0833               	movf	??_can_receive+2,w
  2125  048C  00B5               	movwf	can_receive@bytes_read
  2126                           
  2127                           ;main.c: 125: rx_buf[bytes_read] = '\0';
  2128  048D  0835               	movf	can_receive@bytes_read,w
  2129  048E  3EA0               	addlw	(low (_rx_buf| 0))& (0+255)
  2130  048F  0086               	movwf	6
  2131  0490  0187               	clrf	7
  2132  0491  0181               	clrf	1
  2133                           
  2134                           ;main.c: 128: uint8_t mask = 0b00000001 << n;
  2135  0492  3001               	movlw	1
  2136  0493  00B1               	movwf	??_can_receive
  2137  0494  0A3B               	incf	can_receive@n,w
  2138  0495  2C97               	goto	u1104
  2139  0496                     u1105:	
  2140  0496  35B1               	lslf	??_can_receive,f
  2141  0497                     u1104:	
  2142  0497  0B89               	decfsz	9,f
  2143  0498  2C96               	goto	u1105
  2144  0499  0831               	movf	??_can_receive,w
  2145  049A  00B2               	movwf	??_can_receive+1
  2146  049B  0832               	movf	??_can_receive+1,w
  2147  049C  00B6               	movwf	can_receive@mask
  2148                           
  2149                           ;main.c: 129: uint8_t can_int_flag[4];
  2150                           ;main.c: 130: can_int_flag[0] = 0b00000101;
  2151  049D  3005               	movlw	5
  2152  049E  00B1               	movwf	??_can_receive
  2153  049F  0831               	movf	??_can_receive,w
  2154  04A0  00B7               	movwf	can_receive@can_int_flag
  2155                           
  2156                           ;main.c: 131: can_int_flag[1] = 0x2c;
  2157  04A1  302C               	movlw	44
  2158  04A2  00B1               	movwf	??_can_receive
  2159  04A3  0831               	movf	??_can_receive,w
  2160  04A4  00B8               	movwf	can_receive@can_int_flag+1
  2161                           
  2162                           ;main.c: 132: can_int_flag[2] = mask;
  2163  04A5  0836               	movf	can_receive@mask,w
  2164  04A6  00B1               	movwf	??_can_receive
  2165  04A7  0831               	movf	??_can_receive,w
  2166  04A8  00B9               	movwf	can_receive@can_int_flag+2
  2167                           
  2168                           ;main.c: 133: can_int_flag[3] = 0x00;
  2169  04A9  01BA               	clrf	can_receive@can_int_flag+3
  2170                           
  2171                           ;main.c: 134: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2172  04AA  3004               	movlw	4
  2173  04AB  00B1               	movwf	??_can_receive
  2174  04AC  0831               	movf	??_can_receive,w
  2175  04AD  00F8               	movwf	SPI_send@len
  2176  04AE  3037               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2177  04AF  00B2               	movwf	??_can_receive+1
  2178  04B0  0832               	movf	??_can_receive+1,w
  2179  04B1  00F9               	movwf	SPI_send@rbuf
  2180  04B2  3037               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2181  04B3  3183  2318  3184   	fcall	_SPI_send
  2182  04B6  0020               	movlb	0	; select bank0
  2183  04B7  00B3               	movwf	??_can_receive+2
  2184  04B8  0833               	movf	??_can_receive+2,w
  2185  04B9  00B4               	movwf	can_receive@bytes_written
  2186                           
  2187                           ;main.c: 137: printf("Message received: %s\n", rx_buf);
  2188  04BA  3019               	movlw	low (STR_2| (0+32768))
  2189  04BB  00F8               	movwf	printf@f
  2190  04BC  3088               	movlw	high (STR_2| (0+32768))
  2191  04BD  00F9               	movwf	printf@f+1
  2192  04BE  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2193  04BF  00B1               	movwf	??_can_receive
  2194  04C0  0831               	movf	??_can_receive,w
  2195  04C1  00FA               	movwf	?_printf+2
  2196  04C2  3186  263C         	fcall	_printf
  2197  04C4  0008               	return
  2198  04C5                     __end_of_can_receive:	
  2199                           
  2200                           	psect	text5
  2201  063C                     __ptext5:	
  2202 ;; *************** function _printf *****************
  2203 ;; Defined at:
  2204 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  f               2    8[COMMON] PTR const unsigned char 
  2207 ;;		 -> STR_5(23), STR_4(22), STR_3(3), STR_2(22), 
  2208 ;;		 -> STR_1(20), 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  idx             1    4[BANK0 ] unsigned char 
  2211 ;;  tmpval          4    0        struct .
  2212 ;;  width           2   14[BANK0 ] int 
  2213 ;;  len             2   12[BANK0 ] unsigned int 
  2214 ;;  cp              2    9[BANK0 ] PTR const unsigned char 
  2215 ;;		 -> STR_6(7), printf@c(1), buf(9), rx_buf(15), 
  2216 ;;  val             2    6[BANK0 ] unsigned int 
  2217 ;;  c               1   16[BANK0 ] char 
  2218 ;;  ap              1   11[BANK0 ] PTR void [1]
  2219 ;;		 -> ?_printf(2), 
  2220 ;;  prec            1    8[BANK0 ] char 
  2221 ;;  flag            1    5[BANK0 ] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2    8[COMMON] int 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2231 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2232 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2233 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2234 ;;      Totals:         6      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2235 ;;Total ram usage:       23 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    2
  2238 ;; This function calls:
  2239 ;;		___lwdiv
  2240 ;;		___wmul
  2241 ;;		_isdigit
  2242 ;;		_putch
  2243 ;; This function is called by:
  2244 ;;		_set_sid
  2245 ;;		_can_receive
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           
  2251                           ;psect for function _printf
  2252  063C                     _printf:	
  2253                           
  2254                           ;doprnt.c: 466: va_list ap;
  2255                           ;doprnt.c: 499: signed char c;
  2256                           ;doprnt.c: 501: int width;
  2257                           ;doprnt.c: 506: signed char prec;
  2258                           ;doprnt.c: 508: unsigned char flag;
  2259                           ;doprnt.c: 523: union {
  2260                           ;doprnt.c: 524: unsigned long vd;
  2261                           ;doprnt.c: 525: double integ;
  2262                           ;doprnt.c: 526: } tmpval;
  2263                           ;doprnt.c: 528: unsigned int val;
  2264                           ;doprnt.c: 529: unsigned len;
  2265                           ;doprnt.c: 530: const char * cp;
  2266                           ;doprnt.c: 533: *ap = __va_start();
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2270  063C  307A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2271  063D  0020               	movlb	0	; select bank0
  2272  063E  00A0               	movwf	??_printf
  2273  063F  0820               	movf	??_printf,w
  2274  0640  00AB               	movwf	printf@ap
  2275  0641                     l1465:	
  2276                           ;doprnt.c: 536: while(c = *f++) {
  2277                           
  2278  0641  0879               	movf	printf@f+1,w
  2279  0642  0020               	movlb	0	; select bank0
  2280  0643  00A1               	movwf	??_printf+1
  2281  0644  0878               	movf	printf@f,w
  2282  0645  00A0               	movwf	??_printf
  2283  0646  0AF8               	incf	printf@f,f
  2284  0647  1903               	skipnz
  2285  0648  0AF9               	incf	printf@f+1,f
  2286  0649  0820               	movf	??_printf,w
  2287  064A  0084               	movwf	4
  2288  064B  0821               	movf	??_printf+1,w
  2289  064C  0085               	movwf	5
  2290  064D  0800               	movf	0,w	;code access
  2291  064E  00A2               	movwf	??_printf+2
  2292  064F  0822               	movf	??_printf+2,w
  2293  0650  00B0               	movwf	printf@c
  2294  0651  0830               	movf	printf@c,w
  2295  0652  1903               	btfsc	3,2
  2296  0653  0008               	return
  2297                           
  2298                           ;doprnt.c: 538: if(c != '%')
  2299  0654  3025               	movlw	37
  2300  0655  0630               	xorwf	printf@c,w
  2301  0656  1903               	btfsc	3,2
  2302  0657  2E5D               	goto	l1357
  2303                           
  2304                           ;doprnt.c: 540: {
  2305                           ;doprnt.c: 541: (putch(c) );
  2306  0658  0830               	movf	printf@c,w
  2307  0659  3182  2286  3186   	fcall	_putch
  2308                           
  2309                           ;doprnt.c: 542: continue;
  2310  065C  2E41               	goto	l1465
  2311  065D                     l1357:	
  2312                           
  2313                           ;doprnt.c: 543: }
  2314                           ;doprnt.c: 546: width = 0;
  2315  065D  0020               	movlb	0	; select bank0
  2316  065E  01AE               	clrf	printf@width
  2317  065F  01AF               	clrf	printf@width+1
  2318                           
  2319                           ;doprnt.c: 548: flag = 0;
  2320  0660  01A5               	clrf	printf@flag
  2321                           
  2322                           ;doprnt.c: 551: switch(*f) {
  2323                           
  2324                           ;doprnt.c: 550: for(;;) {
  2325  0661  2E68               	goto	l1363
  2326  0662                     l256:	
  2327                           ;doprnt.c: 579: case '0':
  2328                           
  2329                           
  2330                           ;doprnt.c: 580: flag |= 0x04;
  2331  0662  0020               	movlb	0	; select bank0
  2332  0663  1525               	bsf	printf@flag,2
  2333                           
  2334                           ;doprnt.c: 581: f++;
  2335  0664  3001               	movlw	1
  2336  0665  07F8               	addwf	printf@f,f
  2337  0666  3000               	movlw	0
  2338  0667  3DF9               	addwfc	printf@f+1,f
  2339  0668                     l1363:	
  2340                           ;doprnt.c: 584: }
  2341                           
  2342                           ;doprnt.c: 582: continue;
  2343                           
  2344  0668  0878               	movf	printf@f,w
  2345  0669  0084               	movwf	4
  2346  066A  0879               	movf	printf@f+1,w
  2347  066B  0085               	movwf	5
  2348  066C  0800               	movf	0,w	;code access
  2349                           
  2350                           ; Switch size 1, requested type "space"
  2351                           ; Number of cases is 1, Range of values is 48 to 48
  2352                           ; switch strategies available:
  2353                           ; Name         Instructions Cycles
  2354                           ; simple_byte            4     3 (average)
  2355                           ; direct_byte           11     9 (fixed)
  2356                           ; jumptable            263     9 (fixed)
  2357                           ;	Chosen strategy is simple_byte
  2358  066D  3A30               	xorlw	48	; case 48
  2359  066E  1903               	skipnz
  2360  066F  2E62               	goto	l256
  2361  0670  2E71               	goto	l1365
  2362  0671                     l1365:	
  2363                           ;doprnt.c: 586: }
  2364                           
  2365                           ;doprnt.c: 585: break;
  2366                           
  2367                           
  2368                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2369  0671  0878               	movf	printf@f,w
  2370  0672  0084               	movwf	4
  2371  0673  0879               	movf	printf@f+1,w
  2372  0674  0085               	movwf	5
  2373  0675  0800               	movf	0,w	;code access
  2374  0676  3182  22CD  3186   	fcall	_isdigit
  2375  0679  1C03               	btfss	3,0
  2376  067A  2F1B               	goto	l1417
  2377                           
  2378                           ;doprnt.c: 598: width = 0;
  2379  067B  0020               	movlb	0	; select bank0
  2380  067C  01AE               	clrf	printf@width
  2381  067D  01AF               	clrf	printf@width+1
  2382  067E                     l1369:	
  2383                           ;doprnt.c: 599: do {
  2384                           
  2385                           
  2386                           ;doprnt.c: 600: width *= 10;
  2387  067E  300A               	movlw	10
  2388  067F  00F0               	movwf	___wmul@multiplier
  2389  0680  3000               	movlw	0
  2390  0681  00F1               	movwf	___wmul@multiplier+1
  2391  0682  0020               	movlb	0	; select bank0
  2392  0683  082F               	movf	printf@width+1,w
  2393  0684  00F3               	movwf	___wmul@multiplicand+1
  2394  0685  082E               	movf	printf@width,w
  2395  0686  00F2               	movwf	___wmul@multiplicand
  2396  0687  3183  2331  3186   	fcall	___wmul
  2397  068A  0871               	movf	?___wmul+1,w
  2398  068B  0020               	movlb	0	; select bank0
  2399  068C  00AF               	movwf	printf@width+1
  2400  068D  0870               	movf	?___wmul,w
  2401  068E  00AE               	movwf	printf@width
  2402                           
  2403                           ;doprnt.c: 601: width += *f++ - '0';
  2404  068F  0878               	movf	printf@f,w
  2405  0690  0084               	movwf	4
  2406  0691  0879               	movf	printf@f+1,w
  2407  0692  0085               	movwf	5
  2408  0693  0800               	movf	0,w	;code access
  2409  0694  3ED0               	addlw	208
  2410  0695  00A0               	movwf	??_printf
  2411  0696  30FF               	movlw	255
  2412  0697  1803               	skipnc
  2413  0698  3000               	movlw	0
  2414  0699  00A1               	movwf	??_printf+1
  2415  069A  0820               	movf	??_printf,w
  2416  069B  07AE               	addwf	printf@width,f
  2417  069C  0821               	movf	??_printf+1,w
  2418  069D  3DAF               	addwfc	printf@width+1,f
  2419  069E  3001               	movlw	1
  2420  069F  07F8               	addwf	printf@f,f
  2421  06A0  3000               	movlw	0
  2422  06A1  3DF9               	addwfc	printf@f+1,f
  2423                           
  2424                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2425  06A2  0878               	movf	printf@f,w
  2426  06A3  0084               	movwf	4
  2427  06A4  0879               	movf	printf@f+1,w
  2428  06A5  0085               	movwf	5
  2429  06A6  0800               	movf	0,w	;code access
  2430  06A7  3182  22CD  3186   	fcall	_isdigit
  2431  06AA  1C03               	btfss	3,0
  2432  06AB  2F1B               	goto	l1417
  2433  06AC  2E7E               	goto	l1369
  2434  06AD                     l1377:	
  2435                           ;doprnt.c: 728: case 's':
  2436                           
  2437                           ;doprnt.c: 723: break;
  2438                           
  2439                           ;doprnt.c: 718: case 'x':
  2440                           
  2441                           ;doprnt.c: 638: goto alldone;
  2442                           
  2443                           ;doprnt.c: 637: case 0:
  2444                           
  2445                           ;doprnt.c: 608: }
  2446                           ;doprnt.c: 635: switch(c = *f++) {
  2447                           
  2448                           
  2449                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2450  06AD  0020               	movlb	0	; select bank0
  2451  06AE  082B               	movf	printf@ap,w
  2452  06AF  0086               	movwf	6
  2453  06B0  0187               	clrf	7
  2454  06B1  0801               	movf	1,w
  2455  06B2  00A9               	movwf	printf@cp
  2456  06B3  3000               	movlw	0
  2457  06B4  00AA               	movwf	printf@cp+1
  2458  06B5  3001               	movlw	1
  2459  06B6  00A0               	movwf	??_printf
  2460  06B7  0820               	movf	??_printf,w
  2461  06B8  07AB               	addwf	printf@ap,f
  2462                           
  2463                           ;doprnt.c: 740: if(!cp)
  2464  06B9  0829               	movf	printf@cp,w
  2465  06BA  042A               	iorwf	printf@cp+1,w
  2466  06BB  1D03               	btfss	3,2
  2467  06BC  2EC1               	goto	l1385
  2468                           
  2469                           ;doprnt.c: 741: cp = "(null)";
  2470  06BD  305C               	movlw	low (STR_6| (0+32768))
  2471  06BE  00A9               	movwf	printf@cp
  2472  06BF  3088               	movlw	high (STR_6| (0+32768))
  2473  06C0  00AA               	movwf	printf@cp+1
  2474  06C1                     l1385:	
  2475                           
  2476                           ;doprnt.c: 745: len = 0;
  2477  06C1  01AC               	clrf	printf@len
  2478  06C2  01AD               	clrf	printf@len+1
  2479  06C3                     l1389:	
  2480                           ;doprnt.c: 746: while(cp[len])
  2481                           
  2482  06C3  0829               	movf	printf@cp,w
  2483  06C4  072C               	addwf	printf@len,w
  2484  06C5  0084               	movwf	4
  2485  06C6  082A               	movf	printf@cp+1,w
  2486  06C7  3D2D               	addwfc	printf@len+1,w
  2487  06C8  0085               	movwf	5
  2488  06C9  0012               	moviw fsr0++
  2489  06CA  1903               	btfsc	3,2
  2490  06CB  2ED1               	goto	l1391
  2491                           
  2492                           ;doprnt.c: 747: len++;
  2493  06CC  3001               	movlw	1
  2494  06CD  07AC               	addwf	printf@len,f
  2495  06CE  3000               	movlw	0
  2496  06CF  3DAD               	addwfc	printf@len+1,f
  2497  06D0  2EC3               	goto	l1389
  2498  06D1                     l1391:	
  2499                           ;doprnt.c: 750: dostring:
  2500                           
  2501                           
  2502                           ;doprnt.c: 757: if(width > len)
  2503  06D1  082F               	movf	printf@width+1,w
  2504  06D2  022D               	subwf	printf@len+1,w
  2505  06D3  1D03               	skipz
  2506  06D4  2ED7               	goto	u945
  2507  06D5  082E               	movf	printf@width,w
  2508  06D6  022C               	subwf	printf@len,w
  2509  06D7                     u945:	
  2510  06D7  1803               	skipnc
  2511  06D8  2EDE               	goto	l1395
  2512                           
  2513                           ;doprnt.c: 758: width -= len;
  2514  06D9  082C               	movf	printf@len,w
  2515  06DA  02AE               	subwf	printf@width,f
  2516  06DB  082D               	movf	printf@len+1,w
  2517  06DC  3BAF               	subwfb	printf@width+1,f
  2518  06DD  2EE0               	goto	l1399
  2519  06DE                     l1395:	
  2520                           
  2521                           ;doprnt.c: 759: else
  2522                           ;doprnt.c: 760: width = 0;
  2523  06DE  01AE               	clrf	printf@width
  2524  06DF  01AF               	clrf	printf@width+1
  2525  06E0                     l1399:	
  2526                           ;doprnt.c: 764: while(width--)
  2527                           
  2528  06E0  30FF               	movlw	255
  2529  06E1  0020               	movlb	0	; select bank0
  2530  06E2  07AE               	addwf	printf@width,f
  2531  06E3  30FF               	movlw	255
  2532  06E4  3DAF               	addwfc	printf@width+1,f
  2533  06E5  0A2E               	incf	printf@width,w
  2534  06E6  1903               	btfsc	3,2
  2535  06E7  0A2F               	incf	printf@width+1,w
  2536  06E8  1903               	btfsc	3,2
  2537  06E9  2EFC               	goto	l1405
  2538                           
  2539                           ;doprnt.c: 765: (putch(' ') );
  2540  06EA  3020               	movlw	32
  2541  06EB  3182  2286  3186   	fcall	_putch
  2542  06EE  2EE0               	goto	l1399
  2543  06EF                     l1401:	
  2544                           ;doprnt.c: 767: while(len--)
  2545                           
  2546                           
  2547                           ;doprnt.c: 768: (putch(*cp++) );
  2548  06EF  0829               	movf	printf@cp,w
  2549  06F0  0084               	movwf	4
  2550  06F1  082A               	movf	printf@cp+1,w
  2551  06F2  0085               	movwf	5
  2552  06F3  0800               	movf	0,w	;code access
  2553  06F4  3182  2286  3186   	fcall	_putch
  2554  06F7  3001               	movlw	1
  2555  06F8  0020               	movlb	0	; select bank0
  2556  06F9  07A9               	addwf	printf@cp,f
  2557  06FA  3000               	movlw	0
  2558  06FB  3DAA               	addwfc	printf@cp+1,f
  2559  06FC                     l1405:	
  2560  06FC  3001               	movlw	1
  2561  06FD  02AC               	subwf	printf@len,f
  2562  06FE  3000               	movlw	0
  2563  06FF  3BAD               	subwfb	printf@len+1,f
  2564  0700  0A2C               	incf	printf@len,w
  2565  0701  1D03               	skipz
  2566  0702  2EEF               	goto	l1401
  2567  0703  0A2D               	incf	printf@len+1,w
  2568  0704  1903               	btfsc	3,2
  2569  0705  2E41               	goto	l1465
  2570  0706  2EEF               	goto	l1401
  2571  0707                     l1407:	
  2572                           ;doprnt.c: 784: case 'c':
  2573                           
  2574                           ;doprnt.c: 774: continue;
  2575                           
  2576                           
  2577                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2578  0707  082B               	movf	printf@ap,w
  2579  0708  0086               	movwf	6
  2580  0709  0187               	clrf	7
  2581  070A  0801               	movf	1,w
  2582  070B  00A0               	movwf	??_printf
  2583  070C  0820               	movf	??_printf,w
  2584  070D  00B0               	movwf	printf@c
  2585  070E  3002               	movlw	2
  2586  070F  00A0               	movwf	??_printf
  2587  0710  0820               	movf	??_printf,w
  2588  0711  07AB               	addwf	printf@ap,f
  2589  0712                     l1411:	
  2590                           ;doprnt.c: 802: default:
  2591                           
  2592                           
  2593                           ;doprnt.c: 805: cp = (char *)&c;
  2594  0712  3030               	movlw	low printf@c
  2595  0713  00A9               	movwf	printf@cp
  2596  0714  3000               	movlw	high printf@c
  2597  0715  00AA               	movwf	printf@cp+1
  2598                           
  2599                           ;doprnt.c: 806: len = 1;
  2600  0716  3001               	movlw	1
  2601  0717  00AC               	movwf	printf@len
  2602  0718  3000               	movlw	0
  2603  0719  00AD               	movwf	printf@len+1
  2604                           
  2605                           ;doprnt.c: 807: goto dostring;
  2606  071A  2ED1               	goto	l1391
  2607  071B                     l1417:	
  2608                           ;doprnt.c: 822: }
  2609                           
  2610  071B  0879               	movf	printf@f+1,w
  2611  071C  0020               	movlb	0	; select bank0
  2612  071D  00A1               	movwf	??_printf+1
  2613  071E  0878               	movf	printf@f,w
  2614  071F  00A0               	movwf	??_printf
  2615  0720  0AF8               	incf	printf@f,f
  2616  0721  1903               	skipnz
  2617  0722  0AF9               	incf	printf@f+1,f
  2618  0723  0820               	movf	??_printf,w
  2619  0724  0084               	movwf	4
  2620  0725  0821               	movf	??_printf+1,w
  2621  0726  0085               	movwf	5
  2622  0727  0800               	movf	0,w	;code access
  2623  0728  00B0               	movwf	printf@c
  2624                           
  2625                           ; Switch size 1, requested type "space"
  2626                           ; Number of cases is 4, Range of values is 0 to 120
  2627                           ; switch strategies available:
  2628                           ; Name         Instructions Cycles
  2629                           ; simple_byte           13     7 (average)
  2630                           ; direct_byte          248     6 (fixed)
  2631                           ; jumptable            260     6 (fixed)
  2632                           ;	Chosen strategy is simple_byte
  2633  0729  3A00               	xorlw	0	; case 0
  2634  072A  1903               	skipnz
  2635  072B  2FDF               	goto	l301
  2636  072C  3A63               	xorlw	99	; case 99
  2637  072D  1903               	skipnz
  2638  072E  2F07               	goto	l1407
  2639  072F  3A10               	xorlw	16	; case 115
  2640  0730  1903               	skipnz
  2641  0731  2EAD               	goto	l1377
  2642  0732  3A0B               	xorlw	11	; case 120
  2643  0733  1903               	skipnz
  2644  0734  2F36               	goto	l1419
  2645  0735  2F12               	goto	l1411
  2646  0736                     l1419:	
  2647                           
  2648                           ;doprnt.c: 1273: {
  2649                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2650  0736  0020               	movlb	0	; select bank0
  2651  0737  082B               	movf	printf@ap,w
  2652  0738  0086               	movwf	6
  2653  0739  0187               	clrf	7
  2654  073A  3F40               	moviw [0]fsr1
  2655  073B  00A6               	movwf	printf@val
  2656  073C  3F41               	moviw [1]fsr1
  2657  073D  00A7               	movwf	printf@val+1
  2658  073E  3002               	movlw	2
  2659  073F  00A0               	movwf	??_printf
  2660  0740  0820               	movf	??_printf,w
  2661  0741  07AB               	addwf	printf@ap,f
  2662                           
  2663                           ;doprnt.c: 1287: }
  2664                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2665  0742  01B0               	clrf	printf@c
  2666  0743  0AB0               	incf	printf@c,f
  2667  0744  3004               	movlw	4
  2668  0745  0630               	xorwf	printf@c,w
  2669  0746  1903               	btfsc	3,2
  2670  0747  2F67               	goto	l1435
  2671  0748                     l1429:	
  2672                           
  2673                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2674  0748  0830               	movf	printf@c,w
  2675  0749  00A0               	movwf	??_printf
  2676  074A  01A1               	clrf	??_printf+1
  2677  074B  35A0               	lslf	??_printf,f
  2678  074C  0DA1               	rlf	??_printf+1,f
  2679  074D  3054               	movlw	low (_hexpowers| (0+32768))
  2680  074E  0720               	addwf	??_printf,w
  2681  074F  0084               	movwf	4
  2682  0750  3088               	movlw	high (_hexpowers| (0+32768))
  2683  0751  3D21               	addwfc	??_printf+1,w
  2684  0752  0085               	movwf	5
  2685  0753  3F00               	moviw [0]fsr0
  2686  0754  00A2               	movwf	??_printf+2
  2687  0755  3F01               	moviw [1]fsr0
  2688  0756  00A3               	movwf	??_printf+3
  2689  0757  0823               	movf	??_printf+3,w
  2690  0758  0227               	subwf	printf@val+1,w
  2691  0759  1D03               	skipz
  2692  075A  2F5D               	goto	u985
  2693  075B  0822               	movf	??_printf+2,w
  2694  075C  0226               	subwf	printf@val,w
  2695  075D                     u985:	
  2696  075D  1C03               	btfss	3,0
  2697  075E  2F67               	goto	l1435
  2698                           
  2699                           ;doprnt.c: 1318: break;
  2700  075F  3001               	movlw	1
  2701  0760  00A0               	movwf	??_printf
  2702  0761  0820               	movf	??_printf,w
  2703  0762  07B0               	addwf	printf@c,f
  2704  0763  3004               	movlw	4
  2705  0764  0630               	xorwf	printf@c,w
  2706  0765  1D03               	btfss	3,2
  2707  0766  2F48               	goto	l1429
  2708  0767                     l1435:	
  2709                           
  2710                           ;doprnt.c: 1381: if(width > c)
  2711  0767  0830               	movf	printf@c,w
  2712  0768  00A0               	movwf	??_printf
  2713  0769  01A1               	clrf	??_printf+1
  2714  076A  1BA0               	btfsc	??_printf,7
  2715  076B  03A1               	decf	??_printf+1,f
  2716  076C  0821               	movf	??_printf+1,w
  2717  076D  3A80               	xorlw	128
  2718  076E  00A2               	movwf	??_printf+2
  2719  076F  082F               	movf	printf@width+1,w
  2720  0770  3A80               	xorlw	128
  2721  0771  0222               	subwf	??_printf+2,w
  2722  0772  1D03               	skipz
  2723  0773  2F76               	goto	u1005
  2724  0774  082E               	movf	printf@width,w
  2725  0775  0220               	subwf	??_printf,w
  2726  0776                     u1005:	
  2727  0776  1803               	skipnc
  2728  0777  2F83               	goto	l1439
  2729                           
  2730                           ;doprnt.c: 1382: width -= c;
  2731  0778  0020               	movlb	0	; select bank0
  2732  0779  0830               	movf	printf@c,w
  2733  077A  00A0               	movwf	??_printf
  2734  077B  01A1               	clrf	??_printf+1
  2735  077C  1BA0               	btfsc	??_printf,7
  2736  077D  03A1               	decf	??_printf+1,f
  2737  077E  0820               	movf	??_printf,w
  2738  077F  02AE               	subwf	printf@width,f
  2739  0780  0821               	movf	??_printf+1,w
  2740  0781  3BAF               	subwfb	printf@width+1,f
  2741  0782  2F86               	goto	l1441
  2742  0783                     l1439:	
  2743                           
  2744                           ;doprnt.c: 1383: else
  2745                           ;doprnt.c: 1384: width = 0;
  2746  0783  0020               	movlb	0	; select bank0
  2747  0784  01AE               	clrf	printf@width
  2748  0785  01AF               	clrf	printf@width+1
  2749  0786                     l1441:	
  2750                           
  2751                           ;doprnt.c: 1387: if(flag & 0x04) {
  2752  0786  1D25               	btfss	printf@flag,2
  2753  0787  2F96               	goto	l1449
  2754  0788                     L3:	
  2755                           
  2756                           ;doprnt.c: 1415: if(width)
  2757  0788  082E               	movf	printf@width,w
  2758  0789  042F               	iorwf	printf@width+1,w
  2759  078A  1903               	btfsc	3,2
  2760  078B  2FA7               	goto	l1455
  2761                           
  2762                           ;doprnt.c: 1417: (putch('0') );
  2763                           
  2764                           ;doprnt.c: 1416: do
  2765  078C  3030               	movlw	48
  2766  078D  3182  2286  3186   	fcall	_putch
  2767                           
  2768                           ;doprnt.c: 1418: while(--width);
  2769  0790  30FF               	movlw	255
  2770  0791  0020               	movlb	0	; select bank0
  2771  0792  07AE               	addwf	printf@width,f
  2772  0793  30FF               	movlw	255
  2773  0794  3DAF               	addwfc	printf@width+1,f
  2774  0795  2F88               	goto	L3
  2775  0796                     l1449:	
  2776                           ;doprnt.c: 1420: } else
  2777                           
  2778                           
  2779                           ;doprnt.c: 1422: {
  2780                           ;doprnt.c: 1424: if(width
  2781                           ;doprnt.c: 1428: )
  2782  0796  082E               	movf	printf@width,w
  2783  0797  042F               	iorwf	printf@width+1,w
  2784  0798  1903               	btfsc	3,2
  2785  0799  2FA7               	goto	l1455
  2786  079A                     l1451:	
  2787                           ;doprnt.c: 1429: do
  2788                           
  2789                           
  2790                           ;doprnt.c: 1430: (putch(' ') );
  2791  079A  3020               	movlw	32
  2792  079B  3182  2286  3186   	fcall	_putch
  2793                           
  2794                           ;doprnt.c: 1431: while(--width);
  2795  079E  30FF               	movlw	255
  2796  079F  0020               	movlb	0	; select bank0
  2797  07A0  07AE               	addwf	printf@width,f
  2798  07A1  30FF               	movlw	255
  2799  07A2  3DAF               	addwfc	printf@width+1,f
  2800  07A3  082E               	movf	printf@width,w
  2801  07A4  042F               	iorwf	printf@width+1,w
  2802  07A5  1D03               	btfss	3,2
  2803  07A6  2F9A               	goto	l1451
  2804  07A7                     l1455:	
  2805                           
  2806                           ;doprnt.c: 1469: }
  2807                           ;doprnt.c: 1472: prec = c;
  2808  07A7  0830               	movf	printf@c,w
  2809  07A8  00A0               	movwf	??_printf
  2810  07A9  0820               	movf	??_printf,w
  2811  07AA  00A8               	movwf	printf@prec
  2812  07AB                     l1463:	
  2813                           ;doprnt.c: 1474: while(prec--) {
  2814                           
  2815  07AB  30FF               	movlw	255
  2816  07AC  0020               	movlb	0	; select bank0
  2817  07AD  00A0               	movwf	??_printf
  2818  07AE  0820               	movf	??_printf,w
  2819  07AF  07A8               	addwf	printf@prec,f
  2820  07B0  0A28               	incf	printf@prec,w
  2821  07B1  1903               	btfsc	3,2
  2822  07B2  2E41               	goto	l1465
  2823                           
  2824                           ;doprnt.c: 1478: {
  2825                           ;doprnt.c: 1499: {
  2826                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2827  07B3  0828               	movf	printf@prec,w
  2828  07B4  00A0               	movwf	??_printf
  2829  07B5  01A1               	clrf	??_printf+1
  2830  07B6  35A0               	lslf	??_printf,f
  2831  07B7  0DA1               	rlf	??_printf+1,f
  2832  07B8  3054               	movlw	low (_hexpowers| (0+32768))
  2833  07B9  0720               	addwf	??_printf,w
  2834  07BA  0084               	movwf	4
  2835  07BB  3088               	movlw	high (_hexpowers| (0+32768))
  2836  07BC  3D21               	addwfc	??_printf+1,w
  2837  07BD  0085               	movwf	5
  2838  07BE  3F00               	moviw [0]fsr0
  2839  07BF  00F0               	movwf	___lwdiv@divisor
  2840  07C0  3F01               	moviw [1]fsr0
  2841  07C1  00F1               	movwf	___lwdiv@divisor+1
  2842  07C2  0827               	movf	printf@val+1,w
  2843  07C3  00F3               	movwf	___lwdiv@dividend+1
  2844  07C4  0826               	movf	printf@val,w
  2845  07C5  00F2               	movwf	___lwdiv@dividend
  2846  07C6  3183  2378  3186   	fcall	___lwdiv
  2847  07C9  0870               	movf	?___lwdiv,w
  2848  07CA  390F               	andlw	15
  2849  07CB  0020               	movlb	0	; select bank0
  2850  07CC  00A2               	movwf	??_printf+2
  2851  07CD  0822               	movf	??_printf+2,w
  2852  07CE  00A4               	movwf	printf@idx
  2853                           
  2854                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2855  07CF  0824               	movf	printf@idx,w
  2856  07D0  3E43               	addlw	low (STR_7| (0+32768))
  2857  07D1  0084               	movwf	4
  2858  07D2  3088               	movlw	high (STR_7| (0+32768))
  2859  07D3  1803               	skipnc
  2860  07D4  3E01               	addlw	1
  2861  07D5  0085               	movwf	5
  2862  07D6  0800               	movf	0,w	;code access
  2863  07D7  00A0               	movwf	??_printf
  2864  07D8  0820               	movf	??_printf,w
  2865  07D9  00B0               	movwf	printf@c
  2866                           
  2867                           ;doprnt.c: 1508: }
  2868                           ;doprnt.c: 1523: }
  2869                           ;doprnt.c: 1524: (putch(c) );
  2870  07DA  0830               	movf	printf@c,w
  2871  07DB  3182  2286  3186   	fcall	_putch
  2872  07DE  2FAB               	goto	l1463
  2873  07DF                     l301:	
  2874                           ;doprnt.c: 1540: return 0;
  2875                           ;	Return value of _printf is never used
  2876                           
  2877                           ;doprnt.c: 1525: }
  2878                           ;doprnt.c: 1533: }
  2879                           ;doprnt.c: 1535: alldone:
  2880                           
  2881  07DF  0008               	return
  2882  07E0                     __end_of_printf:	
  2883                           
  2884                           	psect	text6
  2885  0286                     __ptext6:	
  2886 ;; *************** function _putch *****************
  2887 ;; Defined at:
  2888 ;;		line 107 in file "mcc_generated_files/eusart.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  txData          1    wreg     unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  txData          1    1[COMMON] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, pclath, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2906 ;;Total ram usage:        1 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    1
  2909 ;; This function calls:
  2910 ;;		_EUSART_Write
  2911 ;; This function is called by:
  2912 ;;		_printf
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _putch
  2918  0286                     _putch:	
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  2922                           ;putch@txData stored from wreg
  2923  0286  00F1               	movwf	putch@txData
  2924                           
  2925                           ;eusart.c: 109: EUSART_Write(txData);
  2926  0287  0871               	movf	putch@txData,w
  2927  0288  3182  229C         	fcall	_EUSART_Write
  2928  028A  0008               	return
  2929  028B                     __end_of_putch:	
  2930                           
  2931                           	psect	text7
  2932  029C                     __ptext7:	
  2933 ;; *************** function _EUSART_Write *****************
  2934 ;; Defined at:
  2935 ;;		line 93 in file "mcc_generated_files/eusart.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  txData          1    wreg     unsigned char 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  txData          1    0[COMMON] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2953 ;;Total ram usage:        1 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_putch
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function _EUSART_Write
  2964  029C                     _EUSART_Write:	
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _EUSART_Write: [wreg]
  2968                           ;EUSART_Write@txData stored from wreg
  2969  029C  00F0               	movwf	EUSART_Write@txData
  2970  029D                     l63:	
  2971                           ;eusart.c: 96: {
  2972                           
  2973                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  2974                           
  2975  029D  0020               	movlb	0	; select bank0
  2976  029E  1E11               	btfss	17,4	;volatile
  2977  029F  2A9D               	goto	l63
  2978                           
  2979                           ;eusart.c: 97: }
  2980                           ;eusart.c: 99: TXREG = txData;
  2981  02A0  0870               	movf	EUSART_Write@txData,w
  2982  02A1  0023               	movlb	3	; select bank3
  2983  02A2  009A               	movwf	26	;volatile
  2984  02A3  0008               	return
  2985  02A4                     __end_of_EUSART_Write:	
  2986                           
  2987                           	psect	text8
  2988  0378                     __ptext8:	
  2989 ;; *************** function ___lwdiv *****************
  2990 ;; Defined at:
  2991 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  divisor         2    0[COMMON] unsigned int 
  2994 ;;  dividend        2    2[COMMON] unsigned int 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  quotient        2    5[COMMON] unsigned int 
  2997 ;;  counter         1    7[COMMON] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  2    0[COMMON] unsigned int 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3007 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;Total ram usage:        8 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_printf
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           
  3021                           ;psect for function ___lwdiv
  3022  0378                     ___lwdiv:	
  3023                           
  3024                           ;incstack = 0
  3025                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3026  0378  01F5               	clrf	___lwdiv@quotient
  3027  0379  01F6               	clrf	___lwdiv@quotient+1
  3028  037A  0870               	movf	___lwdiv@divisor,w
  3029  037B  0471               	iorwf	___lwdiv@divisor+1,w
  3030  037C  1903               	btfsc	3,2
  3031  037D  2BA7               	goto	l1347
  3032  037E  01F7               	clrf	___lwdiv@counter
  3033  037F  0AF7               	incf	___lwdiv@counter,f
  3034  0380                     l1335:	
  3035  0380  1BF1               	btfsc	___lwdiv@divisor+1,7
  3036  0381  2B8C               	goto	l1337
  3037  0382  3001               	movlw	1
  3038  0383                     u835:	
  3039  0383  35F0               	lslf	___lwdiv@divisor,f
  3040  0384  0DF1               	rlf	___lwdiv@divisor+1,f
  3041  0385  0B89               	decfsz	9,f
  3042  0386  2B83               	goto	u835
  3043  0387  3001               	movlw	1
  3044  0388  00F4               	movwf	??___lwdiv
  3045  0389  0874               	movf	??___lwdiv,w
  3046  038A  07F7               	addwf	___lwdiv@counter,f
  3047  038B  2B80               	goto	l1335
  3048  038C                     l1337:	
  3049  038C  3001               	movlw	1
  3050  038D                     u855:	
  3051  038D  35F5               	lslf	___lwdiv@quotient,f
  3052  038E  0DF6               	rlf	___lwdiv@quotient+1,f
  3053  038F  0B89               	decfsz	9,f
  3054  0390  2B8D               	goto	u855
  3055  0391  0871               	movf	___lwdiv@divisor+1,w
  3056  0392  0273               	subwf	___lwdiv@dividend+1,w
  3057  0393  1D03               	skipz
  3058  0394  2B97               	goto	u865
  3059  0395  0870               	movf	___lwdiv@divisor,w
  3060  0396  0272               	subwf	___lwdiv@dividend,w
  3061  0397                     u865:	
  3062  0397  1C03               	skipc
  3063  0398  2B9E               	goto	l1343
  3064  0399  0870               	movf	___lwdiv@divisor,w
  3065  039A  02F2               	subwf	___lwdiv@dividend,f
  3066  039B  0871               	movf	___lwdiv@divisor+1,w
  3067  039C  3BF3               	subwfb	___lwdiv@dividend+1,f
  3068  039D  1475               	bsf	___lwdiv@quotient,0
  3069  039E                     l1343:	
  3070  039E  3001               	movlw	1
  3071  039F                     u875:	
  3072  039F  36F1               	lsrf	___lwdiv@divisor+1,f
  3073  03A0  0CF0               	rrf	___lwdiv@divisor,f
  3074  03A1  0B89               	decfsz	9,f
  3075  03A2  2B9F               	goto	u875
  3076  03A3  3001               	movlw	1
  3077  03A4  02F7               	subwf	___lwdiv@counter,f
  3078  03A5  1D03               	btfss	3,2
  3079  03A6  2B8C               	goto	l1337
  3080  03A7                     l1347:	
  3081  03A7  0876               	movf	___lwdiv@quotient+1,w
  3082  03A8  00F1               	movwf	?___lwdiv+1
  3083  03A9  0875               	movf	___lwdiv@quotient,w
  3084  03AA  00F0               	movwf	?___lwdiv
  3085  03AB  0008               	return
  3086  03AC                     __end_of___lwdiv:	
  3087                           
  3088                           	psect	text9
  3089  0301                     __ptext9:	
  3090 ;; *************** function _can_start *****************
  3091 ;; Defined at:
  3092 ;;		line 90 in file "main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  can_ctrl_buf    3    5[BANK0 ] unsigned char [3]
  3097 ;;  bytes_writte    1    8[BANK0 ] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3108 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3109 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3110 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3111 ;;Total ram usage:        7 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    3
  3114 ;; This function calls:
  3115 ;;		_SPI_send
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           
  3122                           ;psect for function _can_start
  3123  0301                     _can_start:	
  3124                           
  3125                           ;main.c: 91: uint8_t can_ctrl_buf[3] = {0b00000010, 0x0f, 0b000};
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in _can_start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3129  0301  0020               	movlb	0	; select bank0
  3130  0302  0862               	movf	can_start@F2930,w
  3131  0303  00A5               	movwf	can_start@can_ctrl_buf
  3132  0304  0863               	movf	can_start@F2930+1,w
  3133  0305  00A6               	movwf	can_start@can_ctrl_buf+1
  3134  0306  0864               	movf	can_start@F2930+2,w
  3135  0307  00A7               	movwf	can_start@can_ctrl_buf+2
  3136                           
  3137                           ;main.c: 92: uint8_t bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  3138  0308  3003               	movlw	3
  3139  0309  00A2               	movwf	??_can_start
  3140  030A  0822               	movf	??_can_start,w
  3141  030B  00F8               	movwf	SPI_send@len
  3142  030C  3025               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  3143  030D  00A3               	movwf	??_can_start+1
  3144  030E  0823               	movf	??_can_start+1,w
  3145  030F  00F9               	movwf	SPI_send@rbuf
  3146  0310  3025               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  3147  0311  3183  2318         	fcall	_SPI_send
  3148  0313  0020               	movlb	0	; select bank0
  3149  0314  00A4               	movwf	??_can_start+2
  3150  0315  0824               	movf	??_can_start+2,w
  3151  0316  00A8               	movwf	can_start@bytes_written
  3152                           
  3153                           ;main.c: 96: return 0;
  3154                           ;	Return value of _can_start is never used
  3155                           
  3156                           ;main.c: 95: } else {
  3157                           
  3158                           ;main.c: 94: return 1;
  3159                           ;	Return value of _can_start is never used
  3160  0317  0008               	return
  3161  0318                     __end_of_can_start:	
  3162                           
  3163                           	psect	text10
  3164  04C5                     __ptext10:	
  3165 ;; *************** function _can_send *****************
  3166 ;; Defined at:
  3167 ;;		line 143 in file "main.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  n               1    wreg     unsigned char 
  3170 ;;  buf             1    2[BANK0 ] PTR unsigned char 
  3171 ;;		 -> buf(9), 
  3172 ;;  cnt             1    3[BANK0 ] unsigned char 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  n               1    7[BANK0 ] unsigned char 
  3175 ;;  txb_ctrl_buf    1   11[BANK0 ] unsigned char [1]
  3176 ;;  i               1   10[BANK0 ] unsigned char 
  3177 ;;  bytes_writte    1    9[BANK0 ] unsigned char 
  3178 ;;  len             1    8[BANK0 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      unsigned char 
  3181 ;; Registers used:
  3182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3188 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3189 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3190 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3192 ;;Total ram usage:       10 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    3
  3195 ;; This function calls:
  3196 ;;		_SPI_send
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _can_send
  3204  04C5                     _can_send:	
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3208                           ;can_send@n stored from wreg
  3209  04C5  0020               	movlb	0	; select bank0
  3210  04C6  00A7               	movwf	can_send@n
  3211                           
  3212                           ;main.c: 144: uint8_t i;
  3213                           ;main.c: 147: tx_buf[0] = 0b01000000 & abc[n];
  3214  04C7  0827               	movf	can_send@n,w
  3215  04C8  3E63               	addlw	low (_abc| (0+32768))
  3216  04C9  0084               	movwf	4
  3217  04CA  3088               	movlw	high (_abc| (0+32768))
  3218  04CB  1803               	skipnc
  3219  04CC  3E01               	addlw	1
  3220  04CD  0085               	movwf	5
  3221  04CE  0800               	movf	0,w	;code access
  3222  04CF  3940               	andlw	64
  3223  04D0  00A4               	movwf	??_can_send
  3224  04D1  0824               	movf	??_can_send,w
  3225  04D2  00CB               	movwf	_tx_buf
  3226                           
  3227                           ;main.c: 149: tx_buf[1] = sid.sidh;
  3228  04D3  0847               	movf	_sid,w
  3229  04D4  00A4               	movwf	??_can_send
  3230  04D5  0824               	movf	??_can_send,w
  3231  04D6  00CC               	movwf	_tx_buf+1
  3232                           
  3233                           ;main.c: 151: tx_buf[2] = sid.sidl;
  3234  04D7  0848               	movf	_sid+1,w
  3235  04D8  00A4               	movwf	??_can_send
  3236  04D9  0824               	movf	??_can_send,w
  3237  04DA  00CD               	movwf	_tx_buf+2
  3238                           
  3239                           ;main.c: 153: tx_buf[3] = 0;
  3240  04DB  01CE               	clrf	_tx_buf+3
  3241                           
  3242                           ;main.c: 155: tx_buf[4] = 0;
  3243  04DC  01CF               	clrf	_tx_buf+4
  3244                           
  3245                           ;main.c: 157: tx_buf[5] = cnt;
  3246  04DD  0823               	movf	can_send@cnt,w
  3247  04DE  00A4               	movwf	??_can_send
  3248  04DF  0824               	movf	??_can_send,w
  3249  04E0  00D0               	movwf	_tx_buf+5
  3250                           
  3251                           ;main.c: 160: for(i=0; i++; i<cnt) {
  3252  04E1  01AA               	clrf	can_send@i
  3253  04E2                     l1591:	
  3254  04E2  3001               	movlw	1
  3255  04E3  00A4               	movwf	??_can_send
  3256  04E4  0824               	movf	??_can_send,w
  3257  04E5  07AA               	addwf	can_send@i,f
  3258  04E6  032A               	decf	can_send@i,w
  3259  04E7  1903               	btfsc	3,2
  3260  04E8  2CF9               	goto	l1593
  3261                           
  3262                           ;main.c: 161: tx_buf[6+i] = buf[i];
  3263  04E9  082A               	movf	can_send@i,w
  3264  04EA  0722               	addwf	can_send@buf,w
  3265  04EB  00A4               	movwf	??_can_send
  3266  04EC  0824               	movf	??_can_send,w
  3267  04ED  0086               	movwf	6
  3268  04EE  0187               	clrf	7
  3269  04EF  0801               	movf	1,w
  3270  04F0  00A5               	movwf	??_can_send+1
  3271  04F1  082A               	movf	can_send@i,w
  3272  04F2  3E06               	addlw	6
  3273  04F3  3E4B               	addlw	(low (_tx_buf| 0))& (0+255)
  3274  04F4  0086               	movwf	6
  3275  04F5  0187               	clrf	7
  3276  04F6  0825               	movf	??_can_send+1,w
  3277  04F7  0081               	movwf	1
  3278  04F8  2CE2               	goto	l1591
  3279  04F9                     l1593:	
  3280                           
  3281                           ;main.c: 162: }
  3282                           ;main.c: 165: uint8_t len = 6 + cnt;
  3283  04F9  0823               	movf	can_send@cnt,w
  3284  04FA  3E06               	addlw	6
  3285  04FB  00A4               	movwf	??_can_send
  3286  04FC  0824               	movf	??_can_send,w
  3287  04FD  00A8               	movwf	can_send@len
  3288                           
  3289                           ;main.c: 166: uint8_t bytes_written = SPI_send(tx_buf, len, tx_buf);
  3290  04FE  0828               	movf	can_send@len,w
  3291  04FF  00A4               	movwf	??_can_send
  3292  0500  0824               	movf	??_can_send,w
  3293  0501  00F8               	movwf	SPI_send@len
  3294  0502  304B               	movlw	(low (_tx_buf| 0))& (0+255)
  3295  0503  00A5               	movwf	??_can_send+1
  3296  0504  0825               	movf	??_can_send+1,w
  3297  0505  00F9               	movwf	SPI_send@rbuf
  3298  0506  304B               	movlw	(low (_tx_buf| 0))& (0+255)
  3299  0507  3183  2318  3184   	fcall	_SPI_send
  3300  050A  0020               	movlb	0	; select bank0
  3301  050B  00A6               	movwf	??_can_send+2
  3302  050C  0826               	movf	??_can_send+2,w
  3303  050D  00A9               	movwf	can_send@bytes_written
  3304                           
  3305                           ;main.c: 168: if (bytes_written == len) {
  3306  050E  0829               	movf	can_send@bytes_written,w
  3307  050F  0628               	xorwf	can_send@len,w
  3308  0510  1D03               	skipz
  3309  0511  0008               	return
  3310                           
  3311                           ;main.c: 170: uint8_t txb_ctrl_buf[1];
  3312                           ;main.c: 171: txb_ctrl_buf[0] = 0b10000000 & (0b00000001 << n);
  3313  0512  3001               	movlw	1
  3314  0513  00A4               	movwf	??_can_send
  3315  0514  0A27               	incf	can_send@n,w
  3316  0515  2D17               	goto	u1164
  3317  0516                     u1165:	
  3318  0516  35A4               	lslf	??_can_send,f
  3319  0517                     u1164:	
  3320  0517  0B89               	decfsz	9,f
  3321  0518  2D16               	goto	u1165
  3322  0519  0824               	movf	??_can_send,w
  3323  051A  3980               	andlw	128
  3324  051B  00A5               	movwf	??_can_send+1
  3325  051C  0825               	movf	??_can_send+1,w
  3326  051D  00AB               	movwf	can_send@txb_ctrl_buf
  3327                           
  3328                           ;main.c: 172: bytes_written = SPI_send(txb_ctrl_buf, 1, txb_ctrl_buf);
  3329  051E  01F8               	clrf	SPI_send@len
  3330  051F  0AF8               	incf	SPI_send@len,f
  3331  0520  302B               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  3332  0521  00A4               	movwf	??_can_send
  3333  0522  0824               	movf	??_can_send,w
  3334  0523  00F9               	movwf	SPI_send@rbuf
  3335  0524  302B               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  3336  0525  3183  2318         	fcall	_SPI_send
  3337  0527  0020               	movlb	0	; select bank0
  3338  0528  00A5               	movwf	??_can_send+1
  3339  0529  0825               	movf	??_can_send+1,w
  3340  052A  00A9               	movwf	can_send@bytes_written
  3341                           
  3342                           ;main.c: 174: return 1;
  3343                           ;	Return value of _can_send is never used
  3344  052B  0008               	return
  3345  052C                     __end_of_can_send:	
  3346                           ;main.c: 175: }
  3347                           ;main.c: 176: }
  3348                           ;main.c: 177: return 0;
  3349                           ;	Return value of _can_send is never used
  3350                           
  3351                           
  3352                           	psect	text11
  3353  0318                     __ptext11:	
  3354 ;; *************** function _SPI_send *****************
  3355 ;; Defined at:
  3356 ;;		line 80 in file "main.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  sbuf            1    wreg     PTR unsigned char 
  3359 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3360 ;;		 -> rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3361 ;;  len             1    8[COMMON] unsigned char 
  3362 ;;  rbuf            1    9[COMMON] PTR unsigned char 
  3363 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3364 ;;		 -> buf(9), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  sbuf            1    1[BANK0 ] PTR unsigned char 
  3367 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3368 ;;		 -> rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3369 ;;  bytes_writte    1    0[BANK0 ] unsigned char 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      unsigned char 
  3372 ;; Registers used:
  3373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3382 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3383 ;;Total ram usage:        7 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    2
  3386 ;; This function calls:
  3387 ;;		_SPI_Exchange8bitBuffer
  3388 ;; This function is called by:
  3389 ;;		_can_start
  3390 ;;		_can_txf_clear
  3391 ;;		_can_receive
  3392 ;;		_can_send
  3393 ;;		_can_status_check
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           
  3398                           ;psect for function _SPI_send
  3399  0318                     _SPI_send:	
  3400                           
  3401                           ;incstack = 0
  3402                           ; Regs used in _SPI_send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3403                           ;SPI_send@sbuf stored from wreg
  3404  0318  0020               	movlb	0	; select bank0
  3405  0319  00A1               	movwf	SPI_send@sbuf
  3406                           
  3407                           ;main.c: 81: LATAbits.LATA4 = 0;
  3408  031A  0022               	movlb	2	; select bank2
  3409  031B  120C               	bcf	12,4	;volatile
  3410                           
  3411                           ;main.c: 82: uint8_t bytes_written = SPI_Exchange8bitBuffer(sbuf, len, rbuf);
  3412  031C  0878               	movf	SPI_send@len,w
  3413  031D  00FA               	movwf	??_SPI_send
  3414  031E  087A               	movf	??_SPI_send,w
  3415  031F  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  3416  0320  0879               	movf	SPI_send@rbuf,w
  3417  0321  00FB               	movwf	??_SPI_send+1
  3418  0322  087B               	movf	??_SPI_send+1,w
  3419  0323  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  3420  0324  0020               	movlb	0	; select bank0
  3421  0325  0821               	movf	SPI_send@sbuf,w
  3422  0326  3184  241E         	fcall	_SPI_Exchange8bitBuffer
  3423  0328  00FC               	movwf	??_SPI_send+2
  3424  0329  087C               	movf	??_SPI_send+2,w
  3425  032A  0020               	movlb	0	; select bank0
  3426  032B  00A0               	movwf	SPI_send@bytes_written
  3427                           
  3428                           ;main.c: 83: LATAbits.LATA4 = 0;
  3429  032C  0022               	movlb	2	; select bank2
  3430  032D  120C               	bcf	12,4	;volatile
  3431                           
  3432                           ;main.c: 84: return bytes_written;
  3433  032E  0020               	movlb	0	; select bank0
  3434  032F  0820               	movf	SPI_send@bytes_written,w
  3435  0330  0008               	return
  3436  0331                     __end_of_SPI_send:	
  3437                           
  3438                           	psect	text12
  3439  041E                     __ptext12:	
  3440 ;; *************** function _SPI_Exchange8bitBuffer *****************
  3441 ;; Defined at:
  3442 ;;		line 91 in file "mcc_generated_files/spi.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  dataIn          1    wreg     PTR unsigned char 
  3445 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3446 ;;		 -> rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3447 ;;  bufLen          1    1[COMMON] unsigned char 
  3448 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  3449 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3450 ;;		 -> buf(9), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  3453 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), tx_buf(14), can_receive@can_int_flag(4), 
  3454 ;;		 -> rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3455 ;;  bytesWritten    1    7[COMMON] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;Total ram usage:        7 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    1
  3472 ;; This function calls:
  3473 ;;		_SPI_Exchange8bit
  3474 ;; This function is called by:
  3475 ;;		_SPI_send
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _SPI_Exchange8bitBuffer
  3481  041E                     _SPI_Exchange8bitBuffer:	
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  3485                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  3486  041E  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  3487                           
  3488                           ;spi.c: 93: uint8_t bytesWritten = 0;
  3489  041F  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  3490                           
  3491                           ;spi.c: 95: if(bufLen != 0)
  3492  0420  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  3493  0421  1903               	btfsc	3,2
  3494  0422  2C6A               	goto	l1295
  3495                           
  3496                           ;spi.c: 96: {
  3497                           ;spi.c: 97: if(dataIn != (0))
  3498  0423  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  3499  0424  1D03               	btfss	3,2
  3500  0425  2C4C               	goto	l1283
  3501  0426  2C51               	goto	l1285
  3502  0427                     l1275:	
  3503                           ;spi.c: 98: {
  3504                           ;spi.c: 99: while(bytesWritten < bufLen)
  3505                           
  3506                           
  3507                           ;spi.c: 100: {
  3508                           ;spi.c: 101: if(dataOut == (0))
  3509  0427  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  3510  0428  1D03               	btfss	3,2
  3511  0429  2C35               	goto	l1279
  3512                           
  3513                           ;spi.c: 102: {
  3514                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  3515  042A  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3516  042B  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  3517  042C  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3518  042D  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3519  042E  0086               	movwf	6
  3520  042F  0187               	clrf	7
  3521  0430  0801               	movf	1,w
  3522  0431  3182  22A4  3184   	fcall	_SPI_Exchange8bit
  3523                           
  3524                           ;spi.c: 104: }
  3525  0434  2C48               	goto	l1281
  3526  0435                     l1279:	
  3527                           
  3528                           ;spi.c: 105: else
  3529                           ;spi.c: 106: {
  3530                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  3531  0435  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3532  0436  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  3533  0437  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3534  0438  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3535  0439  0086               	movwf	6
  3536  043A  0187               	clrf	7
  3537  043B  0801               	movf	1,w
  3538  043C  3182  22A4  3184   	fcall	_SPI_Exchange8bit
  3539  043F  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  3540  0440  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3541  0441  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  3542  0442  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  3543  0443  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  3544  0444  0086               	movwf	6
  3545  0445  0187               	clrf	7
  3546  0446  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  3547  0447  0081               	movwf	1
  3548  0448                     l1281:	
  3549                           
  3550                           ;spi.c: 108: }
  3551                           ;spi.c: 110: bytesWritten++;
  3552  0448  3001               	movlw	1
  3553  0449  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3554  044A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3555  044B  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  3556  044C                     l1283:	
  3557  044C  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  3558  044D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  3559  044E  1803               	btfsc	3,0
  3560  044F  2C6A               	goto	l1295
  3561  0450  2C27               	goto	l1275
  3562  0451                     l1285:	
  3563                           ;spi.c: 111: }
  3564                           ;spi.c: 112: }
  3565                           
  3566                           
  3567                           ;spi.c: 113: else
  3568                           ;spi.c: 114: {
  3569                           ;spi.c: 115: if(dataOut != (0))
  3570  0451  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  3571  0452  1D03               	btfss	3,2
  3572  0453  2C66               	goto	l1293
  3573  0454  2C6A               	goto	l1295
  3574  0455                     l1289:	
  3575                           ;spi.c: 116: {
  3576                           ;spi.c: 117: while(bytesWritten < bufLen )
  3577                           
  3578                           
  3579                           ;spi.c: 118: {
  3580                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  3581  0455  3000               	movlw	0
  3582  0456  3182  22A4  3184   	fcall	_SPI_Exchange8bit
  3583  0459  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3584  045A  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3585  045B  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  3586  045C  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  3587  045D  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  3588  045E  0086               	movwf	6
  3589  045F  0187               	clrf	7
  3590  0460  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3591  0461  0081               	movwf	1
  3592                           
  3593                           ;spi.c: 121: bytesWritten++;
  3594  0462  3001               	movlw	1
  3595  0463  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3596  0464  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3597  0465  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  3598  0466                     l1293:	
  3599  0466  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  3600  0467  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  3601  0468  1C03               	skipc
  3602  0469  2C55               	goto	l1289
  3603  046A                     l1295:	
  3604                           
  3605                           ;spi.c: 122: }
  3606                           ;spi.c: 123: }
  3607                           ;spi.c: 124: }
  3608                           ;spi.c: 125: }
  3609                           ;spi.c: 127: return bytesWritten;
  3610  046A  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3611  046B  0008               	return
  3612  046C                     __end_of_SPI_Exchange8bitBuffer:	
  3613                           
  3614                           	psect	text13
  3615  02A4                     __ptext13:	
  3616 ;; *************** function _SPI_Exchange8bit *****************
  3617 ;; Defined at:
  3618 ;;		line 77 in file "mcc_generated_files/spi.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;  data            1    wreg     unsigned char 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  data            1    0[COMMON] unsigned char 
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      unsigned char 
  3625 ;; Registers used:
  3626 ;;		wreg
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3636 ;;Total ram usage:        1 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_SPI_Exchange8bitBuffer
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _SPI_Exchange8bit
  3647  02A4                     _SPI_Exchange8bit:	
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _SPI_Exchange8bit: [wreg]
  3651                           ;SPI_Exchange8bit@data stored from wreg
  3652  02A4  00F0               	movwf	SPI_Exchange8bit@data
  3653                           
  3654                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  3655  02A5  0024               	movlb	4	; select bank4
  3656  02A6  1395               	bcf	21,7	;volatile
  3657                           
  3658                           ;spi.c: 82: SSP1BUF = data;
  3659  02A7  0870               	movf	SPI_Exchange8bit@data,w
  3660  02A8  0091               	movwf	17	;volatile
  3661  02A9                     l118:	
  3662                           ;spi.c: 85: {
  3663                           
  3664                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  3665                           
  3666  02A9  1C14               	btfss	20,0	;volatile
  3667  02AA  2AA9               	goto	l118
  3668                           
  3669                           ;spi.c: 86: }
  3670                           ;spi.c: 88: return (SSP1BUF);
  3671  02AB  0811               	movf	17,w	;volatile
  3672  02AC  0008               	return
  3673  02AD                     __end_of_SPI_Exchange8bit:	
  3674                           
  3675                           	psect	text14
  3676  052C                     __ptext14:	
  3677 ;; *************** function _atoi *****************
  3678 ;; Defined at:
  3679 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  s               2    6[COMMON] PTR const unsigned char 
  3682 ;;		 -> ROM(8192), buf(9), 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  a               2   11[COMMON] int 
  3685 ;;  sign            1   10[COMMON] unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  2    6[COMMON] int 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        7 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    1
  3702 ;; This function calls:
  3703 ;;		___wmul
  3704 ;;		_isdigit
  3705 ;; This function is called by:
  3706 ;;		_main
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _atoi
  3712  052C                     _atoi:	
  3713  052C                     l1633:	
  3714                           ;incstack = 0
  3715                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3716                           
  3717  052C  0876               	movf	atoi@s,w
  3718  052D  0084               	movwf	4
  3719  052E  0877               	movf	atoi@s+1,w
  3720  052F  0085               	movwf	5
  3721  0530  0012               	moviw fsr0++
  3722  0531  3A20               	xorlw	32
  3723  0532  1D03               	btfss	3,2
  3724  0533  2D39               	goto	l1635
  3725  0534                     l1631:	
  3726  0534  3001               	movlw	1
  3727  0535  07F6               	addwf	atoi@s,f
  3728  0536  3000               	movlw	0
  3729  0537  3DF7               	addwfc	atoi@s+1,f
  3730  0538  2D2C               	goto	l1633
  3731  0539                     l1635:	
  3732  0539  0876               	movf	atoi@s,w
  3733  053A  0084               	movwf	4
  3734  053B  0877               	movf	atoi@s+1,w
  3735  053C  0085               	movwf	5
  3736  053D  0012               	moviw fsr0++
  3737  053E  3A09               	xorlw	9
  3738  053F  1903               	btfsc	3,2
  3739  0540  2D34               	goto	l1631
  3740  0541  01FB               	clrf	atoi@a
  3741  0542  01FC               	clrf	atoi@a+1
  3742  0543  01FA               	clrf	atoi@sign
  3743  0544  0876               	movf	atoi@s,w
  3744  0545  0084               	movwf	4
  3745  0546  0877               	movf	atoi@s+1,w
  3746  0547  0085               	movwf	5
  3747  0548  0012               	moviw fsr0++
  3748  0549  3A2D               	xorlw	45
  3749  054A  1D03               	btfss	3,2
  3750  054B  2D51               	goto	l1645
  3751  054C  3001               	movlw	1
  3752  054D  00F8               	movwf	??_atoi
  3753  054E  0878               	movf	??_atoi,w
  3754  054F  07FA               	addwf	atoi@sign,f
  3755  0550  2D59               	goto	l1651
  3756  0551                     l1645:	
  3757  0551  0876               	movf	atoi@s,w
  3758  0552  0084               	movwf	4
  3759  0553  0877               	movf	atoi@s+1,w
  3760  0554  0085               	movwf	5
  3761  0555  0012               	moviw fsr0++
  3762  0556  3A2B               	xorlw	43
  3763  0557  1D03               	btfss	3,2
  3764  0558  2D5D               	goto	l1653
  3765  0559                     l1651:	
  3766  0559  3001               	movlw	1
  3767  055A  07F6               	addwf	atoi@s,f
  3768  055B  3000               	movlw	0
  3769  055C  3DF7               	addwfc	atoi@s+1,f
  3770  055D                     l1653:	
  3771  055D  0876               	movf	atoi@s,w
  3772  055E  0084               	movwf	4
  3773  055F  0877               	movf	atoi@s+1,w
  3774  0560  0085               	movwf	5
  3775  0561  0800               	movf	0,w	;code access
  3776  0562  3182  22CD  3185   	fcall	_isdigit
  3777  0565  1C03               	btfss	3,0
  3778  0566  2D84               	goto	l1655
  3779  0567  087C               	movf	atoi@a+1,w
  3780  0568  00F1               	movwf	___wmul@multiplier+1
  3781  0569  087B               	movf	atoi@a,w
  3782  056A  00F0               	movwf	___wmul@multiplier
  3783  056B  300A               	movlw	10
  3784  056C  00F2               	movwf	___wmul@multiplicand
  3785  056D  3000               	movlw	0
  3786  056E  00F3               	movwf	___wmul@multiplicand+1
  3787  056F  3183  2331  3185   	fcall	___wmul
  3788  0572  0876               	movf	atoi@s,w
  3789  0573  0084               	movwf	4
  3790  0574  0877               	movf	atoi@s+1,w
  3791  0575  0085               	movwf	5
  3792  0576  0800               	movf	0,w	;code access
  3793  0577  0770               	addwf	?___wmul,w
  3794  0578  00F8               	movwf	??_atoi
  3795  0579  0871               	movf	?___wmul+1,w
  3796  057A  1803               	skipnc
  3797  057B  0A71               	incf	?___wmul+1,w
  3798  057C  00F9               	movwf	??_atoi+1
  3799  057D  0878               	movf	??_atoi,w
  3800  057E  3ED0               	addlw	208
  3801  057F  00FB               	movwf	atoi@a
  3802  0580  30FF               	movlw	255
  3803  0581  3D79               	addwfc	??_atoi+1,w
  3804  0582  00FC               	movwf	atoi@a+1
  3805  0583  2D59               	goto	l1651
  3806  0584                     l1655:	
  3807  0584  087A               	movf	atoi@sign,w
  3808  0585  1903               	btfsc	3,2
  3809  0586  2D93               	goto	l1661
  3810  0587  097B               	comf	atoi@a,w
  3811  0588  00F8               	movwf	??_atoi
  3812  0589  097C               	comf	atoi@a+1,w
  3813  058A  00F9               	movwf	??_atoi+1
  3814  058B  0AF8               	incf	??_atoi,f
  3815  058C  1903               	skipnz
  3816  058D  0AF9               	incf	??_atoi+1,f
  3817  058E  0878               	movf	??_atoi,w
  3818  058F  00F6               	movwf	?_atoi
  3819  0590  0879               	movf	??_atoi+1,w
  3820  0591  00F7               	movwf	?_atoi+1
  3821  0592  0008               	return
  3822  0593                     l1661:	
  3823  0593  087C               	movf	atoi@a+1,w
  3824  0594  00F7               	movwf	?_atoi+1
  3825  0595  087B               	movf	atoi@a,w
  3826  0596  00F6               	movwf	?_atoi
  3827  0597  0008               	return
  3828  0598                     __end_of_atoi:	
  3829                           
  3830                           	psect	text15
  3831  02CD                     __ptext15:	
  3832 ;; *************** function _isdigit *****************
  3833 ;; Defined at:
  3834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  c               1    wreg     unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  c               1    1[COMMON] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, status,2, status,0
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;Total ram usage:        2 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		_printf
  3858 ;;		_atoi
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _isdigit
  3864  02CD                     _isdigit:	
  3865                           
  3866                           ;incstack = 0
  3867                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3868                           ;isdigit@c stored from wreg
  3869  02CD  00F1               	movwf	isdigit@c
  3870  02CE  01F0               	clrf	_isdigit$622
  3871  02CF  303A               	movlw	58
  3872  02D0  0271               	subwf	isdigit@c,w
  3873  02D1  1803               	skipnc
  3874  02D2  2AD9               	goto	l1307
  3875  02D3  3030               	movlw	48
  3876  02D4  0271               	subwf	isdigit@c,w
  3877  02D5  1C03               	skipc
  3878  02D6  2AD9               	goto	l1307
  3879  02D7  01F0               	clrf	_isdigit$622
  3880  02D8  0AF0               	incf	_isdigit$622,f
  3881  02D9                     l1307:	
  3882  02D9  0C70               	rrf	_isdigit$622,w
  3883  02DA  0008               	return
  3884  02DB                     __end_of_isdigit:	
  3885                           
  3886                           	psect	text16
  3887  0331                     __ptext16:	
  3888 ;; *************** function ___wmul *****************
  3889 ;; Defined at:
  3890 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  multiplier      2    0[COMMON] unsigned int 
  3893 ;;  multiplicand    2    2[COMMON] unsigned int 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  product         2    4[COMMON] unsigned int 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  2    0[COMMON] unsigned int 
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, status,0
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        6 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_printf
  3915 ;;		_atoi
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function ___wmul
  3921  0331                     ___wmul:	
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3925  0331  01F4               	clrf	___wmul@product
  3926  0332  01F5               	clrf	___wmul@product+1
  3927  0333                     l1313:	
  3928  0333  1C70               	btfss	___wmul@multiplier,0
  3929  0334  2B39               	goto	l385
  3930  0335  0872               	movf	___wmul@multiplicand,w
  3931  0336  07F4               	addwf	___wmul@product,f
  3932  0337  0873               	movf	___wmul@multiplicand+1,w
  3933  0338  3DF5               	addwfc	___wmul@product+1,f
  3934  0339                     l385:	
  3935  0339  3001               	movlw	1
  3936  033A                     u795:	
  3937  033A  35F2               	lslf	___wmul@multiplicand,f
  3938  033B  0DF3               	rlf	___wmul@multiplicand+1,f
  3939  033C  0B89               	decfsz	9,f
  3940  033D  2B3A               	goto	u795
  3941  033E  3001               	movlw	1
  3942  033F                     u805:	
  3943  033F  36F1               	lsrf	___wmul@multiplier+1,f
  3944  0340  0CF0               	rrf	___wmul@multiplier,f
  3945  0341  0B89               	decfsz	9,f
  3946  0342  2B3F               	goto	u805
  3947  0343  0870               	movf	___wmul@multiplier,w
  3948  0344  0471               	iorwf	___wmul@multiplier+1,w
  3949  0345  1D03               	btfss	3,2
  3950  0346  2B33               	goto	l1313
  3951  0347  0875               	movf	___wmul@product+1,w
  3952  0348  00F1               	movwf	?___wmul+1
  3953  0349  0874               	movf	___wmul@product,w
  3954  034A  00F0               	movwf	?___wmul
  3955  034B  0008               	return
  3956  034C                     __end_of___wmul:	
  3957                           
  3958                           	psect	text17
  3959  02DB                     __ptext17:	
  3960 ;; *************** function _SYSTEM_Initialize *****************
  3961 ;; Defined at:
  3962 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, pclath, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    1
  3983 ;; This function calls:
  3984 ;;		_EUSART_Initialize
  3985 ;;		_OSCILLATOR_Initialize
  3986 ;;		_PIN_MANAGER_Initialize
  3987 ;;		_SPI_Initialize
  3988 ;;		_WDT_Initialize
  3989 ;; This function is called by:
  3990 ;;		_main
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _SYSTEM_Initialize
  3996  02DB                     _SYSTEM_Initialize:	
  3997                           
  3998                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4002  02DB  3182  22EA  3182   	fcall	_PIN_MANAGER_Initialize
  4003                           
  4004                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4005  02DE  3182  22B7  3182   	fcall	_OSCILLATOR_Initialize
  4006                           
  4007                           ;mcc.c: 75: WDT_Initialize();
  4008  02E1  3182  2282  3182   	fcall	_WDT_Initialize
  4009                           
  4010                           ;mcc.c: 76: SPI_Initialize();
  4011  02E4  3182  2290  3182   	fcall	_SPI_Initialize
  4012                           
  4013                           ;mcc.c: 77: EUSART_Initialize();
  4014  02E7  3182  22C1         	fcall	_EUSART_Initialize
  4015  02E9  0008               	return
  4016  02EA                     __end_of_SYSTEM_Initialize:	
  4017                           
  4018                           	psect	text18
  4019  0282                     __ptext18:	
  4020 ;; *************** function _WDT_Initialize *****************
  4021 ;; Defined at:
  4022 ;;		line 94 in file "mcc_generated_files/mcc.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_SYSTEM_Initialize
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _WDT_Initialize
  4051  0282                     _WDT_Initialize:	
  4052                           
  4053                           ;mcc.c: 97: WDTCON = 0x16;
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _WDT_Initialize: [wreg]
  4057  0282  3016               	movlw	22
  4058  0283  0021               	movlb	1	; select bank1
  4059  0284  0097               	movwf	23	;volatile
  4060  0285  0008               	return
  4061  0286                     __end_of_WDT_Initialize:	
  4062                           
  4063                           	psect	text19
  4064  0290                     __ptext19:	
  4065 ;; *************** function _SPI_Initialize *****************
  4066 ;; Defined at:
  4067 ;;		line 63 in file "mcc_generated_files/spi.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  1    wreg      void 
  4074 ;; Registers used:
  4075 ;;		wreg, status,2
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;Total ram usage:        0 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_SYSTEM_Initialize
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _SPI_Initialize
  4096  0290                     _SPI_Initialize:	
  4097                           
  4098                           ;spi.c: 68: SSP1STAT = 0x00;
  4099                           
  4100                           ;incstack = 0
  4101                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4102  0290  0024               	movlb	4	; select bank4
  4103  0291  0194               	clrf	20	;volatile
  4104                           
  4105                           ;spi.c: 71: SSP1CON1 = 0x20;
  4106  0292  3020               	movlw	32
  4107  0293  0095               	movwf	21	;volatile
  4108                           
  4109                           ;spi.c: 74: SSP1ADD = 0x00;
  4110  0294  0192               	clrf	18	;volatile
  4111  0295  0008               	return
  4112  0296                     __end_of_SPI_Initialize:	
  4113                           
  4114                           	psect	text20
  4115  02EA                     __ptext20:	
  4116 ;; *************** function _PIN_MANAGER_Initialize *****************
  4117 ;; Defined at:
  4118 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;Total ram usage:        0 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_SYSTEM_Initialize
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _PIN_MANAGER_Initialize
  4147  02EA                     _PIN_MANAGER_Initialize:	
  4148                           
  4149                           ;pin_manager.c: 57: LATA = 0x10;
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4153  02EA  3010               	movlw	16
  4154  02EB  0022               	movlb	2	; select bank2
  4155  02EC  008C               	movwf	12	;volatile
  4156                           
  4157                           ;pin_manager.c: 58: LATC = 0x00;
  4158  02ED  018E               	clrf	14	;volatile
  4159                           
  4160                           ;pin_manager.c: 63: TRISA = 0x2F;
  4161  02EE  302F               	movlw	47
  4162  02EF  0021               	movlb	1	; select bank1
  4163  02F0  008C               	movwf	12	;volatile
  4164                           
  4165                           ;pin_manager.c: 64: TRISC = 0x32;
  4166  02F1  3032               	movlw	50
  4167  02F2  008E               	movwf	14	;volatile
  4168                           
  4169                           ;pin_manager.c: 69: ANSELC = 0x00;
  4170  02F3  0023               	movlb	3	; select bank3
  4171  02F4  018E               	clrf	14	;volatile
  4172                           
  4173                           ;pin_manager.c: 70: ANSELA = 0x07;
  4174  02F5  3007               	movlw	7
  4175  02F6  008C               	movwf	12	;volatile
  4176                           
  4177                           ;pin_manager.c: 75: WPUA = 0x00;
  4178  02F7  0024               	movlb	4	; select bank4
  4179  02F8  018C               	clrf	12	;volatile
  4180                           
  4181                           ;pin_manager.c: 76: WPUC = 0x30;
  4182  02F9  3030               	movlw	48
  4183  02FA  008E               	movwf	14	;volatile
  4184                           
  4185                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4186  02FB  0021               	movlb	1	; select bank1
  4187  02FC  1395               	bcf	21,7	;volatile
  4188                           
  4189                           ;pin_manager.c: 83: APFCON1 = 0x00;
  4190  02FD  0022               	movlb	2	; select bank2
  4191  02FE  019E               	clrf	30	;volatile
  4192                           
  4193                           ;pin_manager.c: 84: APFCON0 = 0x00;
  4194  02FF  019D               	clrf	29	;volatile
  4195  0300  0008               	return
  4196  0301                     __end_of_PIN_MANAGER_Initialize:	
  4197                           
  4198                           	psect	text21
  4199  02B7                     __ptext21:	
  4200 ;; *************** function _OSCILLATOR_Initialize *****************
  4201 ;; Defined at:
  4202 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_SYSTEM_Initialize
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function _OSCILLATOR_Initialize
  4231  02B7                     _OSCILLATOR_Initialize:	
  4232                           
  4233                           ;mcc.c: 83: OSCCON = 0x70;
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4237  02B7  3070               	movlw	112
  4238  02B8  0021               	movlb	1	; select bank1
  4239  02B9  0099               	movwf	25	;volatile
  4240                           
  4241                           ;mcc.c: 85: OSCTUNE = 0x00;
  4242  02BA  0198               	clrf	24	;volatile
  4243                           
  4244                           ;mcc.c: 87: BORCON = 0x00;
  4245  02BB  0022               	movlb	2	; select bank2
  4246  02BC  0196               	clrf	22	;volatile
  4247  02BD                     l26:	
  4248                           ;mcc.c: 90: {
  4249                           
  4250                           ;mcc.c: 89: while(PLLR == 0)
  4251                           
  4252  02BD  0021               	movlb	1	; select bank1
  4253  02BE  1B1A               	btfsc	26,6	;volatile
  4254  02BF  0008               	return
  4255  02C0  2ABD               	goto	l26
  4256  02C1                     __end_of_OSCILLATOR_Initialize:	
  4257                           
  4258                           	psect	text22
  4259  02C1                     __ptext22:	
  4260 ;; *************** function _EUSART_Initialize *****************
  4261 ;; Defined at:
  4262 ;;		line 53 in file "mcc_generated_files/eusart.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;Total ram usage:        0 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_SYSTEM_Initialize
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           
  4290                           ;psect for function _EUSART_Initialize
  4291  02C1                     _EUSART_Initialize:	
  4292                           
  4293                           ;eusart.c: 58: BAUDCON = 0x08;
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _EUSART_Initialize: [wreg]
  4297  02C1  3008               	movlw	8
  4298  02C2  0023               	movlb	3	; select bank3
  4299  02C3  009F               	movwf	31	;volatile
  4300                           
  4301                           ;eusart.c: 61: RCSTA = 0x90;
  4302  02C4  3090               	movlw	144
  4303  02C5  009D               	movwf	29	;volatile
  4304                           
  4305                           ;eusart.c: 64: TXSTA = 0x24;
  4306  02C6  3024               	movlw	36
  4307  02C7  009E               	movwf	30	;volatile
  4308                           
  4309                           ;eusart.c: 67: SPBRGL = 0x40;
  4310  02C8  3040               	movlw	64
  4311  02C9  009B               	movwf	27	;volatile
  4312                           
  4313                           ;eusart.c: 70: SPBRGH = 0x03;
  4314  02CA  3003               	movlw	3
  4315  02CB  009C               	movwf	28	;volatile
  4316  02CC  0008               	return
  4317  02CD                     __end_of_EUSART_Initialize:	
  4318                           
  4319                           	psect	text23
  4320  02AD                     __ptext23:	
  4321 ;; *************** function _EUSART_Read *****************
  4322 ;; Defined at:
  4323 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      unsigned char 
  4330 ;; Registers used:
  4331 ;;		wreg
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_main
  4347 ;;		_getch
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _EUSART_Read
  4353  02AD                     _EUSART_Read:	
  4354  02AD                     l56:	
  4355                           ;eusart.c: 78: {
  4356                           
  4357                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _EUSART_Read: [wreg]
  4361                           
  4362  02AD  0020               	movlb	0	; select bank0
  4363  02AE  1E91               	btfss	17,5	;volatile
  4364  02AF  2AAD               	goto	l56
  4365                           
  4366                           ;eusart.c: 79: }
  4367                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  4368  02B0  0023               	movlb	3	; select bank3
  4369  02B1  1C9D               	btfss	29,1	;volatile
  4370  02B2  2AB5               	goto	l1553
  4371                           
  4372                           ;eusart.c: 83: {
  4373                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  4374  02B3  121D               	bcf	29,4	;volatile
  4375                           
  4376                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  4377  02B4  161D               	bsf	29,4	;volatile
  4378  02B5                     l1553:	
  4379                           
  4380                           ;eusart.c: 88: }
  4381                           ;eusart.c: 90: return RCREG;
  4382  02B5  0819               	movf	25,w	;volatile
  4383  02B6  0008               	return
  4384  02B7                     __end_of_EUSART_Read:	
  4385  007E                     btemp	set	126	;btemp
  4386  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    14
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      71
    BANK1            80      0      15
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), buf(BANK0[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[7]), printf@c(BANK0[1]), buf(BANK0[9]), rx_buf(BANK1[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[22]), STR_3(CODE[3]), STR_2(CODE[22]), 
		 -> STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK0[9]), 

    SPI_send@rbuf	PTR unsigned char  size(1) Largest target is 14
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), tx_buf(BANK0[14]), can_receive@can_int_flag(BANK0[4]), 
		 -> buf(BANK0[9]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_send@sbuf	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), tx_buf(BANK0[14]), can_receive@can_int_flag(BANK0[4]), 
		 -> rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 14
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), tx_buf(BANK0[14]), can_receive@can_int_flag(BANK0[4]), 
		 -> buf(BANK0[9]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), tx_buf(BANK0[14]), can_receive@can_int_flag(BANK0[4]), 
		 -> rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_printf
    _set_sid->_printf
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _printf->___lwdiv
    _putch->_EUSART_Write
    _can_start->_SPI_send
    _can_send->_SPI_send
    _SPI_send->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_start->_SPI_send
    _can_send->_SPI_send

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   17030
                                             35 BANK0      4     4      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                           _can_send
                          _can_start
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    2246
                                             17 BANK0      8     6      2
                               _atoi (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     7     7      0    7852
                                             28 BANK0      7     7      0
                           _SPI_send
                        _can_receive
                      _can_txf_clear
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                       10    10      0    1943
                                              2 BANK0     10    10      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         11    11      0    3950
                                             17 BANK0     11    11      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    21      6    1984
                                              8 COMMON     6     0      6
                                              0 BANK0     17    17      0
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _can_start                                            7     7      0    1826
                                              2 BANK0      7     7      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (1) _can_send                                            10     8      2    2327
                                              2 BANK0     10     8      2
                           _SPI_send
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             7     5      2    1752
                                              8 COMMON     5     3      2
                                              0 BANK0      2     2      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2     772
                                              6 COMMON     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_send
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
   _can_start
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
   _can_status_check
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _atoi (ARG)
       ___wmul
       _isdigit
     _printf (ARG)
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       F       7       18.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      64      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      64      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 12 15:51:17 2018

                    _SPI_Initialize 0290               __end_of_can_txf_clear 0378  
                                 _c 004A                         __CFG_CP$OFF 0000  
                                l26 02BD                                  l63 029D  
                                l56 02AD             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 0800                 ___wmul@multiplicand 0072  
                       __CFG_LVP$ON 0000                                 l220 0412  
                               l301 07DF                                 l118 02A9  
                               l222 0418                                 l216 0406  
                               l218 040C                                 l256 0662  
                               l385 0339            __end_of_can_status_check 041E  
                      __CFG_CPD$OFF 0000                                 u805 033F  
                               u835 0383                                 u855 038D  
                               u865 0397                                 u945 06D7  
                               u795 033A                                 u875 039F  
                               u985 075D                                 _abc 0863  
                               _buf 0059                                 _cnt 0049  
                               _sid 0047                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
                      ?_EUSART_Read 0070                                l1313 0333  
                              l1401 06EF                                l1307 02D9  
                              l1411 0712                                l1405 06FC  
                              l1343 039E                                l1335 0380  
                              l1407 0707                                l1281 0448  
                              l1337 038C                                l1441 0786  
                              l1417 071B                                l1275 0427  
                              l1283 044C                                l1347 03A7  
                              l1451 079A                                l1435 0767  
                              l1419 0736                                l1363 0668  
                              l1293 0466                                l1285 0451  
                              l1429 0748                                l1365 0671  
                              l1357 065D                                l1701 060E  
                              l1631 0534                                l1279 0435  
                              l1295 046A                                l1463 07AB  
                              l1455 07A7                                l1439 0783  
                              l1391 06D1                                l1553 02B5  
                              l1633 052C                                l1289 0455  
                              l1449 0796                                l1385 06C1  
                              l1377 06AD                                l1369 067E  
                              l1465 0641                                l1651 0559  
                              l1635 0539                                l1395 06DE  
                              l1661 0593                                l1653 055D  
                              l1645 0551                                l1389 06C3  
                              l1709 0639                                l1655 0584  
                              l1591 04E2                                l1399 06E0  
                              l1593 04F9                                l1675 05A5  
                              l1685 05CB                                l1697 05FD  
                              STR_1 082F                                STR_2 0819  
                              STR_3 0866                                STR_4 0803  
                              STR_5 0802                                STR_6 085C  
                              STR_7 0843                                u1005 0776  
                              u1104 0497                                u1105 0496  
                              u1300 05C9                                u1135 03BE  
                              u1164 0517                                u1165 0516  
                              _LATA 010C                                u1094 0355  
                              u1095 0354                                _LATC 010E  
                              _PLLR 04D6                                _WPUA 020C  
                              _WPUC 020E                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _atoi 052C  
                              _main 0598                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0002  
            __end_of_SPI_Initialize 0296                       __CFG_MCLRE$ON 0000  
    __end_of_SPI_Exchange8bitBuffer 046C                       __CFG_PLLEN$ON 0000  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 000A  
              __size_of_can_receive 0059       __end_of_OSCILLATOR_Initialize 02C1  
                             ?_atoi 0076                               ?_main 0070  
                     __CFG_WDTE$OFF 0000                     __end_of___lwdiv 03AC  
     can_status_check@bytes_written 003F                               _RCREG 0199  
                             _RCSTA 019D                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                      _WDT_Initialize 0282  
                   __end_of_isdigit 02DB                               atoi@a 007B  
                             atoi@s 0076                               _putch 0286  
                   __end_of_set_sid 03E4                    __end_of_SPI_send 0331  
                             status 0003                               wtemp0 007E  
                   ?_SPI_Initialize 0070                     __initialization 07E0  
                      __end_of_atoi 0598                        __end_of_main 063C  
            can_start@bytes_written 0028                      ??_EUSART_Write 0070  
            can_status_check@status 0042                              ??_atoi 0078  
                            ??_main 0043              __end_of_WDT_Initialize 0286  
          __end_of_SPI_Exchange8bit 02AD                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_send 052C  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0331  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                  __end_of_max_char 086A           can_txf_clear@can_int_flag 0028  
                            _printf 063C                              _rx_buf 00A0  
                            _tx_buf 004B                           ??_isdigit 0070  
                   ?_WDT_Initialize 0070                           ??_set_sid 0033  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 02DB  
           __end_of__initialization 07FD                  ?_SYSTEM_Initialize 0070  
                    __pcstackCOMMON 0070                        __pidataBANK0 028B  
               ??_SYSTEM_Initialize 0070                  __size_of_can_start 0017  
                     __end_of_putch 028B                        SPI_send@rbuf 0079  
                      SPI_send@sbuf 0021                          __end_of_nm 0802  
                         ?_SPI_send 0078                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 003C  
         __end_of_SYSTEM_Initialize 02EA                             ??_putch 0071  
                        __pbssBANK0 0047                          __pbssBANK1 00A0  
              __end_of_EUSART_Write 02A4                          __pmaintext 0598  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
           can_receive@can_int_flag 0037                             ?_printf 0078  
                        ??_SPI_send 007A                           ?_can_send 0022  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211                   __end_of_can_start 0318  
            __size_of_can_txf_clear 002C                    ??_SPI_Initialize 0070  
                    can_start@F2930 0062                       ??_can_receive 0031  
                   __size_of___wmul 001B                             ___lwdiv 0378  
                           __ptext1 03AC                             __ptext2 03E4  
                           __ptext3 034C                             __ptext4 046C  
                           __ptext5 063C                             __ptext6 0286  
                           __ptext7 029C                             __ptext8 0378  
                           __ptext9 0301                     __size_of_printf 01A4  
                 __end_of_hexpowers 085C               _OSCILLATOR_Initialize 02B7  
                        ??_can_send 0024                             _isdigit 02CD  
          ??_PIN_MANAGER_Initialize 0070                             _set_sid 03AC  
    can_status_check@can_status_buf 0040                   ?_SPI_Exchange8bit 0070  
                    can_txf_clear@n 0025                         set_sid@sidh 0037  
                       set_sid@sidl 0038          __size_of_SYSTEM_Initialize 000F  
                           main@sid 0045                             clrloop0 0297  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070               can_receive@bytes_read 0035  
                 _EUSART_Initialize 02C1                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 0030  
                           printf@f 0078                       _can_txf_clear 034C  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_receive 04C5                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                     can_receive@mask 0036  
         __end_of_EUSART_Initialize 02CD                   can_txf_clear@mask 0026  
                       printf@width 002E            ??_SPI_Exchange8bitBuffer 0073  
                    ?_can_txf_clear 0070                      __end_of___wmul 034C  
             can_status_check@F2954 0065                        _EUSART_Write 029C  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 07E0  
               start_initialization 07E0                        can_receive@n 003B  
                 __size_of_SPI_send 0019     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 0866                       ??_EUSART_Read 0070  
                       putch@txData 0071           __size_of_can_status_check 003A  
             can_start@can_ctrl_buf 0025                            ??___wmul 0074  
                       _can_receive 046C                         __pdataBANK0 0062  
                          ??_printf 0020            can_receive@bytes_written 0034  
                         ___latbits 0002                       __pcstackBANK0 0020  
                 __size_of_can_send 0067       SPI_Exchange8bitBuffer@dataOut 0072  
                       SPI_send@len 0078          __size_of_EUSART_Initialize 000C  
                         _can_start 0301                 __end_of_EUSART_Read 02B7  
   __size_of_SPI_Exchange8bitBuffer 004E                     ??_can_txf_clear 0022  
                  ___lwdiv@dividend 0072              _PIN_MANAGER_Initialize 02EA  
                          ?___lwdiv 0070                            ?_isdigit 0070  
                         can_send@i 002A                           can_send@n 0027  
                          ?_set_sid 0031                           _hexpowers 0854  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                    ___wmul@product 0074                            _LATAbits 010C  
                        ?_can_start 0070                            _LATCbits 010E  
                         clear_ram0 0296                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214                   ___wmul@multiplier 0070  
                          _SPI_send 0318              _SPI_Exchange8bitBuffer 041E  
                        printf@flag 0025                          printf@prec 0028  
                       _EUSART_Read 02AD                         can_send@buf 0022  
                       can_send@cnt 0023                         can_send@len 0028  
                  _can_status_check 03E4             __size_of_SPI_Initialize 0006  
           ??_OSCILLATOR_Initialize 0070                    __size_of___lwdiv 0034  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$622 0070  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 04C5  
                  __size_of_isdigit 000E                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 04C5  
                          __ptext11 0318                            __ptext20 02EA  
                          __ptext12 041E                            __ptext21 02B7  
                          __ptext13 02A4                            __ptext22 02C1  
                          __ptext14 052C                            __ptext23 02AD  
                          __ptext15 02CD                            __ptext16 0331  
                          __ptext17 02DB                            __ptext18 0282  
                          __ptext19 0290                    __size_of_set_sid 0038  
                      _SSP1CON1bits 0215                            _max_char 0869  
                     __size_of_atoi 006C                       __size_of_main 00A4  
                       ??_can_start 0022                can_send@txb_ctrl_buf 002B  
                      ?_can_receive 0070                            atoi@sign 007A  
                         printf@idx 0024                           printf@len 002C  
                         printf@val 0026                        _SSP1STATbits 0214  
             SPI_send@bytes_written 0020                      __pstringtext10 0000  
                          isdigit@c 0071             __size_of_WDT_Initialize 0004  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                    _SPI_Exchange8bit 02A4  
             can_send@bytes_written 0029                            printf@ap 002B  
                          printf@cp 0029          can_txf_clear@bytes_written 0027  
                     __pstringtext1 0854                       __pstringtext2 0869  
                     __pstringtext3 0863                       __pstringtext4 0800  
                     __pstringtext5 0819                       __pstringtext6 082F  
                     __pstringtext7 0843                       __pstringtext8 085C  
                     __pstringtext9 0866                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0301                     set_sid@can_node 0031  
