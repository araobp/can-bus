

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 17 06:25:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	stringtext55,global,class=STRCODE,delta=2
    60                           	psect	stringtext56,global,class=STRCODE,delta=2
    61                           	psect	cinit,global,class=CODE,merge=1,delta=2
    62                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    63                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	clrtext,global,class=CODE,delta=2
    65                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    67                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    68                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    69                           	psect	text1,local,class=CODE,merge=1,delta=2
    70                           	psect	text2,local,class=CODE,merge=1,delta=2
    71                           	psect	text3,local,class=CODE,merge=1,delta=2
    72                           	psect	text4,local,class=CODE,merge=1,delta=2
    73                           	psect	text5,local,class=CODE,merge=1,delta=2
    74                           	psect	text6,local,class=CODE,merge=1,delta=2
    75                           	psect	text7,local,class=CODE,merge=1,delta=2
    76                           	psect	text8,local,class=CODE,merge=1,delta=2
    77                           	psect	text9,local,class=CODE,merge=1,delta=2
    78                           	psect	text10,local,class=CODE,merge=1,delta=2
    79                           	psect	text11,local,class=CODE,merge=1,delta=2
    80                           	psect	text12,local,class=CODE,merge=1,delta=2
    81                           	psect	text13,local,class=CODE,merge=1,delta=2
    82                           	psect	text14,local,class=CODE,merge=1,delta=2
    83                           	psect	text15,local,class=CODE,merge=1,delta=2
    84                           	psect	text16,local,class=CODE,merge=1,delta=2
    85                           	psect	text17,local,class=CODE,merge=1,delta=2
    86                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text20,local,class=CODE,merge=1,delta=2
    89                           	psect	text21,local,class=CODE,merge=1,delta=2
    90                           	psect	text22,local,class=CODE,merge=1,delta=2
    91                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text26,local,class=CODE,merge=1,delta=2
    95                           	psect	text27,local,class=CODE,merge=1,delta=2
    96                           	psect	text28,local,class=CODE,merge=1,delta=2
    97                           	psect	text29,local,class=CODE,merge=1,delta=2
    98                           	psect	text30,local,class=CODE,merge=1,delta=2
    99                           	psect	text31,local,class=CODE,merge=1,delta=2
   100                           	psect	text32,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     
   103                           ; Version 1.45
   104                           ; Generated 16/11/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC16F1825 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  008C                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  020C                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038E                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  039A                     	;# 
   262  039C                     	;# 
   263  039D                     	;# 
   264  039E                     	;# 
   265  039F                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0098                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010E                     	;# 
   329  0111                     	;# 
   330  0112                     	;# 
   331  0113                     	;# 
   332  0114                     	;# 
   333  0115                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  0118                     	;# 
   337  0119                     	;# 
   338  011A                     	;# 
   339  011B                     	;# 
   340  011D                     	;# 
   341  011E                     	;# 
   342  018C                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019D                     	;# 
   359  019E                     	;# 
   360  019F                     	;# 
   361  020C                     	;# 
   362  020E                     	;# 
   363  0211                     	;# 
   364  0211                     	;# 
   365  0212                     	;# 
   366  0212                     	;# 
   367  0213                     	;# 
   368  0213                     	;# 
   369  0214                     	;# 
   370  0214                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0216                     	;# 
   376  0217                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038E                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  039A                     	;# 
   408  039C                     	;# 
   409  039D                     	;# 
   410  039E                     	;# 
   411  039F                     	;# 
   412  0415                     	;# 
   413  0416                     	;# 
   414  0417                     	;# 
   415  041C                     	;# 
   416  041D                     	;# 
   417  041E                     	;# 
   418  0FE4                     	;# 
   419  0FE5                     	;# 
   420  0FE6                     	;# 
   421  0FE7                     	;# 
   422  0FE8                     	;# 
   423  0FE9                     	;# 
   424  0FEA                     	;# 
   425  0FEB                     	;# 
   426  0FED                     	;# 
   427  0FEE                     	;# 
   428  0FEF                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0008                     	;# 
   438  0009                     	;# 
   439  000A                     	;# 
   440  000B                     	;# 
   441  000C                     	;# 
   442  000E                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  008C                     	;# 
   458  008E                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010E                     	;# 
   475  0111                     	;# 
   476  0112                     	;# 
   477  0113                     	;# 
   478  0114                     	;# 
   479  0115                     	;# 
   480  0116                     	;# 
   481  0117                     	;# 
   482  0118                     	;# 
   483  0119                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011D                     	;# 
   487  011E                     	;# 
   488  018C                     	;# 
   489  018E                     	;# 
   490  0191                     	;# 
   491  0191                     	;# 
   492  0192                     	;# 
   493  0193                     	;# 
   494  0193                     	;# 
   495  0193                     	;# 
   496  0194                     	;# 
   497  0195                     	;# 
   498  0196                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019E                     	;# 
   506  019F                     	;# 
   507  020C                     	;# 
   508  020E                     	;# 
   509  0211                     	;# 
   510  0211                     	;# 
   511  0212                     	;# 
   512  0212                     	;# 
   513  0213                     	;# 
   514  0213                     	;# 
   515  0214                     	;# 
   516  0214                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0215                     	;# 
   520  0216                     	;# 
   521  0216                     	;# 
   522  0217                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029D                     	;# 
   539  029E                     	;# 
   540  0311                     	;# 
   541  0311                     	;# 
   542  0312                     	;# 
   543  0313                     	;# 
   544  0318                     	;# 
   545  0318                     	;# 
   546  0319                     	;# 
   547  031A                     	;# 
   548  038C                     	;# 
   549  038E                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000E                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008E                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010E                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0113                     	;# 
   624  0114                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011A                     	;# 
   631  011B                     	;# 
   632  011D                     	;# 
   633  011E                     	;# 
   634  018C                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  029B                     	;# 
   683  029C                     	;# 
   684  029D                     	;# 
   685  029E                     	;# 
   686  0311                     	;# 
   687  0311                     	;# 
   688  0312                     	;# 
   689  0313                     	;# 
   690  0318                     	;# 
   691  0318                     	;# 
   692  0319                     	;# 
   693  031A                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  039A                     	;# 
   700  039C                     	;# 
   701  039D                     	;# 
   702  039E                     	;# 
   703  039F                     	;# 
   704  0415                     	;# 
   705  0416                     	;# 
   706  0417                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  001E                     	;# 
   748  001F                     	;# 
   749  008C                     	;# 
   750  008E                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010E                     	;# 
   767  0111                     	;# 
   768  0112                     	;# 
   769  0113                     	;# 
   770  0114                     	;# 
   771  0115                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  0118                     	;# 
   775  0119                     	;# 
   776  011A                     	;# 
   777  011B                     	;# 
   778  011D                     	;# 
   779  011E                     	;# 
   780  018C                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  0311                     	;# 
   833  0311                     	;# 
   834  0312                     	;# 
   835  0313                     	;# 
   836  0318                     	;# 
   837  0318                     	;# 
   838  0319                     	;# 
   839  031A                     	;# 
   840  038C                     	;# 
   841  038E                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  039A                     	;# 
   846  039C                     	;# 
   847  039D                     	;# 
   848  039E                     	;# 
   849  039F                     	;# 
   850  0415                     	;# 
   851  0416                     	;# 
   852  0417                     	;# 
   853  041C                     	;# 
   854  041D                     	;# 
   855  041E                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000E                     	;# 
   881  0011                     	;# 
   882  0012                     	;# 
   883  0013                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0016                     	;# 
   887  0017                     	;# 
   888  0018                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001E                     	;# 
   894  001F                     	;# 
   895  008C                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0097                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010E                     	;# 
   913  0111                     	;# 
   914  0112                     	;# 
   915  0113                     	;# 
   916  0114                     	;# 
   917  0115                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  0118                     	;# 
   921  0119                     	;# 
   922  011A                     	;# 
   923  011B                     	;# 
   924  011D                     	;# 
   925  011E                     	;# 
   926  018C                     	;# 
   927  018E                     	;# 
   928  0191                     	;# 
   929  0191                     	;# 
   930  0192                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0193                     	;# 
   934  0194                     	;# 
   935  0195                     	;# 
   936  0196                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019D                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  020C                     	;# 
   946  020E                     	;# 
   947  0211                     	;# 
   948  0211                     	;# 
   949  0212                     	;# 
   950  0212                     	;# 
   951  0213                     	;# 
   952  0213                     	;# 
   953  0214                     	;# 
   954  0214                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0216                     	;# 
   959  0216                     	;# 
   960  0217                     	;# 
   961  0217                     	;# 
   962  0291                     	;# 
   963  0291                     	;# 
   964  0292                     	;# 
   965  0293                     	;# 
   966  0294                     	;# 
   967  0295                     	;# 
   968  0295                     	;# 
   969  0296                     	;# 
   970  0298                     	;# 
   971  0298                     	;# 
   972  0299                     	;# 
   973  029A                     	;# 
   974  029B                     	;# 
   975  029C                     	;# 
   976  029D                     	;# 
   977  029E                     	;# 
   978  0311                     	;# 
   979  0311                     	;# 
   980  0312                     	;# 
   981  0313                     	;# 
   982  0318                     	;# 
   983  0318                     	;# 
   984  0319                     	;# 
   985  031A                     	;# 
   986  038C                     	;# 
   987  038E                     	;# 
   988  0391                     	;# 
   989  0392                     	;# 
   990  0393                     	;# 
   991  039A                     	;# 
   992  039C                     	;# 
   993  039D                     	;# 
   994  039E                     	;# 
   995  039F                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0FE4                     	;# 
  1003  0FE5                     	;# 
  1004  0FE6                     	;# 
  1005  0FE7                     	;# 
  1006  0FE8                     	;# 
  1007  0FE9                     	;# 
  1008  0FEA                     	;# 
  1009  0FEB                     	;# 
  1010  0FED                     	;# 
  1011  0FEE                     	;# 
  1012  0FEF                     	;# 
  1013  0000                     	;# 
  1014  0001                     	;# 
  1015  0002                     	;# 
  1016  0003                     	;# 
  1017  0004                     	;# 
  1018  0005                     	;# 
  1019  0006                     	;# 
  1020  0007                     	;# 
  1021  0008                     	;# 
  1022  0009                     	;# 
  1023  000A                     	;# 
  1024  000B                     	;# 
  1025  000C                     	;# 
  1026  000E                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001C                     	;# 
  1039  001E                     	;# 
  1040  001F                     	;# 
  1041  008C                     	;# 
  1042  008E                     	;# 
  1043  0091                     	;# 
  1044  0092                     	;# 
  1045  0093                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0098                     	;# 
  1050  0099                     	;# 
  1051  009A                     	;# 
  1052  009B                     	;# 
  1053  009B                     	;# 
  1054  009C                     	;# 
  1055  009D                     	;# 
  1056  009E                     	;# 
  1057  010C                     	;# 
  1058  010E                     	;# 
  1059  0111                     	;# 
  1060  0112                     	;# 
  1061  0113                     	;# 
  1062  0114                     	;# 
  1063  0115                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  0118                     	;# 
  1067  0119                     	;# 
  1068  011A                     	;# 
  1069  011B                     	;# 
  1070  011D                     	;# 
  1071  011E                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019D                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020E                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0291                     	;# 
  1109  0291                     	;# 
  1110  0292                     	;# 
  1111  0293                     	;# 
  1112  0294                     	;# 
  1113  0295                     	;# 
  1114  0295                     	;# 
  1115  0296                     	;# 
  1116  0298                     	;# 
  1117  0298                     	;# 
  1118  0299                     	;# 
  1119  029A                     	;# 
  1120  029B                     	;# 
  1121  029C                     	;# 
  1122  029D                     	;# 
  1123  029E                     	;# 
  1124  0311                     	;# 
  1125  0311                     	;# 
  1126  0312                     	;# 
  1127  0313                     	;# 
  1128  0318                     	;# 
  1129  0318                     	;# 
  1130  0319                     	;# 
  1131  031A                     	;# 
  1132  038C                     	;# 
  1133  038E                     	;# 
  1134  0391                     	;# 
  1135  0392                     	;# 
  1136  0393                     	;# 
  1137  039A                     	;# 
  1138  039C                     	;# 
  1139  039D                     	;# 
  1140  039E                     	;# 
  1141  039F                     	;# 
  1142  0415                     	;# 
  1143  0416                     	;# 
  1144  0417                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159                           
  1160                           	psect	stringtext1
  1161  13EB                     __pstringtext1:	
  1162  13EB                     _dpowers:	
  1163  13EB  3401               	retlw	1
  1164  13EC  3400               	retlw	0
  1165  13ED  340A               	retlw	10
  1166  13EE  3400               	retlw	0
  1167  13EF  3464               	retlw	100
  1168  13F0  3400               	retlw	0
  1169  13F1  34E8               	retlw	232
  1170  13F2  3403               	retlw	3
  1171  13F3  3410               	retlw	16
  1172  13F4  3427               	retlw	39
  1173  13F5                     __end_of_dpowers:	
  1174                           
  1175                           	psect	stringtext2
  1176  13F5                     __pstringtext2:	
  1177  13F5                     _hexpowers:	
  1178  13F5  3401               	retlw	1
  1179  13F6  3400               	retlw	0
  1180  13F7  3410               	retlw	16
  1181  13F8  3400               	retlw	0
  1182  13F9  3400               	retlw	0
  1183  13FA  3401               	retlw	1
  1184  13FB  3400               	retlw	0
  1185  13FC  3410               	retlw	16
  1186  13FD                     __end_of_hexpowers:	
  1187                           
  1188                           	psect	stringtext3
  1189  140B                     __pstringtext3:	
  1190  140B                     _rxfnsidh:	
  1191  140B  3400               	retlw	0
  1192  140C  3404               	retlw	4
  1193  140D  3408               	retlw	8
  1194  140E  3410               	retlw	16
  1195  140F  3414               	retlw	20
  1196  1410  3418               	retlw	24
  1197  1411                     __end_of_rxfnsidh:	
  1198                           
  1199                           	psect	stringtext4
  1200  1422                     __pstringtext4:	
  1201  1422                     _txbnsidh:	
  1202  1422  3431               	retlw	49
  1203  1423  3441               	retlw	65
  1204  1424  3451               	retlw	81
  1205  1425                     __end_of_txbnsidh:	
  1206                           
  1207                           	psect	stringtext5
  1208  1425                     __pstringtext5:	
  1209  1425                     _abc:	
  1210  1425  3400               	retlw	0
  1211  1426  3402               	retlw	2
  1212  1427  3404               	retlw	4
  1213  1428                     __end_of_abc:	
  1214                           
  1215                           	psect	stringtext6
  1216  142B                     __pstringtext6:	
  1217  142B                     _nm:	
  1218  142B  3400               	retlw	0
  1219  142C  3402               	retlw	2
  1220  142D                     __end_of_nm:	
  1221                           
  1222                           	psect	stringtext7
  1223  142D                     __pstringtext7:	
  1224  142D                     _rxmnsidh:	
  1225  142D  3420               	retlw	32
  1226  142E  3424               	retlw	36
  1227  142F                     __end_of_rxmnsidh:	
  1228                           
  1229                           	psect	stringtext8
  1230  142F                     __pstringtext8:	
  1231  142F                     _max_idx:	
  1232  142F  3407               	retlw	7
  1233  1430                     __end_of_max_idx:	
  1234                           
  1235                           	psect	nvBANK0
  1236  0069                     __pnvBANK0:	
  1237  0069                     _handler:	
  1238  0069                     	ds	2
  1239  0011                     _PIR1bits	set	17
  1240  0095                     _OPTION_REGbits	set	149
  1241  008E                     _TRISC	set	142
  1242  008C                     _TRISA	set	140
  1243  0097                     _WDTCON	set	151
  1244  0098                     _OSCTUNE	set	152
  1245  0099                     _OSCCON	set	153
  1246  010C                     _LATAbits	set	268
  1247  010E                     _LATCbits	set	270
  1248  011D                     _APFCON0	set	285
  1249  011E                     _APFCON1	set	286
  1250  010E                     _LATC	set	270
  1251  010C                     _LATA	set	268
  1252  0116                     _BORCON	set	278
  1253  018C                     _ANSELA	set	396
  1254  018E                     _ANSELC	set	398
  1255  019A                     _TXREG	set	410
  1256  0199                     _RCREG	set	409
  1257  019D                     _RCSTAbits	set	413
  1258  019C                     _SPBRGH	set	412
  1259  019B                     _SPBRGL	set	411
  1260  019E                     _TXSTA	set	414
  1261  019D                     _RCSTA	set	413
  1262  019F                     _BAUDCON	set	415
  1263  0214                     _SSP1STATbits	set	532
  1264  0211                     _SSP1BUF	set	529
  1265  0215                     _SSP1CON1bits	set	533
  1266  0212                     _SSP1ADD	set	530
  1267  0215                     _SSP1CON1	set	533
  1268  0214                     _SSP1STAT	set	532
  1269  020E                     _WPUC	set	526
  1270  020C                     _WPUA	set	524
  1271                           
  1272                           	psect	stringtext9
  1273  1000                     __pstringtext9:	
  1274  1000                     STR_10:	
  1275  1000  345B               	retlw	91	;'['
  1276  1001  3453               	retlw	83	;'S'
  1277  1002  3465               	retlw	101	;'e'
  1278  1003  3474               	retlw	116	;'t'
  1279  1004  3420               	retlw	32	;' '
  1280  1005  346F               	retlw	111	;'o'
  1281  1006  3475               	retlw	117	;'u'
  1282  1007  3474               	retlw	116	;'t'
  1283  1008  3470               	retlw	112	;'p'
  1284  1009  3475               	retlw	117	;'u'
  1285  100A  3474               	retlw	116	;'t'
  1286  100B  3420               	retlw	32	;' '
  1287  100C  346D               	retlw	109	;'m'
  1288  100D  346F               	retlw	111	;'o'
  1289  100E  3464               	retlw	100	;'d'
  1290  100F  3465               	retlw	101	;'e'
  1291  1010  345D               	retlw	93	;']'
  1292  1011  3420               	retlw	32	;' '
  1293  1012  347B               	retlw	123	;'{'
  1294  1013  3464               	retlw	100	;'d'
  1295  1014  3465               	retlw	101	;'e'
  1296  1015  3462               	retlw	98	;'b'
  1297  1016  3475               	retlw	117	;'u'
  1298  1017  3467               	retlw	103	;'g'
  1299  1018  343A               	retlw	58	;':'
  1300  1019  3420               	retlw	32	;' '
  1301  101A  3440               	retlw	64	;'@'
  1302  101B  3476               	retlw	118	;'v'
  1303  101C  3464               	retlw	100	;'d'
  1304  101D  342C               	retlw	44	;','
  1305  101E  3420               	retlw	32	;' '
  1306  101F  3476               	retlw	118	;'v'
  1307  1020  3465               	retlw	101	;'e'
  1308  1021  3472               	retlw	114	;'r'
  1309  1022  3462               	retlw	98	;'b'
  1310  1023  346F               	retlw	111	;'o'
  1311  1024  3473               	retlw	115	;'s'
  1312  1025  3465               	retlw	101	;'e'
  1313  1026  343A               	retlw	58	;':'
  1314  1027  3420               	retlw	32	;' '
  1315  1028  3440               	retlw	64	;'@'
  1316  1029  3476               	retlw	118	;'v'
  1317  102A  3476               	retlw	118	;'v'
  1318  102B  342C               	retlw	44	;','
  1319  102C  3420               	retlw	32	;' '
  1320  102D  346E               	retlw	110	;'n'
  1321  102E  346F               	retlw	111	;'o'
  1322  102F  3472               	retlw	114	;'r'
  1323  1030  346D               	retlw	109	;'m'
  1324  1031  3461               	retlw	97	;'a'
  1325  1032  346C               	retlw	108	;'l'
  1326  1033  343A               	retlw	58	;':'
  1327  1034  3420               	retlw	32	;' '
  1328  1035  3440               	retlw	64	;'@'
  1329  1036  3476               	retlw	118	;'v'
  1330  1037  346E               	retlw	110	;'n'
  1331  1038  347D               	retlw	125	;'}'
  1332  1039  340A               	retlw	10
  1333  103A  3400               	retlw	0
  1334                           
  1335                           	psect	stringtext10
  1336  103B                     __pstringtext10:	
  1337  103B                     STR_12:	
  1338  103B  3420               	retlw	32	;' '
  1339  103C  3420               	retlw	32	;' '
  1340  103D  3420               	retlw	32	;' '
  1341  103E  3420               	retlw	32	;' '
  1342  103F  3420               	retlw	32	;' '
  1343  1040  3477               	retlw	119	;'w'
  1344  1041  3469               	retlw	105	;'i'
  1345  1042  3474               	retlw	116	;'t'
  1346  1043  3468               	retlw	104	;'h'
  1347  1044  3420               	retlw	32	;' '
  1348  1045  3453               	retlw	83	;'S'
  1349  1046  3449               	retlw	73	;'I'
  1350  1047  3444               	retlw	68	;'D'
  1351  1048  343A               	retlw	58	;':'
  1352  1049  3420               	retlw	32	;' '
  1353  104A  3440               	retlw	64	;'@'
  1354  104B  346F               	retlw	111	;'o'
  1355  104C  346C               	retlw	108	;'l'
  1356  104D  3473               	retlw	115	;'s'
  1357  104E  3420               	retlw	32	;' '
  1358  104F  346F               	retlw	111	;'o'
  1359  1050  3472               	retlw	114	;'r'
  1360  1051  3420               	retlw	32	;' '
  1361  1052  3440               	retlw	64	;'@'
  1362  1053  346F               	retlw	111	;'o'
  1363  1054  346E               	retlw	110	;'n'
  1364  1055  3473               	retlw	115	;'s'
  1365  1056  342C               	retlw	44	;','
  1366  1057  3420               	retlw	32	;' '
  1367  1058  3469               	retlw	105	;'i'
  1368  1059  346E               	retlw	110	;'n'
  1369  105A  3420               	retlw	32	;' '
  1370  105B  3468               	retlw	104	;'h'
  1371  105C  3465               	retlw	101	;'e'
  1372  105D  3478               	retlw	120	;'x'
  1373  105E  3420               	retlw	32	;' '
  1374  105F  3466               	retlw	102	;'f'
  1375  1060  346F               	retlw	111	;'o'
  1376  1061  3472               	retlw	114	;'r'
  1377  1062  346D               	retlw	109	;'m'
  1378  1063  3461               	retlw	97	;'a'
  1379  1064  3474               	retlw	116	;'t'
  1380  1065  343A               	retlw	58	;':'
  1381  1066  3420               	retlw	32	;' '
  1382  1067  3440               	retlw	64	;'@'
  1383  1068  346F               	retlw	111	;'o'
  1384  1069  346C               	retlw	108	;'l'
  1385  106A  3468               	retlw	104	;'h'
  1386  106B  3420               	retlw	32	;' '
  1387  106C  346F               	retlw	111	;'o'
  1388  106D  3472               	retlw	114	;'r'
  1389  106E  3420               	retlw	32	;' '
  1390  106F  3440               	retlw	64	;'@'
  1391  1070  346F               	retlw	111	;'o'
  1392  1071  346E               	retlw	110	;'n'
  1393  1072  3468               	retlw	104	;'h'
  1394  1073  340A               	retlw	10
  1395  1074  3400               	retlw	0
  1396                           
  1397                           	psect	stringtext11
  1398  1075                     __pstringtext11:	
  1399  1075                     STR_19:	
  1400  1075  345B               	retlw	91	;'['
  1401  1076  3453               	retlw	83	;'S'
  1402  1077  3465               	retlw	101	;'e'
  1403  1078  346E               	retlw	110	;'n'
  1404  1079  3464               	retlw	100	;'d'
  1405  107A  3420               	retlw	32	;' '
  1406  107B  346D               	retlw	109	;'m'
  1407  107C  3465               	retlw	101	;'e'
  1408  107D  3473               	retlw	115	;'s'
  1409  107E  3473               	retlw	115	;'s'
  1410  107F  3461               	retlw	97	;'a'
  1411  1080  3467               	retlw	103	;'g'
  1412  1081  3465               	retlw	101	;'e'
  1413  1082  3420               	retlw	32	;' '
  1414  1083  3462               	retlw	98	;'b'
  1415  1084  3465               	retlw	101	;'e'
  1416  1085  3467               	retlw	103	;'g'
  1417  1086  3469               	retlw	105	;'i'
  1418  1087  346E               	retlw	110	;'n'
  1419  1088  346E               	retlw	110	;'n'
  1420  1089  3469               	retlw	105	;'i'
  1421  108A  346E               	retlw	110	;'n'
  1422  108B  3467               	retlw	103	;'g'
  1423  108C  3420               	retlw	32	;' '
  1424  108D  3477               	retlw	119	;'w'
  1425  108E  3469               	retlw	105	;'i'
  1426  108F  3474               	retlw	116	;'t'
  1427  1090  3468               	retlw	104	;'h'
  1428  1091  3420               	retlw	32	;' '
  1429  1092  3427               	retlw	39	;'''
  1430  1093  3440               	retlw	64	;'@'
  1431  1094  3427               	retlw	39	;'''
  1432  1095  3420               	retlw	32	;' '
  1433  1096  3463               	retlw	99	;'c'
  1434  1097  3468               	retlw	104	;'h'
  1435  1098  3461               	retlw	97	;'a'
  1436  1099  3472               	retlw	114	;'r'
  1437  109A  3461               	retlw	97	;'a'
  1438  109B  3463               	retlw	99	;'c'
  1439  109C  3474               	retlw	116	;'t'
  1440  109D  3465               	retlw	101	;'e'
  1441  109E  3472               	retlw	114	;'r'
  1442  109F  345D               	retlw	93	;']'
  1443  10A0  3420               	retlw	32	;' '
  1444  10A1  3440               	retlw	64	;'@'
  1445  10A2  343C               	retlw	60	;'<'
  1446  10A3  3440               	retlw	64	;'@'
  1447  10A4  346D               	retlw	109	;'m'
  1448  10A5  3465               	retlw	101	;'e'
  1449  10A6  3473               	retlw	115	;'s'
  1450  10A7  3473               	retlw	115	;'s'
  1451  10A8  3461               	retlw	97	;'a'
  1452  10A9  3467               	retlw	103	;'g'
  1453  10AA  3465               	retlw	101	;'e'
  1454  10AB  343E               	retlw	62	;'>'
  1455  10AC  340A               	retlw	10
  1456  10AD  3400               	retlw	0
  1457                           
  1458                           	psect	stringtext12
  1459  10AE                     __pstringtext12:	
  1460  10AE                     STR_11:	
  1461  10AE  345B               	retlw	91	;'['
  1462  10AF  3445               	retlw	69	;'E'
  1463  10B0  346E               	retlw	110	;'n'
  1464  10B1  3461               	retlw	97	;'a'
  1465  10B2  3462               	retlw	98	;'b'
  1466  10B3  346C               	retlw	108	;'l'
  1467  10B4  3465               	retlw	101	;'e'
  1468  10B5  3420               	retlw	32	;' '
  1469  10B6  346F               	retlw	111	;'o'
  1470  10B7  3470               	retlw	112	;'p'
  1471  10B8  3465               	retlw	101	;'e'
  1472  10B9  3472               	retlw	114	;'r'
  1473  10BA  3461               	retlw	97	;'a'
  1474  10BB  3474               	retlw	116	;'t'
  1475  10BC  3469               	retlw	105	;'i'
  1476  10BD  346F               	retlw	111	;'o'
  1477  10BE  346E               	retlw	110	;'n'
  1478  10BF  3420               	retlw	32	;' '
  1479  10C0  346D               	retlw	109	;'m'
  1480  10C1  346F               	retlw	111	;'o'
  1481  10C2  3464               	retlw	100	;'d'
  1482  10C3  3465               	retlw	101	;'e'
  1483  10C4  345D               	retlw	93	;']'
  1484  10C5  3420               	retlw	32	;' '
  1485  10C6  347B               	retlw	123	;'{'
  1486  10C7  346C               	retlw	108	;'l'
  1487  10C8  346F               	retlw	111	;'o'
  1488  10C9  346F               	retlw	111	;'o'
  1489  10CA  3470               	retlw	112	;'p'
  1490  10CB  3462               	retlw	98	;'b'
  1491  10CC  3461               	retlw	97	;'a'
  1492  10CD  3463               	retlw	99	;'c'
  1493  10CE  346B               	retlw	107	;'k'
  1494  10CF  343A               	retlw	58	;':'
  1495  10D0  3420               	retlw	32	;' '
  1496  10D1  3440               	retlw	64	;'@'
  1497  10D2  346F               	retlw	111	;'o'
  1498  10D3  346C               	retlw	108	;'l'
  1499  10D4  342C               	retlw	44	;','
  1500  10D5  3420               	retlw	32	;' '
  1501  10D6  346E               	retlw	110	;'n'
  1502  10D7  346F               	retlw	111	;'o'
  1503  10D8  3472               	retlw	114	;'r'
  1504  10D9  346D               	retlw	109	;'m'
  1505  10DA  3461               	retlw	97	;'a'
  1506  10DB  346C               	retlw	108	;'l'
  1507  10DC  343A               	retlw	58	;':'
  1508  10DD  3420               	retlw	32	;' '
  1509  10DE  3440               	retlw	64	;'@'
  1510  10DF  346F               	retlw	111	;'o'
  1511  10E0  346E               	retlw	110	;'n'
  1512  10E1  347D               	retlw	125	;'}'
  1513  10E2  340A               	retlw	10
  1514  10E3  3400               	retlw	0
  1515                           
  1516                           	psect	stringtext13
  1517  10E4                     __pstringtext13:	
  1518  10E4                     STR_9:	
  1519  10E4  345B               	retlw	91	;'['
  1520  10E5  3453               	retlw	83	;'S'
  1521  10E6  3465               	retlw	101	;'e'
  1522  10E7  3474               	retlw	116	;'t'
  1523  10E8  3420               	retlw	32	;' '
  1524  10E9  3473               	retlw	115	;'s'
  1525  10EA  3474               	retlw	116	;'t'
  1526  10EB  3461               	retlw	97	;'a'
  1527  10EC  346E               	retlw	110	;'n'
  1528  10ED  3464               	retlw	100	;'d'
  1529  10EE  3461               	retlw	97	;'a'
  1530  10EF  3472               	retlw	114	;'r'
  1531  10F0  3464               	retlw	100	;'d'
  1532  10F1  3420               	retlw	32	;' '
  1533  10F2  3469               	retlw	105	;'i'
  1534  10F3  3464               	retlw	100	;'d'
  1535  10F4  3465               	retlw	101	;'e'
  1536  10F5  346E               	retlw	110	;'n'
  1537  10F6  3474               	retlw	116	;'t'
  1538  10F7  3469               	retlw	105	;'i'
  1539  10F8  3466               	retlw	102	;'f'
  1540  10F9  3469               	retlw	105	;'i'
  1541  10FA  3465               	retlw	101	;'e'
  1542  10FB  3472               	retlw	114	;'r'
  1543  10FC  345D               	retlw	93	;']'
  1544  10FD  3420               	retlw	32	;' '
  1545  10FE  3440               	retlw	64	;'@'
  1546  10FF  3469               	retlw	105	;'i'
  1547  1100  343C               	retlw	60	;'<'
  1548  1101  3473               	retlw	115	;'s'
  1549  1102  3474               	retlw	116	;'t'
  1550  1103  3461               	retlw	97	;'a'
  1551  1104  346E               	retlw	110	;'n'
  1552  1105  3464               	retlw	100	;'d'
  1553  1106  3461               	retlw	97	;'a'
  1554  1107  3472               	retlw	114	;'r'
  1555  1108  3464               	retlw	100	;'d'
  1556  1109  3420               	retlw	32	;' '
  1557  110A  3469               	retlw	105	;'i'
  1558  110B  3464               	retlw	100	;'d'
  1559  110C  3465               	retlw	101	;'e'
  1560  110D  346E               	retlw	110	;'n'
  1561  110E  3474               	retlw	116	;'t'
  1562  110F  3469               	retlw	105	;'i'
  1563  1110  3466               	retlw	102	;'f'
  1564  1111  3469               	retlw	105	;'i'
  1565  1112  3465               	retlw	101	;'e'
  1566  1113  3472               	retlw	114	;'r'
  1567  1114  343E               	retlw	62	;'>'
  1568  1115  340A               	retlw	10
  1569  1116  3400               	retlw	0
  1570                           
  1571                           	psect	stringtext14
  1572  1117                     __pstringtext14:	
  1573  1117                     STR_20:	
  1574  1117  345B               	retlw	91	;'['
  1575  1118  3452               	retlw	82	;'R'
  1576  1119  3465               	retlw	101	;'e'
  1577  111A  3463               	retlw	99	;'c'
  1578  111B  3465               	retlw	101	;'e'
  1579  111C  3469               	retlw	105	;'i'
  1580  111D  3476               	retlw	118	;'v'
  1581  111E  3465               	retlw	101	;'e'
  1582  111F  3420               	retlw	32	;' '
  1583  1120  346D               	retlw	109	;'m'
  1584  1121  3465               	retlw	101	;'e'
  1585  1122  3473               	retlw	115	;'s'
  1586  1123  3473               	retlw	115	;'s'
  1587  1124  3461               	retlw	97	;'a'
  1588  1125  3467               	retlw	103	;'g'
  1589  1126  3465               	retlw	101	;'e'
  1590  1127  345D               	retlw	93	;']'
  1591  1128  3420               	retlw	32	;' '
  1592  1129  343C               	retlw	60	;'<'
  1593  112A  346D               	retlw	109	;'m'
  1594  112B  3465               	retlw	101	;'e'
  1595  112C  3473               	retlw	115	;'s'
  1596  112D  3473               	retlw	115	;'s'
  1597  112E  3461               	retlw	97	;'a'
  1598  112F  3467               	retlw	103	;'g'
  1599  1130  3465               	retlw	101	;'e'
  1600  1131  343E               	retlw	62	;'>'
  1601  1132  3420               	retlw	32	;' '
  1602  1133  3477               	retlw	119	;'w'
  1603  1134  3469               	retlw	105	;'i'
  1604  1135  346C               	retlw	108	;'l'
  1605  1136  346C               	retlw	108	;'l'
  1606  1137  3420               	retlw	32	;' '
  1607  1138  3462               	retlw	98	;'b'
  1608  1139  3465               	retlw	101	;'e'
  1609  113A  3420               	retlw	32	;' '
  1610  113B  346F               	retlw	111	;'o'
  1611  113C  3475               	retlw	117	;'u'
  1612  113D  3474               	retlw	116	;'t'
  1613  113E  3470               	retlw	112	;'p'
  1614  113F  3475               	retlw	117	;'u'
  1615  1140  3474               	retlw	116	;'t'
  1616  1141  340A               	retlw	10
  1617  1142  3400               	retlw	0
  1618                           
  1619                           	psect	stringtext15
  1620  1143                     __pstringtext15:	
  1621  1143                     STR_14:	
  1622  1143  345B               	retlw	91	;'['
  1623  1144  3453               	retlw	83	;'S'
  1624  1145  3465               	retlw	101	;'e'
  1625  1146  3474               	retlw	116	;'t'
  1626  1147  3420               	retlw	32	;' '
  1627  1148  3466               	retlw	102	;'f'
  1628  1149  3469               	retlw	105	;'i'
  1629  114A  346C               	retlw	108	;'l'
  1630  114B  3474               	retlw	116	;'t'
  1631  114C  3465               	retlw	101	;'e'
  1632  114D  3472               	retlw	114	;'r'
  1633  114E  345D               	retlw	93	;']'
  1634  114F  3420               	retlw	32	;' '
  1635  1150  3440               	retlw	64	;'@'
  1636  1151  3466               	retlw	102	;'f'
  1637  1152  343C               	retlw	60	;'<'
  1638  1153  346E               	retlw	110	;'n'
  1639  1154  343E               	retlw	62	;'>'
  1640  1155  343C               	retlw	60	;'<'
  1641  1156  3466               	retlw	102	;'f'
  1642  1157  3469               	retlw	105	;'i'
  1643  1158  346C               	retlw	108	;'l'
  1644  1159  3474               	retlw	116	;'t'
  1645  115A  3465               	retlw	101	;'e'
  1646  115B  3472               	retlw	114	;'r'
  1647  115C  3428               	retlw	40	;'('
  1648  115D  3453               	retlw	83	;'S'
  1649  115E  3449               	retlw	73	;'I'
  1650  115F  3444               	retlw	68	;'D'
  1651  1160  3431               	retlw	49	;'1'
  1652  1161  3430               	retlw	48	;'0'
  1653  1162  3420               	retlw	32	;' '
  1654  1163  347E               	retlw	126	;'~'
  1655  1164  3420               	retlw	32	;' '
  1656  1165  3453               	retlw	83	;'S'
  1657  1166  3449               	retlw	73	;'I'
  1658  1167  3444               	retlw	68	;'D'
  1659  1168  3430               	retlw	48	;'0'
  1660  1169  3429               	retlw	41	;')'
  1661  116A  343E               	retlw	62	;'>'
  1662  116B  340A               	retlw	10
  1663  116C  3400               	retlw	0
  1664                           
  1665                           	psect	stringtext16
  1666  116D                     __pstringtext16:	
  1667  116D                     STR_13:	
  1668  116D  345B               	retlw	91	;'['
  1669  116E  3453               	retlw	83	;'S'
  1670  116F  3465               	retlw	101	;'e'
  1671  1170  3474               	retlw	116	;'t'
  1672  1171  3420               	retlw	32	;' '
  1673  1172  346D               	retlw	109	;'m'
  1674  1173  3461               	retlw	97	;'a'
  1675  1174  3473               	retlw	115	;'s'
  1676  1175  346B               	retlw	107	;'k'
  1677  1176  345D               	retlw	93	;']'
  1678  1177  3420               	retlw	32	;' '
  1679  1178  3440               	retlw	64	;'@'
  1680  1179  346D               	retlw	109	;'m'
  1681  117A  343C               	retlw	60	;'<'
  1682  117B  346E               	retlw	110	;'n'
  1683  117C  343E               	retlw	62	;'>'
  1684  117D  343C               	retlw	60	;'<'
  1685  117E  346D               	retlw	109	;'m'
  1686  117F  3461               	retlw	97	;'a'
  1687  1180  3473               	retlw	115	;'s'
  1688  1181  346B               	retlw	107	;'k'
  1689  1182  3428               	retlw	40	;'('
  1690  1183  3453               	retlw	83	;'S'
  1691  1184  3449               	retlw	73	;'I'
  1692  1185  3444               	retlw	68	;'D'
  1693  1186  3431               	retlw	49	;'1'
  1694  1187  3430               	retlw	48	;'0'
  1695  1188  3420               	retlw	32	;' '
  1696  1189  347E               	retlw	126	;'~'
  1697  118A  3420               	retlw	32	;' '
  1698  118B  3453               	retlw	83	;'S'
  1699  118C  3449               	retlw	73	;'I'
  1700  118D  3444               	retlw	68	;'D'
  1701  118E  3430               	retlw	48	;'0'
  1702  118F  3429               	retlw	41	;')'
  1703  1190  343E               	retlw	62	;'>'
  1704  1191  340A               	retlw	10
  1705  1192  3400               	retlw	0
  1706                           
  1707                           	psect	stringtext17
  1708  1193                     __pstringtext17:	
  1709  1193                     STR_16:	
  1710  1193  345B               	retlw	91	;'['
  1711  1194  3441               	retlw	65	;'A'
  1712  1195  3462               	retlw	98	;'b'
  1713  1196  346F               	retlw	111	;'o'
  1714  1197  3472               	retlw	114	;'r'
  1715  1198  3474               	retlw	116	;'t'
  1716  1199  3420               	retlw	32	;' '
  1717  119A  3461               	retlw	97	;'a'
  1718  119B  346C               	retlw	108	;'l'
  1719  119C  346C               	retlw	108	;'l'
  1720  119D  3420               	retlw	32	;' '
  1721  119E  3470               	retlw	112	;'p'
  1722  119F  3465               	retlw	101	;'e'
  1723  11A0  346E               	retlw	110	;'n'
  1724  11A1  3464               	retlw	100	;'d'
  1725  11A2  3469               	retlw	105	;'i'
  1726  11A3  346E               	retlw	110	;'n'
  1727  11A4  3467               	retlw	103	;'g'
  1728  11A5  3420               	retlw	32	;' '
  1729  11A6  3474               	retlw	116	;'t'
  1730  11A7  3472               	retlw	114	;'r'
  1731  11A8  3461               	retlw	97	;'a'
  1732  11A9  346E               	retlw	110	;'n'
  1733  11AA  3473               	retlw	115	;'s'
  1734  11AB  346D               	retlw	109	;'m'
  1735  11AC  3469               	retlw	105	;'i'
  1736  11AD  3473               	retlw	115	;'s'
  1737  11AE  3473               	retlw	115	;'s'
  1738  11AF  3469               	retlw	105	;'i'
  1739  11B0  346F               	retlw	111	;'o'
  1740  11B1  346E               	retlw	110	;'n'
  1741  11B2  3473               	retlw	115	;'s'
  1742  11B3  345D               	retlw	93	;']'
  1743  11B4  3420               	retlw	32	;' '
  1744  11B5  3440               	retlw	64	;'@'
  1745  11B6  3461               	retlw	97	;'a'
  1746  11B7  340A               	retlw	10
  1747  11B8  3400               	retlw	0
  1748                           
  1749                           	psect	stringtext18
  1750  11B9                     __pstringtext18:	
  1751  11B9                     STR_7:	
  1752  11B9  342F               	retlw	47	;'/'
  1753  11BA  342F               	retlw	47	;'/'
  1754  11BB  342F               	retlw	47	;'/'
  1755  11BC  3420               	retlw	32	;' '
  1756  11BD  3455               	retlw	85	;'U'
  1757  11BE  3441               	retlw	65	;'A'
  1758  11BF  3452               	retlw	82	;'R'
  1759  11C0  3454               	retlw	84	;'T'
  1760  11C1  3432               	retlw	50	;'2'
  1761  11C2  3443               	retlw	67	;'C'
  1762  11C3  3441               	retlw	65	;'A'
  1763  11C4  344E               	retlw	78	;'N'
  1764  11C5  3420               	retlw	32	;' '
  1765  11C6  3448               	retlw	72	;'H'
  1766  11C7  3445               	retlw	69	;'E'
  1767  11C8  344C               	retlw	76	;'L'
  1768  11C9  3450               	retlw	80	;'P'
  1769  11CA  3420               	retlw	32	;' '
  1770  11CB  3428               	retlw	40	;'('
  1771  11CC  3476               	retlw	118	;'v'
  1772  11CD  3465               	retlw	101	;'e'
  1773  11CE  3472               	retlw	114	;'r'
  1774  11CF  3473               	retlw	115	;'s'
  1775  11D0  3469               	retlw	105	;'i'
  1776  11D1  346F               	retlw	111	;'o'
  1777  11D2  346E               	retlw	110	;'n'
  1778  11D3  3420               	retlw	32	;' '
  1779  11D4  3425               	retlw	37	;'%'
  1780  11D5  3473               	retlw	115	;'s'
  1781  11D6  3429               	retlw	41	;')'
  1782  11D7  3420               	retlw	32	;' '
  1783  11D8  342F               	retlw	47	;'/'
  1784  11D9  342F               	retlw	47	;'/'
  1785  11DA  342F               	retlw	47	;'/'
  1786  11DB  340A               	retlw	10
  1787  11DC  3400               	retlw	0
  1788                           
  1789                           	psect	stringtext19
  1790  11DD                     __pstringtext19:	
  1791  11DD                     STR_18:	
  1792  11DD  345B               	retlw	91	;'['
  1793  11DE  3453               	retlw	83	;'S'
  1794  11DF  3465               	retlw	101	;'e'
  1795  11E0  346E               	retlw	110	;'n'
  1796  11E1  3464               	retlw	100	;'d'
  1797  11E2  3420               	retlw	32	;' '
  1798  11E3  346D               	retlw	109	;'m'
  1799  11E4  3465               	retlw	101	;'e'
  1800  11E5  3473               	retlw	115	;'s'
  1801  11E6  3473               	retlw	115	;'s'
  1802  11E7  3461               	retlw	97	;'a'
  1803  11E8  3467               	retlw	103	;'g'
  1804  11E9  3465               	retlw	101	;'e'
  1805  11EA  345D               	retlw	93	;']'
  1806  11EB  3420               	retlw	32	;' '
  1807  11EC  343C               	retlw	60	;'<'
  1808  11ED  346D               	retlw	109	;'m'
  1809  11EE  3465               	retlw	101	;'e'
  1810  11EF  3473               	retlw	115	;'s'
  1811  11F0  3473               	retlw	115	;'s'
  1812  11F1  3461               	retlw	97	;'a'
  1813  11F2  3467               	retlw	103	;'g'
  1814  11F3  3465               	retlw	101	;'e'
  1815  11F4  343E               	retlw	62	;'>'
  1816  11F5  340A               	retlw	10
  1817  11F6  3400               	retlw	0
  1818                           
  1819                           	psect	stringtext20
  1820  11F7                     __pstringtext20:	
  1821  11F7                     STR_15:	
  1822  11F7  345B               	retlw	91	;'['
  1823  11F8  3453               	retlw	83	;'S'
  1824  11F9  3465               	retlw	101	;'e'
  1825  11FA  3474               	retlw	116	;'t'
  1826  11FB  3420               	retlw	32	;' '
  1827  11FC  3462               	retlw	98	;'b'
  1828  11FD  3461               	retlw	97	;'a'
  1829  11FE  3475               	retlw	117	;'u'
  1830  11FF  3464               	retlw	100	;'d'
  1831  1200  3420               	retlw	32	;' '
  1832  1201  3472               	retlw	114	;'r'
  1833  1202  3461               	retlw	97	;'a'
  1834  1203  3474               	retlw	116	;'t'
  1835  1204  3465               	retlw	101	;'e'
  1836  1205  345D               	retlw	93	;']'
  1837  1206  3420               	retlw	32	;' '
  1838  1207  3440               	retlw	64	;'@'
  1839  1208  3462               	retlw	98	;'b'
  1840  1209  343C               	retlw	60	;'<'
  1841  120A  3462               	retlw	98	;'b'
  1842  120B  3470               	retlw	112	;'p'
  1843  120C  3472               	retlw	114	;'r'
  1844  120D  343E               	retlw	62	;'>'
  1845  120E  340A               	retlw	10
  1846  120F  3400               	retlw	0
  1847                           
  1848                           	psect	stringtext21
  1849  1210                     __pstringtext21:	
  1850  1210                     STR_24:	
  1851  1210  3466               	retlw	102	;'f'
  1852  1211  3469               	retlw	105	;'i'
  1853  1212  346C               	retlw	108	;'l'
  1854  1213  3474               	retlw	116	;'t'
  1855  1214  3465               	retlw	101	;'e'
  1856  1215  3472               	retlw	114	;'r'
  1857  1216  3428               	retlw	40	;'('
  1858  1217  3425               	retlw	37	;'%'
  1859  1218  3464               	retlw	100	;'d'
  1860  1219  3429               	retlw	41	;')'
  1861  121A  343A               	retlw	58	;':'
  1862  121B  3420               	retlw	32	;' '
  1863  121C  3425               	retlw	37	;'%'
  1864  121D  3430               	retlw	48	;'0'
  1865  121E  3432               	retlw	50	;'2'
  1866  121F  3478               	retlw	120	;'x'
  1867  1220  3420               	retlw	32	;' '
  1868  1221  3425               	retlw	37	;'%'
  1869  1222  3430               	retlw	48	;'0'
  1870  1223  3432               	retlw	50	;'2'
  1871  1224  3478               	retlw	120	;'x'
  1872  1225  340A               	retlw	10
  1873  1226  3400               	retlw	0
  1874                           
  1875                           	psect	stringtext22
  1876  1227                     __pstringtext22:	
  1877  1227                     STR_21:	
  1878  1227  345B               	retlw	91	;'['
  1879  1228  3453               	retlw	83	;'S'
  1880  1229  3468               	retlw	104	;'h'
  1881  122A  346F               	retlw	111	;'o'
  1882  122B  3477               	retlw	119	;'w'
  1883  122C  3420               	retlw	32	;' '
  1884  122D  3474               	retlw	116	;'t'
  1885  122E  3468               	retlw	104	;'h'
  1886  122F  3469               	retlw	105	;'i'
  1887  1230  3473               	retlw	115	;'s'
  1888  1231  3420               	retlw	32	;' '
  1889  1232  3468               	retlw	104	;'h'
  1890  1233  3465               	retlw	101	;'e'
  1891  1234  346C               	retlw	108	;'l'
  1892  1235  3470               	retlw	112	;'p'
  1893  1236  345D               	retlw	93	;']'
  1894  1237  343A               	retlw	58	;':'
  1895  1238  3420               	retlw	32	;' '
  1896  1239  3440               	retlw	64	;'@'
  1897  123A  3468               	retlw	104	;'h'
  1898  123B  340A               	retlw	10
  1899  123C  3400               	retlw	0
  1900                           
  1901                           	psect	stringtext23
  1902  123D                     __pstringtext23:	
  1903  123D                     STR_23:	
  1904  123D  346D               	retlw	109	;'m'
  1905  123E  3461               	retlw	97	;'a'
  1906  123F  3473               	retlw	115	;'s'
  1907  1240  346B               	retlw	107	;'k'
  1908  1241  3428               	retlw	40	;'('
  1909  1242  3425               	retlw	37	;'%'
  1910  1243  3464               	retlw	100	;'d'
  1911  1244  3429               	retlw	41	;')'
  1912  1245  343A               	retlw	58	;':'
  1913  1246  3420               	retlw	32	;' '
  1914  1247  3425               	retlw	37	;'%'
  1915  1248  3430               	retlw	48	;'0'
  1916  1249  3432               	retlw	50	;'2'
  1917  124A  3478               	retlw	120	;'x'
  1918  124B  3420               	retlw	32	;' '
  1919  124C  3425               	retlw	37	;'%'
  1920  124D  3430               	retlw	48	;'0'
  1921  124E  3432               	retlw	50	;'2'
  1922  124F  3478               	retlw	120	;'x'
  1923  1250  340A               	retlw	10
  1924  1251  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext24
  1927  1252                     __pstringtext24:	
  1928  1252                     STR_17:	
  1929  1252  345B               	retlw	91	;'['
  1930  1253  3444               	retlw	68	;'D'
  1931  1254  3475               	retlw	117	;'u'
  1932  1255  346D               	retlw	109	;'m'
  1933  1256  3470               	retlw	112	;'p'
  1934  1257  3420               	retlw	32	;' '
  1935  1258  3472               	retlw	114	;'r'
  1936  1259  3465               	retlw	101	;'e'
  1937  125A  3467               	retlw	103	;'g'
  1938  125B  3469               	retlw	105	;'i'
  1939  125C  3473               	retlw	115	;'s'
  1940  125D  3474               	retlw	116	;'t'
  1941  125E  3465               	retlw	101	;'e'
  1942  125F  3472               	retlw	114	;'r'
  1943  1260  3473               	retlw	115	;'s'
  1944  1261  345D               	retlw	93	;']'
  1945  1262  3420               	retlw	32	;' '
  1946  1263  3440               	retlw	64	;'@'
  1947  1264  3464               	retlw	100	;'d'
  1948  1265  340A               	retlw	10
  1949  1266  3400               	retlw	0
  1950                           
  1951                           	psect	stringtext25
  1952  1267                     __pstringtext25:	
  1953  1267                     STR_32:	
  1954  1267  3443               	retlw	67	;'C'
  1955  1268  346F               	retlw	111	;'o'
  1956  1269  3470               	retlw	112	;'p'
  1957  126A  3479               	retlw	121	;'y'
  1958  126B  3469               	retlw	105	;'i'
  1959  126C  346E               	retlw	110	;'n'
  1960  126D  3467               	retlw	103	;'g'
  1961  126E  3420               	retlw	32	;' '
  1962  126F  3462               	retlw	98	;'b'
  1963  1270  3475               	retlw	117	;'u'
  1964  1271  3466               	retlw	102	;'f'
  1965  1272  3466               	retlw	102	;'f'
  1966  1273  3465               	retlw	101	;'e'
  1967  1274  3472               	retlw	114	;'r'
  1968  1275  343A               	retlw	58	;':'
  1969  1276  3420               	retlw	32	;' '
  1970  1277  3425               	retlw	37	;'%'
  1971  1278  3463               	retlw	99	;'c'
  1972  1279  340A               	retlw	10
  1973  127A  3400               	retlw	0
  1974                           
  1975                           	psect	stringtext26
  1976  127B                     __pstringtext26:	
  1977  127B                     STR_8:	
  1978  127B  3430               	retlw	48	;'0'
  1979  127C  342E               	retlw	46	;'.'
  1980  127D  3431               	retlw	49	;'1'
  1981  127E  3420               	retlw	32	;' '
  1982  127F  3420               	retlw	32	;' '
  1983  1280  344D               	retlw	77	;'M'
  1984  1281  3461               	retlw	97	;'a'
  1985  1282  3472               	retlw	114	;'r'
  1986  1283  3463               	retlw	99	;'c'
  1987  1284  3468               	retlw	104	;'h'
  1988  1285  3420               	retlw	32	;' '
  1989  1286  3431               	retlw	49	;'1'
  1990  1287  3437               	retlw	55	;'7'
  1991  1288  342C               	retlw	44	;','
  1992  1289  3420               	retlw	32	;' '
  1993  128A  3432               	retlw	50	;'2'
  1994  128B  3430               	retlw	48	;'0'
  1995  128C  3431               	retlw	49	;'1'
  1996  128D  3438               	retlw	56	;'8'
  1997  128E  3400               	retlw	0
  1998                           
  1999                           	psect	stringtext27
  2000  128F                     __pstringtext27:	
  2001  128F                     STR_35:	
  2002  128F  344D               	retlw	77	;'M'
  2003  1290  3465               	retlw	101	;'e'
  2004  1291  3473               	retlw	115	;'s'
  2005  1292  3473               	retlw	115	;'s'
  2006  1293  3461               	retlw	97	;'a'
  2007  1294  3467               	retlw	103	;'g'
  2008  1295  3465               	retlw	101	;'e'
  2009  1296  3420               	retlw	32	;' '
  2010  1297  3473               	retlw	115	;'s'
  2011  1298  3465               	retlw	101	;'e'
  2012  1299  346E               	retlw	110	;'n'
  2013  129A  3474               	retlw	116	;'t'
  2014  129B  343A               	retlw	58	;':'
  2015  129C  3420               	retlw	32	;' '
  2016  129D  3425               	retlw	37	;'%'
  2017  129E  3473               	retlw	115	;'s'
  2018  129F  340A               	retlw	10
  2019  12A0  3400               	retlw	0
  2020                           
  2021                           	psect	stringtext28
  2022  12A1                     __pstringtext28:	
  2023  12A1                     STR_57:	
  2024  12A1  3430               	retlw	48	;'0'
  2025  12A2  3431               	retlw	49	;'1'
  2026  12A3  3432               	retlw	50	;'2'
  2027  12A4  3433               	retlw	51	;'3'
  2028  12A5  3434               	retlw	52	;'4'
  2029  12A6  3435               	retlw	53	;'5'
  2030  12A7  3436               	retlw	54	;'6'
  2031  12A8  3437               	retlw	55	;'7'
  2032  12A9  3438               	retlw	56	;'8'
  2033  12AA  3439               	retlw	57	;'9'
  2034  12AB  3461               	retlw	97	;'a'
  2035  12AC  3462               	retlw	98	;'b'
  2036  12AD  3463               	retlw	99	;'c'
  2037  12AE  3464               	retlw	100	;'d'
  2038  12AF  3465               	retlw	101	;'e'
  2039  12B0  3466               	retlw	102	;'f'
  2040  12B1  3400               	retlw	0
  2041                           
  2042                           	psect	stringtext29
  2043  12B2                     __pstringtext29:	
  2044  12B2                     STR_25:	
  2045  12B2  3452               	retlw	82	;'R'
  2046  12B3  3458               	retlw	88	;'X'
  2047  12B4  3442               	retlw	66	;'B'
  2048  12B5  3425               	retlw	37	;'%'
  2049  12B6  3464               	retlw	100	;'d'
  2050  12B7  3453               	retlw	83	;'S'
  2051  12B8  3449               	retlw	73	;'I'
  2052  12B9  3444               	retlw	68	;'D'
  2053  12BA  3448               	retlw	72	;'H'
  2054  12BB  343A               	retlw	58	;':'
  2055  12BC  3420               	retlw	32	;' '
  2056  12BD  3425               	retlw	37	;'%'
  2057  12BE  3430               	retlw	48	;'0'
  2058  12BF  3432               	retlw	50	;'2'
  2059  12C0  3478               	retlw	120	;'x'
  2060  12C1  340A               	retlw	10
  2061  12C2  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext30
  2064  12C3                     __pstringtext30:	
  2065  12C3                     STR_33:	
  2066  12C3  3454               	retlw	84	;'T'
  2067  12C4  3458               	retlw	88	;'X'
  2068  12C5  3442               	retlw	66	;'B'
  2069  12C6  3425               	retlw	37	;'%'
  2070  12C7  3464               	retlw	100	;'d'
  2071  12C8  3453               	retlw	83	;'S'
  2072  12C9  3449               	retlw	73	;'I'
  2073  12CA  3444               	retlw	68	;'D'
  2074  12CB  3448               	retlw	72	;'H'
  2075  12CC  343A               	retlw	58	;':'
  2076  12CD  3420               	retlw	32	;' '
  2077  12CE  3425               	retlw	37	;'%'
  2078  12CF  3430               	retlw	48	;'0'
  2079  12D0  3432               	retlw	50	;'2'
  2080  12D1  3478               	retlw	120	;'x'
  2081  12D2  340A               	retlw	10
  2082  12D3  3400               	retlw	0
  2083                           
  2084                           	psect	stringtext31
  2085  12D4                     __pstringtext31:	
  2086  12D4                     STR_26:	
  2087  12D4  3452               	retlw	82	;'R'
  2088  12D5  3458               	retlw	88	;'X'
  2089  12D6  3442               	retlw	66	;'B'
  2090  12D7  3425               	retlw	37	;'%'
  2091  12D8  3464               	retlw	100	;'d'
  2092  12D9  3453               	retlw	83	;'S'
  2093  12DA  3449               	retlw	73	;'I'
  2094  12DB  3444               	retlw	68	;'D'
  2095  12DC  344C               	retlw	76	;'L'
  2096  12DD  343A               	retlw	58	;':'
  2097  12DE  3420               	retlw	32	;' '
  2098  12DF  3425               	retlw	37	;'%'
  2099  12E0  3430               	retlw	48	;'0'
  2100  12E1  3432               	retlw	50	;'2'
  2101  12E2  3478               	retlw	120	;'x'
  2102  12E3  340A               	retlw	10
  2103  12E4  3400               	retlw	0
  2104                           
  2105                           	psect	stringtext32
  2106  12E5                     __pstringtext32:	
  2107  12E5                     STR_34:	
  2108  12E5  3454               	retlw	84	;'T'
  2109  12E6  3458               	retlw	88	;'X'
  2110  12E7  3442               	retlw	66	;'B'
  2111  12E8  3425               	retlw	37	;'%'
  2112  12E9  3464               	retlw	100	;'d'
  2113  12EA  3453               	retlw	83	;'S'
  2114  12EB  3449               	retlw	73	;'I'
  2115  12EC  3444               	retlw	68	;'D'
  2116  12ED  344C               	retlw	76	;'L'
  2117  12EE  343A               	retlw	58	;':'
  2118  12EF  3420               	retlw	32	;' '
  2119  12F0  3425               	retlw	37	;'%'
  2120  12F1  3430               	retlw	48	;'0'
  2121  12F2  3432               	retlw	50	;'2'
  2122  12F3  3478               	retlw	120	;'x'
  2123  12F4  340A               	retlw	10
  2124  12F5  3400               	retlw	0
  2125                           
  2126                           	psect	stringtext33
  2127  12F6                     __pstringtext33:	
  2128  12F6                     STR_27:	
  2129  12F6  3452               	retlw	82	;'R'
  2130  12F7  3458               	retlw	88	;'X'
  2131  12F8  3442               	retlw	66	;'B'
  2132  12F9  3425               	retlw	37	;'%'
  2133  12FA  3464               	retlw	100	;'d'
  2134  12FB  3444               	retlw	68	;'D'
  2135  12FC  344C               	retlw	76	;'L'
  2136  12FD  3443               	retlw	67	;'C'
  2137  12FE  343A               	retlw	58	;':'
  2138  12FF  3420               	retlw	32	;' '
  2139  1300  3425               	retlw	37	;'%'
  2140  1301  3430               	retlw	48	;'0'
  2141  1302  3432               	retlw	50	;'2'
  2142  1303  3478               	retlw	120	;'x'
  2143  1304  340A               	retlw	10
  2144  1305  3400               	retlw	0
  2145                           
  2146                           	psect	stringtext34
  2147  1306                     __pstringtext34:	
  2148  1306                     STR_50:	
  2149  1306  3452               	retlw	82	;'R'
  2150  1307  3458               	retlw	88	;'X'
  2151  1308  3442               	retlw	66	;'B'
  2152  1309  3430               	retlw	48	;'0'
  2153  130A  3443               	retlw	67	;'C'
  2154  130B  3454               	retlw	84	;'T'
  2155  130C  3452               	retlw	82	;'R'
  2156  130D  344C               	retlw	76	;'L'
  2157  130E  343A               	retlw	58	;':'
  2158  130F  3420               	retlw	32	;' '
  2159  1310  3425               	retlw	37	;'%'
  2160  1311  3430               	retlw	48	;'0'
  2161  1312  3432               	retlw	50	;'2'
  2162  1313  3478               	retlw	120	;'x'
  2163  1314  340A               	retlw	10
  2164  1315  3400               	retlw	0
  2165                           
  2166                           	psect	stringtext35
  2167  1316                     __pstringtext35:	
  2168  1316                     STR_46:	
  2169  1316  3454               	retlw	84	;'T'
  2170  1317  3458               	retlw	88	;'X'
  2171  1318  3442               	retlw	66	;'B'
  2172  1319  3430               	retlw	48	;'0'
  2173  131A  3443               	retlw	67	;'C'
  2174  131B  3454               	retlw	84	;'T'
  2175  131C  3452               	retlw	82	;'R'
  2176  131D  344C               	retlw	76	;'L'
  2177  131E  343A               	retlw	58	;':'
  2178  131F  3420               	retlw	32	;' '
  2179  1320  3425               	retlw	37	;'%'
  2180  1321  3430               	retlw	48	;'0'
  2181  1322  3432               	retlw	50	;'2'
  2182  1323  3478               	retlw	120	;'x'
  2183  1324  340A               	retlw	10
  2184  1325  3400               	retlw	0
  2185                           
  2186                           	psect	stringtext36
  2187  1326                     __pstringtext36:	
  2188  1326                     STR_51:	
  2189  1326  3452               	retlw	82	;'R'
  2190  1327  3458               	retlw	88	;'X'
  2191  1328  3442               	retlw	66	;'B'
  2192  1329  3431               	retlw	49	;'1'
  2193  132A  3443               	retlw	67	;'C'
  2194  132B  3454               	retlw	84	;'T'
  2195  132C  3452               	retlw	82	;'R'
  2196  132D  344C               	retlw	76	;'L'
  2197  132E  343A               	retlw	58	;':'
  2198  132F  3420               	retlw	32	;' '
  2199  1330  3425               	retlw	37	;'%'
  2200  1331  3430               	retlw	48	;'0'
  2201  1332  3432               	retlw	50	;'2'
  2202  1333  3478               	retlw	120	;'x'
  2203  1334  340A               	retlw	10
  2204  1335  3400               	retlw	0
  2205                           
  2206                           	psect	stringtext37
  2207  1336                     __pstringtext37:	
  2208  1336                     STR_47:	
  2209  1336  3454               	retlw	84	;'T'
  2210  1337  3458               	retlw	88	;'X'
  2211  1338  3442               	retlw	66	;'B'
  2212  1339  3431               	retlw	49	;'1'
  2213  133A  3443               	retlw	67	;'C'
  2214  133B  3454               	retlw	84	;'T'
  2215  133C  3452               	retlw	82	;'R'
  2216  133D  344C               	retlw	76	;'L'
  2217  133E  343A               	retlw	58	;':'
  2218  133F  3420               	retlw	32	;' '
  2219  1340  3425               	retlw	37	;'%'
  2220  1341  3430               	retlw	48	;'0'
  2221  1342  3432               	retlw	50	;'2'
  2222  1343  3478               	retlw	120	;'x'
  2223  1344  340A               	retlw	10
  2224  1345  3400               	retlw	0
  2225                           
  2226                           	psect	stringtext38
  2227  1346                     __pstringtext38:	
  2228  1346                     STR_48:	
  2229  1346  3454               	retlw	84	;'T'
  2230  1347  3458               	retlw	88	;'X'
  2231  1348  3442               	retlw	66	;'B'
  2232  1349  3432               	retlw	50	;'2'
  2233  134A  3443               	retlw	67	;'C'
  2234  134B  3454               	retlw	84	;'T'
  2235  134C  3452               	retlw	82	;'R'
  2236  134D  344C               	retlw	76	;'L'
  2237  134E  343A               	retlw	58	;':'
  2238  134F  3420               	retlw	32	;' '
  2239  1350  3425               	retlw	37	;'%'
  2240  1351  3430               	retlw	48	;'0'
  2241  1352  3432               	retlw	50	;'2'
  2242  1353  3478               	retlw	120	;'x'
  2243  1354  340A               	retlw	10
  2244  1355  3400               	retlw	0
  2245                           
  2246                           	psect	stringtext39
  2247  1356                     __pstringtext39:	
  2248  1356                     STR_28:	
  2249  1356  3452               	retlw	82	;'R'
  2250  1357  3458               	retlw	88	;'X'
  2251  1358  3442               	retlw	66	;'B'
  2252  1359  3425               	retlw	37	;'%'
  2253  135A  3464               	retlw	100	;'d'
  2254  135B  3444               	retlw	68	;'D'
  2255  135C  3430               	retlw	48	;'0'
  2256  135D  343A               	retlw	58	;':'
  2257  135E  3420               	retlw	32	;' '
  2258  135F  3425               	retlw	37	;'%'
  2259  1360  3430               	retlw	48	;'0'
  2260  1361  3432               	retlw	50	;'2'
  2261  1362  3478               	retlw	120	;'x'
  2262  1363  340A               	retlw	10
  2263  1364  3400               	retlw	0
  2264                           
  2265                           	psect	stringtext40
  2266  1365                     __pstringtext40:	
  2267  1365                     STR_53:	
  2268  1365  3443               	retlw	67	;'C'
  2269  1366  3441               	retlw	65	;'A'
  2270  1367  344E               	retlw	78	;'N'
  2271  1368  3443               	retlw	67	;'C'
  2272  1369  3454               	retlw	84	;'T'
  2273  136A  3452               	retlw	82	;'R'
  2274  136B  344C               	retlw	76	;'L'
  2275  136C  343A               	retlw	58	;':'
  2276  136D  3420               	retlw	32	;' '
  2277  136E  3425               	retlw	37	;'%'
  2278  136F  3430               	retlw	48	;'0'
  2279  1370  3432               	retlw	50	;'2'
  2280  1371  3478               	retlw	120	;'x'
  2281  1372  340A               	retlw	10
  2282  1373  3400               	retlw	0
  2283                           
  2284                           	psect	stringtext41
  2285  1374                     __pstringtext41:	
  2286  1374                     STR_22:	
  2287  1374  3443               	retlw	67	;'C'
  2288  1375  3441               	retlw	65	;'A'
  2289  1376  344E               	retlw	78	;'N'
  2290  1377  3453               	retlw	83	;'S'
  2291  1378  3454               	retlw	84	;'T'
  2292  1379  3441               	retlw	65	;'A'
  2293  137A  3454               	retlw	84	;'T'
  2294  137B  343A               	retlw	58	;':'
  2295  137C  3420               	retlw	32	;' '
  2296  137D  3425               	retlw	37	;'%'
  2297  137E  3430               	retlw	48	;'0'
  2298  137F  3432               	retlw	50	;'2'
  2299  1380  3478               	retlw	120	;'x'
  2300  1381  340A               	retlw	10
  2301  1382  3400               	retlw	0
  2302                           
  2303                           	psect	stringtext42
  2304  1383                     __pstringtext42:	
  2305  1383                     STR_31:	
  2306  1383  3454               	retlw	84	;'T'
  2307  1384  3458               	retlw	88	;'X'
  2308  1385  3442               	retlw	66	;'B'
  2309  1386  3430               	retlw	48	;'0'
  2310  1387  3420               	retlw	32	;' '
  2311  1388  3469               	retlw	105	;'i'
  2312  1389  3473               	retlw	115	;'s'
  2313  138A  3420               	retlw	32	;' '
  2314  138B  3469               	retlw	105	;'i'
  2315  138C  3464               	retlw	100	;'d'
  2316  138D  346C               	retlw	108	;'l'
  2317  138E  3465               	retlw	101	;'e'
  2318  138F  340A               	retlw	10
  2319  1390  3400               	retlw	0
  2320                           
  2321                           	psect	stringtext43
  2322  1391                     __pstringtext43:	
  2323  1391                     STR_30:	
  2324  1391  3454               	retlw	84	;'T'
  2325  1392  3458               	retlw	88	;'X'
  2326  1393  3442               	retlw	66	;'B'
  2327  1394  3431               	retlw	49	;'1'
  2328  1395  3420               	retlw	32	;' '
  2329  1396  3469               	retlw	105	;'i'
  2330  1397  3473               	retlw	115	;'s'
  2331  1398  3420               	retlw	32	;' '
  2332  1399  3469               	retlw	105	;'i'
  2333  139A  3464               	retlw	100	;'d'
  2334  139B  346C               	retlw	108	;'l'
  2335  139C  3465               	retlw	101	;'e'
  2336  139D  340A               	retlw	10
  2337  139E  3400               	retlw	0
  2338                           
  2339                           	psect	stringtext44
  2340  139F                     __pstringtext44:	
  2341  139F                     STR_29:	
  2342  139F  3454               	retlw	84	;'T'
  2343  13A0  3458               	retlw	88	;'X'
  2344  13A1  3442               	retlw	66	;'B'
  2345  13A2  3432               	retlw	50	;'2'
  2346  13A3  3420               	retlw	32	;' '
  2347  13A4  3469               	retlw	105	;'i'
  2348  13A5  3473               	retlw	115	;'s'
  2349  13A6  3420               	retlw	32	;' '
  2350  13A7  3469               	retlw	105	;'i'
  2351  13A8  3464               	retlw	100	;'d'
  2352  13A9  346C               	retlw	108	;'l'
  2353  13AA  3465               	retlw	101	;'e'
  2354  13AB  340A               	retlw	10
  2355  13AC  3400               	retlw	0
  2356                           
  2357                           	psect	stringtext45
  2358  13AD                     __pstringtext45:	
  2359  13AD                     STR_37:	
  2360  13AD  3452               	retlw	82	;'R'
  2361  13AE  3458               	retlw	88	;'X'
  2362  13AF  3430               	retlw	48	;'0'
  2363  13B0  3449               	retlw	73	;'I'
  2364  13B1  3446               	retlw	70	;'F'
  2365  13B2  3420               	retlw	32	;' '
  2366  13B3  3469               	retlw	105	;'i'
  2367  13B4  3473               	retlw	115	;'s'
  2368  13B5  3420               	retlw	32	;' '
  2369  13B6  346F               	retlw	111	;'o'
  2370  13B7  346E               	retlw	110	;'n'
  2371  13B8  340A               	retlw	10
  2372  13B9  3400               	retlw	0
  2373                           
  2374                           	psect	stringtext46
  2375  13BA                     __pstringtext46:	
  2376  13BA                     STR_36:	
  2377  13BA  3452               	retlw	82	;'R'
  2378  13BB  3458               	retlw	88	;'X'
  2379  13BC  3431               	retlw	49	;'1'
  2380  13BD  3449               	retlw	73	;'I'
  2381  13BE  3446               	retlw	70	;'F'
  2382  13BF  3420               	retlw	32	;' '
  2383  13C0  3469               	retlw	105	;'i'
  2384  13C1  3473               	retlw	115	;'s'
  2385  13C2  3420               	retlw	32	;' '
  2386  13C3  346F               	retlw	111	;'o'
  2387  13C4  346E               	retlw	110	;'n'
  2388  13C5  340A               	retlw	10
  2389  13C6  3400               	retlw	0
  2390                           
  2391                           	psect	stringtext47
  2392  13C7                     __pstringtext47:	
  2393  13C7                     STR_42:	
  2394  13C7  3443               	retlw	67	;'C'
  2395  13C8  344E               	retlw	78	;'N'
  2396  13C9  3446               	retlw	70	;'F'
  2397  13CA  3431               	retlw	49	;'1'
  2398  13CB  343A               	retlw	58	;':'
  2399  13CC  3420               	retlw	32	;' '
  2400  13CD  3425               	retlw	37	;'%'
  2401  13CE  3430               	retlw	48	;'0'
  2402  13CF  3432               	retlw	50	;'2'
  2403  13D0  3478               	retlw	120	;'x'
  2404  13D1  340A               	retlw	10
  2405  13D2  3400               	retlw	0
  2406                           
  2407                           	psect	stringtext48
  2408  13D3                     __pstringtext48:	
  2409  13D3                     STR_43:	
  2410  13D3  3443               	retlw	67	;'C'
  2411  13D4  344E               	retlw	78	;'N'
  2412  13D5  3446               	retlw	70	;'F'
  2413  13D6  3432               	retlw	50	;'2'
  2414  13D7  343A               	retlw	58	;':'
  2415  13D8  3420               	retlw	32	;' '
  2416  13D9  3425               	retlw	37	;'%'
  2417  13DA  3430               	retlw	48	;'0'
  2418  13DB  3432               	retlw	50	;'2'
  2419  13DC  3478               	retlw	120	;'x'
  2420  13DD  340A               	retlw	10
  2421  13DE  3400               	retlw	0
  2422                           
  2423                           	psect	stringtext49
  2424  13DF                     __pstringtext49:	
  2425  13DF                     STR_44:	
  2426  13DF  3443               	retlw	67	;'C'
  2427  13E0  344E               	retlw	78	;'N'
  2428  13E1  3446               	retlw	70	;'F'
  2429  13E2  3433               	retlw	51	;'3'
  2430  13E3  343A               	retlw	58	;':'
  2431  13E4  3420               	retlw	32	;' '
  2432  13E5  3425               	retlw	37	;'%'
  2433  13E6  3430               	retlw	48	;'0'
  2434  13E7  3432               	retlw	50	;'2'
  2435  13E8  3478               	retlw	120	;'x'
  2436  13E9  340A               	retlw	10
  2437  13EA  3400               	retlw	0
  2438                           
  2439                           	psect	stringtext50
  2440  13FD                     __pstringtext50:	
  2441  13FD                     STR_56:	
  2442  13FD  3428               	retlw	40	;'('
  2443  13FE  346E               	retlw	110	;'n'
  2444  13FF  3475               	retlw	117	;'u'
  2445  1400  346C               	retlw	108	;'l'
  2446  1401  346C               	retlw	108	;'l'
  2447  1402  3429               	retlw	41	;')'
  2448  1403  3400               	retlw	0
  2449                           
  2450                           	psect	stringtext51
  2451  1404                     __pstringtext51:	
  2452  1404                     STR_1:	
  2453  1404  3425               	retlw	37	;'%'
  2454  1405  3464               	retlw	100	;'d'
  2455  1406  342C               	retlw	44	;','
  2456  1407  3425               	retlw	37	;'%'
  2457  1408  3473               	retlw	115	;'s'
  2458  1409  340A               	retlw	10
  2459  140A  3400               	retlw	0
  2460                           
  2461                           	psect	stringtext52
  2462  1411                     __pstringtext52:	
  2463  1411                     STR_2:	
  2464  1411  3425               	retlw	37	;'%'
  2465  1412  3430               	retlw	48	;'0'
  2466  1413  3432               	retlw	50	;'2'
  2467  1414  3478               	retlw	120	;'x'
  2468  1415  343A               	retlw	58	;':'
  2469  1416  3400               	retlw	0
  2470                           
  2471                           	psect	stringtext53
  2472  1417                     __pstringtext53:	
  2473  1417                     STR_3:	
  2474  1417  3420               	retlw	32	;' '
  2475  1418  3425               	retlw	37	;'%'
  2476  1419  3430               	retlw	48	;'0'
  2477  141A  3432               	retlw	50	;'2'
  2478  141B  3478               	retlw	120	;'x'
  2479  141C  3400               	retlw	0
  2480                           
  2481                           	psect	stringtext54
  2482  141D                     __pstringtext54:	
  2483  141D                     STR_38:	
  2484  141D  342D               	retlw	45	;'-'
  2485  141E  342D               	retlw	45	;'-'
  2486  141F  342D               	retlw	45	;'-'
  2487  1420  340A               	retlw	10
  2488  1421  3400               	retlw	0
  2489                           
  2490                           	psect	stringtext55
  2491  1428                     __pstringtext55:	
  2492  1428                     STR_6:	
  2493  1428  3425               	retlw	37	;'%'
  2494  1429  3463               	retlw	99	;'c'
  2495  142A  3400               	retlw	0
  2496                           
  2497                           	psect	stringtext56
  2498  0000                     __pstringtext56:	
  2499  1420                     
  2500                           ; #config settings
  2501  0000                     
  2502                           	psect	cinit
  2503  07EE                     start_initialization:	
  2504  07EE                     __initialization:	
  2505                           
  2506                           ; Clear objects allocated to BANK0
  2507  07EE  3062               	movlw	low __pbssBANK0
  2508  07EF  0084               	movwf	4
  2509  07F0  3000               	movlw	high __pbssBANK0
  2510  07F1  0085               	movwf	5
  2511  07F2  3007               	movlw	7
  2512  07F3  318C  241E  3187   	fcall	clear_ram0
  2513                           
  2514                           ; Clear objects allocated to BANK1
  2515  07F6  30B3               	movlw	low __pbssBANK1
  2516  07F7  0084               	movwf	4
  2517  07F8  3000               	movlw	high __pbssBANK1
  2518  07F9  0085               	movwf	5
  2519  07FA  3010               	movlw	16
  2520  07FB  318C  241E         	fcall	clear_ram0
  2521  07FD                     end_of_initialization:	
  2522                           ;End of C runtime variable initialization code
  2523                           
  2524  07FD                     __end_of__initialization:	
  2525  07FD  0020               	movlb	0
  2526  07FE  3183  2BC3         	ljmp	_main	;jump to C main() function
  2527                           
  2528                           	psect	bssBANK0
  2529  0062                     __pbssBANK0:	
  2530  0062                     _mode:	
  2531  0062                     	ds	2
  2532  0064                     _sid:	
  2533  0064                     	ds	2
  2534  0066                     _output_format:	
  2535  0066                     	ds	2
  2536  0068                     _operation_mode:	
  2537  0068                     	ds	1
  2538                           
  2539                           	psect	bssBANK1
  2540  00B3                     __pbssBANK1:	
  2541  00B3                     _buf:	
  2542  00B3                     	ds	16
  2543                           
  2544                           	psect	clrtext
  2545  0C1E                     clear_ram0:	
  2546                           ;	Called with FSR0 containing the base address, and
  2547                           ;	WREG with the size to clear
  2548                           
  2549  0C1E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2550  0C1F                     clrloop0:	
  2551  0C1F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2552  0C20  3101               	addfsr 0,1
  2553  0C21  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2554  0C22  2C1F               	goto	clrloop0	;have we reached the end yet?
  2555  0C23  3400               	retlw	0	;all done for this memory range, return
  2556                           
  2557                           	psect	cstackBANK1
  2558  00A0                     __pcstackBANK1:	
  2559  00A0                     main@sid:	
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  00A0                     	ds	1
  2563  00A1                     main@bpr:	
  2564                           
  2565                           ; 1 bytes @ 0x1
  2566  00A1                     	ds	1
  2567  00A2                     main@status:	
  2568                           
  2569                           ; 1 bytes @ 0x2
  2570  00A2                     	ds	1
  2571  00A3                     main@mask:	
  2572                           
  2573                           ; 2 bytes @ 0x3
  2574  00A3                     	ds	2
  2575  00A5                     main@echo_back:	
  2576                           
  2577                           ; 1 bytes @ 0x5
  2578  00A5                     	ds	1
  2579  00A6                     main@n:	
  2580                           
  2581                           ; 1 bytes @ 0x6
  2582  00A6                     	ds	1
  2583  00A7                     main@buf:	
  2584                           
  2585                           ; 9 bytes @ 0x7
  2586  00A7                     	ds	9
  2587  00B0                     main@c:	
  2588                           
  2589                           ; 1 bytes @ 0x10
  2590  00B0                     	ds	1
  2591  00B1                     main@cmd:	
  2592                           
  2593                           ; 1 bytes @ 0x11
  2594  00B1                     	ds	1
  2595  00B2                     main@idx:	
  2596                           
  2597                           ; 1 bytes @ 0x12
  2598  00B2                     	ds	1
  2599                           
  2600                           	psect	cstackCOMMON
  2601  0070                     __pcstackCOMMON:	
  2602  0070                     ?_isdigit:	
  2603  0070                     ?_PIN_MANAGER_Initialize:	
  2604                           ; 1 bit 
  2605                           
  2606  0070                     ??_PIN_MANAGER_Initialize:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_OSCILLATOR_Initialize:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ??_OSCILLATOR_Initialize:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_WDT_Initialize:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ??_WDT_Initialize:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_SPI_Initialize:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ??_SPI_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_EUSART_Initialize:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ??_EUSART_Initialize:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_can_status_check:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_can_set_sid:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_can_logging_mode:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_can_ope_mode:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_can_abort:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_can_baudrate:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_can_dump_registers:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ??_isdigit:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_SYSTEM_Initialize:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ??_SYSTEM_Initialize:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_EUSART_Read:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ??_EUSART_Read:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_EUSART_Write:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ??_EUSART_Write:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_putch:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_SPI_Exchange8bit:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ??_SPI_Exchange8bit:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_main:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_txf_clear:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_receive:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_read_register:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?___wmul:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?___lwdiv:	
  2700                           ; 2 bytes @ 0x0
  2701                           
  2702  0070                     EUSART_Write@txData:	
  2703                           ; 2 bytes @ 0x0
  2704                           
  2705  0070                     SPI_Exchange8bit@data:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     can_logging_mode@verbose:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     _isdigit$786:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     can_set_sid@can_node:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ___wmul@multiplier:	
  2718                           ; 2 bytes @ 0x0
  2719                           
  2720  0070                     ___lwdiv@divisor:	
  2721                           ; 2 bytes @ 0x0
  2722                           
  2723                           
  2724                           ; 2 bytes @ 0x0
  2725  0070                     	ds	1
  2726  0071                     ??_can_logging_mode:	
  2727  0071                     ??_putch:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730  0071                     ?_SPI_Exchange8bitBuffer:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0071                     putch@txData:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2737                           ; 1 bytes @ 0x1
  2738                           
  2739  0071                     isdigit@c:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0071                     	ds	1
  2745  0072                     ??_can_set_sid:	
  2746  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2747                           ; 1 bytes @ 0x2
  2748                           
  2749  0072                     can_logging_mode@debug:	
  2750                           ; 1 bytes @ 0x2
  2751                           
  2752  0072                     ___wmul@multiplicand:	
  2753                           ; 1 bytes @ 0x2
  2754                           
  2755  0072                     ___lwdiv@dividend:	
  2756                           ; 2 bytes @ 0x2
  2757                           
  2758                           
  2759                           ; 2 bytes @ 0x2
  2760  0072                     	ds	1
  2761  0073                     ??_SPI_Exchange8bitBuffer:	
  2762                           
  2763                           ; 1 bytes @ 0x3
  2764  0073                     	ds	1
  2765  0074                     ??___wmul:	
  2766  0074                     ??___lwdiv:	
  2767                           ; 1 bytes @ 0x4
  2768                           
  2769  0074                     ___wmul@product:	
  2770                           ; 1 bytes @ 0x4
  2771                           
  2772                           
  2773                           ; 2 bytes @ 0x4
  2774  0074                     	ds	1
  2775  0075                     can_set_sid@sidh:	
  2776  0075                     ___lwdiv@quotient:	
  2777                           ; 1 bytes @ 0x5
  2778                           
  2779                           
  2780                           ; 2 bytes @ 0x5
  2781  0075                     	ds	1
  2782  0076                     ?_atoi:	
  2783  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2784                           ; 2 bytes @ 0x6
  2785                           
  2786  0076                     can_set_sid@sidl:	
  2787                           ; 1 bytes @ 0x6
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x6
  2791  0076                     	ds	1
  2792  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2793  0077                     ___lwdiv@counter:	
  2794                           ; 1 bytes @ 0x7
  2795                           
  2796                           
  2797                           ; 1 bytes @ 0x7
  2798  0077                     	ds	1
  2799  0078                     ??_atoi:	
  2800  0078                     ?_SPI_exchange:	
  2801                           ; 1 bytes @ 0x8
  2802                           
  2803  0078                     ?___lwmod:	
  2804                           ; 1 bytes @ 0x8
  2805                           
  2806  0078                     SPI_exchange@len:	
  2807                           ; 2 bytes @ 0x8
  2808                           
  2809  0078                     ___lwmod@divisor:	
  2810                           ; 1 bytes @ 0x8
  2811                           
  2812                           
  2813                           ; 2 bytes @ 0x8
  2814  0078                     	ds	1
  2815  0079                     ??_SPI_exchange:	
  2816                           
  2817                           ; 1 bytes @ 0x9
  2818  0079                     	ds	1
  2819  007A                     atoi@sign:	
  2820  007A                     ___lwmod@dividend:	
  2821                           ; 1 bytes @ 0xA
  2822                           
  2823                           
  2824                           ; 2 bytes @ 0xA
  2825  007A                     	ds	1
  2826  007B                     atoi@a:	
  2827                           
  2828                           ; 2 bytes @ 0xB
  2829  007B                     	ds	1
  2830  007C                     ??___lwmod:	
  2831  007C                     SPI_exchange@bytes_written:	
  2832                           ; 1 bytes @ 0xC
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0xC
  2836  007C                     	ds	1
  2837  007D                     SPI_exchange@buf:	
  2838  007D                     atoi@s:	
  2839                           ; 1 bytes @ 0xD
  2840                           
  2841  007D                     ___lwmod@counter:	
  2842                           ; 1 bytes @ 0xD
  2843                           
  2844                           
  2845                           ; 1 bytes @ 0xD
  2846  007D                     	ds	1
  2847                           
  2848                           	psect	cstackBANK0
  2849  0020                     __pcstackBANK0:	
  2850  0020                     ??_txf_clear:	
  2851  0020                     ??_read_register:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0x0
  2856  0020                     	ds	1
  2857  0021                     read_register@addr:	
  2858                           
  2859                           ; 1 bytes @ 0x1
  2860  0021                     	ds	1
  2861  0022                     ?_printf:	
  2862  0022                     txf_clear@mask:	
  2863                           ; 2 bytes @ 0x2
  2864                           
  2865  0022                     printf@f:	
  2866                           ; 1 bytes @ 0x2
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x2
  2870  0022                     	ds	1
  2871  0023                     txf_clear@bytes_written:	
  2872                           
  2873                           ; 1 bytes @ 0x3
  2874  0023                     	ds	1
  2875  0024                     txf_clear@n:	
  2876                           
  2877                           ; 1 bytes @ 0x4
  2878  0024                     	ds	6
  2879  002A                     ??_printf:	
  2880                           
  2881                           ; 1 bytes @ 0xA
  2882  002A                     	ds	4
  2883  002E                     printf@idx:	
  2884                           
  2885                           ; 1 bytes @ 0xE
  2886  002E                     	ds	1
  2887  002F                     printf@prec:	
  2888                           
  2889                           ; 1 bytes @ 0xF
  2890  002F                     	ds	1
  2891  0030                     printf@cp:	
  2892                           
  2893                           ; 2 bytes @ 0x10
  2894  0030                     	ds	2
  2895  0032                     printf@len:	
  2896                           
  2897                           ; 2 bytes @ 0x12
  2898  0032                     	ds	2
  2899  0034                     printf@ap:	
  2900                           
  2901                           ; 1 bytes @ 0x14
  2902  0034                     	ds	1
  2903  0035                     printf@val:	
  2904                           
  2905                           ; 2 bytes @ 0x15
  2906  0035                     	ds	2
  2907  0037                     printf@flag:	
  2908                           
  2909                           ; 1 bytes @ 0x17
  2910  0037                     	ds	1
  2911  0038                     printf@width:	
  2912                           
  2913                           ; 2 bytes @ 0x18
  2914  0038                     	ds	2
  2915  003A                     printf@c:	
  2916                           
  2917                           ; 1 bytes @ 0x1A
  2918  003A                     	ds	1
  2919  003B                     ??_can_ope_mode:	
  2920  003B                     ??_can_dump_registers:	
  2921                           ; 1 bytes @ 0x1B
  2922                           
  2923  003B                     ?_can_send:	
  2924                           ; 1 bytes @ 0x1B
  2925                           
  2926  003B                     ?_receive_handler:	
  2927                           ; 1 bytes @ 0x1B
  2928                           
  2929  003B                     receive_handler@sid:	
  2930                           ; 1 bytes @ 0x1B
  2931                           
  2932  003B                     can_send@dlc:	
  2933                           ; 1 bytes @ 0x1B
  2934                           
  2935                           
  2936                           ; 1 bytes @ 0x1B
  2937  003B                     	ds	1
  2938  003C                     ??_can_send:	
  2939  003C                     receive_handler@pbuf:	
  2940                           ; 1 bytes @ 0x1C
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x1C
  2944  003C                     	ds	1
  2945  003D                     receive_handler@dlc:	
  2946  003D                     can_ope_mode@bytes_written:	
  2947                           ; 1 bytes @ 0x1D
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x1D
  2951  003D                     	ds	1
  2952  003E                     ??_receive_handler:	
  2953  003E                     can_ope_mode@ope_mode:	
  2954                           ; 1 bytes @ 0x1E
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x1E
  2958  003E                     	ds	1
  2959  003F                     ?_can_init:	
  2960  003F                     ??_can_abort:	
  2961                           ; 1 bytes @ 0x1F
  2962                           
  2963  003F                     ??_can_baudrate:	
  2964                           ; 1 bytes @ 0x1F
  2965                           
  2966  003F                     ?_can_set_mask:	
  2967                           ; 1 bytes @ 0x1F
  2968                           
  2969  003F                     can_set_mask@n:	
  2970                           ; 1 bytes @ 0x1F
  2971                           
  2972  003F                     can_init@receive_handler:	
  2973                           ; 1 bytes @ 0x1F
  2974                           
  2975                           
  2976                           ; 2 bytes @ 0x1F
  2977  003F                     	ds	1
  2978  0040                     can_set_mask@mask:	
  2979  0040                     can_send@len:	
  2980                           ; 1 bytes @ 0x20
  2981                           
  2982                           
  2983                           ; 1 bytes @ 0x20
  2984  0040                     	ds	1
  2985  0041                     ??_can_init:	
  2986  0041                     ??_can_set_mask:	
  2987                           ; 1 bytes @ 0x21
  2988                           
  2989  0041                     receive_handler@i:	
  2990                           ; 1 bytes @ 0x21
  2991                           
  2992  0041                     can_send@bytes_written:	
  2993                           ; 1 bytes @ 0x21
  2994                           
  2995  0041                     can_baudrate@bpr:	
  2996                           ; 1 bytes @ 0x21
  2997                           
  2998  0041                     can_abort@bytes_written:	
  2999                           ; 1 bytes @ 0x21
  3000                           
  3001                           
  3002                           ; 1 bytes @ 0x21
  3003  0041                     	ds	1
  3004  0042                     ??_receive:	
  3005  0042                     can_send@status:	
  3006                           ; 1 bytes @ 0x22
  3007                           
  3008  0042                     can_baudrate@mask:	
  3009                           ; 1 bytes @ 0x22
  3010                           
  3011                           
  3012                           ; 1 bytes @ 0x22
  3013  0042                     	ds	1
  3014  0043                     can_send@data_buf:	
  3015  0043                     can_baudrate@bytes_written:	
  3016                           ; 1 bytes @ 0x23
  3017                           
  3018                           
  3019                           ; 1 bytes @ 0x23
  3020  0043                     	ds	1
  3021  0044                     can_send@i:	
  3022                           
  3023                           ; 1 bytes @ 0x24
  3024  0044                     	ds	1
  3025  0045                     can_send@n:	
  3026                           
  3027                           ; 1 bytes @ 0x25
  3028  0045                     	ds	2
  3029  0047                     receive@bytes_read:	
  3030  0047                     _can_set_mask$492:	
  3031                           ; 1 bytes @ 0x27
  3032                           
  3033                           
  3034                           ; 2 bytes @ 0x27
  3035  0047                     	ds	1
  3036  0048                     receive@rx_buf:	
  3037                           
  3038                           ; 15 bytes @ 0x28
  3039  0048                     	ds	1
  3040  0049                     can_set_mask@cmd:	
  3041                           
  3042                           ; 1 bytes @ 0x29
  3043  0049                     	ds	1
  3044  004A                     can_set_mask@mask_sidh:	
  3045                           
  3046                           ; 1 bytes @ 0x2A
  3047  004A                     	ds	1
  3048  004B                     can_set_mask@mask_sidl:	
  3049                           
  3050                           ; 1 bytes @ 0x2B
  3051  004B                     	ds	12
  3052  0057                     receive@pbuf:	
  3053                           
  3054                           ; 1 bytes @ 0x37
  3055  0057                     	ds	1
  3056  0058                     receive@sid:	
  3057                           
  3058                           ; 2 bytes @ 0x38
  3059  0058                     	ds	2
  3060  005A                     receive@dlc:	
  3061                           
  3062                           ; 1 bytes @ 0x3A
  3063  005A                     	ds	1
  3064  005B                     receive@n:	
  3065                           
  3066                           ; 1 bytes @ 0x3B
  3067  005B                     	ds	1
  3068  005C                     ??_can_status_check:	
  3069                           
  3070                           ; 1 bytes @ 0x3C
  3071  005C                     	ds	2
  3072  005E                     can_status_check@bytes_written:	
  3073                           
  3074                           ; 1 bytes @ 0x3E
  3075  005E                     	ds	1
  3076  005F                     can_status_check@status:	
  3077                           
  3078                           ; 1 bytes @ 0x3F
  3079  005F                     	ds	1
  3080  0060                     ??_main:	
  3081                           
  3082                           ; 1 bytes @ 0x40
  3083  0060                     	ds	2
  3084                           
  3085                           	psect	maintext
  3086  03C3                     __pmaintext:	
  3087 ;;
  3088 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3089 ;;
  3090 ;; *************** function _main *****************
  3091 ;; Defined at:
  3092 ;;		line 45 in file "main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  status          1    2[BANK1 ] unsigned char 
  3097 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3098 ;;  mask            2    3[BANK1 ] unsigned int 
  3099 ;;  idx             1   18[BANK1 ] unsigned char 
  3100 ;;  cmd             1   17[BANK1 ] unsigned char 
  3101 ;;  c               1   16[BANK1 ] unsigned char 
  3102 ;;  n               1    6[BANK1 ] unsigned char 
  3103 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3104 ;;  bpr             1    1[BANK1 ] unsigned char 
  3105 ;;  sid             1    0[BANK1 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : B1F/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3118 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;Total ram usage:       21 bytes
  3120 ;; Hardware stack levels required when called:    6
  3121 ;; This function calls:
  3122 ;;		_EUSART_Read
  3123 ;;		_SYSTEM_Initialize
  3124 ;;		_atoi
  3125 ;;		_can_abort
  3126 ;;		_can_baudrate
  3127 ;;		_can_dump_registers
  3128 ;;		_can_init
  3129 ;;		_can_logging_mode
  3130 ;;		_can_ope_mode
  3131 ;;		_can_send
  3132 ;;		_can_set_mask
  3133 ;;		_can_set_sid
  3134 ;;		_can_status_check
  3135 ;;		_printf
  3136 ;; This function is called by:
  3137 ;;		Startup code after reset
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _main
  3143  03C3                     _main:	
  3144                           
  3145                           ;main.c: 47: LATCbits.LATC3 = 1;
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3149  03C3  0022               	movlb	2	; select bank2
  3150  03C4  158E               	bsf	14,3	;volatile
  3151                           
  3152                           ;main.c: 49: uint8_t buf[9];
  3153                           ;main.c: 50: bool echo_back = 0;
  3154  03C5  0021               	movlb	1	; select bank1
  3155  03C6  01A5               	clrf	main@echo_back^(0+128)
  3156                           
  3157                           ;main.c: 51: uint8_t c, idx;
  3158                           ;main.c: 53: uint8_t cmd, sid, n, bpr;
  3159                           ;main.c: 54: uint16_t mask;
  3160                           ;main.c: 56: SYSTEM_Initialize();
  3161  03C7  318C  2471  3183   	fcall	_SYSTEM_Initialize
  3162                           
  3163                           ;main.c: 61: output_format.with_sid = 0;
  3164  03CA  0020               	movlb	0	; select bank0
  3165  03CB  01E6               	clrf	_output_format
  3166                           
  3167                           ;main.c: 62: output_format.hex_output = 0;
  3168  03CC  01E7               	clrf	_output_format+1
  3169                           
  3170                           ;main.c: 63: can_init(receive_handler);
  3171  03CD  30BF               	movlw	low _receive_handler
  3172  03CE  00BF               	movwf	can_init@receive_handler
  3173  03CF  300E               	movlw	high _receive_handler
  3174  03D0  00C0               	movwf	can_init@receive_handler+1
  3175  03D1  318F  2781  3183   	fcall	_can_init
  3176  03D4                     L1:	
  3177                           
  3178                           ;main.c: 65: idx = 0;
  3179  03D4  0021               	movlb	1	; select bank1
  3180  03D5  01B2               	clrf	main@idx^(0+128)
  3181  03D6                     l2527:	
  3182                           ;main.c: 67: while (1)
  3183                           
  3184                           
  3185                           ;main.c: 68: {
  3186                           ;main.c: 69: bool status = can_status_check();
  3187  03D6  318E  2612  3183   	fcall	_can_status_check
  3188  03D9  0020               	movlb	0	; select bank0
  3189  03DA  00E0               	movwf	??_main
  3190  03DB  0860               	movf	??_main,w
  3191  03DC  0021               	movlb	1	; select bank1
  3192  03DD  00A2               	movwf	main@status^(0+128)
  3193                           
  3194                           ;main.c: 70: if (status) {
  3195  03DE  0822               	movf	main@status^(0+128),w
  3196  03DF  1903               	btfsc	3,2
  3197  03E0  2BE4               	goto	l202
  3198                           
  3199                           ;main.c: 71: LATCbits.LATC3 = 0;
  3200  03E1  0022               	movlb	2	; select bank2
  3201  03E2  118E               	bcf	14,3	;volatile
  3202                           
  3203                           ;main.c: 72: } else {
  3204  03E3  2BE6               	goto	l203
  3205  03E4                     l202:	
  3206                           
  3207                           ;main.c: 73: LATCbits.LATC3 = 1;
  3208  03E4  0022               	movlb	2	; select bank2
  3209  03E5  158E               	bsf	14,3	;volatile
  3210  03E6                     l203:	
  3211                           
  3212                           ;main.c: 74: }
  3213                           ;main.c: 75: if ((PIR1bits.RCIF)) {
  3214  03E6  0020               	movlb	0	; select bank0
  3215  03E7  1E91               	btfss	17,5	;volatile
  3216  03E8  2BD6               	goto	l2527
  3217                           
  3218                           ;main.c: 76: c = EUSART_Read();
  3219  03E9  318C  2443  3183   	fcall	_EUSART_Read
  3220  03EC  0020               	movlb	0	; select bank0
  3221  03ED  00E0               	movwf	??_main
  3222  03EE  0860               	movf	??_main,w
  3223  03EF  0021               	movlb	1	; select bank1
  3224  03F0  00B0               	movwf	main@c^(0+128)
  3225                           
  3226                           ;main.c: 77: if (echo_back) printf("%c", c);
  3227  03F1  0825               	movf	main@echo_back^(0+128),w
  3228  03F2  1903               	btfsc	3,2
  3229  03F3  2C05               	goto	l2539
  3230  03F4  3028               	movlw	low (STR_6| (0+32768))
  3231  03F5  0020               	movlb	0	; select bank0
  3232  03F6  00A2               	movwf	printf@f
  3233  03F7  3094               	movlw	high (STR_6| (0+32768))
  3234  03F8  00A3               	movwf	printf@f+1
  3235  03F9  0021               	movlb	1	; select bank1
  3236  03FA  0830               	movf	main@c^(0+128),w
  3237  03FB  0020               	movlb	0	; select bank0
  3238  03FC  00E0               	movwf	??_main
  3239  03FD  01E1               	clrf	??_main+1
  3240  03FE  0860               	movf	??_main,w
  3241  03FF  00A4               	movwf	?_printf+2
  3242  0400  0861               	movf	??_main+1,w
  3243  0401  00A5               	movwf	?_printf+3
  3244  0402  3185  25B3  3183   	fcall	_printf
  3245  0405                     l2539:	
  3246                           
  3247                           ;main.c: 79: buf[idx] = c;
  3248  0405  0021               	movlb	1	; select bank1
  3249  0406  0830               	movf	main@c^(0+128),w
  3250  0407  0020               	movlb	0	; select bank0
  3251  0408  00E0               	movwf	??_main
  3252  0409  0021               	movlb	1	; select bank1
  3253  040A  0832               	movf	main@idx^(0+128),w
  3254  040B  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3255  040C  0086               	movwf	6
  3256  040D  0187               	clrf	7
  3257  040E  0020               	movlb	0	; select bank0
  3258  040F  0860               	movf	??_main,w
  3259  0410  0081               	movwf	1
  3260                           
  3261                           ;main.c: 80: if (c == '\n') {
  3262  0411  300A               	movlw	10
  3263  0412  0021               	movlb	1	; select bank1
  3264  0413  0630               	xorwf	main@c^(0+128),w
  3265  0414  1D03               	btfss	3,2
  3266  0415  2D90               	goto	l2633
  3267                           
  3268                           ;main.c: 81: buf[idx] = '\0';
  3269  0416  0832               	movf	main@idx^(0+128),w
  3270  0417  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3271  0418  0086               	movwf	6
  3272  0419  0187               	clrf	7
  3273  041A  0181               	clrf	1
  3274                           
  3275                           ;main.c: 82: if (buf[0] == '@') {
  3276  041B  3040               	movlw	64
  3277  041C  0627               	xorwf	main@buf^(0+128),w
  3278  041D  1D03               	btfss	3,2
  3279  041E  2D86               	goto	l2629
  3280                           
  3281                           ;main.c: 83: cmd = buf[1];
  3282  041F  0828               	movf	(main@buf^(0+128)+1),w
  3283  0420  0020               	movlb	0	; select bank0
  3284  0421  00E0               	movwf	??_main
  3285  0422  0860               	movf	??_main,w
  3286  0423  0021               	movlb	1	; select bank1
  3287  0424  00B1               	movwf	main@cmd^(0+128)
  3288                           
  3289                           ;main.c: 84: switch(cmd) {
  3290  0425  2D64               	goto	l2627
  3291  0426                     l2549:	
  3292                           ;main.c: 85: case 'i':
  3293                           
  3294                           
  3295                           ;main.c: 86: sid = atoi(&buf[2]);
  3296  0426  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3297  0427  318F  271A  3183   	fcall	_atoi
  3298  042A  0876               	movf	?_atoi,w
  3299  042B  0020               	movlb	0	; select bank0
  3300  042C  00E0               	movwf	??_main
  3301  042D  0860               	movf	??_main,w
  3302  042E  0021               	movlb	1	; select bank1
  3303  042F  00A0               	movwf	main@sid^(0+128)
  3304                           
  3305                           ;main.c: 87: can_set_sid(sid);
  3306  0430  0820               	movf	main@sid^(0+128),w
  3307  0431  0020               	movlb	0	; select bank0
  3308  0432  00E0               	movwf	??_main
  3309  0433  01E1               	clrf	??_main+1
  3310  0434  0860               	movf	??_main,w
  3311  0435  00F0               	movwf	can_set_sid@can_node
  3312  0436  0861               	movf	??_main+1,w
  3313  0437  00F1               	movwf	can_set_sid@can_node+1
  3314  0438  318C  24E0  3183   	fcall	_can_set_sid
  3315                           
  3316                           ;main.c: 88: break;
  3317  043B  2BD4               	goto	L1
  3318  043C                     l2553:	
  3319                           ;main.c: 89: case 'v':
  3320                           
  3321                           
  3322                           ;main.c: 90: if (buf[2] == 'd') {
  3323  043C  3064               	movlw	100
  3324  043D  0021               	movlb	1	; select bank1
  3325  043E  0629               	xorwf	(main@buf^(0+128)+2),w
  3326  043F  1D03               	btfss	3,2
  3327  0440  2C45               	goto	l2559
  3328                           
  3329                           ;main.c: 91: can_logging_mode(1, 1);
  3330  0441  01F0               	clrf	can_logging_mode@verbose
  3331  0442  0AF0               	incf	can_logging_mode@verbose,f
  3332  0443  3001               	movlw	1
  3333  0444  2C4C               	goto	L2
  3334  0445                     l2559:	
  3335                           ;main.c: 93: } else if (buf[2] == 'v') {
  3336                           
  3337                           ;main.c: 92: echo_back = 1;
  3338                           
  3339  0445  3076               	movlw	118
  3340  0446  0629               	xorwf	(main@buf^(0+128)+2),w
  3341  0447  1D03               	btfss	3,2
  3342  0448  2C53               	goto	l2565
  3343                           
  3344                           ;main.c: 94: can_logging_mode(0, 1);
  3345  0449  01F0               	clrf	can_logging_mode@verbose
  3346  044A  0AF0               	incf	can_logging_mode@verbose,f
  3347  044B  3000               	movlw	0
  3348  044C                     L2:	
  3349  044C  318C  2458  3183   	fcall	_can_logging_mode
  3350                           
  3351                           ;main.c: 95: echo_back = 1;
  3352  044F  0021               	movlb	1	; select bank1
  3353  0450  01A5               	clrf	main@echo_back^(0+128)
  3354  0451  0AA5               	incf	main@echo_back^(0+128),f
  3355                           
  3356                           ;main.c: 96: } else if (buf[2] == 'n') {
  3357  0452  2BD4               	goto	L1
  3358  0453                     l2565:	
  3359  0453  306E               	movlw	110
  3360  0454  0629               	xorwf	(main@buf^(0+128)+2),w
  3361  0455  1D03               	btfss	3,2
  3362  0456  2BD4               	goto	L1
  3363                           
  3364                           ;main.c: 97: can_logging_mode(0, 0);
  3365  0457  01F0               	clrf	can_logging_mode@verbose
  3366  0458  3000               	movlw	0
  3367  0459  318C  2458  3183   	fcall	_can_logging_mode
  3368                           
  3369                           ;main.c: 98: echo_back = 0;
  3370  045C  0021               	movlb	1	; select bank1
  3371  045D  01A5               	clrf	main@echo_back^(0+128)
  3372                           
  3373                           ;main.c: 99: }
  3374                           ;main.c: 100: break;
  3375  045E  2BD4               	goto	L1
  3376  045F                     l2571:	
  3377                           ;main.c: 101: case 'o':
  3378                           
  3379                           
  3380                           ;main.c: 102: if (buf[2] == 'l') {
  3381  045F  306C               	movlw	108
  3382  0460  0629               	xorwf	(main@buf^(0+128)+2),w
  3383  0461  1D03               	btfss	3,2
  3384  0462  2C65               	goto	l2575
  3385                           
  3386                           ;main.c: 103: can_ope_mode(0b01000000);
  3387  0463  3040               	movlw	64
  3388  0464  2C6B               	goto	L3
  3389  0465                     l2575:	
  3390                           ;main.c: 104: } else if (buf[2] == 'n') {
  3391                           
  3392  0465  306E               	movlw	110
  3393  0466  0021               	movlb	1	; select bank1
  3394  0467  0629               	xorwf	(main@buf^(0+128)+2),w
  3395  0468  1D03               	btfss	3,2
  3396  0469  2C6E               	goto	l2579
  3397                           
  3398                           ;main.c: 105: can_ope_mode(0b00000000);
  3399  046A  3000               	movlw	0
  3400  046B                     L3:	
  3401  046B  318E  2668  3183   	fcall	_can_ope_mode
  3402  046E                     l2579:	
  3403                           
  3404                           ;main.c: 106: }
  3405                           ;main.c: 107: if (buf[3] == '\0') {
  3406  046E  0021               	movlb	1	; select bank1
  3407  046F  082A               	movf	(main@buf^(0+128)+3),w
  3408  0470  1D03               	btfss	3,2
  3409  0471  2C75               	goto	l2583
  3410                           
  3411                           ;main.c: 108: output_format.with_sid = 0;
  3412  0472  0020               	movlb	0	; select bank0
  3413  0473  01E6               	clrf	_output_format
  3414  0474  2C80               	goto	l2589
  3415  0475                     l2583:	
  3416                           ;main.c: 110: } else if (buf[3] == 's' && buf[4] == '\0') {
  3417                           
  3418                           ;main.c: 109: output_format.hex_output = 0;
  3419                           
  3420  0475  3073               	movlw	115
  3421  0476  0021               	movlb	1	; select bank1
  3422  0477  062A               	xorwf	(main@buf^(0+128)+3),w
  3423  0478  1D03               	btfss	3,2
  3424  0479  2C82               	goto	l2591
  3425  047A  082B               	movf	(main@buf^(0+128)+4),w
  3426  047B  1D03               	btfss	3,2
  3427  047C  2C82               	goto	l2591
  3428                           
  3429                           ;main.c: 111: output_format.with_sid = 1;
  3430  047D  0020               	movlb	0	; select bank0
  3431  047E  01E6               	clrf	_output_format
  3432  047F  0AE6               	incf	_output_format,f
  3433  0480                     l2589:	
  3434                           
  3435                           ;main.c: 112: output_format.hex_output = 0;
  3436  0480  01E7               	clrf	_output_format+1
  3437                           
  3438                           ;main.c: 113: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3439  0481  2BD4               	goto	L1
  3440  0482                     l2591:	
  3441  0482  3068               	movlw	104
  3442  0483  0021               	movlb	1	; select bank1
  3443  0484  062A               	xorwf	(main@buf^(0+128)+3),w
  3444  0485  1D03               	btfss	3,2
  3445  0486  2BD4               	goto	L1
  3446  0487  082B               	movf	(main@buf^(0+128)+4),w
  3447  0488  1D03               	btfss	3,2
  3448  0489  2BD4               	goto	L1
  3449                           
  3450                           ;main.c: 114: output_format.with_sid = 0;
  3451  048A  0020               	movlb	0	; select bank0
  3452  048B  01E6               	clrf	_output_format
  3453                           
  3454                           ;main.c: 115: output_format.hex_output = 1;
  3455  048C  01E7               	clrf	_output_format+1
  3456  048D  0AE7               	incf	_output_format+1,f
  3457                           
  3458                           ;main.c: 116: }
  3459                           ;main.c: 117: break;
  3460  048E  2BD4               	goto	L1
  3461  048F                     l2599:	
  3462                           ;main.c: 118: case 'b':
  3463                           
  3464                           
  3465                           ;main.c: 119: can_abort();
  3466  048F  318D  2530  3183   	fcall	_can_abort
  3467                           
  3468                           ;main.c: 120: bpr = atoi(&buf[2]);
  3469  0492  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3470  0493  318F  271A  3183   	fcall	_atoi
  3471  0496  0876               	movf	?_atoi,w
  3472  0497  0020               	movlb	0	; select bank0
  3473  0498  00E0               	movwf	??_main
  3474  0499  0860               	movf	??_main,w
  3475  049A  0021               	movlb	1	; select bank1
  3476  049B  00A1               	movwf	main@bpr^(0+128)
  3477                           
  3478                           ;main.c: 121: can_baudrate(bpr);
  3479  049C  0821               	movf	main@bpr^(0+128),w
  3480  049D  318D  255D  3183   	fcall	_can_baudrate
  3481                           
  3482                           ;main.c: 122: break;
  3483  04A0  2BD4               	goto	L1
  3484  04A1                     l2605:	
  3485                           ;main.c: 123: case 'm':
  3486                           
  3487                           
  3488                           ;main.c: 124: case 'f':
  3489                           ;main.c: 125: n = buf[2] - 0x30;
  3490  04A1  0021               	movlb	1	; select bank1
  3491  04A2  0829               	movf	(main@buf^(0+128)+2),w
  3492  04A3  3ED0               	addlw	208
  3493  04A4  0020               	movlb	0	; select bank0
  3494  04A5  00E0               	movwf	??_main
  3495  04A6  0860               	movf	??_main,w
  3496  04A7  0021               	movlb	1	; select bank1
  3497  04A8  00A6               	movwf	main@n^(0+128)
  3498                           
  3499                           ;main.c: 126: mask = atoi(&buf[3]);
  3500  04A9  30AA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3501  04AA  318F  271A  3183   	fcall	_atoi
  3502  04AD  0877               	movf	?_atoi+1,w
  3503  04AE  0021               	movlb	1	; select bank1
  3504  04AF  00A4               	movwf	(main@mask+1)^(0+128)
  3505  04B0  0876               	movf	?_atoi,w
  3506  04B1  00A3               	movwf	main@mask^(0+128)
  3507                           
  3508                           ;main.c: 127: if (cmd == 'm') {
  3509  04B2  306D               	movlw	109
  3510  04B3  0631               	xorwf	main@cmd^(0+128),w
  3511  04B4  1D03               	btfss	3,2
  3512  04B5  2CC6               	goto	l2613
  3513                           
  3514                           ;main.c: 128: can_set_mask(0, n, mask);
  3515  04B6  0826               	movf	main@n^(0+128),w
  3516  04B7  0020               	movlb	0	; select bank0
  3517  04B8  00E0               	movwf	??_main
  3518  04B9  0860               	movf	??_main,w
  3519  04BA  00BF               	movwf	can_set_mask@n
  3520  04BB  0021               	movlb	1	; select bank1
  3521  04BC  0823               	movf	main@mask^(0+128),w
  3522  04BD  0020               	movlb	0	; select bank0
  3523  04BE  00E1               	movwf	??_main+1
  3524  04BF  0861               	movf	??_main+1,w
  3525  04C0  00C0               	movwf	can_set_mask@mask
  3526  04C1  3000               	movlw	0
  3527  04C2  3180  2036  3183   	fcall	_can_set_mask
  3528                           
  3529                           ;main.c: 129: } else if (cmd == 'f') {
  3530  04C5  2BD4               	goto	L1
  3531  04C6                     l2613:	
  3532  04C6  3066               	movlw	102
  3533  04C7  0021               	movlb	1	; select bank1
  3534  04C8  0631               	xorwf	main@cmd^(0+128),w
  3535  04C9  1D03               	btfss	3,2
  3536  04CA  2BD4               	goto	L1
  3537                           
  3538                           ;main.c: 130: can_set_mask(1, n, mask);
  3539  04CB  0826               	movf	main@n^(0+128),w
  3540  04CC  0020               	movlb	0	; select bank0
  3541  04CD  00E0               	movwf	??_main
  3542  04CE  0860               	movf	??_main,w
  3543  04CF  00BF               	movwf	can_set_mask@n
  3544  04D0  0021               	movlb	1	; select bank1
  3545  04D1  0823               	movf	main@mask^(0+128),w
  3546  04D2  0020               	movlb	0	; select bank0
  3547  04D3  00E1               	movwf	??_main+1
  3548  04D4  0861               	movf	??_main+1,w
  3549  04D5  00C0               	movwf	can_set_mask@mask
  3550  04D6  3001               	movlw	1
  3551  04D7  3180  2036  3183   	fcall	_can_set_mask
  3552                           
  3553                           ;main.c: 131: }
  3554                           ;main.c: 132: break;
  3555  04DA  2BD4               	goto	L1
  3556  04DB                     l2617:	
  3557                           ;main.c: 133: case 'a':
  3558                           
  3559                           
  3560                           ;main.c: 134: can_abort();
  3561  04DB  318D  2530  3183   	fcall	_can_abort
  3562                           
  3563                           ;main.c: 135: break;
  3564  04DE  2BD4               	goto	L1
  3565  04DF                     l2619:	
  3566                           ;main.c: 136: case 'd':
  3567                           
  3568                           
  3569                           ;main.c: 137: can_dump_registers();
  3570  04DF  3181  216A  3183   	fcall	_can_dump_registers
  3571                           
  3572                           ;main.c: 138: break;
  3573  04E2  2BD4               	goto	L1
  3574  04E3                     l2621:	
  3575                           ;main.c: 139: case '@':
  3576                           
  3577                           
  3578                           ;main.c: 140: can_send(&buf[1], idx - 1);
  3579  04E3  0021               	movlb	1	; select bank1
  3580  04E4  0832               	movf	main@idx^(0+128),w
  3581  04E5  3EFF               	addlw	255
  3582  04E6  0020               	movlb	0	; select bank0
  3583  04E7  00E0               	movwf	??_main
  3584  04E8  0860               	movf	??_main,w
  3585  04E9  00BB               	movwf	can_send@dlc
  3586  04EA  30A8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3587  04EB  3182  2276  3183   	fcall	_can_send
  3588                           
  3589                           ;main.c: 141: break;
  3590  04EE  2BD4               	goto	L1
  3591  04EF                     l2623:	
  3592                           ;main.c: 142: case 'h':
  3593                           
  3594                           
  3595                           ;main.c: 143: printf("/// UART2CAN HELP (version %s) ///\n", "0.1  March 17, 2018");
  3596  04EF  30B9               	movlw	low (STR_7| (0+32768))
  3597  04F0  0020               	movlb	0	; select bank0
  3598  04F1  00A2               	movwf	printf@f
  3599  04F2  3091               	movlw	high (STR_7| (0+32768))
  3600  04F3  00A3               	movwf	printf@f+1
  3601  04F4  307B               	movlw	low (STR_8| (0+32768))
  3602  04F5  00A4               	movwf	low ((?_printf| 0+2))
  3603  04F6  3092               	movlw	high (STR_8| (0+32768))
  3604  04F7  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3605  04F8  3185  25B3  3183   	fcall	_printf
  3606                           
  3607                           ;main.c: 144: printf("[Set standard identifier] @i<standard identifier>\n");
  3608  04FB  30E4               	movlw	low (STR_9| (0+32768))
  3609  04FC  0020               	movlb	0	; select bank0
  3610  04FD  00A2               	movwf	printf@f
  3611  04FE  3090               	movlw	high (STR_9| (0+32768))
  3612  04FF  00A3               	movwf	printf@f+1
  3613  0500  3185  25B3  3183   	fcall	_printf
  3614                           
  3615                           ;main.c: 145: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3616  0503  3000               	movlw	low (STR_10| (0+32768))
  3617  0504  0020               	movlb	0	; select bank0
  3618  0505  00A2               	movwf	printf@f
  3619  0506  3090               	movlw	high (STR_10| (0+32768))
  3620  0507  00A3               	movwf	printf@f+1
  3621  0508  3185  25B3  3183   	fcall	_printf
  3622                           
  3623                           ;main.c: 146: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3624  050B  30AE               	movlw	low (STR_11| (0+32768))
  3625  050C  0020               	movlb	0	; select bank0
  3626  050D  00A2               	movwf	printf@f
  3627  050E  3090               	movlw	high (STR_11| (0+32768))
  3628  050F  00A3               	movwf	printf@f+1
  3629  0510  3185  25B3  3183   	fcall	_printf
  3630                           
  3631                           ;main.c: 147: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3632  0513  303B               	movlw	low (STR_12| (0+32768))
  3633  0514  0020               	movlb	0	; select bank0
  3634  0515  00A2               	movwf	printf@f
  3635  0516  3090               	movlw	high (STR_12| (0+32768))
  3636  0517  00A3               	movwf	printf@f+1
  3637  0518  3185  25B3  3183   	fcall	_printf
  3638                           
  3639                           ;main.c: 148: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3640  051B  306D               	movlw	low (STR_13| (0+32768))
  3641  051C  0020               	movlb	0	; select bank0
  3642  051D  00A2               	movwf	printf@f
  3643  051E  3091               	movlw	high (STR_13| (0+32768))
  3644  051F  00A3               	movwf	printf@f+1
  3645  0520  3185  25B3  3183   	fcall	_printf
  3646                           
  3647                           ;main.c: 149: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3648  0523  3043               	movlw	low (STR_14| (0+32768))
  3649  0524  0020               	movlb	0	; select bank0
  3650  0525  00A2               	movwf	printf@f
  3651  0526  3091               	movlw	high (STR_14| (0+32768))
  3652  0527  00A3               	movwf	printf@f+1
  3653  0528  3185  25B3  3183   	fcall	_printf
  3654                           
  3655                           ;main.c: 150: printf("[Set baud rate] @b<bpr>\n");
  3656  052B  30F7               	movlw	low (STR_15| (0+32768))
  3657  052C  0020               	movlb	0	; select bank0
  3658  052D  00A2               	movwf	printf@f
  3659  052E  3091               	movlw	high (STR_15| (0+32768))
  3660  052F  00A3               	movwf	printf@f+1
  3661  0530  3185  25B3  3183   	fcall	_printf
  3662                           
  3663                           ;main.c: 151: printf("[Abort all pending transmissions] @a\n");
  3664  0533  3093               	movlw	low (STR_16| (0+32768))
  3665  0534  0020               	movlb	0	; select bank0
  3666  0535  00A2               	movwf	printf@f
  3667  0536  3091               	movlw	high (STR_16| (0+32768))
  3668  0537  00A3               	movwf	printf@f+1
  3669  0538  3185  25B3  3183   	fcall	_printf
  3670                           
  3671                           ;main.c: 152: printf("[Dump registers] @d\n");
  3672  053B  3052               	movlw	low (STR_17| (0+32768))
  3673  053C  0020               	movlb	0	; select bank0
  3674  053D  00A2               	movwf	printf@f
  3675  053E  3092               	movlw	high (STR_17| (0+32768))
  3676  053F  00A3               	movwf	printf@f+1
  3677  0540  3185  25B3  3183   	fcall	_printf
  3678                           
  3679                           ;main.c: 153: printf("[Send message] <message>\n");
  3680  0543  30DD               	movlw	low (STR_18| (0+32768))
  3681  0544  0020               	movlb	0	; select bank0
  3682  0545  00A2               	movwf	printf@f
  3683  0546  3091               	movlw	high (STR_18| (0+32768))
  3684  0547  00A3               	movwf	printf@f+1
  3685  0548  3185  25B3  3183   	fcall	_printf
  3686                           
  3687                           ;main.c: 154: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3688  054B  3075               	movlw	low (STR_19| (0+32768))
  3689  054C  0020               	movlb	0	; select bank0
  3690  054D  00A2               	movwf	printf@f
  3691  054E  3090               	movlw	high (STR_19| (0+32768))
  3692  054F  00A3               	movwf	printf@f+1
  3693  0550  3185  25B3  3183   	fcall	_printf
  3694                           
  3695                           ;main.c: 155: printf("[Receive message] <message> will be output\n");
  3696  0553  3017               	movlw	low (STR_20| (0+32768))
  3697  0554  0020               	movlb	0	; select bank0
  3698  0555  00A2               	movwf	printf@f
  3699  0556  3091               	movlw	high (STR_20| (0+32768))
  3700  0557  00A3               	movwf	printf@f+1
  3701  0558  3185  25B3  3183   	fcall	_printf
  3702                           
  3703                           ;main.c: 156: printf("[Show this help]: @h\n");
  3704  055B  3027               	movlw	low (STR_21| (0+32768))
  3705  055C  0020               	movlb	0	; select bank0
  3706  055D  00A2               	movwf	printf@f
  3707  055E  3092               	movlw	high (STR_21| (0+32768))
  3708  055F  00A3               	movwf	printf@f+1
  3709  0560  3185  25B3  3183   	fcall	_printf
  3710                           
  3711                           ;main.c: 158: }
  3712                           
  3713                           ;main.c: 157: break;
  3714  0563  2BD4               	goto	L1
  3715  0564                     l2627:	
  3716  0564  0021               	movlb	1	; select bank1
  3717  0565  0831               	movf	main@cmd^(0+128),w
  3718                           
  3719                           ; Switch size 1, requested type "space"
  3720                           ; Number of cases is 10, Range of values is 64 to 118
  3721                           ; switch strategies available:
  3722                           ; Name         Instructions Cycles
  3723                           ; simple_byte           31    16 (average)
  3724                           ; direct_byte          119     9 (fixed)
  3725                           ; jumptable            263     9 (fixed)
  3726                           ;	Chosen strategy is simple_byte
  3727  0566  3A40               	xorlw	64	; case 64
  3728  0567  1903               	skipnz
  3729  0568  2CE3               	goto	l2621
  3730  0569  3A21               	xorlw	33	; case 97
  3731  056A  1903               	skipnz
  3732  056B  2CDB               	goto	l2617
  3733  056C  3A03               	xorlw	3	; case 98
  3734  056D  1903               	skipnz
  3735  056E  2C8F               	goto	l2599
  3736  056F  3A06               	xorlw	6	; case 100
  3737  0570  1903               	skipnz
  3738  0571  2CDF               	goto	l2619
  3739  0572  3A02               	xorlw	2	; case 102
  3740  0573  1903               	skipnz
  3741  0574  2CA1               	goto	l2605
  3742  0575  3A0E               	xorlw	14	; case 104
  3743  0576  1903               	skipnz
  3744  0577  2CEF               	goto	l2623
  3745  0578  3A01               	xorlw	1	; case 105
  3746  0579  1903               	skipnz
  3747  057A  2C26               	goto	l2549
  3748  057B  3A04               	xorlw	4	; case 109
  3749  057C  1903               	skipnz
  3750  057D  2CA1               	goto	l2605
  3751  057E  3A02               	xorlw	2	; case 111
  3752  057F  1903               	skipnz
  3753  0580  2C5F               	goto	l2571
  3754  0581  3A19               	xorlw	25	; case 118
  3755  0582  1903               	skipnz
  3756  0583  2C3C               	goto	l2553
  3757  0584  2D8F               	goto	l2631
  3758                           
  3759                           ;main.c: 159: } else {
  3760  0585  2BD4               	goto	L1
  3761  0586                     l2629:	
  3762                           
  3763                           ;main.c: 160: can_send(buf, idx);
  3764  0586  0832               	movf	main@idx^(0+128),w
  3765  0587  0020               	movlb	0	; select bank0
  3766  0588  00E0               	movwf	??_main
  3767  0589  0860               	movf	??_main,w
  3768  058A  00BB               	movwf	can_send@dlc
  3769  058B  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3770  058C  3182  2276  3183   	fcall	_can_send
  3771  058F                     l2631:	
  3772  058F  2BD4               	goto	L1
  3773  0590                     l2633:	
  3774                           ;main.c: 164: } else if (++idx > max_idx) {
  3775                           
  3776                           ;main.c: 161: }
  3777                           ;main.c: 162: idx = 0;
  3778                           
  3779  0590  3001               	movlw	1
  3780  0591  0020               	movlb	0	; select bank0
  3781  0592  00E0               	movwf	??_main
  3782  0593  0860               	movf	??_main,w
  3783  0594  0021               	movlb	1	; select bank1
  3784  0595  07B2               	addwf	main@idx^(0+128),f
  3785  0596  302F               	movlw	low (_max_idx| (0+32768))
  3786  0597  0084               	movwf	4
  3787  0598  3094               	movlw	high (_max_idx| (0+32768))
  3788  0599  0085               	movwf	5
  3789  059A  0800               	movf	0,w	;code access
  3790  059B  0020               	movlb	0	; select bank0
  3791  059C  00E1               	movwf	??_main+1
  3792  059D  0021               	movlb	1	; select bank1
  3793  059E  0832               	movf	main@idx^(0+128),w
  3794  059F  0020               	movlb	0	; select bank0
  3795  05A0  0261               	subwf	??_main+1,w
  3796  05A1  1803               	skipnc
  3797  05A2  2BD6               	goto	l2527
  3798                           
  3799                           ;main.c: 165: buf[idx] = '\0';
  3800  05A3  0021               	movlb	1	; select bank1
  3801  05A4  0832               	movf	main@idx^(0+128),w
  3802  05A5  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3803  05A6  0086               	movwf	6
  3804  05A7  0187               	clrf	7
  3805  05A8  0181               	clrf	1
  3806                           
  3807                           ;main.c: 166: can_send(buf, idx);
  3808  05A9  0832               	movf	main@idx^(0+128),w
  3809  05AA  0020               	movlb	0	; select bank0
  3810  05AB  00E0               	movwf	??_main
  3811  05AC  0860               	movf	??_main,w
  3812  05AD  00BB               	movwf	can_send@dlc
  3813  05AE  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3814  05AF  3182  2276  3183   	fcall	_can_send
  3815  05B2  2BD4               	goto	L1
  3816  05B3                     __end_of_main:	
  3817                           ;main.c: 167: idx = 0;
  3818                           
  3819                           
  3820                           	psect	text1
  3821  0E12                     __ptext1:	
  3822 ;; *************** function _can_status_check *****************
  3823 ;; Defined at:
  3824 ;;		line 249 in file "mcp2515.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  status          1   63[BANK0 ] unsigned char 
  3829 ;;  bytes_writte    1   62[BANK0 ] unsigned char 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      unsigned char 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;Total ram usage:        4 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    5
  3846 ;; This function calls:
  3847 ;;		_SPI_exchange
  3848 ;;		_printf
  3849 ;;		_receive
  3850 ;;		_txf_clear
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _can_status_check
  3858  0E12                     _can_status_check:	
  3859                           
  3860                           ;mcp2515.c: 251: buf[0] = 0b10100000;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3864  0E12  30A0               	movlw	160
  3865  0E13  0020               	movlb	0	; select bank0
  3866  0E14  00DC               	movwf	??_can_status_check
  3867  0E15  085C               	movf	??_can_status_check,w
  3868  0E16  0021               	movlb	1	; select bank1
  3869  0E17  00B3               	movwf	_buf^(0+128)
  3870                           
  3871                           ;mcp2515.c: 252: buf[1] = 0x00;
  3872  0E18  01B4               	clrf	(_buf^(0+128)+1)
  3873                           
  3874                           ;mcp2515.c: 253: uint8_t bytes_written = SPI_exchange(buf, 2);
  3875  0E19  3002               	movlw	2
  3876  0E1A  0020               	movlb	0	; select bank0
  3877  0E1B  00DC               	movwf	??_can_status_check
  3878  0E1C  085C               	movf	??_can_status_check,w
  3879  0E1D  00F8               	movwf	SPI_exchange@len
  3880  0E1E  30B3               	movlw	(low (_buf| 0))& (0+255)
  3881  0E1F  318C  2480  318E   	fcall	_SPI_exchange
  3882  0E22  0020               	movlb	0	; select bank0
  3883  0E23  00DD               	movwf	??_can_status_check+1
  3884  0E24  085D               	movf	??_can_status_check+1,w
  3885  0E25  00DE               	movwf	can_status_check@bytes_written
  3886                           
  3887                           ;mcp2515.c: 254: uint8_t status = buf[1];
  3888  0E26  0021               	movlb	1	; select bank1
  3889  0E27  0834               	movf	(_buf^(0+128)+1),w
  3890  0E28  0020               	movlb	0	; select bank0
  3891  0E29  00DC               	movwf	??_can_status_check
  3892  0E2A  085C               	movf	??_can_status_check,w
  3893  0E2B  00DF               	movwf	can_status_check@status
  3894                           
  3895                           ;mcp2515.c: 255: if (status == 0x00) {
  3896  0E2C  085F               	movf	can_status_check@status,w
  3897  0E2D  1D03               	btfss	3,2
  3898  0E2E  2E31               	goto	l332
  3899                           
  3900                           ;mcp2515.c: 256: return 1;
  3901  0E2F  3001               	movlw	1
  3902  0E30  0008               	return
  3903  0E31                     l332:	
  3904                           ;mcp2515.c: 257: } else if ((status & 0b00000010) > 0) {
  3905                           
  3906  0E31  1CDF               	btfss	can_status_check@status,1
  3907  0E32  2E42               	goto	l335
  3908                           
  3909                           ;mcp2515.c: 258: if (mode.debug) printf("RX1IF is on\n");
  3910  0E33  0862               	movf	_mode,w
  3911  0E34  1903               	btfsc	3,2
  3912  0E35  2E3D               	goto	l336
  3913  0E36  30BA               	movlw	low (STR_36| (0+32768))
  3914  0E37  00A2               	movwf	printf@f
  3915  0E38  3093               	movlw	high (STR_36| (0+32768))
  3916  0E39  00A3               	movwf	printf@f+1
  3917  0E3A  3185  25B3  318E   	fcall	_printf
  3918  0E3D                     l336:	
  3919                           
  3920                           ;mcp2515.c: 259: receive(1);
  3921  0E3D  3001               	movlw	1
  3922  0E3E  3180  20B6  318E   	fcall	_receive
  3923                           
  3924                           ;mcp2515.c: 260: } else if ((status & 0b00000001) > 0) {
  3925  0E41  2E61               	goto	l2289
  3926  0E42                     l335:	
  3927  0E42  1C5F               	btfss	can_status_check@status,0
  3928  0E43  2E53               	goto	l338
  3929                           
  3930                           ;mcp2515.c: 261: if (mode.debug) printf("RX0IF is on\n");
  3931  0E44  0862               	movf	_mode,w
  3932  0E45  1903               	btfsc	3,2
  3933  0E46  2E4E               	goto	l339
  3934  0E47  30AD               	movlw	low (STR_37| (0+32768))
  3935  0E48  00A2               	movwf	printf@f
  3936  0E49  3093               	movlw	high (STR_37| (0+32768))
  3937  0E4A  00A3               	movwf	printf@f+1
  3938  0E4B  3185  25B3  318E   	fcall	_printf
  3939  0E4E                     l339:	
  3940                           
  3941                           ;mcp2515.c: 262: receive(0);
  3942  0E4E  3000               	movlw	0
  3943  0E4F  3180  20B6  318E   	fcall	_receive
  3944                           
  3945                           ;mcp2515.c: 263: } else if ((status & 0b00001000) > 0) {
  3946  0E52  2E61               	goto	l2289
  3947  0E53                     l338:	
  3948  0E53  1DDF               	btfss	can_status_check@status,3
  3949  0E54  2E57               	goto	l341
  3950                           
  3951                           ;mcp2515.c: 264: txf_clear(0);
  3952  0E55  3000               	movlw	0
  3953  0E56  2E5E               	goto	L4
  3954  0E57                     l341:	
  3955                           ;mcp2515.c: 265: } else if ((status & 0b00100000) > 0) {
  3956                           
  3957  0E57  1EDF               	btfss	can_status_check@status,5
  3958  0E58  2E5B               	goto	l343
  3959                           
  3960                           ;mcp2515.c: 266: txf_clear(1);
  3961  0E59  3001               	movlw	1
  3962  0E5A  2E5E               	goto	L4
  3963  0E5B                     l343:	
  3964                           ;mcp2515.c: 267: } else if ((status & 0b10000000) > 0) {
  3965                           
  3966  0E5B  1FDF               	btfss	can_status_check@status,7
  3967  0E5C  2E61               	goto	l2289
  3968                           
  3969                           ;mcp2515.c: 268: txf_clear(2);
  3970  0E5D  3002               	movlw	2
  3971  0E5E                     L4:	
  3972  0E5E  3180  2008  318E   	fcall	_txf_clear
  3973  0E61                     l2289:	
  3974                           
  3975                           ;mcp2515.c: 269: }
  3976                           ;mcp2515.c: 270: if ((status & 0b00010000) > 0) {
  3977  0E61  0020               	movlb	0	; select bank0
  3978  0E62  1E5F               	btfss	can_status_check@status,4
  3979  0E63  2E66               	goto	l2297
  3980                           
  3981                           ;mcp2515.c: 271: return 0;
  3982  0E64  3000               	movlw	0
  3983                           
  3984                           ;mcp2515.c: 272: } else {
  3985  0E65  0008               	return
  3986  0E66                     l2297:	
  3987                           
  3988                           ;mcp2515.c: 273: return 1;
  3989  0E66  3001               	movlw	1
  3990  0E67  0008               	return
  3991  0E68                     __end_of_can_status_check:	
  3992                           
  3993                           	psect	text2
  3994  0008                     __ptext2:	
  3995 ;; *************** function _txf_clear *****************
  3996 ;; Defined at:
  3997 ;;		line 129 in file "mcp2515.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  n               1    wreg     unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  n               1    4[BANK0 ] unsigned char 
  4002 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4003 ;;  mask            1    2[BANK0 ] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      unsigned char 
  4006 ;; Registers used:
  4007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;Total ram usage:        5 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    3
  4020 ;; This function calls:
  4021 ;;		_SPI_exchange
  4022 ;; This function is called by:
  4023 ;;		_can_status_check
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _txf_clear
  4029  0008                     _txf_clear:	
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4033                           ;txf_clear@n stored from wreg
  4034  0008  0020               	movlb	0	; select bank0
  4035  0009  00A4               	movwf	txf_clear@n
  4036                           
  4037                           ;mcp2515.c: 130: uint8_t mask = 0b00000001 << (n + 2);
  4038  000A  3001               	movlw	1
  4039  000B  00A0               	movwf	??_txf_clear
  4040  000C  0824               	movf	txf_clear@n,w
  4041  000D  3E02               	addlw	2
  4042  000E  0A89               	incf	9,f
  4043  000F  2811               	goto	u1824
  4044  0010                     u1825:	
  4045  0010  35A0               	lslf	??_txf_clear,f
  4046  0011                     u1824:	
  4047  0011  0B89               	decfsz	9,f
  4048  0012  2810               	goto	u1825
  4049  0013  0820               	movf	??_txf_clear,w
  4050  0014  00A1               	movwf	??_txf_clear+1
  4051  0015  0821               	movf	??_txf_clear+1,w
  4052  0016  00A2               	movwf	txf_clear@mask
  4053                           
  4054                           ;mcp2515.c: 131: buf[0] =0b00000101;
  4055  0017  3005               	movlw	5
  4056  0018  00A0               	movwf	??_txf_clear
  4057  0019  0820               	movf	??_txf_clear,w
  4058  001A  0021               	movlb	1	; select bank1
  4059  001B  00B3               	movwf	_buf^(0+128)
  4060                           
  4061                           ;mcp2515.c: 132: buf[1] = 0x2c;
  4062  001C  302C               	movlw	44
  4063  001D  0020               	movlb	0	; select bank0
  4064  001E  00A0               	movwf	??_txf_clear
  4065  001F  0820               	movf	??_txf_clear,w
  4066  0020  0021               	movlb	1	; select bank1
  4067  0021  00B4               	movwf	(_buf^(0+128)+1)
  4068                           
  4069                           ;mcp2515.c: 133: buf[2] = mask;
  4070  0022  0020               	movlb	0	; select bank0
  4071  0023  0822               	movf	txf_clear@mask,w
  4072  0024  00A0               	movwf	??_txf_clear
  4073  0025  0820               	movf	??_txf_clear,w
  4074  0026  0021               	movlb	1	; select bank1
  4075  0027  00B5               	movwf	(_buf^(0+128)+2)
  4076                           
  4077                           ;mcp2515.c: 134: buf[3] = 0x00;
  4078  0028  01B6               	clrf	(_buf^(0+128)+3)
  4079                           
  4080                           ;mcp2515.c: 135: uint8_t bytes_written = SPI_exchange(buf, 4);
  4081  0029  3004               	movlw	4
  4082  002A  0020               	movlb	0	; select bank0
  4083  002B  00A0               	movwf	??_txf_clear
  4084  002C  0820               	movf	??_txf_clear,w
  4085  002D  00F8               	movwf	SPI_exchange@len
  4086  002E  30B3               	movlw	(low (_buf| 0))& (0+255)
  4087  002F  318C  2480         	fcall	_SPI_exchange
  4088  0031  0020               	movlb	0	; select bank0
  4089  0032  00A1               	movwf	??_txf_clear+1
  4090  0033  0821               	movf	??_txf_clear+1,w
  4091  0034  00A3               	movwf	txf_clear@bytes_written
  4092                           
  4093                           ;mcp2515.c: 139: return 0;
  4094                           ;	Return value of _txf_clear is never used
  4095                           
  4096                           ;mcp2515.c: 138: } else {
  4097                           
  4098                           ;mcp2515.c: 137: return 1;
  4099                           ;	Return value of _txf_clear is never used
  4100  0035  0008               	return
  4101  0036                     __end_of_txf_clear:	
  4102                           
  4103                           	psect	text3
  4104  00B6                     __ptext3:	
  4105 ;; *************** function _receive *****************
  4106 ;; Defined at:
  4107 ;;		line 146 in file "mcp2515.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  n               1    wreg     unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  n               1   59[BANK0 ] unsigned char 
  4112 ;;  rx_buf         15   40[BANK0 ] unsigned char [15]
  4113 ;;  sid             2   56[BANK0 ] unsigned int 
  4114 ;;  dlc             1   58[BANK0 ] unsigned char 
  4115 ;;  pbuf            1   55[BANK0 ] PTR unsigned char 
  4116 ;;		 -> receive@rx_buf(15), 
  4117 ;;  bytes_read      1   39[BANK0 ] unsigned char 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;Total ram usage:       26 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    4
  4134 ;; This function calls:
  4135 ;;		Absolute function
  4136 ;;		_SPI_exchange
  4137 ;;		_printf
  4138 ;;		_receive_handler
  4139 ;; This function is called by:
  4140 ;;		_can_status_check
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _receive
  4146  00B6                     _receive:	
  4147                           
  4148                           ;incstack = 0
  4149                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4150                           ;receive@n stored from wreg
  4151  00B6  0020               	movlb	0	; select bank0
  4152  00B7  00DB               	movwf	receive@n
  4153                           
  4154                           ;mcp2515.c: 150: uint8_t rx_buf[15];
  4155                           ;mcp2515.c: 153: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  4156  00B8  085B               	movf	receive@n,w
  4157  00B9  3E2B               	addlw	low (_nm| (0+32768))
  4158  00BA  0084               	movwf	4
  4159  00BB  3094               	movlw	high (_nm| (0+32768))
  4160  00BC  1803               	skipnc
  4161  00BD  3E01               	addlw	1
  4162  00BE  0085               	movwf	5
  4163  00BF  0800               	movf	0,w	;code access
  4164  00C0  0709               	addwf	9,w
  4165  00C1  3E90               	addlw	144
  4166  00C2  00C2               	movwf	??_receive
  4167  00C3  0842               	movf	??_receive,w
  4168  00C4  00C8               	movwf	receive@rx_buf
  4169                           
  4170                           ;mcp2515.c: 154: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4171  00C5  300E               	movlw	14
  4172  00C6  00C2               	movwf	??_receive
  4173  00C7  0842               	movf	??_receive,w
  4174  00C8  00F8               	movwf	SPI_exchange@len
  4175  00C9  3048               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4176  00CA  318C  2480  3180   	fcall	_SPI_exchange
  4177  00CD  0020               	movlb	0	; select bank0
  4178  00CE  00C3               	movwf	??_receive+1
  4179  00CF  0843               	movf	??_receive+1,w
  4180  00D0  00C7               	movwf	receive@bytes_read
  4181                           
  4182                           ;mcp2515.c: 155: uint8_t dlc = rx_buf[5];
  4183  00D1  084D               	movf	receive@rx_buf+5,w
  4184  00D2  00C2               	movwf	??_receive
  4185  00D3  0842               	movf	??_receive,w
  4186  00D4  00DA               	movwf	receive@dlc
  4187                           
  4188                           ;mcp2515.c: 156: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4189  00D5  084A               	movf	receive@rx_buf+2,w
  4190  00D6  00C2               	movwf	??_receive
  4191  00D7  3005               	movlw	5
  4192  00D8                     u1835:	
  4193  00D8  36C2               	lsrf	??_receive,f
  4194  00D9  0B89               	decfsz	9,f
  4195  00DA  28D8               	goto	u1835
  4196  00DB  0842               	movf	??_receive,w
  4197  00DC  00C3               	movwf	??_receive+1
  4198  00DD  01C4               	clrf	??_receive+2
  4199  00DE  0849               	movf	receive@rx_buf+1,w
  4200  00DF  00C5               	movwf	??_receive+3
  4201  00E0  01C6               	clrf	??_receive+4
  4202  00E1  35C5               	lslf	??_receive+3,f
  4203  00E2  0DC6               	rlf	??_receive+4,f
  4204  00E3  35C5               	lslf	??_receive+3,f
  4205  00E4  0DC6               	rlf	??_receive+4,f
  4206  00E5  35C5               	lslf	??_receive+3,f
  4207  00E6  0DC6               	rlf	??_receive+4,f
  4208  00E7  0843               	movf	??_receive+1,w
  4209  00E8  0745               	addwf	??_receive+3,w
  4210  00E9  00D8               	movwf	receive@sid
  4211  00EA  0844               	movf	??_receive+2,w
  4212  00EB  3D46               	addwfc	??_receive+4,w
  4213  00EC  00D9               	movwf	receive@sid+1
  4214                           
  4215                           ;mcp2515.c: 157: sid = sid & 0b0000011111111111;
  4216  00ED  30FF               	movlw	255
  4217  00EE  0558               	andwf	receive@sid,w
  4218  00EF  00D8               	movwf	receive@sid
  4219  00F0  3007               	movlw	7
  4220  00F1  0559               	andwf	receive@sid+1,w
  4221  00F2  00D9               	movwf	receive@sid+1
  4222                           
  4223                           ;mcp2515.c: 158: rx_buf[6+dlc] = '\0';
  4224  00F3  085A               	movf	receive@dlc,w
  4225  00F4  3E06               	addlw	6
  4226  00F5  3E48               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4227  00F6  0086               	movwf	6
  4228  00F7  0187               	clrf	7
  4229  00F8  0181               	clrf	1
  4230                           
  4231                           ;mcp2515.c: 160: if (mode.debug) {
  4232  00F9  0862               	movf	_mode,w
  4233  00FA  1903               	btfsc	3,2
  4234  00FB  2953               	goto	l2191
  4235                           
  4236                           ;mcp2515.c: 161: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4237  00FC  30B2               	movlw	low (STR_25| (0+32768))
  4238  00FD  00A2               	movwf	printf@f
  4239  00FE  3092               	movlw	high (STR_25| (0+32768))
  4240  00FF  00A3               	movwf	printf@f+1
  4241  0100  085B               	movf	receive@n,w
  4242  0101  00C2               	movwf	??_receive
  4243  0102  01C3               	clrf	??_receive+1
  4244  0103  0842               	movf	??_receive,w
  4245  0104  00A4               	movwf	?_printf+2
  4246  0105  0843               	movf	??_receive+1,w
  4247  0106  00A5               	movwf	?_printf+3
  4248  0107  0849               	movf	receive@rx_buf+1,w
  4249  0108  00C4               	movwf	??_receive+2
  4250  0109  01C5               	clrf	??_receive+3
  4251  010A  0844               	movf	??_receive+2,w
  4252  010B  00A6               	movwf	?_printf+4
  4253  010C  0845               	movf	??_receive+3,w
  4254  010D  00A7               	movwf	?_printf+5
  4255  010E  3185  25B3  3180   	fcall	_printf
  4256                           
  4257                           ;mcp2515.c: 162: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4258  0111  30D4               	movlw	low (STR_26| (0+32768))
  4259  0112  0020               	movlb	0	; select bank0
  4260  0113  00A2               	movwf	printf@f
  4261  0114  3092               	movlw	high (STR_26| (0+32768))
  4262  0115  00A3               	movwf	printf@f+1
  4263  0116  085B               	movf	receive@n,w
  4264  0117  00C2               	movwf	??_receive
  4265  0118  01C3               	clrf	??_receive+1
  4266  0119  0842               	movf	??_receive,w
  4267  011A  00A4               	movwf	?_printf+2
  4268  011B  0843               	movf	??_receive+1,w
  4269  011C  00A5               	movwf	?_printf+3
  4270  011D  084A               	movf	receive@rx_buf+2,w
  4271  011E  00C4               	movwf	??_receive+2
  4272  011F  01C5               	clrf	??_receive+3
  4273  0120  0844               	movf	??_receive+2,w
  4274  0121  00A6               	movwf	?_printf+4
  4275  0122  0845               	movf	??_receive+3,w
  4276  0123  00A7               	movwf	?_printf+5
  4277  0124  3185  25B3  3180   	fcall	_printf
  4278                           
  4279                           ;mcp2515.c: 163: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4280  0127  30F6               	movlw	low (STR_27| (0+32768))
  4281  0128  0020               	movlb	0	; select bank0
  4282  0129  00A2               	movwf	printf@f
  4283  012A  3092               	movlw	high (STR_27| (0+32768))
  4284  012B  00A3               	movwf	printf@f+1
  4285  012C  085B               	movf	receive@n,w
  4286  012D  00C2               	movwf	??_receive
  4287  012E  01C3               	clrf	??_receive+1
  4288  012F  0842               	movf	??_receive,w
  4289  0130  00A4               	movwf	?_printf+2
  4290  0131  0843               	movf	??_receive+1,w
  4291  0132  00A5               	movwf	?_printf+3
  4292  0133  084D               	movf	receive@rx_buf+5,w
  4293  0134  00C4               	movwf	??_receive+2
  4294  0135  01C5               	clrf	??_receive+3
  4295  0136  0844               	movf	??_receive+2,w
  4296  0137  00A6               	movwf	?_printf+4
  4297  0138  0845               	movf	??_receive+3,w
  4298  0139  00A7               	movwf	?_printf+5
  4299  013A  3185  25B3  3180   	fcall	_printf
  4300                           
  4301                           ;mcp2515.c: 164: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4302  013D  3056               	movlw	low (STR_28| (0+32768))
  4303  013E  0020               	movlb	0	; select bank0
  4304  013F  00A2               	movwf	printf@f
  4305  0140  3093               	movlw	high (STR_28| (0+32768))
  4306  0141  00A3               	movwf	printf@f+1
  4307  0142  085B               	movf	receive@n,w
  4308  0143  00C2               	movwf	??_receive
  4309  0144  01C3               	clrf	??_receive+1
  4310  0145  0842               	movf	??_receive,w
  4311  0146  00A4               	movwf	?_printf+2
  4312  0147  0843               	movf	??_receive+1,w
  4313  0148  00A5               	movwf	?_printf+3
  4314  0149  084E               	movf	receive@rx_buf+6,w
  4315  014A  00C4               	movwf	??_receive+2
  4316  014B  01C5               	clrf	??_receive+3
  4317  014C  0844               	movf	??_receive+2,w
  4318  014D  00A6               	movwf	?_printf+4
  4319  014E  0845               	movf	??_receive+3,w
  4320  014F  00A7               	movwf	?_printf+5
  4321  0150  3185  25B3  3180   	fcall	_printf
  4322  0153                     l2191:	
  4323                           
  4324                           ;mcp2515.c: 165: }
  4325                           ;mcp2515.c: 168: uint8_t *pbuf = &rx_buf[6];
  4326  0153  304E               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4327  0154  0020               	movlb	0	; select bank0
  4328  0155  00C2               	movwf	??_receive
  4329  0156  0842               	movf	??_receive,w
  4330  0157  00D7               	movwf	receive@pbuf
  4331                           
  4332                           ;mcp2515.c: 169: handler(sid, pbuf, dlc);
  4333  0158  0858               	movf	receive@sid,w
  4334  0159  00C2               	movwf	??_receive
  4335  015A  0842               	movf	??_receive,w
  4336  015B  00BB               	movwf	receive_handler@sid
  4337  015C  0857               	movf	receive@pbuf,w
  4338  015D  00C3               	movwf	??_receive+1
  4339  015E  0843               	movf	??_receive+1,w
  4340  015F  00BC               	movwf	receive_handler@pbuf
  4341  0160  085A               	movf	receive@dlc,w
  4342  0161  00C4               	movwf	??_receive+2
  4343  0162  0844               	movf	??_receive+2,w
  4344  0163  00BD               	movwf	receive_handler@dlc
  4345  0164  086A               	movf	_handler+1,w
  4346  0165  008A               	movwf	10
  4347  0166  0869               	movf	_handler,w
  4348  0167  000A               	callw
  4349  0168  3180               	pagesel	$
  4350  0169  0008               	return
  4351  016A                     __end_of_receive:	
  4352                           
  4353                           	psect	text4
  4354  0EBF                     __ptext4:	
  4355 ;; *************** function _receive_handler *****************
  4356 ;; Defined at:
  4357 ;;		line 30 in file "main.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;  sid             1   27[BANK0 ] unsigned char 
  4360 ;;  pbuf            1   28[BANK0 ] PTR unsigned char 
  4361 ;;		 -> receive@rx_buf(15), 
  4362 ;;  dlc             1   29[BANK0 ] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  i               1   33[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4374 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;Total ram usage:        7 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    3
  4381 ;; This function calls:
  4382 ;;		_printf
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;;		_receive
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _receive_handler
  4391  0EBF                     _receive_handler:	
  4392                           
  4393                           ;main.c: 31: uint8_t i;
  4394                           ;main.c: 32: if (output_format.with_sid) {
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4398  0EBF  0020               	movlb	0	; select bank0
  4399  0EC0  0866               	movf	_output_format,w
  4400  0EC1  1903               	btfsc	3,2
  4401  0EC2  2ED5               	goto	l2071
  4402                           
  4403                           ;main.c: 33: printf("%d,%s\n", sid, pbuf);
  4404  0EC3  3004               	movlw	low (STR_1| (0+32768))
  4405  0EC4  00A2               	movwf	printf@f
  4406  0EC5  3094               	movlw	high (STR_1| (0+32768))
  4407  0EC6  00A3               	movwf	printf@f+1
  4408  0EC7  083B               	movf	receive_handler@sid,w
  4409  0EC8  00BE               	movwf	??_receive_handler
  4410  0EC9  01BF               	clrf	??_receive_handler+1
  4411  0ECA  083E               	movf	??_receive_handler,w
  4412  0ECB  00A4               	movwf	?_printf+2
  4413  0ECC  083F               	movf	??_receive_handler+1,w
  4414  0ECD  00A5               	movwf	?_printf+3
  4415  0ECE  083C               	movf	receive_handler@pbuf,w
  4416  0ECF  00A6               	movwf	low ((?_printf| 0+4))
  4417  0ED0  3000               	movlw	0
  4418  0ED1  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4419  0ED2  3185  25B3         	fcall	_printf
  4420                           
  4421                           ;main.c: 34: } else if (output_format.hex_output) {
  4422  0ED4  0008               	return
  4423  0ED5                     l2071:	
  4424  0ED5  0020               	movlb	0	; select bank0
  4425  0ED6  0867               	movf	_output_format+1,w
  4426  0ED7  1903               	btfsc	3,2
  4427  0ED8  2F0E               	goto	l2085
  4428                           
  4429                           ;main.c: 35: printf("%02x:", sid);
  4430  0ED9  3011               	movlw	low (STR_2| (0+32768))
  4431  0EDA  00A2               	movwf	printf@f
  4432  0EDB  3094               	movlw	high (STR_2| (0+32768))
  4433  0EDC  00A3               	movwf	printf@f+1
  4434  0EDD  083B               	movf	receive_handler@sid,w
  4435  0EDE  00BE               	movwf	??_receive_handler
  4436  0EDF  01BF               	clrf	??_receive_handler+1
  4437  0EE0  083E               	movf	??_receive_handler,w
  4438  0EE1  00A4               	movwf	?_printf+2
  4439  0EE2  083F               	movf	??_receive_handler+1,w
  4440  0EE3  00A5               	movwf	?_printf+3
  4441  0EE4  3185  25B3  318E   	fcall	_printf
  4442                           
  4443                           ;main.c: 36: for(i=0; i<dlc; i++) {
  4444  0EE7  0020               	movlb	0	; select bank0
  4445  0EE8  01C1               	clrf	receive_handler@i
  4446  0EE9                     l2081:	
  4447  0EE9  083D               	movf	receive_handler@dlc,w
  4448  0EEA  0241               	subwf	receive_handler@i,w
  4449  0EEB  1803               	btfsc	3,0
  4450  0EEC  2F07               	goto	l2083
  4451                           
  4452                           ;main.c: 37: printf(" %02x", pbuf[i]);
  4453  0EED  3017               	movlw	low (STR_3| (0+32768))
  4454  0EEE  00A2               	movwf	printf@f
  4455  0EEF  3094               	movlw	high (STR_3| (0+32768))
  4456  0EF0  00A3               	movwf	printf@f+1
  4457  0EF1  0841               	movf	receive_handler@i,w
  4458  0EF2  073C               	addwf	receive_handler@pbuf,w
  4459  0EF3  00BE               	movwf	??_receive_handler
  4460  0EF4  083E               	movf	??_receive_handler,w
  4461  0EF5  0086               	movwf	6
  4462  0EF6  0187               	clrf	7
  4463  0EF7  0801               	movf	1,w
  4464  0EF8  00BF               	movwf	??_receive_handler+1
  4465  0EF9  01C0               	clrf	??_receive_handler+2
  4466  0EFA  083F               	movf	??_receive_handler+1,w
  4467  0EFB  00A4               	movwf	?_printf+2
  4468  0EFC  0840               	movf	??_receive_handler+2,w
  4469  0EFD  00A5               	movwf	?_printf+3
  4470  0EFE  3185  25B3  318E   	fcall	_printf
  4471  0F01  3001               	movlw	1
  4472  0F02  0020               	movlb	0	; select bank0
  4473  0F03  00BE               	movwf	??_receive_handler
  4474  0F04  083E               	movf	??_receive_handler,w
  4475  0F05  07C1               	addwf	receive_handler@i,f
  4476  0F06  2EE9               	goto	l2081
  4477  0F07                     l2083:	
  4478                           
  4479                           ;main.c: 38: }
  4480                           ;main.c: 39: printf("\n");
  4481  0F07  3020               	movlw	low ((STR_38+3)| (0+32768))
  4482  0F08  00A2               	movwf	printf@f
  4483  0F09  3094               	movlw	high ((STR_38+3)| (0+32768))
  4484  0F0A  00A3               	movwf	printf@f+1
  4485  0F0B  3185  25B3         	fcall	_printf
  4486                           
  4487                           ;main.c: 40: } else {
  4488  0F0D  0008               	return
  4489  0F0E                     l2085:	
  4490                           
  4491                           ;main.c: 41: printf("%s\n", pbuf);
  4492  0F0E  309D               	movlw	low ((STR_35+14)| (0+32768))
  4493  0F0F  0020               	movlb	0	; select bank0
  4494  0F10  00A2               	movwf	printf@f
  4495  0F11  3092               	movlw	high ((STR_35+14)| (0+32768))
  4496  0F12  00A3               	movwf	printf@f+1
  4497  0F13  083C               	movf	receive_handler@pbuf,w
  4498  0F14  00A4               	movwf	low ((?_printf| 0+2))
  4499  0F15  3000               	movlw	0
  4500  0F16  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4501  0F17  3185  25B3         	fcall	_printf
  4502  0F19  0008               	return
  4503  0F1A                     __end_of_receive_handler:	
  4504                           
  4505                           	psect	text5
  4506  0036                     __ptext5:	
  4507 ;; *************** function _can_set_mask *****************
  4508 ;; Defined at:
  4509 ;;		line 105 in file "mcp2515.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  cmd             1    wreg     unsigned char 
  4512 ;;  n               1   31[BANK0 ] unsigned char 
  4513 ;;  mask            1   32[BANK0 ] unsigned char 
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;  cmd             1   41[BANK0 ] unsigned char 
  4516 ;;  mask_sidl       1   43[BANK0 ] unsigned char 
  4517 ;;  mask_sidh       1   42[BANK0 ] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4527 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;Total ram usage:       13 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    4
  4534 ;; This function calls:
  4535 ;;		_SPI_exchange
  4536 ;;		_can_ope_mode
  4537 ;;		_printf
  4538 ;; This function is called by:
  4539 ;;		_main
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _can_set_mask
  4545  0036                     _can_set_mask:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4549                           ;can_set_mask@cmd stored from wreg
  4550  0036  0020               	movlb	0	; select bank0
  4551  0037  00C9               	movwf	can_set_mask@cmd
  4552                           
  4553                           ;mcp2515.c: 106: can_ope_mode(0b10000000);
  4554  0038  3080               	movlw	128
  4555  0039  318E  2668  3180   	fcall	_can_ope_mode
  4556                           
  4557                           ;mcp2515.c: 107: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4558  003C  0020               	movlb	0	; select bank0
  4559  003D  0840               	movf	can_set_mask@mask,w
  4560  003E  00C1               	movwf	??_can_set_mask
  4561  003F  3003               	movlw	3
  4562  0040                     u2025:	
  4563  0040  36C1               	lsrf	??_can_set_mask,f
  4564  0041  0B89               	decfsz	9,f
  4565  0042  2840               	goto	u2025
  4566  0043  0841               	movf	??_can_set_mask,w
  4567  0044  00C2               	movwf	??_can_set_mask+1
  4568  0045  0842               	movf	??_can_set_mask+1,w
  4569  0046  00CA               	movwf	can_set_mask@mask_sidh
  4570                           
  4571                           ;mcp2515.c: 108: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4572  0047  0840               	movf	can_set_mask@mask,w
  4573  0048  3907               	andlw	7
  4574  0049  00C1               	movwf	??_can_set_mask
  4575  004A  3004               	movlw	4
  4576  004B                     u2035:	
  4577  004B  35C1               	lslf	??_can_set_mask,f
  4578  004C  3EFF               	addlw	-1
  4579  004D  1D03               	skipz
  4580  004E  284B               	goto	u2035
  4581  004F  3541               	lslf	??_can_set_mask,w
  4582  0050  00C2               	movwf	??_can_set_mask+1
  4583  0051  0842               	movf	??_can_set_mask+1,w
  4584  0052  00CB               	movwf	can_set_mask@mask_sidl
  4585                           
  4586                           ;mcp2515.c: 109: if (mode.debug) {
  4587  0053  0862               	movf	_mode,w
  4588  0054  1903               	btfsc	3,2
  4589  0055  287A               	goto	l2393
  4590                           
  4591                           ;mcp2515.c: 110: if (cmd == 0) {
  4592  0056  0849               	movf	can_set_mask@cmd,w
  4593  0057  1D03               	btfss	3,2
  4594  0058  285D               	goto	l2391
  4595                           
  4596                           ;mcp2515.c: 111: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4597  0059  303D               	movlw	low (STR_23| (0+32768))
  4598  005A  00A2               	movwf	printf@f
  4599  005B  3092               	movlw	high (STR_23| (0+32768))
  4600  005C  2861               	goto	L6
  4601  005D                     l2391:	
  4602                           ;mcp2515.c: 112: } else {
  4603                           
  4604                           
  4605                           ;mcp2515.c: 113: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4606  005D  3010               	movlw	low (STR_24| (0+32768))
  4607  005E  0020               	movlb	0	; select bank0
  4608  005F  00A2               	movwf	printf@f
  4609  0060  3092               	movlw	high (STR_24| (0+32768))
  4610  0061                     L6:	
  4611  0061  00A3               	movwf	printf@f+1
  4612  0062  083F               	movf	can_set_mask@n,w
  4613  0063  00C1               	movwf	??_can_set_mask
  4614  0064  01C2               	clrf	??_can_set_mask+1
  4615  0065  0841               	movf	??_can_set_mask,w
  4616  0066  00A4               	movwf	?_printf+2
  4617  0067  0842               	movf	??_can_set_mask+1,w
  4618  0068  00A5               	movwf	?_printf+3
  4619  0069  084A               	movf	can_set_mask@mask_sidh,w
  4620  006A  00C3               	movwf	??_can_set_mask+2
  4621  006B  01C4               	clrf	??_can_set_mask+3
  4622  006C  0843               	movf	??_can_set_mask+2,w
  4623  006D  00A6               	movwf	?_printf+4
  4624  006E  0844               	movf	??_can_set_mask+3,w
  4625  006F  00A7               	movwf	?_printf+5
  4626  0070  084B               	movf	can_set_mask@mask_sidl,w
  4627  0071  00C5               	movwf	??_can_set_mask+4
  4628  0072  01C6               	clrf	??_can_set_mask+5
  4629  0073  0845               	movf	??_can_set_mask+4,w
  4630  0074  00A8               	movwf	?_printf+6
  4631  0075  0846               	movf	??_can_set_mask+5,w
  4632  0076  00A9               	movwf	?_printf+7
  4633  0077  3185  25B3  3180   	fcall	_printf
  4634  007A                     l2393:	
  4635                           
  4636                           ;mcp2515.c: 114: }
  4637                           ;mcp2515.c: 115: }
  4638                           ;mcp2515.c: 116: buf[0] = 0b00000010;
  4639  007A  3002               	movlw	2
  4640  007B  0020               	movlb	0	; select bank0
  4641  007C  00C1               	movwf	??_can_set_mask
  4642  007D  0841               	movf	??_can_set_mask,w
  4643  007E  0021               	movlb	1	; select bank1
  4644  007F  00B3               	movwf	_buf^(0+128)
  4645                           
  4646                           ;mcp2515.c: 117: buf[1] = (cmd == 0)? rxmnsidh[n]: rxfnsidh[n];
  4647  0080  0020               	movlb	0	; select bank0
  4648  0081  0849               	movf	can_set_mask@cmd,w
  4649  0082  1903               	btfsc	3,2
  4650  0083  2889               	goto	l2399
  4651  0084  083F               	movf	can_set_mask@n,w
  4652  0085  3E0B               	addlw	low (_rxfnsidh| (0+32768))
  4653  0086  0084               	movwf	4
  4654  0087  3094               	movlw	high (_rxfnsidh| (0+32768))
  4655  0088  288D               	goto	L5
  4656  0089                     l2399:	
  4657  0089  083F               	movf	can_set_mask@n,w
  4658  008A  3E2D               	addlw	low (_rxmnsidh| (0+32768))
  4659  008B  0084               	movwf	4
  4660  008C  3094               	movlw	high (_rxmnsidh| (0+32768))
  4661  008D                     L5:	
  4662  008D  1803               	skipnc
  4663  008E  3E01               	addlw	1
  4664  008F  0085               	movwf	5
  4665  0090  0800               	movf	0,w	;code access
  4666  0091  00C1               	movwf	??_can_set_mask
  4667  0092  01C2               	clrf	??_can_set_mask+1
  4668  0093  0841               	movf	??_can_set_mask,w
  4669  0094  00C7               	movwf	_can_set_mask$492
  4670  0095  0842               	movf	??_can_set_mask+1,w
  4671  0096  00C8               	movwf	_can_set_mask$492+1
  4672  0097  0847               	movf	_can_set_mask$492,w
  4673  0098  00C1               	movwf	??_can_set_mask
  4674  0099  0841               	movf	??_can_set_mask,w
  4675  009A  0021               	movlb	1	; select bank1
  4676  009B  00B4               	movwf	(_buf^(0+128)+1)
  4677                           
  4678                           ;mcp2515.c: 118: buf[2] = mask_sidh;
  4679  009C  0020               	movlb	0	; select bank0
  4680  009D  084A               	movf	can_set_mask@mask_sidh,w
  4681  009E  00C1               	movwf	??_can_set_mask
  4682  009F  0841               	movf	??_can_set_mask,w
  4683  00A0  0021               	movlb	1	; select bank1
  4684  00A1  00B5               	movwf	(_buf^(0+128)+2)
  4685                           
  4686                           ;mcp2515.c: 119: buf[3] = mask_sidl;
  4687  00A2  0020               	movlb	0	; select bank0
  4688  00A3  084B               	movf	can_set_mask@mask_sidl,w
  4689  00A4  00C1               	movwf	??_can_set_mask
  4690  00A5  0841               	movf	??_can_set_mask,w
  4691  00A6  0021               	movlb	1	; select bank1
  4692  00A7  00B6               	movwf	(_buf^(0+128)+3)
  4693                           
  4694                           ;mcp2515.c: 121: SPI_exchange(buf, 4);
  4695  00A8  3004               	movlw	4
  4696  00A9  0020               	movlb	0	; select bank0
  4697  00AA  00C1               	movwf	??_can_set_mask
  4698  00AB  0841               	movf	??_can_set_mask,w
  4699  00AC  00F8               	movwf	SPI_exchange@len
  4700  00AD  30B3               	movlw	(low (_buf| 0))& (0+255)
  4701  00AE  318C  2480  3180   	fcall	_SPI_exchange
  4702                           
  4703                           ;mcp2515.c: 123: can_ope_mode(operation_mode);
  4704  00B1  0020               	movlb	0	; select bank0
  4705  00B2  0868               	movf	_operation_mode,w
  4706  00B3  318E  2668         	fcall	_can_ope_mode
  4707  00B5  0008               	return
  4708  00B6                     __end_of_can_set_mask:	
  4709                           
  4710                           	psect	text6
  4711  0276                     __ptext6:	
  4712 ;; *************** function _can_send *****************
  4713 ;; Defined at:
  4714 ;;		line 175 in file "mcp2515.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  data_buf        1    wreg     PTR unsigned char 
  4717 ;;		 -> main@buf(9), 
  4718 ;;  dlc             1   27[BANK0 ] unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  data_buf        1   35[BANK0 ] PTR unsigned char 
  4721 ;;		 -> main@buf(9), 
  4722 ;;  n               1   37[BANK0 ] unsigned char 
  4723 ;;  i               1   36[BANK0 ] unsigned char 
  4724 ;;  status          1   34[BANK0 ] unsigned char 
  4725 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  4726 ;;  len             1   32[BANK0 ] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4736 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;Total ram usage:       11 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    3
  4743 ;; This function calls:
  4744 ;;		_SPI_exchange
  4745 ;;		_printf
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _can_send
  4753  0276                     _can_send:	
  4754                           
  4755                           ;incstack = 0
  4756                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4757                           ;can_send@data_buf stored from wreg
  4758  0276  0020               	movlb	0	; select bank0
  4759  0277  00C3               	movwf	can_send@data_buf
  4760                           
  4761                           ;mcp2515.c: 176: uint8_t i;
  4762                           ;mcp2515.c: 177: uint8_t n = 0;
  4763  0278  01C5               	clrf	can_send@n
  4764                           
  4765                           ;mcp2515.c: 179: buf[0] = 0b10100000;
  4766  0279  30A0               	movlw	160
  4767  027A  00BC               	movwf	??_can_send
  4768  027B  083C               	movf	??_can_send,w
  4769  027C  0021               	movlb	1	; select bank1
  4770  027D  00B3               	movwf	_buf^(0+128)
  4771                           
  4772                           ;mcp2515.c: 180: buf[1] = 0x00;
  4773  027E  01B4               	clrf	(_buf^(0+128)+1)
  4774                           
  4775                           ;mcp2515.c: 181: uint8_t bytes_written = SPI_exchange(buf, 2);
  4776  027F  3002               	movlw	2
  4777  0280  0020               	movlb	0	; select bank0
  4778  0281  00BC               	movwf	??_can_send
  4779  0282  083C               	movf	??_can_send,w
  4780  0283  00F8               	movwf	SPI_exchange@len
  4781  0284  30B3               	movlw	(low (_buf| 0))& (0+255)
  4782  0285  318C  2480  3182   	fcall	_SPI_exchange
  4783  0288  0020               	movlb	0	; select bank0
  4784  0289  00BD               	movwf	??_can_send+1
  4785  028A  083D               	movf	??_can_send+1,w
  4786  028B  00C1               	movwf	can_send@bytes_written
  4787                           
  4788                           ;mcp2515.c: 182: uint8_t status = buf[1];
  4789  028C  0021               	movlb	1	; select bank1
  4790  028D  0834               	movf	(_buf^(0+128)+1),w
  4791  028E  0020               	movlb	0	; select bank0
  4792  028F  00BC               	movwf	??_can_send
  4793  0290  083C               	movf	??_can_send,w
  4794  0291  00C2               	movwf	can_send@status
  4795                           
  4796                           ;mcp2515.c: 183: if ((status & 0b01000000) == 0) {
  4797  0292  1B42               	btfsc	can_send@status,6
  4798  0293  2AA4               	goto	l312
  4799                           
  4800                           ;mcp2515.c: 184: if (mode.debug) printf("TXB2 is idle\n");
  4801  0294  0862               	movf	_mode,w
  4802  0295  1903               	btfsc	3,2
  4803  0296  2A9E               	goto	l2429
  4804  0297  309F               	movlw	low (STR_29| (0+32768))
  4805  0298  00A2               	movwf	printf@f
  4806  0299  3093               	movlw	high (STR_29| (0+32768))
  4807  029A  00A3               	movwf	printf@f+1
  4808  029B  3185  25B3  3182   	fcall	_printf
  4809  029E                     l2429:	
  4810                           
  4811                           ;mcp2515.c: 185: n = 2;
  4812  029E  3002               	movlw	2
  4813  029F  0020               	movlb	0	; select bank0
  4814  02A0  00BC               	movwf	??_can_send
  4815  02A1  083C               	movf	??_can_send,w
  4816  02A2  00C5               	movwf	can_send@n
  4817                           
  4818                           ;mcp2515.c: 186: } else if ((status & 0b00010000) == 0) {
  4819  02A3  2AC2               	goto	l2443
  4820  02A4                     l312:	
  4821  02A4  1A42               	btfsc	can_send@status,4
  4822  02A5  2AB4               	goto	l315
  4823                           
  4824                           ;mcp2515.c: 187: if (mode.debug) printf("TXB1 is idle\n");
  4825  02A6  0862               	movf	_mode,w
  4826  02A7  1903               	btfsc	3,2
  4827  02A8  2AB0               	goto	l2435
  4828  02A9  3091               	movlw	low (STR_30| (0+32768))
  4829  02AA  00A2               	movwf	printf@f
  4830  02AB  3093               	movlw	high (STR_30| (0+32768))
  4831  02AC  00A3               	movwf	printf@f+1
  4832  02AD  3185  25B3  3182   	fcall	_printf
  4833  02B0                     l2435:	
  4834                           
  4835                           ;mcp2515.c: 188: n = 1;
  4836  02B0  0020               	movlb	0	; select bank0
  4837  02B1  01C5               	clrf	can_send@n
  4838  02B2  0AC5               	incf	can_send@n,f
  4839                           
  4840                           ;mcp2515.c: 189: } else if ((status & 0b00000100) == 0) {
  4841  02B3  2AC2               	goto	l2443
  4842  02B4                     l315:	
  4843  02B4  1942               	btfsc	can_send@status,2
  4844  02B5  2AC2               	goto	l2443
  4845                           
  4846                           ;mcp2515.c: 190: if (mode.debug) printf("TXB0 is idle\n");
  4847  02B6  0862               	movf	_mode,w
  4848  02B7  1903               	btfsc	3,2
  4849  02B8  2AC0               	goto	l2441
  4850  02B9  3083               	movlw	low (STR_31| (0+32768))
  4851  02BA  00A2               	movwf	printf@f
  4852  02BB  3093               	movlw	high (STR_31| (0+32768))
  4853  02BC  00A3               	movwf	printf@f+1
  4854  02BD  3185  25B3  3182   	fcall	_printf
  4855  02C0                     l2441:	
  4856                           
  4857                           ;mcp2515.c: 191: n = 0;
  4858  02C0  0020               	movlb	0	; select bank0
  4859  02C1  01C5               	clrf	can_send@n
  4860  02C2                     l2443:	
  4861                           
  4862                           ;mcp2515.c: 192: }
  4863                           ;mcp2515.c: 198: buf[0] = 0b01000000 + abc[n];
  4864  02C2  0845               	movf	can_send@n,w
  4865  02C3  3E25               	addlw	low (_abc| (0+32768))
  4866  02C4  0084               	movwf	4
  4867  02C5  3094               	movlw	high (_abc| (0+32768))
  4868  02C6  1803               	skipnc
  4869  02C7  3E01               	addlw	1
  4870  02C8  0085               	movwf	5
  4871  02C9  0800               	movf	0,w	;code access
  4872  02CA  3E40               	addlw	64
  4873  02CB  00BC               	movwf	??_can_send
  4874  02CC  083C               	movf	??_can_send,w
  4875  02CD  0021               	movlb	1	; select bank1
  4876  02CE  00B3               	movwf	_buf^(0+128)
  4877                           
  4878                           ;mcp2515.c: 200: buf[1] = sid.sidh;
  4879  02CF  0020               	movlb	0	; select bank0
  4880  02D0  0864               	movf	_sid,w
  4881  02D1  00BC               	movwf	??_can_send
  4882  02D2  083C               	movf	??_can_send,w
  4883  02D3  0021               	movlb	1	; select bank1
  4884  02D4  00B4               	movwf	(_buf^(0+128)+1)
  4885                           
  4886                           ;mcp2515.c: 202: buf[2] = sid.sidl;
  4887  02D5  0020               	movlb	0	; select bank0
  4888  02D6  0865               	movf	_sid+1,w
  4889  02D7  00BC               	movwf	??_can_send
  4890  02D8  083C               	movf	??_can_send,w
  4891  02D9  0021               	movlb	1	; select bank1
  4892  02DA  00B5               	movwf	(_buf^(0+128)+2)
  4893                           
  4894                           ;mcp2515.c: 204: buf[3] = 0;
  4895  02DB  01B6               	clrf	(_buf^(0+128)+3)
  4896                           
  4897                           ;mcp2515.c: 206: buf[4] = 0;
  4898  02DC  01B7               	clrf	(_buf^(0+128)+4)
  4899                           
  4900                           ;mcp2515.c: 208: buf[5] = dlc;
  4901  02DD  0020               	movlb	0	; select bank0
  4902  02DE  083B               	movf	can_send@dlc,w
  4903  02DF  00BC               	movwf	??_can_send
  4904  02E0  083C               	movf	??_can_send,w
  4905  02E1  0021               	movlb	1	; select bank1
  4906  02E2  00B8               	movwf	(_buf^(0+128)+5)
  4907                           
  4908                           ;mcp2515.c: 211: for(i=0; i<dlc; i++) {
  4909  02E3  0020               	movlb	0	; select bank0
  4910  02E4  01C4               	clrf	can_send@i
  4911  02E5                     l2465:	
  4912  02E5  083B               	movf	can_send@dlc,w
  4913  02E6  0244               	subwf	can_send@i,w
  4914  02E7  1803               	btfsc	3,0
  4915  02E8  2B15               	goto	l2467
  4916                           
  4917                           ;mcp2515.c: 212: buf[6+i] = data_buf[i];
  4918  02E9  0844               	movf	can_send@i,w
  4919  02EA  0743               	addwf	can_send@data_buf,w
  4920  02EB  00BC               	movwf	??_can_send
  4921  02EC  083C               	movf	??_can_send,w
  4922  02ED  0086               	movwf	6
  4923  02EE  0187               	clrf	7
  4924  02EF  0801               	movf	1,w
  4925  02F0  00BD               	movwf	??_can_send+1
  4926  02F1  0844               	movf	can_send@i,w
  4927  02F2  3E06               	addlw	6
  4928  02F3  3EB3               	addlw	(low (_buf| 0))& (0+255)
  4929  02F4  0086               	movwf	6
  4930  02F5  0187               	clrf	7
  4931  02F6  083D               	movf	??_can_send+1,w
  4932  02F7  0081               	movwf	1
  4933                           
  4934                           ;mcp2515.c: 213: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4935  02F8  0862               	movf	_mode,w
  4936  02F9  1903               	btfsc	3,2
  4937  02FA  2B0F               	goto	l2463
  4938  02FB  3067               	movlw	low (STR_32| (0+32768))
  4939  02FC  00A2               	movwf	printf@f
  4940  02FD  3092               	movlw	high (STR_32| (0+32768))
  4941  02FE  00A3               	movwf	printf@f+1
  4942  02FF  0844               	movf	can_send@i,w
  4943  0300  0743               	addwf	can_send@data_buf,w
  4944  0301  00BC               	movwf	??_can_send
  4945  0302  083C               	movf	??_can_send,w
  4946  0303  0086               	movwf	6
  4947  0304  0187               	clrf	7
  4948  0305  0801               	movf	1,w
  4949  0306  00BD               	movwf	??_can_send+1
  4950  0307  01BE               	clrf	??_can_send+2
  4951  0308  083D               	movf	??_can_send+1,w
  4952  0309  00A4               	movwf	?_printf+2
  4953  030A  083E               	movf	??_can_send+2,w
  4954  030B  00A5               	movwf	?_printf+3
  4955  030C  3185  25B3  3182   	fcall	_printf
  4956  030F                     l2463:	
  4957  030F  3001               	movlw	1
  4958  0310  0020               	movlb	0	; select bank0
  4959  0311  00BC               	movwf	??_can_send
  4960  0312  083C               	movf	??_can_send,w
  4961  0313  07C4               	addwf	can_send@i,f
  4962  0314  2AE5               	goto	l2465
  4963  0315                     l2467:	
  4964                           
  4965                           ;mcp2515.c: 214: }
  4966                           ;mcp2515.c: 217: uint8_t len = 6 + dlc;
  4967  0315  083B               	movf	can_send@dlc,w
  4968  0316  3E06               	addlw	6
  4969  0317  00BC               	movwf	??_can_send
  4970  0318  083C               	movf	??_can_send,w
  4971  0319  00C0               	movwf	can_send@len
  4972                           
  4973                           ;mcp2515.c: 218: uint8_t bytes_written = SPI_exchange(buf, len);
  4974  031A  0840               	movf	can_send@len,w
  4975  031B  00BC               	movwf	??_can_send
  4976  031C  083C               	movf	??_can_send,w
  4977  031D  00F8               	movwf	SPI_exchange@len
  4978  031E  30B3               	movlw	(low (_buf| 0))& (0+255)
  4979  031F  318C  2480  3182   	fcall	_SPI_exchange
  4980  0322  0020               	movlb	0	; select bank0
  4981  0323  00BD               	movwf	??_can_send+1
  4982  0324  083D               	movf	??_can_send+1,w
  4983  0325  00C1               	movwf	can_send@bytes_written
  4984                           
  4985                           ;mcp2515.c: 220: buf[0] = 0b00000011;
  4986  0326  3003               	movlw	3
  4987  0327  00BC               	movwf	??_can_send
  4988  0328  083C               	movf	??_can_send,w
  4989  0329  0021               	movlb	1	; select bank1
  4990  032A  00B3               	movwf	_buf^(0+128)
  4991                           
  4992                           ;mcp2515.c: 221: buf[1] = txbnsidh[n];
  4993  032B  0020               	movlb	0	; select bank0
  4994  032C  0845               	movf	can_send@n,w
  4995  032D  3E22               	addlw	low (_txbnsidh| (0+32768))
  4996  032E  0084               	movwf	4
  4997  032F  3094               	movlw	high (_txbnsidh| (0+32768))
  4998  0330  1803               	skipnc
  4999  0331  3E01               	addlw	1
  5000  0332  0085               	movwf	5
  5001  0333  0800               	movf	0,w	;code access
  5002  0334  00BC               	movwf	??_can_send
  5003  0335  083C               	movf	??_can_send,w
  5004  0336  0021               	movlb	1	; select bank1
  5005  0337  00B4               	movwf	(_buf^(0+128)+1)
  5006                           
  5007                           ;mcp2515.c: 222: buf[2] = 0x00;
  5008  0338  01B5               	clrf	(_buf^(0+128)+2)
  5009                           
  5010                           ;mcp2515.c: 223: SPI_exchange(buf, 3);
  5011  0339  3003               	movlw	3
  5012  033A  0020               	movlb	0	; select bank0
  5013  033B  00BC               	movwf	??_can_send
  5014  033C  083C               	movf	??_can_send,w
  5015  033D  00F8               	movwf	SPI_exchange@len
  5016  033E  30B3               	movlw	(low (_buf| 0))& (0+255)
  5017  033F  318C  2480  3182   	fcall	_SPI_exchange
  5018                           
  5019                           ;mcp2515.c: 225: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5020  0342  0020               	movlb	0	; select bank0
  5021  0343  0862               	movf	_mode,w
  5022  0344  1903               	btfsc	3,2
  5023  0345  2B5D               	goto	l2483
  5024  0346  30C3               	movlw	low (STR_33| (0+32768))
  5025  0347  00A2               	movwf	printf@f
  5026  0348  3092               	movlw	high (STR_33| (0+32768))
  5027  0349  00A3               	movwf	printf@f+1
  5028  034A  0845               	movf	can_send@n,w
  5029  034B  00BC               	movwf	??_can_send
  5030  034C  01BD               	clrf	??_can_send+1
  5031  034D  083C               	movf	??_can_send,w
  5032  034E  00A4               	movwf	?_printf+2
  5033  034F  083D               	movf	??_can_send+1,w
  5034  0350  00A5               	movwf	?_printf+3
  5035  0351  0021               	movlb	1	; select bank1
  5036  0352  0835               	movf	(_buf^(0+128)+2),w
  5037  0353  0020               	movlb	0	; select bank0
  5038  0354  00BE               	movwf	??_can_send+2
  5039  0355  01BF               	clrf	??_can_send+3
  5040  0356  083E               	movf	??_can_send+2,w
  5041  0357  00A6               	movwf	?_printf+4
  5042  0358  083F               	movf	??_can_send+3,w
  5043  0359  00A7               	movwf	?_printf+5
  5044  035A  3185  25B3  3182   	fcall	_printf
  5045  035D                     l2483:	
  5046                           
  5047                           ;mcp2515.c: 226: buf[0] = 0b00000011;
  5048  035D  3003               	movlw	3
  5049  035E  0020               	movlb	0	; select bank0
  5050  035F  00BC               	movwf	??_can_send
  5051  0360  083C               	movf	??_can_send,w
  5052  0361  0021               	movlb	1	; select bank1
  5053  0362  00B3               	movwf	_buf^(0+128)
  5054                           
  5055                           ;mcp2515.c: 227: buf[1] = txbnsidh[n] + 1;
  5056  0363  0020               	movlb	0	; select bank0
  5057  0364  0845               	movf	can_send@n,w
  5058  0365  3E22               	addlw	low (_txbnsidh| (0+32768))
  5059  0366  0084               	movwf	4
  5060  0367  3094               	movlw	high (_txbnsidh| (0+32768))
  5061  0368  1803               	skipnc
  5062  0369  3E01               	addlw	1
  5063  036A  0085               	movwf	5
  5064  036B  0800               	movf	0,w	;code access
  5065  036C  3E01               	addlw	1
  5066  036D  00BC               	movwf	??_can_send
  5067  036E  083C               	movf	??_can_send,w
  5068  036F  0021               	movlb	1	; select bank1
  5069  0370  00B4               	movwf	(_buf^(0+128)+1)
  5070                           
  5071                           ;mcp2515.c: 228: buf[2] = 0x00;
  5072  0371  01B5               	clrf	(_buf^(0+128)+2)
  5073                           
  5074                           ;mcp2515.c: 229: SPI_exchange(buf, 3);
  5075  0372  3003               	movlw	3
  5076  0373  0020               	movlb	0	; select bank0
  5077  0374  00BC               	movwf	??_can_send
  5078  0375  083C               	movf	??_can_send,w
  5079  0376  00F8               	movwf	SPI_exchange@len
  5080  0377  30B3               	movlw	(low (_buf| 0))& (0+255)
  5081  0378  318C  2480  3182   	fcall	_SPI_exchange
  5082                           
  5083                           ;mcp2515.c: 231: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5084  037B  0020               	movlb	0	; select bank0
  5085  037C  0862               	movf	_mode,w
  5086  037D  1903               	btfsc	3,2
  5087  037E  2B96               	goto	l2495
  5088  037F  30E5               	movlw	low (STR_34| (0+32768))
  5089  0380  00A2               	movwf	printf@f
  5090  0381  3092               	movlw	high (STR_34| (0+32768))
  5091  0382  00A3               	movwf	printf@f+1
  5092  0383  0845               	movf	can_send@n,w
  5093  0384  00BC               	movwf	??_can_send
  5094  0385  01BD               	clrf	??_can_send+1
  5095  0386  083C               	movf	??_can_send,w
  5096  0387  00A4               	movwf	?_printf+2
  5097  0388  083D               	movf	??_can_send+1,w
  5098  0389  00A5               	movwf	?_printf+3
  5099  038A  0021               	movlb	1	; select bank1
  5100  038B  0835               	movf	(_buf^(0+128)+2),w
  5101  038C  0020               	movlb	0	; select bank0
  5102  038D  00BE               	movwf	??_can_send+2
  5103  038E  01BF               	clrf	??_can_send+3
  5104  038F  083E               	movf	??_can_send+2,w
  5105  0390  00A6               	movwf	?_printf+4
  5106  0391  083F               	movf	??_can_send+3,w
  5107  0392  00A7               	movwf	?_printf+5
  5108  0393  3185  25B3  3182   	fcall	_printf
  5109  0396                     l2495:	
  5110                           
  5111                           ;mcp2515.c: 233: if (bytes_written == len) {
  5112  0396  0020               	movlb	0	; select bank0
  5113  0397  0841               	movf	can_send@bytes_written,w
  5114  0398  0640               	xorwf	can_send@len,w
  5115  0399  1D03               	skipz
  5116  039A  0008               	return
  5117                           
  5118                           ;mcp2515.c: 235: buf[0] = 0b10000000 + (0b00000001 << n);
  5119  039B  3001               	movlw	1
  5120  039C  00BC               	movwf	??_can_send
  5121  039D  0A45               	incf	can_send@n,w
  5122  039E  2BA0               	goto	u2184
  5123  039F                     u2185:	
  5124  039F  35BC               	lslf	??_can_send,f
  5125  03A0                     u2184:	
  5126  03A0  0B89               	decfsz	9,f
  5127  03A1  2B9F               	goto	u2185
  5128  03A2  083C               	movf	??_can_send,w
  5129  03A3  3E80               	addlw	128
  5130  03A4  00BD               	movwf	??_can_send+1
  5131  03A5  083D               	movf	??_can_send+1,w
  5132  03A6  0021               	movlb	1	; select bank1
  5133  03A7  00B3               	movwf	_buf^(0+128)
  5134                           
  5135                           ;mcp2515.c: 236: bytes_written = SPI_exchange(buf, 1);
  5136  03A8  01F8               	clrf	SPI_exchange@len
  5137  03A9  0AF8               	incf	SPI_exchange@len,f
  5138  03AA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5139  03AB  318C  2480  3182   	fcall	_SPI_exchange
  5140  03AE  0020               	movlb	0	; select bank0
  5141  03AF  00BC               	movwf	??_can_send
  5142  03B0  083C               	movf	??_can_send,w
  5143  03B1  00C1               	movwf	can_send@bytes_written
  5144                           
  5145                           ;mcp2515.c: 237: if (bytes_written == 1) {
  5146  03B2  0341               	decf	can_send@bytes_written,w
  5147  03B3  1D03               	btfss	3,2
  5148  03B4  0008               	return
  5149                           
  5150                           ;mcp2515.c: 238: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5151  03B5  0862               	movf	_mode,w
  5152  03B6  1903               	btfsc	3,2
  5153  03B7  0008               	return
  5154  03B8  308F               	movlw	low (STR_35| (0+32768))
  5155  03B9  00A2               	movwf	printf@f
  5156  03BA  3092               	movlw	high (STR_35| (0+32768))
  5157  03BB  00A3               	movwf	printf@f+1
  5158  03BC  0843               	movf	can_send@data_buf,w
  5159  03BD  00A4               	movwf	low ((?_printf| 0+2))
  5160  03BE  3000               	movlw	0
  5161  03BF  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5162  03C0  3185  25B3         	fcall	_printf
  5163                           
  5164                           ;mcp2515.c: 239: return 1;
  5165                           ;	Return value of _can_send is never used
  5166  03C2  0008               	return
  5167  03C3                     __end_of_can_send:	
  5168                           ;mcp2515.c: 240: }
  5169                           ;mcp2515.c: 241: }
  5170                           ;mcp2515.c: 243: return 0;
  5171                           ;	Return value of _can_send is never used
  5172                           
  5173                           
  5174                           	psect	text7
  5175  0C58                     __ptext7:	
  5176 ;; *************** function _can_logging_mode *****************
  5177 ;; Defined at:
  5178 ;;		line 26 in file "mcp2515.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  debug           1    wreg     unsigned char 
  5181 ;;  verbose         1    0[COMMON] unsigned char 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  debug           1    2[COMMON] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;Total ram usage:        3 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _can_logging_mode
  5208  0C58                     _can_logging_mode:	
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _can_logging_mode: [wreg]
  5212                           ;can_logging_mode@debug stored from wreg
  5213  0C58  00F2               	movwf	can_logging_mode@debug
  5214                           
  5215                           ;mcp2515.c: 27: mode.debug = debug;
  5216  0C59  0872               	movf	can_logging_mode@debug,w
  5217  0C5A  00F1               	movwf	??_can_logging_mode
  5218  0C5B  0871               	movf	??_can_logging_mode,w
  5219  0C5C  0020               	movlb	0	; select bank0
  5220  0C5D  00E2               	movwf	_mode
  5221                           
  5222                           ;mcp2515.c: 28: mode.verbose = verbose;
  5223  0C5E  0870               	movf	can_logging_mode@verbose,w
  5224  0C5F  00F1               	movwf	??_can_logging_mode
  5225  0C60  0871               	movf	??_can_logging_mode,w
  5226  0C61  00E3               	movwf	_mode+1
  5227  0C62  0008               	return
  5228  0C63                     __end_of_can_logging_mode:	
  5229                           
  5230                           	psect	text8
  5231  0F81                     __ptext8:	
  5232 ;; *************** function _can_init *****************
  5233 ;; Defined at:
  5234 ;;		line 49 in file "mcp2515.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  receive_hand    2   31[BANK0 ] PTR void 
  5237 ;;		 -> receive_handler(1), 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5249 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;Total ram usage:        3 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    4
  5256 ;; This function calls:
  5257 ;;		_SPI_exchange
  5258 ;;		_can_ope_mode
  5259 ;;		_can_set_sid
  5260 ;; This function is called by:
  5261 ;;		_main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _can_init
  5267  0F81                     _can_init:	
  5268                           
  5269                           ;mcp2515.c: 50: can_set_sid(0);
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5273  0F81  3000               	movlw	0
  5274  0F82  00F0               	movwf	can_set_sid@can_node
  5275  0F83  00F1               	movwf	can_set_sid@can_node+1
  5276  0F84  318C  24E0  318F   	fcall	_can_set_sid
  5277                           
  5278                           ;mcp2515.c: 51: handler = receive_handler;
  5279  0F87  0020               	movlb	0	; select bank0
  5280  0F88  0840               	movf	can_init@receive_handler+1,w
  5281  0F89  00EA               	movwf	_handler+1
  5282  0F8A  083F               	movf	can_init@receive_handler,w
  5283  0F8B  00E9               	movwf	_handler
  5284                           
  5285                           ;mcp2515.c: 53: can_ope_mode(0b10000000);
  5286  0F8C  3080               	movlw	128
  5287  0F8D  318E  2668  318F   	fcall	_can_ope_mode
  5288                           
  5289                           ;mcp2515.c: 54: buf[0] = 0b11000000;
  5290  0F90  30C0               	movlw	192
  5291  0F91  0020               	movlb	0	; select bank0
  5292  0F92  00C1               	movwf	??_can_init
  5293  0F93  0841               	movf	??_can_init,w
  5294  0F94  0021               	movlb	1	; select bank1
  5295  0F95  00B3               	movwf	_buf^(0+128)
  5296                           
  5297                           ;mcp2515.c: 55: SPI_exchange(buf, 1);
  5298  0F96  01F8               	clrf	SPI_exchange@len
  5299  0F97  0AF8               	incf	SPI_exchange@len,f
  5300  0F98  30B3               	movlw	(low (_buf| 0))& (0+255)
  5301  0F99  318C  2480  318F   	fcall	_SPI_exchange
  5302                           
  5303                           ;mcp2515.c: 57: buf[0] = 0b00000010;
  5304  0F9C  3002               	movlw	2
  5305  0F9D  0020               	movlb	0	; select bank0
  5306  0F9E  00C1               	movwf	??_can_init
  5307  0F9F  0841               	movf	??_can_init,w
  5308  0FA0  0021               	movlb	1	; select bank1
  5309  0FA1  00B3               	movwf	_buf^(0+128)
  5310                           
  5311                           ;mcp2515.c: 58: buf[1] = 0x28;
  5312  0FA2  3028               	movlw	40
  5313  0FA3  0020               	movlb	0	; select bank0
  5314  0FA4  00C1               	movwf	??_can_init
  5315  0FA5  0841               	movf	??_can_init,w
  5316  0FA6  0021               	movlb	1	; select bank1
  5317  0FA7  00B4               	movwf	(_buf^(0+128)+1)
  5318                           
  5319                           ;mcp2515.c: 59: buf[2] = 0b00000101;
  5320  0FA8  3005               	movlw	5
  5321  0FA9  0020               	movlb	0	; select bank0
  5322  0FAA  00C1               	movwf	??_can_init
  5323  0FAB  0841               	movf	??_can_init,w
  5324  0FAC  0021               	movlb	1	; select bank1
  5325  0FAD  00B5               	movwf	(_buf^(0+128)+2)
  5326                           
  5327                           ;mcp2515.c: 60: buf[4] = 0b11110001;
  5328  0FAE  30F1               	movlw	241
  5329  0FAF  0020               	movlb	0	; select bank0
  5330  0FB0  00C1               	movwf	??_can_init
  5331  0FB1  0841               	movf	??_can_init,w
  5332  0FB2  0021               	movlb	1	; select bank1
  5333  0FB3  00B7               	movwf	(_buf^(0+128)+4)
  5334                           
  5335                           ;mcp2515.c: 61: buf[5] = 0b01000001;
  5336  0FB4  3041               	movlw	65
  5337  0FB5  0020               	movlb	0	; select bank0
  5338  0FB6  00C1               	movwf	??_can_init
  5339  0FB7  0841               	movf	??_can_init,w
  5340  0FB8  0021               	movlb	1	; select bank1
  5341  0FB9  00B8               	movwf	(_buf^(0+128)+5)
  5342                           
  5343                           ;mcp2515.c: 62: SPI_exchange(buf, 5);
  5344  0FBA  3005               	movlw	5
  5345  0FBB  0020               	movlb	0	; select bank0
  5346  0FBC  00C1               	movwf	??_can_init
  5347  0FBD  0841               	movf	??_can_init,w
  5348  0FBE  00F8               	movwf	SPI_exchange@len
  5349  0FBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5350  0FC0  318C  2480  318F   	fcall	_SPI_exchange
  5351                           
  5352                           ;mcp2515.c: 64: buf[0] = 0b00000010;
  5353  0FC3  3002               	movlw	2
  5354  0FC4  0020               	movlb	0	; select bank0
  5355  0FC5  00C1               	movwf	??_can_init
  5356  0FC6  0841               	movf	??_can_init,w
  5357  0FC7  0021               	movlb	1	; select bank1
  5358  0FC8  00B3               	movwf	_buf^(0+128)
  5359                           
  5360                           ;mcp2515.c: 65: buf[1] = 0x60;
  5361  0FC9  3060               	movlw	96
  5362  0FCA  0020               	movlb	0	; select bank0
  5363  0FCB  00C1               	movwf	??_can_init
  5364  0FCC  0841               	movf	??_can_init,w
  5365  0FCD  0021               	movlb	1	; select bank1
  5366  0FCE  00B4               	movwf	(_buf^(0+128)+1)
  5367                           
  5368                           ;mcp2515.c: 66: buf[2] = 0b00100100;
  5369  0FCF  3024               	movlw	36
  5370  0FD0  0020               	movlb	0	; select bank0
  5371  0FD1  00C1               	movwf	??_can_init
  5372  0FD2  0841               	movf	??_can_init,w
  5373  0FD3  0021               	movlb	1	; select bank1
  5374  0FD4  00B5               	movwf	(_buf^(0+128)+2)
  5375                           
  5376                           ;mcp2515.c: 67: SPI_exchange(buf, 3);
  5377  0FD5  3003               	movlw	3
  5378  0FD6  0020               	movlb	0	; select bank0
  5379  0FD7  00C1               	movwf	??_can_init
  5380  0FD8  0841               	movf	??_can_init,w
  5381  0FD9  00F8               	movwf	SPI_exchange@len
  5382  0FDA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5383  0FDB  318C  2480  318F   	fcall	_SPI_exchange
  5384                           
  5385                           ;mcp2515.c: 69: buf[0] = 0b00000010;
  5386  0FDE  3002               	movlw	2
  5387  0FDF  0020               	movlb	0	; select bank0
  5388  0FE0  00C1               	movwf	??_can_init
  5389  0FE1  0841               	movf	??_can_init,w
  5390  0FE2  0021               	movlb	1	; select bank1
  5391  0FE3  00B3               	movwf	_buf^(0+128)
  5392                           
  5393                           ;mcp2515.c: 70: buf[1] = 0x70;
  5394  0FE4  3070               	movlw	112
  5395  0FE5  0020               	movlb	0	; select bank0
  5396  0FE6  00C1               	movwf	??_can_init
  5397  0FE7  0841               	movf	??_can_init,w
  5398  0FE8  0021               	movlb	1	; select bank1
  5399  0FE9  00B4               	movwf	(_buf^(0+128)+1)
  5400                           
  5401                           ;mcp2515.c: 71: buf[2] = 0b00100000;
  5402  0FEA  3020               	movlw	32
  5403  0FEB  0020               	movlb	0	; select bank0
  5404  0FEC  00C1               	movwf	??_can_init
  5405  0FED  0841               	movf	??_can_init,w
  5406  0FEE  0021               	movlb	1	; select bank1
  5407  0FEF  00B5               	movwf	(_buf^(0+128)+2)
  5408                           
  5409                           ;mcp2515.c: 72: SPI_exchange(buf, 3);
  5410  0FF0  3003               	movlw	3
  5411  0FF1  0020               	movlb	0	; select bank0
  5412  0FF2  00C1               	movwf	??_can_init
  5413  0FF3  0841               	movf	??_can_init,w
  5414  0FF4  00F8               	movwf	SPI_exchange@len
  5415  0FF5  30B3               	movlw	(low (_buf| 0))& (0+255)
  5416  0FF6  318C  2480  318F   	fcall	_SPI_exchange
  5417                           
  5418                           ;mcp2515.c: 74: mode.debug = 0;
  5419  0FF9  0020               	movlb	0	; select bank0
  5420  0FFA  01E2               	clrf	_mode
  5421                           
  5422                           ;mcp2515.c: 75: mode.verbose = 0;
  5423  0FFB  01E3               	clrf	_mode+1
  5424                           
  5425                           ;mcp2515.c: 77: can_ope_mode(0b00000000);
  5426  0FFC  3000               	movlw	0
  5427  0FFD  318E  2668         	fcall	_can_ope_mode
  5428  0FFF  0008               	return
  5429  1000                     __end_of_can_init:	
  5430                           
  5431                           	psect	text9
  5432  0CE0                     __ptext9:	
  5433 ;; *************** function _can_set_sid *****************
  5434 ;; Defined at:
  5435 ;;		line 39 in file "mcp2515.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  can_node        2    0[COMMON] unsigned int 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  sidl            1    6[COMMON] unsigned char 
  5440 ;;  sidh            1    5[COMMON] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;Total ram usage:        7 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;;		_can_init
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           
  5465                           ;psect for function _can_set_sid
  5466  0CE0                     _can_set_sid:	
  5467                           
  5468                           ;mcp2515.c: 40: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5469                           
  5470                           ;incstack = 0
  5471                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5472  0CE0  0871               	movf	can_set_sid@can_node+1,w
  5473  0CE1  00F3               	movwf	??_can_set_sid+1
  5474  0CE2  0870               	movf	can_set_sid@can_node,w
  5475  0CE3  00F2               	movwf	??_can_set_sid
  5476  0CE4  36F3               	lsrf	??_can_set_sid+1,f
  5477  0CE5  0CF2               	rrf	??_can_set_sid,f
  5478  0CE6  36F3               	lsrf	??_can_set_sid+1,f
  5479  0CE7  0CF2               	rrf	??_can_set_sid,f
  5480  0CE8  36F3               	lsrf	??_can_set_sid+1,f
  5481  0CE9  0CF2               	rrf	??_can_set_sid,f
  5482  0CEA  0872               	movf	??_can_set_sid,w
  5483  0CEB  00F4               	movwf	??_can_set_sid+2
  5484  0CEC  0874               	movf	??_can_set_sid+2,w
  5485  0CED  00F5               	movwf	can_set_sid@sidh
  5486                           
  5487                           ;mcp2515.c: 41: uint8_t sidl = (can_node << 5) & 0x00e0;
  5488  0CEE  0870               	movf	can_set_sid@can_node,w
  5489  0CEF  00F2               	movwf	??_can_set_sid
  5490  0CF0  3004               	movlw	4
  5491  0CF1                     u1785:	
  5492  0CF1  35F2               	lslf	??_can_set_sid,f
  5493  0CF2  3EFF               	addlw	-1
  5494  0CF3  1D03               	skipz
  5495  0CF4  2CF1               	goto	u1785
  5496  0CF5  3572               	lslf	??_can_set_sid,w
  5497  0CF6  39E0               	andlw	224
  5498  0CF7  00F3               	movwf	??_can_set_sid+1
  5499  0CF8  0873               	movf	??_can_set_sid+1,w
  5500  0CF9  00F6               	movwf	can_set_sid@sidl
  5501                           
  5502                           ;mcp2515.c: 42: sid.sidh = sidh;
  5503  0CFA  0875               	movf	can_set_sid@sidh,w
  5504  0CFB  00F2               	movwf	??_can_set_sid
  5505  0CFC  0872               	movf	??_can_set_sid,w
  5506  0CFD  0020               	movlb	0	; select bank0
  5507  0CFE  00E4               	movwf	_sid
  5508                           
  5509                           ;mcp2515.c: 43: sid.sidl = sidl;
  5510  0CFF  0876               	movf	can_set_sid@sidl,w
  5511  0D00  00F2               	movwf	??_can_set_sid
  5512  0D01  0872               	movf	??_can_set_sid,w
  5513  0D02  00E5               	movwf	_sid+1
  5514  0D03  0008               	return
  5515  0D04                     __end_of_can_set_sid:	
  5516                           
  5517                           	psect	text10
  5518  016A                     __ptext10:	
  5519 ;; *************** function _can_dump_registers *****************
  5520 ;; Defined at:
  5521 ;;		line 321 in file "mcp2515.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;Total ram usage:        2 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    4
  5542 ;; This function calls:
  5543 ;;		_printf
  5544 ;;		_read_register
  5545 ;; This function is called by:
  5546 ;;		_main
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function _can_dump_registers
  5552  016A                     _can_dump_registers:	
  5553                           
  5554                           ;mcp2515.c: 322: printf("---\n");
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5558  016A  301D               	movlw	low (STR_38| (0+32768))
  5559  016B  0020               	movlb	0	; select bank0
  5560  016C  00A2               	movwf	printf@f
  5561  016D  3094               	movlw	high (STR_38| (0+32768))
  5562  016E  00A3               	movwf	printf@f+1
  5563  016F  3185  25B3  3181   	fcall	_printf
  5564                           
  5565                           ;mcp2515.c: 323: printf("SIDH: %02x\n", sid.sidh);
  5566  0172  30B7               	movlw	low ((STR_25+5)| (0+32768))
  5567  0173  0020               	movlb	0	; select bank0
  5568  0174  00A2               	movwf	printf@f
  5569  0175  3092               	movlw	high ((STR_25+5)| (0+32768))
  5570  0176  00A3               	movwf	printf@f+1
  5571  0177  0864               	movf	_sid,w
  5572  0178  00BB               	movwf	??_can_dump_registers
  5573  0179  01BC               	clrf	??_can_dump_registers+1
  5574  017A  083B               	movf	??_can_dump_registers,w
  5575  017B  00A4               	movwf	?_printf+2
  5576  017C  083C               	movf	??_can_dump_registers+1,w
  5577  017D  00A5               	movwf	?_printf+3
  5578  017E  3185  25B3  3181   	fcall	_printf
  5579                           
  5580                           ;mcp2515.c: 324: printf("SIDL: %02x\n", sid.sidl);
  5581  0181  30D9               	movlw	low ((STR_26+5)| (0+32768))
  5582  0182  0020               	movlb	0	; select bank0
  5583  0183  00A2               	movwf	printf@f
  5584  0184  3092               	movlw	high ((STR_26+5)| (0+32768))
  5585  0185  00A3               	movwf	printf@f+1
  5586  0186  0865               	movf	_sid+1,w
  5587  0187  00BB               	movwf	??_can_dump_registers
  5588  0188  01BC               	clrf	??_can_dump_registers+1
  5589  0189  083B               	movf	??_can_dump_registers,w
  5590  018A  00A4               	movwf	?_printf+2
  5591  018B  083C               	movf	??_can_dump_registers+1,w
  5592  018C  00A5               	movwf	?_printf+3
  5593  018D  3185  25B3  3181   	fcall	_printf
  5594                           
  5595                           ;mcp2515.c: 325: printf("\n");
  5596  0190  3020               	movlw	low ((STR_38+3)| (0+32768))
  5597  0191  0020               	movlb	0	; select bank0
  5598  0192  00A2               	movwf	printf@f
  5599  0193  3094               	movlw	high ((STR_38+3)| (0+32768))
  5600  0194  00A3               	movwf	printf@f+1
  5601  0195  3185  25B3  3181   	fcall	_printf
  5602                           
  5603                           ;mcp2515.c: 327: printf("CNF1: %02x\n", read_register(0x2a));
  5604  0198  30C7               	movlw	low (STR_42| (0+32768))
  5605  0199  0020               	movlb	0	; select bank0
  5606  019A  00A2               	movwf	printf@f
  5607  019B  3093               	movlw	high (STR_42| (0+32768))
  5608  019C  00A3               	movwf	printf@f+1
  5609  019D  302A               	movlw	42
  5610  019E  318C  24AC  3181   	fcall	_read_register
  5611  01A1  0020               	movlb	0	; select bank0
  5612  01A2  00BB               	movwf	??_can_dump_registers
  5613  01A3  01BC               	clrf	??_can_dump_registers+1
  5614  01A4  083B               	movf	??_can_dump_registers,w
  5615  01A5  00A4               	movwf	?_printf+2
  5616  01A6  083C               	movf	??_can_dump_registers+1,w
  5617  01A7  00A5               	movwf	?_printf+3
  5618  01A8  3185  25B3  3181   	fcall	_printf
  5619                           
  5620                           ;mcp2515.c: 328: printf("CNF2: %02x\n", read_register(0x29));
  5621  01AB  30D3               	movlw	low (STR_43| (0+32768))
  5622  01AC  0020               	movlb	0	; select bank0
  5623  01AD  00A2               	movwf	printf@f
  5624  01AE  3093               	movlw	high (STR_43| (0+32768))
  5625  01AF  00A3               	movwf	printf@f+1
  5626  01B0  3029               	movlw	41
  5627  01B1  318C  24AC  3181   	fcall	_read_register
  5628  01B4  0020               	movlb	0	; select bank0
  5629  01B5  00BB               	movwf	??_can_dump_registers
  5630  01B6  01BC               	clrf	??_can_dump_registers+1
  5631  01B7  083B               	movf	??_can_dump_registers,w
  5632  01B8  00A4               	movwf	?_printf+2
  5633  01B9  083C               	movf	??_can_dump_registers+1,w
  5634  01BA  00A5               	movwf	?_printf+3
  5635  01BB  3185  25B3  3181   	fcall	_printf
  5636                           
  5637                           ;mcp2515.c: 329: printf("CNF3: %02x\n", read_register(0x28));
  5638  01BE  30DF               	movlw	low (STR_44| (0+32768))
  5639  01BF  0020               	movlb	0	; select bank0
  5640  01C0  00A2               	movwf	printf@f
  5641  01C1  3093               	movlw	high (STR_44| (0+32768))
  5642  01C2  00A3               	movwf	printf@f+1
  5643  01C3  3028               	movlw	40
  5644  01C4  318C  24AC  3181   	fcall	_read_register
  5645  01C7  0020               	movlb	0	; select bank0
  5646  01C8  00BB               	movwf	??_can_dump_registers
  5647  01C9  01BC               	clrf	??_can_dump_registers+1
  5648  01CA  083B               	movf	??_can_dump_registers,w
  5649  01CB  00A4               	movwf	?_printf+2
  5650  01CC  083C               	movf	??_can_dump_registers+1,w
  5651  01CD  00A5               	movwf	?_printf+3
  5652  01CE  3185  25B3  3181   	fcall	_printf
  5653                           
  5654                           ;mcp2515.c: 330: printf("\n");
  5655  01D1  3020               	movlw	low ((STR_38+3)| (0+32768))
  5656  01D2  0020               	movlb	0	; select bank0
  5657  01D3  00A2               	movwf	printf@f
  5658  01D4  3094               	movlw	high ((STR_38+3)| (0+32768))
  5659  01D5  00A3               	movwf	printf@f+1
  5660  01D6  3185  25B3  3181   	fcall	_printf
  5661                           
  5662                           ;mcp2515.c: 332: printf("TXB0CTRL: %02x\n", read_register(0x30));
  5663  01D9  3016               	movlw	low (STR_46| (0+32768))
  5664  01DA  0020               	movlb	0	; select bank0
  5665  01DB  00A2               	movwf	printf@f
  5666  01DC  3093               	movlw	high (STR_46| (0+32768))
  5667  01DD  00A3               	movwf	printf@f+1
  5668  01DE  3030               	movlw	48
  5669  01DF  318C  24AC  3181   	fcall	_read_register
  5670  01E2  0020               	movlb	0	; select bank0
  5671  01E3  00BB               	movwf	??_can_dump_registers
  5672  01E4  01BC               	clrf	??_can_dump_registers+1
  5673  01E5  083B               	movf	??_can_dump_registers,w
  5674  01E6  00A4               	movwf	?_printf+2
  5675  01E7  083C               	movf	??_can_dump_registers+1,w
  5676  01E8  00A5               	movwf	?_printf+3
  5677  01E9  3185  25B3  3181   	fcall	_printf
  5678                           
  5679                           ;mcp2515.c: 333: printf("TXB1CTRL: %02x\n", read_register(0x40));
  5680  01EC  3036               	movlw	low (STR_47| (0+32768))
  5681  01ED  0020               	movlb	0	; select bank0
  5682  01EE  00A2               	movwf	printf@f
  5683  01EF  3093               	movlw	high (STR_47| (0+32768))
  5684  01F0  00A3               	movwf	printf@f+1
  5685  01F1  3040               	movlw	64
  5686  01F2  318C  24AC  3181   	fcall	_read_register
  5687  01F5  0020               	movlb	0	; select bank0
  5688  01F6  00BB               	movwf	??_can_dump_registers
  5689  01F7  01BC               	clrf	??_can_dump_registers+1
  5690  01F8  083B               	movf	??_can_dump_registers,w
  5691  01F9  00A4               	movwf	?_printf+2
  5692  01FA  083C               	movf	??_can_dump_registers+1,w
  5693  01FB  00A5               	movwf	?_printf+3
  5694  01FC  3185  25B3  3181   	fcall	_printf
  5695                           
  5696                           ;mcp2515.c: 334: printf("TXB2CTRL: %02x\n", read_register(0x50));
  5697  01FF  3046               	movlw	low (STR_48| (0+32768))
  5698  0200  0020               	movlb	0	; select bank0
  5699  0201  00A2               	movwf	printf@f
  5700  0202  3093               	movlw	high (STR_48| (0+32768))
  5701  0203  00A3               	movwf	printf@f+1
  5702  0204  3050               	movlw	80
  5703  0205  318C  24AC  3181   	fcall	_read_register
  5704  0208  0020               	movlb	0	; select bank0
  5705  0209  00BB               	movwf	??_can_dump_registers
  5706  020A  01BC               	clrf	??_can_dump_registers+1
  5707  020B  083B               	movf	??_can_dump_registers,w
  5708  020C  00A4               	movwf	?_printf+2
  5709  020D  083C               	movf	??_can_dump_registers+1,w
  5710  020E  00A5               	movwf	?_printf+3
  5711  020F  3185  25B3  3181   	fcall	_printf
  5712                           
  5713                           ;mcp2515.c: 335: printf("\n");
  5714  0212  3020               	movlw	low ((STR_38+3)| (0+32768))
  5715  0213  0020               	movlb	0	; select bank0
  5716  0214  00A2               	movwf	printf@f
  5717  0215  3094               	movlw	high ((STR_38+3)| (0+32768))
  5718  0216  00A3               	movwf	printf@f+1
  5719  0217  3185  25B3  3181   	fcall	_printf
  5720                           
  5721                           ;mcp2515.c: 337: printf("RXB0CTRL: %02x\n", read_register(0x60));
  5722  021A  3006               	movlw	low (STR_50| (0+32768))
  5723  021B  0020               	movlb	0	; select bank0
  5724  021C  00A2               	movwf	printf@f
  5725  021D  3093               	movlw	high (STR_50| (0+32768))
  5726  021E  00A3               	movwf	printf@f+1
  5727  021F  3060               	movlw	96
  5728  0220  318C  24AC  3181   	fcall	_read_register
  5729  0223  0020               	movlb	0	; select bank0
  5730  0224  00BB               	movwf	??_can_dump_registers
  5731  0225  01BC               	clrf	??_can_dump_registers+1
  5732  0226  083B               	movf	??_can_dump_registers,w
  5733  0227  00A4               	movwf	?_printf+2
  5734  0228  083C               	movf	??_can_dump_registers+1,w
  5735  0229  00A5               	movwf	?_printf+3
  5736  022A  3185  25B3  3181   	fcall	_printf
  5737                           
  5738                           ;mcp2515.c: 338: printf("RXB1CTRL: %02x\n", read_register(0x70));
  5739  022D  3026               	movlw	low (STR_51| (0+32768))
  5740  022E  0020               	movlb	0	; select bank0
  5741  022F  00A2               	movwf	printf@f
  5742  0230  3093               	movlw	high (STR_51| (0+32768))
  5743  0231  00A3               	movwf	printf@f+1
  5744  0232  3070               	movlw	112
  5745  0233  318C  24AC  3181   	fcall	_read_register
  5746  0236  0020               	movlb	0	; select bank0
  5747  0237  00BB               	movwf	??_can_dump_registers
  5748  0238  01BC               	clrf	??_can_dump_registers+1
  5749  0239  083B               	movf	??_can_dump_registers,w
  5750  023A  00A4               	movwf	?_printf+2
  5751  023B  083C               	movf	??_can_dump_registers+1,w
  5752  023C  00A5               	movwf	?_printf+3
  5753  023D  3185  25B3  3181   	fcall	_printf
  5754                           
  5755                           ;mcp2515.c: 339: printf("\n");
  5756  0240  3020               	movlw	low ((STR_38+3)| (0+32768))
  5757  0241  0020               	movlb	0	; select bank0
  5758  0242  00A2               	movwf	printf@f
  5759  0243  3094               	movlw	high ((STR_38+3)| (0+32768))
  5760  0244  00A3               	movwf	printf@f+1
  5761  0245  3185  25B3  3181   	fcall	_printf
  5762                           
  5763                           ;mcp2515.c: 341: printf("CANCTRL: %02x\n", read_register(0x0f));
  5764  0248  3065               	movlw	low (STR_53| (0+32768))
  5765  0249  0020               	movlb	0	; select bank0
  5766  024A  00A2               	movwf	printf@f
  5767  024B  3093               	movlw	high (STR_53| (0+32768))
  5768  024C  00A3               	movwf	printf@f+1
  5769  024D  300F               	movlw	15
  5770  024E  318C  24AC  3181   	fcall	_read_register
  5771  0251  0020               	movlb	0	; select bank0
  5772  0252  00BB               	movwf	??_can_dump_registers
  5773  0253  01BC               	clrf	??_can_dump_registers+1
  5774  0254  083B               	movf	??_can_dump_registers,w
  5775  0255  00A4               	movwf	?_printf+2
  5776  0256  083C               	movf	??_can_dump_registers+1,w
  5777  0257  00A5               	movwf	?_printf+3
  5778  0258  3185  25B3  3181   	fcall	_printf
  5779                           
  5780                           ;mcp2515.c: 342: printf("CANSTAT: %02x\n", read_register(0x0e));
  5781  025B  3074               	movlw	low (STR_22| (0+32768))
  5782  025C  0020               	movlb	0	; select bank0
  5783  025D  00A2               	movwf	printf@f
  5784  025E  3093               	movlw	high (STR_22| (0+32768))
  5785  025F  00A3               	movwf	printf@f+1
  5786  0260  300E               	movlw	14
  5787  0261  318C  24AC  3181   	fcall	_read_register
  5788  0264  0020               	movlb	0	; select bank0
  5789  0265  00BB               	movwf	??_can_dump_registers
  5790  0266  01BC               	clrf	??_can_dump_registers+1
  5791  0267  083B               	movf	??_can_dump_registers,w
  5792  0268  00A4               	movwf	?_printf+2
  5793  0269  083C               	movf	??_can_dump_registers+1,w
  5794  026A  00A5               	movwf	?_printf+3
  5795  026B  3185  25B3  3181   	fcall	_printf
  5796                           
  5797                           ;mcp2515.c: 343: printf("---\n");
  5798  026E  301D               	movlw	low (STR_38| (0+32768))
  5799  026F  0020               	movlb	0	; select bank0
  5800  0270  00A2               	movwf	printf@f
  5801  0271  3094               	movlw	high (STR_38| (0+32768))
  5802  0272  00A3               	movwf	printf@f+1
  5803  0273  3185  25B3         	fcall	_printf
  5804  0275  0008               	return
  5805  0276                     __end_of_can_dump_registers:	
  5806                           
  5807                           	psect	text11
  5808  0CAC                     __ptext11:	
  5809 ;; *************** function _read_register *****************
  5810 ;; Defined at:
  5811 ;;		line 310 in file "mcp2515.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  addr            1    wreg     unsigned char 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  addr            1    1[BANK0 ] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      unsigned char 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;Total ram usage:        2 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    3
  5832 ;; This function calls:
  5833 ;;		_SPI_exchange
  5834 ;; This function is called by:
  5835 ;;		_can_dump_registers
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _read_register
  5841  0CAC                     _read_register:	
  5842                           
  5843                           ;incstack = 0
  5844                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5845                           ;read_register@addr stored from wreg
  5846  0CAC  0020               	movlb	0	; select bank0
  5847  0CAD  00A1               	movwf	read_register@addr
  5848                           
  5849                           ;mcp2515.c: 311: buf[0] = 0b00000011;
  5850  0CAE  3003               	movlw	3
  5851  0CAF  00A0               	movwf	??_read_register
  5852  0CB0  0820               	movf	??_read_register,w
  5853  0CB1  0021               	movlb	1	; select bank1
  5854  0CB2  00B3               	movwf	_buf^(0+128)
  5855                           
  5856                           ;mcp2515.c: 312: buf[1] = addr;
  5857  0CB3  0020               	movlb	0	; select bank0
  5858  0CB4  0821               	movf	read_register@addr,w
  5859  0CB5  00A0               	movwf	??_read_register
  5860  0CB6  0820               	movf	??_read_register,w
  5861  0CB7  0021               	movlb	1	; select bank1
  5862  0CB8  00B4               	movwf	(_buf^(0+128)+1)
  5863                           
  5864                           ;mcp2515.c: 313: buf[2] = 0x00;
  5865  0CB9  01B5               	clrf	(_buf^(0+128)+2)
  5866                           
  5867                           ;mcp2515.c: 314: SPI_exchange(buf, 3);
  5868  0CBA  3003               	movlw	3
  5869  0CBB  0020               	movlb	0	; select bank0
  5870  0CBC  00A0               	movwf	??_read_register
  5871  0CBD  0820               	movf	??_read_register,w
  5872  0CBE  00F8               	movwf	SPI_exchange@len
  5873  0CBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5874  0CC0  318C  2480         	fcall	_SPI_exchange
  5875                           
  5876                           ;mcp2515.c: 315: return buf[2];
  5877  0CC2  0021               	movlb	1	; select bank1
  5878  0CC3  0835               	movf	(_buf^(0+128)+2),w
  5879  0CC4  0008               	return
  5880  0CC5                     __end_of_read_register:	
  5881                           
  5882                           	psect	text12
  5883  0D5D                     __ptext12:	
  5884 ;; *************** function _can_baudrate *****************
  5885 ;; Defined at:
  5886 ;;		line 277 in file "mcp2515.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  bpr             1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  bpr             1   33[BANK0 ] unsigned char 
  5891 ;;  bytes_writte    1   35[BANK0 ] unsigned char 
  5892 ;;  mask            1   34[BANK0 ] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      unsigned char 
  5895 ;; Registers used:
  5896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;Total ram usage:        5 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    4
  5909 ;; This function calls:
  5910 ;;		_SPI_exchange
  5911 ;;		_can_ope_mode
  5912 ;; This function is called by:
  5913 ;;		_main
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           
  5918                           ;psect for function _can_baudrate
  5919  0D5D                     _can_baudrate:	
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5923                           ;can_baudrate@bpr stored from wreg
  5924  0D5D  0020               	movlb	0	; select bank0
  5925  0D5E  00C1               	movwf	can_baudrate@bpr
  5926                           
  5927                           ;mcp2515.c: 278: can_ope_mode(0b10000000);
  5928  0D5F  3080               	movlw	128
  5929  0D60  318E  2668  318D   	fcall	_can_ope_mode
  5930                           
  5931                           ;mcp2515.c: 280: uint8_t mask = 0b00111111;
  5932  0D63  303F               	movlw	63
  5933  0D64  0020               	movlb	0	; select bank0
  5934  0D65  00BF               	movwf	??_can_baudrate
  5935  0D66  083F               	movf	??_can_baudrate,w
  5936  0D67  00C2               	movwf	can_baudrate@mask
  5937                           
  5938                           ;mcp2515.c: 281: buf[0] = 0b00000101;
  5939  0D68  3005               	movlw	5
  5940  0D69  00BF               	movwf	??_can_baudrate
  5941  0D6A  083F               	movf	??_can_baudrate,w
  5942  0D6B  0021               	movlb	1	; select bank1
  5943  0D6C  00B3               	movwf	_buf^(0+128)
  5944                           
  5945                           ;mcp2515.c: 282: buf[1] = 0x2a;
  5946  0D6D  302A               	movlw	42
  5947  0D6E  0020               	movlb	0	; select bank0
  5948  0D6F  00BF               	movwf	??_can_baudrate
  5949  0D70  083F               	movf	??_can_baudrate,w
  5950  0D71  0021               	movlb	1	; select bank1
  5951  0D72  00B4               	movwf	(_buf^(0+128)+1)
  5952                           
  5953                           ;mcp2515.c: 283: buf[2] = mask;
  5954  0D73  0020               	movlb	0	; select bank0
  5955  0D74  0842               	movf	can_baudrate@mask,w
  5956  0D75  00BF               	movwf	??_can_baudrate
  5957  0D76  083F               	movf	??_can_baudrate,w
  5958  0D77  0021               	movlb	1	; select bank1
  5959  0D78  00B5               	movwf	(_buf^(0+128)+2)
  5960                           
  5961                           ;mcp2515.c: 284: buf[3] = bpr;
  5962  0D79  0020               	movlb	0	; select bank0
  5963  0D7A  0841               	movf	can_baudrate@bpr,w
  5964  0D7B  00BF               	movwf	??_can_baudrate
  5965  0D7C  083F               	movf	??_can_baudrate,w
  5966  0D7D  0021               	movlb	1	; select bank1
  5967  0D7E  00B6               	movwf	(_buf^(0+128)+3)
  5968                           
  5969                           ;mcp2515.c: 285: uint8_t bytes_written = SPI_exchange(buf, 4);
  5970  0D7F  3004               	movlw	4
  5971  0D80  0020               	movlb	0	; select bank0
  5972  0D81  00BF               	movwf	??_can_baudrate
  5973  0D82  083F               	movf	??_can_baudrate,w
  5974  0D83  00F8               	movwf	SPI_exchange@len
  5975  0D84  30B3               	movlw	(low (_buf| 0))& (0+255)
  5976  0D85  318C  2480  318D   	fcall	_SPI_exchange
  5977  0D88  0020               	movlb	0	; select bank0
  5978  0D89  00C0               	movwf	??_can_baudrate+1
  5979  0D8A  0840               	movf	??_can_baudrate+1,w
  5980  0D8B  00C3               	movwf	can_baudrate@bytes_written
  5981                           
  5982                           ;mcp2515.c: 286: can_ope_mode(operation_mode);
  5983  0D8C  0868               	movf	_operation_mode,w
  5984  0D8D  318E  2668         	fcall	_can_ope_mode
  5985                           
  5986                           ;mcp2515.c: 290: return 0;
  5987                           ;	Return value of _can_baudrate is never used
  5988                           
  5989                           ;mcp2515.c: 289: } else {
  5990                           
  5991                           ;mcp2515.c: 288: return 1;
  5992                           ;	Return value of _can_baudrate is never used
  5993  0D8F  0008               	return
  5994  0D90                     __end_of_can_baudrate:	
  5995                           
  5996                           	psect	text13
  5997  0D30                     __ptext13:	
  5998 ;; *************** function _can_abort *****************
  5999 ;; Defined at:
  6000 ;;		line 294 in file "mcp2515.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      unsigned char 
  6007 ;; Registers used:
  6008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6017 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6018 ;;Total ram usage:        3 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    4
  6021 ;; This function calls:
  6022 ;;		_SPI_exchange
  6023 ;;		_can_ope_mode
  6024 ;; This function is called by:
  6025 ;;		_main
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function _can_abort
  6031  0D30                     _can_abort:	
  6032                           
  6033                           ;mcp2515.c: 295: can_ope_mode(0b10000000);
  6034                           
  6035                           ;incstack = 0
  6036                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6037  0D30  3080               	movlw	128
  6038  0D31  318E  2668  318D   	fcall	_can_ope_mode
  6039                           
  6040                           ;mcp2515.c: 297: buf[0] = 0b00000101;
  6041  0D34  3005               	movlw	5
  6042  0D35  0020               	movlb	0	; select bank0
  6043  0D36  00BF               	movwf	??_can_abort
  6044  0D37  083F               	movf	??_can_abort,w
  6045  0D38  0021               	movlb	1	; select bank1
  6046  0D39  00B3               	movwf	_buf^(0+128)
  6047                           
  6048                           ;mcp2515.c: 298: buf[1] = 0x0f;
  6049  0D3A  300F               	movlw	15
  6050  0D3B  0020               	movlb	0	; select bank0
  6051  0D3C  00BF               	movwf	??_can_abort
  6052  0D3D  083F               	movf	??_can_abort,w
  6053  0D3E  0021               	movlb	1	; select bank1
  6054  0D3F  00B4               	movwf	(_buf^(0+128)+1)
  6055                           
  6056                           ;mcp2515.c: 299: buf[2] = 0b00010000;
  6057  0D40  3010               	movlw	16
  6058  0D41  0020               	movlb	0	; select bank0
  6059  0D42  00BF               	movwf	??_can_abort
  6060  0D43  083F               	movf	??_can_abort,w
  6061  0D44  0021               	movlb	1	; select bank1
  6062  0D45  00B5               	movwf	(_buf^(0+128)+2)
  6063                           
  6064                           ;mcp2515.c: 300: buf[3] = 0b00010000;
  6065  0D46  3010               	movlw	16
  6066  0D47  0020               	movlb	0	; select bank0
  6067  0D48  00BF               	movwf	??_can_abort
  6068  0D49  083F               	movf	??_can_abort,w
  6069  0D4A  0021               	movlb	1	; select bank1
  6070  0D4B  00B6               	movwf	(_buf^(0+128)+3)
  6071                           
  6072                           ;mcp2515.c: 301: uint8_t bytes_written = SPI_exchange(buf, 4);
  6073  0D4C  3004               	movlw	4
  6074  0D4D  0020               	movlb	0	; select bank0
  6075  0D4E  00BF               	movwf	??_can_abort
  6076  0D4F  083F               	movf	??_can_abort,w
  6077  0D50  00F8               	movwf	SPI_exchange@len
  6078  0D51  30B3               	movlw	(low (_buf| 0))& (0+255)
  6079  0D52  318C  2480  318D   	fcall	_SPI_exchange
  6080  0D55  0020               	movlb	0	; select bank0
  6081  0D56  00C0               	movwf	??_can_abort+1
  6082  0D57  0840               	movf	??_can_abort+1,w
  6083  0D58  00C1               	movwf	can_abort@bytes_written
  6084                           
  6085                           ;mcp2515.c: 302: can_ope_mode(operation_mode);
  6086  0D59  0868               	movf	_operation_mode,w
  6087  0D5A  318E  2668         	fcall	_can_ope_mode
  6088                           
  6089                           ;mcp2515.c: 306: return 0;
  6090                           ;	Return value of _can_abort is never used
  6091                           
  6092                           ;mcp2515.c: 305: } else {
  6093                           
  6094                           ;mcp2515.c: 304: return 1;
  6095                           ;	Return value of _can_abort is never used
  6096  0D5C  0008               	return
  6097  0D5D                     __end_of_can_abort:	
  6098                           
  6099                           	psect	text14
  6100  0E68                     __ptext14:	
  6101 ;; *************** function _can_ope_mode *****************
  6102 ;; Defined at:
  6103 ;;		line 83 in file "mcp2515.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  ope_mode        1    wreg     unsigned char 
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;  ope_mode        1   30[BANK0 ] unsigned char 
  6108 ;;  bytes_writte    1   29[BANK0 ] unsigned char 
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      unsigned char 
  6111 ;; Registers used:
  6112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;Total ram usage:        4 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    3
  6125 ;; This function calls:
  6126 ;;		_SPI_exchange
  6127 ;;		_printf
  6128 ;; This function is called by:
  6129 ;;		_main
  6130 ;;		_can_init
  6131 ;;		_can_set_mask
  6132 ;;		_can_baudrate
  6133 ;;		_can_abort
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _can_ope_mode
  6139  0E68                     _can_ope_mode:	
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6143                           ;can_ope_mode@ope_mode stored from wreg
  6144  0E68  0020               	movlb	0	; select bank0
  6145  0E69  00BE               	movwf	can_ope_mode@ope_mode
  6146                           
  6147                           ;mcp2515.c: 84: buf[0] = 0b00000010;
  6148  0E6A  3002               	movlw	2
  6149  0E6B  00BB               	movwf	??_can_ope_mode
  6150  0E6C  083B               	movf	??_can_ope_mode,w
  6151  0E6D  0021               	movlb	1	; select bank1
  6152  0E6E  00B3               	movwf	_buf^(0+128)
  6153                           
  6154                           ;mcp2515.c: 85: buf[1] = 0x0f;
  6155  0E6F  300F               	movlw	15
  6156  0E70  0020               	movlb	0	; select bank0
  6157  0E71  00BB               	movwf	??_can_ope_mode
  6158  0E72  083B               	movf	??_can_ope_mode,w
  6159  0E73  0021               	movlb	1	; select bank1
  6160  0E74  00B4               	movwf	(_buf^(0+128)+1)
  6161                           
  6162                           ;mcp2515.c: 86: buf[2] = ope_mode;
  6163  0E75  0020               	movlb	0	; select bank0
  6164  0E76  083E               	movf	can_ope_mode@ope_mode,w
  6165  0E77  00BB               	movwf	??_can_ope_mode
  6166  0E78  083B               	movf	??_can_ope_mode,w
  6167  0E79  0021               	movlb	1	; select bank1
  6168  0E7A  00B5               	movwf	(_buf^(0+128)+2)
  6169                           
  6170                           ;mcp2515.c: 87: uint8_t bytes_written = SPI_exchange(buf, 3);
  6171  0E7B  3003               	movlw	3
  6172  0E7C  0020               	movlb	0	; select bank0
  6173  0E7D  00BB               	movwf	??_can_ope_mode
  6174  0E7E  083B               	movf	??_can_ope_mode,w
  6175  0E7F  00F8               	movwf	SPI_exchange@len
  6176  0E80  30B3               	movlw	(low (_buf| 0))& (0+255)
  6177  0E81  318C  2480  318E   	fcall	_SPI_exchange
  6178  0E84  0020               	movlb	0	; select bank0
  6179  0E85  00BC               	movwf	??_can_ope_mode+1
  6180  0E86  083C               	movf	??_can_ope_mode+1,w
  6181  0E87  00BD               	movwf	can_ope_mode@bytes_written
  6182                           
  6183                           ;mcp2515.c: 89: if (ope_mode != 0b10000000) operation_mode = ope_mode;
  6184  0E88  3080               	movlw	128
  6185  0E89  063E               	xorwf	can_ope_mode@ope_mode,w
  6186  0E8A  1903               	btfsc	3,2
  6187  0E8B  2E90               	goto	l2143
  6188  0E8C  083E               	movf	can_ope_mode@ope_mode,w
  6189  0E8D  00BB               	movwf	??_can_ope_mode
  6190  0E8E  083B               	movf	??_can_ope_mode,w
  6191  0E8F  00E8               	movwf	_operation_mode
  6192  0E90                     l2143:	
  6193                           
  6194                           ;mcp2515.c: 91: if (bytes_written == 3) {
  6195  0E90  3003               	movlw	3
  6196  0E91  063D               	xorwf	can_ope_mode@bytes_written,w
  6197  0E92  1D03               	btfss	3,2
  6198  0E93  0008               	return
  6199                           
  6200                           ;mcp2515.c: 92: buf[0] = 0b00000011;
  6201  0E94  3003               	movlw	3
  6202  0E95  00BB               	movwf	??_can_ope_mode
  6203  0E96  083B               	movf	??_can_ope_mode,w
  6204  0E97  0021               	movlb	1	; select bank1
  6205  0E98  00B3               	movwf	_buf^(0+128)
  6206                           
  6207                           ;mcp2515.c: 93: buf[1] = 0x0e;
  6208  0E99  300E               	movlw	14
  6209  0E9A  0020               	movlb	0	; select bank0
  6210  0E9B  00BB               	movwf	??_can_ope_mode
  6211  0E9C  083B               	movf	??_can_ope_mode,w
  6212  0E9D  0021               	movlb	1	; select bank1
  6213  0E9E  00B4               	movwf	(_buf^(0+128)+1)
  6214                           
  6215                           ;mcp2515.c: 94: bytes_written = SPI_exchange(buf, 3);
  6216  0E9F  3003               	movlw	3
  6217  0EA0  0020               	movlb	0	; select bank0
  6218  0EA1  00BB               	movwf	??_can_ope_mode
  6219  0EA2  083B               	movf	??_can_ope_mode,w
  6220  0EA3  00F8               	movwf	SPI_exchange@len
  6221  0EA4  30B3               	movlw	(low (_buf| 0))& (0+255)
  6222  0EA5  318C  2480  318E   	fcall	_SPI_exchange
  6223  0EA8  0020               	movlb	0	; select bank0
  6224  0EA9  00BC               	movwf	??_can_ope_mode+1
  6225  0EAA  083C               	movf	??_can_ope_mode+1,w
  6226  0EAB  00BD               	movwf	can_ope_mode@bytes_written
  6227                           
  6228                           ;mcp2515.c: 95: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6229  0EAC  0862               	movf	_mode,w
  6230  0EAD  1903               	btfsc	3,2
  6231  0EAE  0008               	return
  6232  0EAF  3074               	movlw	low (STR_22| (0+32768))
  6233  0EB0  00A2               	movwf	printf@f
  6234  0EB1  3093               	movlw	high (STR_22| (0+32768))
  6235  0EB2  00A3               	movwf	printf@f+1
  6236  0EB3  0021               	movlb	1	; select bank1
  6237  0EB4  0835               	movf	(_buf^(0+128)+2),w
  6238  0EB5  0020               	movlb	0	; select bank0
  6239  0EB6  00BB               	movwf	??_can_ope_mode
  6240  0EB7  01BC               	clrf	??_can_ope_mode+1
  6241  0EB8  083B               	movf	??_can_ope_mode,w
  6242  0EB9  00A4               	movwf	?_printf+2
  6243  0EBA  083C               	movf	??_can_ope_mode+1,w
  6244  0EBB  00A5               	movwf	?_printf+3
  6245  0EBC  3185  25B3         	fcall	_printf
  6246                           
  6247                           ;mcp2515.c: 98: return 0;
  6248                           ;	Return value of _can_ope_mode is never used
  6249                           
  6250                           ;mcp2515.c: 97: } else {
  6251                           
  6252                           ;mcp2515.c: 96: return 1;
  6253                           ;	Return value of _can_ope_mode is never used
  6254  0EBE  0008               	return
  6255  0EBF                     __end_of_can_ope_mode:	
  6256                           
  6257                           	psect	text15
  6258  05B3                     __ptext15:	
  6259 ;; *************** function _printf *****************
  6260 ;; Defined at:
  6261 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6264 ;;		 -> STR_55(5), STR_54(15), STR_53(15), STR_52(2), 
  6265 ;;		 -> STR_51(16), STR_50(16), STR_49(2), STR_48(16), 
  6266 ;;		 -> STR_47(16), STR_46(16), STR_45(2), STR_44(12), 
  6267 ;;		 -> STR_43(12), STR_42(12), STR_41(2), STR_40(12), 
  6268 ;;		 -> STR_39(12), STR_38(5), STR_37(13), STR_36(13), 
  6269 ;;		 -> STR_35(18), STR_34(17), STR_33(17), STR_32(20), 
  6270 ;;		 -> STR_31(14), STR_30(14), STR_29(14), STR_28(15), 
  6271 ;;		 -> STR_27(16), STR_26(17), STR_25(17), STR_24(23), 
  6272 ;;		 -> STR_23(21), STR_22(15), STR_21(22), STR_20(44), 
  6273 ;;		 -> STR_19(57), STR_18(26), STR_17(21), STR_16(38), 
  6274 ;;		 -> STR_15(25), STR_14(42), STR_13(38), STR_12(58), 
  6275 ;;		 -> STR_11(54), STR_10(59), STR_9(51), STR_7(36), 
  6276 ;;		 -> STR_6(3), STR_5(4), STR_4(2), STR_3(6), 
  6277 ;;		 -> STR_2(6), STR_1(7), 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  idx             1   14[BANK0 ] unsigned char 
  6280 ;;  tmpval          4    0        struct .
  6281 ;;  width           2   24[BANK0 ] int 
  6282 ;;  val             2   21[BANK0 ] unsigned int 
  6283 ;;  len             2   18[BANK0 ] unsigned int 
  6284 ;;  cp              2   16[BANK0 ] PTR const unsigned char 
  6285 ;;		 -> STR_56(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6286 ;;		 -> txf_clear@n(1), STR_8(20), main@buf(9), 
  6287 ;;  c               1   26[BANK0 ] char 
  6288 ;;  flag            1   23[BANK0 ] unsigned char 
  6289 ;;  ap              1   20[BANK0 ] PTR void [1]
  6290 ;;		 -> ?_printf(2), 
  6291 ;;  prec            1   15[BANK0 ] char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  2    2[BANK0 ] int 
  6294 ;; Registers used:
  6295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6301 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;Total ram usage:       25 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    2
  6308 ;; This function calls:
  6309 ;;		___lwdiv
  6310 ;;		___lwmod
  6311 ;;		___wmul
  6312 ;;		_isdigit
  6313 ;;		_putch
  6314 ;; This function is called by:
  6315 ;;		_receive_handler
  6316 ;;		_main
  6317 ;;		_can_ope_mode
  6318 ;;		_can_set_mask
  6319 ;;		_receive
  6320 ;;		_can_send
  6321 ;;		_can_status_check
  6322 ;;		_can_dump_registers
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _printf
  6328  05B3                     _printf:	
  6329                           
  6330                           ;doprnt.c: 466: va_list ap;
  6331                           ;doprnt.c: 499: signed char c;
  6332                           ;doprnt.c: 501: int width;
  6333                           ;doprnt.c: 506: signed char prec;
  6334                           ;doprnt.c: 508: unsigned char flag;
  6335                           ;doprnt.c: 523: union {
  6336                           ;doprnt.c: 524: unsigned long vd;
  6337                           ;doprnt.c: 525: double integ;
  6338                           ;doprnt.c: 526: } tmpval;
  6339                           ;doprnt.c: 528: unsigned int val;
  6340                           ;doprnt.c: 529: unsigned len;
  6341                           ;doprnt.c: 530: const char * cp;
  6342                           ;doprnt.c: 533: *ap = __va_start();
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6346  05B3  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6347  05B4  0020               	movlb	0	; select bank0
  6348  05B5  00AA               	movwf	??_printf
  6349  05B6  082A               	movf	??_printf,w
  6350  05B7  00B4               	movwf	printf@ap
  6351  05B8                     l2065:	
  6352                           ;doprnt.c: 536: while(c = *f++) {
  6353                           
  6354  05B8  0020               	movlb	0	; select bank0
  6355  05B9  0823               	movf	printf@f+1,w
  6356  05BA  00AB               	movwf	??_printf+1
  6357  05BB  0822               	movf	printf@f,w
  6358  05BC  00AA               	movwf	??_printf
  6359  05BD  0AA2               	incf	printf@f,f
  6360  05BE  1903               	skipnz
  6361  05BF  0AA3               	incf	printf@f+1,f
  6362  05C0  082A               	movf	??_printf,w
  6363  05C1  0084               	movwf	4
  6364  05C2  082B               	movf	??_printf+1,w
  6365  05C3  0085               	movwf	5
  6366  05C4  0800               	movf	0,w	;code access
  6367  05C5  00AC               	movwf	??_printf+2
  6368  05C6  082C               	movf	??_printf+2,w
  6369  05C7  00BA               	movwf	printf@c
  6370  05C8  083A               	movf	printf@c,w
  6371  05C9  1903               	btfsc	3,2
  6372  05CA  0008               	return
  6373                           
  6374                           ;doprnt.c: 538: if(c != '%')
  6375  05CB  3025               	movlw	37
  6376  05CC  063A               	xorwf	printf@c,w
  6377  05CD  1903               	btfsc	3,2
  6378  05CE  2DD4               	goto	l1917
  6379                           
  6380                           ;doprnt.c: 540: {
  6381                           ;doprnt.c: 541: (putch(c) );
  6382  05CF  083A               	movf	printf@c,w
  6383  05D0  318C  2419  3185   	fcall	_putch
  6384                           
  6385                           ;doprnt.c: 542: continue;
  6386  05D3  2DB8               	goto	l2065
  6387  05D4                     l1917:	
  6388                           
  6389                           ;doprnt.c: 543: }
  6390                           ;doprnt.c: 546: width = 0;
  6391  05D4  0020               	movlb	0	; select bank0
  6392  05D5  01B8               	clrf	printf@width
  6393  05D6  01B9               	clrf	printf@width+1
  6394                           
  6395                           ;doprnt.c: 548: flag = 0;
  6396  05D7  01B7               	clrf	printf@flag
  6397                           
  6398                           ;doprnt.c: 551: switch(*f) {
  6399                           
  6400                           ;doprnt.c: 550: for(;;) {
  6401  05D8  2DDE               	goto	l1923
  6402  05D9                     l383:	
  6403                           ;doprnt.c: 579: case '0':
  6404                           
  6405                           
  6406                           ;doprnt.c: 580: flag |= 0x04;
  6407  05D9  1537               	bsf	printf@flag,2
  6408                           
  6409                           ;doprnt.c: 581: f++;
  6410  05DA  3001               	movlw	1
  6411  05DB  07A2               	addwf	printf@f,f
  6412  05DC  3000               	movlw	0
  6413  05DD  3DA3               	addwfc	printf@f+1,f
  6414  05DE                     l1923:	
  6415                           ;doprnt.c: 584: }
  6416                           
  6417                           ;doprnt.c: 582: continue;
  6418                           
  6419  05DE  0822               	movf	printf@f,w
  6420  05DF  0084               	movwf	4
  6421  05E0  0823               	movf	printf@f+1,w
  6422  05E1  0085               	movwf	5
  6423  05E2  0800               	movf	0,w	;code access
  6424                           
  6425                           ; Switch size 1, requested type "space"
  6426                           ; Number of cases is 1, Range of values is 48 to 48
  6427                           ; switch strategies available:
  6428                           ; Name         Instructions Cycles
  6429                           ; simple_byte            4     3 (average)
  6430                           ; direct_byte           11     9 (fixed)
  6431                           ; jumptable            263     9 (fixed)
  6432                           ;	Chosen strategy is simple_byte
  6433  05E3  3A30               	xorlw	48	; case 48
  6434  05E4  1903               	skipnz
  6435  05E5  2DD9               	goto	l383
  6436  05E6  2DE7               	goto	l1925
  6437  05E7                     l1925:	
  6438                           ;doprnt.c: 586: }
  6439                           
  6440                           ;doprnt.c: 585: break;
  6441                           
  6442                           
  6443                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6444  05E7  0822               	movf	printf@f,w
  6445  05E8  0084               	movwf	4
  6446  05E9  0823               	movf	printf@f+1,w
  6447  05EA  0085               	movwf	5
  6448  05EB  0800               	movf	0,w	;code access
  6449  05EC  318C  2463  3185   	fcall	_isdigit
  6450  05EF  1C03               	btfss	3,0
  6451  05F0  2E92               	goto	l1977
  6452                           
  6453                           ;doprnt.c: 598: width = 0;
  6454  05F1  0020               	movlb	0	; select bank0
  6455  05F2  01B8               	clrf	printf@width
  6456  05F3  01B9               	clrf	printf@width+1
  6457  05F4                     l1929:	
  6458                           ;doprnt.c: 599: do {
  6459                           
  6460                           
  6461                           ;doprnt.c: 600: width *= 10;
  6462  05F4  300A               	movlw	10
  6463  05F5  00F0               	movwf	___wmul@multiplier
  6464  05F6  3000               	movlw	0
  6465  05F7  00F1               	movwf	___wmul@multiplier+1
  6466  05F8  0020               	movlb	0	; select bank0
  6467  05F9  0839               	movf	printf@width+1,w
  6468  05FA  00F3               	movwf	___wmul@multiplicand+1
  6469  05FB  0838               	movf	printf@width,w
  6470  05FC  00F2               	movwf	___wmul@multiplicand
  6471  05FD  318C  24C5  3185   	fcall	___wmul
  6472  0600  0871               	movf	?___wmul+1,w
  6473  0601  0020               	movlb	0	; select bank0
  6474  0602  00B9               	movwf	printf@width+1
  6475  0603  0870               	movf	?___wmul,w
  6476  0604  00B8               	movwf	printf@width
  6477                           
  6478                           ;doprnt.c: 601: width += *f++ - '0';
  6479  0605  0822               	movf	printf@f,w
  6480  0606  0084               	movwf	4
  6481  0607  0823               	movf	printf@f+1,w
  6482  0608  0085               	movwf	5
  6483  0609  0800               	movf	0,w	;code access
  6484  060A  3ED0               	addlw	208
  6485  060B  00AA               	movwf	??_printf
  6486  060C  30FF               	movlw	255
  6487  060D  1803               	skipnc
  6488  060E  3000               	movlw	0
  6489  060F  00AB               	movwf	??_printf+1
  6490  0610  082A               	movf	??_printf,w
  6491  0611  07B8               	addwf	printf@width,f
  6492  0612  082B               	movf	??_printf+1,w
  6493  0613  3DB9               	addwfc	printf@width+1,f
  6494  0614  3001               	movlw	1
  6495  0615  07A2               	addwf	printf@f,f
  6496  0616  3000               	movlw	0
  6497  0617  3DA3               	addwfc	printf@f+1,f
  6498                           
  6499                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6500  0618  0822               	movf	printf@f,w
  6501  0619  0084               	movwf	4
  6502  061A  0823               	movf	printf@f+1,w
  6503  061B  0085               	movwf	5
  6504  061C  0800               	movf	0,w	;code access
  6505  061D  318C  2463  3185   	fcall	_isdigit
  6506  0620  1C03               	btfss	3,0
  6507  0621  2E92               	goto	l1977
  6508  0622  2DF4               	goto	l1929
  6509  0623                     l396:	
  6510                           ;doprnt.c: 718: case 'x':
  6511                           
  6512                           ;doprnt.c: 698: case 'i':
  6513                           ;doprnt.c: 699: break;
  6514                           
  6515                           ;doprnt.c: 697: case 'd':
  6516                           
  6517                           ;doprnt.c: 638: goto alldone;
  6518                           
  6519                           ;doprnt.c: 637: case 0:
  6520                           
  6521                           ;doprnt.c: 608: }
  6522                           ;doprnt.c: 635: switch(c = *f++) {
  6523                           
  6524                           
  6525                           ;doprnt.c: 721: flag |= 0x80;
  6526  0623  17B7               	bsf	printf@flag,7
  6527                           
  6528                           ;doprnt.c: 723: break;
  6529  0624  2EB3               	goto	l395
  6530  0625                     l1937:	
  6531                           ;doprnt.c: 728: case 's':
  6532                           
  6533                           
  6534                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6535  0625  0834               	movf	printf@ap,w
  6536  0626  0086               	movwf	6
  6537  0627  0187               	clrf	7
  6538  0628  3F40               	moviw [0]fsr1
  6539  0629  00B0               	movwf	printf@cp
  6540  062A  3F41               	moviw [1]fsr1
  6541  062B  00B1               	movwf	printf@cp+1
  6542  062C  3002               	movlw	2
  6543  062D  00AA               	movwf	??_printf
  6544  062E  082A               	movf	??_printf,w
  6545  062F  07B4               	addwf	printf@ap,f
  6546                           
  6547                           ;doprnt.c: 740: if(!cp)
  6548  0630  0830               	movf	printf@cp,w
  6549  0631  0431               	iorwf	printf@cp+1,w
  6550  0632  1D03               	btfss	3,2
  6551  0633  2E38               	goto	l1945
  6552                           
  6553                           ;doprnt.c: 741: cp = "(null)";
  6554  0634  30FD               	movlw	low (STR_56| (0+32768))
  6555  0635  00B0               	movwf	printf@cp
  6556  0636  3093               	movlw	high (STR_56| (0+32768))
  6557  0637  00B1               	movwf	printf@cp+1
  6558  0638                     l1945:	
  6559                           
  6560                           ;doprnt.c: 745: len = 0;
  6561  0638  01B2               	clrf	printf@len
  6562  0639  01B3               	clrf	printf@len+1
  6563  063A                     l1949:	
  6564                           ;doprnt.c: 746: while(cp[len])
  6565                           
  6566  063A  0830               	movf	printf@cp,w
  6567  063B  0732               	addwf	printf@len,w
  6568  063C  0084               	movwf	4
  6569  063D  0831               	movf	printf@cp+1,w
  6570  063E  3D33               	addwfc	printf@len+1,w
  6571  063F  0085               	movwf	5
  6572  0640  0012               	moviw fsr0++
  6573  0641  1903               	btfsc	3,2
  6574  0642  2E48               	goto	l1951
  6575                           
  6576                           ;doprnt.c: 747: len++;
  6577  0643  3001               	movlw	1
  6578  0644  07B2               	addwf	printf@len,f
  6579  0645  3000               	movlw	0
  6580  0646  3DB3               	addwfc	printf@len+1,f
  6581  0647  2E3A               	goto	l1949
  6582  0648                     l1951:	
  6583                           ;doprnt.c: 750: dostring:
  6584                           
  6585                           
  6586                           ;doprnt.c: 757: if(width > len)
  6587  0648  0839               	movf	printf@width+1,w
  6588  0649  0233               	subwf	printf@len+1,w
  6589  064A  1D03               	skipz
  6590  064B  2E4E               	goto	u1525
  6591  064C  0838               	movf	printf@width,w
  6592  064D  0232               	subwf	printf@len,w
  6593  064E                     u1525:	
  6594  064E  1803               	skipnc
  6595  064F  2E55               	goto	l1955
  6596                           
  6597                           ;doprnt.c: 758: width -= len;
  6598  0650  0832               	movf	printf@len,w
  6599  0651  02B8               	subwf	printf@width,f
  6600  0652  0833               	movf	printf@len+1,w
  6601  0653  3BB9               	subwfb	printf@width+1,f
  6602  0654  2E57               	goto	l1959
  6603  0655                     l1955:	
  6604                           
  6605                           ;doprnt.c: 759: else
  6606                           ;doprnt.c: 760: width = 0;
  6607  0655  01B8               	clrf	printf@width
  6608  0656  01B9               	clrf	printf@width+1
  6609  0657                     l1959:	
  6610                           ;doprnt.c: 764: while(width--)
  6611                           
  6612  0657  30FF               	movlw	255
  6613  0658  0020               	movlb	0	; select bank0
  6614  0659  07B8               	addwf	printf@width,f
  6615  065A  30FF               	movlw	255
  6616  065B  3DB9               	addwfc	printf@width+1,f
  6617  065C  0A38               	incf	printf@width,w
  6618  065D  1903               	btfsc	3,2
  6619  065E  0A39               	incf	printf@width+1,w
  6620  065F  1903               	btfsc	3,2
  6621  0660  2E73               	goto	l1965
  6622                           
  6623                           ;doprnt.c: 765: (putch(' ') );
  6624  0661  3020               	movlw	32
  6625  0662  318C  2419  3185   	fcall	_putch
  6626  0665  2E57               	goto	l1959
  6627  0666                     l1961:	
  6628                           ;doprnt.c: 767: while(len--)
  6629                           
  6630                           
  6631                           ;doprnt.c: 768: (putch(*cp++) );
  6632  0666  0830               	movf	printf@cp,w
  6633  0667  0084               	movwf	4
  6634  0668  0831               	movf	printf@cp+1,w
  6635  0669  0085               	movwf	5
  6636  066A  0800               	movf	0,w	;code access
  6637  066B  318C  2419  3185   	fcall	_putch
  6638  066E  3001               	movlw	1
  6639  066F  0020               	movlb	0	; select bank0
  6640  0670  07B0               	addwf	printf@cp,f
  6641  0671  3000               	movlw	0
  6642  0672  3DB1               	addwfc	printf@cp+1,f
  6643  0673                     l1965:	
  6644  0673  3001               	movlw	1
  6645  0674  02B2               	subwf	printf@len,f
  6646  0675  3000               	movlw	0
  6647  0676  3BB3               	subwfb	printf@len+1,f
  6648  0677  0A32               	incf	printf@len,w
  6649  0678  1D03               	skipz
  6650  0679  2E66               	goto	l1961
  6651  067A  0A33               	incf	printf@len+1,w
  6652  067B  1903               	btfsc	3,2
  6653  067C  2DB8               	goto	l2065
  6654  067D  2E66               	goto	l1961
  6655  067E                     l1967:	
  6656                           ;doprnt.c: 784: case 'c':
  6657                           
  6658                           ;doprnt.c: 774: continue;
  6659                           
  6660                           
  6661                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6662  067E  0834               	movf	printf@ap,w
  6663  067F  0086               	movwf	6
  6664  0680  0187               	clrf	7
  6665  0681  0801               	movf	1,w
  6666  0682  00AA               	movwf	??_printf
  6667  0683  082A               	movf	??_printf,w
  6668  0684  00BA               	movwf	printf@c
  6669  0685  3002               	movlw	2
  6670  0686  00AA               	movwf	??_printf
  6671  0687  082A               	movf	??_printf,w
  6672  0688  07B4               	addwf	printf@ap,f
  6673  0689                     l1971:	
  6674                           ;doprnt.c: 802: default:
  6675                           
  6676                           
  6677                           ;doprnt.c: 805: cp = (char *)&c;
  6678  0689  303A               	movlw	low printf@c
  6679  068A  00B0               	movwf	printf@cp
  6680  068B  3000               	movlw	high printf@c
  6681  068C  00B1               	movwf	printf@cp+1
  6682                           
  6683                           ;doprnt.c: 806: len = 1;
  6684  068D  3001               	movlw	1
  6685  068E  00B2               	movwf	printf@len
  6686  068F  3000               	movlw	0
  6687  0690  00B3               	movwf	printf@len+1
  6688                           
  6689                           ;doprnt.c: 807: goto dostring;
  6690  0691  2E48               	goto	l1951
  6691  0692                     l1977:	
  6692                           ;doprnt.c: 822: }
  6693                           
  6694  0692  0020               	movlb	0	; select bank0
  6695  0693  0823               	movf	printf@f+1,w
  6696  0694  00AB               	movwf	??_printf+1
  6697  0695  0822               	movf	printf@f,w
  6698  0696  00AA               	movwf	??_printf
  6699  0697  0AA2               	incf	printf@f,f
  6700  0698  1903               	skipnz
  6701  0699  0AA3               	incf	printf@f+1,f
  6702  069A  082A               	movf	??_printf,w
  6703  069B  0084               	movwf	4
  6704  069C  082B               	movf	??_printf+1,w
  6705  069D  0085               	movwf	5
  6706  069E  0800               	movf	0,w	;code access
  6707  069F  00BA               	movwf	printf@c
  6708                           
  6709                           ; Switch size 1, requested type "space"
  6710                           ; Number of cases is 6, Range of values is 0 to 120
  6711                           ; switch strategies available:
  6712                           ; Name         Instructions Cycles
  6713                           ; simple_byte           19    10 (average)
  6714                           ; direct_byte          248     6 (fixed)
  6715                           ; jumptable            260     6 (fixed)
  6716                           ;	Chosen strategy is simple_byte
  6717  06A0  3A00               	xorlw	0	; case 0
  6718  06A1  1903               	skipnz
  6719  06A2  2FED               	goto	l447
  6720  06A3  3A63               	xorlw	99	; case 99
  6721  06A4  1903               	skipnz
  6722  06A5  2E7E               	goto	l1967
  6723  06A6  3A07               	xorlw	7	; case 100
  6724  06A7  1903               	skipnz
  6725  06A8  2EB3               	goto	l395
  6726  06A9  3A0D               	xorlw	13	; case 105
  6727  06AA  1903               	skipnz
  6728  06AB  2EB3               	goto	l395
  6729  06AC  3A1A               	xorlw	26	; case 115
  6730  06AD  1903               	skipnz
  6731  06AE  2E25               	goto	l1937
  6732  06AF  3A0B               	xorlw	11	; case 120
  6733  06B0  1903               	skipnz
  6734  06B1  2E23               	goto	l396
  6735  06B2  2E89               	goto	l1971
  6736  06B3                     l395:	
  6737                           
  6738                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6739  06B3  0020               	movlb	0	; select bank0
  6740  06B4  1BB7               	btfsc	printf@flag,7
  6741  06B5  2ECD               	goto	l1989
  6742                           
  6743                           ;doprnt.c: 1253: {
  6744                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6745  06B6  0834               	movf	printf@ap,w
  6746  06B7  0086               	movwf	6
  6747  06B8  0187               	clrf	7
  6748  06B9  3F40               	moviw [0]fsr1
  6749  06BA  00B5               	movwf	printf@val
  6750  06BB  3F41               	moviw [1]fsr1
  6751  06BC  00B6               	movwf	printf@val+1
  6752  06BD  3002               	movlw	2
  6753  06BE  00AA               	movwf	??_printf
  6754  06BF  082A               	movf	??_printf,w
  6755  06C0  07B4               	addwf	printf@ap,f
  6756                           
  6757                           ;doprnt.c: 1261: if((int)val < 0) {
  6758  06C1  1FB6               	btfss	printf@val+1,7
  6759  06C2  2F1D               	goto	l2015
  6760                           
  6761                           ;doprnt.c: 1262: flag |= 0x03;
  6762  06C3  3003               	movlw	3
  6763  06C4  00AA               	movwf	??_printf
  6764  06C5  082A               	movf	??_printf,w
  6765  06C6  04B7               	iorwf	printf@flag,f
  6766                           
  6767                           ;doprnt.c: 1263: val = -val;
  6768  06C7  09B5               	comf	printf@val,f
  6769  06C8  09B6               	comf	printf@val+1,f
  6770  06C9  0AB5               	incf	printf@val,f
  6771  06CA  1903               	skipnz
  6772  06CB  0AB6               	incf	printf@val+1,f
  6773                           
  6774                           ;doprnt.c: 1264: }
  6775                           ;doprnt.c: 1266: }
  6776  06CC  2F1D               	goto	l2015
  6777  06CD                     l1989:	
  6778                           
  6779                           ;doprnt.c: 1268: else
  6780                           ;doprnt.c: 1273: {
  6781                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6782  06CD  0834               	movf	printf@ap,w
  6783  06CE  0086               	movwf	6
  6784  06CF  0187               	clrf	7
  6785  06D0  3F40               	moviw [0]fsr1
  6786  06D1  00B5               	movwf	printf@val
  6787  06D2  3F41               	moviw [1]fsr1
  6788  06D3  00B6               	movwf	printf@val+1
  6789  06D4  3002               	movlw	2
  6790  06D5  00AA               	movwf	??_printf
  6791  06D6  082A               	movf	??_printf,w
  6792  06D7  07B4               	addwf	printf@ap,f
  6793                           
  6794                           ;doprnt.c: 1287: }
  6795                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6796  06D8  2F1D               	goto	l2015
  6797  06D9                     l417:	
  6798                           ;doprnt.c: 1299: case 0x00:
  6799                           
  6800                           
  6801                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6802  06D9  01BA               	clrf	printf@c
  6803  06DA  0ABA               	incf	printf@c,f
  6804  06DB                     L9:	
  6805  06DB  3005               	movlw	5
  6806  06DC  063A               	xorwf	printf@c,w
  6807  06DD  1903               	btfsc	3,2
  6808  06DE  2F26               	goto	l2017
  6809                           
  6810                           ;doprnt.c: 1306: if(val < dpowers[c])
  6811  06DF  083A               	movf	printf@c,w
  6812  06E0  00AA               	movwf	??_printf
  6813  06E1  01AB               	clrf	??_printf+1
  6814  06E2  35AA               	lslf	??_printf,f
  6815  06E3  0DAB               	rlf	??_printf+1,f
  6816  06E4  30EB               	movlw	low (_dpowers| (0+32768))
  6817  06E5  072A               	addwf	??_printf,w
  6818  06E6  0084               	movwf	4
  6819  06E7  3093               	movlw	high (_dpowers| (0+32768))
  6820  06E8  3D2B               	addwfc	??_printf+1,w
  6821  06E9  0085               	movwf	5
  6822  06EA  3F00               	moviw [0]fsr0
  6823  06EB  00AC               	movwf	??_printf+2
  6824  06EC  3F01               	moviw [1]fsr0
  6825  06ED  00AD               	movwf	??_printf+3
  6826  06EE  082D               	movf	??_printf+3,w
  6827  06EF  0236               	subwf	printf@val+1,w
  6828  06F0  1D03               	skipz
  6829  06F1  2EF4               	goto	u1585
  6830  06F2  082C               	movf	??_printf+2,w
  6831  06F3  0235               	subwf	printf@val,w
  6832  06F4                     u1585:	
  6833  06F4  1C03               	btfss	3,0
  6834  06F5  2F26               	goto	l2017
  6835                           
  6836                           ;doprnt.c: 1307: break;
  6837  06F6  3001               	movlw	1
  6838  06F7  00AA               	movwf	??_printf
  6839  06F8  082A               	movf	??_printf,w
  6840  06F9  07BA               	addwf	printf@c,f
  6841  06FA  2EDB               	goto	L9
  6842  06FB                     l422:	
  6843                           ;doprnt.c: 1314: case 0x80:
  6844                           
  6845                           ;doprnt.c: 1309: break;
  6846                           
  6847                           
  6848                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6849  06FB  01BA               	clrf	printf@c
  6850  06FC  0ABA               	incf	printf@c,f
  6851  06FD                     L10:	
  6852  06FD  3004               	movlw	4
  6853  06FE  063A               	xorwf	printf@c,w
  6854  06FF  1903               	btfsc	3,2
  6855  0700  2F26               	goto	l2017
  6856                           
  6857                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6858  0701  083A               	movf	printf@c,w
  6859  0702  00AA               	movwf	??_printf
  6860  0703  01AB               	clrf	??_printf+1
  6861  0704  35AA               	lslf	??_printf,f
  6862  0705  0DAB               	rlf	??_printf+1,f
  6863  0706  30F5               	movlw	low (_hexpowers| (0+32768))
  6864  0707  072A               	addwf	??_printf,w
  6865  0708  0084               	movwf	4
  6866  0709  3093               	movlw	high (_hexpowers| (0+32768))
  6867  070A  3D2B               	addwfc	??_printf+1,w
  6868  070B  0085               	movwf	5
  6869  070C  3F00               	moviw [0]fsr0
  6870  070D  00AC               	movwf	??_printf+2
  6871  070E  3F01               	moviw [1]fsr0
  6872  070F  00AD               	movwf	??_printf+3
  6873  0710  082D               	movf	??_printf+3,w
  6874  0711  0236               	subwf	printf@val+1,w
  6875  0712  1D03               	skipz
  6876  0713  2F16               	goto	u1615
  6877  0714  082C               	movf	??_printf+2,w
  6878  0715  0235               	subwf	printf@val,w
  6879  0716                     u1615:	
  6880  0716  1C03               	btfss	3,0
  6881  0717  2F26               	goto	l2017
  6882                           
  6883                           ;doprnt.c: 1318: break;
  6884  0718  3001               	movlw	1
  6885  0719  00AA               	movwf	??_printf
  6886  071A  082A               	movf	??_printf,w
  6887  071B  07BA               	addwf	printf@c,f
  6888  071C  2EFD               	goto	L10
  6889  071D                     l2015:	
  6890                           ;doprnt.c: 1336: }
  6891                           
  6892                           ;doprnt.c: 1320: break;
  6893                           
  6894  071D  0837               	movf	printf@flag,w
  6895  071E  3980               	andlw	128
  6896                           
  6897                           ; Switch size 1, requested type "space"
  6898                           ; Number of cases is 2, Range of values is 0 to 128
  6899                           ; switch strategies available:
  6900                           ; Name         Instructions Cycles
  6901                           ; simple_byte            7     4 (average)
  6902                           ; jumptable            260     6 (fixed)
  6903                           ;	Chosen strategy is simple_byte
  6904  071F  3A00               	xorlw	0	; case 0
  6905  0720  1903               	skipnz
  6906  0721  2ED9               	goto	l417
  6907  0722  3A80               	xorlw	128	; case 128
  6908  0723  1903               	skipnz
  6909  0724  2EFB               	goto	l422
  6910  0725  2F26               	goto	l2017
  6911  0726                     l2017:	
  6912                           
  6913                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6914  0726  0838               	movf	printf@width,w
  6915  0727  0439               	iorwf	printf@width+1,w
  6916  0728  1903               	btfsc	3,2
  6917  0729  2F32               	goto	l426
  6918  072A  0837               	movf	printf@flag,w
  6919  072B  3903               	andlw	3
  6920  072C  1903               	btfsc	3,2
  6921  072D  2F32               	goto	l426
  6922                           
  6923                           ;doprnt.c: 1346: width--;
  6924  072E  30FF               	movlw	255
  6925  072F  07B8               	addwf	printf@width,f
  6926  0730  30FF               	movlw	255
  6927  0731  3DB9               	addwfc	printf@width+1,f
  6928  0732                     l426:	
  6929                           
  6930                           ;doprnt.c: 1381: if(width > c)
  6931  0732  083A               	movf	printf@c,w
  6932  0733  00AA               	movwf	??_printf
  6933  0734  01AB               	clrf	??_printf+1
  6934  0735  1BAA               	btfsc	??_printf,7
  6935  0736  03AB               	decf	??_printf+1,f
  6936  0737  082B               	movf	??_printf+1,w
  6937  0738  3A80               	xorlw	128
  6938  0739  00AC               	movwf	??_printf+2
  6939  073A  0839               	movf	printf@width+1,w
  6940  073B  3A80               	xorlw	128
  6941  073C  022C               	subwf	??_printf+2,w
  6942  073D  1D03               	skipz
  6943  073E  2F41               	goto	u1655
  6944  073F  0838               	movf	printf@width,w
  6945  0740  022A               	subwf	??_printf,w
  6946  0741                     u1655:	
  6947  0741  1803               	skipnc
  6948  0742  2F4E               	goto	l2025
  6949                           
  6950                           ;doprnt.c: 1382: width -= c;
  6951  0743  0020               	movlb	0	; select bank0
  6952  0744  083A               	movf	printf@c,w
  6953  0745  00AA               	movwf	??_printf
  6954  0746  01AB               	clrf	??_printf+1
  6955  0747  1BAA               	btfsc	??_printf,7
  6956  0748  03AB               	decf	??_printf+1,f
  6957  0749  082A               	movf	??_printf,w
  6958  074A  02B8               	subwf	printf@width,f
  6959  074B  082B               	movf	??_printf+1,w
  6960  074C  3BB9               	subwfb	printf@width+1,f
  6961  074D  2F51               	goto	l2027
  6962  074E                     l2025:	
  6963                           
  6964                           ;doprnt.c: 1383: else
  6965                           ;doprnt.c: 1384: width = 0;
  6966  074E  0020               	movlb	0	; select bank0
  6967  074F  01B8               	clrf	printf@width
  6968  0750  01B9               	clrf	printf@width+1
  6969  0751                     l2027:	
  6970                           
  6971                           ;doprnt.c: 1387: if(flag & 0x04) {
  6972  0751  1D37               	btfss	printf@flag,2
  6973  0752  2F6A               	goto	l2039
  6974                           
  6975                           ;doprnt.c: 1392: if(flag & 0x03)
  6976  0753  0837               	movf	printf@flag,w
  6977  0754  3903               	andlw	3
  6978  0755  1903               	btfsc	3,2
  6979  0756  2F5B               	goto	l2033
  6980                           
  6981                           ;doprnt.c: 1393: (putch('-') );
  6982  0757  302D               	movlw	45
  6983  0758  318C  2419  3185   	fcall	_putch
  6984  075B                     l2033:	
  6985                           
  6986                           ;doprnt.c: 1415: if(width)
  6987  075B  0020               	movlb	0	; select bank0
  6988  075C                     L11:	
  6989  075C  0838               	movf	printf@width,w
  6990  075D  0439               	iorwf	printf@width+1,w
  6991  075E  1903               	btfsc	3,2
  6992  075F  2F83               	goto	l2049
  6993                           
  6994                           ;doprnt.c: 1417: (putch('0') );
  6995                           
  6996                           ;doprnt.c: 1416: do
  6997  0760  3030               	movlw	48
  6998  0761  318C  2419  3185   	fcall	_putch
  6999                           
  7000                           ;doprnt.c: 1418: while(--width);
  7001  0764  30FF               	movlw	255
  7002  0765  0020               	movlb	0	; select bank0
  7003  0766  07B8               	addwf	printf@width,f
  7004  0767  30FF               	movlw	255
  7005  0768  3DB9               	addwfc	printf@width+1,f
  7006  0769  2F5C               	goto	L11
  7007  076A                     l2039:	
  7008                           ;doprnt.c: 1420: } else
  7009                           
  7010                           
  7011                           ;doprnt.c: 1422: {
  7012                           ;doprnt.c: 1424: if(width
  7013                           ;doprnt.c: 1428: )
  7014  076A  0838               	movf	printf@width,w
  7015  076B  0439               	iorwf	printf@width+1,w
  7016  076C  1903               	btfsc	3,2
  7017  076D  2F7B               	goto	l2045
  7018  076E                     l2041:	
  7019                           ;doprnt.c: 1429: do
  7020                           
  7021                           
  7022                           ;doprnt.c: 1430: (putch(' ') );
  7023  076E  3020               	movlw	32
  7024  076F  318C  2419  3185   	fcall	_putch
  7025                           
  7026                           ;doprnt.c: 1431: while(--width);
  7027  0772  30FF               	movlw	255
  7028  0773  0020               	movlb	0	; select bank0
  7029  0774  07B8               	addwf	printf@width,f
  7030  0775  30FF               	movlw	255
  7031  0776  3DB9               	addwfc	printf@width+1,f
  7032  0777  0838               	movf	printf@width,w
  7033  0778  0439               	iorwf	printf@width+1,w
  7034  0779  1D03               	btfss	3,2
  7035  077A  2F6E               	goto	l2041
  7036  077B                     l2045:	
  7037                           
  7038                           ;doprnt.c: 1438: if(flag & 0x03)
  7039  077B  0837               	movf	printf@flag,w
  7040  077C  3903               	andlw	3
  7041  077D  1903               	btfsc	3,2
  7042  077E  2F83               	goto	l2049
  7043                           
  7044                           ;doprnt.c: 1439: (putch('-') );
  7045  077F  302D               	movlw	45
  7046  0780  318C  2419  3185   	fcall	_putch
  7047  0783                     l2049:	
  7048                           
  7049                           ;doprnt.c: 1469: }
  7050                           ;doprnt.c: 1472: prec = c;
  7051  0783  0020               	movlb	0	; select bank0
  7052  0784  083A               	movf	printf@c,w
  7053  0785  00AA               	movwf	??_printf
  7054  0786  082A               	movf	??_printf,w
  7055  0787  00AF               	movwf	printf@prec
  7056                           
  7057                           ;doprnt.c: 1474: while(prec--) {
  7058  0788  2FDB               	goto	l2063
  7059  0789                     l2051:	
  7060                           ;doprnt.c: 1478: {
  7061                           ;doprnt.c: 1483: case 0x00:
  7062                           
  7063                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7064                           
  7065                           
  7066                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7067  0789  300A               	movlw	10
  7068  078A  00F8               	movwf	___lwmod@divisor
  7069  078B  3000               	movlw	0
  7070  078C  00F9               	movwf	___lwmod@divisor+1
  7071  078D  082F               	movf	printf@prec,w
  7072  078E  00AA               	movwf	??_printf
  7073  078F  01AB               	clrf	??_printf+1
  7074  0790  35AA               	lslf	??_printf,f
  7075  0791  0DAB               	rlf	??_printf+1,f
  7076  0792  30EB               	movlw	low (_dpowers| (0+32768))
  7077  0793  072A               	addwf	??_printf,w
  7078  0794  0084               	movwf	4
  7079  0795  3093               	movlw	high (_dpowers| (0+32768))
  7080  0796  3D2B               	addwfc	??_printf+1,w
  7081  0797  0085               	movwf	5
  7082  0798  3F00               	moviw [0]fsr0
  7083  0799  00F0               	movwf	___lwdiv@divisor
  7084  079A  3F01               	moviw [1]fsr0
  7085  079B  00F1               	movwf	___lwdiv@divisor+1
  7086  079C  0836               	movf	printf@val+1,w
  7087  079D  00F3               	movwf	___lwdiv@dividend+1
  7088  079E  0835               	movf	printf@val,w
  7089  079F  00F2               	movwf	___lwdiv@dividend
  7090  07A0  318D  2590  3185   	fcall	___lwdiv
  7091  07A3  0871               	movf	?___lwdiv+1,w
  7092  07A4  00FB               	movwf	___lwmod@dividend+1
  7093  07A5  0870               	movf	?___lwdiv,w
  7094  07A6  00FA               	movwf	___lwmod@dividend
  7095  07A7  318D  2504  3185   	fcall	___lwmod
  7096  07AA  0878               	movf	?___lwmod,w
  7097  07AB  3E30               	addlw	48
  7098  07AC  0020               	movlb	0	; select bank0
  7099  07AD  00AC               	movwf	??_printf+2
  7100  07AE  082C               	movf	??_printf+2,w
  7101  07AF  2FD6               	goto	L8
  7102  07B0                     l2053:	
  7103                           ;doprnt.c: 1497: case 0x80:
  7104                           
  7105                           ;doprnt.c: 1491: break;
  7106                           
  7107                           
  7108                           ;doprnt.c: 1499: {
  7109                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7110  07B0  082F               	movf	printf@prec,w
  7111  07B1  00AA               	movwf	??_printf
  7112  07B2  01AB               	clrf	??_printf+1
  7113  07B3  35AA               	lslf	??_printf,f
  7114  07B4  0DAB               	rlf	??_printf+1,f
  7115  07B5  30F5               	movlw	low (_hexpowers| (0+32768))
  7116  07B6  072A               	addwf	??_printf,w
  7117  07B7  0084               	movwf	4
  7118  07B8  3093               	movlw	high (_hexpowers| (0+32768))
  7119  07B9  3D2B               	addwfc	??_printf+1,w
  7120  07BA  0085               	movwf	5
  7121  07BB  3F00               	moviw [0]fsr0
  7122  07BC  00F0               	movwf	___lwdiv@divisor
  7123  07BD  3F01               	moviw [1]fsr0
  7124  07BE  00F1               	movwf	___lwdiv@divisor+1
  7125  07BF  0836               	movf	printf@val+1,w
  7126  07C0  00F3               	movwf	___lwdiv@dividend+1
  7127  07C1  0835               	movf	printf@val,w
  7128  07C2  00F2               	movwf	___lwdiv@dividend
  7129  07C3  318D  2590  3185   	fcall	___lwdiv
  7130  07C6  0870               	movf	?___lwdiv,w
  7131  07C7  390F               	andlw	15
  7132  07C8  0020               	movlb	0	; select bank0
  7133  07C9  00AC               	movwf	??_printf+2
  7134  07CA  082C               	movf	??_printf+2,w
  7135  07CB  00AE               	movwf	printf@idx
  7136                           
  7137                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7138  07CC  082E               	movf	printf@idx,w
  7139  07CD  3EA1               	addlw	low (STR_57| (0+32768))
  7140  07CE  0084               	movwf	4
  7141  07CF  3092               	movlw	high (STR_57| (0+32768))
  7142  07D0  1803               	skipnc
  7143  07D1  3E01               	addlw	1
  7144  07D2  0085               	movwf	5
  7145  07D3  0800               	movf	0,w	;code access
  7146  07D4  00AA               	movwf	??_printf
  7147  07D5  082A               	movf	??_printf,w
  7148  07D6                     L8:	
  7149  07D6  00BA               	movwf	printf@c
  7150  07D7                     l2061:	
  7151                           ;doprnt.c: 1523: }
  7152                           
  7153                           ;doprnt.c: 1508: }
  7154                           ;doprnt.c: 1510: break;
  7155                           
  7156                           
  7157                           ;doprnt.c: 1524: (putch(c) );
  7158  07D7  083A               	movf	printf@c,w
  7159  07D8  318C  2419  3185   	fcall	_putch
  7160  07DB                     l2063:	
  7161  07DB  30FF               	movlw	255
  7162  07DC  0020               	movlb	0	; select bank0
  7163  07DD  00AA               	movwf	??_printf
  7164  07DE  082A               	movf	??_printf,w
  7165  07DF  07AF               	addwf	printf@prec,f
  7166  07E0  0A2F               	incf	printf@prec,w
  7167  07E1  1903               	btfsc	3,2
  7168  07E2  2DB8               	goto	l2065
  7169  07E3  0837               	movf	printf@flag,w
  7170  07E4  3980               	andlw	128
  7171                           
  7172                           ; Switch size 1, requested type "space"
  7173                           ; Number of cases is 2, Range of values is 0 to 128
  7174                           ; switch strategies available:
  7175                           ; Name         Instructions Cycles
  7176                           ; simple_byte            7     4 (average)
  7177                           ; jumptable            260     6 (fixed)
  7178                           ;	Chosen strategy is simple_byte
  7179  07E5  3A00               	xorlw	0	; case 0
  7180  07E6  1903               	skipnz
  7181  07E7  2F89               	goto	l2051
  7182  07E8  3A80               	xorlw	128	; case 128
  7183  07E9  1903               	skipnz
  7184  07EA  2FB0               	goto	l2053
  7185  07EB  2FD7               	goto	l2061
  7186  07EC  2FD7               	goto	l2061
  7187  07ED                     l447:	
  7188                           ;doprnt.c: 1540: return 0;
  7189                           ;	Return value of _printf is never used
  7190                           
  7191                           ;doprnt.c: 1525: }
  7192                           ;doprnt.c: 1533: }
  7193                           ;doprnt.c: 1535: alldone:
  7194                           
  7195  07ED  0008               	return
  7196  07EE                     __end_of_printf:	
  7197                           
  7198                           	psect	text16
  7199  0C19                     __ptext16:	
  7200 ;; *************** function _putch *****************
  7201 ;; Defined at:
  7202 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  txData          1    wreg     unsigned char 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  txData          1    1[COMMON] unsigned char 
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  1    wreg      void 
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, status,0, pclath, cstack
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;Total ram usage:        1 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    1
  7223 ;; This function calls:
  7224 ;;		_EUSART_Write
  7225 ;; This function is called by:
  7226 ;;		_printf
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function _putch
  7232  0C19                     _putch:	
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7236                           ;putch@txData stored from wreg
  7237  0C19  00F1               	movwf	putch@txData
  7238                           
  7239                           ;eusart.c: 109: EUSART_Write(txData);
  7240  0C1A  0871               	movf	putch@txData,w
  7241  0C1B  318C  2432         	fcall	_EUSART_Write
  7242  0C1D  0008               	return
  7243  0C1E                     __end_of_putch:	
  7244                           
  7245                           	psect	text17
  7246  0C32                     __ptext17:	
  7247 ;; *************** function _EUSART_Write *****************
  7248 ;; Defined at:
  7249 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;  txData          1    wreg     unsigned char 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  txData          1    0[COMMON] unsigned char 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;Total ram usage:        1 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_putch
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _EUSART_Write
  7278  0C32                     _EUSART_Write:	
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in _EUSART_Write: [wreg]
  7282                           ;EUSART_Write@txData stored from wreg
  7283  0C32  00F0               	movwf	EUSART_Write@txData
  7284  0C33                     l58:	
  7285                           ;eusart.c: 96: {
  7286                           
  7287                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7288                           
  7289  0C33  0020               	movlb	0	; select bank0
  7290  0C34  1E11               	btfss	17,4	;volatile
  7291  0C35  2C33               	goto	l58
  7292                           
  7293                           ;eusart.c: 97: }
  7294                           ;eusart.c: 99: TXREG = txData;
  7295  0C36  0870               	movf	EUSART_Write@txData,w
  7296  0C37  0023               	movlb	3	; select bank3
  7297  0C38  009A               	movwf	26	;volatile
  7298  0C39  0008               	return
  7299  0C3A                     __end_of_EUSART_Write:	
  7300                           
  7301                           	psect	text18
  7302  0D04                     __ptext18:	
  7303 ;; *************** function ___lwmod *****************
  7304 ;; Defined at:
  7305 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  divisor         2    8[COMMON] unsigned int 
  7308 ;;  dividend        2   10[COMMON] unsigned int 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  counter         1   13[COMMON] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  2    8[COMMON] unsigned int 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;Total ram usage:        6 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_printf
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function ___lwmod
  7335  0D04                     ___lwmod:	
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7339  0D04  0878               	movf	___lwmod@divisor,w
  7340  0D05  0479               	iorwf	___lwmod@divisor+1,w
  7341  0D06  1903               	btfsc	3,2
  7342  0D07  2D2B               	goto	l1875
  7343  0D08  01FD               	clrf	___lwmod@counter
  7344  0D09  0AFD               	incf	___lwmod@counter,f
  7345  0D0A                     l1865:	
  7346  0D0A  1BF9               	btfsc	___lwmod@divisor+1,7
  7347  0D0B  2D16               	goto	l1867
  7348  0D0C  3001               	movlw	1
  7349  0D0D                     u1365:	
  7350  0D0D  35F8               	lslf	___lwmod@divisor,f
  7351  0D0E  0DF9               	rlf	___lwmod@divisor+1,f
  7352  0D0F  0B89               	decfsz	9,f
  7353  0D10  2D0D               	goto	u1365
  7354  0D11  3001               	movlw	1
  7355  0D12  00FC               	movwf	??___lwmod
  7356  0D13  087C               	movf	??___lwmod,w
  7357  0D14  07FD               	addwf	___lwmod@counter,f
  7358  0D15  2D0A               	goto	l1865
  7359  0D16                     l1867:	
  7360  0D16  0879               	movf	___lwmod@divisor+1,w
  7361  0D17  027B               	subwf	___lwmod@dividend+1,w
  7362  0D18  1D03               	skipz
  7363  0D19  2D1C               	goto	u1385
  7364  0D1A  0878               	movf	___lwmod@divisor,w
  7365  0D1B  027A               	subwf	___lwmod@dividend,w
  7366  0D1C                     u1385:	
  7367  0D1C  1C03               	skipc
  7368  0D1D  2D22               	goto	l1871
  7369  0D1E  0878               	movf	___lwmod@divisor,w
  7370  0D1F  02FA               	subwf	___lwmod@dividend,f
  7371  0D20  0879               	movf	___lwmod@divisor+1,w
  7372  0D21  3BFB               	subwfb	___lwmod@dividend+1,f
  7373  0D22                     l1871:	
  7374  0D22  3001               	movlw	1
  7375  0D23                     u1395:	
  7376  0D23  36F9               	lsrf	___lwmod@divisor+1,f
  7377  0D24  0CF8               	rrf	___lwmod@divisor,f
  7378  0D25  0B89               	decfsz	9,f
  7379  0D26  2D23               	goto	u1395
  7380  0D27  3001               	movlw	1
  7381  0D28  02FD               	subwf	___lwmod@counter,f
  7382  0D29  1D03               	btfss	3,2
  7383  0D2A  2D16               	goto	l1867
  7384  0D2B                     l1875:	
  7385  0D2B  087B               	movf	___lwmod@dividend+1,w
  7386  0D2C  00F9               	movwf	?___lwmod+1
  7387  0D2D  087A               	movf	___lwmod@dividend,w
  7388  0D2E  00F8               	movwf	?___lwmod
  7389  0D2F  0008               	return
  7390  0D30                     __end_of___lwmod:	
  7391                           
  7392                           	psect	text19
  7393  0D90                     __ptext19:	
  7394 ;; *************** function ___lwdiv *****************
  7395 ;; Defined at:
  7396 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  divisor         2    0[COMMON] unsigned int 
  7399 ;;  dividend        2    2[COMMON] unsigned int 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  quotient        2    5[COMMON] unsigned int 
  7402 ;;  counter         1    7[COMMON] unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  2    0[COMMON] unsigned int 
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, status,0
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;Total ram usage:        8 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_printf
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function ___lwdiv
  7427  0D90                     ___lwdiv:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7431  0D90  01F5               	clrf	___lwdiv@quotient
  7432  0D91  01F6               	clrf	___lwdiv@quotient+1
  7433  0D92  0870               	movf	___lwdiv@divisor,w
  7434  0D93  0471               	iorwf	___lwdiv@divisor+1,w
  7435  0D94  1903               	btfsc	3,2
  7436  0D95  2DBF               	goto	l1853
  7437  0D96  01F7               	clrf	___lwdiv@counter
  7438  0D97  0AF7               	incf	___lwdiv@counter,f
  7439  0D98                     l1841:	
  7440  0D98  1BF1               	btfsc	___lwdiv@divisor+1,7
  7441  0D99  2DA4               	goto	l1843
  7442  0D9A  3001               	movlw	1
  7443  0D9B                     u1295:	
  7444  0D9B  35F0               	lslf	___lwdiv@divisor,f
  7445  0D9C  0DF1               	rlf	___lwdiv@divisor+1,f
  7446  0D9D  0B89               	decfsz	9,f
  7447  0D9E  2D9B               	goto	u1295
  7448  0D9F  3001               	movlw	1
  7449  0DA0  00F4               	movwf	??___lwdiv
  7450  0DA1  0874               	movf	??___lwdiv,w
  7451  0DA2  07F7               	addwf	___lwdiv@counter,f
  7452  0DA3  2D98               	goto	l1841
  7453  0DA4                     l1843:	
  7454  0DA4  3001               	movlw	1
  7455  0DA5                     u1315:	
  7456  0DA5  35F5               	lslf	___lwdiv@quotient,f
  7457  0DA6  0DF6               	rlf	___lwdiv@quotient+1,f
  7458  0DA7  0B89               	decfsz	9,f
  7459  0DA8  2DA5               	goto	u1315
  7460  0DA9  0871               	movf	___lwdiv@divisor+1,w
  7461  0DAA  0273               	subwf	___lwdiv@dividend+1,w
  7462  0DAB  1D03               	skipz
  7463  0DAC  2DAF               	goto	u1325
  7464  0DAD  0870               	movf	___lwdiv@divisor,w
  7465  0DAE  0272               	subwf	___lwdiv@dividend,w
  7466  0DAF                     u1325:	
  7467  0DAF  1C03               	skipc
  7468  0DB0  2DB6               	goto	l1849
  7469  0DB1  0870               	movf	___lwdiv@divisor,w
  7470  0DB2  02F2               	subwf	___lwdiv@dividend,f
  7471  0DB3  0871               	movf	___lwdiv@divisor+1,w
  7472  0DB4  3BF3               	subwfb	___lwdiv@dividend+1,f
  7473  0DB5  1475               	bsf	___lwdiv@quotient,0
  7474  0DB6                     l1849:	
  7475  0DB6  3001               	movlw	1
  7476  0DB7                     u1335:	
  7477  0DB7  36F1               	lsrf	___lwdiv@divisor+1,f
  7478  0DB8  0CF0               	rrf	___lwdiv@divisor,f
  7479  0DB9  0B89               	decfsz	9,f
  7480  0DBA  2DB7               	goto	u1335
  7481  0DBB  3001               	movlw	1
  7482  0DBC  02F7               	subwf	___lwdiv@counter,f
  7483  0DBD  1D03               	btfss	3,2
  7484  0DBE  2DA4               	goto	l1843
  7485  0DBF                     l1853:	
  7486  0DBF  0876               	movf	___lwdiv@quotient+1,w
  7487  0DC0  00F1               	movwf	?___lwdiv+1
  7488  0DC1  0875               	movf	___lwdiv@quotient,w
  7489  0DC2  00F0               	movwf	?___lwdiv
  7490  0DC3  0008               	return
  7491  0DC4                     __end_of___lwdiv:	
  7492                           
  7493                           	psect	text20
  7494  0C80                     __ptext20:	
  7495 ;; *************** function _SPI_exchange *****************
  7496 ;; Defined at:
  7497 ;;		line 4 in file "spi.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  buf             1    wreg     PTR unsigned char 
  7500 ;;		 -> receive@rx_buf(15), buf(16), 
  7501 ;;  len             1    8[COMMON] unsigned char 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  buf             1   13[COMMON] PTR unsigned char 
  7504 ;;		 -> receive@rx_buf(15), buf(16), 
  7505 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      unsigned char 
  7508 ;; Registers used:
  7509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        6 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    2
  7522 ;; This function calls:
  7523 ;;		_SPI_Exchange8bitBuffer
  7524 ;; This function is called by:
  7525 ;;		_can_init
  7526 ;;		_can_ope_mode
  7527 ;;		_can_set_mask
  7528 ;;		_txf_clear
  7529 ;;		_receive
  7530 ;;		_can_send
  7531 ;;		_can_status_check
  7532 ;;		_can_baudrate
  7533 ;;		_can_abort
  7534 ;;		_read_register
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           
  7539                           ;psect for function _SPI_exchange
  7540  0C80                     _SPI_exchange:	
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7544                           ;SPI_exchange@buf stored from wreg
  7545  0C80  00FD               	movwf	SPI_exchange@buf
  7546                           
  7547                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7548  0C81  0022               	movlb	2	; select bank2
  7549  0C82  120C               	bcf	12,4	;volatile
  7550                           
  7551                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7552  0C83  0878               	movf	SPI_exchange@len,w
  7553  0C84  00F9               	movwf	??_SPI_exchange
  7554  0C85  0879               	movf	??_SPI_exchange,w
  7555  0C86  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7556  0C87  087D               	movf	SPI_exchange@buf,w
  7557  0C88  00FA               	movwf	??_SPI_exchange+1
  7558  0C89  087A               	movf	??_SPI_exchange+1,w
  7559  0C8A  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7560  0C8B  087D               	movf	SPI_exchange@buf,w
  7561  0C8C  318D  25C4         	fcall	_SPI_Exchange8bitBuffer
  7562  0C8E  00FB               	movwf	??_SPI_exchange+2
  7563  0C8F  087B               	movf	??_SPI_exchange+2,w
  7564  0C90  00FC               	movwf	SPI_exchange@bytes_written
  7565                           
  7566                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7567  0C91  0022               	movlb	2	; select bank2
  7568  0C92  160C               	bsf	12,4	;volatile
  7569                           
  7570                           ;spi.c: 8: return bytes_written;
  7571  0C93  087C               	movf	SPI_exchange@bytes_written,w
  7572  0C94  0008               	return
  7573  0C95                     __end_of_SPI_exchange:	
  7574                           
  7575                           	psect	text21
  7576  0DC4                     __ptext21:	
  7577 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7578 ;; Defined at:
  7579 ;;		line 91 in file "mcc_generated_files/spi.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  dataIn          1    wreg     PTR unsigned char 
  7582 ;;		 -> receive@rx_buf(15), buf(16), 
  7583 ;;  bufLen          1    1[COMMON] unsigned char 
  7584 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7585 ;;		 -> receive@rx_buf(15), buf(16), 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7588 ;;		 -> receive@rx_buf(15), buf(16), 
  7589 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      unsigned char 
  7592 ;; Registers used:
  7593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;Total ram usage:        7 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    1
  7606 ;; This function calls:
  7607 ;;		_SPI_Exchange8bit
  7608 ;; This function is called by:
  7609 ;;		_SPI_exchange
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _SPI_Exchange8bitBuffer
  7615  0DC4                     _SPI_Exchange8bitBuffer:	
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7619                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7620  0DC4  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7621                           
  7622                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7623  0DC5  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7624                           
  7625                           ;spi.c: 95: if(bufLen != 0)
  7626  0DC6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7627  0DC7  1903               	btfsc	3,2
  7628  0DC8  2E10               	goto	l1907
  7629                           
  7630                           ;spi.c: 96: {
  7631                           ;spi.c: 97: if(dataIn != (0))
  7632  0DC9  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7633  0DCA  1D03               	btfss	3,2
  7634  0DCB  2DF2               	goto	l1895
  7635  0DCC  2DF7               	goto	l1897
  7636  0DCD                     l1887:	
  7637                           ;spi.c: 98: {
  7638                           ;spi.c: 99: while(bytesWritten < bufLen)
  7639                           
  7640                           
  7641                           ;spi.c: 100: {
  7642                           ;spi.c: 101: if(dataOut == (0))
  7643  0DCD  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7644  0DCE  1D03               	btfss	3,2
  7645  0DCF  2DDB               	goto	l1891
  7646                           
  7647                           ;spi.c: 102: {
  7648                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7649  0DD0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7650  0DD1  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7651  0DD2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7652  0DD3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7653  0DD4  0086               	movwf	6
  7654  0DD5  0187               	clrf	7
  7655  0DD6  0801               	movf	1,w
  7656  0DD7  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7657                           
  7658                           ;spi.c: 104: }
  7659  0DDA  2DEE               	goto	l1893
  7660  0DDB                     l1891:	
  7661                           
  7662                           ;spi.c: 105: else
  7663                           ;spi.c: 106: {
  7664                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7665  0DDB  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7666  0DDC  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7667  0DDD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7668  0DDE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7669  0DDF  0086               	movwf	6
  7670  0DE0  0187               	clrf	7
  7671  0DE1  0801               	movf	1,w
  7672  0DE2  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7673  0DE5  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7674  0DE6  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7675  0DE7  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7676  0DE8  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7677  0DE9  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7678  0DEA  0086               	movwf	6
  7679  0DEB  0187               	clrf	7
  7680  0DEC  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7681  0DED  0081               	movwf	1
  7682  0DEE                     l1893:	
  7683                           
  7684                           ;spi.c: 108: }
  7685                           ;spi.c: 110: bytesWritten++;
  7686  0DEE  3001               	movlw	1
  7687  0DEF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7688  0DF0  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7689  0DF1  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7690  0DF2                     l1895:	
  7691  0DF2  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7692  0DF3  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7693  0DF4  1803               	btfsc	3,0
  7694  0DF5  2E10               	goto	l1907
  7695  0DF6  2DCD               	goto	l1887
  7696  0DF7                     l1897:	
  7697                           ;spi.c: 111: }
  7698                           ;spi.c: 112: }
  7699                           
  7700                           
  7701                           ;spi.c: 113: else
  7702                           ;spi.c: 114: {
  7703                           ;spi.c: 115: if(dataOut != (0))
  7704  0DF7  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7705  0DF8  1D03               	btfss	3,2
  7706  0DF9  2E0C               	goto	l1905
  7707  0DFA  2E10               	goto	l1907
  7708  0DFB                     l1901:	
  7709                           ;spi.c: 116: {
  7710                           ;spi.c: 117: while(bytesWritten < bufLen )
  7711                           
  7712                           
  7713                           ;spi.c: 118: {
  7714                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7715  0DFB  3000               	movlw	0
  7716  0DFC  318C  243A  318D   	fcall	_SPI_Exchange8bit
  7717  0DFF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7718  0E00  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7719  0E01  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7720  0E02  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7721  0E03  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7722  0E04  0086               	movwf	6
  7723  0E05  0187               	clrf	7
  7724  0E06  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7725  0E07  0081               	movwf	1
  7726                           
  7727                           ;spi.c: 121: bytesWritten++;
  7728  0E08  3001               	movlw	1
  7729  0E09  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7730  0E0A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7731  0E0B  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7732  0E0C                     l1905:	
  7733  0E0C  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7734  0E0D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7735  0E0E  1C03               	skipc
  7736  0E0F  2DFB               	goto	l1901
  7737  0E10                     l1907:	
  7738                           
  7739                           ;spi.c: 122: }
  7740                           ;spi.c: 123: }
  7741                           ;spi.c: 124: }
  7742                           ;spi.c: 125: }
  7743                           ;spi.c: 127: return bytesWritten;
  7744  0E10  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7745  0E11  0008               	return
  7746  0E12                     __end_of_SPI_Exchange8bitBuffer:	
  7747                           
  7748                           	psect	text22
  7749  0C3A                     __ptext22:	
  7750 ;; *************** function _SPI_Exchange8bit *****************
  7751 ;; Defined at:
  7752 ;;		line 77 in file "mcc_generated_files/spi.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  data            1    wreg     unsigned char 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  data            1    0[COMMON] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      unsigned char 
  7759 ;; Registers used:
  7760 ;;		wreg
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;Total ram usage:        1 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_SPI_Exchange8bitBuffer
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _SPI_Exchange8bit
  7781  0C3A                     _SPI_Exchange8bit:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7785                           ;SPI_Exchange8bit@data stored from wreg
  7786  0C3A  00F0               	movwf	SPI_Exchange8bit@data
  7787                           
  7788                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7789  0C3B  0024               	movlb	4	; select bank4
  7790  0C3C  1395               	bcf	21,7	;volatile
  7791                           
  7792                           ;spi.c: 82: SSP1BUF = data;
  7793  0C3D  0870               	movf	SPI_Exchange8bit@data,w
  7794  0C3E  0091               	movwf	17	;volatile
  7795  0C3F                     l113:	
  7796                           ;spi.c: 85: {
  7797                           
  7798                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7799                           
  7800  0C3F  1C14               	btfss	20,0	;volatile
  7801  0C40  2C3F               	goto	l113
  7802                           
  7803                           ;spi.c: 86: }
  7804                           ;spi.c: 88: return (SSP1BUF);
  7805  0C41  0811               	movf	17,w	;volatile
  7806  0C42  0008               	return
  7807  0C43                     __end_of_SPI_Exchange8bit:	
  7808                           
  7809                           	psect	text23
  7810  0F1A                     __ptext23:	
  7811 ;; *************** function _atoi *****************
  7812 ;; Defined at:
  7813 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  s               1    wreg     PTR const unsigned char 
  7816 ;;		 -> main@buf(9), 
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  s               1   13[COMMON] PTR const unsigned char 
  7819 ;;		 -> main@buf(9), 
  7820 ;;  a               2   11[COMMON] int 
  7821 ;;  sign            1   10[COMMON] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  2    6[COMMON] int 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;Total ram usage:        8 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    1
  7838 ;; This function calls:
  7839 ;;		___wmul
  7840 ;;		_isdigit
  7841 ;; This function is called by:
  7842 ;;		_main
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           
  7847                           ;psect for function _atoi
  7848  0F1A                     _atoi:	
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7852                           ;atoi@s stored from wreg
  7853  0F1A  00FD               	movwf	atoi@s
  7854  0F1B                     l2305:	
  7855  0F1B  087D               	movf	atoi@s,w
  7856  0F1C  0086               	movwf	6
  7857  0F1D  0187               	clrf	7
  7858  0F1E  3020               	movlw	32
  7859  0F1F  0601               	xorwf	1,w
  7860  0F20  1D03               	btfss	3,2
  7861  0F21  2F27               	goto	l2307
  7862  0F22                     l2303:	
  7863  0F22  3001               	movlw	1
  7864  0F23  00F8               	movwf	??_atoi
  7865  0F24  0878               	movf	??_atoi,w
  7866  0F25  07FD               	addwf	atoi@s,f
  7867  0F26  2F1B               	goto	l2305
  7868  0F27                     l2307:	
  7869  0F27  087D               	movf	atoi@s,w
  7870  0F28  0086               	movwf	6
  7871  0F29  0187               	clrf	7
  7872  0F2A  3009               	movlw	9
  7873  0F2B  0601               	xorwf	1,w
  7874  0F2C  1903               	btfsc	3,2
  7875  0F2D  2F22               	goto	l2303
  7876  0F2E  01FB               	clrf	atoi@a
  7877  0F2F  01FC               	clrf	atoi@a+1
  7878  0F30  01FA               	clrf	atoi@sign
  7879  0F31  087D               	movf	atoi@s,w
  7880  0F32  0086               	movwf	6
  7881  0F33  0187               	clrf	7
  7882  0F34  302D               	movlw	45
  7883  0F35  0601               	xorwf	1,w
  7884  0F36  1D03               	btfss	3,2
  7885  0F37  2F3D               	goto	l2315
  7886  0F38  3001               	movlw	1
  7887  0F39  00F8               	movwf	??_atoi
  7888  0F3A  0878               	movf	??_atoi,w
  7889  0F3B  07FA               	addwf	atoi@sign,f
  7890  0F3C  2F44               	goto	l2321
  7891  0F3D                     l2315:	
  7892  0F3D  087D               	movf	atoi@s,w
  7893  0F3E  0086               	movwf	6
  7894  0F3F  0187               	clrf	7
  7895  0F40  302B               	movlw	43
  7896  0F41  0601               	xorwf	1,w
  7897  0F42  1D03               	btfss	3,2
  7898  0F43  2F48               	goto	l2323
  7899  0F44                     l2321:	
  7900  0F44  3001               	movlw	1
  7901  0F45  00F8               	movwf	??_atoi
  7902  0F46  0878               	movf	??_atoi,w
  7903  0F47  07FD               	addwf	atoi@s,f
  7904  0F48                     l2323:	
  7905  0F48  087D               	movf	atoi@s,w
  7906  0F49  0086               	movwf	6
  7907  0F4A  0187               	clrf	7
  7908  0F4B  0801               	movf	1,w
  7909  0F4C  318C  2463  318F   	fcall	_isdigit
  7910  0F4F  1C03               	btfss	3,0
  7911  0F50  2F6D               	goto	l2325
  7912  0F51  087C               	movf	atoi@a+1,w
  7913  0F52  00F1               	movwf	___wmul@multiplier+1
  7914  0F53  087B               	movf	atoi@a,w
  7915  0F54  00F0               	movwf	___wmul@multiplier
  7916  0F55  300A               	movlw	10
  7917  0F56  00F2               	movwf	___wmul@multiplicand
  7918  0F57  3000               	movlw	0
  7919  0F58  00F3               	movwf	___wmul@multiplicand+1
  7920  0F59  318C  24C5  318F   	fcall	___wmul
  7921  0F5C  087D               	movf	atoi@s,w
  7922  0F5D  0086               	movwf	6
  7923  0F5E  0187               	clrf	7
  7924  0F5F  0801               	movf	1,w
  7925  0F60  0770               	addwf	?___wmul,w
  7926  0F61  00F8               	movwf	??_atoi
  7927  0F62  0871               	movf	?___wmul+1,w
  7928  0F63  1803               	skipnc
  7929  0F64  0A71               	incf	?___wmul+1,w
  7930  0F65  00F9               	movwf	??_atoi+1
  7931  0F66  0878               	movf	??_atoi,w
  7932  0F67  3ED0               	addlw	208
  7933  0F68  00FB               	movwf	atoi@a
  7934  0F69  30FF               	movlw	255
  7935  0F6A  3D79               	addwfc	??_atoi+1,w
  7936  0F6B  00FC               	movwf	atoi@a+1
  7937  0F6C  2F44               	goto	l2321
  7938  0F6D                     l2325:	
  7939  0F6D  087A               	movf	atoi@sign,w
  7940  0F6E  1903               	btfsc	3,2
  7941  0F6F  2F7C               	goto	l2331
  7942  0F70  097B               	comf	atoi@a,w
  7943  0F71  00F8               	movwf	??_atoi
  7944  0F72  097C               	comf	atoi@a+1,w
  7945  0F73  00F9               	movwf	??_atoi+1
  7946  0F74  0AF8               	incf	??_atoi,f
  7947  0F75  1903               	skipnz
  7948  0F76  0AF9               	incf	??_atoi+1,f
  7949  0F77  0878               	movf	??_atoi,w
  7950  0F78  00F6               	movwf	?_atoi
  7951  0F79  0879               	movf	??_atoi+1,w
  7952  0F7A  00F7               	movwf	?_atoi+1
  7953  0F7B  0008               	return
  7954  0F7C                     l2331:	
  7955  0F7C  087C               	movf	atoi@a+1,w
  7956  0F7D  00F7               	movwf	?_atoi+1
  7957  0F7E  087B               	movf	atoi@a,w
  7958  0F7F  00F6               	movwf	?_atoi
  7959  0F80  0008               	return
  7960  0F81                     __end_of_atoi:	
  7961                           
  7962                           	psect	text24
  7963  0C63                     __ptext24:	
  7964 ;; *************** function _isdigit *****************
  7965 ;; Defined at:
  7966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  c               1    wreg     unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  c               1    1[COMMON] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;		None               void
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;Total ram usage:        2 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; This function calls:
  7987 ;;		Nothing
  7988 ;; This function is called by:
  7989 ;;		_printf
  7990 ;;		_atoi
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           
  7995                           ;psect for function _isdigit
  7996  0C63                     _isdigit:	
  7997                           
  7998                           ;incstack = 0
  7999                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8000                           ;isdigit@c stored from wreg
  8001  0C63  00F1               	movwf	isdigit@c
  8002  0C64  01F0               	clrf	_isdigit$786
  8003  0C65  303A               	movlw	58
  8004  0C66  0271               	subwf	isdigit@c,w
  8005  0C67  1803               	skipnc
  8006  0C68  2C6F               	goto	l1813
  8007  0C69  3030               	movlw	48
  8008  0C6A  0271               	subwf	isdigit@c,w
  8009  0C6B  1C03               	skipc
  8010  0C6C  2C6F               	goto	l1813
  8011  0C6D  01F0               	clrf	_isdigit$786
  8012  0C6E  0AF0               	incf	_isdigit$786,f
  8013  0C6F                     l1813:	
  8014  0C6F  0C70               	rrf	_isdigit$786,w
  8015  0C70  0008               	return
  8016  0C71                     __end_of_isdigit:	
  8017                           
  8018                           	psect	text25
  8019  0CC5                     __ptext25:	
  8020 ;; *************** function ___wmul *****************
  8021 ;; Defined at:
  8022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;  multiplier      2    0[COMMON] unsigned int 
  8025 ;;  multiplicand    2    2[COMMON] unsigned int 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  product         2    4[COMMON] unsigned int 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  2    0[COMMON] unsigned int 
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;Total ram usage:        6 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_printf
  8047 ;;		_atoi
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function ___wmul
  8053  0CC5                     ___wmul:	
  8054                           
  8055                           ;incstack = 0
  8056                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8057  0CC5  01F4               	clrf	___wmul@product
  8058  0CC6  01F5               	clrf	___wmul@product+1
  8059  0CC7                     l1819:	
  8060  0CC7  1C70               	btfss	___wmul@multiplier,0
  8061  0CC8  2CCD               	goto	l531
  8062  0CC9  0872               	movf	___wmul@multiplicand,w
  8063  0CCA  07F4               	addwf	___wmul@product,f
  8064  0CCB  0873               	movf	___wmul@multiplicand+1,w
  8065  0CCC  3DF5               	addwfc	___wmul@product+1,f
  8066  0CCD                     l531:	
  8067  0CCD  3001               	movlw	1
  8068  0CCE                     u1255:	
  8069  0CCE  35F2               	lslf	___wmul@multiplicand,f
  8070  0CCF  0DF3               	rlf	___wmul@multiplicand+1,f
  8071  0CD0  0B89               	decfsz	9,f
  8072  0CD1  2CCE               	goto	u1255
  8073  0CD2  3001               	movlw	1
  8074  0CD3                     u1265:	
  8075  0CD3  36F1               	lsrf	___wmul@multiplier+1,f
  8076  0CD4  0CF0               	rrf	___wmul@multiplier,f
  8077  0CD5  0B89               	decfsz	9,f
  8078  0CD6  2CD3               	goto	u1265
  8079  0CD7  0870               	movf	___wmul@multiplier,w
  8080  0CD8  0471               	iorwf	___wmul@multiplier+1,w
  8081  0CD9  1D03               	btfss	3,2
  8082  0CDA  2CC7               	goto	l1819
  8083  0CDB  0875               	movf	___wmul@product+1,w
  8084  0CDC  00F1               	movwf	?___wmul+1
  8085  0CDD  0874               	movf	___wmul@product,w
  8086  0CDE  00F0               	movwf	?___wmul
  8087  0CDF  0008               	return
  8088  0CE0                     __end_of___wmul:	
  8089                           
  8090                           	psect	text26
  8091  0C71                     __ptext26:	
  8092 ;; *************** function _SYSTEM_Initialize *****************
  8093 ;; Defined at:
  8094 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0, pclath, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;Total ram usage:        0 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    1
  8115 ;; This function calls:
  8116 ;;		_EUSART_Initialize
  8117 ;;		_OSCILLATOR_Initialize
  8118 ;;		_PIN_MANAGER_Initialize
  8119 ;;		_SPI_Initialize
  8120 ;;		_WDT_Initialize
  8121 ;; This function is called by:
  8122 ;;		_main
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           
  8127                           ;psect for function _SYSTEM_Initialize
  8128  0C71                     _SYSTEM_Initialize:	
  8129                           
  8130                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8134  0C71  318C  2495  318C   	fcall	_PIN_MANAGER_Initialize
  8135                           
  8136                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8137  0C74  318C  2424  318C   	fcall	_OSCILLATOR_Initialize
  8138                           
  8139                           ;mcc.c: 75: WDT_Initialize();
  8140  0C77  3180  2004  318C   	fcall	_WDT_Initialize
  8141                           
  8142                           ;mcc.c: 76: SPI_Initialize();
  8143  0C7A  318C  242B  318C   	fcall	_SPI_Initialize
  8144                           
  8145                           ;mcc.c: 77: EUSART_Initialize();
  8146  0C7D  318C  244D         	fcall	_EUSART_Initialize
  8147  0C7F  0008               	return
  8148  0C80                     __end_of_SYSTEM_Initialize:	
  8149                           
  8150                           	psect	text27
  8151  0004                     __ptext27:	
  8152 ;; *************** function _WDT_Initialize *****************
  8153 ;; Defined at:
  8154 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;		None
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  1    wreg      void 
  8161 ;; Registers used:
  8162 ;;		wreg
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;Total ram usage:        0 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_SYSTEM_Initialize
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _WDT_Initialize
  8183  0004                     _WDT_Initialize:	
  8184                           
  8185                           ;mcc.c: 93: WDTCON = 0x16;
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _WDT_Initialize: [wreg]
  8189  0004  3016               	movlw	22
  8190  0005  0021               	movlb	1	; select bank1
  8191  0006  0097               	movwf	23	;volatile
  8192  0007  0008               	return
  8193  0008                     __end_of_WDT_Initialize:	
  8194                           
  8195                           	psect	text28
  8196  0C2B                     __ptext28:	
  8197 ;; *************** function _SPI_Initialize *****************
  8198 ;; Defined at:
  8199 ;;		line 63 in file "mcc_generated_files/spi.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;		None
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;		None
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  1    wreg      void 
  8206 ;; Registers used:
  8207 ;;		wreg, status,2
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;Total ram usage:        0 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		_SYSTEM_Initialize
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _SPI_Initialize
  8228  0C2B                     _SPI_Initialize:	
  8229                           
  8230                           ;spi.c: 68: SSP1STAT = 0x40;
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8234  0C2B  3040               	movlw	64
  8235  0C2C  0024               	movlb	4	; select bank4
  8236  0C2D  0094               	movwf	20	;volatile
  8237                           
  8238                           ;spi.c: 71: SSP1CON1 = 0x20;
  8239  0C2E  3020               	movlw	32
  8240  0C2F  0095               	movwf	21	;volatile
  8241                           
  8242                           ;spi.c: 74: SSP1ADD = 0x00;
  8243  0C30  0192               	clrf	18	;volatile
  8244  0C31  0008               	return
  8245  0C32                     __end_of_SPI_Initialize:	
  8246                           
  8247                           	psect	text29
  8248  0C95                     __ptext29:	
  8249 ;; *************** function _PIN_MANAGER_Initialize *****************
  8250 ;; Defined at:
  8251 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;Total ram usage:        0 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		_SYSTEM_Initialize
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _PIN_MANAGER_Initialize
  8280  0C95                     _PIN_MANAGER_Initialize:	
  8281                           
  8282                           ;pin_manager.c: 57: LATA = 0x10;
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8286  0C95  3010               	movlw	16
  8287  0C96  0022               	movlb	2	; select bank2
  8288  0C97  008C               	movwf	12	;volatile
  8289                           
  8290                           ;pin_manager.c: 58: LATC = 0x00;
  8291  0C98  018E               	clrf	14	;volatile
  8292                           
  8293                           ;pin_manager.c: 63: TRISA = 0x2F;
  8294  0C99  302F               	movlw	47
  8295  0C9A  0021               	movlb	1	; select bank1
  8296  0C9B  008C               	movwf	12	;volatile
  8297                           
  8298                           ;pin_manager.c: 64: TRISC = 0x32;
  8299  0C9C  3032               	movlw	50
  8300  0C9D  008E               	movwf	14	;volatile
  8301                           
  8302                           ;pin_manager.c: 69: ANSELC = 0x00;
  8303  0C9E  0023               	movlb	3	; select bank3
  8304  0C9F  018E               	clrf	14	;volatile
  8305                           
  8306                           ;pin_manager.c: 70: ANSELA = 0x07;
  8307  0CA0  3007               	movlw	7
  8308  0CA1  008C               	movwf	12	;volatile
  8309                           
  8310                           ;pin_manager.c: 75: WPUA = 0x00;
  8311  0CA2  0024               	movlb	4	; select bank4
  8312  0CA3  018C               	clrf	12	;volatile
  8313                           
  8314                           ;pin_manager.c: 76: WPUC = 0x30;
  8315  0CA4  3030               	movlw	48
  8316  0CA5  008E               	movwf	14	;volatile
  8317                           
  8318                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8319  0CA6  0021               	movlb	1	; select bank1
  8320  0CA7  1395               	bcf	21,7	;volatile
  8321                           
  8322                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8323  0CA8  0022               	movlb	2	; select bank2
  8324  0CA9  019E               	clrf	30	;volatile
  8325                           
  8326                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8327  0CAA  019D               	clrf	29	;volatile
  8328  0CAB  0008               	return
  8329  0CAC                     __end_of_PIN_MANAGER_Initialize:	
  8330                           
  8331                           	psect	text30
  8332  0C24                     __ptext30:	
  8333 ;; *************** function _OSCILLATOR_Initialize *****************
  8334 ;; Defined at:
  8335 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; This function calls:
  8356 ;;		Nothing
  8357 ;; This function is called by:
  8358 ;;		_SYSTEM_Initialize
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _OSCILLATOR_Initialize
  8364  0C24                     _OSCILLATOR_Initialize:	
  8365                           
  8366                           ;mcc.c: 83: OSCCON = 0x60;
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8370  0C24  3060               	movlw	96
  8371  0C25  0021               	movlb	1	; select bank1
  8372  0C26  0099               	movwf	25	;volatile
  8373                           
  8374                           ;mcc.c: 85: OSCTUNE = 0x00;
  8375  0C27  0198               	clrf	24	;volatile
  8376                           
  8377                           ;mcc.c: 87: BORCON = 0x00;
  8378  0C28  0022               	movlb	2	; select bank2
  8379  0C29  0196               	clrf	22	;volatile
  8380  0C2A  0008               	return
  8381  0C2B                     __end_of_OSCILLATOR_Initialize:	
  8382                           
  8383                           	psect	text31
  8384  0C4D                     __ptext31:	
  8385 ;; *************** function _EUSART_Initialize *****************
  8386 ;; Defined at:
  8387 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;		None
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;		None
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      void 
  8394 ;; Registers used:
  8395 ;;		wreg, status,2
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;Total ram usage:        0 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		_SYSTEM_Initialize
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414                           
  8415                           ;psect for function _EUSART_Initialize
  8416  0C4D                     _EUSART_Initialize:	
  8417                           
  8418                           ;eusart.c: 58: BAUDCON = 0x08;
  8419                           
  8420                           ;incstack = 0
  8421                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8422  0C4D  3008               	movlw	8
  8423  0C4E  0023               	movlb	3	; select bank3
  8424  0C4F  009F               	movwf	31	;volatile
  8425                           
  8426                           ;eusart.c: 61: RCSTA = 0x90;
  8427  0C50  3090               	movlw	144
  8428  0C51  009D               	movwf	29	;volatile
  8429                           
  8430                           ;eusart.c: 64: TXSTA = 0x24;
  8431  0C52  3024               	movlw	36
  8432  0C53  009E               	movwf	30	;volatile
  8433                           
  8434                           ;eusart.c: 67: SPBRGL = 0x33;
  8435  0C54  3033               	movlw	51
  8436  0C55  009B               	movwf	27	;volatile
  8437                           
  8438                           ;eusart.c: 70: SPBRGH = 0x00;
  8439  0C56  019C               	clrf	28	;volatile
  8440  0C57  0008               	return
  8441  0C58                     __end_of_EUSART_Initialize:	
  8442                           
  8443                           	psect	text32
  8444  0C43                     __ptext32:	
  8445 ;; *************** function _EUSART_Read *****************
  8446 ;; Defined at:
  8447 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;		None
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      unsigned char 
  8454 ;; Registers used:
  8455 ;;		wreg
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;Total ram usage:        0 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; This function calls:
  8468 ;;		Nothing
  8469 ;; This function is called by:
  8470 ;;		_main
  8471 ;;		_getch
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _EUSART_Read
  8477  0C43                     _EUSART_Read:	
  8478  0C43                     l51:	
  8479                           ;eusart.c: 78: {
  8480                           
  8481                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _EUSART_Read: [wreg]
  8485                           
  8486  0C43  0020               	movlb	0	; select bank0
  8487  0C44  1E91               	btfss	17,5	;volatile
  8488  0C45  2C43               	goto	l51
  8489                           
  8490                           ;eusart.c: 79: }
  8491                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8492  0C46  0023               	movlb	3	; select bank3
  8493  0C47  1C9D               	btfss	29,1	;volatile
  8494  0C48  2C4B               	goto	l2211
  8495                           
  8496                           ;eusart.c: 83: {
  8497                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8498  0C49  121D               	bcf	29,4	;volatile
  8499                           
  8500                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8501  0C4A  161D               	bsf	29,4	;volatile
  8502  0C4B                     l2211:	
  8503                           
  8504                           ;eusart.c: 88: }
  8505                           ;eusart.c: 90: return RCREG;
  8506  0C4B  0819               	movf	25,w	;volatile
  8507  0C4C  0008               	return
  8508  0C4D                     __end_of_EUSART_Read:	
  8509  007E                     btemp	set	126	;btemp
  8510  007E                     wtemp0	set	126


Data Sizes:
    Strings     1037
    Constant    35
    Data        0
    BSS         23
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      75
    BANK1            80     19      35
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[20]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_55(CODE[5]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[2]), 
		 -> STR_51(CODE[16]), STR_50(CODE[16]), STR_49(CODE[2]), STR_48(CODE[16]), 
		 -> STR_47(CODE[16]), STR_46(CODE[16]), STR_45(CODE[2]), STR_44(CODE[12]), 
		 -> STR_43(CODE[12]), STR_42(CODE[12]), STR_41(CODE[2]), STR_40(CODE[12]), 
		 -> STR_39(CODE[12]), STR_38(CODE[5]), STR_37(CODE[13]), STR_36(CODE[13]), 
		 -> STR_35(CODE[18]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[20]), 
		 -> STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[14]), STR_28(CODE[15]), 
		 -> STR_27(CODE[16]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[23]), 
		 -> STR_23(CODE[21]), STR_22(CODE[15]), STR_21(CODE[22]), STR_20(CODE[44]), 
		 -> STR_19(CODE[57]), STR_18(CODE[26]), STR_17(CODE[21]), STR_16(CODE[38]), 
		 -> STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), STR_12(CODE[58]), 
		 -> STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), STR_7(CODE[36]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_abort->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  108915
                                             64 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   25699
                                             60 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14901
                                             34 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6203
                                             27 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        13    11      2   17148
                                             31 BANK0     13    11      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9035
                                             27 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   10966
                                             31 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8256
                                             27 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   10730
                                             31 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            3     3      0   10685
                                             31 BANK0      3     3      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8324
                                             27 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    21      8    5896
                                              2 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      23       7       43.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 17 06:25:01 2018

                    _SPI_Initialize 0C2B                         __CFG_CP$OFF 0000  
                  ?_receive_handler 003B                                  l51 0C43  
                                l58 0C33             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 142B                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C3F                                 l202 03E4  
                               l203 03E6                                 l312 02A4  
                               l315 02B4                                 l332 0E31  
                               l341 0E57                                 l422 06FB  
                               l343 0E5B                                 l335 0E42  
                               l336 0E3D                                 l417 06D9  
                               l426 0732                                 l338 0E53  
                               l531 0CCD                                 l339 0E4E  
                               l447 07ED                                 l383 05D9  
                               l395 06B3                                 l396 0623  
          __end_of_can_status_check 0E68                        __CFG_CPD$OFF 0000  
                               _abc 1425                                 _buf 00B3  
                               _sid 0064                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
             can_logging_mode@debug 0072                        ?_EUSART_Read 0070  
                              l2015 071D                                l2041 076E  
                              l2033 075B                                l2025 074E  
                              l2017 0726                                l2211 0C4B  
                              l2051 0789                                l2027 0751  
                              l2053 07B0                                l2061 07D7  
                              l2045 077B                                l2303 0F22  
                              l2063 07DB                                l2039 076A  
                              l2143 0E90                                l2071 0ED5  
                              l2321 0F44                                l2305 0F1B  
                              l2049 0783                                l2065 05B8  
                              l2081 0EE9                                l2331 0F7C  
                              l2323 0F48                                l2315 0F3D  
                              l2307 0F27                                l2083 0F07  
                              l2325 0F6D                                l2085 0F0E  
                              l2191 0153                                l2441 02C0  
                              l2435 02B0                                l2443 02C2  
                              l1813 0C6F                                l1901 0DFB  
                              l2429 029E                                l2621 04E3  
                              l2613 04C6                                l2605 04A1  
                              l2463 030F                                l2391 005D  
                              l2623 04EF                                l2631 058F  
                              l2527 03D6                                l1905 0E0C  
                              l1841 0D98                                l2465 02E5  
                              l2393 007A                                l2297 0E66  
                              l2289 0E61                                l2617 04DB  
                              l2553 043C                                l2633 0590  
                              l1819 0CC7                                l1907 0E10  
                              l1843 0DA4                                l1923 05DE  
                              l2483 035D                                l2467 0315  
                              l2619 04DF                                l2571 045F  
                              l2627 0564                                l2539 0405  
                              l1853 0DBF                                l1925 05E7  
                              l1917 05D4                                l2565 0453  
                              l2549 0426                                l2629 0586  
                              l1871 0D22                                l1951 0648  
                              l2495 0396                                l2399 0089  
                              l2591 0482                                l2583 0475  
                              l2575 0465                                l2559 0445  
                              l1849 0DB6                                l1865 0D0A  
                              l1961 0666                                l1945 0638  
                              l1937 0625                                l1929 05F4  
                              l1891 0DDB                                l1867 0D16  
                              l1875 0D2B                                l1971 0689  
                              l1955 0655                                l2579 046E  
                              l1893 0DEE                                l1965 0673  
                              l1949 063A                                l2589 0480  
                              l1887 0DCD                                l1895 0DF2  
                              l1967 067E                                l1959 0657  
                              l2599 048F                                l1897 0DF7  
                              l1977 0692                                l1989 06CD  
                              STR_1 1404                                STR_2 1411  
                              STR_3 1417                                STR_4 1420  
                              STR_5 129D                                STR_6 1428  
                              STR_7 11B9                                STR_8 127B  
                              STR_9 10E4                                u2025 0040  
                              u1315 0DA5                                u2035 004B  
                              u1325 0DAF                                _LATA 010C  
                              u1255 0CCE                                u1335 0DB7  
                              _LATC 010E                                u1265 0CD3  
                              u1365 0D0D                                u1525 064E  
                              u1295 0D9B                                u1615 0716  
                              u2184 03A0                                u1385 0D1C  
                              u2185 039F                                u1395 0D23  
                              u1655 0741                                u1824 0011  
                              u1585 06F4                                u1825 0010  
                              u1835 00D8                                u1785 0CF1  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 0F1A                                _main 03C3  
                              _mode 0062                     can_baudrate@bpr 0041  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 0C32  
                      _SPI_exchange 0C80                       __CFG_MCLRE$ON 0000  
                  can_send@data_buf 0043          __end_of_can_dump_registers 0276  
    __end_of_SPI_Exchange8bitBuffer 0E12                       ?_EUSART_Write 0070  
    __size_of_OSCILLATOR_Initialize 0007       __end_of_OSCILLATOR_Initialize 0C2B  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 1000                               STR_11 10AE  
                             STR_20 1117                               STR_12 103B  
                             STR_21 1227                               STR_13 116D  
                             STR_30 1391                               STR_22 1374  
                             STR_14 1143                               STR_31 1383  
                             STR_23 123D                               STR_15 11F7  
                             STR_40 12D9                               STR_32 1267  
                             STR_24 1210                               STR_16 1193  
                             STR_41 1420                               STR_33 12C3  
                             STR_25 12B2                               STR_17 1252  
                     __CFG_WDTE$OFF 0000                               STR_42 13C7  
                             STR_50 1306                               STR_34 12E5  
                             STR_26 12D4                               STR_18 11DD  
                             STR_43 13D3                               STR_51 1326  
                             STR_27 12F6                               STR_35 128F  
                             STR_19 1075                               STR_52 1420  
                             STR_44 13DF                               STR_36 13BA  
                             STR_28 1356                               STR_45 1420  
                             STR_37 13AD                               STR_29 139F  
                             STR_53 1365                               STR_54 1374  
                             STR_38 141D                               STR_46 1316  
                             STR_55 141D                               STR_39 12B7  
                             STR_47 1336                               STR_56 13FD  
                             STR_48 1346                               STR_49 1420  
                             STR_57 12A1                __size_of_can_set_sid 0024  
                   __end_of___lwdiv 0DC4                     __end_of___lwmod 0D30  
     can_status_check@bytes_written 005E                               _RCREG 0199  
                             _RCSTA 019D                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                     SPI_exchange@buf 007D  
                   SPI_exchange@len 0078                     __end_of_dpowers 13F5  
                    _WDT_Initialize 0004                     __end_of_max_idx 1430  
                   __end_of_isdigit 0C71                     __end_of_receive 016A  
                             atoi@a 007B                    can_baudrate@mask 0042  
                             atoi@s 007D                               _putch 0C19  
                             main@c 00B0                               main@n 00A6  
                             pclath 000A                               status 0003  
                             wtemp0 007E                       receive@rx_buf 0048  
                   ?_SPI_Initialize 0070                     __initialization 07EE  
             __size_of_can_baudrate 0033                        __end_of_atoi 0F81  
                      __end_of_main 05B3                       main@echo_back 00A5  
                    ??_EUSART_Write 0070              can_status_check@status 005F  
                            ??_atoi 0078                              ??_main 0060  
             can_set_mask@mask_sidh 004A               can_set_mask@mask_sidl 004B  
           can_logging_mode@verbose 0070                      __CFG_PLLEN$OFF 0000  
            __end_of_WDT_Initialize 0008                       can_set_mask@n 003F  
          __end_of_SPI_Exchange8bit 0C43               __size_of_can_ope_mode 0057  
             __size_of_can_set_mask 0080                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_init 1000  
                      _can_baudrate 0D5D                    __end_of_can_send 03C3  
                  receive_handler@i 0041                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0CC5                       _output_format 0066  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                         ??___lwmod 007C                              _printf 05B3  
                      _can_ope_mode 0E68                        _can_set_mask 0036  
                         ??_isdigit 0070                           ??_receive 0042  
                   ?_WDT_Initialize 0070           __size_of_can_logging_mode 000B  
                  __end_of_rxfnsidh 1411                    __end_of_txbnsidh 1425  
                  __end_of_rxmnsidh 142F                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 0C71           SPI_exchange@bytes_written 007C  
           __end_of__initialization 07FD              __size_of_read_register 0019  
                ?_SYSTEM_Initialize 0070                  __size_of_can_abort 002D  
                    __pcstackCOMMON 0070                 ??_SYSTEM_Initialize 0070  
                    can_send@status 0042                       __end_of_putch 0C1E  
                       receive@pbuf 0057                          __end_of_nm 142D  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 005C              can_abort@bytes_written 0041  
         __end_of_SYSTEM_Initialize 0C80                             ??_putch 0071  
                        __pbssBANK0 0062                          __pbssBANK1 00B3  
              __end_of_EUSART_Write 0C3A                    can_set_mask@mask 0040  
                        __pmaintext 03C3                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E                             ?_printf 0022  
                     _read_register 0CAC                           ?_can_init 003F  
                         ?_can_send 003B                  _can_dump_registers 016A  
          __size_of_receive_handler 005B                             _OSCTUNE 0098  
                 __end_of_can_abort 0D5D                             _SSP1ADD 0212  
                           _SSP1BUF 0211                 ?_can_dump_registers 0070  
                __size_of_txf_clear 002E                    ??_SPI_Initialize 0070  
                   __size_of___wmul 001B                ??_can_dump_registers 003B  
                     ??_can_set_sid 0072                             ___lwdiv 0D90  
                           ___lwmod 0D04                      ?_read_register 0070  
                           _handler 0069                             __ptext1 0E12  
                           __ptext2 0008                             __ptext3 00B6  
                           __ptext4 0EBF                             __ptext5 0036  
                           __ptext6 0276                             __ptext7 0C58  
                           __ptext8 0F81                             __ptext9 0CE0  
                   __size_of_printf 023B                   __end_of_hexpowers 13FD  
                           _dpowers 13EB                          ??_can_init 0041  
             _OSCILLATOR_Initialize 0C24                             _max_idx 142F  
                        ??_can_send 003C                             _isdigit 0C63  
                           _receive 00B6            ??_PIN_MANAGER_Initialize 0070  
                  _can_logging_mode 0C58                   ?_SPI_Exchange8bit 0070  
                           main@cmd 00B1              txf_clear@bytes_written 0023  
                           main@buf 00A7                             main@bpr 00A1  
        __size_of_SYSTEM_Initialize 000F                             main@idx 00B2  
                           main@sid 00A0                             clrloop0 0C1F  
              end_of_initialization 07FD                  ??_SPI_Exchange8bit 0070  
              SPI_Exchange8bit@data 0070                      _operation_mode 0068  
                 _EUSART_Initialize 0C4D                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 003A  
                           printf@f 0022                   __end_of_txf_clear 0036  
               ??_EUSART_Initialize 0070                    ??_WDT_Initialize 0070  
               __end_of_can_set_sid 0D04                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                   ??_receive_handler 003E  
         __end_of_EUSART_Initialize 0C58                         printf@width 0038  
          ??_SPI_Exchange8bitBuffer 0073                          main@status 00A2  
               receive_handler@pbuf 003C                     ??_read_register 0020  
                    __end_of___wmul 0CE0                        _EUSART_Write 0C32  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 07EE  
               start_initialization 07EE     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 1428                    _can_set_mask$492 0047  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         can_baudrate@bytes_written 0043           __size_of_can_status_check 0056  
         can_ope_mode@bytes_written 003D                       ?_SPI_exchange 0078  
                          ??___wmul 0074                       txf_clear@mask 0022  
                       _can_set_sid 0CE0                            ??_printf 002A  
                         ___latbits 0002                       __pcstackBANK0 0020  
                     __pcstackBANK1 00A0                 can_set_sid@can_node 0070  
                 read_register@addr 0021                   __size_of_can_init 007F  
                 __size_of_can_send 014D                          receive@dlc 005A  
     SPI_Exchange8bitBuffer@dataOut 0072                          receive@sid 0058  
                         _can_abort 0D30          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0C4D                           __pnvBANK0 0069  
                   can_set_mask@cmd 0049                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0C95                     can_set_sid@sidh 0075  
                   can_set_sid@sidl 0076            __end_of_can_logging_mode 0C63  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                            ?_receive 0070  
                         can_send@i 0044                           can_send@n 0045  
                         _hexpowers 13F5                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                          ?_can_abort 0070  
                     ?_can_baudrate 0070                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
                         clear_ram0 0C1E                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214         __size_of_can_dump_registers 010C  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
                     ?_can_set_mask 003F              _SPI_Exchange8bitBuffer 0DC4  
                   _receive_handler 0EBF                          printf@flag 0037  
                        printf@prec 002F                           _txf_clear 0008  
                receive_handler@dlc 003D                  receive_handler@sid 003B  
                       _EUSART_Read 0C43                      ??_can_baudrate 003F  
                       can_send@dlc 003B                         can_send@len 0040  
                  _can_status_check 0E12             __size_of_SPI_Initialize 0007  
           ??_OSCILLATOR_Initialize 0070                      ??_can_ope_mode 003B  
                  __size_of___lwdiv 0034                    __size_of___lwmod 002C  
                    ??_can_set_mask 0041        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$786 0070                can_ope_mode@ope_mode 003E  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_init 0F81  
                          _can_send 0276                          txf_clear@n 0024  
                        ?_txf_clear 0070                __end_of_SPI_exchange 0C95  
                  __size_of_isdigit 000E                    __size_of_receive 00B4  
                   ___lwdiv@divisor 0070                     ___lwdiv@counter 0077  
                          __ptext10 016A                            __ptext11 0CAC  
                          __ptext20 0C80                            __ptext12 0D5D  
                          __ptext21 0DC4                            __ptext13 0D30  
                          __ptext30 0C24                            __ptext22 0C3A  
                          __ptext14 0E68                            __ptext31 0C4D  
                          __ptext23 0F1A                            __ptext15 05B3  
                          __ptext32 0C43                            __ptext24 0C63  
                          __ptext16 0C19                            __ptext25 0CC5  
                          __ptext17 0C32                            __ptext26 0C71  
                          __ptext18 0D04                            __ptext27 0004  
                          __ptext19 0D90                            __ptext28 0C2B  
                          __ptext29 0C95                        _SSP1CON1bits 0215  
                       ??_can_abort 003F                       __size_of_atoi 0067  
                     __size_of_main 01F0                            atoi@sign 007A  
           __end_of_receive_handler 0F1A                        ?_can_set_sid 0070  
                         printf@idx 002E                           printf@len 0032  
                         printf@val 0035                        _SSP1STATbits 0214  
                          main@mask 00A3                            _rxfnsidh 140B  
             __end_of_read_register 0CC5                            _txbnsidh 1422  
                          _rxmnsidh 142D                      __pstringtext10 103B  
                    __pstringtext11 1075                      __pstringtext20 11F7  
                    __pstringtext12 10AE                      __pstringtext21 1210  
                    __pstringtext13 10E4                      __pstringtext30 12C3  
                    __pstringtext22 1227                      __pstringtext14 1117  
                    __pstringtext31 12D4                      __pstringtext23 123D  
                    __pstringtext15 1143                      __pstringtext40 1365  
                    __pstringtext32 12E5                      __pstringtext24 1252  
                    __pstringtext16 116D                      __pstringtext41 1374  
                    __pstringtext33 12F6                      __pstringtext25 1267  
                    __pstringtext17 1193                      __pstringtext50 13FD  
                    __pstringtext42 1383                      __pstringtext34 1306  
                    __pstringtext26 127B                      __pstringtext18 11B9  
                    __pstringtext51 1404                      __pstringtext43 1391  
                    __pstringtext35 1316                      __pstringtext27 128F  
                    __pstringtext19 11DD                      __pstringtext52 1411  
                    __pstringtext44 139F                      __pstringtext36 1326  
                    __pstringtext28 12A1                      __pstringtext53 1417  
                    __pstringtext45 13AD                      __pstringtext37 1336  
                    __pstringtext29 12B2                      __pstringtext54 141D  
                    __pstringtext46 13BA                      __pstringtext38 1346  
                    __pstringtext55 1428                      __pstringtext47 13C7  
                    __pstringtext39 1356                      __pstringtext56 0000  
                    __pstringtext48 13D3                      __pstringtext49 13DF  
                          isdigit@c 0071             __size_of_WDT_Initialize 0004  
                          receive@n 005B                    ___lwmod@dividend 007A  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                   receive@bytes_read 0047  
                  _SPI_Exchange8bit 0C3A               can_send@bytes_written 0041  
                          printf@ap 0034                            printf@cp 0030  
                 ?_can_logging_mode 0070             can_init@receive_handler 003F  
                ??_can_logging_mode 0071                __end_of_can_baudrate 0D90  
                     __pstringtext1 13EB                       __pstringtext2 13F5  
                     __pstringtext3 140B                       __pstringtext4 1422  
                     __pstringtext5 1425                       __pstringtext6 142B  
                     __pstringtext7 142D                       __pstringtext8 142F  
                     __pstringtext9 1000                         ??_txf_clear 0020  
                   ___lwmod@divisor 0078                     ___lwmod@counter 007D  
                EUSART_Write@txData 0070      __end_of_PIN_MANAGER_Initialize 0CAC  
              __end_of_can_ope_mode 0EBF                __end_of_can_set_mask 00B6  
