

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 22 20:57:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	stringtext55,global,class=STRCODE,delta=2
    60                           	psect	stringtext56,global,class=STRCODE,delta=2
    61                           	psect	stringtext57,global,class=STRCODE,delta=2
    62                           	psect	stringtext58,global,class=STRCODE,delta=2
    63                           	psect	stringtext59,global,class=STRCODE,delta=2
    64                           	psect	stringtext60,global,class=STRCODE,delta=2
    65                           	psect	stringtext61,global,class=STRCODE,delta=2
    66                           	psect	cinit,global,class=CODE,merge=1,delta=2
    67                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    68                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    69                           	psect	clrtext,global,class=CODE,delta=2
    70                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    71                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    72                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    73                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    74                           	psect	text1,local,class=CODE,merge=1,delta=2
    75                           	psect	text2,local,class=CODE,merge=1,delta=2
    76                           	psect	text3,local,class=CODE,merge=1,delta=2
    77                           	psect	text4,local,class=CODE,merge=1,delta=2
    78                           	psect	text5,local,class=CODE,merge=1,delta=2
    79                           	psect	text6,local,class=CODE,merge=1,delta=2
    80                           	psect	text7,local,class=CODE,merge=1,delta=2
    81                           	psect	text8,local,class=CODE,merge=1,delta=2
    82                           	psect	text9,local,class=CODE,merge=1,delta=2
    83                           	psect	text10,local,class=CODE,merge=1,delta=2
    84                           	psect	text11,local,class=CODE,merge=1,delta=2
    85                           	psect	text12,local,class=CODE,merge=1,delta=2
    86                           	psect	text13,local,class=CODE,merge=1,delta=2
    87                           	psect	text14,local,class=CODE,merge=1,delta=2
    88                           	psect	text15,local,class=CODE,merge=1,delta=2
    89                           	psect	text16,local,class=CODE,merge=1,delta=2
    90                           	psect	text17,local,class=CODE,merge=1,delta=2
    91                           	psect	text18,local,class=CODE,merge=1,delta=2
    92                           	psect	text19,local,class=CODE,merge=1,delta=2
    93                           	psect	text20,local,class=CODE,merge=1,delta=2
    94                           	psect	text21,local,class=CODE,merge=1,delta=2
    95                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text24,local,class=CODE,merge=1,delta=2
    98                           	psect	text25,local,class=CODE,merge=1,delta=2
    99                           	psect	text26,local,class=CODE,merge=1,delta=2
   100                           	psect	text27,local,class=CODE,merge=1,delta=2
   101                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text31,local,class=CODE,merge=1,delta=2
   105                           	psect	text32,local,class=CODE,merge=1,delta=2
   106                           	psect	text33,local,class=CODE,merge=1,delta=2
   107                           	psect	text34,local,class=CODE,merge=1,delta=2
   108                           	psect	text35,local,class=CODE,merge=1,delta=2
   109                           	psect	text36,local,class=CODE,merge=1,delta=2
   110                           	psect	text37,local,class=CODE,merge=1,delta=2
   111                           	psect	text38,local,class=CODE,merge=1,delta=2
   112                           	psect	text39,local,class=CODE,merge=1,delta=2
   113                           	dabs	1,0x7E,2
   114  0000                     
   115                           ; Version 1.45
   116                           ; Generated 16/11/2017 GMT
   117                           ; 
   118                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC16F1825 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000E                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  008C                     	;# 
   178  008E                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  010C                     	;# 
   194  010E                     	;# 
   195  0111                     	;# 
   196  0112                     	;# 
   197  0113                     	;# 
   198  0114                     	;# 
   199  0115                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  0118                     	;# 
   203  0119                     	;# 
   204  011A                     	;# 
   205  011B                     	;# 
   206  011D                     	;# 
   207  011E                     	;# 
   208  018C                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020C                     	;# 
   228  020E                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0294                     	;# 
   249  0295                     	;# 
   250  0295                     	;# 
   251  0296                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  029B                     	;# 
   257  029C                     	;# 
   258  029D                     	;# 
   259  029E                     	;# 
   260  0311                     	;# 
   261  0311                     	;# 
   262  0312                     	;# 
   263  0313                     	;# 
   264  0318                     	;# 
   265  0318                     	;# 
   266  0319                     	;# 
   267  031A                     	;# 
   268  038C                     	;# 
   269  038E                     	;# 
   270  0391                     	;# 
   271  0392                     	;# 
   272  0393                     	;# 
   273  039A                     	;# 
   274  039C                     	;# 
   275  039D                     	;# 
   276  039E                     	;# 
   277  039F                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  041C                     	;# 
   282  041D                     	;# 
   283  041E                     	;# 
   284  0FE4                     	;# 
   285  0FE5                     	;# 
   286  0FE6                     	;# 
   287  0FE7                     	;# 
   288  0FE8                     	;# 
   289  0FE9                     	;# 
   290  0FEA                     	;# 
   291  0FEB                     	;# 
   292  0FED                     	;# 
   293  0FEE                     	;# 
   294  0FEF                     	;# 
   295  0000                     	;# 
   296  0001                     	;# 
   297  0002                     	;# 
   298  0003                     	;# 
   299  0004                     	;# 
   300  0005                     	;# 
   301  0006                     	;# 
   302  0007                     	;# 
   303  0008                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000E                     	;# 
   309  0011                     	;# 
   310  0012                     	;# 
   311  0013                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  008C                     	;# 
   324  008E                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0093                     	;# 
   328  0095                     	;# 
   329  0096                     	;# 
   330  0097                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  009B                     	;# 
   335  009B                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  010C                     	;# 
   340  010E                     	;# 
   341  0111                     	;# 
   342  0112                     	;# 
   343  0113                     	;# 
   344  0114                     	;# 
   345  0115                     	;# 
   346  0116                     	;# 
   347  0117                     	;# 
   348  0118                     	;# 
   349  0119                     	;# 
   350  011A                     	;# 
   351  011B                     	;# 
   352  011D                     	;# 
   353  011E                     	;# 
   354  018C                     	;# 
   355  018E                     	;# 
   356  0191                     	;# 
   357  0191                     	;# 
   358  0192                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0193                     	;# 
   362  0194                     	;# 
   363  0195                     	;# 
   364  0196                     	;# 
   365  0199                     	;# 
   366  019A                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019C                     	;# 
   370  019D                     	;# 
   371  019E                     	;# 
   372  019F                     	;# 
   373  020C                     	;# 
   374  020E                     	;# 
   375  0211                     	;# 
   376  0211                     	;# 
   377  0212                     	;# 
   378  0212                     	;# 
   379  0213                     	;# 
   380  0213                     	;# 
   381  0214                     	;# 
   382  0214                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0216                     	;# 
   387  0216                     	;# 
   388  0217                     	;# 
   389  0217                     	;# 
   390  0291                     	;# 
   391  0291                     	;# 
   392  0292                     	;# 
   393  0293                     	;# 
   394  0294                     	;# 
   395  0295                     	;# 
   396  0295                     	;# 
   397  0296                     	;# 
   398  0298                     	;# 
   399  0298                     	;# 
   400  0299                     	;# 
   401  029A                     	;# 
   402  029B                     	;# 
   403  029C                     	;# 
   404  029D                     	;# 
   405  029E                     	;# 
   406  0311                     	;# 
   407  0311                     	;# 
   408  0312                     	;# 
   409  0313                     	;# 
   410  0318                     	;# 
   411  0318                     	;# 
   412  0319                     	;# 
   413  031A                     	;# 
   414  038C                     	;# 
   415  038E                     	;# 
   416  0391                     	;# 
   417  0392                     	;# 
   418  0393                     	;# 
   419  039A                     	;# 
   420  039C                     	;# 
   421  039D                     	;# 
   422  039E                     	;# 
   423  039F                     	;# 
   424  0415                     	;# 
   425  0416                     	;# 
   426  0417                     	;# 
   427  041C                     	;# 
   428  041D                     	;# 
   429  041E                     	;# 
   430  0FE4                     	;# 
   431  0FE5                     	;# 
   432  0FE6                     	;# 
   433  0FE7                     	;# 
   434  0FE8                     	;# 
   435  0FE9                     	;# 
   436  0FEA                     	;# 
   437  0FEB                     	;# 
   438  0FED                     	;# 
   439  0FEE                     	;# 
   440  0FEF                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000E                     	;# 
   455  0011                     	;# 
   456  0012                     	;# 
   457  0013                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0016                     	;# 
   461  0017                     	;# 
   462  0018                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001E                     	;# 
   468  001F                     	;# 
   469  008C                     	;# 
   470  008E                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0093                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0097                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009A                     	;# 
   480  009B                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  010C                     	;# 
   486  010E                     	;# 
   487  0111                     	;# 
   488  0112                     	;# 
   489  0113                     	;# 
   490  0114                     	;# 
   491  0115                     	;# 
   492  0116                     	;# 
   493  0117                     	;# 
   494  0118                     	;# 
   495  0119                     	;# 
   496  011A                     	;# 
   497  011B                     	;# 
   498  011D                     	;# 
   499  011E                     	;# 
   500  018C                     	;# 
   501  018E                     	;# 
   502  0191                     	;# 
   503  0191                     	;# 
   504  0192                     	;# 
   505  0193                     	;# 
   506  0193                     	;# 
   507  0193                     	;# 
   508  0194                     	;# 
   509  0195                     	;# 
   510  0196                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0298                     	;# 
   545  0298                     	;# 
   546  0299                     	;# 
   547  029A                     	;# 
   548  029B                     	;# 
   549  029C                     	;# 
   550  029D                     	;# 
   551  029E                     	;# 
   552  0311                     	;# 
   553  0311                     	;# 
   554  0312                     	;# 
   555  0313                     	;# 
   556  0318                     	;# 
   557  0318                     	;# 
   558  0319                     	;# 
   559  031A                     	;# 
   560  038C                     	;# 
   561  038E                     	;# 
   562  0391                     	;# 
   563  0392                     	;# 
   564  0393                     	;# 
   565  039A                     	;# 
   566  039C                     	;# 
   567  039D                     	;# 
   568  039E                     	;# 
   569  039F                     	;# 
   570  0415                     	;# 
   571  0416                     	;# 
   572  0417                     	;# 
   573  041C                     	;# 
   574  041D                     	;# 
   575  041E                     	;# 
   576  0FE4                     	;# 
   577  0FE5                     	;# 
   578  0FE6                     	;# 
   579  0FE7                     	;# 
   580  0FE8                     	;# 
   581  0FE9                     	;# 
   582  0FEA                     	;# 
   583  0FEB                     	;# 
   584  0FED                     	;# 
   585  0FEE                     	;# 
   586  0FEF                     	;# 
   587  0000                     	;# 
   588  0001                     	;# 
   589  0002                     	;# 
   590  0003                     	;# 
   591  0004                     	;# 
   592  0005                     	;# 
   593  0006                     	;# 
   594  0007                     	;# 
   595  0008                     	;# 
   596  0009                     	;# 
   597  000A                     	;# 
   598  000B                     	;# 
   599  000C                     	;# 
   600  000E                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0015                     	;# 
   605  0016                     	;# 
   606  0016                     	;# 
   607  0017                     	;# 
   608  0018                     	;# 
   609  0019                     	;# 
   610  001A                     	;# 
   611  001B                     	;# 
   612  001C                     	;# 
   613  001E                     	;# 
   614  001F                     	;# 
   615  008C                     	;# 
   616  008E                     	;# 
   617  0091                     	;# 
   618  0092                     	;# 
   619  0093                     	;# 
   620  0095                     	;# 
   621  0096                     	;# 
   622  0097                     	;# 
   623  0098                     	;# 
   624  0099                     	;# 
   625  009A                     	;# 
   626  009B                     	;# 
   627  009B                     	;# 
   628  009C                     	;# 
   629  009D                     	;# 
   630  009E                     	;# 
   631  010C                     	;# 
   632  010E                     	;# 
   633  0111                     	;# 
   634  0112                     	;# 
   635  0113                     	;# 
   636  0114                     	;# 
   637  0115                     	;# 
   638  0116                     	;# 
   639  0117                     	;# 
   640  0118                     	;# 
   641  0119                     	;# 
   642  011A                     	;# 
   643  011B                     	;# 
   644  011D                     	;# 
   645  011E                     	;# 
   646  018C                     	;# 
   647  018E                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019C                     	;# 
   662  019D                     	;# 
   663  019E                     	;# 
   664  019F                     	;# 
   665  020C                     	;# 
   666  020E                     	;# 
   667  0211                     	;# 
   668  0211                     	;# 
   669  0212                     	;# 
   670  0212                     	;# 
   671  0213                     	;# 
   672  0213                     	;# 
   673  0214                     	;# 
   674  0214                     	;# 
   675  0215                     	;# 
   676  0215                     	;# 
   677  0215                     	;# 
   678  0216                     	;# 
   679  0216                     	;# 
   680  0217                     	;# 
   681  0217                     	;# 
   682  0291                     	;# 
   683  0291                     	;# 
   684  0292                     	;# 
   685  0293                     	;# 
   686  0294                     	;# 
   687  0295                     	;# 
   688  0295                     	;# 
   689  0296                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  029B                     	;# 
   695  029C                     	;# 
   696  029D                     	;# 
   697  029E                     	;# 
   698  0311                     	;# 
   699  0311                     	;# 
   700  0312                     	;# 
   701  0313                     	;# 
   702  0318                     	;# 
   703  0318                     	;# 
   704  0319                     	;# 
   705  031A                     	;# 
   706  038C                     	;# 
   707  038E                     	;# 
   708  0391                     	;# 
   709  0392                     	;# 
   710  0393                     	;# 
   711  039A                     	;# 
   712  039C                     	;# 
   713  039D                     	;# 
   714  039E                     	;# 
   715  039F                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  041C                     	;# 
   720  041D                     	;# 
   721  041E                     	;# 
   722  0FE4                     	;# 
   723  0FE5                     	;# 
   724  0FE6                     	;# 
   725  0FE7                     	;# 
   726  0FE8                     	;# 
   727  0FE9                     	;# 
   728  0FEA                     	;# 
   729  0FEB                     	;# 
   730  0FED                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  001E                     	;# 
   760  001F                     	;# 
   761  008C                     	;# 
   762  008E                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0093                     	;# 
   766  0095                     	;# 
   767  0096                     	;# 
   768  0097                     	;# 
   769  0098                     	;# 
   770  0099                     	;# 
   771  009A                     	;# 
   772  009B                     	;# 
   773  009B                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  010C                     	;# 
   778  010E                     	;# 
   779  0111                     	;# 
   780  0112                     	;# 
   781  0113                     	;# 
   782  0114                     	;# 
   783  0115                     	;# 
   784  0116                     	;# 
   785  0117                     	;# 
   786  0118                     	;# 
   787  0119                     	;# 
   788  011A                     	;# 
   789  011B                     	;# 
   790  011D                     	;# 
   791  011E                     	;# 
   792  018C                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0194                     	;# 
   801  0195                     	;# 
   802  0196                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019C                     	;# 
   808  019D                     	;# 
   809  019E                     	;# 
   810  019F                     	;# 
   811  020C                     	;# 
   812  020E                     	;# 
   813  0211                     	;# 
   814  0211                     	;# 
   815  0212                     	;# 
   816  0212                     	;# 
   817  0213                     	;# 
   818  0213                     	;# 
   819  0214                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0291                     	;# 
   829  0291                     	;# 
   830  0292                     	;# 
   831  0293                     	;# 
   832  0294                     	;# 
   833  0295                     	;# 
   834  0295                     	;# 
   835  0296                     	;# 
   836  0298                     	;# 
   837  0298                     	;# 
   838  0299                     	;# 
   839  029A                     	;# 
   840  029B                     	;# 
   841  029C                     	;# 
   842  029D                     	;# 
   843  029E                     	;# 
   844  0311                     	;# 
   845  0311                     	;# 
   846  0312                     	;# 
   847  0313                     	;# 
   848  0318                     	;# 
   849  0318                     	;# 
   850  0319                     	;# 
   851  031A                     	;# 
   852  038C                     	;# 
   853  038E                     	;# 
   854  0391                     	;# 
   855  0392                     	;# 
   856  0393                     	;# 
   857  039A                     	;# 
   858  039C                     	;# 
   859  039D                     	;# 
   860  039E                     	;# 
   861  039F                     	;# 
   862  0415                     	;# 
   863  0416                     	;# 
   864  0417                     	;# 
   865  041C                     	;# 
   866  041D                     	;# 
   867  041E                     	;# 
   868  0FE4                     	;# 
   869  0FE5                     	;# 
   870  0FE6                     	;# 
   871  0FE7                     	;# 
   872  0FE8                     	;# 
   873  0FE9                     	;# 
   874  0FEA                     	;# 
   875  0FEB                     	;# 
   876  0FED                     	;# 
   877  0FEE                     	;# 
   878  0FEF                     	;# 
   879  0000                     	;# 
   880  0001                     	;# 
   881  0002                     	;# 
   882  0003                     	;# 
   883  0004                     	;# 
   884  0005                     	;# 
   885  0006                     	;# 
   886  0007                     	;# 
   887  0008                     	;# 
   888  0009                     	;# 
   889  000A                     	;# 
   890  000B                     	;# 
   891  000C                     	;# 
   892  000E                     	;# 
   893  0011                     	;# 
   894  0012                     	;# 
   895  0013                     	;# 
   896  0015                     	;# 
   897  0016                     	;# 
   898  0016                     	;# 
   899  0017                     	;# 
   900  0018                     	;# 
   901  0019                     	;# 
   902  001A                     	;# 
   903  001B                     	;# 
   904  001C                     	;# 
   905  001E                     	;# 
   906  001F                     	;# 
   907  008C                     	;# 
   908  008E                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009B                     	;# 
   920  009C                     	;# 
   921  009D                     	;# 
   922  009E                     	;# 
   923  010C                     	;# 
   924  010E                     	;# 
   925  0111                     	;# 
   926  0112                     	;# 
   927  0113                     	;# 
   928  0114                     	;# 
   929  0115                     	;# 
   930  0116                     	;# 
   931  0117                     	;# 
   932  0118                     	;# 
   933  0119                     	;# 
   934  011A                     	;# 
   935  011B                     	;# 
   936  011D                     	;# 
   937  011E                     	;# 
   938  018C                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0193                     	;# 
   946  0194                     	;# 
   947  0195                     	;# 
   948  0196                     	;# 
   949  0199                     	;# 
   950  019A                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019C                     	;# 
   954  019D                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020E                     	;# 
   959  0211                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0213                     	;# 
   965  0214                     	;# 
   966  0214                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0216                     	;# 
   971  0216                     	;# 
   972  0217                     	;# 
   973  0217                     	;# 
   974  0291                     	;# 
   975  0291                     	;# 
   976  0292                     	;# 
   977  0293                     	;# 
   978  0294                     	;# 
   979  0295                     	;# 
   980  0295                     	;# 
   981  0296                     	;# 
   982  0298                     	;# 
   983  0298                     	;# 
   984  0299                     	;# 
   985  029A                     	;# 
   986  029B                     	;# 
   987  029C                     	;# 
   988  029D                     	;# 
   989  029E                     	;# 
   990  0311                     	;# 
   991  0311                     	;# 
   992  0312                     	;# 
   993  0313                     	;# 
   994  0318                     	;# 
   995  0318                     	;# 
   996  0319                     	;# 
   997  031A                     	;# 
   998  038C                     	;# 
   999  038E                     	;# 
  1000  0391                     	;# 
  1001  0392                     	;# 
  1002  0393                     	;# 
  1003  039A                     	;# 
  1004  039C                     	;# 
  1005  039D                     	;# 
  1006  039E                     	;# 
  1007  039F                     	;# 
  1008  0415                     	;# 
  1009  0416                     	;# 
  1010  0417                     	;# 
  1011  041C                     	;# 
  1012  041D                     	;# 
  1013  041E                     	;# 
  1014  0FE4                     	;# 
  1015  0FE5                     	;# 
  1016  0FE6                     	;# 
  1017  0FE7                     	;# 
  1018  0FE8                     	;# 
  1019  0FE9                     	;# 
  1020  0FEA                     	;# 
  1021  0FEB                     	;# 
  1022  0FED                     	;# 
  1023  0FEE                     	;# 
  1024  0FEF                     	;# 
  1025  0000                     	;# 
  1026  0001                     	;# 
  1027  0002                     	;# 
  1028  0003                     	;# 
  1029  0004                     	;# 
  1030  0005                     	;# 
  1031  0006                     	;# 
  1032  0007                     	;# 
  1033  0008                     	;# 
  1034  0009                     	;# 
  1035  000A                     	;# 
  1036  000B                     	;# 
  1037  000C                     	;# 
  1038  000E                     	;# 
  1039  0011                     	;# 
  1040  0012                     	;# 
  1041  0013                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  001E                     	;# 
  1052  001F                     	;# 
  1053  008C                     	;# 
  1054  008E                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0093                     	;# 
  1058  0095                     	;# 
  1059  0096                     	;# 
  1060  0097                     	;# 
  1061  0098                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010E                     	;# 
  1071  0111                     	;# 
  1072  0112                     	;# 
  1073  0113                     	;# 
  1074  0114                     	;# 
  1075  0115                     	;# 
  1076  0116                     	;# 
  1077  0117                     	;# 
  1078  0118                     	;# 
  1079  0119                     	;# 
  1080  011A                     	;# 
  1081  011B                     	;# 
  1082  011D                     	;# 
  1083  011E                     	;# 
  1084  018C                     	;# 
  1085  018E                     	;# 
  1086  0191                     	;# 
  1087  0191                     	;# 
  1088  0192                     	;# 
  1089  0193                     	;# 
  1090  0193                     	;# 
  1091  0193                     	;# 
  1092  0194                     	;# 
  1093  0195                     	;# 
  1094  0196                     	;# 
  1095  0199                     	;# 
  1096  019A                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019C                     	;# 
  1100  019D                     	;# 
  1101  019E                     	;# 
  1102  019F                     	;# 
  1103  020C                     	;# 
  1104  020E                     	;# 
  1105  0211                     	;# 
  1106  0211                     	;# 
  1107  0212                     	;# 
  1108  0212                     	;# 
  1109  0213                     	;# 
  1110  0213                     	;# 
  1111  0214                     	;# 
  1112  0214                     	;# 
  1113  0215                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0216                     	;# 
  1117  0216                     	;# 
  1118  0217                     	;# 
  1119  0217                     	;# 
  1120  0291                     	;# 
  1121  0291                     	;# 
  1122  0292                     	;# 
  1123  0293                     	;# 
  1124  0294                     	;# 
  1125  0295                     	;# 
  1126  0295                     	;# 
  1127  0296                     	;# 
  1128  0298                     	;# 
  1129  0298                     	;# 
  1130  0299                     	;# 
  1131  029A                     	;# 
  1132  029B                     	;# 
  1133  029C                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  0311                     	;# 
  1137  0311                     	;# 
  1138  0312                     	;# 
  1139  0313                     	;# 
  1140  0318                     	;# 
  1141  0318                     	;# 
  1142  0319                     	;# 
  1143  031A                     	;# 
  1144  038C                     	;# 
  1145  038E                     	;# 
  1146  0391                     	;# 
  1147  0392                     	;# 
  1148  0393                     	;# 
  1149  039A                     	;# 
  1150  039C                     	;# 
  1151  039D                     	;# 
  1152  039E                     	;# 
  1153  039F                     	;# 
  1154  0415                     	;# 
  1155  0416                     	;# 
  1156  0417                     	;# 
  1157  041C                     	;# 
  1158  041D                     	;# 
  1159  041E                     	;# 
  1160  0FE4                     	;# 
  1161  0FE5                     	;# 
  1162  0FE6                     	;# 
  1163  0FE7                     	;# 
  1164  0FE8                     	;# 
  1165  0FE9                     	;# 
  1166  0FEA                     	;# 
  1167  0FEB                     	;# 
  1168  0FED                     	;# 
  1169  0FEE                     	;# 
  1170  0FEF                     	;# 
  1171  0000                     	;# 
  1172  0001                     	;# 
  1173  0002                     	;# 
  1174  0003                     	;# 
  1175  0004                     	;# 
  1176  0005                     	;# 
  1177  0006                     	;# 
  1178  0007                     	;# 
  1179  0008                     	;# 
  1180  0009                     	;# 
  1181  000A                     	;# 
  1182  000B                     	;# 
  1183  000C                     	;# 
  1184  000E                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0013                     	;# 
  1188  0015                     	;# 
  1189  0016                     	;# 
  1190  0016                     	;# 
  1191  0017                     	;# 
  1192  0018                     	;# 
  1193  0019                     	;# 
  1194  001A                     	;# 
  1195  001B                     	;# 
  1196  001C                     	;# 
  1197  001E                     	;# 
  1198  001F                     	;# 
  1199  008C                     	;# 
  1200  008E                     	;# 
  1201  0091                     	;# 
  1202  0092                     	;# 
  1203  0093                     	;# 
  1204  0095                     	;# 
  1205  0096                     	;# 
  1206  0097                     	;# 
  1207  0098                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010E                     	;# 
  1217  0111                     	;# 
  1218  0112                     	;# 
  1219  0113                     	;# 
  1220  0114                     	;# 
  1221  0115                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  0118                     	;# 
  1225  0119                     	;# 
  1226  011A                     	;# 
  1227  011B                     	;# 
  1228  011D                     	;# 
  1229  011E                     	;# 
  1230  018C                     	;# 
  1231  018E                     	;# 
  1232  0191                     	;# 
  1233  0191                     	;# 
  1234  0192                     	;# 
  1235  0193                     	;# 
  1236  0193                     	;# 
  1237  0193                     	;# 
  1238  0194                     	;# 
  1239  0195                     	;# 
  1240  0196                     	;# 
  1241  0199                     	;# 
  1242  019A                     	;# 
  1243  019B                     	;# 
  1244  019B                     	;# 
  1245  019C                     	;# 
  1246  019D                     	;# 
  1247  019E                     	;# 
  1248  019F                     	;# 
  1249  020C                     	;# 
  1250  020E                     	;# 
  1251  0211                     	;# 
  1252  0211                     	;# 
  1253  0212                     	;# 
  1254  0212                     	;# 
  1255  0213                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0214                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0215                     	;# 
  1262  0216                     	;# 
  1263  0216                     	;# 
  1264  0217                     	;# 
  1265  0217                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0298                     	;# 
  1275  0298                     	;# 
  1276  0299                     	;# 
  1277  029A                     	;# 
  1278  029B                     	;# 
  1279  029C                     	;# 
  1280  029D                     	;# 
  1281  029E                     	;# 
  1282  0311                     	;# 
  1283  0311                     	;# 
  1284  0312                     	;# 
  1285  0313                     	;# 
  1286  0318                     	;# 
  1287  0318                     	;# 
  1288  0319                     	;# 
  1289  031A                     	;# 
  1290  038C                     	;# 
  1291  038E                     	;# 
  1292  0391                     	;# 
  1293  0392                     	;# 
  1294  0393                     	;# 
  1295  039A                     	;# 
  1296  039C                     	;# 
  1297  039D                     	;# 
  1298  039E                     	;# 
  1299  039F                     	;# 
  1300  0415                     	;# 
  1301  0416                     	;# 
  1302  0417                     	;# 
  1303  041C                     	;# 
  1304  041D                     	;# 
  1305  041E                     	;# 
  1306  0FE4                     	;# 
  1307  0FE5                     	;# 
  1308  0FE6                     	;# 
  1309  0FE7                     	;# 
  1310  0FE8                     	;# 
  1311  0FE9                     	;# 
  1312  0FEA                     	;# 
  1313  0FEB                     	;# 
  1314  0FED                     	;# 
  1315  0FEE                     	;# 
  1316  0FEF                     	;# 
  1317                           
  1318                           	psect	stringtext1
  1319  14AA                     __pstringtext1:	
  1320  14AA                     _dpowers:	
  1321  14AA  3401               	retlw	1
  1322  14AB  3400               	retlw	0
  1323  14AC  340A               	retlw	10
  1324  14AD  3400               	retlw	0
  1325  14AE  3464               	retlw	100
  1326  14AF  3400               	retlw	0
  1327  14B0  34E8               	retlw	232
  1328  14B1  3403               	retlw	3
  1329  14B2  3410               	retlw	16
  1330  14B3  3427               	retlw	39
  1331  14B4                     __end_of_dpowers:	
  1332                           
  1333                           	psect	stringtext2
  1334  14B4                     __pstringtext2:	
  1335  14B4                     _hexpowers:	
  1336  14B4  3401               	retlw	1
  1337  14B5  3400               	retlw	0
  1338  14B6  3410               	retlw	16
  1339  14B7  3400               	retlw	0
  1340  14B8  3400               	retlw	0
  1341  14B9  3401               	retlw	1
  1342  14BA  3400               	retlw	0
  1343  14BB  3410               	retlw	16
  1344  14BC                     __end_of_hexpowers:	
  1345                           
  1346                           	psect	stringtext3
  1347  14CA                     __pstringtext3:	
  1348  14CA                     _rxfnsidh:	
  1349  14CA  3400               	retlw	0
  1350  14CB  3404               	retlw	4
  1351  14CC  3408               	retlw	8
  1352  14CD  3410               	retlw	16
  1353  14CE  3414               	retlw	20
  1354  14CF  3418               	retlw	24
  1355  14D0                     __end_of_rxfnsidh:	
  1356                           
  1357                           	psect	stringtext4
  1358  14E1                     __pstringtext4:	
  1359  14E1                     _txbnsidh:	
  1360  14E1  3431               	retlw	49
  1361  14E2  3441               	retlw	65
  1362  14E3  3451               	retlw	81
  1363  14E4                     __end_of_txbnsidh:	
  1364                           
  1365                           	psect	stringtext5
  1366  14E4                     __pstringtext5:	
  1367  14E4                     _abc:	
  1368  14E4  3400               	retlw	0
  1369  14E5  3402               	retlw	2
  1370  14E6  3404               	retlw	4
  1371  14E7                     __end_of_abc:	
  1372                           
  1373                           	psect	stringtext6
  1374  14EA                     __pstringtext6:	
  1375  14EA                     _nm:	
  1376  14EA  3400               	retlw	0
  1377  14EB  3402               	retlw	2
  1378  14EC                     __end_of_nm:	
  1379                           
  1380                           	psect	stringtext7
  1381  14EC                     __pstringtext7:	
  1382  14EC                     _rxmnsidh:	
  1383  14EC  3420               	retlw	32
  1384  14ED  3424               	retlw	36
  1385  14EE                     __end_of_rxmnsidh:	
  1386                           
  1387                           	psect	nvBANK1
  1388  00DE                     __pnvBANK1:	
  1389  00DE                     _run_mode:	
  1390  00DE                     	ds	1
  1391  000B                     _INTCONbits	set	11
  1392  0011                     _PIR1bits	set	17
  1393  0095                     _OPTION_REGbits	set	149
  1394  008E                     _TRISC	set	142
  1395  008C                     _TRISA	set	140
  1396  0097                     _WDTCON	set	151
  1397  0098                     _OSCTUNE	set	152
  1398  0099                     _OSCCON	set	153
  1399  010C                     _LATAbits	set	268
  1400  010E                     _LATCbits	set	270
  1401  011D                     _APFCON0	set	285
  1402  011E                     _APFCON1	set	286
  1403  010E                     _LATC	set	270
  1404  010C                     _LATA	set	268
  1405  0116                     _BORCON	set	278
  1406  0196                     _EECON2	set	406
  1407  0193                     _EEDATL	set	403
  1408  0194                     _EEDATH	set	404
  1409  0195                     _EECON1bits	set	405
  1410  0192                     _EEADRH	set	402
  1411  0191                     _EEADRL	set	401
  1412  018C                     _ANSELA	set	396
  1413  018E                     _ANSELC	set	398
  1414  019A                     _TXREG	set	410
  1415  0199                     _RCREG	set	409
  1416  019D                     _RCSTAbits	set	413
  1417  019C                     _SPBRGH	set	412
  1418  019B                     _SPBRGL	set	411
  1419  019E                     _TXSTA	set	414
  1420  019D                     _RCSTA	set	413
  1421  019F                     _BAUDCON	set	415
  1422  0214                     _SSP1STATbits	set	532
  1423  0211                     _SSP1BUF	set	529
  1424  0215                     _SSP1CON1bits	set	533
  1425  0212                     _SSP1ADD	set	530
  1426  0215                     _SSP1CON1	set	533
  1427  0214                     _SSP1STAT	set	532
  1428  020E                     _WPUC	set	526
  1429  020C                     _WPUA	set	524
  1430                           
  1431                           	psect	stringtext8
  1432  1000                     __pstringtext8:	
  1433  1000                     STR_12:	
  1434  1000  345B               	retlw	91	;'['
  1435  1001  3453               	retlw	83	;'S'
  1436  1002  3465               	retlw	101	;'e'
  1437  1003  3474               	retlw	116	;'t'
  1438  1004  3420               	retlw	32	;' '
  1439  1005  346F               	retlw	111	;'o'
  1440  1006  3475               	retlw	117	;'u'
  1441  1007  3474               	retlw	116	;'t'
  1442  1008  3470               	retlw	112	;'p'
  1443  1009  3475               	retlw	117	;'u'
  1444  100A  3474               	retlw	116	;'t'
  1445  100B  3420               	retlw	32	;' '
  1446  100C  346D               	retlw	109	;'m'
  1447  100D  346F               	retlw	111	;'o'
  1448  100E  3464               	retlw	100	;'d'
  1449  100F  3465               	retlw	101	;'e'
  1450  1010  345D               	retlw	93	;']'
  1451  1011  3420               	retlw	32	;' '
  1452  1012  347B               	retlw	123	;'{'
  1453  1013  3464               	retlw	100	;'d'
  1454  1014  3465               	retlw	101	;'e'
  1455  1015  3462               	retlw	98	;'b'
  1456  1016  3475               	retlw	117	;'u'
  1457  1017  3467               	retlw	103	;'g'
  1458  1018  343A               	retlw	58	;':'
  1459  1019  3420               	retlw	32	;' '
  1460  101A  3440               	retlw	64	;'@'
  1461  101B  3476               	retlw	118	;'v'
  1462  101C  3464               	retlw	100	;'d'
  1463  101D  342C               	retlw	44	;','
  1464  101E  3420               	retlw	32	;' '
  1465  101F  3476               	retlw	118	;'v'
  1466  1020  3465               	retlw	101	;'e'
  1467  1021  3472               	retlw	114	;'r'
  1468  1022  3462               	retlw	98	;'b'
  1469  1023  346F               	retlw	111	;'o'
  1470  1024  3473               	retlw	115	;'s'
  1471  1025  3465               	retlw	101	;'e'
  1472  1026  343A               	retlw	58	;':'
  1473  1027  3420               	retlw	32	;' '
  1474  1028  3440               	retlw	64	;'@'
  1475  1029  3476               	retlw	118	;'v'
  1476  102A  3476               	retlw	118	;'v'
  1477  102B  342C               	retlw	44	;','
  1478  102C  3420               	retlw	32	;' '
  1479  102D  346E               	retlw	110	;'n'
  1480  102E  346F               	retlw	111	;'o'
  1481  102F  3472               	retlw	114	;'r'
  1482  1030  346D               	retlw	109	;'m'
  1483  1031  3461               	retlw	97	;'a'
  1484  1032  346C               	retlw	108	;'l'
  1485  1033  343A               	retlw	58	;':'
  1486  1034  3420               	retlw	32	;' '
  1487  1035  3440               	retlw	64	;'@'
  1488  1036  3476               	retlw	118	;'v'
  1489  1037  346E               	retlw	110	;'n'
  1490  1038  347D               	retlw	125	;'}'
  1491  1039  340A               	retlw	10
  1492  103A  3400               	retlw	0
  1493                           
  1494                           	psect	stringtext9
  1495  103B                     __pstringtext9:	
  1496  103B                     STR_14:	
  1497  103B  3420               	retlw	32	;' '
  1498  103C  3420               	retlw	32	;' '
  1499  103D  3420               	retlw	32	;' '
  1500  103E  3420               	retlw	32	;' '
  1501  103F  3420               	retlw	32	;' '
  1502  1040  3477               	retlw	119	;'w'
  1503  1041  3469               	retlw	105	;'i'
  1504  1042  3474               	retlw	116	;'t'
  1505  1043  3468               	retlw	104	;'h'
  1506  1044  3420               	retlw	32	;' '
  1507  1045  3453               	retlw	83	;'S'
  1508  1046  3449               	retlw	73	;'I'
  1509  1047  3444               	retlw	68	;'D'
  1510  1048  343A               	retlw	58	;':'
  1511  1049  3420               	retlw	32	;' '
  1512  104A  3440               	retlw	64	;'@'
  1513  104B  346F               	retlw	111	;'o'
  1514  104C  346C               	retlw	108	;'l'
  1515  104D  3473               	retlw	115	;'s'
  1516  104E  3420               	retlw	32	;' '
  1517  104F  346F               	retlw	111	;'o'
  1518  1050  3472               	retlw	114	;'r'
  1519  1051  3420               	retlw	32	;' '
  1520  1052  3440               	retlw	64	;'@'
  1521  1053  346F               	retlw	111	;'o'
  1522  1054  346E               	retlw	110	;'n'
  1523  1055  3473               	retlw	115	;'s'
  1524  1056  342C               	retlw	44	;','
  1525  1057  3420               	retlw	32	;' '
  1526  1058  3469               	retlw	105	;'i'
  1527  1059  346E               	retlw	110	;'n'
  1528  105A  3420               	retlw	32	;' '
  1529  105B  3468               	retlw	104	;'h'
  1530  105C  3465               	retlw	101	;'e'
  1531  105D  3478               	retlw	120	;'x'
  1532  105E  3420               	retlw	32	;' '
  1533  105F  3466               	retlw	102	;'f'
  1534  1060  346F               	retlw	111	;'o'
  1535  1061  3472               	retlw	114	;'r'
  1536  1062  346D               	retlw	109	;'m'
  1537  1063  3461               	retlw	97	;'a'
  1538  1064  3474               	retlw	116	;'t'
  1539  1065  343A               	retlw	58	;':'
  1540  1066  3420               	retlw	32	;' '
  1541  1067  3440               	retlw	64	;'@'
  1542  1068  346F               	retlw	111	;'o'
  1543  1069  346C               	retlw	108	;'l'
  1544  106A  3468               	retlw	104	;'h'
  1545  106B  3420               	retlw	32	;' '
  1546  106C  346F               	retlw	111	;'o'
  1547  106D  3472               	retlw	114	;'r'
  1548  106E  3420               	retlw	32	;' '
  1549  106F  3440               	retlw	64	;'@'
  1550  1070  346F               	retlw	111	;'o'
  1551  1071  346E               	retlw	110	;'n'
  1552  1072  3468               	retlw	104	;'h'
  1553  1073  340A               	retlw	10
  1554  1074  3400               	retlw	0
  1555                           
  1556                           	psect	stringtext10
  1557  1075                     __pstringtext10:	
  1558  1075                     STR_22:	
  1559  1075  345B               	retlw	91	;'['
  1560  1076  3453               	retlw	83	;'S'
  1561  1077  3465               	retlw	101	;'e'
  1562  1078  346E               	retlw	110	;'n'
  1563  1079  3464               	retlw	100	;'d'
  1564  107A  3420               	retlw	32	;' '
  1565  107B  346D               	retlw	109	;'m'
  1566  107C  3465               	retlw	101	;'e'
  1567  107D  3473               	retlw	115	;'s'
  1568  107E  3473               	retlw	115	;'s'
  1569  107F  3461               	retlw	97	;'a'
  1570  1080  3467               	retlw	103	;'g'
  1571  1081  3465               	retlw	101	;'e'
  1572  1082  3420               	retlw	32	;' '
  1573  1083  3462               	retlw	98	;'b'
  1574  1084  3465               	retlw	101	;'e'
  1575  1085  3467               	retlw	103	;'g'
  1576  1086  3469               	retlw	105	;'i'
  1577  1087  346E               	retlw	110	;'n'
  1578  1088  346E               	retlw	110	;'n'
  1579  1089  3469               	retlw	105	;'i'
  1580  108A  346E               	retlw	110	;'n'
  1581  108B  3467               	retlw	103	;'g'
  1582  108C  3420               	retlw	32	;' '
  1583  108D  3477               	retlw	119	;'w'
  1584  108E  3469               	retlw	105	;'i'
  1585  108F  3474               	retlw	116	;'t'
  1586  1090  3468               	retlw	104	;'h'
  1587  1091  3420               	retlw	32	;' '
  1588  1092  3427               	retlw	39	;'''
  1589  1093  3440               	retlw	64	;'@'
  1590  1094  3427               	retlw	39	;'''
  1591  1095  3420               	retlw	32	;' '
  1592  1096  3463               	retlw	99	;'c'
  1593  1097  3468               	retlw	104	;'h'
  1594  1098  3461               	retlw	97	;'a'
  1595  1099  3472               	retlw	114	;'r'
  1596  109A  3461               	retlw	97	;'a'
  1597  109B  3463               	retlw	99	;'c'
  1598  109C  3474               	retlw	116	;'t'
  1599  109D  3465               	retlw	101	;'e'
  1600  109E  3472               	retlw	114	;'r'
  1601  109F  345D               	retlw	93	;']'
  1602  10A0  3420               	retlw	32	;' '
  1603  10A1  3440               	retlw	64	;'@'
  1604  10A2  343C               	retlw	60	;'<'
  1605  10A3  3440               	retlw	64	;'@'
  1606  10A4  346D               	retlw	109	;'m'
  1607  10A5  3465               	retlw	101	;'e'
  1608  10A6  3473               	retlw	115	;'s'
  1609  10A7  3473               	retlw	115	;'s'
  1610  10A8  3461               	retlw	97	;'a'
  1611  10A9  3467               	retlw	103	;'g'
  1612  10AA  3465               	retlw	101	;'e'
  1613  10AB  343E               	retlw	62	;'>'
  1614  10AC  340A               	retlw	10
  1615  10AD  3400               	retlw	0
  1616                           
  1617                           	psect	stringtext11
  1618  10AE                     __pstringtext11:	
  1619  10AE                     STR_13:	
  1620  10AE  345B               	retlw	91	;'['
  1621  10AF  3445               	retlw	69	;'E'
  1622  10B0  346E               	retlw	110	;'n'
  1623  10B1  3461               	retlw	97	;'a'
  1624  10B2  3462               	retlw	98	;'b'
  1625  10B3  346C               	retlw	108	;'l'
  1626  10B4  3465               	retlw	101	;'e'
  1627  10B5  3420               	retlw	32	;' '
  1628  10B6  346F               	retlw	111	;'o'
  1629  10B7  3470               	retlw	112	;'p'
  1630  10B8  3465               	retlw	101	;'e'
  1631  10B9  3472               	retlw	114	;'r'
  1632  10BA  3461               	retlw	97	;'a'
  1633  10BB  3474               	retlw	116	;'t'
  1634  10BC  3469               	retlw	105	;'i'
  1635  10BD  346F               	retlw	111	;'o'
  1636  10BE  346E               	retlw	110	;'n'
  1637  10BF  3420               	retlw	32	;' '
  1638  10C0  346D               	retlw	109	;'m'
  1639  10C1  346F               	retlw	111	;'o'
  1640  10C2  3464               	retlw	100	;'d'
  1641  10C3  3465               	retlw	101	;'e'
  1642  10C4  345D               	retlw	93	;']'
  1643  10C5  3420               	retlw	32	;' '
  1644  10C6  347B               	retlw	123	;'{'
  1645  10C7  346C               	retlw	108	;'l'
  1646  10C8  346F               	retlw	111	;'o'
  1647  10C9  346F               	retlw	111	;'o'
  1648  10CA  3470               	retlw	112	;'p'
  1649  10CB  3462               	retlw	98	;'b'
  1650  10CC  3461               	retlw	97	;'a'
  1651  10CD  3463               	retlw	99	;'c'
  1652  10CE  346B               	retlw	107	;'k'
  1653  10CF  343A               	retlw	58	;':'
  1654  10D0  3420               	retlw	32	;' '
  1655  10D1  3440               	retlw	64	;'@'
  1656  10D2  346F               	retlw	111	;'o'
  1657  10D3  346C               	retlw	108	;'l'
  1658  10D4  342C               	retlw	44	;','
  1659  10D5  3420               	retlw	32	;' '
  1660  10D6  346E               	retlw	110	;'n'
  1661  10D7  346F               	retlw	111	;'o'
  1662  10D8  3472               	retlw	114	;'r'
  1663  10D9  346D               	retlw	109	;'m'
  1664  10DA  3461               	retlw	97	;'a'
  1665  10DB  346C               	retlw	108	;'l'
  1666  10DC  343A               	retlw	58	;':'
  1667  10DD  3420               	retlw	32	;' '
  1668  10DE  3440               	retlw	64	;'@'
  1669  10DF  346F               	retlw	111	;'o'
  1670  10E0  346E               	retlw	110	;'n'
  1671  10E1  347D               	retlw	125	;'}'
  1672  10E2  340A               	retlw	10
  1673  10E3  3400               	retlw	0
  1674                           
  1675                           	psect	stringtext12
  1676  10E4                     __pstringtext12:	
  1677  10E4                     STR_11:	
  1678  10E4  345B               	retlw	91	;'['
  1679  10E5  3453               	retlw	83	;'S'
  1680  10E6  3465               	retlw	101	;'e'
  1681  10E7  3474               	retlw	116	;'t'
  1682  10E8  3420               	retlw	32	;' '
  1683  10E9  3473               	retlw	115	;'s'
  1684  10EA  3474               	retlw	116	;'t'
  1685  10EB  3461               	retlw	97	;'a'
  1686  10EC  346E               	retlw	110	;'n'
  1687  10ED  3464               	retlw	100	;'d'
  1688  10EE  3461               	retlw	97	;'a'
  1689  10EF  3472               	retlw	114	;'r'
  1690  10F0  3464               	retlw	100	;'d'
  1691  10F1  3420               	retlw	32	;' '
  1692  10F2  3469               	retlw	105	;'i'
  1693  10F3  3464               	retlw	100	;'d'
  1694  10F4  3465               	retlw	101	;'e'
  1695  10F5  346E               	retlw	110	;'n'
  1696  10F6  3474               	retlw	116	;'t'
  1697  10F7  3469               	retlw	105	;'i'
  1698  10F8  3466               	retlw	102	;'f'
  1699  10F9  3469               	retlw	105	;'i'
  1700  10FA  3465               	retlw	101	;'e'
  1701  10FB  3472               	retlw	114	;'r'
  1702  10FC  345D               	retlw	93	;']'
  1703  10FD  3420               	retlw	32	;' '
  1704  10FE  3440               	retlw	64	;'@'
  1705  10FF  3469               	retlw	105	;'i'
  1706  1100  343C               	retlw	60	;'<'
  1707  1101  3473               	retlw	115	;'s'
  1708  1102  3474               	retlw	116	;'t'
  1709  1103  3461               	retlw	97	;'a'
  1710  1104  346E               	retlw	110	;'n'
  1711  1105  3464               	retlw	100	;'d'
  1712  1106  3461               	retlw	97	;'a'
  1713  1107  3472               	retlw	114	;'r'
  1714  1108  3464               	retlw	100	;'d'
  1715  1109  3420               	retlw	32	;' '
  1716  110A  3469               	retlw	105	;'i'
  1717  110B  3464               	retlw	100	;'d'
  1718  110C  3465               	retlw	101	;'e'
  1719  110D  346E               	retlw	110	;'n'
  1720  110E  3474               	retlw	116	;'t'
  1721  110F  3469               	retlw	105	;'i'
  1722  1110  3466               	retlw	102	;'f'
  1723  1111  3469               	retlw	105	;'i'
  1724  1112  3465               	retlw	101	;'e'
  1725  1113  3472               	retlw	114	;'r'
  1726  1114  343E               	retlw	62	;'>'
  1727  1115  340A               	retlw	10
  1728  1116  3400               	retlw	0
  1729                           
  1730                           	psect	stringtext13
  1731  1117                     __pstringtext13:	
  1732  1117                     STR_10:	
  1733  1117  345B               	retlw	91	;'['
  1734  1118  3453               	retlw	83	;'S'
  1735  1119  3465               	retlw	101	;'e'
  1736  111A  3474               	retlw	116	;'t'
  1737  111B  3420               	retlw	32	;' '
  1738  111C  3453               	retlw	83	;'S'
  1739  111D  344C               	retlw	76	;'L'
  1740  111E  3443               	retlw	67	;'C'
  1741  111F  3441               	retlw	65	;'A'
  1742  1120  344E               	retlw	78	;'N'
  1743  1121  342F               	retlw	47	;'/'
  1744  1122  3445               	retlw	69	;'E'
  1745  1123  3456               	retlw	86	;'V'
  1746  1124  3441               	retlw	65	;'A'
  1747  1125  344C               	retlw	76	;'L'
  1748  1126  3420               	retlw	32	;' '
  1749  1127  346D               	retlw	109	;'m'
  1750  1128  346F               	retlw	111	;'o'
  1751  1129  3464               	retlw	100	;'d'
  1752  112A  3465               	retlw	101	;'e'
  1753  112B  345D               	retlw	93	;']'
  1754  112C  3420               	retlw	32	;' '
  1755  112D  3440               	retlw	64	;'@'
  1756  112E  344D               	retlw	77	;'M'
  1757  112F  3473               	retlw	115	;'s'
  1758  1130  343A               	retlw	58	;':'
  1759  1131  3420               	retlw	32	;' '
  1760  1132  3453               	retlw	83	;'S'
  1761  1133  344C               	retlw	76	;'L'
  1762  1134  3443               	retlw	67	;'C'
  1763  1135  3441               	retlw	65	;'A'
  1764  1136  344E               	retlw	78	;'N'
  1765  1137  342C               	retlw	44	;','
  1766  1138  3420               	retlw	32	;' '
  1767  1139  3440               	retlw	64	;'@'
  1768  113A  344D               	retlw	77	;'M'
  1769  113B  3465               	retlw	101	;'e'
  1770  113C  343A               	retlw	58	;':'
  1771  113D  3420               	retlw	32	;' '
  1772  113E  3445               	retlw	69	;'E'
  1773  113F  3456               	retlw	86	;'V'
  1774  1140  3441               	retlw	65	;'A'
  1775  1141  344C               	retlw	76	;'L'
  1776  1142  340A               	retlw	10
  1777  1143  3400               	retlw	0
  1778                           
  1779                           	psect	stringtext14
  1780  1144                     __pstringtext14:	
  1781  1144                     STR_43:	
  1782  1144  3452               	retlw	82	;'R'
  1783  1145  3458               	retlw	88	;'X'
  1784  1146  3446               	retlw	70	;'F'
  1785  1147  3425               	retlw	37	;'%'
  1786  1148  3464               	retlw	100	;'d'
  1787  1149  3420               	retlw	32	;' '
  1788  114A  3452               	retlw	82	;'R'
  1789  114B  3458               	retlw	88	;'X'
  1790  114C  3446               	retlw	70	;'F'
  1791  114D  3425               	retlw	37	;'%'
  1792  114E  3464               	retlw	100	;'d'
  1793  114F  3453               	retlw	83	;'S'
  1794  1150  3449               	retlw	73	;'I'
  1795  1151  3444               	retlw	68	;'D'
  1796  1152  3448               	retlw	72	;'H'
  1797  1153  3420               	retlw	32	;' '
  1798  1154  3452               	retlw	82	;'R'
  1799  1155  3458               	retlw	88	;'X'
  1800  1156  3446               	retlw	70	;'F'
  1801  1157  3425               	retlw	37	;'%'
  1802  1158  3464               	retlw	100	;'d'
  1803  1159  3453               	retlw	83	;'S'
  1804  115A  3449               	retlw	73	;'I'
  1805  115B  3444               	retlw	68	;'D'
  1806  115C  344C               	retlw	76	;'L'
  1807  115D  343A               	retlw	58	;':'
  1808  115E  3420               	retlw	32	;' '
  1809  115F  3425               	retlw	37	;'%'
  1810  1160  3434               	retlw	52	;'4'
  1811  1161  3464               	retlw	100	;'d'
  1812  1162  3420               	retlw	32	;' '
  1813  1163  3425               	retlw	37	;'%'
  1814  1164  3430               	retlw	48	;'0'
  1815  1165  3432               	retlw	50	;'2'
  1816  1166  3458               	retlw	88	;'X'
  1817  1167  3468               	retlw	104	;'h'
  1818  1168  3420               	retlw	32	;' '
  1819  1169  3425               	retlw	37	;'%'
  1820  116A  3430               	retlw	48	;'0'
  1821  116B  3432               	retlw	50	;'2'
  1822  116C  3458               	retlw	88	;'X'
  1823  116D  3468               	retlw	104	;'h'
  1824  116E  340A               	retlw	10
  1825  116F  3400               	retlw	0
  1826                           
  1827                           	psect	stringtext15
  1828  1170                     __pstringtext15:	
  1829  1170                     STR_42:	
  1830  1170  3452               	retlw	82	;'R'
  1831  1171  3458               	retlw	88	;'X'
  1832  1172  344D               	retlw	77	;'M'
  1833  1173  3425               	retlw	37	;'%'
  1834  1174  3464               	retlw	100	;'d'
  1835  1175  3420               	retlw	32	;' '
  1836  1176  3452               	retlw	82	;'R'
  1837  1177  3458               	retlw	88	;'X'
  1838  1178  344D               	retlw	77	;'M'
  1839  1179  3425               	retlw	37	;'%'
  1840  117A  3464               	retlw	100	;'d'
  1841  117B  3453               	retlw	83	;'S'
  1842  117C  3449               	retlw	73	;'I'
  1843  117D  3444               	retlw	68	;'D'
  1844  117E  3448               	retlw	72	;'H'
  1845  117F  3420               	retlw	32	;' '
  1846  1180  3452               	retlw	82	;'R'
  1847  1181  3458               	retlw	88	;'X'
  1848  1182  344D               	retlw	77	;'M'
  1849  1183  3425               	retlw	37	;'%'
  1850  1184  3464               	retlw	100	;'d'
  1851  1185  3453               	retlw	83	;'S'
  1852  1186  3449               	retlw	73	;'I'
  1853  1187  3444               	retlw	68	;'D'
  1854  1188  344C               	retlw	76	;'L'
  1855  1189  343A               	retlw	58	;':'
  1856  118A  3420               	retlw	32	;' '
  1857  118B  3425               	retlw	37	;'%'
  1858  118C  3434               	retlw	52	;'4'
  1859  118D  3464               	retlw	100	;'d'
  1860  118E  3420               	retlw	32	;' '
  1861  118F  3425               	retlw	37	;'%'
  1862  1190  3430               	retlw	48	;'0'
  1863  1191  3432               	retlw	50	;'2'
  1864  1192  3458               	retlw	88	;'X'
  1865  1193  3468               	retlw	104	;'h'
  1866  1194  3420               	retlw	32	;' '
  1867  1195  3425               	retlw	37	;'%'
  1868  1196  3430               	retlw	48	;'0'
  1869  1197  3432               	retlw	50	;'2'
  1870  1198  3458               	retlw	88	;'X'
  1871  1199  3468               	retlw	104	;'h'
  1872  119A  340A               	retlw	10
  1873  119B  3400               	retlw	0
  1874                           
  1875                           	psect	stringtext16
  1876  119C                     __pstringtext16:	
  1877  119C                     STR_23:	
  1878  119C  345B               	retlw	91	;'['
  1879  119D  3452               	retlw	82	;'R'
  1880  119E  3465               	retlw	101	;'e'
  1881  119F  3463               	retlw	99	;'c'
  1882  11A0  3465               	retlw	101	;'e'
  1883  11A1  3469               	retlw	105	;'i'
  1884  11A2  3476               	retlw	118	;'v'
  1885  11A3  3465               	retlw	101	;'e'
  1886  11A4  3420               	retlw	32	;' '
  1887  11A5  346D               	retlw	109	;'m'
  1888  11A6  3465               	retlw	101	;'e'
  1889  11A7  3473               	retlw	115	;'s'
  1890  11A8  3473               	retlw	115	;'s'
  1891  11A9  3461               	retlw	97	;'a'
  1892  11AA  3467               	retlw	103	;'g'
  1893  11AB  3465               	retlw	101	;'e'
  1894  11AC  345D               	retlw	93	;']'
  1895  11AD  3420               	retlw	32	;' '
  1896  11AE  343C               	retlw	60	;'<'
  1897  11AF  346D               	retlw	109	;'m'
  1898  11B0  3465               	retlw	101	;'e'
  1899  11B1  3473               	retlw	115	;'s'
  1900  11B2  3473               	retlw	115	;'s'
  1901  11B3  3461               	retlw	97	;'a'
  1902  11B4  3467               	retlw	103	;'g'
  1903  11B5  3465               	retlw	101	;'e'
  1904  11B6  343E               	retlw	62	;'>'
  1905  11B7  3420               	retlw	32	;' '
  1906  11B8  3477               	retlw	119	;'w'
  1907  11B9  3469               	retlw	105	;'i'
  1908  11BA  346C               	retlw	108	;'l'
  1909  11BB  346C               	retlw	108	;'l'
  1910  11BC  3420               	retlw	32	;' '
  1911  11BD  3462               	retlw	98	;'b'
  1912  11BE  3465               	retlw	101	;'e'
  1913  11BF  3420               	retlw	32	;' '
  1914  11C0  346F               	retlw	111	;'o'
  1915  11C1  3475               	retlw	117	;'u'
  1916  11C2  3474               	retlw	116	;'t'
  1917  11C3  3470               	retlw	112	;'p'
  1918  11C4  3475               	retlw	117	;'u'
  1919  11C5  3474               	retlw	116	;'t'
  1920  11C6  340A               	retlw	10
  1921  11C7  3400               	retlw	0
  1922                           
  1923                           	psect	stringtext17
  1924  11C8                     __pstringtext17:	
  1925  11C8                     STR_16:	
  1926  11C8  345B               	retlw	91	;'['
  1927  11C9  3453               	retlw	83	;'S'
  1928  11CA  3465               	retlw	101	;'e'
  1929  11CB  3474               	retlw	116	;'t'
  1930  11CC  3420               	retlw	32	;' '
  1931  11CD  3466               	retlw	102	;'f'
  1932  11CE  3469               	retlw	105	;'i'
  1933  11CF  346C               	retlw	108	;'l'
  1934  11D0  3474               	retlw	116	;'t'
  1935  11D1  3465               	retlw	101	;'e'
  1936  11D2  3472               	retlw	114	;'r'
  1937  11D3  345D               	retlw	93	;']'
  1938  11D4  3420               	retlw	32	;' '
  1939  11D5  3440               	retlw	64	;'@'
  1940  11D6  3466               	retlw	102	;'f'
  1941  11D7  343C               	retlw	60	;'<'
  1942  11D8  346E               	retlw	110	;'n'
  1943  11D9  343E               	retlw	62	;'>'
  1944  11DA  343C               	retlw	60	;'<'
  1945  11DB  3466               	retlw	102	;'f'
  1946  11DC  3469               	retlw	105	;'i'
  1947  11DD  346C               	retlw	108	;'l'
  1948  11DE  3474               	retlw	116	;'t'
  1949  11DF  3465               	retlw	101	;'e'
  1950  11E0  3472               	retlw	114	;'r'
  1951  11E1  3428               	retlw	40	;'('
  1952  11E2  3453               	retlw	83	;'S'
  1953  11E3  3449               	retlw	73	;'I'
  1954  11E4  3444               	retlw	68	;'D'
  1955  11E5  3431               	retlw	49	;'1'
  1956  11E6  3430               	retlw	48	;'0'
  1957  11E7  3420               	retlw	32	;' '
  1958  11E8  347E               	retlw	126	;'~'
  1959  11E9  3420               	retlw	32	;' '
  1960  11EA  3453               	retlw	83	;'S'
  1961  11EB  3449               	retlw	73	;'I'
  1962  11EC  3444               	retlw	68	;'D'
  1963  11ED  3430               	retlw	48	;'0'
  1964  11EE  3429               	retlw	41	;')'
  1965  11EF  343E               	retlw	62	;'>'
  1966  11F0  340A               	retlw	10
  1967  11F1  3400               	retlw	0
  1968                           
  1969                           	psect	stringtext18
  1970  11F2                     __pstringtext18:	
  1971  11F2                     STR_15:	
  1972  11F2  345B               	retlw	91	;'['
  1973  11F3  3453               	retlw	83	;'S'
  1974  11F4  3465               	retlw	101	;'e'
  1975  11F5  3474               	retlw	116	;'t'
  1976  11F6  3420               	retlw	32	;' '
  1977  11F7  346D               	retlw	109	;'m'
  1978  11F8  3461               	retlw	97	;'a'
  1979  11F9  3473               	retlw	115	;'s'
  1980  11FA  346B               	retlw	107	;'k'
  1981  11FB  345D               	retlw	93	;']'
  1982  11FC  3420               	retlw	32	;' '
  1983  11FD  3440               	retlw	64	;'@'
  1984  11FE  346D               	retlw	109	;'m'
  1985  11FF  343C               	retlw	60	;'<'
  1986  1200  346E               	retlw	110	;'n'
  1987  1201  343E               	retlw	62	;'>'
  1988  1202  343C               	retlw	60	;'<'
  1989  1203  346D               	retlw	109	;'m'
  1990  1204  3461               	retlw	97	;'a'
  1991  1205  3473               	retlw	115	;'s'
  1992  1206  346B               	retlw	107	;'k'
  1993  1207  3428               	retlw	40	;'('
  1994  1208  3453               	retlw	83	;'S'
  1995  1209  3449               	retlw	73	;'I'
  1996  120A  3444               	retlw	68	;'D'
  1997  120B  3431               	retlw	49	;'1'
  1998  120C  3430               	retlw	48	;'0'
  1999  120D  3420               	retlw	32	;' '
  2000  120E  347E               	retlw	126	;'~'
  2001  120F  3420               	retlw	32	;' '
  2002  1210  3453               	retlw	83	;'S'
  2003  1211  3449               	retlw	73	;'I'
  2004  1212  3444               	retlw	68	;'D'
  2005  1213  3430               	retlw	48	;'0'
  2006  1214  3429               	retlw	41	;')'
  2007  1215  343E               	retlw	62	;'>'
  2008  1216  340A               	retlw	10
  2009  1217  3400               	retlw	0
  2010                           
  2011                           	psect	stringtext19
  2012  1218                     __pstringtext19:	
  2013  1218                     STR_18:	
  2014  1218  345B               	retlw	91	;'['
  2015  1219  3441               	retlw	65	;'A'
  2016  121A  3462               	retlw	98	;'b'
  2017  121B  346F               	retlw	111	;'o'
  2018  121C  3472               	retlw	114	;'r'
  2019  121D  3474               	retlw	116	;'t'
  2020  121E  3420               	retlw	32	;' '
  2021  121F  3461               	retlw	97	;'a'
  2022  1220  346C               	retlw	108	;'l'
  2023  1221  346C               	retlw	108	;'l'
  2024  1222  3420               	retlw	32	;' '
  2025  1223  3470               	retlw	112	;'p'
  2026  1224  3465               	retlw	101	;'e'
  2027  1225  346E               	retlw	110	;'n'
  2028  1226  3464               	retlw	100	;'d'
  2029  1227  3469               	retlw	105	;'i'
  2030  1228  346E               	retlw	110	;'n'
  2031  1229  3467               	retlw	103	;'g'
  2032  122A  3420               	retlw	32	;' '
  2033  122B  3474               	retlw	116	;'t'
  2034  122C  3472               	retlw	114	;'r'
  2035  122D  3461               	retlw	97	;'a'
  2036  122E  346E               	retlw	110	;'n'
  2037  122F  3473               	retlw	115	;'s'
  2038  1230  346D               	retlw	109	;'m'
  2039  1231  3469               	retlw	105	;'i'
  2040  1232  3473               	retlw	115	;'s'
  2041  1233  3473               	retlw	115	;'s'
  2042  1234  3469               	retlw	105	;'i'
  2043  1235  346F               	retlw	111	;'o'
  2044  1236  346E               	retlw	110	;'n'
  2045  1237  3473               	retlw	115	;'s'
  2046  1238  345D               	retlw	93	;']'
  2047  1239  3420               	retlw	32	;' '
  2048  123A  3440               	retlw	64	;'@'
  2049  123B  3461               	retlw	97	;'a'
  2050  123C  340A               	retlw	10
  2051  123D  3400               	retlw	0
  2052                           
  2053                           	psect	stringtext20
  2054  123E                     __pstringtext20:	
  2055  123E                     STR_8:	
  2056  123E  342F               	retlw	47	;'/'
  2057  123F  342F               	retlw	47	;'/'
  2058  1240  342F               	retlw	47	;'/'
  2059  1241  3420               	retlw	32	;' '
  2060  1242  3455               	retlw	85	;'U'
  2061  1243  3441               	retlw	65	;'A'
  2062  1244  3452               	retlw	82	;'R'
  2063  1245  3454               	retlw	84	;'T'
  2064  1246  3432               	retlw	50	;'2'
  2065  1247  3443               	retlw	67	;'C'
  2066  1248  3441               	retlw	65	;'A'
  2067  1249  344E               	retlw	78	;'N'
  2068  124A  3420               	retlw	32	;' '
  2069  124B  3448               	retlw	72	;'H'
  2070  124C  3445               	retlw	69	;'E'
  2071  124D  344C               	retlw	76	;'L'
  2072  124E  3450               	retlw	80	;'P'
  2073  124F  3420               	retlw	32	;' '
  2074  1250  3428               	retlw	40	;'('
  2075  1251  3476               	retlw	118	;'v'
  2076  1252  3465               	retlw	101	;'e'
  2077  1253  3472               	retlw	114	;'r'
  2078  1254  3473               	retlw	115	;'s'
  2079  1255  3469               	retlw	105	;'i'
  2080  1256  346F               	retlw	111	;'o'
  2081  1257  346E               	retlw	110	;'n'
  2082  1258  3420               	retlw	32	;' '
  2083  1259  3425               	retlw	37	;'%'
  2084  125A  3473               	retlw	115	;'s'
  2085  125B  3429               	retlw	41	;')'
  2086  125C  3420               	retlw	32	;' '
  2087  125D  342F               	retlw	47	;'/'
  2088  125E  342F               	retlw	47	;'/'
  2089  125F  342F               	retlw	47	;'/'
  2090  1260  340A               	retlw	10
  2091  1261  3400               	retlw	0
  2092                           
  2093                           	psect	stringtext21
  2094  1262                     __pstringtext21:	
  2095  1262                     STR_19:	
  2096  1262  345B               	retlw	91	;'['
  2097  1263  3444               	retlw	68	;'D'
  2098  1264  3475               	retlw	117	;'u'
  2099  1265  346D               	retlw	109	;'m'
  2100  1266  3470               	retlw	112	;'p'
  2101  1267  3420               	retlw	32	;' '
  2102  1268  346D               	retlw	109	;'m'
  2103  1269  3461               	retlw	97	;'a'
  2104  126A  3473               	retlw	115	;'s'
  2105  126B  346B               	retlw	107	;'k'
  2106  126C  3473               	retlw	115	;'s'
  2107  126D  3420               	retlw	32	;' '
  2108  126E  3461               	retlw	97	;'a'
  2109  126F  346E               	retlw	110	;'n'
  2110  1270  3464               	retlw	100	;'d'
  2111  1271  3420               	retlw	32	;' '
  2112  1272  3466               	retlw	102	;'f'
  2113  1273  3469               	retlw	105	;'i'
  2114  1274  346C               	retlw	108	;'l'
  2115  1275  3474               	retlw	116	;'t'
  2116  1276  3465               	retlw	101	;'e'
  2117  1277  3472               	retlw	114	;'r'
  2118  1278  3473               	retlw	115	;'s'
  2119  1279  345D               	retlw	93	;']'
  2120  127A  3420               	retlw	32	;' '
  2121  127B  3440               	retlw	64	;'@'
  2122  127C  3446               	retlw	70	;'F'
  2123  127D  340A               	retlw	10
  2124  127E  3400               	retlw	0
  2125                           
  2126                           	psect	stringtext22
  2127  127F                     __pstringtext22:	
  2128  127F                     STR_21:	
  2129  127F  345B               	retlw	91	;'['
  2130  1280  3453               	retlw	83	;'S'
  2131  1281  3465               	retlw	101	;'e'
  2132  1282  346E               	retlw	110	;'n'
  2133  1283  3464               	retlw	100	;'d'
  2134  1284  3420               	retlw	32	;' '
  2135  1285  346D               	retlw	109	;'m'
  2136  1286  3465               	retlw	101	;'e'
  2137  1287  3473               	retlw	115	;'s'
  2138  1288  3473               	retlw	115	;'s'
  2139  1289  3461               	retlw	97	;'a'
  2140  128A  3467               	retlw	103	;'g'
  2141  128B  3465               	retlw	101	;'e'
  2142  128C  345D               	retlw	93	;']'
  2143  128D  3420               	retlw	32	;' '
  2144  128E  343C               	retlw	60	;'<'
  2145  128F  346D               	retlw	109	;'m'
  2146  1290  3465               	retlw	101	;'e'
  2147  1291  3473               	retlw	115	;'s'
  2148  1292  3473               	retlw	115	;'s'
  2149  1293  3461               	retlw	97	;'a'
  2150  1294  3467               	retlw	103	;'g'
  2151  1295  3465               	retlw	101	;'e'
  2152  1296  343E               	retlw	62	;'>'
  2153  1297  340A               	retlw	10
  2154  1298  3400               	retlw	0
  2155                           
  2156                           	psect	stringtext23
  2157  1299                     __pstringtext23:	
  2158  1299                     STR_17:	
  2159  1299  345B               	retlw	91	;'['
  2160  129A  3453               	retlw	83	;'S'
  2161  129B  3465               	retlw	101	;'e'
  2162  129C  3474               	retlw	116	;'t'
  2163  129D  3420               	retlw	32	;' '
  2164  129E  3462               	retlw	98	;'b'
  2165  129F  3461               	retlw	97	;'a'
  2166  12A0  3475               	retlw	117	;'u'
  2167  12A1  3464               	retlw	100	;'d'
  2168  12A2  3420               	retlw	32	;' '
  2169  12A3  3472               	retlw	114	;'r'
  2170  12A4  3461               	retlw	97	;'a'
  2171  12A5  3474               	retlw	116	;'t'
  2172  12A6  3465               	retlw	101	;'e'
  2173  12A7  345D               	retlw	93	;']'
  2174  12A8  3420               	retlw	32	;' '
  2175  12A9  3440               	retlw	64	;'@'
  2176  12AA  3462               	retlw	98	;'b'
  2177  12AB  343C               	retlw	60	;'<'
  2178  12AC  3462               	retlw	98	;'b'
  2179  12AD  3470               	retlw	112	;'p'
  2180  12AE  3472               	retlw	114	;'r'
  2181  12AF  343E               	retlw	62	;'>'
  2182  12B0  340A               	retlw	10
  2183  12B1  3400               	retlw	0
  2184                           
  2185                           	psect	stringtext24
  2186  12B2                     __pstringtext24:	
  2187  12B2                     STR_27:	
  2188  12B2  3466               	retlw	102	;'f'
  2189  12B3  3469               	retlw	105	;'i'
  2190  12B4  346C               	retlw	108	;'l'
  2191  12B5  3474               	retlw	116	;'t'
  2192  12B6  3465               	retlw	101	;'e'
  2193  12B7  3472               	retlw	114	;'r'
  2194  12B8  3428               	retlw	40	;'('
  2195  12B9  3425               	retlw	37	;'%'
  2196  12BA  3464               	retlw	100	;'d'
  2197  12BB  3429               	retlw	41	;')'
  2198  12BC  343A               	retlw	58	;':'
  2199  12BD  3420               	retlw	32	;' '
  2200  12BE  3425               	retlw	37	;'%'
  2201  12BF  3430               	retlw	48	;'0'
  2202  12C0  3432               	retlw	50	;'2'
  2203  12C1  3478               	retlw	120	;'x'
  2204  12C2  3420               	retlw	32	;' '
  2205  12C3  3425               	retlw	37	;'%'
  2206  12C4  3430               	retlw	48	;'0'
  2207  12C5  3432               	retlw	50	;'2'
  2208  12C6  3478               	retlw	120	;'x'
  2209  12C7  340A               	retlw	10
  2210  12C8  3400               	retlw	0
  2211                           
  2212                           	psect	stringtext25
  2213  12C9                     __pstringtext25:	
  2214  12C9                     STR_24:	
  2215  12C9  345B               	retlw	91	;'['
  2216  12CA  3453               	retlw	83	;'S'
  2217  12CB  3468               	retlw	104	;'h'
  2218  12CC  346F               	retlw	111	;'o'
  2219  12CD  3477               	retlw	119	;'w'
  2220  12CE  3420               	retlw	32	;' '
  2221  12CF  3474               	retlw	116	;'t'
  2222  12D0  3468               	retlw	104	;'h'
  2223  12D1  3469               	retlw	105	;'i'
  2224  12D2  3473               	retlw	115	;'s'
  2225  12D3  3420               	retlw	32	;' '
  2226  12D4  3468               	retlw	104	;'h'
  2227  12D5  3465               	retlw	101	;'e'
  2228  12D6  346C               	retlw	108	;'l'
  2229  12D7  3470               	retlw	112	;'p'
  2230  12D8  345D               	retlw	93	;']'
  2231  12D9  343A               	retlw	58	;':'
  2232  12DA  3420               	retlw	32	;' '
  2233  12DB  3440               	retlw	64	;'@'
  2234  12DC  3468               	retlw	104	;'h'
  2235  12DD  340A               	retlw	10
  2236  12DE  3400               	retlw	0
  2237                           
  2238                           	psect	stringtext26
  2239  12DF                     __pstringtext26:	
  2240  12DF                     STR_26:	
  2241  12DF  346D               	retlw	109	;'m'
  2242  12E0  3461               	retlw	97	;'a'
  2243  12E1  3473               	retlw	115	;'s'
  2244  12E2  346B               	retlw	107	;'k'
  2245  12E3  3428               	retlw	40	;'('
  2246  12E4  3425               	retlw	37	;'%'
  2247  12E5  3464               	retlw	100	;'d'
  2248  12E6  3429               	retlw	41	;')'
  2249  12E7  343A               	retlw	58	;':'
  2250  12E8  3420               	retlw	32	;' '
  2251  12E9  3425               	retlw	37	;'%'
  2252  12EA  3430               	retlw	48	;'0'
  2253  12EB  3432               	retlw	50	;'2'
  2254  12EC  3478               	retlw	120	;'x'
  2255  12ED  3420               	retlw	32	;' '
  2256  12EE  3425               	retlw	37	;'%'
  2257  12EF  3430               	retlw	48	;'0'
  2258  12F0  3432               	retlw	50	;'2'
  2259  12F1  3478               	retlw	120	;'x'
  2260  12F2  340A               	retlw	10
  2261  12F3  3400               	retlw	0
  2262                           
  2263                           	psect	stringtext27
  2264  12F4                     __pstringtext27:	
  2265  12F4                     STR_20:	
  2266  12F4  345B               	retlw	91	;'['
  2267  12F5  3444               	retlw	68	;'D'
  2268  12F6  3475               	retlw	117	;'u'
  2269  12F7  346D               	retlw	109	;'m'
  2270  12F8  3470               	retlw	112	;'p'
  2271  12F9  3420               	retlw	32	;' '
  2272  12FA  3472               	retlw	114	;'r'
  2273  12FB  3465               	retlw	101	;'e'
  2274  12FC  3467               	retlw	103	;'g'
  2275  12FD  3469               	retlw	105	;'i'
  2276  12FE  3473               	retlw	115	;'s'
  2277  12FF  3474               	retlw	116	;'t'
  2278  1300  3465               	retlw	101	;'e'
  2279  1301  3472               	retlw	114	;'r'
  2280  1302  3473               	retlw	115	;'s'
  2281  1303  345D               	retlw	93	;']'
  2282  1304  3420               	retlw	32	;' '
  2283  1305  3440               	retlw	64	;'@'
  2284  1306  3464               	retlw	100	;'d'
  2285  1307  340A               	retlw	10
  2286  1308  3400               	retlw	0
  2287                           
  2288                           	psect	stringtext28
  2289  1309                     __pstringtext28:	
  2290  1309                     STR_9:	
  2291  1309  3430               	retlw	48	;'0'
  2292  130A  342E               	retlw	46	;'.'
  2293  130B  3431               	retlw	49	;'1'
  2294  130C  3432               	retlw	50	;'2'
  2295  130D  3420               	retlw	32	;' '
  2296  130E  3420               	retlw	32	;' '
  2297  130F  344D               	retlw	77	;'M'
  2298  1310  3461               	retlw	97	;'a'
  2299  1311  3472               	retlw	114	;'r'
  2300  1312  3463               	retlw	99	;'c'
  2301  1313  3468               	retlw	104	;'h'
  2302  1314  3420               	retlw	32	;' '
  2303  1315  3432               	retlw	50	;'2'
  2304  1316  3432               	retlw	50	;'2'
  2305  1317  342C               	retlw	44	;','
  2306  1318  3420               	retlw	32	;' '
  2307  1319  3432               	retlw	50	;'2'
  2308  131A  3430               	retlw	48	;'0'
  2309  131B  3431               	retlw	49	;'1'
  2310  131C  3438               	retlw	56	;'8'
  2311  131D  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext29
  2314  131E                     __pstringtext29:	
  2315  131E                     STR_35:	
  2316  131E  3443               	retlw	67	;'C'
  2317  131F  346F               	retlw	111	;'o'
  2318  1320  3470               	retlw	112	;'p'
  2319  1321  3479               	retlw	121	;'y'
  2320  1322  3469               	retlw	105	;'i'
  2321  1323  346E               	retlw	110	;'n'
  2322  1324  3467               	retlw	103	;'g'
  2323  1325  3420               	retlw	32	;' '
  2324  1326  3462               	retlw	98	;'b'
  2325  1327  3475               	retlw	117	;'u'
  2326  1328  3466               	retlw	102	;'f'
  2327  1329  3466               	retlw	102	;'f'
  2328  132A  3465               	retlw	101	;'e'
  2329  132B  3472               	retlw	114	;'r'
  2330  132C  343A               	retlw	58	;':'
  2331  132D  3420               	retlw	32	;' '
  2332  132E  3425               	retlw	37	;'%'
  2333  132F  3463               	retlw	99	;'c'
  2334  1330  340A               	retlw	10
  2335  1331  3400               	retlw	0
  2336                           
  2337                           	psect	stringtext30
  2338  1332                     __pstringtext30:	
  2339  1332                     STR_38:	
  2340  1332  344D               	retlw	77	;'M'
  2341  1333  3465               	retlw	101	;'e'
  2342  1334  3473               	retlw	115	;'s'
  2343  1335  3473               	retlw	115	;'s'
  2344  1336  3461               	retlw	97	;'a'
  2345  1337  3467               	retlw	103	;'g'
  2346  1338  3465               	retlw	101	;'e'
  2347  1339  3420               	retlw	32	;' '
  2348  133A  3473               	retlw	115	;'s'
  2349  133B  3465               	retlw	101	;'e'
  2350  133C  346E               	retlw	110	;'n'
  2351  133D  3474               	retlw	116	;'t'
  2352  133E  343A               	retlw	58	;':'
  2353  133F  3420               	retlw	32	;' '
  2354  1340  3425               	retlw	37	;'%'
  2355  1341  3473               	retlw	115	;'s'
  2356  1342  340A               	retlw	10
  2357  1343  3400               	retlw	0
  2358                           
  2359                           	psect	stringtext31
  2360  1344                     __pstringtext31:	
  2361  1344                     STR_64:	
  2362  1344  3430               	retlw	48	;'0'
  2363  1345  3431               	retlw	49	;'1'
  2364  1346  3432               	retlw	50	;'2'
  2365  1347  3433               	retlw	51	;'3'
  2366  1348  3434               	retlw	52	;'4'
  2367  1349  3435               	retlw	53	;'5'
  2368  134A  3436               	retlw	54	;'6'
  2369  134B  3437               	retlw	55	;'7'
  2370  134C  3438               	retlw	56	;'8'
  2371  134D  3439               	retlw	57	;'9'
  2372  134E  3441               	retlw	65	;'A'
  2373  134F  3442               	retlw	66	;'B'
  2374  1350  3443               	retlw	67	;'C'
  2375  1351  3444               	retlw	68	;'D'
  2376  1352  3445               	retlw	69	;'E'
  2377  1353  3446               	retlw	70	;'F'
  2378  1354  3400               	retlw	0
  2379                           
  2380                           	psect	stringtext32
  2381  1355                     __pstringtext32:	
  2382  1355                     STR_65:	
  2383  1355  3430               	retlw	48	;'0'
  2384  1356  3431               	retlw	49	;'1'
  2385  1357  3432               	retlw	50	;'2'
  2386  1358  3433               	retlw	51	;'3'
  2387  1359  3434               	retlw	52	;'4'
  2388  135A  3435               	retlw	53	;'5'
  2389  135B  3436               	retlw	54	;'6'
  2390  135C  3437               	retlw	55	;'7'
  2391  135D  3438               	retlw	56	;'8'
  2392  135E  3439               	retlw	57	;'9'
  2393  135F  3461               	retlw	97	;'a'
  2394  1360  3462               	retlw	98	;'b'
  2395  1361  3463               	retlw	99	;'c'
  2396  1362  3464               	retlw	100	;'d'
  2397  1363  3465               	retlw	101	;'e'
  2398  1364  3466               	retlw	102	;'f'
  2399  1365  3400               	retlw	0
  2400                           
  2401                           	psect	stringtext33
  2402  1366                     __pstringtext33:	
  2403  1366                     STR_28:	
  2404  1366  3452               	retlw	82	;'R'
  2405  1367  3458               	retlw	88	;'X'
  2406  1368  3442               	retlw	66	;'B'
  2407  1369  3425               	retlw	37	;'%'
  2408  136A  3464               	retlw	100	;'d'
  2409  136B  3453               	retlw	83	;'S'
  2410  136C  3449               	retlw	73	;'I'
  2411  136D  3444               	retlw	68	;'D'
  2412  136E  3448               	retlw	72	;'H'
  2413  136F  343A               	retlw	58	;':'
  2414  1370  3420               	retlw	32	;' '
  2415  1371  3425               	retlw	37	;'%'
  2416  1372  3430               	retlw	48	;'0'
  2417  1373  3432               	retlw	50	;'2'
  2418  1374  3478               	retlw	120	;'x'
  2419  1375  340A               	retlw	10
  2420  1376  3400               	retlw	0
  2421                           
  2422                           	psect	stringtext34
  2423  1377                     __pstringtext34:	
  2424  1377                     STR_36:	
  2425  1377  3454               	retlw	84	;'T'
  2426  1378  3458               	retlw	88	;'X'
  2427  1379  3442               	retlw	66	;'B'
  2428  137A  3425               	retlw	37	;'%'
  2429  137B  3464               	retlw	100	;'d'
  2430  137C  3453               	retlw	83	;'S'
  2431  137D  3449               	retlw	73	;'I'
  2432  137E  3444               	retlw	68	;'D'
  2433  137F  3448               	retlw	72	;'H'
  2434  1380  343A               	retlw	58	;':'
  2435  1381  3420               	retlw	32	;' '
  2436  1382  3425               	retlw	37	;'%'
  2437  1383  3430               	retlw	48	;'0'
  2438  1384  3432               	retlw	50	;'2'
  2439  1385  3478               	retlw	120	;'x'
  2440  1386  340A               	retlw	10
  2441  1387  3400               	retlw	0
  2442                           
  2443                           	psect	stringtext35
  2444  1388                     __pstringtext35:	
  2445  1388                     STR_29:	
  2446  1388  3452               	retlw	82	;'R'
  2447  1389  3458               	retlw	88	;'X'
  2448  138A  3442               	retlw	66	;'B'
  2449  138B  3425               	retlw	37	;'%'
  2450  138C  3464               	retlw	100	;'d'
  2451  138D  3453               	retlw	83	;'S'
  2452  138E  3449               	retlw	73	;'I'
  2453  138F  3444               	retlw	68	;'D'
  2454  1390  344C               	retlw	76	;'L'
  2455  1391  343A               	retlw	58	;':'
  2456  1392  3420               	retlw	32	;' '
  2457  1393  3425               	retlw	37	;'%'
  2458  1394  3430               	retlw	48	;'0'
  2459  1395  3432               	retlw	50	;'2'
  2460  1396  3478               	retlw	120	;'x'
  2461  1397  340A               	retlw	10
  2462  1398  3400               	retlw	0
  2463                           
  2464                           	psect	stringtext36
  2465  1399                     __pstringtext36:	
  2466  1399                     STR_37:	
  2467  1399  3454               	retlw	84	;'T'
  2468  139A  3458               	retlw	88	;'X'
  2469  139B  3442               	retlw	66	;'B'
  2470  139C  3425               	retlw	37	;'%'
  2471  139D  3464               	retlw	100	;'d'
  2472  139E  3453               	retlw	83	;'S'
  2473  139F  3449               	retlw	73	;'I'
  2474  13A0  3444               	retlw	68	;'D'
  2475  13A1  344C               	retlw	76	;'L'
  2476  13A2  343A               	retlw	58	;':'
  2477  13A3  3420               	retlw	32	;' '
  2478  13A4  3425               	retlw	37	;'%'
  2479  13A5  3430               	retlw	48	;'0'
  2480  13A6  3432               	retlw	50	;'2'
  2481  13A7  3478               	retlw	120	;'x'
  2482  13A8  340A               	retlw	10
  2483  13A9  3400               	retlw	0
  2484                           
  2485                           	psect	stringtext37
  2486  13AA                     __pstringtext37:	
  2487  13AA                     STR_30:	
  2488  13AA  3452               	retlw	82	;'R'
  2489  13AB  3458               	retlw	88	;'X'
  2490  13AC  3442               	retlw	66	;'B'
  2491  13AD  3425               	retlw	37	;'%'
  2492  13AE  3464               	retlw	100	;'d'
  2493  13AF  3444               	retlw	68	;'D'
  2494  13B0  344C               	retlw	76	;'L'
  2495  13B1  3443               	retlw	67	;'C'
  2496  13B2  343A               	retlw	58	;':'
  2497  13B3  3420               	retlw	32	;' '
  2498  13B4  3425               	retlw	37	;'%'
  2499  13B5  3430               	retlw	48	;'0'
  2500  13B6  3432               	retlw	50	;'2'
  2501  13B7  3478               	retlw	120	;'x'
  2502  13B8  340A               	retlw	10
  2503  13B9  3400               	retlw	0
  2504                           
  2505                           	psect	stringtext38
  2506  13BA                     __pstringtext38:	
  2507  13BA                     STR_57:	
  2508  13BA  3452               	retlw	82	;'R'
  2509  13BB  3458               	retlw	88	;'X'
  2510  13BC  3442               	retlw	66	;'B'
  2511  13BD  3430               	retlw	48	;'0'
  2512  13BE  3443               	retlw	67	;'C'
  2513  13BF  3454               	retlw	84	;'T'
  2514  13C0  3452               	retlw	82	;'R'
  2515  13C1  344C               	retlw	76	;'L'
  2516  13C2  343A               	retlw	58	;':'
  2517  13C3  3420               	retlw	32	;' '
  2518  13C4  3425               	retlw	37	;'%'
  2519  13C5  3430               	retlw	48	;'0'
  2520  13C6  3432               	retlw	50	;'2'
  2521  13C7  3478               	retlw	120	;'x'
  2522  13C8  340A               	retlw	10
  2523  13C9  3400               	retlw	0
  2524                           
  2525                           	psect	stringtext39
  2526  13CA                     __pstringtext39:	
  2527  13CA                     STR_53:	
  2528  13CA  3454               	retlw	84	;'T'
  2529  13CB  3458               	retlw	88	;'X'
  2530  13CC  3442               	retlw	66	;'B'
  2531  13CD  3430               	retlw	48	;'0'
  2532  13CE  3443               	retlw	67	;'C'
  2533  13CF  3454               	retlw	84	;'T'
  2534  13D0  3452               	retlw	82	;'R'
  2535  13D1  344C               	retlw	76	;'L'
  2536  13D2  343A               	retlw	58	;':'
  2537  13D3  3420               	retlw	32	;' '
  2538  13D4  3425               	retlw	37	;'%'
  2539  13D5  3430               	retlw	48	;'0'
  2540  13D6  3432               	retlw	50	;'2'
  2541  13D7  3478               	retlw	120	;'x'
  2542  13D8  340A               	retlw	10
  2543  13D9  3400               	retlw	0
  2544                           
  2545                           	psect	stringtext40
  2546  13DA                     __pstringtext40:	
  2547  13DA                     STR_58:	
  2548  13DA  3452               	retlw	82	;'R'
  2549  13DB  3458               	retlw	88	;'X'
  2550  13DC  3442               	retlw	66	;'B'
  2551  13DD  3431               	retlw	49	;'1'
  2552  13DE  3443               	retlw	67	;'C'
  2553  13DF  3454               	retlw	84	;'T'
  2554  13E0  3452               	retlw	82	;'R'
  2555  13E1  344C               	retlw	76	;'L'
  2556  13E2  343A               	retlw	58	;':'
  2557  13E3  3420               	retlw	32	;' '
  2558  13E4  3425               	retlw	37	;'%'
  2559  13E5  3430               	retlw	48	;'0'
  2560  13E6  3432               	retlw	50	;'2'
  2561  13E7  3478               	retlw	120	;'x'
  2562  13E8  340A               	retlw	10
  2563  13E9  3400               	retlw	0
  2564                           
  2565                           	psect	stringtext41
  2566  13EA                     __pstringtext41:	
  2567  13EA                     STR_54:	
  2568  13EA  3454               	retlw	84	;'T'
  2569  13EB  3458               	retlw	88	;'X'
  2570  13EC  3442               	retlw	66	;'B'
  2571  13ED  3431               	retlw	49	;'1'
  2572  13EE  3443               	retlw	67	;'C'
  2573  13EF  3454               	retlw	84	;'T'
  2574  13F0  3452               	retlw	82	;'R'
  2575  13F1  344C               	retlw	76	;'L'
  2576  13F2  343A               	retlw	58	;':'
  2577  13F3  3420               	retlw	32	;' '
  2578  13F4  3425               	retlw	37	;'%'
  2579  13F5  3430               	retlw	48	;'0'
  2580  13F6  3432               	retlw	50	;'2'
  2581  13F7  3478               	retlw	120	;'x'
  2582  13F8  340A               	retlw	10
  2583  13F9  3400               	retlw	0
  2584                           
  2585                           	psect	stringtext42
  2586  13FA                     __pstringtext42:	
  2587  13FA                     STR_55:	
  2588  13FA  3454               	retlw	84	;'T'
  2589  13FB  3458               	retlw	88	;'X'
  2590  13FC  3442               	retlw	66	;'B'
  2591  13FD  3432               	retlw	50	;'2'
  2592  13FE  3443               	retlw	67	;'C'
  2593  13FF  3454               	retlw	84	;'T'
  2594  1400  3452               	retlw	82	;'R'
  2595  1401  344C               	retlw	76	;'L'
  2596  1402  343A               	retlw	58	;':'
  2597  1403  3420               	retlw	32	;' '
  2598  1404  3425               	retlw	37	;'%'
  2599  1405  3430               	retlw	48	;'0'
  2600  1406  3432               	retlw	50	;'2'
  2601  1407  3478               	retlw	120	;'x'
  2602  1408  340A               	retlw	10
  2603  1409  3400               	retlw	0
  2604                           
  2605                           	psect	stringtext43
  2606  140A                     __pstringtext43:	
  2607  140A                     STR_31:	
  2608  140A  3452               	retlw	82	;'R'
  2609  140B  3458               	retlw	88	;'X'
  2610  140C  3442               	retlw	66	;'B'
  2611  140D  3425               	retlw	37	;'%'
  2612  140E  3464               	retlw	100	;'d'
  2613  140F  3444               	retlw	68	;'D'
  2614  1410  3430               	retlw	48	;'0'
  2615  1411  343A               	retlw	58	;':'
  2616  1412  3420               	retlw	32	;' '
  2617  1413  3425               	retlw	37	;'%'
  2618  1414  3430               	retlw	48	;'0'
  2619  1415  3432               	retlw	50	;'2'
  2620  1416  3478               	retlw	120	;'x'
  2621  1417  340A               	retlw	10
  2622  1418  3400               	retlw	0
  2623                           
  2624                           	psect	stringtext44
  2625  1419                     __pstringtext44:	
  2626  1419                     STR_60:	
  2627  1419  3443               	retlw	67	;'C'
  2628  141A  3441               	retlw	65	;'A'
  2629  141B  344E               	retlw	78	;'N'
  2630  141C  3443               	retlw	67	;'C'
  2631  141D  3454               	retlw	84	;'T'
  2632  141E  3452               	retlw	82	;'R'
  2633  141F  344C               	retlw	76	;'L'
  2634  1420  343A               	retlw	58	;':'
  2635  1421  3420               	retlw	32	;' '
  2636  1422  3425               	retlw	37	;'%'
  2637  1423  3430               	retlw	48	;'0'
  2638  1424  3432               	retlw	50	;'2'
  2639  1425  3478               	retlw	120	;'x'
  2640  1426  340A               	retlw	10
  2641  1427  3400               	retlw	0
  2642                           
  2643                           	psect	stringtext45
  2644  1428                     __pstringtext45:	
  2645  1428                     STR_25:	
  2646  1428  3443               	retlw	67	;'C'
  2647  1429  3441               	retlw	65	;'A'
  2648  142A  344E               	retlw	78	;'N'
  2649  142B  3453               	retlw	83	;'S'
  2650  142C  3454               	retlw	84	;'T'
  2651  142D  3441               	retlw	65	;'A'
  2652  142E  3454               	retlw	84	;'T'
  2653  142F  343A               	retlw	58	;':'
  2654  1430  3420               	retlw	32	;' '
  2655  1431  3425               	retlw	37	;'%'
  2656  1432  3430               	retlw	48	;'0'
  2657  1433  3432               	retlw	50	;'2'
  2658  1434  3478               	retlw	120	;'x'
  2659  1435  340A               	retlw	10
  2660  1436  3400               	retlw	0
  2661                           
  2662                           	psect	stringtext46
  2663  1437                     __pstringtext46:	
  2664  1437                     STR_34:	
  2665  1437  3454               	retlw	84	;'T'
  2666  1438  3458               	retlw	88	;'X'
  2667  1439  3442               	retlw	66	;'B'
  2668  143A  3430               	retlw	48	;'0'
  2669  143B  3420               	retlw	32	;' '
  2670  143C  3469               	retlw	105	;'i'
  2671  143D  3473               	retlw	115	;'s'
  2672  143E  3420               	retlw	32	;' '
  2673  143F  3469               	retlw	105	;'i'
  2674  1440  3464               	retlw	100	;'d'
  2675  1441  346C               	retlw	108	;'l'
  2676  1442  3465               	retlw	101	;'e'
  2677  1443  340A               	retlw	10
  2678  1444  3400               	retlw	0
  2679                           
  2680                           	psect	stringtext47
  2681  1445                     __pstringtext47:	
  2682  1445                     STR_33:	
  2683  1445  3454               	retlw	84	;'T'
  2684  1446  3458               	retlw	88	;'X'
  2685  1447  3442               	retlw	66	;'B'
  2686  1448  3431               	retlw	49	;'1'
  2687  1449  3420               	retlw	32	;' '
  2688  144A  3469               	retlw	105	;'i'
  2689  144B  3473               	retlw	115	;'s'
  2690  144C  3420               	retlw	32	;' '
  2691  144D  3469               	retlw	105	;'i'
  2692  144E  3464               	retlw	100	;'d'
  2693  144F  346C               	retlw	108	;'l'
  2694  1450  3465               	retlw	101	;'e'
  2695  1451  340A               	retlw	10
  2696  1452  3400               	retlw	0
  2697                           
  2698                           	psect	stringtext48
  2699  1453                     __pstringtext48:	
  2700  1453                     STR_32:	
  2701  1453  3454               	retlw	84	;'T'
  2702  1454  3458               	retlw	88	;'X'
  2703  1455  3442               	retlw	66	;'B'
  2704  1456  3432               	retlw	50	;'2'
  2705  1457  3420               	retlw	32	;' '
  2706  1458  3469               	retlw	105	;'i'
  2707  1459  3473               	retlw	115	;'s'
  2708  145A  3420               	retlw	32	;' '
  2709  145B  3469               	retlw	105	;'i'
  2710  145C  3464               	retlw	100	;'d'
  2711  145D  346C               	retlw	108	;'l'
  2712  145E  3465               	retlw	101	;'e'
  2713  145F  340A               	retlw	10
  2714  1460  3400               	retlw	0
  2715                           
  2716                           	psect	stringtext49
  2717  1461                     __pstringtext49:	
  2718  1461                     STR_40:	
  2719  1461  3452               	retlw	82	;'R'
  2720  1462  3458               	retlw	88	;'X'
  2721  1463  3430               	retlw	48	;'0'
  2722  1464  3449               	retlw	73	;'I'
  2723  1465  3446               	retlw	70	;'F'
  2724  1466  3420               	retlw	32	;' '
  2725  1467  3469               	retlw	105	;'i'
  2726  1468  3473               	retlw	115	;'s'
  2727  1469  3420               	retlw	32	;' '
  2728  146A  346F               	retlw	111	;'o'
  2729  146B  346E               	retlw	110	;'n'
  2730  146C  340A               	retlw	10
  2731  146D  3400               	retlw	0
  2732                           
  2733                           	psect	stringtext50
  2734  146E                     __pstringtext50:	
  2735  146E                     STR_39:	
  2736  146E  3452               	retlw	82	;'R'
  2737  146F  3458               	retlw	88	;'X'
  2738  1470  3431               	retlw	49	;'1'
  2739  1471  3449               	retlw	73	;'I'
  2740  1472  3446               	retlw	70	;'F'
  2741  1473  3420               	retlw	32	;' '
  2742  1474  3469               	retlw	105	;'i'
  2743  1475  3473               	retlw	115	;'s'
  2744  1476  3420               	retlw	32	;' '
  2745  1477  346F               	retlw	111	;'o'
  2746  1478  346E               	retlw	110	;'n'
  2747  1479  340A               	retlw	10
  2748  147A  3400               	retlw	0
  2749                           
  2750                           	psect	stringtext51
  2751  147B                     __pstringtext51:	
  2752  147B                     STR_49:	
  2753  147B  3443               	retlw	67	;'C'
  2754  147C  344E               	retlw	78	;'N'
  2755  147D  3446               	retlw	70	;'F'
  2756  147E  3431               	retlw	49	;'1'
  2757  147F  343A               	retlw	58	;':'
  2758  1480  3420               	retlw	32	;' '
  2759  1481  3425               	retlw	37	;'%'
  2760  1482  3430               	retlw	48	;'0'
  2761  1483  3432               	retlw	50	;'2'
  2762  1484  3478               	retlw	120	;'x'
  2763  1485  340A               	retlw	10
  2764  1486  3400               	retlw	0
  2765                           
  2766                           	psect	stringtext52
  2767  1487                     __pstringtext52:	
  2768  1487                     STR_50:	
  2769  1487  3443               	retlw	67	;'C'
  2770  1488  344E               	retlw	78	;'N'
  2771  1489  3446               	retlw	70	;'F'
  2772  148A  3432               	retlw	50	;'2'
  2773  148B  343A               	retlw	58	;':'
  2774  148C  3420               	retlw	32	;' '
  2775  148D  3425               	retlw	37	;'%'
  2776  148E  3430               	retlw	48	;'0'
  2777  148F  3432               	retlw	50	;'2'
  2778  1490  3478               	retlw	120	;'x'
  2779  1491  340A               	retlw	10
  2780  1492  3400               	retlw	0
  2781                           
  2782                           	psect	stringtext53
  2783  1493                     __pstringtext53:	
  2784  1493                     STR_51:	
  2785  1493  3443               	retlw	67	;'C'
  2786  1494  344E               	retlw	78	;'N'
  2787  1495  3446               	retlw	70	;'F'
  2788  1496  3433               	retlw	51	;'3'
  2789  1497  343A               	retlw	58	;':'
  2790  1498  3420               	retlw	32	;' '
  2791  1499  3425               	retlw	37	;'%'
  2792  149A  3430               	retlw	48	;'0'
  2793  149B  3432               	retlw	50	;'2'
  2794  149C  3478               	retlw	120	;'x'
  2795  149D  340A               	retlw	10
  2796  149E  3400               	retlw	0
  2797                           
  2798                           	psect	stringtext54
  2799  149F                     __pstringtext54:	
  2800  149F                     STR_1:	
  2801  149F  3472               	retlw	114	;'r'
  2802  14A0  3425               	retlw	37	;'%'
  2803  14A1  3430               	retlw	48	;'0'
  2804  14A2  3433               	retlw	51	;'3'
  2805  14A3  3458               	retlw	88	;'X'
  2806  14A4  3425               	retlw	37	;'%'
  2807  14A5  3464               	retlw	100	;'d'
  2808  14A6  3425               	retlw	37	;'%'
  2809  14A7  3473               	retlw	115	;'s'
  2810  14A8  340A               	retlw	10
  2811  14A9  3400               	retlw	0
  2812                           
  2813                           	psect	stringtext55
  2814  14BC                     __pstringtext55:	
  2815  14BC                     STR_63:	
  2816  14BC  3428               	retlw	40	;'('
  2817  14BD  346E               	retlw	110	;'n'
  2818  14BE  3475               	retlw	117	;'u'
  2819  14BF  346C               	retlw	108	;'l'
  2820  14C0  346C               	retlw	108	;'l'
  2821  14C1  3429               	retlw	41	;')'
  2822  14C2  3400               	retlw	0
  2823                           
  2824                           	psect	stringtext56
  2825  14C3                     __pstringtext56:	
  2826  14C3                     STR_2:	
  2827  14C3  3425               	retlw	37	;'%'
  2828  14C4  3464               	retlw	100	;'d'
  2829  14C5  342C               	retlw	44	;','
  2830  14C6  3425               	retlw	37	;'%'
  2831  14C7  3473               	retlw	115	;'s'
  2832  14C8  340A               	retlw	10
  2833  14C9  3400               	retlw	0
  2834                           
  2835                           	psect	stringtext57
  2836  14D0                     __pstringtext57:	
  2837  14D0                     STR_3:	
  2838  14D0  3425               	retlw	37	;'%'
  2839  14D1  3430               	retlw	48	;'0'
  2840  14D2  3433               	retlw	51	;'3'
  2841  14D3  3478               	retlw	120	;'x'
  2842  14D4  343A               	retlw	58	;':'
  2843  14D5  3400               	retlw	0
  2844                           
  2845                           	psect	stringtext58
  2846  14D6                     __pstringtext58:	
  2847  14D6                     STR_4:	
  2848  14D6  3420               	retlw	32	;' '
  2849  14D7  3425               	retlw	37	;'%'
  2850  14D8  3430               	retlw	48	;'0'
  2851  14D9  3432               	retlw	50	;'2'
  2852  14DA  3478               	retlw	120	;'x'
  2853  14DB  3400               	retlw	0
  2854                           
  2855                           	psect	stringtext59
  2856  14DC                     __pstringtext59:	
  2857  14DC                     STR_41:	
  2858  14DC  342D               	retlw	45	;'-'
  2859  14DD  342D               	retlw	45	;'-'
  2860  14DE  342D               	retlw	45	;'-'
  2861  14DF  340A               	retlw	10
  2862  14E0  3400               	retlw	0
  2863                           
  2864                           	psect	stringtext60
  2865  14E7                     __pstringtext60:	
  2866  14E7                     STR_7:	
  2867  14E7  3425               	retlw	37	;'%'
  2868  14E8  3463               	retlw	99	;'c'
  2869  14E9  3400               	retlw	0
  2870                           
  2871                           	psect	stringtext61
  2872  0000                     __pstringtext61:	
  2873  14DF                     
  2874                           ; #config settings
  2875  0000                     
  2876                           	psect	cinit
  2877  07F0                     start_initialization:	
  2878  07F0                     __initialization:	
  2879                           
  2880                           ; Clear objects allocated to BANK0
  2881  07F0  0020               	movlb	0	; select bank0
  2882  07F1  01EB               	clrf	__pbssBANK0& (0+127)
  2883  07F2  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2884  07F3  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2885  07F4  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2886  07F5  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  2887                           
  2888                           ; Clear objects allocated to BANK1
  2889  07F6  30A0               	movlw	low __pbssBANK1
  2890  07F7  0084               	movwf	4
  2891  07F8  3000               	movlw	high __pbssBANK1
  2892  07F9  0085               	movwf	5
  2893  07FA  3024               	movlw	36
  2894  07FB  3189  21EC         	fcall	clear_ram0
  2895  07FD                     end_of_initialization:	
  2896                           ;End of C runtime variable initialization code
  2897                           
  2898  07FD                     __end_of__initialization:	
  2899  07FD  0020               	movlb	0
  2900  07FE  3183  2B72         	ljmp	_main	;jump to C main() function
  2901                           
  2902                           	psect	bssBANK0
  2903  006B                     __pbssBANK0:	
  2904  006B                     _mode:	
  2905  006B                     	ds	2
  2906  006D                     _output_format:	
  2907  006D                     	ds	2
  2908  006F                     _operation_mode:	
  2909  006F                     	ds	1
  2910                           
  2911                           	psect	bssBANK1
  2912  00A0                     __pbssBANK1:	
  2913  00A0                     _save_rxfn:	
  2914  00A0                     	ds	12
  2915  00AC                     _save_rxmn:	
  2916  00AC                     	ds	4
  2917  00B0                     _handler:	
  2918  00B0                     	ds	2
  2919  00B2                     _sid:	
  2920  00B2                     	ds	2
  2921  00B4                     _buf:	
  2922  00B4                     	ds	16
  2923                           
  2924                           	psect	clrtext
  2925  09EC                     clear_ram0:	
  2926                           ;	Called with FSR0 containing the base address, and
  2927                           ;	WREG with the size to clear
  2928                           
  2929  09EC  0064               	clrwdt	;clear the watchdog before getting into this loop
  2930  09ED                     clrloop0:	
  2931  09ED  0180               	clrf	0	;clear RAM location pointed to by FSR
  2932  09EE  3101               	addfsr 0,1
  2933  09EF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2934  09F0  29ED               	goto	clrloop0	;have we reached the end yet?
  2935  09F1  3400               	retlw	0	;all done for this memory range, return
  2936                           
  2937                           	psect	cstackBANK1
  2938  00C4                     __pcstackBANK1:	
  2939  00C4                     main@sid:	
  2940                           
  2941                           ; 1 bytes @ 0x0
  2942  00C4                     	ds	1
  2943  00C5                     main@bpr:	
  2944                           
  2945                           ; 1 bytes @ 0x1
  2946  00C5                     	ds	1
  2947  00C6                     main@status:	
  2948                           
  2949                           ; 1 bytes @ 0x2
  2950  00C6                     	ds	1
  2951  00C7                     main@buf:	
  2952                           
  2953                           ; 16 bytes @ 0x3
  2954  00C7                     	ds	16
  2955  00D7                     main@mask:	
  2956                           
  2957                           ; 2 bytes @ 0x13
  2958  00D7                     	ds	2
  2959  00D9                     main@echo_back:	
  2960                           
  2961                           ; 1 bytes @ 0x15
  2962  00D9                     	ds	1
  2963  00DA                     main@n:	
  2964                           
  2965                           ; 1 bytes @ 0x16
  2966  00DA                     	ds	1
  2967  00DB                     main@c:	
  2968                           
  2969                           ; 1 bytes @ 0x17
  2970  00DB                     	ds	1
  2971  00DC                     main@cmd:	
  2972                           
  2973                           ; 1 bytes @ 0x18
  2974  00DC                     	ds	1
  2975  00DD                     main@idx:	
  2976                           
  2977                           ; 1 bytes @ 0x19
  2978  00DD                     	ds	1
  2979                           
  2980                           	psect	cstackCOMMON
  2981  0070                     __pcstackCOMMON:	
  2982  0070                     ?_isdigit:	
  2983  0070                     ?_PIN_MANAGER_Initialize:	
  2984                           ; 1 bit 
  2985                           
  2986  0070                     ??_PIN_MANAGER_Initialize:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0070                     ?_OSCILLATOR_Initialize:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0070                     ??_OSCILLATOR_Initialize:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0070                     ?_WDT_Initialize:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0070                     ??_WDT_Initialize:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0070                     ?_SPI_Initialize:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0070                     ??_SPI_Initialize:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0070                     ?_EUSART_Initialize:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0070                     ??_EUSART_Initialize:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0070                     ?_can_set_sid:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0070                     ?_atoui8:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0070                     ??_atoui8:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0070                     ?_DATAEE_ReadByte:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0070                     ??_DATAEE_ReadByte:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0070                     ?_can_status_check:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0070                     ?_DATAEE_WriteByte:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0070                     ?_can_logging_mode:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0070                     ?_can_ope_mode:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040  0070                     ?_can_abort:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043  0070                     ?_can_baudrate:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046  0070                     ?_can_dump_masks_and_filters:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0070                     ?_can_dump_registers:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052  0070                     ??_isdigit:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ?_SYSTEM_Initialize:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ??_SYSTEM_Initialize:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_EUSART_Read:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ??_EUSART_Read:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ?_EUSART_Write:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ??_EUSART_Write:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_putch:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_SPI_Exchange8bit:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ??_SPI_Exchange8bit:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_slcan_send:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_main:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_abort_pending_transmissions:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_txf_clear:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_receive:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_read_register:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?___wmul:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?___lwdiv:	
  3104                           ; 2 bytes @ 0x0
  3105                           
  3106  0070                     EUSART_Write@txData:	
  3107                           ; 2 bytes @ 0x0
  3108                           
  3109  0070                     SPI_Exchange8bit@data:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     can_logging_mode@verbose:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     DATAEE_WriteByte@bData:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     DATAEE_ReadByte@bAdd:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     _isdigit$970:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     can_set_sid@can_node:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ___wmul@multiplier:	
  3128                           ; 2 bytes @ 0x0
  3129                           
  3130  0070                     ___lwdiv@divisor:	
  3131                           ; 2 bytes @ 0x0
  3132                           
  3133                           
  3134                           ; 2 bytes @ 0x0
  3135  0070                     	ds	1
  3136  0071                     ??_DATAEE_WriteByte:	
  3137  0071                     ??_can_logging_mode:	
  3138                           ; 1 bytes @ 0x1
  3139                           
  3140  0071                     ??_putch:	
  3141                           ; 1 bytes @ 0x1
  3142                           
  3143  0071                     ?_SPI_Exchange8bitBuffer:	
  3144                           ; 1 bytes @ 0x1
  3145                           
  3146  0071                     putch@txData:	
  3147                           ; 1 bytes @ 0x1
  3148                           
  3149  0071                     SPI_Exchange8bitBuffer@bufLen:	
  3150                           ; 1 bytes @ 0x1
  3151                           
  3152  0071                     atoui8@minus:	
  3153                           ; 1 bytes @ 0x1
  3154                           
  3155  0071                     DATAEE_WriteByte@bAdd:	
  3156                           ; 1 bytes @ 0x1
  3157                           
  3158  0071                     isdigit@c:	
  3159                           ; 1 bytes @ 0x1
  3160                           
  3161                           
  3162                           ; 1 bytes @ 0x1
  3163  0071                     	ds	1
  3164  0072                     ??_can_set_sid:	
  3165  0072                     SPI_Exchange8bitBuffer@dataOut:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0072                     can_logging_mode@debug:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     atoui8@ascii:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     DATAEE_WriteByte@GIEBitValue:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0072                     ___wmul@multiplicand:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0072                     ___lwdiv@dividend:	
  3181                           ; 2 bytes @ 0x2
  3182                           
  3183                           
  3184                           ; 2 bytes @ 0x2
  3185  0072                     	ds	1
  3186  0073                     ??_SPI_Exchange8bitBuffer:	
  3187  0073                     ?_atosid:	
  3188                           ; 1 bytes @ 0x3
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x3
  3192  0073                     	ds	1
  3193  0074                     ??___wmul:	
  3194  0074                     ??___lwdiv:	
  3195                           ; 1 bytes @ 0x4
  3196                           
  3197  0074                     ___wmul@product:	
  3198                           ; 1 bytes @ 0x4
  3199                           
  3200                           
  3201                           ; 2 bytes @ 0x4
  3202  0074                     	ds	1
  3203  0075                     ??_atosid:	
  3204  0075                     can_set_sid@sidh:	
  3205                           ; 1 bytes @ 0x5
  3206                           
  3207  0075                     ___lwdiv@quotient:	
  3208                           ; 1 bytes @ 0x5
  3209                           
  3210                           
  3211                           ; 2 bytes @ 0x5
  3212  0075                     	ds	1
  3213  0076                     ?_atoi:	
  3214  0076                     SPI_Exchange8bitBuffer@dataIn:	
  3215                           ; 2 bytes @ 0x6
  3216                           
  3217  0076                     can_set_sid@sidl:	
  3218                           ; 1 bytes @ 0x6
  3219                           
  3220                           
  3221                           ; 1 bytes @ 0x6
  3222  0076                     	ds	1
  3223  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  3224  0077                     ___lwdiv@counter:	
  3225                           ; 1 bytes @ 0x7
  3226                           
  3227                           
  3228                           ; 1 bytes @ 0x7
  3229  0077                     	ds	1
  3230  0078                     ??_atoi:	
  3231  0078                     ?_SPI_exchange:	
  3232                           ; 1 bytes @ 0x8
  3233                           
  3234  0078                     ?___lwmod:	
  3235                           ; 1 bytes @ 0x8
  3236                           
  3237  0078                     SPI_exchange@len:	
  3238                           ; 2 bytes @ 0x8
  3239                           
  3240  0078                     ___lwmod@divisor:	
  3241                           ; 1 bytes @ 0x8
  3242                           
  3243                           
  3244                           ; 2 bytes @ 0x8
  3245  0078                     	ds	1
  3246  0079                     ??_SPI_exchange:	
  3247                           
  3248                           ; 1 bytes @ 0x9
  3249  0079                     	ds	1
  3250  007A                     atoi@sign:	
  3251  007A                     ___lwmod@dividend:	
  3252                           ; 1 bytes @ 0xA
  3253                           
  3254                           
  3255                           ; 2 bytes @ 0xA
  3256  007A                     	ds	1
  3257  007B                     atoi@a:	
  3258                           
  3259                           ; 2 bytes @ 0xB
  3260  007B                     	ds	1
  3261  007C                     ??___lwmod:	
  3262  007C                     SPI_exchange@bytes_written:	
  3263                           ; 1 bytes @ 0xC
  3264                           
  3265                           
  3266                           ; 1 bytes @ 0xC
  3267  007C                     	ds	1
  3268  007D                     SPI_exchange@buf:	
  3269  007D                     atoi@s:	
  3270                           ; 1 bytes @ 0xD
  3271                           
  3272  007D                     ___lwmod@counter:	
  3273                           ; 1 bytes @ 0xD
  3274                           
  3275                           
  3276                           ; 1 bytes @ 0xD
  3277  007D                     	ds	1
  3278                           
  3279                           	psect	cstackBANK0
  3280  0020                     __pcstackBANK0:	
  3281  0020                     ??_abort_pending_transmissions:	
  3282  0020                     ??_txf_clear:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0020                     ??_read_register:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0020                     atosid@a:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291                           
  3292                           ; 2 bytes @ 0x0
  3293  0020                     	ds	1
  3294  0021                     read_register@addr:	
  3295                           
  3296                           ; 1 bytes @ 0x1
  3297  0021                     	ds	1
  3298  0022                     ?_printf:	
  3299  0022                     abort_pending_transmissions@bytes_written:	
  3300                           ; 2 bytes @ 0x2
  3301                           
  3302  0022                     txf_clear@mask:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     atosid@b:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     printf@f:	
  3309                           ; 2 bytes @ 0x2
  3310                           
  3311                           
  3312                           ; 2 bytes @ 0x2
  3313  0022                     	ds	1
  3314  0023                     txf_clear@bytes_written:	
  3315                           
  3316                           ; 1 bytes @ 0x3
  3317  0023                     	ds	1
  3318  0024                     txf_clear@n:	
  3319  0024                     atosid@c:	
  3320                           ; 1 bytes @ 0x4
  3321                           
  3322                           
  3323                           ; 2 bytes @ 0x4
  3324  0024                     	ds	2
  3325  0026                     atosid@id:	
  3326                           
  3327                           ; 2 bytes @ 0x6
  3328  0026                     	ds	2
  3329  0028                     atosid@ascii:	
  3330                           
  3331                           ; 1 bytes @ 0x8
  3332  0028                     	ds	8
  3333  0030                     ??_printf:	
  3334                           
  3335                           ; 1 bytes @ 0x10
  3336  0030                     	ds	4
  3337  0034                     _printf$779:	
  3338                           
  3339                           ; 2 bytes @ 0x14
  3340  0034                     	ds	2
  3341  0036                     printf@idx:	
  3342                           
  3343                           ; 1 bytes @ 0x16
  3344  0036                     	ds	1
  3345  0037                     printf@prec:	
  3346                           
  3347                           ; 1 bytes @ 0x17
  3348  0037                     	ds	1
  3349  0038                     printf@cp:	
  3350                           
  3351                           ; 2 bytes @ 0x18
  3352  0038                     	ds	2
  3353  003A                     printf@len:	
  3354                           
  3355                           ; 2 bytes @ 0x1A
  3356  003A                     	ds	2
  3357  003C                     printf@ap:	
  3358                           
  3359                           ; 1 bytes @ 0x1C
  3360  003C                     	ds	1
  3361  003D                     printf@val:	
  3362                           
  3363                           ; 2 bytes @ 0x1D
  3364  003D                     	ds	2
  3365  003F                     printf@flag:	
  3366                           
  3367                           ; 1 bytes @ 0x1F
  3368  003F                     	ds	1
  3369  0040                     printf@width:	
  3370                           
  3371                           ; 2 bytes @ 0x20
  3372  0040                     	ds	2
  3373  0042                     printf@c:	
  3374                           
  3375                           ; 1 bytes @ 0x22
  3376  0042                     	ds	1
  3377  0043                     ?_can_send:	
  3378  0043                     ??_can_ope_mode:	
  3379                           ; 1 bytes @ 0x23
  3380                           
  3381  0043                     ??_can_dump_masks_and_filters:	
  3382                           ; 1 bytes @ 0x23
  3383                           
  3384  0043                     ??_can_dump_registers:	
  3385                           ; 1 bytes @ 0x23
  3386                           
  3387  0043                     ?_receive_handler:	
  3388                           ; 1 bytes @ 0x23
  3389                           
  3390  0043                     can_send@dlc:	
  3391                           ; 1 bytes @ 0x23
  3392                           
  3393  0043                     receive_handler@sid:	
  3394                           ; 1 bytes @ 0x23
  3395                           
  3396                           
  3397                           ; 2 bytes @ 0x23
  3398  0043                     	ds	1
  3399  0044                     ??_can_send:	
  3400                           
  3401                           ; 1 bytes @ 0x24
  3402  0044                     	ds	1
  3403  0045                     receive_handler@pbuf:	
  3404  0045                     can_ope_mode@bytes_written:	
  3405                           ; 1 bytes @ 0x25
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0x25
  3409  0045                     	ds	1
  3410  0046                     receive_handler@dlc:	
  3411  0046                     can_ope_mode@ope_mode:	
  3412                           ; 1 bytes @ 0x26
  3413                           
  3414                           
  3415                           ; 1 bytes @ 0x26
  3416  0046                     	ds	1
  3417  0047                     ?_can_init:	
  3418  0047                     ??_can_abort:	
  3419                           ; 1 bytes @ 0x27
  3420                           
  3421  0047                     ??_can_baudrate:	
  3422                           ; 1 bytes @ 0x27
  3423                           
  3424  0047                     ?_can_set_mask:	
  3425                           ; 1 bytes @ 0x27
  3426                           
  3427  0047                     ??_receive_handler:	
  3428                           ; 1 bytes @ 0x27
  3429                           
  3430  0047                     can_set_mask@n:	
  3431                           ; 1 bytes @ 0x27
  3432                           
  3433  0047                     can_init@receive_handler:	
  3434                           ; 1 bytes @ 0x27
  3435                           
  3436                           
  3437                           ; 2 bytes @ 0x27
  3438  0047                     	ds	1
  3439  0048                     can_send@len:	
  3440  0048                     can_abort@bytes_written:	
  3441                           ; 1 bytes @ 0x28
  3442                           
  3443  0048                     can_set_mask@mask:	
  3444                           ; 1 bytes @ 0x28
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x28
  3448  0048                     	ds	1
  3449  0049                     ??_can_init:	
  3450  0049                     can_send@bytes_written:	
  3451                           ; 1 bytes @ 0x29
  3452                           
  3453  0049                     can_baudrate@bpr:	
  3454                           ; 1 bytes @ 0x29
  3455                           
  3456                           
  3457                           ; 1 bytes @ 0x29
  3458  0049                     	ds	1
  3459  004A                     ??_can_set_mask:	
  3460  004A                     receive_handler@i:	
  3461                           ; 1 bytes @ 0x2A
  3462                           
  3463  004A                     can_send@status:	
  3464                           ; 1 bytes @ 0x2A
  3465                           
  3466  004A                     can_baudrate@mask:	
  3467                           ; 1 bytes @ 0x2A
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x2A
  3471  004A                     	ds	1
  3472  004B                     ??_receive:	
  3473  004B                     can_send@data_buf:	
  3474                           ; 1 bytes @ 0x2B
  3475                           
  3476  004B                     can_baudrate@bytes_written:	
  3477                           ; 1 bytes @ 0x2B
  3478                           
  3479                           
  3480                           ; 1 bytes @ 0x2B
  3481  004B                     	ds	1
  3482  004C                     can_send@i:	
  3483                           
  3484                           ; 1 bytes @ 0x2C
  3485  004C                     	ds	1
  3486  004D                     can_send@n:	
  3487  004D                     can_dump_masks_and_filters@h:	
  3488                           ; 1 bytes @ 0x2D
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0x2D
  3492  004D                     	ds	1
  3493  004E                     ??_slcan_send:	
  3494  004E                     can_dump_masks_and_filters@l:	
  3495                           ; 1 bytes @ 0x2E
  3496                           
  3497                           
  3498                           ; 1 bytes @ 0x2E
  3499  004E                     	ds	1
  3500  004F                     slcan_send@id:	
  3501  004F                     can_dump_masks_and_filters@m:	
  3502                           ; 2 bytes @ 0x2F
  3503                           
  3504                           
  3505                           ; 2 bytes @ 0x2F
  3506  004F                     	ds	1
  3507  0050                     receive@bytes_read:	
  3508  0050                     _can_set_mask$536:	
  3509                           ; 1 bytes @ 0x30
  3510                           
  3511                           
  3512                           ; 2 bytes @ 0x30
  3513  0050                     	ds	1
  3514  0051                     slcan_send@dlc:	
  3515  0051                     can_dump_masks_and_filters@i:	
  3516                           ; 1 bytes @ 0x31
  3517                           
  3518  0051                     receive@rx_buf:	
  3519                           ; 1 bytes @ 0x31
  3520                           
  3521                           
  3522                           ; 15 bytes @ 0x31
  3523  0051                     	ds	1
  3524  0052                     slcan_send@pbuf:	
  3525  0052                     can_set_mask@cmd:	
  3526                           ; 1 bytes @ 0x32
  3527                           
  3528                           
  3529                           ; 1 bytes @ 0x32
  3530  0052                     	ds	1
  3531  0053                     can_set_mask@mask_sidh:	
  3532                           
  3533                           ; 1 bytes @ 0x33
  3534  0053                     	ds	1
  3535  0054                     can_set_mask@mask_sidl:	
  3536                           
  3537                           ; 1 bytes @ 0x34
  3538  0054                     	ds	12
  3539  0060                     receive@pbuf:	
  3540                           
  3541                           ; 1 bytes @ 0x40
  3542  0060                     	ds	1
  3543  0061                     receive@id:	
  3544                           
  3545                           ; 2 bytes @ 0x41
  3546  0061                     	ds	2
  3547  0063                     receive@dlc:	
  3548                           
  3549                           ; 1 bytes @ 0x43
  3550  0063                     	ds	1
  3551  0064                     receive@n:	
  3552                           
  3553                           ; 1 bytes @ 0x44
  3554  0064                     	ds	1
  3555  0065                     ??_can_status_check:	
  3556                           
  3557                           ; 1 bytes @ 0x45
  3558  0065                     	ds	2
  3559  0067                     can_status_check@bytes_written:	
  3560                           
  3561                           ; 1 bytes @ 0x47
  3562  0067                     	ds	1
  3563  0068                     can_status_check@status:	
  3564                           
  3565                           ; 1 bytes @ 0x48
  3566  0068                     	ds	1
  3567  0069                     ??_main:	
  3568                           
  3569                           ; 1 bytes @ 0x49
  3570  0069                     	ds	2
  3571                           
  3572                           	psect	maintext
  3573  0372                     __pmaintext:	
  3574 ;;
  3575 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3576 ;;
  3577 ;; *************** function _main *****************
  3578 ;; Defined at:
  3579 ;;		line 66 in file "main.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  status          1    2[BANK1 ] unsigned char 
  3584 ;;  buf            16    3[BANK1 ] unsigned char [16]
  3585 ;;  mask            2   19[BANK1 ] unsigned int 
  3586 ;;  idx             1   25[BANK1 ] unsigned char 
  3587 ;;  cmd             1   24[BANK1 ] unsigned char 
  3588 ;;  c               1   23[BANK1 ] unsigned char 
  3589 ;;  n               1   22[BANK1 ] unsigned char 
  3590 ;;  echo_back       1   21[BANK1 ] unsigned char 
  3591 ;;  bpr             1    1[BANK1 ] unsigned char 
  3592 ;;  sid             1    0[BANK1 ] unsigned char 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : B1F/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3603 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3606 ;;Total ram usage:       28 bytes
  3607 ;; Hardware stack levels required when called:    6
  3608 ;; This function calls:
  3609 ;;		_DATAEE_ReadByte
  3610 ;;		_DATAEE_WriteByte
  3611 ;;		_EUSART_Read
  3612 ;;		_SYSTEM_Initialize
  3613 ;;		_atoi
  3614 ;;		_can_abort
  3615 ;;		_can_baudrate
  3616 ;;		_can_dump_masks_and_filters
  3617 ;;		_can_dump_registers
  3618 ;;		_can_init
  3619 ;;		_can_logging_mode
  3620 ;;		_can_ope_mode
  3621 ;;		_can_send
  3622 ;;		_can_set_mask
  3623 ;;		_can_set_sid
  3624 ;;		_can_status_check
  3625 ;;		_printf
  3626 ;;		_slcan_send
  3627 ;; This function is called by:
  3628 ;;		Startup code after reset
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           
  3633                           ;psect for function _main
  3634  0372                     _main:	
  3635                           
  3636                           ;main.c: 68: LATCbits.LATC3 = 1;
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3640  0372  0022               	movlb	2	; select bank2
  3641  0373  158E               	bsf	14,3	;volatile
  3642                           
  3643                           ;main.c: 70: uint8_t buf[16];
  3644                           ;main.c: 71: bool echo_back = 0;
  3645  0374  0021               	movlb	1	; select bank1
  3646  0375  01D9               	clrf	main@echo_back^(0+128)
  3647                           
  3648                           ;main.c: 72: uint8_t c, idx;
  3649                           ;main.c: 74: uint8_t cmd, sid, n, bpr;
  3650                           ;main.c: 75: uint16_t mask;
  3651                           ;main.c: 77: run_mode = DATAEE_ReadByte(0u);
  3652  0376  3000               	movlw	0
  3653  0377  318A  2231  3183   	fcall	_DATAEE_ReadByte
  3654  037A  0020               	movlb	0	; select bank0
  3655  037B  00E9               	movwf	??_main
  3656  037C  0869               	movf	??_main,w
  3657  037D  0021               	movlb	1	; select bank1
  3658  037E  00DE               	movwf	_run_mode^(0+128)
  3659                           
  3660                           ;main.c: 79: SYSTEM_Initialize();
  3661  037F  318A  224B  3183   	fcall	_SYSTEM_Initialize
  3662                           
  3663                           ;main.c: 84: output_format.with_sid = 0;
  3664  0382  0020               	movlb	0	; select bank0
  3665  0383  01ED               	clrf	_output_format
  3666                           
  3667                           ;main.c: 85: output_format.hex_output = 0;
  3668  0384  01EE               	clrf	_output_format+1
  3669                           
  3670                           ;main.c: 86: can_init(receive_handler);
  3671  0385  30AB               	movlw	low _receive_handler
  3672  0386  00C7               	movwf	can_init@receive_handler
  3673  0387  300D               	movlw	high _receive_handler
  3674  0388  00C8               	movwf	can_init@receive_handler+1
  3675  0389  318E  261B  3183   	fcall	_can_init
  3676  038C                     L1:	
  3677                           
  3678                           ;main.c: 88: idx = 0;
  3679  038C  0021               	movlb	1	; select bank1
  3680  038D  01DD               	clrf	main@idx^(0+128)
  3681  038E                     l3062:	
  3682                           ;main.c: 90: while (1)
  3683                           
  3684                           
  3685                           ;main.c: 91: {
  3686                           ;main.c: 92: bool status = can_status_check();
  3687  038E  318C  2497  3183   	fcall	_can_status_check
  3688  0391  0020               	movlb	0	; select bank0
  3689  0392  00E9               	movwf	??_main
  3690  0393  0869               	movf	??_main,w
  3691  0394  0021               	movlb	1	; select bank1
  3692  0395  00C6               	movwf	main@status^(0+128)
  3693                           
  3694                           ;main.c: 93: if (status) {
  3695  0396  0846               	movf	main@status^(0+128),w
  3696  0397  1903               	btfsc	3,2
  3697  0398  2B9C               	goto	l217
  3698                           
  3699                           ;main.c: 94: LATCbits.LATC3 = 0;
  3700  0399  0022               	movlb	2	; select bank2
  3701  039A  118E               	bcf	14,3	;volatile
  3702                           
  3703                           ;main.c: 95: } else {
  3704  039B  2B9E               	goto	l218
  3705  039C                     l217:	
  3706                           
  3707                           ;main.c: 96: LATCbits.LATC3 = 1;
  3708  039C  0022               	movlb	2	; select bank2
  3709  039D  158E               	bsf	14,3	;volatile
  3710  039E                     l218:	
  3711                           
  3712                           ;main.c: 97: }
  3713                           ;main.c: 98: if ((PIR1bits.RCIF)) {
  3714  039E  0020               	movlb	0	; select bank0
  3715  039F  1E91               	btfss	17,5	;volatile
  3716  03A0  2B8E               	goto	l3062
  3717                           
  3718                           ;main.c: 99: c = EUSART_Read();
  3719  03A1  318A  2211  3183   	fcall	_EUSART_Read
  3720  03A4  0020               	movlb	0	; select bank0
  3721  03A5  00E9               	movwf	??_main
  3722  03A6  0869               	movf	??_main,w
  3723  03A7  0021               	movlb	1	; select bank1
  3724  03A8  00DB               	movwf	main@c^(0+128)
  3725                           
  3726                           ;main.c: 100: if (echo_back) printf("%c", c);
  3727  03A9  0859               	movf	main@echo_back^(0+128),w
  3728  03AA  1903               	btfsc	3,2
  3729  03AB  2BBD               	goto	l3074
  3730  03AC  30E7               	movlw	low (STR_7| (0+32768))
  3731  03AD  0020               	movlb	0	; select bank0
  3732  03AE  00A2               	movwf	printf@f
  3733  03AF  3094               	movlw	high (STR_7| (0+32768))
  3734  03B0  00A3               	movwf	printf@f+1
  3735  03B1  0021               	movlb	1	; select bank1
  3736  03B2  085B               	movf	main@c^(0+128),w
  3737  03B3  0020               	movlb	0	; select bank0
  3738  03B4  00E9               	movwf	??_main
  3739  03B5  01EA               	clrf	??_main+1
  3740  03B6  0869               	movf	??_main,w
  3741  03B7  00A4               	movwf	?_printf+2
  3742  03B8  086A               	movf	??_main+1,w
  3743  03B9  00A5               	movwf	?_printf+3
  3744  03BA  3185  25A5  3183   	fcall	_printf
  3745  03BD                     l3074:	
  3746                           
  3747                           ;main.c: 102: buf[idx] = c;
  3748  03BD  0021               	movlb	1	; select bank1
  3749  03BE  085B               	movf	main@c^(0+128),w
  3750  03BF  0020               	movlb	0	; select bank0
  3751  03C0  00E9               	movwf	??_main
  3752  03C1  0021               	movlb	1	; select bank1
  3753  03C2  085D               	movf	main@idx^(0+128),w
  3754  03C3  3EC7               	addlw	(low (main@buf| 0))& (0+255)
  3755  03C4  0086               	movwf	6
  3756  03C5  0187               	clrf	7
  3757  03C6  0020               	movlb	0	; select bank0
  3758  03C7  0869               	movf	??_main,w
  3759  03C8  0081               	movwf	1
  3760                           
  3761                           ;main.c: 103: if (c == '\n') {
  3762  03C9  300A               	movlw	10
  3763  03CA  0021               	movlb	1	; select bank1
  3764  03CB  065B               	xorwf	main@c^(0+128),w
  3765  03CC  1D03               	btfss	3,2
  3766  03CD  2D89               	goto	l3188
  3767                           
  3768                           ;main.c: 104: buf[idx] = '\0';
  3769  03CE  085D               	movf	main@idx^(0+128),w
  3770  03CF  3EC7               	addlw	(low (main@buf| 0))& (0+255)
  3771  03D0  0086               	movwf	6
  3772  03D1  0187               	clrf	7
  3773  03D2  0181               	clrf	1
  3774                           
  3775                           ;main.c: 105: if (run_mode == 1u && buf[0] == 't') {
  3776  03D3  035E               	decf	_run_mode^(0+128),w
  3777  03D4  1D03               	btfss	3,2
  3778  03D5  2BDF               	goto	l3086
  3779  03D6  3074               	movlw	116
  3780  03D7  0647               	xorwf	main@buf^(0+128),w
  3781  03D8  1D03               	btfss	3,2
  3782  03D9  2BDF               	goto	l3086
  3783                           
  3784                           ;main.c: 106: slcan_send(&buf[1]);
  3785  03DA  30C8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3786  03DB  318B  2347  3183   	fcall	_slcan_send
  3787                           
  3788                           ;main.c: 107: } else if (buf[0] == '@') {
  3789  03DE  2B8C               	goto	L1
  3790  03DF                     l3086:	
  3791  03DF  3040               	movlw	64
  3792  03E0  0021               	movlb	1	; select bank1
  3793  03E1  0647               	xorwf	main@buf^(0+128),w
  3794  03E2  1D03               	btfss	3,2
  3795  03E3  2D7F               	goto	l3184
  3796                           
  3797                           ;main.c: 108: cmd = buf[1];
  3798  03E4  0848               	movf	(main@buf^(0+128)+1),w
  3799  03E5  0020               	movlb	0	; select bank0
  3800  03E6  00E9               	movwf	??_main
  3801  03E7  0869               	movf	??_main,w
  3802  03E8  0021               	movlb	1	; select bank1
  3803  03E9  00DC               	movwf	main@cmd^(0+128)
  3804                           
  3805                           ;main.c: 109: switch(cmd) {
  3806  03EA  2D57               	goto	l3182
  3807  03EB                     l3090:	
  3808                           ;main.c: 110: case 'M':
  3809                           
  3810                           
  3811                           ;main.c: 111: if (buf[2] == 's') {
  3812  03EB  3073               	movlw	115
  3813  03EC  0649               	xorwf	(main@buf^(0+128)+2),w
  3814  03ED  1D03               	btfss	3,2
  3815  03EE  2BF2               	goto	l3096
  3816                           
  3817                           ;main.c: 112: run_mode = 1u;
  3818  03EF  01DE               	clrf	_run_mode^(0+128)
  3819  03F0  0ADE               	incf	_run_mode^(0+128),f
  3820  03F1  2BF8               	goto	L2
  3821  03F2                     l3096:	
  3822                           ;main.c: 114: } else if (buf[2] == 'e') {
  3823                           
  3824                           ;main.c: 113: DATAEE_WriteByte(0u, run_mode);
  3825                           
  3826  03F2  3065               	movlw	101
  3827  03F3  0021               	movlb	1	; select bank1
  3828  03F4  0649               	xorwf	(main@buf^(0+128)+2),w
  3829  03F5  1D03               	btfss	3,2
  3830  03F6  2C01               	goto	l3102
  3831                           
  3832                           ;main.c: 115: run_mode = 0u;
  3833  03F7  01DE               	clrf	_run_mode^(0+128)
  3834  03F8                     L2:	
  3835                           
  3836                           ;main.c: 116: DATAEE_WriteByte(0u, run_mode);
  3837  03F8  085E               	movf	_run_mode^(0+128),w
  3838  03F9  0020               	movlb	0	; select bank0
  3839  03FA  00E9               	movwf	??_main
  3840  03FB  0869               	movf	??_main,w
  3841  03FC  00F0               	movwf	DATAEE_WriteByte@bData
  3842  03FD  3000               	movlw	0
  3843  03FE  318A  22BA  3183   	fcall	_DATAEE_WriteByte
  3844  0401                     l3102:	
  3845                           ;main.c: 117: }
  3846                           ;main.c: 118: case 'i':
  3847                           
  3848                           
  3849                           ;main.c: 119: sid = (uint8_t)atoi(&buf[2]);
  3850  0401  30C9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3851  0402  318D  2544  3183   	fcall	_atoi
  3852  0405  0876               	movf	?_atoi,w
  3853  0406  0020               	movlb	0	; select bank0
  3854  0407  00E9               	movwf	??_main
  3855  0408  0869               	movf	??_main,w
  3856  0409  0021               	movlb	1	; select bank1
  3857  040A  00C4               	movwf	main@sid^(0+128)
  3858                           
  3859                           ;main.c: 120: can_set_sid(sid);
  3860  040B  0844               	movf	main@sid^(0+128),w
  3861  040C  0020               	movlb	0	; select bank0
  3862  040D  00E9               	movwf	??_main
  3863  040E  01EA               	clrf	??_main+1
  3864  040F  0869               	movf	??_main,w
  3865  0410  00F0               	movwf	can_set_sid@can_node
  3866  0411  086A               	movf	??_main+1,w
  3867  0412  00F1               	movwf	can_set_sid@can_node+1
  3868  0413  318A  22D7  3183   	fcall	_can_set_sid
  3869                           
  3870                           ;main.c: 121: break;
  3871  0416  2B8C               	goto	L1
  3872  0417                     l3106:	
  3873                           ;main.c: 122: case 'v':
  3874                           
  3875                           
  3876                           ;main.c: 123: if (buf[2] == 'd') {
  3877  0417  3064               	movlw	100
  3878  0418  0021               	movlb	1	; select bank1
  3879  0419  0649               	xorwf	(main@buf^(0+128)+2),w
  3880  041A  1D03               	btfss	3,2
  3881  041B  2C20               	goto	l3112
  3882                           
  3883                           ;main.c: 124: can_logging_mode(1, 1);
  3884  041C  01F0               	clrf	can_logging_mode@verbose
  3885  041D  0AF0               	incf	can_logging_mode@verbose,f
  3886  041E  3001               	movlw	1
  3887  041F  2C27               	goto	L3
  3888  0420                     l3112:	
  3889                           ;main.c: 126: } else if (buf[2] == 'v') {
  3890                           
  3891                           ;main.c: 125: echo_back = 1;
  3892                           
  3893  0420  3076               	movlw	118
  3894  0421  0649               	xorwf	(main@buf^(0+128)+2),w
  3895  0422  1D03               	btfss	3,2
  3896  0423  2C2E               	goto	l3118
  3897                           
  3898                           ;main.c: 127: can_logging_mode(0, 1);
  3899  0424  01F0               	clrf	can_logging_mode@verbose
  3900  0425  0AF0               	incf	can_logging_mode@verbose,f
  3901  0426  3000               	movlw	0
  3902  0427                     L3:	
  3903  0427  318A  2226  3183   	fcall	_can_logging_mode
  3904                           
  3905                           ;main.c: 128: echo_back = 1;
  3906  042A  0021               	movlb	1	; select bank1
  3907  042B  01D9               	clrf	main@echo_back^(0+128)
  3908  042C  0AD9               	incf	main@echo_back^(0+128),f
  3909                           
  3910                           ;main.c: 129: } else if (buf[2] == 'n') {
  3911  042D  2B8C               	goto	L1
  3912  042E                     l3118:	
  3913  042E  306E               	movlw	110
  3914  042F  0649               	xorwf	(main@buf^(0+128)+2),w
  3915  0430  1D03               	btfss	3,2
  3916  0431  2B8C               	goto	L1
  3917                           
  3918                           ;main.c: 130: can_logging_mode(0, 0);
  3919  0432  01F0               	clrf	can_logging_mode@verbose
  3920  0433  3000               	movlw	0
  3921  0434  318A  2226  3183   	fcall	_can_logging_mode
  3922                           
  3923                           ;main.c: 131: echo_back = 0;
  3924  0437  0021               	movlb	1	; select bank1
  3925  0438  01D9               	clrf	main@echo_back^(0+128)
  3926                           
  3927                           ;main.c: 132: }
  3928                           ;main.c: 133: break;
  3929  0439  2B8C               	goto	L1
  3930  043A                     l3124:	
  3931                           ;main.c: 134: case 'o':
  3932                           
  3933                           
  3934                           ;main.c: 135: if (buf[2] == 'l') {
  3935  043A  306C               	movlw	108
  3936  043B  0649               	xorwf	(main@buf^(0+128)+2),w
  3937  043C  1D03               	btfss	3,2
  3938  043D  2C40               	goto	l3128
  3939                           
  3940                           ;main.c: 136: can_ope_mode(0b01000000u);
  3941  043E  3040               	movlw	64
  3942  043F  2C46               	goto	L4
  3943  0440                     l3128:	
  3944                           ;main.c: 137: } else if (buf[2] == 'n') {
  3945                           
  3946  0440  306E               	movlw	110
  3947  0441  0021               	movlb	1	; select bank1
  3948  0442  0649               	xorwf	(main@buf^(0+128)+2),w
  3949  0443  1D03               	btfss	3,2
  3950  0444  2C49               	goto	l3132
  3951                           
  3952                           ;main.c: 138: can_ope_mode(0b00000000u);
  3953  0445  3000               	movlw	0
  3954  0446                     L4:	
  3955  0446  318C  24ED  3183   	fcall	_can_ope_mode
  3956  0449                     l3132:	
  3957                           
  3958                           ;main.c: 139: }
  3959                           ;main.c: 140: if (buf[3] == '\0') {
  3960  0449  0021               	movlb	1	; select bank1
  3961  044A  084A               	movf	(main@buf^(0+128)+3),w
  3962  044B  1D03               	btfss	3,2
  3963  044C  2C50               	goto	l3136
  3964                           
  3965                           ;main.c: 141: output_format.with_sid = 0;
  3966  044D  0020               	movlb	0	; select bank0
  3967  044E  01ED               	clrf	_output_format
  3968  044F  2C5B               	goto	l3142
  3969  0450                     l3136:	
  3970                           ;main.c: 143: } else if (buf[3] == 's' && buf[4] == '\0') {
  3971                           
  3972                           ;main.c: 142: output_format.hex_output = 0;
  3973                           
  3974  0450  3073               	movlw	115
  3975  0451  0021               	movlb	1	; select bank1
  3976  0452  064A               	xorwf	(main@buf^(0+128)+3),w
  3977  0453  1D03               	btfss	3,2
  3978  0454  2C5D               	goto	l3144
  3979  0455  084B               	movf	(main@buf^(0+128)+4),w
  3980  0456  1D03               	btfss	3,2
  3981  0457  2C5D               	goto	l3144
  3982                           
  3983                           ;main.c: 144: output_format.with_sid = 1;
  3984  0458  0020               	movlb	0	; select bank0
  3985  0459  01ED               	clrf	_output_format
  3986  045A  0AED               	incf	_output_format,f
  3987  045B                     l3142:	
  3988                           
  3989                           ;main.c: 145: output_format.hex_output = 0;
  3990  045B  01EE               	clrf	_output_format+1
  3991                           
  3992                           ;main.c: 146: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3993  045C  2B8C               	goto	L1
  3994  045D                     l3144:	
  3995  045D  3068               	movlw	104
  3996  045E  0021               	movlb	1	; select bank1
  3997  045F  064A               	xorwf	(main@buf^(0+128)+3),w
  3998  0460  1D03               	btfss	3,2
  3999  0461  2B8C               	goto	L1
  4000  0462  084B               	movf	(main@buf^(0+128)+4),w
  4001  0463  1D03               	btfss	3,2
  4002  0464  2B8C               	goto	L1
  4003                           
  4004                           ;main.c: 147: output_format.with_sid = 0;
  4005  0465  0020               	movlb	0	; select bank0
  4006  0466  01ED               	clrf	_output_format
  4007                           
  4008                           ;main.c: 148: output_format.hex_output = 1;
  4009  0467  01EE               	clrf	_output_format+1
  4010  0468  0AEE               	incf	_output_format+1,f
  4011                           
  4012                           ;main.c: 149: }
  4013                           ;main.c: 150: break;
  4014  0469  2B8C               	goto	L1
  4015  046A                     l3152:	
  4016                           ;main.c: 151: case 'b':
  4017                           
  4018                           
  4019                           ;main.c: 152: can_abort();
  4020  046A  3180  2006  3183   	fcall	_can_abort
  4021                           
  4022                           ;main.c: 153: bpr = (uint8_t)atoi(&buf[2]);
  4023  046D  30C9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  4024  046E  318D  2544  3183   	fcall	_atoi
  4025  0471  0876               	movf	?_atoi,w
  4026  0472  0020               	movlb	0	; select bank0
  4027  0473  00E9               	movwf	??_main
  4028  0474  0869               	movf	??_main,w
  4029  0475  0021               	movlb	1	; select bank1
  4030  0476  00C5               	movwf	main@bpr^(0+128)
  4031                           
  4032                           ;main.c: 154: can_baudrate(bpr);
  4033  0477  0845               	movf	main@bpr^(0+128),w
  4034  0478  318B  23C9  3183   	fcall	_can_baudrate
  4035                           
  4036                           ;main.c: 155: break;
  4037  047B  2B8C               	goto	L1
  4038  047C                     l3158:	
  4039                           ;main.c: 156: case 'm':
  4040                           
  4041                           
  4042                           ;main.c: 157: case 'f':
  4043                           ;main.c: 158: n = buf[2] - 0x30u;
  4044  047C  0021               	movlb	1	; select bank1
  4045  047D  0849               	movf	(main@buf^(0+128)+2),w
  4046  047E  3ED0               	addlw	208
  4047  047F  0020               	movlb	0	; select bank0
  4048  0480  00E9               	movwf	??_main
  4049  0481  0869               	movf	??_main,w
  4050  0482  0021               	movlb	1	; select bank1
  4051  0483  00DA               	movwf	main@n^(0+128)
  4052                           
  4053                           ;main.c: 159: mask = (uint16_t)atoi(&buf[3]);
  4054  0484  30CA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  4055  0485  318D  2544  3183   	fcall	_atoi
  4056  0488  0877               	movf	?_atoi+1,w
  4057  0489  0021               	movlb	1	; select bank1
  4058  048A  00D8               	movwf	(main@mask+1)^(0+128)
  4059  048B  0876               	movf	?_atoi,w
  4060  048C  00D7               	movwf	main@mask^(0+128)
  4061                           
  4062                           ;main.c: 160: if (cmd == 'm') {
  4063  048D  306D               	movlw	109
  4064  048E  065C               	xorwf	main@cmd^(0+128),w
  4065  048F  1D03               	btfss	3,2
  4066  0490  2CA3               	goto	l3166
  4067                           
  4068                           ;main.c: 161: can_set_mask(0u, n, mask);
  4069  0491  085A               	movf	main@n^(0+128),w
  4070  0492  0020               	movlb	0	; select bank0
  4071  0493  00E9               	movwf	??_main
  4072  0494  0869               	movf	??_main,w
  4073  0495  00C7               	movwf	can_set_mask@n
  4074  0496  0021               	movlb	1	; select bank1
  4075  0497  0858               	movf	(main@mask+1)^(0+128),w
  4076  0498  0020               	movlb	0	; select bank0
  4077  0499  00C9               	movwf	can_set_mask@mask+1
  4078  049A  0021               	movlb	1	; select bank1
  4079  049B  0857               	movf	main@mask^(0+128),w
  4080  049C  0020               	movlb	0	; select bank0
  4081  049D  00C8               	movwf	can_set_mask@mask
  4082  049E  3000               	movlw	0
  4083  049F  318E  26A6  3183   	fcall	_can_set_mask
  4084                           
  4085                           ;main.c: 162: } else if (cmd == 'f') {
  4086  04A2  2B8C               	goto	L1
  4087  04A3                     l3166:	
  4088  04A3  3066               	movlw	102
  4089  04A4  0021               	movlb	1	; select bank1
  4090  04A5  065C               	xorwf	main@cmd^(0+128),w
  4091  04A6  1D03               	btfss	3,2
  4092  04A7  2B8C               	goto	L1
  4093                           
  4094                           ;main.c: 163: can_set_mask(1u, n, mask);
  4095  04A8  085A               	movf	main@n^(0+128),w
  4096  04A9  0020               	movlb	0	; select bank0
  4097  04AA  00E9               	movwf	??_main
  4098  04AB  0869               	movf	??_main,w
  4099  04AC  00C7               	movwf	can_set_mask@n
  4100  04AD  0021               	movlb	1	; select bank1
  4101  04AE  0858               	movf	(main@mask+1)^(0+128),w
  4102  04AF  0020               	movlb	0	; select bank0
  4103  04B0  00C9               	movwf	can_set_mask@mask+1
  4104  04B1  0021               	movlb	1	; select bank1
  4105  04B2  0857               	movf	main@mask^(0+128),w
  4106  04B3  0020               	movlb	0	; select bank0
  4107  04B4  00C8               	movwf	can_set_mask@mask
  4108  04B5  3001               	movlw	1
  4109  04B6  318E  26A6  3183   	fcall	_can_set_mask
  4110                           
  4111                           ;main.c: 164: }
  4112                           ;main.c: 165: break;
  4113  04B9  2B8C               	goto	L1
  4114  04BA                     l3170:	
  4115                           ;main.c: 166: case 'a':
  4116                           
  4117                           
  4118                           ;main.c: 167: can_abort();
  4119  04BA  3180  2006  3183   	fcall	_can_abort
  4120                           
  4121                           ;main.c: 168: break;
  4122  04BD  2B8C               	goto	L1
  4123  04BE                     l3172:	
  4124                           ;main.c: 169: case 'F':
  4125                           
  4126                           
  4127                           ;main.c: 170: can_dump_masks_and_filters();
  4128  04BE  3180  2049  3183   	fcall	_can_dump_masks_and_filters
  4129                           
  4130                           ;main.c: 171: break;
  4131  04C1  2B8C               	goto	L1
  4132  04C2                     l3174:	
  4133                           ;main.c: 172: case 'd':
  4134                           
  4135                           
  4136                           ;main.c: 173: can_dump_registers();
  4137  04C2  3181  2115  3183   	fcall	_can_dump_registers
  4138                           
  4139                           ;main.c: 174: break;
  4140  04C5  2B8C               	goto	L1
  4141  04C6                     l3176:	
  4142                           ;main.c: 175: case '@':
  4143                           
  4144                           
  4145                           ;main.c: 176: can_send(&buf[1], idx - 1u);
  4146  04C6  0021               	movlb	1	; select bank1
  4147  04C7  085D               	movf	main@idx^(0+128),w
  4148  04C8  3EFF               	addlw	255
  4149  04C9  0020               	movlb	0	; select bank0
  4150  04CA  00E9               	movwf	??_main
  4151  04CB  0869               	movf	??_main,w
  4152  04CC  00C3               	movwf	can_send@dlc
  4153  04CD  30C8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  4154  04CE  3182  2225  3183   	fcall	_can_send
  4155                           
  4156                           ;main.c: 177: break;
  4157  04D1  2B8C               	goto	L1
  4158  04D2                     l3178:	
  4159                           ;main.c: 178: case 'h':
  4160                           
  4161                           
  4162                           ;main.c: 179: printf("/// UART2CAN HELP (version %s) ///\n", "0.12  March 22, 2018");
  4163  04D2  303E               	movlw	low (STR_8| (0+32768))
  4164  04D3  0020               	movlb	0	; select bank0
  4165  04D4  00A2               	movwf	printf@f
  4166  04D5  3092               	movlw	high (STR_8| (0+32768))
  4167  04D6  00A3               	movwf	printf@f+1
  4168  04D7  3009               	movlw	low (STR_9| (0+32768))
  4169  04D8  00A4               	movwf	low ((?_printf| 0+2))
  4170  04D9  3093               	movlw	high (STR_9| (0+32768))
  4171  04DA  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4172  04DB  3185  25A5  3183   	fcall	_printf
  4173                           
  4174                           ;main.c: 180: printf("[Set SLCAN/EVAL mode] @Ms: SLCAN, @Me: EVAL\n");
  4175  04DE  3017               	movlw	low (STR_10| (0+32768))
  4176  04DF  0020               	movlb	0	; select bank0
  4177  04E0  00A2               	movwf	printf@f
  4178  04E1  3091               	movlw	high (STR_10| (0+32768))
  4179  04E2  00A3               	movwf	printf@f+1
  4180  04E3  3185  25A5  3183   	fcall	_printf
  4181                           
  4182                           ;main.c: 181: printf("[Set standard identifier] @i<standard identifier>\n");
  4183  04E6  30E4               	movlw	low (STR_11| (0+32768))
  4184  04E7  0020               	movlb	0	; select bank0
  4185  04E8  00A2               	movwf	printf@f
  4186  04E9  3090               	movlw	high (STR_11| (0+32768))
  4187  04EA  00A3               	movwf	printf@f+1
  4188  04EB  3185  25A5  3183   	fcall	_printf
  4189                           
  4190                           ;main.c: 182: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  4191  04EE  3000               	movlw	low (STR_12| (0+32768))
  4192  04EF  0020               	movlb	0	; select bank0
  4193  04F0  00A2               	movwf	printf@f
  4194  04F1  3090               	movlw	high (STR_12| (0+32768))
  4195  04F2  00A3               	movwf	printf@f+1
  4196  04F3  3185  25A5  3183   	fcall	_printf
  4197                           
  4198                           ;main.c: 183: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  4199  04F6  30AE               	movlw	low (STR_13| (0+32768))
  4200  04F7  0020               	movlb	0	; select bank0
  4201  04F8  00A2               	movwf	printf@f
  4202  04F9  3090               	movlw	high (STR_13| (0+32768))
  4203  04FA  00A3               	movwf	printf@f+1
  4204  04FB  3185  25A5  3183   	fcall	_printf
  4205                           
  4206                           ;main.c: 184: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  4207  04FE  303B               	movlw	low (STR_14| (0+32768))
  4208  04FF  0020               	movlb	0	; select bank0
  4209  0500  00A2               	movwf	printf@f
  4210  0501  3090               	movlw	high (STR_14| (0+32768))
  4211  0502  00A3               	movwf	printf@f+1
  4212  0503  3185  25A5  3183   	fcall	_printf
  4213                           
  4214                           ;main.c: 185: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  4215  0506  30F2               	movlw	low (STR_15| (0+32768))
  4216  0507  0020               	movlb	0	; select bank0
  4217  0508  00A2               	movwf	printf@f
  4218  0509  3091               	movlw	high (STR_15| (0+32768))
  4219  050A  00A3               	movwf	printf@f+1
  4220  050B  3185  25A5  3183   	fcall	_printf
  4221                           
  4222                           ;main.c: 186: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  4223  050E  30C8               	movlw	low (STR_16| (0+32768))
  4224  050F  0020               	movlb	0	; select bank0
  4225  0510  00A2               	movwf	printf@f
  4226  0511  3091               	movlw	high (STR_16| (0+32768))
  4227  0512  00A3               	movwf	printf@f+1
  4228  0513  3185  25A5  3183   	fcall	_printf
  4229                           
  4230                           ;main.c: 187: printf("[Set baud rate] @b<bpr>\n");
  4231  0516  3099               	movlw	low (STR_17| (0+32768))
  4232  0517  0020               	movlb	0	; select bank0
  4233  0518  00A2               	movwf	printf@f
  4234  0519  3092               	movlw	high (STR_17| (0+32768))
  4235  051A  00A3               	movwf	printf@f+1
  4236  051B  3185  25A5  3183   	fcall	_printf
  4237                           
  4238                           ;main.c: 188: printf("[Abort all pending transmissions] @a\n");
  4239  051E  3018               	movlw	low (STR_18| (0+32768))
  4240  051F  0020               	movlb	0	; select bank0
  4241  0520  00A2               	movwf	printf@f
  4242  0521  3092               	movlw	high (STR_18| (0+32768))
  4243  0522  00A3               	movwf	printf@f+1
  4244  0523  3185  25A5  3183   	fcall	_printf
  4245                           
  4246                           ;main.c: 189: printf("[Dump masks and filters] @F\n");
  4247  0526  3062               	movlw	low (STR_19| (0+32768))
  4248  0527  0020               	movlb	0	; select bank0
  4249  0528  00A2               	movwf	printf@f
  4250  0529  3092               	movlw	high (STR_19| (0+32768))
  4251  052A  00A3               	movwf	printf@f+1
  4252  052B  3185  25A5  3183   	fcall	_printf
  4253                           
  4254                           ;main.c: 190: printf("[Dump registers] @d\n");
  4255  052E  30F4               	movlw	low (STR_20| (0+32768))
  4256  052F  0020               	movlb	0	; select bank0
  4257  0530  00A2               	movwf	printf@f
  4258  0531  3092               	movlw	high (STR_20| (0+32768))
  4259  0532  00A3               	movwf	printf@f+1
  4260  0533  3185  25A5  3183   	fcall	_printf
  4261                           
  4262                           ;main.c: 191: printf("[Send message] <message>\n");
  4263  0536  307F               	movlw	low (STR_21| (0+32768))
  4264  0537  0020               	movlb	0	; select bank0
  4265  0538  00A2               	movwf	printf@f
  4266  0539  3092               	movlw	high (STR_21| (0+32768))
  4267  053A  00A3               	movwf	printf@f+1
  4268  053B  3185  25A5  3183   	fcall	_printf
  4269                           
  4270                           ;main.c: 192: printf("[Send message beginning with \'@\' character] @<@message>\n");
  4271  053E  3075               	movlw	low (STR_22| (0+32768))
  4272  053F  0020               	movlb	0	; select bank0
  4273  0540  00A2               	movwf	printf@f
  4274  0541  3090               	movlw	high (STR_22| (0+32768))
  4275  0542  00A3               	movwf	printf@f+1
  4276  0543  3185  25A5  3183   	fcall	_printf
  4277                           
  4278                           ;main.c: 193: printf("[Receive message] <message> will be output\n");
  4279  0546  309C               	movlw	low (STR_23| (0+32768))
  4280  0547  0020               	movlb	0	; select bank0
  4281  0548  00A2               	movwf	printf@f
  4282  0549  3091               	movlw	high (STR_23| (0+32768))
  4283  054A  00A3               	movwf	printf@f+1
  4284  054B  3185  25A5  3183   	fcall	_printf
  4285                           
  4286                           ;main.c: 194: printf("[Show this help]: @h\n");
  4287  054E  30C9               	movlw	low (STR_24| (0+32768))
  4288  054F  0020               	movlb	0	; select bank0
  4289  0550  00A2               	movwf	printf@f
  4290  0551  3092               	movlw	high (STR_24| (0+32768))
  4291  0552  00A3               	movwf	printf@f+1
  4292  0553  3185  25A5  3183   	fcall	_printf
  4293                           
  4294                           ;main.c: 196: }
  4295                           
  4296                           ;main.c: 195: break;
  4297  0556  2B8C               	goto	L1
  4298  0557                     l3182:	
  4299  0557  0021               	movlb	1	; select bank1
  4300  0558  085C               	movf	main@cmd^(0+128),w
  4301                           
  4302                           ; Switch size 1, requested type "space"
  4303                           ; Number of cases is 12, Range of values is 64 to 118
  4304                           ; switch strategies available:
  4305                           ; Name         Instructions Cycles
  4306                           ; simple_byte           37    19 (average)
  4307                           ; direct_byte          119     9 (fixed)
  4308                           ; jumptable            263     9 (fixed)
  4309                           ;	Chosen strategy is simple_byte
  4310  0559  3A40               	xorlw	64	; case 64
  4311  055A  1903               	skipnz
  4312  055B  2CC6               	goto	l3176
  4313  055C  3A06               	xorlw	6	; case 70
  4314  055D  1903               	skipnz
  4315  055E  2CBE               	goto	l3172
  4316  055F  3A0B               	xorlw	11	; case 77
  4317  0560  1903               	skipnz
  4318  0561  2BEB               	goto	l3090
  4319  0562  3A2C               	xorlw	44	; case 97
  4320  0563  1903               	skipnz
  4321  0564  2CBA               	goto	l3170
  4322  0565  3A03               	xorlw	3	; case 98
  4323  0566  1903               	skipnz
  4324  0567  2C6A               	goto	l3152
  4325  0568  3A06               	xorlw	6	; case 100
  4326  0569  1903               	skipnz
  4327  056A  2CC2               	goto	l3174
  4328  056B  3A02               	xorlw	2	; case 102
  4329  056C  1903               	skipnz
  4330  056D  2C7C               	goto	l3158
  4331  056E  3A0E               	xorlw	14	; case 104
  4332  056F  1903               	skipnz
  4333  0570  2CD2               	goto	l3178
  4334  0571  3A01               	xorlw	1	; case 105
  4335  0572  1903               	skipnz
  4336  0573  2C01               	goto	l3102
  4337  0574  3A04               	xorlw	4	; case 109
  4338  0575  1903               	skipnz
  4339  0576  2C7C               	goto	l3158
  4340  0577  3A02               	xorlw	2	; case 111
  4341  0578  1903               	skipnz
  4342  0579  2C3A               	goto	l3124
  4343  057A  3A19               	xorlw	25	; case 118
  4344  057B  1903               	skipnz
  4345  057C  2C17               	goto	l3106
  4346  057D  2D88               	goto	l3186
  4347                           
  4348                           ;main.c: 197: } else {
  4349  057E  2B8C               	goto	L1
  4350  057F                     l3184:	
  4351                           
  4352                           ;main.c: 198: can_send(buf, idx);
  4353  057F  085D               	movf	main@idx^(0+128),w
  4354  0580  0020               	movlb	0	; select bank0
  4355  0581  00E9               	movwf	??_main
  4356  0582  0869               	movf	??_main,w
  4357  0583  00C3               	movwf	can_send@dlc
  4358  0584  30C7               	movlw	(low (main@buf| 0))& (0+255)
  4359  0585  3182  2225  3183   	fcall	_can_send
  4360  0588                     l3186:	
  4361  0588  2B8C               	goto	L1
  4362  0589                     l3188:	
  4363                           ;main.c: 202: } else if (++idx > 7 && run_mode == 0u) {
  4364                           
  4365                           ;main.c: 199: }
  4366                           ;main.c: 200: idx = 0;
  4367                           
  4368  0589  3001               	movlw	1
  4369  058A  0020               	movlb	0	; select bank0
  4370  058B  00E9               	movwf	??_main
  4371  058C  0869               	movf	??_main,w
  4372  058D  0021               	movlb	1	; select bank1
  4373  058E  07DD               	addwf	main@idx^(0+128),f
  4374  058F  3008               	movlw	8
  4375  0590  025D               	subwf	main@idx^(0+128),w
  4376  0591  1C03               	skipc
  4377  0592  2B8E               	goto	l3062
  4378  0593  085E               	movf	_run_mode^(0+128),w
  4379  0594  1D03               	btfss	3,2
  4380  0595  2B8E               	goto	l3062
  4381                           
  4382                           ;main.c: 203: buf[idx] = '\0';
  4383  0596  085D               	movf	main@idx^(0+128),w
  4384  0597  3EC7               	addlw	(low (main@buf| 0))& (0+255)
  4385  0598  0086               	movwf	6
  4386  0599  0187               	clrf	7
  4387  059A  0181               	clrf	1
  4388                           
  4389                           ;main.c: 204: can_send(buf, idx);
  4390  059B  085D               	movf	main@idx^(0+128),w
  4391  059C  0020               	movlb	0	; select bank0
  4392  059D  00E9               	movwf	??_main
  4393  059E  0869               	movf	??_main,w
  4394  059F  00C3               	movwf	can_send@dlc
  4395  05A0  30C7               	movlw	(low (main@buf| 0))& (0+255)
  4396  05A1  3182  2225  3183   	fcall	_can_send
  4397  05A4  2B8C               	goto	L1
  4398  05A5                     __end_of_main:	
  4399                           ;main.c: 205: idx = 0;
  4400                           
  4401                           
  4402                           	psect	text1
  4403  0B47                     __ptext1:	
  4404 ;; *************** function _slcan_send *****************
  4405 ;; Defined at:
  4406 ;;		line 35 in file "main.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  pbuf            1    wreg     PTR unsigned char 
  4409 ;;		 -> main@buf(16), 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  pbuf            1   50[BANK0 ] PTR unsigned char 
  4412 ;;		 -> main@buf(16), 
  4413 ;;  id              2   47[BANK0 ] unsigned int 
  4414 ;;  dlc             1   49[BANK0 ] unsigned char 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4425 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4427 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;Total ram usage:        5 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    4
  4431 ;; This function calls:
  4432 ;;		_atosid
  4433 ;;		_atoui8
  4434 ;;		_can_send
  4435 ;;		_can_set_sid
  4436 ;; This function is called by:
  4437 ;;		_main
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _slcan_send
  4443  0B47                     _slcan_send:	
  4444                           
  4445                           ;incstack = 0
  4446                           ; Regs used in _slcan_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4447                           ;slcan_send@pbuf stored from wreg
  4448  0B47  0020               	movlb	0	; select bank0
  4449  0B48  00D2               	movwf	slcan_send@pbuf
  4450                           
  4451                           ;main.c: 36: uint16_t id;
  4452                           ;main.c: 37: uint8_t dlc;
  4453                           ;main.c: 38: id = atosid(pbuf);
  4454  0B49  0852               	movf	slcan_send@pbuf,w
  4455  0B4A  318B  23FC  318B   	fcall	_atosid
  4456  0B4D  0874               	movf	?_atosid+1,w
  4457  0B4E  0020               	movlb	0	; select bank0
  4458  0B4F  00D0               	movwf	slcan_send@id+1
  4459  0B50  0873               	movf	?_atosid,w
  4460  0B51  00CF               	movwf	slcan_send@id
  4461                           
  4462                           ;main.c: 39: can_set_sid(id);
  4463  0B52  0850               	movf	slcan_send@id+1,w
  4464  0B53  00F1               	movwf	can_set_sid@can_node+1
  4465  0B54  084F               	movf	slcan_send@id,w
  4466  0B55  00F0               	movwf	can_set_sid@can_node
  4467  0B56  318A  22D7  318B   	fcall	_can_set_sid
  4468                           
  4469                           ;main.c: 40: dlc = atoui8(pbuf[3]);
  4470  0B59  0020               	movlb	0	; select bank0
  4471  0B5A  0852               	movf	slcan_send@pbuf,w
  4472  0B5B  3E03               	addlw	3
  4473  0B5C  0086               	movwf	6
  4474  0B5D  0187               	clrf	7
  4475  0B5E  0801               	movf	1,w
  4476  0B5F  318B  2321  318B   	fcall	_atoui8
  4477  0B62  0020               	movlb	0	; select bank0
  4478  0B63  00CE               	movwf	??_slcan_send
  4479  0B64  084E               	movf	??_slcan_send,w
  4480  0B65  00D1               	movwf	slcan_send@dlc
  4481                           
  4482                           ;main.c: 41: can_send(&pbuf[4], dlc);
  4483  0B66  0851               	movf	slcan_send@dlc,w
  4484  0B67  00CE               	movwf	??_slcan_send
  4485  0B68  084E               	movf	??_slcan_send,w
  4486  0B69  00C3               	movwf	can_send@dlc
  4487  0B6A  0852               	movf	slcan_send@pbuf,w
  4488  0B6B  3E04               	addlw	4
  4489  0B6C  3182  2225         	fcall	_can_send
  4490  0B6E  0008               	return
  4491  0B6F                     __end_of_slcan_send:	
  4492                           
  4493                           	psect	text2
  4494  0225                     __ptext2:	
  4495 ;; *************** function _can_send *****************
  4496 ;; Defined at:
  4497 ;;		line 195 in file "mcp2515.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  data_buf        1    wreg     PTR unsigned char 
  4500 ;;		 -> main@buf(16), 
  4501 ;;  dlc             1   35[BANK0 ] unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  4504 ;;		 -> main@buf(16), 
  4505 ;;  n               1   45[BANK0 ] unsigned char 
  4506 ;;  i               1   44[BANK0 ] unsigned char 
  4507 ;;  status          1   42[BANK0 ] unsigned char 
  4508 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  4509 ;;  len             1   40[BANK0 ] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      unsigned char 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4519 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;Total ram usage:       11 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    3
  4526 ;; This function calls:
  4527 ;;		_SPI_exchange
  4528 ;;		_printf
  4529 ;; This function is called by:
  4530 ;;		_slcan_send
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _can_send
  4537  0225                     _can_send:	
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4541                           ;can_send@data_buf stored from wreg
  4542  0225  0020               	movlb	0	; select bank0
  4543  0226  00CB               	movwf	can_send@data_buf
  4544                           
  4545                           ;mcp2515.c: 196: uint8_t i;
  4546                           ;mcp2515.c: 197: uint8_t n = 0;
  4547  0227  01CD               	clrf	can_send@n
  4548                           
  4549                           ;mcp2515.c: 199: buf[0] = 0b10100000u;
  4550  0228  30A0               	movlw	160
  4551  0229  00C4               	movwf	??_can_send
  4552  022A  0844               	movf	??_can_send,w
  4553  022B  0021               	movlb	1	; select bank1
  4554  022C  00B4               	movwf	_buf^(0+128)
  4555                           
  4556                           ;mcp2515.c: 200: buf[1] = 0x00;
  4557  022D  01B5               	clrf	(_buf^(0+128)+1)
  4558                           
  4559                           ;mcp2515.c: 201: uint8_t bytes_written = SPI_exchange(buf, 2);
  4560  022E  3002               	movlw	2
  4561  022F  0020               	movlb	0	; select bank0
  4562  0230  00C4               	movwf	??_can_send
  4563  0231  0844               	movf	??_can_send,w
  4564  0232  00F8               	movwf	SPI_exchange@len
  4565  0233  30B4               	movlw	(low (_buf| 0))& (0+255)
  4566  0234  318A  225A  3182   	fcall	_SPI_exchange
  4567  0237  0020               	movlb	0	; select bank0
  4568  0238  00C5               	movwf	??_can_send+1
  4569  0239  0845               	movf	??_can_send+1,w
  4570  023A  00C9               	movwf	can_send@bytes_written
  4571                           
  4572                           ;mcp2515.c: 202: uint8_t status = buf[1];
  4573  023B  0021               	movlb	1	; select bank1
  4574  023C  0835               	movf	(_buf^(0+128)+1),w
  4575  023D  0020               	movlb	0	; select bank0
  4576  023E  00C4               	movwf	??_can_send
  4577  023F  0844               	movf	??_can_send,w
  4578  0240  00CA               	movwf	can_send@status
  4579                           
  4580                           ;mcp2515.c: 203: if ((status & 0b01000000u) == 0) {
  4581  0241  1B4A               	btfsc	can_send@status,6
  4582  0242  2A53               	goto	l348
  4583                           
  4584                           ;mcp2515.c: 204: if (mode.debug) printf("TXB2 is idle\n");
  4585  0243  086B               	movf	_mode,w
  4586  0244  1903               	btfsc	3,2
  4587  0245  2A4D               	goto	l2586
  4588  0246  3053               	movlw	low (STR_32| (0+32768))
  4589  0247  00A2               	movwf	printf@f
  4590  0248  3094               	movlw	high (STR_32| (0+32768))
  4591  0249  00A3               	movwf	printf@f+1
  4592  024A  3185  25A5  3182   	fcall	_printf
  4593  024D                     l2586:	
  4594                           
  4595                           ;mcp2515.c: 205: n = 2;
  4596  024D  3002               	movlw	2
  4597  024E  0020               	movlb	0	; select bank0
  4598  024F  00C4               	movwf	??_can_send
  4599  0250  0844               	movf	??_can_send,w
  4600  0251  00CD               	movwf	can_send@n
  4601                           
  4602                           ;mcp2515.c: 206: } else if ((status & 0b00010000u) == 0) {
  4603  0252  2A71               	goto	l2600
  4604  0253                     l348:	
  4605  0253  1A4A               	btfsc	can_send@status,4
  4606  0254  2A63               	goto	l351
  4607                           
  4608                           ;mcp2515.c: 207: if (mode.debug) printf("TXB1 is idle\n");
  4609  0255  086B               	movf	_mode,w
  4610  0256  1903               	btfsc	3,2
  4611  0257  2A5F               	goto	l2592
  4612  0258  3045               	movlw	low (STR_33| (0+32768))
  4613  0259  00A2               	movwf	printf@f
  4614  025A  3094               	movlw	high (STR_33| (0+32768))
  4615  025B  00A3               	movwf	printf@f+1
  4616  025C  3185  25A5  3182   	fcall	_printf
  4617  025F                     l2592:	
  4618                           
  4619                           ;mcp2515.c: 208: n = 1;
  4620  025F  0020               	movlb	0	; select bank0
  4621  0260  01CD               	clrf	can_send@n
  4622  0261  0ACD               	incf	can_send@n,f
  4623                           
  4624                           ;mcp2515.c: 209: } else if ((status & 0b00000100u) == 0) {
  4625  0262  2A71               	goto	l2600
  4626  0263                     l351:	
  4627  0263  194A               	btfsc	can_send@status,2
  4628  0264  2A71               	goto	l2600
  4629                           
  4630                           ;mcp2515.c: 210: if (mode.debug) printf("TXB0 is idle\n");
  4631  0265  086B               	movf	_mode,w
  4632  0266  1903               	btfsc	3,2
  4633  0267  2A6F               	goto	l2598
  4634  0268  3037               	movlw	low (STR_34| (0+32768))
  4635  0269  00A2               	movwf	printf@f
  4636  026A  3094               	movlw	high (STR_34| (0+32768))
  4637  026B  00A3               	movwf	printf@f+1
  4638  026C  3185  25A5  3182   	fcall	_printf
  4639  026F                     l2598:	
  4640                           
  4641                           ;mcp2515.c: 211: n = 0;
  4642  026F  0020               	movlb	0	; select bank0
  4643  0270  01CD               	clrf	can_send@n
  4644  0271                     l2600:	
  4645                           
  4646                           ;mcp2515.c: 212: }
  4647                           ;mcp2515.c: 218: buf[0] = 0b01000000u + abc[n];
  4648  0271  084D               	movf	can_send@n,w
  4649  0272  3EE4               	addlw	low (_abc| (0+32768))
  4650  0273  0084               	movwf	4
  4651  0274  3094               	movlw	high (_abc| (0+32768))
  4652  0275  1803               	skipnc
  4653  0276  3E01               	addlw	1
  4654  0277  0085               	movwf	5
  4655  0278  0800               	movf	0,w	;code access
  4656  0279  3E40               	addlw	64
  4657  027A  00C4               	movwf	??_can_send
  4658  027B  0844               	movf	??_can_send,w
  4659  027C  0021               	movlb	1	; select bank1
  4660  027D  00B4               	movwf	_buf^(0+128)
  4661                           
  4662                           ;mcp2515.c: 220: buf[1] = sid.sidh;
  4663  027E  0832               	movf	_sid^(0+128),w
  4664  027F  0020               	movlb	0	; select bank0
  4665  0280  00C4               	movwf	??_can_send
  4666  0281  0844               	movf	??_can_send,w
  4667  0282  0021               	movlb	1	; select bank1
  4668  0283  00B5               	movwf	(_buf^(0+128)+1)
  4669                           
  4670                           ;mcp2515.c: 222: buf[2] = sid.sidl;
  4671  0284  0833               	movf	(_sid^(0+128)+1),w
  4672  0285  0020               	movlb	0	; select bank0
  4673  0286  00C4               	movwf	??_can_send
  4674  0287  0844               	movf	??_can_send,w
  4675  0288  0021               	movlb	1	; select bank1
  4676  0289  00B6               	movwf	(_buf^(0+128)+2)
  4677                           
  4678                           ;mcp2515.c: 224: buf[3] = 0;
  4679  028A  01B7               	clrf	(_buf^(0+128)+3)
  4680                           
  4681                           ;mcp2515.c: 226: buf[4] = 0;
  4682  028B  01B8               	clrf	(_buf^(0+128)+4)
  4683                           
  4684                           ;mcp2515.c: 228: buf[5] = dlc;
  4685  028C  0020               	movlb	0	; select bank0
  4686  028D  0843               	movf	can_send@dlc,w
  4687  028E  00C4               	movwf	??_can_send
  4688  028F  0844               	movf	??_can_send,w
  4689  0290  0021               	movlb	1	; select bank1
  4690  0291  00B9               	movwf	(_buf^(0+128)+5)
  4691                           
  4692                           ;mcp2515.c: 231: for(i=0; i<dlc; i++) {
  4693  0292  0020               	movlb	0	; select bank0
  4694  0293  01CC               	clrf	can_send@i
  4695  0294                     l2622:	
  4696  0294  0843               	movf	can_send@dlc,w
  4697  0295  024C               	subwf	can_send@i,w
  4698  0296  1803               	btfsc	3,0
  4699  0297  2AC4               	goto	l2624
  4700                           
  4701                           ;mcp2515.c: 232: buf[6u+i] = data_buf[i];
  4702  0298  084C               	movf	can_send@i,w
  4703  0299  074B               	addwf	can_send@data_buf,w
  4704  029A  00C4               	movwf	??_can_send
  4705  029B  0844               	movf	??_can_send,w
  4706  029C  0086               	movwf	6
  4707  029D  0187               	clrf	7
  4708  029E  0801               	movf	1,w
  4709  029F  00C5               	movwf	??_can_send+1
  4710  02A0  084C               	movf	can_send@i,w
  4711  02A1  3E06               	addlw	6
  4712  02A2  3EB4               	addlw	(low (_buf| 0))& (0+255)
  4713  02A3  0086               	movwf	6
  4714  02A4  0187               	clrf	7
  4715  02A5  0845               	movf	??_can_send+1,w
  4716  02A6  0081               	movwf	1
  4717                           
  4718                           ;mcp2515.c: 233: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4719  02A7  086B               	movf	_mode,w
  4720  02A8  1903               	btfsc	3,2
  4721  02A9  2ABE               	goto	l2620
  4722  02AA  301E               	movlw	low (STR_35| (0+32768))
  4723  02AB  00A2               	movwf	printf@f
  4724  02AC  3093               	movlw	high (STR_35| (0+32768))
  4725  02AD  00A3               	movwf	printf@f+1
  4726  02AE  084C               	movf	can_send@i,w
  4727  02AF  074B               	addwf	can_send@data_buf,w
  4728  02B0  00C4               	movwf	??_can_send
  4729  02B1  0844               	movf	??_can_send,w
  4730  02B2  0086               	movwf	6
  4731  02B3  0187               	clrf	7
  4732  02B4  0801               	movf	1,w
  4733  02B5  00C5               	movwf	??_can_send+1
  4734  02B6  01C6               	clrf	??_can_send+2
  4735  02B7  0845               	movf	??_can_send+1,w
  4736  02B8  00A4               	movwf	?_printf+2
  4737  02B9  0846               	movf	??_can_send+2,w
  4738  02BA  00A5               	movwf	?_printf+3
  4739  02BB  3185  25A5  3182   	fcall	_printf
  4740  02BE                     l2620:	
  4741  02BE  3001               	movlw	1
  4742  02BF  0020               	movlb	0	; select bank0
  4743  02C0  00C4               	movwf	??_can_send
  4744  02C1  0844               	movf	??_can_send,w
  4745  02C2  07CC               	addwf	can_send@i,f
  4746  02C3  2A94               	goto	l2622
  4747  02C4                     l2624:	
  4748                           
  4749                           ;mcp2515.c: 234: }
  4750                           ;mcp2515.c: 237: uint8_t len = 6u + dlc;
  4751  02C4  0843               	movf	can_send@dlc,w
  4752  02C5  3E06               	addlw	6
  4753  02C6  00C4               	movwf	??_can_send
  4754  02C7  0844               	movf	??_can_send,w
  4755  02C8  00C8               	movwf	can_send@len
  4756                           
  4757                           ;mcp2515.c: 238: uint8_t bytes_written = SPI_exchange(buf, len);
  4758  02C9  0848               	movf	can_send@len,w
  4759  02CA  00C4               	movwf	??_can_send
  4760  02CB  0844               	movf	??_can_send,w
  4761  02CC  00F8               	movwf	SPI_exchange@len
  4762  02CD  30B4               	movlw	(low (_buf| 0))& (0+255)
  4763  02CE  318A  225A  3182   	fcall	_SPI_exchange
  4764  02D1  0020               	movlb	0	; select bank0
  4765  02D2  00C5               	movwf	??_can_send+1
  4766  02D3  0845               	movf	??_can_send+1,w
  4767  02D4  00C9               	movwf	can_send@bytes_written
  4768                           
  4769                           ;mcp2515.c: 240: buf[0] = 0b00000011u;
  4770  02D5  3003               	movlw	3
  4771  02D6  00C4               	movwf	??_can_send
  4772  02D7  0844               	movf	??_can_send,w
  4773  02D8  0021               	movlb	1	; select bank1
  4774  02D9  00B4               	movwf	_buf^(0+128)
  4775                           
  4776                           ;mcp2515.c: 241: buf[1] = txbnsidh[n];
  4777  02DA  0020               	movlb	0	; select bank0
  4778  02DB  084D               	movf	can_send@n,w
  4779  02DC  3EE1               	addlw	low (_txbnsidh| (0+32768))
  4780  02DD  0084               	movwf	4
  4781  02DE  3094               	movlw	high (_txbnsidh| (0+32768))
  4782  02DF  1803               	skipnc
  4783  02E0  3E01               	addlw	1
  4784  02E1  0085               	movwf	5
  4785  02E2  0800               	movf	0,w	;code access
  4786  02E3  00C4               	movwf	??_can_send
  4787  02E4  0844               	movf	??_can_send,w
  4788  02E5  0021               	movlb	1	; select bank1
  4789  02E6  00B5               	movwf	(_buf^(0+128)+1)
  4790                           
  4791                           ;mcp2515.c: 242: buf[2] = 0x00;
  4792  02E7  01B6               	clrf	(_buf^(0+128)+2)
  4793                           
  4794                           ;mcp2515.c: 243: SPI_exchange(buf, 3);
  4795  02E8  3003               	movlw	3
  4796  02E9  0020               	movlb	0	; select bank0
  4797  02EA  00C4               	movwf	??_can_send
  4798  02EB  0844               	movf	??_can_send,w
  4799  02EC  00F8               	movwf	SPI_exchange@len
  4800  02ED  30B4               	movlw	(low (_buf| 0))& (0+255)
  4801  02EE  318A  225A  3182   	fcall	_SPI_exchange
  4802                           
  4803                           ;mcp2515.c: 245: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  4804  02F1  0020               	movlb	0	; select bank0
  4805  02F2  086B               	movf	_mode,w
  4806  02F3  1903               	btfsc	3,2
  4807  02F4  2B0C               	goto	l2640
  4808  02F5  3077               	movlw	low (STR_36| (0+32768))
  4809  02F6  00A2               	movwf	printf@f
  4810  02F7  3093               	movlw	high (STR_36| (0+32768))
  4811  02F8  00A3               	movwf	printf@f+1
  4812  02F9  084D               	movf	can_send@n,w
  4813  02FA  00C4               	movwf	??_can_send
  4814  02FB  01C5               	clrf	??_can_send+1
  4815  02FC  0844               	movf	??_can_send,w
  4816  02FD  00A4               	movwf	?_printf+2
  4817  02FE  0845               	movf	??_can_send+1,w
  4818  02FF  00A5               	movwf	?_printf+3
  4819  0300  0021               	movlb	1	; select bank1
  4820  0301  0836               	movf	(_buf^(0+128)+2),w
  4821  0302  0020               	movlb	0	; select bank0
  4822  0303  00C6               	movwf	??_can_send+2
  4823  0304  01C7               	clrf	??_can_send+3
  4824  0305  0846               	movf	??_can_send+2,w
  4825  0306  00A6               	movwf	?_printf+4
  4826  0307  0847               	movf	??_can_send+3,w
  4827  0308  00A7               	movwf	?_printf+5
  4828  0309  3185  25A5  3182   	fcall	_printf
  4829  030C                     l2640:	
  4830                           
  4831                           ;mcp2515.c: 246: buf[0] = 0b00000011u;
  4832  030C  3003               	movlw	3
  4833  030D  0020               	movlb	0	; select bank0
  4834  030E  00C4               	movwf	??_can_send
  4835  030F  0844               	movf	??_can_send,w
  4836  0310  0021               	movlb	1	; select bank1
  4837  0311  00B4               	movwf	_buf^(0+128)
  4838                           
  4839                           ;mcp2515.c: 247: buf[1] = txbnsidh[n] + 1u;
  4840  0312  0020               	movlb	0	; select bank0
  4841  0313  084D               	movf	can_send@n,w
  4842  0314  3EE1               	addlw	low (_txbnsidh| (0+32768))
  4843  0315  0084               	movwf	4
  4844  0316  3094               	movlw	high (_txbnsidh| (0+32768))
  4845  0317  1803               	skipnc
  4846  0318  3E01               	addlw	1
  4847  0319  0085               	movwf	5
  4848  031A  0800               	movf	0,w	;code access
  4849  031B  3E01               	addlw	1
  4850  031C  00C4               	movwf	??_can_send
  4851  031D  0844               	movf	??_can_send,w
  4852  031E  0021               	movlb	1	; select bank1
  4853  031F  00B5               	movwf	(_buf^(0+128)+1)
  4854                           
  4855                           ;mcp2515.c: 248: buf[2] = 0x00;
  4856  0320  01B6               	clrf	(_buf^(0+128)+2)
  4857                           
  4858                           ;mcp2515.c: 249: SPI_exchange(buf, 3);
  4859  0321  3003               	movlw	3
  4860  0322  0020               	movlb	0	; select bank0
  4861  0323  00C4               	movwf	??_can_send
  4862  0324  0844               	movf	??_can_send,w
  4863  0325  00F8               	movwf	SPI_exchange@len
  4864  0326  30B4               	movlw	(low (_buf| 0))& (0+255)
  4865  0327  318A  225A  3182   	fcall	_SPI_exchange
  4866                           
  4867                           ;mcp2515.c: 251: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  4868  032A  0020               	movlb	0	; select bank0
  4869  032B  086B               	movf	_mode,w
  4870  032C  1903               	btfsc	3,2
  4871  032D  2B45               	goto	l2652
  4872  032E  3099               	movlw	low (STR_37| (0+32768))
  4873  032F  00A2               	movwf	printf@f
  4874  0330  3093               	movlw	high (STR_37| (0+32768))
  4875  0331  00A3               	movwf	printf@f+1
  4876  0332  084D               	movf	can_send@n,w
  4877  0333  00C4               	movwf	??_can_send
  4878  0334  01C5               	clrf	??_can_send+1
  4879  0335  0844               	movf	??_can_send,w
  4880  0336  00A4               	movwf	?_printf+2
  4881  0337  0845               	movf	??_can_send+1,w
  4882  0338  00A5               	movwf	?_printf+3
  4883  0339  0021               	movlb	1	; select bank1
  4884  033A  0836               	movf	(_buf^(0+128)+2),w
  4885  033B  0020               	movlb	0	; select bank0
  4886  033C  00C6               	movwf	??_can_send+2
  4887  033D  01C7               	clrf	??_can_send+3
  4888  033E  0846               	movf	??_can_send+2,w
  4889  033F  00A6               	movwf	?_printf+4
  4890  0340  0847               	movf	??_can_send+3,w
  4891  0341  00A7               	movwf	?_printf+5
  4892  0342  3185  25A5  3182   	fcall	_printf
  4893  0345                     l2652:	
  4894                           
  4895                           ;mcp2515.c: 253: if (bytes_written == len) {
  4896  0345  0020               	movlb	0	; select bank0
  4897  0346  0849               	movf	can_send@bytes_written,w
  4898  0347  0648               	xorwf	can_send@len,w
  4899  0348  1D03               	skipz
  4900  0349  0008               	return
  4901                           
  4902                           ;mcp2515.c: 255: buf[0] = 0b10000000u + (0b00000001u << n);
  4903  034A  3001               	movlw	1
  4904  034B  00C4               	movwf	??_can_send
  4905  034C  0A4D               	incf	can_send@n,w
  4906  034D  2B4F               	goto	u2264
  4907  034E                     u2265:	
  4908  034E  35C4               	lslf	??_can_send,f
  4909  034F                     u2264:	
  4910  034F  0B89               	decfsz	9,f
  4911  0350  2B4E               	goto	u2265
  4912  0351  0844               	movf	??_can_send,w
  4913  0352  3E80               	addlw	128
  4914  0353  00C5               	movwf	??_can_send+1
  4915  0354  0845               	movf	??_can_send+1,w
  4916  0355  0021               	movlb	1	; select bank1
  4917  0356  00B4               	movwf	_buf^(0+128)
  4918                           
  4919                           ;mcp2515.c: 256: bytes_written = SPI_exchange(buf, 1);
  4920  0357  01F8               	clrf	SPI_exchange@len
  4921  0358  0AF8               	incf	SPI_exchange@len,f
  4922  0359  30B4               	movlw	(low (_buf| 0))& (0+255)
  4923  035A  318A  225A  3182   	fcall	_SPI_exchange
  4924  035D  0020               	movlb	0	; select bank0
  4925  035E  00C4               	movwf	??_can_send
  4926  035F  0844               	movf	??_can_send,w
  4927  0360  00C9               	movwf	can_send@bytes_written
  4928                           
  4929                           ;mcp2515.c: 257: if (bytes_written == 1) {
  4930  0361  0349               	decf	can_send@bytes_written,w
  4931  0362  1D03               	btfss	3,2
  4932  0363  0008               	return
  4933                           
  4934                           ;mcp2515.c: 258: if (mode.debug) printf("Message sent: %s\n", data_buf);
  4935  0364  086B               	movf	_mode,w
  4936  0365  1903               	btfsc	3,2
  4937  0366  0008               	return
  4938  0367  3032               	movlw	low (STR_38| (0+32768))
  4939  0368  00A2               	movwf	printf@f
  4940  0369  3093               	movlw	high (STR_38| (0+32768))
  4941  036A  00A3               	movwf	printf@f+1
  4942  036B  084B               	movf	can_send@data_buf,w
  4943  036C  00A4               	movwf	low ((?_printf| 0+2))
  4944  036D  3000               	movlw	0
  4945  036E  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4946  036F  3185  25A5         	fcall	_printf
  4947                           
  4948                           ;mcp2515.c: 259: return 1;
  4949                           ;	Return value of _can_send is never used
  4950  0371  0008               	return
  4951  0372                     __end_of_can_send:	
  4952                           ;mcp2515.c: 260: }
  4953                           ;mcp2515.c: 261: }
  4954                           ;mcp2515.c: 263: return 0;
  4955                           ;	Return value of _can_send is never used
  4956                           
  4957                           
  4958                           	psect	text3
  4959  0BFC                     __ptext3:	
  4960 ;; *************** function _atosid *****************
  4961 ;; Defined at:
  4962 ;;		line 27 in file "hexascii.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  ascii           1    wreg     PTR unsigned char 
  4965 ;;		 -> main@buf(16), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  ascii           1    8[BANK0 ] PTR unsigned char 
  4968 ;;		 -> main@buf(16), 
  4969 ;;  id              2    6[BANK0 ] unsigned int 
  4970 ;;  c               2    4[BANK0 ] unsigned int 
  4971 ;;  b               2    2[BANK0 ] unsigned int 
  4972 ;;  a               2    0[BANK0 ] unsigned int 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  2    3[COMMON] unsigned int 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:       17 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    1
  4989 ;; This function calls:
  4990 ;;		_atoui8
  4991 ;; This function is called by:
  4992 ;;		_slcan_send
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _atosid
  4998  0BFC                     _atosid:	
  4999                           
  5000                           ;incstack = 0
  5001                           ; Regs used in _atosid: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5002                           ;atosid@ascii stored from wreg
  5003  0BFC  0020               	movlb	0	; select bank0
  5004  0BFD  00A8               	movwf	atosid@ascii
  5005                           
  5006                           ;hexascii.c: 29: uint16_t a = (uint16_t)(atoui8(ascii[0]));
  5007  0BFE  0828               	movf	atosid@ascii,w
  5008  0BFF  0086               	movwf	6
  5009  0C00  0187               	clrf	7
  5010  0C01  0801               	movf	1,w
  5011  0C02  318B  2321  318B   	fcall	_atoui8
  5012  0C05  00F5               	movwf	??_atosid
  5013  0C06  01F6               	clrf	??_atosid+1
  5014  0C07  0875               	movf	??_atosid,w
  5015  0C08  0020               	movlb	0	; select bank0
  5016  0C09  00A0               	movwf	atosid@a
  5017  0C0A  0876               	movf	??_atosid+1,w
  5018  0C0B  00A1               	movwf	atosid@a+1
  5019                           
  5020                           ;hexascii.c: 30: uint16_t b = (uint16_t)(atoui8(ascii[1]));
  5021  0C0C  0A28               	incf	atosid@ascii,w
  5022  0C0D  0086               	movwf	6
  5023  0C0E  0187               	clrf	7
  5024  0C0F  0801               	movf	1,w
  5025  0C10  318B  2321  318B   	fcall	_atoui8
  5026  0C13  00F5               	movwf	??_atosid
  5027  0C14  01F6               	clrf	??_atosid+1
  5028  0C15  0875               	movf	??_atosid,w
  5029  0C16  0020               	movlb	0	; select bank0
  5030  0C17  00A2               	movwf	atosid@b
  5031  0C18  0876               	movf	??_atosid+1,w
  5032  0C19  00A3               	movwf	atosid@b+1
  5033                           
  5034                           ;hexascii.c: 31: uint16_t c = (uint16_t)(atoui8(ascii[2]));
  5035  0C1A  0828               	movf	atosid@ascii,w
  5036  0C1B  3E02               	addlw	2
  5037  0C1C  0086               	movwf	6
  5038  0C1D  0187               	clrf	7
  5039  0C1E  0801               	movf	1,w
  5040  0C1F  318B  2321         	fcall	_atoui8
  5041  0C21  00F5               	movwf	??_atosid
  5042  0C22  01F6               	clrf	??_atosid+1
  5043  0C23  0875               	movf	??_atosid,w
  5044  0C24  0020               	movlb	0	; select bank0
  5045  0C25  00A4               	movwf	atosid@c
  5046  0C26  0876               	movf	??_atosid+1,w
  5047  0C27  00A5               	movwf	atosid@c+1
  5048                           
  5049                           ;hexascii.c: 32: uint16_t id = a * 0x100u + b * 0x10u + c;
  5050  0C28  0823               	movf	atosid@b+1,w
  5051  0C29  00F6               	movwf	??_atosid+1
  5052  0C2A  0822               	movf	atosid@b,w
  5053  0C2B  00F5               	movwf	??_atosid
  5054  0C2C  0EF5               	swapf	??_atosid,f
  5055  0C2D  0EF6               	swapf	??_atosid+1,f
  5056  0C2E  30F0               	movlw	240
  5057  0C2F  05F6               	andwf	??_atosid+1,f
  5058  0C30  0875               	movf	??_atosid,w
  5059  0C31  390F               	andlw	15
  5060  0C32  04F6               	iorwf	??_atosid+1,f
  5061  0C33  30F0               	movlw	240
  5062  0C34  05F5               	andwf	??_atosid,f
  5063  0C35  0820               	movf	atosid@a,w
  5064  0C36  00F8               	movwf	??_atosid+3
  5065  0C37  01F7               	clrf	??_atosid+2
  5066  0C38  0875               	movf	??_atosid,w
  5067  0C39  0777               	addwf	??_atosid+2,w
  5068  0C3A  00F9               	movwf	??_atosid+4
  5069  0C3B  0876               	movf	??_atosid+1,w
  5070  0C3C  3D78               	addwfc	??_atosid+3,w
  5071  0C3D  00FA               	movwf	??_atosid+5
  5072  0C3E  0824               	movf	atosid@c,w
  5073  0C3F  0779               	addwf	??_atosid+4,w
  5074  0C40  00A6               	movwf	atosid@id
  5075  0C41  0825               	movf	atosid@c+1,w
  5076  0C42  3D7A               	addwfc	??_atosid+5,w
  5077  0C43  00A7               	movwf	atosid@id+1
  5078                           
  5079                           ;hexascii.c: 33: return id;
  5080  0C44  0827               	movf	atosid@id+1,w
  5081  0C45  00F4               	movwf	?_atosid+1
  5082  0C46  0826               	movf	atosid@id,w
  5083  0C47  00F3               	movwf	?_atosid
  5084  0C48  0008               	return
  5085  0C49                     __end_of_atosid:	
  5086                           
  5087                           	psect	text4
  5088  0B21                     __ptext4:	
  5089 ;; *************** function _atoui8 *****************
  5090 ;; Defined at:
  5091 ;;		line 14 in file "hexascii.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  ascii           1    wreg     unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  ascii           1    2[COMMON] unsigned char 
  5096 ;;  minus           1    1[COMMON] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      unsigned char 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        3 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		_slcan_send
  5116 ;;		_atosid
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _atoui8
  5122  0B21                     _atoui8:	
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _atoui8: [wreg+status,2+status,0]
  5126                           ;atoui8@ascii stored from wreg
  5127  0B21  00F2               	movwf	atoui8@ascii
  5128                           
  5129                           ;hexascii.c: 15: uint8_t minus = 0;
  5130  0B22  01F1               	clrf	atoui8@minus
  5131                           
  5132                           ;hexascii.c: 16: if (ascii >= 0x30u && ascii <= 0x39u) {
  5133  0B23  3030               	movlw	48
  5134  0B24  0272               	subwf	atoui8@ascii,w
  5135  0B25  1C03               	skipc
  5136  0B26  2B2D               	goto	l2474
  5137  0B27  303A               	movlw	58
  5138  0B28  0272               	subwf	atoui8@ascii,w
  5139  0B29  1803               	skipnc
  5140  0B2A  2B2D               	goto	l2474
  5141                           
  5142                           ;hexascii.c: 17: minus = 0x30u;
  5143  0B2B  3030               	movlw	48
  5144  0B2C  2B40               	goto	L6
  5145  0B2D                     l2474:	
  5146                           ;hexascii.c: 18: } else if (ascii >= 0x41u && ascii <= 0x46u) {
  5147                           
  5148  0B2D  3041               	movlw	65
  5149  0B2E  0272               	subwf	atoui8@ascii,w
  5150  0B2F  1C03               	skipc
  5151  0B30  2B37               	goto	l2480
  5152  0B31  3047               	movlw	71
  5153  0B32  0272               	subwf	atoui8@ascii,w
  5154  0B33  1803               	skipnc
  5155  0B34  2B37               	goto	l2480
  5156                           
  5157                           ;hexascii.c: 19: minus = 0x41u - 10;
  5158  0B35  3037               	movlw	55
  5159  0B36  2B40               	goto	L6
  5160  0B37                     l2480:	
  5161                           ;hexascii.c: 20: } else if (ascii >= 0x61u && ascii <= 0x66u) {
  5162                           
  5163  0B37  3061               	movlw	97
  5164  0B38  0272               	subwf	atoui8@ascii,w
  5165  0B39  1C03               	skipc
  5166  0B3A  2B43               	goto	l2486
  5167  0B3B  3067               	movlw	103
  5168  0B3C  0272               	subwf	atoui8@ascii,w
  5169  0B3D  1803               	skipnc
  5170  0B3E  2B43               	goto	l2486
  5171                           
  5172                           ;hexascii.c: 21: minus = 0x61u - 10;
  5173  0B3F  3057               	movlw	87
  5174  0B40                     L6:	
  5175  0B40  00F0               	movwf	??_atoui8
  5176  0B41  0870               	movf	??_atoui8,w
  5177  0B42  00F1               	movwf	atoui8@minus
  5178  0B43                     l2486:	
  5179                           
  5180                           ;hexascii.c: 23: }
  5181                           ;hexascii.c: 24: return (uint8_t)(ascii - minus);
  5182  0B43  0371               	decf	atoui8@minus,w
  5183  0B44  3AFF               	xorlw	255
  5184  0B45  0772               	addwf	atoui8@ascii,w
  5185  0B46  0008               	return
  5186  0B47                     __end_of_atoui8:	
  5187                           
  5188                           	psect	text5
  5189  0C97                     __ptext5:	
  5190 ;; *************** function _can_status_check *****************
  5191 ;; Defined at:
  5192 ;;		line 269 in file "mcp2515.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  status          1   72[BANK0 ] unsigned char 
  5197 ;;  bytes_writte    1   71[BANK0 ] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  1    wreg      unsigned char 
  5200 ;; Registers used:
  5201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;Total ram usage:        4 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    5
  5214 ;; This function calls:
  5215 ;;		_SPI_exchange
  5216 ;;		_printf
  5217 ;;		_receive
  5218 ;;		_txf_clear
  5219 ;; This function is called by:
  5220 ;;		_main
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           
  5225                           ;psect for function _can_status_check
  5226  0C97                     _can_status_check:	
  5227                           
  5228                           ;mcp2515.c: 271: buf[0] = 0b10100000u;
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5232  0C97  30A0               	movlw	160
  5233  0C98  0020               	movlb	0	; select bank0
  5234  0C99  00E5               	movwf	??_can_status_check
  5235  0C9A  0865               	movf	??_can_status_check,w
  5236  0C9B  0021               	movlb	1	; select bank1
  5237  0C9C  00B4               	movwf	_buf^(0+128)
  5238                           
  5239                           ;mcp2515.c: 272: buf[1] = 0x00;
  5240  0C9D  01B5               	clrf	(_buf^(0+128)+1)
  5241                           
  5242                           ;mcp2515.c: 273: uint8_t bytes_written = SPI_exchange(buf, 2);
  5243  0C9E  3002               	movlw	2
  5244  0C9F  0020               	movlb	0	; select bank0
  5245  0CA0  00E5               	movwf	??_can_status_check
  5246  0CA1  0865               	movf	??_can_status_check,w
  5247  0CA2  00F8               	movwf	SPI_exchange@len
  5248  0CA3  30B4               	movlw	(low (_buf| 0))& (0+255)
  5249  0CA4  318A  225A  318C   	fcall	_SPI_exchange
  5250  0CA7  0020               	movlb	0	; select bank0
  5251  0CA8  00E6               	movwf	??_can_status_check+1
  5252  0CA9  0866               	movf	??_can_status_check+1,w
  5253  0CAA  00E7               	movwf	can_status_check@bytes_written
  5254                           
  5255                           ;mcp2515.c: 274: uint8_t status = buf[1];
  5256  0CAB  0021               	movlb	1	; select bank1
  5257  0CAC  0835               	movf	(_buf^(0+128)+1),w
  5258  0CAD  0020               	movlb	0	; select bank0
  5259  0CAE  00E5               	movwf	??_can_status_check
  5260  0CAF  0865               	movf	??_can_status_check,w
  5261  0CB0  00E8               	movwf	can_status_check@status
  5262                           
  5263                           ;mcp2515.c: 275: if (status == 0x00) {
  5264  0CB1  0868               	movf	can_status_check@status,w
  5265  0CB2  1D03               	btfss	3,2
  5266  0CB3  2CB6               	goto	l368
  5267                           
  5268                           ;mcp2515.c: 276: return 1;
  5269  0CB4  3001               	movlw	1
  5270  0CB5  0008               	return
  5271  0CB6                     l368:	
  5272                           ;mcp2515.c: 277: } else if ((status & 0b00000010u) > 0) {
  5273                           
  5274  0CB6  1CE8               	btfss	can_status_check@status,1
  5275  0CB7  2CC7               	goto	l371
  5276                           
  5277                           ;mcp2515.c: 278: if (mode.debug) printf("RX1IF is on\n");
  5278  0CB8  086B               	movf	_mode,w
  5279  0CB9  1903               	btfsc	3,2
  5280  0CBA  2CC2               	goto	l372
  5281  0CBB  306E               	movlw	low (STR_39| (0+32768))
  5282  0CBC  00A2               	movwf	printf@f
  5283  0CBD  3094               	movlw	high (STR_39| (0+32768))
  5284  0CBE  00A3               	movwf	printf@f+1
  5285  0CBF  3185  25A5  318C   	fcall	_printf
  5286  0CC2                     l372:	
  5287                           
  5288                           ;mcp2515.c: 279: receive(1);
  5289  0CC2  3001               	movlw	1
  5290  0CC3  318F  274B  318C   	fcall	_receive
  5291                           
  5292                           ;mcp2515.c: 280: } else if ((status & 0b00000001u) > 0) {
  5293  0CC6  2CE6               	goto	l2852
  5294  0CC7                     l371:	
  5295  0CC7  1C68               	btfss	can_status_check@status,0
  5296  0CC8  2CD8               	goto	l374
  5297                           
  5298                           ;mcp2515.c: 281: if (mode.debug) printf("RX0IF is on\n");
  5299  0CC9  086B               	movf	_mode,w
  5300  0CCA  1903               	btfsc	3,2
  5301  0CCB  2CD3               	goto	l375
  5302  0CCC  3061               	movlw	low (STR_40| (0+32768))
  5303  0CCD  00A2               	movwf	printf@f
  5304  0CCE  3094               	movlw	high (STR_40| (0+32768))
  5305  0CCF  00A3               	movwf	printf@f+1
  5306  0CD0  3185  25A5  318C   	fcall	_printf
  5307  0CD3                     l375:	
  5308                           
  5309                           ;mcp2515.c: 282: receive(0);
  5310  0CD3  3000               	movlw	0
  5311  0CD4  318F  274B  318C   	fcall	_receive
  5312                           
  5313                           ;mcp2515.c: 283: } else if ((status & 0b00001000u) > 0) {
  5314  0CD7  2CE6               	goto	l2852
  5315  0CD8                     l374:	
  5316  0CD8  1DE8               	btfss	can_status_check@status,3
  5317  0CD9  2CDC               	goto	l377
  5318                           
  5319                           ;mcp2515.c: 284: txf_clear(0);
  5320  0CDA  3000               	movlw	0
  5321  0CDB  2CE3               	goto	L7
  5322  0CDC                     l377:	
  5323                           ;mcp2515.c: 285: } else if ((status & 0b00100000u) > 0) {
  5324                           
  5325  0CDC  1EE8               	btfss	can_status_check@status,5
  5326  0CDD  2CE0               	goto	l379
  5327                           
  5328                           ;mcp2515.c: 286: txf_clear(1);
  5329  0CDE  3001               	movlw	1
  5330  0CDF  2CE3               	goto	L7
  5331  0CE0                     l379:	
  5332                           ;mcp2515.c: 287: } else if ((status & 0b10000000u) > 0) {
  5333                           
  5334  0CE0  1FE8               	btfss	can_status_check@status,7
  5335  0CE1  2CE6               	goto	l2852
  5336                           
  5337                           ;mcp2515.c: 288: txf_clear(2);
  5338  0CE2  3002               	movlw	2
  5339  0CE3                     L7:	
  5340  0CE3  318B  239B  318C   	fcall	_txf_clear
  5341  0CE6                     l2852:	
  5342                           
  5343                           ;mcp2515.c: 289: }
  5344                           ;mcp2515.c: 290: if ((status & 0b00010000u) > 0) {
  5345  0CE6  0020               	movlb	0	; select bank0
  5346  0CE7  1E68               	btfss	can_status_check@status,4
  5347  0CE8  2CEB               	goto	l2860
  5348                           
  5349                           ;mcp2515.c: 291: return 0;
  5350  0CE9  3000               	movlw	0
  5351                           
  5352                           ;mcp2515.c: 292: } else {
  5353  0CEA  0008               	return
  5354  0CEB                     l2860:	
  5355                           
  5356                           ;mcp2515.c: 293: return 1;
  5357  0CEB  3001               	movlw	1
  5358  0CEC  0008               	return
  5359  0CED                     __end_of_can_status_check:	
  5360                           
  5361                           	psect	text6
  5362  0B9B                     __ptext6:	
  5363 ;; *************** function _txf_clear *****************
  5364 ;; Defined at:
  5365 ;;		line 149 in file "mcp2515.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  n               1    wreg     unsigned char 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  n               1    4[BANK0 ] unsigned char 
  5370 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  5371 ;;  mask            1    2[BANK0 ] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      unsigned char 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;Total ram usage:        5 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    3
  5388 ;; This function calls:
  5389 ;;		_SPI_exchange
  5390 ;; This function is called by:
  5391 ;;		_can_status_check
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _txf_clear
  5397  0B9B                     _txf_clear:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           ;txf_clear@n stored from wreg
  5402  0B9B  0020               	movlb	0	; select bank0
  5403  0B9C  00A4               	movwf	txf_clear@n
  5404                           
  5405                           ;mcp2515.c: 150: uint8_t mask = 0b00000001u << (n + 2);
  5406  0B9D  3001               	movlw	1
  5407  0B9E  00A0               	movwf	??_txf_clear
  5408  0B9F  0824               	movf	txf_clear@n,w
  5409  0BA0  3E02               	addlw	2
  5410  0BA1  0A89               	incf	9,f
  5411  0BA2  2BA4               	goto	u2324
  5412  0BA3                     u2325:	
  5413  0BA3  35A0               	lslf	??_txf_clear,f
  5414  0BA4                     u2324:	
  5415  0BA4  0B89               	decfsz	9,f
  5416  0BA5  2BA3               	goto	u2325
  5417  0BA6  0820               	movf	??_txf_clear,w
  5418  0BA7  00A1               	movwf	??_txf_clear+1
  5419  0BA8  0821               	movf	??_txf_clear+1,w
  5420  0BA9  00A2               	movwf	txf_clear@mask
  5421                           
  5422                           ;mcp2515.c: 151: buf[0] =0b00000101u;
  5423  0BAA  3005               	movlw	5
  5424  0BAB  00A0               	movwf	??_txf_clear
  5425  0BAC  0820               	movf	??_txf_clear,w
  5426  0BAD  0021               	movlb	1	; select bank1
  5427  0BAE  00B4               	movwf	_buf^(0+128)
  5428                           
  5429                           ;mcp2515.c: 152: buf[1] = 0x2c;
  5430  0BAF  302C               	movlw	44
  5431  0BB0  0020               	movlb	0	; select bank0
  5432  0BB1  00A0               	movwf	??_txf_clear
  5433  0BB2  0820               	movf	??_txf_clear,w
  5434  0BB3  0021               	movlb	1	; select bank1
  5435  0BB4  00B5               	movwf	(_buf^(0+128)+1)
  5436                           
  5437                           ;mcp2515.c: 153: buf[2] = mask;
  5438  0BB5  0020               	movlb	0	; select bank0
  5439  0BB6  0822               	movf	txf_clear@mask,w
  5440  0BB7  00A0               	movwf	??_txf_clear
  5441  0BB8  0820               	movf	??_txf_clear,w
  5442  0BB9  0021               	movlb	1	; select bank1
  5443  0BBA  00B6               	movwf	(_buf^(0+128)+2)
  5444                           
  5445                           ;mcp2515.c: 154: buf[3] = 0x00;
  5446  0BBB  01B7               	clrf	(_buf^(0+128)+3)
  5447                           
  5448                           ;mcp2515.c: 155: uint8_t bytes_written = SPI_exchange(buf, 4);
  5449  0BBC  3004               	movlw	4
  5450  0BBD  0020               	movlb	0	; select bank0
  5451  0BBE  00A0               	movwf	??_txf_clear
  5452  0BBF  0820               	movf	??_txf_clear,w
  5453  0BC0  00F8               	movwf	SPI_exchange@len
  5454  0BC1  30B4               	movlw	(low (_buf| 0))& (0+255)
  5455  0BC2  318A  225A         	fcall	_SPI_exchange
  5456  0BC4  0020               	movlb	0	; select bank0
  5457  0BC5  00A1               	movwf	??_txf_clear+1
  5458  0BC6  0821               	movf	??_txf_clear+1,w
  5459  0BC7  00A3               	movwf	txf_clear@bytes_written
  5460                           
  5461                           ;mcp2515.c: 159: return 0;
  5462                           ;	Return value of _txf_clear is never used
  5463                           
  5464                           ;mcp2515.c: 158: } else {
  5465                           
  5466                           ;mcp2515.c: 157: return 1;
  5467                           ;	Return value of _txf_clear is never used
  5468  0BC8  0008               	return
  5469  0BC9                     __end_of_txf_clear:	
  5470                           
  5471                           	psect	text7
  5472  0F4B                     __ptext7:	
  5473 ;; *************** function _receive *****************
  5474 ;; Defined at:
  5475 ;;		line 166 in file "mcp2515.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  n               1    wreg     unsigned char 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  n               1   68[BANK0 ] unsigned char 
  5480 ;;  rx_buf         15   49[BANK0 ] unsigned char [15]
  5481 ;;  id              2   65[BANK0 ] unsigned int 
  5482 ;;  dlc             1   67[BANK0 ] unsigned char 
  5483 ;;  pbuf            1   64[BANK0 ] PTR unsigned char 
  5484 ;;		 -> receive@rx_buf(15), 
  5485 ;;  bytes_read      1   48[BANK0 ] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:       26 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    4
  5502 ;; This function calls:
  5503 ;;		Absolute function
  5504 ;;		_SPI_exchange
  5505 ;;		_printf
  5506 ;;		_receive_handler
  5507 ;; This function is called by:
  5508 ;;		_can_status_check
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _receive
  5514  0F4B                     _receive:	
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5518                           ;receive@n stored from wreg
  5519  0F4B  0020               	movlb	0	; select bank0
  5520  0F4C  00E4               	movwf	receive@n
  5521                           
  5522                           ;mcp2515.c: 170: uint8_t rx_buf[15];
  5523                           ;mcp2515.c: 173: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  5524  0F4D  0864               	movf	receive@n,w
  5525  0F4E  3EEA               	addlw	low (_nm| (0+32768))
  5526  0F4F  0084               	movwf	4
  5527  0F50  3094               	movlw	high (_nm| (0+32768))
  5528  0F51  1803               	skipnc
  5529  0F52  3E01               	addlw	1
  5530  0F53  0085               	movwf	5
  5531  0F54  0800               	movf	0,w	;code access
  5532  0F55  0709               	addwf	9,w
  5533  0F56  3E90               	addlw	144
  5534  0F57  00CB               	movwf	??_receive
  5535  0F58  084B               	movf	??_receive,w
  5536  0F59  00D1               	movwf	receive@rx_buf
  5537                           
  5538                           ;mcp2515.c: 174: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  5539  0F5A  300E               	movlw	14
  5540  0F5B  00CB               	movwf	??_receive
  5541  0F5C  084B               	movf	??_receive,w
  5542  0F5D  00F8               	movwf	SPI_exchange@len
  5543  0F5E  3051               	movlw	(low (receive@rx_buf| 0))& (0+255)
  5544  0F5F  318A  225A  318F   	fcall	_SPI_exchange
  5545  0F62  0020               	movlb	0	; select bank0
  5546  0F63  00CC               	movwf	??_receive+1
  5547  0F64  084C               	movf	??_receive+1,w
  5548  0F65  00D0               	movwf	receive@bytes_read
  5549                           
  5550                           ;mcp2515.c: 175: uint8_t dlc = rx_buf[5];
  5551  0F66  0856               	movf	receive@rx_buf+5,w
  5552  0F67  00CB               	movwf	??_receive
  5553  0F68  084B               	movf	??_receive,w
  5554  0F69  00E3               	movwf	receive@dlc
  5555                           
  5556                           ;mcp2515.c: 176: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  5557  0F6A  0853               	movf	receive@rx_buf+2,w
  5558  0F6B  00CB               	movwf	??_receive
  5559  0F6C  3005               	movlw	5
  5560  0F6D                     u2335:	
  5561  0F6D  36CB               	lsrf	??_receive,f
  5562  0F6E  0B89               	decfsz	9,f
  5563  0F6F  2F6D               	goto	u2335
  5564  0F70  084B               	movf	??_receive,w
  5565  0F71  00CC               	movwf	??_receive+1
  5566  0F72  01CD               	clrf	??_receive+2
  5567  0F73  0852               	movf	receive@rx_buf+1,w
  5568  0F74  00CE               	movwf	??_receive+3
  5569  0F75  01CF               	clrf	??_receive+4
  5570  0F76  35CE               	lslf	??_receive+3,f
  5571  0F77  0DCF               	rlf	??_receive+4,f
  5572  0F78  35CE               	lslf	??_receive+3,f
  5573  0F79  0DCF               	rlf	??_receive+4,f
  5574  0F7A  35CE               	lslf	??_receive+3,f
  5575  0F7B  0DCF               	rlf	??_receive+4,f
  5576  0F7C  084C               	movf	??_receive+1,w
  5577  0F7D  074E               	addwf	??_receive+3,w
  5578  0F7E  00E1               	movwf	receive@id
  5579  0F7F  084D               	movf	??_receive+2,w
  5580  0F80  3D4F               	addwfc	??_receive+4,w
  5581  0F81  00E2               	movwf	receive@id+1
  5582                           
  5583                           ;mcp2515.c: 177: id = id & 0b0000011111111111u;
  5584  0F82  30FF               	movlw	255
  5585  0F83  0561               	andwf	receive@id,w
  5586  0F84  00E1               	movwf	receive@id
  5587  0F85  3007               	movlw	7
  5588  0F86  0562               	andwf	receive@id+1,w
  5589  0F87  00E2               	movwf	receive@id+1
  5590                           
  5591                           ;mcp2515.c: 178: rx_buf[6u+dlc] = (uint8_t)'\0';
  5592  0F88  0863               	movf	receive@dlc,w
  5593  0F89  3E06               	addlw	6
  5594  0F8A  3E51               	addlw	(low (receive@rx_buf| 0))& (0+255)
  5595  0F8B  0086               	movwf	6
  5596  0F8C  0187               	clrf	7
  5597  0F8D  0181               	clrf	1
  5598                           
  5599                           ;mcp2515.c: 180: if (mode.debug) {
  5600  0F8E  086B               	movf	_mode,w
  5601  0F8F  1903               	btfsc	3,2
  5602  0F90  2FE8               	goto	l2730
  5603                           
  5604                           ;mcp2515.c: 181: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  5605  0F91  3066               	movlw	low (STR_28| (0+32768))
  5606  0F92  00A2               	movwf	printf@f
  5607  0F93  3093               	movlw	high (STR_28| (0+32768))
  5608  0F94  00A3               	movwf	printf@f+1
  5609  0F95  0864               	movf	receive@n,w
  5610  0F96  00CB               	movwf	??_receive
  5611  0F97  01CC               	clrf	??_receive+1
  5612  0F98  084B               	movf	??_receive,w
  5613  0F99  00A4               	movwf	?_printf+2
  5614  0F9A  084C               	movf	??_receive+1,w
  5615  0F9B  00A5               	movwf	?_printf+3
  5616  0F9C  0852               	movf	receive@rx_buf+1,w
  5617  0F9D  00CD               	movwf	??_receive+2
  5618  0F9E  01CE               	clrf	??_receive+3
  5619  0F9F  084D               	movf	??_receive+2,w
  5620  0FA0  00A6               	movwf	?_printf+4
  5621  0FA1  084E               	movf	??_receive+3,w
  5622  0FA2  00A7               	movwf	?_printf+5
  5623  0FA3  3185  25A5  318F   	fcall	_printf
  5624                           
  5625                           ;mcp2515.c: 182: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  5626  0FA6  3088               	movlw	low (STR_29| (0+32768))
  5627  0FA7  0020               	movlb	0	; select bank0
  5628  0FA8  00A2               	movwf	printf@f
  5629  0FA9  3093               	movlw	high (STR_29| (0+32768))
  5630  0FAA  00A3               	movwf	printf@f+1
  5631  0FAB  0864               	movf	receive@n,w
  5632  0FAC  00CB               	movwf	??_receive
  5633  0FAD  01CC               	clrf	??_receive+1
  5634  0FAE  084B               	movf	??_receive,w
  5635  0FAF  00A4               	movwf	?_printf+2
  5636  0FB0  084C               	movf	??_receive+1,w
  5637  0FB1  00A5               	movwf	?_printf+3
  5638  0FB2  0853               	movf	receive@rx_buf+2,w
  5639  0FB3  00CD               	movwf	??_receive+2
  5640  0FB4  01CE               	clrf	??_receive+3
  5641  0FB5  084D               	movf	??_receive+2,w
  5642  0FB6  00A6               	movwf	?_printf+4
  5643  0FB7  084E               	movf	??_receive+3,w
  5644  0FB8  00A7               	movwf	?_printf+5
  5645  0FB9  3185  25A5  318F   	fcall	_printf
  5646                           
  5647                           ;mcp2515.c: 183: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  5648  0FBC  30AA               	movlw	low (STR_30| (0+32768))
  5649  0FBD  0020               	movlb	0	; select bank0
  5650  0FBE  00A2               	movwf	printf@f
  5651  0FBF  3093               	movlw	high (STR_30| (0+32768))
  5652  0FC0  00A3               	movwf	printf@f+1
  5653  0FC1  0864               	movf	receive@n,w
  5654  0FC2  00CB               	movwf	??_receive
  5655  0FC3  01CC               	clrf	??_receive+1
  5656  0FC4  084B               	movf	??_receive,w
  5657  0FC5  00A4               	movwf	?_printf+2
  5658  0FC6  084C               	movf	??_receive+1,w
  5659  0FC7  00A5               	movwf	?_printf+3
  5660  0FC8  0856               	movf	receive@rx_buf+5,w
  5661  0FC9  00CD               	movwf	??_receive+2
  5662  0FCA  01CE               	clrf	??_receive+3
  5663  0FCB  084D               	movf	??_receive+2,w
  5664  0FCC  00A6               	movwf	?_printf+4
  5665  0FCD  084E               	movf	??_receive+3,w
  5666  0FCE  00A7               	movwf	?_printf+5
  5667  0FCF  3185  25A5  318F   	fcall	_printf
  5668                           
  5669                           ;mcp2515.c: 184: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  5670  0FD2  300A               	movlw	low (STR_31| (0+32768))
  5671  0FD3  0020               	movlb	0	; select bank0
  5672  0FD4  00A2               	movwf	printf@f
  5673  0FD5  3094               	movlw	high (STR_31| (0+32768))
  5674  0FD6  00A3               	movwf	printf@f+1
  5675  0FD7  0864               	movf	receive@n,w
  5676  0FD8  00CB               	movwf	??_receive
  5677  0FD9  01CC               	clrf	??_receive+1
  5678  0FDA  084B               	movf	??_receive,w
  5679  0FDB  00A4               	movwf	?_printf+2
  5680  0FDC  084C               	movf	??_receive+1,w
  5681  0FDD  00A5               	movwf	?_printf+3
  5682  0FDE  0857               	movf	receive@rx_buf+6,w
  5683  0FDF  00CD               	movwf	??_receive+2
  5684  0FE0  01CE               	clrf	??_receive+3
  5685  0FE1  084D               	movf	??_receive+2,w
  5686  0FE2  00A6               	movwf	?_printf+4
  5687  0FE3  084E               	movf	??_receive+3,w
  5688  0FE4  00A7               	movwf	?_printf+5
  5689  0FE5  3185  25A5  318F   	fcall	_printf
  5690  0FE8                     l2730:	
  5691                           
  5692                           ;mcp2515.c: 185: }
  5693                           ;mcp2515.c: 188: uint8_t *pbuf = &rx_buf[6];
  5694  0FE8  3057               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  5695  0FE9  0020               	movlb	0	; select bank0
  5696  0FEA  00CB               	movwf	??_receive
  5697  0FEB  084B               	movf	??_receive,w
  5698  0FEC  00E0               	movwf	receive@pbuf
  5699                           
  5700                           ;mcp2515.c: 189: handler(id, pbuf, dlc);
  5701  0FED  0862               	movf	receive@id+1,w
  5702  0FEE  00C4               	movwf	receive_handler@sid+1
  5703  0FEF  0861               	movf	receive@id,w
  5704  0FF0  00C3               	movwf	receive_handler@sid
  5705  0FF1  0860               	movf	receive@pbuf,w
  5706  0FF2  00CB               	movwf	??_receive
  5707  0FF3  084B               	movf	??_receive,w
  5708  0FF4  00C5               	movwf	receive_handler@pbuf
  5709  0FF5  0863               	movf	receive@dlc,w
  5710  0FF6  00CC               	movwf	??_receive+1
  5711  0FF7  084C               	movf	??_receive+1,w
  5712  0FF8  00C6               	movwf	receive_handler@dlc
  5713  0FF9  0021               	movlb	1	; select bank1
  5714  0FFA  0831               	movf	(_handler+1)^(0+128),w
  5715  0FFB  008A               	movwf	10
  5716  0FFC  0830               	movf	_handler^(0+128),w
  5717  0FFD  000A               	callw
  5718  0FFE  318F               	pagesel	$
  5719  0FFF  0008               	return
  5720  1000                     __end_of_receive:	
  5721                           
  5722                           	psect	text8
  5723  0DAB                     __ptext8:	
  5724 ;; *************** function _receive_handler *****************
  5725 ;; Defined at:
  5726 ;;		line 47 in file "main.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  sid             2   35[BANK0 ] unsigned int 
  5729 ;;  pbuf            1   37[BANK0 ] PTR unsigned char 
  5730 ;;		 -> receive@rx_buf(15), 
  5731 ;;  dlc             1   38[BANK0 ] unsigned char 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  i               1   42[BANK0 ] unsigned char 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5743 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;Total ram usage:        8 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    3
  5750 ;; This function calls:
  5751 ;;		_printf
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;;		_receive
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           
  5759                           ;psect for function _receive_handler
  5760  0DAB                     _receive_handler:	
  5761                           
  5762                           ;main.c: 48: uint8_t i;
  5763                           ;main.c: 49: if (run_mode == 1u) {
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5767  0DAB  0021               	movlb	1	; select bank1
  5768  0DAC  035E               	decf	_run_mode^(0+128),w
  5769  0DAD  1D03               	btfss	3,2
  5770  0DAE  2DC6               	goto	l2494
  5771                           
  5772                           ;main.c: 50: printf("r%03X%d%s\n", sid, dlc, pbuf);
  5773  0DAF  309F               	movlw	low (STR_1| (0+32768))
  5774  0DB0  0020               	movlb	0	; select bank0
  5775  0DB1  00A2               	movwf	printf@f
  5776  0DB2  3094               	movlw	high (STR_1| (0+32768))
  5777  0DB3  00A3               	movwf	printf@f+1
  5778  0DB4  0844               	movf	receive_handler@sid+1,w
  5779  0DB5  00A5               	movwf	?_printf+3
  5780  0DB6  0843               	movf	receive_handler@sid,w
  5781  0DB7  00A4               	movwf	?_printf+2
  5782  0DB8  0846               	movf	receive_handler@dlc,w
  5783  0DB9  00C7               	movwf	??_receive_handler
  5784  0DBA  01C8               	clrf	??_receive_handler+1
  5785  0DBB  0847               	movf	??_receive_handler,w
  5786  0DBC  00A6               	movwf	?_printf+4
  5787  0DBD  0848               	movf	??_receive_handler+1,w
  5788  0DBE  00A7               	movwf	?_printf+5
  5789  0DBF  0845               	movf	receive_handler@pbuf,w
  5790  0DC0  00A8               	movwf	low ((?_printf| 0+6))
  5791  0DC1  3000               	movlw	0
  5792  0DC2  00A9               	movwf	(low ((?_printf| 0+6))+1)
  5793  0DC3  3185  25A5         	fcall	_printf
  5794                           
  5795                           ;main.c: 51: } else {
  5796  0DC5  0008               	return
  5797  0DC6                     l2494:	
  5798                           
  5799                           ;main.c: 52: if (output_format.with_sid) {
  5800  0DC6  0020               	movlb	0	; select bank0
  5801  0DC7  086D               	movf	_output_format,w
  5802  0DC8  1903               	btfsc	3,2
  5803  0DC9  2DD9               	goto	l2498
  5804                           
  5805                           ;main.c: 53: printf("%d,%s\n", sid, pbuf);
  5806  0DCA  30C3               	movlw	low (STR_2| (0+32768))
  5807  0DCB  00A2               	movwf	printf@f
  5808  0DCC  3094               	movlw	high (STR_2| (0+32768))
  5809  0DCD  00A3               	movwf	printf@f+1
  5810  0DCE  0844               	movf	receive_handler@sid+1,w
  5811  0DCF  00A5               	movwf	?_printf+3
  5812  0DD0  0843               	movf	receive_handler@sid,w
  5813  0DD1  00A4               	movwf	?_printf+2
  5814  0DD2  0845               	movf	receive_handler@pbuf,w
  5815  0DD3  00A6               	movwf	low ((?_printf| 0+4))
  5816  0DD4  3000               	movlw	0
  5817  0DD5  00A7               	movwf	(low ((?_printf| 0+4))+1)
  5818  0DD6  3185  25A5         	fcall	_printf
  5819                           
  5820                           ;main.c: 54: } else if (output_format.hex_output) {
  5821  0DD8  0008               	return
  5822  0DD9                     l2498:	
  5823  0DD9  0020               	movlb	0	; select bank0
  5824  0DDA  086E               	movf	_output_format+1,w
  5825  0DDB  1903               	btfsc	3,2
  5826  0DDC  2E0F               	goto	l2512
  5827                           
  5828                           ;main.c: 55: printf("%03x:", sid);
  5829  0DDD  30D0               	movlw	low (STR_3| (0+32768))
  5830  0DDE  00A2               	movwf	printf@f
  5831  0DDF  3094               	movlw	high (STR_3| (0+32768))
  5832  0DE0  00A3               	movwf	printf@f+1
  5833  0DE1  0844               	movf	receive_handler@sid+1,w
  5834  0DE2  00A5               	movwf	?_printf+3
  5835  0DE3  0843               	movf	receive_handler@sid,w
  5836  0DE4  00A4               	movwf	?_printf+2
  5837  0DE5  3185  25A5  318D   	fcall	_printf
  5838                           
  5839                           ;main.c: 56: for(i=0; i<dlc; i++) {
  5840  0DE8  0020               	movlb	0	; select bank0
  5841  0DE9  01CA               	clrf	receive_handler@i
  5842  0DEA                     l2508:	
  5843  0DEA  0846               	movf	receive_handler@dlc,w
  5844  0DEB  024A               	subwf	receive_handler@i,w
  5845  0DEC  1803               	btfsc	3,0
  5846  0DED  2E08               	goto	l2510
  5847                           
  5848                           ;main.c: 57: printf(" %02x", pbuf[i]);
  5849  0DEE  30D6               	movlw	low (STR_4| (0+32768))
  5850  0DEF  00A2               	movwf	printf@f
  5851  0DF0  3094               	movlw	high (STR_4| (0+32768))
  5852  0DF1  00A3               	movwf	printf@f+1
  5853  0DF2  084A               	movf	receive_handler@i,w
  5854  0DF3  0745               	addwf	receive_handler@pbuf,w
  5855  0DF4  00C7               	movwf	??_receive_handler
  5856  0DF5  0847               	movf	??_receive_handler,w
  5857  0DF6  0086               	movwf	6
  5858  0DF7  0187               	clrf	7
  5859  0DF8  0801               	movf	1,w
  5860  0DF9  00C8               	movwf	??_receive_handler+1
  5861  0DFA  01C9               	clrf	??_receive_handler+2
  5862  0DFB  0848               	movf	??_receive_handler+1,w
  5863  0DFC  00A4               	movwf	?_printf+2
  5864  0DFD  0849               	movf	??_receive_handler+2,w
  5865  0DFE  00A5               	movwf	?_printf+3
  5866  0DFF  3185  25A5  318D   	fcall	_printf
  5867  0E02  3001               	movlw	1
  5868  0E03  0020               	movlb	0	; select bank0
  5869  0E04  00C7               	movwf	??_receive_handler
  5870  0E05  0847               	movf	??_receive_handler,w
  5871  0E06  07CA               	addwf	receive_handler@i,f
  5872  0E07  2DEA               	goto	l2508
  5873  0E08                     l2510:	
  5874                           
  5875                           ;main.c: 58: }
  5876                           ;main.c: 59: printf("\n");
  5877  0E08  30DF               	movlw	low ((STR_41+3)| (0+32768))
  5878  0E09  00A2               	movwf	printf@f
  5879  0E0A  3094               	movlw	high ((STR_41+3)| (0+32768))
  5880  0E0B  00A3               	movwf	printf@f+1
  5881  0E0C  3185  25A5         	fcall	_printf
  5882                           
  5883                           ;main.c: 60: } else {
  5884  0E0E  0008               	return
  5885  0E0F                     l2512:	
  5886                           
  5887                           ;main.c: 61: printf("%s\n", pbuf);
  5888  0E0F  3040               	movlw	low ((STR_38+14)| (0+32768))
  5889  0E10  0020               	movlb	0	; select bank0
  5890  0E11  00A2               	movwf	printf@f
  5891  0E12  3093               	movlw	high ((STR_38+14)| (0+32768))
  5892  0E13  00A3               	movwf	printf@f+1
  5893  0E14  0845               	movf	receive_handler@pbuf,w
  5894  0E15  00A4               	movwf	low ((?_printf| 0+2))
  5895  0E16  3000               	movlw	0
  5896  0E17  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5897  0E18  3185  25A5         	fcall	_printf
  5898  0E1A  0008               	return
  5899  0E1B                     __end_of_receive_handler:	
  5900                           
  5901                           	psect	text9
  5902  0EA6                     __ptext9:	
  5903 ;; *************** function _can_set_mask *****************
  5904 ;; Defined at:
  5905 ;;		line 122 in file "mcp2515.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  cmd             1    wreg     unsigned char 
  5908 ;;  n               1   39[BANK0 ] unsigned char 
  5909 ;;  mask            2   40[BANK0 ] unsigned int 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  cmd             1   50[BANK0 ] unsigned char 
  5912 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  5913 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5923 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;Total ram usage:       14 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    4
  5930 ;; This function calls:
  5931 ;;		_SPI_exchange
  5932 ;;		_abort_pending_transmissions
  5933 ;;		_can_ope_mode
  5934 ;;		_printf
  5935 ;; This function is called by:
  5936 ;;		_main
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _can_set_mask
  5942  0EA6                     _can_set_mask:	
  5943                           
  5944                           ;incstack = 0
  5945                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5946                           ;can_set_mask@cmd stored from wreg
  5947  0EA6  0020               	movlb	0	; select bank0
  5948  0EA7  00D2               	movwf	can_set_mask@cmd
  5949                           
  5950                           ;mcp2515.c: 123: can_ope_mode(0b10000000u);
  5951  0EA8  3080               	movlw	128
  5952  0EA9  318C  24ED  318E   	fcall	_can_ope_mode
  5953                           
  5954                           ;mcp2515.c: 124: abort_pending_transmissions();
  5955  0EAC  318A  22FB  318E   	fcall	_abort_pending_transmissions
  5956                           
  5957                           ;mcp2515.c: 125: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  5958  0EAF  3008               	movlw	8
  5959  0EB0  0020               	movlb	0	; select bank0
  5960  0EB1  0249               	subwf	can_set_mask@mask+1,w
  5961  0EB2  3000               	movlw	0
  5962  0EB3  1903               	skipnz
  5963  0EB4  0248               	subwf	can_set_mask@mask,w
  5964  0EB5  1C03               	btfss	3,0
  5965  0EB6  2EBB               	goto	l2964
  5966  0EB7  30FF               	movlw	255
  5967  0EB8  00C8               	movwf	can_set_mask@mask
  5968  0EB9  3007               	movlw	7
  5969  0EBA  00C9               	movwf	can_set_mask@mask+1
  5970  0EBB                     l2964:	
  5971                           
  5972                           ;mcp2515.c: 126: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  5973  0EBB  0849               	movf	can_set_mask@mask+1,w
  5974  0EBC  00CB               	movwf	??_can_set_mask+1
  5975  0EBD  0848               	movf	can_set_mask@mask,w
  5976  0EBE  00CA               	movwf	??_can_set_mask
  5977  0EBF  36CB               	lsrf	??_can_set_mask+1,f
  5978  0EC0  0CCA               	rrf	??_can_set_mask,f
  5979  0EC1  36CB               	lsrf	??_can_set_mask+1,f
  5980  0EC2  0CCA               	rrf	??_can_set_mask,f
  5981  0EC3  36CB               	lsrf	??_can_set_mask+1,f
  5982  0EC4  0CCA               	rrf	??_can_set_mask,f
  5983  0EC5  084A               	movf	??_can_set_mask,w
  5984  0EC6  00CC               	movwf	??_can_set_mask+2
  5985  0EC7  084C               	movf	??_can_set_mask+2,w
  5986  0EC8  00D3               	movwf	can_set_mask@mask_sidh
  5987                           
  5988                           ;mcp2515.c: 127: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  5989  0EC9  0848               	movf	can_set_mask@mask,w
  5990  0ECA  3907               	andlw	7
  5991  0ECB  00CA               	movwf	??_can_set_mask
  5992  0ECC  3004               	movlw	4
  5993  0ECD                     u2545:	
  5994  0ECD  35CA               	lslf	??_can_set_mask,f
  5995  0ECE  3EFF               	addlw	-1
  5996  0ECF  1D03               	skipz
  5997  0ED0  2ECD               	goto	u2545
  5998  0ED1  354A               	lslf	??_can_set_mask,w
  5999  0ED2  00CB               	movwf	??_can_set_mask+1
  6000  0ED3  084B               	movf	??_can_set_mask+1,w
  6001  0ED4  00D4               	movwf	can_set_mask@mask_sidl
  6002                           
  6003                           ;mcp2515.c: 129: if (cmd == 0u) {
  6004  0ED5  0852               	movf	can_set_mask@cmd,w
  6005  0ED6  1D03               	btfss	3,2
  6006  0ED7  2EE7               	goto	l2976
  6007                           
  6008                           ;mcp2515.c: 130: save_rxmn[n] = mask;
  6009  0ED8  3547               	lslf	can_set_mask@n,w
  6010  0ED9  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6011  0EDA  0086               	movwf	6
  6012  0EDB  0187               	clrf	7
  6013  0EDC  0848               	movf	can_set_mask@mask,w
  6014  0EDD  3FC0               	movwi [0]fsr1
  6015  0EDE  0849               	movf	can_set_mask@mask+1,w
  6016  0EDF  3FC1               	movwi [1]fsr1
  6017                           
  6018                           ;mcp2515.c: 131: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  6019  0EE0  086B               	movf	_mode,w
  6020  0EE1  1903               	btfsc	3,2
  6021  0EE2  2F0F               	goto	l2982
  6022  0EE3  30DF               	movlw	low (STR_26| (0+32768))
  6023  0EE4  00A2               	movwf	printf@f
  6024  0EE5  3092               	movlw	high (STR_26| (0+32768))
  6025  0EE6  2EF6               	goto	L9
  6026  0EE7                     l2976:	
  6027                           ;mcp2515.c: 132: } else {
  6028                           
  6029                           
  6030                           ;mcp2515.c: 133: save_rxfn[n] = mask;
  6031  0EE7  0020               	movlb	0	; select bank0
  6032  0EE8  3547               	lslf	can_set_mask@n,w
  6033  0EE9  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6034  0EEA  0086               	movwf	6
  6035  0EEB  0187               	clrf	7
  6036  0EEC  0848               	movf	can_set_mask@mask,w
  6037  0EED  3FC0               	movwi [0]fsr1
  6038  0EEE  0849               	movf	can_set_mask@mask+1,w
  6039  0EEF  3FC1               	movwi [1]fsr1
  6040                           
  6041                           ;mcp2515.c: 134: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  6042  0EF0  086B               	movf	_mode,w
  6043  0EF1  1903               	btfsc	3,2
  6044  0EF2  2F0F               	goto	l2982
  6045  0EF3  30B2               	movlw	low (STR_27| (0+32768))
  6046  0EF4  00A2               	movwf	printf@f
  6047  0EF5  3092               	movlw	high (STR_27| (0+32768))
  6048  0EF6                     L9:	
  6049  0EF6  00A3               	movwf	printf@f+1
  6050  0EF7  0847               	movf	can_set_mask@n,w
  6051  0EF8  00CA               	movwf	??_can_set_mask
  6052  0EF9  01CB               	clrf	??_can_set_mask+1
  6053  0EFA  084A               	movf	??_can_set_mask,w
  6054  0EFB  00A4               	movwf	?_printf+2
  6055  0EFC  084B               	movf	??_can_set_mask+1,w
  6056  0EFD  00A5               	movwf	?_printf+3
  6057  0EFE  0853               	movf	can_set_mask@mask_sidh,w
  6058  0EFF  00CC               	movwf	??_can_set_mask+2
  6059  0F00  01CD               	clrf	??_can_set_mask+3
  6060  0F01  084C               	movf	??_can_set_mask+2,w
  6061  0F02  00A6               	movwf	?_printf+4
  6062  0F03  084D               	movf	??_can_set_mask+3,w
  6063  0F04  00A7               	movwf	?_printf+5
  6064  0F05  0854               	movf	can_set_mask@mask_sidl,w
  6065  0F06  00CE               	movwf	??_can_set_mask+4
  6066  0F07  01CF               	clrf	??_can_set_mask+5
  6067  0F08  084E               	movf	??_can_set_mask+4,w
  6068  0F09  00A8               	movwf	?_printf+6
  6069  0F0A  084F               	movf	??_can_set_mask+5,w
  6070  0F0B  00A9               	movwf	?_printf+7
  6071  0F0C  3185  25A5  318E   	fcall	_printf
  6072  0F0F                     l2982:	
  6073                           
  6074                           ;mcp2515.c: 135: }
  6075                           ;mcp2515.c: 137: buf[0] = 0b00000010u;
  6076  0F0F  3002               	movlw	2
  6077  0F10  0020               	movlb	0	; select bank0
  6078  0F11  00CA               	movwf	??_can_set_mask
  6079  0F12  084A               	movf	??_can_set_mask,w
  6080  0F13  0021               	movlb	1	; select bank1
  6081  0F14  00B4               	movwf	_buf^(0+128)
  6082                           
  6083                           ;mcp2515.c: 138: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  6084  0F15  0020               	movlb	0	; select bank0
  6085  0F16  0852               	movf	can_set_mask@cmd,w
  6086  0F17  1903               	btfsc	3,2
  6087  0F18  2F1E               	goto	l2988
  6088  0F19  0847               	movf	can_set_mask@n,w
  6089  0F1A  3ECA               	addlw	low (_rxfnsidh| (0+32768))
  6090  0F1B  0084               	movwf	4
  6091  0F1C  3094               	movlw	high (_rxfnsidh| (0+32768))
  6092  0F1D  2F22               	goto	L8
  6093  0F1E                     l2988:	
  6094  0F1E  0847               	movf	can_set_mask@n,w
  6095  0F1F  3EEC               	addlw	low (_rxmnsidh| (0+32768))
  6096  0F20  0084               	movwf	4
  6097  0F21  3094               	movlw	high (_rxmnsidh| (0+32768))
  6098  0F22                     L8:	
  6099  0F22  1803               	skipnc
  6100  0F23  3E01               	addlw	1
  6101  0F24  0085               	movwf	5
  6102  0F25  0800               	movf	0,w	;code access
  6103  0F26  00CA               	movwf	??_can_set_mask
  6104  0F27  01CB               	clrf	??_can_set_mask+1
  6105  0F28  084A               	movf	??_can_set_mask,w
  6106  0F29  00D0               	movwf	_can_set_mask$536
  6107  0F2A  084B               	movf	??_can_set_mask+1,w
  6108  0F2B  00D1               	movwf	_can_set_mask$536+1
  6109  0F2C  0850               	movf	_can_set_mask$536,w
  6110  0F2D  00CA               	movwf	??_can_set_mask
  6111  0F2E  084A               	movf	??_can_set_mask,w
  6112  0F2F  0021               	movlb	1	; select bank1
  6113  0F30  00B5               	movwf	(_buf^(0+128)+1)
  6114                           
  6115                           ;mcp2515.c: 139: buf[2] = mask_sidh;
  6116  0F31  0020               	movlb	0	; select bank0
  6117  0F32  0853               	movf	can_set_mask@mask_sidh,w
  6118  0F33  00CA               	movwf	??_can_set_mask
  6119  0F34  084A               	movf	??_can_set_mask,w
  6120  0F35  0021               	movlb	1	; select bank1
  6121  0F36  00B6               	movwf	(_buf^(0+128)+2)
  6122                           
  6123                           ;mcp2515.c: 140: buf[3] = mask_sidl;
  6124  0F37  0020               	movlb	0	; select bank0
  6125  0F38  0854               	movf	can_set_mask@mask_sidl,w
  6126  0F39  00CA               	movwf	??_can_set_mask
  6127  0F3A  084A               	movf	??_can_set_mask,w
  6128  0F3B  0021               	movlb	1	; select bank1
  6129  0F3C  00B7               	movwf	(_buf^(0+128)+3)
  6130                           
  6131                           ;mcp2515.c: 141: SPI_exchange(buf, 4);
  6132  0F3D  3004               	movlw	4
  6133  0F3E  0020               	movlb	0	; select bank0
  6134  0F3F  00CA               	movwf	??_can_set_mask
  6135  0F40  084A               	movf	??_can_set_mask,w
  6136  0F41  00F8               	movwf	SPI_exchange@len
  6137  0F42  30B4               	movlw	(low (_buf| 0))& (0+255)
  6138  0F43  318A  225A  318E   	fcall	_SPI_exchange
  6139                           
  6140                           ;mcp2515.c: 143: can_ope_mode(operation_mode);
  6141  0F46  0020               	movlb	0	; select bank0
  6142  0F47  086F               	movf	_operation_mode,w
  6143  0F48  318C  24ED         	fcall	_can_ope_mode
  6144  0F4A  0008               	return
  6145  0F4B                     __end_of_can_set_mask:	
  6146                           
  6147                           	psect	text10
  6148  0A26                     __ptext10:	
  6149 ;; *************** function _can_logging_mode *****************
  6150 ;; Defined at:
  6151 ;;		line 30 in file "mcp2515.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  debug           1    wreg     unsigned char 
  6154 ;;  verbose         1    0[COMMON] unsigned char 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  debug           1    2[COMMON] unsigned char 
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      void 
  6159 ;; Registers used:
  6160 ;;		wreg
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6166 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;Total ram usage:        3 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_main
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _can_logging_mode
  6181  0A26                     _can_logging_mode:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _can_logging_mode: [wreg]
  6185                           ;can_logging_mode@debug stored from wreg
  6186  0A26  00F2               	movwf	can_logging_mode@debug
  6187                           
  6188                           ;mcp2515.c: 31: mode.debug = debug;
  6189  0A27  0872               	movf	can_logging_mode@debug,w
  6190  0A28  00F1               	movwf	??_can_logging_mode
  6191  0A29  0871               	movf	??_can_logging_mode,w
  6192  0A2A  0020               	movlb	0	; select bank0
  6193  0A2B  00EB               	movwf	_mode
  6194                           
  6195                           ;mcp2515.c: 32: mode.verbose = verbose;
  6196  0A2C  0870               	movf	can_logging_mode@verbose,w
  6197  0A2D  00F1               	movwf	??_can_logging_mode
  6198  0A2E  0871               	movf	??_can_logging_mode,w
  6199  0A2F  00EC               	movwf	_mode+1
  6200  0A30  0008               	return
  6201  0A31                     __end_of_can_logging_mode:	
  6202                           
  6203                           	psect	text11
  6204  0E1B                     __ptext11:	
  6205 ;; *************** function _can_init *****************
  6206 ;; Defined at:
  6207 ;;		line 53 in file "mcp2515.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  receive_hand    2   39[BANK0 ] PTR void 
  6210 ;;		 -> receive_handler(1), 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;		None
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      void 
  6215 ;; Registers used:
  6216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6222 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;Total ram usage:        3 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    4
  6229 ;; This function calls:
  6230 ;;		_SPI_exchange
  6231 ;;		_can_ope_mode
  6232 ;;		_can_set_sid
  6233 ;; This function is called by:
  6234 ;;		_main
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           
  6239                           ;psect for function _can_init
  6240  0E1B                     _can_init:	
  6241                           
  6242                           ;mcp2515.c: 54: _delay((unsigned long)((100)*(2000000/4000.0)));
  6243                           
  6244                           ;incstack = 0
  6245                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6246  0E1B  3041               	movlw	65
  6247  0E1C  0020               	movlb	0	; select bank0
  6248  0E1D  00C9               	movwf	??_can_init
  6249  0E1E  30EE               	movlw	238
  6250  0E1F                     u2887:	
  6251  0E1F  0B89               	decfsz	9,f
  6252  0E20  2E1F               	goto	u2887
  6253  0E21  0BC9               	decfsz	??_can_init,f
  6254  0E22  2E1F               	goto	u2887
  6255  0E23  0000               	nop
  6256                           
  6257                           ;mcp2515.c: 56: can_set_sid(0);
  6258  0E24  3000               	movlw	0
  6259  0E25  00F0               	movwf	can_set_sid@can_node
  6260  0E26  00F1               	movwf	can_set_sid@can_node+1
  6261  0E27  318A  22D7  318E   	fcall	_can_set_sid
  6262                           
  6263                           ;mcp2515.c: 57: handler = receive_handler;
  6264  0E2A  0020               	movlb	0	; select bank0
  6265  0E2B  0848               	movf	can_init@receive_handler+1,w
  6266  0E2C  0021               	movlb	1	; select bank1
  6267  0E2D  00B1               	movwf	(_handler+1)^(0+128)
  6268  0E2E  0020               	movlb	0	; select bank0
  6269  0E2F  0847               	movf	can_init@receive_handler,w
  6270  0E30  0021               	movlb	1	; select bank1
  6271  0E31  00B0               	movwf	_handler^(0+128)
  6272                           
  6273                           ;mcp2515.c: 60: buf[0] = 0b11000000u;
  6274  0E32  30C0               	movlw	192
  6275  0E33  0020               	movlb	0	; select bank0
  6276  0E34  00C9               	movwf	??_can_init
  6277  0E35  0849               	movf	??_can_init,w
  6278  0E36  0021               	movlb	1	; select bank1
  6279  0E37  00B4               	movwf	_buf^(0+128)
  6280                           
  6281                           ;mcp2515.c: 61: SPI_exchange(buf, 1);
  6282  0E38  01F8               	clrf	SPI_exchange@len
  6283  0E39  0AF8               	incf	SPI_exchange@len,f
  6284  0E3A  30B4               	movlw	(low (_buf| 0))& (0+255)
  6285  0E3B  318A  225A  318E   	fcall	_SPI_exchange
  6286                           
  6287                           ;mcp2515.c: 63: _delay((unsigned long)((2+48)*(2000000/4000000.0)));
  6288  0E3E  3008               	movlw	8
  6289  0E3F                     u2897:	
  6290  0E3F  0B89               	decfsz	9,f
  6291  0E40  2E3F               	goto	u2897
  6292  0E41  0000               	nop
  6293                           
  6294                           ;mcp2515.c: 65: buf[0] = 0b00000010u;
  6295  0E42  3002               	movlw	2
  6296  0E43  0020               	movlb	0	; select bank0
  6297  0E44  00C9               	movwf	??_can_init
  6298  0E45  0849               	movf	??_can_init,w
  6299  0E46  0021               	movlb	1	; select bank1
  6300  0E47  00B4               	movwf	_buf^(0+128)
  6301                           
  6302                           ;mcp2515.c: 66: buf[1] = 0x28u;
  6303  0E48  3028               	movlw	40
  6304  0E49  0020               	movlb	0	; select bank0
  6305  0E4A  00C9               	movwf	??_can_init
  6306  0E4B  0849               	movf	??_can_init,w
  6307  0E4C  0021               	movlb	1	; select bank1
  6308  0E4D  00B5               	movwf	(_buf^(0+128)+1)
  6309                           
  6310                           ;mcp2515.c: 67: buf[2] = 0b00000101u;
  6311  0E4E  3005               	movlw	5
  6312  0E4F  0020               	movlb	0	; select bank0
  6313  0E50  00C9               	movwf	??_can_init
  6314  0E51  0849               	movf	??_can_init,w
  6315  0E52  0021               	movlb	1	; select bank1
  6316  0E53  00B6               	movwf	(_buf^(0+128)+2)
  6317                           
  6318                           ;mcp2515.c: 68: buf[3] = 0b11110001u;
  6319  0E54  30F1               	movlw	241
  6320  0E55  0020               	movlb	0	; select bank0
  6321  0E56  00C9               	movwf	??_can_init
  6322  0E57  0849               	movf	??_can_init,w
  6323  0E58  0021               	movlb	1	; select bank1
  6324  0E59  00B7               	movwf	(_buf^(0+128)+3)
  6325                           
  6326                           ;mcp2515.c: 69: buf[4] = 0b01000001u;
  6327  0E5A  3041               	movlw	65
  6328  0E5B  0020               	movlb	0	; select bank0
  6329  0E5C  00C9               	movwf	??_can_init
  6330  0E5D  0849               	movf	??_can_init,w
  6331  0E5E  0021               	movlb	1	; select bank1
  6332  0E5F  00B8               	movwf	(_buf^(0+128)+4)
  6333                           
  6334                           ;mcp2515.c: 70: SPI_exchange(buf, 5);
  6335  0E60  3005               	movlw	5
  6336  0E61  0020               	movlb	0	; select bank0
  6337  0E62  00C9               	movwf	??_can_init
  6338  0E63  0849               	movf	??_can_init,w
  6339  0E64  00F8               	movwf	SPI_exchange@len
  6340  0E65  30B4               	movlw	(low (_buf| 0))& (0+255)
  6341  0E66  318A  225A  318E   	fcall	_SPI_exchange
  6342                           
  6343                           ;mcp2515.c: 72: buf[0] = 0b00000010u;
  6344  0E69  3002               	movlw	2
  6345  0E6A  0020               	movlb	0	; select bank0
  6346  0E6B  00C9               	movwf	??_can_init
  6347  0E6C  0849               	movf	??_can_init,w
  6348  0E6D  0021               	movlb	1	; select bank1
  6349  0E6E  00B4               	movwf	_buf^(0+128)
  6350                           
  6351                           ;mcp2515.c: 73: buf[1] = 0x60u;
  6352  0E6F  3060               	movlw	96
  6353  0E70  0020               	movlb	0	; select bank0
  6354  0E71  00C9               	movwf	??_can_init
  6355  0E72  0849               	movf	??_can_init,w
  6356  0E73  0021               	movlb	1	; select bank1
  6357  0E74  00B5               	movwf	(_buf^(0+128)+1)
  6358                           
  6359                           ;mcp2515.c: 74: buf[2] = 0b00100100u;
  6360  0E75  3024               	movlw	36
  6361  0E76  0020               	movlb	0	; select bank0
  6362  0E77  00C9               	movwf	??_can_init
  6363  0E78  0849               	movf	??_can_init,w
  6364  0E79  0021               	movlb	1	; select bank1
  6365  0E7A  00B6               	movwf	(_buf^(0+128)+2)
  6366                           
  6367                           ;mcp2515.c: 75: SPI_exchange(buf, 3);
  6368  0E7B  3003               	movlw	3
  6369  0E7C  0020               	movlb	0	; select bank0
  6370  0E7D  00C9               	movwf	??_can_init
  6371  0E7E  0849               	movf	??_can_init,w
  6372  0E7F  00F8               	movwf	SPI_exchange@len
  6373  0E80  30B4               	movlw	(low (_buf| 0))& (0+255)
  6374  0E81  318A  225A  318E   	fcall	_SPI_exchange
  6375                           
  6376                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  6377  0E84  3002               	movlw	2
  6378  0E85  0020               	movlb	0	; select bank0
  6379  0E86  00C9               	movwf	??_can_init
  6380  0E87  0849               	movf	??_can_init,w
  6381  0E88  0021               	movlb	1	; select bank1
  6382  0E89  00B4               	movwf	_buf^(0+128)
  6383                           
  6384                           ;mcp2515.c: 78: buf[1] = 0x70u;
  6385  0E8A  3070               	movlw	112
  6386  0E8B  0020               	movlb	0	; select bank0
  6387  0E8C  00C9               	movwf	??_can_init
  6388  0E8D  0849               	movf	??_can_init,w
  6389  0E8E  0021               	movlb	1	; select bank1
  6390  0E8F  00B5               	movwf	(_buf^(0+128)+1)
  6391                           
  6392                           ;mcp2515.c: 79: buf[2] = 0b00100000u;
  6393  0E90  3020               	movlw	32
  6394  0E91  0020               	movlb	0	; select bank0
  6395  0E92  00C9               	movwf	??_can_init
  6396  0E93  0849               	movf	??_can_init,w
  6397  0E94  0021               	movlb	1	; select bank1
  6398  0E95  00B6               	movwf	(_buf^(0+128)+2)
  6399                           
  6400                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  6401  0E96  3003               	movlw	3
  6402  0E97  0020               	movlb	0	; select bank0
  6403  0E98  00C9               	movwf	??_can_init
  6404  0E99  0849               	movf	??_can_init,w
  6405  0E9A  00F8               	movwf	SPI_exchange@len
  6406  0E9B  30B4               	movlw	(low (_buf| 0))& (0+255)
  6407  0E9C  318A  225A  318E   	fcall	_SPI_exchange
  6408                           
  6409                           ;mcp2515.c: 82: mode.debug = 0;
  6410  0E9F  0020               	movlb	0	; select bank0
  6411  0EA0  01EB               	clrf	_mode
  6412                           
  6413                           ;mcp2515.c: 83: mode.verbose = 0;
  6414  0EA1  01EC               	clrf	_mode+1
  6415                           
  6416                           ;mcp2515.c: 85: can_ope_mode(0b00000000u);
  6417  0EA2  3000               	movlw	0
  6418  0EA3  318C  24ED         	fcall	_can_ope_mode
  6419  0EA5  0008               	return
  6420  0EA6                     __end_of_can_init:	
  6421                           
  6422                           	psect	text12
  6423  0AD7                     __ptext12:	
  6424 ;; *************** function _can_set_sid *****************
  6425 ;; Defined at:
  6426 ;;		line 43 in file "mcp2515.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  can_node        2    0[COMMON] unsigned int 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  sidl            1    6[COMMON] unsigned char 
  6431 ;;  sidh            1    5[COMMON] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        7 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_slcan_send
  6451 ;;		_main
  6452 ;;		_can_init
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _can_set_sid
  6458  0AD7                     _can_set_sid:	
  6459                           
  6460                           ;mcp2515.c: 44: uint8_t sidh = (can_node >> 3) & 0x00ff;
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  6464  0AD7  0871               	movf	can_set_sid@can_node+1,w
  6465  0AD8  00F3               	movwf	??_can_set_sid+1
  6466  0AD9  0870               	movf	can_set_sid@can_node,w
  6467  0ADA  00F2               	movwf	??_can_set_sid
  6468  0ADB  36F3               	lsrf	??_can_set_sid+1,f
  6469  0ADC  0CF2               	rrf	??_can_set_sid,f
  6470  0ADD  36F3               	lsrf	??_can_set_sid+1,f
  6471  0ADE  0CF2               	rrf	??_can_set_sid,f
  6472  0ADF  36F3               	lsrf	??_can_set_sid+1,f
  6473  0AE0  0CF2               	rrf	??_can_set_sid,f
  6474  0AE1  0872               	movf	??_can_set_sid,w
  6475  0AE2  00F4               	movwf	??_can_set_sid+2
  6476  0AE3  0874               	movf	??_can_set_sid+2,w
  6477  0AE4  00F5               	movwf	can_set_sid@sidh
  6478                           
  6479                           ;mcp2515.c: 45: uint8_t sidl = (can_node << 5) & 0x00e0;
  6480  0AE5  0870               	movf	can_set_sid@can_node,w
  6481  0AE6  00F2               	movwf	??_can_set_sid
  6482  0AE7  3004               	movlw	4
  6483  0AE8                     u2145:	
  6484  0AE8  35F2               	lslf	??_can_set_sid,f
  6485  0AE9  3EFF               	addlw	-1
  6486  0AEA  1D03               	skipz
  6487  0AEB  2AE8               	goto	u2145
  6488  0AEC  3572               	lslf	??_can_set_sid,w
  6489  0AED  39E0               	andlw	224
  6490  0AEE  00F3               	movwf	??_can_set_sid+1
  6491  0AEF  0873               	movf	??_can_set_sid+1,w
  6492  0AF0  00F6               	movwf	can_set_sid@sidl
  6493                           
  6494                           ;mcp2515.c: 46: sid.sidh = sidh;
  6495  0AF1  0875               	movf	can_set_sid@sidh,w
  6496  0AF2  00F2               	movwf	??_can_set_sid
  6497  0AF3  0872               	movf	??_can_set_sid,w
  6498  0AF4  0021               	movlb	1	; select bank1
  6499  0AF5  00B2               	movwf	_sid^(0+128)
  6500                           
  6501                           ;mcp2515.c: 47: sid.sidl = sidl;
  6502  0AF6  0876               	movf	can_set_sid@sidl,w
  6503  0AF7  00F2               	movwf	??_can_set_sid
  6504  0AF8  0872               	movf	??_can_set_sid,w
  6505  0AF9  00B3               	movwf	(_sid^(0+128)+1)
  6506  0AFA  0008               	return
  6507  0AFB                     __end_of_can_set_sid:	
  6508                           
  6509                           	psect	text13
  6510  0115                     __ptext13:	
  6511 ;; *************** function _can_dump_registers *****************
  6512 ;; Defined at:
  6513 ;;		line 356 in file "mcp2515.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        2 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    4
  6534 ;; This function calls:
  6535 ;;		_printf
  6536 ;;		_read_register
  6537 ;; This function is called by:
  6538 ;;		_main
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _can_dump_registers
  6544  0115                     _can_dump_registers:	
  6545                           
  6546                           ;mcp2515.c: 357: printf("---\n");
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6550  0115  30DC               	movlw	low (STR_41| (0+32768))
  6551  0116  0020               	movlb	0	; select bank0
  6552  0117  00A2               	movwf	printf@f
  6553  0118  3094               	movlw	high (STR_41| (0+32768))
  6554  0119  00A3               	movwf	printf@f+1
  6555  011A  3185  25A5  3181   	fcall	_printf
  6556                           
  6557                           ;mcp2515.c: 358: printf("SIDH: %02x\n", sid.sidh);
  6558  011D  306B               	movlw	low ((STR_28+5)| (0+32768))
  6559  011E  0020               	movlb	0	; select bank0
  6560  011F  00A2               	movwf	printf@f
  6561  0120  3093               	movlw	high ((STR_28+5)| (0+32768))
  6562  0121  00A3               	movwf	printf@f+1
  6563  0122  0021               	movlb	1	; select bank1
  6564  0123  0832               	movf	_sid^(0+128),w
  6565  0124  0020               	movlb	0	; select bank0
  6566  0125  00C3               	movwf	??_can_dump_registers
  6567  0126  01C4               	clrf	??_can_dump_registers+1
  6568  0127  0843               	movf	??_can_dump_registers,w
  6569  0128  00A4               	movwf	?_printf+2
  6570  0129  0844               	movf	??_can_dump_registers+1,w
  6571  012A  00A5               	movwf	?_printf+3
  6572  012B  3185  25A5  3181   	fcall	_printf
  6573                           
  6574                           ;mcp2515.c: 359: printf("SIDL: %02x\n", sid.sidl);
  6575  012E  308D               	movlw	low ((STR_29+5)| (0+32768))
  6576  012F  0020               	movlb	0	; select bank0
  6577  0130  00A2               	movwf	printf@f
  6578  0131  3093               	movlw	high ((STR_29+5)| (0+32768))
  6579  0132  00A3               	movwf	printf@f+1
  6580  0133  0021               	movlb	1	; select bank1
  6581  0134  0833               	movf	(_sid^(0+128)+1),w
  6582  0135  0020               	movlb	0	; select bank0
  6583  0136  00C3               	movwf	??_can_dump_registers
  6584  0137  01C4               	clrf	??_can_dump_registers+1
  6585  0138  0843               	movf	??_can_dump_registers,w
  6586  0139  00A4               	movwf	?_printf+2
  6587  013A  0844               	movf	??_can_dump_registers+1,w
  6588  013B  00A5               	movwf	?_printf+3
  6589  013C  3185  25A5  3181   	fcall	_printf
  6590                           
  6591                           ;mcp2515.c: 360: printf("\n");
  6592  013F  30DF               	movlw	low ((STR_41+3)| (0+32768))
  6593  0140  0020               	movlb	0	; select bank0
  6594  0141  00A2               	movwf	printf@f
  6595  0142  3094               	movlw	high ((STR_41+3)| (0+32768))
  6596  0143  00A3               	movwf	printf@f+1
  6597  0144  3185  25A5  3181   	fcall	_printf
  6598                           
  6599                           ;mcp2515.c: 362: printf("CNF1: %02x\n", read_register(0x2au));
  6600  0147  307B               	movlw	low (STR_49| (0+32768))
  6601  0148  0020               	movlb	0	; select bank0
  6602  0149  00A2               	movwf	printf@f
  6603  014A  3094               	movlw	high (STR_49| (0+32768))
  6604  014B  00A3               	movwf	printf@f+1
  6605  014C  302A               	movlw	42
  6606  014D  318A  2286  3181   	fcall	_read_register
  6607  0150  0020               	movlb	0	; select bank0
  6608  0151  00C3               	movwf	??_can_dump_registers
  6609  0152  01C4               	clrf	??_can_dump_registers+1
  6610  0153  0843               	movf	??_can_dump_registers,w
  6611  0154  00A4               	movwf	?_printf+2
  6612  0155  0844               	movf	??_can_dump_registers+1,w
  6613  0156  00A5               	movwf	?_printf+3
  6614  0157  3185  25A5  3181   	fcall	_printf
  6615                           
  6616                           ;mcp2515.c: 363: printf("CNF2: %02x\n", read_register(0x29u));
  6617  015A  3087               	movlw	low (STR_50| (0+32768))
  6618  015B  0020               	movlb	0	; select bank0
  6619  015C  00A2               	movwf	printf@f
  6620  015D  3094               	movlw	high (STR_50| (0+32768))
  6621  015E  00A3               	movwf	printf@f+1
  6622  015F  3029               	movlw	41
  6623  0160  318A  2286  3181   	fcall	_read_register
  6624  0163  0020               	movlb	0	; select bank0
  6625  0164  00C3               	movwf	??_can_dump_registers
  6626  0165  01C4               	clrf	??_can_dump_registers+1
  6627  0166  0843               	movf	??_can_dump_registers,w
  6628  0167  00A4               	movwf	?_printf+2
  6629  0168  0844               	movf	??_can_dump_registers+1,w
  6630  0169  00A5               	movwf	?_printf+3
  6631  016A  3185  25A5  3181   	fcall	_printf
  6632                           
  6633                           ;mcp2515.c: 364: printf("CNF3: %02x\n", read_register(0x28u));
  6634  016D  3093               	movlw	low (STR_51| (0+32768))
  6635  016E  0020               	movlb	0	; select bank0
  6636  016F  00A2               	movwf	printf@f
  6637  0170  3094               	movlw	high (STR_51| (0+32768))
  6638  0171  00A3               	movwf	printf@f+1
  6639  0172  3028               	movlw	40
  6640  0173  318A  2286  3181   	fcall	_read_register
  6641  0176  0020               	movlb	0	; select bank0
  6642  0177  00C3               	movwf	??_can_dump_registers
  6643  0178  01C4               	clrf	??_can_dump_registers+1
  6644  0179  0843               	movf	??_can_dump_registers,w
  6645  017A  00A4               	movwf	?_printf+2
  6646  017B  0844               	movf	??_can_dump_registers+1,w
  6647  017C  00A5               	movwf	?_printf+3
  6648  017D  3185  25A5  3181   	fcall	_printf
  6649                           
  6650                           ;mcp2515.c: 365: printf("\n");
  6651  0180  30DF               	movlw	low ((STR_41+3)| (0+32768))
  6652  0181  0020               	movlb	0	; select bank0
  6653  0182  00A2               	movwf	printf@f
  6654  0183  3094               	movlw	high ((STR_41+3)| (0+32768))
  6655  0184  00A3               	movwf	printf@f+1
  6656  0185  3185  25A5  3181   	fcall	_printf
  6657                           
  6658                           ;mcp2515.c: 367: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  6659  0188  30CA               	movlw	low (STR_53| (0+32768))
  6660  0189  0020               	movlb	0	; select bank0
  6661  018A  00A2               	movwf	printf@f
  6662  018B  3093               	movlw	high (STR_53| (0+32768))
  6663  018C  00A3               	movwf	printf@f+1
  6664  018D  3030               	movlw	48
  6665  018E  318A  2286  3181   	fcall	_read_register
  6666  0191  0020               	movlb	0	; select bank0
  6667  0192  00C3               	movwf	??_can_dump_registers
  6668  0193  01C4               	clrf	??_can_dump_registers+1
  6669  0194  0843               	movf	??_can_dump_registers,w
  6670  0195  00A4               	movwf	?_printf+2
  6671  0196  0844               	movf	??_can_dump_registers+1,w
  6672  0197  00A5               	movwf	?_printf+3
  6673  0198  3185  25A5  3181   	fcall	_printf
  6674                           
  6675                           ;mcp2515.c: 368: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  6676  019B  30EA               	movlw	low (STR_54| (0+32768))
  6677  019C  0020               	movlb	0	; select bank0
  6678  019D  00A2               	movwf	printf@f
  6679  019E  3093               	movlw	high (STR_54| (0+32768))
  6680  019F  00A3               	movwf	printf@f+1
  6681  01A0  3040               	movlw	64
  6682  01A1  318A  2286  3181   	fcall	_read_register
  6683  01A4  0020               	movlb	0	; select bank0
  6684  01A5  00C3               	movwf	??_can_dump_registers
  6685  01A6  01C4               	clrf	??_can_dump_registers+1
  6686  01A7  0843               	movf	??_can_dump_registers,w
  6687  01A8  00A4               	movwf	?_printf+2
  6688  01A9  0844               	movf	??_can_dump_registers+1,w
  6689  01AA  00A5               	movwf	?_printf+3
  6690  01AB  3185  25A5  3181   	fcall	_printf
  6691                           
  6692                           ;mcp2515.c: 369: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  6693  01AE  30FA               	movlw	low (STR_55| (0+32768))
  6694  01AF  0020               	movlb	0	; select bank0
  6695  01B0  00A2               	movwf	printf@f
  6696  01B1  3093               	movlw	high (STR_55| (0+32768))
  6697  01B2  00A3               	movwf	printf@f+1
  6698  01B3  3050               	movlw	80
  6699  01B4  318A  2286  3181   	fcall	_read_register
  6700  01B7  0020               	movlb	0	; select bank0
  6701  01B8  00C3               	movwf	??_can_dump_registers
  6702  01B9  01C4               	clrf	??_can_dump_registers+1
  6703  01BA  0843               	movf	??_can_dump_registers,w
  6704  01BB  00A4               	movwf	?_printf+2
  6705  01BC  0844               	movf	??_can_dump_registers+1,w
  6706  01BD  00A5               	movwf	?_printf+3
  6707  01BE  3185  25A5  3181   	fcall	_printf
  6708                           
  6709                           ;mcp2515.c: 370: printf("\n");
  6710  01C1  30DF               	movlw	low ((STR_41+3)| (0+32768))
  6711  01C2  0020               	movlb	0	; select bank0
  6712  01C3  00A2               	movwf	printf@f
  6713  01C4  3094               	movlw	high ((STR_41+3)| (0+32768))
  6714  01C5  00A3               	movwf	printf@f+1
  6715  01C6  3185  25A5  3181   	fcall	_printf
  6716                           
  6717                           ;mcp2515.c: 372: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  6718  01C9  30BA               	movlw	low (STR_57| (0+32768))
  6719  01CA  0020               	movlb	0	; select bank0
  6720  01CB  00A2               	movwf	printf@f
  6721  01CC  3093               	movlw	high (STR_57| (0+32768))
  6722  01CD  00A3               	movwf	printf@f+1
  6723  01CE  3060               	movlw	96
  6724  01CF  318A  2286  3181   	fcall	_read_register
  6725  01D2  0020               	movlb	0	; select bank0
  6726  01D3  00C3               	movwf	??_can_dump_registers
  6727  01D4  01C4               	clrf	??_can_dump_registers+1
  6728  01D5  0843               	movf	??_can_dump_registers,w
  6729  01D6  00A4               	movwf	?_printf+2
  6730  01D7  0844               	movf	??_can_dump_registers+1,w
  6731  01D8  00A5               	movwf	?_printf+3
  6732  01D9  3185  25A5  3181   	fcall	_printf
  6733                           
  6734                           ;mcp2515.c: 373: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6735  01DC  30DA               	movlw	low (STR_58| (0+32768))
  6736  01DD  0020               	movlb	0	; select bank0
  6737  01DE  00A2               	movwf	printf@f
  6738  01DF  3093               	movlw	high (STR_58| (0+32768))
  6739  01E0  00A3               	movwf	printf@f+1
  6740  01E1  3070               	movlw	112
  6741  01E2  318A  2286  3181   	fcall	_read_register
  6742  01E5  0020               	movlb	0	; select bank0
  6743  01E6  00C3               	movwf	??_can_dump_registers
  6744  01E7  01C4               	clrf	??_can_dump_registers+1
  6745  01E8  0843               	movf	??_can_dump_registers,w
  6746  01E9  00A4               	movwf	?_printf+2
  6747  01EA  0844               	movf	??_can_dump_registers+1,w
  6748  01EB  00A5               	movwf	?_printf+3
  6749  01EC  3185  25A5  3181   	fcall	_printf
  6750                           
  6751                           ;mcp2515.c: 374: printf("\n");
  6752  01EF  30DF               	movlw	low ((STR_41+3)| (0+32768))
  6753  01F0  0020               	movlb	0	; select bank0
  6754  01F1  00A2               	movwf	printf@f
  6755  01F2  3094               	movlw	high ((STR_41+3)| (0+32768))
  6756  01F3  00A3               	movwf	printf@f+1
  6757  01F4  3185  25A5  3181   	fcall	_printf
  6758                           
  6759                           ;mcp2515.c: 376: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6760  01F7  3019               	movlw	low (STR_60| (0+32768))
  6761  01F8  0020               	movlb	0	; select bank0
  6762  01F9  00A2               	movwf	printf@f
  6763  01FA  3094               	movlw	high (STR_60| (0+32768))
  6764  01FB  00A3               	movwf	printf@f+1
  6765  01FC  300F               	movlw	15
  6766  01FD  318A  2286  3181   	fcall	_read_register
  6767  0200  0020               	movlb	0	; select bank0
  6768  0201  00C3               	movwf	??_can_dump_registers
  6769  0202  01C4               	clrf	??_can_dump_registers+1
  6770  0203  0843               	movf	??_can_dump_registers,w
  6771  0204  00A4               	movwf	?_printf+2
  6772  0205  0844               	movf	??_can_dump_registers+1,w
  6773  0206  00A5               	movwf	?_printf+3
  6774  0207  3185  25A5  3181   	fcall	_printf
  6775                           
  6776                           ;mcp2515.c: 377: printf("CANSTAT: %02x\n", read_register(0x0e));
  6777  020A  3028               	movlw	low (STR_25| (0+32768))
  6778  020B  0020               	movlb	0	; select bank0
  6779  020C  00A2               	movwf	printf@f
  6780  020D  3094               	movlw	high (STR_25| (0+32768))
  6781  020E  00A3               	movwf	printf@f+1
  6782  020F  300E               	movlw	14
  6783  0210  318A  2286  3181   	fcall	_read_register
  6784  0213  0020               	movlb	0	; select bank0
  6785  0214  00C3               	movwf	??_can_dump_registers
  6786  0215  01C4               	clrf	??_can_dump_registers+1
  6787  0216  0843               	movf	??_can_dump_registers,w
  6788  0217  00A4               	movwf	?_printf+2
  6789  0218  0844               	movf	??_can_dump_registers+1,w
  6790  0219  00A5               	movwf	?_printf+3
  6791  021A  3185  25A5  3181   	fcall	_printf
  6792                           
  6793                           ;mcp2515.c: 378: printf("---\n");
  6794  021D  30DC               	movlw	low (STR_41| (0+32768))
  6795  021E  0020               	movlb	0	; select bank0
  6796  021F  00A2               	movwf	printf@f
  6797  0220  3094               	movlw	high (STR_41| (0+32768))
  6798  0221  00A3               	movwf	printf@f+1
  6799  0222  3185  25A5         	fcall	_printf
  6800  0224  0008               	return
  6801  0225                     __end_of_can_dump_registers:	
  6802                           
  6803                           	psect	text14
  6804  0A86                     __ptext14:	
  6805 ;; *************** function _read_register *****************
  6806 ;; Defined at:
  6807 ;;		line 326 in file "mcp2515.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  addr            1    wreg     unsigned char 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  addr            1    1[BANK0 ] unsigned char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      unsigned char 
  6814 ;; Registers used:
  6815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;Total ram usage:        2 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    3
  6828 ;; This function calls:
  6829 ;;		_SPI_exchange
  6830 ;; This function is called by:
  6831 ;;		_can_dump_registers
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           
  6836                           ;psect for function _read_register
  6837  0A86                     _read_register:	
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6841                           ;read_register@addr stored from wreg
  6842  0A86  0020               	movlb	0	; select bank0
  6843  0A87  00A1               	movwf	read_register@addr
  6844                           
  6845                           ;mcp2515.c: 327: buf[0] = 0b00000011u;
  6846  0A88  3003               	movlw	3
  6847  0A89  00A0               	movwf	??_read_register
  6848  0A8A  0820               	movf	??_read_register,w
  6849  0A8B  0021               	movlb	1	; select bank1
  6850  0A8C  00B4               	movwf	_buf^(0+128)
  6851                           
  6852                           ;mcp2515.c: 328: buf[1] = addr;
  6853  0A8D  0020               	movlb	0	; select bank0
  6854  0A8E  0821               	movf	read_register@addr,w
  6855  0A8F  00A0               	movwf	??_read_register
  6856  0A90  0820               	movf	??_read_register,w
  6857  0A91  0021               	movlb	1	; select bank1
  6858  0A92  00B5               	movwf	(_buf^(0+128)+1)
  6859                           
  6860                           ;mcp2515.c: 329: buf[2] = 0x00;
  6861  0A93  01B6               	clrf	(_buf^(0+128)+2)
  6862                           
  6863                           ;mcp2515.c: 330: SPI_exchange(buf, 3);
  6864  0A94  3003               	movlw	3
  6865  0A95  0020               	movlb	0	; select bank0
  6866  0A96  00A0               	movwf	??_read_register
  6867  0A97  0820               	movf	??_read_register,w
  6868  0A98  00F8               	movwf	SPI_exchange@len
  6869  0A99  30B4               	movlw	(low (_buf| 0))& (0+255)
  6870  0A9A  318A  225A         	fcall	_SPI_exchange
  6871                           
  6872                           ;mcp2515.c: 331: return buf[2];
  6873  0A9C  0021               	movlb	1	; select bank1
  6874  0A9D  0836               	movf	(_buf^(0+128)+2),w
  6875  0A9E  0008               	return
  6876  0A9F                     __end_of_read_register:	
  6877                           
  6878                           	psect	text15
  6879  0049                     __ptext15:	
  6880 ;; *************** function _can_dump_masks_and_filters *****************
  6881 ;; Defined at:
  6882 ;;		line 334 in file "mcp2515.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;		None
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  m               2   47[BANK0 ] unsigned int 
  6887 ;;  i               1   49[BANK0 ] unsigned char 
  6888 ;;  l               1   46[BANK0 ] unsigned char 
  6889 ;;  h               1   45[BANK0 ] unsigned char 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;Total ram usage:       15 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    3
  6906 ;; This function calls:
  6907 ;;		_printf
  6908 ;; This function is called by:
  6909 ;;		_main
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           
  6914                           ;psect for function _can_dump_masks_and_filters
  6915  0049                     _can_dump_masks_and_filters:	
  6916                           
  6917                           ;mcp2515.c: 335: uint8_t i, h, l;
  6918                           ;mcp2515.c: 336: uint16_t m;
  6919                           ;mcp2515.c: 337: printf("---\n");
  6920                           
  6921                           ;incstack = 0
  6922                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6923  0049  30DC               	movlw	low (STR_41| (0+32768))
  6924  004A  0020               	movlb	0	; select bank0
  6925  004B  00A2               	movwf	printf@f
  6926  004C  3094               	movlw	high (STR_41| (0+32768))
  6927  004D  00A3               	movwf	printf@f+1
  6928  004E  3185  25A5  3180   	fcall	_printf
  6929                           
  6930                           ;mcp2515.c: 338: for(i=0; i<2; i++) {
  6931  0051  0020               	movlb	0	; select bank0
  6932  0052  01D1               	clrf	can_dump_masks_and_filters@i
  6933  0053  3002               	movlw	2
  6934  0054  0251               	subwf	can_dump_masks_and_filters@i,w
  6935  0055  1803               	btfsc	3,0
  6936  0056  28B0               	goto	l3020
  6937  0057                     l3008:	
  6938                           
  6939                           ;mcp2515.c: 339: m = save_rxmn[i];
  6940  0057  3551               	lslf	can_dump_masks_and_filters@i,w
  6941  0058  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6942  0059  0086               	movwf	6
  6943  005A  0187               	clrf	7
  6944  005B  3F40               	moviw [0]fsr1
  6945  005C  00CF               	movwf	can_dump_masks_and_filters@m
  6946  005D  3F41               	moviw [1]fsr1
  6947  005E  00D0               	movwf	can_dump_masks_and_filters@m+1
  6948                           
  6949                           ;mcp2515.c: 340: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6950  005F  0850               	movf	can_dump_masks_and_filters@m+1,w
  6951  0060  00C4               	movwf	??_can_dump_masks_and_filters+1
  6952  0061  084F               	movf	can_dump_masks_and_filters@m,w
  6953  0062  00C3               	movwf	??_can_dump_masks_and_filters
  6954  0063  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6955  0064  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6956  0065  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6957  0066  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6958  0067  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6959  0068  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6960  0069  0843               	movf	??_can_dump_masks_and_filters,w
  6961  006A  00C5               	movwf	??_can_dump_masks_and_filters+2
  6962  006B  0845               	movf	??_can_dump_masks_and_filters+2,w
  6963  006C  00CD               	movwf	can_dump_masks_and_filters@h
  6964                           
  6965                           ;mcp2515.c: 341: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6966  006D  084F               	movf	can_dump_masks_and_filters@m,w
  6967  006E  3907               	andlw	7
  6968  006F  00C3               	movwf	??_can_dump_masks_and_filters
  6969  0070  3004               	movlw	4
  6970  0071                     u2605:	
  6971  0071  35C3               	lslf	??_can_dump_masks_and_filters,f
  6972  0072  3EFF               	addlw	-1
  6973  0073  1D03               	skipz
  6974  0074  2871               	goto	u2605
  6975  0075  3543               	lslf	??_can_dump_masks_and_filters,w
  6976  0076  00C4               	movwf	??_can_dump_masks_and_filters+1
  6977  0077  0844               	movf	??_can_dump_masks_and_filters+1,w
  6978  0078  00CE               	movwf	can_dump_masks_and_filters@l
  6979                           
  6980                           ;mcp2515.c: 342: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6981  0079  3070               	movlw	low (STR_42| (0+32768))
  6982  007A  00A2               	movwf	printf@f
  6983  007B  3091               	movlw	high (STR_42| (0+32768))
  6984  007C  00A3               	movwf	printf@f+1
  6985  007D  0851               	movf	can_dump_masks_and_filters@i,w
  6986  007E  00C3               	movwf	??_can_dump_masks_and_filters
  6987  007F  01C4               	clrf	??_can_dump_masks_and_filters+1
  6988  0080  0843               	movf	??_can_dump_masks_and_filters,w
  6989  0081  00A4               	movwf	?_printf+2
  6990  0082  0844               	movf	??_can_dump_masks_and_filters+1,w
  6991  0083  00A5               	movwf	?_printf+3
  6992  0084  0851               	movf	can_dump_masks_and_filters@i,w
  6993  0085  00C5               	movwf	??_can_dump_masks_and_filters+2
  6994  0086  01C6               	clrf	??_can_dump_masks_and_filters+3
  6995  0087  0845               	movf	??_can_dump_masks_and_filters+2,w
  6996  0088  00A6               	movwf	?_printf+4
  6997  0089  0846               	movf	??_can_dump_masks_and_filters+3,w
  6998  008A  00A7               	movwf	?_printf+5
  6999  008B  0851               	movf	can_dump_masks_and_filters@i,w
  7000  008C  00C7               	movwf	??_can_dump_masks_and_filters+4
  7001  008D  01C8               	clrf	??_can_dump_masks_and_filters+5
  7002  008E  0847               	movf	??_can_dump_masks_and_filters+4,w
  7003  008F  00A8               	movwf	?_printf+6
  7004  0090  0848               	movf	??_can_dump_masks_and_filters+5,w
  7005  0091  00A9               	movwf	?_printf+7
  7006  0092  0850               	movf	can_dump_masks_and_filters@m+1,w
  7007  0093  00AB               	movwf	?_printf+9
  7008  0094  084F               	movf	can_dump_masks_and_filters@m,w
  7009  0095  00AA               	movwf	?_printf+8
  7010  0096  084D               	movf	can_dump_masks_and_filters@h,w
  7011  0097  00C9               	movwf	??_can_dump_masks_and_filters+6
  7012  0098  01CA               	clrf	??_can_dump_masks_and_filters+7
  7013  0099  0849               	movf	??_can_dump_masks_and_filters+6,w
  7014  009A  00AC               	movwf	?_printf+10
  7015  009B  084A               	movf	??_can_dump_masks_and_filters+7,w
  7016  009C  00AD               	movwf	?_printf+11
  7017  009D  084E               	movf	can_dump_masks_and_filters@l,w
  7018  009E  00CB               	movwf	??_can_dump_masks_and_filters+8
  7019  009F  01CC               	clrf	??_can_dump_masks_and_filters+9
  7020  00A0  084B               	movf	??_can_dump_masks_and_filters+8,w
  7021  00A1  00AE               	movwf	?_printf+12
  7022  00A2  084C               	movf	??_can_dump_masks_and_filters+9,w
  7023  00A3  00AF               	movwf	?_printf+13
  7024  00A4  3185  25A5  3180   	fcall	_printf
  7025  00A7  3001               	movlw	1
  7026  00A8  0020               	movlb	0	; select bank0
  7027  00A9  00C3               	movwf	??_can_dump_masks_and_filters
  7028  00AA  0843               	movf	??_can_dump_masks_and_filters,w
  7029  00AB  07D1               	addwf	can_dump_masks_and_filters@i,f
  7030  00AC  3002               	movlw	2
  7031  00AD  0251               	subwf	can_dump_masks_and_filters@i,w
  7032  00AE  1C03               	skipc
  7033  00AF  2857               	goto	l3008
  7034  00B0                     l3020:	
  7035                           
  7036                           ;mcp2515.c: 343: }
  7037                           ;mcp2515.c: 344: for(i=0; i<6; i++) {
  7038  00B0  01D1               	clrf	can_dump_masks_and_filters@i
  7039  00B1  3006               	movlw	6
  7040  00B2  0251               	subwf	can_dump_masks_and_filters@i,w
  7041  00B3  1803               	btfsc	3,0
  7042  00B4  290E               	goto	l3038
  7043  00B5                     l3026:	
  7044                           
  7045                           ;mcp2515.c: 345: m = save_rxfn[i];
  7046  00B5  3551               	lslf	can_dump_masks_and_filters@i,w
  7047  00B6  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  7048  00B7  0086               	movwf	6
  7049  00B8  0187               	clrf	7
  7050  00B9  3F40               	moviw [0]fsr1
  7051  00BA  00CF               	movwf	can_dump_masks_and_filters@m
  7052  00BB  3F41               	moviw [1]fsr1
  7053  00BC  00D0               	movwf	can_dump_masks_and_filters@m+1
  7054                           
  7055                           ;mcp2515.c: 346: h = ((uint8_t)((m >> 3) & 0x00ffu));
  7056  00BD  0850               	movf	can_dump_masks_and_filters@m+1,w
  7057  00BE  00C4               	movwf	??_can_dump_masks_and_filters+1
  7058  00BF  084F               	movf	can_dump_masks_and_filters@m,w
  7059  00C0  00C3               	movwf	??_can_dump_masks_and_filters
  7060  00C1  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7061  00C2  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7062  00C3  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7063  00C4  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7064  00C5  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7065  00C6  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7066  00C7  0843               	movf	??_can_dump_masks_and_filters,w
  7067  00C8  00C5               	movwf	??_can_dump_masks_and_filters+2
  7068  00C9  0845               	movf	??_can_dump_masks_and_filters+2,w
  7069  00CA  00CD               	movwf	can_dump_masks_and_filters@h
  7070                           
  7071                           ;mcp2515.c: 347: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  7072  00CB  084F               	movf	can_dump_masks_and_filters@m,w
  7073  00CC  3907               	andlw	7
  7074  00CD  00C3               	movwf	??_can_dump_masks_and_filters
  7075  00CE  3004               	movlw	4
  7076  00CF                     u2635:	
  7077  00CF  35C3               	lslf	??_can_dump_masks_and_filters,f
  7078  00D0  3EFF               	addlw	-1
  7079  00D1  1D03               	skipz
  7080  00D2  28CF               	goto	u2635
  7081  00D3  3543               	lslf	??_can_dump_masks_and_filters,w
  7082  00D4  00C4               	movwf	??_can_dump_masks_and_filters+1
  7083  00D5  0844               	movf	??_can_dump_masks_and_filters+1,w
  7084  00D6  00CE               	movwf	can_dump_masks_and_filters@l
  7085                           
  7086                           ;mcp2515.c: 348: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  7087  00D7  3044               	movlw	low (STR_43| (0+32768))
  7088  00D8  00A2               	movwf	printf@f
  7089  00D9  3091               	movlw	high (STR_43| (0+32768))
  7090  00DA  00A3               	movwf	printf@f+1
  7091  00DB  0851               	movf	can_dump_masks_and_filters@i,w
  7092  00DC  00C3               	movwf	??_can_dump_masks_and_filters
  7093  00DD  01C4               	clrf	??_can_dump_masks_and_filters+1
  7094  00DE  0843               	movf	??_can_dump_masks_and_filters,w
  7095  00DF  00A4               	movwf	?_printf+2
  7096  00E0  0844               	movf	??_can_dump_masks_and_filters+1,w
  7097  00E1  00A5               	movwf	?_printf+3
  7098  00E2  0851               	movf	can_dump_masks_and_filters@i,w
  7099  00E3  00C5               	movwf	??_can_dump_masks_and_filters+2
  7100  00E4  01C6               	clrf	??_can_dump_masks_and_filters+3
  7101  00E5  0845               	movf	??_can_dump_masks_and_filters+2,w
  7102  00E6  00A6               	movwf	?_printf+4
  7103  00E7  0846               	movf	??_can_dump_masks_and_filters+3,w
  7104  00E8  00A7               	movwf	?_printf+5
  7105  00E9  0851               	movf	can_dump_masks_and_filters@i,w
  7106  00EA  00C7               	movwf	??_can_dump_masks_and_filters+4
  7107  00EB  01C8               	clrf	??_can_dump_masks_and_filters+5
  7108  00EC  0847               	movf	??_can_dump_masks_and_filters+4,w
  7109  00ED  00A8               	movwf	?_printf+6
  7110  00EE  0848               	movf	??_can_dump_masks_and_filters+5,w
  7111  00EF  00A9               	movwf	?_printf+7
  7112  00F0  0850               	movf	can_dump_masks_and_filters@m+1,w
  7113  00F1  00AB               	movwf	?_printf+9
  7114  00F2  084F               	movf	can_dump_masks_and_filters@m,w
  7115  00F3  00AA               	movwf	?_printf+8
  7116  00F4  084D               	movf	can_dump_masks_and_filters@h,w
  7117  00F5  00C9               	movwf	??_can_dump_masks_and_filters+6
  7118  00F6  01CA               	clrf	??_can_dump_masks_and_filters+7
  7119  00F7  0849               	movf	??_can_dump_masks_and_filters+6,w
  7120  00F8  00AC               	movwf	?_printf+10
  7121  00F9  084A               	movf	??_can_dump_masks_and_filters+7,w
  7122  00FA  00AD               	movwf	?_printf+11
  7123  00FB  084E               	movf	can_dump_masks_and_filters@l,w
  7124  00FC  00CB               	movwf	??_can_dump_masks_and_filters+8
  7125  00FD  01CC               	clrf	??_can_dump_masks_and_filters+9
  7126  00FE  084B               	movf	??_can_dump_masks_and_filters+8,w
  7127  00FF  00AE               	movwf	?_printf+12
  7128  0100  084C               	movf	??_can_dump_masks_and_filters+9,w
  7129  0101  00AF               	movwf	?_printf+13
  7130  0102  3185  25A5  3180   	fcall	_printf
  7131  0105  3001               	movlw	1
  7132  0106  0020               	movlb	0	; select bank0
  7133  0107  00C3               	movwf	??_can_dump_masks_and_filters
  7134  0108  0843               	movf	??_can_dump_masks_and_filters,w
  7135  0109  07D1               	addwf	can_dump_masks_and_filters@i,f
  7136  010A  3006               	movlw	6
  7137  010B  0251               	subwf	can_dump_masks_and_filters@i,w
  7138  010C  1C03               	skipc
  7139  010D  28B5               	goto	l3026
  7140  010E                     l3038:	
  7141                           
  7142                           ;mcp2515.c: 349: }
  7143                           ;mcp2515.c: 350: printf("---\n");
  7144  010E  30DC               	movlw	low (STR_41| (0+32768))
  7145  010F  00A2               	movwf	printf@f
  7146  0110  3094               	movlw	high (STR_41| (0+32768))
  7147  0111  00A3               	movwf	printf@f+1
  7148  0112  3185  25A5         	fcall	_printf
  7149  0114  0008               	return
  7150  0115                     __end_of_can_dump_masks_and_filters:	
  7151                           
  7152                           	psect	text16
  7153  0BC9                     __ptext16:	
  7154 ;; *************** function _can_baudrate *****************
  7155 ;; Defined at:
  7156 ;;		line 297 in file "mcp2515.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  bpr             1    wreg     unsigned char 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  bpr             1   41[BANK0 ] unsigned char 
  7161 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  7162 ;;  mask            1   42[BANK0 ] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      unsigned char 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;Total ram usage:        5 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    4
  7179 ;; This function calls:
  7180 ;;		_SPI_exchange
  7181 ;;		_can_ope_mode
  7182 ;; This function is called by:
  7183 ;;		_main
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _can_baudrate
  7189  0BC9                     _can_baudrate:	
  7190                           
  7191                           ;incstack = 0
  7192                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7193                           ;can_baudrate@bpr stored from wreg
  7194  0BC9  0020               	movlb	0	; select bank0
  7195  0BCA  00C9               	movwf	can_baudrate@bpr
  7196                           
  7197                           ;mcp2515.c: 298: can_ope_mode(0b10000000u);
  7198  0BCB  3080               	movlw	128
  7199  0BCC  318C  24ED  318B   	fcall	_can_ope_mode
  7200                           
  7201                           ;mcp2515.c: 301: uint8_t mask = 0b00111111;
  7202  0BCF  303F               	movlw	63
  7203  0BD0  0020               	movlb	0	; select bank0
  7204  0BD1  00C7               	movwf	??_can_baudrate
  7205  0BD2  0847               	movf	??_can_baudrate,w
  7206  0BD3  00CA               	movwf	can_baudrate@mask
  7207                           
  7208                           ;mcp2515.c: 302: buf[0] = 0b00000101u;
  7209  0BD4  3005               	movlw	5
  7210  0BD5  00C7               	movwf	??_can_baudrate
  7211  0BD6  0847               	movf	??_can_baudrate,w
  7212  0BD7  0021               	movlb	1	; select bank1
  7213  0BD8  00B4               	movwf	_buf^(0+128)
  7214                           
  7215                           ;mcp2515.c: 303: buf[1] = 0x2au;
  7216  0BD9  302A               	movlw	42
  7217  0BDA  0020               	movlb	0	; select bank0
  7218  0BDB  00C7               	movwf	??_can_baudrate
  7219  0BDC  0847               	movf	??_can_baudrate,w
  7220  0BDD  0021               	movlb	1	; select bank1
  7221  0BDE  00B5               	movwf	(_buf^(0+128)+1)
  7222                           
  7223                           ;mcp2515.c: 304: buf[2] = mask;
  7224  0BDF  0020               	movlb	0	; select bank0
  7225  0BE0  084A               	movf	can_baudrate@mask,w
  7226  0BE1  00C7               	movwf	??_can_baudrate
  7227  0BE2  0847               	movf	??_can_baudrate,w
  7228  0BE3  0021               	movlb	1	; select bank1
  7229  0BE4  00B6               	movwf	(_buf^(0+128)+2)
  7230                           
  7231                           ;mcp2515.c: 305: buf[3] = bpr;
  7232  0BE5  0020               	movlb	0	; select bank0
  7233  0BE6  0849               	movf	can_baudrate@bpr,w
  7234  0BE7  00C7               	movwf	??_can_baudrate
  7235  0BE8  0847               	movf	??_can_baudrate,w
  7236  0BE9  0021               	movlb	1	; select bank1
  7237  0BEA  00B7               	movwf	(_buf^(0+128)+3)
  7238                           
  7239                           ;mcp2515.c: 306: uint8_t bytes_written = SPI_exchange(buf, 4);
  7240  0BEB  3004               	movlw	4
  7241  0BEC  0020               	movlb	0	; select bank0
  7242  0BED  00C7               	movwf	??_can_baudrate
  7243  0BEE  0847               	movf	??_can_baudrate,w
  7244  0BEF  00F8               	movwf	SPI_exchange@len
  7245  0BF0  30B4               	movlw	(low (_buf| 0))& (0+255)
  7246  0BF1  318A  225A  318B   	fcall	_SPI_exchange
  7247  0BF4  0020               	movlb	0	; select bank0
  7248  0BF5  00C8               	movwf	??_can_baudrate+1
  7249  0BF6  0848               	movf	??_can_baudrate+1,w
  7250  0BF7  00CB               	movwf	can_baudrate@bytes_written
  7251                           
  7252                           ;mcp2515.c: 307: can_ope_mode(operation_mode);
  7253  0BF8  086F               	movf	_operation_mode,w
  7254  0BF9  318C  24ED         	fcall	_can_ope_mode
  7255                           
  7256                           ;mcp2515.c: 311: return 0;
  7257                           ;	Return value of _can_baudrate is never used
  7258                           
  7259                           ;mcp2515.c: 310: } else {
  7260                           
  7261                           ;mcp2515.c: 309: return 1;
  7262                           ;	Return value of _can_baudrate is never used
  7263  0BFB  0008               	return
  7264  0BFC                     __end_of_can_baudrate:	
  7265                           
  7266                           	psect	text17
  7267  0006                     __ptext17:	
  7268 ;; *************** function _can_abort *****************
  7269 ;; Defined at:
  7270 ;;		line 315 in file "mcp2515.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      unsigned char 
  7277 ;; Registers used:
  7278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;Total ram usage:        2 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    4
  7291 ;; This function calls:
  7292 ;;		_abort_pending_transmissions
  7293 ;;		_can_ope_mode
  7294 ;; This function is called by:
  7295 ;;		_main
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _can_abort
  7301  0006                     _can_abort:	
  7302                           
  7303                           ;mcp2515.c: 316: can_ope_mode(0b10000000u);
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7307  0006  3080               	movlw	128
  7308  0007  318C  24ED  3180   	fcall	_can_ope_mode
  7309                           
  7310                           ;mcp2515.c: 317: uint8_t bytes_written = abort_pending_transmissions();
  7311  000A  318A  22FB  3180   	fcall	_abort_pending_transmissions
  7312  000D  0020               	movlb	0	; select bank0
  7313  000E  00C7               	movwf	??_can_abort
  7314  000F  0847               	movf	??_can_abort,w
  7315  0010  00C8               	movwf	can_abort@bytes_written
  7316                           
  7317                           ;mcp2515.c: 318: can_ope_mode(operation_mode);
  7318  0011  086F               	movf	_operation_mode,w
  7319  0012  318C  24ED         	fcall	_can_ope_mode
  7320                           
  7321                           ;mcp2515.c: 322: return 0;
  7322                           ;	Return value of _can_abort is never used
  7323                           
  7324                           ;mcp2515.c: 321: } else {
  7325                           
  7326                           ;mcp2515.c: 320: return 1;
  7327                           ;	Return value of _can_abort is never used
  7328  0014  0008               	return
  7329  0015                     __end_of_can_abort:	
  7330                           
  7331                           	psect	text18
  7332  0CED                     __ptext18:	
  7333 ;; *************** function _can_ope_mode *****************
  7334 ;; Defined at:
  7335 ;;		line 91 in file "mcp2515.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  ope_mode        1    wreg     unsigned char 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  7340 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      unsigned char 
  7343 ;; Registers used:
  7344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;Total ram usage:        4 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    3
  7357 ;; This function calls:
  7358 ;;		_SPI_exchange
  7359 ;;		_printf
  7360 ;; This function is called by:
  7361 ;;		_main
  7362 ;;		_can_init
  7363 ;;		_can_set_mask
  7364 ;;		_can_baudrate
  7365 ;;		_can_abort
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _can_ope_mode
  7371  0CED                     _can_ope_mode:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7375                           ;can_ope_mode@ope_mode stored from wreg
  7376  0CED  0020               	movlb	0	; select bank0
  7377  0CEE  00C6               	movwf	can_ope_mode@ope_mode
  7378                           
  7379                           ;mcp2515.c: 92: buf[0] = 0b00000010u;
  7380  0CEF  3002               	movlw	2
  7381  0CF0  00C3               	movwf	??_can_ope_mode
  7382  0CF1  0843               	movf	??_can_ope_mode,w
  7383  0CF2  0021               	movlb	1	; select bank1
  7384  0CF3  00B4               	movwf	_buf^(0+128)
  7385                           
  7386                           ;mcp2515.c: 93: buf[1] = 0x0fu;
  7387  0CF4  300F               	movlw	15
  7388  0CF5  0020               	movlb	0	; select bank0
  7389  0CF6  00C3               	movwf	??_can_ope_mode
  7390  0CF7  0843               	movf	??_can_ope_mode,w
  7391  0CF8  0021               	movlb	1	; select bank1
  7392  0CF9  00B5               	movwf	(_buf^(0+128)+1)
  7393                           
  7394                           ;mcp2515.c: 94: buf[2] = ope_mode;
  7395  0CFA  0020               	movlb	0	; select bank0
  7396  0CFB  0846               	movf	can_ope_mode@ope_mode,w
  7397  0CFC  00C3               	movwf	??_can_ope_mode
  7398  0CFD  0843               	movf	??_can_ope_mode,w
  7399  0CFE  0021               	movlb	1	; select bank1
  7400  0CFF  00B6               	movwf	(_buf^(0+128)+2)
  7401                           
  7402                           ;mcp2515.c: 95: uint8_t bytes_written = SPI_exchange(buf, 3);
  7403  0D00  3003               	movlw	3
  7404  0D01  0020               	movlb	0	; select bank0
  7405  0D02  00C3               	movwf	??_can_ope_mode
  7406  0D03  0843               	movf	??_can_ope_mode,w
  7407  0D04  00F8               	movwf	SPI_exchange@len
  7408  0D05  30B4               	movlw	(low (_buf| 0))& (0+255)
  7409  0D06  318A  225A  318C   	fcall	_SPI_exchange
  7410  0D09  0020               	movlb	0	; select bank0
  7411  0D0A  00C4               	movwf	??_can_ope_mode+1
  7412  0D0B  0844               	movf	??_can_ope_mode+1,w
  7413  0D0C  00C5               	movwf	can_ope_mode@bytes_written
  7414                           
  7415                           ;mcp2515.c: 97: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  7416  0D0D  3080               	movlw	128
  7417  0D0E  0646               	xorwf	can_ope_mode@ope_mode,w
  7418  0D0F  1903               	btfsc	3,2
  7419  0D10  2D15               	goto	l2674
  7420  0D11  0846               	movf	can_ope_mode@ope_mode,w
  7421  0D12  00C3               	movwf	??_can_ope_mode
  7422  0D13  0843               	movf	??_can_ope_mode,w
  7423  0D14  00EF               	movwf	_operation_mode
  7424  0D15                     l2674:	
  7425                           
  7426                           ;mcp2515.c: 99: if (bytes_written == 3) {
  7427  0D15  3003               	movlw	3
  7428  0D16  0645               	xorwf	can_ope_mode@bytes_written,w
  7429  0D17  1D03               	btfss	3,2
  7430  0D18  0008               	return
  7431                           
  7432                           ;mcp2515.c: 100: buf[0] = 0b00000011u;
  7433  0D19  3003               	movlw	3
  7434  0D1A  00C3               	movwf	??_can_ope_mode
  7435  0D1B  0843               	movf	??_can_ope_mode,w
  7436  0D1C  0021               	movlb	1	; select bank1
  7437  0D1D  00B4               	movwf	_buf^(0+128)
  7438                           
  7439                           ;mcp2515.c: 101: buf[1] = 0x0e;
  7440  0D1E  300E               	movlw	14
  7441  0D1F  0020               	movlb	0	; select bank0
  7442  0D20  00C3               	movwf	??_can_ope_mode
  7443  0D21  0843               	movf	??_can_ope_mode,w
  7444  0D22  0021               	movlb	1	; select bank1
  7445  0D23  00B5               	movwf	(_buf^(0+128)+1)
  7446                           
  7447                           ;mcp2515.c: 102: bytes_written = SPI_exchange(buf, 3);
  7448  0D24  3003               	movlw	3
  7449  0D25  0020               	movlb	0	; select bank0
  7450  0D26  00C3               	movwf	??_can_ope_mode
  7451  0D27  0843               	movf	??_can_ope_mode,w
  7452  0D28  00F8               	movwf	SPI_exchange@len
  7453  0D29  30B4               	movlw	(low (_buf| 0))& (0+255)
  7454  0D2A  318A  225A  318C   	fcall	_SPI_exchange
  7455  0D2D  0020               	movlb	0	; select bank0
  7456  0D2E  00C4               	movwf	??_can_ope_mode+1
  7457  0D2F  0844               	movf	??_can_ope_mode+1,w
  7458  0D30  00C5               	movwf	can_ope_mode@bytes_written
  7459                           
  7460                           ;mcp2515.c: 103: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  7461  0D31  086B               	movf	_mode,w
  7462  0D32  1903               	btfsc	3,2
  7463  0D33  0008               	return
  7464  0D34  3028               	movlw	low (STR_25| (0+32768))
  7465  0D35  00A2               	movwf	printf@f
  7466  0D36  3094               	movlw	high (STR_25| (0+32768))
  7467  0D37  00A3               	movwf	printf@f+1
  7468  0D38  0021               	movlb	1	; select bank1
  7469  0D39  0836               	movf	(_buf^(0+128)+2),w
  7470  0D3A  0020               	movlb	0	; select bank0
  7471  0D3B  00C3               	movwf	??_can_ope_mode
  7472  0D3C  01C4               	clrf	??_can_ope_mode+1
  7473  0D3D  0843               	movf	??_can_ope_mode,w
  7474  0D3E  00A4               	movwf	?_printf+2
  7475  0D3F  0844               	movf	??_can_ope_mode+1,w
  7476  0D40  00A5               	movwf	?_printf+3
  7477  0D41  3185  25A5         	fcall	_printf
  7478                           
  7479                           ;mcp2515.c: 106: return 0;
  7480                           ;	Return value of _can_ope_mode is never used
  7481                           
  7482                           ;mcp2515.c: 105: } else {
  7483                           
  7484                           ;mcp2515.c: 104: return 1;
  7485                           ;	Return value of _can_ope_mode is never used
  7486  0D43  0008               	return
  7487  0D44                     __end_of_can_ope_mode:	
  7488                           
  7489                           	psect	text19
  7490  05A5                     __ptext19:	
  7491 ;; *************** function _printf *****************
  7492 ;; Defined at:
  7493 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  7496 ;;		 -> STR_62(5), STR_61(15), STR_60(15), STR_59(2), 
  7497 ;;		 -> STR_58(16), STR_57(16), STR_56(2), STR_55(16), 
  7498 ;;		 -> STR_54(16), STR_53(16), STR_52(2), STR_51(12), 
  7499 ;;		 -> STR_50(12), STR_49(12), STR_48(2), STR_47(12), 
  7500 ;;		 -> STR_46(12), STR_45(5), STR_44(5), STR_43(44), 
  7501 ;;		 -> STR_42(44), STR_41(5), STR_40(13), STR_39(13), 
  7502 ;;		 -> STR_38(18), STR_37(17), STR_36(17), STR_35(20), 
  7503 ;;		 -> STR_34(14), STR_33(14), STR_32(14), STR_31(15), 
  7504 ;;		 -> STR_30(16), STR_29(17), STR_28(17), STR_27(23), 
  7505 ;;		 -> STR_26(21), STR_25(15), STR_24(22), STR_23(44), 
  7506 ;;		 -> STR_22(57), STR_21(26), STR_20(21), STR_19(29), 
  7507 ;;		 -> STR_18(38), STR_17(25), STR_16(42), STR_15(38), 
  7508 ;;		 -> STR_14(58), STR_13(54), STR_12(59), STR_11(51), 
  7509 ;;		 -> STR_10(45), STR_8(36), STR_7(3), STR_6(4), 
  7510 ;;		 -> STR_5(2), STR_4(6), STR_3(6), STR_2(7), 
  7511 ;;		 -> STR_1(11), 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  idx             1   22[BANK0 ] unsigned char 
  7514 ;;  tmpval          4    0        struct .
  7515 ;;  width           2   32[BANK0 ] int 
  7516 ;;  val             2   29[BANK0 ] unsigned int 
  7517 ;;  len             2   26[BANK0 ] unsigned int 
  7518 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  7519 ;;		 -> STR_63(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  7520 ;;		 -> txf_clear@n(1), STR_9(21), main@buf(16), 
  7521 ;;  c               1   34[BANK0 ] char 
  7522 ;;  flag            1   31[BANK0 ] unsigned char 
  7523 ;;  ap              1   28[BANK0 ] PTR void [1]
  7524 ;;		 -> ?_printf(2), 
  7525 ;;  prec            1   23[BANK0 ] char 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  2    2[BANK0 ] int 
  7528 ;; Registers used:
  7529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7535 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;Total ram usage:       33 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    2
  7542 ;; This function calls:
  7543 ;;		___lwdiv
  7544 ;;		___lwmod
  7545 ;;		___wmul
  7546 ;;		_isdigit
  7547 ;;		_putch
  7548 ;; This function is called by:
  7549 ;;		_receive_handler
  7550 ;;		_main
  7551 ;;		_can_ope_mode
  7552 ;;		_can_set_mask
  7553 ;;		_receive
  7554 ;;		_can_send
  7555 ;;		_can_status_check
  7556 ;;		_can_dump_masks_and_filters
  7557 ;;		_can_dump_registers
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           
  7562                           ;psect for function _printf
  7563  05A5                     _printf:	
  7564                           
  7565                           ;doprnt.c: 466: va_list ap;
  7566                           ;doprnt.c: 499: signed char c;
  7567                           ;doprnt.c: 501: int width;
  7568                           ;doprnt.c: 506: signed char prec;
  7569                           ;doprnt.c: 508: unsigned char flag;
  7570                           ;doprnt.c: 523: union {
  7571                           ;doprnt.c: 524: unsigned long vd;
  7572                           ;doprnt.c: 525: double integ;
  7573                           ;doprnt.c: 526: } tmpval;
  7574                           ;doprnt.c: 528: unsigned int val;
  7575                           ;doprnt.c: 529: unsigned len;
  7576                           ;doprnt.c: 530: const char * cp;
  7577                           ;doprnt.c: 533: *ap = __va_start();
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7581  05A5  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7582  05A6  0020               	movlb	0	; select bank0
  7583  05A7  00B0               	movwf	??_printf
  7584  05A8  0830               	movf	??_printf,w
  7585  05A9  00BC               	movwf	printf@ap
  7586  05AA                     l2464:	
  7587                           ;doprnt.c: 536: while(c = *f++) {
  7588                           
  7589  05AA  0020               	movlb	0	; select bank0
  7590  05AB  0823               	movf	printf@f+1,w
  7591  05AC  00B1               	movwf	??_printf+1
  7592  05AD  0822               	movf	printf@f,w
  7593  05AE  00B0               	movwf	??_printf
  7594  05AF  0AA2               	incf	printf@f,f
  7595  05B0  1903               	skipnz
  7596  05B1  0AA3               	incf	printf@f+1,f
  7597  05B2  0830               	movf	??_printf,w
  7598  05B3  0084               	movwf	4
  7599  05B4  0831               	movf	??_printf+1,w
  7600  05B5  0085               	movwf	5
  7601  05B6  0800               	movf	0,w	;code access
  7602  05B7  00B2               	movwf	??_printf+2
  7603  05B8  0832               	movf	??_printf+2,w
  7604  05B9  00C2               	movwf	printf@c
  7605  05BA  0842               	movf	printf@c,w
  7606  05BB  1903               	btfsc	3,2
  7607  05BC  0008               	return
  7608                           
  7609                           ;doprnt.c: 538: if(c != '%')
  7610  05BD  3025               	movlw	37
  7611  05BE  0642               	xorwf	printf@c,w
  7612  05BF  1903               	btfsc	3,2
  7613  05C0  2DC6               	goto	l2310
  7614                           
  7615                           ;doprnt.c: 540: {
  7616                           ;doprnt.c: 541: (putch(c) );
  7617  05C1  0842               	movf	printf@c,w
  7618  05C2  3189  21E7  3185   	fcall	_putch
  7619                           
  7620                           ;doprnt.c: 542: continue;
  7621  05C5  2DAA               	goto	l2464
  7622  05C6                     l2310:	
  7623                           
  7624                           ;doprnt.c: 543: }
  7625                           ;doprnt.c: 546: width = 0;
  7626  05C6  0020               	movlb	0	; select bank0
  7627  05C7  01C0               	clrf	printf@width
  7628  05C8  01C1               	clrf	printf@width+1
  7629                           
  7630                           ;doprnt.c: 548: flag = 0;
  7631  05C9  01BF               	clrf	printf@flag
  7632                           
  7633                           ;doprnt.c: 551: switch(*f) {
  7634                           
  7635                           ;doprnt.c: 550: for(;;) {
  7636  05CA  2DD0               	goto	l2316
  7637  05CB                     l487:	
  7638                           ;doprnt.c: 579: case '0':
  7639                           
  7640                           
  7641                           ;doprnt.c: 580: flag |= 0x04;
  7642  05CB  153F               	bsf	printf@flag,2
  7643                           
  7644                           ;doprnt.c: 581: f++;
  7645  05CC  3001               	movlw	1
  7646  05CD  07A2               	addwf	printf@f,f
  7647  05CE  3000               	movlw	0
  7648  05CF  3DA3               	addwfc	printf@f+1,f
  7649  05D0                     l2316:	
  7650                           ;doprnt.c: 584: }
  7651                           
  7652                           ;doprnt.c: 582: continue;
  7653                           
  7654  05D0  0822               	movf	printf@f,w
  7655  05D1  0084               	movwf	4
  7656  05D2  0823               	movf	printf@f+1,w
  7657  05D3  0085               	movwf	5
  7658  05D4  0800               	movf	0,w	;code access
  7659                           
  7660                           ; Switch size 1, requested type "space"
  7661                           ; Number of cases is 1, Range of values is 48 to 48
  7662                           ; switch strategies available:
  7663                           ; Name         Instructions Cycles
  7664                           ; simple_byte            4     3 (average)
  7665                           ; direct_byte           11     9 (fixed)
  7666                           ; jumptable            263     9 (fixed)
  7667                           ;	Chosen strategy is simple_byte
  7668  05D5  3A30               	xorlw	48	; case 48
  7669  05D6  1903               	skipnz
  7670  05D7  2DCB               	goto	l487
  7671  05D8  2DD9               	goto	l2318
  7672  05D9                     l2318:	
  7673                           ;doprnt.c: 586: }
  7674                           
  7675                           ;doprnt.c: 585: break;
  7676                           
  7677                           
  7678                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7679  05D9  0822               	movf	printf@f,w
  7680  05DA  0084               	movwf	4
  7681  05DB  0823               	movf	printf@f+1,w
  7682  05DC  0085               	movwf	5
  7683  05DD  0800               	movf	0,w	;code access
  7684  05DE  318A  223D  3185   	fcall	_isdigit
  7685  05E1  1C03               	btfss	3,0
  7686  05E2  2E85               	goto	l2370
  7687                           
  7688                           ;doprnt.c: 598: width = 0;
  7689  05E3  0020               	movlb	0	; select bank0
  7690  05E4  01C0               	clrf	printf@width
  7691  05E5  01C1               	clrf	printf@width+1
  7692  05E6                     l2322:	
  7693                           ;doprnt.c: 599: do {
  7694                           
  7695                           
  7696                           ;doprnt.c: 600: width *= 10;
  7697  05E6  300A               	movlw	10
  7698  05E7  00F0               	movwf	___wmul@multiplier
  7699  05E8  3000               	movlw	0
  7700  05E9  00F1               	movwf	___wmul@multiplier+1
  7701  05EA  0020               	movlb	0	; select bank0
  7702  05EB  0841               	movf	printf@width+1,w
  7703  05EC  00F3               	movwf	___wmul@multiplicand+1
  7704  05ED  0840               	movf	printf@width,w
  7705  05EE  00F2               	movwf	___wmul@multiplicand
  7706  05EF  318A  229F  3185   	fcall	___wmul
  7707  05F2  0871               	movf	?___wmul+1,w
  7708  05F3  0020               	movlb	0	; select bank0
  7709  05F4  00C1               	movwf	printf@width+1
  7710  05F5  0870               	movf	?___wmul,w
  7711  05F6  00C0               	movwf	printf@width
  7712                           
  7713                           ;doprnt.c: 601: width += *f++ - '0';
  7714  05F7  0822               	movf	printf@f,w
  7715  05F8  0084               	movwf	4
  7716  05F9  0823               	movf	printf@f+1,w
  7717  05FA  0085               	movwf	5
  7718  05FB  0800               	movf	0,w	;code access
  7719  05FC  3ED0               	addlw	208
  7720  05FD  00B0               	movwf	??_printf
  7721  05FE  30FF               	movlw	255
  7722  05FF  1803               	skipnc
  7723  0600  3000               	movlw	0
  7724  0601  00B1               	movwf	??_printf+1
  7725  0602  0830               	movf	??_printf,w
  7726  0603  07C0               	addwf	printf@width,f
  7727  0604  0831               	movf	??_printf+1,w
  7728  0605  3DC1               	addwfc	printf@width+1,f
  7729  0606  3001               	movlw	1
  7730  0607  07A2               	addwf	printf@f,f
  7731  0608  3000               	movlw	0
  7732  0609  3DA3               	addwfc	printf@f+1,f
  7733                           
  7734                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7735  060A  0822               	movf	printf@f,w
  7736  060B  0084               	movwf	4
  7737  060C  0823               	movf	printf@f+1,w
  7738  060D  0085               	movwf	5
  7739  060E  0800               	movf	0,w	;code access
  7740  060F  318A  223D  3185   	fcall	_isdigit
  7741  0612  1C03               	btfss	3,0
  7742  0613  2E85               	goto	l2370
  7743  0614  2DE6               	goto	l2322
  7744  0615                     l500:	
  7745                           ;doprnt.c: 712: case 'X':
  7746                           
  7747                           ;doprnt.c: 698: case 'i':
  7748                           ;doprnt.c: 699: break;
  7749                           
  7750                           ;doprnt.c: 697: case 'd':
  7751                           
  7752                           ;doprnt.c: 638: goto alldone;
  7753                           
  7754                           ;doprnt.c: 637: case 0:
  7755                           
  7756                           ;doprnt.c: 608: }
  7757                           ;doprnt.c: 635: switch(c = *f++) {
  7758                           
  7759                           
  7760                           ;doprnt.c: 714: flag |= 0x20;
  7761  0615  16BF               	bsf	printf@flag,5
  7762  0616                     l501:	
  7763                           ;doprnt.c: 718: case 'x':
  7764                           
  7765                           
  7766                           ;doprnt.c: 721: flag |= 0x80;
  7767  0616  17BF               	bsf	printf@flag,7
  7768                           
  7769                           ;doprnt.c: 723: break;
  7770  0617  2EA9               	goto	l499
  7771  0618                     l2330:	
  7772                           ;doprnt.c: 728: case 's':
  7773                           
  7774                           
  7775                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7776  0618  083C               	movf	printf@ap,w
  7777  0619  0086               	movwf	6
  7778  061A  0187               	clrf	7
  7779  061B  3F40               	moviw [0]fsr1
  7780  061C  00B8               	movwf	printf@cp
  7781  061D  3F41               	moviw [1]fsr1
  7782  061E  00B9               	movwf	printf@cp+1
  7783  061F  3002               	movlw	2
  7784  0620  00B0               	movwf	??_printf
  7785  0621  0830               	movf	??_printf,w
  7786  0622  07BC               	addwf	printf@ap,f
  7787                           
  7788                           ;doprnt.c: 740: if(!cp)
  7789  0623  0838               	movf	printf@cp,w
  7790  0624  0439               	iorwf	printf@cp+1,w
  7791  0625  1D03               	btfss	3,2
  7792  0626  2E2B               	goto	l2338
  7793                           
  7794                           ;doprnt.c: 741: cp = "(null)";
  7795  0627  30BC               	movlw	low (STR_63| (0+32768))
  7796  0628  00B8               	movwf	printf@cp
  7797  0629  3094               	movlw	high (STR_63| (0+32768))
  7798  062A  00B9               	movwf	printf@cp+1
  7799  062B                     l2338:	
  7800                           
  7801                           ;doprnt.c: 745: len = 0;
  7802  062B  01BA               	clrf	printf@len
  7803  062C  01BB               	clrf	printf@len+1
  7804  062D                     l2342:	
  7805                           ;doprnt.c: 746: while(cp[len])
  7806                           
  7807  062D  0838               	movf	printf@cp,w
  7808  062E  073A               	addwf	printf@len,w
  7809  062F  0084               	movwf	4
  7810  0630  0839               	movf	printf@cp+1,w
  7811  0631  3D3B               	addwfc	printf@len+1,w
  7812  0632  0085               	movwf	5
  7813  0633  0012               	moviw fsr0++
  7814  0634  1903               	btfsc	3,2
  7815  0635  2E3B               	goto	l2344
  7816                           
  7817                           ;doprnt.c: 747: len++;
  7818  0636  3001               	movlw	1
  7819  0637  07BA               	addwf	printf@len,f
  7820  0638  3000               	movlw	0
  7821  0639  3DBB               	addwfc	printf@len+1,f
  7822  063A  2E2D               	goto	l2342
  7823  063B                     l2344:	
  7824                           ;doprnt.c: 750: dostring:
  7825                           
  7826                           
  7827                           ;doprnt.c: 757: if(width > len)
  7828  063B  0841               	movf	printf@width+1,w
  7829  063C  023B               	subwf	printf@len+1,w
  7830  063D  1D03               	skipz
  7831  063E  2E41               	goto	u1805
  7832  063F  0840               	movf	printf@width,w
  7833  0640  023A               	subwf	printf@len,w
  7834  0641                     u1805:	
  7835  0641  1803               	skipnc
  7836  0642  2E48               	goto	l2348
  7837                           
  7838                           ;doprnt.c: 758: width -= len;
  7839  0643  083A               	movf	printf@len,w
  7840  0644  02C0               	subwf	printf@width,f
  7841  0645  083B               	movf	printf@len+1,w
  7842  0646  3BC1               	subwfb	printf@width+1,f
  7843  0647  2E4A               	goto	l2352
  7844  0648                     l2348:	
  7845                           
  7846                           ;doprnt.c: 759: else
  7847                           ;doprnt.c: 760: width = 0;
  7848  0648  01C0               	clrf	printf@width
  7849  0649  01C1               	clrf	printf@width+1
  7850  064A                     l2352:	
  7851                           ;doprnt.c: 764: while(width--)
  7852                           
  7853  064A  30FF               	movlw	255
  7854  064B  0020               	movlb	0	; select bank0
  7855  064C  07C0               	addwf	printf@width,f
  7856  064D  30FF               	movlw	255
  7857  064E  3DC1               	addwfc	printf@width+1,f
  7858  064F  0A40               	incf	printf@width,w
  7859  0650  1903               	btfsc	3,2
  7860  0651  0A41               	incf	printf@width+1,w
  7861  0652  1903               	btfsc	3,2
  7862  0653  2E66               	goto	l2358
  7863                           
  7864                           ;doprnt.c: 765: (putch(' ') );
  7865  0654  3020               	movlw	32
  7866  0655  3189  21E7  3185   	fcall	_putch
  7867  0658  2E4A               	goto	l2352
  7868  0659                     l2354:	
  7869                           ;doprnt.c: 767: while(len--)
  7870                           
  7871                           
  7872                           ;doprnt.c: 768: (putch(*cp++) );
  7873  0659  0838               	movf	printf@cp,w
  7874  065A  0084               	movwf	4
  7875  065B  0839               	movf	printf@cp+1,w
  7876  065C  0085               	movwf	5
  7877  065D  0800               	movf	0,w	;code access
  7878  065E  3189  21E7  3185   	fcall	_putch
  7879  0661  3001               	movlw	1
  7880  0662  0020               	movlb	0	; select bank0
  7881  0663  07B8               	addwf	printf@cp,f
  7882  0664  3000               	movlw	0
  7883  0665  3DB9               	addwfc	printf@cp+1,f
  7884  0666                     l2358:	
  7885  0666  3001               	movlw	1
  7886  0667  02BA               	subwf	printf@len,f
  7887  0668  3000               	movlw	0
  7888  0669  3BBB               	subwfb	printf@len+1,f
  7889  066A  0A3A               	incf	printf@len,w
  7890  066B  1D03               	skipz
  7891  066C  2E59               	goto	l2354
  7892  066D  0A3B               	incf	printf@len+1,w
  7893  066E  1903               	btfsc	3,2
  7894  066F  2DAA               	goto	l2464
  7895  0670  2E59               	goto	l2354
  7896  0671                     l2360:	
  7897                           ;doprnt.c: 784: case 'c':
  7898                           
  7899                           ;doprnt.c: 774: continue;
  7900                           
  7901                           
  7902                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7903  0671  083C               	movf	printf@ap,w
  7904  0672  0086               	movwf	6
  7905  0673  0187               	clrf	7
  7906  0674  0801               	movf	1,w
  7907  0675  00B0               	movwf	??_printf
  7908  0676  0830               	movf	??_printf,w
  7909  0677  00C2               	movwf	printf@c
  7910  0678  3002               	movlw	2
  7911  0679  00B0               	movwf	??_printf
  7912  067A  0830               	movf	??_printf,w
  7913  067B  07BC               	addwf	printf@ap,f
  7914  067C                     l2364:	
  7915                           ;doprnt.c: 802: default:
  7916                           
  7917                           
  7918                           ;doprnt.c: 805: cp = (char *)&c;
  7919  067C  3042               	movlw	low printf@c
  7920  067D  00B8               	movwf	printf@cp
  7921  067E  3000               	movlw	high printf@c
  7922  067F  00B9               	movwf	printf@cp+1
  7923                           
  7924                           ;doprnt.c: 806: len = 1;
  7925  0680  3001               	movlw	1
  7926  0681  00BA               	movwf	printf@len
  7927  0682  3000               	movlw	0
  7928  0683  00BB               	movwf	printf@len+1
  7929                           
  7930                           ;doprnt.c: 807: goto dostring;
  7931  0684  2E3B               	goto	l2344
  7932  0685                     l2370:	
  7933                           ;doprnt.c: 822: }
  7934                           
  7935  0685  0020               	movlb	0	; select bank0
  7936  0686  0823               	movf	printf@f+1,w
  7937  0687  00B1               	movwf	??_printf+1
  7938  0688  0822               	movf	printf@f,w
  7939  0689  00B0               	movwf	??_printf
  7940  068A  0AA2               	incf	printf@f,f
  7941  068B  1903               	skipnz
  7942  068C  0AA3               	incf	printf@f+1,f
  7943  068D  0830               	movf	??_printf,w
  7944  068E  0084               	movwf	4
  7945  068F  0831               	movf	??_printf+1,w
  7946  0690  0085               	movwf	5
  7947  0691  0800               	movf	0,w	;code access
  7948  0692  00C2               	movwf	printf@c
  7949                           
  7950                           ; Switch size 1, requested type "space"
  7951                           ; Number of cases is 7, Range of values is 0 to 120
  7952                           ; switch strategies available:
  7953                           ; Name         Instructions Cycles
  7954                           ; simple_byte           22    12 (average)
  7955                           ; direct_byte          248     6 (fixed)
  7956                           ; jumptable            260     6 (fixed)
  7957                           ;	Chosen strategy is simple_byte
  7958  0693  3A00               	xorlw	0	; case 0
  7959  0694  1903               	skipnz
  7960  0695  2FEF               	goto	l556
  7961  0696  3A58               	xorlw	88	; case 88
  7962  0697  1903               	skipnz
  7963  0698  2E15               	goto	l500
  7964  0699  3A3B               	xorlw	59	; case 99
  7965  069A  1903               	skipnz
  7966  069B  2E71               	goto	l2360
  7967  069C  3A07               	xorlw	7	; case 100
  7968  069D  1903               	skipnz
  7969  069E  2EA9               	goto	l499
  7970  069F  3A0D               	xorlw	13	; case 105
  7971  06A0  1903               	skipnz
  7972  06A1  2EA9               	goto	l499
  7973  06A2  3A1A               	xorlw	26	; case 115
  7974  06A3  1903               	skipnz
  7975  06A4  2E18               	goto	l2330
  7976  06A5  3A0B               	xorlw	11	; case 120
  7977  06A6  1903               	skipnz
  7978  06A7  2E16               	goto	l501
  7979  06A8  2E7C               	goto	l2364
  7980  06A9                     l499:	
  7981                           
  7982                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7983  06A9  0020               	movlb	0	; select bank0
  7984  06AA  1BBF               	btfsc	printf@flag,7
  7985  06AB  2EC3               	goto	l2382
  7986                           
  7987                           ;doprnt.c: 1253: {
  7988                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7989  06AC  083C               	movf	printf@ap,w
  7990  06AD  0086               	movwf	6
  7991  06AE  0187               	clrf	7
  7992  06AF  3F40               	moviw [0]fsr1
  7993  06B0  00BD               	movwf	printf@val
  7994  06B1  3F41               	moviw [1]fsr1
  7995  06B2  00BE               	movwf	printf@val+1
  7996  06B3  3002               	movlw	2
  7997  06B4  00B0               	movwf	??_printf
  7998  06B5  0830               	movf	??_printf,w
  7999  06B6  07BC               	addwf	printf@ap,f
  8000                           
  8001                           ;doprnt.c: 1261: if((int)val < 0) {
  8002  06B7  1FBE               	btfss	printf@val+1,7
  8003  06B8  2F13               	goto	l2408
  8004                           
  8005                           ;doprnt.c: 1262: flag |= 0x03;
  8006  06B9  3003               	movlw	3
  8007  06BA  00B0               	movwf	??_printf
  8008  06BB  0830               	movf	??_printf,w
  8009  06BC  04BF               	iorwf	printf@flag,f
  8010                           
  8011                           ;doprnt.c: 1263: val = -val;
  8012  06BD  09BD               	comf	printf@val,f
  8013  06BE  09BE               	comf	printf@val+1,f
  8014  06BF  0ABD               	incf	printf@val,f
  8015  06C0  1903               	skipnz
  8016  06C1  0ABE               	incf	printf@val+1,f
  8017                           
  8018                           ;doprnt.c: 1264: }
  8019                           ;doprnt.c: 1266: }
  8020  06C2  2F13               	goto	l2408
  8021  06C3                     l2382:	
  8022                           
  8023                           ;doprnt.c: 1268: else
  8024                           ;doprnt.c: 1273: {
  8025                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8026  06C3  083C               	movf	printf@ap,w
  8027  06C4  0086               	movwf	6
  8028  06C5  0187               	clrf	7
  8029  06C6  3F40               	moviw [0]fsr1
  8030  06C7  00BD               	movwf	printf@val
  8031  06C8  3F41               	moviw [1]fsr1
  8032  06C9  00BE               	movwf	printf@val+1
  8033  06CA  3002               	movlw	2
  8034  06CB  00B0               	movwf	??_printf
  8035  06CC  0830               	movf	??_printf,w
  8036  06CD  07BC               	addwf	printf@ap,f
  8037                           
  8038                           ;doprnt.c: 1287: }
  8039                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8040  06CE  2F13               	goto	l2408
  8041  06CF                     l522:	
  8042                           ;doprnt.c: 1299: case 0x00:
  8043                           
  8044                           
  8045                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8046  06CF  01C2               	clrf	printf@c
  8047  06D0  0AC2               	incf	printf@c,f
  8048  06D1                     L13:	
  8049  06D1  3005               	movlw	5
  8050  06D2  0642               	xorwf	printf@c,w
  8051  06D3  1903               	btfsc	3,2
  8052  06D4  2F1C               	goto	l2410
  8053                           
  8054                           ;doprnt.c: 1306: if(val < dpowers[c])
  8055  06D5  0842               	movf	printf@c,w
  8056  06D6  00B0               	movwf	??_printf
  8057  06D7  01B1               	clrf	??_printf+1
  8058  06D8  35B0               	lslf	??_printf,f
  8059  06D9  0DB1               	rlf	??_printf+1,f
  8060  06DA  30AA               	movlw	low (_dpowers| (0+32768))
  8061  06DB  0730               	addwf	??_printf,w
  8062  06DC  0084               	movwf	4
  8063  06DD  3094               	movlw	high (_dpowers| (0+32768))
  8064  06DE  3D31               	addwfc	??_printf+1,w
  8065  06DF  0085               	movwf	5
  8066  06E0  3F00               	moviw [0]fsr0
  8067  06E1  00B2               	movwf	??_printf+2
  8068  06E2  3F01               	moviw [1]fsr0
  8069  06E3  00B3               	movwf	??_printf+3
  8070  06E4  0833               	movf	??_printf+3,w
  8071  06E5  023E               	subwf	printf@val+1,w
  8072  06E6  1D03               	skipz
  8073  06E7  2EEA               	goto	u1865
  8074  06E8  0832               	movf	??_printf+2,w
  8075  06E9  023D               	subwf	printf@val,w
  8076  06EA                     u1865:	
  8077  06EA  1C03               	btfss	3,0
  8078  06EB  2F1C               	goto	l2410
  8079                           
  8080                           ;doprnt.c: 1307: break;
  8081  06EC  3001               	movlw	1
  8082  06ED  00B0               	movwf	??_printf
  8083  06EE  0830               	movf	??_printf,w
  8084  06EF  07C2               	addwf	printf@c,f
  8085  06F0  2ED1               	goto	L13
  8086  06F1                     l527:	
  8087                           ;doprnt.c: 1314: case 0x80:
  8088                           
  8089                           ;doprnt.c: 1309: break;
  8090                           
  8091                           
  8092                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8093  06F1  01C2               	clrf	printf@c
  8094  06F2  0AC2               	incf	printf@c,f
  8095  06F3                     L14:	
  8096  06F3  3004               	movlw	4
  8097  06F4  0642               	xorwf	printf@c,w
  8098  06F5  1903               	btfsc	3,2
  8099  06F6  2F1C               	goto	l2410
  8100                           
  8101                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8102  06F7  0842               	movf	printf@c,w
  8103  06F8  00B0               	movwf	??_printf
  8104  06F9  01B1               	clrf	??_printf+1
  8105  06FA  35B0               	lslf	??_printf,f
  8106  06FB  0DB1               	rlf	??_printf+1,f
  8107  06FC  30B4               	movlw	low (_hexpowers| (0+32768))
  8108  06FD  0730               	addwf	??_printf,w
  8109  06FE  0084               	movwf	4
  8110  06FF  3094               	movlw	high (_hexpowers| (0+32768))
  8111  0700  3D31               	addwfc	??_printf+1,w
  8112  0701  0085               	movwf	5
  8113  0702  3F00               	moviw [0]fsr0
  8114  0703  00B2               	movwf	??_printf+2
  8115  0704  3F01               	moviw [1]fsr0
  8116  0705  00B3               	movwf	??_printf+3
  8117  0706  0833               	movf	??_printf+3,w
  8118  0707  023E               	subwf	printf@val+1,w
  8119  0708  1D03               	skipz
  8120  0709  2F0C               	goto	u1895
  8121  070A  0832               	movf	??_printf+2,w
  8122  070B  023D               	subwf	printf@val,w
  8123  070C                     u1895:	
  8124  070C  1C03               	btfss	3,0
  8125  070D  2F1C               	goto	l2410
  8126                           
  8127                           ;doprnt.c: 1318: break;
  8128  070E  3001               	movlw	1
  8129  070F  00B0               	movwf	??_printf
  8130  0710  0830               	movf	??_printf,w
  8131  0711  07C2               	addwf	printf@c,f
  8132  0712  2EF3               	goto	L14
  8133  0713                     l2408:	
  8134                           ;doprnt.c: 1336: }
  8135                           
  8136                           ;doprnt.c: 1320: break;
  8137                           
  8138  0713  083F               	movf	printf@flag,w
  8139  0714  3980               	andlw	128
  8140                           
  8141                           ; Switch size 1, requested type "space"
  8142                           ; Number of cases is 2, Range of values is 0 to 128
  8143                           ; switch strategies available:
  8144                           ; Name         Instructions Cycles
  8145                           ; simple_byte            7     4 (average)
  8146                           ; jumptable            260     6 (fixed)
  8147                           ;	Chosen strategy is simple_byte
  8148  0715  3A00               	xorlw	0	; case 0
  8149  0716  1903               	skipnz
  8150  0717  2ECF               	goto	l522
  8151  0718  3A80               	xorlw	128	; case 128
  8152  0719  1903               	skipnz
  8153  071A  2EF1               	goto	l527
  8154  071B  2F1C               	goto	l2410
  8155  071C                     l2410:	
  8156                           
  8157                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8158  071C  0840               	movf	printf@width,w
  8159  071D  0441               	iorwf	printf@width+1,w
  8160  071E  1903               	btfsc	3,2
  8161  071F  2F28               	goto	l531
  8162  0720  083F               	movf	printf@flag,w
  8163  0721  3903               	andlw	3
  8164  0722  1903               	btfsc	3,2
  8165  0723  2F28               	goto	l531
  8166                           
  8167                           ;doprnt.c: 1346: width--;
  8168  0724  30FF               	movlw	255
  8169  0725  07C0               	addwf	printf@width,f
  8170  0726  30FF               	movlw	255
  8171  0727  3DC1               	addwfc	printf@width+1,f
  8172  0728                     l531:	
  8173                           
  8174                           ;doprnt.c: 1381: if(width > c)
  8175  0728  0842               	movf	printf@c,w
  8176  0729  00B0               	movwf	??_printf
  8177  072A  01B1               	clrf	??_printf+1
  8178  072B  1BB0               	btfsc	??_printf,7
  8179  072C  03B1               	decf	??_printf+1,f
  8180  072D  0831               	movf	??_printf+1,w
  8181  072E  3A80               	xorlw	128
  8182  072F  00B2               	movwf	??_printf+2
  8183  0730  0841               	movf	printf@width+1,w
  8184  0731  3A80               	xorlw	128
  8185  0732  0232               	subwf	??_printf+2,w
  8186  0733  1D03               	skipz
  8187  0734  2F37               	goto	u1935
  8188  0735  0840               	movf	printf@width,w
  8189  0736  0230               	subwf	??_printf,w
  8190  0737                     u1935:	
  8191  0737  1803               	skipnc
  8192  0738  2F44               	goto	l2418
  8193                           
  8194                           ;doprnt.c: 1382: width -= c;
  8195  0739  0020               	movlb	0	; select bank0
  8196  073A  0842               	movf	printf@c,w
  8197  073B  00B0               	movwf	??_printf
  8198  073C  01B1               	clrf	??_printf+1
  8199  073D  1BB0               	btfsc	??_printf,7
  8200  073E  03B1               	decf	??_printf+1,f
  8201  073F  0830               	movf	??_printf,w
  8202  0740  02C0               	subwf	printf@width,f
  8203  0741  0831               	movf	??_printf+1,w
  8204  0742  3BC1               	subwfb	printf@width+1,f
  8205  0743  2F47               	goto	l2420
  8206  0744                     l2418:	
  8207                           
  8208                           ;doprnt.c: 1383: else
  8209                           ;doprnt.c: 1384: width = 0;
  8210  0744  0020               	movlb	0	; select bank0
  8211  0745  01C0               	clrf	printf@width
  8212  0746  01C1               	clrf	printf@width+1
  8213  0747                     l2420:	
  8214                           
  8215                           ;doprnt.c: 1387: if(flag & 0x04) {
  8216  0747  1D3F               	btfss	printf@flag,2
  8217  0748  2F60               	goto	l2432
  8218                           
  8219                           ;doprnt.c: 1392: if(flag & 0x03)
  8220  0749  083F               	movf	printf@flag,w
  8221  074A  3903               	andlw	3
  8222  074B  1903               	btfsc	3,2
  8223  074C  2F51               	goto	l2426
  8224                           
  8225                           ;doprnt.c: 1393: (putch('-') );
  8226  074D  302D               	movlw	45
  8227  074E  3189  21E7  3185   	fcall	_putch
  8228  0751                     l2426:	
  8229                           
  8230                           ;doprnt.c: 1415: if(width)
  8231  0751  0020               	movlb	0	; select bank0
  8232  0752                     L15:	
  8233  0752  0840               	movf	printf@width,w
  8234  0753  0441               	iorwf	printf@width+1,w
  8235  0754  1903               	btfsc	3,2
  8236  0755  2F79               	goto	l2442
  8237                           
  8238                           ;doprnt.c: 1417: (putch('0') );
  8239                           
  8240                           ;doprnt.c: 1416: do
  8241  0756  3030               	movlw	48
  8242  0757  3189  21E7  3185   	fcall	_putch
  8243                           
  8244                           ;doprnt.c: 1418: while(--width);
  8245  075A  30FF               	movlw	255
  8246  075B  0020               	movlb	0	; select bank0
  8247  075C  07C0               	addwf	printf@width,f
  8248  075D  30FF               	movlw	255
  8249  075E  3DC1               	addwfc	printf@width+1,f
  8250  075F  2F52               	goto	L15
  8251  0760                     l2432:	
  8252                           ;doprnt.c: 1420: } else
  8253                           
  8254                           
  8255                           ;doprnt.c: 1422: {
  8256                           ;doprnt.c: 1424: if(width
  8257                           ;doprnt.c: 1428: )
  8258  0760  0840               	movf	printf@width,w
  8259  0761  0441               	iorwf	printf@width+1,w
  8260  0762  1903               	btfsc	3,2
  8261  0763  2F71               	goto	l2438
  8262  0764                     l2434:	
  8263                           ;doprnt.c: 1429: do
  8264                           
  8265                           
  8266                           ;doprnt.c: 1430: (putch(' ') );
  8267  0764  3020               	movlw	32
  8268  0765  3189  21E7  3185   	fcall	_putch
  8269                           
  8270                           ;doprnt.c: 1431: while(--width);
  8271  0768  30FF               	movlw	255
  8272  0769  0020               	movlb	0	; select bank0
  8273  076A  07C0               	addwf	printf@width,f
  8274  076B  30FF               	movlw	255
  8275  076C  3DC1               	addwfc	printf@width+1,f
  8276  076D  0840               	movf	printf@width,w
  8277  076E  0441               	iorwf	printf@width+1,w
  8278  076F  1D03               	btfss	3,2
  8279  0770  2F64               	goto	l2434
  8280  0771                     l2438:	
  8281                           
  8282                           ;doprnt.c: 1438: if(flag & 0x03)
  8283  0771  083F               	movf	printf@flag,w
  8284  0772  3903               	andlw	3
  8285  0773  1903               	btfsc	3,2
  8286  0774  2F79               	goto	l2442
  8287                           
  8288                           ;doprnt.c: 1439: (putch('-') );
  8289  0775  302D               	movlw	45
  8290  0776  3189  21E7  3185   	fcall	_putch
  8291  0779                     l2442:	
  8292                           
  8293                           ;doprnt.c: 1469: }
  8294                           ;doprnt.c: 1472: prec = c;
  8295  0779  0020               	movlb	0	; select bank0
  8296  077A  0842               	movf	printf@c,w
  8297  077B  00B0               	movwf	??_printf
  8298  077C  0830               	movf	??_printf,w
  8299  077D  00B7               	movwf	printf@prec
  8300                           
  8301                           ;doprnt.c: 1474: while(prec--) {
  8302  077E  2FDD               	goto	l2462
  8303  077F                     l2444:	
  8304                           ;doprnt.c: 1478: {
  8305                           ;doprnt.c: 1483: case 0x00:
  8306                           
  8307                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  8308                           
  8309                           
  8310                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8311  077F  300A               	movlw	10
  8312  0780  00F8               	movwf	___lwmod@divisor
  8313  0781  3000               	movlw	0
  8314  0782  00F9               	movwf	___lwmod@divisor+1
  8315  0783  0837               	movf	printf@prec,w
  8316  0784  00B0               	movwf	??_printf
  8317  0785  01B1               	clrf	??_printf+1
  8318  0786  35B0               	lslf	??_printf,f
  8319  0787  0DB1               	rlf	??_printf+1,f
  8320  0788  30AA               	movlw	low (_dpowers| (0+32768))
  8321  0789  0730               	addwf	??_printf,w
  8322  078A  0084               	movwf	4
  8323  078B  3094               	movlw	high (_dpowers| (0+32768))
  8324  078C  3D31               	addwfc	??_printf+1,w
  8325  078D  0085               	movwf	5
  8326  078E  3F00               	moviw [0]fsr0
  8327  078F  00F0               	movwf	___lwdiv@divisor
  8328  0790  3F01               	moviw [1]fsr0
  8329  0791  00F1               	movwf	___lwdiv@divisor+1
  8330  0792  083E               	movf	printf@val+1,w
  8331  0793  00F3               	movwf	___lwdiv@dividend+1
  8332  0794  083D               	movf	printf@val,w
  8333  0795  00F2               	movwf	___lwdiv@dividend
  8334  0796  3180  2015  3185   	fcall	___lwdiv
  8335  0799  0871               	movf	?___lwdiv+1,w
  8336  079A  00FB               	movwf	___lwmod@dividend+1
  8337  079B  0870               	movf	?___lwdiv,w
  8338  079C  00FA               	movwf	___lwmod@dividend
  8339  079D  318B  236F  3185   	fcall	___lwmod
  8340  07A0  0878               	movf	?___lwmod,w
  8341  07A1  3E30               	addlw	48
  8342  07A2  0020               	movlb	0	; select bank0
  8343  07A3  2FD6               	goto	L11
  8344  07A4                     l2446:	
  8345                           ;doprnt.c: 1497: case 0x80:
  8346                           
  8347                           ;doprnt.c: 1491: break;
  8348                           
  8349                           
  8350                           ;doprnt.c: 1499: {
  8351                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8352  07A4  0837               	movf	printf@prec,w
  8353  07A5  00B0               	movwf	??_printf
  8354  07A6  01B1               	clrf	??_printf+1
  8355  07A7  35B0               	lslf	??_printf,f
  8356  07A8  0DB1               	rlf	??_printf+1,f
  8357  07A9  30B4               	movlw	low (_hexpowers| (0+32768))
  8358  07AA  0730               	addwf	??_printf,w
  8359  07AB  0084               	movwf	4
  8360  07AC  3094               	movlw	high (_hexpowers| (0+32768))
  8361  07AD  3D31               	addwfc	??_printf+1,w
  8362  07AE  0085               	movwf	5
  8363  07AF  3F00               	moviw [0]fsr0
  8364  07B0  00F0               	movwf	___lwdiv@divisor
  8365  07B1  3F01               	moviw [1]fsr0
  8366  07B2  00F1               	movwf	___lwdiv@divisor+1
  8367  07B3  083E               	movf	printf@val+1,w
  8368  07B4  00F3               	movwf	___lwdiv@dividend+1
  8369  07B5  083D               	movf	printf@val,w
  8370  07B6  00F2               	movwf	___lwdiv@dividend
  8371  07B7  3180  2015  3185   	fcall	___lwdiv
  8372  07BA  0870               	movf	?___lwdiv,w
  8373  07BB  390F               	andlw	15
  8374  07BC  0020               	movlb	0	; select bank0
  8375  07BD  00B2               	movwf	??_printf+2
  8376  07BE  0832               	movf	??_printf+2,w
  8377  07BF  00B6               	movwf	printf@idx
  8378                           
  8379                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  8380  07C0  1ABF               	btfsc	printf@flag,5
  8381  07C1  2FC6               	goto	l2452
  8382  07C2  3055               	movlw	low (STR_65| (0+32768))
  8383  07C3  00B4               	movwf	_printf$779
  8384  07C4  3093               	movlw	high (STR_65| (0+32768))
  8385  07C5  2FC9               	goto	L12
  8386  07C6                     l2452:	
  8387  07C6  3044               	movlw	low (STR_64| (0+32768))
  8388  07C7  00B4               	movwf	_printf$779
  8389  07C8  3093               	movlw	high (STR_64| (0+32768))
  8390  07C9                     L12:	
  8391  07C9  00B5               	movwf	_printf$779+1
  8392  07CA  0835               	movf	_printf$779+1,w
  8393  07CB  00B1               	movwf	??_printf+1
  8394  07CC  0834               	movf	_printf$779,w
  8395  07CD  00B0               	movwf	??_printf
  8396  07CE  0836               	movf	printf@idx,w
  8397  07CF  0730               	addwf	??_printf,w
  8398  07D0  0084               	movwf	4
  8399  07D1  0831               	movf	??_printf+1,w
  8400  07D2  1803               	skipnc
  8401  07D3  0A31               	incf	??_printf+1,w
  8402  07D4  0085               	movwf	5
  8403  07D5  0800               	movf	0,w	;code access
  8404  07D6                     L11:	
  8405  07D6  00B2               	movwf	??_printf+2
  8406  07D7  0832               	movf	??_printf+2,w
  8407  07D8  00C2               	movwf	printf@c
  8408  07D9                     l2460:	
  8409                           ;doprnt.c: 1523: }
  8410                           
  8411                           ;doprnt.c: 1508: }
  8412                           ;doprnt.c: 1510: break;
  8413                           
  8414                           
  8415                           ;doprnt.c: 1524: (putch(c) );
  8416  07D9  0842               	movf	printf@c,w
  8417  07DA  3189  21E7  3185   	fcall	_putch
  8418  07DD                     l2462:	
  8419  07DD  30FF               	movlw	255
  8420  07DE  0020               	movlb	0	; select bank0
  8421  07DF  00B0               	movwf	??_printf
  8422  07E0  0830               	movf	??_printf,w
  8423  07E1  07B7               	addwf	printf@prec,f
  8424  07E2  0A37               	incf	printf@prec,w
  8425  07E3  1903               	btfsc	3,2
  8426  07E4  2DAA               	goto	l2464
  8427  07E5  083F               	movf	printf@flag,w
  8428  07E6  3980               	andlw	128
  8429                           
  8430                           ; Switch size 1, requested type "space"
  8431                           ; Number of cases is 2, Range of values is 0 to 128
  8432                           ; switch strategies available:
  8433                           ; Name         Instructions Cycles
  8434                           ; simple_byte            7     4 (average)
  8435                           ; jumptable            260     6 (fixed)
  8436                           ;	Chosen strategy is simple_byte
  8437  07E7  3A00               	xorlw	0	; case 0
  8438  07E8  1903               	skipnz
  8439  07E9  2F7F               	goto	l2444
  8440  07EA  3A80               	xorlw	128	; case 128
  8441  07EB  1903               	skipnz
  8442  07EC  2FA4               	goto	l2446
  8443  07ED  2FD9               	goto	l2460
  8444  07EE  2FD9               	goto	l2460
  8445  07EF                     l556:	
  8446                           ;doprnt.c: 1540: return 0;
  8447                           ;	Return value of _printf is never used
  8448                           
  8449                           ;doprnt.c: 1525: }
  8450                           ;doprnt.c: 1533: }
  8451                           ;doprnt.c: 1535: alldone:
  8452                           
  8453  07EF  0008               	return
  8454  07F0                     __end_of_printf:	
  8455                           
  8456                           	psect	text20
  8457  09E7                     __ptext20:	
  8458 ;; *************** function _putch *****************
  8459 ;; Defined at:
  8460 ;;		line 107 in file "mcc_generated_files/eusart.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  txData          1    wreg     unsigned char 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;  txData          1    1[COMMON] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  1    wreg      void 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0, pclath, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;Total ram usage:        1 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    1
  8481 ;; This function calls:
  8482 ;;		_EUSART_Write
  8483 ;; This function is called by:
  8484 ;;		_printf
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function _putch
  8490  09E7                     _putch:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8494                           ;putch@txData stored from wreg
  8495  09E7  00F1               	movwf	putch@txData
  8496                           
  8497                           ;eusart.c: 109: EUSART_Write(txData);
  8498  09E8  0871               	movf	putch@txData,w
  8499  09E9  318A  2200         	fcall	_EUSART_Write
  8500  09EB  0008               	return
  8501  09EC                     __end_of_putch:	
  8502                           
  8503                           	psect	text21
  8504  0A00                     __ptext21:	
  8505 ;; *************** function _EUSART_Write *****************
  8506 ;; Defined at:
  8507 ;;		line 93 in file "mcc_generated_files/eusart.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;  txData          1    wreg     unsigned char 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  txData          1    0[COMMON] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;Total ram usage:        1 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_putch
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _EUSART_Write
  8536  0A00                     _EUSART_Write:	
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _EUSART_Write: [wreg]
  8540                           ;EUSART_Write@txData stored from wreg
  8541  0A00  00F0               	movwf	EUSART_Write@txData
  8542  0A01                     l58:	
  8543                           ;eusart.c: 96: {
  8544                           
  8545                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  8546                           
  8547  0A01  0020               	movlb	0	; select bank0
  8548  0A02  1E11               	btfss	17,4	;volatile
  8549  0A03  2A01               	goto	l58
  8550                           
  8551                           ;eusart.c: 97: }
  8552                           ;eusart.c: 99: TXREG = txData;
  8553  0A04  0870               	movf	EUSART_Write@txData,w
  8554  0A05  0023               	movlb	3	; select bank3
  8555  0A06  009A               	movwf	26	;volatile
  8556  0A07  0008               	return
  8557  0A08                     __end_of_EUSART_Write:	
  8558                           
  8559                           	psect	text22
  8560  0B6F                     __ptext22:	
  8561 ;; *************** function ___lwmod *****************
  8562 ;; Defined at:
  8563 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  divisor         2    8[COMMON] unsigned int 
  8566 ;;  dividend        2   10[COMMON] unsigned int 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  counter         1   13[COMMON] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  2    8[COMMON] unsigned int 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;Total ram usage:        6 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_printf
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function ___lwmod
  8593  0B6F                     ___lwmod:	
  8594                           
  8595                           ;incstack = 0
  8596                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8597  0B6F  0878               	movf	___lwmod@divisor,w
  8598  0B70  0479               	iorwf	___lwmod@divisor+1,w
  8599  0B71  1903               	btfsc	3,2
  8600  0B72  2B96               	goto	l2268
  8601  0B73  01FD               	clrf	___lwmod@counter
  8602  0B74  0AFD               	incf	___lwmod@counter,f
  8603  0B75                     l2258:	
  8604  0B75  1BF9               	btfsc	___lwmod@divisor+1,7
  8605  0B76  2B81               	goto	l2260
  8606  0B77  3001               	movlw	1
  8607  0B78                     u1645:	
  8608  0B78  35F8               	lslf	___lwmod@divisor,f
  8609  0B79  0DF9               	rlf	___lwmod@divisor+1,f
  8610  0B7A  0B89               	decfsz	9,f
  8611  0B7B  2B78               	goto	u1645
  8612  0B7C  3001               	movlw	1
  8613  0B7D  00FC               	movwf	??___lwmod
  8614  0B7E  087C               	movf	??___lwmod,w
  8615  0B7F  07FD               	addwf	___lwmod@counter,f
  8616  0B80  2B75               	goto	l2258
  8617  0B81                     l2260:	
  8618  0B81  0879               	movf	___lwmod@divisor+1,w
  8619  0B82  027B               	subwf	___lwmod@dividend+1,w
  8620  0B83  1D03               	skipz
  8621  0B84  2B87               	goto	u1665
  8622  0B85  0878               	movf	___lwmod@divisor,w
  8623  0B86  027A               	subwf	___lwmod@dividend,w
  8624  0B87                     u1665:	
  8625  0B87  1C03               	skipc
  8626  0B88  2B8D               	goto	l2264
  8627  0B89  0878               	movf	___lwmod@divisor,w
  8628  0B8A  02FA               	subwf	___lwmod@dividend,f
  8629  0B8B  0879               	movf	___lwmod@divisor+1,w
  8630  0B8C  3BFB               	subwfb	___lwmod@dividend+1,f
  8631  0B8D                     l2264:	
  8632  0B8D  3001               	movlw	1
  8633  0B8E                     u1675:	
  8634  0B8E  36F9               	lsrf	___lwmod@divisor+1,f
  8635  0B8F  0CF8               	rrf	___lwmod@divisor,f
  8636  0B90  0B89               	decfsz	9,f
  8637  0B91  2B8E               	goto	u1675
  8638  0B92  3001               	movlw	1
  8639  0B93  02FD               	subwf	___lwmod@counter,f
  8640  0B94  1D03               	btfss	3,2
  8641  0B95  2B81               	goto	l2260
  8642  0B96                     l2268:	
  8643  0B96  087B               	movf	___lwmod@dividend+1,w
  8644  0B97  00F9               	movwf	?___lwmod+1
  8645  0B98  087A               	movf	___lwmod@dividend,w
  8646  0B99  00F8               	movwf	?___lwmod
  8647  0B9A  0008               	return
  8648  0B9B                     __end_of___lwmod:	
  8649                           
  8650                           	psect	text23
  8651  0015                     __ptext23:	
  8652 ;; *************** function ___lwdiv *****************
  8653 ;; Defined at:
  8654 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  divisor         2    0[COMMON] unsigned int 
  8657 ;;  dividend        2    2[COMMON] unsigned int 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  quotient        2    5[COMMON] unsigned int 
  8660 ;;  counter         1    7[COMMON] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  2    0[COMMON] unsigned int 
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:        8 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; This function calls:
  8677 ;;		Nothing
  8678 ;; This function is called by:
  8679 ;;		_printf
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           
  8684                           ;psect for function ___lwdiv
  8685  0015                     ___lwdiv:	
  8686                           
  8687                           ;incstack = 0
  8688                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8689  0015  01F5               	clrf	___lwdiv@quotient
  8690  0016  01F6               	clrf	___lwdiv@quotient+1
  8691  0017  0870               	movf	___lwdiv@divisor,w
  8692  0018  0471               	iorwf	___lwdiv@divisor+1,w
  8693  0019  1903               	btfsc	3,2
  8694  001A  2844               	goto	l2246
  8695  001B  01F7               	clrf	___lwdiv@counter
  8696  001C  0AF7               	incf	___lwdiv@counter,f
  8697  001D                     l2234:	
  8698  001D  1BF1               	btfsc	___lwdiv@divisor+1,7
  8699  001E  2829               	goto	l2236
  8700  001F  3001               	movlw	1
  8701  0020                     u1575:	
  8702  0020  35F0               	lslf	___lwdiv@divisor,f
  8703  0021  0DF1               	rlf	___lwdiv@divisor+1,f
  8704  0022  0B89               	decfsz	9,f
  8705  0023  2820               	goto	u1575
  8706  0024  3001               	movlw	1
  8707  0025  00F4               	movwf	??___lwdiv
  8708  0026  0874               	movf	??___lwdiv,w
  8709  0027  07F7               	addwf	___lwdiv@counter,f
  8710  0028  281D               	goto	l2234
  8711  0029                     l2236:	
  8712  0029  3001               	movlw	1
  8713  002A                     u1595:	
  8714  002A  35F5               	lslf	___lwdiv@quotient,f
  8715  002B  0DF6               	rlf	___lwdiv@quotient+1,f
  8716  002C  0B89               	decfsz	9,f
  8717  002D  282A               	goto	u1595
  8718  002E  0871               	movf	___lwdiv@divisor+1,w
  8719  002F  0273               	subwf	___lwdiv@dividend+1,w
  8720  0030  1D03               	skipz
  8721  0031  2834               	goto	u1605
  8722  0032  0870               	movf	___lwdiv@divisor,w
  8723  0033  0272               	subwf	___lwdiv@dividend,w
  8724  0034                     u1605:	
  8725  0034  1C03               	skipc
  8726  0035  283B               	goto	l2242
  8727  0036  0870               	movf	___lwdiv@divisor,w
  8728  0037  02F2               	subwf	___lwdiv@dividend,f
  8729  0038  0871               	movf	___lwdiv@divisor+1,w
  8730  0039  3BF3               	subwfb	___lwdiv@dividend+1,f
  8731  003A  1475               	bsf	___lwdiv@quotient,0
  8732  003B                     l2242:	
  8733  003B  3001               	movlw	1
  8734  003C                     u1615:	
  8735  003C  36F1               	lsrf	___lwdiv@divisor+1,f
  8736  003D  0CF0               	rrf	___lwdiv@divisor,f
  8737  003E  0B89               	decfsz	9,f
  8738  003F  283C               	goto	u1615
  8739  0040  3001               	movlw	1
  8740  0041  02F7               	subwf	___lwdiv@counter,f
  8741  0042  1D03               	btfss	3,2
  8742  0043  2829               	goto	l2236
  8743  0044                     l2246:	
  8744  0044  0876               	movf	___lwdiv@quotient+1,w
  8745  0045  00F1               	movwf	?___lwdiv+1
  8746  0046  0875               	movf	___lwdiv@quotient,w
  8747  0047  00F0               	movwf	?___lwdiv
  8748  0048  0008               	return
  8749  0049                     __end_of___lwdiv:	
  8750                           
  8751                           	psect	text24
  8752  0AFB                     __ptext24:	
  8753 ;; *************** function _abort_pending_transmissions *****************
  8754 ;; Defined at:
  8755 ;;		line 110 in file "mcp2515.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      unsigned char 
  8762 ;; Registers used:
  8763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;Total ram usage:        3 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    3
  8776 ;; This function calls:
  8777 ;;		_SPI_exchange
  8778 ;; This function is called by:
  8779 ;;		_can_set_mask
  8780 ;;		_can_abort
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           
  8785                           ;psect for function _abort_pending_transmissions
  8786  0AFB                     _abort_pending_transmissions:	
  8787                           
  8788                           ;mcp2515.c: 111: buf[0] = 0b00000101u;
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8792  0AFB  3005               	movlw	5
  8793  0AFC  0020               	movlb	0	; select bank0
  8794  0AFD  00A0               	movwf	??_abort_pending_transmissions
  8795  0AFE  0820               	movf	??_abort_pending_transmissions,w
  8796  0AFF  0021               	movlb	1	; select bank1
  8797  0B00  00B4               	movwf	_buf^(0+128)
  8798                           
  8799                           ;mcp2515.c: 112: buf[1] = 0x0fu;
  8800  0B01  300F               	movlw	15
  8801  0B02  0020               	movlb	0	; select bank0
  8802  0B03  00A0               	movwf	??_abort_pending_transmissions
  8803  0B04  0820               	movf	??_abort_pending_transmissions,w
  8804  0B05  0021               	movlb	1	; select bank1
  8805  0B06  00B5               	movwf	(_buf^(0+128)+1)
  8806                           
  8807                           ;mcp2515.c: 113: buf[2] = 0b00010000u;
  8808  0B07  3010               	movlw	16
  8809  0B08  0020               	movlb	0	; select bank0
  8810  0B09  00A0               	movwf	??_abort_pending_transmissions
  8811  0B0A  0820               	movf	??_abort_pending_transmissions,w
  8812  0B0B  0021               	movlb	1	; select bank1
  8813  0B0C  00B6               	movwf	(_buf^(0+128)+2)
  8814                           
  8815                           ;mcp2515.c: 114: buf[3] = 0b00010000u;
  8816  0B0D  3010               	movlw	16
  8817  0B0E  0020               	movlb	0	; select bank0
  8818  0B0F  00A0               	movwf	??_abort_pending_transmissions
  8819  0B10  0820               	movf	??_abort_pending_transmissions,w
  8820  0B11  0021               	movlb	1	; select bank1
  8821  0B12  00B7               	movwf	(_buf^(0+128)+3)
  8822                           
  8823                           ;mcp2515.c: 115: uint8_t bytes_written = SPI_exchange(buf, 4);
  8824  0B13  3004               	movlw	4
  8825  0B14  0020               	movlb	0	; select bank0
  8826  0B15  00A0               	movwf	??_abort_pending_transmissions
  8827  0B16  0820               	movf	??_abort_pending_transmissions,w
  8828  0B17  00F8               	movwf	SPI_exchange@len
  8829  0B18  30B4               	movlw	(low (_buf| 0))& (0+255)
  8830  0B19  318A  225A         	fcall	_SPI_exchange
  8831  0B1B  0020               	movlb	0	; select bank0
  8832  0B1C  00A1               	movwf	??_abort_pending_transmissions+1
  8833  0B1D  0821               	movf	??_abort_pending_transmissions+1,w
  8834  0B1E  00A2               	movwf	abort_pending_transmissions@bytes_written
  8835                           
  8836                           ;mcp2515.c: 116: return bytes_written;
  8837  0B1F  0822               	movf	abort_pending_transmissions@bytes_written,w
  8838  0B20  0008               	return
  8839  0B21                     __end_of_abort_pending_transmissions:	
  8840                           
  8841                           	psect	text25
  8842  0A5A                     __ptext25:	
  8843 ;; *************** function _SPI_exchange *****************
  8844 ;; Defined at:
  8845 ;;		line 4 in file "spi.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  buf             1    wreg     PTR unsigned char 
  8848 ;;		 -> receive@rx_buf(15), buf(16), 
  8849 ;;  len             1    8[COMMON] unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  buf             1   13[COMMON] PTR unsigned char 
  8852 ;;		 -> receive@rx_buf(15), buf(16), 
  8853 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      unsigned char 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:        6 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    2
  8870 ;; This function calls:
  8871 ;;		_SPI_Exchange8bitBuffer
  8872 ;; This function is called by:
  8873 ;;		_can_init
  8874 ;;		_can_ope_mode
  8875 ;;		_abort_pending_transmissions
  8876 ;;		_can_set_mask
  8877 ;;		_txf_clear
  8878 ;;		_receive
  8879 ;;		_can_send
  8880 ;;		_can_status_check
  8881 ;;		_can_baudrate
  8882 ;;		_read_register
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _SPI_exchange
  8888  0A5A                     _SPI_exchange:	
  8889                           
  8890                           ;incstack = 0
  8891                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8892                           ;SPI_exchange@buf stored from wreg
  8893  0A5A  00FD               	movwf	SPI_exchange@buf
  8894                           
  8895                           ;spi.c: 5: LATAbits.LATA4 = 0;
  8896  0A5B  0022               	movlb	2	; select bank2
  8897  0A5C  120C               	bcf	12,4	;volatile
  8898                           
  8899                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  8900  0A5D  0878               	movf	SPI_exchange@len,w
  8901  0A5E  00F9               	movwf	??_SPI_exchange
  8902  0A5F  0879               	movf	??_SPI_exchange,w
  8903  0A60  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8904  0A61  087D               	movf	SPI_exchange@buf,w
  8905  0A62  00FA               	movwf	??_SPI_exchange+1
  8906  0A63  087A               	movf	??_SPI_exchange+1,w
  8907  0A64  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8908  0A65  087D               	movf	SPI_exchange@buf,w
  8909  0A66  318C  2449         	fcall	_SPI_Exchange8bitBuffer
  8910  0A68  00FB               	movwf	??_SPI_exchange+2
  8911  0A69  087B               	movf	??_SPI_exchange+2,w
  8912  0A6A  00FC               	movwf	SPI_exchange@bytes_written
  8913                           
  8914                           ;spi.c: 7: LATAbits.LATA4 = 1;
  8915  0A6B  0022               	movlb	2	; select bank2
  8916  0A6C  160C               	bsf	12,4	;volatile
  8917                           
  8918                           ;spi.c: 8: return bytes_written;
  8919  0A6D  087C               	movf	SPI_exchange@bytes_written,w
  8920  0A6E  0008               	return
  8921  0A6F                     __end_of_SPI_exchange:	
  8922                           
  8923                           	psect	text26
  8924  0C49                     __ptext26:	
  8925 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8926 ;; Defined at:
  8927 ;;		line 91 in file "mcc_generated_files/spi.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  dataIn          1    wreg     PTR unsigned char 
  8930 ;;		 -> receive@rx_buf(15), buf(16), 
  8931 ;;  bufLen          1    1[COMMON] unsigned char 
  8932 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8933 ;;		 -> receive@rx_buf(15), buf(16), 
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8936 ;;		 -> receive@rx_buf(15), buf(16), 
  8937 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      unsigned char 
  8940 ;; Registers used:
  8941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8947 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;Total ram usage:        7 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    1
  8954 ;; This function calls:
  8955 ;;		_SPI_Exchange8bit
  8956 ;; This function is called by:
  8957 ;;		_SPI_exchange
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           
  8962                           ;psect for function _SPI_Exchange8bitBuffer
  8963  0C49                     _SPI_Exchange8bitBuffer:	
  8964                           
  8965                           ;incstack = 0
  8966                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8967                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8968  0C49  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8969                           
  8970                           ;spi.c: 93: uint8_t bytesWritten = 0;
  8971  0C4A  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8972                           
  8973                           ;spi.c: 95: if(bufLen != 0)
  8974  0C4B  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8975  0C4C  1903               	btfsc	3,2
  8976  0C4D  2C95               	goto	l2300
  8977                           
  8978                           ;spi.c: 96: {
  8979                           ;spi.c: 97: if(dataIn != (0))
  8980  0C4E  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8981  0C4F  1D03               	btfss	3,2
  8982  0C50  2C77               	goto	l2288
  8983  0C51  2C7C               	goto	l2290
  8984  0C52                     l2280:	
  8985                           ;spi.c: 98: {
  8986                           ;spi.c: 99: while(bytesWritten < bufLen)
  8987                           
  8988                           
  8989                           ;spi.c: 100: {
  8990                           ;spi.c: 101: if(dataOut == (0))
  8991  0C52  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8992  0C53  1D03               	btfss	3,2
  8993  0C54  2C60               	goto	l2284
  8994                           
  8995                           ;spi.c: 102: {
  8996                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  8997  0C55  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8998  0C56  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8999  0C57  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9000  0C58  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9001  0C59  0086               	movwf	6
  9002  0C5A  0187               	clrf	7
  9003  0C5B  0801               	movf	1,w
  9004  0C5C  318A  2208  318C   	fcall	_SPI_Exchange8bit
  9005                           
  9006                           ;spi.c: 104: }
  9007  0C5F  2C73               	goto	l2286
  9008  0C60                     l2284:	
  9009                           
  9010                           ;spi.c: 105: else
  9011                           ;spi.c: 106: {
  9012                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9013  0C60  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9014  0C61  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9015  0C62  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9016  0C63  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9017  0C64  0086               	movwf	6
  9018  0C65  0187               	clrf	7
  9019  0C66  0801               	movf	1,w
  9020  0C67  318A  2208  318C   	fcall	_SPI_Exchange8bit
  9021  0C6A  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  9022  0C6B  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9023  0C6C  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9024  0C6D  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  9025  0C6E  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  9026  0C6F  0086               	movwf	6
  9027  0C70  0187               	clrf	7
  9028  0C71  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  9029  0C72  0081               	movwf	1
  9030  0C73                     l2286:	
  9031                           
  9032                           ;spi.c: 108: }
  9033                           ;spi.c: 110: bytesWritten++;
  9034  0C73  3001               	movlw	1
  9035  0C74  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9036  0C75  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9037  0C76  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9038  0C77                     l2288:	
  9039  0C77  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9040  0C78  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9041  0C79  1803               	btfsc	3,0
  9042  0C7A  2C95               	goto	l2300
  9043  0C7B  2C52               	goto	l2280
  9044  0C7C                     l2290:	
  9045                           ;spi.c: 111: }
  9046                           ;spi.c: 112: }
  9047                           
  9048                           
  9049                           ;spi.c: 113: else
  9050                           ;spi.c: 114: {
  9051                           ;spi.c: 115: if(dataOut != (0))
  9052  0C7C  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9053  0C7D  1D03               	btfss	3,2
  9054  0C7E  2C91               	goto	l2298
  9055  0C7F  2C95               	goto	l2300
  9056  0C80                     l2294:	
  9057                           ;spi.c: 116: {
  9058                           ;spi.c: 117: while(bytesWritten < bufLen )
  9059                           
  9060                           
  9061                           ;spi.c: 118: {
  9062                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9063  0C80  3000               	movlw	0
  9064  0C81  318A  2208  318C   	fcall	_SPI_Exchange8bit
  9065  0C84  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9066  0C85  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9067  0C86  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9068  0C87  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  9069  0C88  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  9070  0C89  0086               	movwf	6
  9071  0C8A  0187               	clrf	7
  9072  0C8B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9073  0C8C  0081               	movwf	1
  9074                           
  9075                           ;spi.c: 121: bytesWritten++;
  9076  0C8D  3001               	movlw	1
  9077  0C8E  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9078  0C8F  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9079  0C90  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9080  0C91                     l2298:	
  9081  0C91  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9082  0C92  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9083  0C93  1C03               	skipc
  9084  0C94  2C80               	goto	l2294
  9085  0C95                     l2300:	
  9086                           
  9087                           ;spi.c: 122: }
  9088                           ;spi.c: 123: }
  9089                           ;spi.c: 124: }
  9090                           ;spi.c: 125: }
  9091                           ;spi.c: 127: return bytesWritten;
  9092  0C95  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9093  0C96  0008               	return
  9094  0C97                     __end_of_SPI_Exchange8bitBuffer:	
  9095                           
  9096                           	psect	text27
  9097  0A08                     __ptext27:	
  9098 ;; *************** function _SPI_Exchange8bit *****************
  9099 ;; Defined at:
  9100 ;;		line 77 in file "mcc_generated_files/spi.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;  data            1    wreg     unsigned char 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  data            1    0[COMMON] unsigned char 
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      unsigned char 
  9107 ;; Registers used:
  9108 ;;		wreg
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        1 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; This function calls:
  9121 ;;		Nothing
  9122 ;; This function is called by:
  9123 ;;		_SPI_Exchange8bitBuffer
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function _SPI_Exchange8bit
  9129  0A08                     _SPI_Exchange8bit:	
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9133                           ;SPI_Exchange8bit@data stored from wreg
  9134  0A08  00F0               	movwf	SPI_Exchange8bit@data
  9135                           
  9136                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  9137  0A09  0024               	movlb	4	; select bank4
  9138  0A0A  1395               	bcf	21,7	;volatile
  9139                           
  9140                           ;spi.c: 82: SSP1BUF = data;
  9141  0A0B  0870               	movf	SPI_Exchange8bit@data,w
  9142  0A0C  0091               	movwf	17	;volatile
  9143  0A0D                     l113:	
  9144                           ;spi.c: 85: {
  9145                           
  9146                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  9147                           
  9148  0A0D  1C14               	btfss	20,0	;volatile
  9149  0A0E  2A0D               	goto	l113
  9150                           
  9151                           ;spi.c: 86: }
  9152                           ;spi.c: 88: return (SSP1BUF);
  9153  0A0F  0811               	movf	17,w	;volatile
  9154  0A10  0008               	return
  9155  0A11                     __end_of_SPI_Exchange8bit:	
  9156                           
  9157                           	psect	text28
  9158  0D44                     __ptext28:	
  9159 ;; *************** function _atoi *****************
  9160 ;; Defined at:
  9161 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  s               1    wreg     PTR const unsigned char 
  9164 ;;		 -> main@buf(16), 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  s               1   13[COMMON] PTR const unsigned char 
  9167 ;;		 -> main@buf(16), 
  9168 ;;  a               2   11[COMMON] int 
  9169 ;;  sign            1   10[COMMON] unsigned char 
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  2    6[COMMON] int 
  9172 ;; Registers used:
  9173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;Total ram usage:        8 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    1
  9186 ;; This function calls:
  9187 ;;		___wmul
  9188 ;;		_isdigit
  9189 ;; This function is called by:
  9190 ;;		_main
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           
  9195                           ;psect for function _atoi
  9196  0D44                     _atoi:	
  9197                           
  9198                           ;incstack = 0
  9199                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9200                           ;atoi@s stored from wreg
  9201  0D44  00FD               	movwf	atoi@s
  9202  0D45                     l2888:	
  9203  0D45  087D               	movf	atoi@s,w
  9204  0D46  0086               	movwf	6
  9205  0D47  0187               	clrf	7
  9206  0D48  3020               	movlw	32
  9207  0D49  0601               	xorwf	1,w
  9208  0D4A  1D03               	btfss	3,2
  9209  0D4B  2D51               	goto	l2890
  9210  0D4C                     l2886:	
  9211  0D4C  3001               	movlw	1
  9212  0D4D  00F8               	movwf	??_atoi
  9213  0D4E  0878               	movf	??_atoi,w
  9214  0D4F  07FD               	addwf	atoi@s,f
  9215  0D50  2D45               	goto	l2888
  9216  0D51                     l2890:	
  9217  0D51  087D               	movf	atoi@s,w
  9218  0D52  0086               	movwf	6
  9219  0D53  0187               	clrf	7
  9220  0D54  3009               	movlw	9
  9221  0D55  0601               	xorwf	1,w
  9222  0D56  1903               	btfsc	3,2
  9223  0D57  2D4C               	goto	l2886
  9224  0D58  01FB               	clrf	atoi@a
  9225  0D59  01FC               	clrf	atoi@a+1
  9226  0D5A  01FA               	clrf	atoi@sign
  9227  0D5B  087D               	movf	atoi@s,w
  9228  0D5C  0086               	movwf	6
  9229  0D5D  0187               	clrf	7
  9230  0D5E  302D               	movlw	45
  9231  0D5F  0601               	xorwf	1,w
  9232  0D60  1D03               	btfss	3,2
  9233  0D61  2D67               	goto	l2898
  9234  0D62  3001               	movlw	1
  9235  0D63  00F8               	movwf	??_atoi
  9236  0D64  0878               	movf	??_atoi,w
  9237  0D65  07FA               	addwf	atoi@sign,f
  9238  0D66  2D6E               	goto	l2904
  9239  0D67                     l2898:	
  9240  0D67  087D               	movf	atoi@s,w
  9241  0D68  0086               	movwf	6
  9242  0D69  0187               	clrf	7
  9243  0D6A  302B               	movlw	43
  9244  0D6B  0601               	xorwf	1,w
  9245  0D6C  1D03               	btfss	3,2
  9246  0D6D  2D72               	goto	l2906
  9247  0D6E                     l2904:	
  9248  0D6E  3001               	movlw	1
  9249  0D6F  00F8               	movwf	??_atoi
  9250  0D70  0878               	movf	??_atoi,w
  9251  0D71  07FD               	addwf	atoi@s,f
  9252  0D72                     l2906:	
  9253  0D72  087D               	movf	atoi@s,w
  9254  0D73  0086               	movwf	6
  9255  0D74  0187               	clrf	7
  9256  0D75  0801               	movf	1,w
  9257  0D76  318A  223D  318D   	fcall	_isdigit
  9258  0D79  1C03               	btfss	3,0
  9259  0D7A  2D97               	goto	l2908
  9260  0D7B  087C               	movf	atoi@a+1,w
  9261  0D7C  00F1               	movwf	___wmul@multiplier+1
  9262  0D7D  087B               	movf	atoi@a,w
  9263  0D7E  00F0               	movwf	___wmul@multiplier
  9264  0D7F  300A               	movlw	10
  9265  0D80  00F2               	movwf	___wmul@multiplicand
  9266  0D81  3000               	movlw	0
  9267  0D82  00F3               	movwf	___wmul@multiplicand+1
  9268  0D83  318A  229F  318D   	fcall	___wmul
  9269  0D86  087D               	movf	atoi@s,w
  9270  0D87  0086               	movwf	6
  9271  0D88  0187               	clrf	7
  9272  0D89  0801               	movf	1,w
  9273  0D8A  0770               	addwf	?___wmul,w
  9274  0D8B  00F8               	movwf	??_atoi
  9275  0D8C  0871               	movf	?___wmul+1,w
  9276  0D8D  1803               	skipnc
  9277  0D8E  0A71               	incf	?___wmul+1,w
  9278  0D8F  00F9               	movwf	??_atoi+1
  9279  0D90  0878               	movf	??_atoi,w
  9280  0D91  3ED0               	addlw	208
  9281  0D92  00FB               	movwf	atoi@a
  9282  0D93  30FF               	movlw	255
  9283  0D94  3D79               	addwfc	??_atoi+1,w
  9284  0D95  00FC               	movwf	atoi@a+1
  9285  0D96  2D6E               	goto	l2904
  9286  0D97                     l2908:	
  9287  0D97  087A               	movf	atoi@sign,w
  9288  0D98  1903               	btfsc	3,2
  9289  0D99  2DA6               	goto	l2914
  9290  0D9A  097B               	comf	atoi@a,w
  9291  0D9B  00F8               	movwf	??_atoi
  9292  0D9C  097C               	comf	atoi@a+1,w
  9293  0D9D  00F9               	movwf	??_atoi+1
  9294  0D9E  0AF8               	incf	??_atoi,f
  9295  0D9F  1903               	skipnz
  9296  0DA0  0AF9               	incf	??_atoi+1,f
  9297  0DA1  0878               	movf	??_atoi,w
  9298  0DA2  00F6               	movwf	?_atoi
  9299  0DA3  0879               	movf	??_atoi+1,w
  9300  0DA4  00F7               	movwf	?_atoi+1
  9301  0DA5  0008               	return
  9302  0DA6                     l2914:	
  9303  0DA6  087C               	movf	atoi@a+1,w
  9304  0DA7  00F7               	movwf	?_atoi+1
  9305  0DA8  087B               	movf	atoi@a,w
  9306  0DA9  00F6               	movwf	?_atoi
  9307  0DAA  0008               	return
  9308  0DAB                     __end_of_atoi:	
  9309                           
  9310                           	psect	text29
  9311  0A3D                     __ptext29:	
  9312 ;; *************** function _isdigit *****************
  9313 ;; Defined at:
  9314 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  c               1    wreg     unsigned char 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  c               1    1[COMMON] unsigned char 
  9319 ;; Return value:  Size  Location     Type
  9320 ;;		None               void
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;Total ram usage:        2 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_printf
  9338 ;;		_atoi
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           
  9343                           ;psect for function _isdigit
  9344  0A3D                     _isdigit:	
  9345                           
  9346                           ;incstack = 0
  9347                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9348                           ;isdigit@c stored from wreg
  9349  0A3D  00F1               	movwf	isdigit@c
  9350  0A3E  01F0               	clrf	_isdigit$970
  9351  0A3F  303A               	movlw	58
  9352  0A40  0271               	subwf	isdigit@c,w
  9353  0A41  1803               	skipnc
  9354  0A42  2A49               	goto	l2206
  9355  0A43  3030               	movlw	48
  9356  0A44  0271               	subwf	isdigit@c,w
  9357  0A45  1C03               	skipc
  9358  0A46  2A49               	goto	l2206
  9359  0A47  01F0               	clrf	_isdigit$970
  9360  0A48  0AF0               	incf	_isdigit$970,f
  9361  0A49                     l2206:	
  9362  0A49  0C70               	rrf	_isdigit$970,w
  9363  0A4A  0008               	return
  9364  0A4B                     __end_of_isdigit:	
  9365                           
  9366                           	psect	text30
  9367  0A9F                     __ptext30:	
  9368 ;; *************** function ___wmul *****************
  9369 ;; Defined at:
  9370 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  multiplier      2    0[COMMON] unsigned int 
  9373 ;;  multiplicand    2    2[COMMON] unsigned int 
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;  product         2    4[COMMON] unsigned int 
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  2    0[COMMON] unsigned int 
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, status,0
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;Total ram usage:        6 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; This function calls:
  9392 ;;		Nothing
  9393 ;; This function is called by:
  9394 ;;		_printf
  9395 ;;		_atoi
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function ___wmul
  9401  0A9F                     ___wmul:	
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9405  0A9F  01F4               	clrf	___wmul@product
  9406  0AA0  01F5               	clrf	___wmul@product+1
  9407  0AA1                     l2212:	
  9408  0AA1  1C70               	btfss	___wmul@multiplier,0
  9409  0AA2  2AA7               	goto	l640
  9410  0AA3  0872               	movf	___wmul@multiplicand,w
  9411  0AA4  07F4               	addwf	___wmul@product,f
  9412  0AA5  0873               	movf	___wmul@multiplicand+1,w
  9413  0AA6  3DF5               	addwfc	___wmul@product+1,f
  9414  0AA7                     l640:	
  9415  0AA7  3001               	movlw	1
  9416  0AA8                     u1535:	
  9417  0AA8  35F2               	lslf	___wmul@multiplicand,f
  9418  0AA9  0DF3               	rlf	___wmul@multiplicand+1,f
  9419  0AAA  0B89               	decfsz	9,f
  9420  0AAB  2AA8               	goto	u1535
  9421  0AAC  3001               	movlw	1
  9422  0AAD                     u1545:	
  9423  0AAD  36F1               	lsrf	___wmul@multiplier+1,f
  9424  0AAE  0CF0               	rrf	___wmul@multiplier,f
  9425  0AAF  0B89               	decfsz	9,f
  9426  0AB0  2AAD               	goto	u1545
  9427  0AB1  0870               	movf	___wmul@multiplier,w
  9428  0AB2  0471               	iorwf	___wmul@multiplier+1,w
  9429  0AB3  1D03               	btfss	3,2
  9430  0AB4  2AA1               	goto	l2212
  9431  0AB5  0875               	movf	___wmul@product+1,w
  9432  0AB6  00F1               	movwf	?___wmul+1
  9433  0AB7  0874               	movf	___wmul@product,w
  9434  0AB8  00F0               	movwf	?___wmul
  9435  0AB9  0008               	return
  9436  0ABA                     __end_of___wmul:	
  9437                           
  9438                           	psect	text31
  9439  0A4B                     __ptext31:	
  9440 ;; *************** function _SYSTEM_Initialize *****************
  9441 ;; Defined at:
  9442 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;		None
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  1    wreg      void 
  9449 ;; Registers used:
  9450 ;;		wreg, status,2, status,0, pclath, cstack
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;Total ram usage:        0 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    1
  9463 ;; This function calls:
  9464 ;;		_EUSART_Initialize
  9465 ;;		_OSCILLATOR_Initialize
  9466 ;;		_PIN_MANAGER_Initialize
  9467 ;;		_SPI_Initialize
  9468 ;;		_WDT_Initialize
  9469 ;; This function is called by:
  9470 ;;		_main
  9471 ;; This function uses a non-reentrant model
  9472 ;;
  9473                           
  9474                           
  9475                           ;psect for function _SYSTEM_Initialize
  9476  0A4B                     _SYSTEM_Initialize:	
  9477                           
  9478                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9479                           
  9480                           ;incstack = 0
  9481                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9482  0A4B  318A  226F  318A   	fcall	_PIN_MANAGER_Initialize
  9483                           
  9484                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9485  0A4E  3189  21F2  318A   	fcall	_OSCILLATOR_Initialize
  9486                           
  9487                           ;mcc.c: 75: WDT_Initialize();
  9488  0A51  3189  21E3  318A   	fcall	_WDT_Initialize
  9489                           
  9490                           ;mcc.c: 76: SPI_Initialize();
  9491  0A54  3189  21F9  318A   	fcall	_SPI_Initialize
  9492                           
  9493                           ;mcc.c: 77: EUSART_Initialize();
  9494  0A57  318A  221B         	fcall	_EUSART_Initialize
  9495  0A59  0008               	return
  9496  0A5A                     __end_of_SYSTEM_Initialize:	
  9497                           
  9498                           	psect	text32
  9499  09E3                     __ptext32:	
  9500 ;; *************** function _WDT_Initialize *****************
  9501 ;; Defined at:
  9502 ;;		line 90 in file "mcc_generated_files/mcc.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;		None
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  1    wreg      void 
  9509 ;; Registers used:
  9510 ;;		wreg
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        0 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_SYSTEM_Initialize
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function _WDT_Initialize
  9531  09E3                     _WDT_Initialize:	
  9532                           
  9533                           ;mcc.c: 93: WDTCON = 0x16;
  9534                           
  9535                           ;incstack = 0
  9536                           ; Regs used in _WDT_Initialize: [wreg]
  9537  09E3  3016               	movlw	22
  9538  09E4  0021               	movlb	1	; select bank1
  9539  09E5  0097               	movwf	23	;volatile
  9540  09E6  0008               	return
  9541  09E7                     __end_of_WDT_Initialize:	
  9542                           
  9543                           	psect	text33
  9544  09F9                     __ptext33:	
  9545 ;; *************** function _SPI_Initialize *****************
  9546 ;; Defined at:
  9547 ;;		line 63 in file "mcc_generated_files/spi.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_SYSTEM_Initialize
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           
  9575                           ;psect for function _SPI_Initialize
  9576  09F9                     _SPI_Initialize:	
  9577                           
  9578                           ;spi.c: 68: SSP1STAT = 0x40;
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  9582  09F9  3040               	movlw	64
  9583  09FA  0024               	movlb	4	; select bank4
  9584  09FB  0094               	movwf	20	;volatile
  9585                           
  9586                           ;spi.c: 71: SSP1CON1 = 0x20;
  9587  09FC  3020               	movlw	32
  9588  09FD  0095               	movwf	21	;volatile
  9589                           
  9590                           ;spi.c: 74: SSP1ADD = 0x00;
  9591  09FE  0192               	clrf	18	;volatile
  9592  09FF  0008               	return
  9593  0A00                     __end_of_SPI_Initialize:	
  9594                           
  9595                           	psect	text34
  9596  0A6F                     __ptext34:	
  9597 ;; *************** function _PIN_MANAGER_Initialize *****************
  9598 ;; Defined at:
  9599 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  9600 ;; Parameters:    Size  Location     Type
  9601 ;;		None
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;		None
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  1    wreg      void 
  9606 ;; Registers used:
  9607 ;;		wreg, status,2
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;Total ram usage:        0 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; This function calls:
  9620 ;;		Nothing
  9621 ;; This function is called by:
  9622 ;;		_SYSTEM_Initialize
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           
  9627                           ;psect for function _PIN_MANAGER_Initialize
  9628  0A6F                     _PIN_MANAGER_Initialize:	
  9629                           
  9630                           ;pin_manager.c: 57: LATA = 0x10;
  9631                           
  9632                           ;incstack = 0
  9633                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9634  0A6F  3010               	movlw	16
  9635  0A70  0022               	movlb	2	; select bank2
  9636  0A71  008C               	movwf	12	;volatile
  9637                           
  9638                           ;pin_manager.c: 58: LATC = 0x00;
  9639  0A72  018E               	clrf	14	;volatile
  9640                           
  9641                           ;pin_manager.c: 63: TRISA = 0x2F;
  9642  0A73  302F               	movlw	47
  9643  0A74  0021               	movlb	1	; select bank1
  9644  0A75  008C               	movwf	12	;volatile
  9645                           
  9646                           ;pin_manager.c: 64: TRISC = 0x32;
  9647  0A76  3032               	movlw	50
  9648  0A77  008E               	movwf	14	;volatile
  9649                           
  9650                           ;pin_manager.c: 69: ANSELC = 0x00;
  9651  0A78  0023               	movlb	3	; select bank3
  9652  0A79  018E               	clrf	14	;volatile
  9653                           
  9654                           ;pin_manager.c: 70: ANSELA = 0x07;
  9655  0A7A  3007               	movlw	7
  9656  0A7B  008C               	movwf	12	;volatile
  9657                           
  9658                           ;pin_manager.c: 75: WPUA = 0x00;
  9659  0A7C  0024               	movlb	4	; select bank4
  9660  0A7D  018C               	clrf	12	;volatile
  9661                           
  9662                           ;pin_manager.c: 76: WPUC = 0x30;
  9663  0A7E  3030               	movlw	48
  9664  0A7F  008E               	movwf	14	;volatile
  9665                           
  9666                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  9667  0A80  0021               	movlb	1	; select bank1
  9668  0A81  1395               	bcf	21,7	;volatile
  9669                           
  9670                           ;pin_manager.c: 83: APFCON1 = 0x00;
  9671  0A82  0022               	movlb	2	; select bank2
  9672  0A83  019E               	clrf	30	;volatile
  9673                           
  9674                           ;pin_manager.c: 84: APFCON0 = 0x00;
  9675  0A84  019D               	clrf	29	;volatile
  9676  0A85  0008               	return
  9677  0A86                     __end_of_PIN_MANAGER_Initialize:	
  9678                           
  9679                           	psect	text35
  9680  09F2                     __ptext35:	
  9681 ;; *************** function _OSCILLATOR_Initialize *****************
  9682 ;; Defined at:
  9683 ;;		line 80 in file "mcc_generated_files/mcc.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;                  1    wreg      void 
  9690 ;; Registers used:
  9691 ;;		wreg, status,2
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;Total ram usage:        0 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_SYSTEM_Initialize
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function _OSCILLATOR_Initialize
  9712  09F2                     _OSCILLATOR_Initialize:	
  9713                           
  9714                           ;mcc.c: 83: OSCCON = 0x60;
  9715                           
  9716                           ;incstack = 0
  9717                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9718  09F2  3060               	movlw	96
  9719  09F3  0021               	movlb	1	; select bank1
  9720  09F4  0099               	movwf	25	;volatile
  9721                           
  9722                           ;mcc.c: 85: OSCTUNE = 0x00;
  9723  09F5  0198               	clrf	24	;volatile
  9724                           
  9725                           ;mcc.c: 87: BORCON = 0x00;
  9726  09F6  0022               	movlb	2	; select bank2
  9727  09F7  0196               	clrf	22	;volatile
  9728  09F8  0008               	return
  9729  09F9                     __end_of_OSCILLATOR_Initialize:	
  9730                           
  9731                           	psect	text36
  9732  0A1B                     __ptext36:	
  9733 ;; *************** function _EUSART_Initialize *****************
  9734 ;; Defined at:
  9735 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;		None
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      void 
  9742 ;; Registers used:
  9743 ;;		wreg, status,2
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        0 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_SYSTEM_Initialize
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           
  9763                           ;psect for function _EUSART_Initialize
  9764  0A1B                     _EUSART_Initialize:	
  9765                           
  9766                           ;eusart.c: 58: BAUDCON = 0x08;
  9767                           
  9768                           ;incstack = 0
  9769                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9770  0A1B  3008               	movlw	8
  9771  0A1C  0023               	movlb	3	; select bank3
  9772  0A1D  009F               	movwf	31	;volatile
  9773                           
  9774                           ;eusart.c: 61: RCSTA = 0x90;
  9775  0A1E  3090               	movlw	144
  9776  0A1F  009D               	movwf	29	;volatile
  9777                           
  9778                           ;eusart.c: 64: TXSTA = 0x24;
  9779  0A20  3024               	movlw	36
  9780  0A21  009E               	movwf	30	;volatile
  9781                           
  9782                           ;eusart.c: 67: SPBRGL = 0x33;
  9783  0A22  3033               	movlw	51
  9784  0A23  009B               	movwf	27	;volatile
  9785                           
  9786                           ;eusart.c: 70: SPBRGH = 0x00;
  9787  0A24  019C               	clrf	28	;volatile
  9788  0A25  0008               	return
  9789  0A26                     __end_of_EUSART_Initialize:	
  9790                           
  9791                           	psect	text37
  9792  0A11                     __ptext37:	
  9793 ;; *************** function _EUSART_Read *****************
  9794 ;; Defined at:
  9795 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      unsigned char 
  9802 ;; Registers used:
  9803 ;;		wreg
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_main
  9819 ;;		_getch
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           
  9824                           ;psect for function _EUSART_Read
  9825  0A11                     _EUSART_Read:	
  9826  0A11                     l51:	
  9827                           ;eusart.c: 78: {
  9828                           
  9829                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _EUSART_Read: [wreg]
  9833                           
  9834  0A11  0020               	movlb	0	; select bank0
  9835  0A12  1E91               	btfss	17,5	;volatile
  9836  0A13  2A11               	goto	l51
  9837                           
  9838                           ;eusart.c: 79: }
  9839                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9840  0A14  0023               	movlb	3	; select bank3
  9841  0A15  1C9D               	btfss	29,1	;volatile
  9842  0A16  2A19               	goto	l2750
  9843                           
  9844                           ;eusart.c: 83: {
  9845                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9846  0A17  121D               	bcf	29,4	;volatile
  9847                           
  9848                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9849  0A18  161D               	bsf	29,4	;volatile
  9850  0A19                     l2750:	
  9851                           
  9852                           ;eusart.c: 88: }
  9853                           ;eusart.c: 90: return RCREG;
  9854  0A19  0819               	movf	25,w	;volatile
  9855  0A1A  0008               	return
  9856  0A1B                     __end_of_EUSART_Read:	
  9857                           
  9858                           	psect	text38
  9859  0ABA                     __ptext38:	
  9860 ;; *************** function _DATAEE_WriteByte *****************
  9861 ;; Defined at:
  9862 ;;		line 186 in file "mcc_generated_files/memory.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;  bAdd            1    wreg     unsigned char 
  9865 ;;  bData           1    0[COMMON] unsigned char 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  bAdd            1    1[COMMON] unsigned char 
  9868 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      void 
  9871 ;; Registers used:
  9872 ;;		wreg, status,2, status,0
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9878 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;Total ram usage:        3 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; This function calls:
  9885 ;;		Nothing
  9886 ;; This function is called by:
  9887 ;;		_main
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _DATAEE_WriteByte
  9893  0ABA                     _DATAEE_WriteByte:	
  9894                           
  9895                           ;incstack = 0
  9896                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  9897                           ;DATAEE_WriteByte@bAdd stored from wreg
  9898  0ABA  00F1               	movwf	DATAEE_WriteByte@bAdd
  9899                           
  9900                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  9901  0ABB  01F2               	clrf	DATAEE_WriteByte@GIEBitValue
  9902                           
  9903                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  9904  0ABC  0871               	movf	DATAEE_WriteByte@bAdd,w
  9905  0ABD  0023               	movlb	3	; select bank3
  9906  0ABE  0091               	movwf	17	;volatile
  9907                           
  9908                           ;memory.c: 191: EEDATL = bData;
  9909  0ABF  0870               	movf	DATAEE_WriteByte@bData,w
  9910  0AC0  0093               	movwf	19	;volatile
  9911                           
  9912                           ;memory.c: 192: EECON1bits.EEPGD = 0;
  9913  0AC1  1395               	bcf	21,7	;volsfr
  9914                           
  9915                           ;memory.c: 193: EECON1bits.CFGS = 0;
  9916  0AC2  1315               	bcf	21,6	;volsfr
  9917                           
  9918                           ;memory.c: 194: EECON1bits.WREN = 1;
  9919  0AC3  1515               	bsf	21,2	;volsfr
  9920                           
  9921                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
  9922  0AC4  3000               	movlw	0
  9923  0AC5  1B8B               	btfsc	11,7	;volatile
  9924  0AC6  3001               	movlw	1
  9925  0AC7  00F2               	movwf	DATAEE_WriteByte@GIEBitValue
  9926                           
  9927                           ;memory.c: 197: INTCONbits.GIE = 0;
  9928  0AC8  138B               	bcf	11,7	;volatile
  9929                           
  9930                           ;memory.c: 198: EECON2 = 0x55;
  9931  0AC9  3055               	movlw	85
  9932  0ACA  0096               	movwf	22	;volsfr
  9933                           
  9934                           ;memory.c: 199: EECON2 = 0xAA;
  9935  0ACB  30AA               	movlw	170
  9936  0ACC  0096               	movwf	22	;volsfr
  9937                           
  9938                           ;memory.c: 200: EECON1bits.WR = 1;
  9939  0ACD  1495               	bsf	21,1	;volsfr
  9940  0ACE                     l461:	
  9941                           ;memory.c: 203: {
  9942                           
  9943                           ;memory.c: 202: while (EECON1bits.WR)
  9944                           
  9945  0ACE  1895               	btfsc	21,1	;volsfr
  9946  0ACF  2ACE               	goto	l461
  9947                           
  9948                           ;memory.c: 204: }
  9949                           ;memory.c: 206: EECON1bits.WREN = 0;
  9950  0AD0  1115               	bcf	21,2	;volsfr
  9951                           
  9952                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
  9953  0AD1  0C72               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9954  0AD2  1C03               	skipc
  9955  0AD3  138B               	bcf	11,7	;volatile
  9956  0AD4  1803               	skipnc
  9957  0AD5  178B               	bsf	11,7	;volatile
  9958  0AD6  0008               	return
  9959  0AD7                     __end_of_DATAEE_WriteByte:	
  9960                           
  9961                           	psect	text39
  9962  0A31                     __ptext39:	
  9963 ;; *************** function _DATAEE_ReadByte *****************
  9964 ;; Defined at:
  9965 ;;		line 210 in file "mcc_generated_files/memory.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;  bAdd            1    wreg     unsigned char 
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;  bAdd            1    0[COMMON] unsigned char 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      unsigned char 
  9972 ;; Registers used:
  9973 ;;		wreg
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;Total ram usage:        1 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_main
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function _DATAEE_ReadByte
  9994  0A31                     _DATAEE_ReadByte:	
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _DATAEE_ReadByte: [wreg]
  9998                           ;DATAEE_ReadByte@bAdd stored from wreg
  9999  0A31  00F0               	movwf	DATAEE_ReadByte@bAdd
 10000                           
 10001                           ;memory.c: 212: EEADRL = (uint8_t)(bAdd & 0x0ff);
 10002  0A32  0870               	movf	DATAEE_ReadByte@bAdd,w
 10003  0A33  0023               	movlb	3	; select bank3
 10004  0A34  0091               	movwf	17	;volatile
 10005                           
 10006                           ;memory.c: 213: EECON1bits.CFGS = 0;
 10007  0A35  1315               	bcf	21,6	;volsfr
 10008                           
 10009                           ;memory.c: 214: EECON1bits.EEPGD = 0;
 10010  0A36  1395               	bcf	21,7	;volsfr
 10011                           
 10012                           ;memory.c: 215: EECON1bits.RD = 1;
 10013  0A37  1415               	bsf	21,0	;volsfr
 10014                           
 10015                           ;memory.c: 216: __nop();
 10016  0A38  0000               	nop
 10017                           
 10018                           ;memory.c: 217: __nop();
 10019  0A39  0000               	nop
 10020                           
 10021                           ;memory.c: 219: return (EEDATL);
 10022  0A3A  0023               	movlb	3	; select bank3
 10023  0A3B  0813               	movf	19,w	;volatile
 10024  0A3C  0008               	return
 10025  0A3D                     __end_of_DATAEE_ReadByte:	
 10026  007E                     btemp	set	126	;btemp
 10027  007E                     wtemp0	set	126


Data Sizes:
    Strings     1228
    Constant    34
    Data        0
    BSS         41
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     26      63
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    printf$779	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), STR_64(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_63(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_9(CODE[21]), main@buf(BANK1[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_62(CODE[5]), STR_61(CODE[15]), STR_60(CODE[15]), STR_59(CODE[2]), 
		 -> STR_58(CODE[16]), STR_57(CODE[16]), STR_56(CODE[2]), STR_55(CODE[16]), 
		 -> STR_54(CODE[16]), STR_53(CODE[16]), STR_52(CODE[2]), STR_51(CODE[12]), 
		 -> STR_50(CODE[12]), STR_49(CODE[12]), STR_48(CODE[2]), STR_47(CODE[12]), 
		 -> STR_46(CODE[12]), STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[44]), 
		 -> STR_42(CODE[44]), STR_41(CODE[5]), STR_40(CODE[13]), STR_39(CODE[13]), 
		 -> STR_38(CODE[18]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[20]), 
		 -> STR_34(CODE[14]), STR_33(CODE[14]), STR_32(CODE[14]), STR_31(CODE[15]), 
		 -> STR_30(CODE[16]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[23]), 
		 -> STR_26(CODE[21]), STR_25(CODE[15]), STR_24(CODE[22]), STR_23(CODE[44]), 
		 -> STR_22(CODE[57]), STR_21(CODE[26]), STR_20(CODE[21]), STR_19(CODE[29]), 
		 -> STR_18(CODE[38]), STR_17(CODE[25]), STR_16(CODE[42]), STR_15(CODE[38]), 
		 -> STR_14(CODE[58]), STR_13(CODE[54]), STR_12(CODE[59]), STR_11(CODE[51]), 
		 -> STR_10(CODE[45]), STR_8(CODE[36]), STR_7(CODE[3]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[7]), 
		 -> STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    atosid@ascii	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    slcan_send@pbuf	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_send->_SPI_exchange
    _atosid->_atoui8
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _slcan_send->_can_send
    _can_send->_printf
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  135431
                                             73 BANK0      2     2      0
                                              0 BANK1     26    26      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
                         _slcan_send
 ---------------------------------------------------------------------------------
 (1) _slcan_send                                           5     5      0   10596
                                             46 BANK0      5     5      0
                             _atosid
                             _atoui8
                           _can_send
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (2) _can_send                                            11    10      1    9624
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _atosid                                              17    15      2     368
                                              3 COMMON     8     6      2
                                              0 BANK0      9     9      0
                             _atoui8
 ---------------------------------------------------------------------------------
 (2) _atoui8                                               3     3      0     180
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   27250
                                             69 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   15957
                                             43 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      8     4      4    6764
                                             35 BANK0      8     4      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   20610
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   11525
                                             39 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (2) _can_set_sid                                          7     5      2     282
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8751
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    6885
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11225
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11203
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8819
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              37    23     14    6391
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _slcan_send
     _atosid
       _atoui8
     _atoui8
     _can_send
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      3F       7       78.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      9D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      9D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 22 20:57:54 2018

                          _SPI_Initialize 09F9                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0043                                        l51 0A11  
                                      l58 0A01                   ?_SPI_Exchange8bitBuffer 0071  
                                      _nm 14EA                       ___wmul@multiplicand 0072  
                   __size_of_SPI_exchange 0015                               __CFG_LVP$ON 0000  
                                     l113 0A0D                                       l217 039C  
                                     l218 039E                                       l500 0615  
                                     l501 0616                                       l351 0263  
                                     l522 06CF                                       l531 0728  
                                     l371 0CC7                                       l372 0CC2  
                                     l348 0253                                       l461 0ACE  
                                     l374 0CD8                                       l527 06F1  
                                     l375 0CD3                                       l640 0AA7  
                                     l368 0CB6                                       l377 0CDC  
                                     l379 0CE0                                       l556 07EF  
                                     l487 05CB                                       l499 06A9  
                __end_of_can_status_check 0CED                              __CFG_CPD$OFF 0000  
                                     _abc 14E4                                       _buf 00B4  
                                     _sid 00B2                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                   can_logging_mode@debug 0072                              ?_EUSART_Read 0070  
                                    l2212 0AA1                                      l2300 0C95  
                                    l3020 00B0                                      l2206 0A49  
                                    l2310 05C6                                      l3102 0401  
                                    l3008 0057                                      l3112 0420  
                                    l2242 003B                                      l2234 001D  
                                    l2410 071C                                      l2330 0618  
                                    l2322 05E6                                      l3026 00B5  
                                    l3106 0417                                      l2236 0029  
                                    l2260 0B81                                      l2420 0747  
                                    l2316 05D0                                      l3132 0449  
                                    l3124 043A                                      l2246 0044  
                                    l2342 062D                                      l2318 05D9  
                                    l3038 010E                                      l2510 0E08  
                                    l3142 045B                                      l3118 042E  
                                    l3062 038E                                      l2280 0C52  
                                    l2264 0B8D                                      l2432 0760  
                                    l2408 0713                                      l2360 0671  
                                    l2352 064A                                      l2344 063B  
                                    l2512 0E0F                                      l2600 0271  
                                    l3152 046A                                      l3144 045D  
                                    l3136 0450                                      l3128 0440  
                                    l2290 0C7C                                      l2258 0B75  
                                    l2434 0764                                      l2442 0779  
                                    l2426 0751                                      l2418 0744  
                                    l2354 0659                                      l2338 062B  
                                    l2370 0685                                      l3170 04BA  
                                    l3090 03EB                                      l3074 03BD  
                                    l2284 0C60                                      l2268 0B96  
                                    l2452 07C6                                      l2460 07D9  
                                    l2444 077F                                      l2364 067C  
                                    l2348 0648                                      l2508 0DEA  
                                    l2620 02BE                                      l3172 04BE  
                                    l2294 0C80                                      l2286 0C73  
                                    l2446 07A4                                      l2462 07DD  
                                    l2438 0771                                      l2382 06C3  
                                    l2358 0666                                      l2622 0294  
                                    l3174 04C2                                      l3166 04A3  
                                    l3158 047C                                      l3182 0557  
                                    l3086 03DF                                      l2288 0C77  
                                    l2464 05AA                                      l2480 0B37  
                                    l2640 030C                                      l2624 02C4  
                                    l3176 04C6                                      l3096 03F2  
                                    l3184 057F                                      l2298 0C91  
                                    l2730 0FE8                                      l2474 0B2D  
                                    l3178 04D2                                      l3186 0588  
                                    l2652 0345                                      l3188 0589  
                                    l2750 0A19                                      l2494 0DC6  
                                    l2486 0B43                                      l2904 0D6E  
                                    l2592 025F                                      l2914 0DA6  
                                    l2906 0D72                                      l2674 0D15  
                                    l2498 0DD9                                      l2586 024D  
                                    l2908 0D97                                      l2860 0CEB  
                                    l2852 0CE6                                      l2598 026F  
                                    l2890 0D51                                      l2964 0EBB  
                                    l2886 0D4C                                      l2982 0F0F  
                                    l2888 0D45                                      l2976 0EE7  
                                    l2898 0D67                                      l2988 0F1E  
                                    STR_1 149F                                      STR_2 14C3  
                                    STR_3 14D0                                      STR_4 14D6  
                                    STR_5 14DF                                      STR_6 1340  
                                    STR_7 14E7                                      STR_8 123E  
                                    STR_9 1309                                      _LATA 010C  
                                    _LATC 010E                                      u2145 0AE8  
                                    u2324 0BA4                                      u1605 0034  
                                    u2325 0BA3                                      u1535 0AA8  
                                    u1615 003C                                      u2335 0F6D  
                                    u2264 034F                                      u1545 0AAD  
                                    u2265 034E                                      u1645 0B78  
                                    u1805 0641                                      u2605 0071  
                                    u1575 0020                                      u1665 0B87  
                                    u2545 0ECD                                      u1595 002A  
                                    u1675 0B8E                                      u2635 00CF  
                                    u1935 0737                                      u1865 06EA  
                                    u1895 070C                                      u2887 0E1F  
                                    u2897 0E3F                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                               atoui8@ascii 0072  
                                    _atoi 0D44                                      _main 0372  
                                    _mode 006B                           can_baudrate@bpr 0049  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                             atoui8@minus 0071                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 0002  
                  __end_of_SPI_Initialize 0A00                              _SPI_exchange 0A5A  
                           __CFG_MCLRE$ON 0000                          can_send@data_buf 004B  
              __end_of_can_dump_registers 0225            __end_of_SPI_Exchange8bitBuffer 0C97  
               __size_of_DATAEE_WriteByte 001D                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0007             __end_of_OSCILLATOR_Initialize 09F9  
                                   ?_atoi 0076                                     ?_main 0070  
                                   STR_10 1117                                     STR_11 10E4  
                                   STR_20 12F4                                     STR_12 1000  
                                   STR_21 127F                                     STR_13 10AE  
                                   STR_30 13AA                                     STR_22 1075  
                                   STR_14 103B                                     STR_31 140A  
                                   STR_15 11F2                                     STR_23 119C  
                                   STR_40 1461                                     STR_32 1453  
                                   STR_24 12C9                                     STR_16 11C8  
                                   STR_41 14DC                                     STR_33 1445  
                                   STR_25 1428                                     STR_17 1299  
                           __CFG_WDTE$OFF 0000                                     STR_50 1487  
                                   STR_34 1437                                     STR_26 12DF  
                                   STR_18 1218                                     STR_42 1170  
                                   STR_51 1493                                     STR_35 131E  
                                   STR_27 12B2                                     STR_19 1262  
                                   STR_43 1144                                     STR_52 14DF  
                                   STR_44 14DC                                     STR_60 1419  
                                   STR_36 1377                                     STR_28 1366  
                                   STR_45 14DC                                     STR_61 1428  
                                   STR_53 13CA                                     STR_37 1399  
                                   STR_29 1388                                     STR_62 14DC  
                                   STR_46 136B                                     STR_54 13EA  
                                   STR_38 1332                                     STR_47 138D  
                                   STR_63 14BC                                     STR_39 146E  
                                   STR_55 13FA                                     STR_56 14DF  
                                   STR_48 14DF                                     STR_64 1344  
                                   STR_49 147B                                     STR_57 13BA  
                                   STR_65 1355                                     STR_58 13DA  
                                   STR_59 14DF                      __size_of_can_set_sid 0024  
                             atosid@ascii 0028                           __end_of___lwdiv 0049  
                         __end_of___lwmod 0B9B             can_status_check@bytes_written 0067  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                         SPI_exchange@buf 007D                           SPI_exchange@len 0078  
                         _DATAEE_ReadByte 0A31                           __end_of_dpowers 14B4  
                          _WDT_Initialize 09E3                           __end_of_isdigit 0A4B  
                         __end_of_receive 1000                                     atoi@a 007B  
                        can_baudrate@mask 004A                                     atoi@s 007D  
                                   _putch 09E7                                     main@c 00DB  
                                   main@n 00DA              ?_abort_pending_transmissions 0070  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                             receive@rx_buf 0051  
                         ?_SPI_Initialize 0070       __size_of_can_dump_masks_and_filters 00CC  
                         __initialization 07F0                     __size_of_can_baudrate 0033  
                            __end_of_atoi 0DAB                              __end_of_main 05A5  
                           main@echo_back 00D9                            ??_EUSART_Write 0070  
                  can_status_check@status 0068                                    ??_atoi 0078  
                                  ??_main 0069                     can_set_mask@mask_sidh 0053  
                   can_set_mask@mask_sidl 0054                   can_logging_mode@verbose 0070  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 09E7  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 0A11  
                   __size_of_can_ope_mode 0057                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _EEDATH 0194  
                                  _EEDATL 0193                                    _EECON2 0196  
                   __size_of_can_set_mask 00A5                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELC 018E  
                                  _BORCON 0116                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                          __end_of_can_init 0EA6  
                            _can_baudrate 0BC9                          __end_of_can_send 0372  
                        receive_handler@i 004A                            __CFG_PWRTE$OFF 0000  
                                  ___wmul 0A9F                             _output_format 006D  
                          __CFG_STVREN$ON 0000                                 ??___lwdiv 0074  
                               ??___lwmod 007C                                    _atoui8 0B21  
                                  _atosid 0BFC                                    _printf 05A5  
                            _can_ope_mode 0CED                   __end_of_DATAEE_ReadByte 0A3D  
                            _can_set_mask 0EA6                                 ??_isdigit 0070  
                               ??_receive 004B                           ?_WDT_Initialize 0070  
               __size_of_can_logging_mode 000B                          __end_of_rxfnsidh 14D0  
                        __end_of_txbnsidh 14E4                          __end_of_rxmnsidh 14EE  
                    __size_of_EUSART_Read 000A                         _SYSTEM_Initialize 0A4B  
               SPI_exchange@bytes_written 007C                   __end_of__initialization 07FD  
                  __size_of_read_register 0019                        ?_SYSTEM_Initialize 0070  
                      __size_of_can_abort 000F                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0070                          _DATAEE_WriteByte 0ABA  
                          can_send@status 004A      __size_of_abort_pending_transmissions 0026  
                           __end_of_putch 09EC                               receive@pbuf 0060  
      __end_of_can_dump_masks_and_filters 0115                _can_dump_masks_and_filters 0049  
                              __end_of_nm 14EC                         ?_can_status_check 0070  
                          _OPTION_REGbits 0095                        ??_can_status_check 0065  
                  can_abort@bytes_written 0048                 __end_of_SYSTEM_Initialize 0A5A  
                                 ??_putch 0071                                __pbssBANK0 006B  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 0A08  
                        can_set_mask@mask 0048                                __pmaintext 0372  
                                 ?___wmul 0070                            slcan_send@pbuf 0052  
                                 ?_atoui8 0070                                   ?_atosid 0073  
                                 _BAUDCON 019F                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0022  
                           _read_register 0A86                          ?_DATAEE_ReadByte 0070  
                               ?_can_init 0047                                 ?_can_send 0043  
                      _can_dump_registers 0115                  __size_of_receive_handler 0070  
                                 _OSCTUNE 0098                         __end_of_can_abort 0015  
                                 _SSP1ADD 0212                                   _SSP1BUF 0211  
                     ?_can_dump_registers 0070                        __size_of_txf_clear 002E  
                        ??_SPI_Initialize 0070                      DATAEE_WriteByte@bAdd 0071  
                         __size_of___wmul 001B                      ??_can_dump_registers 0043  
                           ??_can_set_sid 0072                                   ___lwdiv 0015  
                                 ___lwmod 0B6F                           __size_of_atoui8 0026  
                         __size_of_atosid 004D                            ?_read_register 0070  
                                 _handler 00B0                                   __ptext1 0B47  
                                 __ptext2 0225                                   __ptext3 0BFC  
                                 __ptext4 0B21                                   __ptext5 0C97  
                                 __ptext6 0B9B                                   __ptext7 0F4B  
                                 __ptext8 0DAB                                   __ptext9 0EA6  
                         __size_of_printf 024B                         __end_of_hexpowers 14BC  
                                 _dpowers 14AA                                ??_can_init 0049  
                   _OSCILLATOR_Initialize 09F2                                ??_can_send 0044  
                                 _isdigit 0A3D                                   _receive 0F4B  
                ??_PIN_MANAGER_Initialize 0070                          _can_logging_mode 0A26  
                       ?_SPI_Exchange8bit 0070                                   main@cmd 00DC  
                  txf_clear@bytes_written 0023                                   main@buf 00C7  
                                 main@bpr 00C5                __size_of_SYSTEM_Initialize 000F  
                                 main@idx 00DD                                   main@sid 00C4  
                                 clrloop0 09ED                                   atosid@a 0020  
                                 atosid@b 0022                                   atosid@c 0024  
                    end_of_initialization 07FD                        ??_SPI_Exchange8bit 0070  
                    SPI_Exchange8bit@data 0070                            _operation_mode 006F  
                       _EUSART_Initialize 0A1B                                _slcan_send 0B47  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0042                                   printf@f 0022  
                              _printf$779 0034                         __end_of_txf_clear 0BC9  
                     ??_EUSART_Initialize 0070                          ??_WDT_Initialize 0070  
                     __end_of_can_set_sid 0AFB                          __CFG_FOSC$INTOSC 0000  
            ??_can_dump_masks_and_filters 0043                     __size_of_EUSART_Write 0008  
                __end_of_DATAEE_WriteByte 0AD7                         ??_receive_handler 0047  
               __end_of_EUSART_Initialize 0A26                               printf@width 0040  
                ??_SPI_Exchange8bitBuffer 0073                                main@status 00C6  
                     receive_handler@pbuf 0045  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0ABA  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0A00  
                          __end_of_atoui8 0B47                            __end_of_atosid 0C49  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07F0  
                     start_initialization 07F0           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 14E7                          _can_set_mask$536 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0B21  
             _abort_pending_transmissions 0AFB                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
                     DATAEE_ReadByte@bAdd 0070                 can_ope_mode@bytes_written 0045  
           ??_abort_pending_transmissions 0020                             ?_SPI_exchange 0078  
                             ?_slcan_send 0070                                  ??___wmul 0074  
                                ??_atoui8 0070                                  ??_atosid 0075  
                           txf_clear@mask 0022                               _can_set_sid 0AD7  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00C4  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008B                         __size_of_can_send 014D  
                              receive@dlc 0063             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 0006                __size_of_EUSART_Initialize 000B  
                     __end_of_EUSART_Read 0A1B                                 __pnvBANK1 00DE  
                         can_set_mask@cmd 0052                            ??_SPI_exchange 0079  
         __size_of_SPI_Exchange8bitBuffer 004E                          ___lwdiv@dividend 0072  
                  _PIN_MANAGER_Initialize 0A6F                           can_set_sid@sidh 0075  
                         can_set_sid@sidl 0076                             slcan_send@dlc 0051  
                __end_of_can_logging_mode 0A31                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                       __size_of_slcan_send 0028  
                               _hexpowers 14B4                          ___lwdiv@quotient 0075  
                __size_of_DATAEE_ReadByte 000C                            __size_of_putch 0005  
                              ?_can_abort 0070                             ?_can_baudrate 0070  
                          ___wmul@product 0074                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 09EC  
                               _save_rxfn 00A0                                 _save_rxmn 00AC  
                                _PIR1bits 0011                 __size_of_SPI_Exchange8bit 0009  
                                _SSP1CON1 0215                                  _SSP1STAT 0214  
             __size_of_can_dump_registers 0110                             ?_can_ope_mode 0070  
                       ___wmul@multiplier 0070                             ?_can_set_mask 0047  
                  _SPI_Exchange8bitBuffer 0C49                           _receive_handler 0DAB  
                              printf@flag 003F                                printf@prec 0037  
                               _txf_clear 0B9B                     DATAEE_WriteByte@bData 0070  
                      receive_handler@dlc 0046                        receive_handler@sid 0043  
                             _EUSART_Read 0A11                         ?_DATAEE_WriteByte 0070  
                          ??_can_baudrate 0047                               can_send@dlc 0043  
                             can_send@len 0048                        ??_DATAEE_WriteByte 0071  
                        _can_status_check 0C97                                _EECON1bits 0195  
                 __size_of_SPI_Initialize 0007                   ??_OSCILLATOR_Initialize 0070  
                          ??_can_ope_mode 0043                          __size_of___lwdiv 0034  
                        __size_of___lwmod 002C                            ??_can_set_mask 004A  
            SPI_Exchange8bitBuffer@dataIn 0076                                 receive@id 0061  
                             _isdigit$970 0070                      can_ope_mode@ope_mode 0046  
            SPI_Exchange8bitBuffer@bufLen 0071                                  _can_init 0E1B  
                                _can_send 0225                                txf_clear@n 0024  
                              ?_txf_clear 0070                      __end_of_SPI_exchange 0A6F  
                        __size_of_isdigit 000E                          __size_of_receive 00B5  
                         ___lwdiv@divisor 0070                              slcan_send@id 004F  
                         ___lwdiv@counter 0077                                  __ptext10 0A26  
                                __ptext11 0E1B                                  __ptext20 09E7  
                                __ptext12 0AD7                                  __ptext21 0A00  
                                __ptext13 0115                                  __ptext30 0A9F  
                                __ptext22 0B6F                                  __ptext14 0A86  
                                __ptext31 0A4B                                  __ptext23 0015  
                                __ptext15 0049                                  __ptext32 09E3  
                                __ptext24 0AFB                                  __ptext16 0BC9  
                                __ptext33 09F9                                  __ptext25 0A5A  
                                __ptext17 0006                                  __ptext34 0A6F  
                                __ptext26 0C49                                  __ptext18 0CED  
                                __ptext35 09F2                                  __ptext27 0A08  
                                __ptext19 05A5                                  __ptext36 0A1B  
                                __ptext28 0D44                                  __ptext37 0A11  
                                __ptext29 0A3D                                  __ptext38 0ABA  
                                __ptext39 0A31                              _SSP1CON1bits 0215  
             DATAEE_WriteByte@GIEBitValue 0072                               ??_can_abort 0047  
                           __size_of_atoi 0067                             __size_of_main 0233  
                       ??_DATAEE_ReadByte 0070                              ??_slcan_send 004E  
                                atoi@sign 007A                   __end_of_receive_handler 0E1B  
                            ?_can_set_sid 0070                                  _run_mode 00DE  
                               printf@idx 0036                                 printf@len 003A  
                               printf@val 003D                              _SSP1STATbits 0214  
                                main@mask 00D7                                  _rxfnsidh 14CA  
                   __end_of_read_register 0A9F                                  _txbnsidh 14E1  
                                _rxmnsidh 14EC                                  atosid@id 0026  
                              _INTCONbits 000B                            __pstringtext10 1075  
                          __pstringtext11 10AE                            __pstringtext20 123E  
                          __pstringtext12 10E4                            __pstringtext21 1262  
                          __pstringtext13 1117                            __pstringtext30 1332  
                          __pstringtext22 127F                            __pstringtext14 1144  
                          __pstringtext31 1344                            __pstringtext23 1299  
                          __pstringtext15 1170                            __pstringtext40 13DA  
                          __pstringtext32 1355                            __pstringtext24 12B2  
                          __pstringtext16 119C                            __pstringtext41 13EA  
                          __pstringtext33 1366                            __pstringtext25 12C9  
                          __pstringtext17 11C8                            __pstringtext50 146E  
                          __pstringtext42 13FA                            __pstringtext34 1377  
                          __pstringtext26 12DF                            __pstringtext18 11F2  
                          __pstringtext51 147B                            __pstringtext43 140A  
                          __pstringtext35 1388                            __pstringtext27 12F4  
                          __pstringtext19 1218                            __pstringtext60 14E7  
                          __pstringtext52 1487                            __pstringtext44 1419  
                          __pstringtext36 1399                            __pstringtext28 1309  
                          __pstringtext61 0000                            __pstringtext53 1493  
                          __pstringtext45 1428                            __pstringtext37 13AA  
                          __pstringtext29 131E                            __pstringtext54 149F  
                          __pstringtext46 1437                            __pstringtext38 13BA  
                          __pstringtext55 14BC                            __pstringtext47 1445  
                          __pstringtext39 13CA                            __pstringtext56 14C3  
                          __pstringtext48 1453                            __pstringtext57 14D0  
                          __pstringtext49 1461                            __pstringtext58 14D6  
                          __pstringtext59 14DC                                  isdigit@c 0071  
                      __end_of_slcan_send 0B6F                   __size_of_WDT_Initialize 0004  
                                receive@n 0064                          ___lwmod@dividend 007A  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
      SPI_Exchange8bitBuffer@bytesWritten 0077                         receive@bytes_read 0050  
                        _SPI_Exchange8bit 0A08                     can_send@bytes_written 0049  
                                printf@ap 003C                                  printf@cp 0038  
                       ?_can_logging_mode 0070                   can_init@receive_handler 0047  
                      ??_can_logging_mode 0071                      __end_of_can_baudrate 0BFC  
                           __pstringtext1 14AA                             __pstringtext2 14B4  
                           __pstringtext3 14CA                             __pstringtext4 14E1  
                           __pstringtext5 14E4                             __pstringtext6 14EA  
                           __pstringtext7 14EC                             __pstringtext8 1000  
                           __pstringtext9 103B                               ??_txf_clear 0020  
                         ___lwmod@divisor 0078                           ___lwmod@counter 007D  
                      EUSART_Write@txData 0070            __end_of_PIN_MANAGER_Initialize 0A86  
                    __end_of_can_ope_mode 0D44                      __end_of_can_set_mask 0F4B  
