

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 04:21:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	cinit,global,class=CODE,merge=1,delta=2
    25                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC16F1825 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  0007                     	;# 
   100  0008                     	;# 
   101  0009                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000E                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  001E                     	;# 
   119  001F                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  010C                     	;# 
   137  010E                     	;# 
   138  0111                     	;# 
   139  0112                     	;# 
   140  0113                     	;# 
   141  0114                     	;# 
   142  0115                     	;# 
   143  0116                     	;# 
   144  0117                     	;# 
   145  0118                     	;# 
   146  0119                     	;# 
   147  011A                     	;# 
   148  011B                     	;# 
   149  011D                     	;# 
   150  011E                     	;# 
   151  018C                     	;# 
   152  018E                     	;# 
   153  0191                     	;# 
   154  0191                     	;# 
   155  0192                     	;# 
   156  0193                     	;# 
   157  0193                     	;# 
   158  0193                     	;# 
   159  0194                     	;# 
   160  0195                     	;# 
   161  0196                     	;# 
   162  0199                     	;# 
   163  019A                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019D                     	;# 
   168  019E                     	;# 
   169  019F                     	;# 
   170  020C                     	;# 
   171  020E                     	;# 
   172  0211                     	;# 
   173  0211                     	;# 
   174  0212                     	;# 
   175  0212                     	;# 
   176  0213                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0214                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0215                     	;# 
   183  0216                     	;# 
   184  0216                     	;# 
   185  0217                     	;# 
   186  0217                     	;# 
   187  0291                     	;# 
   188  0291                     	;# 
   189  0292                     	;# 
   190  0293                     	;# 
   191  0294                     	;# 
   192  0295                     	;# 
   193  0295                     	;# 
   194  0296                     	;# 
   195  0298                     	;# 
   196  0298                     	;# 
   197  0299                     	;# 
   198  029A                     	;# 
   199  029B                     	;# 
   200  029C                     	;# 
   201  029D                     	;# 
   202  029E                     	;# 
   203  0311                     	;# 
   204  0311                     	;# 
   205  0312                     	;# 
   206  0313                     	;# 
   207  0318                     	;# 
   208  0318                     	;# 
   209  0319                     	;# 
   210  031A                     	;# 
   211  038C                     	;# 
   212  038E                     	;# 
   213  0391                     	;# 
   214  0392                     	;# 
   215  0393                     	;# 
   216  039A                     	;# 
   217  039C                     	;# 
   218  039D                     	;# 
   219  039E                     	;# 
   220  039F                     	;# 
   221  0415                     	;# 
   222  0416                     	;# 
   223  0417                     	;# 
   224  041C                     	;# 
   225  041D                     	;# 
   226  041E                     	;# 
   227  0FE4                     	;# 
   228  0FE5                     	;# 
   229  0FE6                     	;# 
   230  0FE7                     	;# 
   231  0FE8                     	;# 
   232  0FE9                     	;# 
   233  0FEA                     	;# 
   234  0FEB                     	;# 
   235  0FED                     	;# 
   236  0FEE                     	;# 
   237  0FEF                     	;# 
   238  0000                     	;# 
   239  0001                     	;# 
   240  0002                     	;# 
   241  0003                     	;# 
   242  0004                     	;# 
   243  0005                     	;# 
   244  0006                     	;# 
   245  0007                     	;# 
   246  0008                     	;# 
   247  0009                     	;# 
   248  000A                     	;# 
   249  000B                     	;# 
   250  000C                     	;# 
   251  000E                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001E                     	;# 
   265  001F                     	;# 
   266  008C                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  010C                     	;# 
   283  010E                     	;# 
   284  0111                     	;# 
   285  0112                     	;# 
   286  0113                     	;# 
   287  0114                     	;# 
   288  0115                     	;# 
   289  0116                     	;# 
   290  0117                     	;# 
   291  0118                     	;# 
   292  0119                     	;# 
   293  011A                     	;# 
   294  011B                     	;# 
   295  011D                     	;# 
   296  011E                     	;# 
   297  018C                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0193                     	;# 
   305  0194                     	;# 
   306  0195                     	;# 
   307  0196                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019C                     	;# 
   313  019D                     	;# 
   314  019E                     	;# 
   315  019F                     	;# 
   316  020C                     	;# 
   317  020E                     	;# 
   318  0211                     	;# 
   319  0211                     	;# 
   320  0212                     	;# 
   321  0212                     	;# 
   322  0213                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0214                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0216                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0294                     	;# 
   338  0295                     	;# 
   339  0295                     	;# 
   340  0296                     	;# 
   341  0298                     	;# 
   342  0298                     	;# 
   343  0299                     	;# 
   344  029A                     	;# 
   345  029B                     	;# 
   346  029C                     	;# 
   347  029D                     	;# 
   348  029E                     	;# 
   349  0311                     	;# 
   350  0311                     	;# 
   351  0312                     	;# 
   352  0313                     	;# 
   353  0318                     	;# 
   354  0318                     	;# 
   355  0319                     	;# 
   356  031A                     	;# 
   357  038C                     	;# 
   358  038E                     	;# 
   359  0391                     	;# 
   360  0392                     	;# 
   361  0393                     	;# 
   362  039A                     	;# 
   363  039C                     	;# 
   364  039D                     	;# 
   365  039E                     	;# 
   366  039F                     	;# 
   367  0415                     	;# 
   368  0416                     	;# 
   369  0417                     	;# 
   370  041C                     	;# 
   371  041D                     	;# 
   372  041E                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000E                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  001E                     	;# 
   411  001F                     	;# 
   412  008C                     	;# 
   413  008E                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0093                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010E                     	;# 
   430  0111                     	;# 
   431  0112                     	;# 
   432  0113                     	;# 
   433  0114                     	;# 
   434  0115                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  0118                     	;# 
   438  0119                     	;# 
   439  011A                     	;# 
   440  011B                     	;# 
   441  011D                     	;# 
   442  011E                     	;# 
   443  018C                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0193                     	;# 
   451  0194                     	;# 
   452  0195                     	;# 
   453  0196                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020E                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0294                     	;# 
   484  0295                     	;# 
   485  0295                     	;# 
   486  0296                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  029B                     	;# 
   492  029C                     	;# 
   493  029D                     	;# 
   494  029E                     	;# 
   495  0311                     	;# 
   496  0311                     	;# 
   497  0312                     	;# 
   498  0313                     	;# 
   499  0318                     	;# 
   500  0318                     	;# 
   501  0319                     	;# 
   502  031A                     	;# 
   503  038C                     	;# 
   504  038E                     	;# 
   505  0391                     	;# 
   506  0392                     	;# 
   507  0393                     	;# 
   508  039A                     	;# 
   509  039C                     	;# 
   510  039D                     	;# 
   511  039E                     	;# 
   512  039F                     	;# 
   513  0415                     	;# 
   514  0416                     	;# 
   515  0417                     	;# 
   516  041C                     	;# 
   517  041D                     	;# 
   518  041E                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000E                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  001E                     	;# 
   557  001F                     	;# 
   558  008C                     	;# 
   559  008E                     	;# 
   560  0091                     	;# 
   561  0092                     	;# 
   562  0093                     	;# 
   563  0095                     	;# 
   564  0096                     	;# 
   565  0097                     	;# 
   566  0098                     	;# 
   567  0099                     	;# 
   568  009A                     	;# 
   569  009B                     	;# 
   570  009B                     	;# 
   571  009C                     	;# 
   572  009D                     	;# 
   573  009E                     	;# 
   574  010C                     	;# 
   575  010E                     	;# 
   576  0111                     	;# 
   577  0112                     	;# 
   578  0113                     	;# 
   579  0114                     	;# 
   580  0115                     	;# 
   581  0116                     	;# 
   582  0117                     	;# 
   583  0118                     	;# 
   584  0119                     	;# 
   585  011A                     	;# 
   586  011B                     	;# 
   587  011D                     	;# 
   588  011E                     	;# 
   589  018C                     	;# 
   590  018E                     	;# 
   591  0191                     	;# 
   592  0191                     	;# 
   593  0192                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0193                     	;# 
   597  0194                     	;# 
   598  0195                     	;# 
   599  0196                     	;# 
   600  0199                     	;# 
   601  019A                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019C                     	;# 
   605  019D                     	;# 
   606  019E                     	;# 
   607  019F                     	;# 
   608  020C                     	;# 
   609  020E                     	;# 
   610  0211                     	;# 
   611  0211                     	;# 
   612  0212                     	;# 
   613  0212                     	;# 
   614  0213                     	;# 
   615  0213                     	;# 
   616  0214                     	;# 
   617  0214                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0216                     	;# 
   622  0216                     	;# 
   623  0217                     	;# 
   624  0217                     	;# 
   625  0291                     	;# 
   626  0291                     	;# 
   627  0292                     	;# 
   628  0293                     	;# 
   629  0294                     	;# 
   630  0295                     	;# 
   631  0295                     	;# 
   632  0296                     	;# 
   633  0298                     	;# 
   634  0298                     	;# 
   635  0299                     	;# 
   636  029A                     	;# 
   637  029B                     	;# 
   638  029C                     	;# 
   639  029D                     	;# 
   640  029E                     	;# 
   641  0311                     	;# 
   642  0311                     	;# 
   643  0312                     	;# 
   644  0313                     	;# 
   645  0318                     	;# 
   646  0318                     	;# 
   647  0319                     	;# 
   648  031A                     	;# 
   649  038C                     	;# 
   650  038E                     	;# 
   651  0391                     	;# 
   652  0392                     	;# 
   653  0393                     	;# 
   654  039A                     	;# 
   655  039C                     	;# 
   656  039D                     	;# 
   657  039E                     	;# 
   658  039F                     	;# 
   659  0415                     	;# 
   660  0416                     	;# 
   661  0417                     	;# 
   662  041C                     	;# 
   663  041D                     	;# 
   664  041E                     	;# 
   665  0FE4                     	;# 
   666  0FE5                     	;# 
   667  0FE6                     	;# 
   668  0FE7                     	;# 
   669  0FE8                     	;# 
   670  0FE9                     	;# 
   671  0FEA                     	;# 
   672  0FEB                     	;# 
   673  0FED                     	;# 
   674  0FEE                     	;# 
   675  0FEF                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000E                     	;# 
   690  0011                     	;# 
   691  0012                     	;# 
   692  0013                     	;# 
   693  0015                     	;# 
   694  0016                     	;# 
   695  0016                     	;# 
   696  0017                     	;# 
   697  0018                     	;# 
   698  0019                     	;# 
   699  001A                     	;# 
   700  001B                     	;# 
   701  001C                     	;# 
   702  001E                     	;# 
   703  001F                     	;# 
   704  008C                     	;# 
   705  008E                     	;# 
   706  0091                     	;# 
   707  0092                     	;# 
   708  0093                     	;# 
   709  0095                     	;# 
   710  0096                     	;# 
   711  0097                     	;# 
   712  0098                     	;# 
   713  0099                     	;# 
   714  009A                     	;# 
   715  009B                     	;# 
   716  009B                     	;# 
   717  009C                     	;# 
   718  009D                     	;# 
   719  009E                     	;# 
   720  010C                     	;# 
   721  010E                     	;# 
   722  0111                     	;# 
   723  0112                     	;# 
   724  0113                     	;# 
   725  0114                     	;# 
   726  0115                     	;# 
   727  0116                     	;# 
   728  0117                     	;# 
   729  0118                     	;# 
   730  0119                     	;# 
   731  011A                     	;# 
   732  011B                     	;# 
   733  011D                     	;# 
   734  011E                     	;# 
   735  018C                     	;# 
   736  018E                     	;# 
   737  0191                     	;# 
   738  0191                     	;# 
   739  0192                     	;# 
   740  0193                     	;# 
   741  0193                     	;# 
   742  0193                     	;# 
   743  0194                     	;# 
   744  0195                     	;# 
   745  0196                     	;# 
   746  0199                     	;# 
   747  019A                     	;# 
   748  019B                     	;# 
   749  019B                     	;# 
   750  019C                     	;# 
   751  019D                     	;# 
   752  019E                     	;# 
   753  019F                     	;# 
   754  020C                     	;# 
   755  020E                     	;# 
   756  0211                     	;# 
   757  0211                     	;# 
   758  0212                     	;# 
   759  0212                     	;# 
   760  0213                     	;# 
   761  0213                     	;# 
   762  0214                     	;# 
   763  0214                     	;# 
   764  0215                     	;# 
   765  0215                     	;# 
   766  0215                     	;# 
   767  0216                     	;# 
   768  0216                     	;# 
   769  0217                     	;# 
   770  0217                     	;# 
   771  0291                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0293                     	;# 
   775  0294                     	;# 
   776  0295                     	;# 
   777  0295                     	;# 
   778  0296                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029D                     	;# 
   786  029E                     	;# 
   787  0311                     	;# 
   788  0311                     	;# 
   789  0312                     	;# 
   790  0313                     	;# 
   791  0318                     	;# 
   792  0318                     	;# 
   793  0319                     	;# 
   794  031A                     	;# 
   795  038C                     	;# 
   796  038E                     	;# 
   797  0391                     	;# 
   798  0392                     	;# 
   799  0393                     	;# 
   800  039A                     	;# 
   801  039C                     	;# 
   802  039D                     	;# 
   803  039E                     	;# 
   804  039F                     	;# 
   805  0415                     	;# 
   806  0416                     	;# 
   807  0417                     	;# 
   808  041C                     	;# 
   809  041D                     	;# 
   810  041E                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822                           
   823                           	psect	idataBANK0
   824  0210                     __pidataBANK0:	
   825                           
   826                           ;initializer for can_send@F2952
   827  0210  3403               	retlw	3
   828  0211  3432               	retlw	50
   829  0212  3400               	retlw	0
   830                           
   831                           ;initializer for can_send@F2951
   832  0213  3403               	retlw	3
   833  0214  3431               	retlw	49
   834  0215  3400               	retlw	0
   835                           
   836                           ;initializer for can_start@F2930
   837  0216  3402               	retlw	2
   838  0217  340F               	retlw	15
   839  0218  3440               	retlw	64
   840                           
   841                           ;initializer for can_status_check@F2957
   842  0219  34A0               	retlw	160
   843  021A  3400               	retlw	0
   844                           
   845                           	psect	stringtext1
   846  08E4                     __pstringtext1:	
   847  08E4                     _hexpowers:	
   848  08E4  3401               	retlw	1
   849  08E5  3400               	retlw	0
   850  08E6  3410               	retlw	16
   851  08E7  3400               	retlw	0
   852  08E8  3400               	retlw	0
   853  08E9  3401               	retlw	1
   854  08EA  3400               	retlw	0
   855  08EB  3410               	retlw	16
   856  08EC                     __end_of_hexpowers:	
   857                           
   858                           	psect	stringtext2
   859  08F3                     __pstringtext2:	
   860  08F3                     _abc:	
   861  08F3  3400               	retlw	0
   862  08F4  3402               	retlw	2
   863  08F5  3404               	retlw	4
   864  08F6                     __end_of_abc:	
   865                           
   866                           	psect	stringtext3
   867  08F9                     __pstringtext3:	
   868  08F9                     _nm:	
   869  08F9  3400               	retlw	0
   870  08FA  3402               	retlw	2
   871  08FB                     __end_of_nm:	
   872                           
   873                           	psect	stringtext4
   874  0800                     __pstringtext4:	
   875  0800                     _max_char:	
   876  0800  3408               	retlw	8
   877  0801                     __end_of_max_char:	
   878  0011                     _PIR1bits	set	17
   879  0095                     _OPTION_REGbits	set	149
   880  008E                     _TRISC	set	142
   881  008C                     _TRISA	set	140
   882  0097                     _WDTCON	set	151
   883  0098                     _OSCTUNE	set	152
   884  0099                     _OSCCON	set	153
   885  010C                     _LATAbits	set	268
   886  011D                     _APFCON0	set	285
   887  011E                     _APFCON1	set	286
   888  010E                     _LATC	set	270
   889  010C                     _LATA	set	268
   890  0116                     _BORCON	set	278
   891  018C                     _ANSELA	set	396
   892  018E                     _ANSELC	set	398
   893  019A                     _TXREG	set	410
   894  0199                     _RCREG	set	409
   895  019D                     _RCSTAbits	set	413
   896  019C                     _SPBRGH	set	412
   897  019B                     _SPBRGL	set	411
   898  019E                     _TXSTA	set	414
   899  019D                     _RCSTA	set	413
   900  019F                     _BAUDCON	set	415
   901  0214                     _SSP1STATbits	set	532
   902  0211                     _SSP1BUF	set	529
   903  0215                     _SSP1CON1bits	set	533
   904  0212                     _SSP1ADD	set	530
   905  0215                     _SSP1CON1	set	533
   906  0214                     _SSP1STAT	set	532
   907  020E                     _WPUC	set	526
   908  020C                     _WPUA	set	524
   909  0801                     STR_15:	
   910  0801  340A               	retlw	10
   911  0802  3455               	retlw	85	;'U'
   912  0803  346E               	retlw	110	;'n'
   913  0804  3461               	retlw	97	;'a'
   914  0805  3462               	retlw	98	;'b'
   915  0806  346C               	retlw	108	;'l'
   916  0807  3465               	retlw	101	;'e'
   917  0808  3420               	retlw	32	;' '
   918  0809  3474               	retlw	116	;'t'
   919  080A  346F               	retlw	111	;'o'
   920  080B  3420               	retlw	32	;' '
   921  080C  3473               	retlw	115	;'s'
   922  080D  3465               	retlw	101	;'e'
   923  080E  346E               	retlw	110	;'n'
   924  080F  3464               	retlw	100	;'d'
   925  0810  3420               	retlw	32	;' '
   926  0811  346D               	retlw	109	;'m'
   927  0812  3465               	retlw	101	;'e'
   928  0813  3473               	retlw	115	;'s'
   929  0814  3473               	retlw	115	;'s'
   930  0815  3461               	retlw	97	;'a'
   931  0816  3467               	retlw	103	;'g'
   932  0817  3465               	retlw	101	;'e'
   933  0818  340A               	retlw	10
   934  0819  3400               	retlw	0
   935                           
   936                           	psect	stringtext5
   937  081A                     __pstringtext5:	
   938  081A                     STR_14:	
   939  081A  340A               	retlw	10
   940  081B  3443               	retlw	67	;'C'
   941  081C  3441               	retlw	65	;'A'
   942  081D  344E               	retlw	78	;'N'
   943  081E  3420               	retlw	32	;' '
   944  081F  346D               	retlw	109	;'m'
   945  0820  3465               	retlw	101	;'e'
   946  0821  3473               	retlw	115	;'s'
   947  0822  3473               	retlw	115	;'s'
   948  0823  3461               	retlw	97	;'a'
   949  0824  3467               	retlw	103	;'g'
   950  0825  3465               	retlw	101	;'e'
   951  0826  3420               	retlw	32	;' '
   952  0827  3473               	retlw	115	;'s'
   953  0828  3465               	retlw	101	;'e'
   954  0829  346E               	retlw	110	;'n'
   955  082A  3474               	retlw	116	;'t'
   956  082B  343A               	retlw	58	;':'
   957  082C  3420               	retlw	32	;' '
   958  082D  3425               	retlw	37	;'%'
   959  082E  3473               	retlw	115	;'s'
   960  082F  340A               	retlw	10
   961  0830  3400               	retlw	0
   962                           
   963                           	psect	stringtext6
   964  0831                     __pstringtext6:	
   965  0831                     STR_6:	
   966  0831  344D               	retlw	77	;'M'
   967  0832  3465               	retlw	101	;'e'
   968  0833  3473               	retlw	115	;'s'
   969  0834  3473               	retlw	115	;'s'
   970  0835  3461               	retlw	97	;'a'
   971  0836  3467               	retlw	103	;'g'
   972  0837  3465               	retlw	101	;'e'
   973  0838  3420               	retlw	32	;' '
   974  0839  3472               	retlw	114	;'r'
   975  083A  3465               	retlw	101	;'e'
   976  083B  3463               	retlw	99	;'c'
   977  083C  3465               	retlw	101	;'e'
   978  083D  3469               	retlw	105	;'i'
   979  083E  3476               	retlw	118	;'v'
   980  083F  3465               	retlw	101	;'e'
   981  0840  3464               	retlw	100	;'d'
   982  0841  343A               	retlw	58	;':'
   983  0842  3420               	retlw	32	;' '
   984  0843  3425               	retlw	37	;'%'
   985  0844  3473               	retlw	115	;'s'
   986  0845  340A               	retlw	10
   987  0846  3400               	retlw	0
   988                           
   989                           	psect	stringtext7
   990  0847                     __pstringtext7:	
   991  0847                     STR_1:	
   992  0847  3453               	retlw	83	;'S'
   993  0848  3449               	retlw	73	;'I'
   994  0849  3444               	retlw	68	;'D'
   995  084A  3420               	retlw	32	;' '
   996  084B  3473               	retlw	115	;'s'
   997  084C  3465               	retlw	101	;'e'
   998  084D  3474               	retlw	116	;'t'
   999  084E  343A               	retlw	58	;':'
  1000  084F  3420               	retlw	32	;' '
  1001  0850  3425               	retlw	37	;'%'
  1002  0851  3430               	retlw	48	;'0'
  1003  0852  3432               	retlw	50	;'2'
  1004  0853  3478               	retlw	120	;'x'
  1005  0854  3420               	retlw	32	;' '
  1006  0855  3425               	retlw	37	;'%'
  1007  0856  3430               	retlw	48	;'0'
  1008  0857  3432               	retlw	50	;'2'
  1009  0858  3478               	retlw	120	;'x'
  1010  0859  340A               	retlw	10
  1011  085A  3400               	retlw	0
  1012                           
  1013                           	psect	stringtext8
  1014  085B                     __pstringtext8:	
  1015  085B                     STR_17:	
  1016  085B  3430               	retlw	48	;'0'
  1017  085C  3431               	retlw	49	;'1'
  1018  085D  3432               	retlw	50	;'2'
  1019  085E  3433               	retlw	51	;'3'
  1020  085F  3434               	retlw	52	;'4'
  1021  0860  3435               	retlw	53	;'5'
  1022  0861  3436               	retlw	54	;'6'
  1023  0862  3437               	retlw	55	;'7'
  1024  0863  3438               	retlw	56	;'8'
  1025  0864  3439               	retlw	57	;'9'
  1026  0865  3461               	retlw	97	;'a'
  1027  0866  3462               	retlw	98	;'b'
  1028  0867  3463               	retlw	99	;'c'
  1029  0868  3464               	retlw	100	;'d'
  1030  0869  3465               	retlw	101	;'e'
  1031  086A  3466               	retlw	102	;'f'
  1032  086B  3400               	retlw	0
  1033                           
  1034                           	psect	stringtext9
  1035  086C                     __pstringtext9:	
  1036  086C                     STR_3:	
  1037  086C  3452               	retlw	82	;'R'
  1038  086D  3458               	retlw	88	;'X'
  1039  086E  3442               	retlw	66	;'B'
  1040  086F  3430               	retlw	48	;'0'
  1041  0870  3453               	retlw	83	;'S'
  1042  0871  3449               	retlw	73	;'I'
  1043  0872  3444               	retlw	68	;'D'
  1044  0873  3448               	retlw	72	;'H'
  1045  0874  343A               	retlw	58	;':'
  1046  0875  3420               	retlw	32	;' '
  1047  0876  3425               	retlw	37	;'%'
  1048  0877  3430               	retlw	48	;'0'
  1049  0878  3432               	retlw	50	;'2'
  1050  0879  3478               	retlw	120	;'x'
  1051  087A  340A               	retlw	10
  1052  087B  3400               	retlw	0
  1053                           
  1054                           	psect	stringtext10
  1055  087C                     __pstringtext10:	
  1056  087C                     STR_7:	
  1057  087C  3454               	retlw	84	;'T'
  1058  087D  3458               	retlw	88	;'X'
  1059  087E  3442               	retlw	66	;'B'
  1060  087F  3430               	retlw	48	;'0'
  1061  0880  3453               	retlw	83	;'S'
  1062  0881  3449               	retlw	73	;'I'
  1063  0882  3444               	retlw	68	;'D'
  1064  0883  3448               	retlw	72	;'H'
  1065  0884  343A               	retlw	58	;':'
  1066  0885  3420               	retlw	32	;' '
  1067  0886  3425               	retlw	37	;'%'
  1068  0887  3430               	retlw	48	;'0'
  1069  0888  3432               	retlw	50	;'2'
  1070  0889  3478               	retlw	120	;'x'
  1071  088A  340A               	retlw	10
  1072  088B  3400               	retlw	0
  1073                           
  1074                           	psect	stringtext11
  1075  088C                     __pstringtext11:	
  1076  088C                     STR_4:	
  1077  088C  3452               	retlw	82	;'R'
  1078  088D  3458               	retlw	88	;'X'
  1079  088E  3442               	retlw	66	;'B'
  1080  088F  3430               	retlw	48	;'0'
  1081  0890  3453               	retlw	83	;'S'
  1082  0891  3449               	retlw	73	;'I'
  1083  0892  3444               	retlw	68	;'D'
  1084  0893  344C               	retlw	76	;'L'
  1085  0894  343A               	retlw	58	;':'
  1086  0895  3420               	retlw	32	;' '
  1087  0896  3425               	retlw	37	;'%'
  1088  0897  3430               	retlw	48	;'0'
  1089  0898  3432               	retlw	50	;'2'
  1090  0899  3478               	retlw	120	;'x'
  1091  089A  340A               	retlw	10
  1092  089B  3400               	retlw	0
  1093                           
  1094                           	psect	stringtext12
  1095  089C                     __pstringtext12:	
  1096  089C                     STR_8:	
  1097  089C  3454               	retlw	84	;'T'
  1098  089D  3458               	retlw	88	;'X'
  1099  089E  3442               	retlw	66	;'B'
  1100  089F  3430               	retlw	48	;'0'
  1101  08A0  3453               	retlw	83	;'S'
  1102  08A1  3449               	retlw	73	;'I'
  1103  08A2  3444               	retlw	68	;'D'
  1104  08A3  344C               	retlw	76	;'L'
  1105  08A4  343A               	retlw	58	;':'
  1106  08A5  3420               	retlw	32	;' '
  1107  08A6  3425               	retlw	37	;'%'
  1108  08A7  3430               	retlw	48	;'0'
  1109  08A8  3432               	retlw	50	;'2'
  1110  08A9  3478               	retlw	120	;'x'
  1111  08AA  340A               	retlw	10
  1112  08AB  3400               	retlw	0
  1113                           
  1114                           	psect	stringtext13
  1115  08AC                     __pstringtext13:	
  1116  08AC                     STR_5:	
  1117  08AC  3452               	retlw	82	;'R'
  1118  08AD  3458               	retlw	88	;'X'
  1119  08AE  3442               	retlw	66	;'B'
  1120  08AF  3430               	retlw	48	;'0'
  1121  08B0  3444               	retlw	68	;'D'
  1122  08B1  344C               	retlw	76	;'L'
  1123  08B2  3443               	retlw	67	;'C'
  1124  08B3  343A               	retlw	58	;':'
  1125  08B4  3420               	retlw	32	;' '
  1126  08B5  3425               	retlw	37	;'%'
  1127  08B6  3430               	retlw	48	;'0'
  1128  08B7  3432               	retlw	50	;'2'
  1129  08B8  3478               	retlw	120	;'x'
  1130  08B9  340A               	retlw	10
  1131  08BA  3400               	retlw	0
  1132                           
  1133                           	psect	stringtext14
  1134  08BB                     __pstringtext14:	
  1135  08BB                     STR_2:	
  1136  08BB  3443               	retlw	67	;'C'
  1137  08BC  3441               	retlw	65	;'A'
  1138  08BD  344E               	retlw	78	;'N'
  1139  08BE  3453               	retlw	83	;'S'
  1140  08BF  3454               	retlw	84	;'T'
  1141  08C0  3441               	retlw	65	;'A'
  1142  08C1  3454               	retlw	84	;'T'
  1143  08C2  343A               	retlw	58	;':'
  1144  08C3  3420               	retlw	32	;' '
  1145  08C4  3425               	retlw	37	;'%'
  1146  08C5  3430               	retlw	48	;'0'
  1147  08C6  3432               	retlw	50	;'2'
  1148  08C7  3478               	retlw	120	;'x'
  1149  08C8  340A               	retlw	10
  1150  08C9  3400               	retlw	0
  1151                           
  1152                           	psect	stringtext15
  1153  08CA                     __pstringtext15:	
  1154  08CA                     STR_9:	
  1155  08CA  3452               	retlw	82	;'R'
  1156  08CB  3458               	retlw	88	;'X'
  1157  08CC  3430               	retlw	48	;'0'
  1158  08CD  3449               	retlw	73	;'I'
  1159  08CE  3446               	retlw	70	;'F'
  1160  08CF  3420               	retlw	32	;' '
  1161  08D0  3469               	retlw	105	;'i'
  1162  08D1  3473               	retlw	115	;'s'
  1163  08D2  3420               	retlw	32	;' '
  1164  08D3  346F               	retlw	111	;'o'
  1165  08D4  346E               	retlw	110	;'n'
  1166  08D5  340A               	retlw	10
  1167  08D6  3400               	retlw	0
  1168                           
  1169                           	psect	stringtext16
  1170  08D7                     __pstringtext16:	
  1171  08D7                     STR_10:	
  1172  08D7  3452               	retlw	82	;'R'
  1173  08D8  3458               	retlw	88	;'X'
  1174  08D9  3431               	retlw	49	;'1'
  1175  08DA  3449               	retlw	73	;'I'
  1176  08DB  3446               	retlw	70	;'F'
  1177  08DC  3420               	retlw	32	;' '
  1178  08DD  3469               	retlw	105	;'i'
  1179  08DE  3473               	retlw	115	;'s'
  1180  08DF  3420               	retlw	32	;' '
  1181  08E0  346F               	retlw	111	;'o'
  1182  08E1  346E               	retlw	110	;'n'
  1183  08E2  340A               	retlw	10
  1184  08E3  3400               	retlw	0
  1185                           
  1186                           	psect	stringtext17
  1187  08EC                     __pstringtext17:	
  1188  08EC                     STR_16:	
  1189  08EC  3428               	retlw	40	;'('
  1190  08ED  346E               	retlw	110	;'n'
  1191  08EE  3475               	retlw	117	;'u'
  1192  08EF  346C               	retlw	108	;'l'
  1193  08F0  346C               	retlw	108	;'l'
  1194  08F1  3429               	retlw	41	;')'
  1195  08F2  3400               	retlw	0
  1196                           
  1197                           	psect	stringtext18
  1198  08F6                     __pstringtext18:	
  1199  08F6                     STR_11:	
  1200  08F6  3425               	retlw	37	;'%'
  1201  08F7  3463               	retlw	99	;'c'
  1202  08F8  3400               	retlw	0
  1203                           
  1204                           	psect	stringtext19
  1205  0000                     __pstringtext19:	
  1206  0802                     
  1207                           ; #config settings
  1208  0000                     
  1209                           	psect	cinit
  1210  07E2                     start_initialization:	
  1211  07E2                     __initialization:	
  1212                           
  1213                           ; Initialize objects allocated to BANK0
  1214  07E2  3010               	movlw	low __pidataBANK0
  1215  07E3  0084               	movwf	4
  1216  07E4  3082               	movlw	(high __pidataBANK0)| (0+128)
  1217  07E5  0085               	movwf	5
  1218  07E6  3065               	movlw	low __pdataBANK0
  1219  07E7  0086               	movwf	6
  1220  07E8  3000               	movlw	high __pdataBANK0
  1221  07E9  0087               	movwf	7
  1222  07EA  300B               	movlw	11
  1223  07EB  3181  21D6  3187   	fcall	init_ram
  1224                           
  1225                           ; Clear objects allocated to BANK0
  1226  07EE  304A               	movlw	low __pbssBANK0
  1227  07EF  0084               	movwf	4
  1228  07F0  3000               	movlw	high __pbssBANK0
  1229  07F1  0085               	movwf	5
  1230  07F2  301B               	movlw	27
  1231  07F3  3181  21D0  3187   	fcall	clear_ram0
  1232                           
  1233                           ; Clear objects allocated to BANK1
  1234  07F6  30A0               	movlw	low __pbssBANK1
  1235  07F7  0084               	movwf	4
  1236  07F8  3000               	movlw	high __pbssBANK1
  1237  07F9  0085               	movwf	5
  1238  07FA  300F               	movlw	15
  1239  07FB  3181  21D0         	fcall	clear_ram0
  1240  07FD                     end_of_initialization:	
  1241                           ;End of C runtime variable initialization code
  1242                           
  1243  07FD                     __end_of__initialization:	
  1244  07FD  0020               	movlb	0
  1245  07FE  3184  2CE8         	ljmp	_main	;jump to C main() function
  1246                           
  1247                           	psect	bssBANK0
  1248  004A                     __pbssBANK0:	
  1249  004A                     _sid:	
  1250  004A                     	ds	2
  1251  004C                     _cnt:	
  1252  004C                     	ds	1
  1253  004D                     _c:	
  1254  004D                     	ds	1
  1255  004E                     _tx_buf:	
  1256  004E                     	ds	14
  1257  005C                     _buf:	
  1258  005C                     	ds	9
  1259                           
  1260                           	psect	dataBANK0
  1261  0065                     __pdataBANK0:	
  1262  0065                     can_send@F2952:	
  1263  0065                     	ds	3
  1264  0068                     can_send@F2951:	
  1265  0068                     	ds	3
  1266  006B                     can_start@F2930:	
  1267  006B                     	ds	3
  1268  006E                     can_status_check@F2957:	
  1269  006E                     	ds	2
  1270                           
  1271                           	psect	bssBANK1
  1272  00A0                     __pbssBANK1:	
  1273  00A0                     _rx_buf:	
  1274  00A0                     	ds	15
  1275                           
  1276                           	psect	inittext
  1277  01D6                     init_ram:	
  1278  01D6  00FE               	movwf	126
  1279  01D7                     initloop:	
  1280  01D7  0012               	moviw fsr0++
  1281  01D8  001E               	movwi fsr1++
  1282  01D9  0BFE               	decfsz	126,f
  1283  01DA  29D7               	goto	initloop
  1284  01DB  3400               	retlw	0
  1285                           
  1286                           	psect	clrtext
  1287  01D0                     clear_ram0:	
  1288                           ;	Called with FSR0 containing the base address, and
  1289                           ;	WREG with the size to clear
  1290                           
  1291  01D0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1292  01D1                     clrloop0:	
  1293  01D1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1294  01D2  3101               	addfsr 0,1
  1295  01D3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1296  01D4  29D1               	goto	clrloop0	;have we reached the end yet?
  1297  01D5  3400               	retlw	0	;all done for this memory range, return
  1298                           
  1299                           	psect	cstackCOMMON
  1300  0070                     __pcstackCOMMON:	
  1301  0070                     ?_isdigit:	
  1302  0070                     ?_PIN_MANAGER_Initialize:	
  1303                           ; 1 bit 
  1304                           
  1305  0070                     ??_PIN_MANAGER_Initialize:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_OSCILLATOR_Initialize:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ??_OSCILLATOR_Initialize:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ?_WDT_Initialize:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ??_WDT_Initialize:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ?_SPI_Initialize:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ??_SPI_Initialize:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ?_EUSART_Initialize:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ??_EUSART_Initialize:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ??_isdigit:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?_SYSTEM_Initialize:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ??_SYSTEM_Initialize:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0070                     ?_EUSART_Read:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0070                     ??_EUSART_Read:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0070                     ?_EUSART_Write:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0070                     ??_EUSART_Write:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0070                     ?_putch:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0070                     ?_SPI_Exchange8bit:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0070                     ??_SPI_Exchange8bit:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0070                     ?_can_start:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0070                     ?_can_txf_clear:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0070                     ?_can_receive:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0070                     ?_can_status_check:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0070                     ?_main:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0070                     ?___wmul:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0070                     ?___lwdiv:	
  1381                           ; 2 bytes @ 0x0
  1382                           
  1383  0070                     EUSART_Write@txData:	
  1384                           ; 2 bytes @ 0x0
  1385                           
  1386  0070                     SPI_Exchange8bit@data:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0070                     _isdigit$613:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0070                     ___wmul@multiplier:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0070                     ___lwdiv@divisor:	
  1396                           ; 2 bytes @ 0x0
  1397                           
  1398                           
  1399                           ; 2 bytes @ 0x0
  1400  0070                     	ds	1
  1401  0071                     ??_putch:	
  1402  0071                     ?_SPI_Exchange8bitBuffer:	
  1403                           ; 1 bytes @ 0x1
  1404                           
  1405  0071                     putch@txData:	
  1406                           ; 1 bytes @ 0x1
  1407                           
  1408  0071                     SPI_Exchange8bitBuffer@bufLen:	
  1409                           ; 1 bytes @ 0x1
  1410                           
  1411  0071                     isdigit@c:	
  1412                           ; 1 bytes @ 0x1
  1413                           
  1414                           
  1415                           ; 1 bytes @ 0x1
  1416  0071                     	ds	1
  1417  0072                     SPI_Exchange8bitBuffer@dataOut:	
  1418  0072                     ___wmul@multiplicand:	
  1419                           ; 1 bytes @ 0x2
  1420                           
  1421  0072                     ___lwdiv@dividend:	
  1422                           ; 2 bytes @ 0x2
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0x2
  1426  0072                     	ds	1
  1427  0073                     ??_SPI_Exchange8bitBuffer:	
  1428                           
  1429                           ; 1 bytes @ 0x3
  1430  0073                     	ds	1
  1431  0074                     ??___wmul:	
  1432  0074                     ??___lwdiv:	
  1433                           ; 1 bytes @ 0x4
  1434                           
  1435  0074                     ___wmul@product:	
  1436                           ; 1 bytes @ 0x4
  1437                           
  1438                           
  1439                           ; 2 bytes @ 0x4
  1440  0074                     	ds	1
  1441  0075                     ___lwdiv@quotient:	
  1442                           
  1443                           ; 2 bytes @ 0x5
  1444  0075                     	ds	1
  1445  0076                     ?_atoi:	
  1446  0076                     SPI_Exchange8bitBuffer@dataIn:	
  1447                           ; 2 bytes @ 0x6
  1448                           
  1449                           
  1450                           ; 1 bytes @ 0x6
  1451  0076                     	ds	1
  1452  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  1453  0077                     ___lwdiv@counter:	
  1454                           ; 1 bytes @ 0x7
  1455                           
  1456                           
  1457                           ; 1 bytes @ 0x7
  1458  0077                     	ds	1
  1459  0078                     ??_atoi:	
  1460  0078                     ?_SPI_send:	
  1461                           ; 1 bytes @ 0x8
  1462                           
  1463  0078                     ?_printf:	
  1464                           ; 1 bytes @ 0x8
  1465                           
  1466  0078                     SPI_send@len:	
  1467                           ; 2 bytes @ 0x8
  1468                           
  1469  0078                     printf@f:	
  1470                           ; 1 bytes @ 0x8
  1471                           
  1472                           
  1473                           ; 2 bytes @ 0x8
  1474  0078                     	ds	1
  1475  0079                     SPI_send@rbuf:	
  1476                           
  1477                           ; 1 bytes @ 0x9
  1478  0079                     	ds	1
  1479  007A                     ??_SPI_send:	
  1480  007A                     atoi@sign:	
  1481                           ; 1 bytes @ 0xA
  1482                           
  1483                           
  1484                           ; 1 bytes @ 0xA
  1485  007A                     	ds	1
  1486  007B                     atoi@a:	
  1487                           
  1488                           ; 2 bytes @ 0xB
  1489  007B                     	ds	2
  1490  007D                     atoi@s:	
  1491                           
  1492                           ; 1 bytes @ 0xD
  1493  007D                     	ds	1
  1494                           
  1495                           	psect	cstackBANK0
  1496  0020                     __pcstackBANK0:	
  1497  0020                     ??_printf:	
  1498  0020                     SPI_send@bytes_written:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501                           
  1502                           ; 1 bytes @ 0x0
  1503  0020                     	ds	1
  1504  0021                     SPI_send@sbuf:	
  1505                           
  1506                           ; 1 bytes @ 0x1
  1507  0021                     	ds	1
  1508  0022                     ??_can_txf_clear:	
  1509                           
  1510                           ; 1 bytes @ 0x2
  1511  0022                     	ds	2
  1512  0024                     printf@idx:	
  1513                           
  1514                           ; 1 bytes @ 0x4
  1515  0024                     	ds	1
  1516  0025                     can_txf_clear@n:	
  1517  0025                     printf@flag:	
  1518                           ; 1 bytes @ 0x5
  1519                           
  1520                           
  1521                           ; 1 bytes @ 0x5
  1522  0025                     	ds	1
  1523  0026                     can_txf_clear@mask:	
  1524  0026                     printf@val:	
  1525                           ; 1 bytes @ 0x6
  1526                           
  1527                           
  1528                           ; 2 bytes @ 0x6
  1529  0026                     	ds	1
  1530  0027                     can_txf_clear@bytes_written:	
  1531                           
  1532                           ; 1 bytes @ 0x7
  1533  0027                     	ds	1
  1534  0028                     printf@prec:	
  1535  0028                     can_txf_clear@can_int_flag:	
  1536                           ; 1 bytes @ 0x8
  1537                           
  1538                           
  1539                           ; 4 bytes @ 0x8
  1540  0028                     	ds	1
  1541  0029                     printf@cp:	
  1542                           
  1543                           ; 2 bytes @ 0x9
  1544  0029                     	ds	2
  1545  002B                     printf@ap:	
  1546                           
  1547                           ; 1 bytes @ 0xB
  1548  002B                     	ds	1
  1549  002C                     printf@len:	
  1550                           
  1551                           ; 2 bytes @ 0xC
  1552  002C                     	ds	2
  1553  002E                     printf@width:	
  1554                           
  1555                           ; 2 bytes @ 0xE
  1556  002E                     	ds	2
  1557  0030                     printf@c:	
  1558                           
  1559                           ; 1 bytes @ 0x10
  1560  0030                     	ds	1
  1561  0031                     ?_set_sid:	
  1562  0031                     ??_can_start:	
  1563                           ; 1 bytes @ 0x11
  1564                           
  1565  0031                     ??_can_receive:	
  1566                           ; 1 bytes @ 0x11
  1567                           
  1568  0031                     ?_can_send:	
  1569                           ; 1 bytes @ 0x11
  1570                           
  1571  0031                     can_send@buf:	
  1572                           ; 1 bytes @ 0x11
  1573                           
  1574  0031                     set_sid@can_node:	
  1575                           ; 1 bytes @ 0x11
  1576                           
  1577                           
  1578                           ; 2 bytes @ 0x11
  1579  0031                     	ds	1
  1580  0032                     can_send@cnt:	
  1581                           
  1582                           ; 1 bytes @ 0x12
  1583  0032                     	ds	1
  1584  0033                     ??_set_sid:	
  1585  0033                     ??_can_send:	
  1586                           ; 1 bytes @ 0x13
  1587                           
  1588                           
  1589                           ; 1 bytes @ 0x13
  1590  0033                     	ds	1
  1591  0034                     can_start@bytes_written:	
  1592  0034                     can_receive@bytes_written:	
  1593                           ; 1 bytes @ 0x14
  1594                           
  1595                           
  1596                           ; 1 bytes @ 0x14
  1597  0034                     	ds	1
  1598  0035                     can_receive@bytes_read:	
  1599  0035                     can_start@can_ctrl_buf:	
  1600                           ; 1 bytes @ 0x15
  1601                           
  1602                           
  1603                           ; 3 bytes @ 0x15
  1604  0035                     	ds	1
  1605  0036                     can_receive@mask:	
  1606  0036                     can_send@n:	
  1607                           ; 1 bytes @ 0x16
  1608                           
  1609                           
  1610                           ; 1 bytes @ 0x16
  1611  0036                     	ds	1
  1612  0037                     set_sid@sidh:	
  1613  0037                     can_send@len:	
  1614                           ; 1 bytes @ 0x17
  1615                           
  1616  0037                     can_receive@can_int_flag:	
  1617                           ; 1 bytes @ 0x17
  1618                           
  1619                           
  1620                           ; 4 bytes @ 0x17
  1621  0037                     	ds	1
  1622  0038                     set_sid@sidl:	
  1623  0038                     can_send@debug:	
  1624                           ; 1 bytes @ 0x18
  1625                           
  1626                           
  1627                           ; 3 bytes @ 0x18
  1628  0038                     	ds	3
  1629  003B                     can_receive@n:	
  1630  003B                     can_send@bytes_written:	
  1631                           ; 1 bytes @ 0x1B
  1632                           
  1633                           
  1634                           ; 1 bytes @ 0x1B
  1635  003B                     	ds	1
  1636  003C                     ??_can_status_check:	
  1637  003C                     can_send@i:	
  1638                           ; 1 bytes @ 0x1C
  1639                           
  1640                           
  1641                           ; 1 bytes @ 0x1C
  1642  003C                     	ds	1
  1643  003D                     can_send@txb_ctrl_buf:	
  1644                           
  1645                           ; 1 bytes @ 0x1D
  1646  003D                     	ds	2
  1647  003F                     can_status_check@bytes_written:	
  1648                           
  1649                           ; 1 bytes @ 0x1F
  1650  003F                     	ds	1
  1651  0040                     can_status_check@can_status_buf:	
  1652                           
  1653                           ; 2 bytes @ 0x20
  1654  0040                     	ds	2
  1655  0042                     can_status_check@status:	
  1656                           
  1657                           ; 1 bytes @ 0x22
  1658  0042                     	ds	1
  1659  0043                     ??_main:	
  1660                           
  1661                           ; 1 bytes @ 0x23
  1662  0043                     	ds	3
  1663  0046                     main@sid:	
  1664                           
  1665                           ; 2 bytes @ 0x26
  1666  0046                     	ds	2
  1667  0048                     main@rc:	
  1668                           
  1669                           ; 1 bytes @ 0x28
  1670  0048                     	ds	1
  1671  0049                     main@rc_383:	
  1672                           
  1673                           ; 1 bytes @ 0x29
  1674  0049                     	ds	1
  1675                           
  1676                           	psect	maintext
  1677  04E8                     __pmaintext:	
  1678 ;;
  1679 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1680 ;;
  1681 ;; *************** function _main *****************
  1682 ;; Defined at:
  1683 ;;		line 227 in file "main.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  rc              1   40[BANK0 ] unsigned char 
  1688 ;;  sid             2   38[BANK0 ] unsigned int 
  1689 ;;  rc              1   41[BANK0 ] unsigned char 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      void 
  1692 ;; Registers used:
  1693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1694 ;; Tracked objects:
  1695 ;;		On entry : B1F/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1700 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1701 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1702 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1703 ;;Total ram usage:        7 bytes
  1704 ;; Hardware stack levels required when called:    5
  1705 ;; This function calls:
  1706 ;;		_EUSART_Read
  1707 ;;		_SYSTEM_Initialize
  1708 ;;		_atoi
  1709 ;;		_can_send
  1710 ;;		_can_start
  1711 ;;		_can_status_check
  1712 ;;		_printf
  1713 ;;		_set_sid
  1714 ;; This function is called by:
  1715 ;;		Startup code after reset
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           
  1720                           ;psect for function _main
  1721  04E8                     _main:	
  1722                           
  1723                           ;main.c: 229: SYSTEM_Initialize();
  1724                           
  1725                           ;incstack = 0
  1726                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1727  04E8  3182  2229  3184   	fcall	_SYSTEM_Initialize
  1728                           
  1729                           ;main.c: 234: set_sid(0);
  1730  04EB  3000               	movlw	0
  1731  04EC  0020               	movlb	0	; select bank0
  1732  04ED  00B1               	movwf	set_sid@can_node
  1733  04EE  00B2               	movwf	set_sid@can_node+1
  1734  04EF  3182  22E3  3184   	fcall	_set_sid
  1735                           
  1736                           ;main.c: 235: can_start();
  1737  04F2  3183  231B  3184   	fcall	_can_start
  1738  04F5                     l1740:	
  1739                           ;main.c: 237: while (1)
  1740                           
  1741                           
  1742                           ;main.c: 238: {
  1743                           ;main.c: 239: can_status_check();
  1744  04F5  3183  235C  3184   	fcall	_can_status_check
  1745                           
  1746                           ;main.c: 241: if ((PIR1bits.RCIF)) {
  1747  04F8  0020               	movlb	0	; select bank0
  1748  04F9  1E91               	btfss	17,5	;volatile
  1749  04FA  2CF5               	goto	l1740
  1750                           
  1751                           ;main.c: 242: c = EUSART_Read();
  1752  04FB  3181  21FB  3184   	fcall	_EUSART_Read
  1753  04FE  0020               	movlb	0	; select bank0
  1754  04FF  00C3               	movwf	??_main
  1755  0500  0843               	movf	??_main,w
  1756  0501  00CD               	movwf	_c
  1757                           
  1758                           ;main.c: 243: printf("%c", c);
  1759  0502  30F6               	movlw	low (STR_11| (0+32768))
  1760  0503  00F8               	movwf	printf@f
  1761  0504  3088               	movlw	high (STR_11| (0+32768))
  1762  0505  00F9               	movwf	printf@f+1
  1763  0506  084D               	movf	_c,w
  1764  0507  00C3               	movwf	??_main
  1765  0508  01C4               	clrf	??_main+1
  1766  0509  0843               	movf	??_main,w
  1767  050A  00FA               	movwf	?_printf+2
  1768  050B  0844               	movf	??_main+1,w
  1769  050C  00FB               	movwf	?_printf+3
  1770  050D  3186  263E  3184   	fcall	_printf
  1771                           
  1772                           ;main.c: 246: buf[cnt] = c;
  1773  0510  0020               	movlb	0	; select bank0
  1774  0511  084D               	movf	_c,w
  1775  0512  00C3               	movwf	??_main
  1776  0513  084C               	movf	_cnt,w
  1777  0514  3E5C               	addlw	(low (_buf| 0))& (0+255)
  1778  0515  0086               	movwf	6
  1779  0516  0187               	clrf	7
  1780  0517  0843               	movf	??_main,w
  1781  0518  0081               	movwf	1
  1782                           
  1783                           ;main.c: 247: if (c == '\n') {
  1784  0519  300A               	movlw	10
  1785  051A  064D               	xorwf	_c,w
  1786  051B  1D03               	btfss	3,2
  1787  051C  2D53               	goto	l1770
  1788                           
  1789                           ;main.c: 248: buf[cnt] = '\0';
  1790  051D  084C               	movf	_cnt,w
  1791  051E  3E5C               	addlw	(low (_buf| 0))& (0+255)
  1792  051F  0086               	movwf	6
  1793  0520  0187               	clrf	7
  1794  0521  0181               	clrf	1
  1795                           
  1796                           ;main.c: 249: if (buf[0] == '@') {
  1797  0522  3040               	movlw	64
  1798  0523  065C               	xorwf	_buf,w
  1799  0524  1D03               	btfss	3,2
  1800  0525  2D37               	goto	l1760
  1801                           
  1802                           ;main.c: 250: uint16_t sid = atoi(&buf[1]);
  1803  0526  305D               	movlw	(low ((_buf| 0+1)))& (0+255)
  1804  0527  3183  23F2  3184   	fcall	_atoi
  1805  052A  0877               	movf	?_atoi+1,w
  1806  052B  0020               	movlb	0	; select bank0
  1807  052C  00C7               	movwf	main@sid+1
  1808  052D  0876               	movf	?_atoi,w
  1809  052E  00C6               	movwf	main@sid
  1810                           
  1811                           ;main.c: 251: set_sid(sid);
  1812  052F  0847               	movf	main@sid+1,w
  1813  0530  00B2               	movwf	set_sid@can_node+1
  1814  0531  0846               	movf	main@sid,w
  1815  0532  00B1               	movwf	set_sid@can_node
  1816  0533  3182  22E3  3184   	fcall	_set_sid
  1817                           
  1818                           ;main.c: 252: } else {
  1819  0536  2D89               	goto	l1782
  1820  0537                     l1760:	
  1821                           
  1822                           ;main.c: 253: bool rc = can_send(0, buf, cnt);
  1823  0537  305C               	movlw	(low (_buf| 0))& (0+255)
  1824  0538  0020               	movlb	0	; select bank0
  1825  0539  00C3               	movwf	??_main
  1826  053A  0843               	movf	??_main,w
  1827  053B  00B1               	movwf	can_send@buf
  1828  053C  084C               	movf	_cnt,w
  1829  053D  00C4               	movwf	??_main+1
  1830  053E  0844               	movf	??_main+1,w
  1831  053F  00B2               	movwf	can_send@cnt
  1832  0540  3000               	movlw	0
  1833  0541  3185  258C  3184   	fcall	_can_send
  1834  0544  0020               	movlb	0	; select bank0
  1835  0545  00C5               	movwf	??_main+2
  1836  0546  0845               	movf	??_main+2,w
  1837  0547  00C8               	movwf	main@rc
  1838                           
  1839                           ;main.c: 254: if (rc) {
  1840  0548  0848               	movf	main@rc,w
  1841  0549  1903               	btfsc	3,2
  1842  054A  2D4F               	goto	l1766
  1843                           
  1844                           ;main.c: 255: printf("CAN message sent: %s\n", buf);
  1845  054B  301B               	movlw	low ((STR_14+1)| (0+32768))
  1846  054C  00F8               	movwf	printf@f
  1847  054D  3088               	movlw	high ((STR_14+1)| (0+32768))
  1848  054E  2D7C               	goto	L3
  1849  054F                     l1766:	
  1850                           ;main.c: 256: } else {
  1851                           
  1852                           
  1853                           ;main.c: 257: printf("Unable to send message\n");
  1854  054F  3002               	movlw	low ((STR_15+1)| (0+32768))
  1855  0550  00F8               	movwf	printf@f
  1856  0551  3088               	movlw	high ((STR_15+1)| (0+32768))
  1857  0552  2D85               	goto	L1
  1858  0553                     l1770:	
  1859                           ;main.c: 261: } else if (++cnt > max_char) {
  1860                           
  1861                           ;main.c: 258: }
  1862                           ;main.c: 259: }
  1863                           ;main.c: 260: cnt = 0;
  1864                           
  1865  0553  3001               	movlw	1
  1866  0554  00C3               	movwf	??_main
  1867  0555  0843               	movf	??_main,w
  1868  0556  07CC               	addwf	_cnt,f
  1869  0557  3000               	movlw	low (_max_char| (0+32768))
  1870  0558  0084               	movwf	4
  1871  0559  3088               	movlw	high (_max_char| (0+32768))
  1872  055A  0085               	movwf	5
  1873  055B  0800               	movf	0,w	;code access
  1874  055C  00C4               	movwf	??_main+1
  1875  055D  084C               	movf	_cnt,w
  1876  055E  0244               	subwf	??_main+1,w
  1877  055F  1803               	skipnc
  1878  0560  2CF5               	goto	l1740
  1879                           
  1880                           ;main.c: 262: buf[cnt] = '\0';
  1881  0561  084C               	movf	_cnt,w
  1882  0562  3E5C               	addlw	(low (_buf| 0))& (0+255)
  1883  0563  0086               	movwf	6
  1884  0564  0187               	clrf	7
  1885  0565  0181               	clrf	1
  1886                           
  1887                           ;main.c: 263: bool rc = can_send(0, buf, cnt);
  1888  0566  305C               	movlw	(low (_buf| 0))& (0+255)
  1889  0567  00C3               	movwf	??_main
  1890  0568  0843               	movf	??_main,w
  1891  0569  00B1               	movwf	can_send@buf
  1892  056A  084C               	movf	_cnt,w
  1893  056B  00C4               	movwf	??_main+1
  1894  056C  0844               	movf	??_main+1,w
  1895  056D  00B2               	movwf	can_send@cnt
  1896  056E  3000               	movlw	0
  1897  056F  3185  258C  3184   	fcall	_can_send
  1898  0572  0020               	movlb	0	; select bank0
  1899  0573  00C5               	movwf	??_main+2
  1900  0574  0845               	movf	??_main+2,w
  1901  0575  00C9               	movwf	main@rc_383
  1902                           
  1903                           ;main.c: 264: if (rc) {
  1904  0576  0849               	movf	main@rc_383,w
  1905  0577  1903               	btfsc	3,2
  1906  0578  2D82               	goto	l1780
  1907                           
  1908                           ;main.c: 265: printf("\nCAN message sent: %s\n", buf);
  1909  0579  301A               	movlw	low (STR_14| (0+32768))
  1910  057A  00F8               	movwf	printf@f
  1911  057B  3088               	movlw	high (STR_14| (0+32768))
  1912  057C                     L3:	
  1913  057C  00F9               	movwf	printf@f+1
  1914  057D  305C               	movlw	(low (_buf| 0))& (0+255)
  1915  057E  00C3               	movwf	??_main
  1916  057F  0843               	movf	??_main,w
  1917  0580  00FA               	movwf	?_printf+2
  1918  0581  2D86               	goto	L2
  1919  0582                     l1780:	
  1920                           ;main.c: 266: } else {
  1921                           
  1922                           
  1923                           ;main.c: 267: printf("\nUnable to send message\n");
  1924  0582  3001               	movlw	low (STR_15| (0+32768))
  1925  0583  00F8               	movwf	printf@f
  1926  0584  3088               	movlw	high (STR_15| (0+32768))
  1927  0585                     L1:	
  1928  0585  00F9               	movwf	printf@f+1
  1929  0586                     L2:	
  1930  0586  3186  263E  3184   	fcall	_printf
  1931  0589                     l1782:	
  1932                           
  1933                           ;main.c: 268: }
  1934                           ;main.c: 269: cnt = 0;
  1935  0589  0020               	movlb	0	; select bank0
  1936  058A  01CC               	clrf	_cnt
  1937  058B  2CF5               	goto	l1740
  1938  058C                     __end_of_main:	
  1939                           
  1940                           	psect	text1
  1941  02E3                     __ptext1:	
  1942 ;; *************** function _set_sid *****************
  1943 ;; Defined at:
  1944 ;;		line 75 in file "main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  can_node        2   17[BANK0 ] unsigned int 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  sidl            1   24[BANK0 ] unsigned char 
  1949 ;;  sidh            1   23[BANK0 ] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1959 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1960 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1961 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1962 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1963 ;;Total ram usage:        8 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    3
  1966 ;; This function calls:
  1967 ;;		_printf
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function _set_sid
  1975  02E3                     _set_sid:	
  1976                           
  1977                           ;main.c: 76: uint8_t sidh = (can_node >> 3) & 0x00ff;
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1981  02E3  0020               	movlb	0	; select bank0
  1982  02E4  0832               	movf	set_sid@can_node+1,w
  1983  02E5  00B4               	movwf	??_set_sid+1
  1984  02E6  0831               	movf	set_sid@can_node,w
  1985  02E7  00B3               	movwf	??_set_sid
  1986  02E8  36B4               	lsrf	??_set_sid+1,f
  1987  02E9  0CB3               	rrf	??_set_sid,f
  1988  02EA  36B4               	lsrf	??_set_sid+1,f
  1989  02EB  0CB3               	rrf	??_set_sid,f
  1990  02EC  36B4               	lsrf	??_set_sid+1,f
  1991  02ED  0CB3               	rrf	??_set_sid,f
  1992  02EE  0833               	movf	??_set_sid,w
  1993  02EF  00B5               	movwf	??_set_sid+2
  1994  02F0  0835               	movf	??_set_sid+2,w
  1995  02F1  00B7               	movwf	set_sid@sidh
  1996                           
  1997                           ;main.c: 77: uint8_t sidl = (can_node << 5) & 0x00e0;
  1998  02F2  0831               	movf	set_sid@can_node,w
  1999  02F3  00B3               	movwf	??_set_sid
  2000  02F4  3004               	movlw	4
  2001  02F5                     u1135:	
  2002  02F5  35B3               	lslf	??_set_sid,f
  2003  02F6  3EFF               	addlw	-1
  2004  02F7  1D03               	skipz
  2005  02F8  2AF5               	goto	u1135
  2006  02F9  3533               	lslf	??_set_sid,w
  2007  02FA  39E0               	andlw	224
  2008  02FB  00B4               	movwf	??_set_sid+1
  2009  02FC  0834               	movf	??_set_sid+1,w
  2010  02FD  00B8               	movwf	set_sid@sidl
  2011                           
  2012                           ;main.c: 78: sid.sidh = sidh;
  2013  02FE  0837               	movf	set_sid@sidh,w
  2014  02FF  00B3               	movwf	??_set_sid
  2015  0300  0833               	movf	??_set_sid,w
  2016  0301  00CA               	movwf	_sid
  2017                           
  2018                           ;main.c: 79: sid.sidl = sidl;
  2019  0302  0838               	movf	set_sid@sidl,w
  2020  0303  00B3               	movwf	??_set_sid
  2021  0304  0833               	movf	??_set_sid,w
  2022  0305  00CB               	movwf	_sid+1
  2023                           
  2024                           ;main.c: 80: printf("SID set: %02x %02x\n", sidh, sidl);
  2025  0306  3047               	movlw	low (STR_1| (0+32768))
  2026  0307  00F8               	movwf	printf@f
  2027  0308  3088               	movlw	high (STR_1| (0+32768))
  2028  0309  00F9               	movwf	printf@f+1
  2029  030A  0837               	movf	set_sid@sidh,w
  2030  030B  00B3               	movwf	??_set_sid
  2031  030C  01B4               	clrf	??_set_sid+1
  2032  030D  0833               	movf	??_set_sid,w
  2033  030E  00FA               	movwf	?_printf+2
  2034  030F  0834               	movf	??_set_sid+1,w
  2035  0310  00FB               	movwf	?_printf+3
  2036  0311  0838               	movf	set_sid@sidl,w
  2037  0312  00B5               	movwf	??_set_sid+2
  2038  0313  01B6               	clrf	??_set_sid+3
  2039  0314  0835               	movf	??_set_sid+2,w
  2040  0315  00FC               	movwf	?_printf+4
  2041  0316  0836               	movf	??_set_sid+3,w
  2042  0317  00FD               	movwf	?_printf+5
  2043  0318  3186  263E         	fcall	_printf
  2044  031A  0008               	return
  2045  031B                     __end_of_set_sid:	
  2046                           
  2047                           	psect	text2
  2048  035C                     __ptext2:	
  2049 ;; *************** function _can_status_check *****************
  2050 ;; Defined at:
  2051 ;;		line 204 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  can_status_b    2   32[BANK0 ] unsigned char [2]
  2056 ;;  status          1   34[BANK0 ] unsigned char 
  2057 ;;  bytes_writte    1   31[BANK0 ] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2070 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2071 ;;Total ram usage:        7 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    4
  2074 ;; This function calls:
  2075 ;;		_SPI_send
  2076 ;;		_can_receive
  2077 ;;		_can_txf_clear
  2078 ;;		_printf
  2079 ;; This function is called by:
  2080 ;;		_main
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function _can_status_check
  2086  035C                     _can_status_check:	
  2087                           
  2088                           ;main.c: 206: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2092  035C  0020               	movlb	0	; select bank0
  2093  035D  086F               	movf	can_status_check@F2957+1,w
  2094  035E  00C1               	movwf	can_status_check@can_status_buf+1
  2095  035F  086E               	movf	can_status_check@F2957,w
  2096  0360  00C0               	movwf	can_status_check@can_status_buf
  2097                           
  2098                           ;main.c: 207: uint8_t bytes_written = SPI_send(can_status_buf, 2, can_status_buf);
  2099  0361  3002               	movlw	2
  2100  0362  00BC               	movwf	??_can_status_check
  2101  0363  083C               	movf	??_can_status_check,w
  2102  0364  00F8               	movwf	SPI_send@len
  2103  0365  3040               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  2104  0366  00BD               	movwf	??_can_status_check+1
  2105  0367  083D               	movf	??_can_status_check+1,w
  2106  0368  00F9               	movwf	SPI_send@rbuf
  2107  0369  3040               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  2108  036A  3182  224F  3183   	fcall	_SPI_send
  2109  036D  0020               	movlb	0	; select bank0
  2110  036E  00BE               	movwf	??_can_status_check+2
  2111  036F  083E               	movf	??_can_status_check+2,w
  2112  0370  00BF               	movwf	can_status_check@bytes_written
  2113                           
  2114                           ;main.c: 208: uint8_t status = can_status_buf[1];
  2115  0371  0841               	movf	can_status_check@can_status_buf+1,w
  2116  0372  00BC               	movwf	??_can_status_check
  2117  0373  083C               	movf	??_can_status_check,w
  2118  0374  00C2               	movwf	can_status_check@status
  2119                           
  2120                           ;main.c: 209: if (status == 0x00) {
  2121  0375  0842               	movf	can_status_check@status,w
  2122  0376  1903               	btfsc	3,2
  2123  0377  0008               	return
  2124                           
  2125                           ;main.c: 211: } else if ((status & 0b00000001) > 0) {
  2126                           
  2127                           ;main.c: 210: return;
  2128  0378  1C42               	btfss	can_status_check@status,0
  2129  0379  2B85               	goto	l213
  2130                           
  2131                           ;main.c: 212: printf("RX0IF is on\n");
  2132  037A  30CA               	movlw	low (STR_9| (0+32768))
  2133  037B  00F8               	movwf	printf@f
  2134  037C  3088               	movlw	high (STR_9| (0+32768))
  2135  037D  00F9               	movwf	printf@f+1
  2136  037E  3186  263E  3183   	fcall	_printf
  2137                           
  2138                           ;main.c: 213: can_receive(0);
  2139  0381  3000               	movlw	0
  2140  0382  3184  2459         	fcall	_can_receive
  2141                           
  2142                           ;main.c: 214: } else if ((status & 0b00000010) > 0) {
  2143  0384  0008               	return
  2144  0385                     l213:	
  2145  0385  1CC2               	btfss	can_status_check@status,1
  2146  0386  2B92               	goto	l215
  2147                           
  2148                           ;main.c: 215: printf("RX1IF is on\n");
  2149  0387  30D7               	movlw	low (STR_10| (0+32768))
  2150  0388  00F8               	movwf	printf@f
  2151  0389  3088               	movlw	high (STR_10| (0+32768))
  2152  038A  00F9               	movwf	printf@f+1
  2153  038B  3186  263E  3183   	fcall	_printf
  2154                           
  2155                           ;main.c: 216: can_receive(1);
  2156  038E  3001               	movlw	1
  2157  038F  3184  2459         	fcall	_can_receive
  2158                           
  2159                           ;main.c: 217: } else if ((status & 0b00001000) > 0) {
  2160  0391  0008               	return
  2161  0392                     l215:	
  2162  0392  1DC2               	btfss	can_status_check@status,3
  2163  0393  2B98               	goto	l217
  2164                           
  2165                           ;main.c: 218: can_txf_clear(0);
  2166  0394  3000               	movlw	0
  2167  0395  3182  2283         	fcall	_can_txf_clear
  2168                           
  2169                           ;main.c: 219: } else if ((status & 0b00100000) > 0) {
  2170  0397  0008               	return
  2171  0398                     l217:	
  2172  0398  1EC2               	btfss	can_status_check@status,5
  2173  0399  2B9E               	goto	l219
  2174                           
  2175                           ;main.c: 220: can_txf_clear(1);
  2176  039A  3001               	movlw	1
  2177  039B  3182  2283         	fcall	_can_txf_clear
  2178                           
  2179                           ;main.c: 221: } else if ((status & 0b10000000) > 0) {
  2180  039D  0008               	return
  2181  039E                     l219:	
  2182  039E  1FC2               	btfss	can_status_check@status,7
  2183  039F  0008               	return
  2184                           
  2185                           ;main.c: 222: can_txf_clear(2);
  2186  03A0  3002               	movlw	2
  2187  03A1  3182  2283         	fcall	_can_txf_clear
  2188  03A3  0008               	return
  2189  03A4                     __end_of_can_status_check:	
  2190                           ;main.c: 223: }
  2191                           ;main.c: 224: return;
  2192                           
  2193                           
  2194                           	psect	text3
  2195  0283                     __ptext3:	
  2196 ;; *************** function _can_txf_clear *****************
  2197 ;; Defined at:
  2198 ;;		line 111 in file "main.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  n               1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  n               1    5[BANK0 ] unsigned char 
  2203 ;;  can_int_flag    4    8[BANK0 ] unsigned char [4]
  2204 ;;  bytes_writte    1    7[BANK0 ] unsigned char 
  2205 ;;  mask            1    6[BANK0 ] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      unsigned char 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2216 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2217 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2218 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2219 ;;Total ram usage:       10 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    3
  2222 ;; This function calls:
  2223 ;;		_SPI_send
  2224 ;; This function is called by:
  2225 ;;		_can_status_check
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _can_txf_clear
  2231  0283                     _can_txf_clear:	
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2235                           ;can_txf_clear@n stored from wreg
  2236  0283  0020               	movlb	0	; select bank0
  2237  0284  00A5               	movwf	can_txf_clear@n
  2238                           
  2239                           ;main.c: 112: uint8_t mask = 0b00000001 << (n + 2);
  2240  0285  3001               	movlw	1
  2241  0286  00A2               	movwf	??_can_txf_clear
  2242  0287  0825               	movf	can_txf_clear@n,w
  2243  0288  3E02               	addlw	2
  2244  0289  0A89               	incf	9,f
  2245  028A  2A8C               	goto	u1094
  2246  028B                     u1095:	
  2247  028B  35A2               	lslf	??_can_txf_clear,f
  2248  028C                     u1094:	
  2249  028C  0B89               	decfsz	9,f
  2250  028D  2A8B               	goto	u1095
  2251  028E  0822               	movf	??_can_txf_clear,w
  2252  028F  00A3               	movwf	??_can_txf_clear+1
  2253  0290  0823               	movf	??_can_txf_clear+1,w
  2254  0291  00A6               	movwf	can_txf_clear@mask
  2255                           
  2256                           ;main.c: 113: uint8_t can_int_flag[4];
  2257                           ;main.c: 114: can_int_flag[0] =0b00000101;
  2258  0292  3005               	movlw	5
  2259  0293  00A2               	movwf	??_can_txf_clear
  2260  0294  0822               	movf	??_can_txf_clear,w
  2261  0295  00A8               	movwf	can_txf_clear@can_int_flag
  2262                           
  2263                           ;main.c: 115: can_int_flag[1] = 0x2c;
  2264  0296  302C               	movlw	44
  2265  0297  00A2               	movwf	??_can_txf_clear
  2266  0298  0822               	movf	??_can_txf_clear,w
  2267  0299  00A9               	movwf	can_txf_clear@can_int_flag+1
  2268                           
  2269                           ;main.c: 116: can_int_flag[2] = mask;
  2270  029A  0826               	movf	can_txf_clear@mask,w
  2271  029B  00A2               	movwf	??_can_txf_clear
  2272  029C  0822               	movf	??_can_txf_clear,w
  2273  029D  00AA               	movwf	can_txf_clear@can_int_flag+2
  2274                           
  2275                           ;main.c: 117: can_int_flag[3] = 0x00;
  2276  029E  01AB               	clrf	can_txf_clear@can_int_flag+3
  2277                           
  2278                           ;main.c: 118: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2279  029F  3004               	movlw	4
  2280  02A0  00A2               	movwf	??_can_txf_clear
  2281  02A1  0822               	movf	??_can_txf_clear,w
  2282  02A2  00F8               	movwf	SPI_send@len
  2283  02A3  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2284  02A4  00A3               	movwf	??_can_txf_clear+1
  2285  02A5  0823               	movf	??_can_txf_clear+1,w
  2286  02A6  00F9               	movwf	SPI_send@rbuf
  2287  02A7  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  2288  02A8  3182  224F         	fcall	_SPI_send
  2289  02AA  0020               	movlb	0	; select bank0
  2290  02AB  00A4               	movwf	??_can_txf_clear+2
  2291  02AC  0824               	movf	??_can_txf_clear+2,w
  2292  02AD  00A7               	movwf	can_txf_clear@bytes_written
  2293                           
  2294                           ;main.c: 122: return 0;
  2295                           ;	Return value of _can_txf_clear is never used
  2296                           
  2297                           ;main.c: 121: } else {
  2298                           
  2299                           ;main.c: 120: return 1;
  2300                           ;	Return value of _can_txf_clear is never used
  2301  02AE  0008               	return
  2302  02AF                     __end_of_can_txf_clear:	
  2303                           
  2304                           	psect	text4
  2305  0459                     __ptext4:	
  2306 ;; *************** function _can_receive *****************
  2307 ;; Defined at:
  2308 ;;		line 129 in file "main.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  n               1    wreg     unsigned char 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  n               1   27[BANK0 ] unsigned char 
  2313 ;;  can_int_flag    4   23[BANK0 ] unsigned char [4]
  2314 ;;  mask            1   22[BANK0 ] unsigned char 
  2315 ;;  bytes_read      1   21[BANK0 ] unsigned char 
  2316 ;;  bytes_writte    1   20[BANK0 ] unsigned char 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2327 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2328 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2329 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2330 ;;Total ram usage:       11 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    3
  2333 ;; This function calls:
  2334 ;;		_SPI_send
  2335 ;;		_printf
  2336 ;; This function is called by:
  2337 ;;		_can_status_check
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           
  2342                           ;psect for function _can_receive
  2343  0459                     _can_receive:	
  2344                           
  2345                           ;incstack = 0
  2346                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2347                           ;can_receive@n stored from wreg
  2348  0459  0020               	movlb	0	; select bank0
  2349  045A  00BB               	movwf	can_receive@n
  2350                           
  2351                           ;main.c: 131: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  2352  045B  083B               	movf	can_receive@n,w
  2353  045C  3EF9               	addlw	low (_nm| (0+32768))
  2354  045D  0084               	movwf	4
  2355  045E  3088               	movlw	high (_nm| (0+32768))
  2356  045F  1803               	skipnc
  2357  0460  3E01               	addlw	1
  2358  0461  0085               	movwf	5
  2359  0462  0800               	movf	0,w	;code access
  2360  0463  0709               	addwf	9,w
  2361  0464  3E90               	addlw	144
  2362  0465  00B1               	movwf	??_can_receive
  2363  0466  0831               	movf	??_can_receive,w
  2364  0467  0021               	movlb	1	; select bank1
  2365  0468  00A0               	movwf	_rx_buf^(0+128)
  2366                           
  2367                           ;main.c: 132: uint8_t bytes_read = SPI_send(rx_buf, 14, rx_buf);
  2368  0469  300E               	movlw	14
  2369  046A  0020               	movlb	0	; select bank0
  2370  046B  00B1               	movwf	??_can_receive
  2371  046C  0831               	movf	??_can_receive,w
  2372  046D  00F8               	movwf	SPI_send@len
  2373  046E  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2374  046F  00B2               	movwf	??_can_receive+1
  2375  0470  0832               	movf	??_can_receive+1,w
  2376  0471  00F9               	movwf	SPI_send@rbuf
  2377  0472  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  2378  0473  3182  224F  3184   	fcall	_SPI_send
  2379  0476  0020               	movlb	0	; select bank0
  2380  0477  00B3               	movwf	??_can_receive+2
  2381  0478  0833               	movf	??_can_receive+2,w
  2382  0479  00B5               	movwf	can_receive@bytes_read
  2383                           
  2384                           ;main.c: 133: rx_buf[bytes_read] = '\0';
  2385  047A  0835               	movf	can_receive@bytes_read,w
  2386  047B  3EA0               	addlw	(low (_rx_buf| 0))& (0+255)
  2387  047C  0086               	movwf	6
  2388  047D  0187               	clrf	7
  2389  047E  0181               	clrf	1
  2390                           
  2391                           ;main.c: 136: printf("RXB0SIDH: %02x\n", rx_buf[1]);
  2392  047F  306C               	movlw	low (STR_3| (0+32768))
  2393  0480  00F8               	movwf	printf@f
  2394  0481  3088               	movlw	high (STR_3| (0+32768))
  2395  0482  00F9               	movwf	printf@f+1
  2396  0483  0021               	movlb	1	; select bank1
  2397  0484  0821               	movf	(_rx_buf^(0+128)+1),w
  2398  0485  0020               	movlb	0	; select bank0
  2399  0486  00B1               	movwf	??_can_receive
  2400  0487  01B2               	clrf	??_can_receive+1
  2401  0488  0831               	movf	??_can_receive,w
  2402  0489  00FA               	movwf	?_printf+2
  2403  048A  0832               	movf	??_can_receive+1,w
  2404  048B  00FB               	movwf	?_printf+3
  2405  048C  3186  263E  3184   	fcall	_printf
  2406                           
  2407                           ;main.c: 137: printf("RXB0SIDL: %02x\n", rx_buf[2]);
  2408  048F  308C               	movlw	low (STR_4| (0+32768))
  2409  0490  00F8               	movwf	printf@f
  2410  0491  3088               	movlw	high (STR_4| (0+32768))
  2411  0492  00F9               	movwf	printf@f+1
  2412  0493  0021               	movlb	1	; select bank1
  2413  0494  0822               	movf	(_rx_buf^(0+128)+2),w
  2414  0495  0020               	movlb	0	; select bank0
  2415  0496  00B1               	movwf	??_can_receive
  2416  0497  01B2               	clrf	??_can_receive+1
  2417  0498  0831               	movf	??_can_receive,w
  2418  0499  00FA               	movwf	?_printf+2
  2419  049A  0832               	movf	??_can_receive+1,w
  2420  049B  00FB               	movwf	?_printf+3
  2421  049C  3186  263E  3184   	fcall	_printf
  2422                           
  2423                           ;main.c: 138: printf("RXB0DLC: %02x\n", rx_buf[5]);
  2424  049F  30AC               	movlw	low (STR_5| (0+32768))
  2425  04A0  00F8               	movwf	printf@f
  2426  04A1  3088               	movlw	high (STR_5| (0+32768))
  2427  04A2  00F9               	movwf	printf@f+1
  2428  04A3  0021               	movlb	1	; select bank1
  2429  04A4  0825               	movf	(_rx_buf^(0+128)+5),w
  2430  04A5  0020               	movlb	0	; select bank0
  2431  04A6  00B1               	movwf	??_can_receive
  2432  04A7  01B2               	clrf	??_can_receive+1
  2433  04A8  0831               	movf	??_can_receive,w
  2434  04A9  00FA               	movwf	?_printf+2
  2435  04AA  0832               	movf	??_can_receive+1,w
  2436  04AB  00FB               	movwf	?_printf+3
  2437  04AC  3186  263E  3184   	fcall	_printf
  2438                           
  2439                           ;main.c: 141: uint8_t mask = 0b00000001 << n;
  2440  04AF  3001               	movlw	1
  2441  04B0  0020               	movlb	0	; select bank0
  2442  04B1  00B1               	movwf	??_can_receive
  2443  04B2  0A3B               	incf	can_receive@n,w
  2444  04B3  2CB5               	goto	u1104
  2445  04B4                     u1105:	
  2446  04B4  35B1               	lslf	??_can_receive,f
  2447  04B5                     u1104:	
  2448  04B5  0B89               	decfsz	9,f
  2449  04B6  2CB4               	goto	u1105
  2450  04B7  0831               	movf	??_can_receive,w
  2451  04B8  00B2               	movwf	??_can_receive+1
  2452  04B9  0832               	movf	??_can_receive+1,w
  2453  04BA  00B6               	movwf	can_receive@mask
  2454                           
  2455                           ;main.c: 142: uint8_t can_int_flag[4];
  2456                           ;main.c: 143: can_int_flag[0] = 0b00000101;
  2457  04BB  3005               	movlw	5
  2458  04BC  00B1               	movwf	??_can_receive
  2459  04BD  0831               	movf	??_can_receive,w
  2460  04BE  00B7               	movwf	can_receive@can_int_flag
  2461                           
  2462                           ;main.c: 144: can_int_flag[1] = 0x2c;
  2463  04BF  302C               	movlw	44
  2464  04C0  00B1               	movwf	??_can_receive
  2465  04C1  0831               	movf	??_can_receive,w
  2466  04C2  00B8               	movwf	can_receive@can_int_flag+1
  2467                           
  2468                           ;main.c: 145: can_int_flag[2] = mask;
  2469  04C3  0836               	movf	can_receive@mask,w
  2470  04C4  00B1               	movwf	??_can_receive
  2471  04C5  0831               	movf	??_can_receive,w
  2472  04C6  00B9               	movwf	can_receive@can_int_flag+2
  2473                           
  2474                           ;main.c: 146: can_int_flag[3] = 0x00;
  2475  04C7  01BA               	clrf	can_receive@can_int_flag+3
  2476                           
  2477                           ;main.c: 147: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  2478  04C8  3004               	movlw	4
  2479  04C9  00B1               	movwf	??_can_receive
  2480  04CA  0831               	movf	??_can_receive,w
  2481  04CB  00F8               	movwf	SPI_send@len
  2482  04CC  3037               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2483  04CD  00B2               	movwf	??_can_receive+1
  2484  04CE  0832               	movf	??_can_receive+1,w
  2485  04CF  00F9               	movwf	SPI_send@rbuf
  2486  04D0  3037               	movlw	(low (can_receive@can_int_flag| 0))& (0+255)
  2487  04D1  3182  224F  3184   	fcall	_SPI_send
  2488  04D4  0020               	movlb	0	; select bank0
  2489  04D5  00B3               	movwf	??_can_receive+2
  2490  04D6  0833               	movf	??_can_receive+2,w
  2491  04D7  00B4               	movwf	can_receive@bytes_written
  2492                           
  2493                           ;main.c: 150: printf("Message received: %s\n", rx_buf[6]);
  2494  04D8  3031               	movlw	low (STR_6| (0+32768))
  2495  04D9  00F8               	movwf	printf@f
  2496  04DA  3088               	movlw	high (STR_6| (0+32768))
  2497  04DB  00F9               	movwf	printf@f+1
  2498  04DC  0021               	movlb	1	; select bank1
  2499  04DD  0826               	movf	(_rx_buf^(0+128)+6),w
  2500  04DE  0020               	movlb	0	; select bank0
  2501  04DF  00B1               	movwf	??_can_receive
  2502  04E0  01B2               	clrf	??_can_receive+1
  2503  04E1  0831               	movf	??_can_receive,w
  2504  04E2  00FA               	movwf	?_printf+2
  2505  04E3  0832               	movf	??_can_receive+1,w
  2506  04E4  00FB               	movwf	?_printf+3
  2507  04E5  3186  263E         	fcall	_printf
  2508  04E7  0008               	return
  2509  04E8                     __end_of_can_receive:	
  2510                           
  2511                           	psect	text5
  2512  031B                     __ptext5:	
  2513 ;; *************** function _can_start *****************
  2514 ;; Defined at:
  2515 ;;		line 93 in file "main.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  can_ctrl_buf    3   21[BANK0 ] unsigned char [3]
  2520 ;;  bytes_writte    1   20[BANK0 ] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      unsigned char 
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2532 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2533 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;Total ram usage:        7 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    3
  2537 ;; This function calls:
  2538 ;;		_SPI_send
  2539 ;;		_printf
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           
  2546                           ;psect for function _can_start
  2547  031B                     _can_start:	
  2548                           
  2549                           ;main.c: 95: uint8_t can_ctrl_buf[3] = {0b00000010, 0x0f, 0b01000000};
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _can_start: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2553  031B  0020               	movlb	0	; select bank0
  2554  031C  086B               	movf	can_start@F2930,w
  2555  031D  00B5               	movwf	can_start@can_ctrl_buf
  2556  031E  086C               	movf	can_start@F2930+1,w
  2557  031F  00B6               	movwf	can_start@can_ctrl_buf+1
  2558  0320  086D               	movf	can_start@F2930+2,w
  2559  0321  00B7               	movwf	can_start@can_ctrl_buf+2
  2560                           
  2561                           ;main.c: 96: uint8_t bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  2562  0322  3003               	movlw	3
  2563  0323  00B1               	movwf	??_can_start
  2564  0324  0831               	movf	??_can_start,w
  2565  0325  00F8               	movwf	SPI_send@len
  2566  0326  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2567  0327  00B2               	movwf	??_can_start+1
  2568  0328  0832               	movf	??_can_start+1,w
  2569  0329  00F9               	movwf	SPI_send@rbuf
  2570  032A  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2571  032B  3182  224F  3183   	fcall	_SPI_send
  2572  032E  0020               	movlb	0	; select bank0
  2573  032F  00B3               	movwf	??_can_start+2
  2574  0330  0833               	movf	??_can_start+2,w
  2575  0331  00B4               	movwf	can_start@bytes_written
  2576                           
  2577                           ;main.c: 97: if (bytes_written == 3) {
  2578  0332  3003               	movlw	3
  2579  0333  0634               	xorwf	can_start@bytes_written,w
  2580  0334  1D03               	btfss	3,2
  2581  0335  0008               	return
  2582                           
  2583                           ;main.c: 98: can_ctrl_buf[0] = 0b00000011;
  2584  0336  3003               	movlw	3
  2585  0337  00B1               	movwf	??_can_start
  2586  0338  0831               	movf	??_can_start,w
  2587  0339  00B5               	movwf	can_start@can_ctrl_buf
  2588                           
  2589                           ;main.c: 99: can_ctrl_buf[1] = 0x0e;
  2590  033A  300E               	movlw	14
  2591  033B  00B1               	movwf	??_can_start
  2592  033C  0831               	movf	??_can_start,w
  2593  033D  00B6               	movwf	can_start@can_ctrl_buf+1
  2594                           
  2595                           ;main.c: 100: bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  2596  033E  3003               	movlw	3
  2597  033F  00B1               	movwf	??_can_start
  2598  0340  0831               	movf	??_can_start,w
  2599  0341  00F8               	movwf	SPI_send@len
  2600  0342  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2601  0343  00B2               	movwf	??_can_start+1
  2602  0344  0832               	movf	??_can_start+1,w
  2603  0345  00F9               	movwf	SPI_send@rbuf
  2604  0346  3035               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2605  0347  3182  224F  3183   	fcall	_SPI_send
  2606  034A  0020               	movlb	0	; select bank0
  2607  034B  00B3               	movwf	??_can_start+2
  2608  034C  0833               	movf	??_can_start+2,w
  2609  034D  00B4               	movwf	can_start@bytes_written
  2610                           
  2611                           ;main.c: 101: printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  2612  034E  30BB               	movlw	low (STR_2| (0+32768))
  2613  034F  00F8               	movwf	printf@f
  2614  0350  3088               	movlw	high (STR_2| (0+32768))
  2615  0351  00F9               	movwf	printf@f+1
  2616  0352  0837               	movf	can_start@can_ctrl_buf+2,w
  2617  0353  00B1               	movwf	??_can_start
  2618  0354  01B2               	clrf	??_can_start+1
  2619  0355  0831               	movf	??_can_start,w
  2620  0356  00FA               	movwf	?_printf+2
  2621  0357  0832               	movf	??_can_start+1,w
  2622  0358  00FB               	movwf	?_printf+3
  2623  0359  3186  263E         	fcall	_printf
  2624                           
  2625                           ;main.c: 104: return 0;
  2626                           ;	Return value of _can_start is never used
  2627                           
  2628                           ;main.c: 103: } else {
  2629                           
  2630                           ;main.c: 102: return 1;
  2631                           ;	Return value of _can_start is never used
  2632  035B  0008               	return
  2633  035C                     __end_of_can_start:	
  2634                           
  2635                           	psect	text6
  2636  058C                     __ptext6:	
  2637 ;; *************** function _can_send *****************
  2638 ;; Defined at:
  2639 ;;		line 156 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  n               1    wreg     unsigned char 
  2642 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  2643 ;;		 -> buf(9), 
  2644 ;;  cnt             1   18[BANK0 ] unsigned char 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  n               1   22[BANK0 ] unsigned char 
  2647 ;;  txb_ctrl_buf    1   29[BANK0 ] unsigned char [1]
  2648 ;;  debug           3   24[BANK0 ] unsigned char [3]
  2649 ;;  i               1   28[BANK0 ] unsigned char 
  2650 ;;  bytes_writte    1   27[BANK0 ] unsigned char 
  2651 ;;  len             1   23[BANK0 ] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      unsigned char 
  2654 ;; Registers used:
  2655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2661 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2662 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2663 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2664 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2665 ;;Total ram usage:       13 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    3
  2668 ;; This function calls:
  2669 ;;		_SPI_send
  2670 ;;		_printf
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           
  2677                           ;psect for function _can_send
  2678  058C                     _can_send:	
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2682                           ;can_send@n stored from wreg
  2683  058C  0020               	movlb	0	; select bank0
  2684  058D  00B6               	movwf	can_send@n
  2685                           
  2686                           ;main.c: 157: uint8_t i;
  2687                           ;main.c: 160: tx_buf[0] = 0b01000000 + abc[n];
  2688  058E  0836               	movf	can_send@n,w
  2689  058F  3EF3               	addlw	low (_abc| (0+32768))
  2690  0590  0084               	movwf	4
  2691  0591  3088               	movlw	high (_abc| (0+32768))
  2692  0592  1803               	skipnc
  2693  0593  3E01               	addlw	1
  2694  0594  0085               	movwf	5
  2695  0595  0800               	movf	0,w	;code access
  2696  0596  3E40               	addlw	64
  2697  0597  00B3               	movwf	??_can_send
  2698  0598  0833               	movf	??_can_send,w
  2699  0599  00CE               	movwf	_tx_buf
  2700                           
  2701                           ;main.c: 162: tx_buf[1] = sid.sidh;
  2702  059A  084A               	movf	_sid,w
  2703  059B  00B3               	movwf	??_can_send
  2704  059C  0833               	movf	??_can_send,w
  2705  059D  00CF               	movwf	_tx_buf+1
  2706                           
  2707                           ;main.c: 164: tx_buf[2] = sid.sidl;
  2708  059E  084B               	movf	_sid+1,w
  2709  059F  00B3               	movwf	??_can_send
  2710  05A0  0833               	movf	??_can_send,w
  2711  05A1  00D0               	movwf	_tx_buf+2
  2712                           
  2713                           ;main.c: 166: tx_buf[3] = 0;
  2714  05A2  01D1               	clrf	_tx_buf+3
  2715                           
  2716                           ;main.c: 168: tx_buf[4] = 0;
  2717  05A3  01D2               	clrf	_tx_buf+4
  2718                           
  2719                           ;main.c: 170: tx_buf[5] = cnt;
  2720  05A4  0832               	movf	can_send@cnt,w
  2721  05A5  00B3               	movwf	??_can_send
  2722  05A6  0833               	movf	??_can_send,w
  2723  05A7  00D3               	movwf	_tx_buf+5
  2724                           
  2725                           ;main.c: 173: for(i=0; i++; i<cnt) {
  2726  05A8  01BC               	clrf	can_send@i
  2727  05A9                     l1638:	
  2728  05A9  3001               	movlw	1
  2729  05AA  00B3               	movwf	??_can_send
  2730  05AB  0833               	movf	??_can_send,w
  2731  05AC  07BC               	addwf	can_send@i,f
  2732  05AD  033C               	decf	can_send@i,w
  2733  05AE  1903               	btfsc	3,2
  2734  05AF  2DC0               	goto	l1640
  2735                           
  2736                           ;main.c: 174: tx_buf[6+i] = buf[i];
  2737  05B0  083C               	movf	can_send@i,w
  2738  05B1  0731               	addwf	can_send@buf,w
  2739  05B2  00B3               	movwf	??_can_send
  2740  05B3  0833               	movf	??_can_send,w
  2741  05B4  0086               	movwf	6
  2742  05B5  0187               	clrf	7
  2743  05B6  0801               	movf	1,w
  2744  05B7  00B4               	movwf	??_can_send+1
  2745  05B8  083C               	movf	can_send@i,w
  2746  05B9  3E06               	addlw	6
  2747  05BA  3E4E               	addlw	(low (_tx_buf| 0))& (0+255)
  2748  05BB  0086               	movwf	6
  2749  05BC  0187               	clrf	7
  2750  05BD  0834               	movf	??_can_send+1,w
  2751  05BE  0081               	movwf	1
  2752  05BF  2DA9               	goto	l1638
  2753  05C0                     l1640:	
  2754                           
  2755                           ;main.c: 175: }
  2756                           ;main.c: 178: uint8_t len = 6 + cnt;
  2757  05C0  0832               	movf	can_send@cnt,w
  2758  05C1  3E06               	addlw	6
  2759  05C2  00B3               	movwf	??_can_send
  2760  05C3  0833               	movf	??_can_send,w
  2761  05C4  00B7               	movwf	can_send@len
  2762                           
  2763                           ;main.c: 179: uint8_t bytes_written = SPI_send(tx_buf, len, tx_buf);
  2764  05C5  0837               	movf	can_send@len,w
  2765  05C6  00B3               	movwf	??_can_send
  2766  05C7  0833               	movf	??_can_send,w
  2767  05C8  00F8               	movwf	SPI_send@len
  2768  05C9  304E               	movlw	(low (_tx_buf| 0))& (0+255)
  2769  05CA  00B4               	movwf	??_can_send+1
  2770  05CB  0834               	movf	??_can_send+1,w
  2771  05CC  00F9               	movwf	SPI_send@rbuf
  2772  05CD  304E               	movlw	(low (_tx_buf| 0))& (0+255)
  2773  05CE  3182  224F  3185   	fcall	_SPI_send
  2774  05D1  0020               	movlb	0	; select bank0
  2775  05D2  00B5               	movwf	??_can_send+2
  2776  05D3  0835               	movf	??_can_send+2,w
  2777  05D4  00BB               	movwf	can_send@bytes_written
  2778                           
  2779                           ;main.c: 182: uint8_t debug[3] = {0b00000011, 0x31, 0x00};
  2780  05D5  0868               	movf	can_send@F2951,w
  2781  05D6  00B8               	movwf	can_send@debug
  2782  05D7  0869               	movf	can_send@F2951+1,w
  2783  05D8  00B9               	movwf	can_send@debug+1
  2784  05D9  086A               	movf	can_send@F2951+2,w
  2785  05DA  00BA               	movwf	can_send@debug+2
  2786                           
  2787                           ;main.c: 183: SPI_send(debug, 3, debug);
  2788  05DB  3003               	movlw	3
  2789  05DC  00B3               	movwf	??_can_send
  2790  05DD  0833               	movf	??_can_send,w
  2791  05DE  00F8               	movwf	SPI_send@len
  2792  05DF  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2793  05E0  00B4               	movwf	??_can_send+1
  2794  05E1  0834               	movf	??_can_send+1,w
  2795  05E2  00F9               	movwf	SPI_send@rbuf
  2796  05E3  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2797  05E4  3182  224F  3185   	fcall	_SPI_send
  2798                           
  2799                           ;main.c: 184: printf("TXB0SIDH: %02x\n", debug[2]);
  2800  05E7  307C               	movlw	low (STR_7| (0+32768))
  2801  05E8  00F8               	movwf	printf@f
  2802  05E9  3088               	movlw	high (STR_7| (0+32768))
  2803  05EA  00F9               	movwf	printf@f+1
  2804  05EB  0020               	movlb	0	; select bank0
  2805  05EC  083A               	movf	can_send@debug+2,w
  2806  05ED  00B3               	movwf	??_can_send
  2807  05EE  01B4               	clrf	??_can_send+1
  2808  05EF  0833               	movf	??_can_send,w
  2809  05F0  00FA               	movwf	?_printf+2
  2810  05F1  0834               	movf	??_can_send+1,w
  2811  05F2  00FB               	movwf	?_printf+3
  2812  05F3  3186  263E  3185   	fcall	_printf
  2813                           
  2814                           ;main.c: 185: uint8_t debug[3] = {0b00000011, 0x32, 0x00};
  2815  05F6  0020               	movlb	0	; select bank0
  2816  05F7  0865               	movf	can_send@F2952,w
  2817  05F8  00B8               	movwf	can_send@debug
  2818  05F9  0866               	movf	can_send@F2952+1,w
  2819  05FA  00B9               	movwf	can_send@debug+1
  2820  05FB  0867               	movf	can_send@F2952+2,w
  2821  05FC  00BA               	movwf	can_send@debug+2
  2822                           
  2823                           ;main.c: 186: SPI_send(debug, 3, debug);
  2824  05FD  3003               	movlw	3
  2825  05FE  00B3               	movwf	??_can_send
  2826  05FF  0833               	movf	??_can_send,w
  2827  0600  00F8               	movwf	SPI_send@len
  2828  0601  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2829  0602  00B4               	movwf	??_can_send+1
  2830  0603  0834               	movf	??_can_send+1,w
  2831  0604  00F9               	movwf	SPI_send@rbuf
  2832  0605  3038               	movlw	(low (can_send@debug| 0))& (0+255)
  2833  0606  3182  224F  3185   	fcall	_SPI_send
  2834                           
  2835                           ;main.c: 187: printf("TXB0SIDL: %02x\n", debug[2]);
  2836  0609  309C               	movlw	low (STR_8| (0+32768))
  2837  060A  00F8               	movwf	printf@f
  2838  060B  3088               	movlw	high (STR_8| (0+32768))
  2839  060C  00F9               	movwf	printf@f+1
  2840  060D  0020               	movlb	0	; select bank0
  2841  060E  083A               	movf	can_send@debug+2,w
  2842  060F  00B3               	movwf	??_can_send
  2843  0610  01B4               	clrf	??_can_send+1
  2844  0611  0833               	movf	??_can_send,w
  2845  0612  00FA               	movwf	?_printf+2
  2846  0613  0834               	movf	??_can_send+1,w
  2847  0614  00FB               	movwf	?_printf+3
  2848  0615  3186  263E  3185   	fcall	_printf
  2849                           
  2850                           ;main.c: 189: if (bytes_written == len) {
  2851  0618  0020               	movlb	0	; select bank0
  2852  0619  083B               	movf	can_send@bytes_written,w
  2853  061A  0637               	xorwf	can_send@len,w
  2854  061B  1D03               	skipz
  2855  061C  2E3C               	goto	l1668
  2856                           
  2857                           ;main.c: 191: uint8_t txb_ctrl_buf[1];
  2858                           ;main.c: 192: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  2859  061D  3001               	movlw	1
  2860  061E  00B3               	movwf	??_can_send
  2861  061F  0A36               	incf	can_send@n,w
  2862  0620  2E22               	goto	u1174
  2863  0621                     u1175:	
  2864  0621  35B3               	lslf	??_can_send,f
  2865  0622                     u1174:	
  2866  0622  0B89               	decfsz	9,f
  2867  0623  2E21               	goto	u1175
  2868  0624  0833               	movf	??_can_send,w
  2869  0625  3E80               	addlw	128
  2870  0626  00B4               	movwf	??_can_send+1
  2871  0627  0834               	movf	??_can_send+1,w
  2872  0628  00BD               	movwf	can_send@txb_ctrl_buf
  2873                           
  2874                           ;main.c: 193: bytes_written = SPI_send(txb_ctrl_buf, 1, txb_ctrl_buf);
  2875  0629  01F8               	clrf	SPI_send@len
  2876  062A  0AF8               	incf	SPI_send@len,f
  2877  062B  303D               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2878  062C  00B3               	movwf	??_can_send
  2879  062D  0833               	movf	??_can_send,w
  2880  062E  00F9               	movwf	SPI_send@rbuf
  2881  062F  303D               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2882  0630  3182  224F  3185   	fcall	_SPI_send
  2883  0633  0020               	movlb	0	; select bank0
  2884  0634  00B4               	movwf	??_can_send+1
  2885  0635  0834               	movf	??_can_send+1,w
  2886  0636  00BB               	movwf	can_send@bytes_written
  2887                           
  2888                           ;main.c: 194: if (bytes_written == 1) {
  2889  0637  033B               	decf	can_send@bytes_written,w
  2890  0638  1D03               	btfss	3,2
  2891  0639  2E3C               	goto	l1668
  2892                           
  2893                           ;main.c: 195: return 1;
  2894  063A  3001               	movlw	1
  2895  063B  0008               	return
  2896  063C                     l1668:	
  2897                           
  2898                           ;main.c: 196: }
  2899                           ;main.c: 197: }
  2900                           ;main.c: 198: return 0;
  2901  063C  3000               	movlw	0
  2902  063D  0008               	return
  2903  063E                     __end_of_can_send:	
  2904                           
  2905                           	psect	text7
  2906  063E                     __ptext7:	
  2907 ;; *************** function _printf *****************
  2908 ;; Defined at:
  2909 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  f               2    8[COMMON] PTR const unsigned char 
  2912 ;;		 -> STR_15(25), STR_14(23), STR_13(24), STR_12(22), 
  2913 ;;		 -> STR_11(3), STR_10(13), STR_9(13), STR_8(16), 
  2914 ;;		 -> STR_7(16), STR_6(22), STR_5(15), STR_4(16), 
  2915 ;;		 -> STR_3(16), STR_2(15), STR_1(20), 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  idx             1    4[BANK0 ] unsigned char 
  2918 ;;  tmpval          4    0        struct .
  2919 ;;  width           2   14[BANK0 ] int 
  2920 ;;  len             2   12[BANK0 ] unsigned int 
  2921 ;;  cp              2    9[BANK0 ] PTR const unsigned char 
  2922 ;;		 -> STR_16(7), printf@c(1), buf(9), 
  2923 ;;  val             2    6[BANK0 ] unsigned int 
  2924 ;;  c               1   16[BANK0 ] char 
  2925 ;;  ap              1   11[BANK0 ] PTR void [1]
  2926 ;;		 -> ?_printf(2), 
  2927 ;;  prec            1    8[BANK0 ] char 
  2928 ;;  flag            1    5[BANK0 ] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  2    8[COMMON] int 
  2931 ;; Registers used:
  2932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2938 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2939 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2940 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2941 ;;      Totals:         6      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2942 ;;Total ram usage:       23 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    2
  2945 ;; This function calls:
  2946 ;;		___lwdiv
  2947 ;;		___wmul
  2948 ;;		_isdigit
  2949 ;;		_putch
  2950 ;; This function is called by:
  2951 ;;		_set_sid
  2952 ;;		_can_start
  2953 ;;		_can_receive
  2954 ;;		_can_send
  2955 ;;		_can_status_check
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function _printf
  2962  063E                     _printf:	
  2963                           
  2964                           ;doprnt.c: 466: va_list ap;
  2965                           ;doprnt.c: 499: signed char c;
  2966                           ;doprnt.c: 501: int width;
  2967                           ;doprnt.c: 506: signed char prec;
  2968                           ;doprnt.c: 508: unsigned char flag;
  2969                           ;doprnt.c: 523: union {
  2970                           ;doprnt.c: 524: unsigned long vd;
  2971                           ;doprnt.c: 525: double integ;
  2972                           ;doprnt.c: 526: } tmpval;
  2973                           ;doprnt.c: 528: unsigned int val;
  2974                           ;doprnt.c: 529: unsigned len;
  2975                           ;doprnt.c: 530: const char * cp;
  2976                           ;doprnt.c: 533: *ap = __va_start();
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2980  063E  307A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2981  063F  0020               	movlb	0	; select bank0
  2982  0640  00A0               	movwf	??_printf
  2983  0641  0820               	movf	??_printf,w
  2984  0642  00AB               	movwf	printf@ap
  2985  0643                     l1500:	
  2986                           ;doprnt.c: 536: while(c = *f++) {
  2987                           
  2988  0643  0879               	movf	printf@f+1,w
  2989  0644  0020               	movlb	0	; select bank0
  2990  0645  00A1               	movwf	??_printf+1
  2991  0646  0878               	movf	printf@f,w
  2992  0647  00A0               	movwf	??_printf
  2993  0648  0AF8               	incf	printf@f,f
  2994  0649  1903               	skipnz
  2995  064A  0AF9               	incf	printf@f+1,f
  2996  064B  0820               	movf	??_printf,w
  2997  064C  0084               	movwf	4
  2998  064D  0821               	movf	??_printf+1,w
  2999  064E  0085               	movwf	5
  3000  064F  0800               	movf	0,w	;code access
  3001  0650  00A2               	movwf	??_printf+2
  3002  0651  0822               	movf	??_printf+2,w
  3003  0652  00B0               	movwf	printf@c
  3004  0653  0830               	movf	printf@c,w
  3005  0654  1903               	btfsc	3,2
  3006  0655  0008               	return
  3007                           
  3008                           ;doprnt.c: 538: if(c != '%')
  3009  0656  3025               	movlw	37
  3010  0657  0630               	xorwf	printf@c,w
  3011  0658  1903               	btfsc	3,2
  3012  0659  2E5F               	goto	l1392
  3013                           
  3014                           ;doprnt.c: 540: {
  3015                           ;doprnt.c: 541: (putch(c) );
  3016  065A  0830               	movf	printf@c,w
  3017  065B  3181  21CB  3186   	fcall	_putch
  3018                           
  3019                           ;doprnt.c: 542: continue;
  3020  065E  2E43               	goto	l1500
  3021  065F                     l1392:	
  3022                           
  3023                           ;doprnt.c: 543: }
  3024                           ;doprnt.c: 546: width = 0;
  3025  065F  0020               	movlb	0	; select bank0
  3026  0660  01AE               	clrf	printf@width
  3027  0661  01AF               	clrf	printf@width+1
  3028                           
  3029                           ;doprnt.c: 548: flag = 0;
  3030  0662  01A5               	clrf	printf@flag
  3031                           
  3032                           ;doprnt.c: 551: switch(*f) {
  3033                           
  3034                           ;doprnt.c: 550: for(;;) {
  3035  0663  2E6A               	goto	l1398
  3036  0664                     l257:	
  3037                           ;doprnt.c: 579: case '0':
  3038                           
  3039                           
  3040                           ;doprnt.c: 580: flag |= 0x04;
  3041  0664  0020               	movlb	0	; select bank0
  3042  0665  1525               	bsf	printf@flag,2
  3043                           
  3044                           ;doprnt.c: 581: f++;
  3045  0666  3001               	movlw	1
  3046  0667  07F8               	addwf	printf@f,f
  3047  0668  3000               	movlw	0
  3048  0669  3DF9               	addwfc	printf@f+1,f
  3049  066A                     l1398:	
  3050                           ;doprnt.c: 584: }
  3051                           
  3052                           ;doprnt.c: 582: continue;
  3053                           
  3054  066A  0878               	movf	printf@f,w
  3055  066B  0084               	movwf	4
  3056  066C  0879               	movf	printf@f+1,w
  3057  066D  0085               	movwf	5
  3058  066E  0800               	movf	0,w	;code access
  3059                           
  3060                           ; Switch size 1, requested type "space"
  3061                           ; Number of cases is 1, Range of values is 48 to 48
  3062                           ; switch strategies available:
  3063                           ; Name         Instructions Cycles
  3064                           ; simple_byte            4     3 (average)
  3065                           ; direct_byte           11     9 (fixed)
  3066                           ; jumptable            263     9 (fixed)
  3067                           ;	Chosen strategy is simple_byte
  3068  066F  3A30               	xorlw	48	; case 48
  3069  0670  1903               	skipnz
  3070  0671  2E64               	goto	l257
  3071  0672  2E73               	goto	l1400
  3072  0673                     l1400:	
  3073                           ;doprnt.c: 586: }
  3074                           
  3075                           ;doprnt.c: 585: break;
  3076                           
  3077                           
  3078                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3079  0673  0878               	movf	printf@f,w
  3080  0674  0084               	movwf	4
  3081  0675  0879               	movf	printf@f+1,w
  3082  0676  0085               	movwf	5
  3083  0677  0800               	movf	0,w	;code access
  3084  0678  3182  221B  3186   	fcall	_isdigit
  3085  067B  1C03               	btfss	3,0
  3086  067C  2F1D               	goto	l1452
  3087                           
  3088                           ;doprnt.c: 598: width = 0;
  3089  067D  0020               	movlb	0	; select bank0
  3090  067E  01AE               	clrf	printf@width
  3091  067F  01AF               	clrf	printf@width+1
  3092  0680                     l1404:	
  3093                           ;doprnt.c: 599: do {
  3094                           
  3095                           
  3096                           ;doprnt.c: 600: width *= 10;
  3097  0680  300A               	movlw	10
  3098  0681  00F0               	movwf	___wmul@multiplier
  3099  0682  3000               	movlw	0
  3100  0683  00F1               	movwf	___wmul@multiplier+1
  3101  0684  0020               	movlb	0	; select bank0
  3102  0685  082F               	movf	printf@width+1,w
  3103  0686  00F3               	movwf	___wmul@multiplicand+1
  3104  0687  082E               	movf	printf@width,w
  3105  0688  00F2               	movwf	___wmul@multiplicand
  3106  0689  3182  2268  3186   	fcall	___wmul
  3107  068C  0871               	movf	?___wmul+1,w
  3108  068D  0020               	movlb	0	; select bank0
  3109  068E  00AF               	movwf	printf@width+1
  3110  068F  0870               	movf	?___wmul,w
  3111  0690  00AE               	movwf	printf@width
  3112                           
  3113                           ;doprnt.c: 601: width += *f++ - '0';
  3114  0691  0878               	movf	printf@f,w
  3115  0692  0084               	movwf	4
  3116  0693  0879               	movf	printf@f+1,w
  3117  0694  0085               	movwf	5
  3118  0695  0800               	movf	0,w	;code access
  3119  0696  3ED0               	addlw	208
  3120  0697  00A0               	movwf	??_printf
  3121  0698  30FF               	movlw	255
  3122  0699  1803               	skipnc
  3123  069A  3000               	movlw	0
  3124  069B  00A1               	movwf	??_printf+1
  3125  069C  0820               	movf	??_printf,w
  3126  069D  07AE               	addwf	printf@width,f
  3127  069E  0821               	movf	??_printf+1,w
  3128  069F  3DAF               	addwfc	printf@width+1,f
  3129  06A0  3001               	movlw	1
  3130  06A1  07F8               	addwf	printf@f,f
  3131  06A2  3000               	movlw	0
  3132  06A3  3DF9               	addwfc	printf@f+1,f
  3133                           
  3134                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3135  06A4  0878               	movf	printf@f,w
  3136  06A5  0084               	movwf	4
  3137  06A6  0879               	movf	printf@f+1,w
  3138  06A7  0085               	movwf	5
  3139  06A8  0800               	movf	0,w	;code access
  3140  06A9  3182  221B  3186   	fcall	_isdigit
  3141  06AC  1C03               	btfss	3,0
  3142  06AD  2F1D               	goto	l1452
  3143  06AE  2E80               	goto	l1404
  3144  06AF                     l1412:	
  3145                           ;doprnt.c: 728: case 's':
  3146                           
  3147                           ;doprnt.c: 723: break;
  3148                           
  3149                           ;doprnt.c: 718: case 'x':
  3150                           
  3151                           ;doprnt.c: 638: goto alldone;
  3152                           
  3153                           ;doprnt.c: 637: case 0:
  3154                           
  3155                           ;doprnt.c: 608: }
  3156                           ;doprnt.c: 635: switch(c = *f++) {
  3157                           
  3158                           
  3159                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3160  06AF  0020               	movlb	0	; select bank0
  3161  06B0  082B               	movf	printf@ap,w
  3162  06B1  0086               	movwf	6
  3163  06B2  0187               	clrf	7
  3164  06B3  0801               	movf	1,w
  3165  06B4  00A9               	movwf	printf@cp
  3166  06B5  3000               	movlw	0
  3167  06B6  00AA               	movwf	printf@cp+1
  3168  06B7  3001               	movlw	1
  3169  06B8  00A0               	movwf	??_printf
  3170  06B9  0820               	movf	??_printf,w
  3171  06BA  07AB               	addwf	printf@ap,f
  3172                           
  3173                           ;doprnt.c: 740: if(!cp)
  3174  06BB  0829               	movf	printf@cp,w
  3175  06BC  042A               	iorwf	printf@cp+1,w
  3176  06BD  1D03               	btfss	3,2
  3177  06BE  2EC3               	goto	l1420
  3178                           
  3179                           ;doprnt.c: 741: cp = "(null)";
  3180  06BF  30EC               	movlw	low (STR_16| (0+32768))
  3181  06C0  00A9               	movwf	printf@cp
  3182  06C1  3088               	movlw	high (STR_16| (0+32768))
  3183  06C2  00AA               	movwf	printf@cp+1
  3184  06C3                     l1420:	
  3185                           
  3186                           ;doprnt.c: 745: len = 0;
  3187  06C3  01AC               	clrf	printf@len
  3188  06C4  01AD               	clrf	printf@len+1
  3189  06C5                     l1424:	
  3190                           ;doprnt.c: 746: while(cp[len])
  3191                           
  3192  06C5  0829               	movf	printf@cp,w
  3193  06C6  072C               	addwf	printf@len,w
  3194  06C7  0084               	movwf	4
  3195  06C8  082A               	movf	printf@cp+1,w
  3196  06C9  3D2D               	addwfc	printf@len+1,w
  3197  06CA  0085               	movwf	5
  3198  06CB  0012               	moviw fsr0++
  3199  06CC  1903               	btfsc	3,2
  3200  06CD  2ED3               	goto	l1426
  3201                           
  3202                           ;doprnt.c: 747: len++;
  3203  06CE  3001               	movlw	1
  3204  06CF  07AC               	addwf	printf@len,f
  3205  06D0  3000               	movlw	0
  3206  06D1  3DAD               	addwfc	printf@len+1,f
  3207  06D2  2EC5               	goto	l1424
  3208  06D3                     l1426:	
  3209                           ;doprnt.c: 750: dostring:
  3210                           
  3211                           
  3212                           ;doprnt.c: 757: if(width > len)
  3213  06D3  082F               	movf	printf@width+1,w
  3214  06D4  022D               	subwf	printf@len+1,w
  3215  06D5  1D03               	skipz
  3216  06D6  2ED9               	goto	u955
  3217  06D7  082E               	movf	printf@width,w
  3218  06D8  022C               	subwf	printf@len,w
  3219  06D9                     u955:	
  3220  06D9  1803               	skipnc
  3221  06DA  2EE0               	goto	l1430
  3222                           
  3223                           ;doprnt.c: 758: width -= len;
  3224  06DB  082C               	movf	printf@len,w
  3225  06DC  02AE               	subwf	printf@width,f
  3226  06DD  082D               	movf	printf@len+1,w
  3227  06DE  3BAF               	subwfb	printf@width+1,f
  3228  06DF  2EE2               	goto	l1434
  3229  06E0                     l1430:	
  3230                           
  3231                           ;doprnt.c: 759: else
  3232                           ;doprnt.c: 760: width = 0;
  3233  06E0  01AE               	clrf	printf@width
  3234  06E1  01AF               	clrf	printf@width+1
  3235  06E2                     l1434:	
  3236                           ;doprnt.c: 764: while(width--)
  3237                           
  3238  06E2  30FF               	movlw	255
  3239  06E3  0020               	movlb	0	; select bank0
  3240  06E4  07AE               	addwf	printf@width,f
  3241  06E5  30FF               	movlw	255
  3242  06E6  3DAF               	addwfc	printf@width+1,f
  3243  06E7  0A2E               	incf	printf@width,w
  3244  06E8  1903               	btfsc	3,2
  3245  06E9  0A2F               	incf	printf@width+1,w
  3246  06EA  1903               	btfsc	3,2
  3247  06EB  2EFE               	goto	l1440
  3248                           
  3249                           ;doprnt.c: 765: (putch(' ') );
  3250  06EC  3020               	movlw	32
  3251  06ED  3181  21CB  3186   	fcall	_putch
  3252  06F0  2EE2               	goto	l1434
  3253  06F1                     l1436:	
  3254                           ;doprnt.c: 767: while(len--)
  3255                           
  3256                           
  3257                           ;doprnt.c: 768: (putch(*cp++) );
  3258  06F1  0829               	movf	printf@cp,w
  3259  06F2  0084               	movwf	4
  3260  06F3  082A               	movf	printf@cp+1,w
  3261  06F4  0085               	movwf	5
  3262  06F5  0800               	movf	0,w	;code access
  3263  06F6  3181  21CB  3186   	fcall	_putch
  3264  06F9  3001               	movlw	1
  3265  06FA  0020               	movlb	0	; select bank0
  3266  06FB  07A9               	addwf	printf@cp,f
  3267  06FC  3000               	movlw	0
  3268  06FD  3DAA               	addwfc	printf@cp+1,f
  3269  06FE                     l1440:	
  3270  06FE  3001               	movlw	1
  3271  06FF  02AC               	subwf	printf@len,f
  3272  0700  3000               	movlw	0
  3273  0701  3BAD               	subwfb	printf@len+1,f
  3274  0702  0A2C               	incf	printf@len,w
  3275  0703  1D03               	skipz
  3276  0704  2EF1               	goto	l1436
  3277  0705  0A2D               	incf	printf@len+1,w
  3278  0706  1903               	btfsc	3,2
  3279  0707  2E43               	goto	l1500
  3280  0708  2EF1               	goto	l1436
  3281  0709                     l1442:	
  3282                           ;doprnt.c: 784: case 'c':
  3283                           
  3284                           ;doprnt.c: 774: continue;
  3285                           
  3286                           
  3287                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3288  0709  082B               	movf	printf@ap,w
  3289  070A  0086               	movwf	6
  3290  070B  0187               	clrf	7
  3291  070C  0801               	movf	1,w
  3292  070D  00A0               	movwf	??_printf
  3293  070E  0820               	movf	??_printf,w
  3294  070F  00B0               	movwf	printf@c
  3295  0710  3002               	movlw	2
  3296  0711  00A0               	movwf	??_printf
  3297  0712  0820               	movf	??_printf,w
  3298  0713  07AB               	addwf	printf@ap,f
  3299  0714                     l1446:	
  3300                           ;doprnt.c: 802: default:
  3301                           
  3302                           
  3303                           ;doprnt.c: 805: cp = (char *)&c;
  3304  0714  3030               	movlw	low printf@c
  3305  0715  00A9               	movwf	printf@cp
  3306  0716  3000               	movlw	high printf@c
  3307  0717  00AA               	movwf	printf@cp+1
  3308                           
  3309                           ;doprnt.c: 806: len = 1;
  3310  0718  3001               	movlw	1
  3311  0719  00AC               	movwf	printf@len
  3312  071A  3000               	movlw	0
  3313  071B  00AD               	movwf	printf@len+1
  3314                           
  3315                           ;doprnt.c: 807: goto dostring;
  3316  071C  2ED3               	goto	l1426
  3317  071D                     l1452:	
  3318                           ;doprnt.c: 822: }
  3319                           
  3320  071D  0879               	movf	printf@f+1,w
  3321  071E  0020               	movlb	0	; select bank0
  3322  071F  00A1               	movwf	??_printf+1
  3323  0720  0878               	movf	printf@f,w
  3324  0721  00A0               	movwf	??_printf
  3325  0722  0AF8               	incf	printf@f,f
  3326  0723  1903               	skipnz
  3327  0724  0AF9               	incf	printf@f+1,f
  3328  0725  0820               	movf	??_printf,w
  3329  0726  0084               	movwf	4
  3330  0727  0821               	movf	??_printf+1,w
  3331  0728  0085               	movwf	5
  3332  0729  0800               	movf	0,w	;code access
  3333  072A  00B0               	movwf	printf@c
  3334                           
  3335                           ; Switch size 1, requested type "space"
  3336                           ; Number of cases is 4, Range of values is 0 to 120
  3337                           ; switch strategies available:
  3338                           ; Name         Instructions Cycles
  3339                           ; simple_byte           13     7 (average)
  3340                           ; direct_byte          248     6 (fixed)
  3341                           ; jumptable            260     6 (fixed)
  3342                           ;	Chosen strategy is simple_byte
  3343  072B  3A00               	xorlw	0	; case 0
  3344  072C  1903               	skipnz
  3345  072D  2FE1               	goto	l302
  3346  072E  3A63               	xorlw	99	; case 99
  3347  072F  1903               	skipnz
  3348  0730  2F09               	goto	l1442
  3349  0731  3A10               	xorlw	16	; case 115
  3350  0732  1903               	skipnz
  3351  0733  2EAF               	goto	l1412
  3352  0734  3A0B               	xorlw	11	; case 120
  3353  0735  1903               	skipnz
  3354  0736  2F38               	goto	l1454
  3355  0737  2F14               	goto	l1446
  3356  0738                     l1454:	
  3357                           
  3358                           ;doprnt.c: 1273: {
  3359                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3360  0738  0020               	movlb	0	; select bank0
  3361  0739  082B               	movf	printf@ap,w
  3362  073A  0086               	movwf	6
  3363  073B  0187               	clrf	7
  3364  073C  3F40               	moviw [0]fsr1
  3365  073D  00A6               	movwf	printf@val
  3366  073E  3F41               	moviw [1]fsr1
  3367  073F  00A7               	movwf	printf@val+1
  3368  0740  3002               	movlw	2
  3369  0741  00A0               	movwf	??_printf
  3370  0742  0820               	movf	??_printf,w
  3371  0743  07AB               	addwf	printf@ap,f
  3372                           
  3373                           ;doprnt.c: 1287: }
  3374                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3375  0744  01B0               	clrf	printf@c
  3376  0745  0AB0               	incf	printf@c,f
  3377  0746  3004               	movlw	4
  3378  0747  0630               	xorwf	printf@c,w
  3379  0748  1903               	btfsc	3,2
  3380  0749  2F69               	goto	l1470
  3381  074A                     l1464:	
  3382                           
  3383                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3384  074A  0830               	movf	printf@c,w
  3385  074B  00A0               	movwf	??_printf
  3386  074C  01A1               	clrf	??_printf+1
  3387  074D  35A0               	lslf	??_printf,f
  3388  074E  0DA1               	rlf	??_printf+1,f
  3389  074F  30E4               	movlw	low (_hexpowers| (0+32768))
  3390  0750  0720               	addwf	??_printf,w
  3391  0751  0084               	movwf	4
  3392  0752  3088               	movlw	high (_hexpowers| (0+32768))
  3393  0753  3D21               	addwfc	??_printf+1,w
  3394  0754  0085               	movwf	5
  3395  0755  3F00               	moviw [0]fsr0
  3396  0756  00A2               	movwf	??_printf+2
  3397  0757  3F01               	moviw [1]fsr0
  3398  0758  00A3               	movwf	??_printf+3
  3399  0759  0823               	movf	??_printf+3,w
  3400  075A  0227               	subwf	printf@val+1,w
  3401  075B  1D03               	skipz
  3402  075C  2F5F               	goto	u995
  3403  075D  0822               	movf	??_printf+2,w
  3404  075E  0226               	subwf	printf@val,w
  3405  075F                     u995:	
  3406  075F  1C03               	btfss	3,0
  3407  0760  2F69               	goto	l1470
  3408                           
  3409                           ;doprnt.c: 1318: break;
  3410  0761  3001               	movlw	1
  3411  0762  00A0               	movwf	??_printf
  3412  0763  0820               	movf	??_printf,w
  3413  0764  07B0               	addwf	printf@c,f
  3414  0765  3004               	movlw	4
  3415  0766  0630               	xorwf	printf@c,w
  3416  0767  1D03               	btfss	3,2
  3417  0768  2F4A               	goto	l1464
  3418  0769                     l1470:	
  3419                           
  3420                           ;doprnt.c: 1381: if(width > c)
  3421  0769  0830               	movf	printf@c,w
  3422  076A  00A0               	movwf	??_printf
  3423  076B  01A1               	clrf	??_printf+1
  3424  076C  1BA0               	btfsc	??_printf,7
  3425  076D  03A1               	decf	??_printf+1,f
  3426  076E  0821               	movf	??_printf+1,w
  3427  076F  3A80               	xorlw	128
  3428  0770  00A2               	movwf	??_printf+2
  3429  0771  082F               	movf	printf@width+1,w
  3430  0772  3A80               	xorlw	128
  3431  0773  0222               	subwf	??_printf+2,w
  3432  0774  1D03               	skipz
  3433  0775  2F78               	goto	u1015
  3434  0776  082E               	movf	printf@width,w
  3435  0777  0220               	subwf	??_printf,w
  3436  0778                     u1015:	
  3437  0778  1803               	skipnc
  3438  0779  2F85               	goto	l1474
  3439                           
  3440                           ;doprnt.c: 1382: width -= c;
  3441  077A  0020               	movlb	0	; select bank0
  3442  077B  0830               	movf	printf@c,w
  3443  077C  00A0               	movwf	??_printf
  3444  077D  01A1               	clrf	??_printf+1
  3445  077E  1BA0               	btfsc	??_printf,7
  3446  077F  03A1               	decf	??_printf+1,f
  3447  0780  0820               	movf	??_printf,w
  3448  0781  02AE               	subwf	printf@width,f
  3449  0782  0821               	movf	??_printf+1,w
  3450  0783  3BAF               	subwfb	printf@width+1,f
  3451  0784  2F88               	goto	l1476
  3452  0785                     l1474:	
  3453                           
  3454                           ;doprnt.c: 1383: else
  3455                           ;doprnt.c: 1384: width = 0;
  3456  0785  0020               	movlb	0	; select bank0
  3457  0786  01AE               	clrf	printf@width
  3458  0787  01AF               	clrf	printf@width+1
  3459  0788                     l1476:	
  3460                           
  3461                           ;doprnt.c: 1387: if(flag & 0x04) {
  3462  0788  1D25               	btfss	printf@flag,2
  3463  0789  2F98               	goto	l1484
  3464  078A                     L5:	
  3465                           
  3466                           ;doprnt.c: 1415: if(width)
  3467  078A  082E               	movf	printf@width,w
  3468  078B  042F               	iorwf	printf@width+1,w
  3469  078C  1903               	btfsc	3,2
  3470  078D  2FA9               	goto	l1490
  3471                           
  3472                           ;doprnt.c: 1417: (putch('0') );
  3473                           
  3474                           ;doprnt.c: 1416: do
  3475  078E  3030               	movlw	48
  3476  078F  3181  21CB  3186   	fcall	_putch
  3477                           
  3478                           ;doprnt.c: 1418: while(--width);
  3479  0792  30FF               	movlw	255
  3480  0793  0020               	movlb	0	; select bank0
  3481  0794  07AE               	addwf	printf@width,f
  3482  0795  30FF               	movlw	255
  3483  0796  3DAF               	addwfc	printf@width+1,f
  3484  0797  2F8A               	goto	L5
  3485  0798                     l1484:	
  3486                           ;doprnt.c: 1420: } else
  3487                           
  3488                           
  3489                           ;doprnt.c: 1422: {
  3490                           ;doprnt.c: 1424: if(width
  3491                           ;doprnt.c: 1428: )
  3492  0798  082E               	movf	printf@width,w
  3493  0799  042F               	iorwf	printf@width+1,w
  3494  079A  1903               	btfsc	3,2
  3495  079B  2FA9               	goto	l1490
  3496  079C                     l1486:	
  3497                           ;doprnt.c: 1429: do
  3498                           
  3499                           
  3500                           ;doprnt.c: 1430: (putch(' ') );
  3501  079C  3020               	movlw	32
  3502  079D  3181  21CB  3186   	fcall	_putch
  3503                           
  3504                           ;doprnt.c: 1431: while(--width);
  3505  07A0  30FF               	movlw	255
  3506  07A1  0020               	movlb	0	; select bank0
  3507  07A2  07AE               	addwf	printf@width,f
  3508  07A3  30FF               	movlw	255
  3509  07A4  3DAF               	addwfc	printf@width+1,f
  3510  07A5  082E               	movf	printf@width,w
  3511  07A6  042F               	iorwf	printf@width+1,w
  3512  07A7  1D03               	btfss	3,2
  3513  07A8  2F9C               	goto	l1486
  3514  07A9                     l1490:	
  3515                           
  3516                           ;doprnt.c: 1469: }
  3517                           ;doprnt.c: 1472: prec = c;
  3518  07A9  0830               	movf	printf@c,w
  3519  07AA  00A0               	movwf	??_printf
  3520  07AB  0820               	movf	??_printf,w
  3521  07AC  00A8               	movwf	printf@prec
  3522  07AD                     l1498:	
  3523                           ;doprnt.c: 1474: while(prec--) {
  3524                           
  3525  07AD  30FF               	movlw	255
  3526  07AE  0020               	movlb	0	; select bank0
  3527  07AF  00A0               	movwf	??_printf
  3528  07B0  0820               	movf	??_printf,w
  3529  07B1  07A8               	addwf	printf@prec,f
  3530  07B2  0A28               	incf	printf@prec,w
  3531  07B3  1903               	btfsc	3,2
  3532  07B4  2E43               	goto	l1500
  3533                           
  3534                           ;doprnt.c: 1478: {
  3535                           ;doprnt.c: 1499: {
  3536                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3537  07B5  0828               	movf	printf@prec,w
  3538  07B6  00A0               	movwf	??_printf
  3539  07B7  01A1               	clrf	??_printf+1
  3540  07B8  35A0               	lslf	??_printf,f
  3541  07B9  0DA1               	rlf	??_printf+1,f
  3542  07BA  30E4               	movlw	low (_hexpowers| (0+32768))
  3543  07BB  0720               	addwf	??_printf,w
  3544  07BC  0084               	movwf	4
  3545  07BD  3088               	movlw	high (_hexpowers| (0+32768))
  3546  07BE  3D21               	addwfc	??_printf+1,w
  3547  07BF  0085               	movwf	5
  3548  07C0  3F00               	moviw [0]fsr0
  3549  07C1  00F0               	movwf	___lwdiv@divisor
  3550  07C2  3F01               	moviw [1]fsr0
  3551  07C3  00F1               	movwf	___lwdiv@divisor+1
  3552  07C4  0827               	movf	printf@val+1,w
  3553  07C5  00F3               	movwf	___lwdiv@dividend+1
  3554  07C6  0826               	movf	printf@val,w
  3555  07C7  00F2               	movwf	___lwdiv@dividend
  3556  07C8  3182  22AF  3186   	fcall	___lwdiv
  3557  07CB  0870               	movf	?___lwdiv,w
  3558  07CC  390F               	andlw	15
  3559  07CD  0020               	movlb	0	; select bank0
  3560  07CE  00A2               	movwf	??_printf+2
  3561  07CF  0822               	movf	??_printf+2,w
  3562  07D0  00A4               	movwf	printf@idx
  3563                           
  3564                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3565  07D1  0824               	movf	printf@idx,w
  3566  07D2  3E5B               	addlw	low (STR_17| (0+32768))
  3567  07D3  0084               	movwf	4
  3568  07D4  3088               	movlw	high (STR_17| (0+32768))
  3569  07D5  1803               	skipnc
  3570  07D6  3E01               	addlw	1
  3571  07D7  0085               	movwf	5
  3572  07D8  0800               	movf	0,w	;code access
  3573  07D9  00A0               	movwf	??_printf
  3574  07DA  0820               	movf	??_printf,w
  3575  07DB  00B0               	movwf	printf@c
  3576                           
  3577                           ;doprnt.c: 1508: }
  3578                           ;doprnt.c: 1523: }
  3579                           ;doprnt.c: 1524: (putch(c) );
  3580  07DC  0830               	movf	printf@c,w
  3581  07DD  3181  21CB  3186   	fcall	_putch
  3582  07E0  2FAD               	goto	l1498
  3583  07E1                     l302:	
  3584                           ;doprnt.c: 1540: return 0;
  3585                           ;	Return value of _printf is never used
  3586                           
  3587                           ;doprnt.c: 1525: }
  3588                           ;doprnt.c: 1533: }
  3589                           ;doprnt.c: 1535: alldone:
  3590                           
  3591  07E1  0008               	return
  3592  07E2                     __end_of_printf:	
  3593                           
  3594                           	psect	text8
  3595  01CB                     __ptext8:	
  3596 ;; *************** function _putch *****************
  3597 ;; Defined at:
  3598 ;;		line 107 in file "mcc_generated_files/eusart.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  txData          1    wreg     unsigned char 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  txData          1    1[COMMON] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, pclath, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3615 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3616 ;;Total ram usage:        1 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    1
  3619 ;; This function calls:
  3620 ;;		_EUSART_Write
  3621 ;; This function is called by:
  3622 ;;		_printf
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           
  3627                           ;psect for function _putch
  3628  01CB                     _putch:	
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  3632                           ;putch@txData stored from wreg
  3633  01CB  00F1               	movwf	putch@txData
  3634                           
  3635                           ;eusart.c: 109: EUSART_Write(txData);
  3636  01CC  0871               	movf	putch@txData,w
  3637  01CD  3181  21EA         	fcall	_EUSART_Write
  3638  01CF  0008               	return
  3639  01D0                     __end_of_putch:	
  3640                           
  3641                           	psect	text9
  3642  01EA                     __ptext9:	
  3643 ;; *************** function _EUSART_Write *****************
  3644 ;; Defined at:
  3645 ;;		line 93 in file "mcc_generated_files/eusart.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  txData          1    wreg     unsigned char 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  txData          1    0[COMMON] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3663 ;;Total ram usage:        1 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_putch
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           
  3673                           ;psect for function _EUSART_Write
  3674  01EA                     _EUSART_Write:	
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _EUSART_Write: [wreg]
  3678                           ;EUSART_Write@txData stored from wreg
  3679  01EA  00F0               	movwf	EUSART_Write@txData
  3680  01EB                     l58:	
  3681                           ;eusart.c: 96: {
  3682                           
  3683                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  3684                           
  3685  01EB  0020               	movlb	0	; select bank0
  3686  01EC  1E11               	btfss	17,4	;volatile
  3687  01ED  29EB               	goto	l58
  3688                           
  3689                           ;eusart.c: 97: }
  3690                           ;eusart.c: 99: TXREG = txData;
  3691  01EE  0870               	movf	EUSART_Write@txData,w
  3692  01EF  0023               	movlb	3	; select bank3
  3693  01F0  009A               	movwf	26	;volatile
  3694  01F1  0008               	return
  3695  01F2                     __end_of_EUSART_Write:	
  3696                           
  3697                           	psect	text10
  3698  02AF                     __ptext10:	
  3699 ;; *************** function ___lwdiv *****************
  3700 ;; Defined at:
  3701 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  divisor         2    0[COMMON] unsigned int 
  3704 ;;  dividend        2    2[COMMON] unsigned int 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  quotient        2    5[COMMON] unsigned int 
  3707 ;;  counter         1    7[COMMON] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  2    0[COMMON] unsigned int 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;Total ram usage:        8 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_printf
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function ___lwdiv
  3732  02AF                     ___lwdiv:	
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3736  02AF  01F5               	clrf	___lwdiv@quotient
  3737  02B0  01F6               	clrf	___lwdiv@quotient+1
  3738  02B1  0870               	movf	___lwdiv@divisor,w
  3739  02B2  0471               	iorwf	___lwdiv@divisor+1,w
  3740  02B3  1903               	btfsc	3,2
  3741  02B4  2ADE               	goto	l1382
  3742  02B5  01F7               	clrf	___lwdiv@counter
  3743  02B6  0AF7               	incf	___lwdiv@counter,f
  3744  02B7                     l1370:	
  3745  02B7  1BF1               	btfsc	___lwdiv@divisor+1,7
  3746  02B8  2AC3               	goto	l1372
  3747  02B9  3001               	movlw	1
  3748  02BA                     u845:	
  3749  02BA  35F0               	lslf	___lwdiv@divisor,f
  3750  02BB  0DF1               	rlf	___lwdiv@divisor+1,f
  3751  02BC  0B89               	decfsz	9,f
  3752  02BD  2ABA               	goto	u845
  3753  02BE  3001               	movlw	1
  3754  02BF  00F4               	movwf	??___lwdiv
  3755  02C0  0874               	movf	??___lwdiv,w
  3756  02C1  07F7               	addwf	___lwdiv@counter,f
  3757  02C2  2AB7               	goto	l1370
  3758  02C3                     l1372:	
  3759  02C3  3001               	movlw	1
  3760  02C4                     u865:	
  3761  02C4  35F5               	lslf	___lwdiv@quotient,f
  3762  02C5  0DF6               	rlf	___lwdiv@quotient+1,f
  3763  02C6  0B89               	decfsz	9,f
  3764  02C7  2AC4               	goto	u865
  3765  02C8  0871               	movf	___lwdiv@divisor+1,w
  3766  02C9  0273               	subwf	___lwdiv@dividend+1,w
  3767  02CA  1D03               	skipz
  3768  02CB  2ACE               	goto	u875
  3769  02CC  0870               	movf	___lwdiv@divisor,w
  3770  02CD  0272               	subwf	___lwdiv@dividend,w
  3771  02CE                     u875:	
  3772  02CE  1C03               	skipc
  3773  02CF  2AD5               	goto	l1378
  3774  02D0  0870               	movf	___lwdiv@divisor,w
  3775  02D1  02F2               	subwf	___lwdiv@dividend,f
  3776  02D2  0871               	movf	___lwdiv@divisor+1,w
  3777  02D3  3BF3               	subwfb	___lwdiv@dividend+1,f
  3778  02D4  1475               	bsf	___lwdiv@quotient,0
  3779  02D5                     l1378:	
  3780  02D5  3001               	movlw	1
  3781  02D6                     u885:	
  3782  02D6  36F1               	lsrf	___lwdiv@divisor+1,f
  3783  02D7  0CF0               	rrf	___lwdiv@divisor,f
  3784  02D8  0B89               	decfsz	9,f
  3785  02D9  2AD6               	goto	u885
  3786  02DA  3001               	movlw	1
  3787  02DB  02F7               	subwf	___lwdiv@counter,f
  3788  02DC  1D03               	btfss	3,2
  3789  02DD  2AC3               	goto	l1372
  3790  02DE                     l1382:	
  3791  02DE  0876               	movf	___lwdiv@quotient+1,w
  3792  02DF  00F1               	movwf	?___lwdiv+1
  3793  02E0  0875               	movf	___lwdiv@quotient,w
  3794  02E1  00F0               	movwf	?___lwdiv
  3795  02E2  0008               	return
  3796  02E3                     __end_of___lwdiv:	
  3797                           
  3798                           	psect	text11
  3799  024F                     __ptext11:	
  3800 ;; *************** function _SPI_send *****************
  3801 ;; Defined at:
  3802 ;;		line 83 in file "main.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  sbuf            1    wreg     PTR unsigned char 
  3805 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3806 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3807 ;;  len             1    8[COMMON] unsigned char 
  3808 ;;  rbuf            1    9[COMMON] PTR unsigned char 
  3809 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3810 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  sbuf            1    1[BANK0 ] PTR unsigned char 
  3813 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3814 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3815 ;;  bytes_writte    1    0[BANK0 ] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      unsigned char 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3827 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;Total ram usage:        7 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		_SPI_Exchange8bitBuffer
  3834 ;; This function is called by:
  3835 ;;		_can_start
  3836 ;;		_can_txf_clear
  3837 ;;		_can_receive
  3838 ;;		_can_send
  3839 ;;		_can_status_check
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           
  3844                           ;psect for function _SPI_send
  3845  024F                     _SPI_send:	
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _SPI_send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3849                           ;SPI_send@sbuf stored from wreg
  3850  024F  0020               	movlb	0	; select bank0
  3851  0250  00A1               	movwf	SPI_send@sbuf
  3852                           
  3853                           ;main.c: 84: LATAbits.LATA4 = 0;
  3854  0251  0022               	movlb	2	; select bank2
  3855  0252  120C               	bcf	12,4	;volatile
  3856                           
  3857                           ;main.c: 85: uint8_t bytes_written = SPI_Exchange8bitBuffer(sbuf, len, rbuf);
  3858  0253  0878               	movf	SPI_send@len,w
  3859  0254  00FA               	movwf	??_SPI_send
  3860  0255  087A               	movf	??_SPI_send,w
  3861  0256  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  3862  0257  0879               	movf	SPI_send@rbuf,w
  3863  0258  00FB               	movwf	??_SPI_send+1
  3864  0259  087B               	movf	??_SPI_send+1,w
  3865  025A  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  3866  025B  0020               	movlb	0	; select bank0
  3867  025C  0821               	movf	SPI_send@sbuf,w
  3868  025D  3183  23A4         	fcall	_SPI_Exchange8bitBuffer
  3869  025F  00FC               	movwf	??_SPI_send+2
  3870  0260  087C               	movf	??_SPI_send+2,w
  3871  0261  0020               	movlb	0	; select bank0
  3872  0262  00A0               	movwf	SPI_send@bytes_written
  3873                           
  3874                           ;main.c: 86: LATAbits.LATA4 = 1;
  3875  0263  0022               	movlb	2	; select bank2
  3876  0264  160C               	bsf	12,4	;volatile
  3877                           
  3878                           ;main.c: 87: return bytes_written;
  3879  0265  0020               	movlb	0	; select bank0
  3880  0266  0820               	movf	SPI_send@bytes_written,w
  3881  0267  0008               	return
  3882  0268                     __end_of_SPI_send:	
  3883                           
  3884                           	psect	text12
  3885  03A4                     __ptext12:	
  3886 ;; *************** function _SPI_Exchange8bitBuffer *****************
  3887 ;; Defined at:
  3888 ;;		line 91 in file "mcc_generated_files/spi.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  dataIn          1    wreg     PTR unsigned char 
  3891 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3892 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3893 ;;  bufLen          1    1[COMMON] unsigned char 
  3894 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  3895 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3896 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  3899 ;;		 -> can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug(3), tx_buf(14), 
  3900 ;;		 -> can_receive@can_int_flag(4), rx_buf(15), can_txf_clear@can_int_flag(4), can_start@can_ctrl_buf(3), 
  3901 ;;  bytesWritten    1    7[COMMON] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      unsigned char 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3911 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;Total ram usage:        7 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    1
  3918 ;; This function calls:
  3919 ;;		_SPI_Exchange8bit
  3920 ;; This function is called by:
  3921 ;;		_SPI_send
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _SPI_Exchange8bitBuffer
  3927  03A4                     _SPI_Exchange8bitBuffer:	
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  3931                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  3932  03A4  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  3933                           
  3934                           ;spi.c: 93: uint8_t bytesWritten = 0;
  3935  03A5  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  3936                           
  3937                           ;spi.c: 95: if(bufLen != 0)
  3938  03A6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  3939  03A7  1903               	btfsc	3,2
  3940  03A8  2BF0               	goto	l1330
  3941                           
  3942                           ;spi.c: 96: {
  3943                           ;spi.c: 97: if(dataIn != (0))
  3944  03A9  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  3945  03AA  1D03               	btfss	3,2
  3946  03AB  2BD2               	goto	l1318
  3947  03AC  2BD7               	goto	l1320
  3948  03AD                     l1310:	
  3949                           ;spi.c: 98: {
  3950                           ;spi.c: 99: while(bytesWritten < bufLen)
  3951                           
  3952                           
  3953                           ;spi.c: 100: {
  3954                           ;spi.c: 101: if(dataOut == (0))
  3955  03AD  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  3956  03AE  1D03               	btfss	3,2
  3957  03AF  2BBB               	goto	l1314
  3958                           
  3959                           ;spi.c: 102: {
  3960                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  3961  03B0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3962  03B1  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  3963  03B2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3964  03B3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3965  03B4  0086               	movwf	6
  3966  03B5  0187               	clrf	7
  3967  03B6  0801               	movf	1,w
  3968  03B7  3181  21F2  3183   	fcall	_SPI_Exchange8bit
  3969                           
  3970                           ;spi.c: 104: }
  3971  03BA  2BCE               	goto	l1316
  3972  03BB                     l1314:	
  3973                           
  3974                           ;spi.c: 105: else
  3975                           ;spi.c: 106: {
  3976                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  3977  03BB  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3978  03BC  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  3979  03BD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  3980  03BE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  3981  03BF  0086               	movwf	6
  3982  03C0  0187               	clrf	7
  3983  03C1  0801               	movf	1,w
  3984  03C2  3181  21F2  3183   	fcall	_SPI_Exchange8bit
  3985  03C5  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  3986  03C6  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3987  03C7  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  3988  03C8  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  3989  03C9  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  3990  03CA  0086               	movwf	6
  3991  03CB  0187               	clrf	7
  3992  03CC  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  3993  03CD  0081               	movwf	1
  3994  03CE                     l1316:	
  3995                           
  3996                           ;spi.c: 108: }
  3997                           ;spi.c: 110: bytesWritten++;
  3998  03CE  3001               	movlw	1
  3999  03CF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4000  03D0  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4001  03D1  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  4002  03D2                     l1318:	
  4003  03D2  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  4004  03D3  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  4005  03D4  1803               	btfsc	3,0
  4006  03D5  2BF0               	goto	l1330
  4007  03D6  2BAD               	goto	l1310
  4008  03D7                     l1320:	
  4009                           ;spi.c: 111: }
  4010                           ;spi.c: 112: }
  4011                           
  4012                           
  4013                           ;spi.c: 113: else
  4014                           ;spi.c: 114: {
  4015                           ;spi.c: 115: if(dataOut != (0))
  4016  03D7  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  4017  03D8  1D03               	btfss	3,2
  4018  03D9  2BEC               	goto	l1328
  4019  03DA  2BF0               	goto	l1330
  4020  03DB                     l1324:	
  4021                           ;spi.c: 116: {
  4022                           ;spi.c: 117: while(bytesWritten < bufLen )
  4023                           
  4024                           
  4025                           ;spi.c: 118: {
  4026                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  4027  03DB  3000               	movlw	0
  4028  03DC  3181  21F2  3183   	fcall	_SPI_Exchange8bit
  4029  03DF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4030  03E0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4031  03E1  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  4032  03E2  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  4033  03E3  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  4034  03E4  0086               	movwf	6
  4035  03E5  0187               	clrf	7
  4036  03E6  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4037  03E7  0081               	movwf	1
  4038                           
  4039                           ;spi.c: 121: bytesWritten++;
  4040  03E8  3001               	movlw	1
  4041  03E9  00F3               	movwf	??_SPI_Exchange8bitBuffer
  4042  03EA  0873               	movf	??_SPI_Exchange8bitBuffer,w
  4043  03EB  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  4044  03EC                     l1328:	
  4045  03EC  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  4046  03ED  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  4047  03EE  1C03               	skipc
  4048  03EF  2BDB               	goto	l1324
  4049  03F0                     l1330:	
  4050                           
  4051                           ;spi.c: 122: }
  4052                           ;spi.c: 123: }
  4053                           ;spi.c: 124: }
  4054                           ;spi.c: 125: }
  4055                           ;spi.c: 127: return bytesWritten;
  4056  03F0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  4057  03F1  0008               	return
  4058  03F2                     __end_of_SPI_Exchange8bitBuffer:	
  4059                           
  4060                           	psect	text13
  4061  01F2                     __ptext13:	
  4062 ;; *************** function _SPI_Exchange8bit *****************
  4063 ;; Defined at:
  4064 ;;		line 77 in file "mcc_generated_files/spi.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  data            1    wreg     unsigned char 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  data            1    0[COMMON] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      unsigned char 
  4071 ;; Registers used:
  4072 ;;		wreg
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;Total ram usage:        1 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_SPI_Exchange8bitBuffer
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _SPI_Exchange8bit
  4093  01F2                     _SPI_Exchange8bit:	
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _SPI_Exchange8bit: [wreg]
  4097                           ;SPI_Exchange8bit@data stored from wreg
  4098  01F2  00F0               	movwf	SPI_Exchange8bit@data
  4099                           
  4100                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  4101  01F3  0024               	movlb	4	; select bank4
  4102  01F4  1395               	bcf	21,7	;volatile
  4103                           
  4104                           ;spi.c: 82: SSP1BUF = data;
  4105  01F5  0870               	movf	SPI_Exchange8bit@data,w
  4106  01F6  0091               	movwf	17	;volatile
  4107  01F7                     l113:	
  4108                           ;spi.c: 85: {
  4109                           
  4110                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  4111                           
  4112  01F7  1C14               	btfss	20,0	;volatile
  4113  01F8  29F7               	goto	l113
  4114                           
  4115                           ;spi.c: 86: }
  4116                           ;spi.c: 88: return (SSP1BUF);
  4117  01F9  0811               	movf	17,w	;volatile
  4118  01FA  0008               	return
  4119  01FB                     __end_of_SPI_Exchange8bit:	
  4120                           
  4121                           	psect	text14
  4122  03F2                     __ptext14:	
  4123 ;; *************** function _atoi *****************
  4124 ;; Defined at:
  4125 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  s               1    wreg     PTR const unsigned char 
  4128 ;;		 -> buf(9), 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  s               1   13[COMMON] PTR const unsigned char 
  4131 ;;		 -> buf(9), 
  4132 ;;  a               2   11[COMMON] int 
  4133 ;;  sign            1   10[COMMON] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  2    6[COMMON] int 
  4136 ;; Registers used:
  4137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;Total ram usage:        8 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    1
  4150 ;; This function calls:
  4151 ;;		___wmul
  4152 ;;		_isdigit
  4153 ;; This function is called by:
  4154 ;;		_main
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function _atoi
  4160  03F2                     _atoi:	
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4164                           ;atoi@s stored from wreg
  4165  03F2  00FD               	movwf	atoi@s
  4166  03F3                     l1700:	
  4167  03F3  087D               	movf	atoi@s,w
  4168  03F4  0086               	movwf	6
  4169  03F5  0187               	clrf	7
  4170  03F6  3020               	movlw	32
  4171  03F7  0601               	xorwf	1,w
  4172  03F8  1D03               	btfss	3,2
  4173  03F9  2BFF               	goto	l1702
  4174  03FA                     l1698:	
  4175  03FA  3001               	movlw	1
  4176  03FB  00F8               	movwf	??_atoi
  4177  03FC  0878               	movf	??_atoi,w
  4178  03FD  07FD               	addwf	atoi@s,f
  4179  03FE  2BF3               	goto	l1700
  4180  03FF                     l1702:	
  4181  03FF  087D               	movf	atoi@s,w
  4182  0400  0086               	movwf	6
  4183  0401  0187               	clrf	7
  4184  0402  3009               	movlw	9
  4185  0403  0601               	xorwf	1,w
  4186  0404  1903               	btfsc	3,2
  4187  0405  2BFA               	goto	l1698
  4188  0406  01FB               	clrf	atoi@a
  4189  0407  01FC               	clrf	atoi@a+1
  4190  0408  01FA               	clrf	atoi@sign
  4191  0409  087D               	movf	atoi@s,w
  4192  040A  0086               	movwf	6
  4193  040B  0187               	clrf	7
  4194  040C  302D               	movlw	45
  4195  040D  0601               	xorwf	1,w
  4196  040E  1D03               	btfss	3,2
  4197  040F  2C15               	goto	l1710
  4198  0410  3001               	movlw	1
  4199  0411  00F8               	movwf	??_atoi
  4200  0412  0878               	movf	??_atoi,w
  4201  0413  07FA               	addwf	atoi@sign,f
  4202  0414  2C1C               	goto	l1716
  4203  0415                     l1710:	
  4204  0415  087D               	movf	atoi@s,w
  4205  0416  0086               	movwf	6
  4206  0417  0187               	clrf	7
  4207  0418  302B               	movlw	43
  4208  0419  0601               	xorwf	1,w
  4209  041A  1D03               	btfss	3,2
  4210  041B  2C20               	goto	l1718
  4211  041C                     l1716:	
  4212  041C  3001               	movlw	1
  4213  041D  00F8               	movwf	??_atoi
  4214  041E  0878               	movf	??_atoi,w
  4215  041F  07FD               	addwf	atoi@s,f
  4216  0420                     l1718:	
  4217  0420  087D               	movf	atoi@s,w
  4218  0421  0086               	movwf	6
  4219  0422  0187               	clrf	7
  4220  0423  0801               	movf	1,w
  4221  0424  3182  221B  3183   	fcall	_isdigit
  4222  0427  1C03               	btfss	3,0
  4223  0428  2C45               	goto	l1720
  4224  0429  087C               	movf	atoi@a+1,w
  4225  042A  00F1               	movwf	___wmul@multiplier+1
  4226  042B  087B               	movf	atoi@a,w
  4227  042C  00F0               	movwf	___wmul@multiplier
  4228  042D  300A               	movlw	10
  4229  042E  00F2               	movwf	___wmul@multiplicand
  4230  042F  3000               	movlw	0
  4231  0430  00F3               	movwf	___wmul@multiplicand+1
  4232  0431  3182  2268  3183   	fcall	___wmul
  4233  0434  087D               	movf	atoi@s,w
  4234  0435  0086               	movwf	6
  4235  0436  0187               	clrf	7
  4236  0437  0801               	movf	1,w
  4237  0438  0770               	addwf	?___wmul,w
  4238  0439  00F8               	movwf	??_atoi
  4239  043A  0871               	movf	?___wmul+1,w
  4240  043B  1803               	skipnc
  4241  043C  0A71               	incf	?___wmul+1,w
  4242  043D  00F9               	movwf	??_atoi+1
  4243  043E  0878               	movf	??_atoi,w
  4244  043F  3ED0               	addlw	208
  4245  0440  00FB               	movwf	atoi@a
  4246  0441  30FF               	movlw	255
  4247  0442  3D79               	addwfc	??_atoi+1,w
  4248  0443  00FC               	movwf	atoi@a+1
  4249  0444  2C1C               	goto	l1716
  4250  0445                     l1720:	
  4251  0445  087A               	movf	atoi@sign,w
  4252  0446  1903               	btfsc	3,2
  4253  0447  2C54               	goto	l1726
  4254  0448  097B               	comf	atoi@a,w
  4255  0449  00F8               	movwf	??_atoi
  4256  044A  097C               	comf	atoi@a+1,w
  4257  044B  00F9               	movwf	??_atoi+1
  4258  044C  0AF8               	incf	??_atoi,f
  4259  044D  1903               	skipnz
  4260  044E  0AF9               	incf	??_atoi+1,f
  4261  044F  0878               	movf	??_atoi,w
  4262  0450  00F6               	movwf	?_atoi
  4263  0451  0879               	movf	??_atoi+1,w
  4264  0452  00F7               	movwf	?_atoi+1
  4265  0453  0008               	return
  4266  0454                     l1726:	
  4267  0454  087C               	movf	atoi@a+1,w
  4268  0455  00F7               	movwf	?_atoi+1
  4269  0456  087B               	movf	atoi@a,w
  4270  0457  00F6               	movwf	?_atoi
  4271  0458  0008               	return
  4272  0459                     __end_of_atoi:	
  4273                           
  4274                           	psect	text15
  4275  021B                     __ptext15:	
  4276 ;; *************** function _isdigit *****************
  4277 ;; Defined at:
  4278 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  c               1    wreg     unsigned char 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  c               1    1[COMMON] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;		None               void
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;Total ram usage:        2 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_printf
  4302 ;;		_atoi
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           
  4307                           ;psect for function _isdigit
  4308  021B                     _isdigit:	
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4312                           ;isdigit@c stored from wreg
  4313  021B  00F1               	movwf	isdigit@c
  4314  021C  01F0               	clrf	_isdigit$613
  4315  021D  303A               	movlw	58
  4316  021E  0271               	subwf	isdigit@c,w
  4317  021F  1803               	skipnc
  4318  0220  2A27               	goto	l1342
  4319  0221  3030               	movlw	48
  4320  0222  0271               	subwf	isdigit@c,w
  4321  0223  1C03               	skipc
  4322  0224  2A27               	goto	l1342
  4323  0225  01F0               	clrf	_isdigit$613
  4324  0226  0AF0               	incf	_isdigit$613,f
  4325  0227                     l1342:	
  4326  0227  0C70               	rrf	_isdigit$613,w
  4327  0228  0008               	return
  4328  0229                     __end_of_isdigit:	
  4329                           
  4330                           	psect	text16
  4331  0268                     __ptext16:	
  4332 ;; *************** function ___wmul *****************
  4333 ;; Defined at:
  4334 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  multiplier      2    0[COMMON] unsigned int 
  4337 ;;  multiplicand    2    2[COMMON] unsigned int 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  product         2    4[COMMON] unsigned int 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2    0[COMMON] unsigned int 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;Total ram usage:        6 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_printf
  4359 ;;		_atoi
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function ___wmul
  4365  0268                     ___wmul:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4369  0268  01F4               	clrf	___wmul@product
  4370  0269  01F5               	clrf	___wmul@product+1
  4371  026A                     l1348:	
  4372  026A  1C70               	btfss	___wmul@multiplier,0
  4373  026B  2A70               	goto	l386
  4374  026C  0872               	movf	___wmul@multiplicand,w
  4375  026D  07F4               	addwf	___wmul@product,f
  4376  026E  0873               	movf	___wmul@multiplicand+1,w
  4377  026F  3DF5               	addwfc	___wmul@product+1,f
  4378  0270                     l386:	
  4379  0270  3001               	movlw	1
  4380  0271                     u805:	
  4381  0271  35F2               	lslf	___wmul@multiplicand,f
  4382  0272  0DF3               	rlf	___wmul@multiplicand+1,f
  4383  0273  0B89               	decfsz	9,f
  4384  0274  2A71               	goto	u805
  4385  0275  3001               	movlw	1
  4386  0276                     u815:	
  4387  0276  36F1               	lsrf	___wmul@multiplier+1,f
  4388  0277  0CF0               	rrf	___wmul@multiplier,f
  4389  0278  0B89               	decfsz	9,f
  4390  0279  2A76               	goto	u815
  4391  027A  0870               	movf	___wmul@multiplier,w
  4392  027B  0471               	iorwf	___wmul@multiplier+1,w
  4393  027C  1D03               	btfss	3,2
  4394  027D  2A6A               	goto	l1348
  4395  027E  0875               	movf	___wmul@product+1,w
  4396  027F  00F1               	movwf	?___wmul+1
  4397  0280  0874               	movf	___wmul@product,w
  4398  0281  00F0               	movwf	?___wmul
  4399  0282  0008               	return
  4400  0283                     __end_of___wmul:	
  4401                           
  4402                           	psect	text17
  4403  0229                     __ptext17:	
  4404 ;; *************** function _SYSTEM_Initialize *****************
  4405 ;; Defined at:
  4406 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;Total ram usage:        0 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    1
  4427 ;; This function calls:
  4428 ;;		_EUSART_Initialize
  4429 ;;		_OSCILLATOR_Initialize
  4430 ;;		_PIN_MANAGER_Initialize
  4431 ;;		_SPI_Initialize
  4432 ;;		_WDT_Initialize
  4433 ;; This function is called by:
  4434 ;;		_main
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           
  4439                           ;psect for function _SYSTEM_Initialize
  4440  0229                     _SYSTEM_Initialize:	
  4441                           
  4442                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4446  0229  3182  2238  3182   	fcall	_PIN_MANAGER_Initialize
  4447                           
  4448                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4449  022C  3181  21DC  3182   	fcall	_OSCILLATOR_Initialize
  4450                           
  4451                           ;mcc.c: 75: WDT_Initialize();
  4452  022F  3181  21C7  3182   	fcall	_WDT_Initialize
  4453                           
  4454                           ;mcc.c: 76: SPI_Initialize();
  4455  0232  3181  21E3  3182   	fcall	_SPI_Initialize
  4456                           
  4457                           ;mcc.c: 77: EUSART_Initialize();
  4458  0235  3182  2205         	fcall	_EUSART_Initialize
  4459  0237  0008               	return
  4460  0238                     __end_of_SYSTEM_Initialize:	
  4461                           
  4462                           	psect	text18
  4463  01C7                     __ptext18:	
  4464 ;; *************** function _WDT_Initialize *****************
  4465 ;; Defined at:
  4466 ;;		line 90 in file "mcc_generated_files/mcc.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:        0 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_SYSTEM_Initialize
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           
  4494                           ;psect for function _WDT_Initialize
  4495  01C7                     _WDT_Initialize:	
  4496                           
  4497                           ;mcc.c: 93: WDTCON = 0x16;
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _WDT_Initialize: [wreg]
  4501  01C7  3016               	movlw	22
  4502  01C8  0021               	movlb	1	; select bank1
  4503  01C9  0097               	movwf	23	;volatile
  4504  01CA  0008               	return
  4505  01CB                     __end_of_WDT_Initialize:	
  4506                           
  4507                           	psect	text19
  4508  01E3                     __ptext19:	
  4509 ;; *************** function _SPI_Initialize *****************
  4510 ;; Defined at:
  4511 ;;		line 63 in file "mcc_generated_files/spi.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_SYSTEM_Initialize
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _SPI_Initialize
  4540  01E3                     _SPI_Initialize:	
  4541                           
  4542                           ;spi.c: 68: SSP1STAT = 0x40;
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4546  01E3  3040               	movlw	64
  4547  01E4  0024               	movlb	4	; select bank4
  4548  01E5  0094               	movwf	20	;volatile
  4549                           
  4550                           ;spi.c: 71: SSP1CON1 = 0x20;
  4551  01E6  3020               	movlw	32
  4552  01E7  0095               	movwf	21	;volatile
  4553                           
  4554                           ;spi.c: 74: SSP1ADD = 0x00;
  4555  01E8  0192               	clrf	18	;volatile
  4556  01E9  0008               	return
  4557  01EA                     __end_of_SPI_Initialize:	
  4558                           
  4559                           	psect	text20
  4560  0238                     __ptext20:	
  4561 ;; *************** function _PIN_MANAGER_Initialize *****************
  4562 ;; Defined at:
  4563 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_SYSTEM_Initialize
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _PIN_MANAGER_Initialize
  4592  0238                     _PIN_MANAGER_Initialize:	
  4593                           
  4594                           ;pin_manager.c: 57: LATA = 0x10;
  4595                           
  4596                           ;incstack = 0
  4597                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4598  0238  3010               	movlw	16
  4599  0239  0022               	movlb	2	; select bank2
  4600  023A  008C               	movwf	12	;volatile
  4601                           
  4602                           ;pin_manager.c: 58: LATC = 0x00;
  4603  023B  018E               	clrf	14	;volatile
  4604                           
  4605                           ;pin_manager.c: 63: TRISA = 0x2F;
  4606  023C  302F               	movlw	47
  4607  023D  0021               	movlb	1	; select bank1
  4608  023E  008C               	movwf	12	;volatile
  4609                           
  4610                           ;pin_manager.c: 64: TRISC = 0x32;
  4611  023F  3032               	movlw	50
  4612  0240  008E               	movwf	14	;volatile
  4613                           
  4614                           ;pin_manager.c: 69: ANSELC = 0x00;
  4615  0241  0023               	movlb	3	; select bank3
  4616  0242  018E               	clrf	14	;volatile
  4617                           
  4618                           ;pin_manager.c: 70: ANSELA = 0x07;
  4619  0243  3007               	movlw	7
  4620  0244  008C               	movwf	12	;volatile
  4621                           
  4622                           ;pin_manager.c: 75: WPUA = 0x00;
  4623  0245  0024               	movlb	4	; select bank4
  4624  0246  018C               	clrf	12	;volatile
  4625                           
  4626                           ;pin_manager.c: 76: WPUC = 0x30;
  4627  0247  3030               	movlw	48
  4628  0248  008E               	movwf	14	;volatile
  4629                           
  4630                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4631  0249  0021               	movlb	1	; select bank1
  4632  024A  1395               	bcf	21,7	;volatile
  4633                           
  4634                           ;pin_manager.c: 83: APFCON1 = 0x00;
  4635  024B  0022               	movlb	2	; select bank2
  4636  024C  019E               	clrf	30	;volatile
  4637                           
  4638                           ;pin_manager.c: 84: APFCON0 = 0x00;
  4639  024D  019D               	clrf	29	;volatile
  4640  024E  0008               	return
  4641  024F                     __end_of_PIN_MANAGER_Initialize:	
  4642                           
  4643                           	psect	text21
  4644  01DC                     __ptext21:	
  4645 ;; *************** function _OSCILLATOR_Initialize *****************
  4646 ;; Defined at:
  4647 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      void 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;Total ram usage:        0 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_SYSTEM_Initialize
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _OSCILLATOR_Initialize
  4676  01DC                     _OSCILLATOR_Initialize:	
  4677                           
  4678                           ;mcc.c: 83: OSCCON = 0x60;
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4682  01DC  3060               	movlw	96
  4683  01DD  0021               	movlb	1	; select bank1
  4684  01DE  0099               	movwf	25	;volatile
  4685                           
  4686                           ;mcc.c: 85: OSCTUNE = 0x00;
  4687  01DF  0198               	clrf	24	;volatile
  4688                           
  4689                           ;mcc.c: 87: BORCON = 0x00;
  4690  01E0  0022               	movlb	2	; select bank2
  4691  01E1  0196               	clrf	22	;volatile
  4692  01E2  0008               	return
  4693  01E3                     __end_of_OSCILLATOR_Initialize:	
  4694                           
  4695                           	psect	text22
  4696  0205                     __ptext22:	
  4697 ;; *************** function _EUSART_Initialize *****************
  4698 ;; Defined at:
  4699 ;;		line 53 in file "mcc_generated_files/eusart.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;		None
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;Total ram usage:        0 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_SYSTEM_Initialize
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function _EUSART_Initialize
  4728  0205                     _EUSART_Initialize:	
  4729                           
  4730                           ;eusart.c: 58: BAUDCON = 0x08;
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4734  0205  3008               	movlw	8
  4735  0206  0023               	movlb	3	; select bank3
  4736  0207  009F               	movwf	31	;volatile
  4737                           
  4738                           ;eusart.c: 61: RCSTA = 0x90;
  4739  0208  3090               	movlw	144
  4740  0209  009D               	movwf	29	;volatile
  4741                           
  4742                           ;eusart.c: 64: TXSTA = 0x24;
  4743  020A  3024               	movlw	36
  4744  020B  009E               	movwf	30	;volatile
  4745                           
  4746                           ;eusart.c: 67: SPBRGL = 0x33;
  4747  020C  3033               	movlw	51
  4748  020D  009B               	movwf	27	;volatile
  4749                           
  4750                           ;eusart.c: 70: SPBRGH = 0x00;
  4751  020E  019C               	clrf	28	;volatile
  4752  020F  0008               	return
  4753  0210                     __end_of_EUSART_Initialize:	
  4754                           
  4755                           	psect	text23
  4756  01FB                     __ptext23:	
  4757 ;; *************** function _EUSART_Read *****************
  4758 ;; Defined at:
  4759 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;		None
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      unsigned char 
  4766 ;; Registers used:
  4767 ;;		wreg
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;Total ram usage:        0 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_main
  4783 ;;		_getch
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _EUSART_Read
  4789  01FB                     _EUSART_Read:	
  4790  01FB                     l51:	
  4791                           ;eusart.c: 78: {
  4792                           
  4793                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _EUSART_Read: [wreg]
  4797                           
  4798  01FB  0020               	movlb	0	; select bank0
  4799  01FC  1E91               	btfss	17,5	;volatile
  4800  01FD  29FB               	goto	l51
  4801                           
  4802                           ;eusart.c: 79: }
  4803                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  4804  01FE  0023               	movlb	3	; select bank3
  4805  01FF  1C9D               	btfss	29,1	;volatile
  4806  0200  2A03               	goto	l1594
  4807                           
  4808                           ;eusart.c: 83: {
  4809                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  4810  0201  121D               	bcf	29,4	;volatile
  4811                           
  4812                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  4813  0202  161D               	bsf	29,4	;volatile
  4814  0203                     l1594:	
  4815                           
  4816                           ;eusart.c: 88: }
  4817                           ;eusart.c: 90: return RCREG;
  4818  0203  0819               	movf	25,w	;volatile
  4819  0204  0008               	return
  4820  0205                     __end_of_EUSART_Read:	
  4821  007E                     btemp	set	126	;btemp
  4822  007E                     wtemp0	set	126


Data Sizes:
    Strings     237
    Constant    14
    Data        11
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      80
    BANK1            80      0      15
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK0[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_16(CODE[7]), printf@c(BANK0[1]), buf(BANK0[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_15(CODE[25]), STR_14(CODE[23]), STR_13(CODE[24]), STR_12(CODE[22]), 
		 -> STR_11(CODE[3]), STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[16]), 
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[15]), STR_4(CODE[16]), 
		 -> STR_3(CODE[16]), STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK0[9]), 

    SPI_send@rbuf	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK0[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_send@sbuf	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK0[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK0[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug(BANK0[3]), tx_buf(BANK0[14]), 
		 -> can_receive@can_int_flag(BANK0[4]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), can_start@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _main->_printf
    _set_sid->_printf
    _can_status_check->_printf
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_start->_printf
    _can_send->_printf
    _printf->___lwdiv
    _putch->_EUSART_Write
    _SPI_send->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_start->_printf
    _can_send->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   26502
                                             35 BANK0      7     7      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                           _can_send
                          _can_start
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    2633
                                             17 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     7     7      0   11252
                                             28 BANK0      7     7      0
                           _SPI_send
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                       10    10      0    2142
                                              2 BANK0     10    10      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         11    11      0    4558
                                             17 BANK0     11    11      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_start                                            7     7      0    4511
                                             17 BANK0      7     7      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            13    11      2    5017
                                             17 BANK0     13    11      2
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    21      6    2393
                                              8 COMMON     6     0      6
                                              0 BANK0     17    17      0
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             7     5      2    1951
                                              8 COMMON     5     3      2
                                              0 BANK0      2     2      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     532
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     627
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_send
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_start
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       F       7       18.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      6D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      6D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 04:21:01 2018

                    _SPI_Initialize 01E3               __end_of_can_txf_clear 02AF  
                                 _c 004D                         __CFG_CP$OFF 0000  
                                l51 01FB                                  l58 01EB  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 08F9  
               ___wmul@multiplicand 0072                         __CFG_LVP$ON 0000  
                               l113 01F7                                 l213 0385  
                               l302 07E1                                 l215 0392  
                               l217 0398                                 l219 039E  
                               l257 0664                                 l386 0270  
          __end_of_can_status_check 03A4                        __CFG_CPD$OFF 0000  
                               u805 0271                                 u815 0276  
                               u845 02BA                                 u865 02C4  
                               u875 02CE                                 u955 06D9  
                               u885 02D6                                 u995 075F  
                               _abc 08F3                                 _buf 005C  
                               _cnt 004C                                 _sid 004A  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000                        ?_EUSART_Read 0070  
                              l1310 03AD                                l1320 03D7  
                              l1400 0673                                l1314 03BB  
                              l1330 03F0                                l1324 03DB  
                              l1316 03CE                                l1420 06C3  
                              l1412 06AF                                l1404 0680  
                              l1500 0643                                l1342 0227  
                              l1318 03D2                                l1430 06E0  
                              l1328 03EC                                l1440 06FE  
                              l1424 06C5                                l1370 02B7  
                              l1442 0709                                l1434 06E2  
                              l1426 06D3                                l1348 026A  
                              l1700 03F3                                l1372 02C3  
                              l1436 06F1                                l1452 071D  
                              l1710 0415                                l1702 03FF  
                              l1382 02DE                                l1470 0769  
                              l1446 0714                                l1454 0738  
                              l1720 0445                                l1464 074A  
                              l1392 065F                                l1640 05C0  
                              l1378 02D5                                l1490 07A9  
                              l1474 0785                                l1716 041C  
                              l1484 0798                                l1476 0788  
                              l1740 04F5                                l1726 0454  
                              l1718 0420                                l1486 079C  
                              l1398 066A                                l1638 05A9  
                              l1760 0537                                l1594 0203  
                              l1498 07AD                                l1770 0553  
                              l1668 063C                                l1780 0582  
                              l1782 0589                                l1766 054F  
                              l1698 03FA                                STR_1 0847  
                              STR_2 08BB                                STR_3 086C  
                              STR_4 088C                                STR_5 08AC  
                              STR_6 0831                                STR_7 087C  
                              STR_8 089C                                STR_9 08CA  
                              u1015 0778                                u1104 04B5  
                              u1105 04B4                                u1135 02F5  
                              _LATA 010C                                u1174 0622  
                              u1094 028C                                u1175 0621  
                              u1095 028B                                _LATC 010E  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 03F2                                _main 04E8  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 01EA  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 03F2  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 008F       __end_of_OSCILLATOR_Initialize 01E3  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 08D7                               STR_11 08F6  
                             STR_12 081B                               STR_13 0802  
                             STR_14 081A                               STR_15 0801  
                             STR_16 08EC                               STR_17 085B  
                     __CFG_WDTE$OFF 0000                     __end_of___lwdiv 02E3  
     can_status_check@bytes_written 003F                               _RCREG 0199  
                             _RCSTA 019D                               _TRISA 008C  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E                      _WDT_Initialize 01C7  
                   __end_of_isdigit 0229                               atoi@a 007B  
                             atoi@s 007D                               _putch 01CB  
                     can_send@F2951 0068                       can_send@F2952 0065  
                   __end_of_set_sid 031B                    __end_of_SPI_send 0268  
                             status 0003                               wtemp0 007E  
                   ?_SPI_Initialize 0070                       can_send@debug 0038  
                   __initialization 07E2                        __end_of_atoi 0459  
                      __end_of_main 058C              can_start@bytes_written 0034  
                    ??_EUSART_Write 0070              can_status_check@status 0042  
                            ??_atoi 0078                              ??_main 0043  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 01CB  
          __end_of_SPI_Exchange8bit 01FB                              _ANSELA 018C  
                            ?_putch 0070                              _ANSELC 018E  
                            _BORCON 0116                              _OSCCON 0099  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _WDTCON 0097                    __end_of_can_send 063E  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0268  
                    __CFG_STVREN$ON 0000                           ??___lwdiv 0074  
                  __end_of_max_char 0801           can_txf_clear@can_int_flag 0028  
                            _printf 063E                              _rx_buf 00A0  
                            _tx_buf 004E                              main@rc 0048  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 0033                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 0229             __end_of__initialization 07FD  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 0210                 ??_SYSTEM_Initialize 0070  
                __size_of_can_start 0041                       __end_of_putch 01D0  
                      SPI_send@rbuf 0079                        SPI_send@sbuf 0021  
                        __end_of_nm 08FB                           ?_SPI_send 0078  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 003C           __end_of_SYSTEM_Initialize 0238  
                           ??_putch 0071                          __pbssBANK0 004A  
                        __pbssBANK1 00A0                __end_of_EUSART_Write 01F2  
                        __pmaintext 04E8                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E             can_receive@can_int_flag 0037  
                           ?_printf 0078                          ??_SPI_send 007A  
                         ?_can_send 0031                             _OSCTUNE 0098  
                           _SSP1ADD 0212                             _SSP1BUF 0211  
                 __end_of_can_start 035C              __size_of_can_txf_clear 002C  
                  ??_SPI_Initialize 0070                      can_start@F2930 006B  
                     ??_can_receive 0031                     __size_of___wmul 001B  
                           ___lwdiv 02AF                             __ptext1 02E3  
                           __ptext2 035C                             __ptext3 0283  
                           __ptext4 0459                             __ptext5 031B  
                           __ptext6 058C                             __ptext7 063E  
                           __ptext8 01CB                             __ptext9 01EA  
                   __size_of_printf 01A4                   __end_of_hexpowers 08EC  
             _OSCILLATOR_Initialize 01DC                          ??_can_send 0033  
                           _isdigit 021B            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 02E3      can_status_check@can_status_buf 0040  
                 ?_SPI_Exchange8bit 0070                      can_txf_clear@n 0025  
                       set_sid@sidh 0037                         set_sid@sidl 0038  
        __size_of_SYSTEM_Initialize 000F                             main@sid 0046  
                           clrloop0 01D1                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
             can_receive@bytes_read 0035                             init_ram 01D6  
                           initloop 01D7                   _EUSART_Initialize 0205  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 0030                             printf@f 0078  
                     _can_txf_clear 0283                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_receive 04E8  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
                   can_receive@mask 0036           __end_of_EUSART_Initialize 0210  
                        main@rc_383 0049                   can_txf_clear@mask 0026  
                       printf@width 002E            ??_SPI_Exchange8bitBuffer 0073  
                    ?_can_txf_clear 0070                      __end_of___wmul 0283  
             can_status_check@F2957 006E                        _EUSART_Write 01EA  
            ?_OSCILLATOR_Initialize 0070                      __end_of_printf 07E2  
               start_initialization 07E2                        can_receive@n 003B  
                 __size_of_SPI_send 0019     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 08F6                       ??_EUSART_Read 0070  
                       putch@txData 0071           __size_of_can_status_check 0048  
             can_start@can_ctrl_buf 0035                            ??___wmul 0074  
                       _can_receive 0459                         __pdataBANK0 0065  
                          ??_printf 0020            can_receive@bytes_written 0034  
                         ___latbits 0002                       __pcstackBANK0 0020  
                 __size_of_can_send 00B2       SPI_Exchange8bitBuffer@dataOut 0072  
                       SPI_send@len 0078          __size_of_EUSART_Initialize 000B  
                         _can_start 031B                 __end_of_EUSART_Read 0205  
   __size_of_SPI_Exchange8bitBuffer 004E                     ??_can_txf_clear 0022  
                  ___lwdiv@dividend 0072              _PIN_MANAGER_Initialize 0238  
                          ?___lwdiv 0070                            ?_isdigit 0070  
                         can_send@i 003C                           can_send@n 0036  
                          ?_set_sid 0031                           _hexpowers 08E4  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                    ___wmul@product 0074                            _LATAbits 010C  
                        ?_can_start 0070                           clear_ram0 01D0  
                          _PIR1bits 0011           __size_of_SPI_Exchange8bit 0009  
                          _SSP1CON1 0215                            _SSP1STAT 0214  
                 ___wmul@multiplier 0070                            _SPI_send 024F  
            _SPI_Exchange8bitBuffer 03A4                          printf@flag 0025  
                        printf@prec 0028                         _EUSART_Read 01FB  
                       can_send@buf 0031                         can_send@cnt 0032  
                       can_send@len 0037                    _can_status_check 035C  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                  __size_of___lwdiv 0034        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$613 0070        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_send 058C                    __size_of_isdigit 000E  
                   ___lwdiv@divisor 0070                     ___lwdiv@counter 0077  
                          __ptext10 02AF                            __ptext11 024F  
                          __ptext20 0238                            __ptext12 03A4  
                          __ptext21 01DC                            __ptext13 01F2  
                          __ptext22 0205                            __ptext14 03F2  
                          __ptext23 01FB                            __ptext15 021B  
                          __ptext16 0268                            __ptext17 0229  
                          __ptext18 01C7                            __ptext19 01E3  
                  __size_of_set_sid 0038                        _SSP1CON1bits 0215  
                          _max_char 0800                       __size_of_atoi 0067  
                     __size_of_main 00A4                         ??_can_start 0031  
              can_send@txb_ctrl_buf 003D                        ?_can_receive 0070  
                          atoi@sign 007A                           printf@idx 0024  
                         printf@len 002C                           printf@val 0026  
                      _SSP1STATbits 0214               SPI_send@bytes_written 0020  
                    __pstringtext10 087C                      __pstringtext11 088C  
                    __pstringtext12 089C                      __pstringtext13 08AC  
                    __pstringtext14 08BB                      __pstringtext15 08CA  
                    __pstringtext16 08D7                      __pstringtext17 08EC  
                    __pstringtext18 08F6                      __pstringtext19 0000  
                          isdigit@c 0071             __size_of_WDT_Initialize 0004  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                    _SPI_Exchange8bit 01F2  
             can_send@bytes_written 003B                            printf@ap 002B  
                          printf@cp 0029          can_txf_clear@bytes_written 0027  
                     __pstringtext1 08E4                       __pstringtext2 08F3  
                     __pstringtext3 08F9                       __pstringtext4 0800  
                     __pstringtext5 081A                       __pstringtext6 0831  
                     __pstringtext7 0847                       __pstringtext8 085B  
                     __pstringtext9 086C                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 024F                     set_sid@can_node 0031  
