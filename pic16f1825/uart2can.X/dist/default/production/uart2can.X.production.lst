

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 07:46:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	stringtext13,global,class=STRCODE,delta=2
    17                           	psect	stringtext14,global,class=STRCODE,delta=2
    18                           	psect	stringtext15,global,class=STRCODE,delta=2
    19                           	psect	stringtext16,global,class=STRCODE,delta=2
    20                           	psect	stringtext17,global,class=STRCODE,delta=2
    21                           	psect	stringtext18,global,class=STRCODE,delta=2
    22                           	psect	stringtext19,global,class=STRCODE,delta=2
    23                           	psect	stringtext20,global,class=STRCODE,delta=2
    24                           	psect	stringtext21,global,class=STRCODE,delta=2
    25                           	psect	stringtext22,global,class=STRCODE,delta=2
    26                           	psect	stringtext23,global,class=STRCODE,delta=2
    27                           	psect	stringtext24,global,class=STRCODE,delta=2
    28                           	psect	stringtext25,global,class=STRCODE,delta=2
    29                           	psect	stringtext26,global,class=STRCODE,delta=2
    30                           	psect	stringtext27,global,class=STRCODE,delta=2
    31                           	psect	stringtext28,global,class=STRCODE,delta=2
    32                           	psect	stringtext29,global,class=STRCODE,delta=2
    33                           	psect	stringtext30,global,class=STRCODE,delta=2
    34                           	psect	stringtext31,global,class=STRCODE,delta=2
    35                           	psect	stringtext32,global,class=STRCODE,delta=2
    36                           	psect	stringtext33,global,class=STRCODE,delta=2
    37                           	psect	stringtext34,global,class=STRCODE,delta=2
    38                           	psect	stringtext35,global,class=STRCODE,delta=2
    39                           	psect	stringtext36,global,class=STRCODE,delta=2
    40                           	psect	stringtext37,global,class=STRCODE,delta=2
    41                           	psect	stringtext38,global,class=STRCODE,delta=2
    42                           	psect	stringtext39,global,class=STRCODE,delta=2
    43                           	psect	stringtext40,global,class=STRCODE,delta=2
    44                           	psect	stringtext41,global,class=STRCODE,delta=2
    45                           	psect	stringtext42,global,class=STRCODE,delta=2
    46                           	psect	stringtext43,global,class=STRCODE,delta=2
    47                           	psect	stringtext44,global,class=STRCODE,delta=2
    48                           	psect	stringtext45,global,class=STRCODE,delta=2
    49                           	psect	stringtext46,global,class=STRCODE,delta=2
    50                           	psect	stringtext47,global,class=STRCODE,delta=2
    51                           	psect	stringtext48,global,class=STRCODE,delta=2
    52                           	psect	stringtext49,global,class=STRCODE,delta=2
    53                           	psect	stringtext50,global,class=STRCODE,delta=2
    54                           	psect	stringtext51,global,class=STRCODE,delta=2
    55                           	psect	stringtext52,global,class=STRCODE,delta=2
    56                           	psect	stringtext53,global,class=STRCODE,delta=2
    57                           	psect	stringtext54,global,class=STRCODE,delta=2
    58                           	psect	stringtext55,global,class=STRCODE,delta=2
    59                           	psect	stringtext56,global,class=STRCODE,delta=2
    60                           	psect	stringtext57,global,class=STRCODE,delta=2
    61                           	psect	stringtext58,global,class=STRCODE,delta=2
    62                           	psect	cinit,global,class=CODE,merge=1,delta=2
    63                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    64                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    65                           	psect	clrtext,global,class=CODE,delta=2
    66                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    67                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    68                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    69                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    70                           	psect	text1,local,class=CODE,merge=1,delta=2
    71                           	psect	text2,local,class=CODE,merge=1,delta=2
    72                           	psect	text3,local,class=CODE,merge=1,delta=2
    73                           	psect	text4,local,class=CODE,merge=1,delta=2
    74                           	psect	text5,local,class=CODE,merge=1,delta=2
    75                           	psect	text6,local,class=CODE,merge=1,delta=2
    76                           	psect	text7,local,class=CODE,merge=1,delta=2
    77                           	psect	text8,local,class=CODE,merge=1,delta=2
    78                           	psect	text9,local,class=CODE,merge=1,delta=2
    79                           	psect	text10,local,class=CODE,merge=1,delta=2
    80                           	psect	text11,local,class=CODE,merge=1,delta=2
    81                           	psect	text12,local,class=CODE,merge=1,delta=2
    82                           	psect	text13,local,class=CODE,merge=1,delta=2
    83                           	psect	text14,local,class=CODE,merge=1,delta=2
    84                           	psect	text15,local,class=CODE,merge=1,delta=2
    85                           	psect	text16,local,class=CODE,merge=1,delta=2
    86                           	psect	text17,local,class=CODE,merge=1,delta=2
    87                           	psect	text18,local,class=CODE,merge=1,delta=2
    88                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text21,local,class=CODE,merge=1,delta=2
    91                           	psect	text22,local,class=CODE,merge=1,delta=2
    92                           	psect	text23,local,class=CODE,merge=1,delta=2
    93                           	psect	text24,local,class=CODE,merge=1,delta=2
    94                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text28,local,class=CODE,merge=1,delta=2
    98                           	psect	text29,local,class=CODE,merge=1,delta=2
    99                           	psect	text30,local,class=CODE,merge=1,delta=2
   100                           	psect	text31,local,class=CODE,merge=1,delta=2
   101                           	psect	text32,local,class=CODE,merge=1,delta=2
   102                           	psect	text33,local,class=CODE,merge=1,delta=2
   103                           	psect	text34,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x7E,2
   105  0000                     
   106                           ; Version 1.45
   107                           ; Generated 16/11/2017 GMT
   108                           ; 
   109                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC16F1825 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000E                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  008C                     	;# 
   169  008E                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0095                     	;# 
   174  0096                     	;# 
   175  0097                     	;# 
   176  0098                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  010C                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011A                     	;# 
   196  011B                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  018C                     	;# 
   200  018E                     	;# 
   201  0191                     	;# 
   202  0191                     	;# 
   203  0192                     	;# 
   204  0193                     	;# 
   205  0193                     	;# 
   206  0193                     	;# 
   207  0194                     	;# 
   208  0195                     	;# 
   209  0196                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019F                     	;# 
   218  020C                     	;# 
   219  020E                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0214                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0216                     	;# 
   232  0216                     	;# 
   233  0217                     	;# 
   234  0217                     	;# 
   235  0291                     	;# 
   236  0291                     	;# 
   237  0292                     	;# 
   238  0293                     	;# 
   239  0294                     	;# 
   240  0295                     	;# 
   241  0295                     	;# 
   242  0296                     	;# 
   243  0298                     	;# 
   244  0298                     	;# 
   245  0299                     	;# 
   246  029A                     	;# 
   247  029B                     	;# 
   248  029C                     	;# 
   249  029D                     	;# 
   250  029E                     	;# 
   251  0311                     	;# 
   252  0311                     	;# 
   253  0312                     	;# 
   254  0313                     	;# 
   255  0318                     	;# 
   256  0318                     	;# 
   257  0319                     	;# 
   258  031A                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  039A                     	;# 
   265  039C                     	;# 
   266  039D                     	;# 
   267  039E                     	;# 
   268  039F                     	;# 
   269  0415                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000E                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001E                     	;# 
   313  001F                     	;# 
   314  008C                     	;# 
   315  008E                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011E                     	;# 
   345  018C                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0194                     	;# 
   354  0195                     	;# 
   355  0196                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020C                     	;# 
   365  020E                     	;# 
   366  0211                     	;# 
   367  0211                     	;# 
   368  0212                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0213                     	;# 
   372  0214                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0215                     	;# 
   377  0216                     	;# 
   378  0216                     	;# 
   379  0217                     	;# 
   380  0217                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0294                     	;# 
   386  0295                     	;# 
   387  0295                     	;# 
   388  0296                     	;# 
   389  0298                     	;# 
   390  0298                     	;# 
   391  0299                     	;# 
   392  029A                     	;# 
   393  029B                     	;# 
   394  029C                     	;# 
   395  029D                     	;# 
   396  029E                     	;# 
   397  0311                     	;# 
   398  0311                     	;# 
   399  0312                     	;# 
   400  0313                     	;# 
   401  0318                     	;# 
   402  0318                     	;# 
   403  0319                     	;# 
   404  031A                     	;# 
   405  038C                     	;# 
   406  038E                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  039A                     	;# 
   411  039C                     	;# 
   412  039D                     	;# 
   413  039E                     	;# 
   414  039F                     	;# 
   415  0415                     	;# 
   416  0416                     	;# 
   417  0417                     	;# 
   418  041C                     	;# 
   419  041D                     	;# 
   420  041E                     	;# 
   421  0FE4                     	;# 
   422  0FE5                     	;# 
   423  0FE6                     	;# 
   424  0FE7                     	;# 
   425  0FE8                     	;# 
   426  0FE9                     	;# 
   427  0FEA                     	;# 
   428  0FEB                     	;# 
   429  0FED                     	;# 
   430  0FEE                     	;# 
   431  0FEF                     	;# 
   432  0000                     	;# 
   433  0001                     	;# 
   434  0002                     	;# 
   435  0003                     	;# 
   436  0004                     	;# 
   437  0005                     	;# 
   438  0006                     	;# 
   439  0007                     	;# 
   440  0008                     	;# 
   441  0009                     	;# 
   442  000A                     	;# 
   443  000B                     	;# 
   444  000C                     	;# 
   445  000E                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0013                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001C                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  008C                     	;# 
   461  008E                     	;# 
   462  0091                     	;# 
   463  0092                     	;# 
   464  0093                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0097                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009A                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  010C                     	;# 
   477  010E                     	;# 
   478  0111                     	;# 
   479  0112                     	;# 
   480  0113                     	;# 
   481  0114                     	;# 
   482  0115                     	;# 
   483  0116                     	;# 
   484  0117                     	;# 
   485  0118                     	;# 
   486  0119                     	;# 
   487  011A                     	;# 
   488  011B                     	;# 
   489  011D                     	;# 
   490  011E                     	;# 
   491  018C                     	;# 
   492  018E                     	;# 
   493  0191                     	;# 
   494  0191                     	;# 
   495  0192                     	;# 
   496  0193                     	;# 
   497  0193                     	;# 
   498  0193                     	;# 
   499  0194                     	;# 
   500  0195                     	;# 
   501  0196                     	;# 
   502  0199                     	;# 
   503  019A                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019E                     	;# 
   509  019F                     	;# 
   510  020C                     	;# 
   511  020E                     	;# 
   512  0211                     	;# 
   513  0211                     	;# 
   514  0212                     	;# 
   515  0212                     	;# 
   516  0213                     	;# 
   517  0213                     	;# 
   518  0214                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0216                     	;# 
   524  0216                     	;# 
   525  0217                     	;# 
   526  0217                     	;# 
   527  0291                     	;# 
   528  0291                     	;# 
   529  0292                     	;# 
   530  0293                     	;# 
   531  0294                     	;# 
   532  0295                     	;# 
   533  0295                     	;# 
   534  0296                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  029B                     	;# 
   540  029C                     	;# 
   541  029D                     	;# 
   542  029E                     	;# 
   543  0311                     	;# 
   544  0311                     	;# 
   545  0312                     	;# 
   546  0313                     	;# 
   547  0318                     	;# 
   548  0318                     	;# 
   549  0319                     	;# 
   550  031A                     	;# 
   551  038C                     	;# 
   552  038E                     	;# 
   553  0391                     	;# 
   554  0392                     	;# 
   555  0393                     	;# 
   556  039A                     	;# 
   557  039C                     	;# 
   558  039D                     	;# 
   559  039E                     	;# 
   560  039F                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000E                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  001E                     	;# 
   605  001F                     	;# 
   606  008C                     	;# 
   607  008E                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0097                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009A                     	;# 
   617  009B                     	;# 
   618  009B                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  010C                     	;# 
   623  010E                     	;# 
   624  0111                     	;# 
   625  0112                     	;# 
   626  0113                     	;# 
   627  0114                     	;# 
   628  0115                     	;# 
   629  0116                     	;# 
   630  0117                     	;# 
   631  0118                     	;# 
   632  0119                     	;# 
   633  011A                     	;# 
   634  011B                     	;# 
   635  011D                     	;# 
   636  011E                     	;# 
   637  018C                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020C                     	;# 
   657  020E                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0291                     	;# 
   674  0291                     	;# 
   675  0292                     	;# 
   676  0293                     	;# 
   677  0294                     	;# 
   678  0295                     	;# 
   679  0295                     	;# 
   680  0296                     	;# 
   681  0298                     	;# 
   682  0298                     	;# 
   683  0299                     	;# 
   684  029A                     	;# 
   685  029B                     	;# 
   686  029C                     	;# 
   687  029D                     	;# 
   688  029E                     	;# 
   689  0311                     	;# 
   690  0311                     	;# 
   691  0312                     	;# 
   692  0313                     	;# 
   693  0318                     	;# 
   694  0318                     	;# 
   695  0319                     	;# 
   696  031A                     	;# 
   697  038C                     	;# 
   698  038E                     	;# 
   699  0391                     	;# 
   700  0392                     	;# 
   701  0393                     	;# 
   702  039A                     	;# 
   703  039C                     	;# 
   704  039D                     	;# 
   705  039E                     	;# 
   706  039F                     	;# 
   707  0415                     	;# 
   708  0416                     	;# 
   709  0417                     	;# 
   710  041C                     	;# 
   711  041D                     	;# 
   712  041E                     	;# 
   713  0FE4                     	;# 
   714  0FE5                     	;# 
   715  0FE6                     	;# 
   716  0FE7                     	;# 
   717  0FE8                     	;# 
   718  0FE9                     	;# 
   719  0FEA                     	;# 
   720  0FEB                     	;# 
   721  0FED                     	;# 
   722  0FEE                     	;# 
   723  0FEF                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  000E                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0013                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  001E                     	;# 
   751  001F                     	;# 
   752  008C                     	;# 
   753  008E                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0093                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010E                     	;# 
   770  0111                     	;# 
   771  0112                     	;# 
   772  0113                     	;# 
   773  0114                     	;# 
   774  0115                     	;# 
   775  0116                     	;# 
   776  0117                     	;# 
   777  0118                     	;# 
   778  0119                     	;# 
   779  011A                     	;# 
   780  011B                     	;# 
   781  011D                     	;# 
   782  011E                     	;# 
   783  018C                     	;# 
   784  018E                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0193                     	;# 
   791  0194                     	;# 
   792  0195                     	;# 
   793  0196                     	;# 
   794  0199                     	;# 
   795  019A                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020C                     	;# 
   803  020E                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  0291                     	;# 
   820  0291                     	;# 
   821  0292                     	;# 
   822  0293                     	;# 
   823  0294                     	;# 
   824  0295                     	;# 
   825  0295                     	;# 
   826  0296                     	;# 
   827  0298                     	;# 
   828  0298                     	;# 
   829  0299                     	;# 
   830  029A                     	;# 
   831  029B                     	;# 
   832  029C                     	;# 
   833  029D                     	;# 
   834  029E                     	;# 
   835  0311                     	;# 
   836  0311                     	;# 
   837  0312                     	;# 
   838  0313                     	;# 
   839  0318                     	;# 
   840  0318                     	;# 
   841  0319                     	;# 
   842  031A                     	;# 
   843  038C                     	;# 
   844  038E                     	;# 
   845  0391                     	;# 
   846  0392                     	;# 
   847  0393                     	;# 
   848  039A                     	;# 
   849  039C                     	;# 
   850  039D                     	;# 
   851  039E                     	;# 
   852  039F                     	;# 
   853  0415                     	;# 
   854  0416                     	;# 
   855  0417                     	;# 
   856  041C                     	;# 
   857  041D                     	;# 
   858  041E                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000E                     	;# 
   884  0011                     	;# 
   885  0012                     	;# 
   886  0013                     	;# 
   887  0015                     	;# 
   888  0016                     	;# 
   889  0016                     	;# 
   890  0017                     	;# 
   891  0018                     	;# 
   892  0019                     	;# 
   893  001A                     	;# 
   894  001B                     	;# 
   895  001C                     	;# 
   896  001E                     	;# 
   897  001F                     	;# 
   898  008C                     	;# 
   899  008E                     	;# 
   900  0091                     	;# 
   901  0092                     	;# 
   902  0093                     	;# 
   903  0095                     	;# 
   904  0096                     	;# 
   905  0097                     	;# 
   906  0098                     	;# 
   907  0099                     	;# 
   908  009A                     	;# 
   909  009B                     	;# 
   910  009B                     	;# 
   911  009C                     	;# 
   912  009D                     	;# 
   913  009E                     	;# 
   914  010C                     	;# 
   915  010E                     	;# 
   916  0111                     	;# 
   917  0112                     	;# 
   918  0113                     	;# 
   919  0114                     	;# 
   920  0115                     	;# 
   921  0116                     	;# 
   922  0117                     	;# 
   923  0118                     	;# 
   924  0119                     	;# 
   925  011A                     	;# 
   926  011B                     	;# 
   927  011D                     	;# 
   928  011E                     	;# 
   929  018C                     	;# 
   930  018E                     	;# 
   931  0191                     	;# 
   932  0191                     	;# 
   933  0192                     	;# 
   934  0193                     	;# 
   935  0193                     	;# 
   936  0193                     	;# 
   937  0194                     	;# 
   938  0195                     	;# 
   939  0196                     	;# 
   940  0199                     	;# 
   941  019A                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019C                     	;# 
   945  019D                     	;# 
   946  019E                     	;# 
   947  019F                     	;# 
   948  020C                     	;# 
   949  020E                     	;# 
   950  0211                     	;# 
   951  0211                     	;# 
   952  0212                     	;# 
   953  0212                     	;# 
   954  0213                     	;# 
   955  0213                     	;# 
   956  0214                     	;# 
   957  0214                     	;# 
   958  0215                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0216                     	;# 
   962  0216                     	;# 
   963  0217                     	;# 
   964  0217                     	;# 
   965  0291                     	;# 
   966  0291                     	;# 
   967  0292                     	;# 
   968  0293                     	;# 
   969  0294                     	;# 
   970  0295                     	;# 
   971  0295                     	;# 
   972  0296                     	;# 
   973  0298                     	;# 
   974  0298                     	;# 
   975  0299                     	;# 
   976  029A                     	;# 
   977  029B                     	;# 
   978  029C                     	;# 
   979  029D                     	;# 
   980  029E                     	;# 
   981  0311                     	;# 
   982  0311                     	;# 
   983  0312                     	;# 
   984  0313                     	;# 
   985  0318                     	;# 
   986  0318                     	;# 
   987  0319                     	;# 
   988  031A                     	;# 
   989  038C                     	;# 
   990  038E                     	;# 
   991  0391                     	;# 
   992  0392                     	;# 
   993  0393                     	;# 
   994  039A                     	;# 
   995  039C                     	;# 
   996  039D                     	;# 
   997  039E                     	;# 
   998  039F                     	;# 
   999  0415                     	;# 
  1000  0416                     	;# 
  1001  0417                     	;# 
  1002  041C                     	;# 
  1003  041D                     	;# 
  1004  041E                     	;# 
  1005  0FE4                     	;# 
  1006  0FE5                     	;# 
  1007  0FE6                     	;# 
  1008  0FE7                     	;# 
  1009  0FE8                     	;# 
  1010  0FE9                     	;# 
  1011  0FEA                     	;# 
  1012  0FEB                     	;# 
  1013  0FED                     	;# 
  1014  0FEE                     	;# 
  1015  0FEF                     	;# 
  1016  0000                     	;# 
  1017  0001                     	;# 
  1018  0002                     	;# 
  1019  0003                     	;# 
  1020  0004                     	;# 
  1021  0005                     	;# 
  1022  0006                     	;# 
  1023  0007                     	;# 
  1024  0008                     	;# 
  1025  0009                     	;# 
  1026  000A                     	;# 
  1027  000B                     	;# 
  1028  000C                     	;# 
  1029  000E                     	;# 
  1030  0011                     	;# 
  1031  0012                     	;# 
  1032  0013                     	;# 
  1033  0015                     	;# 
  1034  0016                     	;# 
  1035  0016                     	;# 
  1036  0017                     	;# 
  1037  0018                     	;# 
  1038  0019                     	;# 
  1039  001A                     	;# 
  1040  001B                     	;# 
  1041  001C                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008E                     	;# 
  1046  0091                     	;# 
  1047  0092                     	;# 
  1048  0093                     	;# 
  1049  0095                     	;# 
  1050  0096                     	;# 
  1051  0097                     	;# 
  1052  0098                     	;# 
  1053  0099                     	;# 
  1054  009A                     	;# 
  1055  009B                     	;# 
  1056  009B                     	;# 
  1057  009C                     	;# 
  1058  009D                     	;# 
  1059  009E                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011A                     	;# 
  1072  011B                     	;# 
  1073  011D                     	;# 
  1074  011E                     	;# 
  1075  018C                     	;# 
  1076  018E                     	;# 
  1077  0191                     	;# 
  1078  0191                     	;# 
  1079  0192                     	;# 
  1080  0193                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0199                     	;# 
  1087  019A                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020C                     	;# 
  1095  020E                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0294                     	;# 
  1116  0295                     	;# 
  1117  0295                     	;# 
  1118  0296                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  029B                     	;# 
  1124  029C                     	;# 
  1125  029D                     	;# 
  1126  029E                     	;# 
  1127  0311                     	;# 
  1128  0311                     	;# 
  1129  0312                     	;# 
  1130  0313                     	;# 
  1131  0318                     	;# 
  1132  0318                     	;# 
  1133  0319                     	;# 
  1134  031A                     	;# 
  1135  038C                     	;# 
  1136  038E                     	;# 
  1137  0391                     	;# 
  1138  0392                     	;# 
  1139  0393                     	;# 
  1140  039A                     	;# 
  1141  039C                     	;# 
  1142  039D                     	;# 
  1143  039E                     	;# 
  1144  039F                     	;# 
  1145  0415                     	;# 
  1146  0416                     	;# 
  1147  0417                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162                           
  1163                           	psect	stringtext1
  1164  1474                     __pstringtext1:	
  1165  1474                     _dpowers:	
  1166  1474  3401               	retlw	1
  1167  1475  3400               	retlw	0
  1168  1476  340A               	retlw	10
  1169  1477  3400               	retlw	0
  1170  1478  3464               	retlw	100
  1171  1479  3400               	retlw	0
  1172  147A  34E8               	retlw	232
  1173  147B  3403               	retlw	3
  1174  147C  3410               	retlw	16
  1175  147D  3427               	retlw	39
  1176  147E                     __end_of_dpowers:	
  1177                           
  1178                           	psect	stringtext2
  1179  147E                     __pstringtext2:	
  1180  147E                     _hexpowers:	
  1181  147E  3401               	retlw	1
  1182  147F  3400               	retlw	0
  1183  1480  3410               	retlw	16
  1184  1481  3400               	retlw	0
  1185  1482  3400               	retlw	0
  1186  1483  3401               	retlw	1
  1187  1484  3400               	retlw	0
  1188  1485  3410               	retlw	16
  1189  1486                     __end_of_hexpowers:	
  1190                           
  1191                           	psect	stringtext3
  1192  1494                     __pstringtext3:	
  1193  1494                     _rxfnsidh:	
  1194  1494  3400               	retlw	0
  1195  1495  3404               	retlw	4
  1196  1496  3408               	retlw	8
  1197  1497  3410               	retlw	16
  1198  1498  3414               	retlw	20
  1199  1499  3418               	retlw	24
  1200  149A                     __end_of_rxfnsidh:	
  1201                           
  1202                           	psect	stringtext4
  1203  14AB                     __pstringtext4:	
  1204  14AB                     _txbnsidh:	
  1205  14AB  3431               	retlw	49
  1206  14AC  3441               	retlw	65
  1207  14AD  3451               	retlw	81
  1208  14AE                     __end_of_txbnsidh:	
  1209                           
  1210                           	psect	stringtext5
  1211  14AE                     __pstringtext5:	
  1212  14AE                     _abc:	
  1213  14AE  3400               	retlw	0
  1214  14AF  3402               	retlw	2
  1215  14B0  3404               	retlw	4
  1216  14B1                     __end_of_abc:	
  1217                           
  1218                           	psect	stringtext6
  1219  14B4                     __pstringtext6:	
  1220  14B4                     _nm:	
  1221  14B4  3400               	retlw	0
  1222  14B5  3402               	retlw	2
  1223  14B6                     __end_of_nm:	
  1224                           
  1225                           	psect	stringtext7
  1226  1000                     __pstringtext7:	
  1227  1000                     _rxmnsidh:	
  1228  1000  3420               	retlw	32
  1229  1001  3424               	retlw	36
  1230  1002                     __end_of_rxmnsidh:	
  1231  0011                     _PIR1bits	set	17
  1232  0095                     _OPTION_REGbits	set	149
  1233  008E                     _TRISC	set	142
  1234  008C                     _TRISA	set	140
  1235  0097                     _WDTCON	set	151
  1236  0098                     _OSCTUNE	set	152
  1237  0099                     _OSCCON	set	153
  1238  010C                     _LATAbits	set	268
  1239  010E                     _LATCbits	set	270
  1240  011D                     _APFCON0	set	285
  1241  011E                     _APFCON1	set	286
  1242  010E                     _LATC	set	270
  1243  010C                     _LATA	set	268
  1244  0116                     _BORCON	set	278
  1245  018C                     _ANSELA	set	396
  1246  018E                     _ANSELC	set	398
  1247  019A                     _TXREG	set	410
  1248  0199                     _RCREG	set	409
  1249  019D                     _RCSTAbits	set	413
  1250  019C                     _SPBRGH	set	412
  1251  019B                     _SPBRGL	set	411
  1252  019E                     _TXSTA	set	414
  1253  019D                     _RCSTA	set	413
  1254  019F                     _BAUDCON	set	415
  1255  0214                     _SSP1STATbits	set	532
  1256  0211                     _SSP1BUF	set	529
  1257  0215                     _SSP1CON1bits	set	533
  1258  0212                     _SSP1ADD	set	530
  1259  0215                     _SSP1CON1	set	533
  1260  0214                     _SSP1STAT	set	532
  1261  020E                     _WPUC	set	526
  1262  020C                     _WPUA	set	524
  1263  1002                     STR_10:	
  1264  1002  345B               	retlw	91	;'['
  1265  1003  3453               	retlw	83	;'S'
  1266  1004  3465               	retlw	101	;'e'
  1267  1005  3474               	retlw	116	;'t'
  1268  1006  3420               	retlw	32	;' '
  1269  1007  346F               	retlw	111	;'o'
  1270  1008  3475               	retlw	117	;'u'
  1271  1009  3474               	retlw	116	;'t'
  1272  100A  3470               	retlw	112	;'p'
  1273  100B  3475               	retlw	117	;'u'
  1274  100C  3474               	retlw	116	;'t'
  1275  100D  3420               	retlw	32	;' '
  1276  100E  346D               	retlw	109	;'m'
  1277  100F  346F               	retlw	111	;'o'
  1278  1010  3464               	retlw	100	;'d'
  1279  1011  3465               	retlw	101	;'e'
  1280  1012  345D               	retlw	93	;']'
  1281  1013  3420               	retlw	32	;' '
  1282  1014  347B               	retlw	123	;'{'
  1283  1015  3464               	retlw	100	;'d'
  1284  1016  3465               	retlw	101	;'e'
  1285  1017  3462               	retlw	98	;'b'
  1286  1018  3475               	retlw	117	;'u'
  1287  1019  3467               	retlw	103	;'g'
  1288  101A  343A               	retlw	58	;':'
  1289  101B  3420               	retlw	32	;' '
  1290  101C  3440               	retlw	64	;'@'
  1291  101D  3476               	retlw	118	;'v'
  1292  101E  3464               	retlw	100	;'d'
  1293  101F  342C               	retlw	44	;','
  1294  1020  3420               	retlw	32	;' '
  1295  1021  3476               	retlw	118	;'v'
  1296  1022  3465               	retlw	101	;'e'
  1297  1023  3472               	retlw	114	;'r'
  1298  1024  3462               	retlw	98	;'b'
  1299  1025  346F               	retlw	111	;'o'
  1300  1026  3473               	retlw	115	;'s'
  1301  1027  3465               	retlw	101	;'e'
  1302  1028  343A               	retlw	58	;':'
  1303  1029  3420               	retlw	32	;' '
  1304  102A  3440               	retlw	64	;'@'
  1305  102B  3476               	retlw	118	;'v'
  1306  102C  3476               	retlw	118	;'v'
  1307  102D  342C               	retlw	44	;','
  1308  102E  3420               	retlw	32	;' '
  1309  102F  346E               	retlw	110	;'n'
  1310  1030  346F               	retlw	111	;'o'
  1311  1031  3472               	retlw	114	;'r'
  1312  1032  346D               	retlw	109	;'m'
  1313  1033  3461               	retlw	97	;'a'
  1314  1034  346C               	retlw	108	;'l'
  1315  1035  343A               	retlw	58	;':'
  1316  1036  3420               	retlw	32	;' '
  1317  1037  3440               	retlw	64	;'@'
  1318  1038  3476               	retlw	118	;'v'
  1319  1039  346E               	retlw	110	;'n'
  1320  103A  347D               	retlw	125	;'}'
  1321  103B  340A               	retlw	10
  1322  103C  3400               	retlw	0
  1323                           
  1324                           	psect	stringtext8
  1325  103D                     __pstringtext8:	
  1326  103D                     STR_12:	
  1327  103D  3420               	retlw	32	;' '
  1328  103E  3420               	retlw	32	;' '
  1329  103F  3420               	retlw	32	;' '
  1330  1040  3420               	retlw	32	;' '
  1331  1041  3420               	retlw	32	;' '
  1332  1042  3477               	retlw	119	;'w'
  1333  1043  3469               	retlw	105	;'i'
  1334  1044  3474               	retlw	116	;'t'
  1335  1045  3468               	retlw	104	;'h'
  1336  1046  3420               	retlw	32	;' '
  1337  1047  3453               	retlw	83	;'S'
  1338  1048  3449               	retlw	73	;'I'
  1339  1049  3444               	retlw	68	;'D'
  1340  104A  343A               	retlw	58	;':'
  1341  104B  3420               	retlw	32	;' '
  1342  104C  3440               	retlw	64	;'@'
  1343  104D  346F               	retlw	111	;'o'
  1344  104E  346C               	retlw	108	;'l'
  1345  104F  3473               	retlw	115	;'s'
  1346  1050  3420               	retlw	32	;' '
  1347  1051  346F               	retlw	111	;'o'
  1348  1052  3472               	retlw	114	;'r'
  1349  1053  3420               	retlw	32	;' '
  1350  1054  3440               	retlw	64	;'@'
  1351  1055  346F               	retlw	111	;'o'
  1352  1056  346E               	retlw	110	;'n'
  1353  1057  3473               	retlw	115	;'s'
  1354  1058  342C               	retlw	44	;','
  1355  1059  3420               	retlw	32	;' '
  1356  105A  3469               	retlw	105	;'i'
  1357  105B  346E               	retlw	110	;'n'
  1358  105C  3420               	retlw	32	;' '
  1359  105D  3468               	retlw	104	;'h'
  1360  105E  3465               	retlw	101	;'e'
  1361  105F  3478               	retlw	120	;'x'
  1362  1060  3420               	retlw	32	;' '
  1363  1061  3466               	retlw	102	;'f'
  1364  1062  346F               	retlw	111	;'o'
  1365  1063  3472               	retlw	114	;'r'
  1366  1064  346D               	retlw	109	;'m'
  1367  1065  3461               	retlw	97	;'a'
  1368  1066  3474               	retlw	116	;'t'
  1369  1067  343A               	retlw	58	;':'
  1370  1068  3420               	retlw	32	;' '
  1371  1069  3440               	retlw	64	;'@'
  1372  106A  346F               	retlw	111	;'o'
  1373  106B  346C               	retlw	108	;'l'
  1374  106C  3468               	retlw	104	;'h'
  1375  106D  3420               	retlw	32	;' '
  1376  106E  346F               	retlw	111	;'o'
  1377  106F  3472               	retlw	114	;'r'
  1378  1070  3420               	retlw	32	;' '
  1379  1071  3440               	retlw	64	;'@'
  1380  1072  346F               	retlw	111	;'o'
  1381  1073  346E               	retlw	110	;'n'
  1382  1074  3468               	retlw	104	;'h'
  1383  1075  340A               	retlw	10
  1384  1076  3400               	retlw	0
  1385                           
  1386                           	psect	stringtext9
  1387  1077                     __pstringtext9:	
  1388  1077                     STR_20:	
  1389  1077  345B               	retlw	91	;'['
  1390  1078  3453               	retlw	83	;'S'
  1391  1079  3465               	retlw	101	;'e'
  1392  107A  346E               	retlw	110	;'n'
  1393  107B  3464               	retlw	100	;'d'
  1394  107C  3420               	retlw	32	;' '
  1395  107D  346D               	retlw	109	;'m'
  1396  107E  3465               	retlw	101	;'e'
  1397  107F  3473               	retlw	115	;'s'
  1398  1080  3473               	retlw	115	;'s'
  1399  1081  3461               	retlw	97	;'a'
  1400  1082  3467               	retlw	103	;'g'
  1401  1083  3465               	retlw	101	;'e'
  1402  1084  3420               	retlw	32	;' '
  1403  1085  3462               	retlw	98	;'b'
  1404  1086  3465               	retlw	101	;'e'
  1405  1087  3467               	retlw	103	;'g'
  1406  1088  3469               	retlw	105	;'i'
  1407  1089  346E               	retlw	110	;'n'
  1408  108A  346E               	retlw	110	;'n'
  1409  108B  3469               	retlw	105	;'i'
  1410  108C  346E               	retlw	110	;'n'
  1411  108D  3467               	retlw	103	;'g'
  1412  108E  3420               	retlw	32	;' '
  1413  108F  3477               	retlw	119	;'w'
  1414  1090  3469               	retlw	105	;'i'
  1415  1091  3474               	retlw	116	;'t'
  1416  1092  3468               	retlw	104	;'h'
  1417  1093  3420               	retlw	32	;' '
  1418  1094  3427               	retlw	39	;'''
  1419  1095  3440               	retlw	64	;'@'
  1420  1096  3427               	retlw	39	;'''
  1421  1097  3420               	retlw	32	;' '
  1422  1098  3463               	retlw	99	;'c'
  1423  1099  3468               	retlw	104	;'h'
  1424  109A  3461               	retlw	97	;'a'
  1425  109B  3472               	retlw	114	;'r'
  1426  109C  3461               	retlw	97	;'a'
  1427  109D  3463               	retlw	99	;'c'
  1428  109E  3474               	retlw	116	;'t'
  1429  109F  3465               	retlw	101	;'e'
  1430  10A0  3472               	retlw	114	;'r'
  1431  10A1  345D               	retlw	93	;']'
  1432  10A2  3420               	retlw	32	;' '
  1433  10A3  3440               	retlw	64	;'@'
  1434  10A4  343C               	retlw	60	;'<'
  1435  10A5  3440               	retlw	64	;'@'
  1436  10A6  346D               	retlw	109	;'m'
  1437  10A7  3465               	retlw	101	;'e'
  1438  10A8  3473               	retlw	115	;'s'
  1439  10A9  3473               	retlw	115	;'s'
  1440  10AA  3461               	retlw	97	;'a'
  1441  10AB  3467               	retlw	103	;'g'
  1442  10AC  3465               	retlw	101	;'e'
  1443  10AD  343E               	retlw	62	;'>'
  1444  10AE  340A               	retlw	10
  1445  10AF  3400               	retlw	0
  1446                           
  1447                           	psect	stringtext10
  1448  10B0                     __pstringtext10:	
  1449  10B0                     STR_11:	
  1450  10B0  345B               	retlw	91	;'['
  1451  10B1  3445               	retlw	69	;'E'
  1452  10B2  346E               	retlw	110	;'n'
  1453  10B3  3461               	retlw	97	;'a'
  1454  10B4  3462               	retlw	98	;'b'
  1455  10B5  346C               	retlw	108	;'l'
  1456  10B6  3465               	retlw	101	;'e'
  1457  10B7  3420               	retlw	32	;' '
  1458  10B8  346F               	retlw	111	;'o'
  1459  10B9  3470               	retlw	112	;'p'
  1460  10BA  3465               	retlw	101	;'e'
  1461  10BB  3472               	retlw	114	;'r'
  1462  10BC  3461               	retlw	97	;'a'
  1463  10BD  3474               	retlw	116	;'t'
  1464  10BE  3469               	retlw	105	;'i'
  1465  10BF  346F               	retlw	111	;'o'
  1466  10C0  346E               	retlw	110	;'n'
  1467  10C1  3420               	retlw	32	;' '
  1468  10C2  346D               	retlw	109	;'m'
  1469  10C3  346F               	retlw	111	;'o'
  1470  10C4  3464               	retlw	100	;'d'
  1471  10C5  3465               	retlw	101	;'e'
  1472  10C6  345D               	retlw	93	;']'
  1473  10C7  3420               	retlw	32	;' '
  1474  10C8  347B               	retlw	123	;'{'
  1475  10C9  346C               	retlw	108	;'l'
  1476  10CA  346F               	retlw	111	;'o'
  1477  10CB  346F               	retlw	111	;'o'
  1478  10CC  3470               	retlw	112	;'p'
  1479  10CD  3462               	retlw	98	;'b'
  1480  10CE  3461               	retlw	97	;'a'
  1481  10CF  3463               	retlw	99	;'c'
  1482  10D0  346B               	retlw	107	;'k'
  1483  10D1  343A               	retlw	58	;':'
  1484  10D2  3420               	retlw	32	;' '
  1485  10D3  3440               	retlw	64	;'@'
  1486  10D4  346F               	retlw	111	;'o'
  1487  10D5  346C               	retlw	108	;'l'
  1488  10D6  342C               	retlw	44	;','
  1489  10D7  3420               	retlw	32	;' '
  1490  10D8  346E               	retlw	110	;'n'
  1491  10D9  346F               	retlw	111	;'o'
  1492  10DA  3472               	retlw	114	;'r'
  1493  10DB  346D               	retlw	109	;'m'
  1494  10DC  3461               	retlw	97	;'a'
  1495  10DD  346C               	retlw	108	;'l'
  1496  10DE  343A               	retlw	58	;':'
  1497  10DF  3420               	retlw	32	;' '
  1498  10E0  3440               	retlw	64	;'@'
  1499  10E1  346F               	retlw	111	;'o'
  1500  10E2  346E               	retlw	110	;'n'
  1501  10E3  347D               	retlw	125	;'}'
  1502  10E4  340A               	retlw	10
  1503  10E5  3400               	retlw	0
  1504                           
  1505                           	psect	stringtext11
  1506  10E6                     __pstringtext11:	
  1507  10E6                     STR_9:	
  1508  10E6  345B               	retlw	91	;'['
  1509  10E7  3453               	retlw	83	;'S'
  1510  10E8  3465               	retlw	101	;'e'
  1511  10E9  3474               	retlw	116	;'t'
  1512  10EA  3420               	retlw	32	;' '
  1513  10EB  3473               	retlw	115	;'s'
  1514  10EC  3474               	retlw	116	;'t'
  1515  10ED  3461               	retlw	97	;'a'
  1516  10EE  346E               	retlw	110	;'n'
  1517  10EF  3464               	retlw	100	;'d'
  1518  10F0  3461               	retlw	97	;'a'
  1519  10F1  3472               	retlw	114	;'r'
  1520  10F2  3464               	retlw	100	;'d'
  1521  10F3  3420               	retlw	32	;' '
  1522  10F4  3469               	retlw	105	;'i'
  1523  10F5  3464               	retlw	100	;'d'
  1524  10F6  3465               	retlw	101	;'e'
  1525  10F7  346E               	retlw	110	;'n'
  1526  10F8  3474               	retlw	116	;'t'
  1527  10F9  3469               	retlw	105	;'i'
  1528  10FA  3466               	retlw	102	;'f'
  1529  10FB  3469               	retlw	105	;'i'
  1530  10FC  3465               	retlw	101	;'e'
  1531  10FD  3472               	retlw	114	;'r'
  1532  10FE  345D               	retlw	93	;']'
  1533  10FF  3420               	retlw	32	;' '
  1534  1100  3440               	retlw	64	;'@'
  1535  1101  3469               	retlw	105	;'i'
  1536  1102  343C               	retlw	60	;'<'
  1537  1103  3473               	retlw	115	;'s'
  1538  1104  3474               	retlw	116	;'t'
  1539  1105  3461               	retlw	97	;'a'
  1540  1106  346E               	retlw	110	;'n'
  1541  1107  3464               	retlw	100	;'d'
  1542  1108  3461               	retlw	97	;'a'
  1543  1109  3472               	retlw	114	;'r'
  1544  110A  3464               	retlw	100	;'d'
  1545  110B  3420               	retlw	32	;' '
  1546  110C  3469               	retlw	105	;'i'
  1547  110D  3464               	retlw	100	;'d'
  1548  110E  3465               	retlw	101	;'e'
  1549  110F  346E               	retlw	110	;'n'
  1550  1110  3474               	retlw	116	;'t'
  1551  1111  3469               	retlw	105	;'i'
  1552  1112  3466               	retlw	102	;'f'
  1553  1113  3469               	retlw	105	;'i'
  1554  1114  3465               	retlw	101	;'e'
  1555  1115  3472               	retlw	114	;'r'
  1556  1116  343E               	retlw	62	;'>'
  1557  1117  340A               	retlw	10
  1558  1118  3400               	retlw	0
  1559                           
  1560                           	psect	stringtext12
  1561  1119                     __pstringtext12:	
  1562  1119                     STR_41:	
  1563  1119  3452               	retlw	82	;'R'
  1564  111A  3458               	retlw	88	;'X'
  1565  111B  3446               	retlw	70	;'F'
  1566  111C  3425               	retlw	37	;'%'
  1567  111D  3464               	retlw	100	;'d'
  1568  111E  3420               	retlw	32	;' '
  1569  111F  3452               	retlw	82	;'R'
  1570  1120  3458               	retlw	88	;'X'
  1571  1121  3446               	retlw	70	;'F'
  1572  1122  3425               	retlw	37	;'%'
  1573  1123  3464               	retlw	100	;'d'
  1574  1124  3453               	retlw	83	;'S'
  1575  1125  3449               	retlw	73	;'I'
  1576  1126  3444               	retlw	68	;'D'
  1577  1127  3448               	retlw	72	;'H'
  1578  1128  3420               	retlw	32	;' '
  1579  1129  3452               	retlw	82	;'R'
  1580  112A  3458               	retlw	88	;'X'
  1581  112B  3446               	retlw	70	;'F'
  1582  112C  3425               	retlw	37	;'%'
  1583  112D  3464               	retlw	100	;'d'
  1584  112E  3453               	retlw	83	;'S'
  1585  112F  3449               	retlw	73	;'I'
  1586  1130  3444               	retlw	68	;'D'
  1587  1131  344C               	retlw	76	;'L'
  1588  1132  343A               	retlw	58	;':'
  1589  1133  3420               	retlw	32	;' '
  1590  1134  3425               	retlw	37	;'%'
  1591  1135  3434               	retlw	52	;'4'
  1592  1136  3464               	retlw	100	;'d'
  1593  1137  3420               	retlw	32	;' '
  1594  1138  3425               	retlw	37	;'%'
  1595  1139  3430               	retlw	48	;'0'
  1596  113A  3432               	retlw	50	;'2'
  1597  113B  3458               	retlw	88	;'X'
  1598  113C  3468               	retlw	104	;'h'
  1599  113D  3420               	retlw	32	;' '
  1600  113E  3425               	retlw	37	;'%'
  1601  113F  3430               	retlw	48	;'0'
  1602  1140  3432               	retlw	50	;'2'
  1603  1141  3458               	retlw	88	;'X'
  1604  1142  3468               	retlw	104	;'h'
  1605  1143  340A               	retlw	10
  1606  1144  3400               	retlw	0
  1607                           
  1608                           	psect	stringtext13
  1609  1145                     __pstringtext13:	
  1610  1145                     STR_40:	
  1611  1145  3452               	retlw	82	;'R'
  1612  1146  3458               	retlw	88	;'X'
  1613  1147  344D               	retlw	77	;'M'
  1614  1148  3425               	retlw	37	;'%'
  1615  1149  3464               	retlw	100	;'d'
  1616  114A  3420               	retlw	32	;' '
  1617  114B  3452               	retlw	82	;'R'
  1618  114C  3458               	retlw	88	;'X'
  1619  114D  344D               	retlw	77	;'M'
  1620  114E  3425               	retlw	37	;'%'
  1621  114F  3464               	retlw	100	;'d'
  1622  1150  3453               	retlw	83	;'S'
  1623  1151  3449               	retlw	73	;'I'
  1624  1152  3444               	retlw	68	;'D'
  1625  1153  3448               	retlw	72	;'H'
  1626  1154  3420               	retlw	32	;' '
  1627  1155  3452               	retlw	82	;'R'
  1628  1156  3458               	retlw	88	;'X'
  1629  1157  344D               	retlw	77	;'M'
  1630  1158  3425               	retlw	37	;'%'
  1631  1159  3464               	retlw	100	;'d'
  1632  115A  3453               	retlw	83	;'S'
  1633  115B  3449               	retlw	73	;'I'
  1634  115C  3444               	retlw	68	;'D'
  1635  115D  344C               	retlw	76	;'L'
  1636  115E  343A               	retlw	58	;':'
  1637  115F  3420               	retlw	32	;' '
  1638  1160  3425               	retlw	37	;'%'
  1639  1161  3434               	retlw	52	;'4'
  1640  1162  3464               	retlw	100	;'d'
  1641  1163  3420               	retlw	32	;' '
  1642  1164  3425               	retlw	37	;'%'
  1643  1165  3430               	retlw	48	;'0'
  1644  1166  3432               	retlw	50	;'2'
  1645  1167  3458               	retlw	88	;'X'
  1646  1168  3468               	retlw	104	;'h'
  1647  1169  3420               	retlw	32	;' '
  1648  116A  3425               	retlw	37	;'%'
  1649  116B  3430               	retlw	48	;'0'
  1650  116C  3432               	retlw	50	;'2'
  1651  116D  3458               	retlw	88	;'X'
  1652  116E  3468               	retlw	104	;'h'
  1653  116F  340A               	retlw	10
  1654  1170  3400               	retlw	0
  1655                           
  1656                           	psect	stringtext14
  1657  1171                     __pstringtext14:	
  1658  1171                     STR_21:	
  1659  1171  345B               	retlw	91	;'['
  1660  1172  3452               	retlw	82	;'R'
  1661  1173  3465               	retlw	101	;'e'
  1662  1174  3463               	retlw	99	;'c'
  1663  1175  3465               	retlw	101	;'e'
  1664  1176  3469               	retlw	105	;'i'
  1665  1177  3476               	retlw	118	;'v'
  1666  1178  3465               	retlw	101	;'e'
  1667  1179  3420               	retlw	32	;' '
  1668  117A  346D               	retlw	109	;'m'
  1669  117B  3465               	retlw	101	;'e'
  1670  117C  3473               	retlw	115	;'s'
  1671  117D  3473               	retlw	115	;'s'
  1672  117E  3461               	retlw	97	;'a'
  1673  117F  3467               	retlw	103	;'g'
  1674  1180  3465               	retlw	101	;'e'
  1675  1181  345D               	retlw	93	;']'
  1676  1182  3420               	retlw	32	;' '
  1677  1183  343C               	retlw	60	;'<'
  1678  1184  346D               	retlw	109	;'m'
  1679  1185  3465               	retlw	101	;'e'
  1680  1186  3473               	retlw	115	;'s'
  1681  1187  3473               	retlw	115	;'s'
  1682  1188  3461               	retlw	97	;'a'
  1683  1189  3467               	retlw	103	;'g'
  1684  118A  3465               	retlw	101	;'e'
  1685  118B  343E               	retlw	62	;'>'
  1686  118C  3420               	retlw	32	;' '
  1687  118D  3477               	retlw	119	;'w'
  1688  118E  3469               	retlw	105	;'i'
  1689  118F  346C               	retlw	108	;'l'
  1690  1190  346C               	retlw	108	;'l'
  1691  1191  3420               	retlw	32	;' '
  1692  1192  3462               	retlw	98	;'b'
  1693  1193  3465               	retlw	101	;'e'
  1694  1194  3420               	retlw	32	;' '
  1695  1195  346F               	retlw	111	;'o'
  1696  1196  3475               	retlw	117	;'u'
  1697  1197  3474               	retlw	116	;'t'
  1698  1198  3470               	retlw	112	;'p'
  1699  1199  3475               	retlw	117	;'u'
  1700  119A  3474               	retlw	116	;'t'
  1701  119B  340A               	retlw	10
  1702  119C  3400               	retlw	0
  1703                           
  1704                           	psect	stringtext15
  1705  119D                     __pstringtext15:	
  1706  119D                     STR_14:	
  1707  119D  345B               	retlw	91	;'['
  1708  119E  3453               	retlw	83	;'S'
  1709  119F  3465               	retlw	101	;'e'
  1710  11A0  3474               	retlw	116	;'t'
  1711  11A1  3420               	retlw	32	;' '
  1712  11A2  3466               	retlw	102	;'f'
  1713  11A3  3469               	retlw	105	;'i'
  1714  11A4  346C               	retlw	108	;'l'
  1715  11A5  3474               	retlw	116	;'t'
  1716  11A6  3465               	retlw	101	;'e'
  1717  11A7  3472               	retlw	114	;'r'
  1718  11A8  345D               	retlw	93	;']'
  1719  11A9  3420               	retlw	32	;' '
  1720  11AA  3440               	retlw	64	;'@'
  1721  11AB  3466               	retlw	102	;'f'
  1722  11AC  343C               	retlw	60	;'<'
  1723  11AD  346E               	retlw	110	;'n'
  1724  11AE  343E               	retlw	62	;'>'
  1725  11AF  343C               	retlw	60	;'<'
  1726  11B0  3466               	retlw	102	;'f'
  1727  11B1  3469               	retlw	105	;'i'
  1728  11B2  346C               	retlw	108	;'l'
  1729  11B3  3474               	retlw	116	;'t'
  1730  11B4  3465               	retlw	101	;'e'
  1731  11B5  3472               	retlw	114	;'r'
  1732  11B6  3428               	retlw	40	;'('
  1733  11B7  3453               	retlw	83	;'S'
  1734  11B8  3449               	retlw	73	;'I'
  1735  11B9  3444               	retlw	68	;'D'
  1736  11BA  3431               	retlw	49	;'1'
  1737  11BB  3430               	retlw	48	;'0'
  1738  11BC  3420               	retlw	32	;' '
  1739  11BD  347E               	retlw	126	;'~'
  1740  11BE  3420               	retlw	32	;' '
  1741  11BF  3453               	retlw	83	;'S'
  1742  11C0  3449               	retlw	73	;'I'
  1743  11C1  3444               	retlw	68	;'D'
  1744  11C2  3430               	retlw	48	;'0'
  1745  11C3  3429               	retlw	41	;')'
  1746  11C4  343E               	retlw	62	;'>'
  1747  11C5  340A               	retlw	10
  1748  11C6  3400               	retlw	0
  1749                           
  1750                           	psect	stringtext16
  1751  11C7                     __pstringtext16:	
  1752  11C7                     STR_13:	
  1753  11C7  345B               	retlw	91	;'['
  1754  11C8  3453               	retlw	83	;'S'
  1755  11C9  3465               	retlw	101	;'e'
  1756  11CA  3474               	retlw	116	;'t'
  1757  11CB  3420               	retlw	32	;' '
  1758  11CC  346D               	retlw	109	;'m'
  1759  11CD  3461               	retlw	97	;'a'
  1760  11CE  3473               	retlw	115	;'s'
  1761  11CF  346B               	retlw	107	;'k'
  1762  11D0  345D               	retlw	93	;']'
  1763  11D1  3420               	retlw	32	;' '
  1764  11D2  3440               	retlw	64	;'@'
  1765  11D3  346D               	retlw	109	;'m'
  1766  11D4  343C               	retlw	60	;'<'
  1767  11D5  346E               	retlw	110	;'n'
  1768  11D6  343E               	retlw	62	;'>'
  1769  11D7  343C               	retlw	60	;'<'
  1770  11D8  346D               	retlw	109	;'m'
  1771  11D9  3461               	retlw	97	;'a'
  1772  11DA  3473               	retlw	115	;'s'
  1773  11DB  346B               	retlw	107	;'k'
  1774  11DC  3428               	retlw	40	;'('
  1775  11DD  3453               	retlw	83	;'S'
  1776  11DE  3449               	retlw	73	;'I'
  1777  11DF  3444               	retlw	68	;'D'
  1778  11E0  3431               	retlw	49	;'1'
  1779  11E1  3430               	retlw	48	;'0'
  1780  11E2  3420               	retlw	32	;' '
  1781  11E3  347E               	retlw	126	;'~'
  1782  11E4  3420               	retlw	32	;' '
  1783  11E5  3453               	retlw	83	;'S'
  1784  11E6  3449               	retlw	73	;'I'
  1785  11E7  3444               	retlw	68	;'D'
  1786  11E8  3430               	retlw	48	;'0'
  1787  11E9  3429               	retlw	41	;')'
  1788  11EA  343E               	retlw	62	;'>'
  1789  11EB  340A               	retlw	10
  1790  11EC  3400               	retlw	0
  1791                           
  1792                           	psect	stringtext17
  1793  11ED                     __pstringtext17:	
  1794  11ED                     STR_16:	
  1795  11ED  345B               	retlw	91	;'['
  1796  11EE  3441               	retlw	65	;'A'
  1797  11EF  3462               	retlw	98	;'b'
  1798  11F0  346F               	retlw	111	;'o'
  1799  11F1  3472               	retlw	114	;'r'
  1800  11F2  3474               	retlw	116	;'t'
  1801  11F3  3420               	retlw	32	;' '
  1802  11F4  3461               	retlw	97	;'a'
  1803  11F5  346C               	retlw	108	;'l'
  1804  11F6  346C               	retlw	108	;'l'
  1805  11F7  3420               	retlw	32	;' '
  1806  11F8  3470               	retlw	112	;'p'
  1807  11F9  3465               	retlw	101	;'e'
  1808  11FA  346E               	retlw	110	;'n'
  1809  11FB  3464               	retlw	100	;'d'
  1810  11FC  3469               	retlw	105	;'i'
  1811  11FD  346E               	retlw	110	;'n'
  1812  11FE  3467               	retlw	103	;'g'
  1813  11FF  3420               	retlw	32	;' '
  1814  1200  3474               	retlw	116	;'t'
  1815  1201  3472               	retlw	114	;'r'
  1816  1202  3461               	retlw	97	;'a'
  1817  1203  346E               	retlw	110	;'n'
  1818  1204  3473               	retlw	115	;'s'
  1819  1205  346D               	retlw	109	;'m'
  1820  1206  3469               	retlw	105	;'i'
  1821  1207  3473               	retlw	115	;'s'
  1822  1208  3473               	retlw	115	;'s'
  1823  1209  3469               	retlw	105	;'i'
  1824  120A  346F               	retlw	111	;'o'
  1825  120B  346E               	retlw	110	;'n'
  1826  120C  3473               	retlw	115	;'s'
  1827  120D  345D               	retlw	93	;']'
  1828  120E  3420               	retlw	32	;' '
  1829  120F  3440               	retlw	64	;'@'
  1830  1210  3461               	retlw	97	;'a'
  1831  1211  340A               	retlw	10
  1832  1212  3400               	retlw	0
  1833                           
  1834                           	psect	stringtext18
  1835  1213                     __pstringtext18:	
  1836  1213                     STR_7:	
  1837  1213  342F               	retlw	47	;'/'
  1838  1214  342F               	retlw	47	;'/'
  1839  1215  342F               	retlw	47	;'/'
  1840  1216  3420               	retlw	32	;' '
  1841  1217  3455               	retlw	85	;'U'
  1842  1218  3441               	retlw	65	;'A'
  1843  1219  3452               	retlw	82	;'R'
  1844  121A  3454               	retlw	84	;'T'
  1845  121B  3432               	retlw	50	;'2'
  1846  121C  3443               	retlw	67	;'C'
  1847  121D  3441               	retlw	65	;'A'
  1848  121E  344E               	retlw	78	;'N'
  1849  121F  3420               	retlw	32	;' '
  1850  1220  3448               	retlw	72	;'H'
  1851  1221  3445               	retlw	69	;'E'
  1852  1222  344C               	retlw	76	;'L'
  1853  1223  3450               	retlw	80	;'P'
  1854  1224  3420               	retlw	32	;' '
  1855  1225  3428               	retlw	40	;'('
  1856  1226  3476               	retlw	118	;'v'
  1857  1227  3465               	retlw	101	;'e'
  1858  1228  3472               	retlw	114	;'r'
  1859  1229  3473               	retlw	115	;'s'
  1860  122A  3469               	retlw	105	;'i'
  1861  122B  346F               	retlw	111	;'o'
  1862  122C  346E               	retlw	110	;'n'
  1863  122D  3420               	retlw	32	;' '
  1864  122E  3425               	retlw	37	;'%'
  1865  122F  3473               	retlw	115	;'s'
  1866  1230  3429               	retlw	41	;')'
  1867  1231  3420               	retlw	32	;' '
  1868  1232  342F               	retlw	47	;'/'
  1869  1233  342F               	retlw	47	;'/'
  1870  1234  342F               	retlw	47	;'/'
  1871  1235  340A               	retlw	10
  1872  1236  3400               	retlw	0
  1873                           
  1874                           	psect	stringtext19
  1875  1237                     __pstringtext19:	
  1876  1237                     STR_17:	
  1877  1237  345B               	retlw	91	;'['
  1878  1238  3444               	retlw	68	;'D'
  1879  1239  3475               	retlw	117	;'u'
  1880  123A  346D               	retlw	109	;'m'
  1881  123B  3470               	retlw	112	;'p'
  1882  123C  3420               	retlw	32	;' '
  1883  123D  346D               	retlw	109	;'m'
  1884  123E  3461               	retlw	97	;'a'
  1885  123F  3473               	retlw	115	;'s'
  1886  1240  346B               	retlw	107	;'k'
  1887  1241  3473               	retlw	115	;'s'
  1888  1242  3420               	retlw	32	;' '
  1889  1243  3461               	retlw	97	;'a'
  1890  1244  346E               	retlw	110	;'n'
  1891  1245  3464               	retlw	100	;'d'
  1892  1246  3420               	retlw	32	;' '
  1893  1247  3466               	retlw	102	;'f'
  1894  1248  3469               	retlw	105	;'i'
  1895  1249  346C               	retlw	108	;'l'
  1896  124A  3474               	retlw	116	;'t'
  1897  124B  3465               	retlw	101	;'e'
  1898  124C  3472               	retlw	114	;'r'
  1899  124D  3473               	retlw	115	;'s'
  1900  124E  345D               	retlw	93	;']'
  1901  124F  3420               	retlw	32	;' '
  1902  1250  3440               	retlw	64	;'@'
  1903  1251  3446               	retlw	70	;'F'
  1904  1252  340A               	retlw	10
  1905  1253  3400               	retlw	0
  1906                           
  1907                           	psect	stringtext20
  1908  1254                     __pstringtext20:	
  1909  1254                     STR_19:	
  1910  1254  345B               	retlw	91	;'['
  1911  1255  3453               	retlw	83	;'S'
  1912  1256  3465               	retlw	101	;'e'
  1913  1257  346E               	retlw	110	;'n'
  1914  1258  3464               	retlw	100	;'d'
  1915  1259  3420               	retlw	32	;' '
  1916  125A  346D               	retlw	109	;'m'
  1917  125B  3465               	retlw	101	;'e'
  1918  125C  3473               	retlw	115	;'s'
  1919  125D  3473               	retlw	115	;'s'
  1920  125E  3461               	retlw	97	;'a'
  1921  125F  3467               	retlw	103	;'g'
  1922  1260  3465               	retlw	101	;'e'
  1923  1261  345D               	retlw	93	;']'
  1924  1262  3420               	retlw	32	;' '
  1925  1263  343C               	retlw	60	;'<'
  1926  1264  346D               	retlw	109	;'m'
  1927  1265  3465               	retlw	101	;'e'
  1928  1266  3473               	retlw	115	;'s'
  1929  1267  3473               	retlw	115	;'s'
  1930  1268  3461               	retlw	97	;'a'
  1931  1269  3467               	retlw	103	;'g'
  1932  126A  3465               	retlw	101	;'e'
  1933  126B  343E               	retlw	62	;'>'
  1934  126C  340A               	retlw	10
  1935  126D  3400               	retlw	0
  1936                           
  1937                           	psect	stringtext21
  1938  126E                     __pstringtext21:	
  1939  126E                     STR_15:	
  1940  126E  345B               	retlw	91	;'['
  1941  126F  3453               	retlw	83	;'S'
  1942  1270  3465               	retlw	101	;'e'
  1943  1271  3474               	retlw	116	;'t'
  1944  1272  3420               	retlw	32	;' '
  1945  1273  3462               	retlw	98	;'b'
  1946  1274  3461               	retlw	97	;'a'
  1947  1275  3475               	retlw	117	;'u'
  1948  1276  3464               	retlw	100	;'d'
  1949  1277  3420               	retlw	32	;' '
  1950  1278  3472               	retlw	114	;'r'
  1951  1279  3461               	retlw	97	;'a'
  1952  127A  3474               	retlw	116	;'t'
  1953  127B  3465               	retlw	101	;'e'
  1954  127C  345D               	retlw	93	;']'
  1955  127D  3420               	retlw	32	;' '
  1956  127E  3440               	retlw	64	;'@'
  1957  127F  3462               	retlw	98	;'b'
  1958  1280  343C               	retlw	60	;'<'
  1959  1281  3462               	retlw	98	;'b'
  1960  1282  3470               	retlw	112	;'p'
  1961  1283  3472               	retlw	114	;'r'
  1962  1284  343E               	retlw	62	;'>'
  1963  1285  340A               	retlw	10
  1964  1286  3400               	retlw	0
  1965                           
  1966                           	psect	stringtext22
  1967  1287                     __pstringtext22:	
  1968  1287                     STR_25:	
  1969  1287  3466               	retlw	102	;'f'
  1970  1288  3469               	retlw	105	;'i'
  1971  1289  346C               	retlw	108	;'l'
  1972  128A  3474               	retlw	116	;'t'
  1973  128B  3465               	retlw	101	;'e'
  1974  128C  3472               	retlw	114	;'r'
  1975  128D  3428               	retlw	40	;'('
  1976  128E  3425               	retlw	37	;'%'
  1977  128F  3464               	retlw	100	;'d'
  1978  1290  3429               	retlw	41	;')'
  1979  1291  343A               	retlw	58	;':'
  1980  1292  3420               	retlw	32	;' '
  1981  1293  3425               	retlw	37	;'%'
  1982  1294  3430               	retlw	48	;'0'
  1983  1295  3432               	retlw	50	;'2'
  1984  1296  3478               	retlw	120	;'x'
  1985  1297  3420               	retlw	32	;' '
  1986  1298  3425               	retlw	37	;'%'
  1987  1299  3430               	retlw	48	;'0'
  1988  129A  3432               	retlw	50	;'2'
  1989  129B  3478               	retlw	120	;'x'
  1990  129C  340A               	retlw	10
  1991  129D  3400               	retlw	0
  1992                           
  1993                           	psect	stringtext23
  1994  129E                     __pstringtext23:	
  1995  129E                     STR_22:	
  1996  129E  345B               	retlw	91	;'['
  1997  129F  3453               	retlw	83	;'S'
  1998  12A0  3468               	retlw	104	;'h'
  1999  12A1  346F               	retlw	111	;'o'
  2000  12A2  3477               	retlw	119	;'w'
  2001  12A3  3420               	retlw	32	;' '
  2002  12A4  3474               	retlw	116	;'t'
  2003  12A5  3468               	retlw	104	;'h'
  2004  12A6  3469               	retlw	105	;'i'
  2005  12A7  3473               	retlw	115	;'s'
  2006  12A8  3420               	retlw	32	;' '
  2007  12A9  3468               	retlw	104	;'h'
  2008  12AA  3465               	retlw	101	;'e'
  2009  12AB  346C               	retlw	108	;'l'
  2010  12AC  3470               	retlw	112	;'p'
  2011  12AD  345D               	retlw	93	;']'
  2012  12AE  343A               	retlw	58	;':'
  2013  12AF  3420               	retlw	32	;' '
  2014  12B0  3440               	retlw	64	;'@'
  2015  12B1  3468               	retlw	104	;'h'
  2016  12B2  340A               	retlw	10
  2017  12B3  3400               	retlw	0
  2018                           
  2019                           	psect	stringtext24
  2020  12B4                     __pstringtext24:	
  2021  12B4                     STR_24:	
  2022  12B4  346D               	retlw	109	;'m'
  2023  12B5  3461               	retlw	97	;'a'
  2024  12B6  3473               	retlw	115	;'s'
  2025  12B7  346B               	retlw	107	;'k'
  2026  12B8  3428               	retlw	40	;'('
  2027  12B9  3425               	retlw	37	;'%'
  2028  12BA  3464               	retlw	100	;'d'
  2029  12BB  3429               	retlw	41	;')'
  2030  12BC  343A               	retlw	58	;':'
  2031  12BD  3420               	retlw	32	;' '
  2032  12BE  3425               	retlw	37	;'%'
  2033  12BF  3430               	retlw	48	;'0'
  2034  12C0  3432               	retlw	50	;'2'
  2035  12C1  3478               	retlw	120	;'x'
  2036  12C2  3420               	retlw	32	;' '
  2037  12C3  3425               	retlw	37	;'%'
  2038  12C4  3430               	retlw	48	;'0'
  2039  12C5  3432               	retlw	50	;'2'
  2040  12C6  3478               	retlw	120	;'x'
  2041  12C7  340A               	retlw	10
  2042  12C8  3400               	retlw	0
  2043                           
  2044                           	psect	stringtext25
  2045  12C9                     __pstringtext25:	
  2046  12C9                     STR_18:	
  2047  12C9  345B               	retlw	91	;'['
  2048  12CA  3444               	retlw	68	;'D'
  2049  12CB  3475               	retlw	117	;'u'
  2050  12CC  346D               	retlw	109	;'m'
  2051  12CD  3470               	retlw	112	;'p'
  2052  12CE  3420               	retlw	32	;' '
  2053  12CF  3472               	retlw	114	;'r'
  2054  12D0  3465               	retlw	101	;'e'
  2055  12D1  3467               	retlw	103	;'g'
  2056  12D2  3469               	retlw	105	;'i'
  2057  12D3  3473               	retlw	115	;'s'
  2058  12D4  3474               	retlw	116	;'t'
  2059  12D5  3465               	retlw	101	;'e'
  2060  12D6  3472               	retlw	114	;'r'
  2061  12D7  3473               	retlw	115	;'s'
  2062  12D8  345D               	retlw	93	;']'
  2063  12D9  3420               	retlw	32	;' '
  2064  12DA  3440               	retlw	64	;'@'
  2065  12DB  3464               	retlw	100	;'d'
  2066  12DC  340A               	retlw	10
  2067  12DD  3400               	retlw	0
  2068                           
  2069                           	psect	stringtext26
  2070  12DE                     __pstringtext26:	
  2071  12DE                     STR_8:	
  2072  12DE  3430               	retlw	48	;'0'
  2073  12DF  342E               	retlw	46	;'.'
  2074  12E0  3431               	retlw	49	;'1'
  2075  12E1  3433               	retlw	51	;'3'
  2076  12E2  3420               	retlw	32	;' '
  2077  12E3  3420               	retlw	32	;' '
  2078  12E4  344D               	retlw	77	;'M'
  2079  12E5  3461               	retlw	97	;'a'
  2080  12E6  3472               	retlw	114	;'r'
  2081  12E7  3463               	retlw	99	;'c'
  2082  12E8  3468               	retlw	104	;'h'
  2083  12E9  3420               	retlw	32	;' '
  2084  12EA  3432               	retlw	50	;'2'
  2085  12EB  3433               	retlw	51	;'3'
  2086  12EC  342C               	retlw	44	;','
  2087  12ED  3420               	retlw	32	;' '
  2088  12EE  3432               	retlw	50	;'2'
  2089  12EF  3430               	retlw	48	;'0'
  2090  12F0  3431               	retlw	49	;'1'
  2091  12F1  3438               	retlw	56	;'8'
  2092  12F2  3400               	retlw	0
  2093                           
  2094                           	psect	stringtext27
  2095  12F3                     __pstringtext27:	
  2096  12F3                     STR_33:	
  2097  12F3  3443               	retlw	67	;'C'
  2098  12F4  346F               	retlw	111	;'o'
  2099  12F5  3470               	retlw	112	;'p'
  2100  12F6  3479               	retlw	121	;'y'
  2101  12F7  3469               	retlw	105	;'i'
  2102  12F8  346E               	retlw	110	;'n'
  2103  12F9  3467               	retlw	103	;'g'
  2104  12FA  3420               	retlw	32	;' '
  2105  12FB  3462               	retlw	98	;'b'
  2106  12FC  3475               	retlw	117	;'u'
  2107  12FD  3466               	retlw	102	;'f'
  2108  12FE  3466               	retlw	102	;'f'
  2109  12FF  3465               	retlw	101	;'e'
  2110  1300  3472               	retlw	114	;'r'
  2111  1301  343A               	retlw	58	;':'
  2112  1302  3420               	retlw	32	;' '
  2113  1303  3425               	retlw	37	;'%'
  2114  1304  3463               	retlw	99	;'c'
  2115  1305  340A               	retlw	10
  2116  1306  3400               	retlw	0
  2117                           
  2118                           	psect	stringtext28
  2119  1307                     __pstringtext28:	
  2120  1307                     STR_36:	
  2121  1307  344D               	retlw	77	;'M'
  2122  1308  3465               	retlw	101	;'e'
  2123  1309  3473               	retlw	115	;'s'
  2124  130A  3473               	retlw	115	;'s'
  2125  130B  3461               	retlw	97	;'a'
  2126  130C  3467               	retlw	103	;'g'
  2127  130D  3465               	retlw	101	;'e'
  2128  130E  3420               	retlw	32	;' '
  2129  130F  3473               	retlw	115	;'s'
  2130  1310  3465               	retlw	101	;'e'
  2131  1311  346E               	retlw	110	;'n'
  2132  1312  3474               	retlw	116	;'t'
  2133  1313  343A               	retlw	58	;':'
  2134  1314  3420               	retlw	32	;' '
  2135  1315  3425               	retlw	37	;'%'
  2136  1316  3473               	retlw	115	;'s'
  2137  1317  340A               	retlw	10
  2138  1318  3400               	retlw	0
  2139                           
  2140                           	psect	stringtext29
  2141  1319                     __pstringtext29:	
  2142  1319                     STR_62:	
  2143  1319  3430               	retlw	48	;'0'
  2144  131A  3431               	retlw	49	;'1'
  2145  131B  3432               	retlw	50	;'2'
  2146  131C  3433               	retlw	51	;'3'
  2147  131D  3434               	retlw	52	;'4'
  2148  131E  3435               	retlw	53	;'5'
  2149  131F  3436               	retlw	54	;'6'
  2150  1320  3437               	retlw	55	;'7'
  2151  1321  3438               	retlw	56	;'8'
  2152  1322  3439               	retlw	57	;'9'
  2153  1323  3441               	retlw	65	;'A'
  2154  1324  3442               	retlw	66	;'B'
  2155  1325  3443               	retlw	67	;'C'
  2156  1326  3444               	retlw	68	;'D'
  2157  1327  3445               	retlw	69	;'E'
  2158  1328  3446               	retlw	70	;'F'
  2159  1329  3400               	retlw	0
  2160                           
  2161                           	psect	stringtext30
  2162  132A                     __pstringtext30:	
  2163  132A                     STR_63:	
  2164  132A  3430               	retlw	48	;'0'
  2165  132B  3431               	retlw	49	;'1'
  2166  132C  3432               	retlw	50	;'2'
  2167  132D  3433               	retlw	51	;'3'
  2168  132E  3434               	retlw	52	;'4'
  2169  132F  3435               	retlw	53	;'5'
  2170  1330  3436               	retlw	54	;'6'
  2171  1331  3437               	retlw	55	;'7'
  2172  1332  3438               	retlw	56	;'8'
  2173  1333  3439               	retlw	57	;'9'
  2174  1334  3461               	retlw	97	;'a'
  2175  1335  3462               	retlw	98	;'b'
  2176  1336  3463               	retlw	99	;'c'
  2177  1337  3464               	retlw	100	;'d'
  2178  1338  3465               	retlw	101	;'e'
  2179  1339  3466               	retlw	102	;'f'
  2180  133A  3400               	retlw	0
  2181                           
  2182                           	psect	stringtext31
  2183  133B                     __pstringtext31:	
  2184  133B                     STR_26:	
  2185  133B  3452               	retlw	82	;'R'
  2186  133C  3458               	retlw	88	;'X'
  2187  133D  3442               	retlw	66	;'B'
  2188  133E  3425               	retlw	37	;'%'
  2189  133F  3464               	retlw	100	;'d'
  2190  1340  3453               	retlw	83	;'S'
  2191  1341  3449               	retlw	73	;'I'
  2192  1342  3444               	retlw	68	;'D'
  2193  1343  3448               	retlw	72	;'H'
  2194  1344  343A               	retlw	58	;':'
  2195  1345  3420               	retlw	32	;' '
  2196  1346  3425               	retlw	37	;'%'
  2197  1347  3430               	retlw	48	;'0'
  2198  1348  3432               	retlw	50	;'2'
  2199  1349  3478               	retlw	120	;'x'
  2200  134A  340A               	retlw	10
  2201  134B  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext32
  2204  134C                     __pstringtext32:	
  2205  134C                     STR_34:	
  2206  134C  3454               	retlw	84	;'T'
  2207  134D  3458               	retlw	88	;'X'
  2208  134E  3442               	retlw	66	;'B'
  2209  134F  3425               	retlw	37	;'%'
  2210  1350  3464               	retlw	100	;'d'
  2211  1351  3453               	retlw	83	;'S'
  2212  1352  3449               	retlw	73	;'I'
  2213  1353  3444               	retlw	68	;'D'
  2214  1354  3448               	retlw	72	;'H'
  2215  1355  343A               	retlw	58	;':'
  2216  1356  3420               	retlw	32	;' '
  2217  1357  3425               	retlw	37	;'%'
  2218  1358  3430               	retlw	48	;'0'
  2219  1359  3432               	retlw	50	;'2'
  2220  135A  3478               	retlw	120	;'x'
  2221  135B  340A               	retlw	10
  2222  135C  3400               	retlw	0
  2223                           
  2224                           	psect	stringtext33
  2225  135D                     __pstringtext33:	
  2226  135D                     STR_27:	
  2227  135D  3452               	retlw	82	;'R'
  2228  135E  3458               	retlw	88	;'X'
  2229  135F  3442               	retlw	66	;'B'
  2230  1360  3425               	retlw	37	;'%'
  2231  1361  3464               	retlw	100	;'d'
  2232  1362  3453               	retlw	83	;'S'
  2233  1363  3449               	retlw	73	;'I'
  2234  1364  3444               	retlw	68	;'D'
  2235  1365  344C               	retlw	76	;'L'
  2236  1366  343A               	retlw	58	;':'
  2237  1367  3420               	retlw	32	;' '
  2238  1368  3425               	retlw	37	;'%'
  2239  1369  3430               	retlw	48	;'0'
  2240  136A  3432               	retlw	50	;'2'
  2241  136B  3478               	retlw	120	;'x'
  2242  136C  340A               	retlw	10
  2243  136D  3400               	retlw	0
  2244                           
  2245                           	psect	stringtext34
  2246  136E                     __pstringtext34:	
  2247  136E                     STR_35:	
  2248  136E  3454               	retlw	84	;'T'
  2249  136F  3458               	retlw	88	;'X'
  2250  1370  3442               	retlw	66	;'B'
  2251  1371  3425               	retlw	37	;'%'
  2252  1372  3464               	retlw	100	;'d'
  2253  1373  3453               	retlw	83	;'S'
  2254  1374  3449               	retlw	73	;'I'
  2255  1375  3444               	retlw	68	;'D'
  2256  1376  344C               	retlw	76	;'L'
  2257  1377  343A               	retlw	58	;':'
  2258  1378  3420               	retlw	32	;' '
  2259  1379  3425               	retlw	37	;'%'
  2260  137A  3430               	retlw	48	;'0'
  2261  137B  3432               	retlw	50	;'2'
  2262  137C  3478               	retlw	120	;'x'
  2263  137D  340A               	retlw	10
  2264  137E  3400               	retlw	0
  2265                           
  2266                           	psect	stringtext35
  2267  137F                     __pstringtext35:	
  2268  137F                     STR_28:	
  2269  137F  3452               	retlw	82	;'R'
  2270  1380  3458               	retlw	88	;'X'
  2271  1381  3442               	retlw	66	;'B'
  2272  1382  3425               	retlw	37	;'%'
  2273  1383  3464               	retlw	100	;'d'
  2274  1384  3444               	retlw	68	;'D'
  2275  1385  344C               	retlw	76	;'L'
  2276  1386  3443               	retlw	67	;'C'
  2277  1387  343A               	retlw	58	;':'
  2278  1388  3420               	retlw	32	;' '
  2279  1389  3425               	retlw	37	;'%'
  2280  138A  3430               	retlw	48	;'0'
  2281  138B  3432               	retlw	50	;'2'
  2282  138C  3478               	retlw	120	;'x'
  2283  138D  340A               	retlw	10
  2284  138E  3400               	retlw	0
  2285                           
  2286                           	psect	stringtext36
  2287  138F                     __pstringtext36:	
  2288  138F                     STR_55:	
  2289  138F  3452               	retlw	82	;'R'
  2290  1390  3458               	retlw	88	;'X'
  2291  1391  3442               	retlw	66	;'B'
  2292  1392  3430               	retlw	48	;'0'
  2293  1393  3443               	retlw	67	;'C'
  2294  1394  3454               	retlw	84	;'T'
  2295  1395  3452               	retlw	82	;'R'
  2296  1396  344C               	retlw	76	;'L'
  2297  1397  343A               	retlw	58	;':'
  2298  1398  3420               	retlw	32	;' '
  2299  1399  3425               	retlw	37	;'%'
  2300  139A  3430               	retlw	48	;'0'
  2301  139B  3432               	retlw	50	;'2'
  2302  139C  3478               	retlw	120	;'x'
  2303  139D  340A               	retlw	10
  2304  139E  3400               	retlw	0
  2305                           
  2306                           	psect	stringtext37
  2307  139F                     __pstringtext37:	
  2308  139F                     STR_51:	
  2309  139F  3454               	retlw	84	;'T'
  2310  13A0  3458               	retlw	88	;'X'
  2311  13A1  3442               	retlw	66	;'B'
  2312  13A2  3430               	retlw	48	;'0'
  2313  13A3  3443               	retlw	67	;'C'
  2314  13A4  3454               	retlw	84	;'T'
  2315  13A5  3452               	retlw	82	;'R'
  2316  13A6  344C               	retlw	76	;'L'
  2317  13A7  343A               	retlw	58	;':'
  2318  13A8  3420               	retlw	32	;' '
  2319  13A9  3425               	retlw	37	;'%'
  2320  13AA  3430               	retlw	48	;'0'
  2321  13AB  3432               	retlw	50	;'2'
  2322  13AC  3478               	retlw	120	;'x'
  2323  13AD  340A               	retlw	10
  2324  13AE  3400               	retlw	0
  2325                           
  2326                           	psect	stringtext38
  2327  13AF                     __pstringtext38:	
  2328  13AF                     STR_56:	
  2329  13AF  3452               	retlw	82	;'R'
  2330  13B0  3458               	retlw	88	;'X'
  2331  13B1  3442               	retlw	66	;'B'
  2332  13B2  3431               	retlw	49	;'1'
  2333  13B3  3443               	retlw	67	;'C'
  2334  13B4  3454               	retlw	84	;'T'
  2335  13B5  3452               	retlw	82	;'R'
  2336  13B6  344C               	retlw	76	;'L'
  2337  13B7  343A               	retlw	58	;':'
  2338  13B8  3420               	retlw	32	;' '
  2339  13B9  3425               	retlw	37	;'%'
  2340  13BA  3430               	retlw	48	;'0'
  2341  13BB  3432               	retlw	50	;'2'
  2342  13BC  3478               	retlw	120	;'x'
  2343  13BD  340A               	retlw	10
  2344  13BE  3400               	retlw	0
  2345                           
  2346                           	psect	stringtext39
  2347  13BF                     __pstringtext39:	
  2348  13BF                     STR_52:	
  2349  13BF  3454               	retlw	84	;'T'
  2350  13C0  3458               	retlw	88	;'X'
  2351  13C1  3442               	retlw	66	;'B'
  2352  13C2  3431               	retlw	49	;'1'
  2353  13C3  3443               	retlw	67	;'C'
  2354  13C4  3454               	retlw	84	;'T'
  2355  13C5  3452               	retlw	82	;'R'
  2356  13C6  344C               	retlw	76	;'L'
  2357  13C7  343A               	retlw	58	;':'
  2358  13C8  3420               	retlw	32	;' '
  2359  13C9  3425               	retlw	37	;'%'
  2360  13CA  3430               	retlw	48	;'0'
  2361  13CB  3432               	retlw	50	;'2'
  2362  13CC  3478               	retlw	120	;'x'
  2363  13CD  340A               	retlw	10
  2364  13CE  3400               	retlw	0
  2365                           
  2366                           	psect	stringtext40
  2367  13CF                     __pstringtext40:	
  2368  13CF                     STR_53:	
  2369  13CF  3454               	retlw	84	;'T'
  2370  13D0  3458               	retlw	88	;'X'
  2371  13D1  3442               	retlw	66	;'B'
  2372  13D2  3432               	retlw	50	;'2'
  2373  13D3  3443               	retlw	67	;'C'
  2374  13D4  3454               	retlw	84	;'T'
  2375  13D5  3452               	retlw	82	;'R'
  2376  13D6  344C               	retlw	76	;'L'
  2377  13D7  343A               	retlw	58	;':'
  2378  13D8  3420               	retlw	32	;' '
  2379  13D9  3425               	retlw	37	;'%'
  2380  13DA  3430               	retlw	48	;'0'
  2381  13DB  3432               	retlw	50	;'2'
  2382  13DC  3478               	retlw	120	;'x'
  2383  13DD  340A               	retlw	10
  2384  13DE  3400               	retlw	0
  2385                           
  2386                           	psect	stringtext41
  2387  13DF                     __pstringtext41:	
  2388  13DF                     STR_29:	
  2389  13DF  3452               	retlw	82	;'R'
  2390  13E0  3458               	retlw	88	;'X'
  2391  13E1  3442               	retlw	66	;'B'
  2392  13E2  3425               	retlw	37	;'%'
  2393  13E3  3464               	retlw	100	;'d'
  2394  13E4  3444               	retlw	68	;'D'
  2395  13E5  3430               	retlw	48	;'0'
  2396  13E6  343A               	retlw	58	;':'
  2397  13E7  3420               	retlw	32	;' '
  2398  13E8  3425               	retlw	37	;'%'
  2399  13E9  3430               	retlw	48	;'0'
  2400  13EA  3432               	retlw	50	;'2'
  2401  13EB  3478               	retlw	120	;'x'
  2402  13EC  340A               	retlw	10
  2403  13ED  3400               	retlw	0
  2404                           
  2405                           	psect	stringtext42
  2406  13EE                     __pstringtext42:	
  2407  13EE                     STR_58:	
  2408  13EE  3443               	retlw	67	;'C'
  2409  13EF  3441               	retlw	65	;'A'
  2410  13F0  344E               	retlw	78	;'N'
  2411  13F1  3443               	retlw	67	;'C'
  2412  13F2  3454               	retlw	84	;'T'
  2413  13F3  3452               	retlw	82	;'R'
  2414  13F4  344C               	retlw	76	;'L'
  2415  13F5  343A               	retlw	58	;':'
  2416  13F6  3420               	retlw	32	;' '
  2417  13F7  3425               	retlw	37	;'%'
  2418  13F8  3430               	retlw	48	;'0'
  2419  13F9  3432               	retlw	50	;'2'
  2420  13FA  3478               	retlw	120	;'x'
  2421  13FB  340A               	retlw	10
  2422  13FC  3400               	retlw	0
  2423                           
  2424                           	psect	stringtext43
  2425  13FD                     __pstringtext43:	
  2426  13FD                     STR_23:	
  2427  13FD  3443               	retlw	67	;'C'
  2428  13FE  3441               	retlw	65	;'A'
  2429  13FF  344E               	retlw	78	;'N'
  2430  1400  3453               	retlw	83	;'S'
  2431  1401  3454               	retlw	84	;'T'
  2432  1402  3441               	retlw	65	;'A'
  2433  1403  3454               	retlw	84	;'T'
  2434  1404  343A               	retlw	58	;':'
  2435  1405  3420               	retlw	32	;' '
  2436  1406  3425               	retlw	37	;'%'
  2437  1407  3430               	retlw	48	;'0'
  2438  1408  3432               	retlw	50	;'2'
  2439  1409  3478               	retlw	120	;'x'
  2440  140A  340A               	retlw	10
  2441  140B  3400               	retlw	0
  2442                           
  2443                           	psect	stringtext44
  2444  140C                     __pstringtext44:	
  2445  140C                     STR_32:	
  2446  140C  3454               	retlw	84	;'T'
  2447  140D  3458               	retlw	88	;'X'
  2448  140E  3442               	retlw	66	;'B'
  2449  140F  3430               	retlw	48	;'0'
  2450  1410  3420               	retlw	32	;' '
  2451  1411  3469               	retlw	105	;'i'
  2452  1412  3473               	retlw	115	;'s'
  2453  1413  3420               	retlw	32	;' '
  2454  1414  3469               	retlw	105	;'i'
  2455  1415  3464               	retlw	100	;'d'
  2456  1416  346C               	retlw	108	;'l'
  2457  1417  3465               	retlw	101	;'e'
  2458  1418  340A               	retlw	10
  2459  1419  3400               	retlw	0
  2460                           
  2461                           	psect	stringtext45
  2462  141A                     __pstringtext45:	
  2463  141A                     STR_31:	
  2464  141A  3454               	retlw	84	;'T'
  2465  141B  3458               	retlw	88	;'X'
  2466  141C  3442               	retlw	66	;'B'
  2467  141D  3431               	retlw	49	;'1'
  2468  141E  3420               	retlw	32	;' '
  2469  141F  3469               	retlw	105	;'i'
  2470  1420  3473               	retlw	115	;'s'
  2471  1421  3420               	retlw	32	;' '
  2472  1422  3469               	retlw	105	;'i'
  2473  1423  3464               	retlw	100	;'d'
  2474  1424  346C               	retlw	108	;'l'
  2475  1425  3465               	retlw	101	;'e'
  2476  1426  340A               	retlw	10
  2477  1427  3400               	retlw	0
  2478                           
  2479                           	psect	stringtext46
  2480  1428                     __pstringtext46:	
  2481  1428                     STR_30:	
  2482  1428  3454               	retlw	84	;'T'
  2483  1429  3458               	retlw	88	;'X'
  2484  142A  3442               	retlw	66	;'B'
  2485  142B  3432               	retlw	50	;'2'
  2486  142C  3420               	retlw	32	;' '
  2487  142D  3469               	retlw	105	;'i'
  2488  142E  3473               	retlw	115	;'s'
  2489  142F  3420               	retlw	32	;' '
  2490  1430  3469               	retlw	105	;'i'
  2491  1431  3464               	retlw	100	;'d'
  2492  1432  346C               	retlw	108	;'l'
  2493  1433  3465               	retlw	101	;'e'
  2494  1434  340A               	retlw	10
  2495  1435  3400               	retlw	0
  2496                           
  2497                           	psect	stringtext47
  2498  1436                     __pstringtext47:	
  2499  1436                     STR_38:	
  2500  1436  3452               	retlw	82	;'R'
  2501  1437  3458               	retlw	88	;'X'
  2502  1438  3430               	retlw	48	;'0'
  2503  1439  3449               	retlw	73	;'I'
  2504  143A  3446               	retlw	70	;'F'
  2505  143B  3420               	retlw	32	;' '
  2506  143C  3469               	retlw	105	;'i'
  2507  143D  3473               	retlw	115	;'s'
  2508  143E  3420               	retlw	32	;' '
  2509  143F  346F               	retlw	111	;'o'
  2510  1440  346E               	retlw	110	;'n'
  2511  1441  340A               	retlw	10
  2512  1442  3400               	retlw	0
  2513                           
  2514                           	psect	stringtext48
  2515  1443                     __pstringtext48:	
  2516  1443                     STR_37:	
  2517  1443  3452               	retlw	82	;'R'
  2518  1444  3458               	retlw	88	;'X'
  2519  1445  3431               	retlw	49	;'1'
  2520  1446  3449               	retlw	73	;'I'
  2521  1447  3446               	retlw	70	;'F'
  2522  1448  3420               	retlw	32	;' '
  2523  1449  3469               	retlw	105	;'i'
  2524  144A  3473               	retlw	115	;'s'
  2525  144B  3420               	retlw	32	;' '
  2526  144C  346F               	retlw	111	;'o'
  2527  144D  346E               	retlw	110	;'n'
  2528  144E  340A               	retlw	10
  2529  144F  3400               	retlw	0
  2530                           
  2531                           	psect	stringtext49
  2532  1450                     __pstringtext49:	
  2533  1450                     STR_47:	
  2534  1450  3443               	retlw	67	;'C'
  2535  1451  344E               	retlw	78	;'N'
  2536  1452  3446               	retlw	70	;'F'
  2537  1453  3431               	retlw	49	;'1'
  2538  1454  343A               	retlw	58	;':'
  2539  1455  3420               	retlw	32	;' '
  2540  1456  3425               	retlw	37	;'%'
  2541  1457  3430               	retlw	48	;'0'
  2542  1458  3432               	retlw	50	;'2'
  2543  1459  3478               	retlw	120	;'x'
  2544  145A  340A               	retlw	10
  2545  145B  3400               	retlw	0
  2546                           
  2547                           	psect	stringtext50
  2548  145C                     __pstringtext50:	
  2549  145C                     STR_48:	
  2550  145C  3443               	retlw	67	;'C'
  2551  145D  344E               	retlw	78	;'N'
  2552  145E  3446               	retlw	70	;'F'
  2553  145F  3432               	retlw	50	;'2'
  2554  1460  343A               	retlw	58	;':'
  2555  1461  3420               	retlw	32	;' '
  2556  1462  3425               	retlw	37	;'%'
  2557  1463  3430               	retlw	48	;'0'
  2558  1464  3432               	retlw	50	;'2'
  2559  1465  3478               	retlw	120	;'x'
  2560  1466  340A               	retlw	10
  2561  1467  3400               	retlw	0
  2562                           
  2563                           	psect	stringtext51
  2564  1468                     __pstringtext51:	
  2565  1468                     STR_49:	
  2566  1468  3443               	retlw	67	;'C'
  2567  1469  344E               	retlw	78	;'N'
  2568  146A  3446               	retlw	70	;'F'
  2569  146B  3433               	retlw	51	;'3'
  2570  146C  343A               	retlw	58	;':'
  2571  146D  3420               	retlw	32	;' '
  2572  146E  3425               	retlw	37	;'%'
  2573  146F  3430               	retlw	48	;'0'
  2574  1470  3432               	retlw	50	;'2'
  2575  1471  3478               	retlw	120	;'x'
  2576  1472  340A               	retlw	10
  2577  1473  3400               	retlw	0
  2578                           
  2579                           	psect	stringtext52
  2580  1486                     __pstringtext52:	
  2581  1486                     STR_61:	
  2582  1486  3428               	retlw	40	;'('
  2583  1487  346E               	retlw	110	;'n'
  2584  1488  3475               	retlw	117	;'u'
  2585  1489  346C               	retlw	108	;'l'
  2586  148A  346C               	retlw	108	;'l'
  2587  148B  3429               	retlw	41	;')'
  2588  148C  3400               	retlw	0
  2589                           
  2590                           	psect	stringtext53
  2591  148D                     __pstringtext53:	
  2592  148D                     STR_1:	
  2593  148D  3425               	retlw	37	;'%'
  2594  148E  3464               	retlw	100	;'d'
  2595  148F  342C               	retlw	44	;','
  2596  1490  3425               	retlw	37	;'%'
  2597  1491  3473               	retlw	115	;'s'
  2598  1492  340A               	retlw	10
  2599  1493  3400               	retlw	0
  2600                           
  2601                           	psect	stringtext54
  2602  149A                     __pstringtext54:	
  2603  149A                     STR_2:	
  2604  149A  3425               	retlw	37	;'%'
  2605  149B  3430               	retlw	48	;'0'
  2606  149C  3433               	retlw	51	;'3'
  2607  149D  3478               	retlw	120	;'x'
  2608  149E  343A               	retlw	58	;':'
  2609  149F  3400               	retlw	0
  2610                           
  2611                           	psect	stringtext55
  2612  14A0                     __pstringtext55:	
  2613  14A0                     STR_3:	
  2614  14A0  3420               	retlw	32	;' '
  2615  14A1  3425               	retlw	37	;'%'
  2616  14A2  3430               	retlw	48	;'0'
  2617  14A3  3432               	retlw	50	;'2'
  2618  14A4  3478               	retlw	120	;'x'
  2619  14A5  3400               	retlw	0
  2620                           
  2621                           	psect	stringtext56
  2622  14A6                     __pstringtext56:	
  2623  14A6                     STR_39:	
  2624  14A6  342D               	retlw	45	;'-'
  2625  14A7  342D               	retlw	45	;'-'
  2626  14A8  342D               	retlw	45	;'-'
  2627  14A9  340A               	retlw	10
  2628  14AA  3400               	retlw	0
  2629                           
  2630                           	psect	stringtext57
  2631  14B1                     __pstringtext57:	
  2632  14B1                     STR_6:	
  2633  14B1  3425               	retlw	37	;'%'
  2634  14B2  3463               	retlw	99	;'c'
  2635  14B3  3400               	retlw	0
  2636                           
  2637                           	psect	stringtext58
  2638  0000                     __pstringtext58:	
  2639  14A9                     
  2640                           ; #config settings
  2641  0000                     
  2642                           	psect	cinit
  2643  07F0                     start_initialization:	
  2644  07F0                     __initialization:	
  2645                           
  2646                           ; Clear objects allocated to BANK0
  2647  07F0  0020               	movlb	0	; select bank0
  2648  07F1  01EB               	clrf	__pbssBANK0& (0+127)
  2649  07F2  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2650  07F3  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2651  07F4  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2652  07F5  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  2653                           
  2654                           ; Clear objects allocated to BANK1
  2655  07F6  30A0               	movlw	low __pbssBANK1
  2656  07F7  0084               	movwf	4
  2657  07F8  3000               	movlw	high __pbssBANK1
  2658  07F9  0085               	movwf	5
  2659  07FA  3024               	movlw	36
  2660  07FB  318A  22FE         	fcall	clear_ram0
  2661  07FD                     end_of_initialization:	
  2662                           ;End of C runtime variable initialization code
  2663                           
  2664  07FD                     __end_of__initialization:	
  2665  07FD  0020               	movlb	0
  2666  07FE  3183  2BA3         	ljmp	_main	;jump to C main() function
  2667                           
  2668                           	psect	bssBANK0
  2669  006B                     __pbssBANK0:	
  2670  006B                     _mode:	
  2671  006B                     	ds	2
  2672  006D                     _output_format:	
  2673  006D                     	ds	2
  2674  006F                     _operation_mode:	
  2675  006F                     	ds	1
  2676                           
  2677                           	psect	bssBANK1
  2678  00A0                     __pbssBANK1:	
  2679  00A0                     _save_rxfn:	
  2680  00A0                     	ds	12
  2681  00AC                     _save_rxmn:	
  2682  00AC                     	ds	4
  2683  00B0                     _handler:	
  2684  00B0                     	ds	2
  2685  00B2                     _sid:	
  2686  00B2                     	ds	2
  2687  00B4                     _buf:	
  2688  00B4                     	ds	16
  2689                           
  2690                           	psect	clrtext
  2691  0AFE                     clear_ram0:	
  2692                           ;	Called with FSR0 containing the base address, and
  2693                           ;	WREG with the size to clear
  2694                           
  2695  0AFE  0064               	clrwdt	;clear the watchdog before getting into this loop
  2696  0AFF                     clrloop0:	
  2697  0AFF  0180               	clrf	0	;clear RAM location pointed to by FSR
  2698  0B00  3101               	addfsr 0,1
  2699  0B01  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2700  0B02  2AFF               	goto	clrloop0	;have we reached the end yet?
  2701  0B03  3400               	retlw	0	;all done for this memory range, return
  2702                           
  2703                           	psect	cstackBANK1
  2704  00C4                     __pcstackBANK1:	
  2705  00C4                     main@buf:	
  2706                           
  2707                           ; 16 bytes @ 0x0
  2708  00C4                     	ds	16
  2709  00D4                     main@sid:	
  2710                           
  2711                           ; 1 bytes @ 0x10
  2712  00D4                     	ds	1
  2713  00D5                     main@bpr:	
  2714                           
  2715                           ; 1 bytes @ 0x11
  2716  00D5                     	ds	1
  2717  00D6                     main@status:	
  2718                           
  2719                           ; 1 bytes @ 0x12
  2720  00D6                     	ds	1
  2721  00D7                     main@mask:	
  2722                           
  2723                           ; 2 bytes @ 0x13
  2724  00D7                     	ds	2
  2725  00D9                     main@echo_back:	
  2726                           
  2727                           ; 1 bytes @ 0x15
  2728  00D9                     	ds	1
  2729  00DA                     main@n:	
  2730                           
  2731                           ; 1 bytes @ 0x16
  2732  00DA                     	ds	1
  2733  00DB                     main@c:	
  2734                           
  2735                           ; 1 bytes @ 0x17
  2736  00DB                     	ds	1
  2737  00DC                     main@cmd:	
  2738                           
  2739                           ; 1 bytes @ 0x18
  2740  00DC                     	ds	1
  2741  00DD                     main@idx:	
  2742                           
  2743                           ; 1 bytes @ 0x19
  2744  00DD                     	ds	1
  2745                           
  2746                           	psect	cstackCOMMON
  2747  0070                     __pcstackCOMMON:	
  2748  0070                     ?_isdigit:	
  2749  0070                     ?_PIN_MANAGER_Initialize:	
  2750                           ; 1 bit 
  2751                           
  2752  0070                     ??_PIN_MANAGER_Initialize:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ?_OSCILLATOR_Initialize:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ??_OSCILLATOR_Initialize:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     ?_WDT_Initialize:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0070                     ??_WDT_Initialize:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_SPI_Initialize:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ??_SPI_Initialize:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_EUSART_Initialize:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ??_EUSART_Initialize:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_can_status_check:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_can_set_sid:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_can_logging_mode:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_can_ope_mode:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_can_abort:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_can_baudrate:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_can_dump_masks_and_filters:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_can_dump_registers:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ??_isdigit:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_SYSTEM_Initialize:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0070                     ??_SYSTEM_Initialize:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0070                     ?_EUSART_Read:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0070                     ??_EUSART_Read:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ?_EUSART_Write:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0070                     ??_EUSART_Write:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824  0070                     ?_putch:	
  2825                           ; 1 bytes @ 0x0
  2826                           
  2827  0070                     ?_SPI_Exchange8bit:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830  0070                     ??_SPI_Exchange8bit:	
  2831                           ; 1 bytes @ 0x0
  2832                           
  2833  0070                     ?_main:	
  2834                           ; 1 bytes @ 0x0
  2835                           
  2836  0070                     ?_abort_pending_transmissions:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0070                     ?_txf_clear:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0070                     ?_receive:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0070                     ?_read_register:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0070                     ?___wmul:	
  2849                           ; 1 bytes @ 0x0
  2850                           
  2851  0070                     ?___lwdiv:	
  2852                           ; 2 bytes @ 0x0
  2853                           
  2854  0070                     EUSART_Write@txData:	
  2855                           ; 2 bytes @ 0x0
  2856                           
  2857  0070                     SPI_Exchange8bit@data:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0070                     can_logging_mode@verbose:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     _isdigit$826:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     can_set_sid@can_node:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ___wmul@multiplier:	
  2870                           ; 2 bytes @ 0x0
  2871                           
  2872  0070                     ___lwdiv@divisor:	
  2873                           ; 2 bytes @ 0x0
  2874                           
  2875                           
  2876                           ; 2 bytes @ 0x0
  2877  0070                     	ds	1
  2878  0071                     ??_can_logging_mode:	
  2879  0071                     ??_putch:	
  2880                           ; 1 bytes @ 0x1
  2881                           
  2882  0071                     ?_SPI_Exchange8bitBuffer:	
  2883                           ; 1 bytes @ 0x1
  2884                           
  2885  0071                     putch@txData:	
  2886                           ; 1 bytes @ 0x1
  2887                           
  2888  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2889                           ; 1 bytes @ 0x1
  2890                           
  2891  0071                     isdigit@c:	
  2892                           ; 1 bytes @ 0x1
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x1
  2896  0071                     	ds	1
  2897  0072                     ??_can_set_sid:	
  2898  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2899                           ; 1 bytes @ 0x2
  2900                           
  2901  0072                     can_logging_mode@debug:	
  2902                           ; 1 bytes @ 0x2
  2903                           
  2904  0072                     ___wmul@multiplicand:	
  2905                           ; 1 bytes @ 0x2
  2906                           
  2907  0072                     ___lwdiv@dividend:	
  2908                           ; 2 bytes @ 0x2
  2909                           
  2910                           
  2911                           ; 2 bytes @ 0x2
  2912  0072                     	ds	1
  2913  0073                     ??_SPI_Exchange8bitBuffer:	
  2914                           
  2915                           ; 1 bytes @ 0x3
  2916  0073                     	ds	1
  2917  0074                     ??___wmul:	
  2918  0074                     ??___lwdiv:	
  2919                           ; 1 bytes @ 0x4
  2920                           
  2921  0074                     ___wmul@product:	
  2922                           ; 1 bytes @ 0x4
  2923                           
  2924                           
  2925                           ; 2 bytes @ 0x4
  2926  0074                     	ds	1
  2927  0075                     can_set_sid@sidh:	
  2928  0075                     ___lwdiv@quotient:	
  2929                           ; 1 bytes @ 0x5
  2930                           
  2931                           
  2932                           ; 2 bytes @ 0x5
  2933  0075                     	ds	1
  2934  0076                     ?_atoi:	
  2935  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2936                           ; 2 bytes @ 0x6
  2937                           
  2938  0076                     can_set_sid@sidl:	
  2939                           ; 1 bytes @ 0x6
  2940                           
  2941                           
  2942                           ; 1 bytes @ 0x6
  2943  0076                     	ds	1
  2944  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2945  0077                     ___lwdiv@counter:	
  2946                           ; 1 bytes @ 0x7
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0x7
  2950  0077                     	ds	1
  2951  0078                     ??_atoi:	
  2952  0078                     ?_SPI_exchange:	
  2953                           ; 1 bytes @ 0x8
  2954                           
  2955  0078                     ?___lwmod:	
  2956                           ; 1 bytes @ 0x8
  2957                           
  2958  0078                     SPI_exchange@len:	
  2959                           ; 2 bytes @ 0x8
  2960                           
  2961  0078                     ___lwmod@divisor:	
  2962                           ; 1 bytes @ 0x8
  2963                           
  2964                           
  2965                           ; 2 bytes @ 0x8
  2966  0078                     	ds	1
  2967  0079                     ??_SPI_exchange:	
  2968                           
  2969                           ; 1 bytes @ 0x9
  2970  0079                     	ds	1
  2971  007A                     atoi@sign:	
  2972  007A                     ___lwmod@dividend:	
  2973                           ; 1 bytes @ 0xA
  2974                           
  2975                           
  2976                           ; 2 bytes @ 0xA
  2977  007A                     	ds	1
  2978  007B                     atoi@a:	
  2979                           
  2980                           ; 2 bytes @ 0xB
  2981  007B                     	ds	1
  2982  007C                     ??___lwmod:	
  2983  007C                     SPI_exchange@bytes_written:	
  2984                           ; 1 bytes @ 0xC
  2985                           
  2986                           
  2987                           ; 1 bytes @ 0xC
  2988  007C                     	ds	1
  2989  007D                     SPI_exchange@buf:	
  2990  007D                     atoi@s:	
  2991                           ; 1 bytes @ 0xD
  2992                           
  2993  007D                     ___lwmod@counter:	
  2994                           ; 1 bytes @ 0xD
  2995                           
  2996                           
  2997                           ; 1 bytes @ 0xD
  2998  007D                     	ds	1
  2999                           
  3000                           	psect	cstackBANK0
  3001  0020                     __pcstackBANK0:	
  3002  0020                     ??_abort_pending_transmissions:	
  3003  0020                     ??_txf_clear:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0020                     ??_read_register:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009                           
  3010                           ; 1 bytes @ 0x0
  3011  0020                     	ds	1
  3012  0021                     read_register@addr:	
  3013                           
  3014                           ; 1 bytes @ 0x1
  3015  0021                     	ds	1
  3016  0022                     ?_printf:	
  3017  0022                     abort_pending_transmissions@bytes_written:	
  3018                           ; 2 bytes @ 0x2
  3019                           
  3020  0022                     txf_clear@mask:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     printf@f:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026                           
  3027                           ; 2 bytes @ 0x2
  3028  0022                     	ds	1
  3029  0023                     txf_clear@bytes_written:	
  3030                           
  3031                           ; 1 bytes @ 0x3
  3032  0023                     	ds	1
  3033  0024                     txf_clear@n:	
  3034                           
  3035                           ; 1 bytes @ 0x4
  3036  0024                     	ds	12
  3037  0030                     ??_printf:	
  3038                           
  3039                           ; 1 bytes @ 0x10
  3040  0030                     	ds	4
  3041  0034                     _printf$635:	
  3042                           
  3043                           ; 2 bytes @ 0x14
  3044  0034                     	ds	2
  3045  0036                     printf@idx:	
  3046                           
  3047                           ; 1 bytes @ 0x16
  3048  0036                     	ds	1
  3049  0037                     printf@prec:	
  3050                           
  3051                           ; 1 bytes @ 0x17
  3052  0037                     	ds	1
  3053  0038                     printf@cp:	
  3054                           
  3055                           ; 2 bytes @ 0x18
  3056  0038                     	ds	2
  3057  003A                     printf@len:	
  3058                           
  3059                           ; 2 bytes @ 0x1A
  3060  003A                     	ds	2
  3061  003C                     printf@ap:	
  3062                           
  3063                           ; 1 bytes @ 0x1C
  3064  003C                     	ds	1
  3065  003D                     printf@val:	
  3066                           
  3067                           ; 2 bytes @ 0x1D
  3068  003D                     	ds	2
  3069  003F                     printf@flag:	
  3070                           
  3071                           ; 1 bytes @ 0x1F
  3072  003F                     	ds	1
  3073  0040                     printf@width:	
  3074                           
  3075                           ; 2 bytes @ 0x20
  3076  0040                     	ds	2
  3077  0042                     printf@c:	
  3078                           
  3079                           ; 1 bytes @ 0x22
  3080  0042                     	ds	1
  3081  0043                     ??_can_ope_mode:	
  3082  0043                     ??_can_dump_masks_and_filters:	
  3083                           ; 1 bytes @ 0x23
  3084                           
  3085  0043                     ??_can_dump_registers:	
  3086                           ; 1 bytes @ 0x23
  3087                           
  3088  0043                     ?_can_send:	
  3089                           ; 1 bytes @ 0x23
  3090                           
  3091  0043                     ?_receive_handler:	
  3092                           ; 1 bytes @ 0x23
  3093                           
  3094  0043                     can_send@dlc:	
  3095                           ; 1 bytes @ 0x23
  3096                           
  3097  0043                     receive_handler@sid:	
  3098                           ; 1 bytes @ 0x23
  3099                           
  3100                           
  3101                           ; 2 bytes @ 0x23
  3102  0043                     	ds	1
  3103  0044                     ??_can_send:	
  3104                           
  3105                           ; 1 bytes @ 0x24
  3106  0044                     	ds	1
  3107  0045                     receive_handler@buf:	
  3108  0045                     can_ope_mode@bytes_written:	
  3109                           ; 1 bytes @ 0x25
  3110                           
  3111                           
  3112                           ; 1 bytes @ 0x25
  3113  0045                     	ds	1
  3114  0046                     receive_handler@dlc:	
  3115  0046                     can_ope_mode@ope_mode:	
  3116                           ; 1 bytes @ 0x26
  3117                           
  3118                           
  3119                           ; 1 bytes @ 0x26
  3120  0046                     	ds	1
  3121  0047                     ?_can_init:	
  3122  0047                     ??_can_abort:	
  3123                           ; 1 bytes @ 0x27
  3124                           
  3125  0047                     ??_can_baudrate:	
  3126                           ; 1 bytes @ 0x27
  3127                           
  3128  0047                     ?_can_set_mask:	
  3129                           ; 1 bytes @ 0x27
  3130                           
  3131  0047                     ??_receive_handler:	
  3132                           ; 1 bytes @ 0x27
  3133                           
  3134  0047                     can_set_mask@n:	
  3135                           ; 1 bytes @ 0x27
  3136                           
  3137  0047                     can_init@receive_handler:	
  3138                           ; 1 bytes @ 0x27
  3139                           
  3140                           
  3141                           ; 2 bytes @ 0x27
  3142  0047                     	ds	1
  3143  0048                     can_send@len:	
  3144  0048                     can_abort@bytes_written:	
  3145                           ; 1 bytes @ 0x28
  3146                           
  3147  0048                     can_set_mask@mask:	
  3148                           ; 1 bytes @ 0x28
  3149                           
  3150                           
  3151                           ; 2 bytes @ 0x28
  3152  0048                     	ds	1
  3153  0049                     ??_can_init:	
  3154  0049                     can_send@bytes_written:	
  3155                           ; 1 bytes @ 0x29
  3156                           
  3157  0049                     can_baudrate@bpr:	
  3158                           ; 1 bytes @ 0x29
  3159                           
  3160                           
  3161                           ; 1 bytes @ 0x29
  3162  0049                     	ds	1
  3163  004A                     ??_can_set_mask:	
  3164  004A                     receive_handler@i:	
  3165                           ; 1 bytes @ 0x2A
  3166                           
  3167  004A                     can_send@status:	
  3168                           ; 1 bytes @ 0x2A
  3169                           
  3170  004A                     can_baudrate@mask:	
  3171                           ; 1 bytes @ 0x2A
  3172                           
  3173                           
  3174                           ; 1 bytes @ 0x2A
  3175  004A                     	ds	1
  3176  004B                     ??_receive:	
  3177  004B                     can_send@data_buf:	
  3178                           ; 1 bytes @ 0x2B
  3179                           
  3180  004B                     can_baudrate@bytes_written:	
  3181                           ; 1 bytes @ 0x2B
  3182                           
  3183                           
  3184                           ; 1 bytes @ 0x2B
  3185  004B                     	ds	1
  3186  004C                     can_send@i:	
  3187                           
  3188                           ; 1 bytes @ 0x2C
  3189  004C                     	ds	1
  3190  004D                     can_send@n:	
  3191  004D                     can_dump_masks_and_filters@h:	
  3192                           ; 1 bytes @ 0x2D
  3193                           
  3194                           
  3195                           ; 1 bytes @ 0x2D
  3196  004D                     	ds	1
  3197  004E                     can_dump_masks_and_filters@l:	
  3198                           
  3199                           ; 1 bytes @ 0x2E
  3200  004E                     	ds	1
  3201  004F                     can_dump_masks_and_filters@m:	
  3202                           
  3203                           ; 2 bytes @ 0x2F
  3204  004F                     	ds	1
  3205  0050                     receive@bytes_read:	
  3206  0050                     _can_set_mask$509:	
  3207                           ; 1 bytes @ 0x30
  3208                           
  3209                           
  3210                           ; 2 bytes @ 0x30
  3211  0050                     	ds	1
  3212  0051                     can_dump_masks_and_filters@i:	
  3213  0051                     receive@rx_buf:	
  3214                           ; 1 bytes @ 0x31
  3215                           
  3216                           
  3217                           ; 15 bytes @ 0x31
  3218  0051                     	ds	1
  3219  0052                     can_set_mask@cmd:	
  3220                           
  3221                           ; 1 bytes @ 0x32
  3222  0052                     	ds	1
  3223  0053                     can_set_mask@mask_sidh:	
  3224                           
  3225                           ; 1 bytes @ 0x33
  3226  0053                     	ds	1
  3227  0054                     can_set_mask@mask_sidl:	
  3228                           
  3229                           ; 1 bytes @ 0x34
  3230  0054                     	ds	12
  3231  0060                     receive@pbuf:	
  3232                           
  3233                           ; 1 bytes @ 0x40
  3234  0060                     	ds	1
  3235  0061                     receive@id:	
  3236                           
  3237                           ; 2 bytes @ 0x41
  3238  0061                     	ds	2
  3239  0063                     receive@dlc:	
  3240                           
  3241                           ; 1 bytes @ 0x43
  3242  0063                     	ds	1
  3243  0064                     receive@n:	
  3244                           
  3245                           ; 1 bytes @ 0x44
  3246  0064                     	ds	1
  3247  0065                     ??_can_status_check:	
  3248                           
  3249                           ; 1 bytes @ 0x45
  3250  0065                     	ds	2
  3251  0067                     can_status_check@bytes_written:	
  3252                           
  3253                           ; 1 bytes @ 0x47
  3254  0067                     	ds	1
  3255  0068                     can_status_check@status:	
  3256                           
  3257                           ; 1 bytes @ 0x48
  3258  0068                     	ds	1
  3259  0069                     ??_main:	
  3260                           
  3261                           ; 1 bytes @ 0x49
  3262  0069                     	ds	2
  3263                           
  3264                           	psect	maintext
  3265  03A3                     __pmaintext:	
  3266 ;;
  3267 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3268 ;;
  3269 ;; *************** function _main *****************
  3270 ;; Defined at:
  3271 ;;		line 48 in file "main.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  status          1   18[BANK1 ] unsigned char 
  3276 ;;  buf            16    0[BANK1 ] unsigned char [16]
  3277 ;;  mask            2   19[BANK1 ] unsigned int 
  3278 ;;  idx             1   25[BANK1 ] unsigned char 
  3279 ;;  cmd             1   24[BANK1 ] unsigned char 
  3280 ;;  c               1   23[BANK1 ] unsigned char 
  3281 ;;  n               1   22[BANK1 ] unsigned char 
  3282 ;;  echo_back       1   21[BANK1 ] unsigned char 
  3283 ;;  bpr             1   17[BANK1 ] unsigned char 
  3284 ;;  sid             1   16[BANK1 ] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : B1F/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3295 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3298 ;;Total ram usage:       28 bytes
  3299 ;; Hardware stack levels required when called:    6
  3300 ;; This function calls:
  3301 ;;		_EUSART_Read
  3302 ;;		_SYSTEM_Initialize
  3303 ;;		_atoi
  3304 ;;		_can_abort
  3305 ;;		_can_baudrate
  3306 ;;		_can_dump_masks_and_filters
  3307 ;;		_can_dump_registers
  3308 ;;		_can_init
  3309 ;;		_can_logging_mode
  3310 ;;		_can_ope_mode
  3311 ;;		_can_send
  3312 ;;		_can_set_mask
  3313 ;;		_can_set_sid
  3314 ;;		_can_status_check
  3315 ;;		_printf
  3316 ;; This function is called by:
  3317 ;;		Startup code after reset
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _main
  3323  03A3                     _main:	
  3324                           
  3325                           ;main.c: 50: LATCbits.LATC3 = 1;
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3329  03A3  0022               	movlb	2	; select bank2
  3330  03A4  158E               	bsf	14,3	;volatile
  3331                           
  3332                           ;main.c: 52: uint8_t buf[16];
  3333                           ;main.c: 53: bool echo_back = 0;
  3334  03A5  0021               	movlb	1	; select bank1
  3335  03A6  01D9               	clrf	main@echo_back^(0+128)
  3336                           
  3337                           ;main.c: 54: uint8_t c, idx;
  3338                           ;main.c: 56: uint8_t cmd, sid, n, bpr;
  3339                           ;main.c: 57: uint16_t mask;
  3340                           ;main.c: 59: _delay((unsigned long)((100)*(2000000/4000.0)));
  3341  03A7  3041               	movlw	65
  3342  03A8  0020               	movlb	0	; select bank0
  3343  03A9  00E9               	movwf	??_main
  3344  03AA  30EE               	movlw	238
  3345  03AB                     u2617:	
  3346  03AB  0B89               	decfsz	9,f
  3347  03AC  2BAB               	goto	u2617
  3348  03AD  0BE9               	decfsz	??_main,f
  3349  03AE  2BAB               	goto	u2617
  3350  03AF  0000               	nop
  3351                           
  3352                           ;main.c: 61: SYSTEM_Initialize();
  3353  03B0  318B  2351  3183   	fcall	_SYSTEM_Initialize
  3354                           
  3355                           ;main.c: 66: output_format.with_sid = 0;
  3356  03B3  0020               	movlb	0	; select bank0
  3357  03B4  01ED               	clrf	_output_format
  3358                           
  3359                           ;main.c: 67: output_format.hex_output = 0;
  3360  03B5  01EE               	clrf	_output_format+1
  3361                           
  3362                           ;main.c: 68: can_init(receive_handler);
  3363  03B6  3019               	movlw	low _receive_handler
  3364  03B7  00C7               	movwf	can_init@receive_handler
  3365  03B8  300D               	movlw	high _receive_handler
  3366  03B9  00C8               	movwf	can_init@receive_handler+1
  3367  03BA  318E  261B  3183   	fcall	_can_init
  3368  03BD                     L1:	
  3369                           
  3370                           ;main.c: 70: idx = 0;
  3371  03BD  0021               	movlb	1	; select bank1
  3372  03BE  01DD               	clrf	main@idx^(0+128)
  3373  03BF                     l2727:	
  3374                           ;main.c: 72: while (1)
  3375                           
  3376                           
  3377                           ;main.c: 73: {
  3378                           ;main.c: 74: bool status = can_status_check();
  3379  03BF  318D  256E  3183   	fcall	_can_status_check
  3380  03C2  0020               	movlb	0	; select bank0
  3381  03C3  00E9               	movwf	??_main
  3382  03C4  0869               	movf	??_main,w
  3383  03C5  0021               	movlb	1	; select bank1
  3384  03C6  00D6               	movwf	main@status^(0+128)
  3385                           
  3386                           ;main.c: 75: if (status) {
  3387  03C7  0856               	movf	main@status^(0+128),w
  3388  03C8  1903               	btfsc	3,2
  3389  03C9  2BCD               	goto	l204
  3390                           
  3391                           ;main.c: 76: LATCbits.LATC3 = 0;
  3392  03CA  0022               	movlb	2	; select bank2
  3393  03CB  118E               	bcf	14,3	;volatile
  3394                           
  3395                           ;main.c: 77: } else {
  3396  03CC  2BCF               	goto	l205
  3397  03CD                     l204:	
  3398                           
  3399                           ;main.c: 78: LATCbits.LATC3 = 1;
  3400  03CD  0022               	movlb	2	; select bank2
  3401  03CE  158E               	bsf	14,3	;volatile
  3402  03CF                     l205:	
  3403                           
  3404                           ;main.c: 79: }
  3405                           ;main.c: 80: if ((PIR1bits.RCIF)) {
  3406  03CF  0020               	movlb	0	; select bank0
  3407  03D0  1E91               	btfss	17,5	;volatile
  3408  03D1  2BBF               	goto	l2727
  3409                           
  3410                           ;main.c: 81: c = EUSART_Read();
  3411  03D2  318B  2323  3183   	fcall	_EUSART_Read
  3412  03D5  0020               	movlb	0	; select bank0
  3413  03D6  00E9               	movwf	??_main
  3414  03D7  0869               	movf	??_main,w
  3415  03D8  0021               	movlb	1	; select bank1
  3416  03D9  00DB               	movwf	main@c^(0+128)
  3417                           
  3418                           ;main.c: 82: if (echo_back) printf("%c", c);
  3419  03DA  0859               	movf	main@echo_back^(0+128),w
  3420  03DB  1903               	btfsc	3,2
  3421  03DC  2BEE               	goto	l2739
  3422  03DD  30B1               	movlw	low (STR_6| (0+32768))
  3423  03DE  0020               	movlb	0	; select bank0
  3424  03DF  00A2               	movwf	printf@f
  3425  03E0  3094               	movlw	high (STR_6| (0+32768))
  3426  03E1  00A3               	movwf	printf@f+1
  3427  03E2  0021               	movlb	1	; select bank1
  3428  03E3  085B               	movf	main@c^(0+128),w
  3429  03E4  0020               	movlb	0	; select bank0
  3430  03E5  00E9               	movwf	??_main
  3431  03E6  01EA               	clrf	??_main+1
  3432  03E7  0869               	movf	??_main,w
  3433  03E8  00A4               	movwf	?_printf+2
  3434  03E9  086A               	movf	??_main+1,w
  3435  03EA  00A5               	movwf	?_printf+3
  3436  03EB  3185  25A5  3183   	fcall	_printf
  3437  03EE                     l2739:	
  3438                           
  3439                           ;main.c: 84: buf[idx] = c;
  3440  03EE  0021               	movlb	1	; select bank1
  3441  03EF  085B               	movf	main@c^(0+128),w
  3442  03F0  0020               	movlb	0	; select bank0
  3443  03F1  00E9               	movwf	??_main
  3444  03F2  0021               	movlb	1	; select bank1
  3445  03F3  085D               	movf	main@idx^(0+128),w
  3446  03F4  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3447  03F5  0086               	movwf	6
  3448  03F6  0187               	clrf	7
  3449  03F7  0020               	movlb	0	; select bank0
  3450  03F8  0869               	movf	??_main,w
  3451  03F9  0081               	movwf	1
  3452                           
  3453                           ;main.c: 87: if (c == '\n') {
  3454  03FA  300A               	movlw	10
  3455  03FB  0021               	movlb	1	; select bank1
  3456  03FC  065B               	xorwf	main@c^(0+128),w
  3457  03FD  1D03               	btfss	3,2
  3458  03FE  2D8C               	goto	l2835
  3459                           
  3460                           ;main.c: 88: buf[idx] = '\0';
  3461  03FF  085D               	movf	main@idx^(0+128),w
  3462  0400  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3463  0401  0086               	movwf	6
  3464  0402  0187               	clrf	7
  3465  0403  0181               	clrf	1
  3466                           
  3467                           ;main.c: 89: if (buf[0] == '@') {
  3468  0404  3040               	movlw	64
  3469  0405  0644               	xorwf	main@buf^(0+128),w
  3470  0406  1D03               	btfss	3,2
  3471  0407  2D82               	goto	l2831
  3472                           
  3473                           ;main.c: 90: cmd = buf[1];
  3474  0408  0845               	movf	(main@buf^(0+128)+1),w
  3475  0409  0020               	movlb	0	; select bank0
  3476  040A  00E9               	movwf	??_main
  3477  040B  0869               	movf	??_main,w
  3478  040C  0021               	movlb	1	; select bank1
  3479  040D  00DC               	movwf	main@cmd^(0+128)
  3480                           
  3481                           ;main.c: 91: switch(cmd) {
  3482  040E  2D5D               	goto	l2829
  3483  040F                     l2749:	
  3484                           ;main.c: 92: case 'i':
  3485                           
  3486                           
  3487                           ;main.c: 93: sid = (uint8_t)atoi(&buf[2]);
  3488  040F  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3489  0410  3180  2013  3183   	fcall	_atoi
  3490  0413  0876               	movf	?_atoi,w
  3491  0414  0020               	movlb	0	; select bank0
  3492  0415  00E9               	movwf	??_main
  3493  0416  0869               	movf	??_main,w
  3494  0417  0021               	movlb	1	; select bank1
  3495  0418  00D4               	movwf	main@sid^(0+128)
  3496                           
  3497                           ;main.c: 94: can_set_sid(sid);
  3498  0419  0854               	movf	main@sid^(0+128),w
  3499  041A  0020               	movlb	0	; select bank0
  3500  041B  00E9               	movwf	??_main
  3501  041C  01EA               	clrf	??_main+1
  3502  041D  0869               	movf	??_main,w
  3503  041E  00F0               	movwf	can_set_sid@can_node
  3504  041F  086A               	movf	??_main+1,w
  3505  0420  00F1               	movwf	can_set_sid@can_node+1
  3506  0421  318B  23C0  3183   	fcall	_can_set_sid
  3507                           
  3508                           ;main.c: 95: break;
  3509  0424  2BBD               	goto	L1
  3510  0425                     l2753:	
  3511                           ;main.c: 96: case 'v':
  3512                           
  3513                           
  3514                           ;main.c: 97: if (buf[2] == 'd') {
  3515  0425  3064               	movlw	100
  3516  0426  0021               	movlb	1	; select bank1
  3517  0427  0646               	xorwf	(main@buf^(0+128)+2),w
  3518  0428  1D03               	btfss	3,2
  3519  0429  2C2E               	goto	l2759
  3520                           
  3521                           ;main.c: 98: can_logging_mode(1, 1);
  3522  042A  01F0               	clrf	can_logging_mode@verbose
  3523  042B  0AF0               	incf	can_logging_mode@verbose,f
  3524  042C  3001               	movlw	1
  3525  042D  2C35               	goto	L2
  3526  042E                     l2759:	
  3527                           ;main.c: 100: } else if (buf[2] == 'v') {
  3528                           
  3529                           ;main.c: 99: echo_back = 1;
  3530                           
  3531  042E  3076               	movlw	118
  3532  042F  0646               	xorwf	(main@buf^(0+128)+2),w
  3533  0430  1D03               	btfss	3,2
  3534  0431  2C3C               	goto	l2765
  3535                           
  3536                           ;main.c: 101: can_logging_mode(0, 1);
  3537  0432  01F0               	clrf	can_logging_mode@verbose
  3538  0433  0AF0               	incf	can_logging_mode@verbose,f
  3539  0434  3000               	movlw	0
  3540  0435                     L2:	
  3541  0435  318B  2338  3183   	fcall	_can_logging_mode
  3542                           
  3543                           ;main.c: 102: echo_back = 1;
  3544  0438  0021               	movlb	1	; select bank1
  3545  0439  01D9               	clrf	main@echo_back^(0+128)
  3546  043A  0AD9               	incf	main@echo_back^(0+128),f
  3547                           
  3548                           ;main.c: 103: } else if (buf[2] == 'n') {
  3549  043B  2BBD               	goto	L1
  3550  043C                     l2765:	
  3551  043C  306E               	movlw	110
  3552  043D  0646               	xorwf	(main@buf^(0+128)+2),w
  3553  043E  1D03               	btfss	3,2
  3554  043F  2BBD               	goto	L1
  3555                           
  3556                           ;main.c: 104: can_logging_mode(0, 0);
  3557  0440  01F0               	clrf	can_logging_mode@verbose
  3558  0441  3000               	movlw	0
  3559  0442  318B  2338  3183   	fcall	_can_logging_mode
  3560                           
  3561                           ;main.c: 105: echo_back = 0;
  3562  0445  0021               	movlb	1	; select bank1
  3563  0446  01D9               	clrf	main@echo_back^(0+128)
  3564                           
  3565                           ;main.c: 106: }
  3566                           ;main.c: 107: break;
  3567  0447  2BBD               	goto	L1
  3568  0448                     l2771:	
  3569                           ;main.c: 108: case 'o':
  3570                           
  3571                           
  3572                           ;main.c: 109: if (buf[2] == 'l') {
  3573  0448  306C               	movlw	108
  3574  0449  0646               	xorwf	(main@buf^(0+128)+2),w
  3575  044A  1D03               	btfss	3,2
  3576  044B  2C4E               	goto	l2775
  3577                           
  3578                           ;main.c: 110: can_ope_mode(0b01000000u);
  3579  044C  3040               	movlw	64
  3580  044D  2C54               	goto	L3
  3581  044E                     l2775:	
  3582                           ;main.c: 111: } else if (buf[2] == 'n') {
  3583                           
  3584  044E  306E               	movlw	110
  3585  044F  0021               	movlb	1	; select bank1
  3586  0450  0646               	xorwf	(main@buf^(0+128)+2),w
  3587  0451  1D03               	btfss	3,2
  3588  0452  2C57               	goto	l2779
  3589                           
  3590                           ;main.c: 112: can_ope_mode(0b00000000u);
  3591  0453  3000               	movlw	0
  3592  0454                     L3:	
  3593  0454  318D  25C4  3183   	fcall	_can_ope_mode
  3594  0457                     l2779:	
  3595                           
  3596                           ;main.c: 113: }
  3597                           ;main.c: 114: if (buf[3] == '\0') {
  3598  0457  0021               	movlb	1	; select bank1
  3599  0458  0847               	movf	(main@buf^(0+128)+3),w
  3600  0459  1D03               	btfss	3,2
  3601  045A  2C5E               	goto	l2783
  3602                           
  3603                           ;main.c: 115: output_format.with_sid = 0;
  3604  045B  0020               	movlb	0	; select bank0
  3605  045C  01ED               	clrf	_output_format
  3606  045D  2C69               	goto	l2789
  3607  045E                     l2783:	
  3608                           ;main.c: 117: } else if (buf[3] == 's' && buf[4] == '\0') {
  3609                           
  3610                           ;main.c: 116: output_format.hex_output = 0;
  3611                           
  3612  045E  3073               	movlw	115
  3613  045F  0021               	movlb	1	; select bank1
  3614  0460  0647               	xorwf	(main@buf^(0+128)+3),w
  3615  0461  1D03               	btfss	3,2
  3616  0462  2C6B               	goto	l2791
  3617  0463  0848               	movf	(main@buf^(0+128)+4),w
  3618  0464  1D03               	btfss	3,2
  3619  0465  2C6B               	goto	l2791
  3620                           
  3621                           ;main.c: 118: output_format.with_sid = 1;
  3622  0466  0020               	movlb	0	; select bank0
  3623  0467  01ED               	clrf	_output_format
  3624  0468  0AED               	incf	_output_format,f
  3625  0469                     l2789:	
  3626                           
  3627                           ;main.c: 119: output_format.hex_output = 0;
  3628  0469  01EE               	clrf	_output_format+1
  3629                           
  3630                           ;main.c: 120: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3631  046A  2BBD               	goto	L1
  3632  046B                     l2791:	
  3633  046B  3068               	movlw	104
  3634  046C  0021               	movlb	1	; select bank1
  3635  046D  0647               	xorwf	(main@buf^(0+128)+3),w
  3636  046E  1D03               	btfss	3,2
  3637  046F  2BBD               	goto	L1
  3638  0470  0848               	movf	(main@buf^(0+128)+4),w
  3639  0471  1D03               	btfss	3,2
  3640  0472  2BBD               	goto	L1
  3641                           
  3642                           ;main.c: 121: output_format.with_sid = 0;
  3643  0473  0020               	movlb	0	; select bank0
  3644  0474  01ED               	clrf	_output_format
  3645                           
  3646                           ;main.c: 122: output_format.hex_output = 1;
  3647  0475  01EE               	clrf	_output_format+1
  3648  0476  0AEE               	incf	_output_format+1,f
  3649                           
  3650                           ;main.c: 123: }
  3651                           ;main.c: 124: break;
  3652  0477  2BBD               	goto	L1
  3653  0478                     l2799:	
  3654                           ;main.c: 125: case 'b':
  3655                           
  3656                           
  3657                           ;main.c: 126: can_abort();
  3658  0478  3180  2004  3183   	fcall	_can_abort
  3659                           
  3660                           ;main.c: 127: bpr = (uint8_t)atoi(&buf[2]);
  3661  047B  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3662  047C  3180  2013  3183   	fcall	_atoi
  3663  047F  0876               	movf	?_atoi,w
  3664  0480  0020               	movlb	0	; select bank0
  3665  0481  00E9               	movwf	??_main
  3666  0482  0869               	movf	??_main,w
  3667  0483  0021               	movlb	1	; select bank1
  3668  0484  00D5               	movwf	main@bpr^(0+128)
  3669                           
  3670                           ;main.c: 128: can_baudrate(bpr);
  3671  0485  0855               	movf	main@bpr^(0+128),w
  3672  0486  318C  2464  3183   	fcall	_can_baudrate
  3673                           
  3674                           ;main.c: 129: break;
  3675  0489  2BBD               	goto	L1
  3676  048A                     l2805:	
  3677                           ;main.c: 130: case 'm':
  3678                           
  3679                           
  3680                           ;main.c: 131: case 'f':
  3681                           ;main.c: 132: n = buf[2] - 0x30u;
  3682  048A  0021               	movlb	1	; select bank1
  3683  048B  0846               	movf	(main@buf^(0+128)+2),w
  3684  048C  3ED0               	addlw	208
  3685  048D  0020               	movlb	0	; select bank0
  3686  048E  00E9               	movwf	??_main
  3687  048F  0869               	movf	??_main,w
  3688  0490  0021               	movlb	1	; select bank1
  3689  0491  00DA               	movwf	main@n^(0+128)
  3690                           
  3691                           ;main.c: 133: mask = (uint16_t)atoi(&buf[3]);
  3692  0492  30C7               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3693  0493  3180  2013  3183   	fcall	_atoi
  3694  0496  0877               	movf	?_atoi+1,w
  3695  0497  0021               	movlb	1	; select bank1
  3696  0498  00D8               	movwf	(main@mask+1)^(0+128)
  3697  0499  0876               	movf	?_atoi,w
  3698  049A  00D7               	movwf	main@mask^(0+128)
  3699                           
  3700                           ;main.c: 134: if (cmd == 'm') {
  3701  049B  306D               	movlw	109
  3702  049C  065C               	xorwf	main@cmd^(0+128),w
  3703  049D  1D03               	btfss	3,2
  3704  049E  2CB1               	goto	l2813
  3705                           
  3706                           ;main.c: 135: can_set_mask(0u, n, mask);
  3707  049F  085A               	movf	main@n^(0+128),w
  3708  04A0  0020               	movlb	0	; select bank0
  3709  04A1  00E9               	movwf	??_main
  3710  04A2  0869               	movf	??_main,w
  3711  04A3  00C7               	movwf	can_set_mask@n
  3712  04A4  0021               	movlb	1	; select bank1
  3713  04A5  0858               	movf	(main@mask+1)^(0+128),w
  3714  04A6  0020               	movlb	0	; select bank0
  3715  04A7  00C9               	movwf	can_set_mask@mask+1
  3716  04A8  0021               	movlb	1	; select bank1
  3717  04A9  0857               	movf	main@mask^(0+128),w
  3718  04AA  0020               	movlb	0	; select bank0
  3719  04AB  00C8               	movwf	can_set_mask@mask
  3720  04AC  3000               	movlw	0
  3721  04AD  318E  26A6  3183   	fcall	_can_set_mask
  3722                           
  3723                           ;main.c: 136: } else if (cmd == 'f') {
  3724  04B0  2BBD               	goto	L1
  3725  04B1                     l2813:	
  3726  04B1  3066               	movlw	102
  3727  04B2  0021               	movlb	1	; select bank1
  3728  04B3  065C               	xorwf	main@cmd^(0+128),w
  3729  04B4  1D03               	btfss	3,2
  3730  04B5  2BBD               	goto	L1
  3731                           
  3732                           ;main.c: 137: can_set_mask(1u, n, mask);
  3733  04B6  085A               	movf	main@n^(0+128),w
  3734  04B7  0020               	movlb	0	; select bank0
  3735  04B8  00E9               	movwf	??_main
  3736  04B9  0869               	movf	??_main,w
  3737  04BA  00C7               	movwf	can_set_mask@n
  3738  04BB  0021               	movlb	1	; select bank1
  3739  04BC  0858               	movf	(main@mask+1)^(0+128),w
  3740  04BD  0020               	movlb	0	; select bank0
  3741  04BE  00C9               	movwf	can_set_mask@mask+1
  3742  04BF  0021               	movlb	1	; select bank1
  3743  04C0  0857               	movf	main@mask^(0+128),w
  3744  04C1  0020               	movlb	0	; select bank0
  3745  04C2  00C8               	movwf	can_set_mask@mask
  3746  04C3  3001               	movlw	1
  3747  04C4  318E  26A6  3183   	fcall	_can_set_mask
  3748                           
  3749                           ;main.c: 138: }
  3750                           ;main.c: 139: break;
  3751  04C7  2BBD               	goto	L1
  3752  04C8                     l2817:	
  3753                           ;main.c: 140: case 'a':
  3754                           
  3755                           
  3756                           ;main.c: 141: can_abort();
  3757  04C8  3180  2004  3183   	fcall	_can_abort
  3758                           
  3759                           ;main.c: 142: break;
  3760  04CB  2BBD               	goto	L1
  3761  04CC                     l2819:	
  3762                           ;main.c: 143: case 'F':
  3763                           
  3764                           
  3765                           ;main.c: 144: can_dump_masks_and_filters();
  3766  04CC  3180  207A  3183   	fcall	_can_dump_masks_and_filters
  3767                           
  3768                           ;main.c: 145: break;
  3769  04CF  2BBD               	goto	L1
  3770  04D0                     l2821:	
  3771                           ;main.c: 146: case 'd':
  3772                           
  3773                           
  3774                           ;main.c: 147: can_dump_registers();
  3775  04D0  3181  2146  3183   	fcall	_can_dump_registers
  3776                           
  3777                           ;main.c: 148: break;
  3778  04D3  2BBD               	goto	L1
  3779  04D4                     l2823:	
  3780                           ;main.c: 149: case '@':
  3781                           
  3782                           
  3783                           ;main.c: 150: can_send(&buf[1], idx - 1u);
  3784  04D4  0021               	movlb	1	; select bank1
  3785  04D5  085D               	movf	main@idx^(0+128),w
  3786  04D6  3EFF               	addlw	255
  3787  04D7  0020               	movlb	0	; select bank0
  3788  04D8  00E9               	movwf	??_main
  3789  04D9  0869               	movf	??_main,w
  3790  04DA  00C3               	movwf	can_send@dlc
  3791  04DB  30C5               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3792  04DC  3182  2256  3183   	fcall	_can_send
  3793                           
  3794                           ;main.c: 151: break;
  3795  04DF  2BBD               	goto	L1
  3796  04E0                     l2825:	
  3797                           ;main.c: 152: case 'h':
  3798                           
  3799                           
  3800                           ;main.c: 153: printf("/// UART2CAN HELP (version %s) ///\n", "0.13  March 23, 2018");
  3801  04E0  3013               	movlw	low (STR_7| (0+32768))
  3802  04E1  0020               	movlb	0	; select bank0
  3803  04E2  00A2               	movwf	printf@f
  3804  04E3  3092               	movlw	high (STR_7| (0+32768))
  3805  04E4  00A3               	movwf	printf@f+1
  3806  04E5  30DE               	movlw	low (STR_8| (0+32768))
  3807  04E6  00A4               	movwf	low ((?_printf| 0+2))
  3808  04E7  3092               	movlw	high (STR_8| (0+32768))
  3809  04E8  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3810  04E9  3185  25A5  3183   	fcall	_printf
  3811                           
  3812                           ;main.c: 154: printf("[Set standard identifier] @i<standard identifier>\n");
  3813  04EC  30E6               	movlw	low (STR_9| (0+32768))
  3814  04ED  0020               	movlb	0	; select bank0
  3815  04EE  00A2               	movwf	printf@f
  3816  04EF  3090               	movlw	high (STR_9| (0+32768))
  3817  04F0  00A3               	movwf	printf@f+1
  3818  04F1  3185  25A5  3183   	fcall	_printf
  3819                           
  3820                           ;main.c: 155: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3821  04F4  3002               	movlw	low (STR_10| (0+32768))
  3822  04F5  0020               	movlb	0	; select bank0
  3823  04F6  00A2               	movwf	printf@f
  3824  04F7  3090               	movlw	high (STR_10| (0+32768))
  3825  04F8  00A3               	movwf	printf@f+1
  3826  04F9  3185  25A5  3183   	fcall	_printf
  3827                           
  3828                           ;main.c: 156: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3829  04FC  30B0               	movlw	low (STR_11| (0+32768))
  3830  04FD  0020               	movlb	0	; select bank0
  3831  04FE  00A2               	movwf	printf@f
  3832  04FF  3090               	movlw	high (STR_11| (0+32768))
  3833  0500  00A3               	movwf	printf@f+1
  3834  0501  3185  25A5  3183   	fcall	_printf
  3835                           
  3836                           ;main.c: 157: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3837  0504  303D               	movlw	low (STR_12| (0+32768))
  3838  0505  0020               	movlb	0	; select bank0
  3839  0506  00A2               	movwf	printf@f
  3840  0507  3090               	movlw	high (STR_12| (0+32768))
  3841  0508  00A3               	movwf	printf@f+1
  3842  0509  3185  25A5  3183   	fcall	_printf
  3843                           
  3844                           ;main.c: 158: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3845  050C  30C7               	movlw	low (STR_13| (0+32768))
  3846  050D  0020               	movlb	0	; select bank0
  3847  050E  00A2               	movwf	printf@f
  3848  050F  3091               	movlw	high (STR_13| (0+32768))
  3849  0510  00A3               	movwf	printf@f+1
  3850  0511  3185  25A5  3183   	fcall	_printf
  3851                           
  3852                           ;main.c: 159: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3853  0514  309D               	movlw	low (STR_14| (0+32768))
  3854  0515  0020               	movlb	0	; select bank0
  3855  0516  00A2               	movwf	printf@f
  3856  0517  3091               	movlw	high (STR_14| (0+32768))
  3857  0518  00A3               	movwf	printf@f+1
  3858  0519  3185  25A5  3183   	fcall	_printf
  3859                           
  3860                           ;main.c: 160: printf("[Set baud rate] @b<bpr>\n");
  3861  051C  306E               	movlw	low (STR_15| (0+32768))
  3862  051D  0020               	movlb	0	; select bank0
  3863  051E  00A2               	movwf	printf@f
  3864  051F  3092               	movlw	high (STR_15| (0+32768))
  3865  0520  00A3               	movwf	printf@f+1
  3866  0521  3185  25A5  3183   	fcall	_printf
  3867                           
  3868                           ;main.c: 161: printf("[Abort all pending transmissions] @a\n");
  3869  0524  30ED               	movlw	low (STR_16| (0+32768))
  3870  0525  0020               	movlb	0	; select bank0
  3871  0526  00A2               	movwf	printf@f
  3872  0527  3091               	movlw	high (STR_16| (0+32768))
  3873  0528  00A3               	movwf	printf@f+1
  3874  0529  3185  25A5  3183   	fcall	_printf
  3875                           
  3876                           ;main.c: 162: printf("[Dump masks and filters] @F\n");
  3877  052C  3037               	movlw	low (STR_17| (0+32768))
  3878  052D  0020               	movlb	0	; select bank0
  3879  052E  00A2               	movwf	printf@f
  3880  052F  3092               	movlw	high (STR_17| (0+32768))
  3881  0530  00A3               	movwf	printf@f+1
  3882  0531  3185  25A5  3183   	fcall	_printf
  3883                           
  3884                           ;main.c: 163: printf("[Dump registers] @d\n");
  3885  0534  30C9               	movlw	low (STR_18| (0+32768))
  3886  0535  0020               	movlb	0	; select bank0
  3887  0536  00A2               	movwf	printf@f
  3888  0537  3092               	movlw	high (STR_18| (0+32768))
  3889  0538  00A3               	movwf	printf@f+1
  3890  0539  3185  25A5  3183   	fcall	_printf
  3891                           
  3892                           ;main.c: 164: printf("[Send message] <message>\n");
  3893  053C  3054               	movlw	low (STR_19| (0+32768))
  3894  053D  0020               	movlb	0	; select bank0
  3895  053E  00A2               	movwf	printf@f
  3896  053F  3092               	movlw	high (STR_19| (0+32768))
  3897  0540  00A3               	movwf	printf@f+1
  3898  0541  3185  25A5  3183   	fcall	_printf
  3899                           
  3900                           ;main.c: 165: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3901  0544  3077               	movlw	low (STR_20| (0+32768))
  3902  0545  0020               	movlb	0	; select bank0
  3903  0546  00A2               	movwf	printf@f
  3904  0547  3090               	movlw	high (STR_20| (0+32768))
  3905  0548  00A3               	movwf	printf@f+1
  3906  0549  3185  25A5  3183   	fcall	_printf
  3907                           
  3908                           ;main.c: 166: printf("[Receive message] <message> will be output\n");
  3909  054C  3071               	movlw	low (STR_21| (0+32768))
  3910  054D  0020               	movlb	0	; select bank0
  3911  054E  00A2               	movwf	printf@f
  3912  054F  3091               	movlw	high (STR_21| (0+32768))
  3913  0550  00A3               	movwf	printf@f+1
  3914  0551  3185  25A5  3183   	fcall	_printf
  3915                           
  3916                           ;main.c: 167: printf("[Show this help]: @h\n");
  3917  0554  309E               	movlw	low (STR_22| (0+32768))
  3918  0555  0020               	movlb	0	; select bank0
  3919  0556  00A2               	movwf	printf@f
  3920  0557  3092               	movlw	high (STR_22| (0+32768))
  3921  0558  00A3               	movwf	printf@f+1
  3922  0559  3185  25A5  3183   	fcall	_printf
  3923                           
  3924                           ;main.c: 169: }
  3925                           
  3926                           ;main.c: 168: break;
  3927  055C  2BBD               	goto	L1
  3928  055D                     l2829:	
  3929  055D  0021               	movlb	1	; select bank1
  3930  055E  085C               	movf	main@cmd^(0+128),w
  3931                           
  3932                           ; Switch size 1, requested type "space"
  3933                           ; Number of cases is 11, Range of values is 64 to 118
  3934                           ; switch strategies available:
  3935                           ; Name         Instructions Cycles
  3936                           ; simple_byte           34    18 (average)
  3937                           ; direct_byte          119     9 (fixed)
  3938                           ; jumptable            263     9 (fixed)
  3939                           ;	Chosen strategy is simple_byte
  3940  055F  3A40               	xorlw	64	; case 64
  3941  0560  1903               	skipnz
  3942  0561  2CD4               	goto	l2823
  3943  0562  3A06               	xorlw	6	; case 70
  3944  0563  1903               	skipnz
  3945  0564  2CCC               	goto	l2819
  3946  0565  3A27               	xorlw	39	; case 97
  3947  0566  1903               	skipnz
  3948  0567  2CC8               	goto	l2817
  3949  0568  3A03               	xorlw	3	; case 98
  3950  0569  1903               	skipnz
  3951  056A  2C78               	goto	l2799
  3952  056B  3A06               	xorlw	6	; case 100
  3953  056C  1903               	skipnz
  3954  056D  2CD0               	goto	l2821
  3955  056E  3A02               	xorlw	2	; case 102
  3956  056F  1903               	skipnz
  3957  0570  2C8A               	goto	l2805
  3958  0571  3A0E               	xorlw	14	; case 104
  3959  0572  1903               	skipnz
  3960  0573  2CE0               	goto	l2825
  3961  0574  3A01               	xorlw	1	; case 105
  3962  0575  1903               	skipnz
  3963  0576  2C0F               	goto	l2749
  3964  0577  3A04               	xorlw	4	; case 109
  3965  0578  1903               	skipnz
  3966  0579  2C8A               	goto	l2805
  3967  057A  3A02               	xorlw	2	; case 111
  3968  057B  1903               	skipnz
  3969  057C  2C48               	goto	l2771
  3970  057D  3A19               	xorlw	25	; case 118
  3971  057E  1903               	skipnz
  3972  057F  2C25               	goto	l2753
  3973  0580  2D8B               	goto	l2833
  3974                           
  3975                           ;main.c: 170: } else {
  3976  0581  2BBD               	goto	L1
  3977  0582                     l2831:	
  3978                           
  3979                           ;main.c: 171: can_send(buf, idx);
  3980  0582  085D               	movf	main@idx^(0+128),w
  3981  0583  0020               	movlb	0	; select bank0
  3982  0584  00E9               	movwf	??_main
  3983  0585  0869               	movf	??_main,w
  3984  0586  00C3               	movwf	can_send@dlc
  3985  0587  30C4               	movlw	(low (main@buf| 0))& (0+255)
  3986  0588  3182  2256  3183   	fcall	_can_send
  3987  058B                     l2833:	
  3988  058B  2BBD               	goto	L1
  3989  058C                     l2835:	
  3990                           ;main.c: 175: } else if (++idx > 7) {
  3991                           
  3992                           ;main.c: 172: }
  3993                           ;main.c: 173: idx = 0;
  3994                           
  3995  058C  3001               	movlw	1
  3996  058D  0020               	movlb	0	; select bank0
  3997  058E  00E9               	movwf	??_main
  3998  058F  0869               	movf	??_main,w
  3999  0590  0021               	movlb	1	; select bank1
  4000  0591  07DD               	addwf	main@idx^(0+128),f
  4001  0592  3008               	movlw	8
  4002  0593  025D               	subwf	main@idx^(0+128),w
  4003  0594  1C03               	skipc
  4004  0595  2BBF               	goto	l2727
  4005                           
  4006                           ;main.c: 176: buf[idx] = '\0';
  4007  0596  085D               	movf	main@idx^(0+128),w
  4008  0597  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  4009  0598  0086               	movwf	6
  4010  0599  0187               	clrf	7
  4011  059A  0181               	clrf	1
  4012                           
  4013                           ;main.c: 177: can_send(buf, idx);
  4014  059B  085D               	movf	main@idx^(0+128),w
  4015  059C  0020               	movlb	0	; select bank0
  4016  059D  00E9               	movwf	??_main
  4017  059E  0869               	movf	??_main,w
  4018  059F  00C3               	movwf	can_send@dlc
  4019  05A0  30C4               	movlw	(low (main@buf| 0))& (0+255)
  4020  05A1  3182  2256  3183   	fcall	_can_send
  4021  05A4  2BBD               	goto	L1
  4022  05A5                     __end_of_main:	
  4023                           ;main.c: 178: idx = 0;
  4024                           
  4025                           
  4026                           	psect	text1
  4027  0D6E                     __ptext1:	
  4028 ;; *************** function _can_status_check *****************
  4029 ;; Defined at:
  4030 ;;		line 269 in file "mcp2515.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  status          1   72[BANK0 ] unsigned char 
  4035 ;;  bytes_writte    1   71[BANK0 ] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      unsigned char 
  4038 ;; Registers used:
  4039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;Total ram usage:        4 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    5
  4052 ;; This function calls:
  4053 ;;		_SPI_exchange
  4054 ;;		_printf
  4055 ;;		_receive
  4056 ;;		_txf_clear
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function _can_status_check
  4064  0D6E                     _can_status_check:	
  4065                           
  4066                           ;mcp2515.c: 271: buf[0] = 0b10100000u;
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4070  0D6E  30A0               	movlw	160
  4071  0D6F  0020               	movlb	0	; select bank0
  4072  0D70  00E5               	movwf	??_can_status_check
  4073  0D71  0865               	movf	??_can_status_check,w
  4074  0D72  0021               	movlb	1	; select bank1
  4075  0D73  00B4               	movwf	_buf^(0+128)
  4076                           
  4077                           ;mcp2515.c: 272: buf[1] = 0x00;
  4078  0D74  01B5               	clrf	(_buf^(0+128)+1)
  4079                           
  4080                           ;mcp2515.c: 273: uint8_t bytes_written = SPI_exchange(buf, 2);
  4081  0D75  3002               	movlw	2
  4082  0D76  0020               	movlb	0	; select bank0
  4083  0D77  00E5               	movwf	??_can_status_check
  4084  0D78  0865               	movf	??_can_status_check,w
  4085  0D79  00F8               	movwf	SPI_exchange@len
  4086  0D7A  30B4               	movlw	(low (_buf| 0))& (0+255)
  4087  0D7B  318B  2360  318D   	fcall	_SPI_exchange
  4088  0D7E  0020               	movlb	0	; select bank0
  4089  0D7F  00E6               	movwf	??_can_status_check+1
  4090  0D80  0866               	movf	??_can_status_check+1,w
  4091  0D81  00E7               	movwf	can_status_check@bytes_written
  4092                           
  4093                           ;mcp2515.c: 274: uint8_t status = buf[1];
  4094  0D82  0021               	movlb	1	; select bank1
  4095  0D83  0835               	movf	(_buf^(0+128)+1),w
  4096  0D84  0020               	movlb	0	; select bank0
  4097  0D85  00E5               	movwf	??_can_status_check
  4098  0D86  0865               	movf	??_can_status_check,w
  4099  0D87  00E8               	movwf	can_status_check@status
  4100                           
  4101                           ;mcp2515.c: 275: if (status == 0x00) {
  4102  0D88  0868               	movf	can_status_check@status,w
  4103  0D89  1D03               	btfss	3,2
  4104  0D8A  2D8D               	goto	l349
  4105                           
  4106                           ;mcp2515.c: 276: return 1;
  4107  0D8B  3001               	movlw	1
  4108  0D8C  0008               	return
  4109  0D8D                     l349:	
  4110                           ;mcp2515.c: 277: } else if ((status & 0b00000010u) > 0) {
  4111                           
  4112  0D8D  1CE8               	btfss	can_status_check@status,1
  4113  0D8E  2D9E               	goto	l352
  4114                           
  4115                           ;mcp2515.c: 278: if (mode.debug) printf("RX1IF is on\n");
  4116  0D8F  086B               	movf	_mode,w
  4117  0D90  1903               	btfsc	3,2
  4118  0D91  2D99               	goto	l353
  4119  0D92  3043               	movlw	low (STR_37| (0+32768))
  4120  0D93  00A2               	movwf	printf@f
  4121  0D94  3094               	movlw	high (STR_37| (0+32768))
  4122  0D95  00A3               	movwf	printf@f+1
  4123  0D96  3185  25A5  318D   	fcall	_printf
  4124  0D99                     l353:	
  4125                           
  4126                           ;mcp2515.c: 279: receive(1);
  4127  0D99  3001               	movlw	1
  4128  0D9A  318F  274B  318D   	fcall	_receive
  4129                           
  4130                           ;mcp2515.c: 280: } else if ((status & 0b00000001u) > 0) {
  4131  0D9D  2DBD               	goto	l2441
  4132  0D9E                     l352:	
  4133  0D9E  1C68               	btfss	can_status_check@status,0
  4134  0D9F  2DAF               	goto	l355
  4135                           
  4136                           ;mcp2515.c: 281: if (mode.debug) printf("RX0IF is on\n");
  4137  0DA0  086B               	movf	_mode,w
  4138  0DA1  1903               	btfsc	3,2
  4139  0DA2  2DAA               	goto	l356
  4140  0DA3  3036               	movlw	low (STR_38| (0+32768))
  4141  0DA4  00A2               	movwf	printf@f
  4142  0DA5  3094               	movlw	high (STR_38| (0+32768))
  4143  0DA6  00A3               	movwf	printf@f+1
  4144  0DA7  3185  25A5  318D   	fcall	_printf
  4145  0DAA                     l356:	
  4146                           
  4147                           ;mcp2515.c: 282: receive(0);
  4148  0DAA  3000               	movlw	0
  4149  0DAB  318F  274B  318D   	fcall	_receive
  4150                           
  4151                           ;mcp2515.c: 283: } else if ((status & 0b00001000u) > 0) {
  4152  0DAE  2DBD               	goto	l2441
  4153  0DAF                     l355:	
  4154  0DAF  1DE8               	btfss	can_status_check@status,3
  4155  0DB0  2DB3               	goto	l358
  4156                           
  4157                           ;mcp2515.c: 284: txf_clear(0);
  4158  0DB1  3000               	movlw	0
  4159  0DB2  2DBA               	goto	L4
  4160  0DB3                     l358:	
  4161                           ;mcp2515.c: 285: } else if ((status & 0b00100000u) > 0) {
  4162                           
  4163  0DB3  1EE8               	btfss	can_status_check@status,5
  4164  0DB4  2DB7               	goto	l360
  4165                           
  4166                           ;mcp2515.c: 286: txf_clear(1);
  4167  0DB5  3001               	movlw	1
  4168  0DB6  2DBA               	goto	L4
  4169  0DB7                     l360:	
  4170                           ;mcp2515.c: 287: } else if ((status & 0b10000000u) > 0) {
  4171                           
  4172  0DB7  1FE8               	btfss	can_status_check@status,7
  4173  0DB8  2DBD               	goto	l2441
  4174                           
  4175                           ;mcp2515.c: 288: txf_clear(2);
  4176  0DB9  3002               	movlw	2
  4177  0DBA                     L4:	
  4178  0DBA  318C  2436  318D   	fcall	_txf_clear
  4179  0DBD                     l2441:	
  4180                           
  4181                           ;mcp2515.c: 289: }
  4182                           ;mcp2515.c: 290: if ((status & 0b00010000u) > 0) {
  4183  0DBD  0020               	movlb	0	; select bank0
  4184  0DBE  1E68               	btfss	can_status_check@status,4
  4185  0DBF  2DC2               	goto	l2449
  4186                           
  4187                           ;mcp2515.c: 291: return 0;
  4188  0DC0  3000               	movlw	0
  4189                           
  4190                           ;mcp2515.c: 292: } else {
  4191  0DC1  0008               	return
  4192  0DC2                     l2449:	
  4193                           
  4194                           ;mcp2515.c: 293: return 1;
  4195  0DC2  3001               	movlw	1
  4196  0DC3  0008               	return
  4197  0DC4                     __end_of_can_status_check:	
  4198                           
  4199                           	psect	text2
  4200  0C36                     __ptext2:	
  4201 ;; *************** function _txf_clear *****************
  4202 ;; Defined at:
  4203 ;;		line 149 in file "mcp2515.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  n               1    wreg     unsigned char 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  n               1    4[BANK0 ] unsigned char 
  4208 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4209 ;;  mask            1    2[BANK0 ] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      unsigned char 
  4212 ;; Registers used:
  4213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;Total ram usage:        5 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    3
  4226 ;; This function calls:
  4227 ;;		_SPI_exchange
  4228 ;; This function is called by:
  4229 ;;		_can_status_check
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _txf_clear
  4235  0C36                     _txf_clear:	
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4239                           ;txf_clear@n stored from wreg
  4240  0C36  0020               	movlb	0	; select bank0
  4241  0C37  00A4               	movwf	txf_clear@n
  4242                           
  4243                           ;mcp2515.c: 150: uint8_t mask = 0b00000001u << (n + 2);
  4244  0C38  3001               	movlw	1
  4245  0C39  00A0               	movwf	??_txf_clear
  4246  0C3A  0824               	movf	txf_clear@n,w
  4247  0C3B  3E02               	addlw	2
  4248  0C3C  0A89               	incf	9,f
  4249  0C3D  2C3F               	goto	u1974
  4250  0C3E                     u1975:	
  4251  0C3E  35A0               	lslf	??_txf_clear,f
  4252  0C3F                     u1974:	
  4253  0C3F  0B89               	decfsz	9,f
  4254  0C40  2C3E               	goto	u1975
  4255  0C41  0820               	movf	??_txf_clear,w
  4256  0C42  00A1               	movwf	??_txf_clear+1
  4257  0C43  0821               	movf	??_txf_clear+1,w
  4258  0C44  00A2               	movwf	txf_clear@mask
  4259                           
  4260                           ;mcp2515.c: 151: buf[0] =0b00000101u;
  4261  0C45  3005               	movlw	5
  4262  0C46  00A0               	movwf	??_txf_clear
  4263  0C47  0820               	movf	??_txf_clear,w
  4264  0C48  0021               	movlb	1	; select bank1
  4265  0C49  00B4               	movwf	_buf^(0+128)
  4266                           
  4267                           ;mcp2515.c: 152: buf[1] = 0x2c;
  4268  0C4A  302C               	movlw	44
  4269  0C4B  0020               	movlb	0	; select bank0
  4270  0C4C  00A0               	movwf	??_txf_clear
  4271  0C4D  0820               	movf	??_txf_clear,w
  4272  0C4E  0021               	movlb	1	; select bank1
  4273  0C4F  00B5               	movwf	(_buf^(0+128)+1)
  4274                           
  4275                           ;mcp2515.c: 153: buf[2] = mask;
  4276  0C50  0020               	movlb	0	; select bank0
  4277  0C51  0822               	movf	txf_clear@mask,w
  4278  0C52  00A0               	movwf	??_txf_clear
  4279  0C53  0820               	movf	??_txf_clear,w
  4280  0C54  0021               	movlb	1	; select bank1
  4281  0C55  00B6               	movwf	(_buf^(0+128)+2)
  4282                           
  4283                           ;mcp2515.c: 154: buf[3] = 0x00;
  4284  0C56  01B7               	clrf	(_buf^(0+128)+3)
  4285                           
  4286                           ;mcp2515.c: 155: uint8_t bytes_written = SPI_exchange(buf, 4);
  4287  0C57  3004               	movlw	4
  4288  0C58  0020               	movlb	0	; select bank0
  4289  0C59  00A0               	movwf	??_txf_clear
  4290  0C5A  0820               	movf	??_txf_clear,w
  4291  0C5B  00F8               	movwf	SPI_exchange@len
  4292  0C5C  30B4               	movlw	(low (_buf| 0))& (0+255)
  4293  0C5D  318B  2360         	fcall	_SPI_exchange
  4294  0C5F  0020               	movlb	0	; select bank0
  4295  0C60  00A1               	movwf	??_txf_clear+1
  4296  0C61  0821               	movf	??_txf_clear+1,w
  4297  0C62  00A3               	movwf	txf_clear@bytes_written
  4298                           
  4299                           ;mcp2515.c: 159: return 0;
  4300                           ;	Return value of _txf_clear is never used
  4301                           
  4302                           ;mcp2515.c: 158: } else {
  4303                           
  4304                           ;mcp2515.c: 157: return 1;
  4305                           ;	Return value of _txf_clear is never used
  4306  0C63  0008               	return
  4307  0C64                     __end_of_txf_clear:	
  4308                           
  4309                           	psect	text3
  4310  0F4B                     __ptext3:	
  4311 ;; *************** function _receive *****************
  4312 ;; Defined at:
  4313 ;;		line 166 in file "mcp2515.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  n               1    wreg     unsigned char 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  n               1   68[BANK0 ] unsigned char 
  4318 ;;  rx_buf         15   49[BANK0 ] unsigned char [15]
  4319 ;;  id              2   65[BANK0 ] unsigned int 
  4320 ;;  dlc             1   67[BANK0 ] unsigned char 
  4321 ;;  pbuf            1   64[BANK0 ] PTR unsigned char 
  4322 ;;		 -> receive@rx_buf(15), 
  4323 ;;  bytes_read      1   48[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;Total ram usage:       26 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    4
  4340 ;; This function calls:
  4341 ;;		Absolute function
  4342 ;;		_SPI_exchange
  4343 ;;		_printf
  4344 ;;		_receive_handler
  4345 ;; This function is called by:
  4346 ;;		_can_status_check
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function _receive
  4352  0F4B                     _receive:	
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4356                           ;receive@n stored from wreg
  4357  0F4B  0020               	movlb	0	; select bank0
  4358  0F4C  00E4               	movwf	receive@n
  4359                           
  4360                           ;mcp2515.c: 170: uint8_t rx_buf[15];
  4361                           ;mcp2515.c: 173: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  4362  0F4D  0864               	movf	receive@n,w
  4363  0F4E  3EB4               	addlw	low (_nm| (0+32768))
  4364  0F4F  0084               	movwf	4
  4365  0F50  3094               	movlw	high (_nm| (0+32768))
  4366  0F51  1803               	skipnc
  4367  0F52  3E01               	addlw	1
  4368  0F53  0085               	movwf	5
  4369  0F54  0800               	movf	0,w	;code access
  4370  0F55  0709               	addwf	9,w
  4371  0F56  3E90               	addlw	144
  4372  0F57  00CB               	movwf	??_receive
  4373  0F58  084B               	movf	??_receive,w
  4374  0F59  00D1               	movwf	receive@rx_buf
  4375                           
  4376                           ;mcp2515.c: 174: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4377  0F5A  300E               	movlw	14
  4378  0F5B  00CB               	movwf	??_receive
  4379  0F5C  084B               	movf	??_receive,w
  4380  0F5D  00F8               	movwf	SPI_exchange@len
  4381  0F5E  3051               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4382  0F5F  318B  2360  318F   	fcall	_SPI_exchange
  4383  0F62  0020               	movlb	0	; select bank0
  4384  0F63  00CC               	movwf	??_receive+1
  4385  0F64  084C               	movf	??_receive+1,w
  4386  0F65  00D0               	movwf	receive@bytes_read
  4387                           
  4388                           ;mcp2515.c: 175: uint8_t dlc = rx_buf[5];
  4389  0F66  0856               	movf	receive@rx_buf+5,w
  4390  0F67  00CB               	movwf	??_receive
  4391  0F68  084B               	movf	??_receive,w
  4392  0F69  00E3               	movwf	receive@dlc
  4393                           
  4394                           ;mcp2515.c: 176: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4395  0F6A  0853               	movf	receive@rx_buf+2,w
  4396  0F6B  00CB               	movwf	??_receive
  4397  0F6C  3005               	movlw	5
  4398  0F6D                     u1985:	
  4399  0F6D  36CB               	lsrf	??_receive,f
  4400  0F6E  0B89               	decfsz	9,f
  4401  0F6F  2F6D               	goto	u1985
  4402  0F70  084B               	movf	??_receive,w
  4403  0F71  00CC               	movwf	??_receive+1
  4404  0F72  01CD               	clrf	??_receive+2
  4405  0F73  0852               	movf	receive@rx_buf+1,w
  4406  0F74  00CE               	movwf	??_receive+3
  4407  0F75  01CF               	clrf	??_receive+4
  4408  0F76  35CE               	lslf	??_receive+3,f
  4409  0F77  0DCF               	rlf	??_receive+4,f
  4410  0F78  35CE               	lslf	??_receive+3,f
  4411  0F79  0DCF               	rlf	??_receive+4,f
  4412  0F7A  35CE               	lslf	??_receive+3,f
  4413  0F7B  0DCF               	rlf	??_receive+4,f
  4414  0F7C  084C               	movf	??_receive+1,w
  4415  0F7D  074E               	addwf	??_receive+3,w
  4416  0F7E  00E1               	movwf	receive@id
  4417  0F7F  084D               	movf	??_receive+2,w
  4418  0F80  3D4F               	addwfc	??_receive+4,w
  4419  0F81  00E2               	movwf	receive@id+1
  4420                           
  4421                           ;mcp2515.c: 177: id = id & 0b0000011111111111u;
  4422  0F82  30FF               	movlw	255
  4423  0F83  0561               	andwf	receive@id,w
  4424  0F84  00E1               	movwf	receive@id
  4425  0F85  3007               	movlw	7
  4426  0F86  0562               	andwf	receive@id+1,w
  4427  0F87  00E2               	movwf	receive@id+1
  4428                           
  4429                           ;mcp2515.c: 178: rx_buf[6u+dlc] = (uint8_t)'\0';
  4430  0F88  0863               	movf	receive@dlc,w
  4431  0F89  3E06               	addlw	6
  4432  0F8A  3E51               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4433  0F8B  0086               	movwf	6
  4434  0F8C  0187               	clrf	7
  4435  0F8D  0181               	clrf	1
  4436                           
  4437                           ;mcp2515.c: 180: if (mode.debug) {
  4438  0F8E  086B               	movf	_mode,w
  4439  0F8F  1903               	btfsc	3,2
  4440  0F90  2FE8               	goto	l2341
  4441                           
  4442                           ;mcp2515.c: 181: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4443  0F91  303B               	movlw	low (STR_26| (0+32768))
  4444  0F92  00A2               	movwf	printf@f
  4445  0F93  3093               	movlw	high (STR_26| (0+32768))
  4446  0F94  00A3               	movwf	printf@f+1
  4447  0F95  0864               	movf	receive@n,w
  4448  0F96  00CB               	movwf	??_receive
  4449  0F97  01CC               	clrf	??_receive+1
  4450  0F98  084B               	movf	??_receive,w
  4451  0F99  00A4               	movwf	?_printf+2
  4452  0F9A  084C               	movf	??_receive+1,w
  4453  0F9B  00A5               	movwf	?_printf+3
  4454  0F9C  0852               	movf	receive@rx_buf+1,w
  4455  0F9D  00CD               	movwf	??_receive+2
  4456  0F9E  01CE               	clrf	??_receive+3
  4457  0F9F  084D               	movf	??_receive+2,w
  4458  0FA0  00A6               	movwf	?_printf+4
  4459  0FA1  084E               	movf	??_receive+3,w
  4460  0FA2  00A7               	movwf	?_printf+5
  4461  0FA3  3185  25A5  318F   	fcall	_printf
  4462                           
  4463                           ;mcp2515.c: 182: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4464  0FA6  305D               	movlw	low (STR_27| (0+32768))
  4465  0FA7  0020               	movlb	0	; select bank0
  4466  0FA8  00A2               	movwf	printf@f
  4467  0FA9  3093               	movlw	high (STR_27| (0+32768))
  4468  0FAA  00A3               	movwf	printf@f+1
  4469  0FAB  0864               	movf	receive@n,w
  4470  0FAC  00CB               	movwf	??_receive
  4471  0FAD  01CC               	clrf	??_receive+1
  4472  0FAE  084B               	movf	??_receive,w
  4473  0FAF  00A4               	movwf	?_printf+2
  4474  0FB0  084C               	movf	??_receive+1,w
  4475  0FB1  00A5               	movwf	?_printf+3
  4476  0FB2  0853               	movf	receive@rx_buf+2,w
  4477  0FB3  00CD               	movwf	??_receive+2
  4478  0FB4  01CE               	clrf	??_receive+3
  4479  0FB5  084D               	movf	??_receive+2,w
  4480  0FB6  00A6               	movwf	?_printf+4
  4481  0FB7  084E               	movf	??_receive+3,w
  4482  0FB8  00A7               	movwf	?_printf+5
  4483  0FB9  3185  25A5  318F   	fcall	_printf
  4484                           
  4485                           ;mcp2515.c: 183: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4486  0FBC  307F               	movlw	low (STR_28| (0+32768))
  4487  0FBD  0020               	movlb	0	; select bank0
  4488  0FBE  00A2               	movwf	printf@f
  4489  0FBF  3093               	movlw	high (STR_28| (0+32768))
  4490  0FC0  00A3               	movwf	printf@f+1
  4491  0FC1  0864               	movf	receive@n,w
  4492  0FC2  00CB               	movwf	??_receive
  4493  0FC3  01CC               	clrf	??_receive+1
  4494  0FC4  084B               	movf	??_receive,w
  4495  0FC5  00A4               	movwf	?_printf+2
  4496  0FC6  084C               	movf	??_receive+1,w
  4497  0FC7  00A5               	movwf	?_printf+3
  4498  0FC8  0856               	movf	receive@rx_buf+5,w
  4499  0FC9  00CD               	movwf	??_receive+2
  4500  0FCA  01CE               	clrf	??_receive+3
  4501  0FCB  084D               	movf	??_receive+2,w
  4502  0FCC  00A6               	movwf	?_printf+4
  4503  0FCD  084E               	movf	??_receive+3,w
  4504  0FCE  00A7               	movwf	?_printf+5
  4505  0FCF  3185  25A5  318F   	fcall	_printf
  4506                           
  4507                           ;mcp2515.c: 184: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4508  0FD2  30DF               	movlw	low (STR_29| (0+32768))
  4509  0FD3  0020               	movlb	0	; select bank0
  4510  0FD4  00A2               	movwf	printf@f
  4511  0FD5  3093               	movlw	high (STR_29| (0+32768))
  4512  0FD6  00A3               	movwf	printf@f+1
  4513  0FD7  0864               	movf	receive@n,w
  4514  0FD8  00CB               	movwf	??_receive
  4515  0FD9  01CC               	clrf	??_receive+1
  4516  0FDA  084B               	movf	??_receive,w
  4517  0FDB  00A4               	movwf	?_printf+2
  4518  0FDC  084C               	movf	??_receive+1,w
  4519  0FDD  00A5               	movwf	?_printf+3
  4520  0FDE  0857               	movf	receive@rx_buf+6,w
  4521  0FDF  00CD               	movwf	??_receive+2
  4522  0FE0  01CE               	clrf	??_receive+3
  4523  0FE1  084D               	movf	??_receive+2,w
  4524  0FE2  00A6               	movwf	?_printf+4
  4525  0FE3  084E               	movf	??_receive+3,w
  4526  0FE4  00A7               	movwf	?_printf+5
  4527  0FE5  3185  25A5  318F   	fcall	_printf
  4528  0FE8                     l2341:	
  4529                           
  4530                           ;mcp2515.c: 185: }
  4531                           ;mcp2515.c: 188: uint8_t *pbuf = &rx_buf[6];
  4532  0FE8  3057               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4533  0FE9  0020               	movlb	0	; select bank0
  4534  0FEA  00CB               	movwf	??_receive
  4535  0FEB  084B               	movf	??_receive,w
  4536  0FEC  00E0               	movwf	receive@pbuf
  4537                           
  4538                           ;mcp2515.c: 189: handler(id, pbuf, dlc);
  4539  0FED  0862               	movf	receive@id+1,w
  4540  0FEE  00C4               	movwf	receive_handler@sid+1
  4541  0FEF  0861               	movf	receive@id,w
  4542  0FF0  00C3               	movwf	receive_handler@sid
  4543  0FF1  0860               	movf	receive@pbuf,w
  4544  0FF2  00CB               	movwf	??_receive
  4545  0FF3  084B               	movf	??_receive,w
  4546  0FF4  00C5               	movwf	receive_handler@buf
  4547  0FF5  0863               	movf	receive@dlc,w
  4548  0FF6  00CC               	movwf	??_receive+1
  4549  0FF7  084C               	movf	??_receive+1,w
  4550  0FF8  00C6               	movwf	receive_handler@dlc
  4551  0FF9  0021               	movlb	1	; select bank1
  4552  0FFA  0831               	movf	(_handler+1)^(0+128),w
  4553  0FFB  008A               	movwf	10
  4554  0FFC  0830               	movf	_handler^(0+128),w
  4555  0FFD  000A               	callw
  4556  0FFE  318F               	pagesel	$
  4557  0FFF  0008               	return
  4558  1000                     __end_of_receive:	
  4559                           
  4560                           	psect	text4
  4561  0D19                     __ptext4:	
  4562 ;; *************** function _receive_handler *****************
  4563 ;; Defined at:
  4564 ;;		line 33 in file "main.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  sid             2   35[BANK0 ] unsigned int 
  4567 ;;  buf             1   37[BANK0 ] PTR unsigned char 
  4568 ;;		 -> receive@rx_buf(15), 
  4569 ;;  dlc             1   38[BANK0 ] unsigned char 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  i               1   42[BANK0 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;Total ram usage:        8 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    3
  4588 ;; This function calls:
  4589 ;;		_printf
  4590 ;; This function is called by:
  4591 ;;		_main
  4592 ;;		_receive
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _receive_handler
  4598  0D19                     _receive_handler:	
  4599                           
  4600                           ;main.c: 34: uint8_t i;
  4601                           ;main.c: 35: if (output_format.with_sid) {
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4605  0D19  0020               	movlb	0	; select bank0
  4606  0D1A  086D               	movf	_output_format,w
  4607  0D1B  1903               	btfsc	3,2
  4608  0D1C  2D2C               	goto	l2213
  4609                           
  4610                           ;main.c: 36: printf("%d,%s\n", sid, buf);
  4611  0D1D  308D               	movlw	low (STR_1| (0+32768))
  4612  0D1E  00A2               	movwf	printf@f
  4613  0D1F  3094               	movlw	high (STR_1| (0+32768))
  4614  0D20  00A3               	movwf	printf@f+1
  4615  0D21  0844               	movf	receive_handler@sid+1,w
  4616  0D22  00A5               	movwf	?_printf+3
  4617  0D23  0843               	movf	receive_handler@sid,w
  4618  0D24  00A4               	movwf	?_printf+2
  4619  0D25  0845               	movf	receive_handler@buf,w
  4620  0D26  00A6               	movwf	low ((?_printf| 0+4))
  4621  0D27  3000               	movlw	0
  4622  0D28  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4623  0D29  3185  25A5         	fcall	_printf
  4624                           
  4625                           ;main.c: 37: } else if (output_format.hex_output) {
  4626  0D2B  0008               	return
  4627  0D2C                     l2213:	
  4628  0D2C  0020               	movlb	0	; select bank0
  4629  0D2D  086E               	movf	_output_format+1,w
  4630  0D2E  1903               	btfsc	3,2
  4631  0D2F  2D62               	goto	l2227
  4632                           
  4633                           ;main.c: 38: printf("%03x:", sid);
  4634  0D30  309A               	movlw	low (STR_2| (0+32768))
  4635  0D31  00A2               	movwf	printf@f
  4636  0D32  3094               	movlw	high (STR_2| (0+32768))
  4637  0D33  00A3               	movwf	printf@f+1
  4638  0D34  0844               	movf	receive_handler@sid+1,w
  4639  0D35  00A5               	movwf	?_printf+3
  4640  0D36  0843               	movf	receive_handler@sid,w
  4641  0D37  00A4               	movwf	?_printf+2
  4642  0D38  3185  25A5  318D   	fcall	_printf
  4643                           
  4644                           ;main.c: 39: for(i=0; i<dlc; i++) {
  4645  0D3B  0020               	movlb	0	; select bank0
  4646  0D3C  01CA               	clrf	receive_handler@i
  4647  0D3D                     l2223:	
  4648  0D3D  0846               	movf	receive_handler@dlc,w
  4649  0D3E  024A               	subwf	receive_handler@i,w
  4650  0D3F  1803               	btfsc	3,0
  4651  0D40  2D5B               	goto	l2225
  4652                           
  4653                           ;main.c: 40: printf(" %02x", buf[i]);
  4654  0D41  30A0               	movlw	low (STR_3| (0+32768))
  4655  0D42  00A2               	movwf	printf@f
  4656  0D43  3094               	movlw	high (STR_3| (0+32768))
  4657  0D44  00A3               	movwf	printf@f+1
  4658  0D45  084A               	movf	receive_handler@i,w
  4659  0D46  0745               	addwf	receive_handler@buf,w
  4660  0D47  00C7               	movwf	??_receive_handler
  4661  0D48  0847               	movf	??_receive_handler,w
  4662  0D49  0086               	movwf	6
  4663  0D4A  0187               	clrf	7
  4664  0D4B  0801               	movf	1,w
  4665  0D4C  00C8               	movwf	??_receive_handler+1
  4666  0D4D  01C9               	clrf	??_receive_handler+2
  4667  0D4E  0848               	movf	??_receive_handler+1,w
  4668  0D4F  00A4               	movwf	?_printf+2
  4669  0D50  0849               	movf	??_receive_handler+2,w
  4670  0D51  00A5               	movwf	?_printf+3
  4671  0D52  3185  25A5  318D   	fcall	_printf
  4672  0D55  3001               	movlw	1
  4673  0D56  0020               	movlb	0	; select bank0
  4674  0D57  00C7               	movwf	??_receive_handler
  4675  0D58  0847               	movf	??_receive_handler,w
  4676  0D59  07CA               	addwf	receive_handler@i,f
  4677  0D5A  2D3D               	goto	l2223
  4678  0D5B                     l2225:	
  4679                           
  4680                           ;main.c: 41: }
  4681                           ;main.c: 42: printf("\n");
  4682  0D5B  30A9               	movlw	low ((STR_39+3)| (0+32768))
  4683  0D5C  00A2               	movwf	printf@f
  4684  0D5D  3094               	movlw	high ((STR_39+3)| (0+32768))
  4685  0D5E  00A3               	movwf	printf@f+1
  4686  0D5F  3185  25A5         	fcall	_printf
  4687                           
  4688                           ;main.c: 43: } else {
  4689  0D61  0008               	return
  4690  0D62                     l2227:	
  4691                           
  4692                           ;main.c: 44: printf("%s\n", buf);
  4693  0D62  3015               	movlw	low ((STR_36+14)| (0+32768))
  4694  0D63  0020               	movlb	0	; select bank0
  4695  0D64  00A2               	movwf	printf@f
  4696  0D65  3093               	movlw	high ((STR_36+14)| (0+32768))
  4697  0D66  00A3               	movwf	printf@f+1
  4698  0D67  0845               	movf	receive_handler@buf,w
  4699  0D68  00A4               	movwf	low ((?_printf| 0+2))
  4700  0D69  3000               	movlw	0
  4701  0D6A  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4702  0D6B  3185  25A5         	fcall	_printf
  4703  0D6D  0008               	return
  4704  0D6E                     __end_of_receive_handler:	
  4705                           
  4706                           	psect	text5
  4707  0EA6                     __ptext5:	
  4708 ;; *************** function _can_set_mask *****************
  4709 ;; Defined at:
  4710 ;;		line 122 in file "mcp2515.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  cmd             1    wreg     unsigned char 
  4713 ;;  n               1   39[BANK0 ] unsigned char 
  4714 ;;  mask            2   40[BANK0 ] unsigned int 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  cmd             1   50[BANK0 ] unsigned char 
  4717 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  4718 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4728 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;Total ram usage:       14 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    4
  4735 ;; This function calls:
  4736 ;;		_SPI_exchange
  4737 ;;		_abort_pending_transmissions
  4738 ;;		_can_ope_mode
  4739 ;;		_printf
  4740 ;; This function is called by:
  4741 ;;		_main
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _can_set_mask
  4747  0EA6                     _can_set_mask:	
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4751                           ;can_set_mask@cmd stored from wreg
  4752  0EA6  0020               	movlb	0	; select bank0
  4753  0EA7  00D2               	movwf	can_set_mask@cmd
  4754                           
  4755                           ;mcp2515.c: 123: can_ope_mode(0b10000000u);
  4756  0EA8  3080               	movlw	128
  4757  0EA9  318D  25C4  318E   	fcall	_can_ope_mode
  4758                           
  4759                           ;mcp2515.c: 124: abort_pending_transmissions();
  4760  0EAC  318B  23E4  318E   	fcall	_abort_pending_transmissions
  4761                           
  4762                           ;mcp2515.c: 125: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  4763  0EAF  3008               	movlw	8
  4764  0EB0  0020               	movlb	0	; select bank0
  4765  0EB1  0249               	subwf	can_set_mask@mask+1,w
  4766  0EB2  3000               	movlw	0
  4767  0EB3  1903               	skipnz
  4768  0EB4  0248               	subwf	can_set_mask@mask,w
  4769  0EB5  1C03               	btfss	3,0
  4770  0EB6  2EBB               	goto	l2533
  4771  0EB7  30FF               	movlw	255
  4772  0EB8  00C8               	movwf	can_set_mask@mask
  4773  0EB9  3007               	movlw	7
  4774  0EBA  00C9               	movwf	can_set_mask@mask+1
  4775  0EBB                     l2533:	
  4776                           
  4777                           ;mcp2515.c: 126: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  4778  0EBB  0849               	movf	can_set_mask@mask+1,w
  4779  0EBC  00CB               	movwf	??_can_set_mask+1
  4780  0EBD  0848               	movf	can_set_mask@mask,w
  4781  0EBE  00CA               	movwf	??_can_set_mask
  4782  0EBF  36CB               	lsrf	??_can_set_mask+1,f
  4783  0EC0  0CCA               	rrf	??_can_set_mask,f
  4784  0EC1  36CB               	lsrf	??_can_set_mask+1,f
  4785  0EC2  0CCA               	rrf	??_can_set_mask,f
  4786  0EC3  36CB               	lsrf	??_can_set_mask+1,f
  4787  0EC4  0CCA               	rrf	??_can_set_mask,f
  4788  0EC5  084A               	movf	??_can_set_mask,w
  4789  0EC6  00CC               	movwf	??_can_set_mask+2
  4790  0EC7  084C               	movf	??_can_set_mask+2,w
  4791  0EC8  00D3               	movwf	can_set_mask@mask_sidh
  4792                           
  4793                           ;mcp2515.c: 127: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  4794  0EC9  0848               	movf	can_set_mask@mask,w
  4795  0ECA  3907               	andlw	7
  4796  0ECB  00CA               	movwf	??_can_set_mask
  4797  0ECC  3004               	movlw	4
  4798  0ECD                     u2185:	
  4799  0ECD  35CA               	lslf	??_can_set_mask,f
  4800  0ECE  3EFF               	addlw	-1
  4801  0ECF  1D03               	skipz
  4802  0ED0  2ECD               	goto	u2185
  4803  0ED1  354A               	lslf	??_can_set_mask,w
  4804  0ED2  00CB               	movwf	??_can_set_mask+1
  4805  0ED3  084B               	movf	??_can_set_mask+1,w
  4806  0ED4  00D4               	movwf	can_set_mask@mask_sidl
  4807                           
  4808                           ;mcp2515.c: 129: if (cmd == 0u) {
  4809  0ED5  0852               	movf	can_set_mask@cmd,w
  4810  0ED6  1D03               	btfss	3,2
  4811  0ED7  2EE7               	goto	l2545
  4812                           
  4813                           ;mcp2515.c: 130: save_rxmn[n] = mask;
  4814  0ED8  3547               	lslf	can_set_mask@n,w
  4815  0ED9  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  4816  0EDA  0086               	movwf	6
  4817  0EDB  0187               	clrf	7
  4818  0EDC  0848               	movf	can_set_mask@mask,w
  4819  0EDD  3FC0               	movwi [0]fsr1
  4820  0EDE  0849               	movf	can_set_mask@mask+1,w
  4821  0EDF  3FC1               	movwi [1]fsr1
  4822                           
  4823                           ;mcp2515.c: 131: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  4824  0EE0  086B               	movf	_mode,w
  4825  0EE1  1903               	btfsc	3,2
  4826  0EE2  2F0F               	goto	l2551
  4827  0EE3  30B4               	movlw	low (STR_24| (0+32768))
  4828  0EE4  00A2               	movwf	printf@f
  4829  0EE5  3092               	movlw	high (STR_24| (0+32768))
  4830  0EE6  2EF6               	goto	L6
  4831  0EE7                     l2545:	
  4832                           ;mcp2515.c: 132: } else {
  4833                           
  4834                           
  4835                           ;mcp2515.c: 133: save_rxfn[n] = mask;
  4836  0EE7  0020               	movlb	0	; select bank0
  4837  0EE8  3547               	lslf	can_set_mask@n,w
  4838  0EE9  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  4839  0EEA  0086               	movwf	6
  4840  0EEB  0187               	clrf	7
  4841  0EEC  0848               	movf	can_set_mask@mask,w
  4842  0EED  3FC0               	movwi [0]fsr1
  4843  0EEE  0849               	movf	can_set_mask@mask+1,w
  4844  0EEF  3FC1               	movwi [1]fsr1
  4845                           
  4846                           ;mcp2515.c: 134: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  4847  0EF0  086B               	movf	_mode,w
  4848  0EF1  1903               	btfsc	3,2
  4849  0EF2  2F0F               	goto	l2551
  4850  0EF3  3087               	movlw	low (STR_25| (0+32768))
  4851  0EF4  00A2               	movwf	printf@f
  4852  0EF5  3092               	movlw	high (STR_25| (0+32768))
  4853  0EF6                     L6:	
  4854  0EF6  00A3               	movwf	printf@f+1
  4855  0EF7  0847               	movf	can_set_mask@n,w
  4856  0EF8  00CA               	movwf	??_can_set_mask
  4857  0EF9  01CB               	clrf	??_can_set_mask+1
  4858  0EFA  084A               	movf	??_can_set_mask,w
  4859  0EFB  00A4               	movwf	?_printf+2
  4860  0EFC  084B               	movf	??_can_set_mask+1,w
  4861  0EFD  00A5               	movwf	?_printf+3
  4862  0EFE  0853               	movf	can_set_mask@mask_sidh,w
  4863  0EFF  00CC               	movwf	??_can_set_mask+2
  4864  0F00  01CD               	clrf	??_can_set_mask+3
  4865  0F01  084C               	movf	??_can_set_mask+2,w
  4866  0F02  00A6               	movwf	?_printf+4
  4867  0F03  084D               	movf	??_can_set_mask+3,w
  4868  0F04  00A7               	movwf	?_printf+5
  4869  0F05  0854               	movf	can_set_mask@mask_sidl,w
  4870  0F06  00CE               	movwf	??_can_set_mask+4
  4871  0F07  01CF               	clrf	??_can_set_mask+5
  4872  0F08  084E               	movf	??_can_set_mask+4,w
  4873  0F09  00A8               	movwf	?_printf+6
  4874  0F0A  084F               	movf	??_can_set_mask+5,w
  4875  0F0B  00A9               	movwf	?_printf+7
  4876  0F0C  3185  25A5  318E   	fcall	_printf
  4877  0F0F                     l2551:	
  4878                           
  4879                           ;mcp2515.c: 135: }
  4880                           ;mcp2515.c: 137: buf[0] = 0b00000010u;
  4881  0F0F  3002               	movlw	2
  4882  0F10  0020               	movlb	0	; select bank0
  4883  0F11  00CA               	movwf	??_can_set_mask
  4884  0F12  084A               	movf	??_can_set_mask,w
  4885  0F13  0021               	movlb	1	; select bank1
  4886  0F14  00B4               	movwf	_buf^(0+128)
  4887                           
  4888                           ;mcp2515.c: 138: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  4889  0F15  0020               	movlb	0	; select bank0
  4890  0F16  0852               	movf	can_set_mask@cmd,w
  4891  0F17  1903               	btfsc	3,2
  4892  0F18  2F1E               	goto	l2557
  4893  0F19  0847               	movf	can_set_mask@n,w
  4894  0F1A  3E94               	addlw	low (_rxfnsidh| (0+32768))
  4895  0F1B  0084               	movwf	4
  4896  0F1C  3094               	movlw	high (_rxfnsidh| (0+32768))
  4897  0F1D  2F22               	goto	L5
  4898  0F1E                     l2557:	
  4899  0F1E  0847               	movf	can_set_mask@n,w
  4900  0F1F  3E00               	addlw	low (_rxmnsidh| (0+32768))
  4901  0F20  0084               	movwf	4
  4902  0F21  3090               	movlw	high (_rxmnsidh| (0+32768))
  4903  0F22                     L5:	
  4904  0F22  1803               	skipnc
  4905  0F23  3E01               	addlw	1
  4906  0F24  0085               	movwf	5
  4907  0F25  0800               	movf	0,w	;code access
  4908  0F26  00CA               	movwf	??_can_set_mask
  4909  0F27  01CB               	clrf	??_can_set_mask+1
  4910  0F28  084A               	movf	??_can_set_mask,w
  4911  0F29  00D0               	movwf	_can_set_mask$509
  4912  0F2A  084B               	movf	??_can_set_mask+1,w
  4913  0F2B  00D1               	movwf	_can_set_mask$509+1
  4914  0F2C  0850               	movf	_can_set_mask$509,w
  4915  0F2D  00CA               	movwf	??_can_set_mask
  4916  0F2E  084A               	movf	??_can_set_mask,w
  4917  0F2F  0021               	movlb	1	; select bank1
  4918  0F30  00B5               	movwf	(_buf^(0+128)+1)
  4919                           
  4920                           ;mcp2515.c: 139: buf[2] = mask_sidh;
  4921  0F31  0020               	movlb	0	; select bank0
  4922  0F32  0853               	movf	can_set_mask@mask_sidh,w
  4923  0F33  00CA               	movwf	??_can_set_mask
  4924  0F34  084A               	movf	??_can_set_mask,w
  4925  0F35  0021               	movlb	1	; select bank1
  4926  0F36  00B6               	movwf	(_buf^(0+128)+2)
  4927                           
  4928                           ;mcp2515.c: 140: buf[3] = mask_sidl;
  4929  0F37  0020               	movlb	0	; select bank0
  4930  0F38  0854               	movf	can_set_mask@mask_sidl,w
  4931  0F39  00CA               	movwf	??_can_set_mask
  4932  0F3A  084A               	movf	??_can_set_mask,w
  4933  0F3B  0021               	movlb	1	; select bank1
  4934  0F3C  00B7               	movwf	(_buf^(0+128)+3)
  4935                           
  4936                           ;mcp2515.c: 141: SPI_exchange(buf, 4);
  4937  0F3D  3004               	movlw	4
  4938  0F3E  0020               	movlb	0	; select bank0
  4939  0F3F  00CA               	movwf	??_can_set_mask
  4940  0F40  084A               	movf	??_can_set_mask,w
  4941  0F41  00F8               	movwf	SPI_exchange@len
  4942  0F42  30B4               	movlw	(low (_buf| 0))& (0+255)
  4943  0F43  318B  2360  318E   	fcall	_SPI_exchange
  4944                           
  4945                           ;mcp2515.c: 143: can_ope_mode(operation_mode);
  4946  0F46  0020               	movlb	0	; select bank0
  4947  0F47  086F               	movf	_operation_mode,w
  4948  0F48  318D  25C4         	fcall	_can_ope_mode
  4949  0F4A  0008               	return
  4950  0F4B                     __end_of_can_set_mask:	
  4951                           
  4952                           	psect	text6
  4953  0256                     __ptext6:	
  4954 ;; *************** function _can_send *****************
  4955 ;; Defined at:
  4956 ;;		line 195 in file "mcp2515.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  data_buf        1    wreg     PTR unsigned char 
  4959 ;;		 -> main@buf(16), 
  4960 ;;  dlc             1   35[BANK0 ] unsigned char 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  4963 ;;		 -> main@buf(16), 
  4964 ;;  n               1   45[BANK0 ] unsigned char 
  4965 ;;  i               1   44[BANK0 ] unsigned char 
  4966 ;;  status          1   42[BANK0 ] unsigned char 
  4967 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  4968 ;;  len             1   40[BANK0 ] unsigned char 
  4969 ;; Return value:  Size  Location     Type
  4970 ;;                  1    wreg      unsigned char 
  4971 ;; Registers used:
  4972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4978 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;Total ram usage:       11 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    3
  4985 ;; This function calls:
  4986 ;;		_SPI_exchange
  4987 ;;		_printf
  4988 ;; This function is called by:
  4989 ;;		_main
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function _can_send
  4995  0256                     _can_send:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4999                           ;can_send@data_buf stored from wreg
  5000  0256  0020               	movlb	0	; select bank0
  5001  0257  00CB               	movwf	can_send@data_buf
  5002                           
  5003                           ;mcp2515.c: 196: uint8_t i;
  5004                           ;mcp2515.c: 197: uint8_t n = 0;
  5005  0258  01CD               	clrf	can_send@n
  5006                           
  5007                           ;mcp2515.c: 199: buf[0] = 0b10100000u;
  5008  0259  30A0               	movlw	160
  5009  025A  00C4               	movwf	??_can_send
  5010  025B  0844               	movf	??_can_send,w
  5011  025C  0021               	movlb	1	; select bank1
  5012  025D  00B4               	movwf	_buf^(0+128)
  5013                           
  5014                           ;mcp2515.c: 200: buf[1] = 0x00;
  5015  025E  01B5               	clrf	(_buf^(0+128)+1)
  5016                           
  5017                           ;mcp2515.c: 201: uint8_t bytes_written = SPI_exchange(buf, 2);
  5018  025F  3002               	movlw	2
  5019  0260  0020               	movlb	0	; select bank0
  5020  0261  00C4               	movwf	??_can_send
  5021  0262  0844               	movf	??_can_send,w
  5022  0263  00F8               	movwf	SPI_exchange@len
  5023  0264  30B4               	movlw	(low (_buf| 0))& (0+255)
  5024  0265  318B  2360  3182   	fcall	_SPI_exchange
  5025  0268  0020               	movlb	0	; select bank0
  5026  0269  00C5               	movwf	??_can_send+1
  5027  026A  0845               	movf	??_can_send+1,w
  5028  026B  00C9               	movwf	can_send@bytes_written
  5029                           
  5030                           ;mcp2515.c: 202: uint8_t status = buf[1];
  5031  026C  0021               	movlb	1	; select bank1
  5032  026D  0835               	movf	(_buf^(0+128)+1),w
  5033  026E  0020               	movlb	0	; select bank0
  5034  026F  00C4               	movwf	??_can_send
  5035  0270  0844               	movf	??_can_send,w
  5036  0271  00CA               	movwf	can_send@status
  5037                           
  5038                           ;mcp2515.c: 203: if ((status & 0b01000000u) == 0) {
  5039  0272  1B4A               	btfsc	can_send@status,6
  5040  0273  2A84               	goto	l329
  5041                           
  5042                           ;mcp2515.c: 204: if (mode.debug) printf("TXB2 is idle\n");
  5043  0274  086B               	movf	_mode,w
  5044  0275  1903               	btfsc	3,2
  5045  0276  2A7E               	goto	l2627
  5046  0277  3028               	movlw	low (STR_30| (0+32768))
  5047  0278  00A2               	movwf	printf@f
  5048  0279  3094               	movlw	high (STR_30| (0+32768))
  5049  027A  00A3               	movwf	printf@f+1
  5050  027B  3185  25A5  3182   	fcall	_printf
  5051  027E                     l2627:	
  5052                           
  5053                           ;mcp2515.c: 205: n = 2;
  5054  027E  3002               	movlw	2
  5055  027F  0020               	movlb	0	; select bank0
  5056  0280  00C4               	movwf	??_can_send
  5057  0281  0844               	movf	??_can_send,w
  5058  0282  00CD               	movwf	can_send@n
  5059                           
  5060                           ;mcp2515.c: 206: } else if ((status & 0b00010000u) == 0) {
  5061  0283  2AA2               	goto	l2641
  5062  0284                     l329:	
  5063  0284  1A4A               	btfsc	can_send@status,4
  5064  0285  2A94               	goto	l332
  5065                           
  5066                           ;mcp2515.c: 207: if (mode.debug) printf("TXB1 is idle\n");
  5067  0286  086B               	movf	_mode,w
  5068  0287  1903               	btfsc	3,2
  5069  0288  2A90               	goto	l2633
  5070  0289  301A               	movlw	low (STR_31| (0+32768))
  5071  028A  00A2               	movwf	printf@f
  5072  028B  3094               	movlw	high (STR_31| (0+32768))
  5073  028C  00A3               	movwf	printf@f+1
  5074  028D  3185  25A5  3182   	fcall	_printf
  5075  0290                     l2633:	
  5076                           
  5077                           ;mcp2515.c: 208: n = 1;
  5078  0290  0020               	movlb	0	; select bank0
  5079  0291  01CD               	clrf	can_send@n
  5080  0292  0ACD               	incf	can_send@n,f
  5081                           
  5082                           ;mcp2515.c: 209: } else if ((status & 0b00000100u) == 0) {
  5083  0293  2AA2               	goto	l2641
  5084  0294                     l332:	
  5085  0294  194A               	btfsc	can_send@status,2
  5086  0295  2AA2               	goto	l2641
  5087                           
  5088                           ;mcp2515.c: 210: if (mode.debug) printf("TXB0 is idle\n");
  5089  0296  086B               	movf	_mode,w
  5090  0297  1903               	btfsc	3,2
  5091  0298  2AA0               	goto	l2639
  5092  0299  300C               	movlw	low (STR_32| (0+32768))
  5093  029A  00A2               	movwf	printf@f
  5094  029B  3094               	movlw	high (STR_32| (0+32768))
  5095  029C  00A3               	movwf	printf@f+1
  5096  029D  3185  25A5  3182   	fcall	_printf
  5097  02A0                     l2639:	
  5098                           
  5099                           ;mcp2515.c: 211: n = 0;
  5100  02A0  0020               	movlb	0	; select bank0
  5101  02A1  01CD               	clrf	can_send@n
  5102  02A2                     l2641:	
  5103                           
  5104                           ;mcp2515.c: 212: }
  5105                           ;mcp2515.c: 218: buf[0] = 0b01000000u + abc[n];
  5106  02A2  084D               	movf	can_send@n,w
  5107  02A3  3EAE               	addlw	low (_abc| (0+32768))
  5108  02A4  0084               	movwf	4
  5109  02A5  3094               	movlw	high (_abc| (0+32768))
  5110  02A6  1803               	skipnc
  5111  02A7  3E01               	addlw	1
  5112  02A8  0085               	movwf	5
  5113  02A9  0800               	movf	0,w	;code access
  5114  02AA  3E40               	addlw	64
  5115  02AB  00C4               	movwf	??_can_send
  5116  02AC  0844               	movf	??_can_send,w
  5117  02AD  0021               	movlb	1	; select bank1
  5118  02AE  00B4               	movwf	_buf^(0+128)
  5119                           
  5120                           ;mcp2515.c: 220: buf[1] = sid.sidh;
  5121  02AF  0832               	movf	_sid^(0+128),w
  5122  02B0  0020               	movlb	0	; select bank0
  5123  02B1  00C4               	movwf	??_can_send
  5124  02B2  0844               	movf	??_can_send,w
  5125  02B3  0021               	movlb	1	; select bank1
  5126  02B4  00B5               	movwf	(_buf^(0+128)+1)
  5127                           
  5128                           ;mcp2515.c: 222: buf[2] = sid.sidl;
  5129  02B5  0833               	movf	(_sid^(0+128)+1),w
  5130  02B6  0020               	movlb	0	; select bank0
  5131  02B7  00C4               	movwf	??_can_send
  5132  02B8  0844               	movf	??_can_send,w
  5133  02B9  0021               	movlb	1	; select bank1
  5134  02BA  00B6               	movwf	(_buf^(0+128)+2)
  5135                           
  5136                           ;mcp2515.c: 224: buf[3] = 0;
  5137  02BB  01B7               	clrf	(_buf^(0+128)+3)
  5138                           
  5139                           ;mcp2515.c: 226: buf[4] = 0;
  5140  02BC  01B8               	clrf	(_buf^(0+128)+4)
  5141                           
  5142                           ;mcp2515.c: 228: buf[5] = dlc;
  5143  02BD  0020               	movlb	0	; select bank0
  5144  02BE  0843               	movf	can_send@dlc,w
  5145  02BF  00C4               	movwf	??_can_send
  5146  02C0  0844               	movf	??_can_send,w
  5147  02C1  0021               	movlb	1	; select bank1
  5148  02C2  00B9               	movwf	(_buf^(0+128)+5)
  5149                           
  5150                           ;mcp2515.c: 231: for(i=0; i<dlc; i++) {
  5151  02C3  0020               	movlb	0	; select bank0
  5152  02C4  01CC               	clrf	can_send@i
  5153  02C5                     l2663:	
  5154  02C5  0843               	movf	can_send@dlc,w
  5155  02C6  024C               	subwf	can_send@i,w
  5156  02C7  1803               	btfsc	3,0
  5157  02C8  2AF5               	goto	l2665
  5158                           
  5159                           ;mcp2515.c: 232: buf[6u+i] = data_buf[i];
  5160  02C9  084C               	movf	can_send@i,w
  5161  02CA  074B               	addwf	can_send@data_buf,w
  5162  02CB  00C4               	movwf	??_can_send
  5163  02CC  0844               	movf	??_can_send,w
  5164  02CD  0086               	movwf	6
  5165  02CE  0187               	clrf	7
  5166  02CF  0801               	movf	1,w
  5167  02D0  00C5               	movwf	??_can_send+1
  5168  02D1  084C               	movf	can_send@i,w
  5169  02D2  3E06               	addlw	6
  5170  02D3  3EB4               	addlw	(low (_buf| 0))& (0+255)
  5171  02D4  0086               	movwf	6
  5172  02D5  0187               	clrf	7
  5173  02D6  0845               	movf	??_can_send+1,w
  5174  02D7  0081               	movwf	1
  5175                           
  5176                           ;mcp2515.c: 233: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  5177  02D8  086B               	movf	_mode,w
  5178  02D9  1903               	btfsc	3,2
  5179  02DA  2AEF               	goto	l2661
  5180  02DB  30F3               	movlw	low (STR_33| (0+32768))
  5181  02DC  00A2               	movwf	printf@f
  5182  02DD  3092               	movlw	high (STR_33| (0+32768))
  5183  02DE  00A3               	movwf	printf@f+1
  5184  02DF  084C               	movf	can_send@i,w
  5185  02E0  074B               	addwf	can_send@data_buf,w
  5186  02E1  00C4               	movwf	??_can_send
  5187  02E2  0844               	movf	??_can_send,w
  5188  02E3  0086               	movwf	6
  5189  02E4  0187               	clrf	7
  5190  02E5  0801               	movf	1,w
  5191  02E6  00C5               	movwf	??_can_send+1
  5192  02E7  01C6               	clrf	??_can_send+2
  5193  02E8  0845               	movf	??_can_send+1,w
  5194  02E9  00A4               	movwf	?_printf+2
  5195  02EA  0846               	movf	??_can_send+2,w
  5196  02EB  00A5               	movwf	?_printf+3
  5197  02EC  3185  25A5  3182   	fcall	_printf
  5198  02EF                     l2661:	
  5199  02EF  3001               	movlw	1
  5200  02F0  0020               	movlb	0	; select bank0
  5201  02F1  00C4               	movwf	??_can_send
  5202  02F2  0844               	movf	??_can_send,w
  5203  02F3  07CC               	addwf	can_send@i,f
  5204  02F4  2AC5               	goto	l2663
  5205  02F5                     l2665:	
  5206                           
  5207                           ;mcp2515.c: 234: }
  5208                           ;mcp2515.c: 237: uint8_t len = 6u + dlc;
  5209  02F5  0843               	movf	can_send@dlc,w
  5210  02F6  3E06               	addlw	6
  5211  02F7  00C4               	movwf	??_can_send
  5212  02F8  0844               	movf	??_can_send,w
  5213  02F9  00C8               	movwf	can_send@len
  5214                           
  5215                           ;mcp2515.c: 238: uint8_t bytes_written = SPI_exchange(buf, len);
  5216  02FA  0848               	movf	can_send@len,w
  5217  02FB  00C4               	movwf	??_can_send
  5218  02FC  0844               	movf	??_can_send,w
  5219  02FD  00F8               	movwf	SPI_exchange@len
  5220  02FE  30B4               	movlw	(low (_buf| 0))& (0+255)
  5221  02FF  318B  2360  3182   	fcall	_SPI_exchange
  5222  0302  0020               	movlb	0	; select bank0
  5223  0303  00C5               	movwf	??_can_send+1
  5224  0304  0845               	movf	??_can_send+1,w
  5225  0305  00C9               	movwf	can_send@bytes_written
  5226                           
  5227                           ;mcp2515.c: 240: buf[0] = 0b00000011u;
  5228  0306  3003               	movlw	3
  5229  0307  00C4               	movwf	??_can_send
  5230  0308  0844               	movf	??_can_send,w
  5231  0309  0021               	movlb	1	; select bank1
  5232  030A  00B4               	movwf	_buf^(0+128)
  5233                           
  5234                           ;mcp2515.c: 241: buf[1] = txbnsidh[n];
  5235  030B  0020               	movlb	0	; select bank0
  5236  030C  084D               	movf	can_send@n,w
  5237  030D  3EAB               	addlw	low (_txbnsidh| (0+32768))
  5238  030E  0084               	movwf	4
  5239  030F  3094               	movlw	high (_txbnsidh| (0+32768))
  5240  0310  1803               	skipnc
  5241  0311  3E01               	addlw	1
  5242  0312  0085               	movwf	5
  5243  0313  0800               	movf	0,w	;code access
  5244  0314  00C4               	movwf	??_can_send
  5245  0315  0844               	movf	??_can_send,w
  5246  0316  0021               	movlb	1	; select bank1
  5247  0317  00B5               	movwf	(_buf^(0+128)+1)
  5248                           
  5249                           ;mcp2515.c: 242: buf[2] = 0x00;
  5250  0318  01B6               	clrf	(_buf^(0+128)+2)
  5251                           
  5252                           ;mcp2515.c: 243: SPI_exchange(buf, 3);
  5253  0319  3003               	movlw	3
  5254  031A  0020               	movlb	0	; select bank0
  5255  031B  00C4               	movwf	??_can_send
  5256  031C  0844               	movf	??_can_send,w
  5257  031D  00F8               	movwf	SPI_exchange@len
  5258  031E  30B4               	movlw	(low (_buf| 0))& (0+255)
  5259  031F  318B  2360  3182   	fcall	_SPI_exchange
  5260                           
  5261                           ;mcp2515.c: 245: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5262  0322  0020               	movlb	0	; select bank0
  5263  0323  086B               	movf	_mode,w
  5264  0324  1903               	btfsc	3,2
  5265  0325  2B3D               	goto	l2681
  5266  0326  304C               	movlw	low (STR_34| (0+32768))
  5267  0327  00A2               	movwf	printf@f
  5268  0328  3093               	movlw	high (STR_34| (0+32768))
  5269  0329  00A3               	movwf	printf@f+1
  5270  032A  084D               	movf	can_send@n,w
  5271  032B  00C4               	movwf	??_can_send
  5272  032C  01C5               	clrf	??_can_send+1
  5273  032D  0844               	movf	??_can_send,w
  5274  032E  00A4               	movwf	?_printf+2
  5275  032F  0845               	movf	??_can_send+1,w
  5276  0330  00A5               	movwf	?_printf+3
  5277  0331  0021               	movlb	1	; select bank1
  5278  0332  0836               	movf	(_buf^(0+128)+2),w
  5279  0333  0020               	movlb	0	; select bank0
  5280  0334  00C6               	movwf	??_can_send+2
  5281  0335  01C7               	clrf	??_can_send+3
  5282  0336  0846               	movf	??_can_send+2,w
  5283  0337  00A6               	movwf	?_printf+4
  5284  0338  0847               	movf	??_can_send+3,w
  5285  0339  00A7               	movwf	?_printf+5
  5286  033A  3185  25A5  3182   	fcall	_printf
  5287  033D                     l2681:	
  5288                           
  5289                           ;mcp2515.c: 246: buf[0] = 0b00000011u;
  5290  033D  3003               	movlw	3
  5291  033E  0020               	movlb	0	; select bank0
  5292  033F  00C4               	movwf	??_can_send
  5293  0340  0844               	movf	??_can_send,w
  5294  0341  0021               	movlb	1	; select bank1
  5295  0342  00B4               	movwf	_buf^(0+128)
  5296                           
  5297                           ;mcp2515.c: 247: buf[1] = txbnsidh[n] + 1u;
  5298  0343  0020               	movlb	0	; select bank0
  5299  0344  084D               	movf	can_send@n,w
  5300  0345  3EAB               	addlw	low (_txbnsidh| (0+32768))
  5301  0346  0084               	movwf	4
  5302  0347  3094               	movlw	high (_txbnsidh| (0+32768))
  5303  0348  1803               	skipnc
  5304  0349  3E01               	addlw	1
  5305  034A  0085               	movwf	5
  5306  034B  0800               	movf	0,w	;code access
  5307  034C  3E01               	addlw	1
  5308  034D  00C4               	movwf	??_can_send
  5309  034E  0844               	movf	??_can_send,w
  5310  034F  0021               	movlb	1	; select bank1
  5311  0350  00B5               	movwf	(_buf^(0+128)+1)
  5312                           
  5313                           ;mcp2515.c: 248: buf[2] = 0x00;
  5314  0351  01B6               	clrf	(_buf^(0+128)+2)
  5315                           
  5316                           ;mcp2515.c: 249: SPI_exchange(buf, 3);
  5317  0352  3003               	movlw	3
  5318  0353  0020               	movlb	0	; select bank0
  5319  0354  00C4               	movwf	??_can_send
  5320  0355  0844               	movf	??_can_send,w
  5321  0356  00F8               	movwf	SPI_exchange@len
  5322  0357  30B4               	movlw	(low (_buf| 0))& (0+255)
  5323  0358  318B  2360  3182   	fcall	_SPI_exchange
  5324                           
  5325                           ;mcp2515.c: 251: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5326  035B  0020               	movlb	0	; select bank0
  5327  035C  086B               	movf	_mode,w
  5328  035D  1903               	btfsc	3,2
  5329  035E  2B76               	goto	l2693
  5330  035F  306E               	movlw	low (STR_35| (0+32768))
  5331  0360  00A2               	movwf	printf@f
  5332  0361  3093               	movlw	high (STR_35| (0+32768))
  5333  0362  00A3               	movwf	printf@f+1
  5334  0363  084D               	movf	can_send@n,w
  5335  0364  00C4               	movwf	??_can_send
  5336  0365  01C5               	clrf	??_can_send+1
  5337  0366  0844               	movf	??_can_send,w
  5338  0367  00A4               	movwf	?_printf+2
  5339  0368  0845               	movf	??_can_send+1,w
  5340  0369  00A5               	movwf	?_printf+3
  5341  036A  0021               	movlb	1	; select bank1
  5342  036B  0836               	movf	(_buf^(0+128)+2),w
  5343  036C  0020               	movlb	0	; select bank0
  5344  036D  00C6               	movwf	??_can_send+2
  5345  036E  01C7               	clrf	??_can_send+3
  5346  036F  0846               	movf	??_can_send+2,w
  5347  0370  00A6               	movwf	?_printf+4
  5348  0371  0847               	movf	??_can_send+3,w
  5349  0372  00A7               	movwf	?_printf+5
  5350  0373  3185  25A5  3182   	fcall	_printf
  5351  0376                     l2693:	
  5352                           
  5353                           ;mcp2515.c: 253: if (bytes_written == len) {
  5354  0376  0020               	movlb	0	; select bank0
  5355  0377  0849               	movf	can_send@bytes_written,w
  5356  0378  0648               	xorwf	can_send@len,w
  5357  0379  1D03               	skipz
  5358  037A  0008               	return
  5359                           
  5360                           ;mcp2515.c: 255: buf[0] = 0b10000000u + (0b00000001u << n);
  5361  037B  3001               	movlw	1
  5362  037C  00C4               	movwf	??_can_send
  5363  037D  0A4D               	incf	can_send@n,w
  5364  037E  2B80               	goto	u2404
  5365  037F                     u2405:	
  5366  037F  35C4               	lslf	??_can_send,f
  5367  0380                     u2404:	
  5368  0380  0B89               	decfsz	9,f
  5369  0381  2B7F               	goto	u2405
  5370  0382  0844               	movf	??_can_send,w
  5371  0383  3E80               	addlw	128
  5372  0384  00C5               	movwf	??_can_send+1
  5373  0385  0845               	movf	??_can_send+1,w
  5374  0386  0021               	movlb	1	; select bank1
  5375  0387  00B4               	movwf	_buf^(0+128)
  5376                           
  5377                           ;mcp2515.c: 256: bytes_written = SPI_exchange(buf, 1);
  5378  0388  01F8               	clrf	SPI_exchange@len
  5379  0389  0AF8               	incf	SPI_exchange@len,f
  5380  038A  30B4               	movlw	(low (_buf| 0))& (0+255)
  5381  038B  318B  2360  3182   	fcall	_SPI_exchange
  5382  038E  0020               	movlb	0	; select bank0
  5383  038F  00C4               	movwf	??_can_send
  5384  0390  0844               	movf	??_can_send,w
  5385  0391  00C9               	movwf	can_send@bytes_written
  5386                           
  5387                           ;mcp2515.c: 257: if (bytes_written == 1) {
  5388  0392  0349               	decf	can_send@bytes_written,w
  5389  0393  1D03               	btfss	3,2
  5390  0394  0008               	return
  5391                           
  5392                           ;mcp2515.c: 258: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5393  0395  086B               	movf	_mode,w
  5394  0396  1903               	btfsc	3,2
  5395  0397  0008               	return
  5396  0398  3007               	movlw	low (STR_36| (0+32768))
  5397  0399  00A2               	movwf	printf@f
  5398  039A  3093               	movlw	high (STR_36| (0+32768))
  5399  039B  00A3               	movwf	printf@f+1
  5400  039C  084B               	movf	can_send@data_buf,w
  5401  039D  00A4               	movwf	low ((?_printf| 0+2))
  5402  039E  3000               	movlw	0
  5403  039F  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5404  03A0  3185  25A5         	fcall	_printf
  5405                           
  5406                           ;mcp2515.c: 259: return 1;
  5407                           ;	Return value of _can_send is never used
  5408  03A2  0008               	return
  5409  03A3                     __end_of_can_send:	
  5410                           ;mcp2515.c: 260: }
  5411                           ;mcp2515.c: 261: }
  5412                           ;mcp2515.c: 263: return 0;
  5413                           ;	Return value of _can_send is never used
  5414                           
  5415                           
  5416                           	psect	text7
  5417  0B38                     __ptext7:	
  5418 ;; *************** function _can_logging_mode *****************
  5419 ;; Defined at:
  5420 ;;		line 30 in file "mcp2515.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  debug           1    wreg     unsigned char 
  5423 ;;  verbose         1    0[COMMON] unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  debug           1    2[COMMON] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5435 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;Total ram usage:        3 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _can_logging_mode
  5450  0B38                     _can_logging_mode:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _can_logging_mode: [wreg]
  5454                           ;can_logging_mode@debug stored from wreg
  5455  0B38  00F2               	movwf	can_logging_mode@debug
  5456                           
  5457                           ;mcp2515.c: 31: mode.debug = debug;
  5458  0B39  0872               	movf	can_logging_mode@debug,w
  5459  0B3A  00F1               	movwf	??_can_logging_mode
  5460  0B3B  0871               	movf	??_can_logging_mode,w
  5461  0B3C  0020               	movlb	0	; select bank0
  5462  0B3D  00EB               	movwf	_mode
  5463                           
  5464                           ;mcp2515.c: 32: mode.verbose = verbose;
  5465  0B3E  0870               	movf	can_logging_mode@verbose,w
  5466  0B3F  00F1               	movwf	??_can_logging_mode
  5467  0B40  0871               	movf	??_can_logging_mode,w
  5468  0B41  00EC               	movwf	_mode+1
  5469  0B42  0008               	return
  5470  0B43                     __end_of_can_logging_mode:	
  5471                           
  5472                           	psect	text8
  5473  0E1B                     __ptext8:	
  5474 ;; *************** function _can_init *****************
  5475 ;; Defined at:
  5476 ;;		line 53 in file "mcp2515.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5479 ;;		 -> receive_handler(1), 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        3 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    4
  5498 ;; This function calls:
  5499 ;;		_SPI_exchange
  5500 ;;		_can_ope_mode
  5501 ;;		_can_set_sid
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _can_init
  5509  0E1B                     _can_init:	
  5510                           
  5511                           ;mcp2515.c: 54: _delay((unsigned long)((100)*(2000000/4000.0)));
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5515  0E1B  3041               	movlw	65
  5516  0E1C  0020               	movlb	0	; select bank0
  5517  0E1D  00C9               	movwf	??_can_init
  5518  0E1E  30EE               	movlw	238
  5519  0E1F                     u2627:	
  5520  0E1F  0B89               	decfsz	9,f
  5521  0E20  2E1F               	goto	u2627
  5522  0E21  0BC9               	decfsz	??_can_init,f
  5523  0E22  2E1F               	goto	u2627
  5524  0E23  0000               	nop
  5525                           
  5526                           ;mcp2515.c: 56: can_set_sid(0);
  5527  0E24  3000               	movlw	0
  5528  0E25  00F0               	movwf	can_set_sid@can_node
  5529  0E26  00F1               	movwf	can_set_sid@can_node+1
  5530  0E27  318B  23C0  318E   	fcall	_can_set_sid
  5531                           
  5532                           ;mcp2515.c: 57: handler = receive_handler;
  5533  0E2A  0020               	movlb	0	; select bank0
  5534  0E2B  0848               	movf	can_init@receive_handler+1,w
  5535  0E2C  0021               	movlb	1	; select bank1
  5536  0E2D  00B1               	movwf	(_handler+1)^(0+128)
  5537  0E2E  0020               	movlb	0	; select bank0
  5538  0E2F  0847               	movf	can_init@receive_handler,w
  5539  0E30  0021               	movlb	1	; select bank1
  5540  0E31  00B0               	movwf	_handler^(0+128)
  5541                           
  5542                           ;mcp2515.c: 60: buf[0] = 0b11000000u;
  5543  0E32  30C0               	movlw	192
  5544  0E33  0020               	movlb	0	; select bank0
  5545  0E34  00C9               	movwf	??_can_init
  5546  0E35  0849               	movf	??_can_init,w
  5547  0E36  0021               	movlb	1	; select bank1
  5548  0E37  00B4               	movwf	_buf^(0+128)
  5549                           
  5550                           ;mcp2515.c: 61: SPI_exchange(buf, 1);
  5551  0E38  01F8               	clrf	SPI_exchange@len
  5552  0E39  0AF8               	incf	SPI_exchange@len,f
  5553  0E3A  30B4               	movlw	(low (_buf| 0))& (0+255)
  5554  0E3B  318B  2360  318E   	fcall	_SPI_exchange
  5555                           
  5556                           ;mcp2515.c: 63: _delay((unsigned long)((2+48)*(2000000/4000000.0)));
  5557  0E3E  3008               	movlw	8
  5558  0E3F                     u2637:	
  5559  0E3F  0B89               	decfsz	9,f
  5560  0E40  2E3F               	goto	u2637
  5561  0E41  0000               	nop
  5562                           
  5563                           ;mcp2515.c: 65: buf[0] = 0b00000010u;
  5564  0E42  3002               	movlw	2
  5565  0E43  0020               	movlb	0	; select bank0
  5566  0E44  00C9               	movwf	??_can_init
  5567  0E45  0849               	movf	??_can_init,w
  5568  0E46  0021               	movlb	1	; select bank1
  5569  0E47  00B4               	movwf	_buf^(0+128)
  5570                           
  5571                           ;mcp2515.c: 66: buf[1] = 0x28u;
  5572  0E48  3028               	movlw	40
  5573  0E49  0020               	movlb	0	; select bank0
  5574  0E4A  00C9               	movwf	??_can_init
  5575  0E4B  0849               	movf	??_can_init,w
  5576  0E4C  0021               	movlb	1	; select bank1
  5577  0E4D  00B5               	movwf	(_buf^(0+128)+1)
  5578                           
  5579                           ;mcp2515.c: 67: buf[2] = 0b00000101u;
  5580  0E4E  3005               	movlw	5
  5581  0E4F  0020               	movlb	0	; select bank0
  5582  0E50  00C9               	movwf	??_can_init
  5583  0E51  0849               	movf	??_can_init,w
  5584  0E52  0021               	movlb	1	; select bank1
  5585  0E53  00B6               	movwf	(_buf^(0+128)+2)
  5586                           
  5587                           ;mcp2515.c: 68: buf[3] = 0b11110001u;
  5588  0E54  30F1               	movlw	241
  5589  0E55  0020               	movlb	0	; select bank0
  5590  0E56  00C9               	movwf	??_can_init
  5591  0E57  0849               	movf	??_can_init,w
  5592  0E58  0021               	movlb	1	; select bank1
  5593  0E59  00B7               	movwf	(_buf^(0+128)+3)
  5594                           
  5595                           ;mcp2515.c: 69: buf[4] = 0b01000001u;
  5596  0E5A  3041               	movlw	65
  5597  0E5B  0020               	movlb	0	; select bank0
  5598  0E5C  00C9               	movwf	??_can_init
  5599  0E5D  0849               	movf	??_can_init,w
  5600  0E5E  0021               	movlb	1	; select bank1
  5601  0E5F  00B8               	movwf	(_buf^(0+128)+4)
  5602                           
  5603                           ;mcp2515.c: 70: SPI_exchange(buf, 5);
  5604  0E60  3005               	movlw	5
  5605  0E61  0020               	movlb	0	; select bank0
  5606  0E62  00C9               	movwf	??_can_init
  5607  0E63  0849               	movf	??_can_init,w
  5608  0E64  00F8               	movwf	SPI_exchange@len
  5609  0E65  30B4               	movlw	(low (_buf| 0))& (0+255)
  5610  0E66  318B  2360  318E   	fcall	_SPI_exchange
  5611                           
  5612                           ;mcp2515.c: 72: buf[0] = 0b00000010u;
  5613  0E69  3002               	movlw	2
  5614  0E6A  0020               	movlb	0	; select bank0
  5615  0E6B  00C9               	movwf	??_can_init
  5616  0E6C  0849               	movf	??_can_init,w
  5617  0E6D  0021               	movlb	1	; select bank1
  5618  0E6E  00B4               	movwf	_buf^(0+128)
  5619                           
  5620                           ;mcp2515.c: 73: buf[1] = 0x60u;
  5621  0E6F  3060               	movlw	96
  5622  0E70  0020               	movlb	0	; select bank0
  5623  0E71  00C9               	movwf	??_can_init
  5624  0E72  0849               	movf	??_can_init,w
  5625  0E73  0021               	movlb	1	; select bank1
  5626  0E74  00B5               	movwf	(_buf^(0+128)+1)
  5627                           
  5628                           ;mcp2515.c: 74: buf[2] = 0b00100100u;
  5629  0E75  3024               	movlw	36
  5630  0E76  0020               	movlb	0	; select bank0
  5631  0E77  00C9               	movwf	??_can_init
  5632  0E78  0849               	movf	??_can_init,w
  5633  0E79  0021               	movlb	1	; select bank1
  5634  0E7A  00B6               	movwf	(_buf^(0+128)+2)
  5635                           
  5636                           ;mcp2515.c: 75: SPI_exchange(buf, 3);
  5637  0E7B  3003               	movlw	3
  5638  0E7C  0020               	movlb	0	; select bank0
  5639  0E7D  00C9               	movwf	??_can_init
  5640  0E7E  0849               	movf	??_can_init,w
  5641  0E7F  00F8               	movwf	SPI_exchange@len
  5642  0E80  30B4               	movlw	(low (_buf| 0))& (0+255)
  5643  0E81  318B  2360  318E   	fcall	_SPI_exchange
  5644                           
  5645                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  5646  0E84  3002               	movlw	2
  5647  0E85  0020               	movlb	0	; select bank0
  5648  0E86  00C9               	movwf	??_can_init
  5649  0E87  0849               	movf	??_can_init,w
  5650  0E88  0021               	movlb	1	; select bank1
  5651  0E89  00B4               	movwf	_buf^(0+128)
  5652                           
  5653                           ;mcp2515.c: 78: buf[1] = 0x70u;
  5654  0E8A  3070               	movlw	112
  5655  0E8B  0020               	movlb	0	; select bank0
  5656  0E8C  00C9               	movwf	??_can_init
  5657  0E8D  0849               	movf	??_can_init,w
  5658  0E8E  0021               	movlb	1	; select bank1
  5659  0E8F  00B5               	movwf	(_buf^(0+128)+1)
  5660                           
  5661                           ;mcp2515.c: 79: buf[2] = 0b00100000u;
  5662  0E90  3020               	movlw	32
  5663  0E91  0020               	movlb	0	; select bank0
  5664  0E92  00C9               	movwf	??_can_init
  5665  0E93  0849               	movf	??_can_init,w
  5666  0E94  0021               	movlb	1	; select bank1
  5667  0E95  00B6               	movwf	(_buf^(0+128)+2)
  5668                           
  5669                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  5670  0E96  3003               	movlw	3
  5671  0E97  0020               	movlb	0	; select bank0
  5672  0E98  00C9               	movwf	??_can_init
  5673  0E99  0849               	movf	??_can_init,w
  5674  0E9A  00F8               	movwf	SPI_exchange@len
  5675  0E9B  30B4               	movlw	(low (_buf| 0))& (0+255)
  5676  0E9C  318B  2360  318E   	fcall	_SPI_exchange
  5677                           
  5678                           ;mcp2515.c: 82: mode.debug = 0;
  5679  0E9F  0020               	movlb	0	; select bank0
  5680  0EA0  01EB               	clrf	_mode
  5681                           
  5682                           ;mcp2515.c: 83: mode.verbose = 0;
  5683  0EA1  01EC               	clrf	_mode+1
  5684                           
  5685                           ;mcp2515.c: 85: can_ope_mode(0b00000000u);
  5686  0EA2  3000               	movlw	0
  5687  0EA3  318D  25C4         	fcall	_can_ope_mode
  5688  0EA5  0008               	return
  5689  0EA6                     __end_of_can_init:	
  5690                           
  5691                           	psect	text9
  5692  0BC0                     __ptext9:	
  5693 ;; *************** function _can_set_sid *****************
  5694 ;; Defined at:
  5695 ;;		line 43 in file "mcp2515.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;  can_node        2    0[COMMON] unsigned int 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  sidl            1    6[COMMON] unsigned char 
  5700 ;;  sidh            1    5[COMMON] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      void 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        7 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_main
  5720 ;;		_can_init
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           
  5725                           ;psect for function _can_set_sid
  5726  0BC0                     _can_set_sid:	
  5727                           
  5728                           ;mcp2515.c: 44: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5729                           
  5730                           ;incstack = 0
  5731                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5732  0BC0  0871               	movf	can_set_sid@can_node+1,w
  5733  0BC1  00F3               	movwf	??_can_set_sid+1
  5734  0BC2  0870               	movf	can_set_sid@can_node,w
  5735  0BC3  00F2               	movwf	??_can_set_sid
  5736  0BC4  36F3               	lsrf	??_can_set_sid+1,f
  5737  0BC5  0CF2               	rrf	??_can_set_sid,f
  5738  0BC6  36F3               	lsrf	??_can_set_sid+1,f
  5739  0BC7  0CF2               	rrf	??_can_set_sid,f
  5740  0BC8  36F3               	lsrf	??_can_set_sid+1,f
  5741  0BC9  0CF2               	rrf	??_can_set_sid,f
  5742  0BCA  0872               	movf	??_can_set_sid,w
  5743  0BCB  00F4               	movwf	??_can_set_sid+2
  5744  0BCC  0874               	movf	??_can_set_sid+2,w
  5745  0BCD  00F5               	movwf	can_set_sid@sidh
  5746                           
  5747                           ;mcp2515.c: 45: uint8_t sidl = (can_node << 5) & 0x00e0;
  5748  0BCE  0870               	movf	can_set_sid@can_node,w
  5749  0BCF  00F2               	movwf	??_can_set_sid
  5750  0BD0  3004               	movlw	4
  5751  0BD1                     u1935:	
  5752  0BD1  35F2               	lslf	??_can_set_sid,f
  5753  0BD2  3EFF               	addlw	-1
  5754  0BD3  1D03               	skipz
  5755  0BD4  2BD1               	goto	u1935
  5756  0BD5  3572               	lslf	??_can_set_sid,w
  5757  0BD6  39E0               	andlw	224
  5758  0BD7  00F3               	movwf	??_can_set_sid+1
  5759  0BD8  0873               	movf	??_can_set_sid+1,w
  5760  0BD9  00F6               	movwf	can_set_sid@sidl
  5761                           
  5762                           ;mcp2515.c: 46: sid.sidh = sidh;
  5763  0BDA  0875               	movf	can_set_sid@sidh,w
  5764  0BDB  00F2               	movwf	??_can_set_sid
  5765  0BDC  0872               	movf	??_can_set_sid,w
  5766  0BDD  0021               	movlb	1	; select bank1
  5767  0BDE  00B2               	movwf	_sid^(0+128)
  5768                           
  5769                           ;mcp2515.c: 47: sid.sidl = sidl;
  5770  0BDF  0876               	movf	can_set_sid@sidl,w
  5771  0BE0  00F2               	movwf	??_can_set_sid
  5772  0BE1  0872               	movf	??_can_set_sid,w
  5773  0BE2  00B3               	movwf	(_sid^(0+128)+1)
  5774  0BE3  0008               	return
  5775  0BE4                     __end_of_can_set_sid:	
  5776                           
  5777                           	psect	text10
  5778  0146                     __ptext10:	
  5779 ;; *************** function _can_dump_registers *****************
  5780 ;; Defined at:
  5781 ;;		line 356 in file "mcp2515.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;Total ram usage:        2 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    4
  5802 ;; This function calls:
  5803 ;;		_printf
  5804 ;;		_read_register
  5805 ;; This function is called by:
  5806 ;;		_main
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _can_dump_registers
  5812  0146                     _can_dump_registers:	
  5813                           
  5814                           ;mcp2515.c: 357: printf("---\n");
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5818  0146  30A6               	movlw	low (STR_39| (0+32768))
  5819  0147  0020               	movlb	0	; select bank0
  5820  0148  00A2               	movwf	printf@f
  5821  0149  3094               	movlw	high (STR_39| (0+32768))
  5822  014A  00A3               	movwf	printf@f+1
  5823  014B  3185  25A5  3181   	fcall	_printf
  5824                           
  5825                           ;mcp2515.c: 358: printf("SIDH: %02x\n", sid.sidh);
  5826  014E  3040               	movlw	low ((STR_26+5)| (0+32768))
  5827  014F  0020               	movlb	0	; select bank0
  5828  0150  00A2               	movwf	printf@f
  5829  0151  3093               	movlw	high ((STR_26+5)| (0+32768))
  5830  0152  00A3               	movwf	printf@f+1
  5831  0153  0021               	movlb	1	; select bank1
  5832  0154  0832               	movf	_sid^(0+128),w
  5833  0155  0020               	movlb	0	; select bank0
  5834  0156  00C3               	movwf	??_can_dump_registers
  5835  0157  01C4               	clrf	??_can_dump_registers+1
  5836  0158  0843               	movf	??_can_dump_registers,w
  5837  0159  00A4               	movwf	?_printf+2
  5838  015A  0844               	movf	??_can_dump_registers+1,w
  5839  015B  00A5               	movwf	?_printf+3
  5840  015C  3185  25A5  3181   	fcall	_printf
  5841                           
  5842                           ;mcp2515.c: 359: printf("SIDL: %02x\n", sid.sidl);
  5843  015F  3062               	movlw	low ((STR_27+5)| (0+32768))
  5844  0160  0020               	movlb	0	; select bank0
  5845  0161  00A2               	movwf	printf@f
  5846  0162  3093               	movlw	high ((STR_27+5)| (0+32768))
  5847  0163  00A3               	movwf	printf@f+1
  5848  0164  0021               	movlb	1	; select bank1
  5849  0165  0833               	movf	(_sid^(0+128)+1),w
  5850  0166  0020               	movlb	0	; select bank0
  5851  0167  00C3               	movwf	??_can_dump_registers
  5852  0168  01C4               	clrf	??_can_dump_registers+1
  5853  0169  0843               	movf	??_can_dump_registers,w
  5854  016A  00A4               	movwf	?_printf+2
  5855  016B  0844               	movf	??_can_dump_registers+1,w
  5856  016C  00A5               	movwf	?_printf+3
  5857  016D  3185  25A5  3181   	fcall	_printf
  5858                           
  5859                           ;mcp2515.c: 360: printf("\n");
  5860  0170  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5861  0171  0020               	movlb	0	; select bank0
  5862  0172  00A2               	movwf	printf@f
  5863  0173  3094               	movlw	high ((STR_39+3)| (0+32768))
  5864  0174  00A3               	movwf	printf@f+1
  5865  0175  3185  25A5  3181   	fcall	_printf
  5866                           
  5867                           ;mcp2515.c: 362: printf("CNF1: %02x\n", read_register(0x2au));
  5868  0178  3050               	movlw	low (STR_47| (0+32768))
  5869  0179  0020               	movlb	0	; select bank0
  5870  017A  00A2               	movwf	printf@f
  5871  017B  3094               	movlw	high (STR_47| (0+32768))
  5872  017C  00A3               	movwf	printf@f+1
  5873  017D  302A               	movlw	42
  5874  017E  318B  238C  3181   	fcall	_read_register
  5875  0181  0020               	movlb	0	; select bank0
  5876  0182  00C3               	movwf	??_can_dump_registers
  5877  0183  01C4               	clrf	??_can_dump_registers+1
  5878  0184  0843               	movf	??_can_dump_registers,w
  5879  0185  00A4               	movwf	?_printf+2
  5880  0186  0844               	movf	??_can_dump_registers+1,w
  5881  0187  00A5               	movwf	?_printf+3
  5882  0188  3185  25A5  3181   	fcall	_printf
  5883                           
  5884                           ;mcp2515.c: 363: printf("CNF2: %02x\n", read_register(0x29u));
  5885  018B  305C               	movlw	low (STR_48| (0+32768))
  5886  018C  0020               	movlb	0	; select bank0
  5887  018D  00A2               	movwf	printf@f
  5888  018E  3094               	movlw	high (STR_48| (0+32768))
  5889  018F  00A3               	movwf	printf@f+1
  5890  0190  3029               	movlw	41
  5891  0191  318B  238C  3181   	fcall	_read_register
  5892  0194  0020               	movlb	0	; select bank0
  5893  0195  00C3               	movwf	??_can_dump_registers
  5894  0196  01C4               	clrf	??_can_dump_registers+1
  5895  0197  0843               	movf	??_can_dump_registers,w
  5896  0198  00A4               	movwf	?_printf+2
  5897  0199  0844               	movf	??_can_dump_registers+1,w
  5898  019A  00A5               	movwf	?_printf+3
  5899  019B  3185  25A5  3181   	fcall	_printf
  5900                           
  5901                           ;mcp2515.c: 364: printf("CNF3: %02x\n", read_register(0x28u));
  5902  019E  3068               	movlw	low (STR_49| (0+32768))
  5903  019F  0020               	movlb	0	; select bank0
  5904  01A0  00A2               	movwf	printf@f
  5905  01A1  3094               	movlw	high (STR_49| (0+32768))
  5906  01A2  00A3               	movwf	printf@f+1
  5907  01A3  3028               	movlw	40
  5908  01A4  318B  238C  3181   	fcall	_read_register
  5909  01A7  0020               	movlb	0	; select bank0
  5910  01A8  00C3               	movwf	??_can_dump_registers
  5911  01A9  01C4               	clrf	??_can_dump_registers+1
  5912  01AA  0843               	movf	??_can_dump_registers,w
  5913  01AB  00A4               	movwf	?_printf+2
  5914  01AC  0844               	movf	??_can_dump_registers+1,w
  5915  01AD  00A5               	movwf	?_printf+3
  5916  01AE  3185  25A5  3181   	fcall	_printf
  5917                           
  5918                           ;mcp2515.c: 365: printf("\n");
  5919  01B1  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5920  01B2  0020               	movlb	0	; select bank0
  5921  01B3  00A2               	movwf	printf@f
  5922  01B4  3094               	movlw	high ((STR_39+3)| (0+32768))
  5923  01B5  00A3               	movwf	printf@f+1
  5924  01B6  3185  25A5  3181   	fcall	_printf
  5925                           
  5926                           ;mcp2515.c: 367: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  5927  01B9  309F               	movlw	low (STR_51| (0+32768))
  5928  01BA  0020               	movlb	0	; select bank0
  5929  01BB  00A2               	movwf	printf@f
  5930  01BC  3093               	movlw	high (STR_51| (0+32768))
  5931  01BD  00A3               	movwf	printf@f+1
  5932  01BE  3030               	movlw	48
  5933  01BF  318B  238C  3181   	fcall	_read_register
  5934  01C2  0020               	movlb	0	; select bank0
  5935  01C3  00C3               	movwf	??_can_dump_registers
  5936  01C4  01C4               	clrf	??_can_dump_registers+1
  5937  01C5  0843               	movf	??_can_dump_registers,w
  5938  01C6  00A4               	movwf	?_printf+2
  5939  01C7  0844               	movf	??_can_dump_registers+1,w
  5940  01C8  00A5               	movwf	?_printf+3
  5941  01C9  3185  25A5  3181   	fcall	_printf
  5942                           
  5943                           ;mcp2515.c: 368: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  5944  01CC  30BF               	movlw	low (STR_52| (0+32768))
  5945  01CD  0020               	movlb	0	; select bank0
  5946  01CE  00A2               	movwf	printf@f
  5947  01CF  3093               	movlw	high (STR_52| (0+32768))
  5948  01D0  00A3               	movwf	printf@f+1
  5949  01D1  3040               	movlw	64
  5950  01D2  318B  238C  3181   	fcall	_read_register
  5951  01D5  0020               	movlb	0	; select bank0
  5952  01D6  00C3               	movwf	??_can_dump_registers
  5953  01D7  01C4               	clrf	??_can_dump_registers+1
  5954  01D8  0843               	movf	??_can_dump_registers,w
  5955  01D9  00A4               	movwf	?_printf+2
  5956  01DA  0844               	movf	??_can_dump_registers+1,w
  5957  01DB  00A5               	movwf	?_printf+3
  5958  01DC  3185  25A5  3181   	fcall	_printf
  5959                           
  5960                           ;mcp2515.c: 369: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  5961  01DF  30CF               	movlw	low (STR_53| (0+32768))
  5962  01E0  0020               	movlb	0	; select bank0
  5963  01E1  00A2               	movwf	printf@f
  5964  01E2  3093               	movlw	high (STR_53| (0+32768))
  5965  01E3  00A3               	movwf	printf@f+1
  5966  01E4  3050               	movlw	80
  5967  01E5  318B  238C  3181   	fcall	_read_register
  5968  01E8  0020               	movlb	0	; select bank0
  5969  01E9  00C3               	movwf	??_can_dump_registers
  5970  01EA  01C4               	clrf	??_can_dump_registers+1
  5971  01EB  0843               	movf	??_can_dump_registers,w
  5972  01EC  00A4               	movwf	?_printf+2
  5973  01ED  0844               	movf	??_can_dump_registers+1,w
  5974  01EE  00A5               	movwf	?_printf+3
  5975  01EF  3185  25A5  3181   	fcall	_printf
  5976                           
  5977                           ;mcp2515.c: 370: printf("\n");
  5978  01F2  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5979  01F3  0020               	movlb	0	; select bank0
  5980  01F4  00A2               	movwf	printf@f
  5981  01F5  3094               	movlw	high ((STR_39+3)| (0+32768))
  5982  01F6  00A3               	movwf	printf@f+1
  5983  01F7  3185  25A5  3181   	fcall	_printf
  5984                           
  5985                           ;mcp2515.c: 372: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  5986  01FA  308F               	movlw	low (STR_55| (0+32768))
  5987  01FB  0020               	movlb	0	; select bank0
  5988  01FC  00A2               	movwf	printf@f
  5989  01FD  3093               	movlw	high (STR_55| (0+32768))
  5990  01FE  00A3               	movwf	printf@f+1
  5991  01FF  3060               	movlw	96
  5992  0200  318B  238C  3181   	fcall	_read_register
  5993  0203  0020               	movlb	0	; select bank0
  5994  0204  00C3               	movwf	??_can_dump_registers
  5995  0205  01C4               	clrf	??_can_dump_registers+1
  5996  0206  0843               	movf	??_can_dump_registers,w
  5997  0207  00A4               	movwf	?_printf+2
  5998  0208  0844               	movf	??_can_dump_registers+1,w
  5999  0209  00A5               	movwf	?_printf+3
  6000  020A  3185  25A5  3181   	fcall	_printf
  6001                           
  6002                           ;mcp2515.c: 373: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6003  020D  30AF               	movlw	low (STR_56| (0+32768))
  6004  020E  0020               	movlb	0	; select bank0
  6005  020F  00A2               	movwf	printf@f
  6006  0210  3093               	movlw	high (STR_56| (0+32768))
  6007  0211  00A3               	movwf	printf@f+1
  6008  0212  3070               	movlw	112
  6009  0213  318B  238C  3181   	fcall	_read_register
  6010  0216  0020               	movlb	0	; select bank0
  6011  0217  00C3               	movwf	??_can_dump_registers
  6012  0218  01C4               	clrf	??_can_dump_registers+1
  6013  0219  0843               	movf	??_can_dump_registers,w
  6014  021A  00A4               	movwf	?_printf+2
  6015  021B  0844               	movf	??_can_dump_registers+1,w
  6016  021C  00A5               	movwf	?_printf+3
  6017  021D  3185  25A5  3181   	fcall	_printf
  6018                           
  6019                           ;mcp2515.c: 374: printf("\n");
  6020  0220  30A9               	movlw	low ((STR_39+3)| (0+32768))
  6021  0221  0020               	movlb	0	; select bank0
  6022  0222  00A2               	movwf	printf@f
  6023  0223  3094               	movlw	high ((STR_39+3)| (0+32768))
  6024  0224  00A3               	movwf	printf@f+1
  6025  0225  3185  25A5  3181   	fcall	_printf
  6026                           
  6027                           ;mcp2515.c: 376: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6028  0228  30EE               	movlw	low (STR_58| (0+32768))
  6029  0229  0020               	movlb	0	; select bank0
  6030  022A  00A2               	movwf	printf@f
  6031  022B  3093               	movlw	high (STR_58| (0+32768))
  6032  022C  00A3               	movwf	printf@f+1
  6033  022D  300F               	movlw	15
  6034  022E  318B  238C  3181   	fcall	_read_register
  6035  0231  0020               	movlb	0	; select bank0
  6036  0232  00C3               	movwf	??_can_dump_registers
  6037  0233  01C4               	clrf	??_can_dump_registers+1
  6038  0234  0843               	movf	??_can_dump_registers,w
  6039  0235  00A4               	movwf	?_printf+2
  6040  0236  0844               	movf	??_can_dump_registers+1,w
  6041  0237  00A5               	movwf	?_printf+3
  6042  0238  3185  25A5  3181   	fcall	_printf
  6043                           
  6044                           ;mcp2515.c: 377: printf("CANSTAT: %02x\n", read_register(0x0e));
  6045  023B  30FD               	movlw	low (STR_23| (0+32768))
  6046  023C  0020               	movlb	0	; select bank0
  6047  023D  00A2               	movwf	printf@f
  6048  023E  3093               	movlw	high (STR_23| (0+32768))
  6049  023F  00A3               	movwf	printf@f+1
  6050  0240  300E               	movlw	14
  6051  0241  318B  238C  3181   	fcall	_read_register
  6052  0244  0020               	movlb	0	; select bank0
  6053  0245  00C3               	movwf	??_can_dump_registers
  6054  0246  01C4               	clrf	??_can_dump_registers+1
  6055  0247  0843               	movf	??_can_dump_registers,w
  6056  0248  00A4               	movwf	?_printf+2
  6057  0249  0844               	movf	??_can_dump_registers+1,w
  6058  024A  00A5               	movwf	?_printf+3
  6059  024B  3185  25A5  3181   	fcall	_printf
  6060                           
  6061                           ;mcp2515.c: 378: printf("---\n");
  6062  024E  30A6               	movlw	low (STR_39| (0+32768))
  6063  024F  0020               	movlb	0	; select bank0
  6064  0250  00A2               	movwf	printf@f
  6065  0251  3094               	movlw	high (STR_39| (0+32768))
  6066  0252  00A3               	movwf	printf@f+1
  6067  0253  3185  25A5         	fcall	_printf
  6068  0255  0008               	return
  6069  0256                     __end_of_can_dump_registers:	
  6070                           
  6071                           	psect	text11
  6072  0B8C                     __ptext11:	
  6073 ;; *************** function _read_register *****************
  6074 ;; Defined at:
  6075 ;;		line 326 in file "mcp2515.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  addr            1    wreg     unsigned char 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  addr            1    1[BANK0 ] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      unsigned char 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;Total ram usage:        2 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    3
  6096 ;; This function calls:
  6097 ;;		_SPI_exchange
  6098 ;; This function is called by:
  6099 ;;		_can_dump_registers
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function _read_register
  6105  0B8C                     _read_register:	
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6109                           ;read_register@addr stored from wreg
  6110  0B8C  0020               	movlb	0	; select bank0
  6111  0B8D  00A1               	movwf	read_register@addr
  6112                           
  6113                           ;mcp2515.c: 327: buf[0] = 0b00000011u;
  6114  0B8E  3003               	movlw	3
  6115  0B8F  00A0               	movwf	??_read_register
  6116  0B90  0820               	movf	??_read_register,w
  6117  0B91  0021               	movlb	1	; select bank1
  6118  0B92  00B4               	movwf	_buf^(0+128)
  6119                           
  6120                           ;mcp2515.c: 328: buf[1] = addr;
  6121  0B93  0020               	movlb	0	; select bank0
  6122  0B94  0821               	movf	read_register@addr,w
  6123  0B95  00A0               	movwf	??_read_register
  6124  0B96  0820               	movf	??_read_register,w
  6125  0B97  0021               	movlb	1	; select bank1
  6126  0B98  00B5               	movwf	(_buf^(0+128)+1)
  6127                           
  6128                           ;mcp2515.c: 329: buf[2] = 0x00;
  6129  0B99  01B6               	clrf	(_buf^(0+128)+2)
  6130                           
  6131                           ;mcp2515.c: 330: SPI_exchange(buf, 3);
  6132  0B9A  3003               	movlw	3
  6133  0B9B  0020               	movlb	0	; select bank0
  6134  0B9C  00A0               	movwf	??_read_register
  6135  0B9D  0820               	movf	??_read_register,w
  6136  0B9E  00F8               	movwf	SPI_exchange@len
  6137  0B9F  30B4               	movlw	(low (_buf| 0))& (0+255)
  6138  0BA0  318B  2360         	fcall	_SPI_exchange
  6139                           
  6140                           ;mcp2515.c: 331: return buf[2];
  6141  0BA2  0021               	movlb	1	; select bank1
  6142  0BA3  0836               	movf	(_buf^(0+128)+2),w
  6143  0BA4  0008               	return
  6144  0BA5                     __end_of_read_register:	
  6145                           
  6146                           	psect	text12
  6147  007A                     __ptext12:	
  6148 ;; *************** function _can_dump_masks_and_filters *****************
  6149 ;; Defined at:
  6150 ;;		line 334 in file "mcp2515.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  m               2   47[BANK0 ] unsigned int 
  6155 ;;  i               1   49[BANK0 ] unsigned char 
  6156 ;;  l               1   46[BANK0 ] unsigned char 
  6157 ;;  h               1   45[BANK0 ] unsigned char 
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  1    wreg      void 
  6160 ;; Registers used:
  6161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;Total ram usage:       15 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; Hardware stack levels required when called:    3
  6174 ;; This function calls:
  6175 ;;		_printf
  6176 ;; This function is called by:
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           
  6182                           ;psect for function _can_dump_masks_and_filters
  6183  007A                     _can_dump_masks_and_filters:	
  6184                           
  6185                           ;mcp2515.c: 335: uint8_t i, h, l;
  6186                           ;mcp2515.c: 336: uint16_t m;
  6187                           ;mcp2515.c: 337: printf("---\n");
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6191  007A  30A6               	movlw	low (STR_39| (0+32768))
  6192  007B  0020               	movlb	0	; select bank0
  6193  007C  00A2               	movwf	printf@f
  6194  007D  3094               	movlw	high (STR_39| (0+32768))
  6195  007E  00A3               	movwf	printf@f+1
  6196  007F  3185  25A5  3180   	fcall	_printf
  6197                           
  6198                           ;mcp2515.c: 338: for(i=0; i<2; i++) {
  6199  0082  0020               	movlb	0	; select bank0
  6200  0083  01D1               	clrf	can_dump_masks_and_filters@i
  6201  0084  3002               	movlw	2
  6202  0085  0251               	subwf	can_dump_masks_and_filters@i,w
  6203  0086  1803               	btfsc	3,0
  6204  0087  28E1               	goto	l2589
  6205  0088                     l2577:	
  6206                           
  6207                           ;mcp2515.c: 339: m = save_rxmn[i];
  6208  0088  3551               	lslf	can_dump_masks_and_filters@i,w
  6209  0089  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6210  008A  0086               	movwf	6
  6211  008B  0187               	clrf	7
  6212  008C  3F40               	moviw [0]fsr1
  6213  008D  00CF               	movwf	can_dump_masks_and_filters@m
  6214  008E  3F41               	moviw [1]fsr1
  6215  008F  00D0               	movwf	can_dump_masks_and_filters@m+1
  6216                           
  6217                           ;mcp2515.c: 340: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6218  0090  0850               	movf	can_dump_masks_and_filters@m+1,w
  6219  0091  00C4               	movwf	??_can_dump_masks_and_filters+1
  6220  0092  084F               	movf	can_dump_masks_and_filters@m,w
  6221  0093  00C3               	movwf	??_can_dump_masks_and_filters
  6222  0094  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6223  0095  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6224  0096  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6225  0097  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6226  0098  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6227  0099  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6228  009A  0843               	movf	??_can_dump_masks_and_filters,w
  6229  009B  00C5               	movwf	??_can_dump_masks_and_filters+2
  6230  009C  0845               	movf	??_can_dump_masks_and_filters+2,w
  6231  009D  00CD               	movwf	can_dump_masks_and_filters@h
  6232                           
  6233                           ;mcp2515.c: 341: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6234  009E  084F               	movf	can_dump_masks_and_filters@m,w
  6235  009F  3907               	andlw	7
  6236  00A0  00C3               	movwf	??_can_dump_masks_and_filters
  6237  00A1  3004               	movlw	4
  6238  00A2                     u2245:	
  6239  00A2  35C3               	lslf	??_can_dump_masks_and_filters,f
  6240  00A3  3EFF               	addlw	-1
  6241  00A4  1D03               	skipz
  6242  00A5  28A2               	goto	u2245
  6243  00A6  3543               	lslf	??_can_dump_masks_and_filters,w
  6244  00A7  00C4               	movwf	??_can_dump_masks_and_filters+1
  6245  00A8  0844               	movf	??_can_dump_masks_and_filters+1,w
  6246  00A9  00CE               	movwf	can_dump_masks_and_filters@l
  6247                           
  6248                           ;mcp2515.c: 342: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6249  00AA  3045               	movlw	low (STR_40| (0+32768))
  6250  00AB  00A2               	movwf	printf@f
  6251  00AC  3091               	movlw	high (STR_40| (0+32768))
  6252  00AD  00A3               	movwf	printf@f+1
  6253  00AE  0851               	movf	can_dump_masks_and_filters@i,w
  6254  00AF  00C3               	movwf	??_can_dump_masks_and_filters
  6255  00B0  01C4               	clrf	??_can_dump_masks_and_filters+1
  6256  00B1  0843               	movf	??_can_dump_masks_and_filters,w
  6257  00B2  00A4               	movwf	?_printf+2
  6258  00B3  0844               	movf	??_can_dump_masks_and_filters+1,w
  6259  00B4  00A5               	movwf	?_printf+3
  6260  00B5  0851               	movf	can_dump_masks_and_filters@i,w
  6261  00B6  00C5               	movwf	??_can_dump_masks_and_filters+2
  6262  00B7  01C6               	clrf	??_can_dump_masks_and_filters+3
  6263  00B8  0845               	movf	??_can_dump_masks_and_filters+2,w
  6264  00B9  00A6               	movwf	?_printf+4
  6265  00BA  0846               	movf	??_can_dump_masks_and_filters+3,w
  6266  00BB  00A7               	movwf	?_printf+5
  6267  00BC  0851               	movf	can_dump_masks_and_filters@i,w
  6268  00BD  00C7               	movwf	??_can_dump_masks_and_filters+4
  6269  00BE  01C8               	clrf	??_can_dump_masks_and_filters+5
  6270  00BF  0847               	movf	??_can_dump_masks_and_filters+4,w
  6271  00C0  00A8               	movwf	?_printf+6
  6272  00C1  0848               	movf	??_can_dump_masks_and_filters+5,w
  6273  00C2  00A9               	movwf	?_printf+7
  6274  00C3  0850               	movf	can_dump_masks_and_filters@m+1,w
  6275  00C4  00AB               	movwf	?_printf+9
  6276  00C5  084F               	movf	can_dump_masks_and_filters@m,w
  6277  00C6  00AA               	movwf	?_printf+8
  6278  00C7  084D               	movf	can_dump_masks_and_filters@h,w
  6279  00C8  00C9               	movwf	??_can_dump_masks_and_filters+6
  6280  00C9  01CA               	clrf	??_can_dump_masks_and_filters+7
  6281  00CA  0849               	movf	??_can_dump_masks_and_filters+6,w
  6282  00CB  00AC               	movwf	?_printf+10
  6283  00CC  084A               	movf	??_can_dump_masks_and_filters+7,w
  6284  00CD  00AD               	movwf	?_printf+11
  6285  00CE  084E               	movf	can_dump_masks_and_filters@l,w
  6286  00CF  00CB               	movwf	??_can_dump_masks_and_filters+8
  6287  00D0  01CC               	clrf	??_can_dump_masks_and_filters+9
  6288  00D1  084B               	movf	??_can_dump_masks_and_filters+8,w
  6289  00D2  00AE               	movwf	?_printf+12
  6290  00D3  084C               	movf	??_can_dump_masks_and_filters+9,w
  6291  00D4  00AF               	movwf	?_printf+13
  6292  00D5  3185  25A5  3180   	fcall	_printf
  6293  00D8  3001               	movlw	1
  6294  00D9  0020               	movlb	0	; select bank0
  6295  00DA  00C3               	movwf	??_can_dump_masks_and_filters
  6296  00DB  0843               	movf	??_can_dump_masks_and_filters,w
  6297  00DC  07D1               	addwf	can_dump_masks_and_filters@i,f
  6298  00DD  3002               	movlw	2
  6299  00DE  0251               	subwf	can_dump_masks_and_filters@i,w
  6300  00DF  1C03               	skipc
  6301  00E0  2888               	goto	l2577
  6302  00E1                     l2589:	
  6303                           
  6304                           ;mcp2515.c: 343: }
  6305                           ;mcp2515.c: 344: for(i=0; i<6; i++) {
  6306  00E1  01D1               	clrf	can_dump_masks_and_filters@i
  6307  00E2  3006               	movlw	6
  6308  00E3  0251               	subwf	can_dump_masks_and_filters@i,w
  6309  00E4  1803               	btfsc	3,0
  6310  00E5  293F               	goto	l2607
  6311  00E6                     l2595:	
  6312                           
  6313                           ;mcp2515.c: 345: m = save_rxfn[i];
  6314  00E6  3551               	lslf	can_dump_masks_and_filters@i,w
  6315  00E7  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6316  00E8  0086               	movwf	6
  6317  00E9  0187               	clrf	7
  6318  00EA  3F40               	moviw [0]fsr1
  6319  00EB  00CF               	movwf	can_dump_masks_and_filters@m
  6320  00EC  3F41               	moviw [1]fsr1
  6321  00ED  00D0               	movwf	can_dump_masks_and_filters@m+1
  6322                           
  6323                           ;mcp2515.c: 346: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6324  00EE  0850               	movf	can_dump_masks_and_filters@m+1,w
  6325  00EF  00C4               	movwf	??_can_dump_masks_and_filters+1
  6326  00F0  084F               	movf	can_dump_masks_and_filters@m,w
  6327  00F1  00C3               	movwf	??_can_dump_masks_and_filters
  6328  00F2  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6329  00F3  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6330  00F4  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6331  00F5  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6332  00F6  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6333  00F7  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6334  00F8  0843               	movf	??_can_dump_masks_and_filters,w
  6335  00F9  00C5               	movwf	??_can_dump_masks_and_filters+2
  6336  00FA  0845               	movf	??_can_dump_masks_and_filters+2,w
  6337  00FB  00CD               	movwf	can_dump_masks_and_filters@h
  6338                           
  6339                           ;mcp2515.c: 347: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6340  00FC  084F               	movf	can_dump_masks_and_filters@m,w
  6341  00FD  3907               	andlw	7
  6342  00FE  00C3               	movwf	??_can_dump_masks_and_filters
  6343  00FF  3004               	movlw	4
  6344  0100                     u2275:	
  6345  0100  35C3               	lslf	??_can_dump_masks_and_filters,f
  6346  0101  3EFF               	addlw	-1
  6347  0102  1D03               	skipz
  6348  0103  2900               	goto	u2275
  6349  0104  3543               	lslf	??_can_dump_masks_and_filters,w
  6350  0105  00C4               	movwf	??_can_dump_masks_and_filters+1
  6351  0106  0844               	movf	??_can_dump_masks_and_filters+1,w
  6352  0107  00CE               	movwf	can_dump_masks_and_filters@l
  6353                           
  6354                           ;mcp2515.c: 348: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6355  0108  3019               	movlw	low (STR_41| (0+32768))
  6356  0109  00A2               	movwf	printf@f
  6357  010A  3091               	movlw	high (STR_41| (0+32768))
  6358  010B  00A3               	movwf	printf@f+1
  6359  010C  0851               	movf	can_dump_masks_and_filters@i,w
  6360  010D  00C3               	movwf	??_can_dump_masks_and_filters
  6361  010E  01C4               	clrf	??_can_dump_masks_and_filters+1
  6362  010F  0843               	movf	??_can_dump_masks_and_filters,w
  6363  0110  00A4               	movwf	?_printf+2
  6364  0111  0844               	movf	??_can_dump_masks_and_filters+1,w
  6365  0112  00A5               	movwf	?_printf+3
  6366  0113  0851               	movf	can_dump_masks_and_filters@i,w
  6367  0114  00C5               	movwf	??_can_dump_masks_and_filters+2
  6368  0115  01C6               	clrf	??_can_dump_masks_and_filters+3
  6369  0116  0845               	movf	??_can_dump_masks_and_filters+2,w
  6370  0117  00A6               	movwf	?_printf+4
  6371  0118  0846               	movf	??_can_dump_masks_and_filters+3,w
  6372  0119  00A7               	movwf	?_printf+5
  6373  011A  0851               	movf	can_dump_masks_and_filters@i,w
  6374  011B  00C7               	movwf	??_can_dump_masks_and_filters+4
  6375  011C  01C8               	clrf	??_can_dump_masks_and_filters+5
  6376  011D  0847               	movf	??_can_dump_masks_and_filters+4,w
  6377  011E  00A8               	movwf	?_printf+6
  6378  011F  0848               	movf	??_can_dump_masks_and_filters+5,w
  6379  0120  00A9               	movwf	?_printf+7
  6380  0121  0850               	movf	can_dump_masks_and_filters@m+1,w
  6381  0122  00AB               	movwf	?_printf+9
  6382  0123  084F               	movf	can_dump_masks_and_filters@m,w
  6383  0124  00AA               	movwf	?_printf+8
  6384  0125  084D               	movf	can_dump_masks_and_filters@h,w
  6385  0126  00C9               	movwf	??_can_dump_masks_and_filters+6
  6386  0127  01CA               	clrf	??_can_dump_masks_and_filters+7
  6387  0128  0849               	movf	??_can_dump_masks_and_filters+6,w
  6388  0129  00AC               	movwf	?_printf+10
  6389  012A  084A               	movf	??_can_dump_masks_and_filters+7,w
  6390  012B  00AD               	movwf	?_printf+11
  6391  012C  084E               	movf	can_dump_masks_and_filters@l,w
  6392  012D  00CB               	movwf	??_can_dump_masks_and_filters+8
  6393  012E  01CC               	clrf	??_can_dump_masks_and_filters+9
  6394  012F  084B               	movf	??_can_dump_masks_and_filters+8,w
  6395  0130  00AE               	movwf	?_printf+12
  6396  0131  084C               	movf	??_can_dump_masks_and_filters+9,w
  6397  0132  00AF               	movwf	?_printf+13
  6398  0133  3185  25A5  3180   	fcall	_printf
  6399  0136  3001               	movlw	1
  6400  0137  0020               	movlb	0	; select bank0
  6401  0138  00C3               	movwf	??_can_dump_masks_and_filters
  6402  0139  0843               	movf	??_can_dump_masks_and_filters,w
  6403  013A  07D1               	addwf	can_dump_masks_and_filters@i,f
  6404  013B  3006               	movlw	6
  6405  013C  0251               	subwf	can_dump_masks_and_filters@i,w
  6406  013D  1C03               	skipc
  6407  013E  28E6               	goto	l2595
  6408  013F                     l2607:	
  6409                           
  6410                           ;mcp2515.c: 349: }
  6411                           ;mcp2515.c: 350: printf("---\n");
  6412  013F  30A6               	movlw	low (STR_39| (0+32768))
  6413  0140  00A2               	movwf	printf@f
  6414  0141  3094               	movlw	high (STR_39| (0+32768))
  6415  0142  00A3               	movwf	printf@f+1
  6416  0143  3185  25A5         	fcall	_printf
  6417  0145  0008               	return
  6418  0146                     __end_of_can_dump_masks_and_filters:	
  6419                           
  6420                           	psect	text13
  6421  0C64                     __ptext13:	
  6422 ;; *************** function _can_baudrate *****************
  6423 ;; Defined at:
  6424 ;;		line 297 in file "mcp2515.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  bpr             1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  bpr             1   41[BANK0 ] unsigned char 
  6429 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  6430 ;;  mask            1   42[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      unsigned char 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        5 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    4
  6447 ;; This function calls:
  6448 ;;		_SPI_exchange
  6449 ;;		_can_ope_mode
  6450 ;; This function is called by:
  6451 ;;		_main
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _can_baudrate
  6457  0C64                     _can_baudrate:	
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6461                           ;can_baudrate@bpr stored from wreg
  6462  0C64  0020               	movlb	0	; select bank0
  6463  0C65  00C9               	movwf	can_baudrate@bpr
  6464                           
  6465                           ;mcp2515.c: 298: can_ope_mode(0b10000000u);
  6466  0C66  3080               	movlw	128
  6467  0C67  318D  25C4  318C   	fcall	_can_ope_mode
  6468                           
  6469                           ;mcp2515.c: 301: uint8_t mask = 0b00111111;
  6470  0C6A  303F               	movlw	63
  6471  0C6B  0020               	movlb	0	; select bank0
  6472  0C6C  00C7               	movwf	??_can_baudrate
  6473  0C6D  0847               	movf	??_can_baudrate,w
  6474  0C6E  00CA               	movwf	can_baudrate@mask
  6475                           
  6476                           ;mcp2515.c: 302: buf[0] = 0b00000101u;
  6477  0C6F  3005               	movlw	5
  6478  0C70  00C7               	movwf	??_can_baudrate
  6479  0C71  0847               	movf	??_can_baudrate,w
  6480  0C72  0021               	movlb	1	; select bank1
  6481  0C73  00B4               	movwf	_buf^(0+128)
  6482                           
  6483                           ;mcp2515.c: 303: buf[1] = 0x2au;
  6484  0C74  302A               	movlw	42
  6485  0C75  0020               	movlb	0	; select bank0
  6486  0C76  00C7               	movwf	??_can_baudrate
  6487  0C77  0847               	movf	??_can_baudrate,w
  6488  0C78  0021               	movlb	1	; select bank1
  6489  0C79  00B5               	movwf	(_buf^(0+128)+1)
  6490                           
  6491                           ;mcp2515.c: 304: buf[2] = mask;
  6492  0C7A  0020               	movlb	0	; select bank0
  6493  0C7B  084A               	movf	can_baudrate@mask,w
  6494  0C7C  00C7               	movwf	??_can_baudrate
  6495  0C7D  0847               	movf	??_can_baudrate,w
  6496  0C7E  0021               	movlb	1	; select bank1
  6497  0C7F  00B6               	movwf	(_buf^(0+128)+2)
  6498                           
  6499                           ;mcp2515.c: 305: buf[3] = bpr;
  6500  0C80  0020               	movlb	0	; select bank0
  6501  0C81  0849               	movf	can_baudrate@bpr,w
  6502  0C82  00C7               	movwf	??_can_baudrate
  6503  0C83  0847               	movf	??_can_baudrate,w
  6504  0C84  0021               	movlb	1	; select bank1
  6505  0C85  00B7               	movwf	(_buf^(0+128)+3)
  6506                           
  6507                           ;mcp2515.c: 306: uint8_t bytes_written = SPI_exchange(buf, 4);
  6508  0C86  3004               	movlw	4
  6509  0C87  0020               	movlb	0	; select bank0
  6510  0C88  00C7               	movwf	??_can_baudrate
  6511  0C89  0847               	movf	??_can_baudrate,w
  6512  0C8A  00F8               	movwf	SPI_exchange@len
  6513  0C8B  30B4               	movlw	(low (_buf| 0))& (0+255)
  6514  0C8C  318B  2360  318C   	fcall	_SPI_exchange
  6515  0C8F  0020               	movlb	0	; select bank0
  6516  0C90  00C8               	movwf	??_can_baudrate+1
  6517  0C91  0848               	movf	??_can_baudrate+1,w
  6518  0C92  00CB               	movwf	can_baudrate@bytes_written
  6519                           
  6520                           ;mcp2515.c: 307: can_ope_mode(operation_mode);
  6521  0C93  086F               	movf	_operation_mode,w
  6522  0C94  318D  25C4         	fcall	_can_ope_mode
  6523                           
  6524                           ;mcp2515.c: 311: return 0;
  6525                           ;	Return value of _can_baudrate is never used
  6526                           
  6527                           ;mcp2515.c: 310: } else {
  6528                           
  6529                           ;mcp2515.c: 309: return 1;
  6530                           ;	Return value of _can_baudrate is never used
  6531  0C96  0008               	return
  6532  0C97                     __end_of_can_baudrate:	
  6533                           
  6534                           	psect	text14
  6535  0004                     __ptext14:	
  6536 ;; *************** function _can_abort *****************
  6537 ;; Defined at:
  6538 ;;		line 315 in file "mcp2515.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      unsigned char 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;Total ram usage:        2 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    4
  6559 ;; This function calls:
  6560 ;;		_abort_pending_transmissions
  6561 ;;		_can_ope_mode
  6562 ;; This function is called by:
  6563 ;;		_main
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _can_abort
  6569  0004                     _can_abort:	
  6570                           
  6571                           ;mcp2515.c: 316: can_ope_mode(0b10000000u);
  6572                           
  6573                           ;incstack = 0
  6574                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6575  0004  3080               	movlw	128
  6576  0005  318D  25C4  3180   	fcall	_can_ope_mode
  6577                           
  6578                           ;mcp2515.c: 317: uint8_t bytes_written = abort_pending_transmissions();
  6579  0008  318B  23E4  3180   	fcall	_abort_pending_transmissions
  6580  000B  0020               	movlb	0	; select bank0
  6581  000C  00C7               	movwf	??_can_abort
  6582  000D  0847               	movf	??_can_abort,w
  6583  000E  00C8               	movwf	can_abort@bytes_written
  6584                           
  6585                           ;mcp2515.c: 318: can_ope_mode(operation_mode);
  6586  000F  086F               	movf	_operation_mode,w
  6587  0010  318D  25C4         	fcall	_can_ope_mode
  6588                           
  6589                           ;mcp2515.c: 322: return 0;
  6590                           ;	Return value of _can_abort is never used
  6591                           
  6592                           ;mcp2515.c: 321: } else {
  6593                           
  6594                           ;mcp2515.c: 320: return 1;
  6595                           ;	Return value of _can_abort is never used
  6596  0012  0008               	return
  6597  0013                     __end_of_can_abort:	
  6598                           
  6599                           	psect	text15
  6600  0DC4                     __ptext15:	
  6601 ;; *************** function _can_ope_mode *****************
  6602 ;; Defined at:
  6603 ;;		line 91 in file "mcp2515.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  ope_mode        1    wreg     unsigned char 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  6608 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      unsigned char 
  6611 ;; Registers used:
  6612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;Total ram usage:        4 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    3
  6625 ;; This function calls:
  6626 ;;		_SPI_exchange
  6627 ;;		_printf
  6628 ;; This function is called by:
  6629 ;;		_main
  6630 ;;		_can_init
  6631 ;;		_can_set_mask
  6632 ;;		_can_baudrate
  6633 ;;		_can_abort
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _can_ope_mode
  6639  0DC4                     _can_ope_mode:	
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6643                           ;can_ope_mode@ope_mode stored from wreg
  6644  0DC4  0020               	movlb	0	; select bank0
  6645  0DC5  00C6               	movwf	can_ope_mode@ope_mode
  6646                           
  6647                           ;mcp2515.c: 92: buf[0] = 0b00000010u;
  6648  0DC6  3002               	movlw	2
  6649  0DC7  00C3               	movwf	??_can_ope_mode
  6650  0DC8  0843               	movf	??_can_ope_mode,w
  6651  0DC9  0021               	movlb	1	; select bank1
  6652  0DCA  00B4               	movwf	_buf^(0+128)
  6653                           
  6654                           ;mcp2515.c: 93: buf[1] = 0x0fu;
  6655  0DCB  300F               	movlw	15
  6656  0DCC  0020               	movlb	0	; select bank0
  6657  0DCD  00C3               	movwf	??_can_ope_mode
  6658  0DCE  0843               	movf	??_can_ope_mode,w
  6659  0DCF  0021               	movlb	1	; select bank1
  6660  0DD0  00B5               	movwf	(_buf^(0+128)+1)
  6661                           
  6662                           ;mcp2515.c: 94: buf[2] = ope_mode;
  6663  0DD1  0020               	movlb	0	; select bank0
  6664  0DD2  0846               	movf	can_ope_mode@ope_mode,w
  6665  0DD3  00C3               	movwf	??_can_ope_mode
  6666  0DD4  0843               	movf	??_can_ope_mode,w
  6667  0DD5  0021               	movlb	1	; select bank1
  6668  0DD6  00B6               	movwf	(_buf^(0+128)+2)
  6669                           
  6670                           ;mcp2515.c: 95: uint8_t bytes_written = SPI_exchange(buf, 3);
  6671  0DD7  3003               	movlw	3
  6672  0DD8  0020               	movlb	0	; select bank0
  6673  0DD9  00C3               	movwf	??_can_ope_mode
  6674  0DDA  0843               	movf	??_can_ope_mode,w
  6675  0DDB  00F8               	movwf	SPI_exchange@len
  6676  0DDC  30B4               	movlw	(low (_buf| 0))& (0+255)
  6677  0DDD  318B  2360  318D   	fcall	_SPI_exchange
  6678  0DE0  0020               	movlb	0	; select bank0
  6679  0DE1  00C4               	movwf	??_can_ope_mode+1
  6680  0DE2  0844               	movf	??_can_ope_mode+1,w
  6681  0DE3  00C5               	movwf	can_ope_mode@bytes_written
  6682                           
  6683                           ;mcp2515.c: 97: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  6684  0DE4  3080               	movlw	128
  6685  0DE5  0646               	xorwf	can_ope_mode@ope_mode,w
  6686  0DE6  1903               	btfsc	3,2
  6687  0DE7  2DEC               	goto	l2285
  6688  0DE8  0846               	movf	can_ope_mode@ope_mode,w
  6689  0DE9  00C3               	movwf	??_can_ope_mode
  6690  0DEA  0843               	movf	??_can_ope_mode,w
  6691  0DEB  00EF               	movwf	_operation_mode
  6692  0DEC                     l2285:	
  6693                           
  6694                           ;mcp2515.c: 99: if (bytes_written == 3) {
  6695  0DEC  3003               	movlw	3
  6696  0DED  0645               	xorwf	can_ope_mode@bytes_written,w
  6697  0DEE  1D03               	btfss	3,2
  6698  0DEF  0008               	return
  6699                           
  6700                           ;mcp2515.c: 100: buf[0] = 0b00000011u;
  6701  0DF0  3003               	movlw	3
  6702  0DF1  00C3               	movwf	??_can_ope_mode
  6703  0DF2  0843               	movf	??_can_ope_mode,w
  6704  0DF3  0021               	movlb	1	; select bank1
  6705  0DF4  00B4               	movwf	_buf^(0+128)
  6706                           
  6707                           ;mcp2515.c: 101: buf[1] = 0x0e;
  6708  0DF5  300E               	movlw	14
  6709  0DF6  0020               	movlb	0	; select bank0
  6710  0DF7  00C3               	movwf	??_can_ope_mode
  6711  0DF8  0843               	movf	??_can_ope_mode,w
  6712  0DF9  0021               	movlb	1	; select bank1
  6713  0DFA  00B5               	movwf	(_buf^(0+128)+1)
  6714                           
  6715                           ;mcp2515.c: 102: bytes_written = SPI_exchange(buf, 3);
  6716  0DFB  3003               	movlw	3
  6717  0DFC  0020               	movlb	0	; select bank0
  6718  0DFD  00C3               	movwf	??_can_ope_mode
  6719  0DFE  0843               	movf	??_can_ope_mode,w
  6720  0DFF  00F8               	movwf	SPI_exchange@len
  6721  0E00  30B4               	movlw	(low (_buf| 0))& (0+255)
  6722  0E01  318B  2360  318D   	fcall	_SPI_exchange
  6723  0E04  0020               	movlb	0	; select bank0
  6724  0E05  00C4               	movwf	??_can_ope_mode+1
  6725  0E06  0844               	movf	??_can_ope_mode+1,w
  6726  0E07  00C5               	movwf	can_ope_mode@bytes_written
  6727                           
  6728                           ;mcp2515.c: 103: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6729  0E08  086B               	movf	_mode,w
  6730  0E09  1903               	btfsc	3,2
  6731  0E0A  0008               	return
  6732  0E0B  30FD               	movlw	low (STR_23| (0+32768))
  6733  0E0C  00A2               	movwf	printf@f
  6734  0E0D  3093               	movlw	high (STR_23| (0+32768))
  6735  0E0E  00A3               	movwf	printf@f+1
  6736  0E0F  0021               	movlb	1	; select bank1
  6737  0E10  0836               	movf	(_buf^(0+128)+2),w
  6738  0E11  0020               	movlb	0	; select bank0
  6739  0E12  00C3               	movwf	??_can_ope_mode
  6740  0E13  01C4               	clrf	??_can_ope_mode+1
  6741  0E14  0843               	movf	??_can_ope_mode,w
  6742  0E15  00A4               	movwf	?_printf+2
  6743  0E16  0844               	movf	??_can_ope_mode+1,w
  6744  0E17  00A5               	movwf	?_printf+3
  6745  0E18  3185  25A5         	fcall	_printf
  6746                           
  6747                           ;mcp2515.c: 106: return 0;
  6748                           ;	Return value of _can_ope_mode is never used
  6749                           
  6750                           ;mcp2515.c: 105: } else {
  6751                           
  6752                           ;mcp2515.c: 104: return 1;
  6753                           ;	Return value of _can_ope_mode is never used
  6754  0E1A  0008               	return
  6755  0E1B                     __end_of_can_ope_mode:	
  6756                           
  6757                           	psect	text16
  6758  05A5                     __ptext16:	
  6759 ;; *************** function _printf *****************
  6760 ;; Defined at:
  6761 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6764 ;;		 -> STR_60(5), STR_59(15), STR_58(15), STR_57(2), 
  6765 ;;		 -> STR_56(16), STR_55(16), STR_54(2), STR_53(16), 
  6766 ;;		 -> STR_52(16), STR_51(16), STR_50(2), STR_49(12), 
  6767 ;;		 -> STR_48(12), STR_47(12), STR_46(2), STR_45(12), 
  6768 ;;		 -> STR_44(12), STR_43(5), STR_42(5), STR_41(44), 
  6769 ;;		 -> STR_40(44), STR_39(5), STR_38(13), STR_37(13), 
  6770 ;;		 -> STR_36(18), STR_35(17), STR_34(17), STR_33(20), 
  6771 ;;		 -> STR_32(14), STR_31(14), STR_30(14), STR_29(15), 
  6772 ;;		 -> STR_28(16), STR_27(17), STR_26(17), STR_25(23), 
  6773 ;;		 -> STR_24(21), STR_23(15), STR_22(22), STR_21(44), 
  6774 ;;		 -> STR_20(57), STR_19(26), STR_18(21), STR_17(29), 
  6775 ;;		 -> STR_16(38), STR_15(25), STR_14(42), STR_13(38), 
  6776 ;;		 -> STR_12(58), STR_11(54), STR_10(59), STR_9(51), 
  6777 ;;		 -> STR_7(36), STR_6(3), STR_5(4), STR_4(2), 
  6778 ;;		 -> STR_3(6), STR_2(6), STR_1(7), 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  idx             1   22[BANK0 ] unsigned char 
  6781 ;;  tmpval          4    0        struct .
  6782 ;;  width           2   32[BANK0 ] int 
  6783 ;;  val             2   29[BANK0 ] unsigned int 
  6784 ;;  len             2   26[BANK0 ] unsigned int 
  6785 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  6786 ;;		 -> STR_61(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6787 ;;		 -> txf_clear@n(1), STR_8(21), main@buf(16), 
  6788 ;;  c               1   34[BANK0 ] char 
  6789 ;;  flag            1   31[BANK0 ] unsigned char 
  6790 ;;  ap              1   28[BANK0 ] PTR void [1]
  6791 ;;		 -> ?_printf(2), 
  6792 ;;  prec            1   23[BANK0 ] char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  2    2[BANK0 ] int 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6802 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;Total ram usage:       33 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    2
  6809 ;; This function calls:
  6810 ;;		___lwdiv
  6811 ;;		___lwmod
  6812 ;;		___wmul
  6813 ;;		_isdigit
  6814 ;;		_putch
  6815 ;; This function is called by:
  6816 ;;		_receive_handler
  6817 ;;		_main
  6818 ;;		_can_ope_mode
  6819 ;;		_can_set_mask
  6820 ;;		_receive
  6821 ;;		_can_send
  6822 ;;		_can_status_check
  6823 ;;		_can_dump_masks_and_filters
  6824 ;;		_can_dump_registers
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function _printf
  6830  05A5                     _printf:	
  6831                           
  6832                           ;doprnt.c: 466: va_list ap;
  6833                           ;doprnt.c: 499: signed char c;
  6834                           ;doprnt.c: 501: int width;
  6835                           ;doprnt.c: 506: signed char prec;
  6836                           ;doprnt.c: 508: unsigned char flag;
  6837                           ;doprnt.c: 523: union {
  6838                           ;doprnt.c: 524: unsigned long vd;
  6839                           ;doprnt.c: 525: double integ;
  6840                           ;doprnt.c: 526: } tmpval;
  6841                           ;doprnt.c: 528: unsigned int val;
  6842                           ;doprnt.c: 529: unsigned len;
  6843                           ;doprnt.c: 530: const char * cp;
  6844                           ;doprnt.c: 533: *ap = __va_start();
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6848  05A5  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6849  05A6  0020               	movlb	0	; select bank0
  6850  05A7  00B0               	movwf	??_printf
  6851  05A8  0830               	movf	??_printf,w
  6852  05A9  00BC               	movwf	printf@ap
  6853  05AA                     l2207:	
  6854                           ;doprnt.c: 536: while(c = *f++) {
  6855                           
  6856  05AA  0020               	movlb	0	; select bank0
  6857  05AB  0823               	movf	printf@f+1,w
  6858  05AC  00B1               	movwf	??_printf+1
  6859  05AD  0822               	movf	printf@f,w
  6860  05AE  00B0               	movwf	??_printf
  6861  05AF  0AA2               	incf	printf@f,f
  6862  05B0  1903               	skipnz
  6863  05B1  0AA3               	incf	printf@f+1,f
  6864  05B2  0830               	movf	??_printf,w
  6865  05B3  0084               	movwf	4
  6866  05B4  0831               	movf	??_printf+1,w
  6867  05B5  0085               	movwf	5
  6868  05B6  0800               	movf	0,w	;code access
  6869  05B7  00B2               	movwf	??_printf+2
  6870  05B8  0832               	movf	??_printf+2,w
  6871  05B9  00C2               	movwf	printf@c
  6872  05BA  0842               	movf	printf@c,w
  6873  05BB  1903               	btfsc	3,2
  6874  05BC  0008               	return
  6875                           
  6876                           ;doprnt.c: 538: if(c != '%')
  6877  05BD  3025               	movlw	37
  6878  05BE  0642               	xorwf	printf@c,w
  6879  05BF  1903               	btfsc	3,2
  6880  05C0  2DC6               	goto	l2053
  6881                           
  6882                           ;doprnt.c: 540: {
  6883                           ;doprnt.c: 541: (putch(c) );
  6884  05C1  0842               	movf	printf@c,w
  6885  05C2  318A  22F9  3185   	fcall	_putch
  6886                           
  6887                           ;doprnt.c: 542: continue;
  6888  05C5  2DAA               	goto	l2207
  6889  05C6                     l2053:	
  6890                           
  6891                           ;doprnt.c: 543: }
  6892                           ;doprnt.c: 546: width = 0;
  6893  05C6  0020               	movlb	0	; select bank0
  6894  05C7  01C0               	clrf	printf@width
  6895  05C8  01C1               	clrf	printf@width+1
  6896                           
  6897                           ;doprnt.c: 548: flag = 0;
  6898  05C9  01BF               	clrf	printf@flag
  6899                           
  6900                           ;doprnt.c: 551: switch(*f) {
  6901                           
  6902                           ;doprnt.c: 550: for(;;) {
  6903  05CA  2DD0               	goto	l2059
  6904  05CB                     l418:	
  6905                           ;doprnt.c: 579: case '0':
  6906                           
  6907                           
  6908                           ;doprnt.c: 580: flag |= 0x04;
  6909  05CB  153F               	bsf	printf@flag,2
  6910                           
  6911                           ;doprnt.c: 581: f++;
  6912  05CC  3001               	movlw	1
  6913  05CD  07A2               	addwf	printf@f,f
  6914  05CE  3000               	movlw	0
  6915  05CF  3DA3               	addwfc	printf@f+1,f
  6916  05D0                     l2059:	
  6917                           ;doprnt.c: 584: }
  6918                           
  6919                           ;doprnt.c: 582: continue;
  6920                           
  6921  05D0  0822               	movf	printf@f,w
  6922  05D1  0084               	movwf	4
  6923  05D2  0823               	movf	printf@f+1,w
  6924  05D3  0085               	movwf	5
  6925  05D4  0800               	movf	0,w	;code access
  6926                           
  6927                           ; Switch size 1, requested type "space"
  6928                           ; Number of cases is 1, Range of values is 48 to 48
  6929                           ; switch strategies available:
  6930                           ; Name         Instructions Cycles
  6931                           ; simple_byte            4     3 (average)
  6932                           ; direct_byte           11     9 (fixed)
  6933                           ; jumptable            263     9 (fixed)
  6934                           ;	Chosen strategy is simple_byte
  6935  05D5  3A30               	xorlw	48	; case 48
  6936  05D6  1903               	skipnz
  6937  05D7  2DCB               	goto	l418
  6938  05D8  2DD9               	goto	l2061
  6939  05D9                     l2061:	
  6940                           ;doprnt.c: 586: }
  6941                           
  6942                           ;doprnt.c: 585: break;
  6943                           
  6944                           
  6945                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6946  05D9  0822               	movf	printf@f,w
  6947  05DA  0084               	movwf	4
  6948  05DB  0823               	movf	printf@f+1,w
  6949  05DC  0085               	movwf	5
  6950  05DD  0800               	movf	0,w	;code access
  6951  05DE  318B  2343  3185   	fcall	_isdigit
  6952  05E1  1C03               	btfss	3,0
  6953  05E2  2E85               	goto	l2113
  6954                           
  6955                           ;doprnt.c: 598: width = 0;
  6956  05E3  0020               	movlb	0	; select bank0
  6957  05E4  01C0               	clrf	printf@width
  6958  05E5  01C1               	clrf	printf@width+1
  6959  05E6                     l2065:	
  6960                           ;doprnt.c: 599: do {
  6961                           
  6962                           
  6963                           ;doprnt.c: 600: width *= 10;
  6964  05E6  300A               	movlw	10
  6965  05E7  00F0               	movwf	___wmul@multiplier
  6966  05E8  3000               	movlw	0
  6967  05E9  00F1               	movwf	___wmul@multiplier+1
  6968  05EA  0020               	movlb	0	; select bank0
  6969  05EB  0841               	movf	printf@width+1,w
  6970  05EC  00F3               	movwf	___wmul@multiplicand+1
  6971  05ED  0840               	movf	printf@width,w
  6972  05EE  00F2               	movwf	___wmul@multiplicand
  6973  05EF  318B  23A5  3185   	fcall	___wmul
  6974  05F2  0871               	movf	?___wmul+1,w
  6975  05F3  0020               	movlb	0	; select bank0
  6976  05F4  00C1               	movwf	printf@width+1
  6977  05F5  0870               	movf	?___wmul,w
  6978  05F6  00C0               	movwf	printf@width
  6979                           
  6980                           ;doprnt.c: 601: width += *f++ - '0';
  6981  05F7  0822               	movf	printf@f,w
  6982  05F8  0084               	movwf	4
  6983  05F9  0823               	movf	printf@f+1,w
  6984  05FA  0085               	movwf	5
  6985  05FB  0800               	movf	0,w	;code access
  6986  05FC  3ED0               	addlw	208
  6987  05FD  00B0               	movwf	??_printf
  6988  05FE  30FF               	movlw	255
  6989  05FF  1803               	skipnc
  6990  0600  3000               	movlw	0
  6991  0601  00B1               	movwf	??_printf+1
  6992  0602  0830               	movf	??_printf,w
  6993  0603  07C0               	addwf	printf@width,f
  6994  0604  0831               	movf	??_printf+1,w
  6995  0605  3DC1               	addwfc	printf@width+1,f
  6996  0606  3001               	movlw	1
  6997  0607  07A2               	addwf	printf@f,f
  6998  0608  3000               	movlw	0
  6999  0609  3DA3               	addwfc	printf@f+1,f
  7000                           
  7001                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7002  060A  0822               	movf	printf@f,w
  7003  060B  0084               	movwf	4
  7004  060C  0823               	movf	printf@f+1,w
  7005  060D  0085               	movwf	5
  7006  060E  0800               	movf	0,w	;code access
  7007  060F  318B  2343  3185   	fcall	_isdigit
  7008  0612  1C03               	btfss	3,0
  7009  0613  2E85               	goto	l2113
  7010  0614  2DE6               	goto	l2065
  7011  0615                     l431:	
  7012                           ;doprnt.c: 712: case 'X':
  7013                           
  7014                           ;doprnt.c: 698: case 'i':
  7015                           ;doprnt.c: 699: break;
  7016                           
  7017                           ;doprnt.c: 697: case 'd':
  7018                           
  7019                           ;doprnt.c: 638: goto alldone;
  7020                           
  7021                           ;doprnt.c: 637: case 0:
  7022                           
  7023                           ;doprnt.c: 608: }
  7024                           ;doprnt.c: 635: switch(c = *f++) {
  7025                           
  7026                           
  7027                           ;doprnt.c: 714: flag |= 0x20;
  7028  0615  16BF               	bsf	printf@flag,5
  7029  0616                     l432:	
  7030                           ;doprnt.c: 718: case 'x':
  7031                           
  7032                           
  7033                           ;doprnt.c: 721: flag |= 0x80;
  7034  0616  17BF               	bsf	printf@flag,7
  7035                           
  7036                           ;doprnt.c: 723: break;
  7037  0617  2EA9               	goto	l430
  7038  0618                     l2073:	
  7039                           ;doprnt.c: 728: case 's':
  7040                           
  7041                           
  7042                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7043  0618  083C               	movf	printf@ap,w
  7044  0619  0086               	movwf	6
  7045  061A  0187               	clrf	7
  7046  061B  3F40               	moviw [0]fsr1
  7047  061C  00B8               	movwf	printf@cp
  7048  061D  3F41               	moviw [1]fsr1
  7049  061E  00B9               	movwf	printf@cp+1
  7050  061F  3002               	movlw	2
  7051  0620  00B0               	movwf	??_printf
  7052  0621  0830               	movf	??_printf,w
  7053  0622  07BC               	addwf	printf@ap,f
  7054                           
  7055                           ;doprnt.c: 740: if(!cp)
  7056  0623  0838               	movf	printf@cp,w
  7057  0624  0439               	iorwf	printf@cp+1,w
  7058  0625  1D03               	btfss	3,2
  7059  0626  2E2B               	goto	l2081
  7060                           
  7061                           ;doprnt.c: 741: cp = "(null)";
  7062  0627  3086               	movlw	low (STR_61| (0+32768))
  7063  0628  00B8               	movwf	printf@cp
  7064  0629  3094               	movlw	high (STR_61| (0+32768))
  7065  062A  00B9               	movwf	printf@cp+1
  7066  062B                     l2081:	
  7067                           
  7068                           ;doprnt.c: 745: len = 0;
  7069  062B  01BA               	clrf	printf@len
  7070  062C  01BB               	clrf	printf@len+1
  7071  062D                     l2085:	
  7072                           ;doprnt.c: 746: while(cp[len])
  7073                           
  7074  062D  0838               	movf	printf@cp,w
  7075  062E  073A               	addwf	printf@len,w
  7076  062F  0084               	movwf	4
  7077  0630  0839               	movf	printf@cp+1,w
  7078  0631  3D3B               	addwfc	printf@len+1,w
  7079  0632  0085               	movwf	5
  7080  0633  0012               	moviw fsr0++
  7081  0634  1903               	btfsc	3,2
  7082  0635  2E3B               	goto	l2087
  7083                           
  7084                           ;doprnt.c: 747: len++;
  7085  0636  3001               	movlw	1
  7086  0637  07BA               	addwf	printf@len,f
  7087  0638  3000               	movlw	0
  7088  0639  3DBB               	addwfc	printf@len+1,f
  7089  063A  2E2D               	goto	l2085
  7090  063B                     l2087:	
  7091                           ;doprnt.c: 750: dostring:
  7092                           
  7093                           
  7094                           ;doprnt.c: 757: if(width > len)
  7095  063B  0841               	movf	printf@width+1,w
  7096  063C  023B               	subwf	printf@len+1,w
  7097  063D  1D03               	skipz
  7098  063E  2E41               	goto	u1665
  7099  063F  0840               	movf	printf@width,w
  7100  0640  023A               	subwf	printf@len,w
  7101  0641                     u1665:	
  7102  0641  1803               	skipnc
  7103  0642  2E48               	goto	l2091
  7104                           
  7105                           ;doprnt.c: 758: width -= len;
  7106  0643  083A               	movf	printf@len,w
  7107  0644  02C0               	subwf	printf@width,f
  7108  0645  083B               	movf	printf@len+1,w
  7109  0646  3BC1               	subwfb	printf@width+1,f
  7110  0647  2E4A               	goto	l2095
  7111  0648                     l2091:	
  7112                           
  7113                           ;doprnt.c: 759: else
  7114                           ;doprnt.c: 760: width = 0;
  7115  0648  01C0               	clrf	printf@width
  7116  0649  01C1               	clrf	printf@width+1
  7117  064A                     l2095:	
  7118                           ;doprnt.c: 764: while(width--)
  7119                           
  7120  064A  30FF               	movlw	255
  7121  064B  0020               	movlb	0	; select bank0
  7122  064C  07C0               	addwf	printf@width,f
  7123  064D  30FF               	movlw	255
  7124  064E  3DC1               	addwfc	printf@width+1,f
  7125  064F  0A40               	incf	printf@width,w
  7126  0650  1903               	btfsc	3,2
  7127  0651  0A41               	incf	printf@width+1,w
  7128  0652  1903               	btfsc	3,2
  7129  0653  2E66               	goto	l2101
  7130                           
  7131                           ;doprnt.c: 765: (putch(' ') );
  7132  0654  3020               	movlw	32
  7133  0655  318A  22F9  3185   	fcall	_putch
  7134  0658  2E4A               	goto	l2095
  7135  0659                     l2097:	
  7136                           ;doprnt.c: 767: while(len--)
  7137                           
  7138                           
  7139                           ;doprnt.c: 768: (putch(*cp++) );
  7140  0659  0838               	movf	printf@cp,w
  7141  065A  0084               	movwf	4
  7142  065B  0839               	movf	printf@cp+1,w
  7143  065C  0085               	movwf	5
  7144  065D  0800               	movf	0,w	;code access
  7145  065E  318A  22F9  3185   	fcall	_putch
  7146  0661  3001               	movlw	1
  7147  0662  0020               	movlb	0	; select bank0
  7148  0663  07B8               	addwf	printf@cp,f
  7149  0664  3000               	movlw	0
  7150  0665  3DB9               	addwfc	printf@cp+1,f
  7151  0666                     l2101:	
  7152  0666  3001               	movlw	1
  7153  0667  02BA               	subwf	printf@len,f
  7154  0668  3000               	movlw	0
  7155  0669  3BBB               	subwfb	printf@len+1,f
  7156  066A  0A3A               	incf	printf@len,w
  7157  066B  1D03               	skipz
  7158  066C  2E59               	goto	l2097
  7159  066D  0A3B               	incf	printf@len+1,w
  7160  066E  1903               	btfsc	3,2
  7161  066F  2DAA               	goto	l2207
  7162  0670  2E59               	goto	l2097
  7163  0671                     l2103:	
  7164                           ;doprnt.c: 784: case 'c':
  7165                           
  7166                           ;doprnt.c: 774: continue;
  7167                           
  7168                           
  7169                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7170  0671  083C               	movf	printf@ap,w
  7171  0672  0086               	movwf	6
  7172  0673  0187               	clrf	7
  7173  0674  0801               	movf	1,w
  7174  0675  00B0               	movwf	??_printf
  7175  0676  0830               	movf	??_printf,w
  7176  0677  00C2               	movwf	printf@c
  7177  0678  3002               	movlw	2
  7178  0679  00B0               	movwf	??_printf
  7179  067A  0830               	movf	??_printf,w
  7180  067B  07BC               	addwf	printf@ap,f
  7181  067C                     l2107:	
  7182                           ;doprnt.c: 802: default:
  7183                           
  7184                           
  7185                           ;doprnt.c: 805: cp = (char *)&c;
  7186  067C  3042               	movlw	low printf@c
  7187  067D  00B8               	movwf	printf@cp
  7188  067E  3000               	movlw	high printf@c
  7189  067F  00B9               	movwf	printf@cp+1
  7190                           
  7191                           ;doprnt.c: 806: len = 1;
  7192  0680  3001               	movlw	1
  7193  0681  00BA               	movwf	printf@len
  7194  0682  3000               	movlw	0
  7195  0683  00BB               	movwf	printf@len+1
  7196                           
  7197                           ;doprnt.c: 807: goto dostring;
  7198  0684  2E3B               	goto	l2087
  7199  0685                     l2113:	
  7200                           ;doprnt.c: 822: }
  7201                           
  7202  0685  0020               	movlb	0	; select bank0
  7203  0686  0823               	movf	printf@f+1,w
  7204  0687  00B1               	movwf	??_printf+1
  7205  0688  0822               	movf	printf@f,w
  7206  0689  00B0               	movwf	??_printf
  7207  068A  0AA2               	incf	printf@f,f
  7208  068B  1903               	skipnz
  7209  068C  0AA3               	incf	printf@f+1,f
  7210  068D  0830               	movf	??_printf,w
  7211  068E  0084               	movwf	4
  7212  068F  0831               	movf	??_printf+1,w
  7213  0690  0085               	movwf	5
  7214  0691  0800               	movf	0,w	;code access
  7215  0692  00C2               	movwf	printf@c
  7216                           
  7217                           ; Switch size 1, requested type "space"
  7218                           ; Number of cases is 7, Range of values is 0 to 120
  7219                           ; switch strategies available:
  7220                           ; Name         Instructions Cycles
  7221                           ; simple_byte           22    12 (average)
  7222                           ; direct_byte          248     6 (fixed)
  7223                           ; jumptable            260     6 (fixed)
  7224                           ;	Chosen strategy is simple_byte
  7225  0693  3A00               	xorlw	0	; case 0
  7226  0694  1903               	skipnz
  7227  0695  2FEF               	goto	l487
  7228  0696  3A58               	xorlw	88	; case 88
  7229  0697  1903               	skipnz
  7230  0698  2E15               	goto	l431
  7231  0699  3A3B               	xorlw	59	; case 99
  7232  069A  1903               	skipnz
  7233  069B  2E71               	goto	l2103
  7234  069C  3A07               	xorlw	7	; case 100
  7235  069D  1903               	skipnz
  7236  069E  2EA9               	goto	l430
  7237  069F  3A0D               	xorlw	13	; case 105
  7238  06A0  1903               	skipnz
  7239  06A1  2EA9               	goto	l430
  7240  06A2  3A1A               	xorlw	26	; case 115
  7241  06A3  1903               	skipnz
  7242  06A4  2E18               	goto	l2073
  7243  06A5  3A0B               	xorlw	11	; case 120
  7244  06A6  1903               	skipnz
  7245  06A7  2E16               	goto	l432
  7246  06A8  2E7C               	goto	l2107
  7247  06A9                     l430:	
  7248                           
  7249                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7250  06A9  0020               	movlb	0	; select bank0
  7251  06AA  1BBF               	btfsc	printf@flag,7
  7252  06AB  2EC3               	goto	l2125
  7253                           
  7254                           ;doprnt.c: 1253: {
  7255                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7256  06AC  083C               	movf	printf@ap,w
  7257  06AD  0086               	movwf	6
  7258  06AE  0187               	clrf	7
  7259  06AF  3F40               	moviw [0]fsr1
  7260  06B0  00BD               	movwf	printf@val
  7261  06B1  3F41               	moviw [1]fsr1
  7262  06B2  00BE               	movwf	printf@val+1
  7263  06B3  3002               	movlw	2
  7264  06B4  00B0               	movwf	??_printf
  7265  06B5  0830               	movf	??_printf,w
  7266  06B6  07BC               	addwf	printf@ap,f
  7267                           
  7268                           ;doprnt.c: 1261: if((int)val < 0) {
  7269  06B7  1FBE               	btfss	printf@val+1,7
  7270  06B8  2F13               	goto	l2151
  7271                           
  7272                           ;doprnt.c: 1262: flag |= 0x03;
  7273  06B9  3003               	movlw	3
  7274  06BA  00B0               	movwf	??_printf
  7275  06BB  0830               	movf	??_printf,w
  7276  06BC  04BF               	iorwf	printf@flag,f
  7277                           
  7278                           ;doprnt.c: 1263: val = -val;
  7279  06BD  09BD               	comf	printf@val,f
  7280  06BE  09BE               	comf	printf@val+1,f
  7281  06BF  0ABD               	incf	printf@val,f
  7282  06C0  1903               	skipnz
  7283  06C1  0ABE               	incf	printf@val+1,f
  7284                           
  7285                           ;doprnt.c: 1264: }
  7286                           ;doprnt.c: 1266: }
  7287  06C2  2F13               	goto	l2151
  7288  06C3                     l2125:	
  7289                           
  7290                           ;doprnt.c: 1268: else
  7291                           ;doprnt.c: 1273: {
  7292                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7293  06C3  083C               	movf	printf@ap,w
  7294  06C4  0086               	movwf	6
  7295  06C5  0187               	clrf	7
  7296  06C6  3F40               	moviw [0]fsr1
  7297  06C7  00BD               	movwf	printf@val
  7298  06C8  3F41               	moviw [1]fsr1
  7299  06C9  00BE               	movwf	printf@val+1
  7300  06CA  3002               	movlw	2
  7301  06CB  00B0               	movwf	??_printf
  7302  06CC  0830               	movf	??_printf,w
  7303  06CD  07BC               	addwf	printf@ap,f
  7304                           
  7305                           ;doprnt.c: 1287: }
  7306                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7307  06CE  2F13               	goto	l2151
  7308  06CF                     l453:	
  7309                           ;doprnt.c: 1299: case 0x00:
  7310                           
  7311                           
  7312                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7313  06CF  01C2               	clrf	printf@c
  7314  06D0  0AC2               	incf	printf@c,f
  7315  06D1                     L10:	
  7316  06D1  3005               	movlw	5
  7317  06D2  0642               	xorwf	printf@c,w
  7318  06D3  1903               	btfsc	3,2
  7319  06D4  2F1C               	goto	l2153
  7320                           
  7321                           ;doprnt.c: 1306: if(val < dpowers[c])
  7322  06D5  0842               	movf	printf@c,w
  7323  06D6  00B0               	movwf	??_printf
  7324  06D7  01B1               	clrf	??_printf+1
  7325  06D8  35B0               	lslf	??_printf,f
  7326  06D9  0DB1               	rlf	??_printf+1,f
  7327  06DA  3074               	movlw	low (_dpowers| (0+32768))
  7328  06DB  0730               	addwf	??_printf,w
  7329  06DC  0084               	movwf	4
  7330  06DD  3094               	movlw	high (_dpowers| (0+32768))
  7331  06DE  3D31               	addwfc	??_printf+1,w
  7332  06DF  0085               	movwf	5
  7333  06E0  3F00               	moviw [0]fsr0
  7334  06E1  00B2               	movwf	??_printf+2
  7335  06E2  3F01               	moviw [1]fsr0
  7336  06E3  00B3               	movwf	??_printf+3
  7337  06E4  0833               	movf	??_printf+3,w
  7338  06E5  023E               	subwf	printf@val+1,w
  7339  06E6  1D03               	skipz
  7340  06E7  2EEA               	goto	u1725
  7341  06E8  0832               	movf	??_printf+2,w
  7342  06E9  023D               	subwf	printf@val,w
  7343  06EA                     u1725:	
  7344  06EA  1C03               	btfss	3,0
  7345  06EB  2F1C               	goto	l2153
  7346                           
  7347                           ;doprnt.c: 1307: break;
  7348  06EC  3001               	movlw	1
  7349  06ED  00B0               	movwf	??_printf
  7350  06EE  0830               	movf	??_printf,w
  7351  06EF  07C2               	addwf	printf@c,f
  7352  06F0  2ED1               	goto	L10
  7353  06F1                     l458:	
  7354                           ;doprnt.c: 1314: case 0x80:
  7355                           
  7356                           ;doprnt.c: 1309: break;
  7357                           
  7358                           
  7359                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7360  06F1  01C2               	clrf	printf@c
  7361  06F2  0AC2               	incf	printf@c,f
  7362  06F3                     L11:	
  7363  06F3  3004               	movlw	4
  7364  06F4  0642               	xorwf	printf@c,w
  7365  06F5  1903               	btfsc	3,2
  7366  06F6  2F1C               	goto	l2153
  7367                           
  7368                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7369  06F7  0842               	movf	printf@c,w
  7370  06F8  00B0               	movwf	??_printf
  7371  06F9  01B1               	clrf	??_printf+1
  7372  06FA  35B0               	lslf	??_printf,f
  7373  06FB  0DB1               	rlf	??_printf+1,f
  7374  06FC  307E               	movlw	low (_hexpowers| (0+32768))
  7375  06FD  0730               	addwf	??_printf,w
  7376  06FE  0084               	movwf	4
  7377  06FF  3094               	movlw	high (_hexpowers| (0+32768))
  7378  0700  3D31               	addwfc	??_printf+1,w
  7379  0701  0085               	movwf	5
  7380  0702  3F00               	moviw [0]fsr0
  7381  0703  00B2               	movwf	??_printf+2
  7382  0704  3F01               	moviw [1]fsr0
  7383  0705  00B3               	movwf	??_printf+3
  7384  0706  0833               	movf	??_printf+3,w
  7385  0707  023E               	subwf	printf@val+1,w
  7386  0708  1D03               	skipz
  7387  0709  2F0C               	goto	u1755
  7388  070A  0832               	movf	??_printf+2,w
  7389  070B  023D               	subwf	printf@val,w
  7390  070C                     u1755:	
  7391  070C  1C03               	btfss	3,0
  7392  070D  2F1C               	goto	l2153
  7393                           
  7394                           ;doprnt.c: 1318: break;
  7395  070E  3001               	movlw	1
  7396  070F  00B0               	movwf	??_printf
  7397  0710  0830               	movf	??_printf,w
  7398  0711  07C2               	addwf	printf@c,f
  7399  0712  2EF3               	goto	L11
  7400  0713                     l2151:	
  7401                           ;doprnt.c: 1336: }
  7402                           
  7403                           ;doprnt.c: 1320: break;
  7404                           
  7405  0713  083F               	movf	printf@flag,w
  7406  0714  3980               	andlw	128
  7407                           
  7408                           ; Switch size 1, requested type "space"
  7409                           ; Number of cases is 2, Range of values is 0 to 128
  7410                           ; switch strategies available:
  7411                           ; Name         Instructions Cycles
  7412                           ; simple_byte            7     4 (average)
  7413                           ; jumptable            260     6 (fixed)
  7414                           ;	Chosen strategy is simple_byte
  7415  0715  3A00               	xorlw	0	; case 0
  7416  0716  1903               	skipnz
  7417  0717  2ECF               	goto	l453
  7418  0718  3A80               	xorlw	128	; case 128
  7419  0719  1903               	skipnz
  7420  071A  2EF1               	goto	l458
  7421  071B  2F1C               	goto	l2153
  7422  071C                     l2153:	
  7423                           
  7424                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7425  071C  0840               	movf	printf@width,w
  7426  071D  0441               	iorwf	printf@width+1,w
  7427  071E  1903               	btfsc	3,2
  7428  071F  2F28               	goto	l462
  7429  0720  083F               	movf	printf@flag,w
  7430  0721  3903               	andlw	3
  7431  0722  1903               	btfsc	3,2
  7432  0723  2F28               	goto	l462
  7433                           
  7434                           ;doprnt.c: 1346: width--;
  7435  0724  30FF               	movlw	255
  7436  0725  07C0               	addwf	printf@width,f
  7437  0726  30FF               	movlw	255
  7438  0727  3DC1               	addwfc	printf@width+1,f
  7439  0728                     l462:	
  7440                           
  7441                           ;doprnt.c: 1381: if(width > c)
  7442  0728  0842               	movf	printf@c,w
  7443  0729  00B0               	movwf	??_printf
  7444  072A  01B1               	clrf	??_printf+1
  7445  072B  1BB0               	btfsc	??_printf,7
  7446  072C  03B1               	decf	??_printf+1,f
  7447  072D  0831               	movf	??_printf+1,w
  7448  072E  3A80               	xorlw	128
  7449  072F  00B2               	movwf	??_printf+2
  7450  0730  0841               	movf	printf@width+1,w
  7451  0731  3A80               	xorlw	128
  7452  0732  0232               	subwf	??_printf+2,w
  7453  0733  1D03               	skipz
  7454  0734  2F37               	goto	u1795
  7455  0735  0840               	movf	printf@width,w
  7456  0736  0230               	subwf	??_printf,w
  7457  0737                     u1795:	
  7458  0737  1803               	skipnc
  7459  0738  2F44               	goto	l2161
  7460                           
  7461                           ;doprnt.c: 1382: width -= c;
  7462  0739  0020               	movlb	0	; select bank0
  7463  073A  0842               	movf	printf@c,w
  7464  073B  00B0               	movwf	??_printf
  7465  073C  01B1               	clrf	??_printf+1
  7466  073D  1BB0               	btfsc	??_printf,7
  7467  073E  03B1               	decf	??_printf+1,f
  7468  073F  0830               	movf	??_printf,w
  7469  0740  02C0               	subwf	printf@width,f
  7470  0741  0831               	movf	??_printf+1,w
  7471  0742  3BC1               	subwfb	printf@width+1,f
  7472  0743  2F47               	goto	l2163
  7473  0744                     l2161:	
  7474                           
  7475                           ;doprnt.c: 1383: else
  7476                           ;doprnt.c: 1384: width = 0;
  7477  0744  0020               	movlb	0	; select bank0
  7478  0745  01C0               	clrf	printf@width
  7479  0746  01C1               	clrf	printf@width+1
  7480  0747                     l2163:	
  7481                           
  7482                           ;doprnt.c: 1387: if(flag & 0x04) {
  7483  0747  1D3F               	btfss	printf@flag,2
  7484  0748  2F60               	goto	l2175
  7485                           
  7486                           ;doprnt.c: 1392: if(flag & 0x03)
  7487  0749  083F               	movf	printf@flag,w
  7488  074A  3903               	andlw	3
  7489  074B  1903               	btfsc	3,2
  7490  074C  2F51               	goto	l2169
  7491                           
  7492                           ;doprnt.c: 1393: (putch('-') );
  7493  074D  302D               	movlw	45
  7494  074E  318A  22F9  3185   	fcall	_putch
  7495  0751                     l2169:	
  7496                           
  7497                           ;doprnt.c: 1415: if(width)
  7498  0751  0020               	movlb	0	; select bank0
  7499  0752                     L12:	
  7500  0752  0840               	movf	printf@width,w
  7501  0753  0441               	iorwf	printf@width+1,w
  7502  0754  1903               	btfsc	3,2
  7503  0755  2F79               	goto	l2185
  7504                           
  7505                           ;doprnt.c: 1417: (putch('0') );
  7506                           
  7507                           ;doprnt.c: 1416: do
  7508  0756  3030               	movlw	48
  7509  0757  318A  22F9  3185   	fcall	_putch
  7510                           
  7511                           ;doprnt.c: 1418: while(--width);
  7512  075A  30FF               	movlw	255
  7513  075B  0020               	movlb	0	; select bank0
  7514  075C  07C0               	addwf	printf@width,f
  7515  075D  30FF               	movlw	255
  7516  075E  3DC1               	addwfc	printf@width+1,f
  7517  075F  2F52               	goto	L12
  7518  0760                     l2175:	
  7519                           ;doprnt.c: 1420: } else
  7520                           
  7521                           
  7522                           ;doprnt.c: 1422: {
  7523                           ;doprnt.c: 1424: if(width
  7524                           ;doprnt.c: 1428: )
  7525  0760  0840               	movf	printf@width,w
  7526  0761  0441               	iorwf	printf@width+1,w
  7527  0762  1903               	btfsc	3,2
  7528  0763  2F71               	goto	l2181
  7529  0764                     l2177:	
  7530                           ;doprnt.c: 1429: do
  7531                           
  7532                           
  7533                           ;doprnt.c: 1430: (putch(' ') );
  7534  0764  3020               	movlw	32
  7535  0765  318A  22F9  3185   	fcall	_putch
  7536                           
  7537                           ;doprnt.c: 1431: while(--width);
  7538  0768  30FF               	movlw	255
  7539  0769  0020               	movlb	0	; select bank0
  7540  076A  07C0               	addwf	printf@width,f
  7541  076B  30FF               	movlw	255
  7542  076C  3DC1               	addwfc	printf@width+1,f
  7543  076D  0840               	movf	printf@width,w
  7544  076E  0441               	iorwf	printf@width+1,w
  7545  076F  1D03               	btfss	3,2
  7546  0770  2F64               	goto	l2177
  7547  0771                     l2181:	
  7548                           
  7549                           ;doprnt.c: 1438: if(flag & 0x03)
  7550  0771  083F               	movf	printf@flag,w
  7551  0772  3903               	andlw	3
  7552  0773  1903               	btfsc	3,2
  7553  0774  2F79               	goto	l2185
  7554                           
  7555                           ;doprnt.c: 1439: (putch('-') );
  7556  0775  302D               	movlw	45
  7557  0776  318A  22F9  3185   	fcall	_putch
  7558  0779                     l2185:	
  7559                           
  7560                           ;doprnt.c: 1469: }
  7561                           ;doprnt.c: 1472: prec = c;
  7562  0779  0020               	movlb	0	; select bank0
  7563  077A  0842               	movf	printf@c,w
  7564  077B  00B0               	movwf	??_printf
  7565  077C  0830               	movf	??_printf,w
  7566  077D  00B7               	movwf	printf@prec
  7567                           
  7568                           ;doprnt.c: 1474: while(prec--) {
  7569  077E  2FDD               	goto	l2205
  7570  077F                     l2187:	
  7571                           ;doprnt.c: 1478: {
  7572                           ;doprnt.c: 1483: case 0x00:
  7573                           
  7574                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7575                           
  7576                           
  7577                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7578  077F  300A               	movlw	10
  7579  0780  00F8               	movwf	___lwmod@divisor
  7580  0781  3000               	movlw	0
  7581  0782  00F9               	movwf	___lwmod@divisor+1
  7582  0783  0837               	movf	printf@prec,w
  7583  0784  00B0               	movwf	??_printf
  7584  0785  01B1               	clrf	??_printf+1
  7585  0786  35B0               	lslf	??_printf,f
  7586  0787  0DB1               	rlf	??_printf+1,f
  7587  0788  3074               	movlw	low (_dpowers| (0+32768))
  7588  0789  0730               	addwf	??_printf,w
  7589  078A  0084               	movwf	4
  7590  078B  3094               	movlw	high (_dpowers| (0+32768))
  7591  078C  3D31               	addwfc	??_printf+1,w
  7592  078D  0085               	movwf	5
  7593  078E  3F00               	moviw [0]fsr0
  7594  078F  00F0               	movwf	___lwdiv@divisor
  7595  0790  3F01               	moviw [1]fsr0
  7596  0791  00F1               	movwf	___lwdiv@divisor+1
  7597  0792  083E               	movf	printf@val+1,w
  7598  0793  00F3               	movwf	___lwdiv@dividend+1
  7599  0794  083D               	movf	printf@val,w
  7600  0795  00F2               	movwf	___lwdiv@dividend
  7601  0796  318C  2497  3185   	fcall	___lwdiv
  7602  0799  0871               	movf	?___lwdiv+1,w
  7603  079A  00FB               	movwf	___lwmod@dividend+1
  7604  079B  0870               	movf	?___lwdiv,w
  7605  079C  00FA               	movwf	___lwmod@dividend
  7606  079D  318C  240A  3185   	fcall	___lwmod
  7607  07A0  0878               	movf	?___lwmod,w
  7608  07A1  3E30               	addlw	48
  7609  07A2  0020               	movlb	0	; select bank0
  7610  07A3  2FD6               	goto	L8
  7611  07A4                     l2189:	
  7612                           ;doprnt.c: 1497: case 0x80:
  7613                           
  7614                           ;doprnt.c: 1491: break;
  7615                           
  7616                           
  7617                           ;doprnt.c: 1499: {
  7618                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7619  07A4  0837               	movf	printf@prec,w
  7620  07A5  00B0               	movwf	??_printf
  7621  07A6  01B1               	clrf	??_printf+1
  7622  07A7  35B0               	lslf	??_printf,f
  7623  07A8  0DB1               	rlf	??_printf+1,f
  7624  07A9  307E               	movlw	low (_hexpowers| (0+32768))
  7625  07AA  0730               	addwf	??_printf,w
  7626  07AB  0084               	movwf	4
  7627  07AC  3094               	movlw	high (_hexpowers| (0+32768))
  7628  07AD  3D31               	addwfc	??_printf+1,w
  7629  07AE  0085               	movwf	5
  7630  07AF  3F00               	moviw [0]fsr0
  7631  07B0  00F0               	movwf	___lwdiv@divisor
  7632  07B1  3F01               	moviw [1]fsr0
  7633  07B2  00F1               	movwf	___lwdiv@divisor+1
  7634  07B3  083E               	movf	printf@val+1,w
  7635  07B4  00F3               	movwf	___lwdiv@dividend+1
  7636  07B5  083D               	movf	printf@val,w
  7637  07B6  00F2               	movwf	___lwdiv@dividend
  7638  07B7  318C  2497  3185   	fcall	___lwdiv
  7639  07BA  0870               	movf	?___lwdiv,w
  7640  07BB  390F               	andlw	15
  7641  07BC  0020               	movlb	0	; select bank0
  7642  07BD  00B2               	movwf	??_printf+2
  7643  07BE  0832               	movf	??_printf+2,w
  7644  07BF  00B6               	movwf	printf@idx
  7645                           
  7646                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7647  07C0  1ABF               	btfsc	printf@flag,5
  7648  07C1  2FC6               	goto	l2195
  7649  07C2  302A               	movlw	low (STR_63| (0+32768))
  7650  07C3  00B4               	movwf	_printf$635
  7651  07C4  3093               	movlw	high (STR_63| (0+32768))
  7652  07C5  2FC9               	goto	L9
  7653  07C6                     l2195:	
  7654  07C6  3019               	movlw	low (STR_62| (0+32768))
  7655  07C7  00B4               	movwf	_printf$635
  7656  07C8  3093               	movlw	high (STR_62| (0+32768))
  7657  07C9                     L9:	
  7658  07C9  00B5               	movwf	_printf$635+1
  7659  07CA  0835               	movf	_printf$635+1,w
  7660  07CB  00B1               	movwf	??_printf+1
  7661  07CC  0834               	movf	_printf$635,w
  7662  07CD  00B0               	movwf	??_printf
  7663  07CE  0836               	movf	printf@idx,w
  7664  07CF  0730               	addwf	??_printf,w
  7665  07D0  0084               	movwf	4
  7666  07D1  0831               	movf	??_printf+1,w
  7667  07D2  1803               	skipnc
  7668  07D3  0A31               	incf	??_printf+1,w
  7669  07D4  0085               	movwf	5
  7670  07D5  0800               	movf	0,w	;code access
  7671  07D6                     L8:	
  7672  07D6  00B2               	movwf	??_printf+2
  7673  07D7  0832               	movf	??_printf+2,w
  7674  07D8  00C2               	movwf	printf@c
  7675  07D9                     l2203:	
  7676                           ;doprnt.c: 1523: }
  7677                           
  7678                           ;doprnt.c: 1508: }
  7679                           ;doprnt.c: 1510: break;
  7680                           
  7681                           
  7682                           ;doprnt.c: 1524: (putch(c) );
  7683  07D9  0842               	movf	printf@c,w
  7684  07DA  318A  22F9  3185   	fcall	_putch
  7685  07DD                     l2205:	
  7686  07DD  30FF               	movlw	255
  7687  07DE  0020               	movlb	0	; select bank0
  7688  07DF  00B0               	movwf	??_printf
  7689  07E0  0830               	movf	??_printf,w
  7690  07E1  07B7               	addwf	printf@prec,f
  7691  07E2  0A37               	incf	printf@prec,w
  7692  07E3  1903               	btfsc	3,2
  7693  07E4  2DAA               	goto	l2207
  7694  07E5  083F               	movf	printf@flag,w
  7695  07E6  3980               	andlw	128
  7696                           
  7697                           ; Switch size 1, requested type "space"
  7698                           ; Number of cases is 2, Range of values is 0 to 128
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte            7     4 (average)
  7702                           ; jumptable            260     6 (fixed)
  7703                           ;	Chosen strategy is simple_byte
  7704  07E7  3A00               	xorlw	0	; case 0
  7705  07E8  1903               	skipnz
  7706  07E9  2F7F               	goto	l2187
  7707  07EA  3A80               	xorlw	128	; case 128
  7708  07EB  1903               	skipnz
  7709  07EC  2FA4               	goto	l2189
  7710  07ED  2FD9               	goto	l2203
  7711  07EE  2FD9               	goto	l2203
  7712  07EF                     l487:	
  7713                           ;doprnt.c: 1540: return 0;
  7714                           ;	Return value of _printf is never used
  7715                           
  7716                           ;doprnt.c: 1525: }
  7717                           ;doprnt.c: 1533: }
  7718                           ;doprnt.c: 1535: alldone:
  7719                           
  7720  07EF  0008               	return
  7721  07F0                     __end_of_printf:	
  7722                           
  7723                           	psect	text17
  7724  0AF9                     __ptext17:	
  7725 ;; *************** function _putch *****************
  7726 ;; Defined at:
  7727 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  txData          1    wreg     unsigned char 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  txData          1    1[COMMON] unsigned char 
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, pclath, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;Total ram usage:        1 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    1
  7748 ;; This function calls:
  7749 ;;		_EUSART_Write
  7750 ;; This function is called by:
  7751 ;;		_printf
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _putch
  7757  0AF9                     _putch:	
  7758                           
  7759                           ;incstack = 0
  7760                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7761                           ;putch@txData stored from wreg
  7762  0AF9  00F1               	movwf	putch@txData
  7763                           
  7764                           ;eusart.c: 109: EUSART_Write(txData);
  7765  0AFA  0871               	movf	putch@txData,w
  7766  0AFB  318B  2312         	fcall	_EUSART_Write
  7767  0AFD  0008               	return
  7768  0AFE                     __end_of_putch:	
  7769                           
  7770                           	psect	text18
  7771  0B12                     __ptext18:	
  7772 ;; *************** function _EUSART_Write *****************
  7773 ;; Defined at:
  7774 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  txData          1    wreg     unsigned char 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  txData          1    0[COMMON] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;Total ram usage:        1 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_putch
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _EUSART_Write
  7803  0B12                     _EUSART_Write:	
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in _EUSART_Write: [wreg]
  7807                           ;EUSART_Write@txData stored from wreg
  7808  0B12  00F0               	movwf	EUSART_Write@txData
  7809  0B13                     l58:	
  7810                           ;eusart.c: 96: {
  7811                           
  7812                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7813                           
  7814  0B13  0020               	movlb	0	; select bank0
  7815  0B14  1E11               	btfss	17,4	;volatile
  7816  0B15  2B13               	goto	l58
  7817                           
  7818                           ;eusart.c: 97: }
  7819                           ;eusart.c: 99: TXREG = txData;
  7820  0B16  0870               	movf	EUSART_Write@txData,w
  7821  0B17  0023               	movlb	3	; select bank3
  7822  0B18  009A               	movwf	26	;volatile
  7823  0B19  0008               	return
  7824  0B1A                     __end_of_EUSART_Write:	
  7825                           
  7826                           	psect	text19
  7827  0C0A                     __ptext19:	
  7828 ;; *************** function ___lwmod *****************
  7829 ;; Defined at:
  7830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  divisor         2    8[COMMON] unsigned int 
  7833 ;;  dividend        2   10[COMMON] unsigned int 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  counter         1   13[COMMON] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  2    8[COMMON] unsigned int 
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;Total ram usage:        6 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_printf
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function ___lwmod
  7860  0C0A                     ___lwmod:	
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7864  0C0A  0878               	movf	___lwmod@divisor,w
  7865  0C0B  0479               	iorwf	___lwmod@divisor+1,w
  7866  0C0C  1903               	btfsc	3,2
  7867  0C0D  2C31               	goto	l2011
  7868  0C0E  01FD               	clrf	___lwmod@counter
  7869  0C0F  0AFD               	incf	___lwmod@counter,f
  7870  0C10                     l2001:	
  7871  0C10  1BF9               	btfsc	___lwmod@divisor+1,7
  7872  0C11  2C1C               	goto	l2003
  7873  0C12  3001               	movlw	1
  7874  0C13                     u1505:	
  7875  0C13  35F8               	lslf	___lwmod@divisor,f
  7876  0C14  0DF9               	rlf	___lwmod@divisor+1,f
  7877  0C15  0B89               	decfsz	9,f
  7878  0C16  2C13               	goto	u1505
  7879  0C17  3001               	movlw	1
  7880  0C18  00FC               	movwf	??___lwmod
  7881  0C19  087C               	movf	??___lwmod,w
  7882  0C1A  07FD               	addwf	___lwmod@counter,f
  7883  0C1B  2C10               	goto	l2001
  7884  0C1C                     l2003:	
  7885  0C1C  0879               	movf	___lwmod@divisor+1,w
  7886  0C1D  027B               	subwf	___lwmod@dividend+1,w
  7887  0C1E  1D03               	skipz
  7888  0C1F  2C22               	goto	u1525
  7889  0C20  0878               	movf	___lwmod@divisor,w
  7890  0C21  027A               	subwf	___lwmod@dividend,w
  7891  0C22                     u1525:	
  7892  0C22  1C03               	skipc
  7893  0C23  2C28               	goto	l2007
  7894  0C24  0878               	movf	___lwmod@divisor,w
  7895  0C25  02FA               	subwf	___lwmod@dividend,f
  7896  0C26  0879               	movf	___lwmod@divisor+1,w
  7897  0C27  3BFB               	subwfb	___lwmod@dividend+1,f
  7898  0C28                     l2007:	
  7899  0C28  3001               	movlw	1
  7900  0C29                     u1535:	
  7901  0C29  36F9               	lsrf	___lwmod@divisor+1,f
  7902  0C2A  0CF8               	rrf	___lwmod@divisor,f
  7903  0C2B  0B89               	decfsz	9,f
  7904  0C2C  2C29               	goto	u1535
  7905  0C2D  3001               	movlw	1
  7906  0C2E  02FD               	subwf	___lwmod@counter,f
  7907  0C2F  1D03               	btfss	3,2
  7908  0C30  2C1C               	goto	l2003
  7909  0C31                     l2011:	
  7910  0C31  087B               	movf	___lwmod@dividend+1,w
  7911  0C32  00F9               	movwf	?___lwmod+1
  7912  0C33  087A               	movf	___lwmod@dividend,w
  7913  0C34  00F8               	movwf	?___lwmod
  7914  0C35  0008               	return
  7915  0C36                     __end_of___lwmod:	
  7916                           
  7917                           	psect	text20
  7918  0C97                     __ptext20:	
  7919 ;; *************** function ___lwdiv *****************
  7920 ;; Defined at:
  7921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  divisor         2    0[COMMON] unsigned int 
  7924 ;;  dividend        2    2[COMMON] unsigned int 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  quotient        2    5[COMMON] unsigned int 
  7927 ;;  counter         1    7[COMMON] unsigned char 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  2    0[COMMON] unsigned int 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        8 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_printf
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           
  7951                           ;psect for function ___lwdiv
  7952  0C97                     ___lwdiv:	
  7953                           
  7954                           ;incstack = 0
  7955                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7956  0C97  01F5               	clrf	___lwdiv@quotient
  7957  0C98  01F6               	clrf	___lwdiv@quotient+1
  7958  0C99  0870               	movf	___lwdiv@divisor,w
  7959  0C9A  0471               	iorwf	___lwdiv@divisor+1,w
  7960  0C9B  1903               	btfsc	3,2
  7961  0C9C  2CC6               	goto	l1989
  7962  0C9D  01F7               	clrf	___lwdiv@counter
  7963  0C9E  0AF7               	incf	___lwdiv@counter,f
  7964  0C9F                     l1977:	
  7965  0C9F  1BF1               	btfsc	___lwdiv@divisor+1,7
  7966  0CA0  2CAB               	goto	l1979
  7967  0CA1  3001               	movlw	1
  7968  0CA2                     u1435:	
  7969  0CA2  35F0               	lslf	___lwdiv@divisor,f
  7970  0CA3  0DF1               	rlf	___lwdiv@divisor+1,f
  7971  0CA4  0B89               	decfsz	9,f
  7972  0CA5  2CA2               	goto	u1435
  7973  0CA6  3001               	movlw	1
  7974  0CA7  00F4               	movwf	??___lwdiv
  7975  0CA8  0874               	movf	??___lwdiv,w
  7976  0CA9  07F7               	addwf	___lwdiv@counter,f
  7977  0CAA  2C9F               	goto	l1977
  7978  0CAB                     l1979:	
  7979  0CAB  3001               	movlw	1
  7980  0CAC                     u1455:	
  7981  0CAC  35F5               	lslf	___lwdiv@quotient,f
  7982  0CAD  0DF6               	rlf	___lwdiv@quotient+1,f
  7983  0CAE  0B89               	decfsz	9,f
  7984  0CAF  2CAC               	goto	u1455
  7985  0CB0  0871               	movf	___lwdiv@divisor+1,w
  7986  0CB1  0273               	subwf	___lwdiv@dividend+1,w
  7987  0CB2  1D03               	skipz
  7988  0CB3  2CB6               	goto	u1465
  7989  0CB4  0870               	movf	___lwdiv@divisor,w
  7990  0CB5  0272               	subwf	___lwdiv@dividend,w
  7991  0CB6                     u1465:	
  7992  0CB6  1C03               	skipc
  7993  0CB7  2CBD               	goto	l1985
  7994  0CB8  0870               	movf	___lwdiv@divisor,w
  7995  0CB9  02F2               	subwf	___lwdiv@dividend,f
  7996  0CBA  0871               	movf	___lwdiv@divisor+1,w
  7997  0CBB  3BF3               	subwfb	___lwdiv@dividend+1,f
  7998  0CBC  1475               	bsf	___lwdiv@quotient,0
  7999  0CBD                     l1985:	
  8000  0CBD  3001               	movlw	1
  8001  0CBE                     u1475:	
  8002  0CBE  36F1               	lsrf	___lwdiv@divisor+1,f
  8003  0CBF  0CF0               	rrf	___lwdiv@divisor,f
  8004  0CC0  0B89               	decfsz	9,f
  8005  0CC1  2CBE               	goto	u1475
  8006  0CC2  3001               	movlw	1
  8007  0CC3  02F7               	subwf	___lwdiv@counter,f
  8008  0CC4  1D03               	btfss	3,2
  8009  0CC5  2CAB               	goto	l1979
  8010  0CC6                     l1989:	
  8011  0CC6  0876               	movf	___lwdiv@quotient+1,w
  8012  0CC7  00F1               	movwf	?___lwdiv+1
  8013  0CC8  0875               	movf	___lwdiv@quotient,w
  8014  0CC9  00F0               	movwf	?___lwdiv
  8015  0CCA  0008               	return
  8016  0CCB                     __end_of___lwdiv:	
  8017                           
  8018                           	psect	text21
  8019  0BE4                     __ptext21:	
  8020 ;; *************** function _abort_pending_transmissions *****************
  8021 ;; Defined at:
  8022 ;;		line 110 in file "mcp2515.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      unsigned char 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;Total ram usage:        3 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    3
  8043 ;; This function calls:
  8044 ;;		_SPI_exchange
  8045 ;; This function is called by:
  8046 ;;		_can_set_mask
  8047 ;;		_can_abort
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function _abort_pending_transmissions
  8053  0BE4                     _abort_pending_transmissions:	
  8054                           
  8055                           ;mcp2515.c: 111: buf[0] = 0b00000101u;
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8059  0BE4  3005               	movlw	5
  8060  0BE5  0020               	movlb	0	; select bank0
  8061  0BE6  00A0               	movwf	??_abort_pending_transmissions
  8062  0BE7  0820               	movf	??_abort_pending_transmissions,w
  8063  0BE8  0021               	movlb	1	; select bank1
  8064  0BE9  00B4               	movwf	_buf^(0+128)
  8065                           
  8066                           ;mcp2515.c: 112: buf[1] = 0x0fu;
  8067  0BEA  300F               	movlw	15
  8068  0BEB  0020               	movlb	0	; select bank0
  8069  0BEC  00A0               	movwf	??_abort_pending_transmissions
  8070  0BED  0820               	movf	??_abort_pending_transmissions,w
  8071  0BEE  0021               	movlb	1	; select bank1
  8072  0BEF  00B5               	movwf	(_buf^(0+128)+1)
  8073                           
  8074                           ;mcp2515.c: 113: buf[2] = 0b00010000u;
  8075  0BF0  3010               	movlw	16
  8076  0BF1  0020               	movlb	0	; select bank0
  8077  0BF2  00A0               	movwf	??_abort_pending_transmissions
  8078  0BF3  0820               	movf	??_abort_pending_transmissions,w
  8079  0BF4  0021               	movlb	1	; select bank1
  8080  0BF5  00B6               	movwf	(_buf^(0+128)+2)
  8081                           
  8082                           ;mcp2515.c: 114: buf[3] = 0b00010000u;
  8083  0BF6  3010               	movlw	16
  8084  0BF7  0020               	movlb	0	; select bank0
  8085  0BF8  00A0               	movwf	??_abort_pending_transmissions
  8086  0BF9  0820               	movf	??_abort_pending_transmissions,w
  8087  0BFA  0021               	movlb	1	; select bank1
  8088  0BFB  00B7               	movwf	(_buf^(0+128)+3)
  8089                           
  8090                           ;mcp2515.c: 115: uint8_t bytes_written = SPI_exchange(buf, 4);
  8091  0BFC  3004               	movlw	4
  8092  0BFD  0020               	movlb	0	; select bank0
  8093  0BFE  00A0               	movwf	??_abort_pending_transmissions
  8094  0BFF  0820               	movf	??_abort_pending_transmissions,w
  8095  0C00  00F8               	movwf	SPI_exchange@len
  8096  0C01  30B4               	movlw	(low (_buf| 0))& (0+255)
  8097  0C02  318B  2360         	fcall	_SPI_exchange
  8098  0C04  0020               	movlb	0	; select bank0
  8099  0C05  00A1               	movwf	??_abort_pending_transmissions+1
  8100  0C06  0821               	movf	??_abort_pending_transmissions+1,w
  8101  0C07  00A2               	movwf	abort_pending_transmissions@bytes_written
  8102                           
  8103                           ;mcp2515.c: 116: return bytes_written;
  8104  0C08  0822               	movf	abort_pending_transmissions@bytes_written,w
  8105  0C09  0008               	return
  8106  0C0A                     __end_of_abort_pending_transmissions:	
  8107                           
  8108                           	psect	text22
  8109  0B60                     __ptext22:	
  8110 ;; *************** function _SPI_exchange *****************
  8111 ;; Defined at:
  8112 ;;		line 4 in file "spi.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  buf             1    wreg     PTR unsigned char 
  8115 ;;		 -> receive@rx_buf(15), buf(16), 
  8116 ;;  len             1    8[COMMON] unsigned char 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  buf             1   13[COMMON] PTR unsigned char 
  8119 ;;		 -> receive@rx_buf(15), buf(16), 
  8120 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      unsigned char 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;Total ram usage:        6 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    2
  8137 ;; This function calls:
  8138 ;;		_SPI_Exchange8bitBuffer
  8139 ;; This function is called by:
  8140 ;;		_can_init
  8141 ;;		_can_ope_mode
  8142 ;;		_abort_pending_transmissions
  8143 ;;		_can_set_mask
  8144 ;;		_txf_clear
  8145 ;;		_receive
  8146 ;;		_can_send
  8147 ;;		_can_status_check
  8148 ;;		_can_baudrate
  8149 ;;		_read_register
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           
  8154                           ;psect for function _SPI_exchange
  8155  0B60                     _SPI_exchange:	
  8156                           
  8157                           ;incstack = 0
  8158                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8159                           ;SPI_exchange@buf stored from wreg
  8160  0B60  00FD               	movwf	SPI_exchange@buf
  8161                           
  8162                           ;spi.c: 5: LATAbits.LATA4 = 0;
  8163  0B61  0022               	movlb	2	; select bank2
  8164  0B62  120C               	bcf	12,4	;volatile
  8165                           
  8166                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  8167  0B63  0878               	movf	SPI_exchange@len,w
  8168  0B64  00F9               	movwf	??_SPI_exchange
  8169  0B65  0879               	movf	??_SPI_exchange,w
  8170  0B66  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8171  0B67  087D               	movf	SPI_exchange@buf,w
  8172  0B68  00FA               	movwf	??_SPI_exchange+1
  8173  0B69  087A               	movf	??_SPI_exchange+1,w
  8174  0B6A  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8175  0B6B  087D               	movf	SPI_exchange@buf,w
  8176  0B6C  318C  24CB         	fcall	_SPI_Exchange8bitBuffer
  8177  0B6E  00FB               	movwf	??_SPI_exchange+2
  8178  0B6F  087B               	movf	??_SPI_exchange+2,w
  8179  0B70  00FC               	movwf	SPI_exchange@bytes_written
  8180                           
  8181                           ;spi.c: 7: LATAbits.LATA4 = 1;
  8182  0B71  0022               	movlb	2	; select bank2
  8183  0B72  160C               	bsf	12,4	;volatile
  8184                           
  8185                           ;spi.c: 8: return bytes_written;
  8186  0B73  087C               	movf	SPI_exchange@bytes_written,w
  8187  0B74  0008               	return
  8188  0B75                     __end_of_SPI_exchange:	
  8189                           
  8190                           	psect	text23
  8191  0CCB                     __ptext23:	
  8192 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8193 ;; Defined at:
  8194 ;;		line 91 in file "mcc_generated_files/spi.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  dataIn          1    wreg     PTR unsigned char 
  8197 ;;		 -> receive@rx_buf(15), buf(16), 
  8198 ;;  bufLen          1    1[COMMON] unsigned char 
  8199 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8200 ;;		 -> receive@rx_buf(15), buf(16), 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8203 ;;		 -> receive@rx_buf(15), buf(16), 
  8204 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      unsigned char 
  8207 ;; Registers used:
  8208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:        7 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    1
  8221 ;; This function calls:
  8222 ;;		_SPI_Exchange8bit
  8223 ;; This function is called by:
  8224 ;;		_SPI_exchange
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _SPI_Exchange8bitBuffer
  8230  0CCB                     _SPI_Exchange8bitBuffer:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8234                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8235  0CCB  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8236                           
  8237                           ;spi.c: 93: uint8_t bytesWritten = 0;
  8238  0CCC  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8239                           
  8240                           ;spi.c: 95: if(bufLen != 0)
  8241  0CCD  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8242  0CCE  1903               	btfsc	3,2
  8243  0CCF  2D17               	goto	l2043
  8244                           
  8245                           ;spi.c: 96: {
  8246                           ;spi.c: 97: if(dataIn != (0))
  8247  0CD0  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8248  0CD1  1D03               	btfss	3,2
  8249  0CD2  2CF9               	goto	l2031
  8250  0CD3  2CFE               	goto	l2033
  8251  0CD4                     l2023:	
  8252                           ;spi.c: 98: {
  8253                           ;spi.c: 99: while(bytesWritten < bufLen)
  8254                           
  8255                           
  8256                           ;spi.c: 100: {
  8257                           ;spi.c: 101: if(dataOut == (0))
  8258  0CD4  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8259  0CD5  1D03               	btfss	3,2
  8260  0CD6  2CE2               	goto	l2027
  8261                           
  8262                           ;spi.c: 102: {
  8263                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  8264  0CD7  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8265  0CD8  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8266  0CD9  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8267  0CDA  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8268  0CDB  0086               	movwf	6
  8269  0CDC  0187               	clrf	7
  8270  0CDD  0801               	movf	1,w
  8271  0CDE  318B  231A  318C   	fcall	_SPI_Exchange8bit
  8272                           
  8273                           ;spi.c: 104: }
  8274  0CE1  2CF5               	goto	l2029
  8275  0CE2                     l2027:	
  8276                           
  8277                           ;spi.c: 105: else
  8278                           ;spi.c: 106: {
  8279                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8280  0CE2  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8281  0CE3  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8282  0CE4  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8283  0CE5  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8284  0CE6  0086               	movwf	6
  8285  0CE7  0187               	clrf	7
  8286  0CE8  0801               	movf	1,w
  8287  0CE9  318B  231A  318C   	fcall	_SPI_Exchange8bit
  8288  0CEC  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8289  0CED  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8290  0CEE  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8291  0CEF  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  8292  0CF0  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  8293  0CF1  0086               	movwf	6
  8294  0CF2  0187               	clrf	7
  8295  0CF3  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8296  0CF4  0081               	movwf	1
  8297  0CF5                     l2029:	
  8298                           
  8299                           ;spi.c: 108: }
  8300                           ;spi.c: 110: bytesWritten++;
  8301  0CF5  3001               	movlw	1
  8302  0CF6  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8303  0CF7  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8304  0CF8  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8305  0CF9                     l2031:	
  8306  0CF9  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8307  0CFA  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8308  0CFB  1803               	btfsc	3,0
  8309  0CFC  2D17               	goto	l2043
  8310  0CFD  2CD4               	goto	l2023
  8311  0CFE                     l2033:	
  8312                           ;spi.c: 111: }
  8313                           ;spi.c: 112: }
  8314                           
  8315                           
  8316                           ;spi.c: 113: else
  8317                           ;spi.c: 114: {
  8318                           ;spi.c: 115: if(dataOut != (0))
  8319  0CFE  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8320  0CFF  1D03               	btfss	3,2
  8321  0D00  2D13               	goto	l2041
  8322  0D01  2D17               	goto	l2043
  8323  0D02                     l2037:	
  8324                           ;spi.c: 116: {
  8325                           ;spi.c: 117: while(bytesWritten < bufLen )
  8326                           
  8327                           
  8328                           ;spi.c: 118: {
  8329                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8330  0D02  3000               	movlw	0
  8331  0D03  318B  231A  318C   	fcall	_SPI_Exchange8bit
  8332  0D06  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8333  0D07  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8334  0D08  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8335  0D09  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8336  0D0A  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8337  0D0B  0086               	movwf	6
  8338  0D0C  0187               	clrf	7
  8339  0D0D  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8340  0D0E  0081               	movwf	1
  8341                           
  8342                           ;spi.c: 121: bytesWritten++;
  8343  0D0F  3001               	movlw	1
  8344  0D10  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8345  0D11  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8346  0D12  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8347  0D13                     l2041:	
  8348  0D13  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8349  0D14  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8350  0D15  1C03               	skipc
  8351  0D16  2D02               	goto	l2037
  8352  0D17                     l2043:	
  8353                           
  8354                           ;spi.c: 122: }
  8355                           ;spi.c: 123: }
  8356                           ;spi.c: 124: }
  8357                           ;spi.c: 125: }
  8358                           ;spi.c: 127: return bytesWritten;
  8359  0D17  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8360  0D18  0008               	return
  8361  0D19                     __end_of_SPI_Exchange8bitBuffer:	
  8362                           
  8363                           	psect	text24
  8364  0B1A                     __ptext24:	
  8365 ;; *************** function _SPI_Exchange8bit *****************
  8366 ;; Defined at:
  8367 ;;		line 77 in file "mcc_generated_files/spi.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  data            1    wreg     unsigned char 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  data            1    0[COMMON] unsigned char 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      unsigned char 
  8374 ;; Registers used:
  8375 ;;		wreg
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;Total ram usage:        1 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; This function calls:
  8388 ;;		Nothing
  8389 ;; This function is called by:
  8390 ;;		_SPI_Exchange8bitBuffer
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           
  8395                           ;psect for function _SPI_Exchange8bit
  8396  0B1A                     _SPI_Exchange8bit:	
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8400                           ;SPI_Exchange8bit@data stored from wreg
  8401  0B1A  00F0               	movwf	SPI_Exchange8bit@data
  8402                           
  8403                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  8404  0B1B  0024               	movlb	4	; select bank4
  8405  0B1C  1395               	bcf	21,7	;volatile
  8406                           
  8407                           ;spi.c: 82: SSP1BUF = data;
  8408  0B1D  0870               	movf	SPI_Exchange8bit@data,w
  8409  0B1E  0091               	movwf	17	;volatile
  8410  0B1F                     l113:	
  8411                           ;spi.c: 85: {
  8412                           
  8413                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  8414                           
  8415  0B1F  1C14               	btfss	20,0	;volatile
  8416  0B20  2B1F               	goto	l113
  8417                           
  8418                           ;spi.c: 86: }
  8419                           ;spi.c: 88: return (SSP1BUF);
  8420  0B21  0811               	movf	17,w	;volatile
  8421  0B22  0008               	return
  8422  0B23                     __end_of_SPI_Exchange8bit:	
  8423                           
  8424                           	psect	text25
  8425  0013                     __ptext25:	
  8426 ;; *************** function _atoi *****************
  8427 ;; Defined at:
  8428 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  s               1    wreg     PTR const unsigned char 
  8431 ;;		 -> main@buf(16), 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  s               1   13[COMMON] PTR const unsigned char 
  8434 ;;		 -> main@buf(16), 
  8435 ;;  a               2   11[COMMON] int 
  8436 ;;  sign            1   10[COMMON] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  2    6[COMMON] int 
  8439 ;; Registers used:
  8440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:        8 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    1
  8453 ;; This function calls:
  8454 ;;		___wmul
  8455 ;;		_isdigit
  8456 ;; This function is called by:
  8457 ;;		_main
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           
  8462                           ;psect for function _atoi
  8463  0013                     _atoi:	
  8464                           
  8465                           ;incstack = 0
  8466                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8467                           ;atoi@s stored from wreg
  8468  0013  00FD               	movwf	atoi@s
  8469  0014                     l2457:	
  8470  0014  087D               	movf	atoi@s,w
  8471  0015  0086               	movwf	6
  8472  0016  0187               	clrf	7
  8473  0017  3020               	movlw	32
  8474  0018  0601               	xorwf	1,w
  8475  0019  1D03               	btfss	3,2
  8476  001A  2820               	goto	l2459
  8477  001B                     l2455:	
  8478  001B  3001               	movlw	1
  8479  001C  00F8               	movwf	??_atoi
  8480  001D  0878               	movf	??_atoi,w
  8481  001E  07FD               	addwf	atoi@s,f
  8482  001F  2814               	goto	l2457
  8483  0020                     l2459:	
  8484  0020  087D               	movf	atoi@s,w
  8485  0021  0086               	movwf	6
  8486  0022  0187               	clrf	7
  8487  0023  3009               	movlw	9
  8488  0024  0601               	xorwf	1,w
  8489  0025  1903               	btfsc	3,2
  8490  0026  281B               	goto	l2455
  8491  0027  01FB               	clrf	atoi@a
  8492  0028  01FC               	clrf	atoi@a+1
  8493  0029  01FA               	clrf	atoi@sign
  8494  002A  087D               	movf	atoi@s,w
  8495  002B  0086               	movwf	6
  8496  002C  0187               	clrf	7
  8497  002D  302D               	movlw	45
  8498  002E  0601               	xorwf	1,w
  8499  002F  1D03               	btfss	3,2
  8500  0030  2836               	goto	l2467
  8501  0031  3001               	movlw	1
  8502  0032  00F8               	movwf	??_atoi
  8503  0033  0878               	movf	??_atoi,w
  8504  0034  07FA               	addwf	atoi@sign,f
  8505  0035  283D               	goto	l2473
  8506  0036                     l2467:	
  8507  0036  087D               	movf	atoi@s,w
  8508  0037  0086               	movwf	6
  8509  0038  0187               	clrf	7
  8510  0039  302B               	movlw	43
  8511  003A  0601               	xorwf	1,w
  8512  003B  1D03               	btfss	3,2
  8513  003C  2841               	goto	l2475
  8514  003D                     l2473:	
  8515  003D  3001               	movlw	1
  8516  003E  00F8               	movwf	??_atoi
  8517  003F  0878               	movf	??_atoi,w
  8518  0040  07FD               	addwf	atoi@s,f
  8519  0041                     l2475:	
  8520  0041  087D               	movf	atoi@s,w
  8521  0042  0086               	movwf	6
  8522  0043  0187               	clrf	7
  8523  0044  0801               	movf	1,w
  8524  0045  318B  2343  3180   	fcall	_isdigit
  8525  0048  1C03               	btfss	3,0
  8526  0049  2866               	goto	l2477
  8527  004A  087C               	movf	atoi@a+1,w
  8528  004B  00F1               	movwf	___wmul@multiplier+1
  8529  004C  087B               	movf	atoi@a,w
  8530  004D  00F0               	movwf	___wmul@multiplier
  8531  004E  300A               	movlw	10
  8532  004F  00F2               	movwf	___wmul@multiplicand
  8533  0050  3000               	movlw	0
  8534  0051  00F3               	movwf	___wmul@multiplicand+1
  8535  0052  318B  23A5  3180   	fcall	___wmul
  8536  0055  087D               	movf	atoi@s,w
  8537  0056  0086               	movwf	6
  8538  0057  0187               	clrf	7
  8539  0058  0801               	movf	1,w
  8540  0059  0770               	addwf	?___wmul,w
  8541  005A  00F8               	movwf	??_atoi
  8542  005B  0871               	movf	?___wmul+1,w
  8543  005C  1803               	skipnc
  8544  005D  0A71               	incf	?___wmul+1,w
  8545  005E  00F9               	movwf	??_atoi+1
  8546  005F  0878               	movf	??_atoi,w
  8547  0060  3ED0               	addlw	208
  8548  0061  00FB               	movwf	atoi@a
  8549  0062  30FF               	movlw	255
  8550  0063  3D79               	addwfc	??_atoi+1,w
  8551  0064  00FC               	movwf	atoi@a+1
  8552  0065  283D               	goto	l2473
  8553  0066                     l2477:	
  8554  0066  087A               	movf	atoi@sign,w
  8555  0067  1903               	btfsc	3,2
  8556  0068  2875               	goto	l2483
  8557  0069  097B               	comf	atoi@a,w
  8558  006A  00F8               	movwf	??_atoi
  8559  006B  097C               	comf	atoi@a+1,w
  8560  006C  00F9               	movwf	??_atoi+1
  8561  006D  0AF8               	incf	??_atoi,f
  8562  006E  1903               	skipnz
  8563  006F  0AF9               	incf	??_atoi+1,f
  8564  0070  0878               	movf	??_atoi,w
  8565  0071  00F6               	movwf	?_atoi
  8566  0072  0879               	movf	??_atoi+1,w
  8567  0073  00F7               	movwf	?_atoi+1
  8568  0074  0008               	return
  8569  0075                     l2483:	
  8570  0075  087C               	movf	atoi@a+1,w
  8571  0076  00F7               	movwf	?_atoi+1
  8572  0077  087B               	movf	atoi@a,w
  8573  0078  00F6               	movwf	?_atoi
  8574  0079  0008               	return
  8575  007A                     __end_of_atoi:	
  8576                           
  8577                           	psect	text26
  8578  0B43                     __ptext26:	
  8579 ;; *************** function _isdigit *****************
  8580 ;; Defined at:
  8581 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  c               1    wreg     unsigned char 
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;  c               1    1[COMMON] unsigned char 
  8586 ;; Return value:  Size  Location     Type
  8587 ;;		None               void
  8588 ;; Registers used:
  8589 ;;		wreg, status,2, status,0
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;Total ram usage:        2 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_printf
  8605 ;;		_atoi
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _isdigit
  8611  0B43                     _isdigit:	
  8612                           
  8613                           ;incstack = 0
  8614                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8615                           ;isdigit@c stored from wreg
  8616  0B43  00F1               	movwf	isdigit@c
  8617  0B44  01F0               	clrf	_isdigit$826
  8618  0B45  303A               	movlw	58
  8619  0B46  0271               	subwf	isdigit@c,w
  8620  0B47  1803               	skipnc
  8621  0B48  2B4F               	goto	l1949
  8622  0B49  3030               	movlw	48
  8623  0B4A  0271               	subwf	isdigit@c,w
  8624  0B4B  1C03               	skipc
  8625  0B4C  2B4F               	goto	l1949
  8626  0B4D  01F0               	clrf	_isdigit$826
  8627  0B4E  0AF0               	incf	_isdigit$826,f
  8628  0B4F                     l1949:	
  8629  0B4F  0C70               	rrf	_isdigit$826,w
  8630  0B50  0008               	return
  8631  0B51                     __end_of_isdigit:	
  8632                           
  8633                           	psect	text27
  8634  0BA5                     __ptext27:	
  8635 ;; *************** function ___wmul *****************
  8636 ;; Defined at:
  8637 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  multiplier      2    0[COMMON] unsigned int 
  8640 ;;  multiplicand    2    2[COMMON] unsigned int 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  product         2    4[COMMON] unsigned int 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  2    0[COMMON] unsigned int 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2, status,0
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;Total ram usage:        6 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; This function calls:
  8659 ;;		Nothing
  8660 ;; This function is called by:
  8661 ;;		_printf
  8662 ;;		_atoi
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function ___wmul
  8668  0BA5                     ___wmul:	
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8672  0BA5  01F4               	clrf	___wmul@product
  8673  0BA6  01F5               	clrf	___wmul@product+1
  8674  0BA7                     l1955:	
  8675  0BA7  1C70               	btfss	___wmul@multiplier,0
  8676  0BA8  2BAD               	goto	l571
  8677  0BA9  0872               	movf	___wmul@multiplicand,w
  8678  0BAA  07F4               	addwf	___wmul@product,f
  8679  0BAB  0873               	movf	___wmul@multiplicand+1,w
  8680  0BAC  3DF5               	addwfc	___wmul@product+1,f
  8681  0BAD                     l571:	
  8682  0BAD  3001               	movlw	1
  8683  0BAE                     u1395:	
  8684  0BAE  35F2               	lslf	___wmul@multiplicand,f
  8685  0BAF  0DF3               	rlf	___wmul@multiplicand+1,f
  8686  0BB0  0B89               	decfsz	9,f
  8687  0BB1  2BAE               	goto	u1395
  8688  0BB2  3001               	movlw	1
  8689  0BB3                     u1405:	
  8690  0BB3  36F1               	lsrf	___wmul@multiplier+1,f
  8691  0BB4  0CF0               	rrf	___wmul@multiplier,f
  8692  0BB5  0B89               	decfsz	9,f
  8693  0BB6  2BB3               	goto	u1405
  8694  0BB7  0870               	movf	___wmul@multiplier,w
  8695  0BB8  0471               	iorwf	___wmul@multiplier+1,w
  8696  0BB9  1D03               	btfss	3,2
  8697  0BBA  2BA7               	goto	l1955
  8698  0BBB  0875               	movf	___wmul@product+1,w
  8699  0BBC  00F1               	movwf	?___wmul+1
  8700  0BBD  0874               	movf	___wmul@product,w
  8701  0BBE  00F0               	movwf	?___wmul
  8702  0BBF  0008               	return
  8703  0BC0                     __end_of___wmul:	
  8704                           
  8705                           	psect	text28
  8706  0B51                     __ptext28:	
  8707 ;; *************** function _SYSTEM_Initialize *****************
  8708 ;; Defined at:
  8709 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0, pclath, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    1
  8730 ;; This function calls:
  8731 ;;		_EUSART_Initialize
  8732 ;;		_OSCILLATOR_Initialize
  8733 ;;		_PIN_MANAGER_Initialize
  8734 ;;		_SPI_Initialize
  8735 ;;		_WDT_Initialize
  8736 ;; This function is called by:
  8737 ;;		_main
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           
  8742                           ;psect for function _SYSTEM_Initialize
  8743  0B51                     _SYSTEM_Initialize:	
  8744                           
  8745                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8749  0B51  318B  2375  318B   	fcall	_PIN_MANAGER_Initialize
  8750                           
  8751                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8752  0B54  318B  2304  318B   	fcall	_OSCILLATOR_Initialize
  8753                           
  8754                           ;mcc.c: 75: WDT_Initialize();
  8755  0B57  318A  22F5  318B   	fcall	_WDT_Initialize
  8756                           
  8757                           ;mcc.c: 76: SPI_Initialize();
  8758  0B5A  318B  230B  318B   	fcall	_SPI_Initialize
  8759                           
  8760                           ;mcc.c: 77: EUSART_Initialize();
  8761  0B5D  318B  232D         	fcall	_EUSART_Initialize
  8762  0B5F  0008               	return
  8763  0B60                     __end_of_SYSTEM_Initialize:	
  8764                           
  8765                           	psect	text29
  8766  0AF5                     __ptext29:	
  8767 ;; *************** function _WDT_Initialize *****************
  8768 ;; Defined at:
  8769 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;		None
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;		None
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      void 
  8776 ;; Registers used:
  8777 ;;		wreg
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        0 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_SYSTEM_Initialize
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _WDT_Initialize
  8798  0AF5                     _WDT_Initialize:	
  8799                           
  8800                           ;mcc.c: 93: WDTCON = 0x16;
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _WDT_Initialize: [wreg]
  8804  0AF5  3016               	movlw	22
  8805  0AF6  0021               	movlb	1	; select bank1
  8806  0AF7  0097               	movwf	23	;volatile
  8807  0AF8  0008               	return
  8808  0AF9                     __end_of_WDT_Initialize:	
  8809                           
  8810                           	psect	text30
  8811  0B0B                     __ptext30:	
  8812 ;; *************** function _SPI_Initialize *****************
  8813 ;; Defined at:
  8814 ;;		line 63 in file "mcc_generated_files/spi.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;		None
  8817 ;; Auto vars:     Size  Location     Type
  8818 ;;		None
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      void 
  8821 ;; Registers used:
  8822 ;;		wreg, status,2
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;Total ram usage:        0 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; This function calls:
  8835 ;;		Nothing
  8836 ;; This function is called by:
  8837 ;;		_SYSTEM_Initialize
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function _SPI_Initialize
  8843  0B0B                     _SPI_Initialize:	
  8844                           
  8845                           ;spi.c: 68: SSP1STAT = 0x40;
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8849  0B0B  3040               	movlw	64
  8850  0B0C  0024               	movlb	4	; select bank4
  8851  0B0D  0094               	movwf	20	;volatile
  8852                           
  8853                           ;spi.c: 71: SSP1CON1 = 0x20;
  8854  0B0E  3020               	movlw	32
  8855  0B0F  0095               	movwf	21	;volatile
  8856                           
  8857                           ;spi.c: 74: SSP1ADD = 0x00;
  8858  0B10  0192               	clrf	18	;volatile
  8859  0B11  0008               	return
  8860  0B12                     __end_of_SPI_Initialize:	
  8861                           
  8862                           	psect	text31
  8863  0B75                     __ptext31:	
  8864 ;; *************** function _PIN_MANAGER_Initialize *****************
  8865 ;; Defined at:
  8866 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;		None
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;		None
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;Total ram usage:        0 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; This function calls:
  8887 ;;		Nothing
  8888 ;; This function is called by:
  8889 ;;		_SYSTEM_Initialize
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           
  8894                           ;psect for function _PIN_MANAGER_Initialize
  8895  0B75                     _PIN_MANAGER_Initialize:	
  8896                           
  8897                           ;pin_manager.c: 57: LATA = 0x10;
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8901  0B75  3010               	movlw	16
  8902  0B76  0022               	movlb	2	; select bank2
  8903  0B77  008C               	movwf	12	;volatile
  8904                           
  8905                           ;pin_manager.c: 58: LATC = 0x00;
  8906  0B78  018E               	clrf	14	;volatile
  8907                           
  8908                           ;pin_manager.c: 63: TRISA = 0x2F;
  8909  0B79  302F               	movlw	47
  8910  0B7A  0021               	movlb	1	; select bank1
  8911  0B7B  008C               	movwf	12	;volatile
  8912                           
  8913                           ;pin_manager.c: 64: TRISC = 0x32;
  8914  0B7C  3032               	movlw	50
  8915  0B7D  008E               	movwf	14	;volatile
  8916                           
  8917                           ;pin_manager.c: 69: ANSELC = 0x00;
  8918  0B7E  0023               	movlb	3	; select bank3
  8919  0B7F  018E               	clrf	14	;volatile
  8920                           
  8921                           ;pin_manager.c: 70: ANSELA = 0x07;
  8922  0B80  3007               	movlw	7
  8923  0B81  008C               	movwf	12	;volatile
  8924                           
  8925                           ;pin_manager.c: 75: WPUA = 0x00;
  8926  0B82  0024               	movlb	4	; select bank4
  8927  0B83  018C               	clrf	12	;volatile
  8928                           
  8929                           ;pin_manager.c: 76: WPUC = 0x30;
  8930  0B84  3030               	movlw	48
  8931  0B85  008E               	movwf	14	;volatile
  8932                           
  8933                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8934  0B86  0021               	movlb	1	; select bank1
  8935  0B87  1395               	bcf	21,7	;volatile
  8936                           
  8937                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8938  0B88  0022               	movlb	2	; select bank2
  8939  0B89  019E               	clrf	30	;volatile
  8940                           
  8941                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8942  0B8A  019D               	clrf	29	;volatile
  8943  0B8B  0008               	return
  8944  0B8C                     __end_of_PIN_MANAGER_Initialize:	
  8945                           
  8946                           	psect	text32
  8947  0B04                     __ptext32:	
  8948 ;; *************** function _OSCILLATOR_Initialize *****************
  8949 ;; Defined at:
  8950 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;		None
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      void 
  8957 ;; Registers used:
  8958 ;;		wreg, status,2
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:        0 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; This function calls:
  8971 ;;		Nothing
  8972 ;; This function is called by:
  8973 ;;		_SYSTEM_Initialize
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           
  8978                           ;psect for function _OSCILLATOR_Initialize
  8979  0B04                     _OSCILLATOR_Initialize:	
  8980                           
  8981                           ;mcc.c: 83: OSCCON = 0xE0;
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8985  0B04  30E0               	movlw	224
  8986  0B05  0021               	movlb	1	; select bank1
  8987  0B06  0099               	movwf	25	;volatile
  8988                           
  8989                           ;mcc.c: 85: OSCTUNE = 0x00;
  8990  0B07  0198               	clrf	24	;volatile
  8991                           
  8992                           ;mcc.c: 87: BORCON = 0x00;
  8993  0B08  0022               	movlb	2	; select bank2
  8994  0B09  0196               	clrf	22	;volatile
  8995  0B0A  0008               	return
  8996  0B0B                     __end_of_OSCILLATOR_Initialize:	
  8997                           
  8998                           	psect	text33
  8999  0B2D                     __ptext33:	
  9000 ;; *************** function _EUSART_Initialize *****************
  9001 ;; Defined at:
  9002 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      void 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;Total ram usage:        0 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; This function calls:
  9023 ;;		Nothing
  9024 ;; This function is called by:
  9025 ;;		_SYSTEM_Initialize
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           
  9030                           ;psect for function _EUSART_Initialize
  9031  0B2D                     _EUSART_Initialize:	
  9032                           
  9033                           ;eusart.c: 58: BAUDCON = 0x08;
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9037  0B2D  3008               	movlw	8
  9038  0B2E  0023               	movlb	3	; select bank3
  9039  0B2F  009F               	movwf	31	;volatile
  9040                           
  9041                           ;eusart.c: 61: RCSTA = 0x90;
  9042  0B30  3090               	movlw	144
  9043  0B31  009D               	movwf	29	;volatile
  9044                           
  9045                           ;eusart.c: 64: TXSTA = 0x24;
  9046  0B32  3024               	movlw	36
  9047  0B33  009E               	movwf	30	;volatile
  9048                           
  9049                           ;eusart.c: 67: SPBRGL = 0x33;
  9050  0B34  3033               	movlw	51
  9051  0B35  009B               	movwf	27	;volatile
  9052                           
  9053                           ;eusart.c: 70: SPBRGH = 0x00;
  9054  0B36  019C               	clrf	28	;volatile
  9055  0B37  0008               	return
  9056  0B38                     __end_of_EUSART_Initialize:	
  9057                           
  9058                           	psect	text34
  9059  0B23                     __ptext34:	
  9060 ;; *************** function _EUSART_Read *****************
  9061 ;; Defined at:
  9062 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;		None
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      unsigned char 
  9069 ;; Registers used:
  9070 ;;		wreg
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:        0 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_main
  9086 ;;		_getch
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           
  9091                           ;psect for function _EUSART_Read
  9092  0B23                     _EUSART_Read:	
  9093  0B23                     l51:	
  9094                           ;eusart.c: 78: {
  9095                           
  9096                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in _EUSART_Read: [wreg]
  9100                           
  9101  0B23  0020               	movlb	0	; select bank0
  9102  0B24  1E91               	btfss	17,5	;volatile
  9103  0B25  2B23               	goto	l51
  9104                           
  9105                           ;eusart.c: 79: }
  9106                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9107  0B26  0023               	movlb	3	; select bank3
  9108  0B27  1C9D               	btfss	29,1	;volatile
  9109  0B28  2B2B               	goto	l2361
  9110                           
  9111                           ;eusart.c: 83: {
  9112                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9113  0B29  121D               	bcf	29,4	;volatile
  9114                           
  9115                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9116  0B2A  161D               	bsf	29,4	;volatile
  9117  0B2B                     l2361:	
  9118                           
  9119                           ;eusart.c: 88: }
  9120                           ;eusart.c: 90: return RCREG;
  9121  0B2B  0819               	movf	25,w	;volatile
  9122  0B2C  0008               	return
  9123  0B2D                     __end_of_EUSART_Read:	
  9124  007E                     btemp	set	126	;btemp
  9125  007E                     wtemp0	set	126


Data Sizes:
    Strings     1172
    Constant    34
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     26      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    printf$635	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_63(CODE[17]), STR_62(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_61(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[21]), main@buf(BANK1[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_60(CODE[5]), STR_59(CODE[15]), STR_58(CODE[15]), STR_57(CODE[2]), 
		 -> STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[2]), STR_53(CODE[16]), 
		 -> STR_52(CODE[16]), STR_51(CODE[16]), STR_50(CODE[2]), STR_49(CODE[12]), 
		 -> STR_48(CODE[12]), STR_47(CODE[12]), STR_46(CODE[2]), STR_45(CODE[12]), 
		 -> STR_44(CODE[12]), STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[44]), 
		 -> STR_40(CODE[44]), STR_39(CODE[5]), STR_38(CODE[13]), STR_37(CODE[13]), 
		 -> STR_36(CODE[18]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[20]), 
		 -> STR_32(CODE[14]), STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[15]), 
		 -> STR_28(CODE[16]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[23]), 
		 -> STR_24(CODE[21]), STR_23(CODE[15]), STR_22(CODE[22]), STR_21(CODE[44]), 
		 -> STR_20(CODE[57]), STR_19(CODE[26]), STR_18(CODE[21]), STR_17(CODE[29]), 
		 -> STR_16(CODE[38]), STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), 
		 -> STR_12(CODE[58]), STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), 
		 -> STR_7(CODE[36]), STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@buf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  122571
                                             73 BANK0      2     2      0
                                              0 BANK1     26    26      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   26800
                                             69 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   15635
                                             43 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      8     4      4    6570
                                             35 BANK0      8     4      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   20354
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9402
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   11333
                                             39 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8623
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    6757
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11097
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11075
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8691
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    6263
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      9C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      9C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 07:46:52 2018

                          _SPI_Initialize 0B0B                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0043                                        l51 0B23  
                                      l58 0B13                   ?_SPI_Exchange8bitBuffer 0071  
                                      _nm 14B4                       ___wmul@multiplicand 0072  
                   __size_of_SPI_exchange 0015                               __CFG_LVP$ON 0000  
                                     l113 0B1F                                       l204 03CD  
                                     l205 03CF                                       l332 0294  
                                     l430 06A9                                       l431 0615  
                                     l432 0616                                       l360 0DB7  
                                     l352 0D9E                                       l329 0284  
                                     l353 0D99                                       l418 05CB  
                                     l355 0DAF                                       l356 0DAA  
                                     l453 06CF                                       l349 0D8D  
                                     l462 0728                                       l358 0DB3  
                                     l458 06F1                                       l571 0BAD  
                                     l487 07EF                  __end_of_can_status_check 0DC4  
                            __CFG_CPD$OFF 0000                                       _abc 14AE  
                                     _buf 00B4                                       _sid 00B2  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                     can_logging_mode@debug 0072  
                            ?_EUSART_Read 0070                                      l2001 0C10  
                                    l2003 0C1C                                      l2011 0C31  
                                    l2101 0666                                      l2023 0CD4  
                                    l2031 0CF9                                      l2007 0C28  
                                    l2103 0671                                      l2041 0D13  
                                    l2033 0CFE                                      l2113 0685  
                                    l2027 0CE2                                      l2043 0D17  
                                    l2203 07D9                                      l2107 067C  
                                    l2037 0D02                                      l2029 0CF5  
                                    l2205 07DD                                      l2125 06C3  
                                    l2061 05D9                                      l2053 05C6  
                                    l2213 0D2C                                      l2151 0713  
                                    l2207 05AA                                      l2223 0D3D  
                                    l2161 0744                                      l2153 071C  
                                    l2081 062B                                      l2073 0618  
                                    l2065 05E6                                      l2225 0D5B  
                                    l2163 0747                                      l2091 0648  
                                    l2059 05D0                                      l2227 0D62  
                                    l2181 0771                                      l2085 062D  
                                    l2341 0FE8                                      l2175 0760  
                                    l2095 064A                                      l2087 063B  
                                    l2361 0B2B                                      l2177 0764  
                                    l2185 0779                                      l2169 0751  
                                    l2097 0659                                      l2441 0DBD  
                                    l2195 07C6                                      l2187 077F  
                                    l2189 07A4                                      l2285 0DEC  
                                    l2533 0EBB                                      l2455 001B  
                                    l2607 013F                                      l2551 0F0F  
                                    l2473 003D                                      l2457 0014  
                                    l2633 0290                                      l2641 02A2  
                                    l2545 0EE7                                      l2449 0DC2  
                                    l2483 0075                                      l2475 0041  
                                    l2467 0036                                      l2459 0020  
                                    l2627 027E                                      l2477 0066  
                                    l2661 02EF                                      l2557 0F1E  
                                    l2821 04D0                                      l2813 04B1  
                                    l2805 048A                                      l2663 02C5  
                                    l2639 02A0                                      l2823 04D4  
                                    l2831 0582                                      l2727 03BF  
                                    l2577 0088                                      l2681 033D  
                                    l2665 02F5                                      l2825 04E0  
                                    l2817 04C8                                      l2753 0425  
                                    l2833 058B                                      l1955 0BA7  
                                    l2595 00E6                                      l2819 04CC  
                                    l2771 0448                                      l2835 058C  
                                    l2739 03EE                                      l1949 0B4F  
                                    l2589 00E1                                      l2693 0376  
                                    l2765 043C                                      l2749 040F  
                                    l2829 055D                                      l2791 046B  
                                    l2783 045E                                      l2775 044E  
                                    l2759 042E                                      l1985 0CBD  
                                    l1977 0C9F                                      l1979 0CAB  
                                    l2779 0457                                      l1989 0CC6  
                                    l2789 0469                                      l2799 0478  
                                    STR_1 148D                                      STR_2 149A  
                                    STR_3 14A0                                      STR_4 14A9  
                                    STR_5 1315                                      STR_6 14B1  
                                    STR_7 1213                                      STR_8 12DE  
                                    STR_9 10E6                                      u1405 0BB3  
                                    _LATA 010C                                      _LATC 010E  
                                    u1505 0C13                                      u1435 0CA2  
                                    u2404 0380                                      u1525 0C22  
                                    u2245 00A2                                      u2405 037F  
                                    u1455 0CAC                                      u1535 0C29  
                                    u1465 0CB6                                      u2185 0ECD  
                                    u1395 0BAE                                      u1475 0CBE  
                                    u2275 0100                                      u1725 06EA  
                                    u1665 0641                                      u2617 03AB  
                                    u1755 070C                                      u2627 0E1F  
                                    u2637 0E3F                                      u1935 0BD1  
                                    u1795 0737                                      u1974 0C3F  
                                    u1975 0C3E                                      u1985 0F6D  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _atoi 0013                                      _main 03A3  
                                    _mode 006B                           can_baudrate@bpr 0049  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    start 0002                    __end_of_SPI_Initialize 0B12  
                            _SPI_exchange 0B60                             __CFG_MCLRE$ON 0000  
                        can_send@data_buf 004B                __end_of_can_dump_registers 0256  
          __end_of_SPI_Exchange8bitBuffer 0D19                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0007             __end_of_OSCILLATOR_Initialize 0B0B  
                                   ?_atoi 0076                                     ?_main 0070  
                                   STR_10 1002                                     STR_11 10B0  
                                   STR_20 1077                                     STR_12 103D  
                                   STR_13 11C7                                     STR_21 1171  
                                   STR_30 1428                                     STR_22 129E  
                                   STR_14 119D                                     STR_31 141A  
                                   STR_23 13FD                                     STR_15 126E  
                                   STR_32 140C                                     STR_24 12B4  
                                   STR_16 11ED                                     STR_40 1145  
                                   STR_33 12F3                                     STR_25 1287  
                                   STR_17 1237                                     STR_41 1119  
                           __CFG_WDTE$OFF 0000                                     STR_50 14A9  
                                   STR_42 14A6                                     STR_34 134C  
                                   STR_26 133B                                     STR_18 12C9  
                                   STR_43 14A6                                     STR_51 139F  
                                   STR_35 136E                                     STR_27 135D  
                                   STR_19 1254                                     STR_60 14A6  
                                   STR_44 1340                                     STR_52 13BF  
                                   STR_28 137F                                     STR_36 1307  
                                   STR_45 1362                                     STR_61 1486  
                                   STR_37 1443                                     STR_29 13DF  
                                   STR_53 13CF                                     STR_54 14A9  
                                   STR_46 14A9                                     STR_38 1436  
                                   STR_62 1319                                     STR_39 14A6  
                                   STR_47 1450                                     STR_55 138F  
                                   STR_63 132A                                     STR_48 145C  
                                   STR_56 13AF                                     STR_57 14A9  
                                   STR_49 1468                                     STR_58 13EE  
                                   STR_59 13FD                      __size_of_can_set_sid 0024  
                         __end_of___lwdiv 0CCB                           __end_of___lwmod 0C36  
           can_status_check@bytes_written 0067                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISC 008E                                     _TXREG 019A  
                                   _TXSTA 019E                           SPI_exchange@buf 007D  
                         SPI_exchange@len 0078                           __end_of_dpowers 147E  
                          _WDT_Initialize 0AF5                           __end_of_isdigit 0B51  
                         __end_of_receive 1000                                     atoi@a 007B  
                        can_baudrate@mask 004A                                     atoi@s 007D  
                                   _putch 0AF9                                     main@c 00DB  
                                   main@n 00DA              ?_abort_pending_transmissions 0070  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                             receive@rx_buf 0051  
                         ?_SPI_Initialize 0070       __size_of_can_dump_masks_and_filters 00CC  
                         __initialization 07F0                     __size_of_can_baudrate 0033  
                            __end_of_atoi 007A                              __end_of_main 05A5  
                           main@echo_back 00D9                            ??_EUSART_Write 0070  
                  can_status_check@status 0068                                    ??_atoi 0078  
                                  ??_main 0069                     can_set_mask@mask_sidh 0053  
                   can_set_mask@mask_sidl 0054                   can_logging_mode@verbose 0070  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 0AF9  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 0B23  
                   __size_of_can_ope_mode 0057                     __size_of_can_set_mask 00A5  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                        __end_of_can_init 0EA6                              _can_baudrate 0C64  
                        __end_of_can_send 03A3                          receive_handler@i 004A  
                          __CFG_PWRTE$OFF 0000                                    ___wmul 0BA5  
                           _output_format 006D                            __CFG_STVREN$ON 0000  
                               ??___lwdiv 0074                                 ??___lwmod 007C  
                                  _printf 05A5                              _can_ope_mode 0DC4  
                            _can_set_mask 0EA6                                 ??_isdigit 0070  
                               ??_receive 004B                           ?_WDT_Initialize 0070  
               __size_of_can_logging_mode 000B                          __end_of_rxfnsidh 149A  
                        __end_of_txbnsidh 14AE                          __end_of_rxmnsidh 1002  
                    __size_of_EUSART_Read 000A                         _SYSTEM_Initialize 0B51  
               SPI_exchange@bytes_written 007C                   __end_of__initialization 07FD  
                  __size_of_read_register 0019                        ?_SYSTEM_Initialize 0070  
                      __size_of_can_abort 000F                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0070                            can_send@status 004A  
    __size_of_abort_pending_transmissions 0026                             __end_of_putch 0AFE  
                             receive@pbuf 0060        __end_of_can_dump_masks_and_filters 0146  
              _can_dump_masks_and_filters 007A                                __end_of_nm 14B6  
                       ?_can_status_check 0070                            _OPTION_REGbits 0095  
                      ??_can_status_check 0065                    can_abort@bytes_written 0048  
               __end_of_SYSTEM_Initialize 0B60                                   ??_putch 0071  
                              __pbssBANK0 006B                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 0B1A                          can_set_mask@mask 0048  
                              __pmaintext 03A3                                   ?___wmul 0070  
                                 _BAUDCON 019F                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0022  
                           _read_register 0B8C                                 ?_can_init 0047  
                               ?_can_send 0043                        _can_dump_registers 0146  
                __size_of_receive_handler 0055                                   _OSCTUNE 0098  
                       __end_of_can_abort 0013                                   _SSP1ADD 0212  
                                 _SSP1BUF 0211                       ?_can_dump_registers 0070  
                      __size_of_txf_clear 002E                          ??_SPI_Initialize 0070  
                         __size_of___wmul 001B                      ??_can_dump_registers 0043  
                           ??_can_set_sid 0072                                   ___lwdiv 0C97  
                                 ___lwmod 0C0A                            ?_read_register 0070  
                                 _handler 00B0                                   __ptext1 0D6E  
                                 __ptext2 0C36                                   __ptext3 0F4B  
                                 __ptext4 0D19                                   __ptext5 0EA6  
                                 __ptext6 0256                                   __ptext7 0B38  
                                 __ptext8 0E1B                                   __ptext9 0BC0  
                         __size_of_printf 024B                         __end_of_hexpowers 1486  
                                 _dpowers 1474                                ??_can_init 0049  
                   _OSCILLATOR_Initialize 0B04                                ??_can_send 0044  
                                 _isdigit 0B43                                   _receive 0F4B  
                ??_PIN_MANAGER_Initialize 0070                          _can_logging_mode 0B38  
                       ?_SPI_Exchange8bit 0070                                   main@cmd 00DC  
                  txf_clear@bytes_written 0023                                   main@buf 00C4  
                                 main@bpr 00D5                __size_of_SYSTEM_Initialize 000F  
                                 main@idx 00DD                                   main@sid 00D4  
                                 clrloop0 0AFF                      end_of_initialization 07FD  
                      ??_SPI_Exchange8bit 0070                      SPI_Exchange8bit@data 0070  
                          _operation_mode 006F                         _EUSART_Initialize 0B2D  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0042                                   printf@f 0022  
                              _printf$635 0034                         __end_of_txf_clear 0C64  
                     ??_EUSART_Initialize 0070                          ??_WDT_Initialize 0070  
                     __end_of_can_set_sid 0BE4                          __CFG_FOSC$INTOSC 0000  
            ??_can_dump_masks_and_filters 0043                     __size_of_EUSART_Write 0008  
                       ??_receive_handler 0047                 __end_of_EUSART_Initialize 0B38  
                             printf@width 0040                  ??_SPI_Exchange8bitBuffer 0073  
                              main@status 00D6  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0BC0  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0B12  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07F0  
                     start_initialization 07F0           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 14B1                          _can_set_mask$509 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0C0A  
             _abort_pending_transmissions 0BE4                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
               can_ope_mode@bytes_written 0045             ??_abort_pending_transmissions 0020  
                           ?_SPI_exchange 0078                                  ??___wmul 0074  
                           txf_clear@mask 0022                               _can_set_sid 0BC0  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00C4  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008B                         __size_of_can_send 014D  
                              receive@dlc 0063             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 0004                __size_of_EUSART_Initialize 000B  
                     __end_of_EUSART_Read 0B2D                           can_set_mask@cmd 0052  
                          ??_SPI_exchange 0079           __size_of_SPI_Exchange8bitBuffer 004E  
                        ___lwdiv@dividend 0072                    _PIN_MANAGER_Initialize 0B75  
                         can_set_sid@sidh 0075                           can_set_sid@sidl 0076  
                __end_of_can_logging_mode 0B43                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                                 _hexpowers 147E  
                        ___lwdiv@quotient 0075                            __size_of_putch 0005  
                              ?_can_abort 0070                             ?_can_baudrate 0070  
                          ___wmul@product 0074                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 0AFE  
                               _save_rxfn 00A0                                 _save_rxmn 00AC  
                                _PIR1bits 0011                 __size_of_SPI_Exchange8bit 0009  
                                _SSP1CON1 0215                                  _SSP1STAT 0214  
             __size_of_can_dump_registers 0110                             ?_can_ope_mode 0070  
                       ___wmul@multiplier 0070                             ?_can_set_mask 0047  
                  _SPI_Exchange8bitBuffer 0CCB                           _receive_handler 0D19  
                              printf@flag 003F                                printf@prec 0037  
                               _txf_clear 0C36                        receive_handler@dlc 0046  
                      receive_handler@buf 0045                        receive_handler@sid 0043  
                             _EUSART_Read 0B23                            ??_can_baudrate 0047  
                             can_send@dlc 0043                               can_send@len 0048  
                        _can_status_check 0D6E                   __size_of_SPI_Initialize 0007  
                 ??_OSCILLATOR_Initialize 0070                            ??_can_ope_mode 0043  
                        __size_of___lwdiv 0034                          __size_of___lwmod 002C  
                          ??_can_set_mask 004A              SPI_Exchange8bitBuffer@dataIn 0076  
                               receive@id 0061                               _isdigit$826 0070  
                    can_ope_mode@ope_mode 0046              SPI_Exchange8bitBuffer@bufLen 0071  
                                _can_init 0E1B                                  _can_send 0256  
                              txf_clear@n 0024                                ?_txf_clear 0070  
                    __end_of_SPI_exchange 0B75                          __size_of_isdigit 000E  
                        __size_of_receive 00B5                           ___lwdiv@divisor 0070  
                         ___lwdiv@counter 0077                                  __ptext10 0146  
                                __ptext11 0B8C                                  __ptext20 0C97  
                                __ptext12 007A                                  __ptext21 0BE4  
                                __ptext13 0C64                                  __ptext30 0B0B  
                                __ptext22 0B60                                  __ptext14 0004  
                                __ptext31 0B75                                  __ptext23 0CCB  
                                __ptext15 0DC4                                  __ptext32 0B04  
                                __ptext24 0B1A                                  __ptext16 05A5  
                                __ptext33 0B2D                                  __ptext25 0013  
                                __ptext17 0AF9                                  __ptext34 0B23  
                                __ptext26 0B43                                  __ptext18 0B12  
                                __ptext27 0BA5                                  __ptext19 0C0A  
                                __ptext28 0B51                                  __ptext29 0AF5  
                            _SSP1CON1bits 0215                               ??_can_abort 0047  
                           __size_of_atoi 0067                             __size_of_main 0202  
                                atoi@sign 007A                   __end_of_receive_handler 0D6E  
                            ?_can_set_sid 0070                                 printf@idx 0036  
                               printf@len 003A                                 printf@val 003D  
                            _SSP1STATbits 0214                                  main@mask 00D7  
                                _rxfnsidh 1494                     __end_of_read_register 0BA5  
                                _txbnsidh 14AB                                  _rxmnsidh 1000  
                          __pstringtext10 10B0                            __pstringtext11 10E6  
                          __pstringtext20 1254                            __pstringtext12 1119  
                          __pstringtext21 126E                            __pstringtext13 1145  
                          __pstringtext30 132A                            __pstringtext22 1287  
                          __pstringtext14 1171                            __pstringtext31 133B  
                          __pstringtext23 129E                            __pstringtext15 119D  
                          __pstringtext40 13CF                            __pstringtext32 134C  
                          __pstringtext24 12B4                            __pstringtext16 11C7  
                          __pstringtext41 13DF                            __pstringtext33 135D  
                          __pstringtext25 12C9                            __pstringtext17 11ED  
                          __pstringtext50 145C                            __pstringtext42 13EE  
                          __pstringtext34 136E                            __pstringtext26 12DE  
                          __pstringtext18 1213                            __pstringtext51 1468  
                          __pstringtext43 13FD                            __pstringtext35 137F  
                          __pstringtext27 12F3                            __pstringtext19 1237  
                          __pstringtext52 1486                            __pstringtext44 140C  
                          __pstringtext36 138F                            __pstringtext28 1307  
                          __pstringtext53 148D                            __pstringtext45 141A  
                          __pstringtext37 139F                            __pstringtext29 1319  
                          __pstringtext54 149A                            __pstringtext46 1428  
                          __pstringtext38 13AF                            __pstringtext55 14A0  
                          __pstringtext47 1436                            __pstringtext39 13BF  
                          __pstringtext56 14A6                            __pstringtext48 1443  
                          __pstringtext57 14B1                            __pstringtext49 1450  
                          __pstringtext58 0000                                  isdigit@c 0071  
                 __size_of_WDT_Initialize 0004                                  receive@n 0064  
                        ___lwmod@dividend 007A                   ?_PIN_MANAGER_Initialize 0070  
                       __CFG_CLKOUTEN$OFF 0000        SPI_Exchange8bitBuffer@bytesWritten 0077  
                       receive@bytes_read 0050                          _SPI_Exchange8bit 0B1A  
                   can_send@bytes_written 0049                                  printf@ap 003C  
                                printf@cp 0038                         ?_can_logging_mode 0070  
                 can_init@receive_handler 0047                        ??_can_logging_mode 0071  
                    __end_of_can_baudrate 0C97                             __pstringtext1 1474  
                           __pstringtext2 147E                             __pstringtext3 1494  
                           __pstringtext4 14AB                             __pstringtext5 14AE  
                           __pstringtext6 14B4                             __pstringtext7 1000  
                           __pstringtext8 103D                             __pstringtext9 1077  
                             ??_txf_clear 0020                           ___lwmod@divisor 0078  
                         ___lwmod@counter 007D                        EUSART_Write@txData 0070  
          __end_of_PIN_MANAGER_Initialize 0B8C                      __end_of_can_ope_mode 0E1B  
                    __end_of_can_set_mask 0F4B  
