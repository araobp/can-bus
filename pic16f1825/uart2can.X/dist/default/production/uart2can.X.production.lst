

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 07:14:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	stringtext13,global,class=STRCODE,delta=2
    17                           	psect	stringtext14,global,class=STRCODE,delta=2
    18                           	psect	stringtext15,global,class=STRCODE,delta=2
    19                           	psect	stringtext16,global,class=STRCODE,delta=2
    20                           	psect	stringtext17,global,class=STRCODE,delta=2
    21                           	psect	stringtext18,global,class=STRCODE,delta=2
    22                           	psect	stringtext19,global,class=STRCODE,delta=2
    23                           	psect	stringtext20,global,class=STRCODE,delta=2
    24                           	psect	stringtext21,global,class=STRCODE,delta=2
    25                           	psect	stringtext22,global,class=STRCODE,delta=2
    26                           	psect	stringtext23,global,class=STRCODE,delta=2
    27                           	psect	stringtext24,global,class=STRCODE,delta=2
    28                           	psect	stringtext25,global,class=STRCODE,delta=2
    29                           	psect	stringtext26,global,class=STRCODE,delta=2
    30                           	psect	stringtext27,global,class=STRCODE,delta=2
    31                           	psect	stringtext28,global,class=STRCODE,delta=2
    32                           	psect	stringtext29,global,class=STRCODE,delta=2
    33                           	psect	stringtext30,global,class=STRCODE,delta=2
    34                           	psect	stringtext31,global,class=STRCODE,delta=2
    35                           	psect	stringtext32,global,class=STRCODE,delta=2
    36                           	psect	stringtext33,global,class=STRCODE,delta=2
    37                           	psect	stringtext34,global,class=STRCODE,delta=2
    38                           	psect	stringtext35,global,class=STRCODE,delta=2
    39                           	psect	stringtext36,global,class=STRCODE,delta=2
    40                           	psect	stringtext37,global,class=STRCODE,delta=2
    41                           	psect	stringtext38,global,class=STRCODE,delta=2
    42                           	psect	stringtext39,global,class=STRCODE,delta=2
    43                           	psect	stringtext40,global,class=STRCODE,delta=2
    44                           	psect	stringtext41,global,class=STRCODE,delta=2
    45                           	psect	stringtext42,global,class=STRCODE,delta=2
    46                           	psect	stringtext43,global,class=STRCODE,delta=2
    47                           	psect	stringtext44,global,class=STRCODE,delta=2
    48                           	psect	stringtext45,global,class=STRCODE,delta=2
    49                           	psect	stringtext46,global,class=STRCODE,delta=2
    50                           	psect	stringtext47,global,class=STRCODE,delta=2
    51                           	psect	stringtext48,global,class=STRCODE,delta=2
    52                           	psect	stringtext49,global,class=STRCODE,delta=2
    53                           	psect	stringtext50,global,class=STRCODE,delta=2
    54                           	psect	stringtext51,global,class=STRCODE,delta=2
    55                           	psect	stringtext52,global,class=STRCODE,delta=2
    56                           	psect	stringtext53,global,class=STRCODE,delta=2
    57                           	psect	stringtext54,global,class=STRCODE,delta=2
    58                           	psect	stringtext55,global,class=STRCODE,delta=2
    59                           	psect	cinit,global,class=CODE,merge=1,delta=2
    60                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    61                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    62                           	psect	clrtext,global,class=CODE,delta=2
    63                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    65                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    66                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    67                           	psect	text1,local,class=CODE,merge=1,delta=2
    68                           	psect	text2,local,class=CODE,merge=1,delta=2
    69                           	psect	text3,local,class=CODE,merge=1,delta=2
    70                           	psect	text4,local,class=CODE,merge=1,delta=2
    71                           	psect	text5,local,class=CODE,merge=1,delta=2
    72                           	psect	text6,local,class=CODE,merge=1,delta=2
    73                           	psect	text7,local,class=CODE,merge=1,delta=2
    74                           	psect	text8,local,class=CODE,merge=1,delta=2
    75                           	psect	text9,local,class=CODE,merge=1,delta=2
    76                           	psect	text10,local,class=CODE,merge=1,delta=2
    77                           	psect	text11,local,class=CODE,merge=1,delta=2
    78                           	psect	text12,local,class=CODE,merge=1,delta=2
    79                           	psect	text13,local,class=CODE,merge=1,delta=2
    80                           	psect	text14,local,class=CODE,merge=1,delta=2
    81                           	psect	text15,local,class=CODE,merge=1,delta=2
    82                           	psect	text16,local,class=CODE,merge=1,delta=2
    83                           	psect	text17,local,class=CODE,merge=1,delta=2
    84                           	psect	text18,local,class=CODE,merge=1,delta=2
    85                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text21,local,class=CODE,merge=1,delta=2
    88                           	psect	text22,local,class=CODE,merge=1,delta=2
    89                           	psect	text23,local,class=CODE,merge=1,delta=2
    90                           	psect	text24,local,class=CODE,merge=1,delta=2
    91                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text28,local,class=CODE,merge=1,delta=2
    95                           	psect	text29,local,class=CODE,merge=1,delta=2
    96                           	psect	text30,local,class=CODE,merge=1,delta=2
    97                           	psect	text31,local,class=CODE,merge=1,delta=2
    98                           	psect	text32,local,class=CODE,merge=1,delta=2
    99                           	psect	text33,local,class=CODE,merge=1,delta=2
   100                           	psect	text34,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     
   103                           ; Version 1.45
   104                           ; Generated 16/11/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC16F1825 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  008C                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  020C                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038E                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  039A                     	;# 
   262  039C                     	;# 
   263  039D                     	;# 
   264  039E                     	;# 
   265  039F                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0098                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010E                     	;# 
   329  0111                     	;# 
   330  0112                     	;# 
   331  0113                     	;# 
   332  0114                     	;# 
   333  0115                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  0118                     	;# 
   337  0119                     	;# 
   338  011A                     	;# 
   339  011B                     	;# 
   340  011D                     	;# 
   341  011E                     	;# 
   342  018C                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019D                     	;# 
   359  019E                     	;# 
   360  019F                     	;# 
   361  020C                     	;# 
   362  020E                     	;# 
   363  0211                     	;# 
   364  0211                     	;# 
   365  0212                     	;# 
   366  0212                     	;# 
   367  0213                     	;# 
   368  0213                     	;# 
   369  0214                     	;# 
   370  0214                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0216                     	;# 
   376  0217                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038E                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  039A                     	;# 
   408  039C                     	;# 
   409  039D                     	;# 
   410  039E                     	;# 
   411  039F                     	;# 
   412  0415                     	;# 
   413  0416                     	;# 
   414  0417                     	;# 
   415  041C                     	;# 
   416  041D                     	;# 
   417  041E                     	;# 
   418  0FE4                     	;# 
   419  0FE5                     	;# 
   420  0FE6                     	;# 
   421  0FE7                     	;# 
   422  0FE8                     	;# 
   423  0FE9                     	;# 
   424  0FEA                     	;# 
   425  0FEB                     	;# 
   426  0FED                     	;# 
   427  0FEE                     	;# 
   428  0FEF                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0008                     	;# 
   438  0009                     	;# 
   439  000A                     	;# 
   440  000B                     	;# 
   441  000C                     	;# 
   442  000E                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  008C                     	;# 
   458  008E                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010E                     	;# 
   475  0111                     	;# 
   476  0112                     	;# 
   477  0113                     	;# 
   478  0114                     	;# 
   479  0115                     	;# 
   480  0116                     	;# 
   481  0117                     	;# 
   482  0118                     	;# 
   483  0119                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011D                     	;# 
   487  011E                     	;# 
   488  018C                     	;# 
   489  018E                     	;# 
   490  0191                     	;# 
   491  0191                     	;# 
   492  0192                     	;# 
   493  0193                     	;# 
   494  0193                     	;# 
   495  0193                     	;# 
   496  0194                     	;# 
   497  0195                     	;# 
   498  0196                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019E                     	;# 
   506  019F                     	;# 
   507  020C                     	;# 
   508  020E                     	;# 
   509  0211                     	;# 
   510  0211                     	;# 
   511  0212                     	;# 
   512  0212                     	;# 
   513  0213                     	;# 
   514  0213                     	;# 
   515  0214                     	;# 
   516  0214                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0215                     	;# 
   520  0216                     	;# 
   521  0216                     	;# 
   522  0217                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029D                     	;# 
   539  029E                     	;# 
   540  0311                     	;# 
   541  0311                     	;# 
   542  0312                     	;# 
   543  0313                     	;# 
   544  0318                     	;# 
   545  0318                     	;# 
   546  0319                     	;# 
   547  031A                     	;# 
   548  038C                     	;# 
   549  038E                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000E                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008E                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010E                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0113                     	;# 
   624  0114                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011A                     	;# 
   631  011B                     	;# 
   632  011D                     	;# 
   633  011E                     	;# 
   634  018C                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  029B                     	;# 
   683  029C                     	;# 
   684  029D                     	;# 
   685  029E                     	;# 
   686  0311                     	;# 
   687  0311                     	;# 
   688  0312                     	;# 
   689  0313                     	;# 
   690  0318                     	;# 
   691  0318                     	;# 
   692  0319                     	;# 
   693  031A                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  039A                     	;# 
   700  039C                     	;# 
   701  039D                     	;# 
   702  039E                     	;# 
   703  039F                     	;# 
   704  0415                     	;# 
   705  0416                     	;# 
   706  0417                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  001E                     	;# 
   748  001F                     	;# 
   749  008C                     	;# 
   750  008E                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010E                     	;# 
   767  0111                     	;# 
   768  0112                     	;# 
   769  0113                     	;# 
   770  0114                     	;# 
   771  0115                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  0118                     	;# 
   775  0119                     	;# 
   776  011A                     	;# 
   777  011B                     	;# 
   778  011D                     	;# 
   779  011E                     	;# 
   780  018C                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  0311                     	;# 
   833  0311                     	;# 
   834  0312                     	;# 
   835  0313                     	;# 
   836  0318                     	;# 
   837  0318                     	;# 
   838  0319                     	;# 
   839  031A                     	;# 
   840  038C                     	;# 
   841  038E                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  039A                     	;# 
   846  039C                     	;# 
   847  039D                     	;# 
   848  039E                     	;# 
   849  039F                     	;# 
   850  0415                     	;# 
   851  0416                     	;# 
   852  0417                     	;# 
   853  041C                     	;# 
   854  041D                     	;# 
   855  041E                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000E                     	;# 
   881  0011                     	;# 
   882  0012                     	;# 
   883  0013                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0016                     	;# 
   887  0017                     	;# 
   888  0018                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001E                     	;# 
   894  001F                     	;# 
   895  008C                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0097                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010E                     	;# 
   913  0111                     	;# 
   914  0112                     	;# 
   915  0113                     	;# 
   916  0114                     	;# 
   917  0115                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  0118                     	;# 
   921  0119                     	;# 
   922  011A                     	;# 
   923  011B                     	;# 
   924  011D                     	;# 
   925  011E                     	;# 
   926  018C                     	;# 
   927  018E                     	;# 
   928  0191                     	;# 
   929  0191                     	;# 
   930  0192                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0193                     	;# 
   934  0194                     	;# 
   935  0195                     	;# 
   936  0196                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019D                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  020C                     	;# 
   946  020E                     	;# 
   947  0211                     	;# 
   948  0211                     	;# 
   949  0212                     	;# 
   950  0212                     	;# 
   951  0213                     	;# 
   952  0213                     	;# 
   953  0214                     	;# 
   954  0214                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0216                     	;# 
   959  0216                     	;# 
   960  0217                     	;# 
   961  0217                     	;# 
   962  0291                     	;# 
   963  0291                     	;# 
   964  0292                     	;# 
   965  0293                     	;# 
   966  0294                     	;# 
   967  0295                     	;# 
   968  0295                     	;# 
   969  0296                     	;# 
   970  0298                     	;# 
   971  0298                     	;# 
   972  0299                     	;# 
   973  029A                     	;# 
   974  029B                     	;# 
   975  029C                     	;# 
   976  029D                     	;# 
   977  029E                     	;# 
   978  0311                     	;# 
   979  0311                     	;# 
   980  0312                     	;# 
   981  0313                     	;# 
   982  0318                     	;# 
   983  0318                     	;# 
   984  0319                     	;# 
   985  031A                     	;# 
   986  038C                     	;# 
   987  038E                     	;# 
   988  0391                     	;# 
   989  0392                     	;# 
   990  0393                     	;# 
   991  039A                     	;# 
   992  039C                     	;# 
   993  039D                     	;# 
   994  039E                     	;# 
   995  039F                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0FE4                     	;# 
  1003  0FE5                     	;# 
  1004  0FE6                     	;# 
  1005  0FE7                     	;# 
  1006  0FE8                     	;# 
  1007  0FE9                     	;# 
  1008  0FEA                     	;# 
  1009  0FEB                     	;# 
  1010  0FED                     	;# 
  1011  0FEE                     	;# 
  1012  0FEF                     	;# 
  1013  0000                     	;# 
  1014  0001                     	;# 
  1015  0002                     	;# 
  1016  0003                     	;# 
  1017  0004                     	;# 
  1018  0005                     	;# 
  1019  0006                     	;# 
  1020  0007                     	;# 
  1021  0008                     	;# 
  1022  0009                     	;# 
  1023  000A                     	;# 
  1024  000B                     	;# 
  1025  000C                     	;# 
  1026  000E                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001C                     	;# 
  1039  001E                     	;# 
  1040  001F                     	;# 
  1041  008C                     	;# 
  1042  008E                     	;# 
  1043  0091                     	;# 
  1044  0092                     	;# 
  1045  0093                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0098                     	;# 
  1050  0099                     	;# 
  1051  009A                     	;# 
  1052  009B                     	;# 
  1053  009B                     	;# 
  1054  009C                     	;# 
  1055  009D                     	;# 
  1056  009E                     	;# 
  1057  010C                     	;# 
  1058  010E                     	;# 
  1059  0111                     	;# 
  1060  0112                     	;# 
  1061  0113                     	;# 
  1062  0114                     	;# 
  1063  0115                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  0118                     	;# 
  1067  0119                     	;# 
  1068  011A                     	;# 
  1069  011B                     	;# 
  1070  011D                     	;# 
  1071  011E                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019D                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020E                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0291                     	;# 
  1109  0291                     	;# 
  1110  0292                     	;# 
  1111  0293                     	;# 
  1112  0294                     	;# 
  1113  0295                     	;# 
  1114  0295                     	;# 
  1115  0296                     	;# 
  1116  0298                     	;# 
  1117  0298                     	;# 
  1118  0299                     	;# 
  1119  029A                     	;# 
  1120  029B                     	;# 
  1121  029C                     	;# 
  1122  029D                     	;# 
  1123  029E                     	;# 
  1124  0311                     	;# 
  1125  0311                     	;# 
  1126  0312                     	;# 
  1127  0313                     	;# 
  1128  0318                     	;# 
  1129  0318                     	;# 
  1130  0319                     	;# 
  1131  031A                     	;# 
  1132  038C                     	;# 
  1133  038E                     	;# 
  1134  0391                     	;# 
  1135  0392                     	;# 
  1136  0393                     	;# 
  1137  039A                     	;# 
  1138  039C                     	;# 
  1139  039D                     	;# 
  1140  039E                     	;# 
  1141  039F                     	;# 
  1142  0415                     	;# 
  1143  0416                     	;# 
  1144  0417                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159                           
  1160                           	psect	stringtext1
  1161  1457                     __pstringtext1:	
  1162  1457                     _dpowers:	
  1163  1457  3401               	retlw	1
  1164  1458  3400               	retlw	0
  1165  1459  340A               	retlw	10
  1166  145A  3400               	retlw	0
  1167  145B  3464               	retlw	100
  1168  145C  3400               	retlw	0
  1169  145D  34E8               	retlw	232
  1170  145E  3403               	retlw	3
  1171  145F  3410               	retlw	16
  1172  1460  3427               	retlw	39
  1173  1461                     __end_of_dpowers:	
  1174                           
  1175                           	psect	stringtext2
  1176  1461                     __pstringtext2:	
  1177  1461                     _hexpowers:	
  1178  1461  3401               	retlw	1
  1179  1462  3400               	retlw	0
  1180  1463  3410               	retlw	16
  1181  1464  3400               	retlw	0
  1182  1465  3400               	retlw	0
  1183  1466  3401               	retlw	1
  1184  1467  3400               	retlw	0
  1185  1468  3410               	retlw	16
  1186  1469                     __end_of_hexpowers:	
  1187                           
  1188                           	psect	stringtext3
  1189  1470                     __pstringtext3:	
  1190  1470                     _rxfnsidh:	
  1191  1470  3400               	retlw	0
  1192  1471  3404               	retlw	4
  1193  1472  3408               	retlw	8
  1194  1473  3410               	retlw	16
  1195  1474  3414               	retlw	20
  1196  1475  3418               	retlw	24
  1197  1476                     __end_of_rxfnsidh:	
  1198                           
  1199                           	psect	stringtext4
  1200  147B                     __pstringtext4:	
  1201  147B                     _txbnsidh:	
  1202  147B  3431               	retlw	49
  1203  147C  3441               	retlw	65
  1204  147D  3451               	retlw	81
  1205  147E                     __end_of_txbnsidh:	
  1206                           
  1207                           	psect	stringtext5
  1208  147E                     __pstringtext5:	
  1209  147E                     _abc:	
  1210  147E  3400               	retlw	0
  1211  147F  3402               	retlw	2
  1212  1480  3404               	retlw	4
  1213  1481                     __end_of_abc:	
  1214                           
  1215                           	psect	stringtext6
  1216  1484                     __pstringtext6:	
  1217  1484                     _nm:	
  1218  1484  3400               	retlw	0
  1219  1485  3402               	retlw	2
  1220  1486                     __end_of_nm:	
  1221                           
  1222                           	psect	stringtext7
  1223  1000                     __pstringtext7:	
  1224  1000                     _rxmnsidh:	
  1225  1000  3420               	retlw	32
  1226  1001  3424               	retlw	36
  1227  1002                     __end_of_rxmnsidh:	
  1228  0011                     _PIR1bits	set	17
  1229  0095                     _OPTION_REGbits	set	149
  1230  008E                     _TRISC	set	142
  1231  008C                     _TRISA	set	140
  1232  0097                     _WDTCON	set	151
  1233  0098                     _OSCTUNE	set	152
  1234  0099                     _OSCCON	set	153
  1235  04D6                     _PLLR	set	1238
  1236  010C                     _LATAbits	set	268
  1237  010E                     _LATCbits	set	270
  1238  011D                     _APFCON0	set	285
  1239  011E                     _APFCON1	set	286
  1240  010E                     _LATC	set	270
  1241  010C                     _LATA	set	268
  1242  0116                     _BORCON	set	278
  1243  018C                     _ANSELA	set	396
  1244  018E                     _ANSELC	set	398
  1245  019A                     _TXREG	set	410
  1246  0199                     _RCREG	set	409
  1247  019D                     _RCSTAbits	set	413
  1248  019C                     _SPBRGH	set	412
  1249  019B                     _SPBRGL	set	411
  1250  019E                     _TXSTA	set	414
  1251  019D                     _RCSTA	set	413
  1252  019F                     _BAUDCON	set	415
  1253  0214                     _SSP1STATbits	set	532
  1254  0211                     _SSP1BUF	set	529
  1255  0215                     _SSP1CON1bits	set	533
  1256  0212                     _SSP1ADD	set	530
  1257  0215                     _SSP1CON1	set	533
  1258  0214                     _SSP1STAT	set	532
  1259  020E                     _WPUC	set	526
  1260  020C                     _WPUA	set	524
  1261  1002                     STR_5:	
  1262  1002  345B               	retlw	91	;'['
  1263  1003  3453               	retlw	83	;'S'
  1264  1004  3465               	retlw	101	;'e'
  1265  1005  3474               	retlw	116	;'t'
  1266  1006  3420               	retlw	32	;' '
  1267  1007  346F               	retlw	111	;'o'
  1268  1008  3475               	retlw	117	;'u'
  1269  1009  3474               	retlw	116	;'t'
  1270  100A  3470               	retlw	112	;'p'
  1271  100B  3475               	retlw	117	;'u'
  1272  100C  3474               	retlw	116	;'t'
  1273  100D  3420               	retlw	32	;' '
  1274  100E  346D               	retlw	109	;'m'
  1275  100F  346F               	retlw	111	;'o'
  1276  1010  3464               	retlw	100	;'d'
  1277  1011  3465               	retlw	101	;'e'
  1278  1012  345D               	retlw	93	;']'
  1279  1013  3420               	retlw	32	;' '
  1280  1014  347B               	retlw	123	;'{'
  1281  1015  3464               	retlw	100	;'d'
  1282  1016  3465               	retlw	101	;'e'
  1283  1017  3462               	retlw	98	;'b'
  1284  1018  3475               	retlw	117	;'u'
  1285  1019  3467               	retlw	103	;'g'
  1286  101A  343A               	retlw	58	;':'
  1287  101B  3420               	retlw	32	;' '
  1288  101C  3440               	retlw	64	;'@'
  1289  101D  3476               	retlw	118	;'v'
  1290  101E  3464               	retlw	100	;'d'
  1291  101F  342C               	retlw	44	;','
  1292  1020  3420               	retlw	32	;' '
  1293  1021  3476               	retlw	118	;'v'
  1294  1022  3465               	retlw	101	;'e'
  1295  1023  3472               	retlw	114	;'r'
  1296  1024  3462               	retlw	98	;'b'
  1297  1025  346F               	retlw	111	;'o'
  1298  1026  3473               	retlw	115	;'s'
  1299  1027  3465               	retlw	101	;'e'
  1300  1028  343A               	retlw	58	;':'
  1301  1029  3420               	retlw	32	;' '
  1302  102A  3440               	retlw	64	;'@'
  1303  102B  3476               	retlw	118	;'v'
  1304  102C  3476               	retlw	118	;'v'
  1305  102D  342C               	retlw	44	;','
  1306  102E  3420               	retlw	32	;' '
  1307  102F  346E               	retlw	110	;'n'
  1308  1030  346F               	retlw	111	;'o'
  1309  1031  3472               	retlw	114	;'r'
  1310  1032  346D               	retlw	109	;'m'
  1311  1033  3461               	retlw	97	;'a'
  1312  1034  346C               	retlw	108	;'l'
  1313  1035  343A               	retlw	58	;':'
  1314  1036  3420               	retlw	32	;' '
  1315  1037  3440               	retlw	64	;'@'
  1316  1038  3476               	retlw	118	;'v'
  1317  1039  346E               	retlw	110	;'n'
  1318  103A  347D               	retlw	125	;'}'
  1319  103B  340A               	retlw	10
  1320  103C  3400               	retlw	0
  1321                           
  1322                           	psect	stringtext8
  1323  103D                     __pstringtext8:	
  1324  103D                     STR_15:	
  1325  103D  345B               	retlw	91	;'['
  1326  103E  3453               	retlw	83	;'S'
  1327  103F  3465               	retlw	101	;'e'
  1328  1040  346E               	retlw	110	;'n'
  1329  1041  3464               	retlw	100	;'d'
  1330  1042  3420               	retlw	32	;' '
  1331  1043  346D               	retlw	109	;'m'
  1332  1044  3465               	retlw	101	;'e'
  1333  1045  3473               	retlw	115	;'s'
  1334  1046  3473               	retlw	115	;'s'
  1335  1047  3461               	retlw	97	;'a'
  1336  1048  3467               	retlw	103	;'g'
  1337  1049  3465               	retlw	101	;'e'
  1338  104A  3420               	retlw	32	;' '
  1339  104B  3462               	retlw	98	;'b'
  1340  104C  3465               	retlw	101	;'e'
  1341  104D  3467               	retlw	103	;'g'
  1342  104E  3469               	retlw	105	;'i'
  1343  104F  346E               	retlw	110	;'n'
  1344  1050  346E               	retlw	110	;'n'
  1345  1051  3469               	retlw	105	;'i'
  1346  1052  346E               	retlw	110	;'n'
  1347  1053  3467               	retlw	103	;'g'
  1348  1054  3420               	retlw	32	;' '
  1349  1055  3477               	retlw	119	;'w'
  1350  1056  3469               	retlw	105	;'i'
  1351  1057  3474               	retlw	116	;'t'
  1352  1058  3468               	retlw	104	;'h'
  1353  1059  3420               	retlw	32	;' '
  1354  105A  3427               	retlw	39	;'''
  1355  105B  3440               	retlw	64	;'@'
  1356  105C  3427               	retlw	39	;'''
  1357  105D  3420               	retlw	32	;' '
  1358  105E  3463               	retlw	99	;'c'
  1359  105F  3468               	retlw	104	;'h'
  1360  1060  3461               	retlw	97	;'a'
  1361  1061  3472               	retlw	114	;'r'
  1362  1062  3461               	retlw	97	;'a'
  1363  1063  3463               	retlw	99	;'c'
  1364  1064  3474               	retlw	116	;'t'
  1365  1065  3465               	retlw	101	;'e'
  1366  1066  3472               	retlw	114	;'r'
  1367  1067  345D               	retlw	93	;']'
  1368  1068  3420               	retlw	32	;' '
  1369  1069  3440               	retlw	64	;'@'
  1370  106A  343C               	retlw	60	;'<'
  1371  106B  3440               	retlw	64	;'@'
  1372  106C  346D               	retlw	109	;'m'
  1373  106D  3465               	retlw	101	;'e'
  1374  106E  3473               	retlw	115	;'s'
  1375  106F  3473               	retlw	115	;'s'
  1376  1070  3461               	retlw	97	;'a'
  1377  1071  3467               	retlw	103	;'g'
  1378  1072  3465               	retlw	101	;'e'
  1379  1073  343E               	retlw	62	;'>'
  1380  1074  340A               	retlw	10
  1381  1075  3400               	retlw	0
  1382                           
  1383                           	psect	stringtext9
  1384  1076                     __pstringtext9:	
  1385  1076                     STR_6:	
  1386  1076  345B               	retlw	91	;'['
  1387  1077  3445               	retlw	69	;'E'
  1388  1078  346E               	retlw	110	;'n'
  1389  1079  3461               	retlw	97	;'a'
  1390  107A  3462               	retlw	98	;'b'
  1391  107B  346C               	retlw	108	;'l'
  1392  107C  3465               	retlw	101	;'e'
  1393  107D  3420               	retlw	32	;' '
  1394  107E  346F               	retlw	111	;'o'
  1395  107F  3470               	retlw	112	;'p'
  1396  1080  3465               	retlw	101	;'e'
  1397  1081  3472               	retlw	114	;'r'
  1398  1082  3461               	retlw	97	;'a'
  1399  1083  3474               	retlw	116	;'t'
  1400  1084  3469               	retlw	105	;'i'
  1401  1085  346F               	retlw	111	;'o'
  1402  1086  346E               	retlw	110	;'n'
  1403  1087  3420               	retlw	32	;' '
  1404  1088  346D               	retlw	109	;'m'
  1405  1089  346F               	retlw	111	;'o'
  1406  108A  3464               	retlw	100	;'d'
  1407  108B  3465               	retlw	101	;'e'
  1408  108C  345D               	retlw	93	;']'
  1409  108D  3420               	retlw	32	;' '
  1410  108E  347B               	retlw	123	;'{'
  1411  108F  346C               	retlw	108	;'l'
  1412  1090  346F               	retlw	111	;'o'
  1413  1091  346F               	retlw	111	;'o'
  1414  1092  3470               	retlw	112	;'p'
  1415  1093  3462               	retlw	98	;'b'
  1416  1094  3461               	retlw	97	;'a'
  1417  1095  3463               	retlw	99	;'c'
  1418  1096  346B               	retlw	107	;'k'
  1419  1097  343A               	retlw	58	;':'
  1420  1098  3420               	retlw	32	;' '
  1421  1099  3440               	retlw	64	;'@'
  1422  109A  346F               	retlw	111	;'o'
  1423  109B  346C               	retlw	108	;'l'
  1424  109C  342C               	retlw	44	;','
  1425  109D  3420               	retlw	32	;' '
  1426  109E  346E               	retlw	110	;'n'
  1427  109F  346F               	retlw	111	;'o'
  1428  10A0  3472               	retlw	114	;'r'
  1429  10A1  346D               	retlw	109	;'m'
  1430  10A2  3461               	retlw	97	;'a'
  1431  10A3  346C               	retlw	108	;'l'
  1432  10A4  343A               	retlw	58	;':'
  1433  10A5  3420               	retlw	32	;' '
  1434  10A6  3440               	retlw	64	;'@'
  1435  10A7  346F               	retlw	111	;'o'
  1436  10A8  346E               	retlw	110	;'n'
  1437  10A9  347D               	retlw	125	;'}'
  1438  10AA  340A               	retlw	10
  1439  10AB  3400               	retlw	0
  1440                           
  1441                           	psect	stringtext10
  1442  10AC                     __pstringtext10:	
  1443  10AC                     STR_4:	
  1444  10AC  345B               	retlw	91	;'['
  1445  10AD  3453               	retlw	83	;'S'
  1446  10AE  3465               	retlw	101	;'e'
  1447  10AF  3474               	retlw	116	;'t'
  1448  10B0  3420               	retlw	32	;' '
  1449  10B1  3473               	retlw	115	;'s'
  1450  10B2  3474               	retlw	116	;'t'
  1451  10B3  3461               	retlw	97	;'a'
  1452  10B4  346E               	retlw	110	;'n'
  1453  10B5  3464               	retlw	100	;'d'
  1454  10B6  3461               	retlw	97	;'a'
  1455  10B7  3472               	retlw	114	;'r'
  1456  10B8  3464               	retlw	100	;'d'
  1457  10B9  3420               	retlw	32	;' '
  1458  10BA  3469               	retlw	105	;'i'
  1459  10BB  3464               	retlw	100	;'d'
  1460  10BC  3465               	retlw	101	;'e'
  1461  10BD  346E               	retlw	110	;'n'
  1462  10BE  3474               	retlw	116	;'t'
  1463  10BF  3469               	retlw	105	;'i'
  1464  10C0  3466               	retlw	102	;'f'
  1465  10C1  3469               	retlw	105	;'i'
  1466  10C2  3465               	retlw	101	;'e'
  1467  10C3  3472               	retlw	114	;'r'
  1468  10C4  345D               	retlw	93	;']'
  1469  10C5  3420               	retlw	32	;' '
  1470  10C6  3440               	retlw	64	;'@'
  1471  10C7  3469               	retlw	105	;'i'
  1472  10C8  343C               	retlw	60	;'<'
  1473  10C9  3473               	retlw	115	;'s'
  1474  10CA  3474               	retlw	116	;'t'
  1475  10CB  3461               	retlw	97	;'a'
  1476  10CC  346E               	retlw	110	;'n'
  1477  10CD  3464               	retlw	100	;'d'
  1478  10CE  3461               	retlw	97	;'a'
  1479  10CF  3472               	retlw	114	;'r'
  1480  10D0  3464               	retlw	100	;'d'
  1481  10D1  3420               	retlw	32	;' '
  1482  10D2  3469               	retlw	105	;'i'
  1483  10D3  3464               	retlw	100	;'d'
  1484  10D4  3465               	retlw	101	;'e'
  1485  10D5  346E               	retlw	110	;'n'
  1486  10D6  3474               	retlw	116	;'t'
  1487  10D7  3469               	retlw	105	;'i'
  1488  10D8  3466               	retlw	102	;'f'
  1489  10D9  3469               	retlw	105	;'i'
  1490  10DA  3465               	retlw	101	;'e'
  1491  10DB  3472               	retlw	114	;'r'
  1492  10DC  343E               	retlw	62	;'>'
  1493  10DD  340A               	retlw	10
  1494  10DE  3400               	retlw	0
  1495                           
  1496                           	psect	stringtext11
  1497  10DF                     __pstringtext11:	
  1498  10DF                     STR_36:	
  1499  10DF  3452               	retlw	82	;'R'
  1500  10E0  3458               	retlw	88	;'X'
  1501  10E1  3446               	retlw	70	;'F'
  1502  10E2  3425               	retlw	37	;'%'
  1503  10E3  3464               	retlw	100	;'d'
  1504  10E4  3420               	retlw	32	;' '
  1505  10E5  3452               	retlw	82	;'R'
  1506  10E6  3458               	retlw	88	;'X'
  1507  10E7  3446               	retlw	70	;'F'
  1508  10E8  3425               	retlw	37	;'%'
  1509  10E9  3464               	retlw	100	;'d'
  1510  10EA  3453               	retlw	83	;'S'
  1511  10EB  3449               	retlw	73	;'I'
  1512  10EC  3444               	retlw	68	;'D'
  1513  10ED  3448               	retlw	72	;'H'
  1514  10EE  3420               	retlw	32	;' '
  1515  10EF  3452               	retlw	82	;'R'
  1516  10F0  3458               	retlw	88	;'X'
  1517  10F1  3446               	retlw	70	;'F'
  1518  10F2  3425               	retlw	37	;'%'
  1519  10F3  3464               	retlw	100	;'d'
  1520  10F4  3453               	retlw	83	;'S'
  1521  10F5  3449               	retlw	73	;'I'
  1522  10F6  3444               	retlw	68	;'D'
  1523  10F7  344C               	retlw	76	;'L'
  1524  10F8  343A               	retlw	58	;':'
  1525  10F9  3420               	retlw	32	;' '
  1526  10FA  3425               	retlw	37	;'%'
  1527  10FB  3434               	retlw	52	;'4'
  1528  10FC  3464               	retlw	100	;'d'
  1529  10FD  3420               	retlw	32	;' '
  1530  10FE  3425               	retlw	37	;'%'
  1531  10FF  3430               	retlw	48	;'0'
  1532  1100  3432               	retlw	50	;'2'
  1533  1101  3458               	retlw	88	;'X'
  1534  1102  3468               	retlw	104	;'h'
  1535  1103  3420               	retlw	32	;' '
  1536  1104  3425               	retlw	37	;'%'
  1537  1105  3430               	retlw	48	;'0'
  1538  1106  3432               	retlw	50	;'2'
  1539  1107  3458               	retlw	88	;'X'
  1540  1108  3468               	retlw	104	;'h'
  1541  1109  340A               	retlw	10
  1542  110A  3400               	retlw	0
  1543                           
  1544                           	psect	stringtext12
  1545  110B                     __pstringtext12:	
  1546  110B                     STR_35:	
  1547  110B  3452               	retlw	82	;'R'
  1548  110C  3458               	retlw	88	;'X'
  1549  110D  344D               	retlw	77	;'M'
  1550  110E  3425               	retlw	37	;'%'
  1551  110F  3464               	retlw	100	;'d'
  1552  1110  3420               	retlw	32	;' '
  1553  1111  3452               	retlw	82	;'R'
  1554  1112  3458               	retlw	88	;'X'
  1555  1113  344D               	retlw	77	;'M'
  1556  1114  3425               	retlw	37	;'%'
  1557  1115  3464               	retlw	100	;'d'
  1558  1116  3453               	retlw	83	;'S'
  1559  1117  3449               	retlw	73	;'I'
  1560  1118  3444               	retlw	68	;'D'
  1561  1119  3448               	retlw	72	;'H'
  1562  111A  3420               	retlw	32	;' '
  1563  111B  3452               	retlw	82	;'R'
  1564  111C  3458               	retlw	88	;'X'
  1565  111D  344D               	retlw	77	;'M'
  1566  111E  3425               	retlw	37	;'%'
  1567  111F  3464               	retlw	100	;'d'
  1568  1120  3453               	retlw	83	;'S'
  1569  1121  3449               	retlw	73	;'I'
  1570  1122  3444               	retlw	68	;'D'
  1571  1123  344C               	retlw	76	;'L'
  1572  1124  343A               	retlw	58	;':'
  1573  1125  3420               	retlw	32	;' '
  1574  1126  3425               	retlw	37	;'%'
  1575  1127  3434               	retlw	52	;'4'
  1576  1128  3464               	retlw	100	;'d'
  1577  1129  3420               	retlw	32	;' '
  1578  112A  3425               	retlw	37	;'%'
  1579  112B  3430               	retlw	48	;'0'
  1580  112C  3432               	retlw	50	;'2'
  1581  112D  3458               	retlw	88	;'X'
  1582  112E  3468               	retlw	104	;'h'
  1583  112F  3420               	retlw	32	;' '
  1584  1130  3425               	retlw	37	;'%'
  1585  1131  3430               	retlw	48	;'0'
  1586  1132  3432               	retlw	50	;'2'
  1587  1133  3458               	retlw	88	;'X'
  1588  1134  3468               	retlw	104	;'h'
  1589  1135  340A               	retlw	10
  1590  1136  3400               	retlw	0
  1591                           
  1592                           	psect	stringtext13
  1593  1137                     __pstringtext13:	
  1594  1137                     STR_16:	
  1595  1137  345B               	retlw	91	;'['
  1596  1138  3452               	retlw	82	;'R'
  1597  1139  3465               	retlw	101	;'e'
  1598  113A  3463               	retlw	99	;'c'
  1599  113B  3465               	retlw	101	;'e'
  1600  113C  3469               	retlw	105	;'i'
  1601  113D  3476               	retlw	118	;'v'
  1602  113E  3465               	retlw	101	;'e'
  1603  113F  3420               	retlw	32	;' '
  1604  1140  346D               	retlw	109	;'m'
  1605  1141  3465               	retlw	101	;'e'
  1606  1142  3473               	retlw	115	;'s'
  1607  1143  3473               	retlw	115	;'s'
  1608  1144  3461               	retlw	97	;'a'
  1609  1145  3467               	retlw	103	;'g'
  1610  1146  3465               	retlw	101	;'e'
  1611  1147  345D               	retlw	93	;']'
  1612  1148  3420               	retlw	32	;' '
  1613  1149  343C               	retlw	60	;'<'
  1614  114A  346D               	retlw	109	;'m'
  1615  114B  3465               	retlw	101	;'e'
  1616  114C  3473               	retlw	115	;'s'
  1617  114D  3473               	retlw	115	;'s'
  1618  114E  3461               	retlw	97	;'a'
  1619  114F  3467               	retlw	103	;'g'
  1620  1150  3465               	retlw	101	;'e'
  1621  1151  343E               	retlw	62	;'>'
  1622  1152  3420               	retlw	32	;' '
  1623  1153  3477               	retlw	119	;'w'
  1624  1154  3469               	retlw	105	;'i'
  1625  1155  346C               	retlw	108	;'l'
  1626  1156  346C               	retlw	108	;'l'
  1627  1157  3420               	retlw	32	;' '
  1628  1158  3462               	retlw	98	;'b'
  1629  1159  3465               	retlw	101	;'e'
  1630  115A  3420               	retlw	32	;' '
  1631  115B  346F               	retlw	111	;'o'
  1632  115C  3475               	retlw	117	;'u'
  1633  115D  3474               	retlw	116	;'t'
  1634  115E  3470               	retlw	112	;'p'
  1635  115F  3475               	retlw	117	;'u'
  1636  1160  3474               	retlw	116	;'t'
  1637  1161  340A               	retlw	10
  1638  1162  3400               	retlw	0
  1639                           
  1640                           	psect	stringtext14
  1641  1163                     __pstringtext14:	
  1642  1163                     STR_9:	
  1643  1163  345B               	retlw	91	;'['
  1644  1164  3453               	retlw	83	;'S'
  1645  1165  3465               	retlw	101	;'e'
  1646  1166  3474               	retlw	116	;'t'
  1647  1167  3420               	retlw	32	;' '
  1648  1168  3466               	retlw	102	;'f'
  1649  1169  3469               	retlw	105	;'i'
  1650  116A  346C               	retlw	108	;'l'
  1651  116B  3474               	retlw	116	;'t'
  1652  116C  3465               	retlw	101	;'e'
  1653  116D  3472               	retlw	114	;'r'
  1654  116E  345D               	retlw	93	;']'
  1655  116F  3420               	retlw	32	;' '
  1656  1170  3440               	retlw	64	;'@'
  1657  1171  3466               	retlw	102	;'f'
  1658  1172  343C               	retlw	60	;'<'
  1659  1173  346E               	retlw	110	;'n'
  1660  1174  343E               	retlw	62	;'>'
  1661  1175  343C               	retlw	60	;'<'
  1662  1176  3466               	retlw	102	;'f'
  1663  1177  3469               	retlw	105	;'i'
  1664  1178  346C               	retlw	108	;'l'
  1665  1179  3474               	retlw	116	;'t'
  1666  117A  3465               	retlw	101	;'e'
  1667  117B  3472               	retlw	114	;'r'
  1668  117C  3428               	retlw	40	;'('
  1669  117D  3453               	retlw	83	;'S'
  1670  117E  3449               	retlw	73	;'I'
  1671  117F  3444               	retlw	68	;'D'
  1672  1180  3431               	retlw	49	;'1'
  1673  1181  3430               	retlw	48	;'0'
  1674  1182  3420               	retlw	32	;' '
  1675  1183  347E               	retlw	126	;'~'
  1676  1184  3420               	retlw	32	;' '
  1677  1185  3453               	retlw	83	;'S'
  1678  1186  3449               	retlw	73	;'I'
  1679  1187  3444               	retlw	68	;'D'
  1680  1188  3430               	retlw	48	;'0'
  1681  1189  3429               	retlw	41	;')'
  1682  118A  343E               	retlw	62	;'>'
  1683  118B  340A               	retlw	10
  1684  118C  3400               	retlw	0
  1685                           
  1686                           	psect	stringtext15
  1687  118D                     __pstringtext15:	
  1688  118D                     STR_8:	
  1689  118D  345B               	retlw	91	;'['
  1690  118E  3453               	retlw	83	;'S'
  1691  118F  3465               	retlw	101	;'e'
  1692  1190  3474               	retlw	116	;'t'
  1693  1191  3420               	retlw	32	;' '
  1694  1192  346D               	retlw	109	;'m'
  1695  1193  3461               	retlw	97	;'a'
  1696  1194  3473               	retlw	115	;'s'
  1697  1195  346B               	retlw	107	;'k'
  1698  1196  345D               	retlw	93	;']'
  1699  1197  3420               	retlw	32	;' '
  1700  1198  3440               	retlw	64	;'@'
  1701  1199  346D               	retlw	109	;'m'
  1702  119A  343C               	retlw	60	;'<'
  1703  119B  346E               	retlw	110	;'n'
  1704  119C  343E               	retlw	62	;'>'
  1705  119D  343C               	retlw	60	;'<'
  1706  119E  346D               	retlw	109	;'m'
  1707  119F  3461               	retlw	97	;'a'
  1708  11A0  3473               	retlw	115	;'s'
  1709  11A1  346B               	retlw	107	;'k'
  1710  11A2  3428               	retlw	40	;'('
  1711  11A3  3453               	retlw	83	;'S'
  1712  11A4  3449               	retlw	73	;'I'
  1713  11A5  3444               	retlw	68	;'D'
  1714  11A6  3431               	retlw	49	;'1'
  1715  11A7  3430               	retlw	48	;'0'
  1716  11A8  3420               	retlw	32	;' '
  1717  11A9  347E               	retlw	126	;'~'
  1718  11AA  3420               	retlw	32	;' '
  1719  11AB  3453               	retlw	83	;'S'
  1720  11AC  3449               	retlw	73	;'I'
  1721  11AD  3444               	retlw	68	;'D'
  1722  11AE  3430               	retlw	48	;'0'
  1723  11AF  3429               	retlw	41	;')'
  1724  11B0  343E               	retlw	62	;'>'
  1725  11B1  340A               	retlw	10
  1726  11B2  3400               	retlw	0
  1727                           
  1728                           	psect	stringtext16
  1729  11B3                     __pstringtext16:	
  1730  11B3                     STR_11:	
  1731  11B3  345B               	retlw	91	;'['
  1732  11B4  3441               	retlw	65	;'A'
  1733  11B5  3462               	retlw	98	;'b'
  1734  11B6  346F               	retlw	111	;'o'
  1735  11B7  3472               	retlw	114	;'r'
  1736  11B8  3474               	retlw	116	;'t'
  1737  11B9  3420               	retlw	32	;' '
  1738  11BA  3461               	retlw	97	;'a'
  1739  11BB  346C               	retlw	108	;'l'
  1740  11BC  346C               	retlw	108	;'l'
  1741  11BD  3420               	retlw	32	;' '
  1742  11BE  3470               	retlw	112	;'p'
  1743  11BF  3465               	retlw	101	;'e'
  1744  11C0  346E               	retlw	110	;'n'
  1745  11C1  3464               	retlw	100	;'d'
  1746  11C2  3469               	retlw	105	;'i'
  1747  11C3  346E               	retlw	110	;'n'
  1748  11C4  3467               	retlw	103	;'g'
  1749  11C5  3420               	retlw	32	;' '
  1750  11C6  3474               	retlw	116	;'t'
  1751  11C7  3472               	retlw	114	;'r'
  1752  11C8  3461               	retlw	97	;'a'
  1753  11C9  346E               	retlw	110	;'n'
  1754  11CA  3473               	retlw	115	;'s'
  1755  11CB  346D               	retlw	109	;'m'
  1756  11CC  3469               	retlw	105	;'i'
  1757  11CD  3473               	retlw	115	;'s'
  1758  11CE  3473               	retlw	115	;'s'
  1759  11CF  3469               	retlw	105	;'i'
  1760  11D0  346F               	retlw	111	;'o'
  1761  11D1  346E               	retlw	110	;'n'
  1762  11D2  3473               	retlw	115	;'s'
  1763  11D3  345D               	retlw	93	;']'
  1764  11D4  3420               	retlw	32	;' '
  1765  11D5  3440               	retlw	64	;'@'
  1766  11D6  3461               	retlw	97	;'a'
  1767  11D7  340A               	retlw	10
  1768  11D8  3400               	retlw	0
  1769                           
  1770                           	psect	stringtext17
  1771  11D9                     __pstringtext17:	
  1772  11D9                     STR_2:	
  1773  11D9  342F               	retlw	47	;'/'
  1774  11DA  342F               	retlw	47	;'/'
  1775  11DB  342F               	retlw	47	;'/'
  1776  11DC  3420               	retlw	32	;' '
  1777  11DD  3455               	retlw	85	;'U'
  1778  11DE  3441               	retlw	65	;'A'
  1779  11DF  3452               	retlw	82	;'R'
  1780  11E0  3454               	retlw	84	;'T'
  1781  11E1  3432               	retlw	50	;'2'
  1782  11E2  3443               	retlw	67	;'C'
  1783  11E3  3441               	retlw	65	;'A'
  1784  11E4  344E               	retlw	78	;'N'
  1785  11E5  3420               	retlw	32	;' '
  1786  11E6  3448               	retlw	72	;'H'
  1787  11E7  3445               	retlw	69	;'E'
  1788  11E8  344C               	retlw	76	;'L'
  1789  11E9  3450               	retlw	80	;'P'
  1790  11EA  3420               	retlw	32	;' '
  1791  11EB  3428               	retlw	40	;'('
  1792  11EC  3476               	retlw	118	;'v'
  1793  11ED  3465               	retlw	101	;'e'
  1794  11EE  3472               	retlw	114	;'r'
  1795  11EF  3473               	retlw	115	;'s'
  1796  11F0  3469               	retlw	105	;'i'
  1797  11F1  346F               	retlw	111	;'o'
  1798  11F2  346E               	retlw	110	;'n'
  1799  11F3  3420               	retlw	32	;' '
  1800  11F4  3425               	retlw	37	;'%'
  1801  11F5  3473               	retlw	115	;'s'
  1802  11F6  3429               	retlw	41	;')'
  1803  11F7  3420               	retlw	32	;' '
  1804  11F8  342F               	retlw	47	;'/'
  1805  11F9  342F               	retlw	47	;'/'
  1806  11FA  342F               	retlw	47	;'/'
  1807  11FB  340A               	retlw	10
  1808  11FC  3400               	retlw	0
  1809                           
  1810                           	psect	stringtext18
  1811  11FD                     __pstringtext18:	
  1812  11FD                     STR_12:	
  1813  11FD  345B               	retlw	91	;'['
  1814  11FE  3444               	retlw	68	;'D'
  1815  11FF  3475               	retlw	117	;'u'
  1816  1200  346D               	retlw	109	;'m'
  1817  1201  3470               	retlw	112	;'p'
  1818  1202  3420               	retlw	32	;' '
  1819  1203  346D               	retlw	109	;'m'
  1820  1204  3461               	retlw	97	;'a'
  1821  1205  3473               	retlw	115	;'s'
  1822  1206  346B               	retlw	107	;'k'
  1823  1207  3473               	retlw	115	;'s'
  1824  1208  3420               	retlw	32	;' '
  1825  1209  3461               	retlw	97	;'a'
  1826  120A  346E               	retlw	110	;'n'
  1827  120B  3464               	retlw	100	;'d'
  1828  120C  3420               	retlw	32	;' '
  1829  120D  3466               	retlw	102	;'f'
  1830  120E  3469               	retlw	105	;'i'
  1831  120F  346C               	retlw	108	;'l'
  1832  1210  3474               	retlw	116	;'t'
  1833  1211  3465               	retlw	101	;'e'
  1834  1212  3472               	retlw	114	;'r'
  1835  1213  3473               	retlw	115	;'s'
  1836  1214  345D               	retlw	93	;']'
  1837  1215  3420               	retlw	32	;' '
  1838  1216  3440               	retlw	64	;'@'
  1839  1217  3446               	retlw	70	;'F'
  1840  1218  340A               	retlw	10
  1841  1219  3400               	retlw	0
  1842                           
  1843                           	psect	stringtext19
  1844  121A                     __pstringtext19:	
  1845  121A                     STR_7:	
  1846  121A  3420               	retlw	32	;' '
  1847  121B  3420               	retlw	32	;' '
  1848  121C  3420               	retlw	32	;' '
  1849  121D  3420               	retlw	32	;' '
  1850  121E  3420               	retlw	32	;' '
  1851  121F  3477               	retlw	119	;'w'
  1852  1220  3469               	retlw	105	;'i'
  1853  1221  3474               	retlw	116	;'t'
  1854  1222  3468               	retlw	104	;'h'
  1855  1223  3420               	retlw	32	;' '
  1856  1224  3453               	retlw	83	;'S'
  1857  1225  3449               	retlw	73	;'I'
  1858  1226  3444               	retlw	68	;'D'
  1859  1227  343A               	retlw	58	;':'
  1860  1228  3420               	retlw	32	;' '
  1861  1229  3440               	retlw	64	;'@'
  1862  122A  346F               	retlw	111	;'o'
  1863  122B  346C               	retlw	108	;'l'
  1864  122C  3473               	retlw	115	;'s'
  1865  122D  3420               	retlw	32	;' '
  1866  122E  346F               	retlw	111	;'o'
  1867  122F  3472               	retlw	114	;'r'
  1868  1230  3420               	retlw	32	;' '
  1869  1231  3440               	retlw	64	;'@'
  1870  1232  346F               	retlw	111	;'o'
  1871  1233  346E               	retlw	110	;'n'
  1872  1234  3473               	retlw	115	;'s'
  1873  1235  340A               	retlw	10
  1874  1236  3400               	retlw	0
  1875                           
  1876                           	psect	stringtext20
  1877  1237                     __pstringtext20:	
  1878  1237                     STR_14:	
  1879  1237  345B               	retlw	91	;'['
  1880  1238  3453               	retlw	83	;'S'
  1881  1239  3465               	retlw	101	;'e'
  1882  123A  346E               	retlw	110	;'n'
  1883  123B  3464               	retlw	100	;'d'
  1884  123C  3420               	retlw	32	;' '
  1885  123D  346D               	retlw	109	;'m'
  1886  123E  3465               	retlw	101	;'e'
  1887  123F  3473               	retlw	115	;'s'
  1888  1240  3473               	retlw	115	;'s'
  1889  1241  3461               	retlw	97	;'a'
  1890  1242  3467               	retlw	103	;'g'
  1891  1243  3465               	retlw	101	;'e'
  1892  1244  345D               	retlw	93	;']'
  1893  1245  3420               	retlw	32	;' '
  1894  1246  343C               	retlw	60	;'<'
  1895  1247  346D               	retlw	109	;'m'
  1896  1248  3465               	retlw	101	;'e'
  1897  1249  3473               	retlw	115	;'s'
  1898  124A  3473               	retlw	115	;'s'
  1899  124B  3461               	retlw	97	;'a'
  1900  124C  3467               	retlw	103	;'g'
  1901  124D  3465               	retlw	101	;'e'
  1902  124E  343E               	retlw	62	;'>'
  1903  124F  340A               	retlw	10
  1904  1250  3400               	retlw	0
  1905                           
  1906                           	psect	stringtext21
  1907  1251                     __pstringtext21:	
  1908  1251                     STR_10:	
  1909  1251  345B               	retlw	91	;'['
  1910  1252  3453               	retlw	83	;'S'
  1911  1253  3465               	retlw	101	;'e'
  1912  1254  3474               	retlw	116	;'t'
  1913  1255  3420               	retlw	32	;' '
  1914  1256  3462               	retlw	98	;'b'
  1915  1257  3461               	retlw	97	;'a'
  1916  1258  3475               	retlw	117	;'u'
  1917  1259  3464               	retlw	100	;'d'
  1918  125A  3420               	retlw	32	;' '
  1919  125B  3472               	retlw	114	;'r'
  1920  125C  3461               	retlw	97	;'a'
  1921  125D  3474               	retlw	116	;'t'
  1922  125E  3465               	retlw	101	;'e'
  1923  125F  345D               	retlw	93	;']'
  1924  1260  3420               	retlw	32	;' '
  1925  1261  3440               	retlw	64	;'@'
  1926  1262  3462               	retlw	98	;'b'
  1927  1263  343C               	retlw	60	;'<'
  1928  1264  3462               	retlw	98	;'b'
  1929  1265  3470               	retlw	112	;'p'
  1930  1266  3472               	retlw	114	;'r'
  1931  1267  343E               	retlw	62	;'>'
  1932  1268  340A               	retlw	10
  1933  1269  3400               	retlw	0
  1934                           
  1935                           	psect	stringtext22
  1936  126A                     __pstringtext22:	
  1937  126A                     STR_20:	
  1938  126A  3466               	retlw	102	;'f'
  1939  126B  3469               	retlw	105	;'i'
  1940  126C  346C               	retlw	108	;'l'
  1941  126D  3474               	retlw	116	;'t'
  1942  126E  3465               	retlw	101	;'e'
  1943  126F  3472               	retlw	114	;'r'
  1944  1270  3428               	retlw	40	;'('
  1945  1271  3425               	retlw	37	;'%'
  1946  1272  3464               	retlw	100	;'d'
  1947  1273  3429               	retlw	41	;')'
  1948  1274  343A               	retlw	58	;':'
  1949  1275  3420               	retlw	32	;' '
  1950  1276  3425               	retlw	37	;'%'
  1951  1277  3430               	retlw	48	;'0'
  1952  1278  3432               	retlw	50	;'2'
  1953  1279  3478               	retlw	120	;'x'
  1954  127A  3420               	retlw	32	;' '
  1955  127B  3425               	retlw	37	;'%'
  1956  127C  3430               	retlw	48	;'0'
  1957  127D  3432               	retlw	50	;'2'
  1958  127E  3478               	retlw	120	;'x'
  1959  127F  340A               	retlw	10
  1960  1280  3400               	retlw	0
  1961                           
  1962                           	psect	stringtext23
  1963  1281                     __pstringtext23:	
  1964  1281                     STR_17:	
  1965  1281  345B               	retlw	91	;'['
  1966  1282  3453               	retlw	83	;'S'
  1967  1283  3468               	retlw	104	;'h'
  1968  1284  346F               	retlw	111	;'o'
  1969  1285  3477               	retlw	119	;'w'
  1970  1286  3420               	retlw	32	;' '
  1971  1287  3474               	retlw	116	;'t'
  1972  1288  3468               	retlw	104	;'h'
  1973  1289  3469               	retlw	105	;'i'
  1974  128A  3473               	retlw	115	;'s'
  1975  128B  3420               	retlw	32	;' '
  1976  128C  3468               	retlw	104	;'h'
  1977  128D  3465               	retlw	101	;'e'
  1978  128E  346C               	retlw	108	;'l'
  1979  128F  3470               	retlw	112	;'p'
  1980  1290  345D               	retlw	93	;']'
  1981  1291  343A               	retlw	58	;':'
  1982  1292  3420               	retlw	32	;' '
  1983  1293  3440               	retlw	64	;'@'
  1984  1294  3468               	retlw	104	;'h'
  1985  1295  340A               	retlw	10
  1986  1296  3400               	retlw	0
  1987                           
  1988                           	psect	stringtext24
  1989  1297                     __pstringtext24:	
  1990  1297                     STR_19:	
  1991  1297  346D               	retlw	109	;'m'
  1992  1298  3461               	retlw	97	;'a'
  1993  1299  3473               	retlw	115	;'s'
  1994  129A  346B               	retlw	107	;'k'
  1995  129B  3428               	retlw	40	;'('
  1996  129C  3425               	retlw	37	;'%'
  1997  129D  3464               	retlw	100	;'d'
  1998  129E  3429               	retlw	41	;')'
  1999  129F  343A               	retlw	58	;':'
  2000  12A0  3420               	retlw	32	;' '
  2001  12A1  3425               	retlw	37	;'%'
  2002  12A2  3430               	retlw	48	;'0'
  2003  12A3  3432               	retlw	50	;'2'
  2004  12A4  3478               	retlw	120	;'x'
  2005  12A5  3420               	retlw	32	;' '
  2006  12A6  3425               	retlw	37	;'%'
  2007  12A7  3430               	retlw	48	;'0'
  2008  12A8  3432               	retlw	50	;'2'
  2009  12A9  3478               	retlw	120	;'x'
  2010  12AA  340A               	retlw	10
  2011  12AB  3400               	retlw	0
  2012                           
  2013                           	psect	stringtext25
  2014  12AC                     __pstringtext25:	
  2015  12AC                     STR_13:	
  2016  12AC  345B               	retlw	91	;'['
  2017  12AD  3444               	retlw	68	;'D'
  2018  12AE  3475               	retlw	117	;'u'
  2019  12AF  346D               	retlw	109	;'m'
  2020  12B0  3470               	retlw	112	;'p'
  2021  12B1  3420               	retlw	32	;' '
  2022  12B2  3472               	retlw	114	;'r'
  2023  12B3  3465               	retlw	101	;'e'
  2024  12B4  3467               	retlw	103	;'g'
  2025  12B5  3469               	retlw	105	;'i'
  2026  12B6  3473               	retlw	115	;'s'
  2027  12B7  3474               	retlw	116	;'t'
  2028  12B8  3465               	retlw	101	;'e'
  2029  12B9  3472               	retlw	114	;'r'
  2030  12BA  3473               	retlw	115	;'s'
  2031  12BB  345D               	retlw	93	;']'
  2032  12BC  3420               	retlw	32	;' '
  2033  12BD  3440               	retlw	64	;'@'
  2034  12BE  3444               	retlw	68	;'D'
  2035  12BF  340A               	retlw	10
  2036  12C0  3400               	retlw	0
  2037                           
  2038                           	psect	stringtext26
  2039  12C1                     __pstringtext26:	
  2040  12C1                     STR_3:	
  2041  12C1  3430               	retlw	48	;'0'
  2042  12C2  342E               	retlw	46	;'.'
  2043  12C3  3431               	retlw	49	;'1'
  2044  12C4  3433               	retlw	51	;'3'
  2045  12C5  3420               	retlw	32	;' '
  2046  12C6  3420               	retlw	32	;' '
  2047  12C7  344D               	retlw	77	;'M'
  2048  12C8  3461               	retlw	97	;'a'
  2049  12C9  3472               	retlw	114	;'r'
  2050  12CA  3463               	retlw	99	;'c'
  2051  12CB  3468               	retlw	104	;'h'
  2052  12CC  3420               	retlw	32	;' '
  2053  12CD  3432               	retlw	50	;'2'
  2054  12CE  3433               	retlw	51	;'3'
  2055  12CF  342C               	retlw	44	;','
  2056  12D0  3420               	retlw	32	;' '
  2057  12D1  3432               	retlw	50	;'2'
  2058  12D2  3430               	retlw	48	;'0'
  2059  12D3  3431               	retlw	49	;'1'
  2060  12D4  3438               	retlw	56	;'8'
  2061  12D5  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext27
  2064  12D6                     __pstringtext27:	
  2065  12D6                     STR_28:	
  2066  12D6  3443               	retlw	67	;'C'
  2067  12D7  346F               	retlw	111	;'o'
  2068  12D8  3470               	retlw	112	;'p'
  2069  12D9  3479               	retlw	121	;'y'
  2070  12DA  3469               	retlw	105	;'i'
  2071  12DB  346E               	retlw	110	;'n'
  2072  12DC  3467               	retlw	103	;'g'
  2073  12DD  3420               	retlw	32	;' '
  2074  12DE  3462               	retlw	98	;'b'
  2075  12DF  3475               	retlw	117	;'u'
  2076  12E0  3466               	retlw	102	;'f'
  2077  12E1  3466               	retlw	102	;'f'
  2078  12E2  3465               	retlw	101	;'e'
  2079  12E3  3472               	retlw	114	;'r'
  2080  12E4  343A               	retlw	58	;':'
  2081  12E5  3420               	retlw	32	;' '
  2082  12E6  3425               	retlw	37	;'%'
  2083  12E7  3463               	retlw	99	;'c'
  2084  12E8  340A               	retlw	10
  2085  12E9  3400               	retlw	0
  2086                           
  2087                           	psect	stringtext28
  2088  12EA                     __pstringtext28:	
  2089  12EA                     STR_31:	
  2090  12EA  344D               	retlw	77	;'M'
  2091  12EB  3465               	retlw	101	;'e'
  2092  12EC  3473               	retlw	115	;'s'
  2093  12ED  3473               	retlw	115	;'s'
  2094  12EE  3461               	retlw	97	;'a'
  2095  12EF  3467               	retlw	103	;'g'
  2096  12F0  3465               	retlw	101	;'e'
  2097  12F1  3420               	retlw	32	;' '
  2098  12F2  3473               	retlw	115	;'s'
  2099  12F3  3465               	retlw	101	;'e'
  2100  12F4  346E               	retlw	110	;'n'
  2101  12F5  3474               	retlw	116	;'t'
  2102  12F6  343A               	retlw	58	;':'
  2103  12F7  3420               	retlw	32	;' '
  2104  12F8  3425               	retlw	37	;'%'
  2105  12F9  3473               	retlw	115	;'s'
  2106  12FA  340A               	retlw	10
  2107  12FB  3400               	retlw	0
  2108                           
  2109                           	psect	stringtext29
  2110  12FC                     __pstringtext29:	
  2111  12FC                     STR_57:	
  2112  12FC  3430               	retlw	48	;'0'
  2113  12FD  3431               	retlw	49	;'1'
  2114  12FE  3432               	retlw	50	;'2'
  2115  12FF  3433               	retlw	51	;'3'
  2116  1300  3434               	retlw	52	;'4'
  2117  1301  3435               	retlw	53	;'5'
  2118  1302  3436               	retlw	54	;'6'
  2119  1303  3437               	retlw	55	;'7'
  2120  1304  3438               	retlw	56	;'8'
  2121  1305  3439               	retlw	57	;'9'
  2122  1306  3441               	retlw	65	;'A'
  2123  1307  3442               	retlw	66	;'B'
  2124  1308  3443               	retlw	67	;'C'
  2125  1309  3444               	retlw	68	;'D'
  2126  130A  3445               	retlw	69	;'E'
  2127  130B  3446               	retlw	70	;'F'
  2128  130C  3400               	retlw	0
  2129                           
  2130                           	psect	stringtext30
  2131  130D                     __pstringtext30:	
  2132  130D                     STR_58:	
  2133  130D  3430               	retlw	48	;'0'
  2134  130E  3431               	retlw	49	;'1'
  2135  130F  3432               	retlw	50	;'2'
  2136  1310  3433               	retlw	51	;'3'
  2137  1311  3434               	retlw	52	;'4'
  2138  1312  3435               	retlw	53	;'5'
  2139  1313  3436               	retlw	54	;'6'
  2140  1314  3437               	retlw	55	;'7'
  2141  1315  3438               	retlw	56	;'8'
  2142  1316  3439               	retlw	57	;'9'
  2143  1317  3461               	retlw	97	;'a'
  2144  1318  3462               	retlw	98	;'b'
  2145  1319  3463               	retlw	99	;'c'
  2146  131A  3464               	retlw	100	;'d'
  2147  131B  3465               	retlw	101	;'e'
  2148  131C  3466               	retlw	102	;'f'
  2149  131D  3400               	retlw	0
  2150                           
  2151                           	psect	stringtext31
  2152  131E                     __pstringtext31:	
  2153  131E                     STR_21:	
  2154  131E  3452               	retlw	82	;'R'
  2155  131F  3458               	retlw	88	;'X'
  2156  1320  3442               	retlw	66	;'B'
  2157  1321  3425               	retlw	37	;'%'
  2158  1322  3464               	retlw	100	;'d'
  2159  1323  3453               	retlw	83	;'S'
  2160  1324  3449               	retlw	73	;'I'
  2161  1325  3444               	retlw	68	;'D'
  2162  1326  3448               	retlw	72	;'H'
  2163  1327  343A               	retlw	58	;':'
  2164  1328  3420               	retlw	32	;' '
  2165  1329  3425               	retlw	37	;'%'
  2166  132A  3430               	retlw	48	;'0'
  2167  132B  3432               	retlw	50	;'2'
  2168  132C  3478               	retlw	120	;'x'
  2169  132D  340A               	retlw	10
  2170  132E  3400               	retlw	0
  2171                           
  2172                           	psect	stringtext32
  2173  132F                     __pstringtext32:	
  2174  132F                     STR_29:	
  2175  132F  3454               	retlw	84	;'T'
  2176  1330  3458               	retlw	88	;'X'
  2177  1331  3442               	retlw	66	;'B'
  2178  1332  3425               	retlw	37	;'%'
  2179  1333  3464               	retlw	100	;'d'
  2180  1334  3453               	retlw	83	;'S'
  2181  1335  3449               	retlw	73	;'I'
  2182  1336  3444               	retlw	68	;'D'
  2183  1337  3448               	retlw	72	;'H'
  2184  1338  343A               	retlw	58	;':'
  2185  1339  3420               	retlw	32	;' '
  2186  133A  3425               	retlw	37	;'%'
  2187  133B  3430               	retlw	48	;'0'
  2188  133C  3432               	retlw	50	;'2'
  2189  133D  3478               	retlw	120	;'x'
  2190  133E  340A               	retlw	10
  2191  133F  3400               	retlw	0
  2192                           
  2193                           	psect	stringtext33
  2194  1340                     __pstringtext33:	
  2195  1340                     STR_22:	
  2196  1340  3452               	retlw	82	;'R'
  2197  1341  3458               	retlw	88	;'X'
  2198  1342  3442               	retlw	66	;'B'
  2199  1343  3425               	retlw	37	;'%'
  2200  1344  3464               	retlw	100	;'d'
  2201  1345  3453               	retlw	83	;'S'
  2202  1346  3449               	retlw	73	;'I'
  2203  1347  3444               	retlw	68	;'D'
  2204  1348  344C               	retlw	76	;'L'
  2205  1349  343A               	retlw	58	;':'
  2206  134A  3420               	retlw	32	;' '
  2207  134B  3425               	retlw	37	;'%'
  2208  134C  3430               	retlw	48	;'0'
  2209  134D  3432               	retlw	50	;'2'
  2210  134E  3478               	retlw	120	;'x'
  2211  134F  340A               	retlw	10
  2212  1350  3400               	retlw	0
  2213                           
  2214                           	psect	stringtext34
  2215  1351                     __pstringtext34:	
  2216  1351                     STR_30:	
  2217  1351  3454               	retlw	84	;'T'
  2218  1352  3458               	retlw	88	;'X'
  2219  1353  3442               	retlw	66	;'B'
  2220  1354  3425               	retlw	37	;'%'
  2221  1355  3464               	retlw	100	;'d'
  2222  1356  3453               	retlw	83	;'S'
  2223  1357  3449               	retlw	73	;'I'
  2224  1358  3444               	retlw	68	;'D'
  2225  1359  344C               	retlw	76	;'L'
  2226  135A  343A               	retlw	58	;':'
  2227  135B  3420               	retlw	32	;' '
  2228  135C  3425               	retlw	37	;'%'
  2229  135D  3430               	retlw	48	;'0'
  2230  135E  3432               	retlw	50	;'2'
  2231  135F  3478               	retlw	120	;'x'
  2232  1360  340A               	retlw	10
  2233  1361  3400               	retlw	0
  2234                           
  2235                           	psect	stringtext35
  2236  1362                     __pstringtext35:	
  2237  1362                     STR_23:	
  2238  1362  3452               	retlw	82	;'R'
  2239  1363  3458               	retlw	88	;'X'
  2240  1364  3442               	retlw	66	;'B'
  2241  1365  3425               	retlw	37	;'%'
  2242  1366  3464               	retlw	100	;'d'
  2243  1367  3444               	retlw	68	;'D'
  2244  1368  344C               	retlw	76	;'L'
  2245  1369  3443               	retlw	67	;'C'
  2246  136A  343A               	retlw	58	;':'
  2247  136B  3420               	retlw	32	;' '
  2248  136C  3425               	retlw	37	;'%'
  2249  136D  3430               	retlw	48	;'0'
  2250  136E  3432               	retlw	50	;'2'
  2251  136F  3478               	retlw	120	;'x'
  2252  1370  340A               	retlw	10
  2253  1371  3400               	retlw	0
  2254                           
  2255                           	psect	stringtext36
  2256  1372                     __pstringtext36:	
  2257  1372                     STR_50:	
  2258  1372  3452               	retlw	82	;'R'
  2259  1373  3458               	retlw	88	;'X'
  2260  1374  3442               	retlw	66	;'B'
  2261  1375  3430               	retlw	48	;'0'
  2262  1376  3443               	retlw	67	;'C'
  2263  1377  3454               	retlw	84	;'T'
  2264  1378  3452               	retlw	82	;'R'
  2265  1379  344C               	retlw	76	;'L'
  2266  137A  343A               	retlw	58	;':'
  2267  137B  3420               	retlw	32	;' '
  2268  137C  3425               	retlw	37	;'%'
  2269  137D  3430               	retlw	48	;'0'
  2270  137E  3432               	retlw	50	;'2'
  2271  137F  3478               	retlw	120	;'x'
  2272  1380  340A               	retlw	10
  2273  1381  3400               	retlw	0
  2274                           
  2275                           	psect	stringtext37
  2276  1382                     __pstringtext37:	
  2277  1382                     STR_46:	
  2278  1382  3454               	retlw	84	;'T'
  2279  1383  3458               	retlw	88	;'X'
  2280  1384  3442               	retlw	66	;'B'
  2281  1385  3430               	retlw	48	;'0'
  2282  1386  3443               	retlw	67	;'C'
  2283  1387  3454               	retlw	84	;'T'
  2284  1388  3452               	retlw	82	;'R'
  2285  1389  344C               	retlw	76	;'L'
  2286  138A  343A               	retlw	58	;':'
  2287  138B  3420               	retlw	32	;' '
  2288  138C  3425               	retlw	37	;'%'
  2289  138D  3430               	retlw	48	;'0'
  2290  138E  3432               	retlw	50	;'2'
  2291  138F  3478               	retlw	120	;'x'
  2292  1390  340A               	retlw	10
  2293  1391  3400               	retlw	0
  2294                           
  2295                           	psect	stringtext38
  2296  1392                     __pstringtext38:	
  2297  1392                     STR_51:	
  2298  1392  3452               	retlw	82	;'R'
  2299  1393  3458               	retlw	88	;'X'
  2300  1394  3442               	retlw	66	;'B'
  2301  1395  3431               	retlw	49	;'1'
  2302  1396  3443               	retlw	67	;'C'
  2303  1397  3454               	retlw	84	;'T'
  2304  1398  3452               	retlw	82	;'R'
  2305  1399  344C               	retlw	76	;'L'
  2306  139A  343A               	retlw	58	;':'
  2307  139B  3420               	retlw	32	;' '
  2308  139C  3425               	retlw	37	;'%'
  2309  139D  3430               	retlw	48	;'0'
  2310  139E  3432               	retlw	50	;'2'
  2311  139F  3478               	retlw	120	;'x'
  2312  13A0  340A               	retlw	10
  2313  13A1  3400               	retlw	0
  2314                           
  2315                           	psect	stringtext39
  2316  13A2                     __pstringtext39:	
  2317  13A2                     STR_47:	
  2318  13A2  3454               	retlw	84	;'T'
  2319  13A3  3458               	retlw	88	;'X'
  2320  13A4  3442               	retlw	66	;'B'
  2321  13A5  3431               	retlw	49	;'1'
  2322  13A6  3443               	retlw	67	;'C'
  2323  13A7  3454               	retlw	84	;'T'
  2324  13A8  3452               	retlw	82	;'R'
  2325  13A9  344C               	retlw	76	;'L'
  2326  13AA  343A               	retlw	58	;':'
  2327  13AB  3420               	retlw	32	;' '
  2328  13AC  3425               	retlw	37	;'%'
  2329  13AD  3430               	retlw	48	;'0'
  2330  13AE  3432               	retlw	50	;'2'
  2331  13AF  3478               	retlw	120	;'x'
  2332  13B0  340A               	retlw	10
  2333  13B1  3400               	retlw	0
  2334                           
  2335                           	psect	stringtext40
  2336  13B2                     __pstringtext40:	
  2337  13B2                     STR_48:	
  2338  13B2  3454               	retlw	84	;'T'
  2339  13B3  3458               	retlw	88	;'X'
  2340  13B4  3442               	retlw	66	;'B'
  2341  13B5  3432               	retlw	50	;'2'
  2342  13B6  3443               	retlw	67	;'C'
  2343  13B7  3454               	retlw	84	;'T'
  2344  13B8  3452               	retlw	82	;'R'
  2345  13B9  344C               	retlw	76	;'L'
  2346  13BA  343A               	retlw	58	;':'
  2347  13BB  3420               	retlw	32	;' '
  2348  13BC  3425               	retlw	37	;'%'
  2349  13BD  3430               	retlw	48	;'0'
  2350  13BE  3432               	retlw	50	;'2'
  2351  13BF  3478               	retlw	120	;'x'
  2352  13C0  340A               	retlw	10
  2353  13C1  3400               	retlw	0
  2354                           
  2355                           	psect	stringtext41
  2356  13C2                     __pstringtext41:	
  2357  13C2                     STR_24:	
  2358  13C2  3452               	retlw	82	;'R'
  2359  13C3  3458               	retlw	88	;'X'
  2360  13C4  3442               	retlw	66	;'B'
  2361  13C5  3425               	retlw	37	;'%'
  2362  13C6  3464               	retlw	100	;'d'
  2363  13C7  3444               	retlw	68	;'D'
  2364  13C8  3430               	retlw	48	;'0'
  2365  13C9  343A               	retlw	58	;':'
  2366  13CA  3420               	retlw	32	;' '
  2367  13CB  3425               	retlw	37	;'%'
  2368  13CC  3430               	retlw	48	;'0'
  2369  13CD  3432               	retlw	50	;'2'
  2370  13CE  3478               	retlw	120	;'x'
  2371  13CF  340A               	retlw	10
  2372  13D0  3400               	retlw	0
  2373                           
  2374                           	psect	stringtext42
  2375  13D1                     __pstringtext42:	
  2376  13D1                     STR_53:	
  2377  13D1  3443               	retlw	67	;'C'
  2378  13D2  3441               	retlw	65	;'A'
  2379  13D3  344E               	retlw	78	;'N'
  2380  13D4  3443               	retlw	67	;'C'
  2381  13D5  3454               	retlw	84	;'T'
  2382  13D6  3452               	retlw	82	;'R'
  2383  13D7  344C               	retlw	76	;'L'
  2384  13D8  343A               	retlw	58	;':'
  2385  13D9  3420               	retlw	32	;' '
  2386  13DA  3425               	retlw	37	;'%'
  2387  13DB  3430               	retlw	48	;'0'
  2388  13DC  3432               	retlw	50	;'2'
  2389  13DD  3478               	retlw	120	;'x'
  2390  13DE  340A               	retlw	10
  2391  13DF  3400               	retlw	0
  2392                           
  2393                           	psect	stringtext43
  2394  13E0                     __pstringtext43:	
  2395  13E0                     STR_18:	
  2396  13E0  3443               	retlw	67	;'C'
  2397  13E1  3441               	retlw	65	;'A'
  2398  13E2  344E               	retlw	78	;'N'
  2399  13E3  3453               	retlw	83	;'S'
  2400  13E4  3454               	retlw	84	;'T'
  2401  13E5  3441               	retlw	65	;'A'
  2402  13E6  3454               	retlw	84	;'T'
  2403  13E7  343A               	retlw	58	;':'
  2404  13E8  3420               	retlw	32	;' '
  2405  13E9  3425               	retlw	37	;'%'
  2406  13EA  3430               	retlw	48	;'0'
  2407  13EB  3432               	retlw	50	;'2'
  2408  13EC  3478               	retlw	120	;'x'
  2409  13ED  340A               	retlw	10
  2410  13EE  3400               	retlw	0
  2411                           
  2412                           	psect	stringtext44
  2413  13EF                     __pstringtext44:	
  2414  13EF                     STR_27:	
  2415  13EF  3454               	retlw	84	;'T'
  2416  13F0  3458               	retlw	88	;'X'
  2417  13F1  3442               	retlw	66	;'B'
  2418  13F2  3430               	retlw	48	;'0'
  2419  13F3  3420               	retlw	32	;' '
  2420  13F4  3469               	retlw	105	;'i'
  2421  13F5  3473               	retlw	115	;'s'
  2422  13F6  3420               	retlw	32	;' '
  2423  13F7  3469               	retlw	105	;'i'
  2424  13F8  3464               	retlw	100	;'d'
  2425  13F9  346C               	retlw	108	;'l'
  2426  13FA  3465               	retlw	101	;'e'
  2427  13FB  340A               	retlw	10
  2428  13FC  3400               	retlw	0
  2429                           
  2430                           	psect	stringtext45
  2431  13FD                     __pstringtext45:	
  2432  13FD                     STR_26:	
  2433  13FD  3454               	retlw	84	;'T'
  2434  13FE  3458               	retlw	88	;'X'
  2435  13FF  3442               	retlw	66	;'B'
  2436  1400  3431               	retlw	49	;'1'
  2437  1401  3420               	retlw	32	;' '
  2438  1402  3469               	retlw	105	;'i'
  2439  1403  3473               	retlw	115	;'s'
  2440  1404  3420               	retlw	32	;' '
  2441  1405  3469               	retlw	105	;'i'
  2442  1406  3464               	retlw	100	;'d'
  2443  1407  346C               	retlw	108	;'l'
  2444  1408  3465               	retlw	101	;'e'
  2445  1409  340A               	retlw	10
  2446  140A  3400               	retlw	0
  2447                           
  2448                           	psect	stringtext46
  2449  140B                     __pstringtext46:	
  2450  140B                     STR_25:	
  2451  140B  3454               	retlw	84	;'T'
  2452  140C  3458               	retlw	88	;'X'
  2453  140D  3442               	retlw	66	;'B'
  2454  140E  3432               	retlw	50	;'2'
  2455  140F  3420               	retlw	32	;' '
  2456  1410  3469               	retlw	105	;'i'
  2457  1411  3473               	retlw	115	;'s'
  2458  1412  3420               	retlw	32	;' '
  2459  1413  3469               	retlw	105	;'i'
  2460  1414  3464               	retlw	100	;'d'
  2461  1415  346C               	retlw	108	;'l'
  2462  1416  3465               	retlw	101	;'e'
  2463  1417  340A               	retlw	10
  2464  1418  3400               	retlw	0
  2465                           
  2466                           	psect	stringtext47
  2467  1419                     __pstringtext47:	
  2468  1419                     STR_33:	
  2469  1419  3452               	retlw	82	;'R'
  2470  141A  3458               	retlw	88	;'X'
  2471  141B  3430               	retlw	48	;'0'
  2472  141C  3449               	retlw	73	;'I'
  2473  141D  3446               	retlw	70	;'F'
  2474  141E  3420               	retlw	32	;' '
  2475  141F  3469               	retlw	105	;'i'
  2476  1420  3473               	retlw	115	;'s'
  2477  1421  3420               	retlw	32	;' '
  2478  1422  346F               	retlw	111	;'o'
  2479  1423  346E               	retlw	110	;'n'
  2480  1424  340A               	retlw	10
  2481  1425  3400               	retlw	0
  2482                           
  2483                           	psect	stringtext48
  2484  1426                     __pstringtext48:	
  2485  1426                     STR_32:	
  2486  1426  3452               	retlw	82	;'R'
  2487  1427  3458               	retlw	88	;'X'
  2488  1428  3431               	retlw	49	;'1'
  2489  1429  3449               	retlw	73	;'I'
  2490  142A  3446               	retlw	70	;'F'
  2491  142B  3420               	retlw	32	;' '
  2492  142C  3469               	retlw	105	;'i'
  2493  142D  3473               	retlw	115	;'s'
  2494  142E  3420               	retlw	32	;' '
  2495  142F  346F               	retlw	111	;'o'
  2496  1430  346E               	retlw	110	;'n'
  2497  1431  340A               	retlw	10
  2498  1432  3400               	retlw	0
  2499                           
  2500                           	psect	stringtext49
  2501  1433                     __pstringtext49:	
  2502  1433                     STR_42:	
  2503  1433  3443               	retlw	67	;'C'
  2504  1434  344E               	retlw	78	;'N'
  2505  1435  3446               	retlw	70	;'F'
  2506  1436  3431               	retlw	49	;'1'
  2507  1437  343A               	retlw	58	;':'
  2508  1438  3420               	retlw	32	;' '
  2509  1439  3425               	retlw	37	;'%'
  2510  143A  3430               	retlw	48	;'0'
  2511  143B  3432               	retlw	50	;'2'
  2512  143C  3478               	retlw	120	;'x'
  2513  143D  340A               	retlw	10
  2514  143E  3400               	retlw	0
  2515                           
  2516                           	psect	stringtext50
  2517  143F                     __pstringtext50:	
  2518  143F                     STR_43:	
  2519  143F  3443               	retlw	67	;'C'
  2520  1440  344E               	retlw	78	;'N'
  2521  1441  3446               	retlw	70	;'F'
  2522  1442  3432               	retlw	50	;'2'
  2523  1443  343A               	retlw	58	;':'
  2524  1444  3420               	retlw	32	;' '
  2525  1445  3425               	retlw	37	;'%'
  2526  1446  3430               	retlw	48	;'0'
  2527  1447  3432               	retlw	50	;'2'
  2528  1448  3478               	retlw	120	;'x'
  2529  1449  340A               	retlw	10
  2530  144A  3400               	retlw	0
  2531                           
  2532                           	psect	stringtext51
  2533  144B                     __pstringtext51:	
  2534  144B                     STR_44:	
  2535  144B  3443               	retlw	67	;'C'
  2536  144C  344E               	retlw	78	;'N'
  2537  144D  3446               	retlw	70	;'F'
  2538  144E  3433               	retlw	51	;'3'
  2539  144F  343A               	retlw	58	;':'
  2540  1450  3420               	retlw	32	;' '
  2541  1451  3425               	retlw	37	;'%'
  2542  1452  3430               	retlw	48	;'0'
  2543  1453  3432               	retlw	50	;'2'
  2544  1454  3478               	retlw	120	;'x'
  2545  1455  340A               	retlw	10
  2546  1456  3400               	retlw	0
  2547                           
  2548                           	psect	stringtext52
  2549  1469                     __pstringtext52:	
  2550  1469                     STR_56:	
  2551  1469  3428               	retlw	40	;'('
  2552  146A  346E               	retlw	110	;'n'
  2553  146B  3475               	retlw	117	;'u'
  2554  146C  346C               	retlw	108	;'l'
  2555  146D  346C               	retlw	108	;'l'
  2556  146E  3429               	retlw	41	;')'
  2557  146F  3400               	retlw	0
  2558                           
  2559                           	psect	stringtext53
  2560  1476                     __pstringtext53:	
  2561  1476                     STR_34:	
  2562  1476  342D               	retlw	45	;'-'
  2563  1477  342D               	retlw	45	;'-'
  2564  1478  342D               	retlw	45	;'-'
  2565  1479  340A               	retlw	10
  2566  147A  3400               	retlw	0
  2567                           
  2568                           	psect	stringtext54
  2569  1481                     __pstringtext54:	
  2570  1481                     STR_1:	
  2571  1481  3425               	retlw	37	;'%'
  2572  1482  3463               	retlw	99	;'c'
  2573  1483  3400               	retlw	0
  2574                           
  2575                           	psect	stringtext55
  2576  0000                     __pstringtext55:	
  2577  1479                     
  2578                           ; #config settings
  2579  0000                     
  2580                           	psect	cinit
  2581  07EE                     start_initialization:	
  2582  07EE                     __initialization:	
  2583                           
  2584                           ; Clear objects allocated to BANK0
  2585  07EE  3063               	movlw	low __pbssBANK0
  2586  07EF  0084               	movwf	4
  2587  07F0  3000               	movlw	high __pbssBANK0
  2588  07F1  0085               	movwf	5
  2589  07F2  300C               	movlw	12
  2590  07F3  318A  227D  3187   	fcall	clear_ram0
  2591                           
  2592                           ; Clear objects allocated to BANK1
  2593  07F6  30A0               	movlw	low __pbssBANK1
  2594  07F7  0084               	movwf	4
  2595  07F8  3000               	movlw	high __pbssBANK1
  2596  07F9  0085               	movwf	5
  2597  07FA  302C               	movlw	44
  2598  07FB  318A  227D         	fcall	clear_ram0
  2599  07FD                     end_of_initialization:	
  2600                           ;End of C runtime variable initialization code
  2601                           
  2602  07FD                     __end_of__initialization:	
  2603  07FD  0020               	movlb	0
  2604  07FE  3183  2B92         	ljmp	_main	;jump to C main() function
  2605                           
  2606                           	psect	bssBANK0
  2607  0063                     __pbssBANK0:	
  2608  0063                     _save_rxmn:	
  2609  0063                     	ds	4
  2610  0067                     _handler:	
  2611  0067                     	ds	2
  2612  0069                     _mode:	
  2613  0069                     	ds	2
  2614  006B                     _sid:	
  2615  006B                     	ds	2
  2616  006D                     _operation_mode:	
  2617  006D                     	ds	1
  2618  006E                     _with_sid:	
  2619  006E                     	ds	1
  2620                           
  2621                           	psect	bssBANK1
  2622  00A0                     __pbssBANK1:	
  2623  00A0                     _save_rxfn:	
  2624  00A0                     	ds	12
  2625  00AC                     _buf:	
  2626  00AC                     	ds	16
  2627  00BC                     _receive_buf:	
  2628  00BC                     	ds	16
  2629                           
  2630                           	psect	clrtext
  2631  0A7D                     clear_ram0:	
  2632                           ;	Called with FSR0 containing the base address, and
  2633                           ;	WREG with the size to clear
  2634                           
  2635  0A7D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2636  0A7E                     clrloop0:	
  2637  0A7E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2638  0A7F  3101               	addfsr 0,1
  2639  0A80  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2640  0A81  2A7E               	goto	clrloop0	;have we reached the end yet?
  2641  0A82  3400               	retlw	0	;all done for this memory range, return
  2642                           
  2643                           	psect	cstackBANK1
  2644  00CC                     __pcstackBANK1:	
  2645  00CC                     main@sid:	
  2646                           
  2647                           ; 2 bytes @ 0x0
  2648  00CC                     	ds	2
  2649  00CE                     main@buf:	
  2650                           
  2651                           ; 16 bytes @ 0x2
  2652  00CE                     	ds	16
  2653  00DE                     main@bpr:	
  2654                           
  2655                           ; 1 bytes @ 0x12
  2656  00DE                     	ds	1
  2657  00DF                     main@status:	
  2658                           
  2659                           ; 1 bytes @ 0x13
  2660  00DF                     	ds	1
  2661  00E0                     main@pos:	
  2662                           
  2663                           ; 1 bytes @ 0x14
  2664  00E0                     	ds	1
  2665  00E1                     main@mask:	
  2666                           
  2667                           ; 2 bytes @ 0x15
  2668  00E1                     	ds	2
  2669  00E3                     main@echo_back:	
  2670                           
  2671                           ; 1 bytes @ 0x17
  2672  00E3                     	ds	1
  2673  00E4                     main@n:	
  2674                           
  2675                           ; 1 bytes @ 0x18
  2676  00E4                     	ds	1
  2677  00E5                     main@putc_data:	
  2678                           
  2679                           ; 1 bytes @ 0x19
  2680  00E5                     	ds	1
  2681  00E6                     main@c:	
  2682                           
  2683                           ; 1 bytes @ 0x1A
  2684  00E6                     	ds	1
  2685  00E7                     main@cmd:	
  2686                           
  2687                           ; 1 bytes @ 0x1B
  2688  00E7                     	ds	1
  2689  00E8                     main@idx:	
  2690                           
  2691                           ; 1 bytes @ 0x1C
  2692  00E8                     	ds	1
  2693                           
  2694                           	psect	cstackCOMMON
  2695  0070                     __pcstackCOMMON:	
  2696  0070                     ?_isdigit:	
  2697  0070                     ?_PIN_MANAGER_Initialize:	
  2698                           ; 1 bit 
  2699                           
  2700  0070                     ??_PIN_MANAGER_Initialize:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_OSCILLATOR_Initialize:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ??_OSCILLATOR_Initialize:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_WDT_Initialize:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ??_WDT_Initialize:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_SPI_Initialize:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ??_SPI_Initialize:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_EUSART_Initialize:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ??_EUSART_Initialize:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_can_status_check:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_can_set_sid:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_can_logging_mode:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_can_ope_mode:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_can_abort:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_can_baudrate:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_can_dump_masks_and_filters:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_can_dump_registers:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ??_isdigit:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_SYSTEM_Initialize:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0070                     ??_SYSTEM_Initialize:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0070                     ?_EUSART_Read:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ??_EUSART_Read:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_EUSART_Write:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ??_EUSART_Write:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_putch:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_SPI_Exchange8bit:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ??_SPI_Exchange8bit:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_main:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_abort_pending_transmissions:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_txf_clear:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_receive:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_read_register:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?___wmul:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?___lwdiv:	
  2800                           ; 2 bytes @ 0x0
  2801                           
  2802  0070                     EUSART_Write@txData:	
  2803                           ; 2 bytes @ 0x0
  2804                           
  2805  0070                     SPI_Exchange8bit@data:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     can_logging_mode@verbose:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     _isdigit$838:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     can_set_sid@can_node:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ___wmul@multiplier:	
  2818                           ; 2 bytes @ 0x0
  2819                           
  2820  0070                     ___lwdiv@divisor:	
  2821                           ; 2 bytes @ 0x0
  2822                           
  2823                           
  2824                           ; 2 bytes @ 0x0
  2825  0070                     	ds	1
  2826  0071                     ??_can_logging_mode:	
  2827  0071                     ??_putch:	
  2828                           ; 1 bytes @ 0x1
  2829                           
  2830  0071                     ?_SPI_Exchange8bitBuffer:	
  2831                           ; 1 bytes @ 0x1
  2832                           
  2833  0071                     putch@txData:	
  2834                           ; 1 bytes @ 0x1
  2835                           
  2836  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839  0071                     isdigit@c:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x1
  2844  0071                     	ds	1
  2845  0072                     ??_can_set_sid:	
  2846  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2847                           ; 1 bytes @ 0x2
  2848                           
  2849  0072                     can_logging_mode@debug:	
  2850                           ; 1 bytes @ 0x2
  2851                           
  2852  0072                     ___wmul@multiplicand:	
  2853                           ; 1 bytes @ 0x2
  2854                           
  2855  0072                     ___lwdiv@dividend:	
  2856                           ; 2 bytes @ 0x2
  2857                           
  2858                           
  2859                           ; 2 bytes @ 0x2
  2860  0072                     	ds	1
  2861  0073                     ??_SPI_Exchange8bitBuffer:	
  2862                           
  2863                           ; 1 bytes @ 0x3
  2864  0073                     	ds	1
  2865  0074                     ??___wmul:	
  2866  0074                     ??___lwdiv:	
  2867                           ; 1 bytes @ 0x4
  2868                           
  2869  0074                     ___wmul@product:	
  2870                           ; 1 bytes @ 0x4
  2871                           
  2872                           
  2873                           ; 2 bytes @ 0x4
  2874  0074                     	ds	1
  2875  0075                     can_set_sid@sidh:	
  2876  0075                     ___lwdiv@quotient:	
  2877                           ; 1 bytes @ 0x5
  2878                           
  2879                           
  2880                           ; 2 bytes @ 0x5
  2881  0075                     	ds	1
  2882  0076                     ?_atoi:	
  2883  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2884                           ; 2 bytes @ 0x6
  2885                           
  2886  0076                     can_set_sid@sidl:	
  2887                           ; 1 bytes @ 0x6
  2888                           
  2889                           
  2890                           ; 1 bytes @ 0x6
  2891  0076                     	ds	1
  2892  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2893  0077                     ___lwdiv@counter:	
  2894                           ; 1 bytes @ 0x7
  2895                           
  2896                           
  2897                           ; 1 bytes @ 0x7
  2898  0077                     	ds	1
  2899  0078                     ??_atoi:	
  2900  0078                     ?_SPI_exchange:	
  2901                           ; 1 bytes @ 0x8
  2902                           
  2903  0078                     ?___lwmod:	
  2904                           ; 1 bytes @ 0x8
  2905                           
  2906  0078                     SPI_exchange@len:	
  2907                           ; 2 bytes @ 0x8
  2908                           
  2909  0078                     ___lwmod@divisor:	
  2910                           ; 1 bytes @ 0x8
  2911                           
  2912                           
  2913                           ; 2 bytes @ 0x8
  2914  0078                     	ds	1
  2915  0079                     ??_SPI_exchange:	
  2916                           
  2917                           ; 1 bytes @ 0x9
  2918  0079                     	ds	1
  2919  007A                     atoi@sign:	
  2920  007A                     ___lwmod@dividend:	
  2921                           ; 1 bytes @ 0xA
  2922                           
  2923                           
  2924                           ; 2 bytes @ 0xA
  2925  007A                     	ds	1
  2926  007B                     atoi@a:	
  2927                           
  2928                           ; 2 bytes @ 0xB
  2929  007B                     	ds	1
  2930  007C                     ??___lwmod:	
  2931  007C                     SPI_exchange@bytes_written:	
  2932                           ; 1 bytes @ 0xC
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0xC
  2936  007C                     	ds	1
  2937  007D                     SPI_exchange@buf:	
  2938  007D                     atoi@s:	
  2939                           ; 1 bytes @ 0xD
  2940                           
  2941  007D                     ___lwmod@counter:	
  2942                           ; 1 bytes @ 0xD
  2943                           
  2944                           
  2945                           ; 1 bytes @ 0xD
  2946  007D                     	ds	1
  2947                           
  2948                           	psect	cstackBANK0
  2949  0020                     __pcstackBANK0:	
  2950  0020                     ?_receive_handler:	
  2951  0020                     ??_abort_pending_transmissions:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     ??_txf_clear:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0020                     ??_read_register:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0020                     receive_handler@sid:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963                           
  2964                           ; 2 bytes @ 0x0
  2965  0020                     	ds	1
  2966  0021                     read_register@addr:	
  2967                           
  2968                           ; 1 bytes @ 0x1
  2969  0021                     	ds	1
  2970  0022                     ?_printf:	
  2971  0022                     receive_handler@buf:	
  2972                           ; 2 bytes @ 0x2
  2973                           
  2974  0022                     abort_pending_transmissions@bytes_written:	
  2975                           ; 1 bytes @ 0x2
  2976                           
  2977  0022                     txf_clear@mask:	
  2978                           ; 1 bytes @ 0x2
  2979                           
  2980  0022                     printf@f:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983                           
  2984                           ; 2 bytes @ 0x2
  2985  0022                     	ds	1
  2986  0023                     receive_handler@dlc:	
  2987  0023                     txf_clear@bytes_written:	
  2988                           ; 1 bytes @ 0x3
  2989                           
  2990                           
  2991                           ; 1 bytes @ 0x3
  2992  0023                     	ds	1
  2993  0024                     ??_receive_handler:	
  2994  0024                     txf_clear@n:	
  2995                           ; 1 bytes @ 0x4
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x4
  2999  0024                     	ds	1
  3000  0025                     receive_handler@sid0:	
  3001                           
  3002                           ; 2 bytes @ 0x5
  3003  0025                     	ds	2
  3004  0027                     receive_handler@sid1:	
  3005                           
  3006                           ; 2 bytes @ 0x7
  3007  0027                     	ds	2
  3008  0029                     receive_handler@sid2:	
  3009                           
  3010                           ; 2 bytes @ 0x9
  3011  0029                     	ds	2
  3012  002B                     receive_handler@sid3:	
  3013                           
  3014                           ; 2 bytes @ 0xB
  3015  002B                     	ds	2
  3016  002D                     receive_handler@sida:	
  3017                           
  3018                           ; 2 bytes @ 0xD
  3019  002D                     	ds	2
  3020  002F                     receive_handler@sidb:	
  3021                           
  3022                           ; 2 bytes @ 0xF
  3023  002F                     	ds	1
  3024  0030                     ??_printf:	
  3025                           
  3026                           ; 1 bytes @ 0x10
  3027  0030                     	ds	4
  3028  0034                     _printf$647:	
  3029                           
  3030                           ; 2 bytes @ 0x14
  3031  0034                     	ds	2
  3032  0036                     printf@idx:	
  3033                           
  3034                           ; 1 bytes @ 0x16
  3035  0036                     	ds	1
  3036  0037                     printf@prec:	
  3037                           
  3038                           ; 1 bytes @ 0x17
  3039  0037                     	ds	1
  3040  0038                     printf@cp:	
  3041                           
  3042                           ; 2 bytes @ 0x18
  3043  0038                     	ds	2
  3044  003A                     printf@len:	
  3045                           
  3046                           ; 2 bytes @ 0x1A
  3047  003A                     	ds	2
  3048  003C                     printf@ap:	
  3049                           
  3050                           ; 1 bytes @ 0x1C
  3051  003C                     	ds	1
  3052  003D                     printf@val:	
  3053                           
  3054                           ; 2 bytes @ 0x1D
  3055  003D                     	ds	2
  3056  003F                     printf@flag:	
  3057                           
  3058                           ; 1 bytes @ 0x1F
  3059  003F                     	ds	1
  3060  0040                     printf@width:	
  3061                           
  3062                           ; 2 bytes @ 0x20
  3063  0040                     	ds	2
  3064  0042                     printf@c:	
  3065                           
  3066                           ; 1 bytes @ 0x22
  3067  0042                     	ds	1
  3068  0043                     ??_can_ope_mode:	
  3069  0043                     ??_can_dump_masks_and_filters:	
  3070                           ; 1 bytes @ 0x23
  3071                           
  3072  0043                     ??_can_dump_registers:	
  3073                           ; 1 bytes @ 0x23
  3074                           
  3075  0043                     ?_can_send:	
  3076                           ; 1 bytes @ 0x23
  3077                           
  3078  0043                     ??_receive:	
  3079                           ; 1 bytes @ 0x23
  3080                           
  3081  0043                     can_send@dlc:	
  3082                           ; 1 bytes @ 0x23
  3083                           
  3084                           
  3085                           ; 1 bytes @ 0x23
  3086  0043                     	ds	1
  3087  0044                     ??_can_send:	
  3088                           
  3089                           ; 1 bytes @ 0x24
  3090  0044                     	ds	1
  3091  0045                     can_ope_mode@bytes_written:	
  3092                           
  3093                           ; 1 bytes @ 0x25
  3094  0045                     	ds	1
  3095  0046                     can_ope_mode@ope_mode:	
  3096                           
  3097                           ; 1 bytes @ 0x26
  3098  0046                     	ds	1
  3099  0047                     ?_can_init:	
  3100  0047                     ??_can_abort:	
  3101                           ; 1 bytes @ 0x27
  3102                           
  3103  0047                     ??_can_baudrate:	
  3104                           ; 1 bytes @ 0x27
  3105                           
  3106  0047                     ?_can_set_mask:	
  3107                           ; 1 bytes @ 0x27
  3108                           
  3109  0047                     can_set_mask@n:	
  3110                           ; 1 bytes @ 0x27
  3111                           
  3112  0047                     can_init@receive_handler:	
  3113                           ; 1 bytes @ 0x27
  3114                           
  3115                           
  3116                           ; 2 bytes @ 0x27
  3117  0047                     	ds	1
  3118  0048                     receive@bytes_read:	
  3119  0048                     can_send@len:	
  3120                           ; 1 bytes @ 0x28
  3121                           
  3122  0048                     can_abort@bytes_written:	
  3123                           ; 1 bytes @ 0x28
  3124                           
  3125  0048                     can_set_mask@mask:	
  3126                           ; 1 bytes @ 0x28
  3127                           
  3128                           
  3129                           ; 2 bytes @ 0x28
  3130  0048                     	ds	1
  3131  0049                     ??_can_init:	
  3132  0049                     can_send@bytes_written:	
  3133                           ; 1 bytes @ 0x29
  3134                           
  3135  0049                     can_baudrate@bpr:	
  3136                           ; 1 bytes @ 0x29
  3137                           
  3138  0049                     receive@rx_buf:	
  3139                           ; 1 bytes @ 0x29
  3140                           
  3141                           
  3142                           ; 15 bytes @ 0x29
  3143  0049                     	ds	1
  3144  004A                     ??_can_set_mask:	
  3145  004A                     can_send@status:	
  3146                           ; 1 bytes @ 0x2A
  3147                           
  3148  004A                     can_baudrate@mask:	
  3149                           ; 1 bytes @ 0x2A
  3150                           
  3151                           
  3152                           ; 1 bytes @ 0x2A
  3153  004A                     	ds	1
  3154  004B                     can_send@data_buf:	
  3155  004B                     can_baudrate@bytes_written:	
  3156                           ; 1 bytes @ 0x2B
  3157                           
  3158                           
  3159                           ; 1 bytes @ 0x2B
  3160  004B                     	ds	1
  3161  004C                     can_send@i:	
  3162                           
  3163                           ; 1 bytes @ 0x2C
  3164  004C                     	ds	1
  3165  004D                     can_send@n:	
  3166  004D                     can_dump_masks_and_filters@h:	
  3167                           ; 1 bytes @ 0x2D
  3168                           
  3169                           
  3170                           ; 1 bytes @ 0x2D
  3171  004D                     	ds	1
  3172  004E                     can_dump_masks_and_filters@l:	
  3173                           
  3174                           ; 1 bytes @ 0x2E
  3175  004E                     	ds	1
  3176  004F                     can_dump_masks_and_filters@m:	
  3177                           
  3178                           ; 2 bytes @ 0x2F
  3179  004F                     	ds	1
  3180  0050                     _can_set_mask$522:	
  3181                           
  3182                           ; 2 bytes @ 0x30
  3183  0050                     	ds	1
  3184  0051                     can_dump_masks_and_filters@i:	
  3185                           
  3186                           ; 1 bytes @ 0x31
  3187  0051                     	ds	1
  3188  0052                     can_set_mask@cmd:	
  3189                           
  3190                           ; 1 bytes @ 0x32
  3191  0052                     	ds	1
  3192  0053                     can_set_mask@mask_sidh:	
  3193                           
  3194                           ; 1 bytes @ 0x33
  3195  0053                     	ds	1
  3196  0054                     can_set_mask@mask_sidl:	
  3197                           
  3198                           ; 1 bytes @ 0x34
  3199  0054                     	ds	4
  3200  0058                     receive@pbuf:	
  3201                           
  3202                           ; 1 bytes @ 0x38
  3203  0058                     	ds	1
  3204  0059                     receive@id:	
  3205                           
  3206                           ; 2 bytes @ 0x39
  3207  0059                     	ds	2
  3208  005B                     receive@dlc:	
  3209                           
  3210                           ; 1 bytes @ 0x3B
  3211  005B                     	ds	1
  3212  005C                     receive@n:	
  3213                           
  3214                           ; 1 bytes @ 0x3C
  3215  005C                     	ds	1
  3216  005D                     ??_can_status_check:	
  3217                           
  3218                           ; 1 bytes @ 0x3D
  3219  005D                     	ds	2
  3220  005F                     can_status_check@bytes_written:	
  3221                           
  3222                           ; 1 bytes @ 0x3F
  3223  005F                     	ds	1
  3224  0060                     can_status_check@status:	
  3225                           
  3226                           ; 1 bytes @ 0x40
  3227  0060                     	ds	1
  3228  0061                     ??_main:	
  3229                           
  3230                           ; 1 bytes @ 0x41
  3231  0061                     	ds	2
  3232                           
  3233                           	psect	maintext
  3234  0392                     __pmaintext:	
  3235 ;;
  3236 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3237 ;;
  3238 ;; *************** function _main *****************
  3239 ;; Defined at:
  3240 ;;		line 69 in file "main.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  status          1   19[BANK1 ] unsigned char 
  3245 ;;  buf            16    2[BANK1 ] unsigned char [16]
  3246 ;;  mask            2   21[BANK1 ] unsigned int 
  3247 ;;  sid             2    0[BANK1 ] unsigned int 
  3248 ;;  idx             1   28[BANK1 ] unsigned char 
  3249 ;;  cmd             1   27[BANK1 ] unsigned char 
  3250 ;;  c               1   26[BANK1 ] unsigned char 
  3251 ;;  putc_data       1   25[BANK1 ] unsigned char 
  3252 ;;  n               1   24[BANK1 ] unsigned char 
  3253 ;;  echo_back       1   23[BANK1 ] unsigned char 
  3254 ;;  pos             1   20[BANK1 ] unsigned char 
  3255 ;;  bpr             1   18[BANK1 ] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : B1F/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3266 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  3267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3268 ;;      Totals:         0       2      29       0       0       0       0       0       0       0       0       0       
      +0       0
  3269 ;;Total ram usage:       31 bytes
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		_EUSART_Read
  3273 ;;		_SYSTEM_Initialize
  3274 ;;		_atoi
  3275 ;;		_can_abort
  3276 ;;		_can_baudrate
  3277 ;;		_can_dump_masks_and_filters
  3278 ;;		_can_dump_registers
  3279 ;;		_can_init
  3280 ;;		_can_logging_mode
  3281 ;;		_can_ope_mode
  3282 ;;		_can_send
  3283 ;;		_can_set_mask
  3284 ;;		_can_set_sid
  3285 ;;		_can_status_check
  3286 ;;		_printf
  3287 ;;		_putch
  3288 ;; This function is called by:
  3289 ;;		Startup code after reset
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function _main
  3295  0392                     _main:	
  3296                           
  3297                           ;main.c: 71: LATCbits.LATC3 = 1;
  3298                           
  3299                           ;incstack = 0
  3300                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3301  0392  0022               	movlb	2	; select bank2
  3302  0393  158E               	bsf	14,3	;volatile
  3303                           
  3304                           ;main.c: 73: uint8_t buf[16];
  3305                           ;main.c: 74: bool echo_back = 0;
  3306  0394  0021               	movlb	1	; select bank1
  3307  0395  01E3               	clrf	main@echo_back^(0+128)
  3308                           
  3309                           ;main.c: 75: uint8_t c, idx;
  3310                           ;main.c: 77: uint8_t cmd, n, bpr;
  3311                           ;main.c: 78: uint16_t sid, mask;
  3312                           ;main.c: 80: uint8_t pos;
  3313                           ;main.c: 81: uint8_t putc_data;
  3314                           ;main.c: 83: _delay((unsigned long)((100)*(32000000/4000.0)));
  3315  0396  3005               	movlw	5
  3316  0397  0020               	movlb	0	; select bank0
  3317  0398  00E2               	movwf	??_main+1
  3318  0399  300F               	movlw	15
  3319  039A  00E1               	movwf	??_main
  3320  039B  30F1               	movlw	241
  3321  039C                     u2657:	
  3322  039C  0B89               	decfsz	9,f
  3323  039D  2B9C               	goto	u2657
  3324  039E  0BE1               	decfsz	??_main,f
  3325  039F  2B9C               	goto	u2657
  3326  03A0  0BE2               	decfsz	??_main+1,f
  3327  03A1  2B9C               	goto	u2657
  3328                           
  3329                           ;main.c: 85: SYSTEM_Initialize();
  3330  03A2  318A  22D4  3183   	fcall	_SYSTEM_Initialize
  3331                           
  3332                           ;main.c: 90: pos = 0;
  3333  03A5  0021               	movlb	1	; select bank1
  3334  03A6  01E0               	clrf	main@pos^(0+128)
  3335                           
  3336                           ;main.c: 91: receive_buf.printing = 0;
  3337  03A7  01CB               	clrf	(_receive_buf^(0+128)+15)
  3338                           
  3339                           ;main.c: 93: idx = 0;
  3340  03A8  01E8               	clrf	main@idx^(0+128)
  3341                           
  3342                           ;main.c: 95: with_sid = 0;
  3343  03A9  0020               	movlb	0	; select bank0
  3344  03AA  01EE               	clrf	_with_sid
  3345                           
  3346                           ;main.c: 96: can_init(receive_handler);
  3347  03AB  303B               	movlw	low _receive_handler
  3348  03AC  00C7               	movwf	can_init@receive_handler
  3349  03AD  300F               	movlw	high _receive_handler
  3350  03AE  00C8               	movwf	can_init@receive_handler+1
  3351  03AF  318D  2558  3183   	fcall	_can_init
  3352  03B2                     l2767:	
  3353                           ;main.c: 98: while (1)
  3354                           
  3355                           
  3356                           ;main.c: 99: {
  3357                           ;main.c: 100: bool status = can_status_check();
  3358  03B2  318C  24AB  3183   	fcall	_can_status_check
  3359  03B5  0020               	movlb	0	; select bank0
  3360  03B6  00E1               	movwf	??_main
  3361  03B7  0861               	movf	??_main,w
  3362  03B8  0021               	movlb	1	; select bank1
  3363  03B9  00DF               	movwf	main@status^(0+128)
  3364                           
  3365                           ;main.c: 101: if (status) {
  3366  03BA  085F               	movf	main@status^(0+128),w
  3367  03BB  1903               	btfsc	3,2
  3368  03BC  2BC0               	goto	l212
  3369                           
  3370                           ;main.c: 102: LATCbits.LATC3 = 0;
  3371  03BD  0022               	movlb	2	; select bank2
  3372  03BE  118E               	bcf	14,3	;volatile
  3373                           
  3374                           ;main.c: 103: } else {
  3375  03BF  2BC2               	goto	l2773
  3376  03C0                     l212:	
  3377                           
  3378                           ;main.c: 104: LATCbits.LATC3 = 1;
  3379  03C0  0022               	movlb	2	; select bank2
  3380  03C1  158E               	bsf	14,3	;volatile
  3381  03C2                     l2773:	
  3382                           
  3383                           ;main.c: 105: }
  3384                           ;main.c: 107: if (receive_buf.printing) {
  3385  03C2  0021               	movlb	1	; select bank1
  3386  03C3  084B               	movf	(_receive_buf^(0+128)+15),w
  3387  03C4  1903               	btfsc	3,2
  3388  03C5  2BE1               	goto	l2785
  3389                           
  3390                           ;main.c: 108: putc_data = receive_buf.buf[pos++];
  3391  03C6  0860               	movf	main@pos^(0+128),w
  3392  03C7  3EBC               	addlw	(low (_receive_buf| 0))& (0+255)
  3393  03C8  0086               	movwf	6
  3394  03C9  0187               	clrf	7
  3395  03CA  0801               	movf	1,w
  3396  03CB  0020               	movlb	0	; select bank0
  3397  03CC  00E1               	movwf	??_main
  3398  03CD  0861               	movf	??_main,w
  3399  03CE  0021               	movlb	1	; select bank1
  3400  03CF  00E5               	movwf	main@putc_data^(0+128)
  3401  03D0  3001               	movlw	1
  3402  03D1  0020               	movlb	0	; select bank0
  3403  03D2  00E1               	movwf	??_main
  3404  03D3  0861               	movf	??_main,w
  3405  03D4  0021               	movlb	1	; select bank1
  3406  03D5  07E0               	addwf	main@pos^(0+128),f
  3407                           
  3408                           ;main.c: 109: putch(putc_data);
  3409  03D6  0865               	movf	main@putc_data^(0+128),w
  3410  03D7  318A  2278  3183   	fcall	_putch
  3411                           
  3412                           ;main.c: 110: if (putc_data == '\n') {
  3413  03DA  300A               	movlw	10
  3414  03DB  0021               	movlb	1	; select bank1
  3415  03DC  0665               	xorwf	main@putc_data^(0+128),w
  3416  03DD  1D03               	btfss	3,2
  3417  03DE  2BE1               	goto	l2785
  3418                           
  3419                           ;main.c: 111: receive_buf.printing = 0;
  3420  03DF  01CB               	clrf	(_receive_buf^(0+128)+15)
  3421                           
  3422                           ;main.c: 112: pos = 0;
  3423  03E0  01E0               	clrf	main@pos^(0+128)
  3424  03E1                     l2785:	
  3425                           
  3426                           ;main.c: 113: }
  3427                           ;main.c: 114: }
  3428                           ;main.c: 116: if ((PIR1bits.RCIF)) {
  3429  03E1  0020               	movlb	0	; select bank0
  3430  03E2  1E91               	btfss	17,5	;volatile
  3431  03E3  2BB2               	goto	l2767
  3432                           
  3433                           ;main.c: 117: c = EUSART_Read();
  3434  03E4  318A  229B  3183   	fcall	_EUSART_Read
  3435  03E7  0020               	movlb	0	; select bank0
  3436  03E8  00E1               	movwf	??_main
  3437  03E9  0861               	movf	??_main,w
  3438  03EA  0021               	movlb	1	; select bank1
  3439  03EB  00E6               	movwf	main@c^(0+128)
  3440                           
  3441                           ;main.c: 118: if (echo_back) printf("%c", c);
  3442  03EC  0863               	movf	main@echo_back^(0+128),w
  3443  03ED  1903               	btfsc	3,2
  3444  03EE  2C00               	goto	l2793
  3445  03EF  3081               	movlw	low (STR_1| (0+32768))
  3446  03F0  0020               	movlb	0	; select bank0
  3447  03F1  00A2               	movwf	printf@f
  3448  03F2  3094               	movlw	high (STR_1| (0+32768))
  3449  03F3  00A3               	movwf	printf@f+1
  3450  03F4  0021               	movlb	1	; select bank1
  3451  03F5  0866               	movf	main@c^(0+128),w
  3452  03F6  0020               	movlb	0	; select bank0
  3453  03F7  00E1               	movwf	??_main
  3454  03F8  01E2               	clrf	??_main+1
  3455  03F9  0861               	movf	??_main,w
  3456  03FA  00A4               	movwf	?_printf+2
  3457  03FB  0862               	movf	??_main+1,w
  3458  03FC  00A5               	movwf	?_printf+3
  3459  03FD  3185  25A3  3183   	fcall	_printf
  3460  0400                     l2793:	
  3461                           
  3462                           ;main.c: 120: buf[idx] = c;
  3463  0400  0021               	movlb	1	; select bank1
  3464  0401  0866               	movf	main@c^(0+128),w
  3465  0402  0020               	movlb	0	; select bank0
  3466  0403  00E1               	movwf	??_main
  3467  0404  0021               	movlb	1	; select bank1
  3468  0405  0868               	movf	main@idx^(0+128),w
  3469  0406  3ECE               	addlw	(low (main@buf| 0))& (0+255)
  3470  0407  0086               	movwf	6
  3471  0408  0187               	clrf	7
  3472  0409  0020               	movlb	0	; select bank0
  3473  040A  0861               	movf	??_main,w
  3474  040B  0081               	movwf	1
  3475                           
  3476                           ;main.c: 123: if (c == '\n') {
  3477  040C  300A               	movlw	10
  3478  040D  0021               	movlb	1	; select bank1
  3479  040E  0666               	xorwf	main@c^(0+128),w
  3480  040F  1D03               	btfss	3,2
  3481  0410  2D88               	goto	l2879
  3482                           
  3483                           ;main.c: 124: buf[idx] = '\0';
  3484  0411  0868               	movf	main@idx^(0+128),w
  3485  0412  3ECE               	addlw	(low (main@buf| 0))& (0+255)
  3486  0413  0086               	movwf	6
  3487  0414  0187               	clrf	7
  3488  0415  0181               	clrf	1
  3489                           
  3490                           ;main.c: 125: if (buf[0] == '@') {
  3491  0416  3040               	movlw	64
  3492  0417  064E               	xorwf	main@buf^(0+128),w
  3493  0418  1D03               	btfss	3,2
  3494  0419  2D7E               	goto	l2875
  3495                           
  3496                           ;main.c: 126: cmd = buf[1];
  3497  041A  084F               	movf	(main@buf^(0+128)+1),w
  3498  041B  0020               	movlb	0	; select bank0
  3499  041C  00E1               	movwf	??_main
  3500  041D  0861               	movf	??_main,w
  3501  041E  0021               	movlb	1	; select bank1
  3502  041F  00E7               	movwf	main@cmd^(0+128)
  3503                           
  3504                           ;main.c: 127: switch(cmd) {
  3505  0420  2D59               	goto	l2873
  3506  0421                     l2803:	
  3507                           ;main.c: 128: case 'i':
  3508                           
  3509                           
  3510                           ;main.c: 129: sid = (uint16_t)atoi(&buf[2]);
  3511  0421  30D0               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3512  0422  3180  2006  3183   	fcall	_atoi
  3513  0425  0877               	movf	?_atoi+1,w
  3514  0426  0021               	movlb	1	; select bank1
  3515  0427  00CD               	movwf	(main@sid+1)^(0+128)
  3516  0428  0876               	movf	?_atoi,w
  3517  0429  00CC               	movwf	main@sid^(0+128)
  3518                           
  3519                           ;main.c: 130: can_set_sid(sid);
  3520  042A  084D               	movf	(main@sid+1)^(0+128),w
  3521  042B  00F1               	movwf	can_set_sid@can_node+1
  3522  042C  084C               	movf	main@sid^(0+128),w
  3523  042D  00F0               	movwf	can_set_sid@can_node
  3524  042E  318B  2352  3183   	fcall	_can_set_sid
  3525                           
  3526                           ;main.c: 131: break;
  3527  0431  2DA0               	goto	l2885
  3528  0432                     l2807:	
  3529                           ;main.c: 132: case 'v':
  3530                           
  3531                           
  3532                           ;main.c: 133: if (buf[2] == 'd') {
  3533  0432  3064               	movlw	100
  3534  0433  0021               	movlb	1	; select bank1
  3535  0434  0650               	xorwf	(main@buf^(0+128)+2),w
  3536  0435  1D03               	btfss	3,2
  3537  0436  2C3B               	goto	l2813
  3538                           
  3539                           ;main.c: 134: can_logging_mode(1, 1);
  3540  0437  01F0               	clrf	can_logging_mode@verbose
  3541  0438  0AF0               	incf	can_logging_mode@verbose,f
  3542  0439  3001               	movlw	1
  3543  043A  2C42               	goto	L1
  3544  043B                     l2813:	
  3545                           ;main.c: 136: } else if (buf[2] == 'v') {
  3546                           
  3547                           ;main.c: 135: echo_back = 1;
  3548                           
  3549  043B  3076               	movlw	118
  3550  043C  0650               	xorwf	(main@buf^(0+128)+2),w
  3551  043D  1D03               	btfss	3,2
  3552  043E  2C49               	goto	l2819
  3553                           
  3554                           ;main.c: 137: can_logging_mode(0, 1);
  3555  043F  01F0               	clrf	can_logging_mode@verbose
  3556  0440  0AF0               	incf	can_logging_mode@verbose,f
  3557  0441  3000               	movlw	0
  3558  0442                     L1:	
  3559  0442  318A  22AF  3183   	fcall	_can_logging_mode
  3560                           
  3561                           ;main.c: 138: echo_back = 1;
  3562  0445  0021               	movlb	1	; select bank1
  3563  0446  01E3               	clrf	main@echo_back^(0+128)
  3564  0447  0AE3               	incf	main@echo_back^(0+128),f
  3565                           
  3566                           ;main.c: 139: } else if (buf[2] == 'n') {
  3567  0448  2DA0               	goto	l2885
  3568  0449                     l2819:	
  3569  0449  306E               	movlw	110
  3570  044A  0650               	xorwf	(main@buf^(0+128)+2),w
  3571  044B  1D03               	btfss	3,2
  3572  044C  2DA0               	goto	l2885
  3573                           
  3574                           ;main.c: 140: can_logging_mode(0, 0);
  3575  044D  01F0               	clrf	can_logging_mode@verbose
  3576  044E  3000               	movlw	0
  3577  044F  318A  22AF  3183   	fcall	_can_logging_mode
  3578                           
  3579                           ;main.c: 141: echo_back = 0;
  3580  0452  0021               	movlb	1	; select bank1
  3581  0453  01E3               	clrf	main@echo_back^(0+128)
  3582                           
  3583                           ;main.c: 142: }
  3584                           ;main.c: 143: break;
  3585  0454  2DA0               	goto	l2885
  3586  0455                     l2825:	
  3587                           ;main.c: 144: case 'o':
  3588                           
  3589                           
  3590                           ;main.c: 145: if (buf[2] == 'l') {
  3591  0455  306C               	movlw	108
  3592  0456  0650               	xorwf	(main@buf^(0+128)+2),w
  3593  0457  1D03               	btfss	3,2
  3594  0458  2C5B               	goto	l2829
  3595                           
  3596                           ;main.c: 146: can_ope_mode(0b01000000u);
  3597  0459  3040               	movlw	64
  3598  045A  2C61               	goto	L2
  3599  045B                     l2829:	
  3600                           ;main.c: 147: } else if (buf[2] == 'n') {
  3601                           
  3602  045B  306E               	movlw	110
  3603  045C  0021               	movlb	1	; select bank1
  3604  045D  0650               	xorwf	(main@buf^(0+128)+2),w
  3605  045E  1D03               	btfss	3,2
  3606  045F  2C64               	goto	l2833
  3607                           
  3608                           ;main.c: 148: can_ope_mode(0b00000000u);
  3609  0460  3000               	movlw	0
  3610  0461                     L2:	
  3611  0461  318D  2501  3183   	fcall	_can_ope_mode
  3612  0464                     l2833:	
  3613                           
  3614                           ;main.c: 149: }
  3615                           ;main.c: 150: if (buf[3] == '\0') {
  3616  0464  0021               	movlb	1	; select bank1
  3617  0465  0851               	movf	(main@buf^(0+128)+3),w
  3618  0466  1D03               	btfss	3,2
  3619  0467  2C6B               	goto	l2837
  3620                           
  3621                           ;main.c: 151: with_sid = 0;
  3622  0468  0020               	movlb	0	; select bank0
  3623  0469  01EE               	clrf	_with_sid
  3624                           
  3625                           ;main.c: 152: } else if (buf[3] == 's' && buf[4] == '\0') {
  3626  046A  2DA0               	goto	l2885
  3627  046B                     l2837:	
  3628  046B  3073               	movlw	115
  3629  046C  0021               	movlb	1	; select bank1
  3630  046D  0651               	xorwf	(main@buf^(0+128)+3),w
  3631  046E  1D03               	btfss	3,2
  3632  046F  2DA0               	goto	l2885
  3633  0470  0852               	movf	(main@buf^(0+128)+4),w
  3634  0471  1D03               	btfss	3,2
  3635  0472  2DA0               	goto	l2885
  3636                           
  3637                           ;main.c: 153: with_sid = 1;
  3638  0473  0020               	movlb	0	; select bank0
  3639  0474  01EE               	clrf	_with_sid
  3640  0475  0AEE               	incf	_with_sid,f
  3641                           
  3642                           ;main.c: 154: }
  3643                           ;main.c: 155: break;
  3644  0476  2DA0               	goto	l2885
  3645  0477                     l2843:	
  3646                           ;main.c: 156: case 'b':
  3647                           
  3648                           
  3649                           ;main.c: 157: can_abort();
  3650  0477  318A  22E3  3183   	fcall	_can_abort
  3651                           
  3652                           ;main.c: 158: bpr = (uint8_t)atoi(&buf[2]);
  3653  047A  30D0               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3654  047B  3180  2006  3183   	fcall	_atoi
  3655  047E  0876               	movf	?_atoi,w
  3656  047F  0020               	movlb	0	; select bank0
  3657  0480  00E1               	movwf	??_main
  3658  0481  0861               	movf	??_main,w
  3659  0482  0021               	movlb	1	; select bank1
  3660  0483  00DE               	movwf	main@bpr^(0+128)
  3661                           
  3662                           ;main.c: 159: can_baudrate(bpr);
  3663  0484  085E               	movf	main@bpr^(0+128),w
  3664  0485  318B  23F6  3183   	fcall	_can_baudrate
  3665                           
  3666                           ;main.c: 160: break;
  3667  0488  2DA0               	goto	l2885
  3668  0489                     l2849:	
  3669                           ;main.c: 161: case 'm':
  3670                           
  3671                           
  3672                           ;main.c: 162: case 'f':
  3673                           ;main.c: 163: n = buf[2] - 0x30u;
  3674  0489  0021               	movlb	1	; select bank1
  3675  048A  0850               	movf	(main@buf^(0+128)+2),w
  3676  048B  3ED0               	addlw	208
  3677  048C  0020               	movlb	0	; select bank0
  3678  048D  00E1               	movwf	??_main
  3679  048E  0861               	movf	??_main,w
  3680  048F  0021               	movlb	1	; select bank1
  3681  0490  00E4               	movwf	main@n^(0+128)
  3682                           
  3683                           ;main.c: 164: mask = (uint16_t)atoi(&buf[3]);
  3684  0491  30D1               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3685  0492  3180  2006  3183   	fcall	_atoi
  3686  0495  0877               	movf	?_atoi+1,w
  3687  0496  0021               	movlb	1	; select bank1
  3688  0497  00E2               	movwf	(main@mask+1)^(0+128)
  3689  0498  0876               	movf	?_atoi,w
  3690  0499  00E1               	movwf	main@mask^(0+128)
  3691                           
  3692                           ;main.c: 165: if (cmd == 'm') {
  3693  049A  306D               	movlw	109
  3694  049B  0667               	xorwf	main@cmd^(0+128),w
  3695  049C  1D03               	btfss	3,2
  3696  049D  2CB0               	goto	l2857
  3697                           
  3698                           ;main.c: 166: can_set_mask(0u, n, mask);
  3699  049E  0864               	movf	main@n^(0+128),w
  3700  049F  0020               	movlb	0	; select bank0
  3701  04A0  00E1               	movwf	??_main
  3702  04A1  0861               	movf	??_main,w
  3703  04A2  00C7               	movwf	can_set_mask@n
  3704  04A3  0021               	movlb	1	; select bank1
  3705  04A4  0862               	movf	(main@mask+1)^(0+128),w
  3706  04A5  0020               	movlb	0	; select bank0
  3707  04A6  00C9               	movwf	can_set_mask@mask+1
  3708  04A7  0021               	movlb	1	; select bank1
  3709  04A8  0861               	movf	main@mask^(0+128),w
  3710  04A9  0020               	movlb	0	; select bank0
  3711  04AA  00C8               	movwf	can_set_mask@mask
  3712  04AB  3000               	movlw	0
  3713  04AC  318D  25E2  3183   	fcall	_can_set_mask
  3714                           
  3715                           ;main.c: 167: } else if (cmd == 'f') {
  3716  04AF  2DA0               	goto	l2885
  3717  04B0                     l2857:	
  3718  04B0  3066               	movlw	102
  3719  04B1  0021               	movlb	1	; select bank1
  3720  04B2  0667               	xorwf	main@cmd^(0+128),w
  3721  04B3  1D03               	btfss	3,2
  3722  04B4  2DA0               	goto	l2885
  3723                           
  3724                           ;main.c: 168: can_set_mask(1u, n, mask);
  3725  04B5  0864               	movf	main@n^(0+128),w
  3726  04B6  0020               	movlb	0	; select bank0
  3727  04B7  00E1               	movwf	??_main
  3728  04B8  0861               	movf	??_main,w
  3729  04B9  00C7               	movwf	can_set_mask@n
  3730  04BA  0021               	movlb	1	; select bank1
  3731  04BB  0862               	movf	(main@mask+1)^(0+128),w
  3732  04BC  0020               	movlb	0	; select bank0
  3733  04BD  00C9               	movwf	can_set_mask@mask+1
  3734  04BE  0021               	movlb	1	; select bank1
  3735  04BF  0861               	movf	main@mask^(0+128),w
  3736  04C0  0020               	movlb	0	; select bank0
  3737  04C1  00C8               	movwf	can_set_mask@mask
  3738  04C2  3001               	movlw	1
  3739  04C3  318D  25E2  3183   	fcall	_can_set_mask
  3740                           
  3741                           ;main.c: 169: }
  3742                           ;main.c: 170: break;
  3743  04C6  2DA0               	goto	l2885
  3744  04C7                     l2861:	
  3745                           ;main.c: 171: case 'a':
  3746                           
  3747                           
  3748                           ;main.c: 172: can_abort();
  3749  04C7  318A  22E3  3183   	fcall	_can_abort
  3750                           
  3751                           ;main.c: 173: break;
  3752  04CA  2DA0               	goto	l2885
  3753  04CB                     l2863:	
  3754                           ;main.c: 174: case 'F':
  3755                           
  3756                           
  3757                           ;main.c: 175: can_dump_masks_and_filters();
  3758  04CB  3180  206D  3183   	fcall	_can_dump_masks_and_filters
  3759                           
  3760                           ;main.c: 176: break;
  3761  04CE  2DA0               	goto	l2885
  3762  04CF                     l2865:	
  3763                           ;main.c: 177: case 'D':
  3764                           
  3765                           
  3766                           ;main.c: 178: can_dump_registers();
  3767  04CF  3181  2139  3183   	fcall	_can_dump_registers
  3768                           
  3769                           ;main.c: 179: break;
  3770  04D2  2DA0               	goto	l2885
  3771  04D3                     l2867:	
  3772                           ;main.c: 180: case '@':
  3773                           
  3774                           
  3775                           ;main.c: 181: can_send(&buf[1], idx - 1u);
  3776  04D3  0021               	movlb	1	; select bank1
  3777  04D4  0868               	movf	main@idx^(0+128),w
  3778  04D5  3EFF               	addlw	255
  3779  04D6  0020               	movlb	0	; select bank0
  3780  04D7  00E1               	movwf	??_main
  3781  04D8  0861               	movf	??_main,w
  3782  04D9  00C3               	movwf	can_send@dlc
  3783  04DA  30CF               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3784  04DB  2D9D               	goto	L3
  3785  04DC                     l2869:	
  3786                           ;main.c: 183: case 'h':
  3787                           
  3788                           ;main.c: 182: break;
  3789                           
  3790                           
  3791                           ;main.c: 184: printf("/// UART2CAN HELP (version %s) ///\n", "0.13  March 23, 2018");
  3792  04DC  30D9               	movlw	low (STR_2| (0+32768))
  3793  04DD  0020               	movlb	0	; select bank0
  3794  04DE  00A2               	movwf	printf@f
  3795  04DF  3091               	movlw	high (STR_2| (0+32768))
  3796  04E0  00A3               	movwf	printf@f+1
  3797  04E1  30C1               	movlw	low (STR_3| (0+32768))
  3798  04E2  00A4               	movwf	low ((?_printf| 0+2))
  3799  04E3  3092               	movlw	high (STR_3| (0+32768))
  3800  04E4  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3801  04E5  3185  25A3  3183   	fcall	_printf
  3802                           
  3803                           ;main.c: 185: printf("[Set standard identifier] @i<standard identifier>\n");
  3804  04E8  30AC               	movlw	low (STR_4| (0+32768))
  3805  04E9  0020               	movlb	0	; select bank0
  3806  04EA  00A2               	movwf	printf@f
  3807  04EB  3090               	movlw	high (STR_4| (0+32768))
  3808  04EC  00A3               	movwf	printf@f+1
  3809  04ED  3185  25A3  3183   	fcall	_printf
  3810                           
  3811                           ;main.c: 186: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3812  04F0  3002               	movlw	low (STR_5| (0+32768))
  3813  04F1  0020               	movlb	0	; select bank0
  3814  04F2  00A2               	movwf	printf@f
  3815  04F3  3090               	movlw	high (STR_5| (0+32768))
  3816  04F4  00A3               	movwf	printf@f+1
  3817  04F5  3185  25A3  3183   	fcall	_printf
  3818                           
  3819                           ;main.c: 187: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3820  04F8  3076               	movlw	low (STR_6| (0+32768))
  3821  04F9  0020               	movlb	0	; select bank0
  3822  04FA  00A2               	movwf	printf@f
  3823  04FB  3090               	movlw	high (STR_6| (0+32768))
  3824  04FC  00A3               	movwf	printf@f+1
  3825  04FD  3185  25A3  3183   	fcall	_printf
  3826                           
  3827                           ;main.c: 188: printf("     with SID: @ols or @ons\n");
  3828  0500  301A               	movlw	low (STR_7| (0+32768))
  3829  0501  0020               	movlb	0	; select bank0
  3830  0502  00A2               	movwf	printf@f
  3831  0503  3092               	movlw	high (STR_7| (0+32768))
  3832  0504  00A3               	movwf	printf@f+1
  3833  0505  3185  25A3  3183   	fcall	_printf
  3834                           
  3835                           ;main.c: 189: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3836  0508  308D               	movlw	low (STR_8| (0+32768))
  3837  0509  0020               	movlb	0	; select bank0
  3838  050A  00A2               	movwf	printf@f
  3839  050B  3091               	movlw	high (STR_8| (0+32768))
  3840  050C  00A3               	movwf	printf@f+1
  3841  050D  3185  25A3  3183   	fcall	_printf
  3842                           
  3843                           ;main.c: 190: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3844  0510  3063               	movlw	low (STR_9| (0+32768))
  3845  0511  0020               	movlb	0	; select bank0
  3846  0512  00A2               	movwf	printf@f
  3847  0513  3091               	movlw	high (STR_9| (0+32768))
  3848  0514  00A3               	movwf	printf@f+1
  3849  0515  3185  25A3  3183   	fcall	_printf
  3850                           
  3851                           ;main.c: 191: printf("[Set baud rate] @b<bpr>\n");
  3852  0518  3051               	movlw	low (STR_10| (0+32768))
  3853  0519  0020               	movlb	0	; select bank0
  3854  051A  00A2               	movwf	printf@f
  3855  051B  3092               	movlw	high (STR_10| (0+32768))
  3856  051C  00A3               	movwf	printf@f+1
  3857  051D  3185  25A3  3183   	fcall	_printf
  3858                           
  3859                           ;main.c: 192: printf("[Abort all pending transmissions] @a\n");
  3860  0520  30B3               	movlw	low (STR_11| (0+32768))
  3861  0521  0020               	movlb	0	; select bank0
  3862  0522  00A2               	movwf	printf@f
  3863  0523  3091               	movlw	high (STR_11| (0+32768))
  3864  0524  00A3               	movwf	printf@f+1
  3865  0525  3185  25A3  3183   	fcall	_printf
  3866                           
  3867                           ;main.c: 193: printf("[Dump masks and filters] @F\n");
  3868  0528  30FD               	movlw	low (STR_12| (0+32768))
  3869  0529  0020               	movlb	0	; select bank0
  3870  052A  00A2               	movwf	printf@f
  3871  052B  3091               	movlw	high (STR_12| (0+32768))
  3872  052C  00A3               	movwf	printf@f+1
  3873  052D  3185  25A3  3183   	fcall	_printf
  3874                           
  3875                           ;main.c: 194: printf("[Dump registers] @D\n");
  3876  0530  30AC               	movlw	low (STR_13| (0+32768))
  3877  0531  0020               	movlb	0	; select bank0
  3878  0532  00A2               	movwf	printf@f
  3879  0533  3092               	movlw	high (STR_13| (0+32768))
  3880  0534  00A3               	movwf	printf@f+1
  3881  0535  3185  25A3  3183   	fcall	_printf
  3882                           
  3883                           ;main.c: 195: printf("[Send message] <message>\n");
  3884  0538  3037               	movlw	low (STR_14| (0+32768))
  3885  0539  0020               	movlb	0	; select bank0
  3886  053A  00A2               	movwf	printf@f
  3887  053B  3092               	movlw	high (STR_14| (0+32768))
  3888  053C  00A3               	movwf	printf@f+1
  3889  053D  3185  25A3  3183   	fcall	_printf
  3890                           
  3891                           ;main.c: 196: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3892  0540  303D               	movlw	low (STR_15| (0+32768))
  3893  0541  0020               	movlb	0	; select bank0
  3894  0542  00A2               	movwf	printf@f
  3895  0543  3090               	movlw	high (STR_15| (0+32768))
  3896  0544  00A3               	movwf	printf@f+1
  3897  0545  3185  25A3  3183   	fcall	_printf
  3898                           
  3899                           ;main.c: 197: printf("[Receive message] <message> will be output\n");
  3900  0548  3037               	movlw	low (STR_16| (0+32768))
  3901  0549  0020               	movlb	0	; select bank0
  3902  054A  00A2               	movwf	printf@f
  3903  054B  3091               	movlw	high (STR_16| (0+32768))
  3904  054C  00A3               	movwf	printf@f+1
  3905  054D  3185  25A3  3183   	fcall	_printf
  3906                           
  3907                           ;main.c: 198: printf("[Show this help]: @h\n");
  3908  0550  3081               	movlw	low (STR_17| (0+32768))
  3909  0551  0020               	movlb	0	; select bank0
  3910  0552  00A2               	movwf	printf@f
  3911  0553  3092               	movlw	high (STR_17| (0+32768))
  3912  0554  00A3               	movwf	printf@f+1
  3913  0555  3185  25A3  3183   	fcall	_printf
  3914                           
  3915                           ;main.c: 200: }
  3916                           
  3917                           ;main.c: 199: break;
  3918  0558  2DA0               	goto	l2885
  3919  0559                     l2873:	
  3920  0559  0021               	movlb	1	; select bank1
  3921  055A  0867               	movf	main@cmd^(0+128),w
  3922                           
  3923                           ; Switch size 1, requested type "space"
  3924                           ; Number of cases is 11, Range of values is 64 to 118
  3925                           ; switch strategies available:
  3926                           ; Name         Instructions Cycles
  3927                           ; simple_byte           34    18 (average)
  3928                           ; direct_byte          119     9 (fixed)
  3929                           ; jumptable            263     9 (fixed)
  3930                           ;	Chosen strategy is simple_byte
  3931  055B  3A40               	xorlw	64	; case 64
  3932  055C  1903               	skipnz
  3933  055D  2CD3               	goto	l2867
  3934  055E  3A04               	xorlw	4	; case 68
  3935  055F  1903               	skipnz
  3936  0560  2CCF               	goto	l2865
  3937  0561  3A02               	xorlw	2	; case 70
  3938  0562  1903               	skipnz
  3939  0563  2CCB               	goto	l2863
  3940  0564  3A27               	xorlw	39	; case 97
  3941  0565  1903               	skipnz
  3942  0566  2CC7               	goto	l2861
  3943  0567  3A03               	xorlw	3	; case 98
  3944  0568  1903               	skipnz
  3945  0569  2C77               	goto	l2843
  3946  056A  3A04               	xorlw	4	; case 102
  3947  056B  1903               	skipnz
  3948  056C  2C89               	goto	l2849
  3949  056D  3A0E               	xorlw	14	; case 104
  3950  056E  1903               	skipnz
  3951  056F  2CDC               	goto	l2869
  3952  0570  3A01               	xorlw	1	; case 105
  3953  0571  1903               	skipnz
  3954  0572  2C21               	goto	l2803
  3955  0573  3A04               	xorlw	4	; case 109
  3956  0574  1903               	skipnz
  3957  0575  2C89               	goto	l2849
  3958  0576  3A02               	xorlw	2	; case 111
  3959  0577  1903               	skipnz
  3960  0578  2C55               	goto	l2825
  3961  0579  3A19               	xorlw	25	; case 118
  3962  057A  1903               	skipnz
  3963  057B  2C32               	goto	l2807
  3964  057C  2D87               	goto	l2877
  3965                           
  3966                           ;main.c: 201: } else {
  3967  057D  2DA0               	goto	l2885
  3968  057E                     l2875:	
  3969                           
  3970                           ;main.c: 202: can_send(buf, idx);
  3971  057E  0868               	movf	main@idx^(0+128),w
  3972  057F  0020               	movlb	0	; select bank0
  3973  0580  00E1               	movwf	??_main
  3974  0581  0861               	movf	??_main,w
  3975  0582  00C3               	movwf	can_send@dlc
  3976  0583  30CE               	movlw	(low (main@buf| 0))& (0+255)
  3977  0584  3182  2245  3183   	fcall	_can_send
  3978  0587                     l2877:	
  3979  0587  2DA0               	goto	l2885
  3980  0588                     l2879:	
  3981                           ;main.c: 206: } else if (++idx > 7) {
  3982                           
  3983                           ;main.c: 203: }
  3984                           ;main.c: 204: idx = 0;
  3985                           
  3986  0588  3001               	movlw	1
  3987  0589  0020               	movlb	0	; select bank0
  3988  058A  00E1               	movwf	??_main
  3989  058B  0861               	movf	??_main,w
  3990  058C  0021               	movlb	1	; select bank1
  3991  058D  07E8               	addwf	main@idx^(0+128),f
  3992  058E  3008               	movlw	8
  3993  058F  0268               	subwf	main@idx^(0+128),w
  3994  0590  1C03               	skipc
  3995  0591  2BB2               	goto	l2767
  3996                           
  3997                           ;main.c: 207: buf[idx] = '\0';
  3998  0592  0868               	movf	main@idx^(0+128),w
  3999  0593  3ECE               	addlw	(low (main@buf| 0))& (0+255)
  4000  0594  0086               	movwf	6
  4001  0595  0187               	clrf	7
  4002  0596  0181               	clrf	1
  4003                           
  4004                           ;main.c: 208: can_send(buf, idx);
  4005  0597  0868               	movf	main@idx^(0+128),w
  4006  0598  0020               	movlb	0	; select bank0
  4007  0599  00E1               	movwf	??_main
  4008  059A  0861               	movf	??_main,w
  4009  059B  00C3               	movwf	can_send@dlc
  4010  059C  30CE               	movlw	(low (main@buf| 0))& (0+255)
  4011  059D                     L3:	
  4012  059D  3182  2245  3183   	fcall	_can_send
  4013  05A0                     l2885:	
  4014                           
  4015                           ;main.c: 209: idx = 0;
  4016  05A0  0021               	movlb	1	; select bank1
  4017  05A1  01E8               	clrf	main@idx^(0+128)
  4018  05A2  2BB2               	goto	l2767
  4019  05A3                     __end_of_main:	
  4020                           
  4021                           	psect	text1
  4022  0CAB                     __ptext1:	
  4023 ;; *************** function _can_status_check *****************
  4024 ;; Defined at:
  4025 ;;		line 269 in file "mcp2515.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  status          1   64[BANK0 ] unsigned char 
  4030 ;;  bytes_writte    1   63[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      unsigned char 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;Total ram usage:        4 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    4
  4047 ;; This function calls:
  4048 ;;		_SPI_exchange
  4049 ;;		_printf
  4050 ;;		_receive
  4051 ;;		_txf_clear
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _can_status_check
  4059  0CAB                     _can_status_check:	
  4060                           
  4061                           ;mcp2515.c: 271: buf[0] = 0b10100000u;
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4065  0CAB  30A0               	movlw	160
  4066  0CAC  0020               	movlb	0	; select bank0
  4067  0CAD  00DD               	movwf	??_can_status_check
  4068  0CAE  085D               	movf	??_can_status_check,w
  4069  0CAF  0021               	movlb	1	; select bank1
  4070  0CB0  00AC               	movwf	_buf^(0+128)
  4071                           
  4072                           ;mcp2515.c: 272: buf[1] = 0x00;
  4073  0CB1  01AD               	clrf	(_buf^(0+128)+1)
  4074                           
  4075                           ;mcp2515.c: 273: uint8_t bytes_written = SPI_exchange(buf, 2);
  4076  0CB2  3002               	movlw	2
  4077  0CB3  0020               	movlb	0	; select bank0
  4078  0CB4  00DD               	movwf	??_can_status_check
  4079  0CB5  085D               	movf	??_can_status_check,w
  4080  0CB6  00F8               	movwf	SPI_exchange@len
  4081  0CB7  30AC               	movlw	(low (_buf| 0))& (0+255)
  4082  0CB8  318A  22F2  318C   	fcall	_SPI_exchange
  4083  0CBB  0020               	movlb	0	; select bank0
  4084  0CBC  00DE               	movwf	??_can_status_check+1
  4085  0CBD  085E               	movf	??_can_status_check+1,w
  4086  0CBE  00DF               	movwf	can_status_check@bytes_written
  4087                           
  4088                           ;mcp2515.c: 274: uint8_t status = buf[1];
  4089  0CBF  0021               	movlb	1	; select bank1
  4090  0CC0  082D               	movf	(_buf^(0+128)+1),w
  4091  0CC1  0020               	movlb	0	; select bank0
  4092  0CC2  00DD               	movwf	??_can_status_check
  4093  0CC3  085D               	movf	??_can_status_check,w
  4094  0CC4  00E0               	movwf	can_status_check@status
  4095                           
  4096                           ;mcp2515.c: 275: if (status == 0x00) {
  4097  0CC5  0860               	movf	can_status_check@status,w
  4098  0CC6  1D03               	btfss	3,2
  4099  0CC7  2CCA               	goto	l357
  4100                           
  4101                           ;mcp2515.c: 276: return 1;
  4102  0CC8  3001               	movlw	1
  4103  0CC9  0008               	return
  4104  0CCA                     l357:	
  4105                           ;mcp2515.c: 277: } else if ((status & 0b00000010u) > 0) {
  4106                           
  4107  0CCA  1CE0               	btfss	can_status_check@status,1
  4108  0CCB  2CDB               	goto	l360
  4109                           
  4110                           ;mcp2515.c: 278: if (mode.debug) printf("RX1IF is on\n");
  4111  0CCC  0869               	movf	_mode,w
  4112  0CCD  1903               	btfsc	3,2
  4113  0CCE  2CD6               	goto	l361
  4114  0CCF  3026               	movlw	low (STR_32| (0+32768))
  4115  0CD0  00A2               	movwf	printf@f
  4116  0CD1  3094               	movlw	high (STR_32| (0+32768))
  4117  0CD2  00A3               	movwf	printf@f+1
  4118  0CD3  3185  25A3  318C   	fcall	_printf
  4119  0CD6                     l361:	
  4120                           
  4121                           ;mcp2515.c: 279: receive(1);
  4122  0CD6  3001               	movlw	1
  4123  0CD7  318E  2687  318C   	fcall	_receive
  4124                           
  4125                           ;mcp2515.c: 280: } else if ((status & 0b00000001u) > 0) {
  4126  0CDA  2CFA               	goto	l2479
  4127  0CDB                     l360:	
  4128  0CDB  1C60               	btfss	can_status_check@status,0
  4129  0CDC  2CEC               	goto	l363
  4130                           
  4131                           ;mcp2515.c: 281: if (mode.debug) printf("RX0IF is on\n");
  4132  0CDD  0869               	movf	_mode,w
  4133  0CDE  1903               	btfsc	3,2
  4134  0CDF  2CE7               	goto	l364
  4135  0CE0  3019               	movlw	low (STR_33| (0+32768))
  4136  0CE1  00A2               	movwf	printf@f
  4137  0CE2  3094               	movlw	high (STR_33| (0+32768))
  4138  0CE3  00A3               	movwf	printf@f+1
  4139  0CE4  3185  25A3  318C   	fcall	_printf
  4140  0CE7                     l364:	
  4141                           
  4142                           ;mcp2515.c: 282: receive(0);
  4143  0CE7  3000               	movlw	0
  4144  0CE8  318E  2687  318C   	fcall	_receive
  4145                           
  4146                           ;mcp2515.c: 283: } else if ((status & 0b00001000u) > 0) {
  4147  0CEB  2CFA               	goto	l2479
  4148  0CEC                     l363:	
  4149  0CEC  1DE0               	btfss	can_status_check@status,3
  4150  0CED  2CF0               	goto	l366
  4151                           
  4152                           ;mcp2515.c: 284: txf_clear(0);
  4153  0CEE  3000               	movlw	0
  4154  0CEF  2CF7               	goto	L4
  4155  0CF0                     l366:	
  4156                           ;mcp2515.c: 285: } else if ((status & 0b00100000u) > 0) {
  4157                           
  4158  0CF0  1EE0               	btfss	can_status_check@status,5
  4159  0CF1  2CF4               	goto	l368
  4160                           
  4161                           ;mcp2515.c: 286: txf_clear(1);
  4162  0CF2  3001               	movlw	1
  4163  0CF3  2CF7               	goto	L4
  4164  0CF4                     l368:	
  4165                           ;mcp2515.c: 287: } else if ((status & 0b10000000u) > 0) {
  4166                           
  4167  0CF4  1FE0               	btfss	can_status_check@status,7
  4168  0CF5  2CFA               	goto	l2479
  4169                           
  4170                           ;mcp2515.c: 288: txf_clear(2);
  4171  0CF6  3002               	movlw	2
  4172  0CF7                     L4:	
  4173  0CF7  318B  23C8  318C   	fcall	_txf_clear
  4174  0CFA                     l2479:	
  4175                           
  4176                           ;mcp2515.c: 289: }
  4177                           ;mcp2515.c: 290: if ((status & 0b00010000u) > 0) {
  4178  0CFA  0020               	movlb	0	; select bank0
  4179  0CFB  1E60               	btfss	can_status_check@status,4
  4180  0CFC  2CFF               	goto	l2487
  4181                           
  4182                           ;mcp2515.c: 291: return 0;
  4183  0CFD  3000               	movlw	0
  4184                           
  4185                           ;mcp2515.c: 292: } else {
  4186  0CFE  0008               	return
  4187  0CFF                     l2487:	
  4188                           
  4189                           ;mcp2515.c: 293: return 1;
  4190  0CFF  3001               	movlw	1
  4191  0D00  0008               	return
  4192  0D01                     __end_of_can_status_check:	
  4193                           
  4194                           	psect	text2
  4195  0BC8                     __ptext2:	
  4196 ;; *************** function _txf_clear *****************
  4197 ;; Defined at:
  4198 ;;		line 149 in file "mcp2515.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  n               1    wreg     unsigned char 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  n               1    4[BANK0 ] unsigned char 
  4203 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4204 ;;  mask            1    2[BANK0 ] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;Total ram usage:        5 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		_SPI_exchange
  4223 ;; This function is called by:
  4224 ;;		_can_status_check
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _txf_clear
  4230  0BC8                     _txf_clear:	
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4234                           ;txf_clear@n stored from wreg
  4235  0BC8  0020               	movlb	0	; select bank0
  4236  0BC9  00A4               	movwf	txf_clear@n
  4237                           
  4238                           ;mcp2515.c: 150: uint8_t mask = 0b00000001u << (n + 2);
  4239  0BCA  3001               	movlw	1
  4240  0BCB  00A0               	movwf	??_txf_clear
  4241  0BCC  0824               	movf	txf_clear@n,w
  4242  0BCD  3E02               	addlw	2
  4243  0BCE  0A89               	incf	9,f
  4244  0BCF  2BD1               	goto	u2014
  4245  0BD0                     u2015:	
  4246  0BD0  35A0               	lslf	??_txf_clear,f
  4247  0BD1                     u2014:	
  4248  0BD1  0B89               	decfsz	9,f
  4249  0BD2  2BD0               	goto	u2015
  4250  0BD3  0820               	movf	??_txf_clear,w
  4251  0BD4  00A1               	movwf	??_txf_clear+1
  4252  0BD5  0821               	movf	??_txf_clear+1,w
  4253  0BD6  00A2               	movwf	txf_clear@mask
  4254                           
  4255                           ;mcp2515.c: 151: buf[0] =0b00000101u;
  4256  0BD7  3005               	movlw	5
  4257  0BD8  00A0               	movwf	??_txf_clear
  4258  0BD9  0820               	movf	??_txf_clear,w
  4259  0BDA  0021               	movlb	1	; select bank1
  4260  0BDB  00AC               	movwf	_buf^(0+128)
  4261                           
  4262                           ;mcp2515.c: 152: buf[1] = 0x2c;
  4263  0BDC  302C               	movlw	44
  4264  0BDD  0020               	movlb	0	; select bank0
  4265  0BDE  00A0               	movwf	??_txf_clear
  4266  0BDF  0820               	movf	??_txf_clear,w
  4267  0BE0  0021               	movlb	1	; select bank1
  4268  0BE1  00AD               	movwf	(_buf^(0+128)+1)
  4269                           
  4270                           ;mcp2515.c: 153: buf[2] = mask;
  4271  0BE2  0020               	movlb	0	; select bank0
  4272  0BE3  0822               	movf	txf_clear@mask,w
  4273  0BE4  00A0               	movwf	??_txf_clear
  4274  0BE5  0820               	movf	??_txf_clear,w
  4275  0BE6  0021               	movlb	1	; select bank1
  4276  0BE7  00AE               	movwf	(_buf^(0+128)+2)
  4277                           
  4278                           ;mcp2515.c: 154: buf[3] = 0x00;
  4279  0BE8  01AF               	clrf	(_buf^(0+128)+3)
  4280                           
  4281                           ;mcp2515.c: 155: uint8_t bytes_written = SPI_exchange(buf, 4);
  4282  0BE9  3004               	movlw	4
  4283  0BEA  0020               	movlb	0	; select bank0
  4284  0BEB  00A0               	movwf	??_txf_clear
  4285  0BEC  0820               	movf	??_txf_clear,w
  4286  0BED  00F8               	movwf	SPI_exchange@len
  4287  0BEE  30AC               	movlw	(low (_buf| 0))& (0+255)
  4288  0BEF  318A  22F2         	fcall	_SPI_exchange
  4289  0BF1  0020               	movlb	0	; select bank0
  4290  0BF2  00A1               	movwf	??_txf_clear+1
  4291  0BF3  0821               	movf	??_txf_clear+1,w
  4292  0BF4  00A3               	movwf	txf_clear@bytes_written
  4293                           
  4294                           ;mcp2515.c: 159: return 0;
  4295                           ;	Return value of _txf_clear is never used
  4296                           
  4297                           ;mcp2515.c: 158: } else {
  4298                           
  4299                           ;mcp2515.c: 157: return 1;
  4300                           ;	Return value of _txf_clear is never used
  4301  0BF5  0008               	return
  4302  0BF6                     __end_of_txf_clear:	
  4303                           
  4304                           	psect	text3
  4305  0E87                     __ptext3:	
  4306 ;; *************** function _receive *****************
  4307 ;; Defined at:
  4308 ;;		line 166 in file "mcp2515.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  n               1    wreg     unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  n               1   60[BANK0 ] unsigned char 
  4313 ;;  rx_buf         15   41[BANK0 ] unsigned char [15]
  4314 ;;  id              2   57[BANK0 ] unsigned int 
  4315 ;;  dlc             1   59[BANK0 ] unsigned char 
  4316 ;;  pbuf            1   56[BANK0 ] PTR unsigned char 
  4317 ;;		 -> receive@rx_buf(15), 
  4318 ;;  bytes_read      1   40[BANK0 ] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;Total ram usage:       26 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    3
  4335 ;; This function calls:
  4336 ;;		Absolute function
  4337 ;;		_SPI_exchange
  4338 ;;		_printf
  4339 ;;		_receive_handler
  4340 ;; This function is called by:
  4341 ;;		_can_status_check
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _receive
  4347  0E87                     _receive:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4351                           ;receive@n stored from wreg
  4352  0E87  0020               	movlb	0	; select bank0
  4353  0E88  00DC               	movwf	receive@n
  4354                           
  4355                           ;mcp2515.c: 170: uint8_t rx_buf[15];
  4356                           ;mcp2515.c: 173: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  4357  0E89  085C               	movf	receive@n,w
  4358  0E8A  3E84               	addlw	low (_nm| (0+32768))
  4359  0E8B  0084               	movwf	4
  4360  0E8C  3094               	movlw	high (_nm| (0+32768))
  4361  0E8D  1803               	skipnc
  4362  0E8E  3E01               	addlw	1
  4363  0E8F  0085               	movwf	5
  4364  0E90  0800               	movf	0,w	;code access
  4365  0E91  0709               	addwf	9,w
  4366  0E92  3E90               	addlw	144
  4367  0E93  00C3               	movwf	??_receive
  4368  0E94  0843               	movf	??_receive,w
  4369  0E95  00C9               	movwf	receive@rx_buf
  4370                           
  4371                           ;mcp2515.c: 174: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4372  0E96  300E               	movlw	14
  4373  0E97  00C3               	movwf	??_receive
  4374  0E98  0843               	movf	??_receive,w
  4375  0E99  00F8               	movwf	SPI_exchange@len
  4376  0E9A  3049               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4377  0E9B  318A  22F2  318E   	fcall	_SPI_exchange
  4378  0E9E  0020               	movlb	0	; select bank0
  4379  0E9F  00C4               	movwf	??_receive+1
  4380  0EA0  0844               	movf	??_receive+1,w
  4381  0EA1  00C8               	movwf	receive@bytes_read
  4382                           
  4383                           ;mcp2515.c: 175: uint8_t dlc = rx_buf[5];
  4384  0EA2  084E               	movf	receive@rx_buf+5,w
  4385  0EA3  00C3               	movwf	??_receive
  4386  0EA4  0843               	movf	??_receive,w
  4387  0EA5  00DB               	movwf	receive@dlc
  4388                           
  4389                           ;mcp2515.c: 176: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4390  0EA6  084B               	movf	receive@rx_buf+2,w
  4391  0EA7  00C3               	movwf	??_receive
  4392  0EA8  3005               	movlw	5
  4393  0EA9                     u2025:	
  4394  0EA9  36C3               	lsrf	??_receive,f
  4395  0EAA  0B89               	decfsz	9,f
  4396  0EAB  2EA9               	goto	u2025
  4397  0EAC  0843               	movf	??_receive,w
  4398  0EAD  00C4               	movwf	??_receive+1
  4399  0EAE  01C5               	clrf	??_receive+2
  4400  0EAF  084A               	movf	receive@rx_buf+1,w
  4401  0EB0  00C6               	movwf	??_receive+3
  4402  0EB1  01C7               	clrf	??_receive+4
  4403  0EB2  35C6               	lslf	??_receive+3,f
  4404  0EB3  0DC7               	rlf	??_receive+4,f
  4405  0EB4  35C6               	lslf	??_receive+3,f
  4406  0EB5  0DC7               	rlf	??_receive+4,f
  4407  0EB6  35C6               	lslf	??_receive+3,f
  4408  0EB7  0DC7               	rlf	??_receive+4,f
  4409  0EB8  0844               	movf	??_receive+1,w
  4410  0EB9  0746               	addwf	??_receive+3,w
  4411  0EBA  00D9               	movwf	receive@id
  4412  0EBB  0845               	movf	??_receive+2,w
  4413  0EBC  3D47               	addwfc	??_receive+4,w
  4414  0EBD  00DA               	movwf	receive@id+1
  4415                           
  4416                           ;mcp2515.c: 177: id = id & 0b0000011111111111u;
  4417  0EBE  30FF               	movlw	255
  4418  0EBF  0559               	andwf	receive@id,w
  4419  0EC0  00D9               	movwf	receive@id
  4420  0EC1  3007               	movlw	7
  4421  0EC2  055A               	andwf	receive@id+1,w
  4422  0EC3  00DA               	movwf	receive@id+1
  4423                           
  4424                           ;mcp2515.c: 178: rx_buf[6u+dlc] = (uint8_t)'\0';
  4425  0EC4  085B               	movf	receive@dlc,w
  4426  0EC5  3E06               	addlw	6
  4427  0EC6  3E49               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4428  0EC7  0086               	movwf	6
  4429  0EC8  0187               	clrf	7
  4430  0EC9  0181               	clrf	1
  4431                           
  4432                           ;mcp2515.c: 180: if (mode.debug) {
  4433  0ECA  0869               	movf	_mode,w
  4434  0ECB  1903               	btfsc	3,2
  4435  0ECC  2F24               	goto	l2379
  4436                           
  4437                           ;mcp2515.c: 181: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4438  0ECD  301E               	movlw	low (STR_21| (0+32768))
  4439  0ECE  00A2               	movwf	printf@f
  4440  0ECF  3093               	movlw	high (STR_21| (0+32768))
  4441  0ED0  00A3               	movwf	printf@f+1
  4442  0ED1  085C               	movf	receive@n,w
  4443  0ED2  00C3               	movwf	??_receive
  4444  0ED3  01C4               	clrf	??_receive+1
  4445  0ED4  0843               	movf	??_receive,w
  4446  0ED5  00A4               	movwf	?_printf+2
  4447  0ED6  0844               	movf	??_receive+1,w
  4448  0ED7  00A5               	movwf	?_printf+3
  4449  0ED8  084A               	movf	receive@rx_buf+1,w
  4450  0ED9  00C5               	movwf	??_receive+2
  4451  0EDA  01C6               	clrf	??_receive+3
  4452  0EDB  0845               	movf	??_receive+2,w
  4453  0EDC  00A6               	movwf	?_printf+4
  4454  0EDD  0846               	movf	??_receive+3,w
  4455  0EDE  00A7               	movwf	?_printf+5
  4456  0EDF  3185  25A3  318E   	fcall	_printf
  4457                           
  4458                           ;mcp2515.c: 182: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4459  0EE2  3040               	movlw	low (STR_22| (0+32768))
  4460  0EE3  0020               	movlb	0	; select bank0
  4461  0EE4  00A2               	movwf	printf@f
  4462  0EE5  3093               	movlw	high (STR_22| (0+32768))
  4463  0EE6  00A3               	movwf	printf@f+1
  4464  0EE7  085C               	movf	receive@n,w
  4465  0EE8  00C3               	movwf	??_receive
  4466  0EE9  01C4               	clrf	??_receive+1
  4467  0EEA  0843               	movf	??_receive,w
  4468  0EEB  00A4               	movwf	?_printf+2
  4469  0EEC  0844               	movf	??_receive+1,w
  4470  0EED  00A5               	movwf	?_printf+3
  4471  0EEE  084B               	movf	receive@rx_buf+2,w
  4472  0EEF  00C5               	movwf	??_receive+2
  4473  0EF0  01C6               	clrf	??_receive+3
  4474  0EF1  0845               	movf	??_receive+2,w
  4475  0EF2  00A6               	movwf	?_printf+4
  4476  0EF3  0846               	movf	??_receive+3,w
  4477  0EF4  00A7               	movwf	?_printf+5
  4478  0EF5  3185  25A3  318E   	fcall	_printf
  4479                           
  4480                           ;mcp2515.c: 183: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4481  0EF8  3062               	movlw	low (STR_23| (0+32768))
  4482  0EF9  0020               	movlb	0	; select bank0
  4483  0EFA  00A2               	movwf	printf@f
  4484  0EFB  3093               	movlw	high (STR_23| (0+32768))
  4485  0EFC  00A3               	movwf	printf@f+1
  4486  0EFD  085C               	movf	receive@n,w
  4487  0EFE  00C3               	movwf	??_receive
  4488  0EFF  01C4               	clrf	??_receive+1
  4489  0F00  0843               	movf	??_receive,w
  4490  0F01  00A4               	movwf	?_printf+2
  4491  0F02  0844               	movf	??_receive+1,w
  4492  0F03  00A5               	movwf	?_printf+3
  4493  0F04  084E               	movf	receive@rx_buf+5,w
  4494  0F05  00C5               	movwf	??_receive+2
  4495  0F06  01C6               	clrf	??_receive+3
  4496  0F07  0845               	movf	??_receive+2,w
  4497  0F08  00A6               	movwf	?_printf+4
  4498  0F09  0846               	movf	??_receive+3,w
  4499  0F0A  00A7               	movwf	?_printf+5
  4500  0F0B  3185  25A3  318E   	fcall	_printf
  4501                           
  4502                           ;mcp2515.c: 184: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4503  0F0E  30C2               	movlw	low (STR_24| (0+32768))
  4504  0F0F  0020               	movlb	0	; select bank0
  4505  0F10  00A2               	movwf	printf@f
  4506  0F11  3093               	movlw	high (STR_24| (0+32768))
  4507  0F12  00A3               	movwf	printf@f+1
  4508  0F13  085C               	movf	receive@n,w
  4509  0F14  00C3               	movwf	??_receive
  4510  0F15  01C4               	clrf	??_receive+1
  4511  0F16  0843               	movf	??_receive,w
  4512  0F17  00A4               	movwf	?_printf+2
  4513  0F18  0844               	movf	??_receive+1,w
  4514  0F19  00A5               	movwf	?_printf+3
  4515  0F1A  084F               	movf	receive@rx_buf+6,w
  4516  0F1B  00C5               	movwf	??_receive+2
  4517  0F1C  01C6               	clrf	??_receive+3
  4518  0F1D  0845               	movf	??_receive+2,w
  4519  0F1E  00A6               	movwf	?_printf+4
  4520  0F1F  0846               	movf	??_receive+3,w
  4521  0F20  00A7               	movwf	?_printf+5
  4522  0F21  3185  25A3  318E   	fcall	_printf
  4523  0F24                     l2379:	
  4524                           
  4525                           ;mcp2515.c: 185: }
  4526                           ;mcp2515.c: 188: uint8_t *pbuf = &rx_buf[6];
  4527  0F24  304F               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4528  0F25  0020               	movlb	0	; select bank0
  4529  0F26  00C3               	movwf	??_receive
  4530  0F27  0843               	movf	??_receive,w
  4531  0F28  00D8               	movwf	receive@pbuf
  4532                           
  4533                           ;mcp2515.c: 189: handler(id, pbuf, dlc);
  4534  0F29  085A               	movf	receive@id+1,w
  4535  0F2A  00A1               	movwf	receive_handler@sid+1
  4536  0F2B  0859               	movf	receive@id,w
  4537  0F2C  00A0               	movwf	receive_handler@sid
  4538  0F2D  0858               	movf	receive@pbuf,w
  4539  0F2E  00C3               	movwf	??_receive
  4540  0F2F  0843               	movf	??_receive,w
  4541  0F30  00A2               	movwf	receive_handler@buf
  4542  0F31  085B               	movf	receive@dlc,w
  4543  0F32  00C4               	movwf	??_receive+1
  4544  0F33  0844               	movf	??_receive+1,w
  4545  0F34  00A3               	movwf	receive_handler@dlc
  4546  0F35  0868               	movf	_handler+1,w
  4547  0F36  008A               	movwf	10
  4548  0F37  0867               	movf	_handler,w
  4549  0F38  000A               	callw
  4550  0F39  318E               	pagesel	$
  4551  0F3A  0008               	return
  4552  0F3B                     __end_of_receive:	
  4553                           
  4554                           	psect	text4
  4555  0F3B                     __ptext4:	
  4556 ;; *************** function _receive_handler *****************
  4557 ;; Defined at:
  4558 ;;		line 37 in file "main.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  sid             2    0[BANK0 ] unsigned int 
  4561 ;;  buf             1    2[BANK0 ] PTR unsigned char 
  4562 ;;		 -> receive@rx_buf(15), 
  4563 ;;  dlc             1    3[BANK0 ] unsigned char 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  sidb            2   15[BANK0 ] unsigned int 
  4566 ;;  sida            2   13[BANK0 ] unsigned int 
  4567 ;;  sid3            2   11[BANK0 ] unsigned int 
  4568 ;;  sid2            2    9[BANK0 ] unsigned int 
  4569 ;;  sid1            2    7[BANK0 ] unsigned int 
  4570 ;;  sid0            2    5[BANK0 ] unsigned int 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4580 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;Total ram usage:       17 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    1
  4587 ;; This function calls:
  4588 ;;		___lwdiv
  4589 ;;		___lwmod
  4590 ;; This function is called by:
  4591 ;;		_main
  4592 ;;		_receive
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _receive_handler
  4598  0F3B                     _receive_handler:	
  4599                           
  4600                           ;main.c: 38: uint16_t sid0, sid1, sid2, sid3, sida, sidb;
  4601                           ;main.c: 39: if (receive_buf.printing) {
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4605  0F3B  0021               	movlb	1	; select bank1
  4606  0F3C  084B               	movf	(_receive_buf^(0+128)+15),w
  4607  0F3D  1D03               	btfss	3,2
  4608  0F3E  0008               	return
  4609                           
  4610                           ;main.c: 43: if (with_sid) {
  4611                           
  4612                           ;main.c: 41: } else {
  4613  0F3F  0020               	movlb	0	; select bank0
  4614  0F40  086E               	movf	_with_sid,w
  4615  0F41  1903               	btfsc	3,2
  4616  0F42  2FE3               	goto	l2097
  4617                           
  4618                           ;main.c: 46: sid0 = sid / 1000u;
  4619  0F43  30E8               	movlw	232
  4620  0F44  00F0               	movwf	___lwdiv@divisor
  4621  0F45  3003               	movlw	3
  4622  0F46  00F1               	movwf	___lwdiv@divisor+1
  4623  0F47  0821               	movf	receive_handler@sid+1,w
  4624  0F48  00F3               	movwf	___lwdiv@dividend+1
  4625  0F49  0820               	movf	receive_handler@sid,w
  4626  0F4A  00F2               	movwf	___lwdiv@dividend
  4627  0F4B  318C  2429  318F   	fcall	___lwdiv
  4628  0F4E  0871               	movf	?___lwdiv+1,w
  4629  0F4F  0020               	movlb	0	; select bank0
  4630  0F50  00A6               	movwf	receive_handler@sid0+1
  4631  0F51  0870               	movf	?___lwdiv,w
  4632  0F52  00A5               	movwf	receive_handler@sid0
  4633                           
  4634                           ;main.c: 47: sida = sid % 1000u;
  4635  0F53  30E8               	movlw	232
  4636  0F54  00F8               	movwf	___lwmod@divisor
  4637  0F55  3003               	movlw	3
  4638  0F56  00F9               	movwf	___lwmod@divisor+1
  4639  0F57  0821               	movf	receive_handler@sid+1,w
  4640  0F58  00FB               	movwf	___lwmod@dividend+1
  4641  0F59  0820               	movf	receive_handler@sid,w
  4642  0F5A  00FA               	movwf	___lwmod@dividend
  4643  0F5B  318B  239C  318F   	fcall	___lwmod
  4644  0F5E  0879               	movf	?___lwmod+1,w
  4645  0F5F  0020               	movlb	0	; select bank0
  4646  0F60  00AE               	movwf	receive_handler@sida+1
  4647  0F61  0878               	movf	?___lwmod,w
  4648  0F62  00AD               	movwf	receive_handler@sida
  4649                           
  4650                           ;main.c: 48: sid1 = sida / 100u;
  4651  0F63  3064               	movlw	100
  4652  0F64  00F0               	movwf	___lwdiv@divisor
  4653  0F65  3000               	movlw	0
  4654  0F66  00F1               	movwf	___lwdiv@divisor+1
  4655  0F67  082E               	movf	receive_handler@sida+1,w
  4656  0F68  00F3               	movwf	___lwdiv@dividend+1
  4657  0F69  082D               	movf	receive_handler@sida,w
  4658  0F6A  00F2               	movwf	___lwdiv@dividend
  4659  0F6B  318C  2429  318F   	fcall	___lwdiv
  4660  0F6E  0871               	movf	?___lwdiv+1,w
  4661  0F6F  0020               	movlb	0	; select bank0
  4662  0F70  00A8               	movwf	receive_handler@sid1+1
  4663  0F71  0870               	movf	?___lwdiv,w
  4664  0F72  00A7               	movwf	receive_handler@sid1
  4665                           
  4666                           ;main.c: 49: sidb = sida % 100u;
  4667  0F73  3064               	movlw	100
  4668  0F74  00F8               	movwf	___lwmod@divisor
  4669  0F75  3000               	movlw	0
  4670  0F76  00F9               	movwf	___lwmod@divisor+1
  4671  0F77  082E               	movf	receive_handler@sida+1,w
  4672  0F78  00FB               	movwf	___lwmod@dividend+1
  4673  0F79  082D               	movf	receive_handler@sida,w
  4674  0F7A  00FA               	movwf	___lwmod@dividend
  4675  0F7B  318B  239C  318F   	fcall	___lwmod
  4676  0F7E  0879               	movf	?___lwmod+1,w
  4677  0F7F  0020               	movlb	0	; select bank0
  4678  0F80  00B0               	movwf	receive_handler@sidb+1
  4679  0F81  0878               	movf	?___lwmod,w
  4680  0F82  00AF               	movwf	receive_handler@sidb
  4681                           
  4682                           ;main.c: 50: sid2 = sidb / 10u;
  4683  0F83  300A               	movlw	10
  4684  0F84  00F0               	movwf	___lwdiv@divisor
  4685  0F85  3000               	movlw	0
  4686  0F86  00F1               	movwf	___lwdiv@divisor+1
  4687  0F87  0830               	movf	receive_handler@sidb+1,w
  4688  0F88  00F3               	movwf	___lwdiv@dividend+1
  4689  0F89  082F               	movf	receive_handler@sidb,w
  4690  0F8A  00F2               	movwf	___lwdiv@dividend
  4691  0F8B  318C  2429  318F   	fcall	___lwdiv
  4692  0F8E  0871               	movf	?___lwdiv+1,w
  4693  0F8F  0020               	movlb	0	; select bank0
  4694  0F90  00AA               	movwf	receive_handler@sid2+1
  4695  0F91  0870               	movf	?___lwdiv,w
  4696  0F92  00A9               	movwf	receive_handler@sid2
  4697                           
  4698                           ;main.c: 51: sid3 = sidb % 10u;
  4699  0F93  300A               	movlw	10
  4700  0F94  00F8               	movwf	___lwmod@divisor
  4701  0F95  3000               	movlw	0
  4702  0F96  00F9               	movwf	___lwmod@divisor+1
  4703  0F97  0830               	movf	receive_handler@sidb+1,w
  4704  0F98  00FB               	movwf	___lwmod@dividend+1
  4705  0F99  082F               	movf	receive_handler@sidb,w
  4706  0F9A  00FA               	movwf	___lwmod@dividend
  4707  0F9B  318B  239C  318F   	fcall	___lwmod
  4708  0F9E  0879               	movf	?___lwmod+1,w
  4709  0F9F  0020               	movlb	0	; select bank0
  4710  0FA0  00AC               	movwf	receive_handler@sid3+1
  4711  0FA1  0878               	movf	?___lwmod,w
  4712  0FA2  00AB               	movwf	receive_handler@sid3
  4713                           
  4714                           ;main.c: 52: receive_buf.buf[0] = (uint8_t)(sid0 + 0x30u);
  4715  0FA3  0825               	movf	receive_handler@sid0,w
  4716  0FA4  3E30               	addlw	48
  4717  0FA5  00A4               	movwf	??_receive_handler
  4718  0FA6  0824               	movf	??_receive_handler,w
  4719  0FA7  0021               	movlb	1	; select bank1
  4720  0FA8  00BC               	movwf	_receive_buf^(0+128)
  4721                           
  4722                           ;main.c: 53: receive_buf.buf[1] = (uint8_t)(sid1 + 0x30u);
  4723  0FA9  0020               	movlb	0	; select bank0
  4724  0FAA  0827               	movf	receive_handler@sid1,w
  4725  0FAB  3E30               	addlw	48
  4726  0FAC  00A4               	movwf	??_receive_handler
  4727  0FAD  0824               	movf	??_receive_handler,w
  4728  0FAE  0021               	movlb	1	; select bank1
  4729  0FAF  00BD               	movwf	(_receive_buf^(0+128)+1)
  4730                           
  4731                           ;main.c: 54: receive_buf.buf[2] = (uint8_t)(sid2 + 0x30u);
  4732  0FB0  0020               	movlb	0	; select bank0
  4733  0FB1  0829               	movf	receive_handler@sid2,w
  4734  0FB2  3E30               	addlw	48
  4735  0FB3  00A4               	movwf	??_receive_handler
  4736  0FB4  0824               	movf	??_receive_handler,w
  4737  0FB5  0021               	movlb	1	; select bank1
  4738  0FB6  00BE               	movwf	(_receive_buf^(0+128)+2)
  4739                           
  4740                           ;main.c: 55: receive_buf.buf[3] = (uint8_t)(sid3 + 0x30u);
  4741  0FB7  0020               	movlb	0	; select bank0
  4742  0FB8  082B               	movf	receive_handler@sid3,w
  4743  0FB9  3E30               	addlw	48
  4744  0FBA  00A4               	movwf	??_receive_handler
  4745  0FBB  0824               	movf	??_receive_handler,w
  4746  0FBC  0021               	movlb	1	; select bank1
  4747  0FBD  00BF               	movwf	(_receive_buf^(0+128)+3)
  4748                           
  4749                           ;main.c: 56: receive_buf.buf[4] = ',';
  4750  0FBE  302C               	movlw	44
  4751  0FBF  0020               	movlb	0	; select bank0
  4752  0FC0  00A4               	movwf	??_receive_handler
  4753  0FC1  0824               	movf	??_receive_handler,w
  4754  0FC2  0021               	movlb	1	; select bank1
  4755  0FC3  00C0               	movwf	(_receive_buf^(0+128)+4)
  4756                           
  4757                           ;main.c: 58: __builtin_memcpy(&receive_buf.buf[5],buf,dlc);
  4758  0FC4  3005               	movlw	5
  4759  0FC5  3EBC               	addlw	(low (_receive_buf| 0))& (0+255)
  4760  0FC6  0086               	movwf	6
  4761  0FC7  0187               	clrf	7
  4762  0FC8  0020               	movlb	0	; select bank0
  4763  0FC9  0822               	movf	receive_handler@buf,w
  4764  0FCA  0084               	movwf	4
  4765  0FCB  0185               	clrf	5
  4766  0FCC  0823               	movf	receive_handler@dlc,w
  4767  0FCD  00A4               	movwf	??_receive_handler
  4768  0FCE  0824               	movf	??_receive_handler,w
  4769  0FCF  1903               	skipnz
  4770  0FD0  2FD5               	goto	l2093
  4771  0FD1                     u165m0:	
  4772  0FD1  0012               	moviw fsr0++
  4773  0FD2  001E               	movwi fsr1++
  4774  0FD3  0BA4               	decfsz	??_receive_handler,f
  4775  0FD4  2FD1               	goto	u165m0
  4776  0FD5                     l2093:	
  4777                           
  4778                           ;main.c: 59: receive_buf.buf[5+dlc] = '\n';
  4779  0FD5  300A               	movlw	10
  4780  0FD6  0020               	movlb	0	; select bank0
  4781  0FD7  00A4               	movwf	??_receive_handler
  4782  0FD8  0823               	movf	receive_handler@dlc,w
  4783  0FD9  3E05               	addlw	5
  4784  0FDA  3EBC               	addlw	(low (_receive_buf| 0))& (0+255)
  4785  0FDB  0086               	movwf	6
  4786  0FDC  0187               	clrf	7
  4787  0FDD  0824               	movf	??_receive_handler,w
  4788  0FDE  0081               	movwf	1
  4789                           
  4790                           ;main.c: 60: receive_buf.printing = 1;
  4791  0FDF  0021               	movlb	1	; select bank1
  4792  0FE0  01CB               	clrf	(_receive_buf^(0+128)+15)
  4793  0FE1  0ACB               	incf	(_receive_buf^(0+128)+15),f
  4794                           
  4795                           ;main.c: 61: } else {
  4796  0FE2  0008               	return
  4797  0FE3                     l2097:	
  4798                           
  4799                           ;main.c: 62: __builtin_memcpy(receive_buf.buf,buf,dlc);
  4800  0FE3  30BC               	movlw	low (_receive_buf| 0)
  4801  0FE4  0086               	movwf	6
  4802  0FE5  0187               	clrf	7
  4803  0FE6  0020               	movlb	0	; select bank0
  4804  0FE7  0822               	movf	receive_handler@buf,w
  4805  0FE8  0084               	movwf	4
  4806  0FE9  0185               	clrf	5
  4807  0FEA  0823               	movf	receive_handler@dlc,w
  4808  0FEB  00A4               	movwf	??_receive_handler
  4809  0FEC  0824               	movf	??_receive_handler,w
  4810  0FED  1903               	skipnz
  4811  0FEE  2FF3               	goto	l2099
  4812  0FEF                     u166m0:	
  4813  0FEF  0012               	moviw fsr0++
  4814  0FF0  001E               	movwi fsr1++
  4815  0FF1  0BA4               	decfsz	??_receive_handler,f
  4816  0FF2  2FEF               	goto	u166m0
  4817  0FF3                     l2099:	
  4818                           
  4819                           ;main.c: 63: receive_buf.buf[dlc] = '\n';
  4820  0FF3  300A               	movlw	10
  4821  0FF4  0020               	movlb	0	; select bank0
  4822  0FF5  00A4               	movwf	??_receive_handler
  4823  0FF6  0823               	movf	receive_handler@dlc,w
  4824  0FF7  3EBC               	addlw	(low (_receive_buf| 0))& (0+255)
  4825  0FF8  0086               	movwf	6
  4826  0FF9  0187               	clrf	7
  4827  0FFA  0824               	movf	??_receive_handler,w
  4828  0FFB  0081               	movwf	1
  4829                           
  4830                           ;main.c: 64: receive_buf.printing = 1;
  4831  0FFC  0021               	movlb	1	; select bank1
  4832  0FFD  01CB               	clrf	(_receive_buf^(0+128)+15)
  4833  0FFE  0ACB               	incf	(_receive_buf^(0+128)+15),f
  4834  0FFF  0008               	return
  4835  1000                     __end_of_receive_handler:	
  4836                           
  4837                           	psect	text5
  4838  0DE2                     __ptext5:	
  4839 ;; *************** function _can_set_mask *****************
  4840 ;; Defined at:
  4841 ;;		line 122 in file "mcp2515.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;  cmd             1    wreg     unsigned char 
  4844 ;;  n               1   39[BANK0 ] unsigned char 
  4845 ;;  mask            2   40[BANK0 ] unsigned int 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  cmd             1   50[BANK0 ] unsigned char 
  4848 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  4849 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4859 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;Total ram usage:       14 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    4
  4866 ;; This function calls:
  4867 ;;		_SPI_exchange
  4868 ;;		_abort_pending_transmissions
  4869 ;;		_can_ope_mode
  4870 ;;		_printf
  4871 ;; This function is called by:
  4872 ;;		_main
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _can_set_mask
  4878  0DE2                     _can_set_mask:	
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4882                           ;can_set_mask@cmd stored from wreg
  4883  0DE2  0020               	movlb	0	; select bank0
  4884  0DE3  00D2               	movwf	can_set_mask@cmd
  4885                           
  4886                           ;mcp2515.c: 123: can_ope_mode(0b10000000u);
  4887  0DE4  3080               	movlw	128
  4888  0DE5  318D  2501  318D   	fcall	_can_ope_mode
  4889                           
  4890                           ;mcp2515.c: 124: abort_pending_transmissions();
  4891  0DE8  318B  2376  318D   	fcall	_abort_pending_transmissions
  4892                           
  4893                           ;mcp2515.c: 125: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  4894  0DEB  3008               	movlw	8
  4895  0DEC  0020               	movlb	0	; select bank0
  4896  0DED  0249               	subwf	can_set_mask@mask+1,w
  4897  0DEE  3000               	movlw	0
  4898  0DEF  1903               	skipnz
  4899  0DF0  0248               	subwf	can_set_mask@mask,w
  4900  0DF1  1C03               	btfss	3,0
  4901  0DF2  2DF7               	goto	l2571
  4902  0DF3  30FF               	movlw	255
  4903  0DF4  00C8               	movwf	can_set_mask@mask
  4904  0DF5  3007               	movlw	7
  4905  0DF6  00C9               	movwf	can_set_mask@mask+1
  4906  0DF7                     l2571:	
  4907                           
  4908                           ;mcp2515.c: 126: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  4909  0DF7  0849               	movf	can_set_mask@mask+1,w
  4910  0DF8  00CB               	movwf	??_can_set_mask+1
  4911  0DF9  0848               	movf	can_set_mask@mask,w
  4912  0DFA  00CA               	movwf	??_can_set_mask
  4913  0DFB  36CB               	lsrf	??_can_set_mask+1,f
  4914  0DFC  0CCA               	rrf	??_can_set_mask,f
  4915  0DFD  36CB               	lsrf	??_can_set_mask+1,f
  4916  0DFE  0CCA               	rrf	??_can_set_mask,f
  4917  0DFF  36CB               	lsrf	??_can_set_mask+1,f
  4918  0E00  0CCA               	rrf	??_can_set_mask,f
  4919  0E01  084A               	movf	??_can_set_mask,w
  4920  0E02  00CC               	movwf	??_can_set_mask+2
  4921  0E03  084C               	movf	??_can_set_mask+2,w
  4922  0E04  00D3               	movwf	can_set_mask@mask_sidh
  4923                           
  4924                           ;mcp2515.c: 127: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  4925  0E05  0848               	movf	can_set_mask@mask,w
  4926  0E06  3907               	andlw	7
  4927  0E07  00CA               	movwf	??_can_set_mask
  4928  0E08  3004               	movlw	4
  4929  0E09                     u2225:	
  4930  0E09  35CA               	lslf	??_can_set_mask,f
  4931  0E0A  3EFF               	addlw	-1
  4932  0E0B  1D03               	skipz
  4933  0E0C  2E09               	goto	u2225
  4934  0E0D  354A               	lslf	??_can_set_mask,w
  4935  0E0E  00CB               	movwf	??_can_set_mask+1
  4936  0E0F  084B               	movf	??_can_set_mask+1,w
  4937  0E10  00D4               	movwf	can_set_mask@mask_sidl
  4938                           
  4939                           ;mcp2515.c: 129: if (cmd == 0u) {
  4940  0E11  0852               	movf	can_set_mask@cmd,w
  4941  0E12  1D03               	btfss	3,2
  4942  0E13  2E23               	goto	l2583
  4943                           
  4944                           ;mcp2515.c: 130: save_rxmn[n] = mask;
  4945  0E14  3547               	lslf	can_set_mask@n,w
  4946  0E15  3E63               	addlw	(low (_save_rxmn| 0))& (0+255)
  4947  0E16  0086               	movwf	6
  4948  0E17  0187               	clrf	7
  4949  0E18  0848               	movf	can_set_mask@mask,w
  4950  0E19  3FC0               	movwi [0]fsr1
  4951  0E1A  0849               	movf	can_set_mask@mask+1,w
  4952  0E1B  3FC1               	movwi [1]fsr1
  4953                           
  4954                           ;mcp2515.c: 131: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  4955  0E1C  0869               	movf	_mode,w
  4956  0E1D  1903               	btfsc	3,2
  4957  0E1E  2E4B               	goto	l2589
  4958  0E1F  3097               	movlw	low (STR_19| (0+32768))
  4959  0E20  00A2               	movwf	printf@f
  4960  0E21  3092               	movlw	high (STR_19| (0+32768))
  4961  0E22  2E32               	goto	L6
  4962  0E23                     l2583:	
  4963                           ;mcp2515.c: 132: } else {
  4964                           
  4965                           
  4966                           ;mcp2515.c: 133: save_rxfn[n] = mask;
  4967  0E23  0020               	movlb	0	; select bank0
  4968  0E24  3547               	lslf	can_set_mask@n,w
  4969  0E25  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  4970  0E26  0086               	movwf	6
  4971  0E27  0187               	clrf	7
  4972  0E28  0848               	movf	can_set_mask@mask,w
  4973  0E29  3FC0               	movwi [0]fsr1
  4974  0E2A  0849               	movf	can_set_mask@mask+1,w
  4975  0E2B  3FC1               	movwi [1]fsr1
  4976                           
  4977                           ;mcp2515.c: 134: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  4978  0E2C  0869               	movf	_mode,w
  4979  0E2D  1903               	btfsc	3,2
  4980  0E2E  2E4B               	goto	l2589
  4981  0E2F  306A               	movlw	low (STR_20| (0+32768))
  4982  0E30  00A2               	movwf	printf@f
  4983  0E31  3092               	movlw	high (STR_20| (0+32768))
  4984  0E32                     L6:	
  4985  0E32  00A3               	movwf	printf@f+1
  4986  0E33  0847               	movf	can_set_mask@n,w
  4987  0E34  00CA               	movwf	??_can_set_mask
  4988  0E35  01CB               	clrf	??_can_set_mask+1
  4989  0E36  084A               	movf	??_can_set_mask,w
  4990  0E37  00A4               	movwf	?_printf+2
  4991  0E38  084B               	movf	??_can_set_mask+1,w
  4992  0E39  00A5               	movwf	?_printf+3
  4993  0E3A  0853               	movf	can_set_mask@mask_sidh,w
  4994  0E3B  00CC               	movwf	??_can_set_mask+2
  4995  0E3C  01CD               	clrf	??_can_set_mask+3
  4996  0E3D  084C               	movf	??_can_set_mask+2,w
  4997  0E3E  00A6               	movwf	?_printf+4
  4998  0E3F  084D               	movf	??_can_set_mask+3,w
  4999  0E40  00A7               	movwf	?_printf+5
  5000  0E41  0854               	movf	can_set_mask@mask_sidl,w
  5001  0E42  00CE               	movwf	??_can_set_mask+4
  5002  0E43  01CF               	clrf	??_can_set_mask+5
  5003  0E44  084E               	movf	??_can_set_mask+4,w
  5004  0E45  00A8               	movwf	?_printf+6
  5005  0E46  084F               	movf	??_can_set_mask+5,w
  5006  0E47  00A9               	movwf	?_printf+7
  5007  0E48  3185  25A3  318D   	fcall	_printf
  5008  0E4B                     l2589:	
  5009                           
  5010                           ;mcp2515.c: 135: }
  5011                           ;mcp2515.c: 137: buf[0] = 0b00000010u;
  5012  0E4B  3002               	movlw	2
  5013  0E4C  0020               	movlb	0	; select bank0
  5014  0E4D  00CA               	movwf	??_can_set_mask
  5015  0E4E  084A               	movf	??_can_set_mask,w
  5016  0E4F  0021               	movlb	1	; select bank1
  5017  0E50  00AC               	movwf	_buf^(0+128)
  5018                           
  5019                           ;mcp2515.c: 138: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  5020  0E51  0020               	movlb	0	; select bank0
  5021  0E52  0852               	movf	can_set_mask@cmd,w
  5022  0E53  1903               	btfsc	3,2
  5023  0E54  2E5A               	goto	l2595
  5024  0E55  0847               	movf	can_set_mask@n,w
  5025  0E56  3E70               	addlw	low (_rxfnsidh| (0+32768))
  5026  0E57  0084               	movwf	4
  5027  0E58  3094               	movlw	high (_rxfnsidh| (0+32768))
  5028  0E59  2E5E               	goto	L5
  5029  0E5A                     l2595:	
  5030  0E5A  0847               	movf	can_set_mask@n,w
  5031  0E5B  3E00               	addlw	low (_rxmnsidh| (0+32768))
  5032  0E5C  0084               	movwf	4
  5033  0E5D  3090               	movlw	high (_rxmnsidh| (0+32768))
  5034  0E5E                     L5:	
  5035  0E5E  1803               	skipnc
  5036  0E5F  3E01               	addlw	1
  5037  0E60  0085               	movwf	5
  5038  0E61  0800               	movf	0,w	;code access
  5039  0E62  00CA               	movwf	??_can_set_mask
  5040  0E63  01CB               	clrf	??_can_set_mask+1
  5041  0E64  084A               	movf	??_can_set_mask,w
  5042  0E65  00D0               	movwf	_can_set_mask$522
  5043  0E66  084B               	movf	??_can_set_mask+1,w
  5044  0E67  00D1               	movwf	_can_set_mask$522+1
  5045  0E68  0850               	movf	_can_set_mask$522,w
  5046  0E69  00CA               	movwf	??_can_set_mask
  5047  0E6A  084A               	movf	??_can_set_mask,w
  5048  0E6B  0021               	movlb	1	; select bank1
  5049  0E6C  00AD               	movwf	(_buf^(0+128)+1)
  5050                           
  5051                           ;mcp2515.c: 139: buf[2] = mask_sidh;
  5052  0E6D  0020               	movlb	0	; select bank0
  5053  0E6E  0853               	movf	can_set_mask@mask_sidh,w
  5054  0E6F  00CA               	movwf	??_can_set_mask
  5055  0E70  084A               	movf	??_can_set_mask,w
  5056  0E71  0021               	movlb	1	; select bank1
  5057  0E72  00AE               	movwf	(_buf^(0+128)+2)
  5058                           
  5059                           ;mcp2515.c: 140: buf[3] = mask_sidl;
  5060  0E73  0020               	movlb	0	; select bank0
  5061  0E74  0854               	movf	can_set_mask@mask_sidl,w
  5062  0E75  00CA               	movwf	??_can_set_mask
  5063  0E76  084A               	movf	??_can_set_mask,w
  5064  0E77  0021               	movlb	1	; select bank1
  5065  0E78  00AF               	movwf	(_buf^(0+128)+3)
  5066                           
  5067                           ;mcp2515.c: 141: SPI_exchange(buf, 4);
  5068  0E79  3004               	movlw	4
  5069  0E7A  0020               	movlb	0	; select bank0
  5070  0E7B  00CA               	movwf	??_can_set_mask
  5071  0E7C  084A               	movf	??_can_set_mask,w
  5072  0E7D  00F8               	movwf	SPI_exchange@len
  5073  0E7E  30AC               	movlw	(low (_buf| 0))& (0+255)
  5074  0E7F  318A  22F2  318D   	fcall	_SPI_exchange
  5075                           
  5076                           ;mcp2515.c: 143: can_ope_mode(operation_mode);
  5077  0E82  0020               	movlb	0	; select bank0
  5078  0E83  086D               	movf	_operation_mode,w
  5079  0E84  318D  2501         	fcall	_can_ope_mode
  5080  0E86  0008               	return
  5081  0E87                     __end_of_can_set_mask:	
  5082                           
  5083                           	psect	text6
  5084  0245                     __ptext6:	
  5085 ;; *************** function _can_send *****************
  5086 ;; Defined at:
  5087 ;;		line 195 in file "mcp2515.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  data_buf        1    wreg     PTR unsigned char 
  5090 ;;		 -> main@buf(16), 
  5091 ;;  dlc             1   35[BANK0 ] unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  5094 ;;		 -> main@buf(16), 
  5095 ;;  n               1   45[BANK0 ] unsigned char 
  5096 ;;  i               1   44[BANK0 ] unsigned char 
  5097 ;;  status          1   42[BANK0 ] unsigned char 
  5098 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  5099 ;;  len             1   40[BANK0 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      unsigned char 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:       11 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    3
  5116 ;; This function calls:
  5117 ;;		_SPI_exchange
  5118 ;;		_printf
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           
  5125                           ;psect for function _can_send
  5126  0245                     _can_send:	
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5130                           ;can_send@data_buf stored from wreg
  5131  0245  0020               	movlb	0	; select bank0
  5132  0246  00CB               	movwf	can_send@data_buf
  5133                           
  5134                           ;mcp2515.c: 196: uint8_t i;
  5135                           ;mcp2515.c: 197: uint8_t n = 0;
  5136  0247  01CD               	clrf	can_send@n
  5137                           
  5138                           ;mcp2515.c: 199: buf[0] = 0b10100000u;
  5139  0248  30A0               	movlw	160
  5140  0249  00C4               	movwf	??_can_send
  5141  024A  0844               	movf	??_can_send,w
  5142  024B  0021               	movlb	1	; select bank1
  5143  024C  00AC               	movwf	_buf^(0+128)
  5144                           
  5145                           ;mcp2515.c: 200: buf[1] = 0x00;
  5146  024D  01AD               	clrf	(_buf^(0+128)+1)
  5147                           
  5148                           ;mcp2515.c: 201: uint8_t bytes_written = SPI_exchange(buf, 2);
  5149  024E  3002               	movlw	2
  5150  024F  0020               	movlb	0	; select bank0
  5151  0250  00C4               	movwf	??_can_send
  5152  0251  0844               	movf	??_can_send,w
  5153  0252  00F8               	movwf	SPI_exchange@len
  5154  0253  30AC               	movlw	(low (_buf| 0))& (0+255)
  5155  0254  318A  22F2  3182   	fcall	_SPI_exchange
  5156  0257  0020               	movlb	0	; select bank0
  5157  0258  00C5               	movwf	??_can_send+1
  5158  0259  0845               	movf	??_can_send+1,w
  5159  025A  00C9               	movwf	can_send@bytes_written
  5160                           
  5161                           ;mcp2515.c: 202: uint8_t status = buf[1];
  5162  025B  0021               	movlb	1	; select bank1
  5163  025C  082D               	movf	(_buf^(0+128)+1),w
  5164  025D  0020               	movlb	0	; select bank0
  5165  025E  00C4               	movwf	??_can_send
  5166  025F  0844               	movf	??_can_send,w
  5167  0260  00CA               	movwf	can_send@status
  5168                           
  5169                           ;mcp2515.c: 203: if ((status & 0b01000000u) == 0) {
  5170  0261  1B4A               	btfsc	can_send@status,6
  5171  0262  2A73               	goto	l337
  5172                           
  5173                           ;mcp2515.c: 204: if (mode.debug) printf("TXB2 is idle\n");
  5174  0263  0869               	movf	_mode,w
  5175  0264  1903               	btfsc	3,2
  5176  0265  2A6D               	goto	l2665
  5177  0266  300B               	movlw	low (STR_25| (0+32768))
  5178  0267  00A2               	movwf	printf@f
  5179  0268  3094               	movlw	high (STR_25| (0+32768))
  5180  0269  00A3               	movwf	printf@f+1
  5181  026A  3185  25A3  3182   	fcall	_printf
  5182  026D                     l2665:	
  5183                           
  5184                           ;mcp2515.c: 205: n = 2;
  5185  026D  3002               	movlw	2
  5186  026E  0020               	movlb	0	; select bank0
  5187  026F  00C4               	movwf	??_can_send
  5188  0270  0844               	movf	??_can_send,w
  5189  0271  00CD               	movwf	can_send@n
  5190                           
  5191                           ;mcp2515.c: 206: } else if ((status & 0b00010000u) == 0) {
  5192  0272  2A91               	goto	l2679
  5193  0273                     l337:	
  5194  0273  1A4A               	btfsc	can_send@status,4
  5195  0274  2A83               	goto	l340
  5196                           
  5197                           ;mcp2515.c: 207: if (mode.debug) printf("TXB1 is idle\n");
  5198  0275  0869               	movf	_mode,w
  5199  0276  1903               	btfsc	3,2
  5200  0277  2A7F               	goto	l2671
  5201  0278  30FD               	movlw	low (STR_26| (0+32768))
  5202  0279  00A2               	movwf	printf@f
  5203  027A  3093               	movlw	high (STR_26| (0+32768))
  5204  027B  00A3               	movwf	printf@f+1
  5205  027C  3185  25A3  3182   	fcall	_printf
  5206  027F                     l2671:	
  5207                           
  5208                           ;mcp2515.c: 208: n = 1;
  5209  027F  0020               	movlb	0	; select bank0
  5210  0280  01CD               	clrf	can_send@n
  5211  0281  0ACD               	incf	can_send@n,f
  5212                           
  5213                           ;mcp2515.c: 209: } else if ((status & 0b00000100u) == 0) {
  5214  0282  2A91               	goto	l2679
  5215  0283                     l340:	
  5216  0283  194A               	btfsc	can_send@status,2
  5217  0284  2A91               	goto	l2679
  5218                           
  5219                           ;mcp2515.c: 210: if (mode.debug) printf("TXB0 is idle\n");
  5220  0285  0869               	movf	_mode,w
  5221  0286  1903               	btfsc	3,2
  5222  0287  2A8F               	goto	l2677
  5223  0288  30EF               	movlw	low (STR_27| (0+32768))
  5224  0289  00A2               	movwf	printf@f
  5225  028A  3093               	movlw	high (STR_27| (0+32768))
  5226  028B  00A3               	movwf	printf@f+1
  5227  028C  3185  25A3  3182   	fcall	_printf
  5228  028F                     l2677:	
  5229                           
  5230                           ;mcp2515.c: 211: n = 0;
  5231  028F  0020               	movlb	0	; select bank0
  5232  0290  01CD               	clrf	can_send@n
  5233  0291                     l2679:	
  5234                           
  5235                           ;mcp2515.c: 212: }
  5236                           ;mcp2515.c: 218: buf[0] = 0b01000000u + abc[n];
  5237  0291  084D               	movf	can_send@n,w
  5238  0292  3E7E               	addlw	low (_abc| (0+32768))
  5239  0293  0084               	movwf	4
  5240  0294  3094               	movlw	high (_abc| (0+32768))
  5241  0295  1803               	skipnc
  5242  0296  3E01               	addlw	1
  5243  0297  0085               	movwf	5
  5244  0298  0800               	movf	0,w	;code access
  5245  0299  3E40               	addlw	64
  5246  029A  00C4               	movwf	??_can_send
  5247  029B  0844               	movf	??_can_send,w
  5248  029C  0021               	movlb	1	; select bank1
  5249  029D  00AC               	movwf	_buf^(0+128)
  5250                           
  5251                           ;mcp2515.c: 220: buf[1] = sid.sidh;
  5252  029E  0020               	movlb	0	; select bank0
  5253  029F  086B               	movf	_sid,w
  5254  02A0  00C4               	movwf	??_can_send
  5255  02A1  0844               	movf	??_can_send,w
  5256  02A2  0021               	movlb	1	; select bank1
  5257  02A3  00AD               	movwf	(_buf^(0+128)+1)
  5258                           
  5259                           ;mcp2515.c: 222: buf[2] = sid.sidl;
  5260  02A4  0020               	movlb	0	; select bank0
  5261  02A5  086C               	movf	_sid+1,w
  5262  02A6  00C4               	movwf	??_can_send
  5263  02A7  0844               	movf	??_can_send,w
  5264  02A8  0021               	movlb	1	; select bank1
  5265  02A9  00AE               	movwf	(_buf^(0+128)+2)
  5266                           
  5267                           ;mcp2515.c: 224: buf[3] = 0;
  5268  02AA  01AF               	clrf	(_buf^(0+128)+3)
  5269                           
  5270                           ;mcp2515.c: 226: buf[4] = 0;
  5271  02AB  01B0               	clrf	(_buf^(0+128)+4)
  5272                           
  5273                           ;mcp2515.c: 228: buf[5] = dlc;
  5274  02AC  0020               	movlb	0	; select bank0
  5275  02AD  0843               	movf	can_send@dlc,w
  5276  02AE  00C4               	movwf	??_can_send
  5277  02AF  0844               	movf	??_can_send,w
  5278  02B0  0021               	movlb	1	; select bank1
  5279  02B1  00B1               	movwf	(_buf^(0+128)+5)
  5280                           
  5281                           ;mcp2515.c: 231: for(i=0; i<dlc; i++) {
  5282  02B2  0020               	movlb	0	; select bank0
  5283  02B3  01CC               	clrf	can_send@i
  5284  02B4                     l2701:	
  5285  02B4  0843               	movf	can_send@dlc,w
  5286  02B5  024C               	subwf	can_send@i,w
  5287  02B6  1803               	btfsc	3,0
  5288  02B7  2AE4               	goto	l2703
  5289                           
  5290                           ;mcp2515.c: 232: buf[6u+i] = data_buf[i];
  5291  02B8  084C               	movf	can_send@i,w
  5292  02B9  074B               	addwf	can_send@data_buf,w
  5293  02BA  00C4               	movwf	??_can_send
  5294  02BB  0844               	movf	??_can_send,w
  5295  02BC  0086               	movwf	6
  5296  02BD  0187               	clrf	7
  5297  02BE  0801               	movf	1,w
  5298  02BF  00C5               	movwf	??_can_send+1
  5299  02C0  084C               	movf	can_send@i,w
  5300  02C1  3E06               	addlw	6
  5301  02C2  3EAC               	addlw	(low (_buf| 0))& (0+255)
  5302  02C3  0086               	movwf	6
  5303  02C4  0187               	clrf	7
  5304  02C5  0845               	movf	??_can_send+1,w
  5305  02C6  0081               	movwf	1
  5306                           
  5307                           ;mcp2515.c: 233: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  5308  02C7  0869               	movf	_mode,w
  5309  02C8  1903               	btfsc	3,2
  5310  02C9  2ADE               	goto	l2699
  5311  02CA  30D6               	movlw	low (STR_28| (0+32768))
  5312  02CB  00A2               	movwf	printf@f
  5313  02CC  3092               	movlw	high (STR_28| (0+32768))
  5314  02CD  00A3               	movwf	printf@f+1
  5315  02CE  084C               	movf	can_send@i,w
  5316  02CF  074B               	addwf	can_send@data_buf,w
  5317  02D0  00C4               	movwf	??_can_send
  5318  02D1  0844               	movf	??_can_send,w
  5319  02D2  0086               	movwf	6
  5320  02D3  0187               	clrf	7
  5321  02D4  0801               	movf	1,w
  5322  02D5  00C5               	movwf	??_can_send+1
  5323  02D6  01C6               	clrf	??_can_send+2
  5324  02D7  0845               	movf	??_can_send+1,w
  5325  02D8  00A4               	movwf	?_printf+2
  5326  02D9  0846               	movf	??_can_send+2,w
  5327  02DA  00A5               	movwf	?_printf+3
  5328  02DB  3185  25A3  3182   	fcall	_printf
  5329  02DE                     l2699:	
  5330  02DE  3001               	movlw	1
  5331  02DF  0020               	movlb	0	; select bank0
  5332  02E0  00C4               	movwf	??_can_send
  5333  02E1  0844               	movf	??_can_send,w
  5334  02E2  07CC               	addwf	can_send@i,f
  5335  02E3  2AB4               	goto	l2701
  5336  02E4                     l2703:	
  5337                           
  5338                           ;mcp2515.c: 234: }
  5339                           ;mcp2515.c: 237: uint8_t len = 6u + dlc;
  5340  02E4  0843               	movf	can_send@dlc,w
  5341  02E5  3E06               	addlw	6
  5342  02E6  00C4               	movwf	??_can_send
  5343  02E7  0844               	movf	??_can_send,w
  5344  02E8  00C8               	movwf	can_send@len
  5345                           
  5346                           ;mcp2515.c: 238: uint8_t bytes_written = SPI_exchange(buf, len);
  5347  02E9  0848               	movf	can_send@len,w
  5348  02EA  00C4               	movwf	??_can_send
  5349  02EB  0844               	movf	??_can_send,w
  5350  02EC  00F8               	movwf	SPI_exchange@len
  5351  02ED  30AC               	movlw	(low (_buf| 0))& (0+255)
  5352  02EE  318A  22F2  3182   	fcall	_SPI_exchange
  5353  02F1  0020               	movlb	0	; select bank0
  5354  02F2  00C5               	movwf	??_can_send+1
  5355  02F3  0845               	movf	??_can_send+1,w
  5356  02F4  00C9               	movwf	can_send@bytes_written
  5357                           
  5358                           ;mcp2515.c: 240: buf[0] = 0b00000011u;
  5359  02F5  3003               	movlw	3
  5360  02F6  00C4               	movwf	??_can_send
  5361  02F7  0844               	movf	??_can_send,w
  5362  02F8  0021               	movlb	1	; select bank1
  5363  02F9  00AC               	movwf	_buf^(0+128)
  5364                           
  5365                           ;mcp2515.c: 241: buf[1] = txbnsidh[n];
  5366  02FA  0020               	movlb	0	; select bank0
  5367  02FB  084D               	movf	can_send@n,w
  5368  02FC  3E7B               	addlw	low (_txbnsidh| (0+32768))
  5369  02FD  0084               	movwf	4
  5370  02FE  3094               	movlw	high (_txbnsidh| (0+32768))
  5371  02FF  1803               	skipnc
  5372  0300  3E01               	addlw	1
  5373  0301  0085               	movwf	5
  5374  0302  0800               	movf	0,w	;code access
  5375  0303  00C4               	movwf	??_can_send
  5376  0304  0844               	movf	??_can_send,w
  5377  0305  0021               	movlb	1	; select bank1
  5378  0306  00AD               	movwf	(_buf^(0+128)+1)
  5379                           
  5380                           ;mcp2515.c: 242: buf[2] = 0x00;
  5381  0307  01AE               	clrf	(_buf^(0+128)+2)
  5382                           
  5383                           ;mcp2515.c: 243: SPI_exchange(buf, 3);
  5384  0308  3003               	movlw	3
  5385  0309  0020               	movlb	0	; select bank0
  5386  030A  00C4               	movwf	??_can_send
  5387  030B  0844               	movf	??_can_send,w
  5388  030C  00F8               	movwf	SPI_exchange@len
  5389  030D  30AC               	movlw	(low (_buf| 0))& (0+255)
  5390  030E  318A  22F2  3182   	fcall	_SPI_exchange
  5391                           
  5392                           ;mcp2515.c: 245: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5393  0311  0020               	movlb	0	; select bank0
  5394  0312  0869               	movf	_mode,w
  5395  0313  1903               	btfsc	3,2
  5396  0314  2B2C               	goto	l2719
  5397  0315  302F               	movlw	low (STR_29| (0+32768))
  5398  0316  00A2               	movwf	printf@f
  5399  0317  3093               	movlw	high (STR_29| (0+32768))
  5400  0318  00A3               	movwf	printf@f+1
  5401  0319  084D               	movf	can_send@n,w
  5402  031A  00C4               	movwf	??_can_send
  5403  031B  01C5               	clrf	??_can_send+1
  5404  031C  0844               	movf	??_can_send,w
  5405  031D  00A4               	movwf	?_printf+2
  5406  031E  0845               	movf	??_can_send+1,w
  5407  031F  00A5               	movwf	?_printf+3
  5408  0320  0021               	movlb	1	; select bank1
  5409  0321  082E               	movf	(_buf^(0+128)+2),w
  5410  0322  0020               	movlb	0	; select bank0
  5411  0323  00C6               	movwf	??_can_send+2
  5412  0324  01C7               	clrf	??_can_send+3
  5413  0325  0846               	movf	??_can_send+2,w
  5414  0326  00A6               	movwf	?_printf+4
  5415  0327  0847               	movf	??_can_send+3,w
  5416  0328  00A7               	movwf	?_printf+5
  5417  0329  3185  25A3  3182   	fcall	_printf
  5418  032C                     l2719:	
  5419                           
  5420                           ;mcp2515.c: 246: buf[0] = 0b00000011u;
  5421  032C  3003               	movlw	3
  5422  032D  0020               	movlb	0	; select bank0
  5423  032E  00C4               	movwf	??_can_send
  5424  032F  0844               	movf	??_can_send,w
  5425  0330  0021               	movlb	1	; select bank1
  5426  0331  00AC               	movwf	_buf^(0+128)
  5427                           
  5428                           ;mcp2515.c: 247: buf[1] = txbnsidh[n] + 1u;
  5429  0332  0020               	movlb	0	; select bank0
  5430  0333  084D               	movf	can_send@n,w
  5431  0334  3E7B               	addlw	low (_txbnsidh| (0+32768))
  5432  0335  0084               	movwf	4
  5433  0336  3094               	movlw	high (_txbnsidh| (0+32768))
  5434  0337  1803               	skipnc
  5435  0338  3E01               	addlw	1
  5436  0339  0085               	movwf	5
  5437  033A  0800               	movf	0,w	;code access
  5438  033B  3E01               	addlw	1
  5439  033C  00C4               	movwf	??_can_send
  5440  033D  0844               	movf	??_can_send,w
  5441  033E  0021               	movlb	1	; select bank1
  5442  033F  00AD               	movwf	(_buf^(0+128)+1)
  5443                           
  5444                           ;mcp2515.c: 248: buf[2] = 0x00;
  5445  0340  01AE               	clrf	(_buf^(0+128)+2)
  5446                           
  5447                           ;mcp2515.c: 249: SPI_exchange(buf, 3);
  5448  0341  3003               	movlw	3
  5449  0342  0020               	movlb	0	; select bank0
  5450  0343  00C4               	movwf	??_can_send
  5451  0344  0844               	movf	??_can_send,w
  5452  0345  00F8               	movwf	SPI_exchange@len
  5453  0346  30AC               	movlw	(low (_buf| 0))& (0+255)
  5454  0347  318A  22F2  3182   	fcall	_SPI_exchange
  5455                           
  5456                           ;mcp2515.c: 251: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5457  034A  0020               	movlb	0	; select bank0
  5458  034B  0869               	movf	_mode,w
  5459  034C  1903               	btfsc	3,2
  5460  034D  2B65               	goto	l2731
  5461  034E  3051               	movlw	low (STR_30| (0+32768))
  5462  034F  00A2               	movwf	printf@f
  5463  0350  3093               	movlw	high (STR_30| (0+32768))
  5464  0351  00A3               	movwf	printf@f+1
  5465  0352  084D               	movf	can_send@n,w
  5466  0353  00C4               	movwf	??_can_send
  5467  0354  01C5               	clrf	??_can_send+1
  5468  0355  0844               	movf	??_can_send,w
  5469  0356  00A4               	movwf	?_printf+2
  5470  0357  0845               	movf	??_can_send+1,w
  5471  0358  00A5               	movwf	?_printf+3
  5472  0359  0021               	movlb	1	; select bank1
  5473  035A  082E               	movf	(_buf^(0+128)+2),w
  5474  035B  0020               	movlb	0	; select bank0
  5475  035C  00C6               	movwf	??_can_send+2
  5476  035D  01C7               	clrf	??_can_send+3
  5477  035E  0846               	movf	??_can_send+2,w
  5478  035F  00A6               	movwf	?_printf+4
  5479  0360  0847               	movf	??_can_send+3,w
  5480  0361  00A7               	movwf	?_printf+5
  5481  0362  3185  25A3  3182   	fcall	_printf
  5482  0365                     l2731:	
  5483                           
  5484                           ;mcp2515.c: 253: if (bytes_written == len) {
  5485  0365  0020               	movlb	0	; select bank0
  5486  0366  0849               	movf	can_send@bytes_written,w
  5487  0367  0648               	xorwf	can_send@len,w
  5488  0368  1D03               	skipz
  5489  0369  0008               	return
  5490                           
  5491                           ;mcp2515.c: 255: buf[0] = 0b10000000u + (0b00000001u << n);
  5492  036A  3001               	movlw	1
  5493  036B  00C4               	movwf	??_can_send
  5494  036C  0A4D               	incf	can_send@n,w
  5495  036D  2B6F               	goto	u2444
  5496  036E                     u2445:	
  5497  036E  35C4               	lslf	??_can_send,f
  5498  036F                     u2444:	
  5499  036F  0B89               	decfsz	9,f
  5500  0370  2B6E               	goto	u2445
  5501  0371  0844               	movf	??_can_send,w
  5502  0372  3E80               	addlw	128
  5503  0373  00C5               	movwf	??_can_send+1
  5504  0374  0845               	movf	??_can_send+1,w
  5505  0375  0021               	movlb	1	; select bank1
  5506  0376  00AC               	movwf	_buf^(0+128)
  5507                           
  5508                           ;mcp2515.c: 256: bytes_written = SPI_exchange(buf, 1);
  5509  0377  01F8               	clrf	SPI_exchange@len
  5510  0378  0AF8               	incf	SPI_exchange@len,f
  5511  0379  30AC               	movlw	(low (_buf| 0))& (0+255)
  5512  037A  318A  22F2  3182   	fcall	_SPI_exchange
  5513  037D  0020               	movlb	0	; select bank0
  5514  037E  00C4               	movwf	??_can_send
  5515  037F  0844               	movf	??_can_send,w
  5516  0380  00C9               	movwf	can_send@bytes_written
  5517                           
  5518                           ;mcp2515.c: 257: if (bytes_written == 1) {
  5519  0381  0349               	decf	can_send@bytes_written,w
  5520  0382  1D03               	btfss	3,2
  5521  0383  0008               	return
  5522                           
  5523                           ;mcp2515.c: 258: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5524  0384  0869               	movf	_mode,w
  5525  0385  1903               	btfsc	3,2
  5526  0386  0008               	return
  5527  0387  30EA               	movlw	low (STR_31| (0+32768))
  5528  0388  00A2               	movwf	printf@f
  5529  0389  3092               	movlw	high (STR_31| (0+32768))
  5530  038A  00A3               	movwf	printf@f+1
  5531  038B  084B               	movf	can_send@data_buf,w
  5532  038C  00A4               	movwf	low ((?_printf| 0+2))
  5533  038D  3000               	movlw	0
  5534  038E  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5535  038F  3185  25A3         	fcall	_printf
  5536                           
  5537                           ;mcp2515.c: 259: return 1;
  5538                           ;	Return value of _can_send is never used
  5539  0391  0008               	return
  5540  0392                     __end_of_can_send:	
  5541                           ;mcp2515.c: 260: }
  5542                           ;mcp2515.c: 261: }
  5543                           ;mcp2515.c: 263: return 0;
  5544                           ;	Return value of _can_send is never used
  5545                           
  5546                           
  5547                           	psect	text7
  5548  0AAF                     __ptext7:	
  5549 ;; *************** function _can_logging_mode *****************
  5550 ;; Defined at:
  5551 ;;		line 30 in file "mcp2515.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  debug           1    wreg     unsigned char 
  5554 ;;  verbose         1    0[COMMON] unsigned char 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  debug           1    2[COMMON] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;Total ram usage:        3 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_main
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _can_logging_mode
  5581  0AAF                     _can_logging_mode:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _can_logging_mode: [wreg]
  5585                           ;can_logging_mode@debug stored from wreg
  5586  0AAF  00F2               	movwf	can_logging_mode@debug
  5587                           
  5588                           ;mcp2515.c: 31: mode.debug = debug;
  5589  0AB0  0872               	movf	can_logging_mode@debug,w
  5590  0AB1  00F1               	movwf	??_can_logging_mode
  5591  0AB2  0871               	movf	??_can_logging_mode,w
  5592  0AB3  0020               	movlb	0	; select bank0
  5593  0AB4  00E9               	movwf	_mode
  5594                           
  5595                           ;mcp2515.c: 32: mode.verbose = verbose;
  5596  0AB5  0870               	movf	can_logging_mode@verbose,w
  5597  0AB6  00F1               	movwf	??_can_logging_mode
  5598  0AB7  0871               	movf	??_can_logging_mode,w
  5599  0AB8  00EA               	movwf	_mode+1
  5600  0AB9  0008               	return
  5601  0ABA                     __end_of_can_logging_mode:	
  5602                           
  5603                           	psect	text8
  5604  0D58                     __ptext8:	
  5605 ;; *************** function _can_init *****************
  5606 ;; Defined at:
  5607 ;;		line 53 in file "mcp2515.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5610 ;;		 -> receive_handler(1), 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5622 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;Total ram usage:        4 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    4
  5629 ;; This function calls:
  5630 ;;		_SPI_exchange
  5631 ;;		_can_ope_mode
  5632 ;;		_can_set_sid
  5633 ;; This function is called by:
  5634 ;;		_main
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           
  5639                           ;psect for function _can_init
  5640  0D58                     _can_init:	
  5641                           
  5642                           ;mcp2515.c: 54: _delay((unsigned long)((100)*(32000000/4000.0)));
  5643                           
  5644                           ;incstack = 0
  5645                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5646  0D58  3005               	movlw	5
  5647  0D59  0020               	movlb	0	; select bank0
  5648  0D5A  00CA               	movwf	??_can_init+1
  5649  0D5B  300F               	movlw	15
  5650  0D5C  00C9               	movwf	??_can_init
  5651  0D5D  30F1               	movlw	241
  5652  0D5E                     u2667:	
  5653  0D5E  0B89               	decfsz	9,f
  5654  0D5F  2D5E               	goto	u2667
  5655  0D60  0BC9               	decfsz	??_can_init,f
  5656  0D61  2D5E               	goto	u2667
  5657  0D62  0BCA               	decfsz	??_can_init+1,f
  5658  0D63  2D5E               	goto	u2667
  5659                           
  5660                           ;mcp2515.c: 56: can_set_sid(0);
  5661  0D64  3000               	movlw	0
  5662  0D65  00F0               	movwf	can_set_sid@can_node
  5663  0D66  00F1               	movwf	can_set_sid@can_node+1
  5664  0D67  318B  2352  318D   	fcall	_can_set_sid
  5665                           
  5666                           ;mcp2515.c: 57: handler = receive_handler;
  5667  0D6A  0020               	movlb	0	; select bank0
  5668  0D6B  0848               	movf	can_init@receive_handler+1,w
  5669  0D6C  00E8               	movwf	_handler+1
  5670  0D6D  0847               	movf	can_init@receive_handler,w
  5671  0D6E  00E7               	movwf	_handler
  5672                           
  5673                           ;mcp2515.c: 60: buf[0] = 0b11000000u;
  5674  0D6F  30C0               	movlw	192
  5675  0D70  00C9               	movwf	??_can_init
  5676  0D71  0849               	movf	??_can_init,w
  5677  0D72  0021               	movlb	1	; select bank1
  5678  0D73  00AC               	movwf	_buf^(0+128)
  5679                           
  5680                           ;mcp2515.c: 61: SPI_exchange(buf, 1);
  5681  0D74  01F8               	clrf	SPI_exchange@len
  5682  0D75  0AF8               	incf	SPI_exchange@len,f
  5683  0D76  30AC               	movlw	(low (_buf| 0))& (0+255)
  5684  0D77  318A  22F2  318D   	fcall	_SPI_exchange
  5685                           
  5686                           ;mcp2515.c: 63: _delay((unsigned long)((2+48)*(32000000/4000000.0)));
  5687  0D7A  3085               	movlw	133
  5688  0D7B                     u2677:	
  5689  0D7B  0B89               	decfsz	9,f
  5690  0D7C  2D7B               	goto	u2677
  5691  0D7D  0000               	nop
  5692                           
  5693                           ;mcp2515.c: 65: buf[0] = 0b00000010u;
  5694  0D7E  3002               	movlw	2
  5695  0D7F  0020               	movlb	0	; select bank0
  5696  0D80  00C9               	movwf	??_can_init
  5697  0D81  0849               	movf	??_can_init,w
  5698  0D82  0021               	movlb	1	; select bank1
  5699  0D83  00AC               	movwf	_buf^(0+128)
  5700                           
  5701                           ;mcp2515.c: 66: buf[1] = 0x28u;
  5702  0D84  3028               	movlw	40
  5703  0D85  0020               	movlb	0	; select bank0
  5704  0D86  00C9               	movwf	??_can_init
  5705  0D87  0849               	movf	??_can_init,w
  5706  0D88  0021               	movlb	1	; select bank1
  5707  0D89  00AD               	movwf	(_buf^(0+128)+1)
  5708                           
  5709                           ;mcp2515.c: 67: buf[2] = 0b00000101u;
  5710  0D8A  3005               	movlw	5
  5711  0D8B  0020               	movlb	0	; select bank0
  5712  0D8C  00C9               	movwf	??_can_init
  5713  0D8D  0849               	movf	??_can_init,w
  5714  0D8E  0021               	movlb	1	; select bank1
  5715  0D8F  00AE               	movwf	(_buf^(0+128)+2)
  5716                           
  5717                           ;mcp2515.c: 68: buf[3] = 0b11110001u;
  5718  0D90  30F1               	movlw	241
  5719  0D91  0020               	movlb	0	; select bank0
  5720  0D92  00C9               	movwf	??_can_init
  5721  0D93  0849               	movf	??_can_init,w
  5722  0D94  0021               	movlb	1	; select bank1
  5723  0D95  00AF               	movwf	(_buf^(0+128)+3)
  5724                           
  5725                           ;mcp2515.c: 69: buf[4] = 0b01000001u;
  5726  0D96  3041               	movlw	65
  5727  0D97  0020               	movlb	0	; select bank0
  5728  0D98  00C9               	movwf	??_can_init
  5729  0D99  0849               	movf	??_can_init,w
  5730  0D9A  0021               	movlb	1	; select bank1
  5731  0D9B  00B0               	movwf	(_buf^(0+128)+4)
  5732                           
  5733                           ;mcp2515.c: 70: SPI_exchange(buf, 5);
  5734  0D9C  3005               	movlw	5
  5735  0D9D  0020               	movlb	0	; select bank0
  5736  0D9E  00C9               	movwf	??_can_init
  5737  0D9F  0849               	movf	??_can_init,w
  5738  0DA0  00F8               	movwf	SPI_exchange@len
  5739  0DA1  30AC               	movlw	(low (_buf| 0))& (0+255)
  5740  0DA2  318A  22F2  318D   	fcall	_SPI_exchange
  5741                           
  5742                           ;mcp2515.c: 72: buf[0] = 0b00000010u;
  5743  0DA5  3002               	movlw	2
  5744  0DA6  0020               	movlb	0	; select bank0
  5745  0DA7  00C9               	movwf	??_can_init
  5746  0DA8  0849               	movf	??_can_init,w
  5747  0DA9  0021               	movlb	1	; select bank1
  5748  0DAA  00AC               	movwf	_buf^(0+128)
  5749                           
  5750                           ;mcp2515.c: 73: buf[1] = 0x60u;
  5751  0DAB  3060               	movlw	96
  5752  0DAC  0020               	movlb	0	; select bank0
  5753  0DAD  00C9               	movwf	??_can_init
  5754  0DAE  0849               	movf	??_can_init,w
  5755  0DAF  0021               	movlb	1	; select bank1
  5756  0DB0  00AD               	movwf	(_buf^(0+128)+1)
  5757                           
  5758                           ;mcp2515.c: 74: buf[2] = 0b00100100u;
  5759  0DB1  3024               	movlw	36
  5760  0DB2  0020               	movlb	0	; select bank0
  5761  0DB3  00C9               	movwf	??_can_init
  5762  0DB4  0849               	movf	??_can_init,w
  5763  0DB5  0021               	movlb	1	; select bank1
  5764  0DB6  00AE               	movwf	(_buf^(0+128)+2)
  5765                           
  5766                           ;mcp2515.c: 75: SPI_exchange(buf, 3);
  5767  0DB7  3003               	movlw	3
  5768  0DB8  0020               	movlb	0	; select bank0
  5769  0DB9  00C9               	movwf	??_can_init
  5770  0DBA  0849               	movf	??_can_init,w
  5771  0DBB  00F8               	movwf	SPI_exchange@len
  5772  0DBC  30AC               	movlw	(low (_buf| 0))& (0+255)
  5773  0DBD  318A  22F2  318D   	fcall	_SPI_exchange
  5774                           
  5775                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  5776  0DC0  3002               	movlw	2
  5777  0DC1  0020               	movlb	0	; select bank0
  5778  0DC2  00C9               	movwf	??_can_init
  5779  0DC3  0849               	movf	??_can_init,w
  5780  0DC4  0021               	movlb	1	; select bank1
  5781  0DC5  00AC               	movwf	_buf^(0+128)
  5782                           
  5783                           ;mcp2515.c: 78: buf[1] = 0x70u;
  5784  0DC6  3070               	movlw	112
  5785  0DC7  0020               	movlb	0	; select bank0
  5786  0DC8  00C9               	movwf	??_can_init
  5787  0DC9  0849               	movf	??_can_init,w
  5788  0DCA  0021               	movlb	1	; select bank1
  5789  0DCB  00AD               	movwf	(_buf^(0+128)+1)
  5790                           
  5791                           ;mcp2515.c: 79: buf[2] = 0b00100000u;
  5792  0DCC  3020               	movlw	32
  5793  0DCD  0020               	movlb	0	; select bank0
  5794  0DCE  00C9               	movwf	??_can_init
  5795  0DCF  0849               	movf	??_can_init,w
  5796  0DD0  0021               	movlb	1	; select bank1
  5797  0DD1  00AE               	movwf	(_buf^(0+128)+2)
  5798                           
  5799                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  5800  0DD2  3003               	movlw	3
  5801  0DD3  0020               	movlb	0	; select bank0
  5802  0DD4  00C9               	movwf	??_can_init
  5803  0DD5  0849               	movf	??_can_init,w
  5804  0DD6  00F8               	movwf	SPI_exchange@len
  5805  0DD7  30AC               	movlw	(low (_buf| 0))& (0+255)
  5806  0DD8  318A  22F2  318D   	fcall	_SPI_exchange
  5807                           
  5808                           ;mcp2515.c: 82: mode.debug = 0;
  5809  0DDB  0020               	movlb	0	; select bank0
  5810  0DDC  01E9               	clrf	_mode
  5811                           
  5812                           ;mcp2515.c: 83: mode.verbose = 0;
  5813  0DDD  01EA               	clrf	_mode+1
  5814                           
  5815                           ;mcp2515.c: 85: can_ope_mode(0b00000000u);
  5816  0DDE  3000               	movlw	0
  5817  0DDF  318D  2501         	fcall	_can_ope_mode
  5818  0DE1  0008               	return
  5819  0DE2                     __end_of_can_init:	
  5820                           
  5821                           	psect	text9
  5822  0B52                     __ptext9:	
  5823 ;; *************** function _can_set_sid *****************
  5824 ;; Defined at:
  5825 ;;		line 43 in file "mcp2515.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  can_node        2    0[COMMON] unsigned int 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  sidl            1    6[COMMON] unsigned char 
  5830 ;;  sidh            1    5[COMMON] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        7 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;;		_can_init
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _can_set_sid
  5856  0B52                     _can_set_sid:	
  5857                           
  5858                           ;mcp2515.c: 44: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5862  0B52  0871               	movf	can_set_sid@can_node+1,w
  5863  0B53  00F3               	movwf	??_can_set_sid+1
  5864  0B54  0870               	movf	can_set_sid@can_node,w
  5865  0B55  00F2               	movwf	??_can_set_sid
  5866  0B56  36F3               	lsrf	??_can_set_sid+1,f
  5867  0B57  0CF2               	rrf	??_can_set_sid,f
  5868  0B58  36F3               	lsrf	??_can_set_sid+1,f
  5869  0B59  0CF2               	rrf	??_can_set_sid,f
  5870  0B5A  36F3               	lsrf	??_can_set_sid+1,f
  5871  0B5B  0CF2               	rrf	??_can_set_sid,f
  5872  0B5C  0872               	movf	??_can_set_sid,w
  5873  0B5D  00F4               	movwf	??_can_set_sid+2
  5874  0B5E  0874               	movf	??_can_set_sid+2,w
  5875  0B5F  00F5               	movwf	can_set_sid@sidh
  5876                           
  5877                           ;mcp2515.c: 45: uint8_t sidl = (can_node << 5) & 0x00e0;
  5878  0B60  0870               	movf	can_set_sid@can_node,w
  5879  0B61  00F2               	movwf	??_can_set_sid
  5880  0B62  3004               	movlw	4
  5881  0B63                     u1975:	
  5882  0B63  35F2               	lslf	??_can_set_sid,f
  5883  0B64  3EFF               	addlw	-1
  5884  0B65  1D03               	skipz
  5885  0B66  2B63               	goto	u1975
  5886  0B67  3572               	lslf	??_can_set_sid,w
  5887  0B68  39E0               	andlw	224
  5888  0B69  00F3               	movwf	??_can_set_sid+1
  5889  0B6A  0873               	movf	??_can_set_sid+1,w
  5890  0B6B  00F6               	movwf	can_set_sid@sidl
  5891                           
  5892                           ;mcp2515.c: 46: sid.sidh = sidh;
  5893  0B6C  0875               	movf	can_set_sid@sidh,w
  5894  0B6D  00F2               	movwf	??_can_set_sid
  5895  0B6E  0872               	movf	??_can_set_sid,w
  5896  0B6F  0020               	movlb	0	; select bank0
  5897  0B70  00EB               	movwf	_sid
  5898                           
  5899                           ;mcp2515.c: 47: sid.sidl = sidl;
  5900  0B71  0876               	movf	can_set_sid@sidl,w
  5901  0B72  00F2               	movwf	??_can_set_sid
  5902  0B73  0872               	movf	??_can_set_sid,w
  5903  0B74  00EC               	movwf	_sid+1
  5904  0B75  0008               	return
  5905  0B76                     __end_of_can_set_sid:	
  5906                           
  5907                           	psect	text10
  5908  0139                     __ptext10:	
  5909 ;; *************** function _can_dump_registers *****************
  5910 ;; Defined at:
  5911 ;;		line 356 in file "mcp2515.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;Total ram usage:        2 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    4
  5932 ;; This function calls:
  5933 ;;		_printf
  5934 ;;		_read_register
  5935 ;; This function is called by:
  5936 ;;		_main
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _can_dump_registers
  5942  0139                     _can_dump_registers:	
  5943                           
  5944                           ;mcp2515.c: 357: printf("---\n");
  5945                           
  5946                           ;incstack = 0
  5947                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5948  0139  3076               	movlw	low (STR_34| (0+32768))
  5949  013A  0020               	movlb	0	; select bank0
  5950  013B  00A2               	movwf	printf@f
  5951  013C  3094               	movlw	high (STR_34| (0+32768))
  5952  013D  00A3               	movwf	printf@f+1
  5953  013E  3185  25A3  3181   	fcall	_printf
  5954                           
  5955                           ;mcp2515.c: 358: printf("SIDH: %02x\n", sid.sidh);
  5956  0141  3023               	movlw	low ((STR_21+5)| (0+32768))
  5957  0142  0020               	movlb	0	; select bank0
  5958  0143  00A2               	movwf	printf@f
  5959  0144  3093               	movlw	high ((STR_21+5)| (0+32768))
  5960  0145  00A3               	movwf	printf@f+1
  5961  0146  086B               	movf	_sid,w
  5962  0147  00C3               	movwf	??_can_dump_registers
  5963  0148  01C4               	clrf	??_can_dump_registers+1
  5964  0149  0843               	movf	??_can_dump_registers,w
  5965  014A  00A4               	movwf	?_printf+2
  5966  014B  0844               	movf	??_can_dump_registers+1,w
  5967  014C  00A5               	movwf	?_printf+3
  5968  014D  3185  25A3  3181   	fcall	_printf
  5969                           
  5970                           ;mcp2515.c: 359: printf("SIDL: %02x\n", sid.sidl);
  5971  0150  3045               	movlw	low ((STR_22+5)| (0+32768))
  5972  0151  0020               	movlb	0	; select bank0
  5973  0152  00A2               	movwf	printf@f
  5974  0153  3093               	movlw	high ((STR_22+5)| (0+32768))
  5975  0154  00A3               	movwf	printf@f+1
  5976  0155  086C               	movf	_sid+1,w
  5977  0156  00C3               	movwf	??_can_dump_registers
  5978  0157  01C4               	clrf	??_can_dump_registers+1
  5979  0158  0843               	movf	??_can_dump_registers,w
  5980  0159  00A4               	movwf	?_printf+2
  5981  015A  0844               	movf	??_can_dump_registers+1,w
  5982  015B  00A5               	movwf	?_printf+3
  5983  015C  3185  25A3  3181   	fcall	_printf
  5984                           
  5985                           ;mcp2515.c: 360: printf("\n");
  5986  015F  3079               	movlw	low ((STR_34+3)| (0+32768))
  5987  0160  0020               	movlb	0	; select bank0
  5988  0161  00A2               	movwf	printf@f
  5989  0162  3094               	movlw	high ((STR_34+3)| (0+32768))
  5990  0163  00A3               	movwf	printf@f+1
  5991  0164  3185  25A3  3181   	fcall	_printf
  5992                           
  5993                           ;mcp2515.c: 362: printf("CNF1: %02x\n", read_register(0x2au));
  5994  0167  3033               	movlw	low (STR_42| (0+32768))
  5995  0168  0020               	movlb	0	; select bank0
  5996  0169  00A2               	movwf	printf@f
  5997  016A  3094               	movlw	high (STR_42| (0+32768))
  5998  016B  00A3               	movwf	printf@f+1
  5999  016C  302A               	movlw	42
  6000  016D  318B  231E  3181   	fcall	_read_register
  6001  0170  0020               	movlb	0	; select bank0
  6002  0171  00C3               	movwf	??_can_dump_registers
  6003  0172  01C4               	clrf	??_can_dump_registers+1
  6004  0173  0843               	movf	??_can_dump_registers,w
  6005  0174  00A4               	movwf	?_printf+2
  6006  0175  0844               	movf	??_can_dump_registers+1,w
  6007  0176  00A5               	movwf	?_printf+3
  6008  0177  3185  25A3  3181   	fcall	_printf
  6009                           
  6010                           ;mcp2515.c: 363: printf("CNF2: %02x\n", read_register(0x29u));
  6011  017A  303F               	movlw	low (STR_43| (0+32768))
  6012  017B  0020               	movlb	0	; select bank0
  6013  017C  00A2               	movwf	printf@f
  6014  017D  3094               	movlw	high (STR_43| (0+32768))
  6015  017E  00A3               	movwf	printf@f+1
  6016  017F  3029               	movlw	41
  6017  0180  318B  231E  3181   	fcall	_read_register
  6018  0183  0020               	movlb	0	; select bank0
  6019  0184  00C3               	movwf	??_can_dump_registers
  6020  0185  01C4               	clrf	??_can_dump_registers+1
  6021  0186  0843               	movf	??_can_dump_registers,w
  6022  0187  00A4               	movwf	?_printf+2
  6023  0188  0844               	movf	??_can_dump_registers+1,w
  6024  0189  00A5               	movwf	?_printf+3
  6025  018A  3185  25A3  3181   	fcall	_printf
  6026                           
  6027                           ;mcp2515.c: 364: printf("CNF3: %02x\n", read_register(0x28u));
  6028  018D  304B               	movlw	low (STR_44| (0+32768))
  6029  018E  0020               	movlb	0	; select bank0
  6030  018F  00A2               	movwf	printf@f
  6031  0190  3094               	movlw	high (STR_44| (0+32768))
  6032  0191  00A3               	movwf	printf@f+1
  6033  0192  3028               	movlw	40
  6034  0193  318B  231E  3181   	fcall	_read_register
  6035  0196  0020               	movlb	0	; select bank0
  6036  0197  00C3               	movwf	??_can_dump_registers
  6037  0198  01C4               	clrf	??_can_dump_registers+1
  6038  0199  0843               	movf	??_can_dump_registers,w
  6039  019A  00A4               	movwf	?_printf+2
  6040  019B  0844               	movf	??_can_dump_registers+1,w
  6041  019C  00A5               	movwf	?_printf+3
  6042  019D  3185  25A3  3181   	fcall	_printf
  6043                           
  6044                           ;mcp2515.c: 365: printf("\n");
  6045  01A0  3079               	movlw	low ((STR_34+3)| (0+32768))
  6046  01A1  0020               	movlb	0	; select bank0
  6047  01A2  00A2               	movwf	printf@f
  6048  01A3  3094               	movlw	high ((STR_34+3)| (0+32768))
  6049  01A4  00A3               	movwf	printf@f+1
  6050  01A5  3185  25A3  3181   	fcall	_printf
  6051                           
  6052                           ;mcp2515.c: 367: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  6053  01A8  3082               	movlw	low (STR_46| (0+32768))
  6054  01A9  0020               	movlb	0	; select bank0
  6055  01AA  00A2               	movwf	printf@f
  6056  01AB  3093               	movlw	high (STR_46| (0+32768))
  6057  01AC  00A3               	movwf	printf@f+1
  6058  01AD  3030               	movlw	48
  6059  01AE  318B  231E  3181   	fcall	_read_register
  6060  01B1  0020               	movlb	0	; select bank0
  6061  01B2  00C3               	movwf	??_can_dump_registers
  6062  01B3  01C4               	clrf	??_can_dump_registers+1
  6063  01B4  0843               	movf	??_can_dump_registers,w
  6064  01B5  00A4               	movwf	?_printf+2
  6065  01B6  0844               	movf	??_can_dump_registers+1,w
  6066  01B7  00A5               	movwf	?_printf+3
  6067  01B8  3185  25A3  3181   	fcall	_printf
  6068                           
  6069                           ;mcp2515.c: 368: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  6070  01BB  30A2               	movlw	low (STR_47| (0+32768))
  6071  01BC  0020               	movlb	0	; select bank0
  6072  01BD  00A2               	movwf	printf@f
  6073  01BE  3093               	movlw	high (STR_47| (0+32768))
  6074  01BF  00A3               	movwf	printf@f+1
  6075  01C0  3040               	movlw	64
  6076  01C1  318B  231E  3181   	fcall	_read_register
  6077  01C4  0020               	movlb	0	; select bank0
  6078  01C5  00C3               	movwf	??_can_dump_registers
  6079  01C6  01C4               	clrf	??_can_dump_registers+1
  6080  01C7  0843               	movf	??_can_dump_registers,w
  6081  01C8  00A4               	movwf	?_printf+2
  6082  01C9  0844               	movf	??_can_dump_registers+1,w
  6083  01CA  00A5               	movwf	?_printf+3
  6084  01CB  3185  25A3  3181   	fcall	_printf
  6085                           
  6086                           ;mcp2515.c: 369: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  6087  01CE  30B2               	movlw	low (STR_48| (0+32768))
  6088  01CF  0020               	movlb	0	; select bank0
  6089  01D0  00A2               	movwf	printf@f
  6090  01D1  3093               	movlw	high (STR_48| (0+32768))
  6091  01D2  00A3               	movwf	printf@f+1
  6092  01D3  3050               	movlw	80
  6093  01D4  318B  231E  3181   	fcall	_read_register
  6094  01D7  0020               	movlb	0	; select bank0
  6095  01D8  00C3               	movwf	??_can_dump_registers
  6096  01D9  01C4               	clrf	??_can_dump_registers+1
  6097  01DA  0843               	movf	??_can_dump_registers,w
  6098  01DB  00A4               	movwf	?_printf+2
  6099  01DC  0844               	movf	??_can_dump_registers+1,w
  6100  01DD  00A5               	movwf	?_printf+3
  6101  01DE  3185  25A3  3181   	fcall	_printf
  6102                           
  6103                           ;mcp2515.c: 370: printf("\n");
  6104  01E1  3079               	movlw	low ((STR_34+3)| (0+32768))
  6105  01E2  0020               	movlb	0	; select bank0
  6106  01E3  00A2               	movwf	printf@f
  6107  01E4  3094               	movlw	high ((STR_34+3)| (0+32768))
  6108  01E5  00A3               	movwf	printf@f+1
  6109  01E6  3185  25A3  3181   	fcall	_printf
  6110                           
  6111                           ;mcp2515.c: 372: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  6112  01E9  3072               	movlw	low (STR_50| (0+32768))
  6113  01EA  0020               	movlb	0	; select bank0
  6114  01EB  00A2               	movwf	printf@f
  6115  01EC  3093               	movlw	high (STR_50| (0+32768))
  6116  01ED  00A3               	movwf	printf@f+1
  6117  01EE  3060               	movlw	96
  6118  01EF  318B  231E  3181   	fcall	_read_register
  6119  01F2  0020               	movlb	0	; select bank0
  6120  01F3  00C3               	movwf	??_can_dump_registers
  6121  01F4  01C4               	clrf	??_can_dump_registers+1
  6122  01F5  0843               	movf	??_can_dump_registers,w
  6123  01F6  00A4               	movwf	?_printf+2
  6124  01F7  0844               	movf	??_can_dump_registers+1,w
  6125  01F8  00A5               	movwf	?_printf+3
  6126  01F9  3185  25A3  3181   	fcall	_printf
  6127                           
  6128                           ;mcp2515.c: 373: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6129  01FC  3092               	movlw	low (STR_51| (0+32768))
  6130  01FD  0020               	movlb	0	; select bank0
  6131  01FE  00A2               	movwf	printf@f
  6132  01FF  3093               	movlw	high (STR_51| (0+32768))
  6133  0200  00A3               	movwf	printf@f+1
  6134  0201  3070               	movlw	112
  6135  0202  318B  231E  3181   	fcall	_read_register
  6136  0205  0020               	movlb	0	; select bank0
  6137  0206  00C3               	movwf	??_can_dump_registers
  6138  0207  01C4               	clrf	??_can_dump_registers+1
  6139  0208  0843               	movf	??_can_dump_registers,w
  6140  0209  00A4               	movwf	?_printf+2
  6141  020A  0844               	movf	??_can_dump_registers+1,w
  6142  020B  00A5               	movwf	?_printf+3
  6143  020C  3185  25A3  3181   	fcall	_printf
  6144                           
  6145                           ;mcp2515.c: 374: printf("\n");
  6146  020F  3079               	movlw	low ((STR_34+3)| (0+32768))
  6147  0210  0020               	movlb	0	; select bank0
  6148  0211  00A2               	movwf	printf@f
  6149  0212  3094               	movlw	high ((STR_34+3)| (0+32768))
  6150  0213  00A3               	movwf	printf@f+1
  6151  0214  3185  25A3  3181   	fcall	_printf
  6152                           
  6153                           ;mcp2515.c: 376: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6154  0217  30D1               	movlw	low (STR_53| (0+32768))
  6155  0218  0020               	movlb	0	; select bank0
  6156  0219  00A2               	movwf	printf@f
  6157  021A  3093               	movlw	high (STR_53| (0+32768))
  6158  021B  00A3               	movwf	printf@f+1
  6159  021C  300F               	movlw	15
  6160  021D  318B  231E  3181   	fcall	_read_register
  6161  0220  0020               	movlb	0	; select bank0
  6162  0221  00C3               	movwf	??_can_dump_registers
  6163  0222  01C4               	clrf	??_can_dump_registers+1
  6164  0223  0843               	movf	??_can_dump_registers,w
  6165  0224  00A4               	movwf	?_printf+2
  6166  0225  0844               	movf	??_can_dump_registers+1,w
  6167  0226  00A5               	movwf	?_printf+3
  6168  0227  3185  25A3  3181   	fcall	_printf
  6169                           
  6170                           ;mcp2515.c: 377: printf("CANSTAT: %02x\n", read_register(0x0e));
  6171  022A  30E0               	movlw	low (STR_18| (0+32768))
  6172  022B  0020               	movlb	0	; select bank0
  6173  022C  00A2               	movwf	printf@f
  6174  022D  3093               	movlw	high (STR_18| (0+32768))
  6175  022E  00A3               	movwf	printf@f+1
  6176  022F  300E               	movlw	14
  6177  0230  318B  231E  3181   	fcall	_read_register
  6178  0233  0020               	movlb	0	; select bank0
  6179  0234  00C3               	movwf	??_can_dump_registers
  6180  0235  01C4               	clrf	??_can_dump_registers+1
  6181  0236  0843               	movf	??_can_dump_registers,w
  6182  0237  00A4               	movwf	?_printf+2
  6183  0238  0844               	movf	??_can_dump_registers+1,w
  6184  0239  00A5               	movwf	?_printf+3
  6185  023A  3185  25A3  3181   	fcall	_printf
  6186                           
  6187                           ;mcp2515.c: 378: printf("---\n");
  6188  023D  3076               	movlw	low (STR_34| (0+32768))
  6189  023E  0020               	movlb	0	; select bank0
  6190  023F  00A2               	movwf	printf@f
  6191  0240  3094               	movlw	high (STR_34| (0+32768))
  6192  0241  00A3               	movwf	printf@f+1
  6193  0242  3185  25A3         	fcall	_printf
  6194  0244  0008               	return
  6195  0245                     __end_of_can_dump_registers:	
  6196                           
  6197                           	psect	text11
  6198  0B1E                     __ptext11:	
  6199 ;; *************** function _read_register *****************
  6200 ;; Defined at:
  6201 ;;		line 326 in file "mcp2515.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  addr            1    wreg     unsigned char 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  addr            1    1[BANK0 ] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      unsigned char 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;Total ram usage:        2 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    3
  6222 ;; This function calls:
  6223 ;;		_SPI_exchange
  6224 ;; This function is called by:
  6225 ;;		_can_dump_registers
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function _read_register
  6231  0B1E                     _read_register:	
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6235                           ;read_register@addr stored from wreg
  6236  0B1E  0020               	movlb	0	; select bank0
  6237  0B1F  00A1               	movwf	read_register@addr
  6238                           
  6239                           ;mcp2515.c: 327: buf[0] = 0b00000011u;
  6240  0B20  3003               	movlw	3
  6241  0B21  00A0               	movwf	??_read_register
  6242  0B22  0820               	movf	??_read_register,w
  6243  0B23  0021               	movlb	1	; select bank1
  6244  0B24  00AC               	movwf	_buf^(0+128)
  6245                           
  6246                           ;mcp2515.c: 328: buf[1] = addr;
  6247  0B25  0020               	movlb	0	; select bank0
  6248  0B26  0821               	movf	read_register@addr,w
  6249  0B27  00A0               	movwf	??_read_register
  6250  0B28  0820               	movf	??_read_register,w
  6251  0B29  0021               	movlb	1	; select bank1
  6252  0B2A  00AD               	movwf	(_buf^(0+128)+1)
  6253                           
  6254                           ;mcp2515.c: 329: buf[2] = 0x00;
  6255  0B2B  01AE               	clrf	(_buf^(0+128)+2)
  6256                           
  6257                           ;mcp2515.c: 330: SPI_exchange(buf, 3);
  6258  0B2C  3003               	movlw	3
  6259  0B2D  0020               	movlb	0	; select bank0
  6260  0B2E  00A0               	movwf	??_read_register
  6261  0B2F  0820               	movf	??_read_register,w
  6262  0B30  00F8               	movwf	SPI_exchange@len
  6263  0B31  30AC               	movlw	(low (_buf| 0))& (0+255)
  6264  0B32  318A  22F2         	fcall	_SPI_exchange
  6265                           
  6266                           ;mcp2515.c: 331: return buf[2];
  6267  0B34  0021               	movlb	1	; select bank1
  6268  0B35  082E               	movf	(_buf^(0+128)+2),w
  6269  0B36  0008               	return
  6270  0B37                     __end_of_read_register:	
  6271                           
  6272                           	psect	text12
  6273  006D                     __ptext12:	
  6274 ;; *************** function _can_dump_masks_and_filters *****************
  6275 ;; Defined at:
  6276 ;;		line 334 in file "mcp2515.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  m               2   47[BANK0 ] unsigned int 
  6281 ;;  i               1   49[BANK0 ] unsigned char 
  6282 ;;  l               1   46[BANK0 ] unsigned char 
  6283 ;;  h               1   45[BANK0 ] unsigned char 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;Total ram usage:       15 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    3
  6300 ;; This function calls:
  6301 ;;		_printf
  6302 ;; This function is called by:
  6303 ;;		_main
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           
  6308                           ;psect for function _can_dump_masks_and_filters
  6309  006D                     _can_dump_masks_and_filters:	
  6310                           
  6311                           ;mcp2515.c: 335: uint8_t i, h, l;
  6312                           ;mcp2515.c: 336: uint16_t m;
  6313                           ;mcp2515.c: 337: printf("---\n");
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6317  006D  3076               	movlw	low (STR_34| (0+32768))
  6318  006E  0020               	movlb	0	; select bank0
  6319  006F  00A2               	movwf	printf@f
  6320  0070  3094               	movlw	high (STR_34| (0+32768))
  6321  0071  00A3               	movwf	printf@f+1
  6322  0072  3185  25A3  3180   	fcall	_printf
  6323                           
  6324                           ;mcp2515.c: 338: for(i=0; i<2; i++) {
  6325  0075  0020               	movlb	0	; select bank0
  6326  0076  01D1               	clrf	can_dump_masks_and_filters@i
  6327  0077  3002               	movlw	2
  6328  0078  0251               	subwf	can_dump_masks_and_filters@i,w
  6329  0079  1803               	btfsc	3,0
  6330  007A  28D4               	goto	l2627
  6331  007B                     l2615:	
  6332                           
  6333                           ;mcp2515.c: 339: m = save_rxmn[i];
  6334  007B  3551               	lslf	can_dump_masks_and_filters@i,w
  6335  007C  3E63               	addlw	(low (_save_rxmn| 0))& (0+255)
  6336  007D  0086               	movwf	6
  6337  007E  0187               	clrf	7
  6338  007F  3F40               	moviw [0]fsr1
  6339  0080  00CF               	movwf	can_dump_masks_and_filters@m
  6340  0081  3F41               	moviw [1]fsr1
  6341  0082  00D0               	movwf	can_dump_masks_and_filters@m+1
  6342                           
  6343                           ;mcp2515.c: 340: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6344  0083  0850               	movf	can_dump_masks_and_filters@m+1,w
  6345  0084  00C4               	movwf	??_can_dump_masks_and_filters+1
  6346  0085  084F               	movf	can_dump_masks_and_filters@m,w
  6347  0086  00C3               	movwf	??_can_dump_masks_and_filters
  6348  0087  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6349  0088  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6350  0089  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6351  008A  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6352  008B  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6353  008C  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6354  008D  0843               	movf	??_can_dump_masks_and_filters,w
  6355  008E  00C5               	movwf	??_can_dump_masks_and_filters+2
  6356  008F  0845               	movf	??_can_dump_masks_and_filters+2,w
  6357  0090  00CD               	movwf	can_dump_masks_and_filters@h
  6358                           
  6359                           ;mcp2515.c: 341: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6360  0091  084F               	movf	can_dump_masks_and_filters@m,w
  6361  0092  3907               	andlw	7
  6362  0093  00C3               	movwf	??_can_dump_masks_and_filters
  6363  0094  3004               	movlw	4
  6364  0095                     u2285:	
  6365  0095  35C3               	lslf	??_can_dump_masks_and_filters,f
  6366  0096  3EFF               	addlw	-1
  6367  0097  1D03               	skipz
  6368  0098  2895               	goto	u2285
  6369  0099  3543               	lslf	??_can_dump_masks_and_filters,w
  6370  009A  00C4               	movwf	??_can_dump_masks_and_filters+1
  6371  009B  0844               	movf	??_can_dump_masks_and_filters+1,w
  6372  009C  00CE               	movwf	can_dump_masks_and_filters@l
  6373                           
  6374                           ;mcp2515.c: 342: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6375  009D  300B               	movlw	low (STR_35| (0+32768))
  6376  009E  00A2               	movwf	printf@f
  6377  009F  3091               	movlw	high (STR_35| (0+32768))
  6378  00A0  00A3               	movwf	printf@f+1
  6379  00A1  0851               	movf	can_dump_masks_and_filters@i,w
  6380  00A2  00C3               	movwf	??_can_dump_masks_and_filters
  6381  00A3  01C4               	clrf	??_can_dump_masks_and_filters+1
  6382  00A4  0843               	movf	??_can_dump_masks_and_filters,w
  6383  00A5  00A4               	movwf	?_printf+2
  6384  00A6  0844               	movf	??_can_dump_masks_and_filters+1,w
  6385  00A7  00A5               	movwf	?_printf+3
  6386  00A8  0851               	movf	can_dump_masks_and_filters@i,w
  6387  00A9  00C5               	movwf	??_can_dump_masks_and_filters+2
  6388  00AA  01C6               	clrf	??_can_dump_masks_and_filters+3
  6389  00AB  0845               	movf	??_can_dump_masks_and_filters+2,w
  6390  00AC  00A6               	movwf	?_printf+4
  6391  00AD  0846               	movf	??_can_dump_masks_and_filters+3,w
  6392  00AE  00A7               	movwf	?_printf+5
  6393  00AF  0851               	movf	can_dump_masks_and_filters@i,w
  6394  00B0  00C7               	movwf	??_can_dump_masks_and_filters+4
  6395  00B1  01C8               	clrf	??_can_dump_masks_and_filters+5
  6396  00B2  0847               	movf	??_can_dump_masks_and_filters+4,w
  6397  00B3  00A8               	movwf	?_printf+6
  6398  00B4  0848               	movf	??_can_dump_masks_and_filters+5,w
  6399  00B5  00A9               	movwf	?_printf+7
  6400  00B6  0850               	movf	can_dump_masks_and_filters@m+1,w
  6401  00B7  00AB               	movwf	?_printf+9
  6402  00B8  084F               	movf	can_dump_masks_and_filters@m,w
  6403  00B9  00AA               	movwf	?_printf+8
  6404  00BA  084D               	movf	can_dump_masks_and_filters@h,w
  6405  00BB  00C9               	movwf	??_can_dump_masks_and_filters+6
  6406  00BC  01CA               	clrf	??_can_dump_masks_and_filters+7
  6407  00BD  0849               	movf	??_can_dump_masks_and_filters+6,w
  6408  00BE  00AC               	movwf	?_printf+10
  6409  00BF  084A               	movf	??_can_dump_masks_and_filters+7,w
  6410  00C0  00AD               	movwf	?_printf+11
  6411  00C1  084E               	movf	can_dump_masks_and_filters@l,w
  6412  00C2  00CB               	movwf	??_can_dump_masks_and_filters+8
  6413  00C3  01CC               	clrf	??_can_dump_masks_and_filters+9
  6414  00C4  084B               	movf	??_can_dump_masks_and_filters+8,w
  6415  00C5  00AE               	movwf	?_printf+12
  6416  00C6  084C               	movf	??_can_dump_masks_and_filters+9,w
  6417  00C7  00AF               	movwf	?_printf+13
  6418  00C8  3185  25A3  3180   	fcall	_printf
  6419  00CB  3001               	movlw	1
  6420  00CC  0020               	movlb	0	; select bank0
  6421  00CD  00C3               	movwf	??_can_dump_masks_and_filters
  6422  00CE  0843               	movf	??_can_dump_masks_and_filters,w
  6423  00CF  07D1               	addwf	can_dump_masks_and_filters@i,f
  6424  00D0  3002               	movlw	2
  6425  00D1  0251               	subwf	can_dump_masks_and_filters@i,w
  6426  00D2  1C03               	skipc
  6427  00D3  287B               	goto	l2615
  6428  00D4                     l2627:	
  6429                           
  6430                           ;mcp2515.c: 343: }
  6431                           ;mcp2515.c: 344: for(i=0; i<6; i++) {
  6432  00D4  01D1               	clrf	can_dump_masks_and_filters@i
  6433  00D5  3006               	movlw	6
  6434  00D6  0251               	subwf	can_dump_masks_and_filters@i,w
  6435  00D7  1803               	btfsc	3,0
  6436  00D8  2932               	goto	l2645
  6437  00D9                     l2633:	
  6438                           
  6439                           ;mcp2515.c: 345: m = save_rxfn[i];
  6440  00D9  3551               	lslf	can_dump_masks_and_filters@i,w
  6441  00DA  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6442  00DB  0086               	movwf	6
  6443  00DC  0187               	clrf	7
  6444  00DD  3F40               	moviw [0]fsr1
  6445  00DE  00CF               	movwf	can_dump_masks_and_filters@m
  6446  00DF  3F41               	moviw [1]fsr1
  6447  00E0  00D0               	movwf	can_dump_masks_and_filters@m+1
  6448                           
  6449                           ;mcp2515.c: 346: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6450  00E1  0850               	movf	can_dump_masks_and_filters@m+1,w
  6451  00E2  00C4               	movwf	??_can_dump_masks_and_filters+1
  6452  00E3  084F               	movf	can_dump_masks_and_filters@m,w
  6453  00E4  00C3               	movwf	??_can_dump_masks_and_filters
  6454  00E5  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6455  00E6  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6456  00E7  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6457  00E8  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6458  00E9  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6459  00EA  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6460  00EB  0843               	movf	??_can_dump_masks_and_filters,w
  6461  00EC  00C5               	movwf	??_can_dump_masks_and_filters+2
  6462  00ED  0845               	movf	??_can_dump_masks_and_filters+2,w
  6463  00EE  00CD               	movwf	can_dump_masks_and_filters@h
  6464                           
  6465                           ;mcp2515.c: 347: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6466  00EF  084F               	movf	can_dump_masks_and_filters@m,w
  6467  00F0  3907               	andlw	7
  6468  00F1  00C3               	movwf	??_can_dump_masks_and_filters
  6469  00F2  3004               	movlw	4
  6470  00F3                     u2315:	
  6471  00F3  35C3               	lslf	??_can_dump_masks_and_filters,f
  6472  00F4  3EFF               	addlw	-1
  6473  00F5  1D03               	skipz
  6474  00F6  28F3               	goto	u2315
  6475  00F7  3543               	lslf	??_can_dump_masks_and_filters,w
  6476  00F8  00C4               	movwf	??_can_dump_masks_and_filters+1
  6477  00F9  0844               	movf	??_can_dump_masks_and_filters+1,w
  6478  00FA  00CE               	movwf	can_dump_masks_and_filters@l
  6479                           
  6480                           ;mcp2515.c: 348: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6481  00FB  30DF               	movlw	low (STR_36| (0+32768))
  6482  00FC  00A2               	movwf	printf@f
  6483  00FD  3090               	movlw	high (STR_36| (0+32768))
  6484  00FE  00A3               	movwf	printf@f+1
  6485  00FF  0851               	movf	can_dump_masks_and_filters@i,w
  6486  0100  00C3               	movwf	??_can_dump_masks_and_filters
  6487  0101  01C4               	clrf	??_can_dump_masks_and_filters+1
  6488  0102  0843               	movf	??_can_dump_masks_and_filters,w
  6489  0103  00A4               	movwf	?_printf+2
  6490  0104  0844               	movf	??_can_dump_masks_and_filters+1,w
  6491  0105  00A5               	movwf	?_printf+3
  6492  0106  0851               	movf	can_dump_masks_and_filters@i,w
  6493  0107  00C5               	movwf	??_can_dump_masks_and_filters+2
  6494  0108  01C6               	clrf	??_can_dump_masks_and_filters+3
  6495  0109  0845               	movf	??_can_dump_masks_and_filters+2,w
  6496  010A  00A6               	movwf	?_printf+4
  6497  010B  0846               	movf	??_can_dump_masks_and_filters+3,w
  6498  010C  00A7               	movwf	?_printf+5
  6499  010D  0851               	movf	can_dump_masks_and_filters@i,w
  6500  010E  00C7               	movwf	??_can_dump_masks_and_filters+4
  6501  010F  01C8               	clrf	??_can_dump_masks_and_filters+5
  6502  0110  0847               	movf	??_can_dump_masks_and_filters+4,w
  6503  0111  00A8               	movwf	?_printf+6
  6504  0112  0848               	movf	??_can_dump_masks_and_filters+5,w
  6505  0113  00A9               	movwf	?_printf+7
  6506  0114  0850               	movf	can_dump_masks_and_filters@m+1,w
  6507  0115  00AB               	movwf	?_printf+9
  6508  0116  084F               	movf	can_dump_masks_and_filters@m,w
  6509  0117  00AA               	movwf	?_printf+8
  6510  0118  084D               	movf	can_dump_masks_and_filters@h,w
  6511  0119  00C9               	movwf	??_can_dump_masks_and_filters+6
  6512  011A  01CA               	clrf	??_can_dump_masks_and_filters+7
  6513  011B  0849               	movf	??_can_dump_masks_and_filters+6,w
  6514  011C  00AC               	movwf	?_printf+10
  6515  011D  084A               	movf	??_can_dump_masks_and_filters+7,w
  6516  011E  00AD               	movwf	?_printf+11
  6517  011F  084E               	movf	can_dump_masks_and_filters@l,w
  6518  0120  00CB               	movwf	??_can_dump_masks_and_filters+8
  6519  0121  01CC               	clrf	??_can_dump_masks_and_filters+9
  6520  0122  084B               	movf	??_can_dump_masks_and_filters+8,w
  6521  0123  00AE               	movwf	?_printf+12
  6522  0124  084C               	movf	??_can_dump_masks_and_filters+9,w
  6523  0125  00AF               	movwf	?_printf+13
  6524  0126  3185  25A3  3180   	fcall	_printf
  6525  0129  3001               	movlw	1
  6526  012A  0020               	movlb	0	; select bank0
  6527  012B  00C3               	movwf	??_can_dump_masks_and_filters
  6528  012C  0843               	movf	??_can_dump_masks_and_filters,w
  6529  012D  07D1               	addwf	can_dump_masks_and_filters@i,f
  6530  012E  3006               	movlw	6
  6531  012F  0251               	subwf	can_dump_masks_and_filters@i,w
  6532  0130  1C03               	skipc
  6533  0131  28D9               	goto	l2633
  6534  0132                     l2645:	
  6535                           
  6536                           ;mcp2515.c: 349: }
  6537                           ;mcp2515.c: 350: printf("---\n");
  6538  0132  3076               	movlw	low (STR_34| (0+32768))
  6539  0133  00A2               	movwf	printf@f
  6540  0134  3094               	movlw	high (STR_34| (0+32768))
  6541  0135  00A3               	movwf	printf@f+1
  6542  0136  3185  25A3         	fcall	_printf
  6543  0138  0008               	return
  6544  0139                     __end_of_can_dump_masks_and_filters:	
  6545                           
  6546                           	psect	text13
  6547  0BF6                     __ptext13:	
  6548 ;; *************** function _can_baudrate *****************
  6549 ;; Defined at:
  6550 ;;		line 297 in file "mcp2515.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  bpr             1    wreg     unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  bpr             1   41[BANK0 ] unsigned char 
  6555 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  6556 ;;  mask            1   42[BANK0 ] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      unsigned char 
  6559 ;; Registers used:
  6560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;Total ram usage:        5 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    4
  6573 ;; This function calls:
  6574 ;;		_SPI_exchange
  6575 ;;		_can_ope_mode
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _can_baudrate
  6583  0BF6                     _can_baudrate:	
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6587                           ;can_baudrate@bpr stored from wreg
  6588  0BF6  0020               	movlb	0	; select bank0
  6589  0BF7  00C9               	movwf	can_baudrate@bpr
  6590                           
  6591                           ;mcp2515.c: 298: can_ope_mode(0b10000000u);
  6592  0BF8  3080               	movlw	128
  6593  0BF9  318D  2501  318B   	fcall	_can_ope_mode
  6594                           
  6595                           ;mcp2515.c: 301: uint8_t mask = 0b00111111;
  6596  0BFC  303F               	movlw	63
  6597  0BFD  0020               	movlb	0	; select bank0
  6598  0BFE  00C7               	movwf	??_can_baudrate
  6599  0BFF  0847               	movf	??_can_baudrate,w
  6600  0C00  00CA               	movwf	can_baudrate@mask
  6601                           
  6602                           ;mcp2515.c: 302: buf[0] = 0b00000101u;
  6603  0C01  3005               	movlw	5
  6604  0C02  00C7               	movwf	??_can_baudrate
  6605  0C03  0847               	movf	??_can_baudrate,w
  6606  0C04  0021               	movlb	1	; select bank1
  6607  0C05  00AC               	movwf	_buf^(0+128)
  6608                           
  6609                           ;mcp2515.c: 303: buf[1] = 0x2au;
  6610  0C06  302A               	movlw	42
  6611  0C07  0020               	movlb	0	; select bank0
  6612  0C08  00C7               	movwf	??_can_baudrate
  6613  0C09  0847               	movf	??_can_baudrate,w
  6614  0C0A  0021               	movlb	1	; select bank1
  6615  0C0B  00AD               	movwf	(_buf^(0+128)+1)
  6616                           
  6617                           ;mcp2515.c: 304: buf[2] = mask;
  6618  0C0C  0020               	movlb	0	; select bank0
  6619  0C0D  084A               	movf	can_baudrate@mask,w
  6620  0C0E  00C7               	movwf	??_can_baudrate
  6621  0C0F  0847               	movf	??_can_baudrate,w
  6622  0C10  0021               	movlb	1	; select bank1
  6623  0C11  00AE               	movwf	(_buf^(0+128)+2)
  6624                           
  6625                           ;mcp2515.c: 305: buf[3] = bpr;
  6626  0C12  0020               	movlb	0	; select bank0
  6627  0C13  0849               	movf	can_baudrate@bpr,w
  6628  0C14  00C7               	movwf	??_can_baudrate
  6629  0C15  0847               	movf	??_can_baudrate,w
  6630  0C16  0021               	movlb	1	; select bank1
  6631  0C17  00AF               	movwf	(_buf^(0+128)+3)
  6632                           
  6633                           ;mcp2515.c: 306: uint8_t bytes_written = SPI_exchange(buf, 4);
  6634  0C18  3004               	movlw	4
  6635  0C19  0020               	movlb	0	; select bank0
  6636  0C1A  00C7               	movwf	??_can_baudrate
  6637  0C1B  0847               	movf	??_can_baudrate,w
  6638  0C1C  00F8               	movwf	SPI_exchange@len
  6639  0C1D  30AC               	movlw	(low (_buf| 0))& (0+255)
  6640  0C1E  318A  22F2  318B   	fcall	_SPI_exchange
  6641  0C21  0020               	movlb	0	; select bank0
  6642  0C22  00C8               	movwf	??_can_baudrate+1
  6643  0C23  0848               	movf	??_can_baudrate+1,w
  6644  0C24  00CB               	movwf	can_baudrate@bytes_written
  6645                           
  6646                           ;mcp2515.c: 307: can_ope_mode(operation_mode);
  6647  0C25  086D               	movf	_operation_mode,w
  6648  0C26  318D  2501         	fcall	_can_ope_mode
  6649                           
  6650                           ;mcp2515.c: 311: return 0;
  6651                           ;	Return value of _can_baudrate is never used
  6652                           
  6653                           ;mcp2515.c: 310: } else {
  6654                           
  6655                           ;mcp2515.c: 309: return 1;
  6656                           ;	Return value of _can_baudrate is never used
  6657  0C28  0008               	return
  6658  0C29                     __end_of_can_baudrate:	
  6659                           
  6660                           	psect	text14
  6661  0AE3                     __ptext14:	
  6662 ;; *************** function _can_abort *****************
  6663 ;; Defined at:
  6664 ;;		line 315 in file "mcp2515.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      unsigned char 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;Total ram usage:        2 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    4
  6685 ;; This function calls:
  6686 ;;		_abort_pending_transmissions
  6687 ;;		_can_ope_mode
  6688 ;; This function is called by:
  6689 ;;		_main
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _can_abort
  6695  0AE3                     _can_abort:	
  6696                           
  6697                           ;mcp2515.c: 316: can_ope_mode(0b10000000u);
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6701  0AE3  3080               	movlw	128
  6702  0AE4  318D  2501  318A   	fcall	_can_ope_mode
  6703                           
  6704                           ;mcp2515.c: 317: uint8_t bytes_written = abort_pending_transmissions();
  6705  0AE7  318B  2376  318A   	fcall	_abort_pending_transmissions
  6706  0AEA  0020               	movlb	0	; select bank0
  6707  0AEB  00C7               	movwf	??_can_abort
  6708  0AEC  0847               	movf	??_can_abort,w
  6709  0AED  00C8               	movwf	can_abort@bytes_written
  6710                           
  6711                           ;mcp2515.c: 318: can_ope_mode(operation_mode);
  6712  0AEE  086D               	movf	_operation_mode,w
  6713  0AEF  318D  2501         	fcall	_can_ope_mode
  6714                           
  6715                           ;mcp2515.c: 322: return 0;
  6716                           ;	Return value of _can_abort is never used
  6717                           
  6718                           ;mcp2515.c: 321: } else {
  6719                           
  6720                           ;mcp2515.c: 320: return 1;
  6721                           ;	Return value of _can_abort is never used
  6722  0AF1  0008               	return
  6723  0AF2                     __end_of_can_abort:	
  6724                           
  6725                           	psect	text15
  6726  0D01                     __ptext15:	
  6727 ;; *************** function _can_ope_mode *****************
  6728 ;; Defined at:
  6729 ;;		line 91 in file "mcp2515.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  ope_mode        1    wreg     unsigned char 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  6734 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  1    wreg      unsigned char 
  6737 ;; Registers used:
  6738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;Total ram usage:        4 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    3
  6751 ;; This function calls:
  6752 ;;		_SPI_exchange
  6753 ;;		_printf
  6754 ;; This function is called by:
  6755 ;;		_main
  6756 ;;		_can_init
  6757 ;;		_can_set_mask
  6758 ;;		_can_baudrate
  6759 ;;		_can_abort
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           
  6764                           ;psect for function _can_ope_mode
  6765  0D01                     _can_ope_mode:	
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6769                           ;can_ope_mode@ope_mode stored from wreg
  6770  0D01  0020               	movlb	0	; select bank0
  6771  0D02  00C6               	movwf	can_ope_mode@ope_mode
  6772                           
  6773                           ;mcp2515.c: 92: buf[0] = 0b00000010u;
  6774  0D03  3002               	movlw	2
  6775  0D04  00C3               	movwf	??_can_ope_mode
  6776  0D05  0843               	movf	??_can_ope_mode,w
  6777  0D06  0021               	movlb	1	; select bank1
  6778  0D07  00AC               	movwf	_buf^(0+128)
  6779                           
  6780                           ;mcp2515.c: 93: buf[1] = 0x0fu;
  6781  0D08  300F               	movlw	15
  6782  0D09  0020               	movlb	0	; select bank0
  6783  0D0A  00C3               	movwf	??_can_ope_mode
  6784  0D0B  0843               	movf	??_can_ope_mode,w
  6785  0D0C  0021               	movlb	1	; select bank1
  6786  0D0D  00AD               	movwf	(_buf^(0+128)+1)
  6787                           
  6788                           ;mcp2515.c: 94: buf[2] = ope_mode;
  6789  0D0E  0020               	movlb	0	; select bank0
  6790  0D0F  0846               	movf	can_ope_mode@ope_mode,w
  6791  0D10  00C3               	movwf	??_can_ope_mode
  6792  0D11  0843               	movf	??_can_ope_mode,w
  6793  0D12  0021               	movlb	1	; select bank1
  6794  0D13  00AE               	movwf	(_buf^(0+128)+2)
  6795                           
  6796                           ;mcp2515.c: 95: uint8_t bytes_written = SPI_exchange(buf, 3);
  6797  0D14  3003               	movlw	3
  6798  0D15  0020               	movlb	0	; select bank0
  6799  0D16  00C3               	movwf	??_can_ope_mode
  6800  0D17  0843               	movf	??_can_ope_mode,w
  6801  0D18  00F8               	movwf	SPI_exchange@len
  6802  0D19  30AC               	movlw	(low (_buf| 0))& (0+255)
  6803  0D1A  318A  22F2  318D   	fcall	_SPI_exchange
  6804  0D1D  0020               	movlb	0	; select bank0
  6805  0D1E  00C4               	movwf	??_can_ope_mode+1
  6806  0D1F  0844               	movf	??_can_ope_mode+1,w
  6807  0D20  00C5               	movwf	can_ope_mode@bytes_written
  6808                           
  6809                           ;mcp2515.c: 97: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  6810  0D21  3080               	movlw	128
  6811  0D22  0646               	xorwf	can_ope_mode@ope_mode,w
  6812  0D23  1903               	btfsc	3,2
  6813  0D24  2D29               	goto	l2323
  6814  0D25  0846               	movf	can_ope_mode@ope_mode,w
  6815  0D26  00C3               	movwf	??_can_ope_mode
  6816  0D27  0843               	movf	??_can_ope_mode,w
  6817  0D28  00ED               	movwf	_operation_mode
  6818  0D29                     l2323:	
  6819                           
  6820                           ;mcp2515.c: 99: if (bytes_written == 3) {
  6821  0D29  3003               	movlw	3
  6822  0D2A  0645               	xorwf	can_ope_mode@bytes_written,w
  6823  0D2B  1D03               	btfss	3,2
  6824  0D2C  0008               	return
  6825                           
  6826                           ;mcp2515.c: 100: buf[0] = 0b00000011u;
  6827  0D2D  3003               	movlw	3
  6828  0D2E  00C3               	movwf	??_can_ope_mode
  6829  0D2F  0843               	movf	??_can_ope_mode,w
  6830  0D30  0021               	movlb	1	; select bank1
  6831  0D31  00AC               	movwf	_buf^(0+128)
  6832                           
  6833                           ;mcp2515.c: 101: buf[1] = 0x0e;
  6834  0D32  300E               	movlw	14
  6835  0D33  0020               	movlb	0	; select bank0
  6836  0D34  00C3               	movwf	??_can_ope_mode
  6837  0D35  0843               	movf	??_can_ope_mode,w
  6838  0D36  0021               	movlb	1	; select bank1
  6839  0D37  00AD               	movwf	(_buf^(0+128)+1)
  6840                           
  6841                           ;mcp2515.c: 102: bytes_written = SPI_exchange(buf, 3);
  6842  0D38  3003               	movlw	3
  6843  0D39  0020               	movlb	0	; select bank0
  6844  0D3A  00C3               	movwf	??_can_ope_mode
  6845  0D3B  0843               	movf	??_can_ope_mode,w
  6846  0D3C  00F8               	movwf	SPI_exchange@len
  6847  0D3D  30AC               	movlw	(low (_buf| 0))& (0+255)
  6848  0D3E  318A  22F2  318D   	fcall	_SPI_exchange
  6849  0D41  0020               	movlb	0	; select bank0
  6850  0D42  00C4               	movwf	??_can_ope_mode+1
  6851  0D43  0844               	movf	??_can_ope_mode+1,w
  6852  0D44  00C5               	movwf	can_ope_mode@bytes_written
  6853                           
  6854                           ;mcp2515.c: 103: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6855  0D45  0869               	movf	_mode,w
  6856  0D46  1903               	btfsc	3,2
  6857  0D47  0008               	return
  6858  0D48  30E0               	movlw	low (STR_18| (0+32768))
  6859  0D49  00A2               	movwf	printf@f
  6860  0D4A  3093               	movlw	high (STR_18| (0+32768))
  6861  0D4B  00A3               	movwf	printf@f+1
  6862  0D4C  0021               	movlb	1	; select bank1
  6863  0D4D  082E               	movf	(_buf^(0+128)+2),w
  6864  0D4E  0020               	movlb	0	; select bank0
  6865  0D4F  00C3               	movwf	??_can_ope_mode
  6866  0D50  01C4               	clrf	??_can_ope_mode+1
  6867  0D51  0843               	movf	??_can_ope_mode,w
  6868  0D52  00A4               	movwf	?_printf+2
  6869  0D53  0844               	movf	??_can_ope_mode+1,w
  6870  0D54  00A5               	movwf	?_printf+3
  6871  0D55  3185  25A3         	fcall	_printf
  6872                           
  6873                           ;mcp2515.c: 106: return 0;
  6874                           ;	Return value of _can_ope_mode is never used
  6875                           
  6876                           ;mcp2515.c: 105: } else {
  6877                           
  6878                           ;mcp2515.c: 104: return 1;
  6879                           ;	Return value of _can_ope_mode is never used
  6880  0D57  0008               	return
  6881  0D58                     __end_of_can_ope_mode:	
  6882                           
  6883                           	psect	text16
  6884  05A3                     __ptext16:	
  6885 ;; *************** function _printf *****************
  6886 ;; Defined at:
  6887 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6890 ;;		 -> STR_55(5), STR_54(15), STR_53(15), STR_52(2), 
  6891 ;;		 -> STR_51(16), STR_50(16), STR_49(2), STR_48(16), 
  6892 ;;		 -> STR_47(16), STR_46(16), STR_45(2), STR_44(12), 
  6893 ;;		 -> STR_43(12), STR_42(12), STR_41(2), STR_40(12), 
  6894 ;;		 -> STR_39(12), STR_38(5), STR_37(5), STR_36(44), 
  6895 ;;		 -> STR_35(44), STR_34(5), STR_33(13), STR_32(13), 
  6896 ;;		 -> STR_31(18), STR_30(17), STR_29(17), STR_28(20), 
  6897 ;;		 -> STR_27(14), STR_26(14), STR_25(14), STR_24(15), 
  6898 ;;		 -> STR_23(16), STR_22(17), STR_21(17), STR_20(23), 
  6899 ;;		 -> STR_19(21), STR_18(15), STR_17(22), STR_16(44), 
  6900 ;;		 -> STR_15(57), STR_14(26), STR_13(21), STR_12(29), 
  6901 ;;		 -> STR_11(38), STR_10(25), STR_9(42), STR_8(38), 
  6902 ;;		 -> STR_7(29), STR_6(54), STR_5(59), STR_4(51), 
  6903 ;;		 -> STR_2(36), STR_1(3), 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  idx             1   22[BANK0 ] unsigned char 
  6906 ;;  tmpval          4    0        struct .
  6907 ;;  width           2   32[BANK0 ] int 
  6908 ;;  val             2   29[BANK0 ] unsigned int 
  6909 ;;  len             2   26[BANK0 ] unsigned int 
  6910 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  6911 ;;		 -> STR_56(7), printf@c(1), can_send@n(1), txf_clear@n(1), 
  6912 ;;		 -> STR_3(21), main@buf(16), 
  6913 ;;  c               1   34[BANK0 ] char 
  6914 ;;  flag            1   31[BANK0 ] unsigned char 
  6915 ;;  ap              1   28[BANK0 ] PTR void [1]
  6916 ;;		 -> ?_printf(2), 
  6917 ;;  prec            1   23[BANK0 ] char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  2    2[BANK0 ] int 
  6920 ;; Registers used:
  6921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6927 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;Total ram usage:       33 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    2
  6934 ;; This function calls:
  6935 ;;		___lwdiv
  6936 ;;		___lwmod
  6937 ;;		___wmul
  6938 ;;		_isdigit
  6939 ;;		_putch
  6940 ;; This function is called by:
  6941 ;;		_main
  6942 ;;		_can_ope_mode
  6943 ;;		_can_set_mask
  6944 ;;		_receive
  6945 ;;		_can_send
  6946 ;;		_can_status_check
  6947 ;;		_can_dump_masks_and_filters
  6948 ;;		_can_dump_registers
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _printf
  6954  05A3                     _printf:	
  6955                           
  6956                           ;doprnt.c: 466: va_list ap;
  6957                           ;doprnt.c: 499: signed char c;
  6958                           ;doprnt.c: 501: int width;
  6959                           ;doprnt.c: 506: signed char prec;
  6960                           ;doprnt.c: 508: unsigned char flag;
  6961                           ;doprnt.c: 523: union {
  6962                           ;doprnt.c: 524: unsigned long vd;
  6963                           ;doprnt.c: 525: double integ;
  6964                           ;doprnt.c: 526: } tmpval;
  6965                           ;doprnt.c: 528: unsigned int val;
  6966                           ;doprnt.c: 529: unsigned len;
  6967                           ;doprnt.c: 530: const char * cp;
  6968                           ;doprnt.c: 533: *ap = __va_start();
  6969                           
  6970                           ;incstack = 0
  6971                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6972  05A3  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6973  05A4  0020               	movlb	0	; select bank0
  6974  05A5  00B0               	movwf	??_printf
  6975  05A6  0830               	movf	??_printf,w
  6976  05A7  00BC               	movwf	printf@ap
  6977  05A8                     l2263:	
  6978                           ;doprnt.c: 536: while(c = *f++) {
  6979                           
  6980  05A8  0020               	movlb	0	; select bank0
  6981  05A9  0823               	movf	printf@f+1,w
  6982  05AA  00B1               	movwf	??_printf+1
  6983  05AB  0822               	movf	printf@f,w
  6984  05AC  00B0               	movwf	??_printf
  6985  05AD  0AA2               	incf	printf@f,f
  6986  05AE  1903               	skipnz
  6987  05AF  0AA3               	incf	printf@f+1,f
  6988  05B0  0830               	movf	??_printf,w
  6989  05B1  0084               	movwf	4
  6990  05B2  0831               	movf	??_printf+1,w
  6991  05B3  0085               	movwf	5
  6992  05B4  0800               	movf	0,w	;code access
  6993  05B5  00B2               	movwf	??_printf+2
  6994  05B6  0832               	movf	??_printf+2,w
  6995  05B7  00C2               	movwf	printf@c
  6996  05B8  0842               	movf	printf@c,w
  6997  05B9  1903               	btfsc	3,2
  6998  05BA  0008               	return
  6999                           
  7000                           ;doprnt.c: 538: if(c != '%')
  7001  05BB  3025               	movlw	37
  7002  05BC  0642               	xorwf	printf@c,w
  7003  05BD  1903               	btfsc	3,2
  7004  05BE  2DC4               	goto	l2109
  7005                           
  7006                           ;doprnt.c: 540: {
  7007                           ;doprnt.c: 541: (putch(c) );
  7008  05BF  0842               	movf	printf@c,w
  7009  05C0  318A  2278  3185   	fcall	_putch
  7010                           
  7011                           ;doprnt.c: 542: continue;
  7012  05C3  2DA8               	goto	l2263
  7013  05C4                     l2109:	
  7014                           
  7015                           ;doprnt.c: 543: }
  7016                           ;doprnt.c: 546: width = 0;
  7017  05C4  0020               	movlb	0	; select bank0
  7018  05C5  01C0               	clrf	printf@width
  7019  05C6  01C1               	clrf	printf@width+1
  7020                           
  7021                           ;doprnt.c: 548: flag = 0;
  7022  05C7  01BF               	clrf	printf@flag
  7023                           
  7024                           ;doprnt.c: 551: switch(*f) {
  7025                           
  7026                           ;doprnt.c: 550: for(;;) {
  7027  05C8  2DCE               	goto	l2115
  7028  05C9                     l426:	
  7029                           ;doprnt.c: 579: case '0':
  7030                           
  7031                           
  7032                           ;doprnt.c: 580: flag |= 0x04;
  7033  05C9  153F               	bsf	printf@flag,2
  7034                           
  7035                           ;doprnt.c: 581: f++;
  7036  05CA  3001               	movlw	1
  7037  05CB  07A2               	addwf	printf@f,f
  7038  05CC  3000               	movlw	0
  7039  05CD  3DA3               	addwfc	printf@f+1,f
  7040  05CE                     l2115:	
  7041                           ;doprnt.c: 584: }
  7042                           
  7043                           ;doprnt.c: 582: continue;
  7044                           
  7045  05CE  0822               	movf	printf@f,w
  7046  05CF  0084               	movwf	4
  7047  05D0  0823               	movf	printf@f+1,w
  7048  05D1  0085               	movwf	5
  7049  05D2  0800               	movf	0,w	;code access
  7050                           
  7051                           ; Switch size 1, requested type "space"
  7052                           ; Number of cases is 1, Range of values is 48 to 48
  7053                           ; switch strategies available:
  7054                           ; Name         Instructions Cycles
  7055                           ; simple_byte            4     3 (average)
  7056                           ; direct_byte           11     9 (fixed)
  7057                           ; jumptable            263     9 (fixed)
  7058                           ;	Chosen strategy is simple_byte
  7059  05D3  3A30               	xorlw	48	; case 48
  7060  05D4  1903               	skipnz
  7061  05D5  2DC9               	goto	l426
  7062  05D6  2DD7               	goto	l2117
  7063  05D7                     l2117:	
  7064                           ;doprnt.c: 586: }
  7065                           
  7066                           ;doprnt.c: 585: break;
  7067                           
  7068                           
  7069                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7070  05D7  0822               	movf	printf@f,w
  7071  05D8  0084               	movwf	4
  7072  05D9  0823               	movf	printf@f+1,w
  7073  05DA  0085               	movwf	5
  7074  05DB  0800               	movf	0,w	;code access
  7075  05DC  318A  22C6  3185   	fcall	_isdigit
  7076  05DF  1C03               	btfss	3,0
  7077  05E0  2E83               	goto	l2169
  7078                           
  7079                           ;doprnt.c: 598: width = 0;
  7080  05E1  0020               	movlb	0	; select bank0
  7081  05E2  01C0               	clrf	printf@width
  7082  05E3  01C1               	clrf	printf@width+1
  7083  05E4                     l2121:	
  7084                           ;doprnt.c: 599: do {
  7085                           
  7086                           
  7087                           ;doprnt.c: 600: width *= 10;
  7088  05E4  300A               	movlw	10
  7089  05E5  00F0               	movwf	___wmul@multiplier
  7090  05E6  3000               	movlw	0
  7091  05E7  00F1               	movwf	___wmul@multiplier+1
  7092  05E8  0020               	movlb	0	; select bank0
  7093  05E9  0841               	movf	printf@width+1,w
  7094  05EA  00F3               	movwf	___wmul@multiplicand+1
  7095  05EB  0840               	movf	printf@width,w
  7096  05EC  00F2               	movwf	___wmul@multiplicand
  7097  05ED  318B  2337  3185   	fcall	___wmul
  7098  05F0  0871               	movf	?___wmul+1,w
  7099  05F1  0020               	movlb	0	; select bank0
  7100  05F2  00C1               	movwf	printf@width+1
  7101  05F3  0870               	movf	?___wmul,w
  7102  05F4  00C0               	movwf	printf@width
  7103                           
  7104                           ;doprnt.c: 601: width += *f++ - '0';
  7105  05F5  0822               	movf	printf@f,w
  7106  05F6  0084               	movwf	4
  7107  05F7  0823               	movf	printf@f+1,w
  7108  05F8  0085               	movwf	5
  7109  05F9  0800               	movf	0,w	;code access
  7110  05FA  3ED0               	addlw	208
  7111  05FB  00B0               	movwf	??_printf
  7112  05FC  30FF               	movlw	255
  7113  05FD  1803               	skipnc
  7114  05FE  3000               	movlw	0
  7115  05FF  00B1               	movwf	??_printf+1
  7116  0600  0830               	movf	??_printf,w
  7117  0601  07C0               	addwf	printf@width,f
  7118  0602  0831               	movf	??_printf+1,w
  7119  0603  3DC1               	addwfc	printf@width+1,f
  7120  0604  3001               	movlw	1
  7121  0605  07A2               	addwf	printf@f,f
  7122  0606  3000               	movlw	0
  7123  0607  3DA3               	addwfc	printf@f+1,f
  7124                           
  7125                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7126  0608  0822               	movf	printf@f,w
  7127  0609  0084               	movwf	4
  7128  060A  0823               	movf	printf@f+1,w
  7129  060B  0085               	movwf	5
  7130  060C  0800               	movf	0,w	;code access
  7131  060D  318A  22C6  3185   	fcall	_isdigit
  7132  0610  1C03               	btfss	3,0
  7133  0611  2E83               	goto	l2169
  7134  0612  2DE4               	goto	l2121
  7135  0613                     l439:	
  7136                           ;doprnt.c: 712: case 'X':
  7137                           
  7138                           ;doprnt.c: 698: case 'i':
  7139                           ;doprnt.c: 699: break;
  7140                           
  7141                           ;doprnt.c: 697: case 'd':
  7142                           
  7143                           ;doprnt.c: 638: goto alldone;
  7144                           
  7145                           ;doprnt.c: 637: case 0:
  7146                           
  7147                           ;doprnt.c: 608: }
  7148                           ;doprnt.c: 635: switch(c = *f++) {
  7149                           
  7150                           
  7151                           ;doprnt.c: 714: flag |= 0x20;
  7152  0613  16BF               	bsf	printf@flag,5
  7153  0614                     l440:	
  7154                           ;doprnt.c: 718: case 'x':
  7155                           
  7156                           
  7157                           ;doprnt.c: 721: flag |= 0x80;
  7158  0614  17BF               	bsf	printf@flag,7
  7159                           
  7160                           ;doprnt.c: 723: break;
  7161  0615  2EA7               	goto	l438
  7162  0616                     l2129:	
  7163                           ;doprnt.c: 728: case 's':
  7164                           
  7165                           
  7166                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7167  0616  083C               	movf	printf@ap,w
  7168  0617  0086               	movwf	6
  7169  0618  0187               	clrf	7
  7170  0619  3F40               	moviw [0]fsr1
  7171  061A  00B8               	movwf	printf@cp
  7172  061B  3F41               	moviw [1]fsr1
  7173  061C  00B9               	movwf	printf@cp+1
  7174  061D  3002               	movlw	2
  7175  061E  00B0               	movwf	??_printf
  7176  061F  0830               	movf	??_printf,w
  7177  0620  07BC               	addwf	printf@ap,f
  7178                           
  7179                           ;doprnt.c: 740: if(!cp)
  7180  0621  0838               	movf	printf@cp,w
  7181  0622  0439               	iorwf	printf@cp+1,w
  7182  0623  1D03               	btfss	3,2
  7183  0624  2E29               	goto	l2137
  7184                           
  7185                           ;doprnt.c: 741: cp = "(null)";
  7186  0625  3069               	movlw	low (STR_56| (0+32768))
  7187  0626  00B8               	movwf	printf@cp
  7188  0627  3094               	movlw	high (STR_56| (0+32768))
  7189  0628  00B9               	movwf	printf@cp+1
  7190  0629                     l2137:	
  7191                           
  7192                           ;doprnt.c: 745: len = 0;
  7193  0629  01BA               	clrf	printf@len
  7194  062A  01BB               	clrf	printf@len+1
  7195  062B                     l2141:	
  7196                           ;doprnt.c: 746: while(cp[len])
  7197                           
  7198  062B  0838               	movf	printf@cp,w
  7199  062C  073A               	addwf	printf@len,w
  7200  062D  0084               	movwf	4
  7201  062E  0839               	movf	printf@cp+1,w
  7202  062F  3D3B               	addwfc	printf@len+1,w
  7203  0630  0085               	movwf	5
  7204  0631  0012               	moviw fsr0++
  7205  0632  1903               	btfsc	3,2
  7206  0633  2E39               	goto	l2143
  7207                           
  7208                           ;doprnt.c: 747: len++;
  7209  0634  3001               	movlw	1
  7210  0635  07BA               	addwf	printf@len,f
  7211  0636  3000               	movlw	0
  7212  0637  3DBB               	addwfc	printf@len+1,f
  7213  0638  2E2B               	goto	l2141
  7214  0639                     l2143:	
  7215                           ;doprnt.c: 750: dostring:
  7216                           
  7217                           
  7218                           ;doprnt.c: 757: if(width > len)
  7219  0639  0841               	movf	printf@width+1,w
  7220  063A  023B               	subwf	printf@len+1,w
  7221  063B  1D03               	skipz
  7222  063C  2E3F               	goto	u1725
  7223  063D  0840               	movf	printf@width,w
  7224  063E  023A               	subwf	printf@len,w
  7225  063F                     u1725:	
  7226  063F  1803               	skipnc
  7227  0640  2E46               	goto	l2147
  7228                           
  7229                           ;doprnt.c: 758: width -= len;
  7230  0641  083A               	movf	printf@len,w
  7231  0642  02C0               	subwf	printf@width,f
  7232  0643  083B               	movf	printf@len+1,w
  7233  0644  3BC1               	subwfb	printf@width+1,f
  7234  0645  2E48               	goto	l2151
  7235  0646                     l2147:	
  7236                           
  7237                           ;doprnt.c: 759: else
  7238                           ;doprnt.c: 760: width = 0;
  7239  0646  01C0               	clrf	printf@width
  7240  0647  01C1               	clrf	printf@width+1
  7241  0648                     l2151:	
  7242                           ;doprnt.c: 764: while(width--)
  7243                           
  7244  0648  30FF               	movlw	255
  7245  0649  0020               	movlb	0	; select bank0
  7246  064A  07C0               	addwf	printf@width,f
  7247  064B  30FF               	movlw	255
  7248  064C  3DC1               	addwfc	printf@width+1,f
  7249  064D  0A40               	incf	printf@width,w
  7250  064E  1903               	btfsc	3,2
  7251  064F  0A41               	incf	printf@width+1,w
  7252  0650  1903               	btfsc	3,2
  7253  0651  2E64               	goto	l2157
  7254                           
  7255                           ;doprnt.c: 765: (putch(' ') );
  7256  0652  3020               	movlw	32
  7257  0653  318A  2278  3185   	fcall	_putch
  7258  0656  2E48               	goto	l2151
  7259  0657                     l2153:	
  7260                           ;doprnt.c: 767: while(len--)
  7261                           
  7262                           
  7263                           ;doprnt.c: 768: (putch(*cp++) );
  7264  0657  0838               	movf	printf@cp,w
  7265  0658  0084               	movwf	4
  7266  0659  0839               	movf	printf@cp+1,w
  7267  065A  0085               	movwf	5
  7268  065B  0800               	movf	0,w	;code access
  7269  065C  318A  2278  3185   	fcall	_putch
  7270  065F  3001               	movlw	1
  7271  0660  0020               	movlb	0	; select bank0
  7272  0661  07B8               	addwf	printf@cp,f
  7273  0662  3000               	movlw	0
  7274  0663  3DB9               	addwfc	printf@cp+1,f
  7275  0664                     l2157:	
  7276  0664  3001               	movlw	1
  7277  0665  02BA               	subwf	printf@len,f
  7278  0666  3000               	movlw	0
  7279  0667  3BBB               	subwfb	printf@len+1,f
  7280  0668  0A3A               	incf	printf@len,w
  7281  0669  1D03               	skipz
  7282  066A  2E57               	goto	l2153
  7283  066B  0A3B               	incf	printf@len+1,w
  7284  066C  1903               	btfsc	3,2
  7285  066D  2DA8               	goto	l2263
  7286  066E  2E57               	goto	l2153
  7287  066F                     l2159:	
  7288                           ;doprnt.c: 784: case 'c':
  7289                           
  7290                           ;doprnt.c: 774: continue;
  7291                           
  7292                           
  7293                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7294  066F  083C               	movf	printf@ap,w
  7295  0670  0086               	movwf	6
  7296  0671  0187               	clrf	7
  7297  0672  0801               	movf	1,w
  7298  0673  00B0               	movwf	??_printf
  7299  0674  0830               	movf	??_printf,w
  7300  0675  00C2               	movwf	printf@c
  7301  0676  3002               	movlw	2
  7302  0677  00B0               	movwf	??_printf
  7303  0678  0830               	movf	??_printf,w
  7304  0679  07BC               	addwf	printf@ap,f
  7305  067A                     l2163:	
  7306                           ;doprnt.c: 802: default:
  7307                           
  7308                           
  7309                           ;doprnt.c: 805: cp = (char *)&c;
  7310  067A  3042               	movlw	low printf@c
  7311  067B  00B8               	movwf	printf@cp
  7312  067C  3000               	movlw	high printf@c
  7313  067D  00B9               	movwf	printf@cp+1
  7314                           
  7315                           ;doprnt.c: 806: len = 1;
  7316  067E  3001               	movlw	1
  7317  067F  00BA               	movwf	printf@len
  7318  0680  3000               	movlw	0
  7319  0681  00BB               	movwf	printf@len+1
  7320                           
  7321                           ;doprnt.c: 807: goto dostring;
  7322  0682  2E39               	goto	l2143
  7323  0683                     l2169:	
  7324                           ;doprnt.c: 822: }
  7325                           
  7326  0683  0020               	movlb	0	; select bank0
  7327  0684  0823               	movf	printf@f+1,w
  7328  0685  00B1               	movwf	??_printf+1
  7329  0686  0822               	movf	printf@f,w
  7330  0687  00B0               	movwf	??_printf
  7331  0688  0AA2               	incf	printf@f,f
  7332  0689  1903               	skipnz
  7333  068A  0AA3               	incf	printf@f+1,f
  7334  068B  0830               	movf	??_printf,w
  7335  068C  0084               	movwf	4
  7336  068D  0831               	movf	??_printf+1,w
  7337  068E  0085               	movwf	5
  7338  068F  0800               	movf	0,w	;code access
  7339  0690  00C2               	movwf	printf@c
  7340                           
  7341                           ; Switch size 1, requested type "space"
  7342                           ; Number of cases is 7, Range of values is 0 to 120
  7343                           ; switch strategies available:
  7344                           ; Name         Instructions Cycles
  7345                           ; simple_byte           22    12 (average)
  7346                           ; direct_byte          248     6 (fixed)
  7347                           ; jumptable            260     6 (fixed)
  7348                           ;	Chosen strategy is simple_byte
  7349  0691  3A00               	xorlw	0	; case 0
  7350  0692  1903               	skipnz
  7351  0693  2FED               	goto	l495
  7352  0694  3A58               	xorlw	88	; case 88
  7353  0695  1903               	skipnz
  7354  0696  2E13               	goto	l439
  7355  0697  3A3B               	xorlw	59	; case 99
  7356  0698  1903               	skipnz
  7357  0699  2E6F               	goto	l2159
  7358  069A  3A07               	xorlw	7	; case 100
  7359  069B  1903               	skipnz
  7360  069C  2EA7               	goto	l438
  7361  069D  3A0D               	xorlw	13	; case 105
  7362  069E  1903               	skipnz
  7363  069F  2EA7               	goto	l438
  7364  06A0  3A1A               	xorlw	26	; case 115
  7365  06A1  1903               	skipnz
  7366  06A2  2E16               	goto	l2129
  7367  06A3  3A0B               	xorlw	11	; case 120
  7368  06A4  1903               	skipnz
  7369  06A5  2E14               	goto	l440
  7370  06A6  2E7A               	goto	l2163
  7371  06A7                     l438:	
  7372                           
  7373                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7374  06A7  0020               	movlb	0	; select bank0
  7375  06A8  1BBF               	btfsc	printf@flag,7
  7376  06A9  2EC1               	goto	l2181
  7377                           
  7378                           ;doprnt.c: 1253: {
  7379                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7380  06AA  083C               	movf	printf@ap,w
  7381  06AB  0086               	movwf	6
  7382  06AC  0187               	clrf	7
  7383  06AD  3F40               	moviw [0]fsr1
  7384  06AE  00BD               	movwf	printf@val
  7385  06AF  3F41               	moviw [1]fsr1
  7386  06B0  00BE               	movwf	printf@val+1
  7387  06B1  3002               	movlw	2
  7388  06B2  00B0               	movwf	??_printf
  7389  06B3  0830               	movf	??_printf,w
  7390  06B4  07BC               	addwf	printf@ap,f
  7391                           
  7392                           ;doprnt.c: 1261: if((int)val < 0) {
  7393  06B5  1FBE               	btfss	printf@val+1,7
  7394  06B6  2F11               	goto	l2207
  7395                           
  7396                           ;doprnt.c: 1262: flag |= 0x03;
  7397  06B7  3003               	movlw	3
  7398  06B8  00B0               	movwf	??_printf
  7399  06B9  0830               	movf	??_printf,w
  7400  06BA  04BF               	iorwf	printf@flag,f
  7401                           
  7402                           ;doprnt.c: 1263: val = -val;
  7403  06BB  09BD               	comf	printf@val,f
  7404  06BC  09BE               	comf	printf@val+1,f
  7405  06BD  0ABD               	incf	printf@val,f
  7406  06BE  1903               	skipnz
  7407  06BF  0ABE               	incf	printf@val+1,f
  7408                           
  7409                           ;doprnt.c: 1264: }
  7410                           ;doprnt.c: 1266: }
  7411  06C0  2F11               	goto	l2207
  7412  06C1                     l2181:	
  7413                           
  7414                           ;doprnt.c: 1268: else
  7415                           ;doprnt.c: 1273: {
  7416                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7417  06C1  083C               	movf	printf@ap,w
  7418  06C2  0086               	movwf	6
  7419  06C3  0187               	clrf	7
  7420  06C4  3F40               	moviw [0]fsr1
  7421  06C5  00BD               	movwf	printf@val
  7422  06C6  3F41               	moviw [1]fsr1
  7423  06C7  00BE               	movwf	printf@val+1
  7424  06C8  3002               	movlw	2
  7425  06C9  00B0               	movwf	??_printf
  7426  06CA  0830               	movf	??_printf,w
  7427  06CB  07BC               	addwf	printf@ap,f
  7428                           
  7429                           ;doprnt.c: 1287: }
  7430                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7431  06CC  2F11               	goto	l2207
  7432  06CD                     l461:	
  7433                           ;doprnt.c: 1299: case 0x00:
  7434                           
  7435                           
  7436                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7437  06CD  01C2               	clrf	printf@c
  7438  06CE  0AC2               	incf	printf@c,f
  7439  06CF                     L10:	
  7440  06CF  3005               	movlw	5
  7441  06D0  0642               	xorwf	printf@c,w
  7442  06D1  1903               	btfsc	3,2
  7443  06D2  2F1A               	goto	l2209
  7444                           
  7445                           ;doprnt.c: 1306: if(val < dpowers[c])
  7446  06D3  0842               	movf	printf@c,w
  7447  06D4  00B0               	movwf	??_printf
  7448  06D5  01B1               	clrf	??_printf+1
  7449  06D6  35B0               	lslf	??_printf,f
  7450  06D7  0DB1               	rlf	??_printf+1,f
  7451  06D8  3057               	movlw	low (_dpowers| (0+32768))
  7452  06D9  0730               	addwf	??_printf,w
  7453  06DA  0084               	movwf	4
  7454  06DB  3094               	movlw	high (_dpowers| (0+32768))
  7455  06DC  3D31               	addwfc	??_printf+1,w
  7456  06DD  0085               	movwf	5
  7457  06DE  3F00               	moviw [0]fsr0
  7458  06DF  00B2               	movwf	??_printf+2
  7459  06E0  3F01               	moviw [1]fsr0
  7460  06E1  00B3               	movwf	??_printf+3
  7461  06E2  0833               	movf	??_printf+3,w
  7462  06E3  023E               	subwf	printf@val+1,w
  7463  06E4  1D03               	skipz
  7464  06E5  2EE8               	goto	u1785
  7465  06E6  0832               	movf	??_printf+2,w
  7466  06E7  023D               	subwf	printf@val,w
  7467  06E8                     u1785:	
  7468  06E8  1C03               	btfss	3,0
  7469  06E9  2F1A               	goto	l2209
  7470                           
  7471                           ;doprnt.c: 1307: break;
  7472  06EA  3001               	movlw	1
  7473  06EB  00B0               	movwf	??_printf
  7474  06EC  0830               	movf	??_printf,w
  7475  06ED  07C2               	addwf	printf@c,f
  7476  06EE  2ECF               	goto	L10
  7477  06EF                     l466:	
  7478                           ;doprnt.c: 1314: case 0x80:
  7479                           
  7480                           ;doprnt.c: 1309: break;
  7481                           
  7482                           
  7483                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7484  06EF  01C2               	clrf	printf@c
  7485  06F0  0AC2               	incf	printf@c,f
  7486  06F1                     L11:	
  7487  06F1  3004               	movlw	4
  7488  06F2  0642               	xorwf	printf@c,w
  7489  06F3  1903               	btfsc	3,2
  7490  06F4  2F1A               	goto	l2209
  7491                           
  7492                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7493  06F5  0842               	movf	printf@c,w
  7494  06F6  00B0               	movwf	??_printf
  7495  06F7  01B1               	clrf	??_printf+1
  7496  06F8  35B0               	lslf	??_printf,f
  7497  06F9  0DB1               	rlf	??_printf+1,f
  7498  06FA  3061               	movlw	low (_hexpowers| (0+32768))
  7499  06FB  0730               	addwf	??_printf,w
  7500  06FC  0084               	movwf	4
  7501  06FD  3094               	movlw	high (_hexpowers| (0+32768))
  7502  06FE  3D31               	addwfc	??_printf+1,w
  7503  06FF  0085               	movwf	5
  7504  0700  3F00               	moviw [0]fsr0
  7505  0701  00B2               	movwf	??_printf+2
  7506  0702  3F01               	moviw [1]fsr0
  7507  0703  00B3               	movwf	??_printf+3
  7508  0704  0833               	movf	??_printf+3,w
  7509  0705  023E               	subwf	printf@val+1,w
  7510  0706  1D03               	skipz
  7511  0707  2F0A               	goto	u1815
  7512  0708  0832               	movf	??_printf+2,w
  7513  0709  023D               	subwf	printf@val,w
  7514  070A                     u1815:	
  7515  070A  1C03               	btfss	3,0
  7516  070B  2F1A               	goto	l2209
  7517                           
  7518                           ;doprnt.c: 1318: break;
  7519  070C  3001               	movlw	1
  7520  070D  00B0               	movwf	??_printf
  7521  070E  0830               	movf	??_printf,w
  7522  070F  07C2               	addwf	printf@c,f
  7523  0710  2EF1               	goto	L11
  7524  0711                     l2207:	
  7525                           ;doprnt.c: 1336: }
  7526                           
  7527                           ;doprnt.c: 1320: break;
  7528                           
  7529  0711  083F               	movf	printf@flag,w
  7530  0712  3980               	andlw	128
  7531                           
  7532                           ; Switch size 1, requested type "space"
  7533                           ; Number of cases is 2, Range of values is 0 to 128
  7534                           ; switch strategies available:
  7535                           ; Name         Instructions Cycles
  7536                           ; simple_byte            7     4 (average)
  7537                           ; jumptable            260     6 (fixed)
  7538                           ;	Chosen strategy is simple_byte
  7539  0713  3A00               	xorlw	0	; case 0
  7540  0714  1903               	skipnz
  7541  0715  2ECD               	goto	l461
  7542  0716  3A80               	xorlw	128	; case 128
  7543  0717  1903               	skipnz
  7544  0718  2EEF               	goto	l466
  7545  0719  2F1A               	goto	l2209
  7546  071A                     l2209:	
  7547                           
  7548                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7549  071A  0840               	movf	printf@width,w
  7550  071B  0441               	iorwf	printf@width+1,w
  7551  071C  1903               	btfsc	3,2
  7552  071D  2F26               	goto	l470
  7553  071E  083F               	movf	printf@flag,w
  7554  071F  3903               	andlw	3
  7555  0720  1903               	btfsc	3,2
  7556  0721  2F26               	goto	l470
  7557                           
  7558                           ;doprnt.c: 1346: width--;
  7559  0722  30FF               	movlw	255
  7560  0723  07C0               	addwf	printf@width,f
  7561  0724  30FF               	movlw	255
  7562  0725  3DC1               	addwfc	printf@width+1,f
  7563  0726                     l470:	
  7564                           
  7565                           ;doprnt.c: 1381: if(width > c)
  7566  0726  0842               	movf	printf@c,w
  7567  0727  00B0               	movwf	??_printf
  7568  0728  01B1               	clrf	??_printf+1
  7569  0729  1BB0               	btfsc	??_printf,7
  7570  072A  03B1               	decf	??_printf+1,f
  7571  072B  0831               	movf	??_printf+1,w
  7572  072C  3A80               	xorlw	128
  7573  072D  00B2               	movwf	??_printf+2
  7574  072E  0841               	movf	printf@width+1,w
  7575  072F  3A80               	xorlw	128
  7576  0730  0232               	subwf	??_printf+2,w
  7577  0731  1D03               	skipz
  7578  0732  2F35               	goto	u1855
  7579  0733  0840               	movf	printf@width,w
  7580  0734  0230               	subwf	??_printf,w
  7581  0735                     u1855:	
  7582  0735  1803               	skipnc
  7583  0736  2F42               	goto	l2217
  7584                           
  7585                           ;doprnt.c: 1382: width -= c;
  7586  0737  0020               	movlb	0	; select bank0
  7587  0738  0842               	movf	printf@c,w
  7588  0739  00B0               	movwf	??_printf
  7589  073A  01B1               	clrf	??_printf+1
  7590  073B  1BB0               	btfsc	??_printf,7
  7591  073C  03B1               	decf	??_printf+1,f
  7592  073D  0830               	movf	??_printf,w
  7593  073E  02C0               	subwf	printf@width,f
  7594  073F  0831               	movf	??_printf+1,w
  7595  0740  3BC1               	subwfb	printf@width+1,f
  7596  0741  2F45               	goto	l2219
  7597  0742                     l2217:	
  7598                           
  7599                           ;doprnt.c: 1383: else
  7600                           ;doprnt.c: 1384: width = 0;
  7601  0742  0020               	movlb	0	; select bank0
  7602  0743  01C0               	clrf	printf@width
  7603  0744  01C1               	clrf	printf@width+1
  7604  0745                     l2219:	
  7605                           
  7606                           ;doprnt.c: 1387: if(flag & 0x04) {
  7607  0745  1D3F               	btfss	printf@flag,2
  7608  0746  2F5E               	goto	l2231
  7609                           
  7610                           ;doprnt.c: 1392: if(flag & 0x03)
  7611  0747  083F               	movf	printf@flag,w
  7612  0748  3903               	andlw	3
  7613  0749  1903               	btfsc	3,2
  7614  074A  2F4F               	goto	l2225
  7615                           
  7616                           ;doprnt.c: 1393: (putch('-') );
  7617  074B  302D               	movlw	45
  7618  074C  318A  2278  3185   	fcall	_putch
  7619  074F                     l2225:	
  7620                           
  7621                           ;doprnt.c: 1415: if(width)
  7622  074F  0020               	movlb	0	; select bank0
  7623  0750                     L12:	
  7624  0750  0840               	movf	printf@width,w
  7625  0751  0441               	iorwf	printf@width+1,w
  7626  0752  1903               	btfsc	3,2
  7627  0753  2F77               	goto	l2241
  7628                           
  7629                           ;doprnt.c: 1417: (putch('0') );
  7630                           
  7631                           ;doprnt.c: 1416: do
  7632  0754  3030               	movlw	48
  7633  0755  318A  2278  3185   	fcall	_putch
  7634                           
  7635                           ;doprnt.c: 1418: while(--width);
  7636  0758  30FF               	movlw	255
  7637  0759  0020               	movlb	0	; select bank0
  7638  075A  07C0               	addwf	printf@width,f
  7639  075B  30FF               	movlw	255
  7640  075C  3DC1               	addwfc	printf@width+1,f
  7641  075D  2F50               	goto	L12
  7642  075E                     l2231:	
  7643                           ;doprnt.c: 1420: } else
  7644                           
  7645                           
  7646                           ;doprnt.c: 1422: {
  7647                           ;doprnt.c: 1424: if(width
  7648                           ;doprnt.c: 1428: )
  7649  075E  0840               	movf	printf@width,w
  7650  075F  0441               	iorwf	printf@width+1,w
  7651  0760  1903               	btfsc	3,2
  7652  0761  2F6F               	goto	l2237
  7653  0762                     l2233:	
  7654                           ;doprnt.c: 1429: do
  7655                           
  7656                           
  7657                           ;doprnt.c: 1430: (putch(' ') );
  7658  0762  3020               	movlw	32
  7659  0763  318A  2278  3185   	fcall	_putch
  7660                           
  7661                           ;doprnt.c: 1431: while(--width);
  7662  0766  30FF               	movlw	255
  7663  0767  0020               	movlb	0	; select bank0
  7664  0768  07C0               	addwf	printf@width,f
  7665  0769  30FF               	movlw	255
  7666  076A  3DC1               	addwfc	printf@width+1,f
  7667  076B  0840               	movf	printf@width,w
  7668  076C  0441               	iorwf	printf@width+1,w
  7669  076D  1D03               	btfss	3,2
  7670  076E  2F62               	goto	l2233
  7671  076F                     l2237:	
  7672                           
  7673                           ;doprnt.c: 1438: if(flag & 0x03)
  7674  076F  083F               	movf	printf@flag,w
  7675  0770  3903               	andlw	3
  7676  0771  1903               	btfsc	3,2
  7677  0772  2F77               	goto	l2241
  7678                           
  7679                           ;doprnt.c: 1439: (putch('-') );
  7680  0773  302D               	movlw	45
  7681  0774  318A  2278  3185   	fcall	_putch
  7682  0777                     l2241:	
  7683                           
  7684                           ;doprnt.c: 1469: }
  7685                           ;doprnt.c: 1472: prec = c;
  7686  0777  0020               	movlb	0	; select bank0
  7687  0778  0842               	movf	printf@c,w
  7688  0779  00B0               	movwf	??_printf
  7689  077A  0830               	movf	??_printf,w
  7690  077B  00B7               	movwf	printf@prec
  7691                           
  7692                           ;doprnt.c: 1474: while(prec--) {
  7693  077C  2FDB               	goto	l2261
  7694  077D                     l2243:	
  7695                           ;doprnt.c: 1478: {
  7696                           ;doprnt.c: 1483: case 0x00:
  7697                           
  7698                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7699                           
  7700                           
  7701                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7702  077D  300A               	movlw	10
  7703  077E  00F8               	movwf	___lwmod@divisor
  7704  077F  3000               	movlw	0
  7705  0780  00F9               	movwf	___lwmod@divisor+1
  7706  0781  0837               	movf	printf@prec,w
  7707  0782  00B0               	movwf	??_printf
  7708  0783  01B1               	clrf	??_printf+1
  7709  0784  35B0               	lslf	??_printf,f
  7710  0785  0DB1               	rlf	??_printf+1,f
  7711  0786  3057               	movlw	low (_dpowers| (0+32768))
  7712  0787  0730               	addwf	??_printf,w
  7713  0788  0084               	movwf	4
  7714  0789  3094               	movlw	high (_dpowers| (0+32768))
  7715  078A  3D31               	addwfc	??_printf+1,w
  7716  078B  0085               	movwf	5
  7717  078C  3F00               	moviw [0]fsr0
  7718  078D  00F0               	movwf	___lwdiv@divisor
  7719  078E  3F01               	moviw [1]fsr0
  7720  078F  00F1               	movwf	___lwdiv@divisor+1
  7721  0790  083E               	movf	printf@val+1,w
  7722  0791  00F3               	movwf	___lwdiv@dividend+1
  7723  0792  083D               	movf	printf@val,w
  7724  0793  00F2               	movwf	___lwdiv@dividend
  7725  0794  318C  2429  3185   	fcall	___lwdiv
  7726  0797  0871               	movf	?___lwdiv+1,w
  7727  0798  00FB               	movwf	___lwmod@dividend+1
  7728  0799  0870               	movf	?___lwdiv,w
  7729  079A  00FA               	movwf	___lwmod@dividend
  7730  079B  318B  239C  3185   	fcall	___lwmod
  7731  079E  0878               	movf	?___lwmod,w
  7732  079F  3E30               	addlw	48
  7733  07A0  0020               	movlb	0	; select bank0
  7734  07A1  2FD4               	goto	L8
  7735  07A2                     l2245:	
  7736                           ;doprnt.c: 1497: case 0x80:
  7737                           
  7738                           ;doprnt.c: 1491: break;
  7739                           
  7740                           
  7741                           ;doprnt.c: 1499: {
  7742                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7743  07A2  0837               	movf	printf@prec,w
  7744  07A3  00B0               	movwf	??_printf
  7745  07A4  01B1               	clrf	??_printf+1
  7746  07A5  35B0               	lslf	??_printf,f
  7747  07A6  0DB1               	rlf	??_printf+1,f
  7748  07A7  3061               	movlw	low (_hexpowers| (0+32768))
  7749  07A8  0730               	addwf	??_printf,w
  7750  07A9  0084               	movwf	4
  7751  07AA  3094               	movlw	high (_hexpowers| (0+32768))
  7752  07AB  3D31               	addwfc	??_printf+1,w
  7753  07AC  0085               	movwf	5
  7754  07AD  3F00               	moviw [0]fsr0
  7755  07AE  00F0               	movwf	___lwdiv@divisor
  7756  07AF  3F01               	moviw [1]fsr0
  7757  07B0  00F1               	movwf	___lwdiv@divisor+1
  7758  07B1  083E               	movf	printf@val+1,w
  7759  07B2  00F3               	movwf	___lwdiv@dividend+1
  7760  07B3  083D               	movf	printf@val,w
  7761  07B4  00F2               	movwf	___lwdiv@dividend
  7762  07B5  318C  2429  3185   	fcall	___lwdiv
  7763  07B8  0870               	movf	?___lwdiv,w
  7764  07B9  390F               	andlw	15
  7765  07BA  0020               	movlb	0	; select bank0
  7766  07BB  00B2               	movwf	??_printf+2
  7767  07BC  0832               	movf	??_printf+2,w
  7768  07BD  00B6               	movwf	printf@idx
  7769                           
  7770                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7771  07BE  1ABF               	btfsc	printf@flag,5
  7772  07BF  2FC4               	goto	l2251
  7773  07C0  300D               	movlw	low (STR_58| (0+32768))
  7774  07C1  00B4               	movwf	_printf$647
  7775  07C2  3093               	movlw	high (STR_58| (0+32768))
  7776  07C3  2FC7               	goto	L9
  7777  07C4                     l2251:	
  7778  07C4  30FC               	movlw	low (STR_57| (0+32768))
  7779  07C5  00B4               	movwf	_printf$647
  7780  07C6  3092               	movlw	high (STR_57| (0+32768))
  7781  07C7                     L9:	
  7782  07C7  00B5               	movwf	_printf$647+1
  7783  07C8  0835               	movf	_printf$647+1,w
  7784  07C9  00B1               	movwf	??_printf+1
  7785  07CA  0834               	movf	_printf$647,w
  7786  07CB  00B0               	movwf	??_printf
  7787  07CC  0836               	movf	printf@idx,w
  7788  07CD  0730               	addwf	??_printf,w
  7789  07CE  0084               	movwf	4
  7790  07CF  0831               	movf	??_printf+1,w
  7791  07D0  1803               	skipnc
  7792  07D1  0A31               	incf	??_printf+1,w
  7793  07D2  0085               	movwf	5
  7794  07D3  0800               	movf	0,w	;code access
  7795  07D4                     L8:	
  7796  07D4  00B2               	movwf	??_printf+2
  7797  07D5  0832               	movf	??_printf+2,w
  7798  07D6  00C2               	movwf	printf@c
  7799  07D7                     l2259:	
  7800                           ;doprnt.c: 1523: }
  7801                           
  7802                           ;doprnt.c: 1508: }
  7803                           ;doprnt.c: 1510: break;
  7804                           
  7805                           
  7806                           ;doprnt.c: 1524: (putch(c) );
  7807  07D7  0842               	movf	printf@c,w
  7808  07D8  318A  2278  3185   	fcall	_putch
  7809  07DB                     l2261:	
  7810  07DB  30FF               	movlw	255
  7811  07DC  0020               	movlb	0	; select bank0
  7812  07DD  00B0               	movwf	??_printf
  7813  07DE  0830               	movf	??_printf,w
  7814  07DF  07B7               	addwf	printf@prec,f
  7815  07E0  0A37               	incf	printf@prec,w
  7816  07E1  1903               	btfsc	3,2
  7817  07E2  2DA8               	goto	l2263
  7818  07E3  083F               	movf	printf@flag,w
  7819  07E4  3980               	andlw	128
  7820                           
  7821                           ; Switch size 1, requested type "space"
  7822                           ; Number of cases is 2, Range of values is 0 to 128
  7823                           ; switch strategies available:
  7824                           ; Name         Instructions Cycles
  7825                           ; simple_byte            7     4 (average)
  7826                           ; jumptable            260     6 (fixed)
  7827                           ;	Chosen strategy is simple_byte
  7828  07E5  3A00               	xorlw	0	; case 0
  7829  07E6  1903               	skipnz
  7830  07E7  2F7D               	goto	l2243
  7831  07E8  3A80               	xorlw	128	; case 128
  7832  07E9  1903               	skipnz
  7833  07EA  2FA2               	goto	l2245
  7834  07EB  2FD7               	goto	l2259
  7835  07EC  2FD7               	goto	l2259
  7836  07ED                     l495:	
  7837                           ;doprnt.c: 1540: return 0;
  7838                           ;	Return value of _printf is never used
  7839                           
  7840                           ;doprnt.c: 1525: }
  7841                           ;doprnt.c: 1533: }
  7842                           ;doprnt.c: 1535: alldone:
  7843                           
  7844  07ED  0008               	return
  7845  07EE                     __end_of_printf:	
  7846                           
  7847                           	psect	text17
  7848  0A78                     __ptext17:	
  7849 ;; *************** function _putch *****************
  7850 ;; Defined at:
  7851 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  txData          1    wreg     unsigned char 
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  txData          1    1[COMMON] unsigned char 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  1    wreg      void 
  7858 ;; Registers used:
  7859 ;;		wreg, status,2, status,0, pclath, cstack
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;Total ram usage:        1 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    1
  7872 ;; This function calls:
  7873 ;;		_EUSART_Write
  7874 ;; This function is called by:
  7875 ;;		_main
  7876 ;;		_printf
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _putch
  7882  0A78                     _putch:	
  7883                           
  7884                           ;incstack = 0
  7885                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7886                           ;putch@txData stored from wreg
  7887  0A78  00F1               	movwf	putch@txData
  7888                           
  7889                           ;eusart.c: 109: EUSART_Write(txData);
  7890  0A79  0871               	movf	putch@txData,w
  7891  0A7A  318A  228A         	fcall	_EUSART_Write
  7892  0A7C  0008               	return
  7893  0A7D                     __end_of_putch:	
  7894                           
  7895                           	psect	text18
  7896  0A8A                     __ptext18:	
  7897 ;; *************** function _EUSART_Write *****************
  7898 ;; Defined at:
  7899 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;  txData          1    wreg     unsigned char 
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;  txData          1    0[COMMON] unsigned char 
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;Total ram usage:        1 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; This function calls:
  7920 ;;		Nothing
  7921 ;; This function is called by:
  7922 ;;		_putch
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function _EUSART_Write
  7928  0A8A                     _EUSART_Write:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _EUSART_Write: [wreg]
  7932                           ;EUSART_Write@txData stored from wreg
  7933  0A8A  00F0               	movwf	EUSART_Write@txData
  7934  0A8B                     l63:	
  7935                           ;eusart.c: 96: {
  7936                           
  7937                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7938                           
  7939  0A8B  0020               	movlb	0	; select bank0
  7940  0A8C  1E11               	btfss	17,4	;volatile
  7941  0A8D  2A8B               	goto	l63
  7942                           
  7943                           ;eusart.c: 97: }
  7944                           ;eusart.c: 99: TXREG = txData;
  7945  0A8E  0870               	movf	EUSART_Write@txData,w
  7946  0A8F  0023               	movlb	3	; select bank3
  7947  0A90  009A               	movwf	26	;volatile
  7948  0A91  0008               	return
  7949  0A92                     __end_of_EUSART_Write:	
  7950                           
  7951                           	psect	text19
  7952  0B9C                     __ptext19:	
  7953 ;; *************** function ___lwmod *****************
  7954 ;; Defined at:
  7955 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  divisor         2    8[COMMON] unsigned int 
  7958 ;;  dividend        2   10[COMMON] unsigned int 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  counter         1   13[COMMON] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  2    8[COMMON] unsigned int 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        6 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_receive_handler
  7980 ;;		_printf
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function ___lwmod
  7986  0B9C                     ___lwmod:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7990  0B9C  0878               	movf	___lwmod@divisor,w
  7991  0B9D  0479               	iorwf	___lwmod@divisor+1,w
  7992  0B9E  1903               	btfsc	3,2
  7993  0B9F  2BC3               	goto	l2069
  7994  0BA0  01FD               	clrf	___lwmod@counter
  7995  0BA1  0AFD               	incf	___lwmod@counter,f
  7996  0BA2                     l2059:	
  7997  0BA2  1BF9               	btfsc	___lwmod@divisor+1,7
  7998  0BA3  2BAE               	goto	l2061
  7999  0BA4  3001               	movlw	1
  8000  0BA5                     u1585:	
  8001  0BA5  35F8               	lslf	___lwmod@divisor,f
  8002  0BA6  0DF9               	rlf	___lwmod@divisor+1,f
  8003  0BA7  0B89               	decfsz	9,f
  8004  0BA8  2BA5               	goto	u1585
  8005  0BA9  3001               	movlw	1
  8006  0BAA  00FC               	movwf	??___lwmod
  8007  0BAB  087C               	movf	??___lwmod,w
  8008  0BAC  07FD               	addwf	___lwmod@counter,f
  8009  0BAD  2BA2               	goto	l2059
  8010  0BAE                     l2061:	
  8011  0BAE  0879               	movf	___lwmod@divisor+1,w
  8012  0BAF  027B               	subwf	___lwmod@dividend+1,w
  8013  0BB0  1D03               	skipz
  8014  0BB1  2BB4               	goto	u1605
  8015  0BB2  0878               	movf	___lwmod@divisor,w
  8016  0BB3  027A               	subwf	___lwmod@dividend,w
  8017  0BB4                     u1605:	
  8018  0BB4  1C03               	skipc
  8019  0BB5  2BBA               	goto	l2065
  8020  0BB6  0878               	movf	___lwmod@divisor,w
  8021  0BB7  02FA               	subwf	___lwmod@dividend,f
  8022  0BB8  0879               	movf	___lwmod@divisor+1,w
  8023  0BB9  3BFB               	subwfb	___lwmod@dividend+1,f
  8024  0BBA                     l2065:	
  8025  0BBA  3001               	movlw	1
  8026  0BBB                     u1615:	
  8027  0BBB  36F9               	lsrf	___lwmod@divisor+1,f
  8028  0BBC  0CF8               	rrf	___lwmod@divisor,f
  8029  0BBD  0B89               	decfsz	9,f
  8030  0BBE  2BBB               	goto	u1615
  8031  0BBF  3001               	movlw	1
  8032  0BC0  02FD               	subwf	___lwmod@counter,f
  8033  0BC1  1D03               	btfss	3,2
  8034  0BC2  2BAE               	goto	l2061
  8035  0BC3                     l2069:	
  8036  0BC3  087B               	movf	___lwmod@dividend+1,w
  8037  0BC4  00F9               	movwf	?___lwmod+1
  8038  0BC5  087A               	movf	___lwmod@dividend,w
  8039  0BC6  00F8               	movwf	?___lwmod
  8040  0BC7  0008               	return
  8041  0BC8                     __end_of___lwmod:	
  8042                           
  8043                           	psect	text20
  8044  0C29                     __ptext20:	
  8045 ;; *************** function ___lwdiv *****************
  8046 ;; Defined at:
  8047 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  divisor         2    0[COMMON] unsigned int 
  8050 ;;  dividend        2    2[COMMON] unsigned int 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  quotient        2    5[COMMON] unsigned int 
  8053 ;;  counter         1    7[COMMON] unsigned char 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  2    0[COMMON] unsigned int 
  8056 ;; Registers used:
  8057 ;;		wreg, status,2, status,0
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;Total ram usage:        8 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_receive_handler
  8073 ;;		_printf
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           
  8078                           ;psect for function ___lwdiv
  8079  0C29                     ___lwdiv:	
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8083  0C29  01F5               	clrf	___lwdiv@quotient
  8084  0C2A  01F6               	clrf	___lwdiv@quotient+1
  8085  0C2B  0870               	movf	___lwdiv@divisor,w
  8086  0C2C  0471               	iorwf	___lwdiv@divisor+1,w
  8087  0C2D  1903               	btfsc	3,2
  8088  0C2E  2C58               	goto	l2047
  8089  0C2F  01F7               	clrf	___lwdiv@counter
  8090  0C30  0AF7               	incf	___lwdiv@counter,f
  8091  0C31                     l2035:	
  8092  0C31  1BF1               	btfsc	___lwdiv@divisor+1,7
  8093  0C32  2C3D               	goto	l2037
  8094  0C33  3001               	movlw	1
  8095  0C34                     u1515:	
  8096  0C34  35F0               	lslf	___lwdiv@divisor,f
  8097  0C35  0DF1               	rlf	___lwdiv@divisor+1,f
  8098  0C36  0B89               	decfsz	9,f
  8099  0C37  2C34               	goto	u1515
  8100  0C38  3001               	movlw	1
  8101  0C39  00F4               	movwf	??___lwdiv
  8102  0C3A  0874               	movf	??___lwdiv,w
  8103  0C3B  07F7               	addwf	___lwdiv@counter,f
  8104  0C3C  2C31               	goto	l2035
  8105  0C3D                     l2037:	
  8106  0C3D  3001               	movlw	1
  8107  0C3E                     u1535:	
  8108  0C3E  35F5               	lslf	___lwdiv@quotient,f
  8109  0C3F  0DF6               	rlf	___lwdiv@quotient+1,f
  8110  0C40  0B89               	decfsz	9,f
  8111  0C41  2C3E               	goto	u1535
  8112  0C42  0871               	movf	___lwdiv@divisor+1,w
  8113  0C43  0273               	subwf	___lwdiv@dividend+1,w
  8114  0C44  1D03               	skipz
  8115  0C45  2C48               	goto	u1545
  8116  0C46  0870               	movf	___lwdiv@divisor,w
  8117  0C47  0272               	subwf	___lwdiv@dividend,w
  8118  0C48                     u1545:	
  8119  0C48  1C03               	skipc
  8120  0C49  2C4F               	goto	l2043
  8121  0C4A  0870               	movf	___lwdiv@divisor,w
  8122  0C4B  02F2               	subwf	___lwdiv@dividend,f
  8123  0C4C  0871               	movf	___lwdiv@divisor+1,w
  8124  0C4D  3BF3               	subwfb	___lwdiv@dividend+1,f
  8125  0C4E  1475               	bsf	___lwdiv@quotient,0
  8126  0C4F                     l2043:	
  8127  0C4F  3001               	movlw	1
  8128  0C50                     u1555:	
  8129  0C50  36F1               	lsrf	___lwdiv@divisor+1,f
  8130  0C51  0CF0               	rrf	___lwdiv@divisor,f
  8131  0C52  0B89               	decfsz	9,f
  8132  0C53  2C50               	goto	u1555
  8133  0C54  3001               	movlw	1
  8134  0C55  02F7               	subwf	___lwdiv@counter,f
  8135  0C56  1D03               	btfss	3,2
  8136  0C57  2C3D               	goto	l2037
  8137  0C58                     l2047:	
  8138  0C58  0876               	movf	___lwdiv@quotient+1,w
  8139  0C59  00F1               	movwf	?___lwdiv+1
  8140  0C5A  0875               	movf	___lwdiv@quotient,w
  8141  0C5B  00F0               	movwf	?___lwdiv
  8142  0C5C  0008               	return
  8143  0C5D                     __end_of___lwdiv:	
  8144                           
  8145                           	psect	text21
  8146  0B76                     __ptext21:	
  8147 ;; *************** function _abort_pending_transmissions *****************
  8148 ;; Defined at:
  8149 ;;		line 110 in file "mcp2515.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  1    wreg      unsigned char 
  8156 ;; Registers used:
  8157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:        3 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    3
  8170 ;; This function calls:
  8171 ;;		_SPI_exchange
  8172 ;; This function is called by:
  8173 ;;		_can_set_mask
  8174 ;;		_can_abort
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _abort_pending_transmissions
  8180  0B76                     _abort_pending_transmissions:	
  8181                           
  8182                           ;mcp2515.c: 111: buf[0] = 0b00000101u;
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8186  0B76  3005               	movlw	5
  8187  0B77  0020               	movlb	0	; select bank0
  8188  0B78  00A0               	movwf	??_abort_pending_transmissions
  8189  0B79  0820               	movf	??_abort_pending_transmissions,w
  8190  0B7A  0021               	movlb	1	; select bank1
  8191  0B7B  00AC               	movwf	_buf^(0+128)
  8192                           
  8193                           ;mcp2515.c: 112: buf[1] = 0x0fu;
  8194  0B7C  300F               	movlw	15
  8195  0B7D  0020               	movlb	0	; select bank0
  8196  0B7E  00A0               	movwf	??_abort_pending_transmissions
  8197  0B7F  0820               	movf	??_abort_pending_transmissions,w
  8198  0B80  0021               	movlb	1	; select bank1
  8199  0B81  00AD               	movwf	(_buf^(0+128)+1)
  8200                           
  8201                           ;mcp2515.c: 113: buf[2] = 0b00010000u;
  8202  0B82  3010               	movlw	16
  8203  0B83  0020               	movlb	0	; select bank0
  8204  0B84  00A0               	movwf	??_abort_pending_transmissions
  8205  0B85  0820               	movf	??_abort_pending_transmissions,w
  8206  0B86  0021               	movlb	1	; select bank1
  8207  0B87  00AE               	movwf	(_buf^(0+128)+2)
  8208                           
  8209                           ;mcp2515.c: 114: buf[3] = 0b00010000u;
  8210  0B88  3010               	movlw	16
  8211  0B89  0020               	movlb	0	; select bank0
  8212  0B8A  00A0               	movwf	??_abort_pending_transmissions
  8213  0B8B  0820               	movf	??_abort_pending_transmissions,w
  8214  0B8C  0021               	movlb	1	; select bank1
  8215  0B8D  00AF               	movwf	(_buf^(0+128)+3)
  8216                           
  8217                           ;mcp2515.c: 115: uint8_t bytes_written = SPI_exchange(buf, 4);
  8218  0B8E  3004               	movlw	4
  8219  0B8F  0020               	movlb	0	; select bank0
  8220  0B90  00A0               	movwf	??_abort_pending_transmissions
  8221  0B91  0820               	movf	??_abort_pending_transmissions,w
  8222  0B92  00F8               	movwf	SPI_exchange@len
  8223  0B93  30AC               	movlw	(low (_buf| 0))& (0+255)
  8224  0B94  318A  22F2         	fcall	_SPI_exchange
  8225  0B96  0020               	movlb	0	; select bank0
  8226  0B97  00A1               	movwf	??_abort_pending_transmissions+1
  8227  0B98  0821               	movf	??_abort_pending_transmissions+1,w
  8228  0B99  00A2               	movwf	abort_pending_transmissions@bytes_written
  8229                           
  8230                           ;mcp2515.c: 116: return bytes_written;
  8231  0B9A  0822               	movf	abort_pending_transmissions@bytes_written,w
  8232  0B9B  0008               	return
  8233  0B9C                     __end_of_abort_pending_transmissions:	
  8234                           
  8235                           	psect	text22
  8236  0AF2                     __ptext22:	
  8237 ;; *************** function _SPI_exchange *****************
  8238 ;; Defined at:
  8239 ;;		line 4 in file "spi.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  buf             1    wreg     PTR unsigned char 
  8242 ;;		 -> receive@rx_buf(15), buf(16), 
  8243 ;;  len             1    8[COMMON] unsigned char 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  buf             1   13[COMMON] PTR unsigned char 
  8246 ;;		 -> receive@rx_buf(15), buf(16), 
  8247 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      unsigned char 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        6 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    2
  8264 ;; This function calls:
  8265 ;;		_SPI_Exchange8bitBuffer
  8266 ;; This function is called by:
  8267 ;;		_can_init
  8268 ;;		_can_ope_mode
  8269 ;;		_abort_pending_transmissions
  8270 ;;		_can_set_mask
  8271 ;;		_txf_clear
  8272 ;;		_receive
  8273 ;;		_can_send
  8274 ;;		_can_status_check
  8275 ;;		_can_baudrate
  8276 ;;		_read_register
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _SPI_exchange
  8282  0AF2                     _SPI_exchange:	
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8286                           ;SPI_exchange@buf stored from wreg
  8287  0AF2  00FD               	movwf	SPI_exchange@buf
  8288                           
  8289                           ;spi.c: 5: LATAbits.LATA2 = 0;
  8290  0AF3  0022               	movlb	2	; select bank2
  8291  0AF4  110C               	bcf	12,2	;volatile
  8292                           
  8293                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  8294  0AF5  0878               	movf	SPI_exchange@len,w
  8295  0AF6  00F9               	movwf	??_SPI_exchange
  8296  0AF7  0879               	movf	??_SPI_exchange,w
  8297  0AF8  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8298  0AF9  087D               	movf	SPI_exchange@buf,w
  8299  0AFA  00FA               	movwf	??_SPI_exchange+1
  8300  0AFB  087A               	movf	??_SPI_exchange+1,w
  8301  0AFC  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8302  0AFD  087D               	movf	SPI_exchange@buf,w
  8303  0AFE  318C  245D         	fcall	_SPI_Exchange8bitBuffer
  8304  0B00  00FB               	movwf	??_SPI_exchange+2
  8305  0B01  087B               	movf	??_SPI_exchange+2,w
  8306  0B02  00FC               	movwf	SPI_exchange@bytes_written
  8307                           
  8308                           ;spi.c: 7: LATAbits.LATA2 = 1;
  8309  0B03  0022               	movlb	2	; select bank2
  8310  0B04  150C               	bsf	12,2	;volatile
  8311                           
  8312                           ;spi.c: 8: return bytes_written;
  8313  0B05  087C               	movf	SPI_exchange@bytes_written,w
  8314  0B06  0008               	return
  8315  0B07                     __end_of_SPI_exchange:	
  8316                           
  8317                           	psect	text23
  8318  0C5D                     __ptext23:	
  8319 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8320 ;; Defined at:
  8321 ;;		line 91 in file "mcc_generated_files/spi.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  dataIn          1    wreg     PTR unsigned char 
  8324 ;;		 -> receive@rx_buf(15), buf(16), 
  8325 ;;  bufLen          1    1[COMMON] unsigned char 
  8326 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8327 ;;		 -> receive@rx_buf(15), buf(16), 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8330 ;;		 -> receive@rx_buf(15), buf(16), 
  8331 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      unsigned char 
  8334 ;; Registers used:
  8335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        7 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    1
  8348 ;; This function calls:
  8349 ;;		_SPI_Exchange8bit
  8350 ;; This function is called by:
  8351 ;;		_SPI_exchange
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _SPI_Exchange8bitBuffer
  8357  0C5D                     _SPI_Exchange8bitBuffer:	
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8361                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8362  0C5D  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8363                           
  8364                           ;spi.c: 93: uint8_t bytesWritten = 0;
  8365  0C5E  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8366                           
  8367                           ;spi.c: 95: if(bufLen != 0)
  8368  0C5F  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8369  0C60  1903               	btfsc	3,2
  8370  0C61  2CA9               	goto	l1995
  8371                           
  8372                           ;spi.c: 96: {
  8373                           ;spi.c: 97: if(dataIn != (0))
  8374  0C62  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8375  0C63  1D03               	btfss	3,2
  8376  0C64  2C8B               	goto	l1983
  8377  0C65  2C90               	goto	l1985
  8378  0C66                     l1975:	
  8379                           ;spi.c: 98: {
  8380                           ;spi.c: 99: while(bytesWritten < bufLen)
  8381                           
  8382                           
  8383                           ;spi.c: 100: {
  8384                           ;spi.c: 101: if(dataOut == (0))
  8385  0C66  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8386  0C67  1D03               	btfss	3,2
  8387  0C68  2C74               	goto	l1979
  8388                           
  8389                           ;spi.c: 102: {
  8390                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  8391  0C69  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8392  0C6A  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8393  0C6B  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8394  0C6C  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8395  0C6D  0086               	movwf	6
  8396  0C6E  0187               	clrf	7
  8397  0C6F  0801               	movf	1,w
  8398  0C70  318A  2292  318C   	fcall	_SPI_Exchange8bit
  8399                           
  8400                           ;spi.c: 104: }
  8401  0C73  2C87               	goto	l1981
  8402  0C74                     l1979:	
  8403                           
  8404                           ;spi.c: 105: else
  8405                           ;spi.c: 106: {
  8406                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8407  0C74  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8408  0C75  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8409  0C76  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8410  0C77  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8411  0C78  0086               	movwf	6
  8412  0C79  0187               	clrf	7
  8413  0C7A  0801               	movf	1,w
  8414  0C7B  318A  2292  318C   	fcall	_SPI_Exchange8bit
  8415  0C7E  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8416  0C7F  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8417  0C80  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8418  0C81  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  8419  0C82  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  8420  0C83  0086               	movwf	6
  8421  0C84  0187               	clrf	7
  8422  0C85  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8423  0C86  0081               	movwf	1
  8424  0C87                     l1981:	
  8425                           
  8426                           ;spi.c: 108: }
  8427                           ;spi.c: 110: bytesWritten++;
  8428  0C87  3001               	movlw	1
  8429  0C88  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8430  0C89  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8431  0C8A  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8432  0C8B                     l1983:	
  8433  0C8B  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8434  0C8C  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8435  0C8D  1803               	btfsc	3,0
  8436  0C8E  2CA9               	goto	l1995
  8437  0C8F  2C66               	goto	l1975
  8438  0C90                     l1985:	
  8439                           ;spi.c: 111: }
  8440                           ;spi.c: 112: }
  8441                           
  8442                           
  8443                           ;spi.c: 113: else
  8444                           ;spi.c: 114: {
  8445                           ;spi.c: 115: if(dataOut != (0))
  8446  0C90  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8447  0C91  1D03               	btfss	3,2
  8448  0C92  2CA5               	goto	l1993
  8449  0C93  2CA9               	goto	l1995
  8450  0C94                     l1989:	
  8451                           ;spi.c: 116: {
  8452                           ;spi.c: 117: while(bytesWritten < bufLen )
  8453                           
  8454                           
  8455                           ;spi.c: 118: {
  8456                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8457  0C94  3000               	movlw	0
  8458  0C95  318A  2292  318C   	fcall	_SPI_Exchange8bit
  8459  0C98  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8460  0C99  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8461  0C9A  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8462  0C9B  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8463  0C9C  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8464  0C9D  0086               	movwf	6
  8465  0C9E  0187               	clrf	7
  8466  0C9F  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8467  0CA0  0081               	movwf	1
  8468                           
  8469                           ;spi.c: 121: bytesWritten++;
  8470  0CA1  3001               	movlw	1
  8471  0CA2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8472  0CA3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8473  0CA4  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8474  0CA5                     l1993:	
  8475  0CA5  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8476  0CA6  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8477  0CA7  1C03               	skipc
  8478  0CA8  2C94               	goto	l1989
  8479  0CA9                     l1995:	
  8480                           
  8481                           ;spi.c: 122: }
  8482                           ;spi.c: 123: }
  8483                           ;spi.c: 124: }
  8484                           ;spi.c: 125: }
  8485                           ;spi.c: 127: return bytesWritten;
  8486  0CA9  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8487  0CAA  0008               	return
  8488  0CAB                     __end_of_SPI_Exchange8bitBuffer:	
  8489                           
  8490                           	psect	text24
  8491  0A92                     __ptext24:	
  8492 ;; *************** function _SPI_Exchange8bit *****************
  8493 ;; Defined at:
  8494 ;;		line 77 in file "mcc_generated_files/spi.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  data            1    wreg     unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  data            1    0[COMMON] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      unsigned char 
  8501 ;; Registers used:
  8502 ;;		wreg
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;Total ram usage:        1 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_SPI_Exchange8bitBuffer
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           
  8522                           ;psect for function _SPI_Exchange8bit
  8523  0A92                     _SPI_Exchange8bit:	
  8524                           
  8525                           ;incstack = 0
  8526                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8527                           ;SPI_Exchange8bit@data stored from wreg
  8528  0A92  00F0               	movwf	SPI_Exchange8bit@data
  8529                           
  8530                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  8531  0A93  0024               	movlb	4	; select bank4
  8532  0A94  1395               	bcf	21,7	;volatile
  8533                           
  8534                           ;spi.c: 82: SSP1BUF = data;
  8535  0A95  0870               	movf	SPI_Exchange8bit@data,w
  8536  0A96  0091               	movwf	17	;volatile
  8537  0A97                     l118:	
  8538                           ;spi.c: 85: {
  8539                           
  8540                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  8541                           
  8542  0A97  1C14               	btfss	20,0	;volatile
  8543  0A98  2A97               	goto	l118
  8544                           
  8545                           ;spi.c: 86: }
  8546                           ;spi.c: 88: return (SSP1BUF);
  8547  0A99  0811               	movf	17,w	;volatile
  8548  0A9A  0008               	return
  8549  0A9B                     __end_of_SPI_Exchange8bit:	
  8550                           
  8551                           	psect	text25
  8552  0006                     __ptext25:	
  8553 ;; *************** function _atoi *****************
  8554 ;; Defined at:
  8555 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;  s               1    wreg     PTR const unsigned char 
  8558 ;;		 -> main@buf(16), 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;  s               1   13[COMMON] PTR const unsigned char 
  8561 ;;		 -> main@buf(16), 
  8562 ;;  a               2   11[COMMON] int 
  8563 ;;  sign            1   10[COMMON] unsigned char 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  2    6[COMMON] int 
  8566 ;; Registers used:
  8567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;Total ram usage:        8 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    1
  8580 ;; This function calls:
  8581 ;;		___wmul
  8582 ;;		_isdigit
  8583 ;; This function is called by:
  8584 ;;		_main
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           
  8589                           ;psect for function _atoi
  8590  0006                     _atoi:	
  8591                           
  8592                           ;incstack = 0
  8593                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8594                           ;atoi@s stored from wreg
  8595  0006  00FD               	movwf	atoi@s
  8596  0007                     l2495:	
  8597  0007  087D               	movf	atoi@s,w
  8598  0008  0086               	movwf	6
  8599  0009  0187               	clrf	7
  8600  000A  3020               	movlw	32
  8601  000B  0601               	xorwf	1,w
  8602  000C  1D03               	btfss	3,2
  8603  000D  2813               	goto	l2497
  8604  000E                     l2493:	
  8605  000E  3001               	movlw	1
  8606  000F  00F8               	movwf	??_atoi
  8607  0010  0878               	movf	??_atoi,w
  8608  0011  07FD               	addwf	atoi@s,f
  8609  0012  2807               	goto	l2495
  8610  0013                     l2497:	
  8611  0013  087D               	movf	atoi@s,w
  8612  0014  0086               	movwf	6
  8613  0015  0187               	clrf	7
  8614  0016  3009               	movlw	9
  8615  0017  0601               	xorwf	1,w
  8616  0018  1903               	btfsc	3,2
  8617  0019  280E               	goto	l2493
  8618  001A  01FB               	clrf	atoi@a
  8619  001B  01FC               	clrf	atoi@a+1
  8620  001C  01FA               	clrf	atoi@sign
  8621  001D  087D               	movf	atoi@s,w
  8622  001E  0086               	movwf	6
  8623  001F  0187               	clrf	7
  8624  0020  302D               	movlw	45
  8625  0021  0601               	xorwf	1,w
  8626  0022  1D03               	btfss	3,2
  8627  0023  2829               	goto	l2505
  8628  0024  3001               	movlw	1
  8629  0025  00F8               	movwf	??_atoi
  8630  0026  0878               	movf	??_atoi,w
  8631  0027  07FA               	addwf	atoi@sign,f
  8632  0028  2830               	goto	l2511
  8633  0029                     l2505:	
  8634  0029  087D               	movf	atoi@s,w
  8635  002A  0086               	movwf	6
  8636  002B  0187               	clrf	7
  8637  002C  302B               	movlw	43
  8638  002D  0601               	xorwf	1,w
  8639  002E  1D03               	btfss	3,2
  8640  002F  2834               	goto	l2513
  8641  0030                     l2511:	
  8642  0030  3001               	movlw	1
  8643  0031  00F8               	movwf	??_atoi
  8644  0032  0878               	movf	??_atoi,w
  8645  0033  07FD               	addwf	atoi@s,f
  8646  0034                     l2513:	
  8647  0034  087D               	movf	atoi@s,w
  8648  0035  0086               	movwf	6
  8649  0036  0187               	clrf	7
  8650  0037  0801               	movf	1,w
  8651  0038  318A  22C6  3180   	fcall	_isdigit
  8652  003B  1C03               	btfss	3,0
  8653  003C  2859               	goto	l2515
  8654  003D  087C               	movf	atoi@a+1,w
  8655  003E  00F1               	movwf	___wmul@multiplier+1
  8656  003F  087B               	movf	atoi@a,w
  8657  0040  00F0               	movwf	___wmul@multiplier
  8658  0041  300A               	movlw	10
  8659  0042  00F2               	movwf	___wmul@multiplicand
  8660  0043  3000               	movlw	0
  8661  0044  00F3               	movwf	___wmul@multiplicand+1
  8662  0045  318B  2337  3180   	fcall	___wmul
  8663  0048  087D               	movf	atoi@s,w
  8664  0049  0086               	movwf	6
  8665  004A  0187               	clrf	7
  8666  004B  0801               	movf	1,w
  8667  004C  0770               	addwf	?___wmul,w
  8668  004D  00F8               	movwf	??_atoi
  8669  004E  0871               	movf	?___wmul+1,w
  8670  004F  1803               	skipnc
  8671  0050  0A71               	incf	?___wmul+1,w
  8672  0051  00F9               	movwf	??_atoi+1
  8673  0052  0878               	movf	??_atoi,w
  8674  0053  3ED0               	addlw	208
  8675  0054  00FB               	movwf	atoi@a
  8676  0055  30FF               	movlw	255
  8677  0056  3D79               	addwfc	??_atoi+1,w
  8678  0057  00FC               	movwf	atoi@a+1
  8679  0058  2830               	goto	l2511
  8680  0059                     l2515:	
  8681  0059  087A               	movf	atoi@sign,w
  8682  005A  1903               	btfsc	3,2
  8683  005B  2868               	goto	l2521
  8684  005C  097B               	comf	atoi@a,w
  8685  005D  00F8               	movwf	??_atoi
  8686  005E  097C               	comf	atoi@a+1,w
  8687  005F  00F9               	movwf	??_atoi+1
  8688  0060  0AF8               	incf	??_atoi,f
  8689  0061  1903               	skipnz
  8690  0062  0AF9               	incf	??_atoi+1,f
  8691  0063  0878               	movf	??_atoi,w
  8692  0064  00F6               	movwf	?_atoi
  8693  0065  0879               	movf	??_atoi+1,w
  8694  0066  00F7               	movwf	?_atoi+1
  8695  0067  0008               	return
  8696  0068                     l2521:	
  8697  0068  087C               	movf	atoi@a+1,w
  8698  0069  00F7               	movwf	?_atoi+1
  8699  006A  087B               	movf	atoi@a,w
  8700  006B  00F6               	movwf	?_atoi
  8701  006C  0008               	return
  8702  006D                     __end_of_atoi:	
  8703                           
  8704                           	psect	text26
  8705  0AC6                     __ptext26:	
  8706 ;; *************** function _isdigit *****************
  8707 ;; Defined at:
  8708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  c               1    wreg     unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  c               1    1[COMMON] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        2 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_printf
  8732 ;;		_atoi
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function _isdigit
  8738  0AC6                     _isdigit:	
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8742                           ;isdigit@c stored from wreg
  8743  0AC6  00F1               	movwf	isdigit@c
  8744  0AC7  01F0               	clrf	_isdigit$838
  8745  0AC8  303A               	movlw	58
  8746  0AC9  0271               	subwf	isdigit@c,w
  8747  0ACA  1803               	skipnc
  8748  0ACB  2AD2               	goto	l2007
  8749  0ACC  3030               	movlw	48
  8750  0ACD  0271               	subwf	isdigit@c,w
  8751  0ACE  1C03               	skipc
  8752  0ACF  2AD2               	goto	l2007
  8753  0AD0  01F0               	clrf	_isdigit$838
  8754  0AD1  0AF0               	incf	_isdigit$838,f
  8755  0AD2                     l2007:	
  8756  0AD2  0C70               	rrf	_isdigit$838,w
  8757  0AD3  0008               	return
  8758  0AD4                     __end_of_isdigit:	
  8759                           
  8760                           	psect	text27
  8761  0B37                     __ptext27:	
  8762 ;; *************** function ___wmul *****************
  8763 ;; Defined at:
  8764 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;  multiplier      2    0[COMMON] unsigned int 
  8767 ;;  multiplicand    2    2[COMMON] unsigned int 
  8768 ;; Auto vars:     Size  Location     Type
  8769 ;;  product         2    4[COMMON] unsigned int 
  8770 ;; Return value:  Size  Location     Type
  8771 ;;                  2    0[COMMON] unsigned int 
  8772 ;; Registers used:
  8773 ;;		wreg, status,2, status,0
  8774 ;; Tracked objects:
  8775 ;;		On entry : 0/0
  8776 ;;		On exit  : 0/0
  8777 ;;		Unchanged: 0/0
  8778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;Total ram usage:        6 bytes
  8784 ;; Hardware stack levels used:    1
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_printf
  8789 ;;		_atoi
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function ___wmul
  8795  0B37                     ___wmul:	
  8796                           
  8797                           ;incstack = 0
  8798                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8799  0B37  01F4               	clrf	___wmul@product
  8800  0B38  01F5               	clrf	___wmul@product+1
  8801  0B39                     l2013:	
  8802  0B39  1C70               	btfss	___wmul@multiplier,0
  8803  0B3A  2B3F               	goto	l579
  8804  0B3B  0872               	movf	___wmul@multiplicand,w
  8805  0B3C  07F4               	addwf	___wmul@product,f
  8806  0B3D  0873               	movf	___wmul@multiplicand+1,w
  8807  0B3E  3DF5               	addwfc	___wmul@product+1,f
  8808  0B3F                     l579:	
  8809  0B3F  3001               	movlw	1
  8810  0B40                     u1475:	
  8811  0B40  35F2               	lslf	___wmul@multiplicand,f
  8812  0B41  0DF3               	rlf	___wmul@multiplicand+1,f
  8813  0B42  0B89               	decfsz	9,f
  8814  0B43  2B40               	goto	u1475
  8815  0B44  3001               	movlw	1
  8816  0B45                     u1485:	
  8817  0B45  36F1               	lsrf	___wmul@multiplier+1,f
  8818  0B46  0CF0               	rrf	___wmul@multiplier,f
  8819  0B47  0B89               	decfsz	9,f
  8820  0B48  2B45               	goto	u1485
  8821  0B49  0870               	movf	___wmul@multiplier,w
  8822  0B4A  0471               	iorwf	___wmul@multiplier+1,w
  8823  0B4B  1D03               	btfss	3,2
  8824  0B4C  2B39               	goto	l2013
  8825  0B4D  0875               	movf	___wmul@product+1,w
  8826  0B4E  00F1               	movwf	?___wmul+1
  8827  0B4F  0874               	movf	___wmul@product,w
  8828  0B50  00F0               	movwf	?___wmul
  8829  0B51  0008               	return
  8830  0B52                     __end_of___wmul:	
  8831                           
  8832                           	psect	text28
  8833  0AD4                     __ptext28:	
  8834 ;; *************** function _SYSTEM_Initialize *****************
  8835 ;; Defined at:
  8836 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;		None
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      void 
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0, pclath, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;Total ram usage:        0 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    1
  8857 ;; This function calls:
  8858 ;;		_EUSART_Initialize
  8859 ;;		_OSCILLATOR_Initialize
  8860 ;;		_PIN_MANAGER_Initialize
  8861 ;;		_SPI_Initialize
  8862 ;;		_WDT_Initialize
  8863 ;; This function is called by:
  8864 ;;		_main
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           
  8869                           ;psect for function _SYSTEM_Initialize
  8870  0AD4                     _SYSTEM_Initialize:	
  8871                           
  8872                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8873                           
  8874                           ;incstack = 0
  8875                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8876  0AD4  318B  2307  318A   	fcall	_PIN_MANAGER_Initialize
  8877                           
  8878                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8879  0AD7  318A  22A5  318A   	fcall	_OSCILLATOR_Initialize
  8880                           
  8881                           ;mcc.c: 75: WDT_Initialize();
  8882  0ADA  318A  2274  318A   	fcall	_WDT_Initialize
  8883                           
  8884                           ;mcc.c: 76: SPI_Initialize();
  8885  0ADD  318A  2283  318A   	fcall	_SPI_Initialize
  8886                           
  8887                           ;mcc.c: 77: EUSART_Initialize();
  8888  0AE0  318A  22BA         	fcall	_EUSART_Initialize
  8889  0AE2  0008               	return
  8890  0AE3                     __end_of_SYSTEM_Initialize:	
  8891                           
  8892                           	psect	text29
  8893  0A74                     __ptext29:	
  8894 ;; *************** function _WDT_Initialize *****************
  8895 ;; Defined at:
  8896 ;;		line 94 in file "mcc_generated_files/mcc.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_SYSTEM_Initialize
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           
  8924                           ;psect for function _WDT_Initialize
  8925  0A74                     _WDT_Initialize:	
  8926                           
  8927                           ;mcc.c: 97: WDTCON = 0x16;
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in _WDT_Initialize: [wreg]
  8931  0A74  3016               	movlw	22
  8932  0A75  0021               	movlb	1	; select bank1
  8933  0A76  0097               	movwf	23	;volatile
  8934  0A77  0008               	return
  8935  0A78                     __end_of_WDT_Initialize:	
  8936                           
  8937                           	psect	text30
  8938  0A83                     __ptext30:	
  8939 ;; *************** function _SPI_Initialize *****************
  8940 ;; Defined at:
  8941 ;;		line 63 in file "mcc_generated_files/spi.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;		None
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;		None
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      void 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        0 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_SYSTEM_Initialize
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _SPI_Initialize
  8970  0A83                     _SPI_Initialize:	
  8971                           
  8972                           ;spi.c: 68: SSP1STAT = 0x40;
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8976  0A83  3040               	movlw	64
  8977  0A84  0024               	movlb	4	; select bank4
  8978  0A85  0094               	movwf	20	;volatile
  8979                           
  8980                           ;spi.c: 71: SSP1CON1 = 0x20;
  8981  0A86  3020               	movlw	32
  8982  0A87  0095               	movwf	21	;volatile
  8983                           
  8984                           ;spi.c: 74: SSP1ADD = 0x00;
  8985  0A88  0192               	clrf	18	;volatile
  8986  0A89  0008               	return
  8987  0A8A                     __end_of_SPI_Initialize:	
  8988                           
  8989                           	psect	text31
  8990  0B07                     __ptext31:	
  8991 ;; *************** function _PIN_MANAGER_Initialize *****************
  8992 ;; Defined at:
  8993 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;		None
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, status,2
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        0 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_SYSTEM_Initialize
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           
  9021                           ;psect for function _PIN_MANAGER_Initialize
  9022  0B07                     _PIN_MANAGER_Initialize:	
  9023                           
  9024                           ;pin_manager.c: 57: LATA = 0x14;
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9028  0B07  3014               	movlw	20
  9029  0B08  0022               	movlb	2	; select bank2
  9030  0B09  008C               	movwf	12	;volatile
  9031                           
  9032                           ;pin_manager.c: 58: LATC = 0x00;
  9033  0B0A  018E               	clrf	14	;volatile
  9034                           
  9035                           ;pin_manager.c: 63: TRISA = 0x3B;
  9036  0B0B  303B               	movlw	59
  9037  0B0C  0021               	movlb	1	; select bank1
  9038  0B0D  008C               	movwf	12	;volatile
  9039                           
  9040                           ;pin_manager.c: 64: TRISC = 0x32;
  9041  0B0E  3032               	movlw	50
  9042  0B0F  008E               	movwf	14	;volatile
  9043                           
  9044                           ;pin_manager.c: 69: ANSELC = 0x00;
  9045  0B10  0023               	movlb	3	; select bank3
  9046  0B11  018E               	clrf	14	;volatile
  9047                           
  9048                           ;pin_manager.c: 70: ANSELA = 0x00;
  9049  0B12  018C               	clrf	12	;volatile
  9050                           
  9051                           ;pin_manager.c: 75: WPUA = 0x00;
  9052  0B13  0024               	movlb	4	; select bank4
  9053  0B14  018C               	clrf	12	;volatile
  9054                           
  9055                           ;pin_manager.c: 76: WPUC = 0x30;
  9056  0B15  3030               	movlw	48
  9057  0B16  008E               	movwf	14	;volatile
  9058                           
  9059                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 1;
  9060  0B17  0021               	movlb	1	; select bank1
  9061  0B18  1795               	bsf	21,7	;volatile
  9062                           
  9063                           ;pin_manager.c: 83: APFCON1 = 0x00;
  9064  0B19  0022               	movlb	2	; select bank2
  9065  0B1A  019E               	clrf	30	;volatile
  9066                           
  9067                           ;pin_manager.c: 84: APFCON0 = 0x84;
  9068  0B1B  3084               	movlw	132
  9069  0B1C  009D               	movwf	29	;volatile
  9070  0B1D  0008               	return
  9071  0B1E                     __end_of_PIN_MANAGER_Initialize:	
  9072                           
  9073                           	psect	text32
  9074  0AA5                     __ptext32:	
  9075 ;; *************** function _OSCILLATOR_Initialize *****************
  9076 ;; Defined at:
  9077 ;;		line 80 in file "mcc_generated_files/mcc.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;		None
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;		None
  9082 ;; Return value:  Size  Location     Type
  9083 ;;                  1    wreg      void 
  9084 ;; Registers used:
  9085 ;;		wreg, status,2
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 0/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;Total ram usage:        0 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_SYSTEM_Initialize
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           
  9105                           ;psect for function _OSCILLATOR_Initialize
  9106  0AA5                     _OSCILLATOR_Initialize:	
  9107                           
  9108                           ;mcc.c: 83: OSCCON = 0x70;
  9109                           
  9110                           ;incstack = 0
  9111                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9112  0AA5  3070               	movlw	112
  9113  0AA6  0021               	movlb	1	; select bank1
  9114  0AA7  0099               	movwf	25	;volatile
  9115                           
  9116                           ;mcc.c: 85: OSCTUNE = 0x00;
  9117  0AA8  0198               	clrf	24	;volatile
  9118                           
  9119                           ;mcc.c: 87: BORCON = 0x00;
  9120  0AA9  0022               	movlb	2	; select bank2
  9121  0AAA  0196               	clrf	22	;volatile
  9122  0AAB                     l26:	
  9123                           ;mcc.c: 90: {
  9124                           
  9125                           ;mcc.c: 89: while(PLLR == 0)
  9126                           
  9127  0AAB  0021               	movlb	1	; select bank1
  9128  0AAC  1B1A               	btfsc	26,6	;volatile
  9129  0AAD  0008               	return
  9130  0AAE  2AAB               	goto	l26
  9131  0AAF                     __end_of_OSCILLATOR_Initialize:	
  9132                           
  9133                           	psect	text33
  9134  0ABA                     __ptext33:	
  9135 ;; *************** function _EUSART_Initialize *****************
  9136 ;; Defined at:
  9137 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;		None
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      void 
  9144 ;; Registers used:
  9145 ;;		wreg
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;Total ram usage:        0 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; This function calls:
  9158 ;;		Nothing
  9159 ;; This function is called by:
  9160 ;;		_SYSTEM_Initialize
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _EUSART_Initialize
  9166  0ABA                     _EUSART_Initialize:	
  9167                           
  9168                           ;eusart.c: 58: BAUDCON = 0x08;
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _EUSART_Initialize: [wreg]
  9172  0ABA  3008               	movlw	8
  9173  0ABB  0023               	movlb	3	; select bank3
  9174  0ABC  009F               	movwf	31	;volatile
  9175                           
  9176                           ;eusart.c: 61: RCSTA = 0x90;
  9177  0ABD  3090               	movlw	144
  9178  0ABE  009D               	movwf	29	;volatile
  9179                           
  9180                           ;eusart.c: 64: TXSTA = 0x24;
  9181  0ABF  3024               	movlw	36
  9182  0AC0  009E               	movwf	30	;volatile
  9183                           
  9184                           ;eusart.c: 67: SPBRGL = 0x40;
  9185  0AC1  3040               	movlw	64
  9186  0AC2  009B               	movwf	27	;volatile
  9187                           
  9188                           ;eusart.c: 70: SPBRGH = 0x03;
  9189  0AC3  3003               	movlw	3
  9190  0AC4  009C               	movwf	28	;volatile
  9191  0AC5  0008               	return
  9192  0AC6                     __end_of_EUSART_Initialize:	
  9193                           
  9194                           	psect	text34
  9195  0A9B                     __ptext34:	
  9196 ;; *************** function _EUSART_Read *****************
  9197 ;; Defined at:
  9198 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;		None
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;		None
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      unsigned char 
  9205 ;; Registers used:
  9206 ;;		wreg
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;Total ram usage:        0 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; This function calls:
  9219 ;;		Nothing
  9220 ;; This function is called by:
  9221 ;;		_main
  9222 ;;		_getch
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           
  9227                           ;psect for function _EUSART_Read
  9228  0A9B                     _EUSART_Read:	
  9229  0A9B                     l56:	
  9230                           ;eusart.c: 78: {
  9231                           
  9232                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9233                           
  9234                           ;incstack = 0
  9235                           ; Regs used in _EUSART_Read: [wreg]
  9236                           
  9237  0A9B  0020               	movlb	0	; select bank0
  9238  0A9C  1E91               	btfss	17,5	;volatile
  9239  0A9D  2A9B               	goto	l56
  9240                           
  9241                           ;eusart.c: 79: }
  9242                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9243  0A9E  0023               	movlb	3	; select bank3
  9244  0A9F  1C9D               	btfss	29,1	;volatile
  9245  0AA0  2AA3               	goto	l2399
  9246                           
  9247                           ;eusart.c: 83: {
  9248                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9249  0AA1  121D               	bcf	29,4	;volatile
  9250                           
  9251                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9252  0AA2  161D               	bsf	29,4	;volatile
  9253  0AA3                     l2399:	
  9254                           
  9255                           ;eusart.c: 88: }
  9256                           ;eusart.c: 90: return RCREG;
  9257  0AA3  0819               	movf	25,w	;volatile
  9258  0AA4  0008               	return
  9259  0AA5                     __end_of_EUSART_Read:	
  9260  007E                     btemp	set	126	;btemp
  9261  007E                     wtemp0	set	126


Data Sizes:
    Strings     1124
    Constant    34
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     67      79
    BANK1            80     29      73
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 16
		 -> receive_buf.buf(BANK1[15]), receive_buf(BANK1[16]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    printf$647	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_58(CODE[17]), STR_57(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_56(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), txf_clear@n(BANK0[1]), 
		 -> STR_3(CODE[21]), main@buf(BANK1[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_55(CODE[5]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[2]), 
		 -> STR_51(CODE[16]), STR_50(CODE[16]), STR_49(CODE[2]), STR_48(CODE[16]), 
		 -> STR_47(CODE[16]), STR_46(CODE[16]), STR_45(CODE[2]), STR_44(CODE[12]), 
		 -> STR_43(CODE[12]), STR_42(CODE[12]), STR_41(CODE[2]), STR_40(CODE[12]), 
		 -> STR_39(CODE[12]), STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[44]), 
		 -> STR_35(CODE[44]), STR_34(CODE[5]), STR_33(CODE[13]), STR_32(CODE[13]), 
		 -> STR_31(CODE[18]), STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[20]), 
		 -> STR_27(CODE[14]), STR_26(CODE[14]), STR_25(CODE[14]), STR_24(CODE[15]), 
		 -> STR_23(CODE[16]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[23]), 
		 -> STR_19(CODE[21]), STR_18(CODE[15]), STR_17(CODE[22]), STR_16(CODE[44]), 
		 -> STR_15(CODE[57]), STR_14(CODE[26]), STR_13(CODE[21]), STR_12(CODE[29]), 
		 -> STR_11(CODE[38]), STR_10(CODE[25]), STR_9(CODE[42]), STR_8(CODE[38]), 
		 -> STR_7(CODE[29]), STR_6(CODE[54]), STR_5(CODE[59]), STR_4(CODE[51]), 
		 -> STR_2(CODE[36]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    receive_handler@buf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _receive_handler->___lwmod
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0  123402
                                             65 BANK0      2     2      0
                                              0 BANK1     29    29      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   23083
                                             61 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   11470
                                             35 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                     17    13      4    1960
                                              0 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   21250
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9850
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             4     2      2   11781
                                             39 BANK0      4     2      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    9071
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    7205
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11545
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11523
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    9139
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    6711
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     671
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     802
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _putch
     _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1D      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 07:14:44 2018

                          _SPI_Initialize 0A83                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0020                                        l26 0AAB  
                                      l63 0A8B                                        l56 0A9B  
                 ?_SPI_Exchange8bitBuffer 0071                                        _nm 1484  
                     ___wmul@multiplicand 0072                     __size_of_SPI_exchange 0015  
                             __CFG_LVP$ON 0000                                       l212 03C0  
                                     l118 0A97                                       l340 0283  
                                     l440 0614                                       l360 0CDB  
                                     l337 0273                                       l361 0CD6  
                                     l426 05C9                                       l363 0CEC  
                                     l364 0CE7                                       l461 06CD  
                                     l357 0CCA                                       l470 0726  
                                     l438 06A7                                       l366 0CF0  
                                     l439 0613                                       l368 0CF4  
                                     l466 06EF                                       l495 07ED  
                                     l579 0B3F                  __end_of_can_status_check 0D01  
                            __CFG_CPD$OFF 0000                                       _abc 147E  
                                     _buf 00AC                                       _sid 006B  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                     can_logging_mode@debug 0072  
                            ?_EUSART_Read 0070                                      l2013 0B39  
                                    l2007 0AD2                                      l2121 05E4  
                                    l2043 0C4F                                      l2035 0C31  
                                    l2115 05CE                                      l2037 0C3D  
                                    l2061 0BAE                                      l2141 062B  
                                    l2117 05D7                                      l2109 05C4  
                                    l2047 0C58                                      l2231 075E  
                                    l2207 0711                                      l2151 0648  
                                    l2143 0639                                      l2065 0BBA  
                                    l2233 0762                                      l2241 0777  
                                    l2225 074F                                      l2217 0742  
                                    l2209 071A                                      l2153 0657  
                                    l2137 0629                                      l2129 0616  
                                    l2059 0BA2                                      l2251 07C4  
                                    l2243 077D                                      l2219 0745  
                                    l2163 067A                                      l2147 0646  
                                    l2323 0D29                                      l2069 0BC3  
                                    l2245 07A2                                      l2261 07DB  
                                    l2237 076F                                      l2181 06C1  
                                    l2157 0664                                      l2093 0FD5  
                                    l2511 0030                                      l2159 066F  
                                    l2263 05A8                                      l2521 0068  
                                    l2513 0034                                      l2505 0029  
                                    l2169 0683                                      l2097 0FE3  
                                    l2515 0059                                      l2259 07D7  
                                    l2099 0FF3                                      l2701 02B4  
                                    l2615 007B                                      l2703 02E4  
                                    l2633 00D9                                      l2627 00D4  
                                    l2731 0365                                      l2571 0DF7  
                                    l2379 0F24                                      l2803 0421  
                                    l2493 000E                                      l2645 0132  
                                    l2813 043B                                      l2399 0AA3  
                                    l2495 0007                                      l2719 032C  
                                    l2671 027F                                      l2583 0E23  
                                    l2487 0CFF                                      l2479 0CFA  
                                    l2807 0432                                      l2497 0013  
                                    l2665 026D                                      l2833 0464  
                                    l2825 0455                                      l2595 0E5A  
                                    l2843 0477                                      l2819 0449  
                                    l1981 0C87                                      l2677 028F  
                                    l2589 0E4B                                      l2861 04C7  
                                    l2837 046B                                      l2829 045B  
                                    l2773 03C2                                      l1975 0C66  
                                    l1983 0C8B                                      l2679 0291  
                                    l2863 04CB                                      l2767 03B2  
                                    l1993 0CA5                                      l1985 0C90  
                                    l2865 04CF                                      l2857 04B0  
                                    l2849 0489                                      l2873 0559  
                                    l2793 0400                                      l2785 03E1  
                                    l1979 0C74                                      l1995 0CA9  
                                    l2699 02DE                                      l2867 04D3  
                                    l2875 057E                                      l1989 0C94  
                                    l2885 05A0                                      l2869 04DC  
                                    l2877 0587                                      l2879 0588  
                                    STR_1 1481                                      STR_2 11D9  
                                    STR_3 12C1                                      STR_4 10AC  
                                    STR_5 1002                                      STR_6 1076  
                                    STR_7 121A                                      STR_8 118D  
                                    STR_9 1163                                      u2014 0BD1  
                                    u2015 0BD0                                      u2025 0EA9  
                                    _LATA 010C                                      _LATC 010E  
                                    u2225 0E09                                      u1515 0C34  
                                    u2315 00F3                                      u1605 0BB4  
                                    u1535 0C3E                                      u1615 0BBB  
                                    u1545 0C48                                      u1475 0B40  
                                    u1555 0C50                                      u2444 036F  
                                    u1485 0B45                                      u1725 063F  
                                    u2285 0095                                      u2445 036E  
                                    u1815 070A                                      u1585 0BA5  
                                    u1855 0735                                      u1785 06E8  
                                    u2657 039C                                      u2667 0D5E  
                                    u2677 0D7B                                      u1975 0B63  
                                    _PLLR 04D6                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _atoi 0006  
                                    _main 0392                                      _mode 0069  
                         can_baudrate@bpr 0049                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 0002  
                  __end_of_SPI_Initialize 0A8A                              _SPI_exchange 0AF2  
                           __CFG_MCLRE$ON 0000                          can_send@data_buf 004B  
              __end_of_can_dump_registers 0245            __end_of_SPI_Exchange8bitBuffer 0CAB  
                           __CFG_PLLEN$ON 0000                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 000A             __end_of_OSCILLATOR_Initialize 0AAF  
                                   ?_atoi 0076                                     ?_main 0070  
                                   STR_10 1251                                     STR_11 11B3  
                                   STR_20 126A                                     STR_12 11FD  
                                   STR_21 131E                                     STR_13 12AC  
                                   STR_30 1351                                     STR_22 1340  
                                   STR_14 1237                                     STR_23 1362  
                                   STR_31 12EA                                     STR_15 103D  
                                   STR_40 1345                                     STR_32 1426  
                                   STR_24 13C2                                     STR_16 1137  
                                   STR_41 1479                                     STR_33 1419  
                                   STR_25 140B                                     STR_17 1281  
                           __CFG_WDTE$OFF 0000                                     STR_34 1476  
                                   STR_42 1433                                     STR_26 13FD  
                                   STR_18 13E0                                     STR_50 1372  
                                   STR_43 143F                                     STR_27 13EF  
                                   STR_51 1392                                     STR_19 1297  
                                   STR_35 110B                                     STR_52 1479  
                                   STR_44 144B                                     STR_28 12D6  
                                   STR_36 10DF                                     STR_45 1479  
                                   STR_37 1476                                     STR_53 13D1  
                                   STR_29 132F                                     STR_38 1476  
                                   STR_54 13E0                                     STR_46 1382  
                                   STR_55 1476                                     STR_39 1323  
                                   STR_47 13A2                                     STR_56 1469  
                                   STR_48 13B2                                     STR_49 1479  
                                   STR_57 12FC                                     STR_58 130D  
                    __size_of_can_set_sid 0024                           __end_of___lwdiv 0C5D  
                         __end_of___lwmod 0BC8             can_status_check@bytes_written 005F  
                                   _RCREG 0199                                     u165m0 0FD1  
                                   u166m0 0FEF                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                         SPI_exchange@buf 007D                           SPI_exchange@len 0078  
                         __end_of_dpowers 1461                            _WDT_Initialize 0A74  
                         __end_of_isdigit 0AD4                           __end_of_receive 0F3B  
                                   atoi@a 007B                          can_baudrate@mask 004A  
                                   atoi@s 007D                                     _putch 0A78  
                                   main@c 00E6                                     main@n 00E4  
            ?_abort_pending_transmissions 0070                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                           receive@rx_buf 0049                           ?_SPI_Initialize 0070  
     __size_of_can_dump_masks_and_filters 00CC                           __initialization 07EE  
                   __size_of_can_baudrate 0033                              __end_of_atoi 006D  
                            __end_of_main 05A3                             main@echo_back 00E3  
                          ??_EUSART_Write 0070                    can_status_check@status 0060  
                                  ??_atoi 0078                                    ??_main 0061  
                   can_set_mask@mask_sidh 0053                     can_set_mask@mask_sidl 0054  
                 can_logging_mode@verbose 0070                    __end_of_WDT_Initialize 0A78  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 0A9B  
                   __size_of_can_ope_mode 0057                     __size_of_can_set_mask 00A5  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                        __end_of_can_init 0DE2                              _can_baudrate 0BF6  
                        __end_of_can_send 0392                            __CFG_PWRTE$OFF 0000  
                                  ___wmul 0B37                            __CFG_STVREN$ON 0000  
                               ??___lwdiv 0074                                 ??___lwmod 007C  
                                  _printf 05A3                              _can_ope_mode 0D01  
                            _can_set_mask 0DE2                                 ??_isdigit 0070  
                               ??_receive 0043                           ?_WDT_Initialize 0070  
                           main@putc_data 00E5                 __size_of_can_logging_mode 000B  
                        __end_of_rxfnsidh 1476                          __end_of_txbnsidh 147E  
                        __end_of_rxmnsidh 1002                      __size_of_EUSART_Read 000A  
                       _SYSTEM_Initialize 0AD4                 SPI_exchange@bytes_written 007C  
                 __end_of__initialization 07FD                    __size_of_read_register 0019  
                      ?_SYSTEM_Initialize 0070                        __size_of_can_abort 000F  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0070  
                          can_send@status 004A      __size_of_abort_pending_transmissions 0026  
                           __end_of_putch 0A7D                               receive@pbuf 0058  
      __end_of_can_dump_masks_and_filters 0139                _can_dump_masks_and_filters 006D  
                              __end_of_nm 1486                         ?_can_status_check 0070  
                          _OPTION_REGbits 0095                        ??_can_status_check 005D  
                  can_abort@bytes_written 0048                 __end_of_SYSTEM_Initialize 0AE3  
                                 ??_putch 0071                                __pbssBANK0 0063  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 0A92  
                        can_set_mask@mask 0048                                __pmaintext 0392  
                                 ?___wmul 0070                                   _BAUDCON 019F  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0022                             _read_register 0B1E  
                               ?_can_init 0047                                 ?_can_send 0043  
                      _can_dump_registers 0139                  __size_of_receive_handler 00C5  
                                 _OSCTUNE 0098                         __end_of_can_abort 0AF2  
                                 _SSP1ADD 0212                                   _SSP1BUF 0211  
                     ?_can_dump_registers 0070                        __size_of_txf_clear 002E  
                        ??_SPI_Initialize 0070                           __size_of___wmul 001B  
                    ??_can_dump_registers 0043                             ??_can_set_sid 0072  
                                 ___lwdiv 0C29                                   ___lwmod 0B9C  
                          ?_read_register 0070                                   _handler 0067  
                                 __ptext1 0CAB                                   __ptext2 0BC8  
                                 __ptext3 0E87                                   __ptext4 0F3B  
                                 __ptext5 0DE2                                   __ptext6 0245  
                                 __ptext7 0AAF                                   __ptext8 0D58  
                                 __ptext9 0B52                           __size_of_printf 024B  
                       __end_of_hexpowers 1469                                   _dpowers 1457  
                              ??_can_init 0049                     _OSCILLATOR_Initialize 0AA5  
                              ??_can_send 0044                                   _isdigit 0AC6  
                                 _receive 0E87                  ??_PIN_MANAGER_Initialize 0070  
                        _can_logging_mode 0AAF                         ?_SPI_Exchange8bit 0070  
                                 main@cmd 00E7                    txf_clear@bytes_written 0023  
                                 main@buf 00CE                                   main@bpr 00DE  
              __size_of_SYSTEM_Initialize 000F                                   main@idx 00E8  
                                 main@sid 00CC                                   clrloop0 0A7E  
                                 main@pos 00E0                      end_of_initialization 07FD  
                      ??_SPI_Exchange8bit 0070                      SPI_Exchange8bit@data 0070  
                          _operation_mode 006D                         _EUSART_Initialize 0ABA  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0042                                   printf@f 0022  
                              _printf$647 0034                         __end_of_txf_clear 0BF6  
                     ??_EUSART_Initialize 0070                          ??_WDT_Initialize 0070  
                     __end_of_can_set_sid 0B76                          __CFG_FOSC$INTOSC 0000  
            ??_can_dump_masks_and_filters 0043                     __size_of_EUSART_Write 0008  
                       ??_receive_handler 0024                 __end_of_EUSART_Initialize 0AC6  
                             printf@width 0040                  ??_SPI_Exchange8bitBuffer 0073  
                              main@status 00DF                       receive_handler@sid0 0025  
                     receive_handler@sid1 0027                       receive_handler@sid2 0029  
                     receive_handler@sid3 002B                       receive_handler@sida 002D  
                     receive_handler@sidb 002F  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0B52  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0A8A  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07EE  
                     start_initialization 07EE           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 1481                          _can_set_mask$522 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0B9C  
             _abort_pending_transmissions 0B76                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
               can_ope_mode@bytes_written 0045             ??_abort_pending_transmissions 0020  
                           ?_SPI_exchange 0078                                  ??___wmul 0074  
                           txf_clear@mask 0022                               _can_set_sid 0B52  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00CC  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008A                         __size_of_can_send 014D  
                              receive@dlc 005B             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 0AE3                __size_of_EUSART_Initialize 000C  
                     __end_of_EUSART_Read 0AA5                           can_set_mask@cmd 0052  
                          ??_SPI_exchange 0079           __size_of_SPI_Exchange8bitBuffer 004E  
                        ___lwdiv@dividend 0072                    _PIN_MANAGER_Initialize 0B07  
                         can_set_sid@sidh 0075                           can_set_sid@sidl 0076  
                __end_of_can_logging_mode 0ABA                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                                 _hexpowers 1461  
                        ___lwdiv@quotient 0075                            __size_of_putch 0005  
                              ?_can_abort 0070                             ?_can_baudrate 0070  
                          ___wmul@product 0074                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 0A7D  
                               _save_rxfn 00A0                                 _save_rxmn 0063  
                                _PIR1bits 0011                 __size_of_SPI_Exchange8bit 0009  
                                _SSP1CON1 0215                                  _SSP1STAT 0214  
             __size_of_can_dump_registers 010C                             ?_can_ope_mode 0070  
                       ___wmul@multiplier 0070                             ?_can_set_mask 0047  
                  _SPI_Exchange8bitBuffer 0C5D                           _receive_handler 0F3B  
                              printf@flag 003F                                printf@prec 0037  
                               _txf_clear 0BC8                        receive_handler@dlc 0023  
                      receive_handler@buf 0022                        receive_handler@sid 0020  
                             _EUSART_Read 0A9B                            ??_can_baudrate 0047  
                             can_send@dlc 0043                               can_send@len 0048  
                        _can_status_check 0CAB                   __size_of_SPI_Initialize 0007  
                 ??_OSCILLATOR_Initialize 0070                            ??_can_ope_mode 0043  
                        __size_of___lwdiv 0034                          __size_of___lwmod 002C  
                          ??_can_set_mask 004A              SPI_Exchange8bitBuffer@dataIn 0076  
                               receive@id 0059                               _isdigit$838 0070  
                    can_ope_mode@ope_mode 0046              SPI_Exchange8bitBuffer@bufLen 0071  
                                _can_init 0D58                                  _can_send 0245  
                              txf_clear@n 0024                                ?_txf_clear 0070  
                    __end_of_SPI_exchange 0B07                          __size_of_isdigit 000E  
                        __size_of_receive 00B4                           ___lwdiv@divisor 0070  
                         ___lwdiv@counter 0077                                  __ptext10 0139  
                                __ptext11 0B1E                                  __ptext20 0C29  
                                __ptext12 006D                                  __ptext21 0B76  
                                __ptext13 0BF6                                  __ptext30 0A83  
                                __ptext22 0AF2                                  __ptext14 0AE3  
                                __ptext31 0B07                                  __ptext23 0C5D  
                                __ptext15 0D01                                  __ptext32 0AA5  
                                __ptext24 0A92                                  __ptext16 05A3  
                                __ptext33 0ABA                                  __ptext25 0006  
                                __ptext17 0A78                                  __ptext34 0A9B  
                                __ptext26 0AC6                                  __ptext18 0A8A  
                                __ptext27 0B37                                  __ptext19 0B9C  
                                __ptext28 0AD4                                  __ptext29 0A74  
                            _SSP1CON1bits 0215                               ??_can_abort 0047  
                           __size_of_atoi 0067                             __size_of_main 0211  
                             _receive_buf 00BC                                  atoi@sign 007A  
                 __end_of_receive_handler 1000                              ?_can_set_sid 0070  
                               printf@idx 0036                                 printf@len 003A  
                               printf@val 003D                              _SSP1STATbits 0214  
                                _with_sid 006E                                  main@mask 00E1  
                                _rxfnsidh 1470                     __end_of_read_register 0B37  
                                _txbnsidh 147B                                  _rxmnsidh 1000  
                          __pstringtext10 10AC                            __pstringtext11 10DF  
                          __pstringtext20 1237                            __pstringtext12 110B  
                          __pstringtext21 1251                            __pstringtext13 1137  
                          __pstringtext30 130D                            __pstringtext22 126A  
                          __pstringtext14 1163                            __pstringtext31 131E  
                          __pstringtext23 1281                            __pstringtext15 118D  
                          __pstringtext40 13B2                            __pstringtext32 132F  
                          __pstringtext24 1297                            __pstringtext16 11B3  
                          __pstringtext41 13C2                            __pstringtext33 1340  
                          __pstringtext25 12AC                            __pstringtext17 11D9  
                          __pstringtext50 143F                            __pstringtext42 13D1  
                          __pstringtext34 1351                            __pstringtext26 12C1  
                          __pstringtext18 11FD                            __pstringtext51 144B  
                          __pstringtext43 13E0                            __pstringtext35 1362  
                          __pstringtext27 12D6                            __pstringtext19 121A  
                          __pstringtext52 1469                            __pstringtext44 13EF  
                          __pstringtext36 1372                            __pstringtext28 12EA  
                          __pstringtext53 1476                            __pstringtext45 13FD  
                          __pstringtext37 1382                            __pstringtext29 12FC  
                          __pstringtext54 1481                            __pstringtext46 140B  
                          __pstringtext38 1392                            __pstringtext55 0000  
                          __pstringtext47 1419                            __pstringtext39 13A2  
                          __pstringtext48 1426                            __pstringtext49 1433  
                                isdigit@c 0071                   __size_of_WDT_Initialize 0004  
                                receive@n 005C                          ___lwmod@dividend 007A  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
      SPI_Exchange8bitBuffer@bytesWritten 0077                         receive@bytes_read 0048  
                        _SPI_Exchange8bit 0A92                     can_send@bytes_written 0049  
                                printf@ap 003C                                  printf@cp 0038  
                       ?_can_logging_mode 0070                   can_init@receive_handler 0047  
                      ??_can_logging_mode 0071                      __end_of_can_baudrate 0C29  
                           __pstringtext1 1457                             __pstringtext2 1461  
                           __pstringtext3 1470                             __pstringtext4 147B  
                           __pstringtext5 147E                             __pstringtext6 1484  
                           __pstringtext7 1000                             __pstringtext8 103D  
                           __pstringtext9 1076                               ??_txf_clear 0020  
                         ___lwmod@divisor 0078                           ___lwmod@counter 007D  
                      EUSART_Write@txData 0070            __end_of_PIN_MANAGER_Initialize 0B1E  
                    __end_of_can_ope_mode 0D58                      __end_of_can_set_mask 0E87  
