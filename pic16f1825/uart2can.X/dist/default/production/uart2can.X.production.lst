

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 16:37:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	cinit,global,class=CODE,merge=1,delta=2
    49                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    50                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    51                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    52                           	psect	clrtext,global,class=CODE,delta=2
    53                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    54                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    55                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    56                           	psect	text1,local,class=CODE,merge=1,delta=2
    57                           	psect	text2,local,class=CODE,merge=1,delta=2
    58                           	psect	text3,local,class=CODE,merge=1,delta=2
    59                           	psect	text4,local,class=CODE,merge=1,delta=2
    60                           	psect	text5,local,class=CODE,merge=1,delta=2
    61                           	psect	text6,local,class=CODE,merge=1,delta=2
    62                           	psect	text7,local,class=CODE,merge=1,delta=2
    63                           	psect	text8,local,class=CODE,merge=1,delta=2
    64                           	psect	text9,local,class=CODE,merge=1,delta=2
    65                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text12,local,class=CODE,merge=1,delta=2
    68                           	psect	text13,local,class=CODE,merge=1,delta=2
    69                           	psect	text14,local,class=CODE,merge=1,delta=2
    70                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text18,local,class=CODE,merge=1,delta=2
    74                           	psect	text19,local,class=CODE,merge=1,delta=2
    75                           	psect	text20,local,class=CODE,merge=1,delta=2
    76                           	psect	text21,local,class=CODE,merge=1,delta=2
    77                           	psect	text22,local,class=CODE,merge=1,delta=2
    78                           	psect	text23,local,class=CODE,merge=1,delta=2
    79                           	psect	text24,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     
    82                           ; Version 1.45
    83                           ; Generated 16/11/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16F1825 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000E                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  008C                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011D                     	;# 
   174  011E                     	;# 
   175  018C                     	;# 
   176  018E                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029D                     	;# 
   226  029E                     	;# 
   227  0311                     	;# 
   228  0311                     	;# 
   229  0312                     	;# 
   230  0313                     	;# 
   231  0318                     	;# 
   232  0318                     	;# 
   233  0319                     	;# 
   234  031A                     	;# 
   235  038C                     	;# 
   236  038E                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000E                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  008C                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011A                     	;# 
   318  011B                     	;# 
   319  011D                     	;# 
   320  011E                     	;# 
   321  018C                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0193                     	;# 
   329  0194                     	;# 
   330  0195                     	;# 
   331  0196                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020C                     	;# 
   341  020E                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0294                     	;# 
   362  0295                     	;# 
   363  0295                     	;# 
   364  0296                     	;# 
   365  0298                     	;# 
   366  0298                     	;# 
   367  0299                     	;# 
   368  029A                     	;# 
   369  029B                     	;# 
   370  029C                     	;# 
   371  029D                     	;# 
   372  029E                     	;# 
   373  0311                     	;# 
   374  0311                     	;# 
   375  0312                     	;# 
   376  0313                     	;# 
   377  0318                     	;# 
   378  0318                     	;# 
   379  0319                     	;# 
   380  031A                     	;# 
   381  038C                     	;# 
   382  038E                     	;# 
   383  0391                     	;# 
   384  0392                     	;# 
   385  0393                     	;# 
   386  039A                     	;# 
   387  039C                     	;# 
   388  039D                     	;# 
   389  039E                     	;# 
   390  039F                     	;# 
   391  0415                     	;# 
   392  0416                     	;# 
   393  0417                     	;# 
   394  041C                     	;# 
   395  041D                     	;# 
   396  041E                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000E                     	;# 
   422  0011                     	;# 
   423  0012                     	;# 
   424  0013                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  008C                     	;# 
   437  008E                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  011E                     	;# 
   467  018C                     	;# 
   468  018E                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019D                     	;# 
   484  019E                     	;# 
   485  019F                     	;# 
   486  020C                     	;# 
   487  020E                     	;# 
   488  0211                     	;# 
   489  0211                     	;# 
   490  0212                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0213                     	;# 
   494  0214                     	;# 
   495  0214                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0215                     	;# 
   499  0216                     	;# 
   500  0216                     	;# 
   501  0217                     	;# 
   502  0217                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0294                     	;# 
   508  0295                     	;# 
   509  0295                     	;# 
   510  0296                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  029B                     	;# 
   516  029C                     	;# 
   517  029D                     	;# 
   518  029E                     	;# 
   519  0311                     	;# 
   520  0311                     	;# 
   521  0312                     	;# 
   522  0313                     	;# 
   523  0318                     	;# 
   524  0318                     	;# 
   525  0319                     	;# 
   526  031A                     	;# 
   527  038C                     	;# 
   528  038E                     	;# 
   529  0391                     	;# 
   530  0392                     	;# 
   531  0393                     	;# 
   532  039A                     	;# 
   533  039C                     	;# 
   534  039D                     	;# 
   535  039E                     	;# 
   536  039F                     	;# 
   537  0415                     	;# 
   538  0416                     	;# 
   539  0417                     	;# 
   540  041C                     	;# 
   541  041D                     	;# 
   542  041E                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0013                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001E                     	;# 
   581  001F                     	;# 
   582  008C                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011A                     	;# 
   610  011B                     	;# 
   611  011D                     	;# 
   612  011E                     	;# 
   613  018C                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  020C                     	;# 
   633  020E                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0291                     	;# 
   650  0291                     	;# 
   651  0292                     	;# 
   652  0293                     	;# 
   653  0294                     	;# 
   654  0295                     	;# 
   655  0295                     	;# 
   656  0296                     	;# 
   657  0298                     	;# 
   658  0298                     	;# 
   659  0299                     	;# 
   660  029A                     	;# 
   661  029B                     	;# 
   662  029C                     	;# 
   663  029D                     	;# 
   664  029E                     	;# 
   665  0311                     	;# 
   666  0311                     	;# 
   667  0312                     	;# 
   668  0313                     	;# 
   669  0318                     	;# 
   670  0318                     	;# 
   671  0319                     	;# 
   672  031A                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  039A                     	;# 
   679  039C                     	;# 
   680  039D                     	;# 
   681  039E                     	;# 
   682  039F                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  041C                     	;# 
   687  041D                     	;# 
   688  041E                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000E                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  001E                     	;# 
   727  001F                     	;# 
   728  008C                     	;# 
   729  008E                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0093                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0098                     	;# 
   737  0099                     	;# 
   738  009A                     	;# 
   739  009B                     	;# 
   740  009B                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009E                     	;# 
   744  010C                     	;# 
   745  010E                     	;# 
   746  0111                     	;# 
   747  0112                     	;# 
   748  0113                     	;# 
   749  0114                     	;# 
   750  0115                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0118                     	;# 
   754  0119                     	;# 
   755  011A                     	;# 
   756  011B                     	;# 
   757  011D                     	;# 
   758  011E                     	;# 
   759  018C                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020C                     	;# 
   779  020E                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029D                     	;# 
   810  029E                     	;# 
   811  0311                     	;# 
   812  0311                     	;# 
   813  0312                     	;# 
   814  0313                     	;# 
   815  0318                     	;# 
   816  0318                     	;# 
   817  0319                     	;# 
   818  031A                     	;# 
   819  038C                     	;# 
   820  038E                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  0393                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846                           
   847                           	psect	idataBANK0
   848  0E9D                     __pidataBANK0:	
   849                           
   850                           ;initializer for can_status_check@F2962
   851  0E9D  34A0               	retlw	160
   852  0E9E  3400               	retlw	0
   853                           
   854                           ;initializer for can_send@F2953
   855  0E9F  34A0               	retlw	160
   856  0EA0  3400               	retlw	0
   857                           
   858                           	psect	stringtext1
   859  12C4                     __pstringtext1:	
   860  12C4                     _dpowers:	
   861  12C4  3401               	retlw	1
   862  12C5  3400               	retlw	0
   863  12C6  340A               	retlw	10
   864  12C7  3400               	retlw	0
   865  12C8  3464               	retlw	100
   866  12C9  3400               	retlw	0
   867  12CA  34E8               	retlw	232
   868  12CB  3403               	retlw	3
   869  12CC  3410               	retlw	16
   870  12CD  3427               	retlw	39
   871  12CE                     __end_of_dpowers:	
   872                           
   873                           	psect	stringtext2
   874  12CE                     __pstringtext2:	
   875  12CE                     _hexpowers:	
   876  12CE  3401               	retlw	1
   877  12CF  3400               	retlw	0
   878  12D0  3410               	retlw	16
   879  12D1  3400               	retlw	0
   880  12D2  3400               	retlw	0
   881  12D3  3401               	retlw	1
   882  12D4  3400               	retlw	0
   883  12D5  3410               	retlw	16
   884  12D6                     __end_of_hexpowers:	
   885                           
   886                           	psect	stringtext3
   887  12DD                     __pstringtext3:	
   888  12DD                     _rxfnsidh:	
   889  12DD  3400               	retlw	0
   890  12DE  3404               	retlw	4
   891  12DF  3408               	retlw	8
   892  12E0  3410               	retlw	16
   893  12E1  3414               	retlw	20
   894  12E2  3418               	retlw	24
   895  12E3                     __end_of_rxfnsidh:	
   896                           
   897                           	psect	stringtext4
   898  12E3                     __pstringtext4:	
   899  12E3                     _txbnsidh:	
   900  12E3  3431               	retlw	49
   901  12E4  3441               	retlw	65
   902  12E5  3451               	retlw	81
   903  12E6                     __end_of_txbnsidh:	
   904                           
   905                           	psect	stringtext5
   906  12E6                     __pstringtext5:	
   907  12E6                     _abc:	
   908  12E6  3400               	retlw	0
   909  12E7  3402               	retlw	2
   910  12E8  3404               	retlw	4
   911  12E9                     __end_of_abc:	
   912                           
   913                           	psect	stringtext6
   914  12EC                     __pstringtext6:	
   915  12EC                     _nm:	
   916  12EC  3400               	retlw	0
   917  12ED  3402               	retlw	2
   918  12EE                     __end_of_nm:	
   919                           
   920                           	psect	stringtext7
   921  12EE                     __pstringtext7:	
   922  12EE                     _rxmnsidh:	
   923  12EE  3420               	retlw	32
   924  12EF  3424               	retlw	36
   925  12F0                     __end_of_rxmnsidh:	
   926                           
   927                           	psect	stringtext8
   928  0800                     __pstringtext8:	
   929  0800                     _max_idx:	
   930  0800  3407               	retlw	7
   931  0801                     __end_of_max_idx:	
   932  0011                     _PIR1bits	set	17
   933  0095                     _OPTION_REGbits	set	149
   934  008E                     _TRISC	set	142
   935  008C                     _TRISA	set	140
   936  0097                     _WDTCON	set	151
   937  0098                     _OSCTUNE	set	152
   938  0099                     _OSCCON	set	153
   939  010C                     _LATAbits	set	268
   940  011D                     _APFCON0	set	285
   941  011E                     _APFCON1	set	286
   942  010E                     _LATC	set	270
   943  010C                     _LATA	set	268
   944  0116                     _BORCON	set	278
   945  018C                     _ANSELA	set	396
   946  018E                     _ANSELC	set	398
   947  019A                     _TXREG	set	410
   948  0199                     _RCREG	set	409
   949  019D                     _RCSTAbits	set	413
   950  019C                     _SPBRGH	set	412
   951  019B                     _SPBRGL	set	411
   952  019E                     _TXSTA	set	414
   953  019D                     _RCSTA	set	413
   954  019F                     _BAUDCON	set	415
   955  0214                     _SSP1STATbits	set	532
   956  0211                     _SSP1BUF	set	529
   957  0215                     _SSP1CON1bits	set	533
   958  0212                     _SSP1ADD	set	530
   959  0215                     _SSP1CON1	set	533
   960  0214                     _SSP1STAT	set	532
   961  020E                     _WPUC	set	526
   962  020C                     _WPUA	set	524
   963  0801                     STR_26:	
   964  0801  345B               	retlw	91	;'['
   965  0802  3453               	retlw	83	;'S'
   966  0803  3465               	retlw	101	;'e'
   967  0804  3474               	retlw	116	;'t'
   968  0805  3420               	retlw	32	;' '
   969  0806  346F               	retlw	111	;'o'
   970  0807  3475               	retlw	117	;'u'
   971  0808  3474               	retlw	116	;'t'
   972  0809  3470               	retlw	112	;'p'
   973  080A  3475               	retlw	117	;'u'
   974  080B  3474               	retlw	116	;'t'
   975  080C  3420               	retlw	32	;' '
   976  080D  346D               	retlw	109	;'m'
   977  080E  346F               	retlw	111	;'o'
   978  080F  3464               	retlw	100	;'d'
   979  0810  3465               	retlw	101	;'e'
   980  0811  345D               	retlw	93	;']'
   981  0812  3420               	retlw	32	;' '
   982  0813  347B               	retlw	123	;'{'
   983  0814  3464               	retlw	100	;'d'
   984  0815  3465               	retlw	101	;'e'
   985  0816  3462               	retlw	98	;'b'
   986  0817  3475               	retlw	117	;'u'
   987  0818  3467               	retlw	103	;'g'
   988  0819  343A               	retlw	58	;':'
   989  081A  3420               	retlw	32	;' '
   990  081B  3440               	retlw	64	;'@'
   991  081C  3476               	retlw	118	;'v'
   992  081D  3464               	retlw	100	;'d'
   993  081E  342C               	retlw	44	;','
   994  081F  3420               	retlw	32	;' '
   995  0820  3476               	retlw	118	;'v'
   996  0821  3465               	retlw	101	;'e'
   997  0822  3472               	retlw	114	;'r'
   998  0823  3462               	retlw	98	;'b'
   999  0824  346F               	retlw	111	;'o'
  1000  0825  3473               	retlw	115	;'s'
  1001  0826  3465               	retlw	101	;'e'
  1002  0827  343A               	retlw	58	;':'
  1003  0828  3420               	retlw	32	;' '
  1004  0829  3440               	retlw	64	;'@'
  1005  082A  3476               	retlw	118	;'v'
  1006  082B  3476               	retlw	118	;'v'
  1007  082C  342C               	retlw	44	;','
  1008  082D  3420               	retlw	32	;' '
  1009  082E  346E               	retlw	110	;'n'
  1010  082F  346F               	retlw	111	;'o'
  1011  0830  3472               	retlw	114	;'r'
  1012  0831  346D               	retlw	109	;'m'
  1013  0832  3461               	retlw	97	;'a'
  1014  0833  346C               	retlw	108	;'l'
  1015  0834  343A               	retlw	58	;':'
  1016  0835  3420               	retlw	32	;' '
  1017  0836  3440               	retlw	64	;'@'
  1018  0837  3476               	retlw	118	;'v'
  1019  0838  346E               	retlw	110	;'n'
  1020  0839  347D               	retlw	125	;'}'
  1021  083A  340A               	retlw	10
  1022  083B  3400               	retlw	0
  1023                           
  1024                           	psect	stringtext9
  1025  1000                     __pstringtext9:	
  1026  1000                     STR_27:	
  1027  1000  345B               	retlw	91	;'['
  1028  1001  3445               	retlw	69	;'E'
  1029  1002  346E               	retlw	110	;'n'
  1030  1003  3461               	retlw	97	;'a'
  1031  1004  3462               	retlw	98	;'b'
  1032  1005  346C               	retlw	108	;'l'
  1033  1006  3465               	retlw	101	;'e'
  1034  1007  3420               	retlw	32	;' '
  1035  1008  346F               	retlw	111	;'o'
  1036  1009  3470               	retlw	112	;'p'
  1037  100A  3465               	retlw	101	;'e'
  1038  100B  3472               	retlw	114	;'r'
  1039  100C  3461               	retlw	97	;'a'
  1040  100D  3474               	retlw	116	;'t'
  1041  100E  3469               	retlw	105	;'i'
  1042  100F  346F               	retlw	111	;'o'
  1043  1010  346E               	retlw	110	;'n'
  1044  1011  3420               	retlw	32	;' '
  1045  1012  346D               	retlw	109	;'m'
  1046  1013  346F               	retlw	111	;'o'
  1047  1014  3464               	retlw	100	;'d'
  1048  1015  3465               	retlw	101	;'e'
  1049  1016  345D               	retlw	93	;']'
  1050  1017  3420               	retlw	32	;' '
  1051  1018  347B               	retlw	123	;'{'
  1052  1019  346C               	retlw	108	;'l'
  1053  101A  346F               	retlw	111	;'o'
  1054  101B  346F               	retlw	111	;'o'
  1055  101C  3470               	retlw	112	;'p'
  1056  101D  3462               	retlw	98	;'b'
  1057  101E  3461               	retlw	97	;'a'
  1058  101F  3463               	retlw	99	;'c'
  1059  1020  346B               	retlw	107	;'k'
  1060  1021  343A               	retlw	58	;':'
  1061  1022  3420               	retlw	32	;' '
  1062  1023  3440               	retlw	64	;'@'
  1063  1024  346F               	retlw	111	;'o'
  1064  1025  346C               	retlw	108	;'l'
  1065  1026  342C               	retlw	44	;','
  1066  1027  3420               	retlw	32	;' '
  1067  1028  346E               	retlw	110	;'n'
  1068  1029  346F               	retlw	111	;'o'
  1069  102A  3472               	retlw	114	;'r'
  1070  102B  346D               	retlw	109	;'m'
  1071  102C  3461               	retlw	97	;'a'
  1072  102D  346C               	retlw	108	;'l'
  1073  102E  343A               	retlw	58	;':'
  1074  102F  3420               	retlw	32	;' '
  1075  1030  3440               	retlw	64	;'@'
  1076  1031  346F               	retlw	111	;'o'
  1077  1032  346E               	retlw	110	;'n'
  1078  1033  347D               	retlw	125	;'}'
  1079  1034  340A               	retlw	10
  1080  1035  3400               	retlw	0
  1081                           
  1082                           	psect	stringtext10
  1083  1036                     __pstringtext10:	
  1084  1036                     STR_25:	
  1085  1036  345B               	retlw	91	;'['
  1086  1037  3453               	retlw	83	;'S'
  1087  1038  3465               	retlw	101	;'e'
  1088  1039  3474               	retlw	116	;'t'
  1089  103A  3420               	retlw	32	;' '
  1090  103B  3473               	retlw	115	;'s'
  1091  103C  3474               	retlw	116	;'t'
  1092  103D  3461               	retlw	97	;'a'
  1093  103E  346E               	retlw	110	;'n'
  1094  103F  3464               	retlw	100	;'d'
  1095  1040  3461               	retlw	97	;'a'
  1096  1041  3472               	retlw	114	;'r'
  1097  1042  3464               	retlw	100	;'d'
  1098  1043  3420               	retlw	32	;' '
  1099  1044  3469               	retlw	105	;'i'
  1100  1045  3464               	retlw	100	;'d'
  1101  1046  3465               	retlw	101	;'e'
  1102  1047  346E               	retlw	110	;'n'
  1103  1048  3474               	retlw	116	;'t'
  1104  1049  3469               	retlw	105	;'i'
  1105  104A  3466               	retlw	102	;'f'
  1106  104B  3469               	retlw	105	;'i'
  1107  104C  3465               	retlw	101	;'e'
  1108  104D  3472               	retlw	114	;'r'
  1109  104E  345D               	retlw	93	;']'
  1110  104F  3420               	retlw	32	;' '
  1111  1050  3440               	retlw	64	;'@'
  1112  1051  3469               	retlw	105	;'i'
  1113  1052  343C               	retlw	60	;'<'
  1114  1053  3453               	retlw	83	;'S'
  1115  1054  3474               	retlw	116	;'t'
  1116  1055  3461               	retlw	97	;'a'
  1117  1056  346E               	retlw	110	;'n'
  1118  1057  3464               	retlw	100	;'d'
  1119  1058  3461               	retlw	97	;'a'
  1120  1059  3472               	retlw	114	;'r'
  1121  105A  3464               	retlw	100	;'d'
  1122  105B  3420               	retlw	32	;' '
  1123  105C  3449               	retlw	73	;'I'
  1124  105D  3464               	retlw	100	;'d'
  1125  105E  3465               	retlw	101	;'e'
  1126  105F  346E               	retlw	110	;'n'
  1127  1060  3474               	retlw	116	;'t'
  1128  1061  3469               	retlw	105	;'i'
  1129  1062  3466               	retlw	102	;'f'
  1130  1063  3469               	retlw	105	;'i'
  1131  1064  3465               	retlw	101	;'e'
  1132  1065  3472               	retlw	114	;'r'
  1133  1066  343E               	retlw	62	;'>'
  1134  1067  340A               	retlw	10
  1135  1068  3400               	retlw	0
  1136                           
  1137                           	psect	stringtext11
  1138  1069                     __pstringtext11:	
  1139  1069                     STR_31:	
  1140  1069  345B               	retlw	91	;'['
  1141  106A  3452               	retlw	82	;'R'
  1142  106B  3465               	retlw	101	;'e'
  1143  106C  3463               	retlw	99	;'c'
  1144  106D  3465               	retlw	101	;'e'
  1145  106E  3469               	retlw	105	;'i'
  1146  106F  3476               	retlw	118	;'v'
  1147  1070  3465               	retlw	101	;'e'
  1148  1071  3420               	retlw	32	;' '
  1149  1072  346D               	retlw	109	;'m'
  1150  1073  3465               	retlw	101	;'e'
  1151  1074  3473               	retlw	115	;'s'
  1152  1075  3473               	retlw	115	;'s'
  1153  1076  3461               	retlw	97	;'a'
  1154  1077  3467               	retlw	103	;'g'
  1155  1078  3465               	retlw	101	;'e'
  1156  1079  345D               	retlw	93	;']'
  1157  107A  3420               	retlw	32	;' '
  1158  107B  343C               	retlw	60	;'<'
  1159  107C  346D               	retlw	109	;'m'
  1160  107D  3465               	retlw	101	;'e'
  1161  107E  3473               	retlw	115	;'s'
  1162  107F  3473               	retlw	115	;'s'
  1163  1080  3461               	retlw	97	;'a'
  1164  1081  3467               	retlw	103	;'g'
  1165  1082  3465               	retlw	101	;'e'
  1166  1083  343E               	retlw	62	;'>'
  1167  1084  3420               	retlw	32	;' '
  1168  1085  3477               	retlw	119	;'w'
  1169  1086  3469               	retlw	105	;'i'
  1170  1087  346C               	retlw	108	;'l'
  1171  1088  346C               	retlw	108	;'l'
  1172  1089  3420               	retlw	32	;' '
  1173  108A  3462               	retlw	98	;'b'
  1174  108B  3465               	retlw	101	;'e'
  1175  108C  3420               	retlw	32	;' '
  1176  108D  346F               	retlw	111	;'o'
  1177  108E  3475               	retlw	117	;'u'
  1178  108F  3474               	retlw	116	;'t'
  1179  1090  3470               	retlw	112	;'p'
  1180  1091  3475               	retlw	117	;'u'
  1181  1092  3474               	retlw	116	;'t'
  1182  1093  340A               	retlw	10
  1183  1094  3400               	retlw	0
  1184                           
  1185                           	psect	stringtext12
  1186  1095                     __pstringtext12:	
  1187  1095                     STR_29:	
  1188  1095  345B               	retlw	91	;'['
  1189  1096  3453               	retlw	83	;'S'
  1190  1097  3465               	retlw	101	;'e'
  1191  1098  3474               	retlw	116	;'t'
  1192  1099  3420               	retlw	32	;' '
  1193  109A  3466               	retlw	102	;'f'
  1194  109B  3469               	retlw	105	;'i'
  1195  109C  346C               	retlw	108	;'l'
  1196  109D  3474               	retlw	116	;'t'
  1197  109E  3465               	retlw	101	;'e'
  1198  109F  3472               	retlw	114	;'r'
  1199  10A0  345D               	retlw	93	;']'
  1200  10A1  3420               	retlw	32	;' '
  1201  10A2  3440               	retlw	64	;'@'
  1202  10A3  3466               	retlw	102	;'f'
  1203  10A4  343C               	retlw	60	;'<'
  1204  10A5  346E               	retlw	110	;'n'
  1205  10A6  343E               	retlw	62	;'>'
  1206  10A7  343C               	retlw	60	;'<'
  1207  10A8  3466               	retlw	102	;'f'
  1208  10A9  3469               	retlw	105	;'i'
  1209  10AA  346C               	retlw	108	;'l'
  1210  10AB  3474               	retlw	116	;'t'
  1211  10AC  3465               	retlw	101	;'e'
  1212  10AD  3472               	retlw	114	;'r'
  1213  10AE  3428               	retlw	40	;'('
  1214  10AF  3453               	retlw	83	;'S'
  1215  10B0  3449               	retlw	73	;'I'
  1216  10B1  3444               	retlw	68	;'D'
  1217  10B2  3431               	retlw	49	;'1'
  1218  10B3  3430               	retlw	48	;'0'
  1219  10B4  3420               	retlw	32	;' '
  1220  10B5  347E               	retlw	126	;'~'
  1221  10B6  3420               	retlw	32	;' '
  1222  10B7  3453               	retlw	83	;'S'
  1223  10B8  3449               	retlw	73	;'I'
  1224  10B9  3444               	retlw	68	;'D'
  1225  10BA  3430               	retlw	48	;'0'
  1226  10BB  3429               	retlw	41	;')'
  1227  10BC  343E               	retlw	62	;'>'
  1228  10BD  340A               	retlw	10
  1229  10BE  3400               	retlw	0
  1230                           
  1231                           	psect	stringtext13
  1232  10BF                     __pstringtext13:	
  1233  10BF                     STR_28:	
  1234  10BF  345B               	retlw	91	;'['
  1235  10C0  3453               	retlw	83	;'S'
  1236  10C1  3465               	retlw	101	;'e'
  1237  10C2  3474               	retlw	116	;'t'
  1238  10C3  3420               	retlw	32	;' '
  1239  10C4  346D               	retlw	109	;'m'
  1240  10C5  3461               	retlw	97	;'a'
  1241  10C6  3473               	retlw	115	;'s'
  1242  10C7  346B               	retlw	107	;'k'
  1243  10C8  345D               	retlw	93	;']'
  1244  10C9  3420               	retlw	32	;' '
  1245  10CA  3440               	retlw	64	;'@'
  1246  10CB  346D               	retlw	109	;'m'
  1247  10CC  343C               	retlw	60	;'<'
  1248  10CD  346E               	retlw	110	;'n'
  1249  10CE  343E               	retlw	62	;'>'
  1250  10CF  343C               	retlw	60	;'<'
  1251  10D0  346D               	retlw	109	;'m'
  1252  10D1  3461               	retlw	97	;'a'
  1253  10D2  3473               	retlw	115	;'s'
  1254  10D3  346B               	retlw	107	;'k'
  1255  10D4  3428               	retlw	40	;'('
  1256  10D5  3453               	retlw	83	;'S'
  1257  10D6  3449               	retlw	73	;'I'
  1258  10D7  3444               	retlw	68	;'D'
  1259  10D8  3431               	retlw	49	;'1'
  1260  10D9  3430               	retlw	48	;'0'
  1261  10DA  3420               	retlw	32	;' '
  1262  10DB  347E               	retlw	126	;'~'
  1263  10DC  3420               	retlw	32	;' '
  1264  10DD  3453               	retlw	83	;'S'
  1265  10DE  3449               	retlw	73	;'I'
  1266  10DF  3444               	retlw	68	;'D'
  1267  10E0  3430               	retlw	48	;'0'
  1268  10E1  3429               	retlw	41	;')'
  1269  10E2  343E               	retlw	62	;'>'
  1270  10E3  340A               	retlw	10
  1271  10E4  3400               	retlw	0
  1272                           
  1273                           	psect	stringtext14
  1274  10E5                     __pstringtext14:	
  1275  10E5                     STR_30:	
  1276  10E5  345B               	retlw	91	;'['
  1277  10E6  3453               	retlw	83	;'S'
  1278  10E7  3465               	retlw	101	;'e'
  1279  10E8  346E               	retlw	110	;'n'
  1280  10E9  3464               	retlw	100	;'d'
  1281  10EA  3420               	retlw	32	;' '
  1282  10EB  346D               	retlw	109	;'m'
  1283  10EC  3465               	retlw	101	;'e'
  1284  10ED  3473               	retlw	115	;'s'
  1285  10EE  3473               	retlw	115	;'s'
  1286  10EF  3461               	retlw	97	;'a'
  1287  10F0  3467               	retlw	103	;'g'
  1288  10F1  3465               	retlw	101	;'e'
  1289  10F2  345D               	retlw	93	;']'
  1290  10F3  3420               	retlw	32	;' '
  1291  10F4  343C               	retlw	60	;'<'
  1292  10F5  346D               	retlw	109	;'m'
  1293  10F6  3465               	retlw	101	;'e'
  1294  10F7  3473               	retlw	115	;'s'
  1295  10F8  3473               	retlw	115	;'s'
  1296  10F9  3461               	retlw	97	;'a'
  1297  10FA  3467               	retlw	103	;'g'
  1298  10FB  3465               	retlw	101	;'e'
  1299  10FC  343E               	retlw	62	;'>'
  1300  10FD  340A               	retlw	10
  1301  10FE  3400               	retlw	0
  1302                           
  1303                           	psect	stringtext15
  1304  10FF                     __pstringtext15:	
  1305  10FF                     STR_36:	
  1306  10FF  340A               	retlw	10
  1307  1100  3455               	retlw	85	;'U'
  1308  1101  346E               	retlw	110	;'n'
  1309  1102  3461               	retlw	97	;'a'
  1310  1103  3462               	retlw	98	;'b'
  1311  1104  346C               	retlw	108	;'l'
  1312  1105  3465               	retlw	101	;'e'
  1313  1106  3420               	retlw	32	;' '
  1314  1107  3474               	retlw	116	;'t'
  1315  1108  346F               	retlw	111	;'o'
  1316  1109  3420               	retlw	32	;' '
  1317  110A  3473               	retlw	115	;'s'
  1318  110B  3465               	retlw	101	;'e'
  1319  110C  346E               	retlw	110	;'n'
  1320  110D  3464               	retlw	100	;'d'
  1321  110E  3420               	retlw	32	;' '
  1322  110F  346D               	retlw	109	;'m'
  1323  1110  3465               	retlw	101	;'e'
  1324  1111  3473               	retlw	115	;'s'
  1325  1112  3473               	retlw	115	;'s'
  1326  1113  3461               	retlw	97	;'a'
  1327  1114  3467               	retlw	103	;'g'
  1328  1115  3465               	retlw	101	;'e'
  1329  1116  340A               	retlw	10
  1330  1117  3400               	retlw	0
  1331                           
  1332                           	psect	stringtext16
  1333  1118                     __pstringtext16:	
  1334  1118                     STR_19:	
  1335  1118  3466               	retlw	102	;'f'
  1336  1119  3469               	retlw	105	;'i'
  1337  111A  346C               	retlw	108	;'l'
  1338  111B  3474               	retlw	116	;'t'
  1339  111C  3465               	retlw	101	;'e'
  1340  111D  3472               	retlw	114	;'r'
  1341  111E  3428               	retlw	40	;'('
  1342  111F  3425               	retlw	37	;'%'
  1343  1120  3464               	retlw	100	;'d'
  1344  1121  3429               	retlw	41	;')'
  1345  1122  343A               	retlw	58	;':'
  1346  1123  3420               	retlw	32	;' '
  1347  1124  3425               	retlw	37	;'%'
  1348  1125  3430               	retlw	48	;'0'
  1349  1126  3432               	retlw	50	;'2'
  1350  1127  3478               	retlw	120	;'x'
  1351  1128  3420               	retlw	32	;' '
  1352  1129  3425               	retlw	37	;'%'
  1353  112A  3430               	retlw	48	;'0'
  1354  112B  3432               	retlw	50	;'2'
  1355  112C  3478               	retlw	120	;'x'
  1356  112D  340A               	retlw	10
  1357  112E  3400               	retlw	0
  1358                           
  1359                           	psect	stringtext17
  1360  112F                     __pstringtext17:	
  1361  112F                     STR_32:	
  1362  112F  345B               	retlw	91	;'['
  1363  1130  3453               	retlw	83	;'S'
  1364  1131  3468               	retlw	104	;'h'
  1365  1132  346F               	retlw	111	;'o'
  1366  1133  3477               	retlw	119	;'w'
  1367  1134  3420               	retlw	32	;' '
  1368  1135  3474               	retlw	116	;'t'
  1369  1136  3468               	retlw	104	;'h'
  1370  1137  3469               	retlw	105	;'i'
  1371  1138  3473               	retlw	115	;'s'
  1372  1139  3420               	retlw	32	;' '
  1373  113A  3468               	retlw	104	;'h'
  1374  113B  3465               	retlw	101	;'e'
  1375  113C  346C               	retlw	108	;'l'
  1376  113D  3470               	retlw	112	;'p'
  1377  113E  345D               	retlw	93	;']'
  1378  113F  343A               	retlw	58	;':'
  1379  1140  3420               	retlw	32	;' '
  1380  1141  3440               	retlw	64	;'@'
  1381  1142  3468               	retlw	104	;'h'
  1382  1143  340A               	retlw	10
  1383  1144  3400               	retlw	0
  1384                           
  1385                           	psect	stringtext18
  1386  1145                     __pstringtext18:	
  1387  1145                     STR_7:	
  1388  1145  344D               	retlw	77	;'M'
  1389  1146  3465               	retlw	101	;'e'
  1390  1147  3473               	retlw	115	;'s'
  1391  1148  3473               	retlw	115	;'s'
  1392  1149  3461               	retlw	97	;'a'
  1393  114A  3467               	retlw	103	;'g'
  1394  114B  3465               	retlw	101	;'e'
  1395  114C  3420               	retlw	32	;' '
  1396  114D  3472               	retlw	114	;'r'
  1397  114E  3465               	retlw	101	;'e'
  1398  114F  3463               	retlw	99	;'c'
  1399  1150  3465               	retlw	101	;'e'
  1400  1151  3469               	retlw	105	;'i'
  1401  1152  3476               	retlw	118	;'v'
  1402  1153  3465               	retlw	101	;'e'
  1403  1154  3464               	retlw	100	;'d'
  1404  1155  343A               	retlw	58	;':'
  1405  1156  3420               	retlw	32	;' '
  1406  1157  3425               	retlw	37	;'%'
  1407  1158  3473               	retlw	115	;'s'
  1408  1159  340A               	retlw	10
  1409  115A  3400               	retlw	0
  1410                           
  1411                           	psect	stringtext19
  1412  115B                     __pstringtext19:	
  1413  115B                     STR_18:	
  1414  115B  346D               	retlw	109	;'m'
  1415  115C  3461               	retlw	97	;'a'
  1416  115D  3473               	retlw	115	;'s'
  1417  115E  346B               	retlw	107	;'k'
  1418  115F  3428               	retlw	40	;'('
  1419  1160  3425               	retlw	37	;'%'
  1420  1161  3464               	retlw	100	;'d'
  1421  1162  3429               	retlw	41	;')'
  1422  1163  343A               	retlw	58	;':'
  1423  1164  3420               	retlw	32	;' '
  1424  1165  3425               	retlw	37	;'%'
  1425  1166  3430               	retlw	48	;'0'
  1426  1167  3432               	retlw	50	;'2'
  1427  1168  3478               	retlw	120	;'x'
  1428  1169  3420               	retlw	32	;' '
  1429  116A  3425               	retlw	37	;'%'
  1430  116B  3430               	retlw	48	;'0'
  1431  116C  3432               	retlw	50	;'2'
  1432  116D  3478               	retlw	120	;'x'
  1433  116E  340A               	retlw	10
  1434  116F  3400               	retlw	0
  1435                           
  1436                           	psect	stringtext20
  1437  1170                     __pstringtext20:	
  1438  1170                     STR_12:	
  1439  1170  3443               	retlw	67	;'C'
  1440  1171  346F               	retlw	111	;'o'
  1441  1172  3470               	retlw	112	;'p'
  1442  1173  3479               	retlw	121	;'y'
  1443  1174  3469               	retlw	105	;'i'
  1444  1175  346E               	retlw	110	;'n'
  1445  1176  3467               	retlw	103	;'g'
  1446  1177  3420               	retlw	32	;' '
  1447  1178  3462               	retlw	98	;'b'
  1448  1179  3475               	retlw	117	;'u'
  1449  117A  3466               	retlw	102	;'f'
  1450  117B  3466               	retlw	102	;'f'
  1451  117C  3465               	retlw	101	;'e'
  1452  117D  3472               	retlw	114	;'r'
  1453  117E  343A               	retlw	58	;':'
  1454  117F  3420               	retlw	32	;' '
  1455  1180  3425               	retlw	37	;'%'
  1456  1181  3463               	retlw	99	;'c'
  1457  1182  340A               	retlw	10
  1458  1183  3400               	retlw	0
  1459                           
  1460                           	psect	stringtext21
  1461  1184                     __pstringtext21:	
  1462  1184                     STR_1:	
  1463  1184  3453               	retlw	83	;'S'
  1464  1185  3449               	retlw	73	;'I'
  1465  1186  3444               	retlw	68	;'D'
  1466  1187  3420               	retlw	32	;' '
  1467  1188  3473               	retlw	115	;'s'
  1468  1189  3465               	retlw	101	;'e'
  1469  118A  3474               	retlw	116	;'t'
  1470  118B  343A               	retlw	58	;':'
  1471  118C  3420               	retlw	32	;' '
  1472  118D  3425               	retlw	37	;'%'
  1473  118E  3430               	retlw	48	;'0'
  1474  118F  3432               	retlw	50	;'2'
  1475  1190  3478               	retlw	120	;'x'
  1476  1191  3420               	retlw	32	;' '
  1477  1192  3425               	retlw	37	;'%'
  1478  1193  3430               	retlw	48	;'0'
  1479  1194  3432               	retlw	50	;'2'
  1480  1195  3478               	retlw	120	;'x'
  1481  1196  340A               	retlw	10
  1482  1197  3400               	retlw	0
  1483                           
  1484                           	psect	stringtext22
  1485  1198                     __pstringtext22:	
  1486  1198                     STR_35:	
  1487  1198  340A               	retlw	10
  1488  1199  344D               	retlw	77	;'M'
  1489  119A  3465               	retlw	101	;'e'
  1490  119B  3473               	retlw	115	;'s'
  1491  119C  3473               	retlw	115	;'s'
  1492  119D  3461               	retlw	97	;'a'
  1493  119E  3467               	retlw	103	;'g'
  1494  119F  3465               	retlw	101	;'e'
  1495  11A0  3420               	retlw	32	;' '
  1496  11A1  3473               	retlw	115	;'s'
  1497  11A2  3465               	retlw	101	;'e'
  1498  11A3  346E               	retlw	110	;'n'
  1499  11A4  3474               	retlw	116	;'t'
  1500  11A5  343A               	retlw	58	;':'
  1501  11A6  3420               	retlw	32	;' '
  1502  11A7  3425               	retlw	37	;'%'
  1503  11A8  3473               	retlw	115	;'s'
  1504  11A9  340A               	retlw	10
  1505  11AA  3400               	retlw	0
  1506                           
  1507                           	psect	stringtext23
  1508  11AB                     __pstringtext23:	
  1509  11AB                     STR_38:	
  1510  11AB  3430               	retlw	48	;'0'
  1511  11AC  3431               	retlw	49	;'1'
  1512  11AD  3432               	retlw	50	;'2'
  1513  11AE  3433               	retlw	51	;'3'
  1514  11AF  3434               	retlw	52	;'4'
  1515  11B0  3435               	retlw	53	;'5'
  1516  11B1  3436               	retlw	54	;'6'
  1517  11B2  3437               	retlw	55	;'7'
  1518  11B3  3438               	retlw	56	;'8'
  1519  11B4  3439               	retlw	57	;'9'
  1520  11B5  3461               	retlw	97	;'a'
  1521  11B6  3462               	retlw	98	;'b'
  1522  11B7  3463               	retlw	99	;'c'
  1523  11B8  3464               	retlw	100	;'d'
  1524  11B9  3465               	retlw	101	;'e'
  1525  11BA  3466               	retlw	102	;'f'
  1526  11BB  3400               	retlw	0
  1527                           
  1528                           	psect	stringtext24
  1529  11BC                     __pstringtext24:	
  1530  11BC                     STR_3:	
  1531  11BC  3452               	retlw	82	;'R'
  1532  11BD  3458               	retlw	88	;'X'
  1533  11BE  3442               	retlw	66	;'B'
  1534  11BF  3425               	retlw	37	;'%'
  1535  11C0  3464               	retlw	100	;'d'
  1536  11C1  3453               	retlw	83	;'S'
  1537  11C2  3449               	retlw	73	;'I'
  1538  11C3  3444               	retlw	68	;'D'
  1539  11C4  3448               	retlw	72	;'H'
  1540  11C5  343A               	retlw	58	;':'
  1541  11C6  3420               	retlw	32	;' '
  1542  11C7  3425               	retlw	37	;'%'
  1543  11C8  3430               	retlw	48	;'0'
  1544  11C9  3432               	retlw	50	;'2'
  1545  11CA  3478               	retlw	120	;'x'
  1546  11CB  340A               	retlw	10
  1547  11CC  3400               	retlw	0
  1548                           
  1549                           	psect	stringtext25
  1550  11CD                     __pstringtext25:	
  1551  11CD                     STR_13:	
  1552  11CD  3454               	retlw	84	;'T'
  1553  11CE  3458               	retlw	88	;'X'
  1554  11CF  3442               	retlw	66	;'B'
  1555  11D0  3425               	retlw	37	;'%'
  1556  11D1  3464               	retlw	100	;'d'
  1557  11D2  3453               	retlw	83	;'S'
  1558  11D3  3449               	retlw	73	;'I'
  1559  11D4  3444               	retlw	68	;'D'
  1560  11D5  3448               	retlw	72	;'H'
  1561  11D6  343A               	retlw	58	;':'
  1562  11D7  3420               	retlw	32	;' '
  1563  11D8  3425               	retlw	37	;'%'
  1564  11D9  3430               	retlw	48	;'0'
  1565  11DA  3432               	retlw	50	;'2'
  1566  11DB  3478               	retlw	120	;'x'
  1567  11DC  340A               	retlw	10
  1568  11DD  3400               	retlw	0
  1569                           
  1570                           	psect	stringtext26
  1571  11DE                     __pstringtext26:	
  1572  11DE                     STR_22:	
  1573  11DE  3452               	retlw	82	;'R'
  1574  11DF  3458               	retlw	88	;'X'
  1575  11E0  3446               	retlw	70	;'F'
  1576  11E1  3425               	retlw	37	;'%'
  1577  11E2  3464               	retlw	100	;'d'
  1578  11E3  3453               	retlw	83	;'S'
  1579  11E4  3449               	retlw	73	;'I'
  1580  11E5  3444               	retlw	68	;'D'
  1581  11E6  3448               	retlw	72	;'H'
  1582  11E7  343A               	retlw	58	;':'
  1583  11E8  3420               	retlw	32	;' '
  1584  11E9  3425               	retlw	37	;'%'
  1585  11EA  3430               	retlw	48	;'0'
  1586  11EB  3432               	retlw	50	;'2'
  1587  11EC  3478               	retlw	120	;'x'
  1588  11ED  340A               	retlw	10
  1589  11EE  3400               	retlw	0
  1590                           
  1591                           	psect	stringtext27
  1592  11EF                     __pstringtext27:	
  1593  11EF                     STR_20:	
  1594  11EF  3452               	retlw	82	;'R'
  1595  11F0  3458               	retlw	88	;'X'
  1596  11F1  344D               	retlw	77	;'M'
  1597  11F2  3425               	retlw	37	;'%'
  1598  11F3  3464               	retlw	100	;'d'
  1599  11F4  3453               	retlw	83	;'S'
  1600  11F5  3449               	retlw	73	;'I'
  1601  11F6  3444               	retlw	68	;'D'
  1602  11F7  3448               	retlw	72	;'H'
  1603  11F8  343A               	retlw	58	;':'
  1604  11F9  3420               	retlw	32	;' '
  1605  11FA  3425               	retlw	37	;'%'
  1606  11FB  3430               	retlw	48	;'0'
  1607  11FC  3432               	retlw	50	;'2'
  1608  11FD  3478               	retlw	120	;'x'
  1609  11FE  340A               	retlw	10
  1610  11FF  3400               	retlw	0
  1611                           
  1612                           	psect	stringtext28
  1613  1200                     __pstringtext28:	
  1614  1200                     STR_4:	
  1615  1200  3452               	retlw	82	;'R'
  1616  1201  3458               	retlw	88	;'X'
  1617  1202  3442               	retlw	66	;'B'
  1618  1203  3425               	retlw	37	;'%'
  1619  1204  3464               	retlw	100	;'d'
  1620  1205  3453               	retlw	83	;'S'
  1621  1206  3449               	retlw	73	;'I'
  1622  1207  3444               	retlw	68	;'D'
  1623  1208  344C               	retlw	76	;'L'
  1624  1209  343A               	retlw	58	;':'
  1625  120A  3420               	retlw	32	;' '
  1626  120B  3425               	retlw	37	;'%'
  1627  120C  3430               	retlw	48	;'0'
  1628  120D  3432               	retlw	50	;'2'
  1629  120E  3478               	retlw	120	;'x'
  1630  120F  340A               	retlw	10
  1631  1210  3400               	retlw	0
  1632                           
  1633                           	psect	stringtext29
  1634  1211                     __pstringtext29:	
  1635  1211                     STR_14:	
  1636  1211  3454               	retlw	84	;'T'
  1637  1212  3458               	retlw	88	;'X'
  1638  1213  3442               	retlw	66	;'B'
  1639  1214  3425               	retlw	37	;'%'
  1640  1215  3464               	retlw	100	;'d'
  1641  1216  3453               	retlw	83	;'S'
  1642  1217  3449               	retlw	73	;'I'
  1643  1218  3444               	retlw	68	;'D'
  1644  1219  344C               	retlw	76	;'L'
  1645  121A  343A               	retlw	58	;':'
  1646  121B  3420               	retlw	32	;' '
  1647  121C  3425               	retlw	37	;'%'
  1648  121D  3430               	retlw	48	;'0'
  1649  121E  3432               	retlw	50	;'2'
  1650  121F  3478               	retlw	120	;'x'
  1651  1220  340A               	retlw	10
  1652  1221  3400               	retlw	0
  1653                           
  1654                           	psect	stringtext30
  1655  1222                     __pstringtext30:	
  1656  1222                     STR_23:	
  1657  1222  3452               	retlw	82	;'R'
  1658  1223  3458               	retlw	88	;'X'
  1659  1224  3446               	retlw	70	;'F'
  1660  1225  3425               	retlw	37	;'%'
  1661  1226  3464               	retlw	100	;'d'
  1662  1227  3453               	retlw	83	;'S'
  1663  1228  3449               	retlw	73	;'I'
  1664  1229  3444               	retlw	68	;'D'
  1665  122A  344C               	retlw	76	;'L'
  1666  122B  343A               	retlw	58	;':'
  1667  122C  3420               	retlw	32	;' '
  1668  122D  3425               	retlw	37	;'%'
  1669  122E  3430               	retlw	48	;'0'
  1670  122F  3432               	retlw	50	;'2'
  1671  1230  3478               	retlw	120	;'x'
  1672  1231  340A               	retlw	10
  1673  1232  3400               	retlw	0
  1674                           
  1675                           	psect	stringtext31
  1676  1233                     __pstringtext31:	
  1677  1233                     STR_21:	
  1678  1233  3452               	retlw	82	;'R'
  1679  1234  3458               	retlw	88	;'X'
  1680  1235  344D               	retlw	77	;'M'
  1681  1236  3425               	retlw	37	;'%'
  1682  1237  3464               	retlw	100	;'d'
  1683  1238  3453               	retlw	83	;'S'
  1684  1239  3449               	retlw	73	;'I'
  1685  123A  3444               	retlw	68	;'D'
  1686  123B  344C               	retlw	76	;'L'
  1687  123C  343A               	retlw	58	;':'
  1688  123D  3420               	retlw	32	;' '
  1689  123E  3425               	retlw	37	;'%'
  1690  123F  3430               	retlw	48	;'0'
  1691  1240  3432               	retlw	50	;'2'
  1692  1241  3478               	retlw	120	;'x'
  1693  1242  340A               	retlw	10
  1694  1243  3400               	retlw	0
  1695                           
  1696                           	psect	stringtext32
  1697  1244                     __pstringtext32:	
  1698  1244                     STR_5:	
  1699  1244  3452               	retlw	82	;'R'
  1700  1245  3458               	retlw	88	;'X'
  1701  1246  3442               	retlw	66	;'B'
  1702  1247  3425               	retlw	37	;'%'
  1703  1248  3464               	retlw	100	;'d'
  1704  1249  3444               	retlw	68	;'D'
  1705  124A  344C               	retlw	76	;'L'
  1706  124B  3443               	retlw	67	;'C'
  1707  124C  343A               	retlw	58	;':'
  1708  124D  3420               	retlw	32	;' '
  1709  124E  3425               	retlw	37	;'%'
  1710  124F  3430               	retlw	48	;'0'
  1711  1250  3432               	retlw	50	;'2'
  1712  1251  3478               	retlw	120	;'x'
  1713  1252  340A               	retlw	10
  1714  1253  3400               	retlw	0
  1715                           
  1716                           	psect	stringtext33
  1717  1254                     __pstringtext33:	
  1718  1254                     STR_6:	
  1719  1254  3452               	retlw	82	;'R'
  1720  1255  3458               	retlw	88	;'X'
  1721  1256  3442               	retlw	66	;'B'
  1722  1257  3425               	retlw	37	;'%'
  1723  1258  3464               	retlw	100	;'d'
  1724  1259  3444               	retlw	68	;'D'
  1725  125A  3430               	retlw	48	;'0'
  1726  125B  343A               	retlw	58	;':'
  1727  125C  3420               	retlw	32	;' '
  1728  125D  3425               	retlw	37	;'%'
  1729  125E  3430               	retlw	48	;'0'
  1730  125F  3432               	retlw	50	;'2'
  1731  1260  3478               	retlw	120	;'x'
  1732  1261  340A               	retlw	10
  1733  1262  3400               	retlw	0
  1734                           
  1735                           	psect	stringtext34
  1736  1263                     __pstringtext34:	
  1737  1263                     STR_2:	
  1738  1263  3443               	retlw	67	;'C'
  1739  1264  3441               	retlw	65	;'A'
  1740  1265  344E               	retlw	78	;'N'
  1741  1266  3453               	retlw	83	;'S'
  1742  1267  3454               	retlw	84	;'T'
  1743  1268  3441               	retlw	65	;'A'
  1744  1269  3454               	retlw	84	;'T'
  1745  126A  343A               	retlw	58	;':'
  1746  126B  3420               	retlw	32	;' '
  1747  126C  3425               	retlw	37	;'%'
  1748  126D  3430               	retlw	48	;'0'
  1749  126E  3432               	retlw	50	;'2'
  1750  126F  3478               	retlw	120	;'x'
  1751  1270  340A               	retlw	10
  1752  1271  3400               	retlw	0
  1753                           
  1754                           	psect	stringtext35
  1755  1272                     __pstringtext35:	
  1756  1272                     STR_24:	
  1757  1272  342D               	retlw	45	;'-'
  1758  1273  342D               	retlw	45	;'-'
  1759  1274  342D               	retlw	45	;'-'
  1760  1275  3420               	retlw	32	;' '
  1761  1276  3448               	retlw	72	;'H'
  1762  1277  3445               	retlw	69	;'E'
  1763  1278  344C               	retlw	76	;'L'
  1764  1279  3450               	retlw	80	;'P'
  1765  127A  3420               	retlw	32	;' '
  1766  127B  342D               	retlw	45	;'-'
  1767  127C  342D               	retlw	45	;'-'
  1768  127D  342D               	retlw	45	;'-'
  1769  127E  340A               	retlw	10
  1770  127F  3400               	retlw	0
  1771                           
  1772                           	psect	stringtext36
  1773  1280                     __pstringtext36:	
  1774  1280                     STR_9:	
  1775  1280  3454               	retlw	84	;'T'
  1776  1281  3458               	retlw	88	;'X'
  1777  1282  3442               	retlw	66	;'B'
  1778  1283  3430               	retlw	48	;'0'
  1779  1284  3420               	retlw	32	;' '
  1780  1285  3469               	retlw	105	;'i'
  1781  1286  3473               	retlw	115	;'s'
  1782  1287  3420               	retlw	32	;' '
  1783  1288  3469               	retlw	105	;'i'
  1784  1289  3464               	retlw	100	;'d'
  1785  128A  346C               	retlw	108	;'l'
  1786  128B  3465               	retlw	101	;'e'
  1787  128C  340A               	retlw	10
  1788  128D  3400               	retlw	0
  1789                           
  1790                           	psect	stringtext37
  1791  128E                     __pstringtext37:	
  1792  128E                     STR_10:	
  1793  128E  3454               	retlw	84	;'T'
  1794  128F  3458               	retlw	88	;'X'
  1795  1290  3442               	retlw	66	;'B'
  1796  1291  3431               	retlw	49	;'1'
  1797  1292  3420               	retlw	32	;' '
  1798  1293  3469               	retlw	105	;'i'
  1799  1294  3473               	retlw	115	;'s'
  1800  1295  3420               	retlw	32	;' '
  1801  1296  3469               	retlw	105	;'i'
  1802  1297  3464               	retlw	100	;'d'
  1803  1298  346C               	retlw	108	;'l'
  1804  1299  3465               	retlw	101	;'e'
  1805  129A  340A               	retlw	10
  1806  129B  3400               	retlw	0
  1807                           
  1808                           	psect	stringtext38
  1809  129C                     __pstringtext38:	
  1810  129C                     STR_11:	
  1811  129C  3454               	retlw	84	;'T'
  1812  129D  3458               	retlw	88	;'X'
  1813  129E  3442               	retlw	66	;'B'
  1814  129F  3432               	retlw	50	;'2'
  1815  12A0  3420               	retlw	32	;' '
  1816  12A1  3469               	retlw	105	;'i'
  1817  12A2  3473               	retlw	115	;'s'
  1818  12A3  3420               	retlw	32	;' '
  1819  12A4  3469               	retlw	105	;'i'
  1820  12A5  3464               	retlw	100	;'d'
  1821  12A6  346C               	retlw	108	;'l'
  1822  12A7  3465               	retlw	101	;'e'
  1823  12A8  340A               	retlw	10
  1824  12A9  3400               	retlw	0
  1825                           
  1826                           	psect	stringtext39
  1827  12AA                     __pstringtext39:	
  1828  12AA                     STR_15:	
  1829  12AA  3452               	retlw	82	;'R'
  1830  12AB  3458               	retlw	88	;'X'
  1831  12AC  3430               	retlw	48	;'0'
  1832  12AD  3449               	retlw	73	;'I'
  1833  12AE  3446               	retlw	70	;'F'
  1834  12AF  3420               	retlw	32	;' '
  1835  12B0  3469               	retlw	105	;'i'
  1836  12B1  3473               	retlw	115	;'s'
  1837  12B2  3420               	retlw	32	;' '
  1838  12B3  346F               	retlw	111	;'o'
  1839  12B4  346E               	retlw	110	;'n'
  1840  12B5  340A               	retlw	10
  1841  12B6  3400               	retlw	0
  1842                           
  1843                           	psect	stringtext40
  1844  12B7                     __pstringtext40:	
  1845  12B7                     STR_16:	
  1846  12B7  3452               	retlw	82	;'R'
  1847  12B8  3458               	retlw	88	;'X'
  1848  12B9  3431               	retlw	49	;'1'
  1849  12BA  3449               	retlw	73	;'I'
  1850  12BB  3446               	retlw	70	;'F'
  1851  12BC  3420               	retlw	32	;' '
  1852  12BD  3469               	retlw	105	;'i'
  1853  12BE  3473               	retlw	115	;'s'
  1854  12BF  3420               	retlw	32	;' '
  1855  12C0  346F               	retlw	111	;'o'
  1856  12C1  346E               	retlw	110	;'n'
  1857  12C2  340A               	retlw	10
  1858  12C3  3400               	retlw	0
  1859                           
  1860                           	psect	stringtext41
  1861  12D6                     __pstringtext41:	
  1862  12D6                     STR_37:	
  1863  12D6  3428               	retlw	40	;'('
  1864  12D7  346E               	retlw	110	;'n'
  1865  12D8  3475               	retlw	117	;'u'
  1866  12D9  346C               	retlw	108	;'l'
  1867  12DA  346C               	retlw	108	;'l'
  1868  12DB  3429               	retlw	41	;')'
  1869  12DC  3400               	retlw	0
  1870                           
  1871                           	psect	stringtext42
  1872  12E9                     __pstringtext42:	
  1873  12E9                     STR_17:	
  1874  12E9  3425               	retlw	37	;'%'
  1875  12EA  3463               	retlw	99	;'c'
  1876  12EB  3400               	retlw	0
  1877                           
  1878                           	psect	stringtext43
  1879  0000                     __pstringtext43:	
  1880  1100                     
  1881                           ; #config settings
  1882  0000                     
  1883                           	psect	cinit
  1884  07DE                     start_initialization:	
  1885  07DE                     __initialization:	
  1886                           
  1887                           ; Initialize objects allocated to BANK0
  1888  07DE  318E  269D  3187   	fcall	__pidataBANK0	;fetch initializer
  1889  07E1  00E8               	movwf	__pdataBANK0& (0+127)
  1890  07E2  318E  269E  3187   	fcall	__pidataBANK0+1	;fetch initializer
  1891  07E5  00E9               	movwf	(__pdataBANK0+1)& (0+127)
  1892  07E6  318E  269F  3187   	fcall	__pidataBANK0+2	;fetch initializer
  1893  07E9  00EA               	movwf	(__pdataBANK0+2)& (0+127)
  1894  07EA  318E  26A0  3187   	fcall	__pidataBANK0+3	;fetch initializer
  1895  07ED  00EB               	movwf	(__pdataBANK0+3)& (0+127)
  1896                           
  1897                           ; Clear objects allocated to BANK0
  1898  07EE  3061               	movlw	low __pbssBANK0
  1899  07EF  0084               	movwf	4
  1900  07F0  3000               	movlw	high __pbssBANK0
  1901  07F1  0085               	movwf	5
  1902  07F2  3007               	movlw	7
  1903  07F3  318E  26A6  3187   	fcall	clear_ram0
  1904                           
  1905                           ; Clear objects allocated to BANK1
  1906  07F6  30A0               	movlw	low __pbssBANK1
  1907  07F7  0084               	movwf	4
  1908  07F8  3000               	movlw	high __pbssBANK1
  1909  07F9  0085               	movwf	5
  1910  07FA  3026               	movlw	38
  1911  07FB  318E  26A6         	fcall	clear_ram0
  1912  07FD                     end_of_initialization:	
  1913                           ;End of C runtime variable initialization code
  1914                           
  1915  07FD                     __end_of__initialization:	
  1916  07FD  0020               	movlb	0
  1917  07FE  3185  2D8F         	ljmp	_main	;jump to C main() function
  1918                           
  1919                           	psect	bssBANK0
  1920  0061                     __pbssBANK0:	
  1921  0061                     _sid:	
  1922  0061                     	ds	2
  1923  0063                     _ope_mode:	
  1924  0063                     	ds	1
  1925  0064                     _verbose:	
  1926  0064                     	ds	1
  1927  0065                     _debug:	
  1928  0065                     	ds	1
  1929  0066                     _idx:	
  1930  0066                     	ds	1
  1931  0067                     _c:	
  1932  0067                     	ds	1
  1933                           
  1934                           	psect	dataBANK0
  1935  0068                     __pdataBANK0:	
  1936  0068                     can_status_check@F2962:	
  1937  0068                     	ds	2
  1938  006A                     can_send@F2953:	
  1939  006A                     	ds	2
  1940                           
  1941                           	psect	bssBANK1
  1942  00A0                     __pbssBANK1:	
  1943  00A0                     _rx_buf:	
  1944  00A0                     	ds	15
  1945  00AF                     _tx_buf:	
  1946  00AF                     	ds	14
  1947  00BD                     _buf:	
  1948  00BD                     	ds	9
  1949                           
  1950                           	psect	clrtext
  1951  0EA6                     clear_ram0:	
  1952                           ;	Called with FSR0 containing the base address, and
  1953                           ;	WREG with the size to clear
  1954                           
  1955  0EA6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1956  0EA7                     clrloop0:	
  1957  0EA7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1958  0EA8  3101               	addfsr 0,1
  1959  0EA9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1960  0EAA  2EA7               	goto	clrloop0	;have we reached the end yet?
  1961  0EAB  3400               	retlw	0	;all done for this memory range, return
  1962                           
  1963                           	psect	cstackCOMMON
  1964  0070                     __pcstackCOMMON:	
  1965  0070                     ?_isdigit:	
  1966  0070                     ?_PIN_MANAGER_Initialize:	
  1967                           ; 1 bit 
  1968                           
  1969  0070                     ??_PIN_MANAGER_Initialize:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?_OSCILLATOR_Initialize:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ??_OSCILLATOR_Initialize:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_WDT_Initialize:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ??_WDT_Initialize:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_SPI_Initialize:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ??_SPI_Initialize:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ?_EUSART_Initialize:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ??_EUSART_Initialize:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ??_isdigit:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_SYSTEM_Initialize:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ??_SYSTEM_Initialize:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_EUSART_Read:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ??_EUSART_Read:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_EUSART_Write:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ??_EUSART_Write:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_putch:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_SPI_Exchange8bit:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ??_SPI_Exchange8bit:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_can_ope_mode:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ?_can_txf_clear:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ?_can_receive:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     ?_can_status_check:	
  2036                           ; 1 bytes @ 0x0
  2037                           
  2038  0070                     ?_main:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ?___wmul:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ?___lwdiv:	
  2045                           ; 2 bytes @ 0x0
  2046                           
  2047  0070                     EUSART_Write@txData:	
  2048                           ; 2 bytes @ 0x0
  2049                           
  2050  0070                     SPI_Exchange8bit@data:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     _isdigit$649:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ___wmul@multiplier:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ___lwdiv@divisor:	
  2060                           ; 2 bytes @ 0x0
  2061                           
  2062                           
  2063                           ; 2 bytes @ 0x0
  2064  0070                     	ds	1
  2065  0071                     ??_putch:	
  2066  0071                     ?_SPI_Exchange8bitBuffer:	
  2067                           ; 1 bytes @ 0x1
  2068                           
  2069  0071                     putch@txData:	
  2070                           ; 1 bytes @ 0x1
  2071                           
  2072  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2073                           ; 1 bytes @ 0x1
  2074                           
  2075  0071                     isdigit@c:	
  2076                           ; 1 bytes @ 0x1
  2077                           
  2078                           
  2079                           ; 1 bytes @ 0x1
  2080  0071                     	ds	1
  2081  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2082  0072                     ___wmul@multiplicand:	
  2083                           ; 1 bytes @ 0x2
  2084                           
  2085  0072                     ___lwdiv@dividend:	
  2086                           ; 2 bytes @ 0x2
  2087                           
  2088                           
  2089                           ; 2 bytes @ 0x2
  2090  0072                     	ds	1
  2091  0073                     ??_SPI_Exchange8bitBuffer:	
  2092                           
  2093                           ; 1 bytes @ 0x3
  2094  0073                     	ds	1
  2095  0074                     ??___wmul:	
  2096  0074                     ??___lwdiv:	
  2097                           ; 1 bytes @ 0x4
  2098                           
  2099  0074                     ___wmul@product:	
  2100                           ; 1 bytes @ 0x4
  2101                           
  2102                           
  2103                           ; 2 bytes @ 0x4
  2104  0074                     	ds	1
  2105  0075                     ___lwdiv@quotient:	
  2106                           
  2107                           ; 2 bytes @ 0x5
  2108  0075                     	ds	1
  2109  0076                     ?_atoi:	
  2110  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2111                           ; 2 bytes @ 0x6
  2112                           
  2113                           
  2114                           ; 1 bytes @ 0x6
  2115  0076                     	ds	1
  2116  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2117  0077                     ___lwdiv@counter:	
  2118                           ; 1 bytes @ 0x7
  2119                           
  2120                           
  2121                           ; 1 bytes @ 0x7
  2122  0077                     	ds	1
  2123  0078                     ??_atoi:	
  2124  0078                     ?_SPI_send:	
  2125                           ; 1 bytes @ 0x8
  2126                           
  2127  0078                     ?___lwmod:	
  2128                           ; 1 bytes @ 0x8
  2129                           
  2130  0078                     SPI_send@len:	
  2131                           ; 2 bytes @ 0x8
  2132                           
  2133  0078                     ___lwmod@divisor:	
  2134                           ; 1 bytes @ 0x8
  2135                           
  2136                           
  2137                           ; 2 bytes @ 0x8
  2138  0078                     	ds	1
  2139  0079                     SPI_send@rbuf:	
  2140                           
  2141                           ; 1 bytes @ 0x9
  2142  0079                     	ds	1
  2143  007A                     ??_SPI_send:	
  2144  007A                     atoi@sign:	
  2145                           ; 1 bytes @ 0xA
  2146                           
  2147  007A                     ___lwmod@dividend:	
  2148                           ; 1 bytes @ 0xA
  2149                           
  2150                           
  2151                           ; 2 bytes @ 0xA
  2152  007A                     	ds	1
  2153  007B                     atoi@a:	
  2154                           
  2155                           ; 2 bytes @ 0xB
  2156  007B                     	ds	1
  2157  007C                     ??___lwmod:	
  2158                           
  2159                           ; 1 bytes @ 0xC
  2160  007C                     	ds	1
  2161  007D                     atoi@s:	
  2162  007D                     ___lwmod@counter:	
  2163                           ; 1 bytes @ 0xD
  2164                           
  2165                           
  2166                           ; 1 bytes @ 0xD
  2167  007D                     	ds	1
  2168                           
  2169                           	psect	cstackBANK0
  2170  0020                     __pcstackBANK0:	
  2171  0020                     ?_printf:	
  2172  0020                     SPI_send@bytes_written:	
  2173                           ; 2 bytes @ 0x0
  2174                           
  2175  0020                     printf@f:	
  2176                           ; 1 bytes @ 0x0
  2177                           
  2178                           
  2179                           ; 2 bytes @ 0x0
  2180  0020                     	ds	1
  2181  0021                     SPI_send@sbuf:	
  2182                           
  2183                           ; 1 bytes @ 0x1
  2184  0021                     	ds	1
  2185  0022                     ??_can_txf_clear:	
  2186                           
  2187                           ; 1 bytes @ 0x2
  2188  0022                     	ds	3
  2189  0025                     can_txf_clear@n:	
  2190                           
  2191                           ; 1 bytes @ 0x5
  2192  0025                     	ds	1
  2193  0026                     can_txf_clear@mask:	
  2194                           
  2195                           ; 1 bytes @ 0x6
  2196  0026                     	ds	1
  2197  0027                     can_txf_clear@bytes_written:	
  2198                           
  2199                           ; 1 bytes @ 0x7
  2200  0027                     	ds	1
  2201  0028                     ??_printf:	
  2202  0028                     can_txf_clear@can_int_flag:	
  2203                           ; 1 bytes @ 0x8
  2204                           
  2205                           
  2206                           ; 4 bytes @ 0x8
  2207  0028                     	ds	4
  2208  002C                     printf@idx:	
  2209                           
  2210                           ; 1 bytes @ 0xC
  2211  002C                     	ds	1
  2212  002D                     printf@prec:	
  2213                           
  2214                           ; 1 bytes @ 0xD
  2215  002D                     	ds	1
  2216  002E                     printf@cp:	
  2217                           
  2218                           ; 2 bytes @ 0xE
  2219  002E                     	ds	2
  2220  0030                     printf@len:	
  2221                           
  2222                           ; 2 bytes @ 0x10
  2223  0030                     	ds	2
  2224  0032                     printf@ap:	
  2225                           
  2226                           ; 1 bytes @ 0x12
  2227  0032                     	ds	1
  2228  0033                     printf@val:	
  2229                           
  2230                           ; 2 bytes @ 0x13
  2231  0033                     	ds	2
  2232  0035                     printf@flag:	
  2233                           
  2234                           ; 1 bytes @ 0x15
  2235  0035                     	ds	1
  2236  0036                     printf@width:	
  2237                           
  2238                           ; 2 bytes @ 0x16
  2239  0036                     	ds	2
  2240  0038                     printf@c:	
  2241                           
  2242                           ; 1 bytes @ 0x18
  2243  0038                     	ds	1
  2244  0039                     ?_set_sid:	
  2245  0039                     ??_can_ope_mode:	
  2246                           ; 1 bytes @ 0x19
  2247                           
  2248  0039                     ??_can_receive:	
  2249                           ; 1 bytes @ 0x19
  2250                           
  2251  0039                     ?_can_send:	
  2252                           ; 1 bytes @ 0x19
  2253                           
  2254  0039                     can_send@dlc:	
  2255                           ; 1 bytes @ 0x19
  2256                           
  2257  0039                     set_sid@can_node:	
  2258                           ; 1 bytes @ 0x19
  2259                           
  2260                           
  2261                           ; 2 bytes @ 0x19
  2262  0039                     	ds	1
  2263  003A                     ??_can_send:	
  2264                           
  2265                           ; 1 bytes @ 0x1A
  2266  003A                     	ds	1
  2267  003B                     ??_set_sid:	
  2268                           
  2269                           ; 1 bytes @ 0x1B
  2270  003B                     	ds	1
  2271  003C                     can_ope_mode@ope_mode:	
  2272                           
  2273                           ; 1 bytes @ 0x1C
  2274  003C                     	ds	1
  2275  003D                     can_ope_mode@bytes_written:	
  2276  003D                     can_receive@bytes_read:	
  2277                           ; 1 bytes @ 0x1D
  2278                           
  2279                           
  2280                           ; 1 bytes @ 0x1D
  2281  003D                     	ds	1
  2282  003E                     can_receive@dlc:	
  2283  003E                     can_send@buf:	
  2284                           ; 1 bytes @ 0x1E
  2285                           
  2286  003E                     can_ope_mode@can_ctrl_buf:	
  2287                           ; 1 bytes @ 0x1E
  2288                           
  2289                           
  2290                           ; 3 bytes @ 0x1E
  2291  003E                     	ds	1
  2292  003F                     set_sid@sidh:	
  2293  003F                     can_receive@rx_buf_ptr:	
  2294                           ; 1 bytes @ 0x1F
  2295                           
  2296  003F                     can_send@can_status_buf:	
  2297                           ; 1 bytes @ 0x1F
  2298                           
  2299                           
  2300                           ; 2 bytes @ 0x1F
  2301  003F                     	ds	1
  2302  0040                     set_sid@sidl:	
  2303  0040                     can_receive@n:	
  2304                           ; 1 bytes @ 0x20
  2305                           
  2306                           
  2307                           ; 1 bytes @ 0x20
  2308  0040                     	ds	1
  2309  0041                     ??_can_status_check:	
  2310  0041                     can_send@len:	
  2311                           ; 1 bytes @ 0x21
  2312                           
  2313                           
  2314                           ; 1 bytes @ 0x21
  2315  0041                     	ds	1
  2316  0042                     can_send@bytes_written:	
  2317                           
  2318                           ; 1 bytes @ 0x22
  2319  0042                     	ds	1
  2320  0043                     can_send@status:	
  2321                           
  2322                           ; 1 bytes @ 0x23
  2323  0043                     	ds	1
  2324  0044                     can_send@txb_ctrl_buf:	
  2325  0044                     can_status_check@bytes_written:	
  2326                           ; 1 bytes @ 0x24
  2327                           
  2328                           
  2329                           ; 1 bytes @ 0x24
  2330  0044                     	ds	1
  2331  0045                     can_status_check@can_status_buf:	
  2332  0045                     can_send@debug_buf:	
  2333                           ; 2 bytes @ 0x25
  2334                           
  2335                           
  2336                           ; 3 bytes @ 0x25
  2337  0045                     	ds	2
  2338  0047                     can_status_check@status:	
  2339                           
  2340                           ; 1 bytes @ 0x27
  2341  0047                     	ds	1
  2342  0048                     can_send@i:	
  2343                           
  2344                           ; 1 bytes @ 0x28
  2345  0048                     	ds	1
  2346  0049                     can_send@n:	
  2347                           
  2348                           ; 1 bytes @ 0x29
  2349  0049                     	ds	1
  2350  004A                     ??_main:	
  2351                           
  2352                           ; 1 bytes @ 0x2A
  2353  004A                     	ds	6
  2354  0050                     _main$399:	
  2355                           
  2356                           ; 2 bytes @ 0x30
  2357  0050                     	ds	2
  2358  0052                     _main$400:	
  2359                           
  2360                           ; 2 bytes @ 0x32
  2361  0052                     	ds	2
  2362  0054                     main@sid:	
  2363                           
  2364                           ; 1 bytes @ 0x34
  2365  0054                     	ds	1
  2366  0055                     main@rc:	
  2367                           
  2368                           ; 1 bytes @ 0x35
  2369  0055                     	ds	1
  2370  0056                     main@rc_418:	
  2371                           
  2372                           ; 1 bytes @ 0x36
  2373  0056                     	ds	1
  2374  0057                     main@mask:	
  2375                           
  2376                           ; 2 bytes @ 0x37
  2377  0057                     	ds	2
  2378  0059                     main@mask_sidh:	
  2379                           
  2380                           ; 1 bytes @ 0x39
  2381  0059                     	ds	1
  2382  005A                     main@mask_sidl:	
  2383                           
  2384                           ; 1 bytes @ 0x3A
  2385  005A                     	ds	1
  2386  005B                     main@mask_buf:	
  2387                           
  2388                           ; 4 bytes @ 0x3B
  2389  005B                     	ds	4
  2390  005F                     main@cmd:	
  2391                           
  2392                           ; 1 bytes @ 0x3F
  2393  005F                     	ds	1
  2394  0060                     main@n:	
  2395                           
  2396                           ; 1 bytes @ 0x40
  2397  0060                     	ds	1
  2398                           
  2399                           	psect	maintext
  2400  058F                     __pmaintext:	
  2401 ;;
  2402 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2403 ;;
  2404 ;; *************** function _main *****************
  2405 ;; Defined at:
  2406 ;;		line 233 in file "main.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  rc              1   53[BANK0 ] unsigned char 
  2411 ;;  mask_buf        4   59[BANK0 ] unsigned char [4]
  2412 ;;  mask            2   55[BANK0 ] unsigned int 
  2413 ;;  n               1   64[BANK0 ] unsigned char 
  2414 ;;  cmd             1   63[BANK0 ] unsigned char 
  2415 ;;  mask_sidl       1   58[BANK0 ] unsigned char 
  2416 ;;  mask_sidh       1   57[BANK0 ] unsigned char 
  2417 ;;  sid             1   52[BANK0 ] unsigned char 
  2418 ;;  rc              1   54[BANK0 ] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : B1F/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2429 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2430 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2431 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2432 ;;Total ram usage:       23 bytes
  2433 ;; Hardware stack levels required when called:    5
  2434 ;; This function calls:
  2435 ;;		_EUSART_Read
  2436 ;;		_SPI_send
  2437 ;;		_SYSTEM_Initialize
  2438 ;;		_atoi
  2439 ;;		_can_ope_mode
  2440 ;;		_can_send
  2441 ;;		_can_status_check
  2442 ;;		_printf
  2443 ;;		_set_sid
  2444 ;; This function is called by:
  2445 ;;		Startup code after reset
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           
  2450                           ;psect for function _main
  2451  058F                     _main:	
  2452                           
  2453                           ;main.c: 235: SYSTEM_Initialize();
  2454                           
  2455                           ;incstack = 0
  2456                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2457  058F  3180  2005  3185   	fcall	_SYSTEM_Initialize
  2458                           
  2459                           ;main.c: 240: set_sid(0);
  2460  0592  3000               	movlw	0
  2461  0593  0020               	movlb	0	; select bank0
  2462  0594  00B9               	movwf	set_sid@can_node
  2463  0595  00BA               	movwf	set_sid@can_node+1
  2464  0596  318F  27C5  3185   	fcall	_set_sid
  2465  0599                     L7:	
  2466                           
  2467                           ;main.c: 241: ope_mode = 0b00000000;
  2468  0599  0020               	movlb	0	; select bank0
  2469  059A  01E3               	clrf	_ope_mode
  2470                           
  2471                           ;main.c: 242: can_ope_mode(0b00000000);
  2472  059B  3000               	movlw	0
  2473  059C                     L6:	
  2474  059C  3180  2014  3185   	fcall	_can_ope_mode
  2475                           
  2476                           ;main.c: 260: uint8_t sid;
  2477                           ;main.c: 261: uint8_t n;
  2478                           ;main.c: 262: uint16_t mask;
  2479                           ;main.c: 263: uint8_t mask_sidh;
  2480                           ;main.c: 264: uint8_t mask_sidl;
  2481                           ;main.c: 265: uint8_t mask_buf[4];
  2482                           ;main.c: 266: switch(cmd) {
  2483  059F  2F33               	goto	L3
  2484  05A0                     l2168:	
  2485                           ;main.c: 267: case 'i':
  2486                           
  2487                           
  2488                           ;main.c: 268: sid = atoi(&buf[2]);
  2489  05A0  30BF               	movlw	(low ((_buf| 0+2)))& (0+255)
  2490  05A1  3180  20FB  3185   	fcall	_atoi
  2491  05A4  0876               	movf	?_atoi,w
  2492  05A5  0020               	movlb	0	; select bank0
  2493  05A6  00CA               	movwf	??_main
  2494  05A7  084A               	movf	??_main,w
  2495  05A8  00D4               	movwf	main@sid
  2496                           
  2497                           ;main.c: 269: set_sid(sid);
  2498  05A9  0854               	movf	main@sid,w
  2499  05AA  00CA               	movwf	??_main
  2500  05AB  01CB               	clrf	??_main+1
  2501  05AC  084A               	movf	??_main,w
  2502  05AD  00B9               	movwf	set_sid@can_node
  2503  05AE  084B               	movf	??_main+1,w
  2504  05AF  00BA               	movwf	set_sid@can_node+1
  2505  05B0  318F  27C5  3185   	fcall	_set_sid
  2506                           
  2507                           ;main.c: 270: break;
  2508  05B3  2F33               	goto	L3
  2509  05B4                     l2172:	
  2510                           ;main.c: 271: case 'v':
  2511                           
  2512                           
  2513                           ;main.c: 272: if (buf[2] == 'd') {
  2514  05B4  3064               	movlw	100
  2515  05B5  0021               	movlb	1	; select bank1
  2516  05B6  063F               	xorwf	(_buf^(0+128)+2),w
  2517  05B7  1D03               	btfss	3,2
  2518  05B8  2DBD               	goto	l2176
  2519                           
  2520                           ;main.c: 273: debug = 1;
  2521  05B9  0020               	movlb	0	; select bank0
  2522  05BA  01E5               	clrf	_debug
  2523  05BB  0AE5               	incf	_debug,f
  2524  05BC  2DC4               	goto	l2180
  2525  05BD                     l2176:	
  2526                           ;main.c: 275: } else if (buf[2] == 'v') {
  2527                           
  2528                           ;main.c: 274: verbose = 1;
  2529                           
  2530  05BD  3076               	movlw	118
  2531  05BE  0021               	movlb	1	; select bank1
  2532  05BF  063F               	xorwf	(_buf^(0+128)+2),w
  2533  05C0  1D03               	btfss	3,2
  2534  05C1  2DC7               	goto	l2182
  2535                           
  2536                           ;main.c: 276: debug = 0;
  2537  05C2  0020               	movlb	0	; select bank0
  2538  05C3  01E5               	clrf	_debug
  2539  05C4                     l2180:	
  2540                           
  2541                           ;main.c: 277: verbose = 1;
  2542  05C4  01E4               	clrf	_verbose
  2543  05C5  0AE4               	incf	_verbose,f
  2544                           
  2545                           ;main.c: 278: } else if (buf[2] == 'n') {
  2546  05C6  2F33               	goto	L3
  2547  05C7                     l2182:	
  2548  05C7  306E               	movlw	110
  2549  05C8  0021               	movlb	1	; select bank1
  2550  05C9  063F               	xorwf	(_buf^(0+128)+2),w
  2551  05CA  1D03               	btfss	3,2
  2552  05CB  2F33               	goto	L3
  2553                           
  2554                           ;main.c: 279: debug = 0;
  2555  05CC  0020               	movlb	0	; select bank0
  2556  05CD  01E5               	clrf	_debug
  2557                           
  2558                           ;main.c: 280: verbose = 0;
  2559  05CE  01E4               	clrf	_verbose
  2560                           
  2561                           ;main.c: 281: }
  2562                           ;main.c: 282: break;
  2563  05CF  2F33               	goto	L3
  2564  05D0                     l2186:	
  2565                           ;main.c: 283: case 'o':
  2566                           
  2567                           
  2568                           ;main.c: 284: if (buf[2] == 'l') {
  2569  05D0  306C               	movlw	108
  2570  05D1  0021               	movlb	1	; select bank1
  2571  05D2  063F               	xorwf	(_buf^(0+128)+2),w
  2572  05D3  1D03               	btfss	3,2
  2573  05D4  2DDC               	goto	l2192
  2574                           
  2575                           ;main.c: 285: ope_mode = 0b01000000;
  2576  05D5  3040               	movlw	64
  2577  05D6  0020               	movlb	0	; select bank0
  2578  05D7  00CA               	movwf	??_main
  2579  05D8  084A               	movf	??_main,w
  2580  05D9  00E3               	movwf	_ope_mode
  2581                           
  2582                           ;main.c: 286: can_ope_mode(0b01000000);
  2583  05DA  3040               	movlw	64
  2584  05DB  2D9C               	goto	L6
  2585  05DC                     l2192:	
  2586                           ;main.c: 287: } else if (buf[2] == 'n') {
  2587                           
  2588  05DC  306E               	movlw	110
  2589  05DD  0021               	movlb	1	; select bank1
  2590  05DE  063F               	xorwf	(_buf^(0+128)+2),w
  2591  05DF  1D03               	btfss	3,2
  2592  05E0  2F33               	goto	L3
  2593  05E1  2D99               	goto	L7
  2594  05E2                     l2198:	
  2595                           ;main.c: 292: case 'm':
  2596                           
  2597                           ;main.c: 290: }
  2598                           ;main.c: 291: break;
  2599                           
  2600                           ;main.c: 289: can_ope_mode(0b00000000);
  2601                           
  2602                           ;main.c: 288: ope_mode = 0b00000000;
  2603                           
  2604                           
  2605                           ;main.c: 293: case 'f':
  2606                           ;main.c: 294: can_ope_mode(0b10000000);
  2607  05E2  3080               	movlw	128
  2608  05E3  3180  2014  3185   	fcall	_can_ope_mode
  2609                           
  2610                           ;main.c: 295: n = buf[2] - 0x30;
  2611  05E6  0021               	movlb	1	; select bank1
  2612  05E7  083F               	movf	(_buf^(0+128)+2),w
  2613  05E8  3ED0               	addlw	208
  2614  05E9  0020               	movlb	0	; select bank0
  2615  05EA  00CA               	movwf	??_main
  2616  05EB  084A               	movf	??_main,w
  2617  05EC  00E0               	movwf	main@n
  2618                           
  2619                           ;main.c: 296: mask = atoi(&buf[3]);
  2620  05ED  30C0               	movlw	(low ((_buf| 0+3)))& (0+255)
  2621  05EE  3180  20FB  3185   	fcall	_atoi
  2622  05F1  0877               	movf	?_atoi+1,w
  2623  05F2  0020               	movlb	0	; select bank0
  2624  05F3  00D8               	movwf	main@mask+1
  2625  05F4  0876               	movf	?_atoi,w
  2626  05F5  00D7               	movwf	main@mask
  2627                           
  2628                           ;main.c: 297: mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  2629  05F6  0858               	movf	main@mask+1,w
  2630  05F7  00CB               	movwf	??_main+1
  2631  05F8  0857               	movf	main@mask,w
  2632  05F9  00CA               	movwf	??_main
  2633  05FA  36CB               	lsrf	??_main+1,f
  2634  05FB  0CCA               	rrf	??_main,f
  2635  05FC  36CB               	lsrf	??_main+1,f
  2636  05FD  0CCA               	rrf	??_main,f
  2637  05FE  36CB               	lsrf	??_main+1,f
  2638  05FF  0CCA               	rrf	??_main,f
  2639  0600  084A               	movf	??_main,w
  2640  0601  00CC               	movwf	??_main+2
  2641  0602  084C               	movf	??_main+2,w
  2642  0603  00D9               	movwf	main@mask_sidh
  2643                           
  2644                           ;main.c: 298: mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  2645  0604  0857               	movf	main@mask,w
  2646  0605  3907               	andlw	7
  2647  0606  00CA               	movwf	??_main
  2648  0607  3004               	movlw	4
  2649  0608                     u2155:	
  2650  0608  35CA               	lslf	??_main,f
  2651  0609  3EFF               	addlw	-1
  2652  060A  1D03               	skipz
  2653  060B  2E08               	goto	u2155
  2654  060C  354A               	lslf	??_main,w
  2655  060D  00CB               	movwf	??_main+1
  2656  060E  084B               	movf	??_main+1,w
  2657  060F  00DA               	movwf	main@mask_sidl
  2658                           
  2659                           ;main.c: 299: if (debug) {
  2660  0610  0865               	movf	_debug,w
  2661  0611  1903               	btfsc	3,2
  2662  0612  2E38               	goto	l2216
  2663                           
  2664                           ;main.c: 300: if (cmd == 'm') {
  2665  0613  306D               	movlw	109
  2666  0614  065F               	xorwf	main@cmd,w
  2667  0615  1D03               	btfss	3,2
  2668  0616  2E1B               	goto	l2214
  2669                           
  2670                           ;main.c: 301: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2671  0617  305B               	movlw	low (STR_18| (0+32768))
  2672  0618  00A0               	movwf	printf@f
  2673  0619  3091               	movlw	high (STR_18| (0+32768))
  2674  061A  2E1F               	goto	L4
  2675  061B                     l2214:	
  2676                           ;main.c: 302: } else {
  2677                           
  2678                           
  2679                           ;main.c: 303: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2680  061B  3018               	movlw	low (STR_19| (0+32768))
  2681  061C  0020               	movlb	0	; select bank0
  2682  061D  00A0               	movwf	printf@f
  2683  061E  3091               	movlw	high (STR_19| (0+32768))
  2684  061F                     L4:	
  2685  061F  00A1               	movwf	printf@f+1
  2686  0620  0860               	movf	main@n,w
  2687  0621  00CA               	movwf	??_main
  2688  0622  01CB               	clrf	??_main+1
  2689  0623  084A               	movf	??_main,w
  2690  0624  00A2               	movwf	?_printf+2
  2691  0625  084B               	movf	??_main+1,w
  2692  0626  00A3               	movwf	?_printf+3
  2693  0627  0859               	movf	main@mask_sidh,w
  2694  0628  00CC               	movwf	??_main+2
  2695  0629  01CD               	clrf	??_main+3
  2696  062A  084C               	movf	??_main+2,w
  2697  062B  00A4               	movwf	?_printf+4
  2698  062C  084D               	movf	??_main+3,w
  2699  062D  00A5               	movwf	?_printf+5
  2700  062E  085A               	movf	main@mask_sidl,w
  2701  062F  00CE               	movwf	??_main+4
  2702  0630  01CF               	clrf	??_main+5
  2703  0631  084E               	movf	??_main+4,w
  2704  0632  00A6               	movwf	?_printf+6
  2705  0633  084F               	movf	??_main+5,w
  2706  0634  00A7               	movwf	?_printf+7
  2707  0635  3183  2354  3185   	fcall	_printf
  2708  0638                     l2216:	
  2709                           
  2710                           ;main.c: 304: }
  2711                           ;main.c: 305: }
  2712                           ;main.c: 306: mask_buf[0] = 0b00000010;
  2713  0638  3002               	movlw	2
  2714  0639  0020               	movlb	0	; select bank0
  2715  063A  00CA               	movwf	??_main
  2716  063B  084A               	movf	??_main,w
  2717  063C  00DB               	movwf	main@mask_buf
  2718                           
  2719                           ;main.c: 307: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2720  063D  306D               	movlw	109
  2721  063E  065F               	xorwf	main@cmd,w
  2722  063F  1903               	btfsc	3,2
  2723  0640  2E46               	goto	l2222
  2724  0641  0860               	movf	main@n,w
  2725  0642  3EDD               	addlw	low (_rxfnsidh| (0+32768))
  2726  0643  0084               	movwf	4
  2727  0644  3092               	movlw	high (_rxfnsidh| (0+32768))
  2728  0645  2E4A               	goto	L1
  2729  0646                     l2222:	
  2730  0646  0860               	movf	main@n,w
  2731  0647  3EEE               	addlw	low (_rxmnsidh| (0+32768))
  2732  0648  0084               	movwf	4
  2733  0649  3092               	movlw	high (_rxmnsidh| (0+32768))
  2734  064A                     L1:	
  2735  064A  1803               	skipnc
  2736  064B  3E01               	addlw	1
  2737  064C  0085               	movwf	5
  2738  064D  0800               	movf	0,w	;code access
  2739  064E  00CA               	movwf	??_main
  2740  064F  01CB               	clrf	??_main+1
  2741  0650  084A               	movf	??_main,w
  2742  0651  00D0               	movwf	_main$399
  2743  0652  084B               	movf	??_main+1,w
  2744  0653  00D1               	movwf	_main$399+1
  2745  0654  0850               	movf	_main$399,w
  2746  0655  00CA               	movwf	??_main
  2747  0656  084A               	movf	??_main,w
  2748  0657  00DC               	movwf	main@mask_buf+1
  2749                           
  2750                           ;main.c: 308: mask_buf[2] = mask_sidh;
  2751  0658  0859               	movf	main@mask_sidh,w
  2752  0659  00CA               	movwf	??_main
  2753  065A  084A               	movf	??_main,w
  2754  065B  00DD               	movwf	main@mask_buf+2
  2755                           
  2756                           ;main.c: 309: mask_buf[3] = mask_sidl;
  2757  065C  085A               	movf	main@mask_sidl,w
  2758  065D  00CA               	movwf	??_main
  2759  065E  084A               	movf	??_main,w
  2760  065F  00DE               	movwf	main@mask_buf+3
  2761                           
  2762                           ;main.c: 310: SPI_send(mask_buf, 4, mask_buf);
  2763  0660  3004               	movlw	4
  2764  0661  00CA               	movwf	??_main
  2765  0662  084A               	movf	??_main,w
  2766  0663  00F8               	movwf	SPI_send@len
  2767  0664  305B               	movlw	(low (main@mask_buf| 0))& (0+255)
  2768  0665  00CB               	movwf	??_main+1
  2769  0666  084B               	movf	??_main+1,w
  2770  0667  00F9               	movwf	SPI_send@rbuf
  2771  0668  305B               	movlw	(low (main@mask_buf| 0))& (0+255)
  2772  0669  318F  2705  3185   	fcall	_SPI_send
  2773                           
  2774                           ;main.c: 312: if (debug) {
  2775  066C  0020               	movlb	0	; select bank0
  2776  066D  0865               	movf	_debug,w
  2777  066E  1903               	btfsc	3,2
  2778  066F  2EE8               	goto	l279
  2779                           
  2780                           ;main.c: 313: mask_buf[0] = 0b00000011;
  2781  0670  3003               	movlw	3
  2782  0671  00CA               	movwf	??_main
  2783  0672  084A               	movf	??_main,w
  2784  0673  00DB               	movwf	main@mask_buf
  2785                           
  2786                           ;main.c: 314: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2787  0674  306D               	movlw	109
  2788  0675  065F               	xorwf	main@cmd,w
  2789  0676  1903               	btfsc	3,2
  2790  0677  2E7D               	goto	l2240
  2791  0678  0860               	movf	main@n,w
  2792  0679  3EDD               	addlw	low (_rxfnsidh| (0+32768))
  2793  067A  0084               	movwf	4
  2794  067B  3092               	movlw	high (_rxfnsidh| (0+32768))
  2795  067C  2E81               	goto	L2
  2796  067D                     l2240:	
  2797  067D  0860               	movf	main@n,w
  2798  067E  3EEE               	addlw	low (_rxmnsidh| (0+32768))
  2799  067F  0084               	movwf	4
  2800  0680  3092               	movlw	high (_rxmnsidh| (0+32768))
  2801  0681                     L2:	
  2802  0681  1803               	skipnc
  2803  0682  3E01               	addlw	1
  2804  0683  0085               	movwf	5
  2805  0684  0800               	movf	0,w	;code access
  2806  0685  00CA               	movwf	??_main
  2807  0686  01CB               	clrf	??_main+1
  2808  0687  084A               	movf	??_main,w
  2809  0688  00D2               	movwf	_main$400
  2810  0689  084B               	movf	??_main+1,w
  2811  068A  00D3               	movwf	_main$400+1
  2812  068B  0852               	movf	_main$400,w
  2813  068C  00CA               	movwf	??_main
  2814  068D  084A               	movf	??_main,w
  2815  068E  00DC               	movwf	main@mask_buf+1
  2816                           
  2817                           ;main.c: 315: mask_buf[2] = 0x00;
  2818  068F  01DD               	clrf	main@mask_buf+2
  2819                           
  2820                           ;main.c: 316: mask_buf[3] = 0x00;
  2821  0690  01DE               	clrf	main@mask_buf+3
  2822                           
  2823                           ;main.c: 317: SPI_send(mask_buf, 4, mask_buf);
  2824  0691  3004               	movlw	4
  2825  0692  00CA               	movwf	??_main
  2826  0693  084A               	movf	??_main,w
  2827  0694  00F8               	movwf	SPI_send@len
  2828  0695  305B               	movlw	(low (main@mask_buf| 0))& (0+255)
  2829  0696  00CB               	movwf	??_main+1
  2830  0697  084B               	movf	??_main+1,w
  2831  0698  00F9               	movwf	SPI_send@rbuf
  2832  0699  305B               	movlw	(low (main@mask_buf| 0))& (0+255)
  2833  069A  318F  2705  3185   	fcall	_SPI_send
  2834                           
  2835                           ;main.c: 318: if (cmd == 'm') {
  2836  069D  306D               	movlw	109
  2837  069E  0020               	movlb	0	; select bank0
  2838  069F  065F               	xorwf	main@cmd,w
  2839  06A0  1D03               	btfss	3,2
  2840  06A1  2EBC               	goto	l2254
  2841                           
  2842                           ;main.c: 319: printf("RXM%dSIDH: %02x\n", n, mask_buf[2]);
  2843  06A2  30EF               	movlw	low (STR_20| (0+32768))
  2844  06A3  00A0               	movwf	printf@f
  2845  06A4  3091               	movlw	high (STR_20| (0+32768))
  2846  06A5  00A1               	movwf	printf@f+1
  2847  06A6  0860               	movf	main@n,w
  2848  06A7  00CA               	movwf	??_main
  2849  06A8  01CB               	clrf	??_main+1
  2850  06A9  084A               	movf	??_main,w
  2851  06AA  00A2               	movwf	?_printf+2
  2852  06AB  084B               	movf	??_main+1,w
  2853  06AC  00A3               	movwf	?_printf+3
  2854  06AD  085D               	movf	main@mask_buf+2,w
  2855  06AE  00CC               	movwf	??_main+2
  2856  06AF  01CD               	clrf	??_main+3
  2857  06B0  084C               	movf	??_main+2,w
  2858  06B1  00A4               	movwf	?_printf+4
  2859  06B2  084D               	movf	??_main+3,w
  2860  06B3  00A5               	movwf	?_printf+5
  2861  06B4  3183  2354  3185   	fcall	_printf
  2862                           
  2863                           ;main.c: 320: printf("RXM%dSIDL: %02x\n", n, mask_buf[3]);
  2864  06B7  3033               	movlw	low (STR_21| (0+32768))
  2865  06B8  0020               	movlb	0	; select bank0
  2866  06B9  00A0               	movwf	printf@f
  2867  06BA  3092               	movlw	high (STR_21| (0+32768))
  2868  06BB  2ED6               	goto	L5
  2869  06BC                     l2254:	
  2870                           ;main.c: 321: } else {
  2871                           
  2872                           
  2873                           ;main.c: 322: printf("RXF%dSIDH: %02x\n", n, mask_buf[2]);
  2874  06BC  30DE               	movlw	low (STR_22| (0+32768))
  2875  06BD  0020               	movlb	0	; select bank0
  2876  06BE  00A0               	movwf	printf@f
  2877  06BF  3091               	movlw	high (STR_22| (0+32768))
  2878  06C0  00A1               	movwf	printf@f+1
  2879  06C1  0860               	movf	main@n,w
  2880  06C2  00CA               	movwf	??_main
  2881  06C3  01CB               	clrf	??_main+1
  2882  06C4  084A               	movf	??_main,w
  2883  06C5  00A2               	movwf	?_printf+2
  2884  06C6  084B               	movf	??_main+1,w
  2885  06C7  00A3               	movwf	?_printf+3
  2886  06C8  085D               	movf	main@mask_buf+2,w
  2887  06C9  00CC               	movwf	??_main+2
  2888  06CA  01CD               	clrf	??_main+3
  2889  06CB  084C               	movf	??_main+2,w
  2890  06CC  00A4               	movwf	?_printf+4
  2891  06CD  084D               	movf	??_main+3,w
  2892  06CE  00A5               	movwf	?_printf+5
  2893  06CF  3183  2354  3185   	fcall	_printf
  2894                           
  2895                           ;main.c: 323: printf("RXF%dSIDL: %02x\n", n, mask_buf[3]);
  2896  06D2  3022               	movlw	low (STR_23| (0+32768))
  2897  06D3  0020               	movlb	0	; select bank0
  2898  06D4  00A0               	movwf	printf@f
  2899  06D5  3092               	movlw	high (STR_23| (0+32768))
  2900  06D6                     L5:	
  2901  06D6  00A1               	movwf	printf@f+1
  2902  06D7  0860               	movf	main@n,w
  2903  06D8  00CA               	movwf	??_main
  2904  06D9  01CB               	clrf	??_main+1
  2905  06DA  084A               	movf	??_main,w
  2906  06DB  00A2               	movwf	?_printf+2
  2907  06DC  084B               	movf	??_main+1,w
  2908  06DD  00A3               	movwf	?_printf+3
  2909  06DE  085E               	movf	main@mask_buf+3,w
  2910  06DF  00CC               	movwf	??_main+2
  2911  06E0  01CD               	clrf	??_main+3
  2912  06E1  084C               	movf	??_main+2,w
  2913  06E2  00A4               	movwf	?_printf+4
  2914  06E3  084D               	movf	??_main+3,w
  2915  06E4  00A5               	movwf	?_printf+5
  2916  06E5  3183  2354  3185   	fcall	_printf
  2917  06E8                     l279:	
  2918                           
  2919                           ;main.c: 324: }
  2920                           ;main.c: 325: }
  2921                           ;main.c: 327: can_ope_mode(ope_mode);
  2922  06E8  0020               	movlb	0	; select bank0
  2923  06E9  0863               	movf	_ope_mode,w
  2924  06EA  2D9C               	goto	L6
  2925  06EB                     l2256:	
  2926                           ;main.c: 329: case 'h':
  2927                           
  2928                           ;main.c: 328: break;
  2929                           
  2930                           
  2931                           ;main.c: 330: printf("--- HELP ---\n");
  2932  06EB  3072               	movlw	low (STR_24| (0+32768))
  2933  06EC  0020               	movlb	0	; select bank0
  2934  06ED  00A0               	movwf	printf@f
  2935  06EE  3092               	movlw	high (STR_24| (0+32768))
  2936  06EF  00A1               	movwf	printf@f+1
  2937  06F0  3183  2354  3185   	fcall	_printf
  2938                           
  2939                           ;main.c: 331: printf("[Set standard identifier] @i<Standard Identifier>\n");
  2940  06F3  3036               	movlw	low (STR_25| (0+32768))
  2941  06F4  0020               	movlb	0	; select bank0
  2942  06F5  00A0               	movwf	printf@f
  2943  06F6  3090               	movlw	high (STR_25| (0+32768))
  2944  06F7  00A1               	movwf	printf@f+1
  2945  06F8  3183  2354  3185   	fcall	_printf
  2946                           
  2947                           ;main.c: 332: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  2948  06FB  3001               	movlw	low (STR_26| (0+32768))
  2949  06FC  0020               	movlb	0	; select bank0
  2950  06FD  00A0               	movwf	printf@f
  2951  06FE  3088               	movlw	high (STR_26| (0+32768))
  2952  06FF  00A1               	movwf	printf@f+1
  2953  0700  3183  2354  3185   	fcall	_printf
  2954                           
  2955                           ;main.c: 333: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  2956  0703  3000               	movlw	low (STR_27| (0+32768))
  2957  0704  0020               	movlb	0	; select bank0
  2958  0705  00A0               	movwf	printf@f
  2959  0706  3090               	movlw	high (STR_27| (0+32768))
  2960  0707  00A1               	movwf	printf@f+1
  2961  0708  3183  2354  3185   	fcall	_printf
  2962                           
  2963                           ;main.c: 334: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  2964  070B  30BF               	movlw	low (STR_28| (0+32768))
  2965  070C  0020               	movlb	0	; select bank0
  2966  070D  00A0               	movwf	printf@f
  2967  070E  3090               	movlw	high (STR_28| (0+32768))
  2968  070F  00A1               	movwf	printf@f+1
  2969  0710  3183  2354  3185   	fcall	_printf
  2970                           
  2971                           ;main.c: 335: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  2972  0713  3095               	movlw	low (STR_29| (0+32768))
  2973  0714  0020               	movlb	0	; select bank0
  2974  0715  00A0               	movwf	printf@f
  2975  0716  3090               	movlw	high (STR_29| (0+32768))
  2976  0717  00A1               	movwf	printf@f+1
  2977  0718  3183  2354  3185   	fcall	_printf
  2978                           
  2979                           ;main.c: 336: printf("[Send message] <message>\n");
  2980  071B  30E5               	movlw	low (STR_30| (0+32768))
  2981  071C  0020               	movlb	0	; select bank0
  2982  071D  00A0               	movwf	printf@f
  2983  071E  3090               	movlw	high (STR_30| (0+32768))
  2984  071F  00A1               	movwf	printf@f+1
  2985  0720  3183  2354  3185   	fcall	_printf
  2986                           
  2987                           ;main.c: 337: printf("[Receive message] <message> will be output\n");
  2988  0723  3069               	movlw	low (STR_31| (0+32768))
  2989  0724  0020               	movlb	0	; select bank0
  2990  0725  00A0               	movwf	printf@f
  2991  0726  3090               	movlw	high (STR_31| (0+32768))
  2992  0727  00A1               	movwf	printf@f+1
  2993  0728  3183  2354  3185   	fcall	_printf
  2994                           
  2995                           ;main.c: 338: printf("[Show this help]: @h\n");
  2996  072B  302F               	movlw	low (STR_32| (0+32768))
  2997  072C  0020               	movlb	0	; select bank0
  2998  072D  00A0               	movwf	printf@f
  2999  072E  3091               	movlw	high (STR_32| (0+32768))
  3000  072F                     L10:	
  3001  072F  00A1               	movwf	printf@f+1
  3002  0730                     L8:	
  3003  0730  3183  2354  3185   	fcall	_printf
  3004  0733                     L3:	
  3005                           ;main.c: 340: }
  3006                           
  3007                           ;main.c: 339: break;
  3008                           
  3009                           
  3010                           ;main.c: 244: idx = 0;
  3011  0733  0020               	movlb	0	; select bank0
  3012  0734  01E6               	clrf	_idx
  3013  0735                     l2148:	
  3014                           ;main.c: 246: while (1)
  3015                           
  3016                           
  3017                           ;main.c: 247: {
  3018                           ;main.c: 248: can_status_check();
  3019  0735  3180  20AD  3185   	fcall	_can_status_check
  3020                           
  3021                           ;main.c: 250: if ((PIR1bits.RCIF)) {
  3022  0738  0020               	movlb	0	; select bank0
  3023  0739  1E91               	btfss	17,5	;volatile
  3024  073A  2F35               	goto	l2148
  3025                           
  3026                           ;main.c: 251: c = EUSART_Read();
  3027  073B  318E  26CB  3185   	fcall	_EUSART_Read
  3028  073E  0020               	movlb	0	; select bank0
  3029  073F  00CA               	movwf	??_main
  3030  0740  084A               	movf	??_main,w
  3031  0741  00E7               	movwf	_c
  3032                           
  3033                           ;main.c: 252: if (verbose) printf("%c", c);
  3034  0742  0864               	movf	_verbose,w
  3035  0743  1903               	btfsc	3,2
  3036  0744  2F53               	goto	l2158
  3037  0745  30E9               	movlw	low (STR_17| (0+32768))
  3038  0746  00A0               	movwf	printf@f
  3039  0747  3092               	movlw	high (STR_17| (0+32768))
  3040  0748  00A1               	movwf	printf@f+1
  3041  0749  0867               	movf	_c,w
  3042  074A  00CA               	movwf	??_main
  3043  074B  01CB               	clrf	??_main+1
  3044  074C  084A               	movf	??_main,w
  3045  074D  00A2               	movwf	?_printf+2
  3046  074E  084B               	movf	??_main+1,w
  3047  074F  00A3               	movwf	?_printf+3
  3048  0750  3183  2354  3185   	fcall	_printf
  3049  0753                     l2158:	
  3050                           
  3051                           ;main.c: 255: buf[idx] = c;
  3052  0753  0020               	movlb	0	; select bank0
  3053  0754  0867               	movf	_c,w
  3054  0755  00CA               	movwf	??_main
  3055  0756  0866               	movf	_idx,w
  3056  0757  3EBD               	addlw	(low (_buf| 0))& (0+255)
  3057  0758  0086               	movwf	6
  3058  0759  0187               	clrf	7
  3059  075A  084A               	movf	??_main,w
  3060  075B  0081               	movwf	1
  3061                           
  3062                           ;main.c: 256: if (c == '\n') {
  3063  075C  300A               	movlw	10
  3064  075D  0667               	xorwf	_c,w
  3065  075E  1D03               	btfss	3,2
  3066  075F  2FA8               	goto	l2276
  3067                           
  3068                           ;main.c: 257: buf[idx] = '\0';
  3069  0760  0866               	movf	_idx,w
  3070  0761  3EBD               	addlw	(low (_buf| 0))& (0+255)
  3071  0762  0086               	movwf	6
  3072  0763  0187               	clrf	7
  3073  0764  0181               	clrf	1
  3074                           
  3075                           ;main.c: 258: if (buf[0] == '@') {
  3076  0765  3040               	movlw	64
  3077  0766  0021               	movlb	1	; select bank1
  3078  0767  063D               	xorwf	_buf^(0+128),w
  3079  0768  1D03               	btfss	3,2
  3080  0769  2F85               	goto	l2262
  3081                           
  3082                           ;main.c: 259: uint8_t cmd = buf[1];
  3083  076A  083E               	movf	(_buf^(0+128)+1),w
  3084  076B  0020               	movlb	0	; select bank0
  3085  076C  00CA               	movwf	??_main
  3086  076D  084A               	movf	??_main,w
  3087  076E  00DF               	movwf	main@cmd
  3088  076F  0020               	movlb	0	; select bank0
  3089  0770  085F               	movf	main@cmd,w
  3090                           
  3091                           ; Switch size 1, requested type "space"
  3092                           ; Number of cases is 6, Range of values is 102 to 118
  3093                           ; switch strategies available:
  3094                           ; Name         Instructions Cycles
  3095                           ; simple_byte           19    10 (average)
  3096                           ; direct_byte           43     9 (fixed)
  3097                           ; jumptable            263     9 (fixed)
  3098                           ;	Chosen strategy is simple_byte
  3099  0771  3A66               	xorlw	102	; case 102
  3100  0772  1903               	skipnz
  3101  0773  2DE2               	goto	l2198
  3102  0774  3A0E               	xorlw	14	; case 104
  3103  0775  1903               	skipnz
  3104  0776  2EEB               	goto	l2256
  3105  0777  3A01               	xorlw	1	; case 105
  3106  0778  1903               	skipnz
  3107  0779  2DA0               	goto	l2168
  3108  077A  3A04               	xorlw	4	; case 109
  3109  077B  1903               	skipnz
  3110  077C  2DE2               	goto	l2198
  3111  077D  3A02               	xorlw	2	; case 111
  3112  077E  1903               	skipnz
  3113  077F  2DD0               	goto	l2186
  3114  0780  3A19               	xorlw	25	; case 118
  3115  0781  1903               	skipnz
  3116  0782  2DB4               	goto	l2172
  3117  0783  2FA7               	goto	l2274
  3118                           
  3119                           ;main.c: 341: } else {
  3120  0784  2F33               	goto	L3
  3121  0785                     l2262:	
  3122                           
  3123                           ;main.c: 342: bool rc = can_send(buf, idx);
  3124  0785  0020               	movlb	0	; select bank0
  3125  0786  0866               	movf	_idx,w
  3126  0787  00CA               	movwf	??_main
  3127  0788  084A               	movf	??_main,w
  3128  0789  00B9               	movwf	can_send@dlc
  3129  078A  30BD               	movlw	(low (_buf| 0))& (0+255)
  3130  078B  3182  2210  3185   	fcall	_can_send
  3131  078E  0020               	movlb	0	; select bank0
  3132  078F  00CB               	movwf	??_main+1
  3133  0790  084B               	movf	??_main+1,w
  3134  0791  00D5               	movwf	main@rc
  3135                           
  3136                           ;main.c: 343: if (rc) {
  3137  0792  0855               	movf	main@rc,w
  3138  0793  1903               	btfsc	3,2
  3139  0794  2F9C               	goto	l2270
  3140                           
  3141                           ;main.c: 344: if (verbose) printf("Message sent: %s\n", buf);
  3142  0795  0864               	movf	_verbose,w
  3143  0796  1903               	btfsc	3,2
  3144  0797  2F33               	goto	L3
  3145  0798  3099               	movlw	low ((STR_35+1)| (0+32768))
  3146  0799  00A0               	movwf	printf@f
  3147  079A  3091               	movlw	high ((STR_35+1)| (0+32768))
  3148  079B  2FD0               	goto	L9
  3149  079C                     l2270:	
  3150                           ;main.c: 345: } else {
  3151                           
  3152                           
  3153                           ;main.c: 346: if (verbose) printf("Unable to send message\n");
  3154  079C  0020               	movlb	0	; select bank0
  3155  079D  0864               	movf	_verbose,w
  3156  079E  1903               	btfsc	3,2
  3157  079F  2F33               	goto	L3
  3158  07A0  3000               	movlw	low ((STR_36+1)| (0+32768))
  3159  07A1  00A0               	movwf	printf@f
  3160  07A2  3091               	movlw	high ((STR_36+1)| (0+32768))
  3161  07A3  00A1               	movwf	printf@f+1
  3162  07A4  3183  2354  3185   	fcall	_printf
  3163  07A7                     l2274:	
  3164  07A7  2F33               	goto	L3
  3165  07A8                     l2276:	
  3166                           ;main.c: 350: } else if (++idx > max_idx) {
  3167                           
  3168                           ;main.c: 347: }
  3169                           ;main.c: 348: }
  3170                           ;main.c: 349: idx = 0;
  3171                           
  3172  07A8  3001               	movlw	1
  3173  07A9  00CA               	movwf	??_main
  3174  07AA  084A               	movf	??_main,w
  3175  07AB  07E6               	addwf	_idx,f
  3176  07AC  3000               	movlw	low (_max_idx| (0+32768))
  3177  07AD  0084               	movwf	4
  3178  07AE  3088               	movlw	high (_max_idx| (0+32768))
  3179  07AF  0085               	movwf	5
  3180  07B0  0800               	movf	0,w	;code access
  3181  07B1  00CB               	movwf	??_main+1
  3182  07B2  0866               	movf	_idx,w
  3183  07B3  024B               	subwf	??_main+1,w
  3184  07B4  1803               	skipnc
  3185  07B5  2F35               	goto	l2148
  3186                           
  3187                           ;main.c: 351: buf[idx] = '\0';
  3188  07B6  0866               	movf	_idx,w
  3189  07B7  3EBD               	addlw	(low (_buf| 0))& (0+255)
  3190  07B8  0086               	movwf	6
  3191  07B9  0187               	clrf	7
  3192  07BA  0181               	clrf	1
  3193                           
  3194                           ;main.c: 352: bool rc = can_send(buf, idx);
  3195  07BB  0866               	movf	_idx,w
  3196  07BC  00CA               	movwf	??_main
  3197  07BD  084A               	movf	??_main,w
  3198  07BE  00B9               	movwf	can_send@dlc
  3199  07BF  30BD               	movlw	(low (_buf| 0))& (0+255)
  3200  07C0  3182  2210  3185   	fcall	_can_send
  3201  07C3  0020               	movlb	0	; select bank0
  3202  07C4  00CB               	movwf	??_main+1
  3203  07C5  084B               	movf	??_main+1,w
  3204  07C6  00D6               	movwf	main@rc_418
  3205                           
  3206                           ;main.c: 353: if (rc) {
  3207  07C7  0856               	movf	main@rc_418,w
  3208  07C8  1903               	btfsc	3,2
  3209  07C9  2FD6               	goto	l2288
  3210                           
  3211                           ;main.c: 354: if (verbose) printf("\nMessage sent: %s\n", buf);
  3212  07CA  0864               	movf	_verbose,w
  3213  07CB  1903               	btfsc	3,2
  3214  07CC  2F33               	goto	L3
  3215  07CD  3098               	movlw	low (STR_35| (0+32768))
  3216  07CE  00A0               	movwf	printf@f
  3217  07CF  3091               	movlw	high (STR_35| (0+32768))
  3218  07D0                     L9:	
  3219  07D0  00A1               	movwf	printf@f+1
  3220  07D1  30BD               	movlw	(low (_buf| 0))& (0+255)
  3221  07D2  00CA               	movwf	??_main
  3222  07D3  084A               	movf	??_main,w
  3223  07D4  00A2               	movwf	low ((?_printf| 0+2))
  3224  07D5  2F30               	goto	L8
  3225  07D6                     l2288:	
  3226                           ;main.c: 355: } else {
  3227                           
  3228                           
  3229                           ;main.c: 356: if (verbose) printf("\nUnable to send message\n");
  3230  07D6  0020               	movlb	0	; select bank0
  3231  07D7  0864               	movf	_verbose,w
  3232  07D8  1903               	btfsc	3,2
  3233  07D9  2F33               	goto	L3
  3234  07DA  30FF               	movlw	low (STR_36| (0+32768))
  3235  07DB  00A0               	movwf	printf@f
  3236  07DC  3090               	movlw	high (STR_36| (0+32768))
  3237  07DD  2F2F               	goto	L10
  3238  07DE                     __end_of_main:	
  3239                           ;main.c: 357: }
  3240                           ;main.c: 358: idx = 0;
  3241                           
  3242                           
  3243                           	psect	text1
  3244  0FC5                     __ptext1:	
  3245 ;; *************** function _set_sid *****************
  3246 ;; Defined at:
  3247 ;;		line 45 in file "main.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  can_node        2   25[BANK0 ] unsigned int 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  sidl            1   32[BANK0 ] unsigned char 
  3252 ;;  sidh            1   31[BANK0 ] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3265 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3266 ;;Total ram usage:        8 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    3
  3269 ;; This function calls:
  3270 ;;		_printf
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _set_sid
  3278  0FC5                     _set_sid:	
  3279                           
  3280                           ;main.c: 46: uint8_t sidh = (can_node >> 3) & 0x00ff;
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3284  0FC5  0020               	movlb	0	; select bank0
  3285  0FC6  083A               	movf	set_sid@can_node+1,w
  3286  0FC7  00BC               	movwf	??_set_sid+1
  3287  0FC8  0839               	movf	set_sid@can_node,w
  3288  0FC9  00BB               	movwf	??_set_sid
  3289  0FCA  36BC               	lsrf	??_set_sid+1,f
  3290  0FCB  0CBB               	rrf	??_set_sid,f
  3291  0FCC  36BC               	lsrf	??_set_sid+1,f
  3292  0FCD  0CBB               	rrf	??_set_sid,f
  3293  0FCE  36BC               	lsrf	??_set_sid+1,f
  3294  0FCF  0CBB               	rrf	??_set_sid,f
  3295  0FD0  083B               	movf	??_set_sid,w
  3296  0FD1  00BD               	movwf	??_set_sid+2
  3297  0FD2  083D               	movf	??_set_sid+2,w
  3298  0FD3  00BF               	movwf	set_sid@sidh
  3299                           
  3300                           ;main.c: 47: uint8_t sidl = (can_node << 5) & 0x00e0;
  3301  0FD4  0839               	movf	set_sid@can_node,w
  3302  0FD5  00BB               	movwf	??_set_sid
  3303  0FD6  3004               	movlw	4
  3304  0FD7                     u1755:	
  3305  0FD7  35BB               	lslf	??_set_sid,f
  3306  0FD8  3EFF               	addlw	-1
  3307  0FD9  1D03               	skipz
  3308  0FDA  2FD7               	goto	u1755
  3309  0FDB  353B               	lslf	??_set_sid,w
  3310  0FDC  39E0               	andlw	224
  3311  0FDD  00BC               	movwf	??_set_sid+1
  3312  0FDE  083C               	movf	??_set_sid+1,w
  3313  0FDF  00C0               	movwf	set_sid@sidl
  3314                           
  3315                           ;main.c: 48: sid.sidh = sidh;
  3316  0FE0  083F               	movf	set_sid@sidh,w
  3317  0FE1  00BB               	movwf	??_set_sid
  3318  0FE2  083B               	movf	??_set_sid,w
  3319  0FE3  00E1               	movwf	_sid
  3320                           
  3321                           ;main.c: 49: sid.sidl = sidl;
  3322  0FE4  0840               	movf	set_sid@sidl,w
  3323  0FE5  00BB               	movwf	??_set_sid
  3324  0FE6  083B               	movf	??_set_sid,w
  3325  0FE7  00E2               	movwf	_sid+1
  3326                           
  3327                           ;main.c: 50: if (debug) printf("SID set: %02x %02x\n", sidh, sidl);
  3328  0FE8  0865               	movf	_debug,w
  3329  0FE9  1903               	btfsc	3,2
  3330  0FEA  0008               	return
  3331  0FEB  3084               	movlw	low (STR_1| (0+32768))
  3332  0FEC  00A0               	movwf	printf@f
  3333  0FED  3091               	movlw	high (STR_1| (0+32768))
  3334  0FEE  00A1               	movwf	printf@f+1
  3335  0FEF  083F               	movf	set_sid@sidh,w
  3336  0FF0  00BB               	movwf	??_set_sid
  3337  0FF1  01BC               	clrf	??_set_sid+1
  3338  0FF2  083B               	movf	??_set_sid,w
  3339  0FF3  00A2               	movwf	?_printf+2
  3340  0FF4  083C               	movf	??_set_sid+1,w
  3341  0FF5  00A3               	movwf	?_printf+3
  3342  0FF6  0840               	movf	set_sid@sidl,w
  3343  0FF7  00BD               	movwf	??_set_sid+2
  3344  0FF8  01BE               	clrf	??_set_sid+3
  3345  0FF9  083D               	movf	??_set_sid+2,w
  3346  0FFA  00A4               	movwf	?_printf+4
  3347  0FFB  083E               	movf	??_set_sid+3,w
  3348  0FFC  00A5               	movwf	?_printf+5
  3349  0FFD  3183  2354         	fcall	_printf
  3350  0FFF  0008               	return
  3351  1000                     __end_of_set_sid:	
  3352                           
  3353                           	psect	text2
  3354  00AD                     __ptext2:	
  3355 ;; *************** function _can_status_check *****************
  3356 ;; Defined at:
  3357 ;;		line 210 in file "main.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  can_status_b    2   37[BANK0 ] unsigned char [2]
  3362 ;;  status          1   39[BANK0 ] unsigned char 
  3363 ;;  bytes_writte    1   36[BANK0 ] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3376 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3377 ;;Total ram usage:        7 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    4
  3380 ;; This function calls:
  3381 ;;		_SPI_send
  3382 ;;		_can_receive
  3383 ;;		_can_txf_clear
  3384 ;;		_printf
  3385 ;; This function is called by:
  3386 ;;		_main
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function _can_status_check
  3392  00AD                     _can_status_check:	
  3393                           
  3394                           ;main.c: 212: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3398  00AD  0020               	movlb	0	; select bank0
  3399  00AE  0869               	movf	can_status_check@F2962+1,w
  3400  00AF  00C6               	movwf	can_status_check@can_status_buf+1
  3401  00B0  0868               	movf	can_status_check@F2962,w
  3402  00B1  00C5               	movwf	can_status_check@can_status_buf
  3403                           
  3404                           ;main.c: 213: uint8_t bytes_written = SPI_send(can_status_buf, 2, can_status_buf);
  3405  00B2  3002               	movlw	2
  3406  00B3  00C1               	movwf	??_can_status_check
  3407  00B4  0841               	movf	??_can_status_check,w
  3408  00B5  00F8               	movwf	SPI_send@len
  3409  00B6  3045               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3410  00B7  00C2               	movwf	??_can_status_check+1
  3411  00B8  0842               	movf	??_can_status_check+1,w
  3412  00B9  00F9               	movwf	SPI_send@rbuf
  3413  00BA  3045               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3414  00BB  318F  2705  3180   	fcall	_SPI_send
  3415  00BE  0020               	movlb	0	; select bank0
  3416  00BF  00C3               	movwf	??_can_status_check+2
  3417  00C0  0843               	movf	??_can_status_check+2,w
  3418  00C1  00C4               	movwf	can_status_check@bytes_written
  3419                           
  3420                           ;main.c: 214: uint8_t status = can_status_buf[1];
  3421  00C2  0846               	movf	can_status_check@can_status_buf+1,w
  3422  00C3  00C1               	movwf	??_can_status_check
  3423  00C4  0841               	movf	??_can_status_check,w
  3424  00C5  00C7               	movwf	can_status_check@status
  3425                           
  3426                           ;main.c: 215: if (status == 0x00) {
  3427  00C6  0847               	movf	can_status_check@status,w
  3428  00C7  1903               	btfsc	3,2
  3429  00C8  0008               	return
  3430                           
  3431                           ;main.c: 217: } else if ((status & 0b00000001) > 0) {
  3432                           
  3433                           ;main.c: 216: return;
  3434  00C9  1C47               	btfss	can_status_check@status,0
  3435  00CA  28D9               	goto	l237
  3436                           
  3437                           ;main.c: 218: if (debug) printf("RX0IF is on\n");
  3438  00CB  0865               	movf	_debug,w
  3439  00CC  1903               	btfsc	3,2
  3440  00CD  28D5               	goto	l238
  3441  00CE  30AA               	movlw	low (STR_15| (0+32768))
  3442  00CF  00A0               	movwf	printf@f
  3443  00D0  3092               	movlw	high (STR_15| (0+32768))
  3444  00D1  00A1               	movwf	printf@f+1
  3445  00D2  3183  2354  3180   	fcall	_printf
  3446  00D5                     l238:	
  3447                           
  3448                           ;main.c: 219: can_receive(0);
  3449  00D5  3000               	movlw	0
  3450  00D6  3181  2162         	fcall	_can_receive
  3451                           
  3452                           ;main.c: 220: } else if ((status & 0b00000010) > 0) {
  3453  00D8  0008               	return
  3454  00D9                     l237:	
  3455  00D9  1CC7               	btfss	can_status_check@status,1
  3456  00DA  28E9               	goto	l240
  3457                           
  3458                           ;main.c: 221: if (debug) printf("RX1IF is on\n");
  3459  00DB  0865               	movf	_debug,w
  3460  00DC  1903               	btfsc	3,2
  3461  00DD  28E5               	goto	l241
  3462  00DE  30B7               	movlw	low (STR_16| (0+32768))
  3463  00DF  00A0               	movwf	printf@f
  3464  00E0  3092               	movlw	high (STR_16| (0+32768))
  3465  00E1  00A1               	movwf	printf@f+1
  3466  00E2  3183  2354  3180   	fcall	_printf
  3467  00E5                     l241:	
  3468                           
  3469                           ;main.c: 222: can_receive(1);
  3470  00E5  3001               	movlw	1
  3471  00E6  3181  2162         	fcall	_can_receive
  3472                           
  3473                           ;main.c: 223: } else if ((status & 0b00001000) > 0) {
  3474  00E8  0008               	return
  3475  00E9                     l240:	
  3476  00E9  1DC7               	btfss	can_status_check@status,3
  3477  00EA  28EF               	goto	l243
  3478                           
  3479                           ;main.c: 224: can_txf_clear(0);
  3480  00EB  3000               	movlw	0
  3481  00EC  318F  2765         	fcall	_can_txf_clear
  3482                           
  3483                           ;main.c: 225: } else if ((status & 0b00100000) > 0) {
  3484  00EE  0008               	return
  3485  00EF                     l243:	
  3486  00EF  1EC7               	btfss	can_status_check@status,5
  3487  00F0  28F5               	goto	l245
  3488                           
  3489                           ;main.c: 226: can_txf_clear(1);
  3490  00F1  3001               	movlw	1
  3491  00F2  318F  2765         	fcall	_can_txf_clear
  3492                           
  3493                           ;main.c: 227: } else if ((status & 0b10000000) > 0) {
  3494  00F4  0008               	return
  3495  00F5                     l245:	
  3496  00F5  1FC7               	btfss	can_status_check@status,7
  3497  00F6  0008               	return
  3498                           
  3499                           ;main.c: 228: can_txf_clear(2);
  3500  00F7  3002               	movlw	2
  3501  00F8  318F  2765         	fcall	_can_txf_clear
  3502  00FA  0008               	return
  3503  00FB                     __end_of_can_status_check:	
  3504                           ;main.c: 229: }
  3505                           ;main.c: 230: return;
  3506                           
  3507                           
  3508                           	psect	text3
  3509  0F65                     __ptext3:	
  3510 ;; *************** function _can_txf_clear *****************
  3511 ;; Defined at:
  3512 ;;		line 83 in file "main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  n               1    wreg     unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  n               1    5[BANK0 ] unsigned char 
  3517 ;;  can_int_flag    4    8[BANK0 ] unsigned char [4]
  3518 ;;  bytes_writte    1    7[BANK0 ] unsigned char 
  3519 ;;  mask            1    6[BANK0 ] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      unsigned char 
  3522 ;; Registers used:
  3523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3532 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3533 ;;Total ram usage:       10 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    3
  3536 ;; This function calls:
  3537 ;;		_SPI_send
  3538 ;; This function is called by:
  3539 ;;		_can_status_check
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function _can_txf_clear
  3545  0F65                     _can_txf_clear:	
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3549                           ;can_txf_clear@n stored from wreg
  3550  0F65  0020               	movlb	0	; select bank0
  3551  0F66  00A5               	movwf	can_txf_clear@n
  3552                           
  3553                           ;main.c: 84: uint8_t mask = 0b00000001 << (n + 2);
  3554  0F67  3001               	movlw	1
  3555  0F68  00A2               	movwf	??_can_txf_clear
  3556  0F69  0825               	movf	can_txf_clear@n,w
  3557  0F6A  3E02               	addlw	2
  3558  0F6B  0A89               	incf	9,f
  3559  0F6C  2F6E               	goto	u1704
  3560  0F6D                     u1705:	
  3561  0F6D  35A2               	lslf	??_can_txf_clear,f
  3562  0F6E                     u1704:	
  3563  0F6E  0B89               	decfsz	9,f
  3564  0F6F  2F6D               	goto	u1705
  3565  0F70  0822               	movf	??_can_txf_clear,w
  3566  0F71  00A3               	movwf	??_can_txf_clear+1
  3567  0F72  0823               	movf	??_can_txf_clear+1,w
  3568  0F73  00A6               	movwf	can_txf_clear@mask
  3569                           
  3570                           ;main.c: 85: uint8_t can_int_flag[4];
  3571                           ;main.c: 86: can_int_flag[0] =0b00000101;
  3572  0F74  3005               	movlw	5
  3573  0F75  00A2               	movwf	??_can_txf_clear
  3574  0F76  0822               	movf	??_can_txf_clear,w
  3575  0F77  00A8               	movwf	can_txf_clear@can_int_flag
  3576                           
  3577                           ;main.c: 87: can_int_flag[1] = 0x2c;
  3578  0F78  302C               	movlw	44
  3579  0F79  00A2               	movwf	??_can_txf_clear
  3580  0F7A  0822               	movf	??_can_txf_clear,w
  3581  0F7B  00A9               	movwf	can_txf_clear@can_int_flag+1
  3582                           
  3583                           ;main.c: 88: can_int_flag[2] = mask;
  3584  0F7C  0826               	movf	can_txf_clear@mask,w
  3585  0F7D  00A2               	movwf	??_can_txf_clear
  3586  0F7E  0822               	movf	??_can_txf_clear,w
  3587  0F7F  00AA               	movwf	can_txf_clear@can_int_flag+2
  3588                           
  3589                           ;main.c: 89: can_int_flag[3] = 0x00;
  3590  0F80  01AB               	clrf	can_txf_clear@can_int_flag+3
  3591                           
  3592                           ;main.c: 90: uint8_t bytes_written = SPI_send(can_int_flag, 4, can_int_flag);
  3593  0F81  3004               	movlw	4
  3594  0F82  00A2               	movwf	??_can_txf_clear
  3595  0F83  0822               	movf	??_can_txf_clear,w
  3596  0F84  00F8               	movwf	SPI_send@len
  3597  0F85  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  3598  0F86  00A3               	movwf	??_can_txf_clear+1
  3599  0F87  0823               	movf	??_can_txf_clear+1,w
  3600  0F88  00F9               	movwf	SPI_send@rbuf
  3601  0F89  3028               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  3602  0F8A  318F  2705         	fcall	_SPI_send
  3603  0F8C  0020               	movlb	0	; select bank0
  3604  0F8D  00A4               	movwf	??_can_txf_clear+2
  3605  0F8E  0824               	movf	??_can_txf_clear+2,w
  3606  0F8F  00A7               	movwf	can_txf_clear@bytes_written
  3607                           
  3608                           ;main.c: 94: return 0;
  3609                           ;	Return value of _can_txf_clear is never used
  3610                           
  3611                           ;main.c: 93: } else {
  3612                           
  3613                           ;main.c: 92: return 1;
  3614                           ;	Return value of _can_txf_clear is never used
  3615  0F90  0008               	return
  3616  0F91                     __end_of_can_txf_clear:	
  3617                           
  3618                           	psect	text4
  3619  0162                     __ptext4:	
  3620 ;; *************** function _can_receive *****************
  3621 ;; Defined at:
  3622 ;;		line 101 in file "main.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  n               1    wreg     unsigned char 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  n               1   32[BANK0 ] unsigned char 
  3627 ;;  rx_buf_ptr      1   31[BANK0 ] PTR unsigned char 
  3628 ;;		 -> rx_buf(15), 
  3629 ;;  dlc             1   30[BANK0 ] unsigned char 
  3630 ;;  bytes_read      1   29[BANK0 ] unsigned char 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;Total ram usage:        8 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    3
  3647 ;; This function calls:
  3648 ;;		_SPI_send
  3649 ;;		_printf
  3650 ;; This function is called by:
  3651 ;;		_can_status_check
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function _can_receive
  3657  0162                     _can_receive:	
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3661                           ;can_receive@n stored from wreg
  3662  0162  0020               	movlb	0	; select bank0
  3663  0163  00C0               	movwf	can_receive@n
  3664                           
  3665                           ;main.c: 103: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  3666  0164  0840               	movf	can_receive@n,w
  3667  0165  3EEC               	addlw	low (_nm| (0+32768))
  3668  0166  0084               	movwf	4
  3669  0167  3092               	movlw	high (_nm| (0+32768))
  3670  0168  1803               	skipnc
  3671  0169  3E01               	addlw	1
  3672  016A  0085               	movwf	5
  3673  016B  0800               	movf	0,w	;code access
  3674  016C  0709               	addwf	9,w
  3675  016D  3E90               	addlw	144
  3676  016E  00B9               	movwf	??_can_receive
  3677  016F  0839               	movf	??_can_receive,w
  3678  0170  0021               	movlb	1	; select bank1
  3679  0171  00A0               	movwf	_rx_buf^(0+128)
  3680                           
  3681                           ;main.c: 104: uint8_t bytes_read = SPI_send(rx_buf, 14, rx_buf);
  3682  0172  300E               	movlw	14
  3683  0173  0020               	movlb	0	; select bank0
  3684  0174  00B9               	movwf	??_can_receive
  3685  0175  0839               	movf	??_can_receive,w
  3686  0176  00F8               	movwf	SPI_send@len
  3687  0177  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  3688  0178  00BA               	movwf	??_can_receive+1
  3689  0179  083A               	movf	??_can_receive+1,w
  3690  017A  00F9               	movwf	SPI_send@rbuf
  3691  017B  30A0               	movlw	(low (_rx_buf| 0))& (0+255)
  3692  017C  318F  2705  3181   	fcall	_SPI_send
  3693  017F  0020               	movlb	0	; select bank0
  3694  0180  00BB               	movwf	??_can_receive+2
  3695  0181  083B               	movf	??_can_receive+2,w
  3696  0182  00BD               	movwf	can_receive@bytes_read
  3697                           
  3698                           ;main.c: 105: uint8_t dlc = rx_buf[5];
  3699  0183  0021               	movlb	1	; select bank1
  3700  0184  0825               	movf	(_rx_buf^(0+128)+5),w
  3701  0185  0020               	movlb	0	; select bank0
  3702  0186  00B9               	movwf	??_can_receive
  3703  0187  0839               	movf	??_can_receive,w
  3704  0188  00BE               	movwf	can_receive@dlc
  3705                           
  3706                           ;main.c: 106: rx_buf[6+dlc] = '\0';
  3707  0189  083E               	movf	can_receive@dlc,w
  3708  018A  3E06               	addlw	6
  3709  018B  3EA0               	addlw	(low (_rx_buf| 0))& (0+255)
  3710  018C  0086               	movwf	6
  3711  018D  0187               	clrf	7
  3712  018E  0181               	clrf	1
  3713                           
  3714                           ;main.c: 108: if (debug) {
  3715  018F  0865               	movf	_debug,w
  3716  0190  1903               	btfsc	3,2
  3717  0191  29F1               	goto	l1932
  3718                           
  3719                           ;main.c: 109: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  3720  0192  30BC               	movlw	low (STR_3| (0+32768))
  3721  0193  00A0               	movwf	printf@f
  3722  0194  3091               	movlw	high (STR_3| (0+32768))
  3723  0195  00A1               	movwf	printf@f+1
  3724  0196  0840               	movf	can_receive@n,w
  3725  0197  00B9               	movwf	??_can_receive
  3726  0198  01BA               	clrf	??_can_receive+1
  3727  0199  0839               	movf	??_can_receive,w
  3728  019A  00A2               	movwf	?_printf+2
  3729  019B  083A               	movf	??_can_receive+1,w
  3730  019C  00A3               	movwf	?_printf+3
  3731  019D  0021               	movlb	1	; select bank1
  3732  019E  0821               	movf	(_rx_buf^(0+128)+1),w
  3733  019F  0020               	movlb	0	; select bank0
  3734  01A0  00BB               	movwf	??_can_receive+2
  3735  01A1  01BC               	clrf	??_can_receive+3
  3736  01A2  083B               	movf	??_can_receive+2,w
  3737  01A3  00A4               	movwf	?_printf+4
  3738  01A4  083C               	movf	??_can_receive+3,w
  3739  01A5  00A5               	movwf	?_printf+5
  3740  01A6  3183  2354  3181   	fcall	_printf
  3741                           
  3742                           ;main.c: 110: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  3743  01A9  3000               	movlw	low (STR_4| (0+32768))
  3744  01AA  0020               	movlb	0	; select bank0
  3745  01AB  00A0               	movwf	printf@f
  3746  01AC  3092               	movlw	high (STR_4| (0+32768))
  3747  01AD  00A1               	movwf	printf@f+1
  3748  01AE  0840               	movf	can_receive@n,w
  3749  01AF  00B9               	movwf	??_can_receive
  3750  01B0  01BA               	clrf	??_can_receive+1
  3751  01B1  0839               	movf	??_can_receive,w
  3752  01B2  00A2               	movwf	?_printf+2
  3753  01B3  083A               	movf	??_can_receive+1,w
  3754  01B4  00A3               	movwf	?_printf+3
  3755  01B5  0021               	movlb	1	; select bank1
  3756  01B6  0822               	movf	(_rx_buf^(0+128)+2),w
  3757  01B7  0020               	movlb	0	; select bank0
  3758  01B8  00BB               	movwf	??_can_receive+2
  3759  01B9  01BC               	clrf	??_can_receive+3
  3760  01BA  083B               	movf	??_can_receive+2,w
  3761  01BB  00A4               	movwf	?_printf+4
  3762  01BC  083C               	movf	??_can_receive+3,w
  3763  01BD  00A5               	movwf	?_printf+5
  3764  01BE  3183  2354  3181   	fcall	_printf
  3765                           
  3766                           ;main.c: 111: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  3767  01C1  3044               	movlw	low (STR_5| (0+32768))
  3768  01C2  0020               	movlb	0	; select bank0
  3769  01C3  00A0               	movwf	printf@f
  3770  01C4  3092               	movlw	high (STR_5| (0+32768))
  3771  01C5  00A1               	movwf	printf@f+1
  3772  01C6  0840               	movf	can_receive@n,w
  3773  01C7  00B9               	movwf	??_can_receive
  3774  01C8  01BA               	clrf	??_can_receive+1
  3775  01C9  0839               	movf	??_can_receive,w
  3776  01CA  00A2               	movwf	?_printf+2
  3777  01CB  083A               	movf	??_can_receive+1,w
  3778  01CC  00A3               	movwf	?_printf+3
  3779  01CD  0021               	movlb	1	; select bank1
  3780  01CE  0825               	movf	(_rx_buf^(0+128)+5),w
  3781  01CF  0020               	movlb	0	; select bank0
  3782  01D0  00BB               	movwf	??_can_receive+2
  3783  01D1  01BC               	clrf	??_can_receive+3
  3784  01D2  083B               	movf	??_can_receive+2,w
  3785  01D3  00A4               	movwf	?_printf+4
  3786  01D4  083C               	movf	??_can_receive+3,w
  3787  01D5  00A5               	movwf	?_printf+5
  3788  01D6  3183  2354  3181   	fcall	_printf
  3789                           
  3790                           ;main.c: 112: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  3791  01D9  3054               	movlw	low (STR_6| (0+32768))
  3792  01DA  0020               	movlb	0	; select bank0
  3793  01DB  00A0               	movwf	printf@f
  3794  01DC  3092               	movlw	high (STR_6| (0+32768))
  3795  01DD  00A1               	movwf	printf@f+1
  3796  01DE  0840               	movf	can_receive@n,w
  3797  01DF  00B9               	movwf	??_can_receive
  3798  01E0  01BA               	clrf	??_can_receive+1
  3799  01E1  0839               	movf	??_can_receive,w
  3800  01E2  00A2               	movwf	?_printf+2
  3801  01E3  083A               	movf	??_can_receive+1,w
  3802  01E4  00A3               	movwf	?_printf+3
  3803  01E5  0021               	movlb	1	; select bank1
  3804  01E6  0826               	movf	(_rx_buf^(0+128)+6),w
  3805  01E7  0020               	movlb	0	; select bank0
  3806  01E8  00BB               	movwf	??_can_receive+2
  3807  01E9  01BC               	clrf	??_can_receive+3
  3808  01EA  083B               	movf	??_can_receive+2,w
  3809  01EB  00A4               	movwf	?_printf+4
  3810  01EC  083C               	movf	??_can_receive+3,w
  3811  01ED  00A5               	movwf	?_printf+5
  3812  01EE  3183  2354  3181   	fcall	_printf
  3813  01F1                     l1932:	
  3814                           
  3815                           ;main.c: 113: }
  3816                           ;main.c: 128: uint8_t *rx_buf_ptr = &rx_buf[6];
  3817  01F1  30A6               	movlw	(low ((_rx_buf| 0+6)))& (0+255)
  3818  01F2  0020               	movlb	0	; select bank0
  3819  01F3  00B9               	movwf	??_can_receive
  3820  01F4  0839               	movf	??_can_receive,w
  3821  01F5  00BF               	movwf	can_receive@rx_buf_ptr
  3822                           
  3823                           ;main.c: 129: if (verbose) {
  3824  01F6  0864               	movf	_verbose,w
  3825  01F7  1903               	btfsc	3,2
  3826  01F8  2A04               	goto	l1938
  3827                           
  3828                           ;main.c: 130: printf("Message received: %s\n", rx_buf_ptr);
  3829  01F9  3045               	movlw	low (STR_7| (0+32768))
  3830  01FA  00A0               	movwf	printf@f
  3831  01FB  3091               	movlw	high (STR_7| (0+32768))
  3832  01FC  00A1               	movwf	printf@f+1
  3833  01FD  083F               	movf	can_receive@rx_buf_ptr,w
  3834  01FE  00B9               	movwf	??_can_receive
  3835  01FF  0839               	movf	??_can_receive,w
  3836  0200  00A2               	movwf	low ((?_printf| 0+2))
  3837  0201  3183  2354         	fcall	_printf
  3838                           
  3839                           ;main.c: 131: } else {
  3840  0203  0008               	return
  3841  0204                     l1938:	
  3842                           
  3843                           ;main.c: 132: printf("%s\n", rx_buf_ptr);
  3844  0204  3057               	movlw	low ((STR_7+18)| (0+32768))
  3845  0205  0020               	movlb	0	; select bank0
  3846  0206  00A0               	movwf	printf@f
  3847  0207  3091               	movlw	high ((STR_7+18)| (0+32768))
  3848  0208  00A1               	movwf	printf@f+1
  3849  0209  083F               	movf	can_receive@rx_buf_ptr,w
  3850  020A  00B9               	movwf	??_can_receive
  3851  020B  0839               	movf	??_can_receive,w
  3852  020C  00A2               	movwf	low ((?_printf| 0+2))
  3853  020D  3183  2354         	fcall	_printf
  3854  020F  0008               	return
  3855  0210                     __end_of_can_receive:	
  3856                           
  3857                           	psect	text5
  3858  0210                     __ptext5:	
  3859 ;; *************** function _can_send *****************
  3860 ;; Defined at:
  3861 ;;		line 139 in file "main.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  buf             1    wreg     PTR unsigned char 
  3864 ;;		 -> buf(9), 
  3865 ;;  dlc             1   25[BANK0 ] unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  buf             1   30[BANK0 ] PTR unsigned char 
  3868 ;;		 -> buf(9), 
  3869 ;;  txb_ctrl_buf    1   36[BANK0 ] unsigned char [1]
  3870 ;;  debug_buf       3   37[BANK0 ] unsigned char [3]
  3871 ;;  can_status_b    2   31[BANK0 ] unsigned char [2]
  3872 ;;  n               1   41[BANK0 ] unsigned char 
  3873 ;;  i               1   40[BANK0 ] unsigned char 
  3874 ;;  status          1   35[BANK0 ] unsigned char 
  3875 ;;  bytes_writte    1   34[BANK0 ] unsigned char 
  3876 ;;  len             1   33[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      unsigned char 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3886 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3887 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3888 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;Total ram usage:       17 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    3
  3893 ;; This function calls:
  3894 ;;		_SPI_send
  3895 ;;		_printf
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _can_send
  3903  0210                     _can_send:	
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3907                           ;can_send@buf stored from wreg
  3908  0210  0020               	movlb	0	; select bank0
  3909  0211  00BE               	movwf	can_send@buf
  3910                           
  3911                           ;main.c: 140: uint8_t i;
  3912                           ;main.c: 141: uint8_t n = 0;
  3913  0212  01C9               	clrf	can_send@n
  3914                           
  3915                           ;main.c: 143: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3916  0213  086B               	movf	can_send@F2953+1,w
  3917  0214  00C0               	movwf	can_send@can_status_buf+1
  3918  0215  086A               	movf	can_send@F2953,w
  3919  0216  00BF               	movwf	can_send@can_status_buf
  3920                           
  3921                           ;main.c: 144: uint8_t bytes_written = SPI_send(can_status_buf, 2, can_status_buf);
  3922  0217  3002               	movlw	2
  3923  0218  00BA               	movwf	??_can_send
  3924  0219  083A               	movf	??_can_send,w
  3925  021A  00F8               	movwf	SPI_send@len
  3926  021B  303F               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  3927  021C  00BB               	movwf	??_can_send+1
  3928  021D  083B               	movf	??_can_send+1,w
  3929  021E  00F9               	movwf	SPI_send@rbuf
  3930  021F  303F               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  3931  0220  318F  2705  3182   	fcall	_SPI_send
  3932  0223  0020               	movlb	0	; select bank0
  3933  0224  00BC               	movwf	??_can_send+2
  3934  0225  083C               	movf	??_can_send+2,w
  3935  0226  00C2               	movwf	can_send@bytes_written
  3936                           
  3937                           ;main.c: 145: uint8_t status = can_status_buf[1];
  3938  0227  0840               	movf	can_send@can_status_buf+1,w
  3939  0228  00BA               	movwf	??_can_send
  3940  0229  083A               	movf	??_can_send,w
  3941  022A  00C3               	movwf	can_send@status
  3942                           
  3943                           ;main.c: 146: if ((status & 0b00000100) == 0) {
  3944  022B  1943               	btfsc	can_send@status,2
  3945  022C  2A3A               	goto	l213
  3946                           
  3947                           ;main.c: 147: if (debug) printf("TXB0 is idle\n");
  3948  022D  0865               	movf	_debug,w
  3949  022E  1903               	btfsc	3,2
  3950  022F  2A37               	goto	l1990
  3951  0230  3080               	movlw	low (STR_9| (0+32768))
  3952  0231  00A0               	movwf	printf@f
  3953  0232  3092               	movlw	high (STR_9| (0+32768))
  3954  0233  00A1               	movwf	printf@f+1
  3955  0234  3183  2354  3182   	fcall	_printf
  3956  0237                     l1990:	
  3957                           
  3958                           ;main.c: 148: n = 0;
  3959  0237  0020               	movlb	0	; select bank0
  3960  0238  01C9               	clrf	can_send@n
  3961                           
  3962                           ;main.c: 149: } else if ((status & 0b00010000) == 0) {
  3963  0239  2A5B               	goto	l2004
  3964  023A                     l213:	
  3965  023A  1A43               	btfsc	can_send@status,4
  3966  023B  2A4A               	goto	l216
  3967                           
  3968                           ;main.c: 150: if (debug) printf("TXB1 is idle\n");
  3969  023C  0865               	movf	_debug,w
  3970  023D  1903               	btfsc	3,2
  3971  023E  2A46               	goto	l1996
  3972  023F  308E               	movlw	low (STR_10| (0+32768))
  3973  0240  00A0               	movwf	printf@f
  3974  0241  3092               	movlw	high (STR_10| (0+32768))
  3975  0242  00A1               	movwf	printf@f+1
  3976  0243  3183  2354  3182   	fcall	_printf
  3977  0246                     l1996:	
  3978                           
  3979                           ;main.c: 151: n = 1;
  3980  0246  0020               	movlb	0	; select bank0
  3981  0247  01C9               	clrf	can_send@n
  3982  0248  0AC9               	incf	can_send@n,f
  3983                           
  3984                           ;main.c: 152: } else if ((status & 0b01000000) > 0) {
  3985  0249  2A5B               	goto	l2004
  3986  024A                     l216:	
  3987  024A  1F43               	btfss	can_send@status,6
  3988  024B  2A5B               	goto	l2004
  3989                           
  3990                           ;main.c: 153: if (debug) printf("TXB2 is idle\n");
  3991  024C  0865               	movf	_debug,w
  3992  024D  1903               	btfsc	3,2
  3993  024E  2A56               	goto	l2002
  3994  024F  309C               	movlw	low (STR_11| (0+32768))
  3995  0250  00A0               	movwf	printf@f
  3996  0251  3092               	movlw	high (STR_11| (0+32768))
  3997  0252  00A1               	movwf	printf@f+1
  3998  0253  3183  2354  3182   	fcall	_printf
  3999  0256                     l2002:	
  4000                           
  4001                           ;main.c: 154: n = 2;
  4002  0256  3002               	movlw	2
  4003  0257  0020               	movlb	0	; select bank0
  4004  0258  00BA               	movwf	??_can_send
  4005  0259  083A               	movf	??_can_send,w
  4006  025A  00C9               	movwf	can_send@n
  4007  025B                     l2004:	
  4008                           
  4009                           ;main.c: 155: }
  4010                           ;main.c: 158: tx_buf[0] = 0b01000000 + abc[n];
  4011  025B  0849               	movf	can_send@n,w
  4012  025C  3EE6               	addlw	low (_abc| (0+32768))
  4013  025D  0084               	movwf	4
  4014  025E  3092               	movlw	high (_abc| (0+32768))
  4015  025F  1803               	skipnc
  4016  0260  3E01               	addlw	1
  4017  0261  0085               	movwf	5
  4018  0262  0800               	movf	0,w	;code access
  4019  0263  3E40               	addlw	64
  4020  0264  00BA               	movwf	??_can_send
  4021  0265  083A               	movf	??_can_send,w
  4022  0266  0021               	movlb	1	; select bank1
  4023  0267  00AF               	movwf	_tx_buf^(0+128)
  4024                           
  4025                           ;main.c: 160: tx_buf[1] = sid.sidh;
  4026  0268  0020               	movlb	0	; select bank0
  4027  0269  0861               	movf	_sid,w
  4028  026A  00BA               	movwf	??_can_send
  4029  026B  083A               	movf	??_can_send,w
  4030  026C  0021               	movlb	1	; select bank1
  4031  026D  00B0               	movwf	(_tx_buf^(0+128)+1)
  4032                           
  4033                           ;main.c: 162: tx_buf[2] = sid.sidl;
  4034  026E  0020               	movlb	0	; select bank0
  4035  026F  0862               	movf	_sid+1,w
  4036  0270  00BA               	movwf	??_can_send
  4037  0271  083A               	movf	??_can_send,w
  4038  0272  0021               	movlb	1	; select bank1
  4039  0273  00B1               	movwf	(_tx_buf^(0+128)+2)
  4040                           
  4041                           ;main.c: 164: tx_buf[3] = 0;
  4042  0274  01B2               	clrf	(_tx_buf^(0+128)+3)
  4043                           
  4044                           ;main.c: 166: tx_buf[4] = 0;
  4045  0275  01B3               	clrf	(_tx_buf^(0+128)+4)
  4046                           
  4047                           ;main.c: 168: tx_buf[5] = dlc;
  4048  0276  0020               	movlb	0	; select bank0
  4049  0277  0839               	movf	can_send@dlc,w
  4050  0278  00BA               	movwf	??_can_send
  4051  0279  083A               	movf	??_can_send,w
  4052  027A  0021               	movlb	1	; select bank1
  4053  027B  00B4               	movwf	(_tx_buf^(0+128)+5)
  4054                           
  4055                           ;main.c: 171: for(i=0; i<dlc; i++) {
  4056  027C  0020               	movlb	0	; select bank0
  4057  027D  01C8               	clrf	can_send@i
  4058  027E                     l2026:	
  4059  027E  0839               	movf	can_send@dlc,w
  4060  027F  0248               	subwf	can_send@i,w
  4061  0280  1803               	btfsc	3,0
  4062  0281  2AAD               	goto	l2028
  4063                           
  4064                           ;main.c: 172: tx_buf[6+i] = buf[i];
  4065  0282  0848               	movf	can_send@i,w
  4066  0283  073E               	addwf	can_send@buf,w
  4067  0284  00BA               	movwf	??_can_send
  4068  0285  083A               	movf	??_can_send,w
  4069  0286  0086               	movwf	6
  4070  0287  0187               	clrf	7
  4071  0288  0801               	movf	1,w
  4072  0289  00BB               	movwf	??_can_send+1
  4073  028A  0848               	movf	can_send@i,w
  4074  028B  3E06               	addlw	6
  4075  028C  3EAF               	addlw	(low (_tx_buf| 0))& (0+255)
  4076  028D  0086               	movwf	6
  4077  028E  0187               	clrf	7
  4078  028F  083B               	movf	??_can_send+1,w
  4079  0290  0081               	movwf	1
  4080                           
  4081                           ;main.c: 173: if (debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4082  0291  0865               	movf	_debug,w
  4083  0292  1903               	btfsc	3,2
  4084  0293  2AA7               	goto	l2024
  4085  0294  3070               	movlw	low (STR_12| (0+32768))
  4086  0295  00A0               	movwf	printf@f
  4087  0296  3091               	movlw	high (STR_12| (0+32768))
  4088  0297  00A1               	movwf	printf@f+1
  4089  0298  0848               	movf	can_send@i,w
  4090  0299  3E06               	addlw	6
  4091  029A  3EAF               	addlw	(low (_tx_buf| 0))& (0+255)
  4092  029B  0086               	movwf	6
  4093  029C  0187               	clrf	7
  4094  029D  0801               	movf	1,w
  4095  029E  00BA               	movwf	??_can_send
  4096  029F  01BB               	clrf	??_can_send+1
  4097  02A0  083A               	movf	??_can_send,w
  4098  02A1  00A2               	movwf	?_printf+2
  4099  02A2  083B               	movf	??_can_send+1,w
  4100  02A3  00A3               	movwf	?_printf+3
  4101  02A4  3183  2354  3182   	fcall	_printf
  4102  02A7                     l2024:	
  4103  02A7  3001               	movlw	1
  4104  02A8  0020               	movlb	0	; select bank0
  4105  02A9  00BA               	movwf	??_can_send
  4106  02AA  083A               	movf	??_can_send,w
  4107  02AB  07C8               	addwf	can_send@i,f
  4108  02AC  2A7E               	goto	l2026
  4109  02AD                     l2028:	
  4110                           
  4111                           ;main.c: 174: }
  4112                           ;main.c: 177: uint8_t len = 6 + dlc;
  4113  02AD  0839               	movf	can_send@dlc,w
  4114  02AE  3E06               	addlw	6
  4115  02AF  00BA               	movwf	??_can_send
  4116  02B0  083A               	movf	??_can_send,w
  4117  02B1  00C1               	movwf	can_send@len
  4118                           
  4119                           ;main.c: 178: uint8_t bytes_written = SPI_send(tx_buf, len, tx_buf);
  4120  02B2  0841               	movf	can_send@len,w
  4121  02B3  00BA               	movwf	??_can_send
  4122  02B4  083A               	movf	??_can_send,w
  4123  02B5  00F8               	movwf	SPI_send@len
  4124  02B6  30AF               	movlw	(low (_tx_buf| 0))& (0+255)
  4125  02B7  00BB               	movwf	??_can_send+1
  4126  02B8  083B               	movf	??_can_send+1,w
  4127  02B9  00F9               	movwf	SPI_send@rbuf
  4128  02BA  30AF               	movlw	(low (_tx_buf| 0))& (0+255)
  4129  02BB  318F  2705  3182   	fcall	_SPI_send
  4130  02BE  0020               	movlb	0	; select bank0
  4131  02BF  00BC               	movwf	??_can_send+2
  4132  02C0  083C               	movf	??_can_send+2,w
  4133  02C1  00C2               	movwf	can_send@bytes_written
  4134                           
  4135                           ;main.c: 180: uint8_t debug_buf[3];
  4136                           ;main.c: 181: debug_buf[0] = 0b00000011;
  4137  02C2  3003               	movlw	3
  4138  02C3  00BA               	movwf	??_can_send
  4139  02C4  083A               	movf	??_can_send,w
  4140  02C5  00C5               	movwf	can_send@debug_buf
  4141                           
  4142                           ;main.c: 182: debug_buf[1] = txbnsidh[n];
  4143  02C6  0849               	movf	can_send@n,w
  4144  02C7  3EE3               	addlw	low (_txbnsidh| (0+32768))
  4145  02C8  0084               	movwf	4
  4146  02C9  3092               	movlw	high (_txbnsidh| (0+32768))
  4147  02CA  1803               	skipnc
  4148  02CB  3E01               	addlw	1
  4149  02CC  0085               	movwf	5
  4150  02CD  0800               	movf	0,w	;code access
  4151  02CE  00BA               	movwf	??_can_send
  4152  02CF  083A               	movf	??_can_send,w
  4153  02D0  00C6               	movwf	can_send@debug_buf+1
  4154                           
  4155                           ;main.c: 183: debug_buf[2] = 0x00;
  4156  02D1  01C7               	clrf	can_send@debug_buf+2
  4157                           
  4158                           ;main.c: 184: SPI_send(debug_buf, 3, debug_buf);
  4159  02D2  3003               	movlw	3
  4160  02D3  00BA               	movwf	??_can_send
  4161  02D4  083A               	movf	??_can_send,w
  4162  02D5  00F8               	movwf	SPI_send@len
  4163  02D6  3045               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4164  02D7  00BB               	movwf	??_can_send+1
  4165  02D8  083B               	movf	??_can_send+1,w
  4166  02D9  00F9               	movwf	SPI_send@rbuf
  4167  02DA  3045               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4168  02DB  318F  2705  3182   	fcall	_SPI_send
  4169                           
  4170                           ;main.c: 186: if (debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  4171  02DE  0020               	movlb	0	; select bank0
  4172  02DF  0865               	movf	_debug,w
  4173  02E0  1903               	btfsc	3,2
  4174  02E1  2AF7               	goto	l2044
  4175  02E2  30CD               	movlw	low (STR_13| (0+32768))
  4176  02E3  00A0               	movwf	printf@f
  4177  02E4  3091               	movlw	high (STR_13| (0+32768))
  4178  02E5  00A1               	movwf	printf@f+1
  4179  02E6  0849               	movf	can_send@n,w
  4180  02E7  00BA               	movwf	??_can_send
  4181  02E8  01BB               	clrf	??_can_send+1
  4182  02E9  083A               	movf	??_can_send,w
  4183  02EA  00A2               	movwf	?_printf+2
  4184  02EB  083B               	movf	??_can_send+1,w
  4185  02EC  00A3               	movwf	?_printf+3
  4186  02ED  0847               	movf	can_send@debug_buf+2,w
  4187  02EE  00BC               	movwf	??_can_send+2
  4188  02EF  01BD               	clrf	??_can_send+3
  4189  02F0  083C               	movf	??_can_send+2,w
  4190  02F1  00A4               	movwf	?_printf+4
  4191  02F2  083D               	movf	??_can_send+3,w
  4192  02F3  00A5               	movwf	?_printf+5
  4193  02F4  3183  2354  3182   	fcall	_printf
  4194  02F7                     l2044:	
  4195                           
  4196                           ;main.c: 187: debug_buf[0] = 0b00000011;
  4197  02F7  3003               	movlw	3
  4198  02F8  0020               	movlb	0	; select bank0
  4199  02F9  00BA               	movwf	??_can_send
  4200  02FA  083A               	movf	??_can_send,w
  4201  02FB  00C5               	movwf	can_send@debug_buf
  4202                           
  4203                           ;main.c: 188: debug_buf[1] = txbnsidh[n] + 1;
  4204  02FC  0849               	movf	can_send@n,w
  4205  02FD  3EE3               	addlw	low (_txbnsidh| (0+32768))
  4206  02FE  0084               	movwf	4
  4207  02FF  3092               	movlw	high (_txbnsidh| (0+32768))
  4208  0300  1803               	skipnc
  4209  0301  3E01               	addlw	1
  4210  0302  0085               	movwf	5
  4211  0303  0800               	movf	0,w	;code access
  4212  0304  3E01               	addlw	1
  4213  0305  00BA               	movwf	??_can_send
  4214  0306  083A               	movf	??_can_send,w
  4215  0307  00C6               	movwf	can_send@debug_buf+1
  4216                           
  4217                           ;main.c: 189: debug_buf[2] = 0x00;
  4218  0308  01C7               	clrf	can_send@debug_buf+2
  4219                           
  4220                           ;main.c: 190: SPI_send(debug_buf, 3, debug_buf);
  4221  0309  3003               	movlw	3
  4222  030A  00BA               	movwf	??_can_send
  4223  030B  083A               	movf	??_can_send,w
  4224  030C  00F8               	movwf	SPI_send@len
  4225  030D  3045               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4226  030E  00BB               	movwf	??_can_send+1
  4227  030F  083B               	movf	??_can_send+1,w
  4228  0310  00F9               	movwf	SPI_send@rbuf
  4229  0311  3045               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4230  0312  318F  2705  3182   	fcall	_SPI_send
  4231                           
  4232                           ;main.c: 192: if (debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  4233  0315  0020               	movlb	0	; select bank0
  4234  0316  0865               	movf	_debug,w
  4235  0317  1903               	btfsc	3,2
  4236  0318  2B2E               	goto	l2056
  4237  0319  3011               	movlw	low (STR_14| (0+32768))
  4238  031A  00A0               	movwf	printf@f
  4239  031B  3092               	movlw	high (STR_14| (0+32768))
  4240  031C  00A1               	movwf	printf@f+1
  4241  031D  0849               	movf	can_send@n,w
  4242  031E  00BA               	movwf	??_can_send
  4243  031F  01BB               	clrf	??_can_send+1
  4244  0320  083A               	movf	??_can_send,w
  4245  0321  00A2               	movwf	?_printf+2
  4246  0322  083B               	movf	??_can_send+1,w
  4247  0323  00A3               	movwf	?_printf+3
  4248  0324  0847               	movf	can_send@debug_buf+2,w
  4249  0325  00BC               	movwf	??_can_send+2
  4250  0326  01BD               	clrf	??_can_send+3
  4251  0327  083C               	movf	??_can_send+2,w
  4252  0328  00A4               	movwf	?_printf+4
  4253  0329  083D               	movf	??_can_send+3,w
  4254  032A  00A5               	movwf	?_printf+5
  4255  032B  3183  2354  3182   	fcall	_printf
  4256  032E                     l2056:	
  4257                           
  4258                           ;main.c: 194: if (bytes_written == len) {
  4259  032E  0020               	movlb	0	; select bank0
  4260  032F  0842               	movf	can_send@bytes_written,w
  4261  0330  0641               	xorwf	can_send@len,w
  4262  0331  1D03               	skipz
  4263  0332  2B52               	goto	l2068
  4264                           
  4265                           ;main.c: 196: uint8_t txb_ctrl_buf[1];
  4266                           ;main.c: 197: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  4267  0333  3001               	movlw	1
  4268  0334  00BA               	movwf	??_can_send
  4269  0335  0A49               	incf	can_send@n,w
  4270  0336  2B38               	goto	u1904
  4271  0337                     u1905:	
  4272  0337  35BA               	lslf	??_can_send,f
  4273  0338                     u1904:	
  4274  0338  0B89               	decfsz	9,f
  4275  0339  2B37               	goto	u1905
  4276  033A  083A               	movf	??_can_send,w
  4277  033B  3E80               	addlw	128
  4278  033C  00BB               	movwf	??_can_send+1
  4279  033D  083B               	movf	??_can_send+1,w
  4280  033E  00C4               	movwf	can_send@txb_ctrl_buf
  4281                           
  4282                           ;main.c: 198: bytes_written = SPI_send(txb_ctrl_buf, 1, txb_ctrl_buf);
  4283  033F  01F8               	clrf	SPI_send@len
  4284  0340  0AF8               	incf	SPI_send@len,f
  4285  0341  3044               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4286  0342  00BA               	movwf	??_can_send
  4287  0343  083A               	movf	??_can_send,w
  4288  0344  00F9               	movwf	SPI_send@rbuf
  4289  0345  3044               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4290  0346  318F  2705  3182   	fcall	_SPI_send
  4291  0349  0020               	movlb	0	; select bank0
  4292  034A  00BB               	movwf	??_can_send+1
  4293  034B  083B               	movf	??_can_send+1,w
  4294  034C  00C2               	movwf	can_send@bytes_written
  4295                           
  4296                           ;main.c: 199: if (bytes_written == 1) {
  4297  034D  0342               	decf	can_send@bytes_written,w
  4298  034E  1D03               	btfss	3,2
  4299  034F  2B52               	goto	l2068
  4300                           
  4301                           ;main.c: 200: return 1;
  4302  0350  3001               	movlw	1
  4303  0351  0008               	return
  4304  0352                     l2068:	
  4305                           
  4306                           ;main.c: 201: }
  4307                           ;main.c: 202: }
  4308                           ;main.c: 204: return 0;
  4309  0352  3000               	movlw	0
  4310  0353  0008               	return
  4311  0354                     __end_of_can_send:	
  4312                           
  4313                           	psect	text6
  4314  0014                     __ptext6:	
  4315 ;; *************** function _can_ope_mode *****************
  4316 ;; Defined at:
  4317 ;;		line 63 in file "main.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  ope_mode        1    wreg     unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  ope_mode        1   28[BANK0 ] unsigned char 
  4322 ;;  can_ctrl_buf    3   30[BANK0 ] unsigned char [3]
  4323 ;;  bytes_writte    1   29[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      unsigned char 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;Total ram usage:        8 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    3
  4340 ;; This function calls:
  4341 ;;		_SPI_send
  4342 ;;		_printf
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _can_ope_mode
  4350  0014                     _can_ope_mode:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4354                           ;can_ope_mode@ope_mode stored from wreg
  4355  0014  0020               	movlb	0	; select bank0
  4356  0015  00BC               	movwf	can_ope_mode@ope_mode
  4357                           
  4358                           ;main.c: 64: uint8_t can_ctrl_buf[3];
  4359                           ;main.c: 65: can_ctrl_buf[0] = 0b00000010;
  4360  0016  3002               	movlw	2
  4361  0017  00B9               	movwf	??_can_ope_mode
  4362  0018  0839               	movf	??_can_ope_mode,w
  4363  0019  00BE               	movwf	can_ope_mode@can_ctrl_buf
  4364                           
  4365                           ;main.c: 66: can_ctrl_buf[1] = 0x0f;
  4366  001A  300F               	movlw	15
  4367  001B  00B9               	movwf	??_can_ope_mode
  4368  001C  0839               	movf	??_can_ope_mode,w
  4369  001D  00BF               	movwf	can_ope_mode@can_ctrl_buf+1
  4370                           
  4371                           ;main.c: 67: can_ctrl_buf[2] = ope_mode;
  4372  001E  083C               	movf	can_ope_mode@ope_mode,w
  4373  001F  00B9               	movwf	??_can_ope_mode
  4374  0020  0839               	movf	??_can_ope_mode,w
  4375  0021  00C0               	movwf	can_ope_mode@can_ctrl_buf+2
  4376                           
  4377                           ;main.c: 68: uint8_t bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  4378  0022  3003               	movlw	3
  4379  0023  00B9               	movwf	??_can_ope_mode
  4380  0024  0839               	movf	??_can_ope_mode,w
  4381  0025  00F8               	movwf	SPI_send@len
  4382  0026  303E               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4383  0027  00BA               	movwf	??_can_ope_mode+1
  4384  0028  083A               	movf	??_can_ope_mode+1,w
  4385  0029  00F9               	movwf	SPI_send@rbuf
  4386  002A  303E               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4387  002B  318F  2705  3180   	fcall	_SPI_send
  4388  002E  0020               	movlb	0	; select bank0
  4389  002F  00BB               	movwf	??_can_ope_mode+2
  4390  0030  083B               	movf	??_can_ope_mode+2,w
  4391  0031  00BD               	movwf	can_ope_mode@bytes_written
  4392                           
  4393                           ;main.c: 69: if (bytes_written == 3) {
  4394  0032  3003               	movlw	3
  4395  0033  063D               	xorwf	can_ope_mode@bytes_written,w
  4396  0034  1D03               	btfss	3,2
  4397  0035  0008               	return
  4398                           
  4399                           ;main.c: 70: can_ctrl_buf[0] = 0b00000011;
  4400  0036  3003               	movlw	3
  4401  0037  00B9               	movwf	??_can_ope_mode
  4402  0038  0839               	movf	??_can_ope_mode,w
  4403  0039  00BE               	movwf	can_ope_mode@can_ctrl_buf
  4404                           
  4405                           ;main.c: 71: can_ctrl_buf[1] = 0x0e;
  4406  003A  300E               	movlw	14
  4407  003B  00B9               	movwf	??_can_ope_mode
  4408  003C  0839               	movf	??_can_ope_mode,w
  4409  003D  00BF               	movwf	can_ope_mode@can_ctrl_buf+1
  4410                           
  4411                           ;main.c: 72: bytes_written = SPI_send(can_ctrl_buf, 3, can_ctrl_buf);
  4412  003E  3003               	movlw	3
  4413  003F  00B9               	movwf	??_can_ope_mode
  4414  0040  0839               	movf	??_can_ope_mode,w
  4415  0041  00F8               	movwf	SPI_send@len
  4416  0042  303E               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4417  0043  00BA               	movwf	??_can_ope_mode+1
  4418  0044  083A               	movf	??_can_ope_mode+1,w
  4419  0045  00F9               	movwf	SPI_send@rbuf
  4420  0046  303E               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4421  0047  318F  2705  3180   	fcall	_SPI_send
  4422  004A  0020               	movlb	0	; select bank0
  4423  004B  00BB               	movwf	??_can_ope_mode+2
  4424  004C  083B               	movf	??_can_ope_mode+2,w
  4425  004D  00BD               	movwf	can_ope_mode@bytes_written
  4426                           
  4427                           ;main.c: 73: if (debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  4428  004E  0865               	movf	_debug,w
  4429  004F  1903               	btfsc	3,2
  4430  0050  0008               	return
  4431  0051  3063               	movlw	low (STR_2| (0+32768))
  4432  0052  00A0               	movwf	printf@f
  4433  0053  3092               	movlw	high (STR_2| (0+32768))
  4434  0054  00A1               	movwf	printf@f+1
  4435  0055  0840               	movf	can_ope_mode@can_ctrl_buf+2,w
  4436  0056  00B9               	movwf	??_can_ope_mode
  4437  0057  01BA               	clrf	??_can_ope_mode+1
  4438  0058  0839               	movf	??_can_ope_mode,w
  4439  0059  00A2               	movwf	?_printf+2
  4440  005A  083A               	movf	??_can_ope_mode+1,w
  4441  005B  00A3               	movwf	?_printf+3
  4442  005C  3183  2354         	fcall	_printf
  4443                           
  4444                           ;main.c: 76: return 0;
  4445                           ;	Return value of _can_ope_mode is never used
  4446                           
  4447                           ;main.c: 75: } else {
  4448                           
  4449                           ;main.c: 74: return 1;
  4450                           ;	Return value of _can_ope_mode is never used
  4451  005E  0008               	return
  4452  005F                     __end_of_can_ope_mode:	
  4453                           
  4454                           	psect	text7
  4455  0354                     __ptext7:	
  4456 ;; *************** function _printf *****************
  4457 ;; Defined at:
  4458 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  4461 ;;		 -> STR_36(25), STR_35(19), STR_34(24), STR_33(18), 
  4462 ;;		 -> STR_32(22), STR_31(44), STR_30(26), STR_29(42), 
  4463 ;;		 -> STR_28(38), STR_27(54), STR_26(59), STR_25(51), 
  4464 ;;		 -> STR_24(14), STR_23(17), STR_22(17), STR_21(17), 
  4465 ;;		 -> STR_20(17), STR_19(23), STR_18(21), STR_17(3), 
  4466 ;;		 -> STR_16(13), STR_15(13), STR_14(17), STR_13(17), 
  4467 ;;		 -> STR_12(20), STR_11(14), STR_10(14), STR_9(14), 
  4468 ;;		 -> STR_8(4), STR_7(22), STR_6(15), STR_5(16), 
  4469 ;;		 -> STR_4(17), STR_3(17), STR_2(15), STR_1(20), 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  idx             1   12[BANK0 ] unsigned char 
  4472 ;;  tmpval          4    0        struct .
  4473 ;;  width           2   22[BANK0 ] int 
  4474 ;;  val             2   19[BANK0 ] unsigned int 
  4475 ;;  len             2   16[BANK0 ] unsigned int 
  4476 ;;  cp              2   14[BANK0 ] PTR const unsigned char 
  4477 ;;		 -> STR_37(7), printf@c(1), buf(9), rx_buf(15), 
  4478 ;;  c               1   24[BANK0 ] char 
  4479 ;;  flag            1   21[BANK0 ] unsigned char 
  4480 ;;  ap              1   18[BANK0 ] PTR void [1]
  4481 ;;		 -> ?_printf(2), 
  4482 ;;  prec            1   13[BANK0 ] char 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  2    0[BANK0 ] int 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4492 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;Total ram usage:       25 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		___lwdiv
  4501 ;;		___lwmod
  4502 ;;		___wmul
  4503 ;;		_isdigit
  4504 ;;		_putch
  4505 ;; This function is called by:
  4506 ;;		_set_sid
  4507 ;;		_can_ope_mode
  4508 ;;		_can_receive
  4509 ;;		_can_send
  4510 ;;		_can_status_check
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _printf
  4517  0354                     _printf:	
  4518                           
  4519                           ;doprnt.c: 466: va_list ap;
  4520                           ;doprnt.c: 499: signed char c;
  4521                           ;doprnt.c: 501: int width;
  4522                           ;doprnt.c: 506: signed char prec;
  4523                           ;doprnt.c: 508: unsigned char flag;
  4524                           ;doprnt.c: 523: union {
  4525                           ;doprnt.c: 524: unsigned long vd;
  4526                           ;doprnt.c: 525: double integ;
  4527                           ;doprnt.c: 526: } tmpval;
  4528                           ;doprnt.c: 528: unsigned int val;
  4529                           ;doprnt.c: 529: unsigned len;
  4530                           ;doprnt.c: 530: const char * cp;
  4531                           ;doprnt.c: 533: *ap = __va_start();
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4535  0354  3022               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4536  0355  0020               	movlb	0	; select bank0
  4537  0356  00A8               	movwf	??_printf
  4538  0357  0828               	movf	??_printf,w
  4539  0358  00B2               	movwf	printf@ap
  4540  0359                     l1858:	
  4541                           ;doprnt.c: 536: while(c = *f++) {
  4542                           
  4543  0359  0020               	movlb	0	; select bank0
  4544  035A  0821               	movf	printf@f+1,w
  4545  035B  00A9               	movwf	??_printf+1
  4546  035C  0820               	movf	printf@f,w
  4547  035D  00A8               	movwf	??_printf
  4548  035E  0AA0               	incf	printf@f,f
  4549  035F  1903               	skipnz
  4550  0360  0AA1               	incf	printf@f+1,f
  4551  0361  0828               	movf	??_printf,w
  4552  0362  0084               	movwf	4
  4553  0363  0829               	movf	??_printf+1,w
  4554  0364  0085               	movwf	5
  4555  0365  0800               	movf	0,w	;code access
  4556  0366  00AA               	movwf	??_printf+2
  4557  0367  082A               	movf	??_printf+2,w
  4558  0368  00B8               	movwf	printf@c
  4559  0369  0838               	movf	printf@c,w
  4560  036A  1903               	btfsc	3,2
  4561  036B  0008               	return
  4562                           
  4563                           ;doprnt.c: 538: if(c != '%')
  4564  036C  3025               	movlw	37
  4565  036D  0638               	xorwf	printf@c,w
  4566  036E  1903               	btfsc	3,2
  4567  036F  2B75               	goto	l1710
  4568                           
  4569                           ;doprnt.c: 540: {
  4570                           ;doprnt.c: 541: (putch(c) );
  4571  0370  0838               	movf	printf@c,w
  4572  0371  318E  26A1  3183   	fcall	_putch
  4573                           
  4574                           ;doprnt.c: 542: continue;
  4575  0374  2B59               	goto	l1858
  4576  0375                     l1710:	
  4577                           
  4578                           ;doprnt.c: 543: }
  4579                           ;doprnt.c: 546: width = 0;
  4580  0375  0020               	movlb	0	; select bank0
  4581  0376  01B6               	clrf	printf@width
  4582  0377  01B7               	clrf	printf@width+1
  4583                           
  4584                           ;doprnt.c: 548: flag = 0;
  4585  0378  01B5               	clrf	printf@flag
  4586                           
  4587                           ;doprnt.c: 551: switch(*f) {
  4588                           
  4589                           ;doprnt.c: 550: for(;;) {
  4590  0379  2B7F               	goto	l1716
  4591  037A                     l320:	
  4592                           ;doprnt.c: 579: case '0':
  4593                           
  4594                           
  4595                           ;doprnt.c: 580: flag |= 0x04;
  4596  037A  1535               	bsf	printf@flag,2
  4597                           
  4598                           ;doprnt.c: 581: f++;
  4599  037B  3001               	movlw	1
  4600  037C  07A0               	addwf	printf@f,f
  4601  037D  3000               	movlw	0
  4602  037E  3DA1               	addwfc	printf@f+1,f
  4603  037F                     l1716:	
  4604                           ;doprnt.c: 584: }
  4605                           
  4606                           ;doprnt.c: 582: continue;
  4607                           
  4608  037F  0820               	movf	printf@f,w
  4609  0380  0084               	movwf	4
  4610  0381  0821               	movf	printf@f+1,w
  4611  0382  0085               	movwf	5
  4612  0383  0800               	movf	0,w	;code access
  4613                           
  4614                           ; Switch size 1, requested type "space"
  4615                           ; Number of cases is 1, Range of values is 48 to 48
  4616                           ; switch strategies available:
  4617                           ; Name         Instructions Cycles
  4618                           ; simple_byte            4     3 (average)
  4619                           ; direct_byte           11     9 (fixed)
  4620                           ; jumptable            263     9 (fixed)
  4621                           ;	Chosen strategy is simple_byte
  4622  0384  3A30               	xorlw	48	; case 48
  4623  0385  1903               	skipnz
  4624  0386  2B7A               	goto	l320
  4625  0387  2B88               	goto	l1718
  4626  0388                     l1718:	
  4627                           ;doprnt.c: 586: }
  4628                           
  4629                           ;doprnt.c: 585: break;
  4630                           
  4631                           
  4632                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4633  0388  0820               	movf	printf@f,w
  4634  0389  0084               	movwf	4
  4635  038A  0821               	movf	printf@f+1,w
  4636  038B  0085               	movwf	5
  4637  038C  0800               	movf	0,w	;code access
  4638  038D  318E  26E0  3183   	fcall	_isdigit
  4639  0390  1C03               	btfss	3,0
  4640  0391  2C33               	goto	l1770
  4641                           
  4642                           ;doprnt.c: 598: width = 0;
  4643  0392  0020               	movlb	0	; select bank0
  4644  0393  01B6               	clrf	printf@width
  4645  0394  01B7               	clrf	printf@width+1
  4646  0395                     l1722:	
  4647                           ;doprnt.c: 599: do {
  4648                           
  4649                           
  4650                           ;doprnt.c: 600: width *= 10;
  4651  0395  300A               	movlw	10
  4652  0396  00F0               	movwf	___wmul@multiplier
  4653  0397  3000               	movlw	0
  4654  0398  00F1               	movwf	___wmul@multiplier+1
  4655  0399  0020               	movlb	0	; select bank0
  4656  039A  0837               	movf	printf@width+1,w
  4657  039B  00F3               	movwf	___wmul@multiplicand+1
  4658  039C  0836               	movf	printf@width,w
  4659  039D  00F2               	movwf	___wmul@multiplicand
  4660  039E  318F  271E  3183   	fcall	___wmul
  4661  03A1  0871               	movf	?___wmul+1,w
  4662  03A2  0020               	movlb	0	; select bank0
  4663  03A3  00B7               	movwf	printf@width+1
  4664  03A4  0870               	movf	?___wmul,w
  4665  03A5  00B6               	movwf	printf@width
  4666                           
  4667                           ;doprnt.c: 601: width += *f++ - '0';
  4668  03A6  0820               	movf	printf@f,w
  4669  03A7  0084               	movwf	4
  4670  03A8  0821               	movf	printf@f+1,w
  4671  03A9  0085               	movwf	5
  4672  03AA  0800               	movf	0,w	;code access
  4673  03AB  3ED0               	addlw	208
  4674  03AC  00A8               	movwf	??_printf
  4675  03AD  30FF               	movlw	255
  4676  03AE  1803               	skipnc
  4677  03AF  3000               	movlw	0
  4678  03B0  00A9               	movwf	??_printf+1
  4679  03B1  0828               	movf	??_printf,w
  4680  03B2  07B6               	addwf	printf@width,f
  4681  03B3  0829               	movf	??_printf+1,w
  4682  03B4  3DB7               	addwfc	printf@width+1,f
  4683  03B5  3001               	movlw	1
  4684  03B6  07A0               	addwf	printf@f,f
  4685  03B7  3000               	movlw	0
  4686  03B8  3DA1               	addwfc	printf@f+1,f
  4687                           
  4688                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4689  03B9  0820               	movf	printf@f,w
  4690  03BA  0084               	movwf	4
  4691  03BB  0821               	movf	printf@f+1,w
  4692  03BC  0085               	movwf	5
  4693  03BD  0800               	movf	0,w	;code access
  4694  03BE  318E  26E0  3183   	fcall	_isdigit
  4695  03C1  1C03               	btfss	3,0
  4696  03C2  2C33               	goto	l1770
  4697  03C3  2B95               	goto	l1722
  4698  03C4                     l333:	
  4699                           ;doprnt.c: 718: case 'x':
  4700                           
  4701                           ;doprnt.c: 698: case 'i':
  4702                           ;doprnt.c: 699: break;
  4703                           
  4704                           ;doprnt.c: 697: case 'd':
  4705                           
  4706                           ;doprnt.c: 638: goto alldone;
  4707                           
  4708                           ;doprnt.c: 637: case 0:
  4709                           
  4710                           ;doprnt.c: 608: }
  4711                           ;doprnt.c: 635: switch(c = *f++) {
  4712                           
  4713                           
  4714                           ;doprnt.c: 721: flag |= 0x80;
  4715  03C4  17B5               	bsf	printf@flag,7
  4716                           
  4717                           ;doprnt.c: 723: break;
  4718  03C5  2C54               	goto	l332
  4719  03C6                     l1730:	
  4720                           ;doprnt.c: 728: case 's':
  4721                           
  4722                           
  4723                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4724  03C6  0832               	movf	printf@ap,w
  4725  03C7  0086               	movwf	6
  4726  03C8  0187               	clrf	7
  4727  03C9  0801               	movf	1,w
  4728  03CA  00AE               	movwf	printf@cp
  4729  03CB  3000               	movlw	0
  4730  03CC  00AF               	movwf	printf@cp+1
  4731  03CD  3001               	movlw	1
  4732  03CE  00A8               	movwf	??_printf
  4733  03CF  0828               	movf	??_printf,w
  4734  03D0  07B2               	addwf	printf@ap,f
  4735                           
  4736                           ;doprnt.c: 740: if(!cp)
  4737  03D1  082E               	movf	printf@cp,w
  4738  03D2  042F               	iorwf	printf@cp+1,w
  4739  03D3  1D03               	btfss	3,2
  4740  03D4  2BD9               	goto	l1738
  4741                           
  4742                           ;doprnt.c: 741: cp = "(null)";
  4743  03D5  30D6               	movlw	low (STR_37| (0+32768))
  4744  03D6  00AE               	movwf	printf@cp
  4745  03D7  3092               	movlw	high (STR_37| (0+32768))
  4746  03D8  00AF               	movwf	printf@cp+1
  4747  03D9                     l1738:	
  4748                           
  4749                           ;doprnt.c: 745: len = 0;
  4750  03D9  01B0               	clrf	printf@len
  4751  03DA  01B1               	clrf	printf@len+1
  4752  03DB                     l1742:	
  4753                           ;doprnt.c: 746: while(cp[len])
  4754                           
  4755  03DB  082E               	movf	printf@cp,w
  4756  03DC  0730               	addwf	printf@len,w
  4757  03DD  0084               	movwf	4
  4758  03DE  082F               	movf	printf@cp+1,w
  4759  03DF  3D31               	addwfc	printf@len+1,w
  4760  03E0  0085               	movwf	5
  4761  03E1  0012               	moviw fsr0++
  4762  03E2  1903               	btfsc	3,2
  4763  03E3  2BE9               	goto	l1744
  4764                           
  4765                           ;doprnt.c: 747: len++;
  4766  03E4  3001               	movlw	1
  4767  03E5  07B0               	addwf	printf@len,f
  4768  03E6  3000               	movlw	0
  4769  03E7  3DB1               	addwfc	printf@len+1,f
  4770  03E8  2BDB               	goto	l1742
  4771  03E9                     l1744:	
  4772                           ;doprnt.c: 750: dostring:
  4773                           
  4774                           
  4775                           ;doprnt.c: 757: if(width > len)
  4776  03E9  0837               	movf	printf@width+1,w
  4777  03EA  0231               	subwf	printf@len+1,w
  4778  03EB  1D03               	skipz
  4779  03EC  2BEF               	goto	u1475
  4780  03ED  0836               	movf	printf@width,w
  4781  03EE  0230               	subwf	printf@len,w
  4782  03EF                     u1475:	
  4783  03EF  1803               	skipnc
  4784  03F0  2BF6               	goto	l1748
  4785                           
  4786                           ;doprnt.c: 758: width -= len;
  4787  03F1  0830               	movf	printf@len,w
  4788  03F2  02B6               	subwf	printf@width,f
  4789  03F3  0831               	movf	printf@len+1,w
  4790  03F4  3BB7               	subwfb	printf@width+1,f
  4791  03F5  2BF8               	goto	l1752
  4792  03F6                     l1748:	
  4793                           
  4794                           ;doprnt.c: 759: else
  4795                           ;doprnt.c: 760: width = 0;
  4796  03F6  01B6               	clrf	printf@width
  4797  03F7  01B7               	clrf	printf@width+1
  4798  03F8                     l1752:	
  4799                           ;doprnt.c: 764: while(width--)
  4800                           
  4801  03F8  30FF               	movlw	255
  4802  03F9  0020               	movlb	0	; select bank0
  4803  03FA  07B6               	addwf	printf@width,f
  4804  03FB  30FF               	movlw	255
  4805  03FC  3DB7               	addwfc	printf@width+1,f
  4806  03FD  0A36               	incf	printf@width,w
  4807  03FE  1903               	btfsc	3,2
  4808  03FF  0A37               	incf	printf@width+1,w
  4809  0400  1903               	btfsc	3,2
  4810  0401  2C14               	goto	l1758
  4811                           
  4812                           ;doprnt.c: 765: (putch(' ') );
  4813  0402  3020               	movlw	32
  4814  0403  318E  26A1  3183   	fcall	_putch
  4815  0406  2BF8               	goto	l1752
  4816  0407                     l1754:	
  4817                           ;doprnt.c: 767: while(len--)
  4818                           
  4819                           
  4820                           ;doprnt.c: 768: (putch(*cp++) );
  4821  0407  082E               	movf	printf@cp,w
  4822  0408  0084               	movwf	4
  4823  0409  082F               	movf	printf@cp+1,w
  4824  040A  0085               	movwf	5
  4825  040B  0800               	movf	0,w	;code access
  4826  040C  318E  26A1  3183   	fcall	_putch
  4827  040F  3001               	movlw	1
  4828  0410  0020               	movlb	0	; select bank0
  4829  0411  07AE               	addwf	printf@cp,f
  4830  0412  3000               	movlw	0
  4831  0413  3DAF               	addwfc	printf@cp+1,f
  4832  0414                     l1758:	
  4833  0414  3001               	movlw	1
  4834  0415  02B0               	subwf	printf@len,f
  4835  0416  3000               	movlw	0
  4836  0417  3BB1               	subwfb	printf@len+1,f
  4837  0418  0A30               	incf	printf@len,w
  4838  0419  1D03               	skipz
  4839  041A  2C07               	goto	l1754
  4840  041B  0A31               	incf	printf@len+1,w
  4841  041C  1903               	btfsc	3,2
  4842  041D  2B59               	goto	l1858
  4843  041E  2C07               	goto	l1754
  4844  041F                     l1760:	
  4845                           ;doprnt.c: 784: case 'c':
  4846                           
  4847                           ;doprnt.c: 774: continue;
  4848                           
  4849                           
  4850                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4851  041F  0832               	movf	printf@ap,w
  4852  0420  0086               	movwf	6
  4853  0421  0187               	clrf	7
  4854  0422  0801               	movf	1,w
  4855  0423  00A8               	movwf	??_printf
  4856  0424  0828               	movf	??_printf,w
  4857  0425  00B8               	movwf	printf@c
  4858  0426  3002               	movlw	2
  4859  0427  00A8               	movwf	??_printf
  4860  0428  0828               	movf	??_printf,w
  4861  0429  07B2               	addwf	printf@ap,f
  4862  042A                     l1764:	
  4863                           ;doprnt.c: 802: default:
  4864                           
  4865                           
  4866                           ;doprnt.c: 805: cp = (char *)&c;
  4867  042A  3038               	movlw	low printf@c
  4868  042B  00AE               	movwf	printf@cp
  4869  042C  3000               	movlw	high printf@c
  4870  042D  00AF               	movwf	printf@cp+1
  4871                           
  4872                           ;doprnt.c: 806: len = 1;
  4873  042E  3001               	movlw	1
  4874  042F  00B0               	movwf	printf@len
  4875  0430  3000               	movlw	0
  4876  0431  00B1               	movwf	printf@len+1
  4877                           
  4878                           ;doprnt.c: 807: goto dostring;
  4879  0432  2BE9               	goto	l1744
  4880  0433                     l1770:	
  4881                           ;doprnt.c: 822: }
  4882                           
  4883  0433  0020               	movlb	0	; select bank0
  4884  0434  0821               	movf	printf@f+1,w
  4885  0435  00A9               	movwf	??_printf+1
  4886  0436  0820               	movf	printf@f,w
  4887  0437  00A8               	movwf	??_printf
  4888  0438  0AA0               	incf	printf@f,f
  4889  0439  1903               	skipnz
  4890  043A  0AA1               	incf	printf@f+1,f
  4891  043B  0828               	movf	??_printf,w
  4892  043C  0084               	movwf	4
  4893  043D  0829               	movf	??_printf+1,w
  4894  043E  0085               	movwf	5
  4895  043F  0800               	movf	0,w	;code access
  4896  0440  00B8               	movwf	printf@c
  4897                           
  4898                           ; Switch size 1, requested type "space"
  4899                           ; Number of cases is 6, Range of values is 0 to 120
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte           19    10 (average)
  4903                           ; direct_byte          248     6 (fixed)
  4904                           ; jumptable            260     6 (fixed)
  4905                           ;	Chosen strategy is simple_byte
  4906  0441  3A00               	xorlw	0	; case 0
  4907  0442  1903               	skipnz
  4908  0443  2D8E               	goto	l384
  4909  0444  3A63               	xorlw	99	; case 99
  4910  0445  1903               	skipnz
  4911  0446  2C1F               	goto	l1760
  4912  0447  3A07               	xorlw	7	; case 100
  4913  0448  1903               	skipnz
  4914  0449  2C54               	goto	l332
  4915  044A  3A0D               	xorlw	13	; case 105
  4916  044B  1903               	skipnz
  4917  044C  2C54               	goto	l332
  4918  044D  3A1A               	xorlw	26	; case 115
  4919  044E  1903               	skipnz
  4920  044F  2BC6               	goto	l1730
  4921  0450  3A0B               	xorlw	11	; case 120
  4922  0451  1903               	skipnz
  4923  0452  2BC4               	goto	l333
  4924  0453  2C2A               	goto	l1764
  4925  0454                     l332:	
  4926                           
  4927                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4928  0454  0020               	movlb	0	; select bank0
  4929  0455  1BB5               	btfsc	printf@flag,7
  4930  0456  2C6E               	goto	l1782
  4931                           
  4932                           ;doprnt.c: 1253: {
  4933                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4934  0457  0832               	movf	printf@ap,w
  4935  0458  0086               	movwf	6
  4936  0459  0187               	clrf	7
  4937  045A  3F40               	moviw [0]fsr1
  4938  045B  00B3               	movwf	printf@val
  4939  045C  3F41               	moviw [1]fsr1
  4940  045D  00B4               	movwf	printf@val+1
  4941  045E  3002               	movlw	2
  4942  045F  00A8               	movwf	??_printf
  4943  0460  0828               	movf	??_printf,w
  4944  0461  07B2               	addwf	printf@ap,f
  4945                           
  4946                           ;doprnt.c: 1261: if((int)val < 0) {
  4947  0462  1FB4               	btfss	printf@val+1,7
  4948  0463  2CBE               	goto	l1808
  4949                           
  4950                           ;doprnt.c: 1262: flag |= 0x03;
  4951  0464  3003               	movlw	3
  4952  0465  00A8               	movwf	??_printf
  4953  0466  0828               	movf	??_printf,w
  4954  0467  04B5               	iorwf	printf@flag,f
  4955                           
  4956                           ;doprnt.c: 1263: val = -val;
  4957  0468  09B3               	comf	printf@val,f
  4958  0469  09B4               	comf	printf@val+1,f
  4959  046A  0AB3               	incf	printf@val,f
  4960  046B  1903               	skipnz
  4961  046C  0AB4               	incf	printf@val+1,f
  4962                           
  4963                           ;doprnt.c: 1264: }
  4964                           ;doprnt.c: 1266: }
  4965  046D  2CBE               	goto	l1808
  4966  046E                     l1782:	
  4967                           
  4968                           ;doprnt.c: 1268: else
  4969                           ;doprnt.c: 1273: {
  4970                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4971  046E  0832               	movf	printf@ap,w
  4972  046F  0086               	movwf	6
  4973  0470  0187               	clrf	7
  4974  0471  3F40               	moviw [0]fsr1
  4975  0472  00B3               	movwf	printf@val
  4976  0473  3F41               	moviw [1]fsr1
  4977  0474  00B4               	movwf	printf@val+1
  4978  0475  3002               	movlw	2
  4979  0476  00A8               	movwf	??_printf
  4980  0477  0828               	movf	??_printf,w
  4981  0478  07B2               	addwf	printf@ap,f
  4982                           
  4983                           ;doprnt.c: 1287: }
  4984                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4985  0479  2CBE               	goto	l1808
  4986  047A                     l354:	
  4987                           ;doprnt.c: 1299: case 0x00:
  4988                           
  4989                           
  4990                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4991  047A  01B8               	clrf	printf@c
  4992  047B  0AB8               	incf	printf@c,f
  4993  047C                     L13:	
  4994  047C  3005               	movlw	5
  4995  047D  0638               	xorwf	printf@c,w
  4996  047E  1903               	btfsc	3,2
  4997  047F  2CC7               	goto	l1810
  4998                           
  4999                           ;doprnt.c: 1306: if(val < dpowers[c])
  5000  0480  0838               	movf	printf@c,w
  5001  0481  00A8               	movwf	??_printf
  5002  0482  01A9               	clrf	??_printf+1
  5003  0483  35A8               	lslf	??_printf,f
  5004  0484  0DA9               	rlf	??_printf+1,f
  5005  0485  30C4               	movlw	low (_dpowers| (0+32768))
  5006  0486  0728               	addwf	??_printf,w
  5007  0487  0084               	movwf	4
  5008  0488  3092               	movlw	high (_dpowers| (0+32768))
  5009  0489  3D29               	addwfc	??_printf+1,w
  5010  048A  0085               	movwf	5
  5011  048B  3F00               	moviw [0]fsr0
  5012  048C  00AA               	movwf	??_printf+2
  5013  048D  3F01               	moviw [1]fsr0
  5014  048E  00AB               	movwf	??_printf+3
  5015  048F  082B               	movf	??_printf+3,w
  5016  0490  0234               	subwf	printf@val+1,w
  5017  0491  1D03               	skipz
  5018  0492  2C95               	goto	u1535
  5019  0493  082A               	movf	??_printf+2,w
  5020  0494  0233               	subwf	printf@val,w
  5021  0495                     u1535:	
  5022  0495  1C03               	btfss	3,0
  5023  0496  2CC7               	goto	l1810
  5024                           
  5025                           ;doprnt.c: 1307: break;
  5026  0497  3001               	movlw	1
  5027  0498  00A8               	movwf	??_printf
  5028  0499  0828               	movf	??_printf,w
  5029  049A  07B8               	addwf	printf@c,f
  5030  049B  2C7C               	goto	L13
  5031  049C                     l359:	
  5032                           ;doprnt.c: 1314: case 0x80:
  5033                           
  5034                           ;doprnt.c: 1309: break;
  5035                           
  5036                           
  5037                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5038  049C  01B8               	clrf	printf@c
  5039  049D  0AB8               	incf	printf@c,f
  5040  049E                     L14:	
  5041  049E  3004               	movlw	4
  5042  049F  0638               	xorwf	printf@c,w
  5043  04A0  1903               	btfsc	3,2
  5044  04A1  2CC7               	goto	l1810
  5045                           
  5046                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5047  04A2  0838               	movf	printf@c,w
  5048  04A3  00A8               	movwf	??_printf
  5049  04A4  01A9               	clrf	??_printf+1
  5050  04A5  35A8               	lslf	??_printf,f
  5051  04A6  0DA9               	rlf	??_printf+1,f
  5052  04A7  30CE               	movlw	low (_hexpowers| (0+32768))
  5053  04A8  0728               	addwf	??_printf,w
  5054  04A9  0084               	movwf	4
  5055  04AA  3092               	movlw	high (_hexpowers| (0+32768))
  5056  04AB  3D29               	addwfc	??_printf+1,w
  5057  04AC  0085               	movwf	5
  5058  04AD  3F00               	moviw [0]fsr0
  5059  04AE  00AA               	movwf	??_printf+2
  5060  04AF  3F01               	moviw [1]fsr0
  5061  04B0  00AB               	movwf	??_printf+3
  5062  04B1  082B               	movf	??_printf+3,w
  5063  04B2  0234               	subwf	printf@val+1,w
  5064  04B3  1D03               	skipz
  5065  04B4  2CB7               	goto	u1565
  5066  04B5  082A               	movf	??_printf+2,w
  5067  04B6  0233               	subwf	printf@val,w
  5068  04B7                     u1565:	
  5069  04B7  1C03               	btfss	3,0
  5070  04B8  2CC7               	goto	l1810
  5071                           
  5072                           ;doprnt.c: 1318: break;
  5073  04B9  3001               	movlw	1
  5074  04BA  00A8               	movwf	??_printf
  5075  04BB  0828               	movf	??_printf,w
  5076  04BC  07B8               	addwf	printf@c,f
  5077  04BD  2C9E               	goto	L14
  5078  04BE                     l1808:	
  5079                           ;doprnt.c: 1336: }
  5080                           
  5081                           ;doprnt.c: 1320: break;
  5082                           
  5083  04BE  0835               	movf	printf@flag,w
  5084  04BF  3980               	andlw	128
  5085                           
  5086                           ; Switch size 1, requested type "space"
  5087                           ; Number of cases is 2, Range of values is 0 to 128
  5088                           ; switch strategies available:
  5089                           ; Name         Instructions Cycles
  5090                           ; simple_byte            7     4 (average)
  5091                           ; jumptable            260     6 (fixed)
  5092                           ;	Chosen strategy is simple_byte
  5093  04C0  3A00               	xorlw	0	; case 0
  5094  04C1  1903               	skipnz
  5095  04C2  2C7A               	goto	l354
  5096  04C3  3A80               	xorlw	128	; case 128
  5097  04C4  1903               	skipnz
  5098  04C5  2C9C               	goto	l359
  5099  04C6  2CC7               	goto	l1810
  5100  04C7                     l1810:	
  5101                           
  5102                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5103  04C7  0836               	movf	printf@width,w
  5104  04C8  0437               	iorwf	printf@width+1,w
  5105  04C9  1903               	btfsc	3,2
  5106  04CA  2CD3               	goto	l363
  5107  04CB  0835               	movf	printf@flag,w
  5108  04CC  3903               	andlw	3
  5109  04CD  1903               	btfsc	3,2
  5110  04CE  2CD3               	goto	l363
  5111                           
  5112                           ;doprnt.c: 1346: width--;
  5113  04CF  30FF               	movlw	255
  5114  04D0  07B6               	addwf	printf@width,f
  5115  04D1  30FF               	movlw	255
  5116  04D2  3DB7               	addwfc	printf@width+1,f
  5117  04D3                     l363:	
  5118                           
  5119                           ;doprnt.c: 1381: if(width > c)
  5120  04D3  0838               	movf	printf@c,w
  5121  04D4  00A8               	movwf	??_printf
  5122  04D5  01A9               	clrf	??_printf+1
  5123  04D6  1BA8               	btfsc	??_printf,7
  5124  04D7  03A9               	decf	??_printf+1,f
  5125  04D8  0829               	movf	??_printf+1,w
  5126  04D9  3A80               	xorlw	128
  5127  04DA  00AA               	movwf	??_printf+2
  5128  04DB  0837               	movf	printf@width+1,w
  5129  04DC  3A80               	xorlw	128
  5130  04DD  022A               	subwf	??_printf+2,w
  5131  04DE  1D03               	skipz
  5132  04DF  2CE2               	goto	u1605
  5133  04E0  0836               	movf	printf@width,w
  5134  04E1  0228               	subwf	??_printf,w
  5135  04E2                     u1605:	
  5136  04E2  1803               	skipnc
  5137  04E3  2CEF               	goto	l1818
  5138                           
  5139                           ;doprnt.c: 1382: width -= c;
  5140  04E4  0020               	movlb	0	; select bank0
  5141  04E5  0838               	movf	printf@c,w
  5142  04E6  00A8               	movwf	??_printf
  5143  04E7  01A9               	clrf	??_printf+1
  5144  04E8  1BA8               	btfsc	??_printf,7
  5145  04E9  03A9               	decf	??_printf+1,f
  5146  04EA  0828               	movf	??_printf,w
  5147  04EB  02B6               	subwf	printf@width,f
  5148  04EC  0829               	movf	??_printf+1,w
  5149  04ED  3BB7               	subwfb	printf@width+1,f
  5150  04EE  2CF2               	goto	l1820
  5151  04EF                     l1818:	
  5152                           
  5153                           ;doprnt.c: 1383: else
  5154                           ;doprnt.c: 1384: width = 0;
  5155  04EF  0020               	movlb	0	; select bank0
  5156  04F0  01B6               	clrf	printf@width
  5157  04F1  01B7               	clrf	printf@width+1
  5158  04F2                     l1820:	
  5159                           
  5160                           ;doprnt.c: 1387: if(flag & 0x04) {
  5161  04F2  1D35               	btfss	printf@flag,2
  5162  04F3  2D0B               	goto	l1832
  5163                           
  5164                           ;doprnt.c: 1392: if(flag & 0x03)
  5165  04F4  0835               	movf	printf@flag,w
  5166  04F5  3903               	andlw	3
  5167  04F6  1903               	btfsc	3,2
  5168  04F7  2CFC               	goto	l1826
  5169                           
  5170                           ;doprnt.c: 1393: (putch('-') );
  5171  04F8  302D               	movlw	45
  5172  04F9  318E  26A1  3183   	fcall	_putch
  5173  04FC                     l1826:	
  5174                           
  5175                           ;doprnt.c: 1415: if(width)
  5176  04FC  0020               	movlb	0	; select bank0
  5177  04FD                     L15:	
  5178  04FD  0836               	movf	printf@width,w
  5179  04FE  0437               	iorwf	printf@width+1,w
  5180  04FF  1903               	btfsc	3,2
  5181  0500  2D24               	goto	l1842
  5182                           
  5183                           ;doprnt.c: 1417: (putch('0') );
  5184                           
  5185                           ;doprnt.c: 1416: do
  5186  0501  3030               	movlw	48
  5187  0502  318E  26A1  3183   	fcall	_putch
  5188                           
  5189                           ;doprnt.c: 1418: while(--width);
  5190  0505  30FF               	movlw	255
  5191  0506  0020               	movlb	0	; select bank0
  5192  0507  07B6               	addwf	printf@width,f
  5193  0508  30FF               	movlw	255
  5194  0509  3DB7               	addwfc	printf@width+1,f
  5195  050A  2CFD               	goto	L15
  5196  050B                     l1832:	
  5197                           ;doprnt.c: 1420: } else
  5198                           
  5199                           
  5200                           ;doprnt.c: 1422: {
  5201                           ;doprnt.c: 1424: if(width
  5202                           ;doprnt.c: 1428: )
  5203  050B  0836               	movf	printf@width,w
  5204  050C  0437               	iorwf	printf@width+1,w
  5205  050D  1903               	btfsc	3,2
  5206  050E  2D1C               	goto	l1838
  5207  050F                     l1834:	
  5208                           ;doprnt.c: 1429: do
  5209                           
  5210                           
  5211                           ;doprnt.c: 1430: (putch(' ') );
  5212  050F  3020               	movlw	32
  5213  0510  318E  26A1  3183   	fcall	_putch
  5214                           
  5215                           ;doprnt.c: 1431: while(--width);
  5216  0513  30FF               	movlw	255
  5217  0514  0020               	movlb	0	; select bank0
  5218  0515  07B6               	addwf	printf@width,f
  5219  0516  30FF               	movlw	255
  5220  0517  3DB7               	addwfc	printf@width+1,f
  5221  0518  0836               	movf	printf@width,w
  5222  0519  0437               	iorwf	printf@width+1,w
  5223  051A  1D03               	btfss	3,2
  5224  051B  2D0F               	goto	l1834
  5225  051C                     l1838:	
  5226                           
  5227                           ;doprnt.c: 1438: if(flag & 0x03)
  5228  051C  0835               	movf	printf@flag,w
  5229  051D  3903               	andlw	3
  5230  051E  1903               	btfsc	3,2
  5231  051F  2D24               	goto	l1842
  5232                           
  5233                           ;doprnt.c: 1439: (putch('-') );
  5234  0520  302D               	movlw	45
  5235  0521  318E  26A1  3183   	fcall	_putch
  5236  0524                     l1842:	
  5237                           
  5238                           ;doprnt.c: 1469: }
  5239                           ;doprnt.c: 1472: prec = c;
  5240  0524  0020               	movlb	0	; select bank0
  5241  0525  0838               	movf	printf@c,w
  5242  0526  00A8               	movwf	??_printf
  5243  0527  0828               	movf	??_printf,w
  5244  0528  00AD               	movwf	printf@prec
  5245                           
  5246                           ;doprnt.c: 1474: while(prec--) {
  5247  0529  2D7C               	goto	l1856
  5248  052A                     l1844:	
  5249                           ;doprnt.c: 1478: {
  5250                           ;doprnt.c: 1483: case 0x00:
  5251                           
  5252                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  5253                           
  5254                           
  5255                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5256  052A  300A               	movlw	10
  5257  052B  00F8               	movwf	___lwmod@divisor
  5258  052C  3000               	movlw	0
  5259  052D  00F9               	movwf	___lwmod@divisor+1
  5260  052E  082D               	movf	printf@prec,w
  5261  052F  00A8               	movwf	??_printf
  5262  0530  01A9               	clrf	??_printf+1
  5263  0531  35A8               	lslf	??_printf,f
  5264  0532  0DA9               	rlf	??_printf+1,f
  5265  0533  30C4               	movlw	low (_dpowers| (0+32768))
  5266  0534  0728               	addwf	??_printf,w
  5267  0535  0084               	movwf	4
  5268  0536  3092               	movlw	high (_dpowers| (0+32768))
  5269  0537  3D29               	addwfc	??_printf+1,w
  5270  0538  0085               	movwf	5
  5271  0539  3F00               	moviw [0]fsr0
  5272  053A  00F0               	movwf	___lwdiv@divisor
  5273  053B  3F01               	moviw [1]fsr0
  5274  053C  00F1               	movwf	___lwdiv@divisor+1
  5275  053D  0834               	movf	printf@val+1,w
  5276  053E  00F3               	movwf	___lwdiv@dividend+1
  5277  053F  0833               	movf	printf@val,w
  5278  0540  00F2               	movwf	___lwdiv@dividend
  5279  0541  318F  2791  3183   	fcall	___lwdiv
  5280  0544  0871               	movf	?___lwdiv+1,w
  5281  0545  00FB               	movwf	___lwmod@dividend+1
  5282  0546  0870               	movf	?___lwdiv,w
  5283  0547  00FA               	movwf	___lwmod@dividend
  5284  0548  318F  2739  3183   	fcall	___lwmod
  5285  054B  0878               	movf	?___lwmod,w
  5286  054C  3E30               	addlw	48
  5287  054D  0020               	movlb	0	; select bank0
  5288  054E  00AA               	movwf	??_printf+2
  5289  054F  082A               	movf	??_printf+2,w
  5290  0550  2D77               	goto	L12
  5291  0551                     l1846:	
  5292                           ;doprnt.c: 1497: case 0x80:
  5293                           
  5294                           ;doprnt.c: 1491: break;
  5295                           
  5296                           
  5297                           ;doprnt.c: 1499: {
  5298                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5299  0551  082D               	movf	printf@prec,w
  5300  0552  00A8               	movwf	??_printf
  5301  0553  01A9               	clrf	??_printf+1
  5302  0554  35A8               	lslf	??_printf,f
  5303  0555  0DA9               	rlf	??_printf+1,f
  5304  0556  30CE               	movlw	low (_hexpowers| (0+32768))
  5305  0557  0728               	addwf	??_printf,w
  5306  0558  0084               	movwf	4
  5307  0559  3092               	movlw	high (_hexpowers| (0+32768))
  5308  055A  3D29               	addwfc	??_printf+1,w
  5309  055B  0085               	movwf	5
  5310  055C  3F00               	moviw [0]fsr0
  5311  055D  00F0               	movwf	___lwdiv@divisor
  5312  055E  3F01               	moviw [1]fsr0
  5313  055F  00F1               	movwf	___lwdiv@divisor+1
  5314  0560  0834               	movf	printf@val+1,w
  5315  0561  00F3               	movwf	___lwdiv@dividend+1
  5316  0562  0833               	movf	printf@val,w
  5317  0563  00F2               	movwf	___lwdiv@dividend
  5318  0564  318F  2791  3183   	fcall	___lwdiv
  5319  0567  0870               	movf	?___lwdiv,w
  5320  0568  390F               	andlw	15
  5321  0569  0020               	movlb	0	; select bank0
  5322  056A  00AA               	movwf	??_printf+2
  5323  056B  082A               	movf	??_printf+2,w
  5324  056C  00AC               	movwf	printf@idx
  5325                           
  5326                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5327  056D  082C               	movf	printf@idx,w
  5328  056E  3EAB               	addlw	low (STR_38| (0+32768))
  5329  056F  0084               	movwf	4
  5330  0570  3091               	movlw	high (STR_38| (0+32768))
  5331  0571  1803               	skipnc
  5332  0572  3E01               	addlw	1
  5333  0573  0085               	movwf	5
  5334  0574  0800               	movf	0,w	;code access
  5335  0575  00A8               	movwf	??_printf
  5336  0576  0828               	movf	??_printf,w
  5337  0577                     L12:	
  5338  0577  00B8               	movwf	printf@c
  5339  0578                     l1854:	
  5340                           ;doprnt.c: 1523: }
  5341                           
  5342                           ;doprnt.c: 1508: }
  5343                           ;doprnt.c: 1510: break;
  5344                           
  5345                           
  5346                           ;doprnt.c: 1524: (putch(c) );
  5347  0578  0838               	movf	printf@c,w
  5348  0579  318E  26A1  3183   	fcall	_putch
  5349  057C                     l1856:	
  5350  057C  30FF               	movlw	255
  5351  057D  0020               	movlb	0	; select bank0
  5352  057E  00A8               	movwf	??_printf
  5353  057F  0828               	movf	??_printf,w
  5354  0580  07AD               	addwf	printf@prec,f
  5355  0581  0A2D               	incf	printf@prec,w
  5356  0582  1903               	btfsc	3,2
  5357  0583  2B59               	goto	l1858
  5358  0584  0835               	movf	printf@flag,w
  5359  0585  3980               	andlw	128
  5360                           
  5361                           ; Switch size 1, requested type "space"
  5362                           ; Number of cases is 2, Range of values is 0 to 128
  5363                           ; switch strategies available:
  5364                           ; Name         Instructions Cycles
  5365                           ; simple_byte            7     4 (average)
  5366                           ; jumptable            260     6 (fixed)
  5367                           ;	Chosen strategy is simple_byte
  5368  0586  3A00               	xorlw	0	; case 0
  5369  0587  1903               	skipnz
  5370  0588  2D2A               	goto	l1844
  5371  0589  3A80               	xorlw	128	; case 128
  5372  058A  1903               	skipnz
  5373  058B  2D51               	goto	l1846
  5374  058C  2D78               	goto	l1854
  5375  058D  2D78               	goto	l1854
  5376  058E                     l384:	
  5377                           ;doprnt.c: 1540: return 0;
  5378                           ;	Return value of _printf is never used
  5379                           
  5380                           ;doprnt.c: 1525: }
  5381                           ;doprnt.c: 1533: }
  5382                           ;doprnt.c: 1535: alldone:
  5383                           
  5384  058E  0008               	return
  5385  058F                     __end_of_printf:	
  5386                           
  5387                           	psect	text8
  5388  0EA1                     __ptext8:	
  5389 ;; *************** function _putch *****************
  5390 ;; Defined at:
  5391 ;;		line 107 in file "mcc_generated_files/eusart.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  txData          1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  txData          1    1[COMMON] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, pclath, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;Total ram usage:        1 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    1
  5412 ;; This function calls:
  5413 ;;		_EUSART_Write
  5414 ;; This function is called by:
  5415 ;;		_printf
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           
  5420                           ;psect for function _putch
  5421  0EA1                     _putch:	
  5422                           
  5423                           ;incstack = 0
  5424                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5425                           ;putch@txData stored from wreg
  5426  0EA1  00F1               	movwf	putch@txData
  5427                           
  5428                           ;eusart.c: 109: EUSART_Write(txData);
  5429  0EA2  0871               	movf	putch@txData,w
  5430  0EA3  318E  26BA         	fcall	_EUSART_Write
  5431  0EA5  0008               	return
  5432  0EA6                     __end_of_putch:	
  5433                           
  5434                           	psect	text9
  5435  0EBA                     __ptext9:	
  5436 ;; *************** function _EUSART_Write *****************
  5437 ;; Defined at:
  5438 ;;		line 93 in file "mcc_generated_files/eusart.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  txData          1    wreg     unsigned char 
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;  txData          1    0[COMMON] unsigned char 
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  1    wreg      void 
  5445 ;; Registers used:
  5446 ;;		wreg
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;Total ram usage:        1 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_putch
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _EUSART_Write
  5467  0EBA                     _EUSART_Write:	
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _EUSART_Write: [wreg]
  5471                           ;EUSART_Write@txData stored from wreg
  5472  0EBA  00F0               	movwf	EUSART_Write@txData
  5473  0EBB                     l58:	
  5474                           ;eusart.c: 96: {
  5475                           
  5476                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  5477                           
  5478  0EBB  0020               	movlb	0	; select bank0
  5479  0EBC  1E11               	btfss	17,4	;volatile
  5480  0EBD  2EBB               	goto	l58
  5481                           
  5482                           ;eusart.c: 97: }
  5483                           ;eusart.c: 99: TXREG = txData;
  5484  0EBE  0870               	movf	EUSART_Write@txData,w
  5485  0EBF  0023               	movlb	3	; select bank3
  5486  0EC0  009A               	movwf	26	;volatile
  5487  0EC1  0008               	return
  5488  0EC2                     __end_of_EUSART_Write:	
  5489                           
  5490                           	psect	text10
  5491  0F39                     __ptext10:	
  5492 ;; *************** function ___lwmod *****************
  5493 ;; Defined at:
  5494 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  divisor         2    8[COMMON] unsigned int 
  5497 ;;  dividend        2   10[COMMON] unsigned int 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  counter         1   13[COMMON] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  2    8[COMMON] unsigned int 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;Total ram usage:        6 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_printf
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function ___lwmod
  5524  0F39                     ___lwmod:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5528  0F39  0878               	movf	___lwmod@divisor,w
  5529  0F3A  0479               	iorwf	___lwmod@divisor+1,w
  5530  0F3B  1903               	btfsc	3,2
  5531  0F3C  2F60               	goto	l1700
  5532  0F3D  01FD               	clrf	___lwmod@counter
  5533  0F3E  0AFD               	incf	___lwmod@counter,f
  5534  0F3F                     l1690:	
  5535  0F3F  1BF9               	btfsc	___lwmod@divisor+1,7
  5536  0F40  2F4B               	goto	l1692
  5537  0F41  3001               	movlw	1
  5538  0F42                     u1375:	
  5539  0F42  35F8               	lslf	___lwmod@divisor,f
  5540  0F43  0DF9               	rlf	___lwmod@divisor+1,f
  5541  0F44  0B89               	decfsz	9,f
  5542  0F45  2F42               	goto	u1375
  5543  0F46  3001               	movlw	1
  5544  0F47  00FC               	movwf	??___lwmod
  5545  0F48  087C               	movf	??___lwmod,w
  5546  0F49  07FD               	addwf	___lwmod@counter,f
  5547  0F4A  2F3F               	goto	l1690
  5548  0F4B                     l1692:	
  5549  0F4B  0879               	movf	___lwmod@divisor+1,w
  5550  0F4C  027B               	subwf	___lwmod@dividend+1,w
  5551  0F4D  1D03               	skipz
  5552  0F4E  2F51               	goto	u1395
  5553  0F4F  0878               	movf	___lwmod@divisor,w
  5554  0F50  027A               	subwf	___lwmod@dividend,w
  5555  0F51                     u1395:	
  5556  0F51  1C03               	skipc
  5557  0F52  2F57               	goto	l1696
  5558  0F53  0878               	movf	___lwmod@divisor,w
  5559  0F54  02FA               	subwf	___lwmod@dividend,f
  5560  0F55  0879               	movf	___lwmod@divisor+1,w
  5561  0F56  3BFB               	subwfb	___lwmod@dividend+1,f
  5562  0F57                     l1696:	
  5563  0F57  3001               	movlw	1
  5564  0F58                     u1405:	
  5565  0F58  36F9               	lsrf	___lwmod@divisor+1,f
  5566  0F59  0CF8               	rrf	___lwmod@divisor,f
  5567  0F5A  0B89               	decfsz	9,f
  5568  0F5B  2F58               	goto	u1405
  5569  0F5C  3001               	movlw	1
  5570  0F5D  02FD               	subwf	___lwmod@counter,f
  5571  0F5E  1D03               	btfss	3,2
  5572  0F5F  2F4B               	goto	l1692
  5573  0F60                     l1700:	
  5574  0F60  087B               	movf	___lwmod@dividend+1,w
  5575  0F61  00F9               	movwf	?___lwmod+1
  5576  0F62  087A               	movf	___lwmod@dividend,w
  5577  0F63  00F8               	movwf	?___lwmod
  5578  0F64  0008               	return
  5579  0F65                     __end_of___lwmod:	
  5580                           
  5581                           	psect	text11
  5582  0F91                     __ptext11:	
  5583 ;; *************** function ___lwdiv *****************
  5584 ;; Defined at:
  5585 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  divisor         2    0[COMMON] unsigned int 
  5588 ;;  dividend        2    2[COMMON] unsigned int 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  quotient        2    5[COMMON] unsigned int 
  5591 ;;  counter         1    7[COMMON] unsigned char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  2    0[COMMON] unsigned int 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        8 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_printf
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function ___lwdiv
  5616  0F91                     ___lwdiv:	
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5620  0F91  01F5               	clrf	___lwdiv@quotient
  5621  0F92  01F6               	clrf	___lwdiv@quotient+1
  5622  0F93  0870               	movf	___lwdiv@divisor,w
  5623  0F94  0471               	iorwf	___lwdiv@divisor+1,w
  5624  0F95  1903               	btfsc	3,2
  5625  0F96  2FC0               	goto	l1678
  5626  0F97  01F7               	clrf	___lwdiv@counter
  5627  0F98  0AF7               	incf	___lwdiv@counter,f
  5628  0F99                     l1666:	
  5629  0F99  1BF1               	btfsc	___lwdiv@divisor+1,7
  5630  0F9A  2FA5               	goto	l1668
  5631  0F9B  3001               	movlw	1
  5632  0F9C                     u1305:	
  5633  0F9C  35F0               	lslf	___lwdiv@divisor,f
  5634  0F9D  0DF1               	rlf	___lwdiv@divisor+1,f
  5635  0F9E  0B89               	decfsz	9,f
  5636  0F9F  2F9C               	goto	u1305
  5637  0FA0  3001               	movlw	1
  5638  0FA1  00F4               	movwf	??___lwdiv
  5639  0FA2  0874               	movf	??___lwdiv,w
  5640  0FA3  07F7               	addwf	___lwdiv@counter,f
  5641  0FA4  2F99               	goto	l1666
  5642  0FA5                     l1668:	
  5643  0FA5  3001               	movlw	1
  5644  0FA6                     u1325:	
  5645  0FA6  35F5               	lslf	___lwdiv@quotient,f
  5646  0FA7  0DF6               	rlf	___lwdiv@quotient+1,f
  5647  0FA8  0B89               	decfsz	9,f
  5648  0FA9  2FA6               	goto	u1325
  5649  0FAA  0871               	movf	___lwdiv@divisor+1,w
  5650  0FAB  0273               	subwf	___lwdiv@dividend+1,w
  5651  0FAC  1D03               	skipz
  5652  0FAD  2FB0               	goto	u1335
  5653  0FAE  0870               	movf	___lwdiv@divisor,w
  5654  0FAF  0272               	subwf	___lwdiv@dividend,w
  5655  0FB0                     u1335:	
  5656  0FB0  1C03               	skipc
  5657  0FB1  2FB7               	goto	l1674
  5658  0FB2  0870               	movf	___lwdiv@divisor,w
  5659  0FB3  02F2               	subwf	___lwdiv@dividend,f
  5660  0FB4  0871               	movf	___lwdiv@divisor+1,w
  5661  0FB5  3BF3               	subwfb	___lwdiv@dividend+1,f
  5662  0FB6  1475               	bsf	___lwdiv@quotient,0
  5663  0FB7                     l1674:	
  5664  0FB7  3001               	movlw	1
  5665  0FB8                     u1345:	
  5666  0FB8  36F1               	lsrf	___lwdiv@divisor+1,f
  5667  0FB9  0CF0               	rrf	___lwdiv@divisor,f
  5668  0FBA  0B89               	decfsz	9,f
  5669  0FBB  2FB8               	goto	u1345
  5670  0FBC  3001               	movlw	1
  5671  0FBD  02F7               	subwf	___lwdiv@counter,f
  5672  0FBE  1D03               	btfss	3,2
  5673  0FBF  2FA5               	goto	l1668
  5674  0FC0                     l1678:	
  5675  0FC0  0876               	movf	___lwdiv@quotient+1,w
  5676  0FC1  00F1               	movwf	?___lwdiv+1
  5677  0FC2  0875               	movf	___lwdiv@quotient,w
  5678  0FC3  00F0               	movwf	?___lwdiv
  5679  0FC4  0008               	return
  5680  0FC5                     __end_of___lwdiv:	
  5681                           
  5682                           	psect	text12
  5683  0F05                     __ptext12:	
  5684 ;; *************** function _SPI_send *****************
  5685 ;; Defined at:
  5686 ;;		line 53 in file "main.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  sbuf            1    wreg     PTR unsigned char 
  5689 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5690 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5691 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5692 ;;  len             1    8[COMMON] unsigned char 
  5693 ;;  rbuf            1    9[COMMON] PTR unsigned char 
  5694 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5695 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5696 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  sbuf            1    1[BANK0 ] PTR unsigned char 
  5699 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5700 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5701 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5702 ;;  bytes_writte    1    0[BANK0 ] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      unsigned char 
  5705 ;; Registers used:
  5706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;Total ram usage:        7 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    2
  5719 ;; This function calls:
  5720 ;;		_SPI_Exchange8bitBuffer
  5721 ;; This function is called by:
  5722 ;;		_can_ope_mode
  5723 ;;		_can_txf_clear
  5724 ;;		_can_receive
  5725 ;;		_can_send
  5726 ;;		_can_status_check
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _SPI_send
  5733  0F05                     _SPI_send:	
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _SPI_send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5737                           ;SPI_send@sbuf stored from wreg
  5738  0F05  0020               	movlb	0	; select bank0
  5739  0F06  00A1               	movwf	SPI_send@sbuf
  5740                           
  5741                           ;main.c: 54: LATAbits.LATA4 = 0;
  5742  0F07  0022               	movlb	2	; select bank2
  5743  0F08  120C               	bcf	12,4	;volatile
  5744                           
  5745                           ;main.c: 55: uint8_t bytes_written = SPI_Exchange8bitBuffer(sbuf, len, rbuf);
  5746  0F09  0878               	movf	SPI_send@len,w
  5747  0F0A  00FA               	movwf	??_SPI_send
  5748  0F0B  087A               	movf	??_SPI_send,w
  5749  0F0C  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  5750  0F0D  0879               	movf	SPI_send@rbuf,w
  5751  0F0E  00FB               	movwf	??_SPI_send+1
  5752  0F0F  087B               	movf	??_SPI_send+1,w
  5753  0F10  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  5754  0F11  0020               	movlb	0	; select bank0
  5755  0F12  0821               	movf	SPI_send@sbuf,w
  5756  0F13  3180  205F         	fcall	_SPI_Exchange8bitBuffer
  5757  0F15  00FC               	movwf	??_SPI_send+2
  5758  0F16  087C               	movf	??_SPI_send+2,w
  5759  0F17  0020               	movlb	0	; select bank0
  5760  0F18  00A0               	movwf	SPI_send@bytes_written
  5761                           
  5762                           ;main.c: 56: LATAbits.LATA4 = 1;
  5763  0F19  0022               	movlb	2	; select bank2
  5764  0F1A  160C               	bsf	12,4	;volatile
  5765                           
  5766                           ;main.c: 57: return bytes_written;
  5767  0F1B  0020               	movlb	0	; select bank0
  5768  0F1C  0820               	movf	SPI_send@bytes_written,w
  5769  0F1D  0008               	return
  5770  0F1E                     __end_of_SPI_send:	
  5771                           
  5772                           	psect	text13
  5773  005F                     __ptext13:	
  5774 ;; *************** function _SPI_Exchange8bitBuffer *****************
  5775 ;; Defined at:
  5776 ;;		line 91 in file "mcc_generated_files/spi.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  dataIn          1    wreg     PTR unsigned char 
  5779 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5780 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5781 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5782 ;;  bufLen          1    1[COMMON] unsigned char 
  5783 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  5784 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5785 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5786 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  5789 ;;		 -> main@mask_buf(4), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), can_send@debug_buf(3), 
  5790 ;;		 -> tx_buf(14), can_send@can_status_buf(2), rx_buf(15), can_txf_clear@can_int_flag(4), 
  5791 ;;		 -> can_ope_mode@can_ctrl_buf(3), 
  5792 ;;  bytesWritten    1    7[COMMON] unsigned char 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      unsigned char 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;Total ram usage:        7 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    1
  5809 ;; This function calls:
  5810 ;;		_SPI_Exchange8bit
  5811 ;; This function is called by:
  5812 ;;		_SPI_send
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _SPI_Exchange8bitBuffer
  5818  005F                     _SPI_Exchange8bitBuffer:	
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5822                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  5823  005F  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  5824                           
  5825                           ;spi.c: 93: uint8_t bytesWritten = 0;
  5826  0060  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  5827                           
  5828                           ;spi.c: 95: if(bufLen != 0)
  5829  0061  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  5830  0062  1903               	btfsc	3,2
  5831  0063  28AB               	goto	l1626
  5832                           
  5833                           ;spi.c: 96: {
  5834                           ;spi.c: 97: if(dataIn != (0))
  5835  0064  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  5836  0065  1D03               	btfss	3,2
  5837  0066  288D               	goto	l1614
  5838  0067  2892               	goto	l1616
  5839  0068                     l1606:	
  5840                           ;spi.c: 98: {
  5841                           ;spi.c: 99: while(bytesWritten < bufLen)
  5842                           
  5843                           
  5844                           ;spi.c: 100: {
  5845                           ;spi.c: 101: if(dataOut == (0))
  5846  0068  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  5847  0069  1D03               	btfss	3,2
  5848  006A  2876               	goto	l1610
  5849                           
  5850                           ;spi.c: 102: {
  5851                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  5852  006B  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  5853  006C  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  5854  006D  00F3               	movwf	??_SPI_Exchange8bitBuffer
  5855  006E  0873               	movf	??_SPI_Exchange8bitBuffer,w
  5856  006F  0086               	movwf	6
  5857  0070  0187               	clrf	7
  5858  0071  0801               	movf	1,w
  5859  0072  318E  26C2  3180   	fcall	_SPI_Exchange8bit
  5860                           
  5861                           ;spi.c: 104: }
  5862  0075  2889               	goto	l1612
  5863  0076                     l1610:	
  5864                           
  5865                           ;spi.c: 105: else
  5866                           ;spi.c: 106: {
  5867                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  5868  0076  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  5869  0077  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  5870  0078  00F3               	movwf	??_SPI_Exchange8bitBuffer
  5871  0079  0873               	movf	??_SPI_Exchange8bitBuffer,w
  5872  007A  0086               	movwf	6
  5873  007B  0187               	clrf	7
  5874  007C  0801               	movf	1,w
  5875  007D  318E  26C2  3180   	fcall	_SPI_Exchange8bit
  5876  0080  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  5877  0081  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  5878  0082  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  5879  0083  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  5880  0084  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  5881  0085  0086               	movwf	6
  5882  0086  0187               	clrf	7
  5883  0087  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  5884  0088  0081               	movwf	1
  5885  0089                     l1612:	
  5886                           
  5887                           ;spi.c: 108: }
  5888                           ;spi.c: 110: bytesWritten++;
  5889  0089  3001               	movlw	1
  5890  008A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  5891  008B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  5892  008C  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  5893  008D                     l1614:	
  5894  008D  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  5895  008E  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  5896  008F  1803               	btfsc	3,0
  5897  0090  28AB               	goto	l1626
  5898  0091  2868               	goto	l1606
  5899  0092                     l1616:	
  5900                           ;spi.c: 111: }
  5901                           ;spi.c: 112: }
  5902                           
  5903                           
  5904                           ;spi.c: 113: else
  5905                           ;spi.c: 114: {
  5906                           ;spi.c: 115: if(dataOut != (0))
  5907  0092  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  5908  0093  1D03               	btfss	3,2
  5909  0094  28A7               	goto	l1624
  5910  0095  28AB               	goto	l1626
  5911  0096                     l1620:	
  5912                           ;spi.c: 116: {
  5913                           ;spi.c: 117: while(bytesWritten < bufLen )
  5914                           
  5915                           
  5916                           ;spi.c: 118: {
  5917                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  5918  0096  3000               	movlw	0
  5919  0097  318E  26C2  3180   	fcall	_SPI_Exchange8bit
  5920  009A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  5921  009B  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  5922  009C  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  5923  009D  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  5924  009E  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  5925  009F  0086               	movwf	6
  5926  00A0  0187               	clrf	7
  5927  00A1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  5928  00A2  0081               	movwf	1
  5929                           
  5930                           ;spi.c: 121: bytesWritten++;
  5931  00A3  3001               	movlw	1
  5932  00A4  00F3               	movwf	??_SPI_Exchange8bitBuffer
  5933  00A5  0873               	movf	??_SPI_Exchange8bitBuffer,w
  5934  00A6  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  5935  00A7                     l1624:	
  5936  00A7  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  5937  00A8  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  5938  00A9  1C03               	skipc
  5939  00AA  2896               	goto	l1620
  5940  00AB                     l1626:	
  5941                           
  5942                           ;spi.c: 122: }
  5943                           ;spi.c: 123: }
  5944                           ;spi.c: 124: }
  5945                           ;spi.c: 125: }
  5946                           ;spi.c: 127: return bytesWritten;
  5947  00AB  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  5948  00AC  0008               	return
  5949  00AD                     __end_of_SPI_Exchange8bitBuffer:	
  5950                           
  5951                           	psect	text14
  5952  0EC2                     __ptext14:	
  5953 ;; *************** function _SPI_Exchange8bit *****************
  5954 ;; Defined at:
  5955 ;;		line 77 in file "mcc_generated_files/spi.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  data            1    wreg     unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  data            1    0[COMMON] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      unsigned char 
  5962 ;; Registers used:
  5963 ;;		wreg
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        1 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_SPI_Exchange8bitBuffer
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _SPI_Exchange8bit
  5984  0EC2                     _SPI_Exchange8bit:	
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _SPI_Exchange8bit: [wreg]
  5988                           ;SPI_Exchange8bit@data stored from wreg
  5989  0EC2  00F0               	movwf	SPI_Exchange8bit@data
  5990                           
  5991                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  5992  0EC3  0024               	movlb	4	; select bank4
  5993  0EC4  1395               	bcf	21,7	;volatile
  5994                           
  5995                           ;spi.c: 82: SSP1BUF = data;
  5996  0EC5  0870               	movf	SPI_Exchange8bit@data,w
  5997  0EC6  0091               	movwf	17	;volatile
  5998  0EC7                     l113:	
  5999                           ;spi.c: 85: {
  6000                           
  6001                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  6002                           
  6003  0EC7  1C14               	btfss	20,0	;volatile
  6004  0EC8  2EC7               	goto	l113
  6005                           
  6006                           ;spi.c: 86: }
  6007                           ;spi.c: 88: return (SSP1BUF);
  6008  0EC9  0811               	movf	17,w	;volatile
  6009  0ECA  0008               	return
  6010  0ECB                     __end_of_SPI_Exchange8bit:	
  6011                           
  6012                           	psect	text15
  6013  00FB                     __ptext15:	
  6014 ;; *************** function _atoi *****************
  6015 ;; Defined at:
  6016 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  s               1    wreg     PTR const unsigned char 
  6019 ;;		 -> buf(9), 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  s               1   13[COMMON] PTR const unsigned char 
  6022 ;;		 -> buf(9), 
  6023 ;;  a               2   11[COMMON] int 
  6024 ;;  sign            1   10[COMMON] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  2    6[COMMON] int 
  6027 ;; Registers used:
  6028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;Total ram usage:        8 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    1
  6041 ;; This function calls:
  6042 ;;		___wmul
  6043 ;;		_isdigit
  6044 ;; This function is called by:
  6045 ;;		_main
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           
  6050                           ;psect for function _atoi
  6051  00FB                     _atoi:	
  6052                           
  6053                           ;incstack = 0
  6054                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6055                           ;atoi@s stored from wreg
  6056  00FB  00FD               	movwf	atoi@s
  6057  00FC                     l2104:	
  6058  00FC  087D               	movf	atoi@s,w
  6059  00FD  0086               	movwf	6
  6060  00FE  0187               	clrf	7
  6061  00FF  3020               	movlw	32
  6062  0100  0601               	xorwf	1,w
  6063  0101  1D03               	btfss	3,2
  6064  0102  2908               	goto	l2106
  6065  0103                     l2102:	
  6066  0103  3001               	movlw	1
  6067  0104  00F8               	movwf	??_atoi
  6068  0105  0878               	movf	??_atoi,w
  6069  0106  07FD               	addwf	atoi@s,f
  6070  0107  28FC               	goto	l2104
  6071  0108                     l2106:	
  6072  0108  087D               	movf	atoi@s,w
  6073  0109  0086               	movwf	6
  6074  010A  0187               	clrf	7
  6075  010B  3009               	movlw	9
  6076  010C  0601               	xorwf	1,w
  6077  010D  1903               	btfsc	3,2
  6078  010E  2903               	goto	l2102
  6079  010F  01FB               	clrf	atoi@a
  6080  0110  01FC               	clrf	atoi@a+1
  6081  0111  01FA               	clrf	atoi@sign
  6082  0112  087D               	movf	atoi@s,w
  6083  0113  0086               	movwf	6
  6084  0114  0187               	clrf	7
  6085  0115  302D               	movlw	45
  6086  0116  0601               	xorwf	1,w
  6087  0117  1D03               	btfss	3,2
  6088  0118  291E               	goto	l2114
  6089  0119  3001               	movlw	1
  6090  011A  00F8               	movwf	??_atoi
  6091  011B  0878               	movf	??_atoi,w
  6092  011C  07FA               	addwf	atoi@sign,f
  6093  011D  2925               	goto	l2120
  6094  011E                     l2114:	
  6095  011E  087D               	movf	atoi@s,w
  6096  011F  0086               	movwf	6
  6097  0120  0187               	clrf	7
  6098  0121  302B               	movlw	43
  6099  0122  0601               	xorwf	1,w
  6100  0123  1D03               	btfss	3,2
  6101  0124  2929               	goto	l2122
  6102  0125                     l2120:	
  6103  0125  3001               	movlw	1
  6104  0126  00F8               	movwf	??_atoi
  6105  0127  0878               	movf	??_atoi,w
  6106  0128  07FD               	addwf	atoi@s,f
  6107  0129                     l2122:	
  6108  0129  087D               	movf	atoi@s,w
  6109  012A  0086               	movwf	6
  6110  012B  0187               	clrf	7
  6111  012C  0801               	movf	1,w
  6112  012D  318E  26E0  3180   	fcall	_isdigit
  6113  0130  1C03               	btfss	3,0
  6114  0131  294E               	goto	l2124
  6115  0132  087C               	movf	atoi@a+1,w
  6116  0133  00F1               	movwf	___wmul@multiplier+1
  6117  0134  087B               	movf	atoi@a,w
  6118  0135  00F0               	movwf	___wmul@multiplier
  6119  0136  300A               	movlw	10
  6120  0137  00F2               	movwf	___wmul@multiplicand
  6121  0138  3000               	movlw	0
  6122  0139  00F3               	movwf	___wmul@multiplicand+1
  6123  013A  318F  271E  3180   	fcall	___wmul
  6124  013D  087D               	movf	atoi@s,w
  6125  013E  0086               	movwf	6
  6126  013F  0187               	clrf	7
  6127  0140  0801               	movf	1,w
  6128  0141  0770               	addwf	?___wmul,w
  6129  0142  00F8               	movwf	??_atoi
  6130  0143  0871               	movf	?___wmul+1,w
  6131  0144  1803               	skipnc
  6132  0145  0A71               	incf	?___wmul+1,w
  6133  0146  00F9               	movwf	??_atoi+1
  6134  0147  0878               	movf	??_atoi,w
  6135  0148  3ED0               	addlw	208
  6136  0149  00FB               	movwf	atoi@a
  6137  014A  30FF               	movlw	255
  6138  014B  3D79               	addwfc	??_atoi+1,w
  6139  014C  00FC               	movwf	atoi@a+1
  6140  014D  2925               	goto	l2120
  6141  014E                     l2124:	
  6142  014E  087A               	movf	atoi@sign,w
  6143  014F  1903               	btfsc	3,2
  6144  0150  295D               	goto	l2130
  6145  0151  097B               	comf	atoi@a,w
  6146  0152  00F8               	movwf	??_atoi
  6147  0153  097C               	comf	atoi@a+1,w
  6148  0154  00F9               	movwf	??_atoi+1
  6149  0155  0AF8               	incf	??_atoi,f
  6150  0156  1903               	skipnz
  6151  0157  0AF9               	incf	??_atoi+1,f
  6152  0158  0878               	movf	??_atoi,w
  6153  0159  00F6               	movwf	?_atoi
  6154  015A  0879               	movf	??_atoi+1,w
  6155  015B  00F7               	movwf	?_atoi+1
  6156  015C  0008               	return
  6157  015D                     l2130:	
  6158  015D  087C               	movf	atoi@a+1,w
  6159  015E  00F7               	movwf	?_atoi+1
  6160  015F  087B               	movf	atoi@a,w
  6161  0160  00F6               	movwf	?_atoi
  6162  0161  0008               	return
  6163  0162                     __end_of_atoi:	
  6164                           
  6165                           	psect	text16
  6166  0EE0                     __ptext16:	
  6167 ;; *************** function _isdigit *****************
  6168 ;; Defined at:
  6169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  c               1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  c               1    1[COMMON] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;		None               void
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;Total ram usage:        2 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_printf
  6193 ;;		_atoi
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _isdigit
  6199  0EE0                     _isdigit:	
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6203                           ;isdigit@c stored from wreg
  6204  0EE0  00F1               	movwf	isdigit@c
  6205  0EE1  01F0               	clrf	_isdigit$649
  6206  0EE2  303A               	movlw	58
  6207  0EE3  0271               	subwf	isdigit@c,w
  6208  0EE4  1803               	skipnc
  6209  0EE5  2EEC               	goto	l1638
  6210  0EE6  3030               	movlw	48
  6211  0EE7  0271               	subwf	isdigit@c,w
  6212  0EE8  1C03               	skipc
  6213  0EE9  2EEC               	goto	l1638
  6214  0EEA  01F0               	clrf	_isdigit$649
  6215  0EEB  0AF0               	incf	_isdigit$649,f
  6216  0EEC                     l1638:	
  6217  0EEC  0C70               	rrf	_isdigit$649,w
  6218  0EED  0008               	return
  6219  0EEE                     __end_of_isdigit:	
  6220                           
  6221                           	psect	text17
  6222  0F1E                     __ptext17:	
  6223 ;; *************** function ___wmul *****************
  6224 ;; Defined at:
  6225 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  multiplier      2    0[COMMON] unsigned int 
  6228 ;;  multiplicand    2    2[COMMON] unsigned int 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  product         2    4[COMMON] unsigned int 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  2    0[COMMON] unsigned int 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, status,0
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;Total ram usage:        6 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_printf
  6250 ;;		_atoi
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function ___wmul
  6256  0F1E                     ___wmul:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6260  0F1E  01F4               	clrf	___wmul@product
  6261  0F1F  01F5               	clrf	___wmul@product+1
  6262  0F20                     l1644:	
  6263  0F20  1C70               	btfss	___wmul@multiplier,0
  6264  0F21  2F26               	goto	l468
  6265  0F22  0872               	movf	___wmul@multiplicand,w
  6266  0F23  07F4               	addwf	___wmul@product,f
  6267  0F24  0873               	movf	___wmul@multiplicand+1,w
  6268  0F25  3DF5               	addwfc	___wmul@product+1,f
  6269  0F26                     l468:	
  6270  0F26  3001               	movlw	1
  6271  0F27                     u1265:	
  6272  0F27  35F2               	lslf	___wmul@multiplicand,f
  6273  0F28  0DF3               	rlf	___wmul@multiplicand+1,f
  6274  0F29  0B89               	decfsz	9,f
  6275  0F2A  2F27               	goto	u1265
  6276  0F2B  3001               	movlw	1
  6277  0F2C                     u1275:	
  6278  0F2C  36F1               	lsrf	___wmul@multiplier+1,f
  6279  0F2D  0CF0               	rrf	___wmul@multiplier,f
  6280  0F2E  0B89               	decfsz	9,f
  6281  0F2F  2F2C               	goto	u1275
  6282  0F30  0870               	movf	___wmul@multiplier,w
  6283  0F31  0471               	iorwf	___wmul@multiplier+1,w
  6284  0F32  1D03               	btfss	3,2
  6285  0F33  2F20               	goto	l1644
  6286  0F34  0875               	movf	___wmul@product+1,w
  6287  0F35  00F1               	movwf	?___wmul+1
  6288  0F36  0874               	movf	___wmul@product,w
  6289  0F37  00F0               	movwf	?___wmul
  6290  0F38  0008               	return
  6291  0F39                     __end_of___wmul:	
  6292                           
  6293                           	psect	text18
  6294  0005                     __ptext18:	
  6295 ;; *************** function _SYSTEM_Initialize *****************
  6296 ;; Defined at:
  6297 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, status,2, status,0, pclath, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;Total ram usage:        0 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    1
  6318 ;; This function calls:
  6319 ;;		_EUSART_Initialize
  6320 ;;		_OSCILLATOR_Initialize
  6321 ;;		_PIN_MANAGER_Initialize
  6322 ;;		_SPI_Initialize
  6323 ;;		_WDT_Initialize
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _SYSTEM_Initialize
  6331  0005                     _SYSTEM_Initialize:	
  6332                           
  6333                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6337  0005  318E  26EE  3180   	fcall	_PIN_MANAGER_Initialize
  6338                           
  6339                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6340  0008  318E  26AC  3180   	fcall	_OSCILLATOR_Initialize
  6341                           
  6342                           ;mcc.c: 75: WDT_Initialize();
  6343  000B  318E  2699  3180   	fcall	_WDT_Initialize
  6344                           
  6345                           ;mcc.c: 76: SPI_Initialize();
  6346  000E  318E  26B3  3180   	fcall	_SPI_Initialize
  6347                           
  6348                           ;mcc.c: 77: EUSART_Initialize();
  6349  0011  318E  26D5         	fcall	_EUSART_Initialize
  6350  0013  0008               	return
  6351  0014                     __end_of_SYSTEM_Initialize:	
  6352                           
  6353                           	psect	text19
  6354  0E99                     __ptext19:	
  6355 ;; *************** function _WDT_Initialize *****************
  6356 ;; Defined at:
  6357 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_SYSTEM_Initialize
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _WDT_Initialize
  6386  0E99                     _WDT_Initialize:	
  6387                           
  6388                           ;mcc.c: 93: WDTCON = 0x16;
  6389                           
  6390                           ;incstack = 0
  6391                           ; Regs used in _WDT_Initialize: [wreg]
  6392  0E99  3016               	movlw	22
  6393  0E9A  0021               	movlb	1	; select bank1
  6394  0E9B  0097               	movwf	23	;volatile
  6395  0E9C  0008               	return
  6396  0E9D                     __end_of_WDT_Initialize:	
  6397                           
  6398                           	psect	text20
  6399  0EB3                     __ptext20:	
  6400 ;; *************** function _SPI_Initialize *****************
  6401 ;; Defined at:
  6402 ;;		line 63 in file "mcc_generated_files/spi.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;		None
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      void 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;Total ram usage:        0 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; This function calls:
  6423 ;;		Nothing
  6424 ;; This function is called by:
  6425 ;;		_SYSTEM_Initialize
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _SPI_Initialize
  6431  0EB3                     _SPI_Initialize:	
  6432                           
  6433                           ;spi.c: 68: SSP1STAT = 0x40;
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  6437  0EB3  3040               	movlw	64
  6438  0EB4  0024               	movlb	4	; select bank4
  6439  0EB5  0094               	movwf	20	;volatile
  6440                           
  6441                           ;spi.c: 71: SSP1CON1 = 0x20;
  6442  0EB6  3020               	movlw	32
  6443  0EB7  0095               	movwf	21	;volatile
  6444                           
  6445                           ;spi.c: 74: SSP1ADD = 0x00;
  6446  0EB8  0192               	clrf	18	;volatile
  6447  0EB9  0008               	return
  6448  0EBA                     __end_of_SPI_Initialize:	
  6449                           
  6450                           	psect	text21
  6451  0EEE                     __ptext21:	
  6452 ;; *************** function _PIN_MANAGER_Initialize *****************
  6453 ;; Defined at:
  6454 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;		None
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;		None
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      void 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;Total ram usage:        0 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; This function calls:
  6475 ;;		Nothing
  6476 ;; This function is called by:
  6477 ;;		_SYSTEM_Initialize
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function _PIN_MANAGER_Initialize
  6483  0EEE                     _PIN_MANAGER_Initialize:	
  6484                           
  6485                           ;pin_manager.c: 57: LATA = 0x10;
  6486                           
  6487                           ;incstack = 0
  6488                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6489  0EEE  3010               	movlw	16
  6490  0EEF  0022               	movlb	2	; select bank2
  6491  0EF0  008C               	movwf	12	;volatile
  6492                           
  6493                           ;pin_manager.c: 58: LATC = 0x00;
  6494  0EF1  018E               	clrf	14	;volatile
  6495                           
  6496                           ;pin_manager.c: 63: TRISA = 0x2F;
  6497  0EF2  302F               	movlw	47
  6498  0EF3  0021               	movlb	1	; select bank1
  6499  0EF4  008C               	movwf	12	;volatile
  6500                           
  6501                           ;pin_manager.c: 64: TRISC = 0x32;
  6502  0EF5  3032               	movlw	50
  6503  0EF6  008E               	movwf	14	;volatile
  6504                           
  6505                           ;pin_manager.c: 69: ANSELC = 0x00;
  6506  0EF7  0023               	movlb	3	; select bank3
  6507  0EF8  018E               	clrf	14	;volatile
  6508                           
  6509                           ;pin_manager.c: 70: ANSELA = 0x07;
  6510  0EF9  3007               	movlw	7
  6511  0EFA  008C               	movwf	12	;volatile
  6512                           
  6513                           ;pin_manager.c: 75: WPUA = 0x00;
  6514  0EFB  0024               	movlb	4	; select bank4
  6515  0EFC  018C               	clrf	12	;volatile
  6516                           
  6517                           ;pin_manager.c: 76: WPUC = 0x30;
  6518  0EFD  3030               	movlw	48
  6519  0EFE  008E               	movwf	14	;volatile
  6520                           
  6521                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6522  0EFF  0021               	movlb	1	; select bank1
  6523  0F00  1395               	bcf	21,7	;volatile
  6524                           
  6525                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6526  0F01  0022               	movlb	2	; select bank2
  6527  0F02  019E               	clrf	30	;volatile
  6528                           
  6529                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6530  0F03  019D               	clrf	29	;volatile
  6531  0F04  0008               	return
  6532  0F05                     __end_of_PIN_MANAGER_Initialize:	
  6533                           
  6534                           	psect	text22
  6535  0EAC                     __ptext22:	
  6536 ;; *************** function _OSCILLATOR_Initialize *****************
  6537 ;; Defined at:
  6538 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;Total ram usage:        0 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_SYSTEM_Initialize
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _OSCILLATOR_Initialize
  6567  0EAC                     _OSCILLATOR_Initialize:	
  6568                           
  6569                           ;mcc.c: 83: OSCCON = 0x60;
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6573  0EAC  3060               	movlw	96
  6574  0EAD  0021               	movlb	1	; select bank1
  6575  0EAE  0099               	movwf	25	;volatile
  6576                           
  6577                           ;mcc.c: 85: OSCTUNE = 0x00;
  6578  0EAF  0198               	clrf	24	;volatile
  6579                           
  6580                           ;mcc.c: 87: BORCON = 0x00;
  6581  0EB0  0022               	movlb	2	; select bank2
  6582  0EB1  0196               	clrf	22	;volatile
  6583  0EB2  0008               	return
  6584  0EB3                     __end_of_OSCILLATOR_Initialize:	
  6585                           
  6586                           	psect	text23
  6587  0ED5                     __ptext23:	
  6588 ;; *************** function _EUSART_Initialize *****************
  6589 ;; Defined at:
  6590 ;;		line 53 in file "mcc_generated_files/eusart.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_SYSTEM_Initialize
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _EUSART_Initialize
  6619  0ED5                     _EUSART_Initialize:	
  6620                           
  6621                           ;eusart.c: 58: BAUDCON = 0x08;
  6622                           
  6623                           ;incstack = 0
  6624                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6625  0ED5  3008               	movlw	8
  6626  0ED6  0023               	movlb	3	; select bank3
  6627  0ED7  009F               	movwf	31	;volatile
  6628                           
  6629                           ;eusart.c: 61: RCSTA = 0x90;
  6630  0ED8  3090               	movlw	144
  6631  0ED9  009D               	movwf	29	;volatile
  6632                           
  6633                           ;eusart.c: 64: TXSTA = 0x24;
  6634  0EDA  3024               	movlw	36
  6635  0EDB  009E               	movwf	30	;volatile
  6636                           
  6637                           ;eusart.c: 67: SPBRGL = 0x33;
  6638  0EDC  3033               	movlw	51
  6639  0EDD  009B               	movwf	27	;volatile
  6640                           
  6641                           ;eusart.c: 70: SPBRGH = 0x00;
  6642  0EDE  019C               	clrf	28	;volatile
  6643  0EDF  0008               	return
  6644  0EE0                     __end_of_EUSART_Initialize:	
  6645                           
  6646                           	psect	text24
  6647  0ECB                     __ptext24:	
  6648 ;; *************** function _EUSART_Read *****************
  6649 ;; Defined at:
  6650 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      unsigned char 
  6657 ;; Registers used:
  6658 ;;		wreg
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_main
  6674 ;;		_getch
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           
  6679                           ;psect for function _EUSART_Read
  6680  0ECB                     _EUSART_Read:	
  6681  0ECB                     l51:	
  6682                           ;eusart.c: 78: {
  6683                           
  6684                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _EUSART_Read: [wreg]
  6688                           
  6689  0ECB  0020               	movlb	0	; select bank0
  6690  0ECC  1E91               	btfss	17,5	;volatile
  6691  0ECD  2ECB               	goto	l51
  6692                           
  6693                           ;eusart.c: 79: }
  6694                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  6695  0ECE  0023               	movlb	3	; select bank3
  6696  0ECF  1C9D               	btfss	29,1	;volatile
  6697  0ED0  2ED3               	goto	l1946
  6698                           
  6699                           ;eusart.c: 83: {
  6700                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  6701  0ED1  121D               	bcf	29,4	;volatile
  6702                           
  6703                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  6704  0ED2  161D               	bsf	29,4	;volatile
  6705  0ED3                     l1946:	
  6706                           
  6707                           ;eusart.c: 88: }
  6708                           ;eusart.c: 90: return RCREG;
  6709  0ED3  0819               	movf	25,w	;volatile
  6710  0ED4  0008               	return
  6711  0ED5                     __end_of_EUSART_Read:	
  6712  007E                     btemp	set	126	;btemp
  6713  007E                     wtemp0	set	126


Data Sizes:
    Strings     777
    Constant    35
    Data        4
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      76
    BANK1            80      0      38
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_37(CODE[7]), printf@c(BANK0[1]), buf(BANK1[9]), rx_buf(BANK1[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_36(CODE[25]), STR_35(CODE[19]), STR_34(CODE[24]), STR_33(CODE[18]), 
		 -> STR_32(CODE[22]), STR_31(CODE[44]), STR_30(CODE[26]), STR_29(CODE[42]), 
		 -> STR_28(CODE[38]), STR_27(CODE[54]), STR_26(CODE[59]), STR_25(CODE[51]), 
		 -> STR_24(CODE[14]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[23]), STR_18(CODE[21]), STR_17(CODE[3]), 
		 -> STR_16(CODE[13]), STR_15(CODE[13]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[20]), STR_11(CODE[14]), STR_10(CODE[14]), STR_9(CODE[14]), 
		 -> STR_8(CODE[4]), STR_7(CODE[22]), STR_6(CODE[15]), STR_5(CODE[16]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    can_receive@rx_buf_ptr	PTR unsigned char  size(1) Largest target is 15
		 -> rx_buf(BANK1[15]), 

    SPI_send@rbuf	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> tx_buf(BANK1[14]), can_send@can_status_buf(BANK0[2]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_send@sbuf	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> tx_buf(BANK1[14]), can_send@can_status_buf(BANK0[2]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> tx_buf(BANK1[14]), can_send@can_status_buf(BANK0[2]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK0[4]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), can_send@debug_buf(BANK0[3]), 
		 -> tx_buf(BANK1[14]), can_send@can_status_buf(BANK0[2]), rx_buf(BANK1[15]), can_txf_clear@can_int_flag(BANK0[4]), 
		 -> can_ope_mode@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_txf_clear->_SPI_send
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_send->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_send
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_txf_clear->_SPI_send
    _can_receive->_printf
    _can_send->_printf
    _can_ope_mode->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   42395
                                             42 BANK0     23    23      0
                        _EUSART_Read
                           _SPI_send
                  _SYSTEM_Initialize
                               _atoi
                       _can_ope_mode
                           _can_send
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    4478
                                             25 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     7     7      0   15705
                                             33 BANK0      7     7      0
                           _SPI_send
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                       10    10      0    2408
                                              2 BANK0     10    10      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _can_receive                                          8     8      0    6634
                                             25 BANK0      8     8      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            17    16      1    7451
                                             25 BANK0     17    16      1
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_ope_mode                                         8     8      0    6692
                                             25 BANK0      8     8      0
                           _SPI_send
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              29    21      8    4238
                                              0 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             7     5      2    2217
                                              8 COMMON     5     3      2
                                              0 BANK0      2     2      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     532
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     654
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SPI_send
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_ope_mode
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_send
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_send
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_send
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      26       7       47.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      80      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      80      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 16:37:37 2018

                    _SPI_Initialize 0EB3               __end_of_can_txf_clear 0F91  
                                 _c 0067                         __CFG_CP$OFF 0000  
                                l51 0ECB                                  l58 0EBB  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 12EC  
               ___wmul@multiplicand 0072                         __CFG_LVP$ON 0000  
                               l113 0EC7                                 l213 023A  
                               l320 037A                                 l216 024A  
                               l240 00E9                                 l241 00E5  
                               l243 00EF                                 l332 0454  
                               l333 03C4                                 l245 00F5  
                               l237 00D9                                 l238 00D5  
                               l354 047A                                 l363 04D3  
                               l359 049C                                 l279 06E8  
                               l384 058E                                 l468 0F26  
          __end_of_can_status_check 00FB                        __CFG_CPD$OFF 0000  
                               _abc 12E6                                 _buf 00BD  
                               _idx 0066                                 _sid 0061  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000                        ?_EUSART_Read 0070  
                              l2002 0256                                l2004 025B  
                              l2102 0103                                l2120 0125  
                              l2104 00FC                                l2024 02A7  
                              l2130 015D                                l2122 0129  
                              l2114 011E                                l2106 0108  
                              l2026 027E                                l2124 014E  
                              l2044 02F7                                l2028 02AD  
                              l2222 0646                                l2214 061B  
                              l2056 032E                                l2240 067D  
                              l2216 0638                                l1610 0076  
                              l1620 0096                                l1612 0089  
                              l1700 0F60                                l2068 0352  
                              l2180 05C4                                l2172 05B4  
                              l2148 0735                                l1606 0068  
                              l1614 008D                                l1710 0375  
                              l2270 079C                                l2254 06BC  
                              l2182 05C7                                l2262 0785  
                              l2158 0753                                l1624 00A7  
                              l1616 0092                                l2256 06EB  
                              l2192 05DC                                l2176 05BD  
                              l2168 05A0                                l1626 00AB  
                              l1810 04C7                                l1730 03C6  
                              l1722 0395                                l2186 05D0  
                              l2274 07A7                                l1644 0F20  
                              l1820 04F2                                l1716 037F  
                              l2276 07A8                                l1638 0EEC  
                              l1742 03DB                                l1718 0388  
                              l2198 05E2                                l1832 050B  
                              l1808 04BE                                l1760 041F  
                              l1752 03F8                                l1744 03E9  
                              l2288 07D6                                l1674 0FB7  
                              l1666 0F99                                l1690 0F3F  
                              l1834 050F                                l1842 0524  
                              l1826 04FC                                l1818 04EF  
                              l1754 0407                                l1738 03D9  
                              l1770 0433                                l1668 0FA5  
                              l1692 0F4B                                l1844 052A  
                              l1764 042A                                l1748 03F6  
                              l1932 01F1                                l1678 0FC0  
                              l1846 0551                                l1854 0578  
                              l1838 051C                                l1782 046E  
                              l1758 0414                                l1696 0F57  
                              l1856 057C                                l1946 0ED3  
                              l1858 0359                                l1938 0204  
                              l1990 0237                                l1996 0246  
                              STR_1 1184                                STR_2 1263  
                              STR_3 11BC                                STR_4 1200  
                              STR_5 1244                                STR_6 1254  
                              STR_7 1145                                STR_8 1157  
                              STR_9 1280                                u1305 0F9C  
                              u1325 0FA6                                u1405 0F58  
                              _LATA 010C                                u1335 0FB0  
                              _LATC 010E                                u1265 0F27  
                              u1345 0FB8                                u1275 0F2C  
                              u2155 0608                                u1605 04E2  
                              u1375 0F42                                u1535 0495  
                              u1704 0F6E                                u1705 0F6D  
                              u1395 0F51                                u1475 03EF  
                              u1565 04B7                                u1904 0338  
                              u1905 0337                                u1755 0FD7  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 00FB                                _main 058F  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 0EBA  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 00AD  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 00AE       __end_of_OSCILLATOR_Initialize 0EB3  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 128E                               STR_11 129C  
                             STR_20 11EF                               STR_12 1170  
                             STR_21 1233                               STR_13 11CD  
                             STR_14 1211                               STR_22 11DE  
                             STR_30 10E5                               STR_15 12AA  
                             STR_23 1222                               STR_31 1069  
                             STR_16 12B7                               STR_24 1272  
                             STR_32 112F                               STR_33 1199  
                             STR_17 12E9                               STR_25 1036  
                     __CFG_WDTE$OFF 0000                               STR_34 1100  
                             STR_18 115B                               STR_26 0801  
                             STR_35 1198                               STR_19 1118  
                             STR_27 1000                               STR_36 10FF  
                             STR_28 10BF                               STR_37 12D6  
                             STR_29 1095                               STR_38 11AB  
                   __end_of___lwdiv 0FC5                     __end_of___lwmod 0F65  
     can_status_check@bytes_written 0044                               _RCREG 0199  
                             _RCSTA 019D                        main@mask_buf 005B  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                             _debug 0065                     __end_of_dpowers 12CE  
                    _WDT_Initialize 0E99                     __end_of_max_idx 0801  
                   __end_of_isdigit 0EEE                               atoi@a 007B  
                             atoi@s 007D                               _putch 0EA1  
                             main@n 0060                       can_send@F2953 006A  
                   __end_of_set_sid 1000                    __end_of_SPI_send 0F1E  
                             status 0003                               wtemp0 007E  
            can_send@can_status_buf 003F                     ?_SPI_Initialize 0070  
                   __initialization 07DE                   can_send@debug_buf 0045  
                      __end_of_atoi 0162                        __end_of_main 07DE  
                    ??_EUSART_Write 0070              can_status_check@status 0047  
                            ??_atoi 0078                              ??_main 004A  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0E9D  
          __end_of_SPI_Exchange8bit 0ECB               __size_of_can_ope_mode 004B  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                     main@mask_sidh 0059                       main@mask_sidl 005A  
                  __end_of_can_send 0354                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0F1E                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
         can_txf_clear@can_int_flag 0028                              _printf 0354  
                            _rx_buf 00A0                        _can_ope_mode 0014  
                            _tx_buf 00AF                              main@rc 0055  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 003B                    __end_of_rxfnsidh 12E3  
                  __end_of_txbnsidh 12E6                    __end_of_rxmnsidh 12F0  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0005  
           __end_of__initialization 07FD                      can_receive@dlc 003E  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 0E9D                 ??_SYSTEM_Initialize 0070  
                    can_send@status 0043                       __end_of_putch 0EA6  
                      SPI_send@rbuf 0079                        SPI_send@sbuf 0021  
                        __end_of_nm 12EE                           ?_SPI_send 0078  
                 ?_can_status_check 0070                      _OPTION_REGbits 0095  
                ??_can_status_check 0041           __end_of_SYSTEM_Initialize 0014  
                           ??_putch 0071                          __pbssBANK0 0061  
                        __pbssBANK1 00A0                __end_of_EUSART_Write 0EC2  
                        __pmaintext 058F                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E                             ?_printf 0020  
                        ??_SPI_send 007A                           ?_can_send 0039  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211              __size_of_can_txf_clear 002C  
                  ??_SPI_Initialize 0070                       ??_can_receive 0039  
                   __size_of___wmul 001B                             ___lwdiv 0F91  
                           ___lwmod 0F39                             __ptext1 0FC5  
                           __ptext2 00AD                             __ptext3 0F65  
                           __ptext4 0162                             __ptext5 0210  
                           __ptext6 0014                             __ptext7 0354  
                           __ptext8 0EA1                             __ptext9 0EBA  
                   __size_of_printf 023B                   __end_of_hexpowers 12D6  
                           _dpowers 12C4               _OSCILLATOR_Initialize 0EAC  
                           _max_idx 0800                          ??_can_send 003A  
                           _isdigit 0EE0            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 0FC5      can_status_check@can_status_buf 0045  
                           _verbose 0064                   ?_SPI_Exchange8bit 0070  
                           main@cmd 005F                      can_txf_clear@n 0025  
                       set_sid@sidh 003F                         set_sid@sidl 0040  
        __size_of_SYSTEM_Initialize 000F                             main@sid 0054  
                           clrloop0 0EA7                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
             can_receive@bytes_read 003D                   _EUSART_Initialize 0ED5  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 0038                             printf@f 0020  
                     _can_txf_clear 0F65                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_receive 0210  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
         __end_of_EUSART_Initialize 0EE0                          main@rc_418 0056  
                 can_txf_clear@mask 0026                         printf@width 0036  
          ??_SPI_Exchange8bitBuffer 0073            can_ope_mode@can_ctrl_buf 003E  
             can_receive@rx_buf_ptr 003F                      ?_can_txf_clear 0070  
                    __end_of___wmul 0F39               can_status_check@F2962 0068  
                      _EUSART_Write 0EBA              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 058F                 start_initialization 07DE  
                      can_receive@n 0040                   __size_of_SPI_send 0019  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 12E9  
                     ??_EUSART_Read 0070                         putch@txData 0071  
         __size_of_can_status_check 004E           can_ope_mode@bytes_written 003D  
                          ??___wmul 0074                         _can_receive 0162  
                       __pdataBANK0 0068                            ??_printf 0028  
                         ___latbits 0002                       __pcstackBANK0 0020  
                 __size_of_can_send 0144       SPI_Exchange8bitBuffer@dataOut 0072  
                       SPI_send@len 0078          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0ED5     __size_of_SPI_Exchange8bitBuffer 004E  
                   ??_can_txf_clear 0022                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0EEE                            ?___lwdiv 0070  
                          ?___lwmod 0078                            ?_isdigit 0070  
                         can_send@i 0048                           can_send@n 0049  
                          ?_set_sid 0039                           _hexpowers 12CE  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                    ___wmul@product 0074                            _LATAbits 010C  
                         clear_ram0 0EA6                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214                       ?_can_ope_mode 0070  
                 ___wmul@multiplier 0070                            _SPI_send 0F05  
            _SPI_Exchange8bitBuffer 005F                          printf@flag 0035  
                        printf@prec 002D                         _EUSART_Read 0ECB  
                       can_send@dlc 0039                         can_send@buf 003E  
                       can_send@len 0041                    _can_status_check 00AD  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 0039                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$649 0070                can_ope_mode@ope_mode 003C  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 0210  
                  __size_of_isdigit 000E                            _main$400 0052  
                          _main$399 0050                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0F39  
                          __ptext11 0F91                            __ptext20 0EB3  
                          __ptext12 0F05                            __ptext21 0EEE  
                          __ptext13 005F                            __ptext22 0EAC  
                          __ptext14 0EC2                            __ptext23 0ED5  
                          __ptext15 00FB                            __ptext24 0ECB  
                          __ptext16 0EE0                            __ptext17 0F1E  
                          __ptext18 0005                            __ptext19 0E99  
                  __size_of_set_sid 003B                        _SSP1CON1bits 0215  
                     __size_of_atoi 0067                       __size_of_main 024F  
                          _ope_mode 0063                can_send@txb_ctrl_buf 0044  
                      ?_can_receive 0070                            atoi@sign 007A  
                         printf@idx 002C                           printf@len 0030  
                         printf@val 0033                        _SSP1STATbits 0214  
                          main@mask 0057                            _rxfnsidh 12DD  
                          _txbnsidh 12E3                            _rxmnsidh 12EE  
             SPI_send@bytes_written 0020                      __pstringtext10 1036  
                    __pstringtext11 1069                      __pstringtext20 1170  
                    __pstringtext12 1095                      __pstringtext21 1184  
                    __pstringtext13 10BF                      __pstringtext30 1222  
                    __pstringtext22 1198                      __pstringtext14 10E5  
                    __pstringtext31 1233                      __pstringtext23 11AB  
                    __pstringtext15 10FF                      __pstringtext40 12B7  
                    __pstringtext32 1244                      __pstringtext24 11BC  
                    __pstringtext16 1118                      __pstringtext41 12D6  
                    __pstringtext33 1254                      __pstringtext25 11CD  
                    __pstringtext17 112F                      __pstringtext42 12E9  
                    __pstringtext34 1263                      __pstringtext26 11DE  
                    __pstringtext18 1145                      __pstringtext43 0000  
                    __pstringtext35 1272                      __pstringtext27 11EF  
                    __pstringtext19 115B                      __pstringtext36 1280  
                    __pstringtext28 1200                      __pstringtext37 128E  
                    __pstringtext29 1211                      __pstringtext38 129C  
                    __pstringtext39 12AA                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                    ___lwmod@dividend 007A  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                    _SPI_Exchange8bit 0EC2  
             can_send@bytes_written 0042                            printf@ap 0032  
                          printf@cp 002E          can_txf_clear@bytes_written 0027  
                     __pstringtext1 12C4                       __pstringtext2 12CE  
                     __pstringtext3 12DD                       __pstringtext4 12E3  
                     __pstringtext5 12E6                       __pstringtext6 12EC  
                     __pstringtext7 12EE                       __pstringtext8 0800  
                     __pstringtext9 1000                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0F05                __end_of_can_ope_mode 005F  
                   set_sid@can_node 0039  
