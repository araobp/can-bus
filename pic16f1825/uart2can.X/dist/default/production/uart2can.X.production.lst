

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 16 17:17:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	cinit,global,class=CODE,merge=1,delta=2
    60                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    61                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    62                           	psect	clrtext,global,class=CODE,delta=2
    63                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    65                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    66                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    67                           	psect	text1,local,class=CODE,merge=1,delta=2
    68                           	psect	text2,local,class=CODE,merge=1,delta=2
    69                           	psect	text3,local,class=CODE,merge=1,delta=2
    70                           	psect	text4,local,class=CODE,merge=1,delta=2
    71                           	psect	text5,local,class=CODE,merge=1,delta=2
    72                           	psect	text6,local,class=CODE,merge=1,delta=2
    73                           	psect	text7,local,class=CODE,merge=1,delta=2
    74                           	psect	text8,local,class=CODE,merge=1,delta=2
    75                           	psect	text9,local,class=CODE,merge=1,delta=2
    76                           	psect	text10,local,class=CODE,merge=1,delta=2
    77                           	psect	text11,local,class=CODE,merge=1,delta=2
    78                           	psect	text12,local,class=CODE,merge=1,delta=2
    79                           	psect	text13,local,class=CODE,merge=1,delta=2
    80                           	psect	text14,local,class=CODE,merge=1,delta=2
    81                           	psect	text15,local,class=CODE,merge=1,delta=2
    82                           	psect	text16,local,class=CODE,merge=1,delta=2
    83                           	psect	text17,local,class=CODE,merge=1,delta=2
    84                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text20,local,class=CODE,merge=1,delta=2
    87                           	psect	text21,local,class=CODE,merge=1,delta=2
    88                           	psect	text22,local,class=CODE,merge=1,delta=2
    89                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text26,local,class=CODE,merge=1,delta=2
    93                           	psect	text27,local,class=CODE,merge=1,delta=2
    94                           	psect	text28,local,class=CODE,merge=1,delta=2
    95                           	psect	text29,local,class=CODE,merge=1,delta=2
    96                           	psect	text30,local,class=CODE,merge=1,delta=2
    97                           	psect	text31,local,class=CODE,merge=1,delta=2
    98                           	psect	text32,local,class=CODE,merge=1,delta=2
    99                           	dabs	1,0x7E,2
   100  0000                     
   101                           ; Version 1.45
   102                           ; Generated 16/11/2017 GMT
   103                           ; 
   104                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   105                           ; All rights reserved.
   106                           ; 
   107                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   108                           ; 
   109                           ; Redistribution and use in source and binary forms, with or without modification, are
   110                           ; permitted provided that the following conditions are met:
   111                           ; 
   112                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   113                           ;        conditions and the following disclaimer.
   114                           ; 
   115                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   116                           ;        of conditions and the following disclaimer in the documentation and/or other
   117                           ;        materials provided with the distribution.
   118                           ; 
   119                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   120                           ;        software without specific prior written permission.
   121                           ; 
   122                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   123                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   124                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   125                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   126                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   127                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   128                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   129                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   130                           ; 
   131                           ; 
   132                           ; Code-generator required, PIC16F1825 Definitions
   133                           ; 
   134                           ; SFR Addresses
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000E                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  008C                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010E                     	;# 
   181  0111                     	;# 
   182  0112                     	;# 
   183  0113                     	;# 
   184  0114                     	;# 
   185  0115                     	;# 
   186  0116                     	;# 
   187  0117                     	;# 
   188  0118                     	;# 
   189  0119                     	;# 
   190  011A                     	;# 
   191  011B                     	;# 
   192  011D                     	;# 
   193  011E                     	;# 
   194  018C                     	;# 
   195  018E                     	;# 
   196  0191                     	;# 
   197  0191                     	;# 
   198  0192                     	;# 
   199  0193                     	;# 
   200  0193                     	;# 
   201  0193                     	;# 
   202  0194                     	;# 
   203  0195                     	;# 
   204  0196                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019C                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  020C                     	;# 
   214  020E                     	;# 
   215  0211                     	;# 
   216  0211                     	;# 
   217  0212                     	;# 
   218  0212                     	;# 
   219  0213                     	;# 
   220  0213                     	;# 
   221  0214                     	;# 
   222  0214                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0291                     	;# 
   231  0291                     	;# 
   232  0292                     	;# 
   233  0293                     	;# 
   234  0294                     	;# 
   235  0295                     	;# 
   236  0295                     	;# 
   237  0296                     	;# 
   238  0298                     	;# 
   239  0298                     	;# 
   240  0299                     	;# 
   241  029A                     	;# 
   242  029B                     	;# 
   243  029C                     	;# 
   244  029D                     	;# 
   245  029E                     	;# 
   246  0311                     	;# 
   247  0311                     	;# 
   248  0312                     	;# 
   249  0313                     	;# 
   250  0318                     	;# 
   251  0318                     	;# 
   252  0319                     	;# 
   253  031A                     	;# 
   254  038C                     	;# 
   255  038E                     	;# 
   256  0391                     	;# 
   257  0392                     	;# 
   258  0393                     	;# 
   259  039A                     	;# 
   260  039C                     	;# 
   261  039D                     	;# 
   262  039E                     	;# 
   263  039F                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000E                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0013                     	;# 
   298  0015                     	;# 
   299  0016                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001C                     	;# 
   307  001E                     	;# 
   308  001F                     	;# 
   309  008C                     	;# 
   310  008E                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010E                     	;# 
   327  0111                     	;# 
   328  0112                     	;# 
   329  0113                     	;# 
   330  0114                     	;# 
   331  0115                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  0118                     	;# 
   335  0119                     	;# 
   336  011A                     	;# 
   337  011B                     	;# 
   338  011D                     	;# 
   339  011E                     	;# 
   340  018C                     	;# 
   341  018E                     	;# 
   342  0191                     	;# 
   343  0191                     	;# 
   344  0192                     	;# 
   345  0193                     	;# 
   346  0193                     	;# 
   347  0193                     	;# 
   348  0194                     	;# 
   349  0195                     	;# 
   350  0196                     	;# 
   351  0199                     	;# 
   352  019A                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019D                     	;# 
   357  019E                     	;# 
   358  019F                     	;# 
   359  020C                     	;# 
   360  020E                     	;# 
   361  0211                     	;# 
   362  0211                     	;# 
   363  0212                     	;# 
   364  0212                     	;# 
   365  0213                     	;# 
   366  0213                     	;# 
   367  0214                     	;# 
   368  0214                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0216                     	;# 
   373  0216                     	;# 
   374  0217                     	;# 
   375  0217                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0294                     	;# 
   381  0295                     	;# 
   382  0295                     	;# 
   383  0296                     	;# 
   384  0298                     	;# 
   385  0298                     	;# 
   386  0299                     	;# 
   387  029A                     	;# 
   388  029B                     	;# 
   389  029C                     	;# 
   390  029D                     	;# 
   391  029E                     	;# 
   392  0311                     	;# 
   393  0311                     	;# 
   394  0312                     	;# 
   395  0313                     	;# 
   396  0318                     	;# 
   397  0318                     	;# 
   398  0319                     	;# 
   399  031A                     	;# 
   400  038C                     	;# 
   401  038E                     	;# 
   402  0391                     	;# 
   403  0392                     	;# 
   404  0393                     	;# 
   405  039A                     	;# 
   406  039C                     	;# 
   407  039D                     	;# 
   408  039E                     	;# 
   409  039F                     	;# 
   410  0415                     	;# 
   411  0416                     	;# 
   412  0417                     	;# 
   413  041C                     	;# 
   414  041D                     	;# 
   415  041E                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000E                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0013                     	;# 
   444  0015                     	;# 
   445  0016                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001C                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  008C                     	;# 
   456  008E                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0093                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0097                     	;# 
   463  0098                     	;# 
   464  0099                     	;# 
   465  009A                     	;# 
   466  009B                     	;# 
   467  009B                     	;# 
   468  009C                     	;# 
   469  009D                     	;# 
   470  009E                     	;# 
   471  010C                     	;# 
   472  010E                     	;# 
   473  0111                     	;# 
   474  0112                     	;# 
   475  0113                     	;# 
   476  0114                     	;# 
   477  0115                     	;# 
   478  0116                     	;# 
   479  0117                     	;# 
   480  0118                     	;# 
   481  0119                     	;# 
   482  011A                     	;# 
   483  011B                     	;# 
   484  011D                     	;# 
   485  011E                     	;# 
   486  018C                     	;# 
   487  018E                     	;# 
   488  0191                     	;# 
   489  0191                     	;# 
   490  0192                     	;# 
   491  0193                     	;# 
   492  0193                     	;# 
   493  0193                     	;# 
   494  0194                     	;# 
   495  0195                     	;# 
   496  0196                     	;# 
   497  0199                     	;# 
   498  019A                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  019D                     	;# 
   503  019E                     	;# 
   504  019F                     	;# 
   505  020C                     	;# 
   506  020E                     	;# 
   507  0211                     	;# 
   508  0211                     	;# 
   509  0212                     	;# 
   510  0212                     	;# 
   511  0213                     	;# 
   512  0213                     	;# 
   513  0214                     	;# 
   514  0214                     	;# 
   515  0215                     	;# 
   516  0215                     	;# 
   517  0215                     	;# 
   518  0216                     	;# 
   519  0216                     	;# 
   520  0217                     	;# 
   521  0217                     	;# 
   522  0291                     	;# 
   523  0291                     	;# 
   524  0292                     	;# 
   525  0293                     	;# 
   526  0294                     	;# 
   527  0295                     	;# 
   528  0295                     	;# 
   529  0296                     	;# 
   530  0298                     	;# 
   531  0298                     	;# 
   532  0299                     	;# 
   533  029A                     	;# 
   534  029B                     	;# 
   535  029C                     	;# 
   536  029D                     	;# 
   537  029E                     	;# 
   538  0311                     	;# 
   539  0311                     	;# 
   540  0312                     	;# 
   541  0313                     	;# 
   542  0318                     	;# 
   543  0318                     	;# 
   544  0319                     	;# 
   545  031A                     	;# 
   546  038C                     	;# 
   547  038E                     	;# 
   548  0391                     	;# 
   549  0392                     	;# 
   550  0393                     	;# 
   551  039A                     	;# 
   552  039C                     	;# 
   553  039D                     	;# 
   554  039E                     	;# 
   555  039F                     	;# 
   556  0415                     	;# 
   557  0416                     	;# 
   558  0417                     	;# 
   559  041C                     	;# 
   560  041D                     	;# 
   561  041E                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000E                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001E                     	;# 
   600  001F                     	;# 
   601  008C                     	;# 
   602  008E                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0093                     	;# 
   606  0095                     	;# 
   607  0096                     	;# 
   608  0097                     	;# 
   609  0098                     	;# 
   610  0099                     	;# 
   611  009A                     	;# 
   612  009B                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  010C                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  011E                     	;# 
   632  018C                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0194                     	;# 
   641  0195                     	;# 
   642  0196                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020E                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0291                     	;# 
   669  0291                     	;# 
   670  0292                     	;# 
   671  0293                     	;# 
   672  0294                     	;# 
   673  0295                     	;# 
   674  0295                     	;# 
   675  0296                     	;# 
   676  0298                     	;# 
   677  0298                     	;# 
   678  0299                     	;# 
   679  029A                     	;# 
   680  029B                     	;# 
   681  029C                     	;# 
   682  029D                     	;# 
   683  029E                     	;# 
   684  0311                     	;# 
   685  0311                     	;# 
   686  0312                     	;# 
   687  0313                     	;# 
   688  0318                     	;# 
   689  0318                     	;# 
   690  0319                     	;# 
   691  031A                     	;# 
   692  038C                     	;# 
   693  038E                     	;# 
   694  0391                     	;# 
   695  0392                     	;# 
   696  0393                     	;# 
   697  039A                     	;# 
   698  039C                     	;# 
   699  039D                     	;# 
   700  039E                     	;# 
   701  039F                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000E                     	;# 
   733  0011                     	;# 
   734  0012                     	;# 
   735  0013                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0093                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010E                     	;# 
   765  0111                     	;# 
   766  0112                     	;# 
   767  0113                     	;# 
   768  0114                     	;# 
   769  0115                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  0118                     	;# 
   773  0119                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011D                     	;# 
   777  011E                     	;# 
   778  018C                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0194                     	;# 
   787  0195                     	;# 
   788  0196                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020C                     	;# 
   798  020E                     	;# 
   799  0211                     	;# 
   800  0211                     	;# 
   801  0212                     	;# 
   802  0212                     	;# 
   803  0213                     	;# 
   804  0213                     	;# 
   805  0214                     	;# 
   806  0214                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0216                     	;# 
   811  0216                     	;# 
   812  0217                     	;# 
   813  0217                     	;# 
   814  0291                     	;# 
   815  0291                     	;# 
   816  0292                     	;# 
   817  0293                     	;# 
   818  0294                     	;# 
   819  0295                     	;# 
   820  0295                     	;# 
   821  0296                     	;# 
   822  0298                     	;# 
   823  0298                     	;# 
   824  0299                     	;# 
   825  029A                     	;# 
   826  029B                     	;# 
   827  029C                     	;# 
   828  029D                     	;# 
   829  029E                     	;# 
   830  0311                     	;# 
   831  0311                     	;# 
   832  0312                     	;# 
   833  0313                     	;# 
   834  0318                     	;# 
   835  0318                     	;# 
   836  0319                     	;# 
   837  031A                     	;# 
   838  038C                     	;# 
   839  038E                     	;# 
   840  0391                     	;# 
   841  0392                     	;# 
   842  0393                     	;# 
   843  039A                     	;# 
   844  039C                     	;# 
   845  039D                     	;# 
   846  039E                     	;# 
   847  039F                     	;# 
   848  0415                     	;# 
   849  0416                     	;# 
   850  0417                     	;# 
   851  041C                     	;# 
   852  041D                     	;# 
   853  041E                     	;# 
   854  0FE4                     	;# 
   855  0FE5                     	;# 
   856  0FE6                     	;# 
   857  0FE7                     	;# 
   858  0FE8                     	;# 
   859  0FE9                     	;# 
   860  0FEA                     	;# 
   861  0FEB                     	;# 
   862  0FED                     	;# 
   863  0FEE                     	;# 
   864  0FEF                     	;# 
   865  0000                     	;# 
   866  0001                     	;# 
   867  0002                     	;# 
   868  0003                     	;# 
   869  0004                     	;# 
   870  0005                     	;# 
   871  0006                     	;# 
   872  0007                     	;# 
   873  0008                     	;# 
   874  0009                     	;# 
   875  000A                     	;# 
   876  000B                     	;# 
   877  000C                     	;# 
   878  000E                     	;# 
   879  0011                     	;# 
   880  0012                     	;# 
   881  0013                     	;# 
   882  0015                     	;# 
   883  0016                     	;# 
   884  0016                     	;# 
   885  0017                     	;# 
   886  0018                     	;# 
   887  0019                     	;# 
   888  001A                     	;# 
   889  001B                     	;# 
   890  001C                     	;# 
   891  001E                     	;# 
   892  001F                     	;# 
   893  008C                     	;# 
   894  008E                     	;# 
   895  0091                     	;# 
   896  0092                     	;# 
   897  0093                     	;# 
   898  0095                     	;# 
   899  0096                     	;# 
   900  0097                     	;# 
   901  0098                     	;# 
   902  0099                     	;# 
   903  009A                     	;# 
   904  009B                     	;# 
   905  009B                     	;# 
   906  009C                     	;# 
   907  009D                     	;# 
   908  009E                     	;# 
   909  010C                     	;# 
   910  010E                     	;# 
   911  0111                     	;# 
   912  0112                     	;# 
   913  0113                     	;# 
   914  0114                     	;# 
   915  0115                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  0118                     	;# 
   919  0119                     	;# 
   920  011A                     	;# 
   921  011B                     	;# 
   922  011D                     	;# 
   923  011E                     	;# 
   924  018C                     	;# 
   925  018E                     	;# 
   926  0191                     	;# 
   927  0191                     	;# 
   928  0192                     	;# 
   929  0193                     	;# 
   930  0193                     	;# 
   931  0193                     	;# 
   932  0194                     	;# 
   933  0195                     	;# 
   934  0196                     	;# 
   935  0199                     	;# 
   936  019A                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019C                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019F                     	;# 
   943  020C                     	;# 
   944  020E                     	;# 
   945  0211                     	;# 
   946  0211                     	;# 
   947  0212                     	;# 
   948  0212                     	;# 
   949  0213                     	;# 
   950  0213                     	;# 
   951  0214                     	;# 
   952  0214                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0216                     	;# 
   957  0216                     	;# 
   958  0217                     	;# 
   959  0217                     	;# 
   960  0291                     	;# 
   961  0291                     	;# 
   962  0292                     	;# 
   963  0293                     	;# 
   964  0294                     	;# 
   965  0295                     	;# 
   966  0295                     	;# 
   967  0296                     	;# 
   968  0298                     	;# 
   969  0298                     	;# 
   970  0299                     	;# 
   971  029A                     	;# 
   972  029B                     	;# 
   973  029C                     	;# 
   974  029D                     	;# 
   975  029E                     	;# 
   976  0311                     	;# 
   977  0311                     	;# 
   978  0312                     	;# 
   979  0313                     	;# 
   980  0318                     	;# 
   981  0318                     	;# 
   982  0319                     	;# 
   983  031A                     	;# 
   984  038C                     	;# 
   985  038E                     	;# 
   986  0391                     	;# 
   987  0392                     	;# 
   988  0393                     	;# 
   989  039A                     	;# 
   990  039C                     	;# 
   991  039D                     	;# 
   992  039E                     	;# 
   993  039F                     	;# 
   994  0415                     	;# 
   995  0416                     	;# 
   996  0417                     	;# 
   997  041C                     	;# 
   998  041D                     	;# 
   999  041E                     	;# 
  1000  0FE4                     	;# 
  1001  0FE5                     	;# 
  1002  0FE6                     	;# 
  1003  0FE7                     	;# 
  1004  0FE8                     	;# 
  1005  0FE9                     	;# 
  1006  0FEA                     	;# 
  1007  0FEB                     	;# 
  1008  0FED                     	;# 
  1009  0FEE                     	;# 
  1010  0FEF                     	;# 
  1011  0000                     	;# 
  1012  0001                     	;# 
  1013  0002                     	;# 
  1014  0003                     	;# 
  1015  0004                     	;# 
  1016  0005                     	;# 
  1017  0006                     	;# 
  1018  0007                     	;# 
  1019  0008                     	;# 
  1020  0009                     	;# 
  1021  000A                     	;# 
  1022  000B                     	;# 
  1023  000C                     	;# 
  1024  000E                     	;# 
  1025  0011                     	;# 
  1026  0012                     	;# 
  1027  0013                     	;# 
  1028  0015                     	;# 
  1029  0016                     	;# 
  1030  0016                     	;# 
  1031  0017                     	;# 
  1032  0018                     	;# 
  1033  0019                     	;# 
  1034  001A                     	;# 
  1035  001B                     	;# 
  1036  001C                     	;# 
  1037  001E                     	;# 
  1038  001F                     	;# 
  1039  008C                     	;# 
  1040  008E                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0095                     	;# 
  1045  0096                     	;# 
  1046  0097                     	;# 
  1047  0098                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010E                     	;# 
  1057  0111                     	;# 
  1058  0112                     	;# 
  1059  0113                     	;# 
  1060  0114                     	;# 
  1061  0115                     	;# 
  1062  0116                     	;# 
  1063  0117                     	;# 
  1064  0118                     	;# 
  1065  0119                     	;# 
  1066  011A                     	;# 
  1067  011B                     	;# 
  1068  011D                     	;# 
  1069  011E                     	;# 
  1070  018C                     	;# 
  1071  018E                     	;# 
  1072  0191                     	;# 
  1073  0191                     	;# 
  1074  0192                     	;# 
  1075  0193                     	;# 
  1076  0193                     	;# 
  1077  0193                     	;# 
  1078  0194                     	;# 
  1079  0195                     	;# 
  1080  0196                     	;# 
  1081  0199                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019C                     	;# 
  1086  019D                     	;# 
  1087  019E                     	;# 
  1088  019F                     	;# 
  1089  020C                     	;# 
  1090  020E                     	;# 
  1091  0211                     	;# 
  1092  0211                     	;# 
  1093  0212                     	;# 
  1094  0212                     	;# 
  1095  0213                     	;# 
  1096  0213                     	;# 
  1097  0214                     	;# 
  1098  0214                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0216                     	;# 
  1103  0216                     	;# 
  1104  0217                     	;# 
  1105  0217                     	;# 
  1106  0291                     	;# 
  1107  0291                     	;# 
  1108  0292                     	;# 
  1109  0293                     	;# 
  1110  0294                     	;# 
  1111  0295                     	;# 
  1112  0295                     	;# 
  1113  0296                     	;# 
  1114  0298                     	;# 
  1115  0298                     	;# 
  1116  0299                     	;# 
  1117  029A                     	;# 
  1118  029B                     	;# 
  1119  029C                     	;# 
  1120  029D                     	;# 
  1121  029E                     	;# 
  1122  0311                     	;# 
  1123  0311                     	;# 
  1124  0312                     	;# 
  1125  0313                     	;# 
  1126  0318                     	;# 
  1127  0318                     	;# 
  1128  0319                     	;# 
  1129  031A                     	;# 
  1130  038C                     	;# 
  1131  038E                     	;# 
  1132  0391                     	;# 
  1133  0392                     	;# 
  1134  0393                     	;# 
  1135  039A                     	;# 
  1136  039C                     	;# 
  1137  039D                     	;# 
  1138  039E                     	;# 
  1139  039F                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  041C                     	;# 
  1144  041D                     	;# 
  1145  041E                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157                           
  1158                           	psect	stringtext1
  1159  13CA                     __pstringtext1:	
  1160  13CA                     _dpowers:	
  1161  13CA  3401               	retlw	1
  1162  13CB  3400               	retlw	0
  1163  13CC  340A               	retlw	10
  1164  13CD  3400               	retlw	0
  1165  13CE  3464               	retlw	100
  1166  13CF  3400               	retlw	0
  1167  13D0  34E8               	retlw	232
  1168  13D1  3403               	retlw	3
  1169  13D2  3410               	retlw	16
  1170  13D3  3427               	retlw	39
  1171  13D4                     __end_of_dpowers:	
  1172                           
  1173                           	psect	stringtext2
  1174  13D4                     __pstringtext2:	
  1175  13D4                     _hexpowers:	
  1176  13D4  3401               	retlw	1
  1177  13D5  3400               	retlw	0
  1178  13D6  3410               	retlw	16
  1179  13D7  3400               	retlw	0
  1180  13D8  3400               	retlw	0
  1181  13D9  3401               	retlw	1
  1182  13DA  3400               	retlw	0
  1183  13DB  3410               	retlw	16
  1184  13DC                     __end_of_hexpowers:	
  1185                           
  1186                           	psect	stringtext3
  1187  13EA                     __pstringtext3:	
  1188  13EA                     _rxfnsidh:	
  1189  13EA  3400               	retlw	0
  1190  13EB  3404               	retlw	4
  1191  13EC  3408               	retlw	8
  1192  13ED  3410               	retlw	16
  1193  13EE  3414               	retlw	20
  1194  13EF  3418               	retlw	24
  1195  13F0                     __end_of_rxfnsidh:	
  1196                           
  1197                           	psect	stringtext4
  1198  13FC                     __pstringtext4:	
  1199  13FC                     _txbnsidh:	
  1200  13FC  3431               	retlw	49
  1201  13FD  3441               	retlw	65
  1202  13FE  3451               	retlw	81
  1203  13FF                     __end_of_txbnsidh:	
  1204                           
  1205                           	psect	stringtext5
  1206  13FF                     __pstringtext5:	
  1207  13FF                     _abc:	
  1208  13FF  3400               	retlw	0
  1209  1400  3402               	retlw	2
  1210  1401  3404               	retlw	4
  1211  1402                     __end_of_abc:	
  1212                           
  1213                           	psect	stringtext6
  1214  1405                     __pstringtext6:	
  1215  1405                     _nm:	
  1216  1405  3400               	retlw	0
  1217  1406  3402               	retlw	2
  1218  1407                     __end_of_nm:	
  1219                           
  1220                           	psect	stringtext7
  1221  1407                     __pstringtext7:	
  1222  1407                     _rxmnsidh:	
  1223  1407  3420               	retlw	32
  1224  1408  3424               	retlw	36
  1225  1409                     __end_of_rxmnsidh:	
  1226                           
  1227                           	psect	stringtext8
  1228  1409                     __pstringtext8:	
  1229  1409                     _max_idx:	
  1230  1409  3407               	retlw	7
  1231  140A                     __end_of_max_idx:	
  1232                           
  1233                           	psect	nvBANK0
  1234  0069                     __pnvBANK0:	
  1235  0069                     _handler:	
  1236  0069                     	ds	2
  1237  0011                     _PIR1bits	set	17
  1238  0095                     _OPTION_REGbits	set	149
  1239  008E                     _TRISC	set	142
  1240  008C                     _TRISA	set	140
  1241  0097                     _WDTCON	set	151
  1242  0098                     _OSCTUNE	set	152
  1243  0099                     _OSCCON	set	153
  1244  010C                     _LATAbits	set	268
  1245  010E                     _LATCbits	set	270
  1246  011D                     _APFCON0	set	285
  1247  011E                     _APFCON1	set	286
  1248  010E                     _LATC	set	270
  1249  010C                     _LATA	set	268
  1250  0116                     _BORCON	set	278
  1251  018C                     _ANSELA	set	396
  1252  018E                     _ANSELC	set	398
  1253  019A                     _TXREG	set	410
  1254  0199                     _RCREG	set	409
  1255  019D                     _RCSTAbits	set	413
  1256  019C                     _SPBRGH	set	412
  1257  019B                     _SPBRGL	set	411
  1258  019E                     _TXSTA	set	414
  1259  019D                     _RCSTA	set	413
  1260  019F                     _BAUDCON	set	415
  1261  0214                     _SSP1STATbits	set	532
  1262  0211                     _SSP1BUF	set	529
  1263  0215                     _SSP1CON1bits	set	533
  1264  0212                     _SSP1ADD	set	530
  1265  0215                     _SSP1CON1	set	533
  1266  0214                     _SSP1STAT	set	532
  1267  020E                     _WPUC	set	526
  1268  020C                     _WPUA	set	524
  1269                           
  1270                           	psect	stringtext9
  1271  1000                     __pstringtext9:	
  1272  1000                     STR_9:	
  1273  1000  345B               	retlw	91	;'['
  1274  1001  3453               	retlw	83	;'S'
  1275  1002  3465               	retlw	101	;'e'
  1276  1003  3474               	retlw	116	;'t'
  1277  1004  3420               	retlw	32	;' '
  1278  1005  346F               	retlw	111	;'o'
  1279  1006  3475               	retlw	117	;'u'
  1280  1007  3474               	retlw	116	;'t'
  1281  1008  3470               	retlw	112	;'p'
  1282  1009  3475               	retlw	117	;'u'
  1283  100A  3474               	retlw	116	;'t'
  1284  100B  3420               	retlw	32	;' '
  1285  100C  346D               	retlw	109	;'m'
  1286  100D  346F               	retlw	111	;'o'
  1287  100E  3464               	retlw	100	;'d'
  1288  100F  3465               	retlw	101	;'e'
  1289  1010  345D               	retlw	93	;']'
  1290  1011  3420               	retlw	32	;' '
  1291  1012  347B               	retlw	123	;'{'
  1292  1013  3464               	retlw	100	;'d'
  1293  1014  3465               	retlw	101	;'e'
  1294  1015  3462               	retlw	98	;'b'
  1295  1016  3475               	retlw	117	;'u'
  1296  1017  3467               	retlw	103	;'g'
  1297  1018  343A               	retlw	58	;':'
  1298  1019  3420               	retlw	32	;' '
  1299  101A  3440               	retlw	64	;'@'
  1300  101B  3476               	retlw	118	;'v'
  1301  101C  3464               	retlw	100	;'d'
  1302  101D  342C               	retlw	44	;','
  1303  101E  3420               	retlw	32	;' '
  1304  101F  3476               	retlw	118	;'v'
  1305  1020  3465               	retlw	101	;'e'
  1306  1021  3472               	retlw	114	;'r'
  1307  1022  3462               	retlw	98	;'b'
  1308  1023  346F               	retlw	111	;'o'
  1309  1024  3473               	retlw	115	;'s'
  1310  1025  3465               	retlw	101	;'e'
  1311  1026  343A               	retlw	58	;':'
  1312  1027  3420               	retlw	32	;' '
  1313  1028  3440               	retlw	64	;'@'
  1314  1029  3476               	retlw	118	;'v'
  1315  102A  3476               	retlw	118	;'v'
  1316  102B  342C               	retlw	44	;','
  1317  102C  3420               	retlw	32	;' '
  1318  102D  346E               	retlw	110	;'n'
  1319  102E  346F               	retlw	111	;'o'
  1320  102F  3472               	retlw	114	;'r'
  1321  1030  346D               	retlw	109	;'m'
  1322  1031  3461               	retlw	97	;'a'
  1323  1032  346C               	retlw	108	;'l'
  1324  1033  343A               	retlw	58	;':'
  1325  1034  3420               	retlw	32	;' '
  1326  1035  3440               	retlw	64	;'@'
  1327  1036  3476               	retlw	118	;'v'
  1328  1037  346E               	retlw	110	;'n'
  1329  1038  347D               	retlw	125	;'}'
  1330  1039  340A               	retlw	10
  1331  103A  3400               	retlw	0
  1332                           
  1333                           	psect	stringtext10
  1334  103B                     __pstringtext10:	
  1335  103B                     STR_11:	
  1336  103B  3420               	retlw	32	;' '
  1337  103C  3420               	retlw	32	;' '
  1338  103D  3420               	retlw	32	;' '
  1339  103E  3420               	retlw	32	;' '
  1340  103F  3420               	retlw	32	;' '
  1341  1040  3477               	retlw	119	;'w'
  1342  1041  3469               	retlw	105	;'i'
  1343  1042  3474               	retlw	116	;'t'
  1344  1043  3468               	retlw	104	;'h'
  1345  1044  3420               	retlw	32	;' '
  1346  1045  3453               	retlw	83	;'S'
  1347  1046  3449               	retlw	73	;'I'
  1348  1047  3444               	retlw	68	;'D'
  1349  1048  343A               	retlw	58	;':'
  1350  1049  3420               	retlw	32	;' '
  1351  104A  3440               	retlw	64	;'@'
  1352  104B  346F               	retlw	111	;'o'
  1353  104C  346C               	retlw	108	;'l'
  1354  104D  3473               	retlw	115	;'s'
  1355  104E  3420               	retlw	32	;' '
  1356  104F  346F               	retlw	111	;'o'
  1357  1050  3472               	retlw	114	;'r'
  1358  1051  3420               	retlw	32	;' '
  1359  1052  3440               	retlw	64	;'@'
  1360  1053  346F               	retlw	111	;'o'
  1361  1054  346E               	retlw	110	;'n'
  1362  1055  3473               	retlw	115	;'s'
  1363  1056  342C               	retlw	44	;','
  1364  1057  3420               	retlw	32	;' '
  1365  1058  3469               	retlw	105	;'i'
  1366  1059  346E               	retlw	110	;'n'
  1367  105A  3420               	retlw	32	;' '
  1368  105B  3468               	retlw	104	;'h'
  1369  105C  3465               	retlw	101	;'e'
  1370  105D  3478               	retlw	120	;'x'
  1371  105E  3420               	retlw	32	;' '
  1372  105F  3466               	retlw	102	;'f'
  1373  1060  346F               	retlw	111	;'o'
  1374  1061  3472               	retlw	114	;'r'
  1375  1062  346D               	retlw	109	;'m'
  1376  1063  3461               	retlw	97	;'a'
  1377  1064  3474               	retlw	116	;'t'
  1378  1065  343A               	retlw	58	;':'
  1379  1066  3420               	retlw	32	;' '
  1380  1067  3440               	retlw	64	;'@'
  1381  1068  346F               	retlw	111	;'o'
  1382  1069  346C               	retlw	108	;'l'
  1383  106A  3468               	retlw	104	;'h'
  1384  106B  3420               	retlw	32	;' '
  1385  106C  346F               	retlw	111	;'o'
  1386  106D  3472               	retlw	114	;'r'
  1387  106E  3420               	retlw	32	;' '
  1388  106F  3440               	retlw	64	;'@'
  1389  1070  346F               	retlw	111	;'o'
  1390  1071  346E               	retlw	110	;'n'
  1391  1072  3468               	retlw	104	;'h'
  1392  1073  340A               	retlw	10
  1393  1074  3400               	retlw	0
  1394                           
  1395                           	psect	stringtext11
  1396  1075                     __pstringtext11:	
  1397  1075                     STR_18:	
  1398  1075  345B               	retlw	91	;'['
  1399  1076  3453               	retlw	83	;'S'
  1400  1077  3465               	retlw	101	;'e'
  1401  1078  346E               	retlw	110	;'n'
  1402  1079  3464               	retlw	100	;'d'
  1403  107A  3420               	retlw	32	;' '
  1404  107B  346D               	retlw	109	;'m'
  1405  107C  3465               	retlw	101	;'e'
  1406  107D  3473               	retlw	115	;'s'
  1407  107E  3473               	retlw	115	;'s'
  1408  107F  3461               	retlw	97	;'a'
  1409  1080  3467               	retlw	103	;'g'
  1410  1081  3465               	retlw	101	;'e'
  1411  1082  3420               	retlw	32	;' '
  1412  1083  3462               	retlw	98	;'b'
  1413  1084  3465               	retlw	101	;'e'
  1414  1085  3467               	retlw	103	;'g'
  1415  1086  3469               	retlw	105	;'i'
  1416  1087  346E               	retlw	110	;'n'
  1417  1088  346E               	retlw	110	;'n'
  1418  1089  3469               	retlw	105	;'i'
  1419  108A  346E               	retlw	110	;'n'
  1420  108B  3467               	retlw	103	;'g'
  1421  108C  3420               	retlw	32	;' '
  1422  108D  3477               	retlw	119	;'w'
  1423  108E  3469               	retlw	105	;'i'
  1424  108F  3474               	retlw	116	;'t'
  1425  1090  3468               	retlw	104	;'h'
  1426  1091  3420               	retlw	32	;' '
  1427  1092  3427               	retlw	39	;'''
  1428  1093  3440               	retlw	64	;'@'
  1429  1094  3427               	retlw	39	;'''
  1430  1095  3420               	retlw	32	;' '
  1431  1096  3463               	retlw	99	;'c'
  1432  1097  3468               	retlw	104	;'h'
  1433  1098  3461               	retlw	97	;'a'
  1434  1099  3472               	retlw	114	;'r'
  1435  109A  3461               	retlw	97	;'a'
  1436  109B  3463               	retlw	99	;'c'
  1437  109C  3474               	retlw	116	;'t'
  1438  109D  3465               	retlw	101	;'e'
  1439  109E  3472               	retlw	114	;'r'
  1440  109F  345D               	retlw	93	;']'
  1441  10A0  3420               	retlw	32	;' '
  1442  10A1  3440               	retlw	64	;'@'
  1443  10A2  343C               	retlw	60	;'<'
  1444  10A3  3440               	retlw	64	;'@'
  1445  10A4  346D               	retlw	109	;'m'
  1446  10A5  3465               	retlw	101	;'e'
  1447  10A6  3473               	retlw	115	;'s'
  1448  10A7  3473               	retlw	115	;'s'
  1449  10A8  3461               	retlw	97	;'a'
  1450  10A9  3467               	retlw	103	;'g'
  1451  10AA  3465               	retlw	101	;'e'
  1452  10AB  343E               	retlw	62	;'>'
  1453  10AC  340A               	retlw	10
  1454  10AD  3400               	retlw	0
  1455                           
  1456                           	psect	stringtext12
  1457  10AE                     __pstringtext12:	
  1458  10AE                     STR_10:	
  1459  10AE  345B               	retlw	91	;'['
  1460  10AF  3445               	retlw	69	;'E'
  1461  10B0  346E               	retlw	110	;'n'
  1462  10B1  3461               	retlw	97	;'a'
  1463  10B2  3462               	retlw	98	;'b'
  1464  10B3  346C               	retlw	108	;'l'
  1465  10B4  3465               	retlw	101	;'e'
  1466  10B5  3420               	retlw	32	;' '
  1467  10B6  346F               	retlw	111	;'o'
  1468  10B7  3470               	retlw	112	;'p'
  1469  10B8  3465               	retlw	101	;'e'
  1470  10B9  3472               	retlw	114	;'r'
  1471  10BA  3461               	retlw	97	;'a'
  1472  10BB  3474               	retlw	116	;'t'
  1473  10BC  3469               	retlw	105	;'i'
  1474  10BD  346F               	retlw	111	;'o'
  1475  10BE  346E               	retlw	110	;'n'
  1476  10BF  3420               	retlw	32	;' '
  1477  10C0  346D               	retlw	109	;'m'
  1478  10C1  346F               	retlw	111	;'o'
  1479  10C2  3464               	retlw	100	;'d'
  1480  10C3  3465               	retlw	101	;'e'
  1481  10C4  345D               	retlw	93	;']'
  1482  10C5  3420               	retlw	32	;' '
  1483  10C6  347B               	retlw	123	;'{'
  1484  10C7  346C               	retlw	108	;'l'
  1485  10C8  346F               	retlw	111	;'o'
  1486  10C9  346F               	retlw	111	;'o'
  1487  10CA  3470               	retlw	112	;'p'
  1488  10CB  3462               	retlw	98	;'b'
  1489  10CC  3461               	retlw	97	;'a'
  1490  10CD  3463               	retlw	99	;'c'
  1491  10CE  346B               	retlw	107	;'k'
  1492  10CF  343A               	retlw	58	;':'
  1493  10D0  3420               	retlw	32	;' '
  1494  10D1  3440               	retlw	64	;'@'
  1495  10D2  346F               	retlw	111	;'o'
  1496  10D3  346C               	retlw	108	;'l'
  1497  10D4  342C               	retlw	44	;','
  1498  10D5  3420               	retlw	32	;' '
  1499  10D6  346E               	retlw	110	;'n'
  1500  10D7  346F               	retlw	111	;'o'
  1501  10D8  3472               	retlw	114	;'r'
  1502  10D9  346D               	retlw	109	;'m'
  1503  10DA  3461               	retlw	97	;'a'
  1504  10DB  346C               	retlw	108	;'l'
  1505  10DC  343A               	retlw	58	;':'
  1506  10DD  3420               	retlw	32	;' '
  1507  10DE  3440               	retlw	64	;'@'
  1508  10DF  346F               	retlw	111	;'o'
  1509  10E0  346E               	retlw	110	;'n'
  1510  10E1  347D               	retlw	125	;'}'
  1511  10E2  340A               	retlw	10
  1512  10E3  3400               	retlw	0
  1513                           
  1514                           	psect	stringtext13
  1515  10E4                     __pstringtext13:	
  1516  10E4                     STR_8:	
  1517  10E4  345B               	retlw	91	;'['
  1518  10E5  3453               	retlw	83	;'S'
  1519  10E6  3465               	retlw	101	;'e'
  1520  10E7  3474               	retlw	116	;'t'
  1521  10E8  3420               	retlw	32	;' '
  1522  10E9  3473               	retlw	115	;'s'
  1523  10EA  3474               	retlw	116	;'t'
  1524  10EB  3461               	retlw	97	;'a'
  1525  10EC  346E               	retlw	110	;'n'
  1526  10ED  3464               	retlw	100	;'d'
  1527  10EE  3461               	retlw	97	;'a'
  1528  10EF  3472               	retlw	114	;'r'
  1529  10F0  3464               	retlw	100	;'d'
  1530  10F1  3420               	retlw	32	;' '
  1531  10F2  3469               	retlw	105	;'i'
  1532  10F3  3464               	retlw	100	;'d'
  1533  10F4  3465               	retlw	101	;'e'
  1534  10F5  346E               	retlw	110	;'n'
  1535  10F6  3474               	retlw	116	;'t'
  1536  10F7  3469               	retlw	105	;'i'
  1537  10F8  3466               	retlw	102	;'f'
  1538  10F9  3469               	retlw	105	;'i'
  1539  10FA  3465               	retlw	101	;'e'
  1540  10FB  3472               	retlw	114	;'r'
  1541  10FC  345D               	retlw	93	;']'
  1542  10FD  3420               	retlw	32	;' '
  1543  10FE  3440               	retlw	64	;'@'
  1544  10FF  3469               	retlw	105	;'i'
  1545  1100  343C               	retlw	60	;'<'
  1546  1101  3473               	retlw	115	;'s'
  1547  1102  3474               	retlw	116	;'t'
  1548  1103  3461               	retlw	97	;'a'
  1549  1104  346E               	retlw	110	;'n'
  1550  1105  3464               	retlw	100	;'d'
  1551  1106  3461               	retlw	97	;'a'
  1552  1107  3472               	retlw	114	;'r'
  1553  1108  3464               	retlw	100	;'d'
  1554  1109  3420               	retlw	32	;' '
  1555  110A  3469               	retlw	105	;'i'
  1556  110B  3464               	retlw	100	;'d'
  1557  110C  3465               	retlw	101	;'e'
  1558  110D  346E               	retlw	110	;'n'
  1559  110E  3474               	retlw	116	;'t'
  1560  110F  3469               	retlw	105	;'i'
  1561  1110  3466               	retlw	102	;'f'
  1562  1111  3469               	retlw	105	;'i'
  1563  1112  3465               	retlw	101	;'e'
  1564  1113  3472               	retlw	114	;'r'
  1565  1114  343E               	retlw	62	;'>'
  1566  1115  340A               	retlw	10
  1567  1116  3400               	retlw	0
  1568                           
  1569                           	psect	stringtext14
  1570  1117                     __pstringtext14:	
  1571  1117                     STR_19:	
  1572  1117  345B               	retlw	91	;'['
  1573  1118  3452               	retlw	82	;'R'
  1574  1119  3465               	retlw	101	;'e'
  1575  111A  3463               	retlw	99	;'c'
  1576  111B  3465               	retlw	101	;'e'
  1577  111C  3469               	retlw	105	;'i'
  1578  111D  3476               	retlw	118	;'v'
  1579  111E  3465               	retlw	101	;'e'
  1580  111F  3420               	retlw	32	;' '
  1581  1120  346D               	retlw	109	;'m'
  1582  1121  3465               	retlw	101	;'e'
  1583  1122  3473               	retlw	115	;'s'
  1584  1123  3473               	retlw	115	;'s'
  1585  1124  3461               	retlw	97	;'a'
  1586  1125  3467               	retlw	103	;'g'
  1587  1126  3465               	retlw	101	;'e'
  1588  1127  345D               	retlw	93	;']'
  1589  1128  3420               	retlw	32	;' '
  1590  1129  343C               	retlw	60	;'<'
  1591  112A  346D               	retlw	109	;'m'
  1592  112B  3465               	retlw	101	;'e'
  1593  112C  3473               	retlw	115	;'s'
  1594  112D  3473               	retlw	115	;'s'
  1595  112E  3461               	retlw	97	;'a'
  1596  112F  3467               	retlw	103	;'g'
  1597  1130  3465               	retlw	101	;'e'
  1598  1131  343E               	retlw	62	;'>'
  1599  1132  3420               	retlw	32	;' '
  1600  1133  3477               	retlw	119	;'w'
  1601  1134  3469               	retlw	105	;'i'
  1602  1135  346C               	retlw	108	;'l'
  1603  1136  346C               	retlw	108	;'l'
  1604  1137  3420               	retlw	32	;' '
  1605  1138  3462               	retlw	98	;'b'
  1606  1139  3465               	retlw	101	;'e'
  1607  113A  3420               	retlw	32	;' '
  1608  113B  346F               	retlw	111	;'o'
  1609  113C  3475               	retlw	117	;'u'
  1610  113D  3474               	retlw	116	;'t'
  1611  113E  3470               	retlw	112	;'p'
  1612  113F  3475               	retlw	117	;'u'
  1613  1140  3474               	retlw	116	;'t'
  1614  1141  340A               	retlw	10
  1615  1142  3400               	retlw	0
  1616                           
  1617                           	psect	stringtext15
  1618  1143                     __pstringtext15:	
  1619  1143                     STR_13:	
  1620  1143  345B               	retlw	91	;'['
  1621  1144  3453               	retlw	83	;'S'
  1622  1145  3465               	retlw	101	;'e'
  1623  1146  3474               	retlw	116	;'t'
  1624  1147  3420               	retlw	32	;' '
  1625  1148  3466               	retlw	102	;'f'
  1626  1149  3469               	retlw	105	;'i'
  1627  114A  346C               	retlw	108	;'l'
  1628  114B  3474               	retlw	116	;'t'
  1629  114C  3465               	retlw	101	;'e'
  1630  114D  3472               	retlw	114	;'r'
  1631  114E  345D               	retlw	93	;']'
  1632  114F  3420               	retlw	32	;' '
  1633  1150  3440               	retlw	64	;'@'
  1634  1151  3466               	retlw	102	;'f'
  1635  1152  343C               	retlw	60	;'<'
  1636  1153  346E               	retlw	110	;'n'
  1637  1154  343E               	retlw	62	;'>'
  1638  1155  343C               	retlw	60	;'<'
  1639  1156  3466               	retlw	102	;'f'
  1640  1157  3469               	retlw	105	;'i'
  1641  1158  346C               	retlw	108	;'l'
  1642  1159  3474               	retlw	116	;'t'
  1643  115A  3465               	retlw	101	;'e'
  1644  115B  3472               	retlw	114	;'r'
  1645  115C  3428               	retlw	40	;'('
  1646  115D  3453               	retlw	83	;'S'
  1647  115E  3449               	retlw	73	;'I'
  1648  115F  3444               	retlw	68	;'D'
  1649  1160  3431               	retlw	49	;'1'
  1650  1161  3430               	retlw	48	;'0'
  1651  1162  3420               	retlw	32	;' '
  1652  1163  347E               	retlw	126	;'~'
  1653  1164  3420               	retlw	32	;' '
  1654  1165  3453               	retlw	83	;'S'
  1655  1166  3449               	retlw	73	;'I'
  1656  1167  3444               	retlw	68	;'D'
  1657  1168  3430               	retlw	48	;'0'
  1658  1169  3429               	retlw	41	;')'
  1659  116A  343E               	retlw	62	;'>'
  1660  116B  340A               	retlw	10
  1661  116C  3400               	retlw	0
  1662                           
  1663                           	psect	stringtext16
  1664  116D                     __pstringtext16:	
  1665  116D                     STR_12:	
  1666  116D  345B               	retlw	91	;'['
  1667  116E  3453               	retlw	83	;'S'
  1668  116F  3465               	retlw	101	;'e'
  1669  1170  3474               	retlw	116	;'t'
  1670  1171  3420               	retlw	32	;' '
  1671  1172  346D               	retlw	109	;'m'
  1672  1173  3461               	retlw	97	;'a'
  1673  1174  3473               	retlw	115	;'s'
  1674  1175  346B               	retlw	107	;'k'
  1675  1176  345D               	retlw	93	;']'
  1676  1177  3420               	retlw	32	;' '
  1677  1178  3440               	retlw	64	;'@'
  1678  1179  346D               	retlw	109	;'m'
  1679  117A  343C               	retlw	60	;'<'
  1680  117B  346E               	retlw	110	;'n'
  1681  117C  343E               	retlw	62	;'>'
  1682  117D  343C               	retlw	60	;'<'
  1683  117E  346D               	retlw	109	;'m'
  1684  117F  3461               	retlw	97	;'a'
  1685  1180  3473               	retlw	115	;'s'
  1686  1181  346B               	retlw	107	;'k'
  1687  1182  3428               	retlw	40	;'('
  1688  1183  3453               	retlw	83	;'S'
  1689  1184  3449               	retlw	73	;'I'
  1690  1185  3444               	retlw	68	;'D'
  1691  1186  3431               	retlw	49	;'1'
  1692  1187  3430               	retlw	48	;'0'
  1693  1188  3420               	retlw	32	;' '
  1694  1189  347E               	retlw	126	;'~'
  1695  118A  3420               	retlw	32	;' '
  1696  118B  3453               	retlw	83	;'S'
  1697  118C  3449               	retlw	73	;'I'
  1698  118D  3444               	retlw	68	;'D'
  1699  118E  3430               	retlw	48	;'0'
  1700  118F  3429               	retlw	41	;')'
  1701  1190  343E               	retlw	62	;'>'
  1702  1191  340A               	retlw	10
  1703  1192  3400               	retlw	0
  1704                           
  1705                           	psect	stringtext17
  1706  1193                     __pstringtext17:	
  1707  1193                     STR_15:	
  1708  1193  345B               	retlw	91	;'['
  1709  1194  3441               	retlw	65	;'A'
  1710  1195  3462               	retlw	98	;'b'
  1711  1196  346F               	retlw	111	;'o'
  1712  1197  3472               	retlw	114	;'r'
  1713  1198  3474               	retlw	116	;'t'
  1714  1199  3420               	retlw	32	;' '
  1715  119A  3461               	retlw	97	;'a'
  1716  119B  346C               	retlw	108	;'l'
  1717  119C  346C               	retlw	108	;'l'
  1718  119D  3420               	retlw	32	;' '
  1719  119E  3470               	retlw	112	;'p'
  1720  119F  3465               	retlw	101	;'e'
  1721  11A0  346E               	retlw	110	;'n'
  1722  11A1  3464               	retlw	100	;'d'
  1723  11A2  3469               	retlw	105	;'i'
  1724  11A3  346E               	retlw	110	;'n'
  1725  11A4  3467               	retlw	103	;'g'
  1726  11A5  3420               	retlw	32	;' '
  1727  11A6  3474               	retlw	116	;'t'
  1728  11A7  3472               	retlw	114	;'r'
  1729  11A8  3461               	retlw	97	;'a'
  1730  11A9  346E               	retlw	110	;'n'
  1731  11AA  3473               	retlw	115	;'s'
  1732  11AB  346D               	retlw	109	;'m'
  1733  11AC  3469               	retlw	105	;'i'
  1734  11AD  3473               	retlw	115	;'s'
  1735  11AE  3473               	retlw	115	;'s'
  1736  11AF  3469               	retlw	105	;'i'
  1737  11B0  346F               	retlw	111	;'o'
  1738  11B1  346E               	retlw	110	;'n'
  1739  11B2  3473               	retlw	115	;'s'
  1740  11B3  345D               	retlw	93	;']'
  1741  11B4  3420               	retlw	32	;' '
  1742  11B5  3440               	retlw	64	;'@'
  1743  11B6  3461               	retlw	97	;'a'
  1744  11B7  340A               	retlw	10
  1745  11B8  3400               	retlw	0
  1746                           
  1747                           	psect	stringtext18
  1748  11B9                     __pstringtext18:	
  1749  11B9                     STR_17:	
  1750  11B9  345B               	retlw	91	;'['
  1751  11BA  3453               	retlw	83	;'S'
  1752  11BB  3465               	retlw	101	;'e'
  1753  11BC  346E               	retlw	110	;'n'
  1754  11BD  3464               	retlw	100	;'d'
  1755  11BE  3420               	retlw	32	;' '
  1756  11BF  346D               	retlw	109	;'m'
  1757  11C0  3465               	retlw	101	;'e'
  1758  11C1  3473               	retlw	115	;'s'
  1759  11C2  3473               	retlw	115	;'s'
  1760  11C3  3461               	retlw	97	;'a'
  1761  11C4  3467               	retlw	103	;'g'
  1762  11C5  3465               	retlw	101	;'e'
  1763  11C6  345D               	retlw	93	;']'
  1764  11C7  3420               	retlw	32	;' '
  1765  11C8  343C               	retlw	60	;'<'
  1766  11C9  346D               	retlw	109	;'m'
  1767  11CA  3465               	retlw	101	;'e'
  1768  11CB  3473               	retlw	115	;'s'
  1769  11CC  3473               	retlw	115	;'s'
  1770  11CD  3461               	retlw	97	;'a'
  1771  11CE  3467               	retlw	103	;'g'
  1772  11CF  3465               	retlw	101	;'e'
  1773  11D0  343E               	retlw	62	;'>'
  1774  11D1  340A               	retlw	10
  1775  11D2  3400               	retlw	0
  1776                           
  1777                           	psect	stringtext19
  1778  11D3                     __pstringtext19:	
  1779  11D3                     STR_14:	
  1780  11D3  345B               	retlw	91	;'['
  1781  11D4  3453               	retlw	83	;'S'
  1782  11D5  3465               	retlw	101	;'e'
  1783  11D6  3474               	retlw	116	;'t'
  1784  11D7  3420               	retlw	32	;' '
  1785  11D8  3462               	retlw	98	;'b'
  1786  11D9  3461               	retlw	97	;'a'
  1787  11DA  3475               	retlw	117	;'u'
  1788  11DB  3464               	retlw	100	;'d'
  1789  11DC  3420               	retlw	32	;' '
  1790  11DD  3472               	retlw	114	;'r'
  1791  11DE  3461               	retlw	97	;'a'
  1792  11DF  3474               	retlw	116	;'t'
  1793  11E0  3465               	retlw	101	;'e'
  1794  11E1  345D               	retlw	93	;']'
  1795  11E2  3420               	retlw	32	;' '
  1796  11E3  3440               	retlw	64	;'@'
  1797  11E4  3462               	retlw	98	;'b'
  1798  11E5  343C               	retlw	60	;'<'
  1799  11E6  3462               	retlw	98	;'b'
  1800  11E7  3470               	retlw	112	;'p'
  1801  11E8  3472               	retlw	114	;'r'
  1802  11E9  343E               	retlw	62	;'>'
  1803  11EA  340A               	retlw	10
  1804  11EB  3400               	retlw	0
  1805                           
  1806                           	psect	stringtext20
  1807  11EC                     __pstringtext20:	
  1808  11EC                     STR_23:	
  1809  11EC  3466               	retlw	102	;'f'
  1810  11ED  3469               	retlw	105	;'i'
  1811  11EE  346C               	retlw	108	;'l'
  1812  11EF  3474               	retlw	116	;'t'
  1813  11F0  3465               	retlw	101	;'e'
  1814  11F1  3472               	retlw	114	;'r'
  1815  11F2  3428               	retlw	40	;'('
  1816  11F3  3425               	retlw	37	;'%'
  1817  11F4  3464               	retlw	100	;'d'
  1818  11F5  3429               	retlw	41	;')'
  1819  11F6  343A               	retlw	58	;':'
  1820  11F7  3420               	retlw	32	;' '
  1821  11F8  3425               	retlw	37	;'%'
  1822  11F9  3430               	retlw	48	;'0'
  1823  11FA  3432               	retlw	50	;'2'
  1824  11FB  3478               	retlw	120	;'x'
  1825  11FC  3420               	retlw	32	;' '
  1826  11FD  3425               	retlw	37	;'%'
  1827  11FE  3430               	retlw	48	;'0'
  1828  11FF  3432               	retlw	50	;'2'
  1829  1200  3478               	retlw	120	;'x'
  1830  1201  340A               	retlw	10
  1831  1202  3400               	retlw	0
  1832                           
  1833                           	psect	stringtext21
  1834  1203                     __pstringtext21:	
  1835  1203                     STR_7:	
  1836  1203  342D               	retlw	45	;'-'
  1837  1204  342D               	retlw	45	;'-'
  1838  1205  342D               	retlw	45	;'-'
  1839  1206  3420               	retlw	32	;' '
  1840  1207  3455               	retlw	85	;'U'
  1841  1208  3441               	retlw	65	;'A'
  1842  1209  3452               	retlw	82	;'R'
  1843  120A  3454               	retlw	84	;'T'
  1844  120B  3432               	retlw	50	;'2'
  1845  120C  3443               	retlw	67	;'C'
  1846  120D  3441               	retlw	65	;'A'
  1847  120E  344E               	retlw	78	;'N'
  1848  120F  3420               	retlw	32	;' '
  1849  1210  3448               	retlw	72	;'H'
  1850  1211  3445               	retlw	69	;'E'
  1851  1212  344C               	retlw	76	;'L'
  1852  1213  3450               	retlw	80	;'P'
  1853  1214  3420               	retlw	32	;' '
  1854  1215  342D               	retlw	45	;'-'
  1855  1216  342D               	retlw	45	;'-'
  1856  1217  342D               	retlw	45	;'-'
  1857  1218  340A               	retlw	10
  1858  1219  3400               	retlw	0
  1859                           
  1860                           	psect	stringtext22
  1861  121A                     __pstringtext22:	
  1862  121A                     STR_20:	
  1863  121A  345B               	retlw	91	;'['
  1864  121B  3453               	retlw	83	;'S'
  1865  121C  3468               	retlw	104	;'h'
  1866  121D  346F               	retlw	111	;'o'
  1867  121E  3477               	retlw	119	;'w'
  1868  121F  3420               	retlw	32	;' '
  1869  1220  3474               	retlw	116	;'t'
  1870  1221  3468               	retlw	104	;'h'
  1871  1222  3469               	retlw	105	;'i'
  1872  1223  3473               	retlw	115	;'s'
  1873  1224  3420               	retlw	32	;' '
  1874  1225  3468               	retlw	104	;'h'
  1875  1226  3465               	retlw	101	;'e'
  1876  1227  346C               	retlw	108	;'l'
  1877  1228  3470               	retlw	112	;'p'
  1878  1229  345D               	retlw	93	;']'
  1879  122A  343A               	retlw	58	;':'
  1880  122B  3420               	retlw	32	;' '
  1881  122C  3440               	retlw	64	;'@'
  1882  122D  3468               	retlw	104	;'h'
  1883  122E  340A               	retlw	10
  1884  122F  3400               	retlw	0
  1885                           
  1886                           	psect	stringtext23
  1887  1230                     __pstringtext23:	
  1888  1230                     STR_22:	
  1889  1230  346D               	retlw	109	;'m'
  1890  1231  3461               	retlw	97	;'a'
  1891  1232  3473               	retlw	115	;'s'
  1892  1233  346B               	retlw	107	;'k'
  1893  1234  3428               	retlw	40	;'('
  1894  1235  3425               	retlw	37	;'%'
  1895  1236  3464               	retlw	100	;'d'
  1896  1237  3429               	retlw	41	;')'
  1897  1238  343A               	retlw	58	;':'
  1898  1239  3420               	retlw	32	;' '
  1899  123A  3425               	retlw	37	;'%'
  1900  123B  3430               	retlw	48	;'0'
  1901  123C  3432               	retlw	50	;'2'
  1902  123D  3478               	retlw	120	;'x'
  1903  123E  3420               	retlw	32	;' '
  1904  123F  3425               	retlw	37	;'%'
  1905  1240  3430               	retlw	48	;'0'
  1906  1241  3432               	retlw	50	;'2'
  1907  1242  3478               	retlw	120	;'x'
  1908  1243  340A               	retlw	10
  1909  1244  3400               	retlw	0
  1910                           
  1911                           	psect	stringtext24
  1912  1245                     __pstringtext24:	
  1913  1245                     STR_16:	
  1914  1245  345B               	retlw	91	;'['
  1915  1246  3444               	retlw	68	;'D'
  1916  1247  3475               	retlw	117	;'u'
  1917  1248  346D               	retlw	109	;'m'
  1918  1249  3470               	retlw	112	;'p'
  1919  124A  3420               	retlw	32	;' '
  1920  124B  3472               	retlw	114	;'r'
  1921  124C  3465               	retlw	101	;'e'
  1922  124D  3467               	retlw	103	;'g'
  1923  124E  3469               	retlw	105	;'i'
  1924  124F  3473               	retlw	115	;'s'
  1925  1250  3474               	retlw	116	;'t'
  1926  1251  3465               	retlw	101	;'e'
  1927  1252  3472               	retlw	114	;'r'
  1928  1253  3473               	retlw	115	;'s'
  1929  1254  345D               	retlw	93	;']'
  1930  1255  3420               	retlw	32	;' '
  1931  1256  3440               	retlw	64	;'@'
  1932  1257  3464               	retlw	100	;'d'
  1933  1258  340A               	retlw	10
  1934  1259  3400               	retlw	0
  1935                           
  1936                           	psect	stringtext25
  1937  125A                     __pstringtext25:	
  1938  125A                     STR_31:	
  1939  125A  3443               	retlw	67	;'C'
  1940  125B  346F               	retlw	111	;'o'
  1941  125C  3470               	retlw	112	;'p'
  1942  125D  3479               	retlw	121	;'y'
  1943  125E  3469               	retlw	105	;'i'
  1944  125F  346E               	retlw	110	;'n'
  1945  1260  3467               	retlw	103	;'g'
  1946  1261  3420               	retlw	32	;' '
  1947  1262  3462               	retlw	98	;'b'
  1948  1263  3475               	retlw	117	;'u'
  1949  1264  3466               	retlw	102	;'f'
  1950  1265  3466               	retlw	102	;'f'
  1951  1266  3465               	retlw	101	;'e'
  1952  1267  3472               	retlw	114	;'r'
  1953  1268  343A               	retlw	58	;':'
  1954  1269  3420               	retlw	32	;' '
  1955  126A  3425               	retlw	37	;'%'
  1956  126B  3463               	retlw	99	;'c'
  1957  126C  340A               	retlw	10
  1958  126D  3400               	retlw	0
  1959                           
  1960                           	psect	stringtext26
  1961  126E                     __pstringtext26:	
  1962  126E                     STR_34:	
  1963  126E  344D               	retlw	77	;'M'
  1964  126F  3465               	retlw	101	;'e'
  1965  1270  3473               	retlw	115	;'s'
  1966  1271  3473               	retlw	115	;'s'
  1967  1272  3461               	retlw	97	;'a'
  1968  1273  3467               	retlw	103	;'g'
  1969  1274  3465               	retlw	101	;'e'
  1970  1275  3420               	retlw	32	;' '
  1971  1276  3473               	retlw	115	;'s'
  1972  1277  3465               	retlw	101	;'e'
  1973  1278  346E               	retlw	110	;'n'
  1974  1279  3474               	retlw	116	;'t'
  1975  127A  343A               	retlw	58	;':'
  1976  127B  3420               	retlw	32	;' '
  1977  127C  3425               	retlw	37	;'%'
  1978  127D  3473               	retlw	115	;'s'
  1979  127E  340A               	retlw	10
  1980  127F  3400               	retlw	0
  1981                           
  1982                           	psect	stringtext27
  1983  1280                     __pstringtext27:	
  1984  1280                     STR_56:	
  1985  1280  3430               	retlw	48	;'0'
  1986  1281  3431               	retlw	49	;'1'
  1987  1282  3432               	retlw	50	;'2'
  1988  1283  3433               	retlw	51	;'3'
  1989  1284  3434               	retlw	52	;'4'
  1990  1285  3435               	retlw	53	;'5'
  1991  1286  3436               	retlw	54	;'6'
  1992  1287  3437               	retlw	55	;'7'
  1993  1288  3438               	retlw	56	;'8'
  1994  1289  3439               	retlw	57	;'9'
  1995  128A  3461               	retlw	97	;'a'
  1996  128B  3462               	retlw	98	;'b'
  1997  128C  3463               	retlw	99	;'c'
  1998  128D  3464               	retlw	100	;'d'
  1999  128E  3465               	retlw	101	;'e'
  2000  128F  3466               	retlw	102	;'f'
  2001  1290  3400               	retlw	0
  2002                           
  2003                           	psect	stringtext28
  2004  1291                     __pstringtext28:	
  2005  1291                     STR_24:	
  2006  1291  3452               	retlw	82	;'R'
  2007  1292  3458               	retlw	88	;'X'
  2008  1293  3442               	retlw	66	;'B'
  2009  1294  3425               	retlw	37	;'%'
  2010  1295  3464               	retlw	100	;'d'
  2011  1296  3453               	retlw	83	;'S'
  2012  1297  3449               	retlw	73	;'I'
  2013  1298  3444               	retlw	68	;'D'
  2014  1299  3448               	retlw	72	;'H'
  2015  129A  343A               	retlw	58	;':'
  2016  129B  3420               	retlw	32	;' '
  2017  129C  3425               	retlw	37	;'%'
  2018  129D  3430               	retlw	48	;'0'
  2019  129E  3432               	retlw	50	;'2'
  2020  129F  3478               	retlw	120	;'x'
  2021  12A0  340A               	retlw	10
  2022  12A1  3400               	retlw	0
  2023                           
  2024                           	psect	stringtext29
  2025  12A2                     __pstringtext29:	
  2026  12A2                     STR_32:	
  2027  12A2  3454               	retlw	84	;'T'
  2028  12A3  3458               	retlw	88	;'X'
  2029  12A4  3442               	retlw	66	;'B'
  2030  12A5  3425               	retlw	37	;'%'
  2031  12A6  3464               	retlw	100	;'d'
  2032  12A7  3453               	retlw	83	;'S'
  2033  12A8  3449               	retlw	73	;'I'
  2034  12A9  3444               	retlw	68	;'D'
  2035  12AA  3448               	retlw	72	;'H'
  2036  12AB  343A               	retlw	58	;':'
  2037  12AC  3420               	retlw	32	;' '
  2038  12AD  3425               	retlw	37	;'%'
  2039  12AE  3430               	retlw	48	;'0'
  2040  12AF  3432               	retlw	50	;'2'
  2041  12B0  3478               	retlw	120	;'x'
  2042  12B1  340A               	retlw	10
  2043  12B2  3400               	retlw	0
  2044                           
  2045                           	psect	stringtext30
  2046  12B3                     __pstringtext30:	
  2047  12B3                     STR_25:	
  2048  12B3  3452               	retlw	82	;'R'
  2049  12B4  3458               	retlw	88	;'X'
  2050  12B5  3442               	retlw	66	;'B'
  2051  12B6  3425               	retlw	37	;'%'
  2052  12B7  3464               	retlw	100	;'d'
  2053  12B8  3453               	retlw	83	;'S'
  2054  12B9  3449               	retlw	73	;'I'
  2055  12BA  3444               	retlw	68	;'D'
  2056  12BB  344C               	retlw	76	;'L'
  2057  12BC  343A               	retlw	58	;':'
  2058  12BD  3420               	retlw	32	;' '
  2059  12BE  3425               	retlw	37	;'%'
  2060  12BF  3430               	retlw	48	;'0'
  2061  12C0  3432               	retlw	50	;'2'
  2062  12C1  3478               	retlw	120	;'x'
  2063  12C2  340A               	retlw	10
  2064  12C3  3400               	retlw	0
  2065                           
  2066                           	psect	stringtext31
  2067  12C4                     __pstringtext31:	
  2068  12C4                     STR_33:	
  2069  12C4  3454               	retlw	84	;'T'
  2070  12C5  3458               	retlw	88	;'X'
  2071  12C6  3442               	retlw	66	;'B'
  2072  12C7  3425               	retlw	37	;'%'
  2073  12C8  3464               	retlw	100	;'d'
  2074  12C9  3453               	retlw	83	;'S'
  2075  12CA  3449               	retlw	73	;'I'
  2076  12CB  3444               	retlw	68	;'D'
  2077  12CC  344C               	retlw	76	;'L'
  2078  12CD  343A               	retlw	58	;':'
  2079  12CE  3420               	retlw	32	;' '
  2080  12CF  3425               	retlw	37	;'%'
  2081  12D0  3430               	retlw	48	;'0'
  2082  12D1  3432               	retlw	50	;'2'
  2083  12D2  3478               	retlw	120	;'x'
  2084  12D3  340A               	retlw	10
  2085  12D4  3400               	retlw	0
  2086                           
  2087                           	psect	stringtext32
  2088  12D5                     __pstringtext32:	
  2089  12D5                     STR_26:	
  2090  12D5  3452               	retlw	82	;'R'
  2091  12D6  3458               	retlw	88	;'X'
  2092  12D7  3442               	retlw	66	;'B'
  2093  12D8  3425               	retlw	37	;'%'
  2094  12D9  3464               	retlw	100	;'d'
  2095  12DA  3444               	retlw	68	;'D'
  2096  12DB  344C               	retlw	76	;'L'
  2097  12DC  3443               	retlw	67	;'C'
  2098  12DD  343A               	retlw	58	;':'
  2099  12DE  3420               	retlw	32	;' '
  2100  12DF  3425               	retlw	37	;'%'
  2101  12E0  3430               	retlw	48	;'0'
  2102  12E1  3432               	retlw	50	;'2'
  2103  12E2  3478               	retlw	120	;'x'
  2104  12E3  340A               	retlw	10
  2105  12E4  3400               	retlw	0
  2106                           
  2107                           	psect	stringtext33
  2108  12E5                     __pstringtext33:	
  2109  12E5                     STR_49:	
  2110  12E5  3452               	retlw	82	;'R'
  2111  12E6  3458               	retlw	88	;'X'
  2112  12E7  3442               	retlw	66	;'B'
  2113  12E8  3430               	retlw	48	;'0'
  2114  12E9  3443               	retlw	67	;'C'
  2115  12EA  3454               	retlw	84	;'T'
  2116  12EB  3452               	retlw	82	;'R'
  2117  12EC  344C               	retlw	76	;'L'
  2118  12ED  343A               	retlw	58	;':'
  2119  12EE  3420               	retlw	32	;' '
  2120  12EF  3425               	retlw	37	;'%'
  2121  12F0  3430               	retlw	48	;'0'
  2122  12F1  3432               	retlw	50	;'2'
  2123  12F2  3478               	retlw	120	;'x'
  2124  12F3  340A               	retlw	10
  2125  12F4  3400               	retlw	0
  2126                           
  2127                           	psect	stringtext34
  2128  12F5                     __pstringtext34:	
  2129  12F5                     STR_45:	
  2130  12F5  3454               	retlw	84	;'T'
  2131  12F6  3458               	retlw	88	;'X'
  2132  12F7  3442               	retlw	66	;'B'
  2133  12F8  3430               	retlw	48	;'0'
  2134  12F9  3443               	retlw	67	;'C'
  2135  12FA  3454               	retlw	84	;'T'
  2136  12FB  3452               	retlw	82	;'R'
  2137  12FC  344C               	retlw	76	;'L'
  2138  12FD  343A               	retlw	58	;':'
  2139  12FE  3420               	retlw	32	;' '
  2140  12FF  3425               	retlw	37	;'%'
  2141  1300  3430               	retlw	48	;'0'
  2142  1301  3432               	retlw	50	;'2'
  2143  1302  3478               	retlw	120	;'x'
  2144  1303  340A               	retlw	10
  2145  1304  3400               	retlw	0
  2146                           
  2147                           	psect	stringtext35
  2148  1305                     __pstringtext35:	
  2149  1305                     STR_50:	
  2150  1305  3452               	retlw	82	;'R'
  2151  1306  3458               	retlw	88	;'X'
  2152  1307  3442               	retlw	66	;'B'
  2153  1308  3431               	retlw	49	;'1'
  2154  1309  3443               	retlw	67	;'C'
  2155  130A  3454               	retlw	84	;'T'
  2156  130B  3452               	retlw	82	;'R'
  2157  130C  344C               	retlw	76	;'L'
  2158  130D  343A               	retlw	58	;':'
  2159  130E  3420               	retlw	32	;' '
  2160  130F  3425               	retlw	37	;'%'
  2161  1310  3430               	retlw	48	;'0'
  2162  1311  3432               	retlw	50	;'2'
  2163  1312  3478               	retlw	120	;'x'
  2164  1313  340A               	retlw	10
  2165  1314  3400               	retlw	0
  2166                           
  2167                           	psect	stringtext36
  2168  1315                     __pstringtext36:	
  2169  1315                     STR_46:	
  2170  1315  3454               	retlw	84	;'T'
  2171  1316  3458               	retlw	88	;'X'
  2172  1317  3442               	retlw	66	;'B'
  2173  1318  3431               	retlw	49	;'1'
  2174  1319  3443               	retlw	67	;'C'
  2175  131A  3454               	retlw	84	;'T'
  2176  131B  3452               	retlw	82	;'R'
  2177  131C  344C               	retlw	76	;'L'
  2178  131D  343A               	retlw	58	;':'
  2179  131E  3420               	retlw	32	;' '
  2180  131F  3425               	retlw	37	;'%'
  2181  1320  3430               	retlw	48	;'0'
  2182  1321  3432               	retlw	50	;'2'
  2183  1322  3478               	retlw	120	;'x'
  2184  1323  340A               	retlw	10
  2185  1324  3400               	retlw	0
  2186                           
  2187                           	psect	stringtext37
  2188  1325                     __pstringtext37:	
  2189  1325                     STR_47:	
  2190  1325  3454               	retlw	84	;'T'
  2191  1326  3458               	retlw	88	;'X'
  2192  1327  3442               	retlw	66	;'B'
  2193  1328  3432               	retlw	50	;'2'
  2194  1329  3443               	retlw	67	;'C'
  2195  132A  3454               	retlw	84	;'T'
  2196  132B  3452               	retlw	82	;'R'
  2197  132C  344C               	retlw	76	;'L'
  2198  132D  343A               	retlw	58	;':'
  2199  132E  3420               	retlw	32	;' '
  2200  132F  3425               	retlw	37	;'%'
  2201  1330  3430               	retlw	48	;'0'
  2202  1331  3432               	retlw	50	;'2'
  2203  1332  3478               	retlw	120	;'x'
  2204  1333  340A               	retlw	10
  2205  1334  3400               	retlw	0
  2206                           
  2207                           	psect	stringtext38
  2208  1335                     __pstringtext38:	
  2209  1335                     STR_27:	
  2210  1335  3452               	retlw	82	;'R'
  2211  1336  3458               	retlw	88	;'X'
  2212  1337  3442               	retlw	66	;'B'
  2213  1338  3425               	retlw	37	;'%'
  2214  1339  3464               	retlw	100	;'d'
  2215  133A  3444               	retlw	68	;'D'
  2216  133B  3430               	retlw	48	;'0'
  2217  133C  343A               	retlw	58	;':'
  2218  133D  3420               	retlw	32	;' '
  2219  133E  3425               	retlw	37	;'%'
  2220  133F  3430               	retlw	48	;'0'
  2221  1340  3432               	retlw	50	;'2'
  2222  1341  3478               	retlw	120	;'x'
  2223  1342  340A               	retlw	10
  2224  1343  3400               	retlw	0
  2225                           
  2226                           	psect	stringtext39
  2227  1344                     __pstringtext39:	
  2228  1344                     STR_52:	
  2229  1344  3443               	retlw	67	;'C'
  2230  1345  3441               	retlw	65	;'A'
  2231  1346  344E               	retlw	78	;'N'
  2232  1347  3443               	retlw	67	;'C'
  2233  1348  3454               	retlw	84	;'T'
  2234  1349  3452               	retlw	82	;'R'
  2235  134A  344C               	retlw	76	;'L'
  2236  134B  343A               	retlw	58	;':'
  2237  134C  3420               	retlw	32	;' '
  2238  134D  3425               	retlw	37	;'%'
  2239  134E  3430               	retlw	48	;'0'
  2240  134F  3432               	retlw	50	;'2'
  2241  1350  3478               	retlw	120	;'x'
  2242  1351  340A               	retlw	10
  2243  1352  3400               	retlw	0
  2244                           
  2245                           	psect	stringtext40
  2246  1353                     __pstringtext40:	
  2247  1353                     STR_21:	
  2248  1353  3443               	retlw	67	;'C'
  2249  1354  3441               	retlw	65	;'A'
  2250  1355  344E               	retlw	78	;'N'
  2251  1356  3453               	retlw	83	;'S'
  2252  1357  3454               	retlw	84	;'T'
  2253  1358  3441               	retlw	65	;'A'
  2254  1359  3454               	retlw	84	;'T'
  2255  135A  343A               	retlw	58	;':'
  2256  135B  3420               	retlw	32	;' '
  2257  135C  3425               	retlw	37	;'%'
  2258  135D  3430               	retlw	48	;'0'
  2259  135E  3432               	retlw	50	;'2'
  2260  135F  3478               	retlw	120	;'x'
  2261  1360  340A               	retlw	10
  2262  1361  3400               	retlw	0
  2263                           
  2264                           	psect	stringtext41
  2265  1362                     __pstringtext41:	
  2266  1362                     STR_30:	
  2267  1362  3454               	retlw	84	;'T'
  2268  1363  3458               	retlw	88	;'X'
  2269  1364  3442               	retlw	66	;'B'
  2270  1365  3430               	retlw	48	;'0'
  2271  1366  3420               	retlw	32	;' '
  2272  1367  3469               	retlw	105	;'i'
  2273  1368  3473               	retlw	115	;'s'
  2274  1369  3420               	retlw	32	;' '
  2275  136A  3469               	retlw	105	;'i'
  2276  136B  3464               	retlw	100	;'d'
  2277  136C  346C               	retlw	108	;'l'
  2278  136D  3465               	retlw	101	;'e'
  2279  136E  340A               	retlw	10
  2280  136F  3400               	retlw	0
  2281                           
  2282                           	psect	stringtext42
  2283  1370                     __pstringtext42:	
  2284  1370                     STR_29:	
  2285  1370  3454               	retlw	84	;'T'
  2286  1371  3458               	retlw	88	;'X'
  2287  1372  3442               	retlw	66	;'B'
  2288  1373  3431               	retlw	49	;'1'
  2289  1374  3420               	retlw	32	;' '
  2290  1375  3469               	retlw	105	;'i'
  2291  1376  3473               	retlw	115	;'s'
  2292  1377  3420               	retlw	32	;' '
  2293  1378  3469               	retlw	105	;'i'
  2294  1379  3464               	retlw	100	;'d'
  2295  137A  346C               	retlw	108	;'l'
  2296  137B  3465               	retlw	101	;'e'
  2297  137C  340A               	retlw	10
  2298  137D  3400               	retlw	0
  2299                           
  2300                           	psect	stringtext43
  2301  137E                     __pstringtext43:	
  2302  137E                     STR_28:	
  2303  137E  3454               	retlw	84	;'T'
  2304  137F  3458               	retlw	88	;'X'
  2305  1380  3442               	retlw	66	;'B'
  2306  1381  3432               	retlw	50	;'2'
  2307  1382  3420               	retlw	32	;' '
  2308  1383  3469               	retlw	105	;'i'
  2309  1384  3473               	retlw	115	;'s'
  2310  1385  3420               	retlw	32	;' '
  2311  1386  3469               	retlw	105	;'i'
  2312  1387  3464               	retlw	100	;'d'
  2313  1388  346C               	retlw	108	;'l'
  2314  1389  3465               	retlw	101	;'e'
  2315  138A  340A               	retlw	10
  2316  138B  3400               	retlw	0
  2317                           
  2318                           	psect	stringtext44
  2319  138C                     __pstringtext44:	
  2320  138C                     STR_36:	
  2321  138C  3452               	retlw	82	;'R'
  2322  138D  3458               	retlw	88	;'X'
  2323  138E  3430               	retlw	48	;'0'
  2324  138F  3449               	retlw	73	;'I'
  2325  1390  3446               	retlw	70	;'F'
  2326  1391  3420               	retlw	32	;' '
  2327  1392  3469               	retlw	105	;'i'
  2328  1393  3473               	retlw	115	;'s'
  2329  1394  3420               	retlw	32	;' '
  2330  1395  346F               	retlw	111	;'o'
  2331  1396  346E               	retlw	110	;'n'
  2332  1397  340A               	retlw	10
  2333  1398  3400               	retlw	0
  2334                           
  2335                           	psect	stringtext45
  2336  1399                     __pstringtext45:	
  2337  1399                     STR_35:	
  2338  1399  3452               	retlw	82	;'R'
  2339  139A  3458               	retlw	88	;'X'
  2340  139B  3431               	retlw	49	;'1'
  2341  139C  3449               	retlw	73	;'I'
  2342  139D  3446               	retlw	70	;'F'
  2343  139E  3420               	retlw	32	;' '
  2344  139F  3469               	retlw	105	;'i'
  2345  13A0  3473               	retlw	115	;'s'
  2346  13A1  3420               	retlw	32	;' '
  2347  13A2  346F               	retlw	111	;'o'
  2348  13A3  346E               	retlw	110	;'n'
  2349  13A4  340A               	retlw	10
  2350  13A5  3400               	retlw	0
  2351                           
  2352                           	psect	stringtext46
  2353  13A6                     __pstringtext46:	
  2354  13A6                     STR_41:	
  2355  13A6  3443               	retlw	67	;'C'
  2356  13A7  344E               	retlw	78	;'N'
  2357  13A8  3446               	retlw	70	;'F'
  2358  13A9  3431               	retlw	49	;'1'
  2359  13AA  343A               	retlw	58	;':'
  2360  13AB  3420               	retlw	32	;' '
  2361  13AC  3425               	retlw	37	;'%'
  2362  13AD  3430               	retlw	48	;'0'
  2363  13AE  3432               	retlw	50	;'2'
  2364  13AF  3478               	retlw	120	;'x'
  2365  13B0  340A               	retlw	10
  2366  13B1  3400               	retlw	0
  2367                           
  2368                           	psect	stringtext47
  2369  13B2                     __pstringtext47:	
  2370  13B2                     STR_42:	
  2371  13B2  3443               	retlw	67	;'C'
  2372  13B3  344E               	retlw	78	;'N'
  2373  13B4  3446               	retlw	70	;'F'
  2374  13B5  3432               	retlw	50	;'2'
  2375  13B6  343A               	retlw	58	;':'
  2376  13B7  3420               	retlw	32	;' '
  2377  13B8  3425               	retlw	37	;'%'
  2378  13B9  3430               	retlw	48	;'0'
  2379  13BA  3432               	retlw	50	;'2'
  2380  13BB  3478               	retlw	120	;'x'
  2381  13BC  340A               	retlw	10
  2382  13BD  3400               	retlw	0
  2383                           
  2384                           	psect	stringtext48
  2385  13BE                     __pstringtext48:	
  2386  13BE                     STR_43:	
  2387  13BE  3443               	retlw	67	;'C'
  2388  13BF  344E               	retlw	78	;'N'
  2389  13C0  3446               	retlw	70	;'F'
  2390  13C1  3433               	retlw	51	;'3'
  2391  13C2  343A               	retlw	58	;':'
  2392  13C3  3420               	retlw	32	;' '
  2393  13C4  3425               	retlw	37	;'%'
  2394  13C5  3430               	retlw	48	;'0'
  2395  13C6  3432               	retlw	50	;'2'
  2396  13C7  3478               	retlw	120	;'x'
  2397  13C8  340A               	retlw	10
  2398  13C9  3400               	retlw	0
  2399                           
  2400                           	psect	stringtext49
  2401  13DC                     __pstringtext49:	
  2402  13DC                     STR_55:	
  2403  13DC  3428               	retlw	40	;'('
  2404  13DD  346E               	retlw	110	;'n'
  2405  13DE  3475               	retlw	117	;'u'
  2406  13DF  346C               	retlw	108	;'l'
  2407  13E0  346C               	retlw	108	;'l'
  2408  13E1  3429               	retlw	41	;')'
  2409  13E2  3400               	retlw	0
  2410                           
  2411                           	psect	stringtext50
  2412  13E3                     __pstringtext50:	
  2413  13E3                     STR_1:	
  2414  13E3  3425               	retlw	37	;'%'
  2415  13E4  3464               	retlw	100	;'d'
  2416  13E5  342C               	retlw	44	;','
  2417  13E6  3425               	retlw	37	;'%'
  2418  13E7  3473               	retlw	115	;'s'
  2419  13E8  340A               	retlw	10
  2420  13E9  3400               	retlw	0
  2421                           
  2422                           	psect	stringtext51
  2423  13F0                     __pstringtext51:	
  2424  13F0                     STR_2:	
  2425  13F0  3425               	retlw	37	;'%'
  2426  13F1  3430               	retlw	48	;'0'
  2427  13F2  3432               	retlw	50	;'2'
  2428  13F3  3478               	retlw	120	;'x'
  2429  13F4  343A               	retlw	58	;':'
  2430  13F5  3400               	retlw	0
  2431                           
  2432                           	psect	stringtext52
  2433  13F6                     __pstringtext52:	
  2434  13F6                     STR_3:	
  2435  13F6  3420               	retlw	32	;' '
  2436  13F7  3425               	retlw	37	;'%'
  2437  13F8  3430               	retlw	48	;'0'
  2438  13F9  3432               	retlw	50	;'2'
  2439  13FA  3478               	retlw	120	;'x'
  2440  13FB  3400               	retlw	0
  2441                           
  2442                           	psect	stringtext53
  2443  1402                     __pstringtext53:	
  2444  1402                     STR_6:	
  2445  1402  3425               	retlw	37	;'%'
  2446  1403  3463               	retlw	99	;'c'
  2447  1404  3400               	retlw	0
  2448                           
  2449                           	psect	stringtext54
  2450  0000                     __pstringtext54:	
  2451  1218                     
  2452                           ; #config settings
  2453  0000                     
  2454                           	psect	cinit
  2455  07EE                     start_initialization:	
  2456  07EE                     __initialization:	
  2457                           
  2458                           ; Clear objects allocated to BANK0
  2459  07EE  3062               	movlw	low __pbssBANK0
  2460  07EF  0084               	movwf	4
  2461  07F0  3000               	movlw	high __pbssBANK0
  2462  07F1  0085               	movwf	5
  2463  07F2  3007               	movlw	7
  2464  07F3  318C  242B  3187   	fcall	clear_ram0
  2465                           
  2466                           ; Clear objects allocated to BANK1
  2467  07F6  30B3               	movlw	low __pbssBANK1
  2468  07F7  0084               	movwf	4
  2469  07F8  3000               	movlw	high __pbssBANK1
  2470  07F9  0085               	movwf	5
  2471  07FA  3010               	movlw	16
  2472  07FB  318C  242B         	fcall	clear_ram0
  2473  07FD                     end_of_initialization:	
  2474                           ;End of C runtime variable initialization code
  2475                           
  2476  07FD                     __end_of__initialization:	
  2477  07FD  0020               	movlb	0
  2478  07FE  3183  2BCC         	ljmp	_main	;jump to C main() function
  2479                           
  2480                           	psect	bssBANK0
  2481  0062                     __pbssBANK0:	
  2482  0062                     _mode:	
  2483  0062                     	ds	2
  2484  0064                     _sid:	
  2485  0064                     	ds	2
  2486  0066                     _output_format:	
  2487  0066                     	ds	2
  2488  0068                     _operation_mode:	
  2489  0068                     	ds	1
  2490                           
  2491                           	psect	bssBANK1
  2492  00B3                     __pbssBANK1:	
  2493  00B3                     _buf:	
  2494  00B3                     	ds	16
  2495                           
  2496                           	psect	clrtext
  2497  0C2B                     clear_ram0:	
  2498                           ;	Called with FSR0 containing the base address, and
  2499                           ;	WREG with the size to clear
  2500                           
  2501  0C2B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2502  0C2C                     clrloop0:	
  2503  0C2C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2504  0C2D  3101               	addfsr 0,1
  2505  0C2E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2506  0C2F  2C2C               	goto	clrloop0	;have we reached the end yet?
  2507  0C30  3400               	retlw	0	;all done for this memory range, return
  2508                           
  2509                           	psect	cstackBANK1
  2510  00A0                     __pcstackBANK1:	
  2511  00A0                     main@sid:	
  2512                           
  2513                           ; 1 bytes @ 0x0
  2514  00A0                     	ds	1
  2515  00A1                     main@bpr:	
  2516                           
  2517                           ; 1 bytes @ 0x1
  2518  00A1                     	ds	1
  2519  00A2                     main@status:	
  2520                           
  2521                           ; 1 bytes @ 0x2
  2522  00A2                     	ds	1
  2523  00A3                     main@mask:	
  2524                           
  2525                           ; 2 bytes @ 0x3
  2526  00A3                     	ds	2
  2527  00A5                     main@echo_back:	
  2528                           
  2529                           ; 1 bytes @ 0x5
  2530  00A5                     	ds	1
  2531  00A6                     main@n:	
  2532                           
  2533                           ; 1 bytes @ 0x6
  2534  00A6                     	ds	1
  2535  00A7                     main@buf:	
  2536                           
  2537                           ; 9 bytes @ 0x7
  2538  00A7                     	ds	9
  2539  00B0                     main@c:	
  2540                           
  2541                           ; 1 bytes @ 0x10
  2542  00B0                     	ds	1
  2543  00B1                     main@cmd:	
  2544                           
  2545                           ; 1 bytes @ 0x11
  2546  00B1                     	ds	1
  2547  00B2                     main@idx:	
  2548                           
  2549                           ; 1 bytes @ 0x12
  2550  00B2                     	ds	1
  2551                           
  2552                           	psect	cstackCOMMON
  2553  0070                     __pcstackCOMMON:	
  2554  0070                     ?_isdigit:	
  2555  0070                     ?_PIN_MANAGER_Initialize:	
  2556                           ; 1 bit 
  2557                           
  2558  0070                     ??_PIN_MANAGER_Initialize:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_OSCILLATOR_Initialize:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ??_OSCILLATOR_Initialize:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_WDT_Initialize:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ??_WDT_Initialize:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_SPI_Initialize:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ??_SPI_Initialize:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_EUSART_Initialize:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ??_EUSART_Initialize:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_can_status_check:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_can_set_sid:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_can_logging_mode:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_can_ope_mode:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?_can_baudrate:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_can_abort:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_can_dump_registers:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ??_isdigit:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_SYSTEM_Initialize:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ??_SYSTEM_Initialize:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_EUSART_Read:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ??_EUSART_Read:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_EUSART_Write:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ??_EUSART_Write:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_putch:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_SPI_Exchange8bit:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ??_SPI_Exchange8bit:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_main:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_txf_clear:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_receive:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_read_register:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?___wmul:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?___lwdiv:	
  2652                           ; 2 bytes @ 0x0
  2653                           
  2654  0070                     EUSART_Write@txData:	
  2655                           ; 2 bytes @ 0x0
  2656                           
  2657  0070                     SPI_Exchange8bit@data:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     can_logging_mode@verbose:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     _isdigit$785:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     can_set_sid@can_node:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ___wmul@multiplier:	
  2670                           ; 2 bytes @ 0x0
  2671                           
  2672  0070                     ___lwdiv@divisor:	
  2673                           ; 2 bytes @ 0x0
  2674                           
  2675                           
  2676                           ; 2 bytes @ 0x0
  2677  0070                     	ds	1
  2678  0071                     ??_can_logging_mode:	
  2679  0071                     ??_putch:	
  2680                           ; 1 bytes @ 0x1
  2681                           
  2682  0071                     ?_SPI_Exchange8bitBuffer:	
  2683                           ; 1 bytes @ 0x1
  2684                           
  2685  0071                     putch@txData:	
  2686                           ; 1 bytes @ 0x1
  2687                           
  2688  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2689                           ; 1 bytes @ 0x1
  2690                           
  2691  0071                     isdigit@c:	
  2692                           ; 1 bytes @ 0x1
  2693                           
  2694                           
  2695                           ; 1 bytes @ 0x1
  2696  0071                     	ds	1
  2697  0072                     ??_can_set_sid:	
  2698  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2699                           ; 1 bytes @ 0x2
  2700                           
  2701  0072                     can_logging_mode@debug:	
  2702                           ; 1 bytes @ 0x2
  2703                           
  2704  0072                     ___wmul@multiplicand:	
  2705                           ; 1 bytes @ 0x2
  2706                           
  2707  0072                     ___lwdiv@dividend:	
  2708                           ; 2 bytes @ 0x2
  2709                           
  2710                           
  2711                           ; 2 bytes @ 0x2
  2712  0072                     	ds	1
  2713  0073                     ??_SPI_Exchange8bitBuffer:	
  2714                           
  2715                           ; 1 bytes @ 0x3
  2716  0073                     	ds	1
  2717  0074                     ??___wmul:	
  2718  0074                     ??___lwdiv:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721  0074                     ___wmul@product:	
  2722                           ; 1 bytes @ 0x4
  2723                           
  2724                           
  2725                           ; 2 bytes @ 0x4
  2726  0074                     	ds	1
  2727  0075                     can_set_sid@sidh:	
  2728  0075                     ___lwdiv@quotient:	
  2729                           ; 1 bytes @ 0x5
  2730                           
  2731                           
  2732                           ; 2 bytes @ 0x5
  2733  0075                     	ds	1
  2734  0076                     ?_atoi:	
  2735  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2736                           ; 2 bytes @ 0x6
  2737                           
  2738  0076                     can_set_sid@sidl:	
  2739                           ; 1 bytes @ 0x6
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x6
  2743  0076                     	ds	1
  2744  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2745  0077                     ___lwdiv@counter:	
  2746                           ; 1 bytes @ 0x7
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x7
  2750  0077                     	ds	1
  2751  0078                     ??_atoi:	
  2752  0078                     ?_SPI_exchange:	
  2753                           ; 1 bytes @ 0x8
  2754                           
  2755  0078                     ?___lwmod:	
  2756                           ; 1 bytes @ 0x8
  2757                           
  2758  0078                     SPI_exchange@len:	
  2759                           ; 2 bytes @ 0x8
  2760                           
  2761  0078                     ___lwmod@divisor:	
  2762                           ; 1 bytes @ 0x8
  2763                           
  2764                           
  2765                           ; 2 bytes @ 0x8
  2766  0078                     	ds	1
  2767  0079                     ??_SPI_exchange:	
  2768                           
  2769                           ; 1 bytes @ 0x9
  2770  0079                     	ds	1
  2771  007A                     atoi@sign:	
  2772  007A                     ___lwmod@dividend:	
  2773                           ; 1 bytes @ 0xA
  2774                           
  2775                           
  2776                           ; 2 bytes @ 0xA
  2777  007A                     	ds	1
  2778  007B                     atoi@a:	
  2779                           
  2780                           ; 2 bytes @ 0xB
  2781  007B                     	ds	1
  2782  007C                     ??___lwmod:	
  2783  007C                     SPI_exchange@bytes_written:	
  2784                           ; 1 bytes @ 0xC
  2785                           
  2786                           
  2787                           ; 1 bytes @ 0xC
  2788  007C                     	ds	1
  2789  007D                     SPI_exchange@buf:	
  2790  007D                     atoi@s:	
  2791                           ; 1 bytes @ 0xD
  2792                           
  2793  007D                     ___lwmod@counter:	
  2794                           ; 1 bytes @ 0xD
  2795                           
  2796                           
  2797                           ; 1 bytes @ 0xD
  2798  007D                     	ds	1
  2799                           
  2800                           	psect	cstackBANK0
  2801  0020                     __pcstackBANK0:	
  2802  0020                     ??_txf_clear:	
  2803  0020                     ??_read_register:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x0
  2808  0020                     	ds	1
  2809  0021                     read_register@addr:	
  2810                           
  2811                           ; 1 bytes @ 0x1
  2812  0021                     	ds	1
  2813  0022                     ?_printf:	
  2814  0022                     txf_clear@mask:	
  2815                           ; 2 bytes @ 0x2
  2816                           
  2817  0022                     printf@f:	
  2818                           ; 1 bytes @ 0x2
  2819                           
  2820                           
  2821                           ; 2 bytes @ 0x2
  2822  0022                     	ds	1
  2823  0023                     txf_clear@bytes_written:	
  2824                           
  2825                           ; 1 bytes @ 0x3
  2826  0023                     	ds	1
  2827  0024                     txf_clear@n:	
  2828                           
  2829                           ; 1 bytes @ 0x4
  2830  0024                     	ds	6
  2831  002A                     ??_printf:	
  2832                           
  2833                           ; 1 bytes @ 0xA
  2834  002A                     	ds	4
  2835  002E                     printf@idx:	
  2836                           
  2837                           ; 1 bytes @ 0xE
  2838  002E                     	ds	1
  2839  002F                     printf@prec:	
  2840                           
  2841                           ; 1 bytes @ 0xF
  2842  002F                     	ds	1
  2843  0030                     printf@cp:	
  2844                           
  2845                           ; 2 bytes @ 0x10
  2846  0030                     	ds	2
  2847  0032                     printf@len:	
  2848                           
  2849                           ; 2 bytes @ 0x12
  2850  0032                     	ds	2
  2851  0034                     printf@ap:	
  2852                           
  2853                           ; 1 bytes @ 0x14
  2854  0034                     	ds	1
  2855  0035                     printf@val:	
  2856                           
  2857                           ; 2 bytes @ 0x15
  2858  0035                     	ds	2
  2859  0037                     printf@flag:	
  2860                           
  2861                           ; 1 bytes @ 0x17
  2862  0037                     	ds	1
  2863  0038                     printf@width:	
  2864                           
  2865                           ; 2 bytes @ 0x18
  2866  0038                     	ds	2
  2867  003A                     printf@c:	
  2868                           
  2869                           ; 1 bytes @ 0x1A
  2870  003A                     	ds	1
  2871  003B                     ??_can_ope_mode:	
  2872  003B                     ??_can_dump_registers:	
  2873                           ; 1 bytes @ 0x1B
  2874                           
  2875  003B                     ?_can_send:	
  2876                           ; 1 bytes @ 0x1B
  2877                           
  2878  003B                     ?_receive_handler:	
  2879                           ; 1 bytes @ 0x1B
  2880                           
  2881  003B                     receive_handler@sid:	
  2882                           ; 1 bytes @ 0x1B
  2883                           
  2884  003B                     can_send@dlc:	
  2885                           ; 1 bytes @ 0x1B
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x1B
  2889  003B                     	ds	1
  2890  003C                     ??_can_send:	
  2891  003C                     receive_handler@pbuf:	
  2892                           ; 1 bytes @ 0x1C
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x1C
  2896  003C                     	ds	1
  2897  003D                     receive_handler@dlc:	
  2898  003D                     can_ope_mode@bytes_written:	
  2899                           ; 1 bytes @ 0x1D
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0x1D
  2903  003D                     	ds	1
  2904  003E                     ??_receive_handler:	
  2905  003E                     can_ope_mode@ope_mode:	
  2906                           ; 1 bytes @ 0x1E
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x1E
  2910  003E                     	ds	1
  2911  003F                     ?_can_init:	
  2912  003F                     ??_can_baudrate:	
  2913                           ; 1 bytes @ 0x1F
  2914                           
  2915  003F                     ?_can_set_mask:	
  2916                           ; 1 bytes @ 0x1F
  2917                           
  2918  003F                     ??_can_abort:	
  2919                           ; 1 bytes @ 0x1F
  2920                           
  2921  003F                     can_set_mask@n:	
  2922                           ; 1 bytes @ 0x1F
  2923                           
  2924  003F                     can_init@receive_handler:	
  2925                           ; 1 bytes @ 0x1F
  2926                           
  2927                           
  2928                           ; 2 bytes @ 0x1F
  2929  003F                     	ds	1
  2930  0040                     can_set_mask@mask:	
  2931  0040                     can_send@len:	
  2932                           ; 1 bytes @ 0x20
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0x20
  2936  0040                     	ds	1
  2937  0041                     ??_can_init:	
  2938  0041                     ??_can_set_mask:	
  2939                           ; 1 bytes @ 0x21
  2940                           
  2941  0041                     receive_handler@i:	
  2942                           ; 1 bytes @ 0x21
  2943                           
  2944  0041                     can_send@bytes_written:	
  2945                           ; 1 bytes @ 0x21
  2946                           
  2947  0041                     can_baudrate@bpr:	
  2948                           ; 1 bytes @ 0x21
  2949                           
  2950  0041                     can_abort@bytes_written:	
  2951                           ; 1 bytes @ 0x21
  2952                           
  2953                           
  2954                           ; 1 bytes @ 0x21
  2955  0041                     	ds	1
  2956  0042                     ??_receive:	
  2957  0042                     can_send@status:	
  2958                           ; 1 bytes @ 0x22
  2959                           
  2960  0042                     can_baudrate@mask:	
  2961                           ; 1 bytes @ 0x22
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x22
  2965  0042                     	ds	1
  2966  0043                     can_send@data_buf:	
  2967  0043                     can_baudrate@bytes_written:	
  2968                           ; 1 bytes @ 0x23
  2969                           
  2970                           
  2971                           ; 1 bytes @ 0x23
  2972  0043                     	ds	1
  2973  0044                     can_send@i:	
  2974                           
  2975                           ; 1 bytes @ 0x24
  2976  0044                     	ds	1
  2977  0045                     can_send@n:	
  2978                           
  2979                           ; 1 bytes @ 0x25
  2980  0045                     	ds	2
  2981  0047                     receive@bytes_read:	
  2982  0047                     _can_set_mask$491:	
  2983                           ; 1 bytes @ 0x27
  2984                           
  2985                           
  2986                           ; 2 bytes @ 0x27
  2987  0047                     	ds	1
  2988  0048                     receive@rx_buf:	
  2989                           
  2990                           ; 15 bytes @ 0x28
  2991  0048                     	ds	1
  2992  0049                     can_set_mask@cmd:	
  2993                           
  2994                           ; 1 bytes @ 0x29
  2995  0049                     	ds	1
  2996  004A                     can_set_mask@mask_sidh:	
  2997                           
  2998                           ; 1 bytes @ 0x2A
  2999  004A                     	ds	1
  3000  004B                     can_set_mask@mask_sidl:	
  3001                           
  3002                           ; 1 bytes @ 0x2B
  3003  004B                     	ds	12
  3004  0057                     receive@pbuf:	
  3005                           
  3006                           ; 1 bytes @ 0x37
  3007  0057                     	ds	1
  3008  0058                     receive@sid:	
  3009                           
  3010                           ; 2 bytes @ 0x38
  3011  0058                     	ds	2
  3012  005A                     receive@dlc:	
  3013                           
  3014                           ; 1 bytes @ 0x3A
  3015  005A                     	ds	1
  3016  005B                     receive@n:	
  3017                           
  3018                           ; 1 bytes @ 0x3B
  3019  005B                     	ds	1
  3020  005C                     ??_can_status_check:	
  3021                           
  3022                           ; 1 bytes @ 0x3C
  3023  005C                     	ds	2
  3024  005E                     can_status_check@bytes_written:	
  3025                           
  3026                           ; 1 bytes @ 0x3E
  3027  005E                     	ds	1
  3028  005F                     can_status_check@status:	
  3029                           
  3030                           ; 1 bytes @ 0x3F
  3031  005F                     	ds	1
  3032  0060                     ??_main:	
  3033                           
  3034                           ; 1 bytes @ 0x40
  3035  0060                     	ds	2
  3036                           
  3037                           	psect	maintext
  3038  03CC                     __pmaintext:	
  3039 ;;
  3040 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3041 ;;
  3042 ;; *************** function _main *****************
  3043 ;; Defined at:
  3044 ;;		line 39 in file "main.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  status          1    2[BANK1 ] unsigned char 
  3049 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3050 ;;  mask            2    3[BANK1 ] unsigned int 
  3051 ;;  idx             1   18[BANK1 ] unsigned char 
  3052 ;;  cmd             1   17[BANK1 ] unsigned char 
  3053 ;;  c               1   16[BANK1 ] unsigned char 
  3054 ;;  n               1    6[BANK1 ] unsigned char 
  3055 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3056 ;;  bpr             1    1[BANK1 ] unsigned char 
  3057 ;;  sid             1    0[BANK1 ] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : B1F/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3068 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3070 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3071 ;;Total ram usage:       21 bytes
  3072 ;; Hardware stack levels required when called:    6
  3073 ;; This function calls:
  3074 ;;		_EUSART_Read
  3075 ;;		_SYSTEM_Initialize
  3076 ;;		_atoi
  3077 ;;		_can_abort
  3078 ;;		_can_baudrate
  3079 ;;		_can_dump_registers
  3080 ;;		_can_init
  3081 ;;		_can_logging_mode
  3082 ;;		_can_ope_mode
  3083 ;;		_can_send
  3084 ;;		_can_set_mask
  3085 ;;		_can_set_sid
  3086 ;;		_can_status_check
  3087 ;;		_printf
  3088 ;; This function is called by:
  3089 ;;		Startup code after reset
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           
  3094                           ;psect for function _main
  3095  03CC                     _main:	
  3096                           
  3097                           ;main.c: 41: uint8_t buf[9];
  3098                           ;main.c: 42: bool echo_back = 0;
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3102  03CC  0021               	movlb	1	; select bank1
  3103  03CD  01A5               	clrf	main@echo_back^(0+128)
  3104                           
  3105                           ;main.c: 43: uint8_t c, idx;
  3106                           ;main.c: 45: uint8_t cmd, sid, n, bpr;
  3107                           ;main.c: 46: uint16_t mask;
  3108                           ;main.c: 48: SYSTEM_Initialize();
  3109  03CE  318C  2477  3183   	fcall	_SYSTEM_Initialize
  3110                           
  3111                           ;main.c: 53: output_format.with_sid = 0;
  3112  03D1  0020               	movlb	0	; select bank0
  3113  03D2  01E6               	clrf	_output_format
  3114                           
  3115                           ;main.c: 54: output_format.hex_output = 0;
  3116  03D3  01E7               	clrf	_output_format+1
  3117                           
  3118                           ;main.c: 55: can_init(receive_handler);
  3119  03D4  30BF               	movlw	low _receive_handler
  3120  03D5  00BF               	movwf	can_init@receive_handler
  3121  03D6  300E               	movlw	high _receive_handler
  3122  03D7  00C0               	movwf	can_init@receive_handler+1
  3123  03D8  318F  2781  3183   	fcall	_can_init
  3124  03DB                     L1:	
  3125                           
  3126                           ;main.c: 57: idx = 0;
  3127  03DB  0021               	movlb	1	; select bank1
  3128  03DC  01B2               	clrf	main@idx^(0+128)
  3129  03DD                     l2521:	
  3130                           ;main.c: 59: while (1)
  3131                           
  3132                           
  3133                           ;main.c: 60: {
  3134                           ;main.c: 61: bool status = can_status_check();
  3135  03DD  318E  2612  3183   	fcall	_can_status_check
  3136  03E0  0020               	movlb	0	; select bank0
  3137  03E1  00E0               	movwf	??_main
  3138  03E2  0860               	movf	??_main,w
  3139  03E3  0021               	movlb	1	; select bank1
  3140  03E4  00A2               	movwf	main@status^(0+128)
  3141                           
  3142                           ;main.c: 62: if (status) {
  3143  03E5  0822               	movf	main@status^(0+128),w
  3144  03E6  1903               	btfsc	3,2
  3145  03E7  2BEB               	goto	l202
  3146                           
  3147                           ;main.c: 63: LATCbits.LATC3 = 1;
  3148  03E8  0022               	movlb	2	; select bank2
  3149  03E9  158E               	bsf	14,3	;volatile
  3150                           
  3151                           ;main.c: 64: } else {
  3152  03EA  2BED               	goto	l203
  3153  03EB                     l202:	
  3154                           
  3155                           ;main.c: 65: LATCbits.LATC3 = 0;
  3156  03EB  0022               	movlb	2	; select bank2
  3157  03EC  118E               	bcf	14,3	;volatile
  3158  03ED                     l203:	
  3159                           
  3160                           ;main.c: 66: }
  3161                           ;main.c: 67: if ((PIR1bits.RCIF)) {
  3162  03ED  0020               	movlb	0	; select bank0
  3163  03EE  1E91               	btfss	17,5	;volatile
  3164  03EF  2BDD               	goto	l2521
  3165                           
  3166                           ;main.c: 68: c = EUSART_Read();
  3167  03F0  318C  2449  3183   	fcall	_EUSART_Read
  3168  03F3  0020               	movlb	0	; select bank0
  3169  03F4  00E0               	movwf	??_main
  3170  03F5  0860               	movf	??_main,w
  3171  03F6  0021               	movlb	1	; select bank1
  3172  03F7  00B0               	movwf	main@c^(0+128)
  3173                           
  3174                           ;main.c: 69: if (echo_back) printf("%c", c);
  3175  03F8  0825               	movf	main@echo_back^(0+128),w
  3176  03F9  1903               	btfsc	3,2
  3177  03FA  2C0C               	goto	l2533
  3178  03FB  3002               	movlw	low (STR_6| (0+32768))
  3179  03FC  0020               	movlb	0	; select bank0
  3180  03FD  00A2               	movwf	printf@f
  3181  03FE  3094               	movlw	high (STR_6| (0+32768))
  3182  03FF  00A3               	movwf	printf@f+1
  3183  0400  0021               	movlb	1	; select bank1
  3184  0401  0830               	movf	main@c^(0+128),w
  3185  0402  0020               	movlb	0	; select bank0
  3186  0403  00E0               	movwf	??_main
  3187  0404  01E1               	clrf	??_main+1
  3188  0405  0860               	movf	??_main,w
  3189  0406  00A4               	movwf	?_printf+2
  3190  0407  0861               	movf	??_main+1,w
  3191  0408  00A5               	movwf	?_printf+3
  3192  0409  3185  25B3  3183   	fcall	_printf
  3193  040C                     l2533:	
  3194                           
  3195                           ;main.c: 71: buf[idx] = c;
  3196  040C  0021               	movlb	1	; select bank1
  3197  040D  0830               	movf	main@c^(0+128),w
  3198  040E  0020               	movlb	0	; select bank0
  3199  040F  00E0               	movwf	??_main
  3200  0410  0021               	movlb	1	; select bank1
  3201  0411  0832               	movf	main@idx^(0+128),w
  3202  0412  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3203  0413  0086               	movwf	6
  3204  0414  0187               	clrf	7
  3205  0415  0020               	movlb	0	; select bank0
  3206  0416  0860               	movf	??_main,w
  3207  0417  0081               	movwf	1
  3208                           
  3209                           ;main.c: 72: if (c == '\n') {
  3210  0418  300A               	movlw	10
  3211  0419  0021               	movlb	1	; select bank1
  3212  041A  0630               	xorwf	main@c^(0+128),w
  3213  041B  1D03               	btfss	3,2
  3214  041C  2D90               	goto	l2625
  3215                           
  3216                           ;main.c: 73: buf[idx] = '\0';
  3217  041D  0832               	movf	main@idx^(0+128),w
  3218  041E  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3219  041F  0086               	movwf	6
  3220  0420  0187               	clrf	7
  3221  0421  0181               	clrf	1
  3222                           
  3223                           ;main.c: 74: if (buf[0] == '@') {
  3224  0422  3040               	movlw	64
  3225  0423  0627               	xorwf	main@buf^(0+128),w
  3226  0424  1D03               	btfss	3,2
  3227  0425  2D86               	goto	l2621
  3228                           
  3229                           ;main.c: 75: cmd = buf[1];
  3230  0426  0828               	movf	(main@buf^(0+128)+1),w
  3231  0427  0020               	movlb	0	; select bank0
  3232  0428  00E0               	movwf	??_main
  3233  0429  0860               	movf	??_main,w
  3234  042A  0021               	movlb	1	; select bank1
  3235  042B  00B1               	movwf	main@cmd^(0+128)
  3236                           
  3237                           ;main.c: 76: switch(cmd) {
  3238  042C  2D64               	goto	l2619
  3239  042D                     l2543:	
  3240                           ;main.c: 77: case 'i':
  3241                           
  3242                           
  3243                           ;main.c: 78: sid = atoi(&buf[2]);
  3244  042D  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3245  042E  318F  271A  3183   	fcall	_atoi
  3246  0431  0876               	movf	?_atoi,w
  3247  0432  0020               	movlb	0	; select bank0
  3248  0433  00E0               	movwf	??_main
  3249  0434  0860               	movf	??_main,w
  3250  0435  0021               	movlb	1	; select bank1
  3251  0436  00A0               	movwf	main@sid^(0+128)
  3252                           
  3253                           ;main.c: 79: can_set_sid(sid);
  3254  0437  0820               	movf	main@sid^(0+128),w
  3255  0438  0020               	movlb	0	; select bank0
  3256  0439  00E0               	movwf	??_main
  3257  043A  01E1               	clrf	??_main+1
  3258  043B  0860               	movf	??_main,w
  3259  043C  00F0               	movwf	can_set_sid@can_node
  3260  043D  0861               	movf	??_main+1,w
  3261  043E  00F1               	movwf	can_set_sid@can_node+1
  3262  043F  318C  24E6  3183   	fcall	_can_set_sid
  3263                           
  3264                           ;main.c: 80: break;
  3265  0442  2BDB               	goto	L1
  3266  0443                     l2547:	
  3267                           ;main.c: 81: case 'v':
  3268                           
  3269                           
  3270                           ;main.c: 82: if (buf[2] == 'd') {
  3271  0443  3064               	movlw	100
  3272  0444  0021               	movlb	1	; select bank1
  3273  0445  0629               	xorwf	(main@buf^(0+128)+2),w
  3274  0446  1D03               	btfss	3,2
  3275  0447  2C4C               	goto	l2553
  3276                           
  3277                           ;main.c: 83: can_logging_mode(1, 1);
  3278  0448  01F0               	clrf	can_logging_mode@verbose
  3279  0449  0AF0               	incf	can_logging_mode@verbose,f
  3280  044A  3001               	movlw	1
  3281  044B  2C53               	goto	L2
  3282  044C                     l2553:	
  3283                           ;main.c: 85: } else if (buf[2] == 'v') {
  3284                           
  3285                           ;main.c: 84: echo_back = 1;
  3286                           
  3287  044C  3076               	movlw	118
  3288  044D  0629               	xorwf	(main@buf^(0+128)+2),w
  3289  044E  1D03               	btfss	3,2
  3290  044F  2C5A               	goto	l2559
  3291                           
  3292                           ;main.c: 86: can_logging_mode(0, 1);
  3293  0450  01F0               	clrf	can_logging_mode@verbose
  3294  0451  0AF0               	incf	can_logging_mode@verbose,f
  3295  0452  3000               	movlw	0
  3296  0453                     L2:	
  3297  0453  318C  245E  3183   	fcall	_can_logging_mode
  3298                           
  3299                           ;main.c: 87: echo_back = 1;
  3300  0456  0021               	movlb	1	; select bank1
  3301  0457  01A5               	clrf	main@echo_back^(0+128)
  3302  0458  0AA5               	incf	main@echo_back^(0+128),f
  3303                           
  3304                           ;main.c: 88: } else if (buf[2] == 'n') {
  3305  0459  2BDB               	goto	L1
  3306  045A                     l2559:	
  3307  045A  306E               	movlw	110
  3308  045B  0629               	xorwf	(main@buf^(0+128)+2),w
  3309  045C  1D03               	btfss	3,2
  3310  045D  2BDB               	goto	L1
  3311                           
  3312                           ;main.c: 89: can_logging_mode(0, 0);
  3313  045E  01F0               	clrf	can_logging_mode@verbose
  3314  045F  3000               	movlw	0
  3315  0460  318C  245E  3183   	fcall	_can_logging_mode
  3316                           
  3317                           ;main.c: 90: echo_back = 0;
  3318  0463  0021               	movlb	1	; select bank1
  3319  0464  01A5               	clrf	main@echo_back^(0+128)
  3320                           
  3321                           ;main.c: 91: }
  3322                           ;main.c: 92: break;
  3323  0465  2BDB               	goto	L1
  3324  0466                     l2565:	
  3325                           ;main.c: 93: case 'o':
  3326                           
  3327                           
  3328                           ;main.c: 94: if (buf[2] == 'l') {
  3329  0466  306C               	movlw	108
  3330  0467  0629               	xorwf	(main@buf^(0+128)+2),w
  3331  0468  1D03               	btfss	3,2
  3332  0469  2C6C               	goto	l2569
  3333                           
  3334                           ;main.c: 95: can_ope_mode(0b01000000);
  3335  046A  3040               	movlw	64
  3336  046B  2C72               	goto	L3
  3337  046C                     l2569:	
  3338                           ;main.c: 96: } else if (buf[2] == 'n') {
  3339                           
  3340  046C  306E               	movlw	110
  3341  046D  0021               	movlb	1	; select bank1
  3342  046E  0629               	xorwf	(main@buf^(0+128)+2),w
  3343  046F  1D03               	btfss	3,2
  3344  0470  2C75               	goto	l2573
  3345                           
  3346                           ;main.c: 97: can_ope_mode(0b00000000);
  3347  0471  3000               	movlw	0
  3348  0472                     L3:	
  3349  0472  318E  2668  3183   	fcall	_can_ope_mode
  3350  0475                     l2573:	
  3351                           
  3352                           ;main.c: 98: }
  3353                           ;main.c: 99: if (buf[3] == '\0') {
  3354  0475  0021               	movlb	1	; select bank1
  3355  0476  082A               	movf	(main@buf^(0+128)+3),w
  3356  0477  1D03               	btfss	3,2
  3357  0478  2C7C               	goto	l2577
  3358                           
  3359                           ;main.c: 100: output_format.with_sid = 0;
  3360  0479  0020               	movlb	0	; select bank0
  3361  047A  01E6               	clrf	_output_format
  3362  047B  2C87               	goto	l2583
  3363  047C                     l2577:	
  3364                           ;main.c: 102: } else if (buf[3] == 's' && buf[4] == '\0') {
  3365                           
  3366                           ;main.c: 101: output_format.hex_output = 0;
  3367                           
  3368  047C  3073               	movlw	115
  3369  047D  0021               	movlb	1	; select bank1
  3370  047E  062A               	xorwf	(main@buf^(0+128)+3),w
  3371  047F  1D03               	btfss	3,2
  3372  0480  2C89               	goto	l2585
  3373  0481  082B               	movf	(main@buf^(0+128)+4),w
  3374  0482  1D03               	btfss	3,2
  3375  0483  2C89               	goto	l2585
  3376                           
  3377                           ;main.c: 103: output_format.with_sid = 1;
  3378  0484  0020               	movlb	0	; select bank0
  3379  0485  01E6               	clrf	_output_format
  3380  0486  0AE6               	incf	_output_format,f
  3381  0487                     l2583:	
  3382                           
  3383                           ;main.c: 104: output_format.hex_output = 0;
  3384  0487  01E7               	clrf	_output_format+1
  3385                           
  3386                           ;main.c: 105: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3387  0488  2BDB               	goto	L1
  3388  0489                     l2585:	
  3389  0489  3068               	movlw	104
  3390  048A  0021               	movlb	1	; select bank1
  3391  048B  062A               	xorwf	(main@buf^(0+128)+3),w
  3392  048C  1D03               	btfss	3,2
  3393  048D  2BDB               	goto	L1
  3394  048E  082B               	movf	(main@buf^(0+128)+4),w
  3395  048F  1D03               	btfss	3,2
  3396  0490  2BDB               	goto	L1
  3397                           
  3398                           ;main.c: 106: output_format.with_sid = 0;
  3399  0491  0020               	movlb	0	; select bank0
  3400  0492  01E6               	clrf	_output_format
  3401                           
  3402                           ;main.c: 107: output_format.hex_output = 1;
  3403  0493  01E7               	clrf	_output_format+1
  3404  0494  0AE7               	incf	_output_format+1,f
  3405                           
  3406                           ;main.c: 108: }
  3407                           ;main.c: 109: break;
  3408  0495  2BDB               	goto	L1
  3409  0496                     l2593:	
  3410                           ;main.c: 110: case 'b':
  3411                           
  3412                           
  3413                           ;main.c: 111: bpr = atoi(&buf[2]);
  3414  0496  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3415  0497  318F  271A  3183   	fcall	_atoi
  3416  049A  0876               	movf	?_atoi,w
  3417  049B  0020               	movlb	0	; select bank0
  3418  049C  00E0               	movwf	??_main
  3419  049D  0860               	movf	??_main,w
  3420  049E  0021               	movlb	1	; select bank1
  3421  049F  00A1               	movwf	main@bpr^(0+128)
  3422                           
  3423                           ;main.c: 112: can_baudrate(bpr);
  3424  04A0  0821               	movf	main@bpr^(0+128),w
  3425  04A1  318D  2591  3183   	fcall	_can_baudrate
  3426                           
  3427                           ;main.c: 113: break;
  3428  04A4  2BDB               	goto	L1
  3429  04A5                     l2597:	
  3430                           ;main.c: 114: case 'm':
  3431                           
  3432                           
  3433                           ;main.c: 115: case 'f':
  3434                           ;main.c: 116: n = buf[2] - 0x30;
  3435  04A5  0021               	movlb	1	; select bank1
  3436  04A6  0829               	movf	(main@buf^(0+128)+2),w
  3437  04A7  3ED0               	addlw	208
  3438  04A8  0020               	movlb	0	; select bank0
  3439  04A9  00E0               	movwf	??_main
  3440  04AA  0860               	movf	??_main,w
  3441  04AB  0021               	movlb	1	; select bank1
  3442  04AC  00A6               	movwf	main@n^(0+128)
  3443                           
  3444                           ;main.c: 117: mask = atoi(&buf[3]);
  3445  04AD  30AA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3446  04AE  318F  271A  3183   	fcall	_atoi
  3447  04B1  0877               	movf	?_atoi+1,w
  3448  04B2  0021               	movlb	1	; select bank1
  3449  04B3  00A4               	movwf	(main@mask+1)^(0+128)
  3450  04B4  0876               	movf	?_atoi,w
  3451  04B5  00A3               	movwf	main@mask^(0+128)
  3452                           
  3453                           ;main.c: 118: if (cmd == 'm') {
  3454  04B6  306D               	movlw	109
  3455  04B7  0631               	xorwf	main@cmd^(0+128),w
  3456  04B8  1D03               	btfss	3,2
  3457  04B9  2CCA               	goto	l2605
  3458                           
  3459                           ;main.c: 119: can_set_mask(0, n, mask);
  3460  04BA  0826               	movf	main@n^(0+128),w
  3461  04BB  0020               	movlb	0	; select bank0
  3462  04BC  00E0               	movwf	??_main
  3463  04BD  0860               	movf	??_main,w
  3464  04BE  00BF               	movwf	can_set_mask@n
  3465  04BF  0021               	movlb	1	; select bank1
  3466  04C0  0823               	movf	main@mask^(0+128),w
  3467  04C1  0020               	movlb	0	; select bank0
  3468  04C2  00E1               	movwf	??_main+1
  3469  04C3  0861               	movf	??_main+1,w
  3470  04C4  00C0               	movwf	can_set_mask@mask
  3471  04C5  3000               	movlw	0
  3472  04C6  3180  203F  3183   	fcall	_can_set_mask
  3473                           
  3474                           ;main.c: 120: } else if (cmd == 'f') {
  3475  04C9  2BDB               	goto	L1
  3476  04CA                     l2605:	
  3477  04CA  3066               	movlw	102
  3478  04CB  0021               	movlb	1	; select bank1
  3479  04CC  0631               	xorwf	main@cmd^(0+128),w
  3480  04CD  1D03               	btfss	3,2
  3481  04CE  2BDB               	goto	L1
  3482                           
  3483                           ;main.c: 121: can_set_mask(1, n, mask);
  3484  04CF  0826               	movf	main@n^(0+128),w
  3485  04D0  0020               	movlb	0	; select bank0
  3486  04D1  00E0               	movwf	??_main
  3487  04D2  0860               	movf	??_main,w
  3488  04D3  00BF               	movwf	can_set_mask@n
  3489  04D4  0021               	movlb	1	; select bank1
  3490  04D5  0823               	movf	main@mask^(0+128),w
  3491  04D6  0020               	movlb	0	; select bank0
  3492  04D7  00E1               	movwf	??_main+1
  3493  04D8  0861               	movf	??_main+1,w
  3494  04D9  00C0               	movwf	can_set_mask@mask
  3495  04DA  3001               	movlw	1
  3496  04DB  3180  203F  3183   	fcall	_can_set_mask
  3497                           
  3498                           ;main.c: 122: }
  3499                           ;main.c: 123: break;
  3500  04DE  2BDB               	goto	L1
  3501  04DF                     l2609:	
  3502                           ;main.c: 124: case 'a':
  3503                           
  3504                           
  3505                           ;main.c: 125: can_abort();
  3506  04DF  318D  2536  3183   	fcall	_can_abort
  3507                           
  3508                           ;main.c: 126: break;
  3509  04E2  2BDB               	goto	L1
  3510  04E3                     l2611:	
  3511                           ;main.c: 127: case 'd':
  3512                           
  3513                           
  3514                           ;main.c: 128: can_dump_registers();
  3515  04E3  3181  2173  3183   	fcall	_can_dump_registers
  3516                           
  3517                           ;main.c: 129: break;
  3518  04E6  2BDB               	goto	L1
  3519  04E7                     l2613:	
  3520                           ;main.c: 130: case '@':
  3521                           
  3522                           
  3523                           ;main.c: 131: can_send(&buf[1], idx - 1);
  3524  04E7  0021               	movlb	1	; select bank1
  3525  04E8  0832               	movf	main@idx^(0+128),w
  3526  04E9  3EFF               	addlw	255
  3527  04EA  0020               	movlb	0	; select bank0
  3528  04EB  00E0               	movwf	??_main
  3529  04EC  0860               	movf	??_main,w
  3530  04ED  00BB               	movwf	can_send@dlc
  3531  04EE  30A8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3532  04EF  3182  227F  3183   	fcall	_can_send
  3533                           
  3534                           ;main.c: 132: break;
  3535  04F2  2BDB               	goto	L1
  3536  04F3                     l2615:	
  3537                           ;main.c: 133: case 'h':
  3538                           
  3539                           
  3540                           ;main.c: 134: printf("--- UART2CAN HELP ---\n");
  3541  04F3  3003               	movlw	low (STR_7| (0+32768))
  3542  04F4  0020               	movlb	0	; select bank0
  3543  04F5  00A2               	movwf	printf@f
  3544  04F6  3092               	movlw	high (STR_7| (0+32768))
  3545  04F7  00A3               	movwf	printf@f+1
  3546  04F8  3185  25B3  3183   	fcall	_printf
  3547                           
  3548                           ;main.c: 135: printf("[Set standard identifier] @i<standard identifier>\n");
  3549  04FB  30E4               	movlw	low (STR_8| (0+32768))
  3550  04FC  0020               	movlb	0	; select bank0
  3551  04FD  00A2               	movwf	printf@f
  3552  04FE  3090               	movlw	high (STR_8| (0+32768))
  3553  04FF  00A3               	movwf	printf@f+1
  3554  0500  3185  25B3  3183   	fcall	_printf
  3555                           
  3556                           ;main.c: 136: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3557  0503  3000               	movlw	low (STR_9| (0+32768))
  3558  0504  0020               	movlb	0	; select bank0
  3559  0505  00A2               	movwf	printf@f
  3560  0506  3090               	movlw	high (STR_9| (0+32768))
  3561  0507  00A3               	movwf	printf@f+1
  3562  0508  3185  25B3  3183   	fcall	_printf
  3563                           
  3564                           ;main.c: 137: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3565  050B  30AE               	movlw	low (STR_10| (0+32768))
  3566  050C  0020               	movlb	0	; select bank0
  3567  050D  00A2               	movwf	printf@f
  3568  050E  3090               	movlw	high (STR_10| (0+32768))
  3569  050F  00A3               	movwf	printf@f+1
  3570  0510  3185  25B3  3183   	fcall	_printf
  3571                           
  3572                           ;main.c: 138: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3573  0513  303B               	movlw	low (STR_11| (0+32768))
  3574  0514  0020               	movlb	0	; select bank0
  3575  0515  00A2               	movwf	printf@f
  3576  0516  3090               	movlw	high (STR_11| (0+32768))
  3577  0517  00A3               	movwf	printf@f+1
  3578  0518  3185  25B3  3183   	fcall	_printf
  3579                           
  3580                           ;main.c: 139: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3581  051B  306D               	movlw	low (STR_12| (0+32768))
  3582  051C  0020               	movlb	0	; select bank0
  3583  051D  00A2               	movwf	printf@f
  3584  051E  3091               	movlw	high (STR_12| (0+32768))
  3585  051F  00A3               	movwf	printf@f+1
  3586  0520  3185  25B3  3183   	fcall	_printf
  3587                           
  3588                           ;main.c: 140: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3589  0523  3043               	movlw	low (STR_13| (0+32768))
  3590  0524  0020               	movlb	0	; select bank0
  3591  0525  00A2               	movwf	printf@f
  3592  0526  3091               	movlw	high (STR_13| (0+32768))
  3593  0527  00A3               	movwf	printf@f+1
  3594  0528  3185  25B3  3183   	fcall	_printf
  3595                           
  3596                           ;main.c: 141: printf("[Set baud rate] @b<bpr>\n");
  3597  052B  30D3               	movlw	low (STR_14| (0+32768))
  3598  052C  0020               	movlb	0	; select bank0
  3599  052D  00A2               	movwf	printf@f
  3600  052E  3091               	movlw	high (STR_14| (0+32768))
  3601  052F  00A3               	movwf	printf@f+1
  3602  0530  3185  25B3  3183   	fcall	_printf
  3603                           
  3604                           ;main.c: 142: printf("[Abort all pending transmissions] @a\n");
  3605  0533  3093               	movlw	low (STR_15| (0+32768))
  3606  0534  0020               	movlb	0	; select bank0
  3607  0535  00A2               	movwf	printf@f
  3608  0536  3091               	movlw	high (STR_15| (0+32768))
  3609  0537  00A3               	movwf	printf@f+1
  3610  0538  3185  25B3  3183   	fcall	_printf
  3611                           
  3612                           ;main.c: 143: printf("[Dump registers] @d\n");
  3613  053B  3045               	movlw	low (STR_16| (0+32768))
  3614  053C  0020               	movlb	0	; select bank0
  3615  053D  00A2               	movwf	printf@f
  3616  053E  3092               	movlw	high (STR_16| (0+32768))
  3617  053F  00A3               	movwf	printf@f+1
  3618  0540  3185  25B3  3183   	fcall	_printf
  3619                           
  3620                           ;main.c: 144: printf("[Send message] <message>\n");
  3621  0543  30B9               	movlw	low (STR_17| (0+32768))
  3622  0544  0020               	movlb	0	; select bank0
  3623  0545  00A2               	movwf	printf@f
  3624  0546  3091               	movlw	high (STR_17| (0+32768))
  3625  0547  00A3               	movwf	printf@f+1
  3626  0548  3185  25B3  3183   	fcall	_printf
  3627                           
  3628                           ;main.c: 145: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3629  054B  3075               	movlw	low (STR_18| (0+32768))
  3630  054C  0020               	movlb	0	; select bank0
  3631  054D  00A2               	movwf	printf@f
  3632  054E  3090               	movlw	high (STR_18| (0+32768))
  3633  054F  00A3               	movwf	printf@f+1
  3634  0550  3185  25B3  3183   	fcall	_printf
  3635                           
  3636                           ;main.c: 146: printf("[Receive message] <message> will be output\n");
  3637  0553  3017               	movlw	low (STR_19| (0+32768))
  3638  0554  0020               	movlb	0	; select bank0
  3639  0555  00A2               	movwf	printf@f
  3640  0556  3091               	movlw	high (STR_19| (0+32768))
  3641  0557  00A3               	movwf	printf@f+1
  3642  0558  3185  25B3  3183   	fcall	_printf
  3643                           
  3644                           ;main.c: 147: printf("[Show this help]: @h\n");
  3645  055B  301A               	movlw	low (STR_20| (0+32768))
  3646  055C  0020               	movlb	0	; select bank0
  3647  055D  00A2               	movwf	printf@f
  3648  055E  3092               	movlw	high (STR_20| (0+32768))
  3649  055F  00A3               	movwf	printf@f+1
  3650  0560  3185  25B3  3183   	fcall	_printf
  3651                           
  3652                           ;main.c: 149: }
  3653                           
  3654                           ;main.c: 148: break;
  3655  0563  2BDB               	goto	L1
  3656  0564                     l2619:	
  3657  0564  0021               	movlb	1	; select bank1
  3658  0565  0831               	movf	main@cmd^(0+128),w
  3659                           
  3660                           ; Switch size 1, requested type "space"
  3661                           ; Number of cases is 10, Range of values is 64 to 118
  3662                           ; switch strategies available:
  3663                           ; Name         Instructions Cycles
  3664                           ; simple_byte           31    16 (average)
  3665                           ; direct_byte          119     9 (fixed)
  3666                           ; jumptable            263     9 (fixed)
  3667                           ;	Chosen strategy is simple_byte
  3668  0566  3A40               	xorlw	64	; case 64
  3669  0567  1903               	skipnz
  3670  0568  2CE7               	goto	l2613
  3671  0569  3A21               	xorlw	33	; case 97
  3672  056A  1903               	skipnz
  3673  056B  2CDF               	goto	l2609
  3674  056C  3A03               	xorlw	3	; case 98
  3675  056D  1903               	skipnz
  3676  056E  2C96               	goto	l2593
  3677  056F  3A06               	xorlw	6	; case 100
  3678  0570  1903               	skipnz
  3679  0571  2CE3               	goto	l2611
  3680  0572  3A02               	xorlw	2	; case 102
  3681  0573  1903               	skipnz
  3682  0574  2CA5               	goto	l2597
  3683  0575  3A0E               	xorlw	14	; case 104
  3684  0576  1903               	skipnz
  3685  0577  2CF3               	goto	l2615
  3686  0578  3A01               	xorlw	1	; case 105
  3687  0579  1903               	skipnz
  3688  057A  2C2D               	goto	l2543
  3689  057B  3A04               	xorlw	4	; case 109
  3690  057C  1903               	skipnz
  3691  057D  2CA5               	goto	l2597
  3692  057E  3A02               	xorlw	2	; case 111
  3693  057F  1903               	skipnz
  3694  0580  2C66               	goto	l2565
  3695  0581  3A19               	xorlw	25	; case 118
  3696  0582  1903               	skipnz
  3697  0583  2C43               	goto	l2547
  3698  0584  2D8F               	goto	l2623
  3699                           
  3700                           ;main.c: 150: } else {
  3701  0585  2BDB               	goto	L1
  3702  0586                     l2621:	
  3703                           
  3704                           ;main.c: 151: can_send(buf, idx);
  3705  0586  0832               	movf	main@idx^(0+128),w
  3706  0587  0020               	movlb	0	; select bank0
  3707  0588  00E0               	movwf	??_main
  3708  0589  0860               	movf	??_main,w
  3709  058A  00BB               	movwf	can_send@dlc
  3710  058B  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3711  058C  3182  227F  3183   	fcall	_can_send
  3712  058F                     l2623:	
  3713  058F  2BDB               	goto	L1
  3714  0590                     l2625:	
  3715                           ;main.c: 155: } else if (++idx > max_idx) {
  3716                           
  3717                           ;main.c: 152: }
  3718                           ;main.c: 153: idx = 0;
  3719                           
  3720  0590  3001               	movlw	1
  3721  0591  0020               	movlb	0	; select bank0
  3722  0592  00E0               	movwf	??_main
  3723  0593  0860               	movf	??_main,w
  3724  0594  0021               	movlb	1	; select bank1
  3725  0595  07B2               	addwf	main@idx^(0+128),f
  3726  0596  3009               	movlw	low (_max_idx| (0+32768))
  3727  0597  0084               	movwf	4
  3728  0598  3094               	movlw	high (_max_idx| (0+32768))
  3729  0599  0085               	movwf	5
  3730  059A  0800               	movf	0,w	;code access
  3731  059B  0020               	movlb	0	; select bank0
  3732  059C  00E1               	movwf	??_main+1
  3733  059D  0021               	movlb	1	; select bank1
  3734  059E  0832               	movf	main@idx^(0+128),w
  3735  059F  0020               	movlb	0	; select bank0
  3736  05A0  0261               	subwf	??_main+1,w
  3737  05A1  1803               	skipnc
  3738  05A2  2BDD               	goto	l2521
  3739                           
  3740                           ;main.c: 156: buf[idx] = '\0';
  3741  05A3  0021               	movlb	1	; select bank1
  3742  05A4  0832               	movf	main@idx^(0+128),w
  3743  05A5  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3744  05A6  0086               	movwf	6
  3745  05A7  0187               	clrf	7
  3746  05A8  0181               	clrf	1
  3747                           
  3748                           ;main.c: 157: can_send(buf, idx);
  3749  05A9  0832               	movf	main@idx^(0+128),w
  3750  05AA  0020               	movlb	0	; select bank0
  3751  05AB  00E0               	movwf	??_main
  3752  05AC  0860               	movf	??_main,w
  3753  05AD  00BB               	movwf	can_send@dlc
  3754  05AE  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3755  05AF  3182  227F  3183   	fcall	_can_send
  3756  05B2  2BDB               	goto	L1
  3757  05B3                     __end_of_main:	
  3758                           ;main.c: 158: idx = 0;
  3759                           
  3760                           
  3761                           	psect	text1
  3762  0E12                     __ptext1:	
  3763 ;; *************** function _can_status_check *****************
  3764 ;; Defined at:
  3765 ;;		line 249 in file "mcp2515.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  status          1   63[BANK0 ] unsigned char 
  3770 ;;  bytes_writte    1   62[BANK0 ] unsigned char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      unsigned char 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;Total ram usage:        4 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    5
  3787 ;; This function calls:
  3788 ;;		_SPI_exchange
  3789 ;;		_printf
  3790 ;;		_receive
  3791 ;;		_txf_clear
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _can_status_check
  3799  0E12                     _can_status_check:	
  3800                           
  3801                           ;mcp2515.c: 251: buf[0] = 0b10100000;
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3805  0E12  30A0               	movlw	160
  3806  0E13  0020               	movlb	0	; select bank0
  3807  0E14  00DC               	movwf	??_can_status_check
  3808  0E15  085C               	movf	??_can_status_check,w
  3809  0E16  0021               	movlb	1	; select bank1
  3810  0E17  00B3               	movwf	_buf^(0+128)
  3811                           
  3812                           ;mcp2515.c: 252: buf[1] = 0x00;
  3813  0E18  01B4               	clrf	(_buf^(0+128)+1)
  3814                           
  3815                           ;mcp2515.c: 253: uint8_t bytes_written = SPI_exchange(buf, 2);
  3816  0E19  3002               	movlw	2
  3817  0E1A  0020               	movlb	0	; select bank0
  3818  0E1B  00DC               	movwf	??_can_status_check
  3819  0E1C  085C               	movf	??_can_status_check,w
  3820  0E1D  00F8               	movwf	SPI_exchange@len
  3821  0E1E  30B3               	movlw	(low (_buf| 0))& (0+255)
  3822  0E1F  318C  2486  318E   	fcall	_SPI_exchange
  3823  0E22  0020               	movlb	0	; select bank0
  3824  0E23  00DD               	movwf	??_can_status_check+1
  3825  0E24  085D               	movf	??_can_status_check+1,w
  3826  0E25  00DE               	movwf	can_status_check@bytes_written
  3827                           
  3828                           ;mcp2515.c: 254: uint8_t status = buf[1];
  3829  0E26  0021               	movlb	1	; select bank1
  3830  0E27  0834               	movf	(_buf^(0+128)+1),w
  3831  0E28  0020               	movlb	0	; select bank0
  3832  0E29  00DC               	movwf	??_can_status_check
  3833  0E2A  085C               	movf	??_can_status_check,w
  3834  0E2B  00DF               	movwf	can_status_check@status
  3835                           
  3836                           ;mcp2515.c: 255: if (status == 0x00) {
  3837  0E2C  085F               	movf	can_status_check@status,w
  3838  0E2D  1D03               	btfss	3,2
  3839  0E2E  2E31               	goto	l332
  3840                           
  3841                           ;mcp2515.c: 256: return 1;
  3842  0E2F  3001               	movlw	1
  3843  0E30  0008               	return
  3844  0E31                     l332:	
  3845                           ;mcp2515.c: 257: } else if ((status & 0b00000010) > 0) {
  3846                           
  3847  0E31  1CDF               	btfss	can_status_check@status,1
  3848  0E32  2E42               	goto	l335
  3849                           
  3850                           ;mcp2515.c: 258: if (mode.debug) printf("RX1IF is on\n");
  3851  0E33  0862               	movf	_mode,w
  3852  0E34  1903               	btfsc	3,2
  3853  0E35  2E3D               	goto	l336
  3854  0E36  3099               	movlw	low (STR_35| (0+32768))
  3855  0E37  00A2               	movwf	printf@f
  3856  0E38  3093               	movlw	high (STR_35| (0+32768))
  3857  0E39  00A3               	movwf	printf@f+1
  3858  0E3A  3185  25B3  318E   	fcall	_printf
  3859  0E3D                     l336:	
  3860                           
  3861                           ;mcp2515.c: 259: receive(1);
  3862  0E3D  3001               	movlw	1
  3863  0E3E  3180  20BF  318E   	fcall	_receive
  3864                           
  3865                           ;mcp2515.c: 260: } else if ((status & 0b00000001) > 0) {
  3866  0E41  2E61               	goto	l2285
  3867  0E42                     l335:	
  3868  0E42  1C5F               	btfss	can_status_check@status,0
  3869  0E43  2E53               	goto	l338
  3870                           
  3871                           ;mcp2515.c: 261: if (mode.debug) printf("RX0IF is on\n");
  3872  0E44  0862               	movf	_mode,w
  3873  0E45  1903               	btfsc	3,2
  3874  0E46  2E4E               	goto	l339
  3875  0E47  308C               	movlw	low (STR_36| (0+32768))
  3876  0E48  00A2               	movwf	printf@f
  3877  0E49  3093               	movlw	high (STR_36| (0+32768))
  3878  0E4A  00A3               	movwf	printf@f+1
  3879  0E4B  3185  25B3  318E   	fcall	_printf
  3880  0E4E                     l339:	
  3881                           
  3882                           ;mcp2515.c: 262: receive(0);
  3883  0E4E  3000               	movlw	0
  3884  0E4F  3180  20BF  318E   	fcall	_receive
  3885                           
  3886                           ;mcp2515.c: 263: } else if ((status & 0b00001000) > 0) {
  3887  0E52  2E61               	goto	l2285
  3888  0E53                     l338:	
  3889  0E53  1DDF               	btfss	can_status_check@status,3
  3890  0E54  2E57               	goto	l341
  3891                           
  3892                           ;mcp2515.c: 264: txf_clear(0);
  3893  0E55  3000               	movlw	0
  3894  0E56  2E5E               	goto	L4
  3895  0E57                     l341:	
  3896                           ;mcp2515.c: 265: } else if ((status & 0b00100000) > 0) {
  3897                           
  3898  0E57  1EDF               	btfss	can_status_check@status,5
  3899  0E58  2E5B               	goto	l343
  3900                           
  3901                           ;mcp2515.c: 266: txf_clear(1);
  3902  0E59  3001               	movlw	1
  3903  0E5A  2E5E               	goto	L4
  3904  0E5B                     l343:	
  3905                           ;mcp2515.c: 267: } else if ((status & 0b10000000) > 0) {
  3906                           
  3907  0E5B  1FDF               	btfss	can_status_check@status,7
  3908  0E5C  2E61               	goto	l2285
  3909                           
  3910                           ;mcp2515.c: 268: txf_clear(2);
  3911  0E5D  3002               	movlw	2
  3912  0E5E                     L4:	
  3913  0E5E  318D  2563  318E   	fcall	_txf_clear
  3914  0E61                     l2285:	
  3915                           
  3916                           ;mcp2515.c: 269: }
  3917                           ;mcp2515.c: 270: if ((status & 0b00010000) > 0) {
  3918  0E61  0020               	movlb	0	; select bank0
  3919  0E62  1E5F               	btfss	can_status_check@status,4
  3920  0E63  2E66               	goto	l2293
  3921                           
  3922                           ;mcp2515.c: 271: return 0;
  3923  0E64  3000               	movlw	0
  3924                           
  3925                           ;mcp2515.c: 272: } else {
  3926  0E65  0008               	return
  3927  0E66                     l2293:	
  3928                           
  3929                           ;mcp2515.c: 273: return 1;
  3930  0E66  3001               	movlw	1
  3931  0E67  0008               	return
  3932  0E68                     __end_of_can_status_check:	
  3933                           
  3934                           	psect	text2
  3935  0D63                     __ptext2:	
  3936 ;; *************** function _txf_clear *****************
  3937 ;; Defined at:
  3938 ;;		line 129 in file "mcp2515.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  n               1    wreg     unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  n               1    4[BANK0 ] unsigned char 
  3943 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  3944 ;;  mask            1    2[BANK0 ] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      unsigned char 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;Total ram usage:        5 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    3
  3961 ;; This function calls:
  3962 ;;		_SPI_exchange
  3963 ;; This function is called by:
  3964 ;;		_can_status_check
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           
  3969                           ;psect for function _txf_clear
  3970  0D63                     _txf_clear:	
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3974                           ;txf_clear@n stored from wreg
  3975  0D63  0020               	movlb	0	; select bank0
  3976  0D64  00A4               	movwf	txf_clear@n
  3977                           
  3978                           ;mcp2515.c: 130: uint8_t mask = 0b00000001 << (n + 2);
  3979  0D65  3001               	movlw	1
  3980  0D66  00A0               	movwf	??_txf_clear
  3981  0D67  0824               	movf	txf_clear@n,w
  3982  0D68  3E02               	addlw	2
  3983  0D69  0A89               	incf	9,f
  3984  0D6A  2D6C               	goto	u1824
  3985  0D6B                     u1825:	
  3986  0D6B  35A0               	lslf	??_txf_clear,f
  3987  0D6C                     u1824:	
  3988  0D6C  0B89               	decfsz	9,f
  3989  0D6D  2D6B               	goto	u1825
  3990  0D6E  0820               	movf	??_txf_clear,w
  3991  0D6F  00A1               	movwf	??_txf_clear+1
  3992  0D70  0821               	movf	??_txf_clear+1,w
  3993  0D71  00A2               	movwf	txf_clear@mask
  3994                           
  3995                           ;mcp2515.c: 131: buf[0] =0b00000101;
  3996  0D72  3005               	movlw	5
  3997  0D73  00A0               	movwf	??_txf_clear
  3998  0D74  0820               	movf	??_txf_clear,w
  3999  0D75  0021               	movlb	1	; select bank1
  4000  0D76  00B3               	movwf	_buf^(0+128)
  4001                           
  4002                           ;mcp2515.c: 132: buf[1] = 0x2c;
  4003  0D77  302C               	movlw	44
  4004  0D78  0020               	movlb	0	; select bank0
  4005  0D79  00A0               	movwf	??_txf_clear
  4006  0D7A  0820               	movf	??_txf_clear,w
  4007  0D7B  0021               	movlb	1	; select bank1
  4008  0D7C  00B4               	movwf	(_buf^(0+128)+1)
  4009                           
  4010                           ;mcp2515.c: 133: buf[2] = mask;
  4011  0D7D  0020               	movlb	0	; select bank0
  4012  0D7E  0822               	movf	txf_clear@mask,w
  4013  0D7F  00A0               	movwf	??_txf_clear
  4014  0D80  0820               	movf	??_txf_clear,w
  4015  0D81  0021               	movlb	1	; select bank1
  4016  0D82  00B5               	movwf	(_buf^(0+128)+2)
  4017                           
  4018                           ;mcp2515.c: 134: buf[3] = 0x00;
  4019  0D83  01B6               	clrf	(_buf^(0+128)+3)
  4020                           
  4021                           ;mcp2515.c: 135: uint8_t bytes_written = SPI_exchange(buf, 4);
  4022  0D84  3004               	movlw	4
  4023  0D85  0020               	movlb	0	; select bank0
  4024  0D86  00A0               	movwf	??_txf_clear
  4025  0D87  0820               	movf	??_txf_clear,w
  4026  0D88  00F8               	movwf	SPI_exchange@len
  4027  0D89  30B3               	movlw	(low (_buf| 0))& (0+255)
  4028  0D8A  318C  2486         	fcall	_SPI_exchange
  4029  0D8C  0020               	movlb	0	; select bank0
  4030  0D8D  00A1               	movwf	??_txf_clear+1
  4031  0D8E  0821               	movf	??_txf_clear+1,w
  4032  0D8F  00A3               	movwf	txf_clear@bytes_written
  4033                           
  4034                           ;mcp2515.c: 139: return 0;
  4035                           ;	Return value of _txf_clear is never used
  4036                           
  4037                           ;mcp2515.c: 138: } else {
  4038                           
  4039                           ;mcp2515.c: 137: return 1;
  4040                           ;	Return value of _txf_clear is never used
  4041  0D90  0008               	return
  4042  0D91                     __end_of_txf_clear:	
  4043                           
  4044                           	psect	text3
  4045  00BF                     __ptext3:	
  4046 ;; *************** function _receive *****************
  4047 ;; Defined at:
  4048 ;;		line 146 in file "mcp2515.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  n               1    wreg     unsigned char 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  n               1   59[BANK0 ] unsigned char 
  4053 ;;  rx_buf         15   40[BANK0 ] unsigned char [15]
  4054 ;;  sid             2   56[BANK0 ] unsigned int 
  4055 ;;  dlc             1   58[BANK0 ] unsigned char 
  4056 ;;  pbuf            1   55[BANK0 ] PTR unsigned char 
  4057 ;;		 -> receive@rx_buf(15), 
  4058 ;;  bytes_read      1   39[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;Total ram usage:       26 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    4
  4075 ;; This function calls:
  4076 ;;		Absolute function
  4077 ;;		_SPI_exchange
  4078 ;;		_printf
  4079 ;;		_receive_handler
  4080 ;; This function is called by:
  4081 ;;		_can_status_check
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _receive
  4087  00BF                     _receive:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4091                           ;receive@n stored from wreg
  4092  00BF  0020               	movlb	0	; select bank0
  4093  00C0  00DB               	movwf	receive@n
  4094                           
  4095                           ;mcp2515.c: 150: uint8_t rx_buf[15];
  4096                           ;mcp2515.c: 153: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  4097  00C1  085B               	movf	receive@n,w
  4098  00C2  3E05               	addlw	low (_nm| (0+32768))
  4099  00C3  0084               	movwf	4
  4100  00C4  3094               	movlw	high (_nm| (0+32768))
  4101  00C5  1803               	skipnc
  4102  00C6  3E01               	addlw	1
  4103  00C7  0085               	movwf	5
  4104  00C8  0800               	movf	0,w	;code access
  4105  00C9  0709               	addwf	9,w
  4106  00CA  3E90               	addlw	144
  4107  00CB  00C2               	movwf	??_receive
  4108  00CC  0842               	movf	??_receive,w
  4109  00CD  00C8               	movwf	receive@rx_buf
  4110                           
  4111                           ;mcp2515.c: 154: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4112  00CE  300E               	movlw	14
  4113  00CF  00C2               	movwf	??_receive
  4114  00D0  0842               	movf	??_receive,w
  4115  00D1  00F8               	movwf	SPI_exchange@len
  4116  00D2  3048               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4117  00D3  318C  2486  3180   	fcall	_SPI_exchange
  4118  00D6  0020               	movlb	0	; select bank0
  4119  00D7  00C3               	movwf	??_receive+1
  4120  00D8  0843               	movf	??_receive+1,w
  4121  00D9  00C7               	movwf	receive@bytes_read
  4122                           
  4123                           ;mcp2515.c: 155: uint8_t dlc = rx_buf[5];
  4124  00DA  084D               	movf	receive@rx_buf+5,w
  4125  00DB  00C2               	movwf	??_receive
  4126  00DC  0842               	movf	??_receive,w
  4127  00DD  00DA               	movwf	receive@dlc
  4128                           
  4129                           ;mcp2515.c: 156: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4130  00DE  084A               	movf	receive@rx_buf+2,w
  4131  00DF  00C2               	movwf	??_receive
  4132  00E0  3005               	movlw	5
  4133  00E1                     u1835:	
  4134  00E1  36C2               	lsrf	??_receive,f
  4135  00E2  0B89               	decfsz	9,f
  4136  00E3  28E1               	goto	u1835
  4137  00E4  0842               	movf	??_receive,w
  4138  00E5  00C3               	movwf	??_receive+1
  4139  00E6  01C4               	clrf	??_receive+2
  4140  00E7  0849               	movf	receive@rx_buf+1,w
  4141  00E8  00C5               	movwf	??_receive+3
  4142  00E9  01C6               	clrf	??_receive+4
  4143  00EA  35C5               	lslf	??_receive+3,f
  4144  00EB  0DC6               	rlf	??_receive+4,f
  4145  00EC  35C5               	lslf	??_receive+3,f
  4146  00ED  0DC6               	rlf	??_receive+4,f
  4147  00EE  35C5               	lslf	??_receive+3,f
  4148  00EF  0DC6               	rlf	??_receive+4,f
  4149  00F0  0843               	movf	??_receive+1,w
  4150  00F1  0745               	addwf	??_receive+3,w
  4151  00F2  00D8               	movwf	receive@sid
  4152  00F3  0844               	movf	??_receive+2,w
  4153  00F4  3D46               	addwfc	??_receive+4,w
  4154  00F5  00D9               	movwf	receive@sid+1
  4155                           
  4156                           ;mcp2515.c: 157: sid = sid & 0b0000011111111111;
  4157  00F6  30FF               	movlw	255
  4158  00F7  0558               	andwf	receive@sid,w
  4159  00F8  00D8               	movwf	receive@sid
  4160  00F9  3007               	movlw	7
  4161  00FA  0559               	andwf	receive@sid+1,w
  4162  00FB  00D9               	movwf	receive@sid+1
  4163                           
  4164                           ;mcp2515.c: 158: rx_buf[6+dlc] = '\0';
  4165  00FC  085A               	movf	receive@dlc,w
  4166  00FD  3E06               	addlw	6
  4167  00FE  3E48               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4168  00FF  0086               	movwf	6
  4169  0100  0187               	clrf	7
  4170  0101  0181               	clrf	1
  4171                           
  4172                           ;mcp2515.c: 160: if (mode.debug) {
  4173  0102  0862               	movf	_mode,w
  4174  0103  1903               	btfsc	3,2
  4175  0104  295C               	goto	l2187
  4176                           
  4177                           ;mcp2515.c: 161: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4178  0105  3091               	movlw	low (STR_24| (0+32768))
  4179  0106  00A2               	movwf	printf@f
  4180  0107  3092               	movlw	high (STR_24| (0+32768))
  4181  0108  00A3               	movwf	printf@f+1
  4182  0109  085B               	movf	receive@n,w
  4183  010A  00C2               	movwf	??_receive
  4184  010B  01C3               	clrf	??_receive+1
  4185  010C  0842               	movf	??_receive,w
  4186  010D  00A4               	movwf	?_printf+2
  4187  010E  0843               	movf	??_receive+1,w
  4188  010F  00A5               	movwf	?_printf+3
  4189  0110  0849               	movf	receive@rx_buf+1,w
  4190  0111  00C4               	movwf	??_receive+2
  4191  0112  01C5               	clrf	??_receive+3
  4192  0113  0844               	movf	??_receive+2,w
  4193  0114  00A6               	movwf	?_printf+4
  4194  0115  0845               	movf	??_receive+3,w
  4195  0116  00A7               	movwf	?_printf+5
  4196  0117  3185  25B3  3180   	fcall	_printf
  4197                           
  4198                           ;mcp2515.c: 162: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4199  011A  30B3               	movlw	low (STR_25| (0+32768))
  4200  011B  0020               	movlb	0	; select bank0
  4201  011C  00A2               	movwf	printf@f
  4202  011D  3092               	movlw	high (STR_25| (0+32768))
  4203  011E  00A3               	movwf	printf@f+1
  4204  011F  085B               	movf	receive@n,w
  4205  0120  00C2               	movwf	??_receive
  4206  0121  01C3               	clrf	??_receive+1
  4207  0122  0842               	movf	??_receive,w
  4208  0123  00A4               	movwf	?_printf+2
  4209  0124  0843               	movf	??_receive+1,w
  4210  0125  00A5               	movwf	?_printf+3
  4211  0126  084A               	movf	receive@rx_buf+2,w
  4212  0127  00C4               	movwf	??_receive+2
  4213  0128  01C5               	clrf	??_receive+3
  4214  0129  0844               	movf	??_receive+2,w
  4215  012A  00A6               	movwf	?_printf+4
  4216  012B  0845               	movf	??_receive+3,w
  4217  012C  00A7               	movwf	?_printf+5
  4218  012D  3185  25B3  3180   	fcall	_printf
  4219                           
  4220                           ;mcp2515.c: 163: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4221  0130  30D5               	movlw	low (STR_26| (0+32768))
  4222  0131  0020               	movlb	0	; select bank0
  4223  0132  00A2               	movwf	printf@f
  4224  0133  3092               	movlw	high (STR_26| (0+32768))
  4225  0134  00A3               	movwf	printf@f+1
  4226  0135  085B               	movf	receive@n,w
  4227  0136  00C2               	movwf	??_receive
  4228  0137  01C3               	clrf	??_receive+1
  4229  0138  0842               	movf	??_receive,w
  4230  0139  00A4               	movwf	?_printf+2
  4231  013A  0843               	movf	??_receive+1,w
  4232  013B  00A5               	movwf	?_printf+3
  4233  013C  084D               	movf	receive@rx_buf+5,w
  4234  013D  00C4               	movwf	??_receive+2
  4235  013E  01C5               	clrf	??_receive+3
  4236  013F  0844               	movf	??_receive+2,w
  4237  0140  00A6               	movwf	?_printf+4
  4238  0141  0845               	movf	??_receive+3,w
  4239  0142  00A7               	movwf	?_printf+5
  4240  0143  3185  25B3  3180   	fcall	_printf
  4241                           
  4242                           ;mcp2515.c: 164: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4243  0146  3035               	movlw	low (STR_27| (0+32768))
  4244  0147  0020               	movlb	0	; select bank0
  4245  0148  00A2               	movwf	printf@f
  4246  0149  3093               	movlw	high (STR_27| (0+32768))
  4247  014A  00A3               	movwf	printf@f+1
  4248  014B  085B               	movf	receive@n,w
  4249  014C  00C2               	movwf	??_receive
  4250  014D  01C3               	clrf	??_receive+1
  4251  014E  0842               	movf	??_receive,w
  4252  014F  00A4               	movwf	?_printf+2
  4253  0150  0843               	movf	??_receive+1,w
  4254  0151  00A5               	movwf	?_printf+3
  4255  0152  084E               	movf	receive@rx_buf+6,w
  4256  0153  00C4               	movwf	??_receive+2
  4257  0154  01C5               	clrf	??_receive+3
  4258  0155  0844               	movf	??_receive+2,w
  4259  0156  00A6               	movwf	?_printf+4
  4260  0157  0845               	movf	??_receive+3,w
  4261  0158  00A7               	movwf	?_printf+5
  4262  0159  3185  25B3  3180   	fcall	_printf
  4263  015C                     l2187:	
  4264                           
  4265                           ;mcp2515.c: 165: }
  4266                           ;mcp2515.c: 168: uint8_t *pbuf = &rx_buf[6];
  4267  015C  304E               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4268  015D  0020               	movlb	0	; select bank0
  4269  015E  00C2               	movwf	??_receive
  4270  015F  0842               	movf	??_receive,w
  4271  0160  00D7               	movwf	receive@pbuf
  4272                           
  4273                           ;mcp2515.c: 169: handler(sid, pbuf, dlc);
  4274  0161  0858               	movf	receive@sid,w
  4275  0162  00C2               	movwf	??_receive
  4276  0163  0842               	movf	??_receive,w
  4277  0164  00BB               	movwf	receive_handler@sid
  4278  0165  0857               	movf	receive@pbuf,w
  4279  0166  00C3               	movwf	??_receive+1
  4280  0167  0843               	movf	??_receive+1,w
  4281  0168  00BC               	movwf	receive_handler@pbuf
  4282  0169  085A               	movf	receive@dlc,w
  4283  016A  00C4               	movwf	??_receive+2
  4284  016B  0844               	movf	??_receive+2,w
  4285  016C  00BD               	movwf	receive_handler@dlc
  4286  016D  086A               	movf	_handler+1,w
  4287  016E  008A               	movwf	10
  4288  016F  0869               	movf	_handler,w
  4289  0170  000A               	callw
  4290  0171  3180               	pagesel	$
  4291  0172  0008               	return
  4292  0173                     __end_of_receive:	
  4293                           
  4294                           	psect	text4
  4295  0EBF                     __ptext4:	
  4296 ;; *************** function _receive_handler *****************
  4297 ;; Defined at:
  4298 ;;		line 24 in file "main.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  sid             1   27[BANK0 ] unsigned char 
  4301 ;;  pbuf            1   28[BANK0 ] PTR unsigned char 
  4302 ;;		 -> receive@rx_buf(15), 
  4303 ;;  dlc             1   29[BANK0 ] unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  i               1   33[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4315 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;Total ram usage:        7 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    3
  4322 ;; This function calls:
  4323 ;;		_printf
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;;		_receive
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _receive_handler
  4332  0EBF                     _receive_handler:	
  4333                           
  4334                           ;main.c: 25: uint8_t i;
  4335                           ;main.c: 26: if (output_format.with_sid) {
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4339  0EBF  0020               	movlb	0	; select bank0
  4340  0EC0  0866               	movf	_output_format,w
  4341  0EC1  1903               	btfsc	3,2
  4342  0EC2  2ED5               	goto	l2067
  4343                           
  4344                           ;main.c: 27: printf("%d,%s\n", sid, pbuf);
  4345  0EC3  30E3               	movlw	low (STR_1| (0+32768))
  4346  0EC4  00A2               	movwf	printf@f
  4347  0EC5  3093               	movlw	high (STR_1| (0+32768))
  4348  0EC6  00A3               	movwf	printf@f+1
  4349  0EC7  083B               	movf	receive_handler@sid,w
  4350  0EC8  00BE               	movwf	??_receive_handler
  4351  0EC9  01BF               	clrf	??_receive_handler+1
  4352  0ECA  083E               	movf	??_receive_handler,w
  4353  0ECB  00A4               	movwf	?_printf+2
  4354  0ECC  083F               	movf	??_receive_handler+1,w
  4355  0ECD  00A5               	movwf	?_printf+3
  4356  0ECE  083C               	movf	receive_handler@pbuf,w
  4357  0ECF  00C0               	movwf	??_receive_handler+2
  4358  0ED0  0840               	movf	??_receive_handler+2,w
  4359  0ED1  00A6               	movwf	low ((?_printf| 0+4))
  4360  0ED2  3185  25B3         	fcall	_printf
  4361                           
  4362                           ;main.c: 28: } else if (output_format.hex_output) {
  4363  0ED4  0008               	return
  4364  0ED5                     l2067:	
  4365  0ED5  0020               	movlb	0	; select bank0
  4366  0ED6  0867               	movf	_output_format+1,w
  4367  0ED7  1903               	btfsc	3,2
  4368  0ED8  2F0E               	goto	l2081
  4369                           
  4370                           ;main.c: 29: printf("%02x:", sid);
  4371  0ED9  30F0               	movlw	low (STR_2| (0+32768))
  4372  0EDA  00A2               	movwf	printf@f
  4373  0EDB  3093               	movlw	high (STR_2| (0+32768))
  4374  0EDC  00A3               	movwf	printf@f+1
  4375  0EDD  083B               	movf	receive_handler@sid,w
  4376  0EDE  00BE               	movwf	??_receive_handler
  4377  0EDF  01BF               	clrf	??_receive_handler+1
  4378  0EE0  083E               	movf	??_receive_handler,w
  4379  0EE1  00A4               	movwf	?_printf+2
  4380  0EE2  083F               	movf	??_receive_handler+1,w
  4381  0EE3  00A5               	movwf	?_printf+3
  4382  0EE4  3185  25B3  318E   	fcall	_printf
  4383                           
  4384                           ;main.c: 30: for(i=0; i<dlc; i++) {
  4385  0EE7  0020               	movlb	0	; select bank0
  4386  0EE8  01C1               	clrf	receive_handler@i
  4387  0EE9                     l2077:	
  4388  0EE9  083D               	movf	receive_handler@dlc,w
  4389  0EEA  0241               	subwf	receive_handler@i,w
  4390  0EEB  1803               	btfsc	3,0
  4391  0EEC  2F07               	goto	l2079
  4392                           
  4393                           ;main.c: 31: printf(" %02x", pbuf[i]);
  4394  0EED  30F6               	movlw	low (STR_3| (0+32768))
  4395  0EEE  00A2               	movwf	printf@f
  4396  0EEF  3093               	movlw	high (STR_3| (0+32768))
  4397  0EF0  00A3               	movwf	printf@f+1
  4398  0EF1  0841               	movf	receive_handler@i,w
  4399  0EF2  073C               	addwf	receive_handler@pbuf,w
  4400  0EF3  00BE               	movwf	??_receive_handler
  4401  0EF4  083E               	movf	??_receive_handler,w
  4402  0EF5  0086               	movwf	6
  4403  0EF6  0187               	clrf	7
  4404  0EF7  0801               	movf	1,w
  4405  0EF8  00BF               	movwf	??_receive_handler+1
  4406  0EF9  01C0               	clrf	??_receive_handler+2
  4407  0EFA  083F               	movf	??_receive_handler+1,w
  4408  0EFB  00A4               	movwf	?_printf+2
  4409  0EFC  0840               	movf	??_receive_handler+2,w
  4410  0EFD  00A5               	movwf	?_printf+3
  4411  0EFE  3185  25B3  318E   	fcall	_printf
  4412  0F01  3001               	movlw	1
  4413  0F02  0020               	movlb	0	; select bank0
  4414  0F03  00BE               	movwf	??_receive_handler
  4415  0F04  083E               	movf	??_receive_handler,w
  4416  0F05  07C1               	addwf	receive_handler@i,f
  4417  0F06  2EE9               	goto	l2077
  4418  0F07                     l2079:	
  4419                           
  4420                           ;main.c: 32: }
  4421                           ;main.c: 33: printf("\n");
  4422  0F07  3018               	movlw	low ((STR_7+21)| (0+32768))
  4423  0F08  00A2               	movwf	printf@f
  4424  0F09  3092               	movlw	high ((STR_7+21)| (0+32768))
  4425  0F0A  00A3               	movwf	printf@f+1
  4426  0F0B  3185  25B3         	fcall	_printf
  4427                           
  4428                           ;main.c: 34: } else {
  4429  0F0D  0008               	return
  4430  0F0E                     l2081:	
  4431                           
  4432                           ;main.c: 35: printf("%s\n", pbuf);
  4433  0F0E  307C               	movlw	low ((STR_34+14)| (0+32768))
  4434  0F0F  0020               	movlb	0	; select bank0
  4435  0F10  00A2               	movwf	printf@f
  4436  0F11  3092               	movlw	high ((STR_34+14)| (0+32768))
  4437  0F12  00A3               	movwf	printf@f+1
  4438  0F13  083C               	movf	receive_handler@pbuf,w
  4439  0F14  00BE               	movwf	??_receive_handler
  4440  0F15  083E               	movf	??_receive_handler,w
  4441  0F16  00A4               	movwf	low ((?_printf| 0+2))
  4442  0F17  3185  25B3         	fcall	_printf
  4443  0F19  0008               	return
  4444  0F1A                     __end_of_receive_handler:	
  4445                           
  4446                           	psect	text5
  4447  003F                     __ptext5:	
  4448 ;; *************** function _can_set_mask *****************
  4449 ;; Defined at:
  4450 ;;		line 105 in file "mcp2515.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  cmd             1    wreg     unsigned char 
  4453 ;;  n               1   31[BANK0 ] unsigned char 
  4454 ;;  mask            1   32[BANK0 ] unsigned char 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  cmd             1   41[BANK0 ] unsigned char 
  4457 ;;  mask_sidl       1   43[BANK0 ] unsigned char 
  4458 ;;  mask_sidh       1   42[BANK0 ] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:       13 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    4
  4475 ;; This function calls:
  4476 ;;		_SPI_exchange
  4477 ;;		_can_ope_mode
  4478 ;;		_printf
  4479 ;; This function is called by:
  4480 ;;		_main
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           
  4485                           ;psect for function _can_set_mask
  4486  003F                     _can_set_mask:	
  4487                           
  4488                           ;incstack = 0
  4489                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4490                           ;can_set_mask@cmd stored from wreg
  4491  003F  0020               	movlb	0	; select bank0
  4492  0040  00C9               	movwf	can_set_mask@cmd
  4493                           
  4494                           ;mcp2515.c: 106: can_ope_mode(0b10000000);
  4495  0041  3080               	movlw	128
  4496  0042  318E  2668  3180   	fcall	_can_ope_mode
  4497                           
  4498                           ;mcp2515.c: 107: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4499  0045  0020               	movlb	0	; select bank0
  4500  0046  0840               	movf	can_set_mask@mask,w
  4501  0047  00C1               	movwf	??_can_set_mask
  4502  0048  3003               	movlw	3
  4503  0049                     u2025:	
  4504  0049  36C1               	lsrf	??_can_set_mask,f
  4505  004A  0B89               	decfsz	9,f
  4506  004B  2849               	goto	u2025
  4507  004C  0841               	movf	??_can_set_mask,w
  4508  004D  00C2               	movwf	??_can_set_mask+1
  4509  004E  0842               	movf	??_can_set_mask+1,w
  4510  004F  00CA               	movwf	can_set_mask@mask_sidh
  4511                           
  4512                           ;mcp2515.c: 108: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4513  0050  0840               	movf	can_set_mask@mask,w
  4514  0051  3907               	andlw	7
  4515  0052  00C1               	movwf	??_can_set_mask
  4516  0053  3004               	movlw	4
  4517  0054                     u2035:	
  4518  0054  35C1               	lslf	??_can_set_mask,f
  4519  0055  3EFF               	addlw	-1
  4520  0056  1D03               	skipz
  4521  0057  2854               	goto	u2035
  4522  0058  3541               	lslf	??_can_set_mask,w
  4523  0059  00C2               	movwf	??_can_set_mask+1
  4524  005A  0842               	movf	??_can_set_mask+1,w
  4525  005B  00CB               	movwf	can_set_mask@mask_sidl
  4526                           
  4527                           ;mcp2515.c: 109: if (mode.debug) {
  4528  005C  0862               	movf	_mode,w
  4529  005D  1903               	btfsc	3,2
  4530  005E  2883               	goto	l2369
  4531                           
  4532                           ;mcp2515.c: 110: if (cmd == 0) {
  4533  005F  0849               	movf	can_set_mask@cmd,w
  4534  0060  1D03               	btfss	3,2
  4535  0061  2866               	goto	l2367
  4536                           
  4537                           ;mcp2515.c: 111: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4538  0062  3030               	movlw	low (STR_22| (0+32768))
  4539  0063  00A2               	movwf	printf@f
  4540  0064  3092               	movlw	high (STR_22| (0+32768))
  4541  0065  286A               	goto	L6
  4542  0066                     l2367:	
  4543                           ;mcp2515.c: 112: } else {
  4544                           
  4545                           
  4546                           ;mcp2515.c: 113: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4547  0066  30EC               	movlw	low (STR_23| (0+32768))
  4548  0067  0020               	movlb	0	; select bank0
  4549  0068  00A2               	movwf	printf@f
  4550  0069  3091               	movlw	high (STR_23| (0+32768))
  4551  006A                     L6:	
  4552  006A  00A3               	movwf	printf@f+1
  4553  006B  083F               	movf	can_set_mask@n,w
  4554  006C  00C1               	movwf	??_can_set_mask
  4555  006D  01C2               	clrf	??_can_set_mask+1
  4556  006E  0841               	movf	??_can_set_mask,w
  4557  006F  00A4               	movwf	?_printf+2
  4558  0070  0842               	movf	??_can_set_mask+1,w
  4559  0071  00A5               	movwf	?_printf+3
  4560  0072  084A               	movf	can_set_mask@mask_sidh,w
  4561  0073  00C3               	movwf	??_can_set_mask+2
  4562  0074  01C4               	clrf	??_can_set_mask+3
  4563  0075  0843               	movf	??_can_set_mask+2,w
  4564  0076  00A6               	movwf	?_printf+4
  4565  0077  0844               	movf	??_can_set_mask+3,w
  4566  0078  00A7               	movwf	?_printf+5
  4567  0079  084B               	movf	can_set_mask@mask_sidl,w
  4568  007A  00C5               	movwf	??_can_set_mask+4
  4569  007B  01C6               	clrf	??_can_set_mask+5
  4570  007C  0845               	movf	??_can_set_mask+4,w
  4571  007D  00A8               	movwf	?_printf+6
  4572  007E  0846               	movf	??_can_set_mask+5,w
  4573  007F  00A9               	movwf	?_printf+7
  4574  0080  3185  25B3  3180   	fcall	_printf
  4575  0083                     l2369:	
  4576                           
  4577                           ;mcp2515.c: 114: }
  4578                           ;mcp2515.c: 115: }
  4579                           ;mcp2515.c: 116: buf[0] = 0b00000010;
  4580  0083  3002               	movlw	2
  4581  0084  0020               	movlb	0	; select bank0
  4582  0085  00C1               	movwf	??_can_set_mask
  4583  0086  0841               	movf	??_can_set_mask,w
  4584  0087  0021               	movlb	1	; select bank1
  4585  0088  00B3               	movwf	_buf^(0+128)
  4586                           
  4587                           ;mcp2515.c: 117: buf[1] = (cmd == 0)? rxmnsidh[n]: rxfnsidh[n];
  4588  0089  0020               	movlb	0	; select bank0
  4589  008A  0849               	movf	can_set_mask@cmd,w
  4590  008B  1903               	btfsc	3,2
  4591  008C  2892               	goto	l2375
  4592  008D  083F               	movf	can_set_mask@n,w
  4593  008E  3EEA               	addlw	low (_rxfnsidh| (0+32768))
  4594  008F  0084               	movwf	4
  4595  0090  3093               	movlw	high (_rxfnsidh| (0+32768))
  4596  0091  2896               	goto	L5
  4597  0092                     l2375:	
  4598  0092  083F               	movf	can_set_mask@n,w
  4599  0093  3E07               	addlw	low (_rxmnsidh| (0+32768))
  4600  0094  0084               	movwf	4
  4601  0095  3094               	movlw	high (_rxmnsidh| (0+32768))
  4602  0096                     L5:	
  4603  0096  1803               	skipnc
  4604  0097  3E01               	addlw	1
  4605  0098  0085               	movwf	5
  4606  0099  0800               	movf	0,w	;code access
  4607  009A  00C1               	movwf	??_can_set_mask
  4608  009B  01C2               	clrf	??_can_set_mask+1
  4609  009C  0841               	movf	??_can_set_mask,w
  4610  009D  00C7               	movwf	_can_set_mask$491
  4611  009E  0842               	movf	??_can_set_mask+1,w
  4612  009F  00C8               	movwf	_can_set_mask$491+1
  4613  00A0  0847               	movf	_can_set_mask$491,w
  4614  00A1  00C1               	movwf	??_can_set_mask
  4615  00A2  0841               	movf	??_can_set_mask,w
  4616  00A3  0021               	movlb	1	; select bank1
  4617  00A4  00B4               	movwf	(_buf^(0+128)+1)
  4618                           
  4619                           ;mcp2515.c: 118: buf[2] = mask_sidh;
  4620  00A5  0020               	movlb	0	; select bank0
  4621  00A6  084A               	movf	can_set_mask@mask_sidh,w
  4622  00A7  00C1               	movwf	??_can_set_mask
  4623  00A8  0841               	movf	??_can_set_mask,w
  4624  00A9  0021               	movlb	1	; select bank1
  4625  00AA  00B5               	movwf	(_buf^(0+128)+2)
  4626                           
  4627                           ;mcp2515.c: 119: buf[3] = mask_sidl;
  4628  00AB  0020               	movlb	0	; select bank0
  4629  00AC  084B               	movf	can_set_mask@mask_sidl,w
  4630  00AD  00C1               	movwf	??_can_set_mask
  4631  00AE  0841               	movf	??_can_set_mask,w
  4632  00AF  0021               	movlb	1	; select bank1
  4633  00B0  00B6               	movwf	(_buf^(0+128)+3)
  4634                           
  4635                           ;mcp2515.c: 121: SPI_exchange(buf, 4);
  4636  00B1  3004               	movlw	4
  4637  00B2  0020               	movlb	0	; select bank0
  4638  00B3  00C1               	movwf	??_can_set_mask
  4639  00B4  0841               	movf	??_can_set_mask,w
  4640  00B5  00F8               	movwf	SPI_exchange@len
  4641  00B6  30B3               	movlw	(low (_buf| 0))& (0+255)
  4642  00B7  318C  2486  3180   	fcall	_SPI_exchange
  4643                           
  4644                           ;mcp2515.c: 123: can_ope_mode(operation_mode);
  4645  00BA  0020               	movlb	0	; select bank0
  4646  00BB  0868               	movf	_operation_mode,w
  4647  00BC  318E  2668         	fcall	_can_ope_mode
  4648  00BE  0008               	return
  4649  00BF                     __end_of_can_set_mask:	
  4650                           
  4651                           	psect	text6
  4652  027F                     __ptext6:	
  4653 ;; *************** function _can_send *****************
  4654 ;; Defined at:
  4655 ;;		line 175 in file "mcp2515.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  data_buf        1    wreg     PTR unsigned char 
  4658 ;;		 -> main@buf(9), 
  4659 ;;  dlc             1   27[BANK0 ] unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  data_buf        1   35[BANK0 ] PTR unsigned char 
  4662 ;;		 -> main@buf(9), 
  4663 ;;  n               1   37[BANK0 ] unsigned char 
  4664 ;;  i               1   36[BANK0 ] unsigned char 
  4665 ;;  status          1   34[BANK0 ] unsigned char 
  4666 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  4667 ;;  len             1   32[BANK0 ] unsigned char 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      unsigned char 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;Total ram usage:       11 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    3
  4684 ;; This function calls:
  4685 ;;		_SPI_exchange
  4686 ;;		_printf
  4687 ;; This function is called by:
  4688 ;;		_main
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _can_send
  4694  027F                     _can_send:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4698                           ;can_send@data_buf stored from wreg
  4699  027F  0020               	movlb	0	; select bank0
  4700  0280  00C3               	movwf	can_send@data_buf
  4701                           
  4702                           ;mcp2515.c: 176: uint8_t i;
  4703                           ;mcp2515.c: 177: uint8_t n = 0;
  4704  0281  01C5               	clrf	can_send@n
  4705                           
  4706                           ;mcp2515.c: 179: buf[0] = 0b10100000;
  4707  0282  30A0               	movlw	160
  4708  0283  00BC               	movwf	??_can_send
  4709  0284  083C               	movf	??_can_send,w
  4710  0285  0021               	movlb	1	; select bank1
  4711  0286  00B3               	movwf	_buf^(0+128)
  4712                           
  4713                           ;mcp2515.c: 180: buf[1] = 0x00;
  4714  0287  01B4               	clrf	(_buf^(0+128)+1)
  4715                           
  4716                           ;mcp2515.c: 181: uint8_t bytes_written = SPI_exchange(buf, 2);
  4717  0288  3002               	movlw	2
  4718  0289  0020               	movlb	0	; select bank0
  4719  028A  00BC               	movwf	??_can_send
  4720  028B  083C               	movf	??_can_send,w
  4721  028C  00F8               	movwf	SPI_exchange@len
  4722  028D  30B3               	movlw	(low (_buf| 0))& (0+255)
  4723  028E  318C  2486  3182   	fcall	_SPI_exchange
  4724  0291  0020               	movlb	0	; select bank0
  4725  0292  00BD               	movwf	??_can_send+1
  4726  0293  083D               	movf	??_can_send+1,w
  4727  0294  00C1               	movwf	can_send@bytes_written
  4728                           
  4729                           ;mcp2515.c: 182: uint8_t status = buf[1];
  4730  0295  0021               	movlb	1	; select bank1
  4731  0296  0834               	movf	(_buf^(0+128)+1),w
  4732  0297  0020               	movlb	0	; select bank0
  4733  0298  00BC               	movwf	??_can_send
  4734  0299  083C               	movf	??_can_send,w
  4735  029A  00C2               	movwf	can_send@status
  4736                           
  4737                           ;mcp2515.c: 183: if ((status & 0b01000000) == 0) {
  4738  029B  1B42               	btfsc	can_send@status,6
  4739  029C  2AAD               	goto	l312
  4740                           
  4741                           ;mcp2515.c: 184: if (mode.debug) printf("TXB2 is idle\n");
  4742  029D  0862               	movf	_mode,w
  4743  029E  1903               	btfsc	3,2
  4744  029F  2AA7               	goto	l2425
  4745  02A0  307E               	movlw	low (STR_28| (0+32768))
  4746  02A1  00A2               	movwf	printf@f
  4747  02A2  3093               	movlw	high (STR_28| (0+32768))
  4748  02A3  00A3               	movwf	printf@f+1
  4749  02A4  3185  25B3  3182   	fcall	_printf
  4750  02A7                     l2425:	
  4751                           
  4752                           ;mcp2515.c: 185: n = 2;
  4753  02A7  3002               	movlw	2
  4754  02A8  0020               	movlb	0	; select bank0
  4755  02A9  00BC               	movwf	??_can_send
  4756  02AA  083C               	movf	??_can_send,w
  4757  02AB  00C5               	movwf	can_send@n
  4758                           
  4759                           ;mcp2515.c: 186: } else if ((status & 0b00010000) == 0) {
  4760  02AC  2ACB               	goto	l2439
  4761  02AD                     l312:	
  4762  02AD  1A42               	btfsc	can_send@status,4
  4763  02AE  2ABD               	goto	l315
  4764                           
  4765                           ;mcp2515.c: 187: if (mode.debug) printf("TXB1 is idle\n");
  4766  02AF  0862               	movf	_mode,w
  4767  02B0  1903               	btfsc	3,2
  4768  02B1  2AB9               	goto	l2431
  4769  02B2  3070               	movlw	low (STR_29| (0+32768))
  4770  02B3  00A2               	movwf	printf@f
  4771  02B4  3093               	movlw	high (STR_29| (0+32768))
  4772  02B5  00A3               	movwf	printf@f+1
  4773  02B6  3185  25B3  3182   	fcall	_printf
  4774  02B9                     l2431:	
  4775                           
  4776                           ;mcp2515.c: 188: n = 1;
  4777  02B9  0020               	movlb	0	; select bank0
  4778  02BA  01C5               	clrf	can_send@n
  4779  02BB  0AC5               	incf	can_send@n,f
  4780                           
  4781                           ;mcp2515.c: 189: } else if ((status & 0b00000100) == 0) {
  4782  02BC  2ACB               	goto	l2439
  4783  02BD                     l315:	
  4784  02BD  1942               	btfsc	can_send@status,2
  4785  02BE  2ACB               	goto	l2439
  4786                           
  4787                           ;mcp2515.c: 190: if (mode.debug) printf("TXB0 is idle\n");
  4788  02BF  0862               	movf	_mode,w
  4789  02C0  1903               	btfsc	3,2
  4790  02C1  2AC9               	goto	l2437
  4791  02C2  3062               	movlw	low (STR_30| (0+32768))
  4792  02C3  00A2               	movwf	printf@f
  4793  02C4  3093               	movlw	high (STR_30| (0+32768))
  4794  02C5  00A3               	movwf	printf@f+1
  4795  02C6  3185  25B3  3182   	fcall	_printf
  4796  02C9                     l2437:	
  4797                           
  4798                           ;mcp2515.c: 191: n = 0;
  4799  02C9  0020               	movlb	0	; select bank0
  4800  02CA  01C5               	clrf	can_send@n
  4801  02CB                     l2439:	
  4802                           
  4803                           ;mcp2515.c: 192: }
  4804                           ;mcp2515.c: 198: buf[0] = 0b01000000 + abc[n];
  4805  02CB  0845               	movf	can_send@n,w
  4806  02CC  3EFF               	addlw	low (_abc| (0+32768))
  4807  02CD  0084               	movwf	4
  4808  02CE  3093               	movlw	high (_abc| (0+32768))
  4809  02CF  1803               	skipnc
  4810  02D0  3E01               	addlw	1
  4811  02D1  0085               	movwf	5
  4812  02D2  0800               	movf	0,w	;code access
  4813  02D3  3E40               	addlw	64
  4814  02D4  00BC               	movwf	??_can_send
  4815  02D5  083C               	movf	??_can_send,w
  4816  02D6  0021               	movlb	1	; select bank1
  4817  02D7  00B3               	movwf	_buf^(0+128)
  4818                           
  4819                           ;mcp2515.c: 200: buf[1] = sid.sidh;
  4820  02D8  0020               	movlb	0	; select bank0
  4821  02D9  0864               	movf	_sid,w
  4822  02DA  00BC               	movwf	??_can_send
  4823  02DB  083C               	movf	??_can_send,w
  4824  02DC  0021               	movlb	1	; select bank1
  4825  02DD  00B4               	movwf	(_buf^(0+128)+1)
  4826                           
  4827                           ;mcp2515.c: 202: buf[2] = sid.sidl;
  4828  02DE  0020               	movlb	0	; select bank0
  4829  02DF  0865               	movf	_sid+1,w
  4830  02E0  00BC               	movwf	??_can_send
  4831  02E1  083C               	movf	??_can_send,w
  4832  02E2  0021               	movlb	1	; select bank1
  4833  02E3  00B5               	movwf	(_buf^(0+128)+2)
  4834                           
  4835                           ;mcp2515.c: 204: buf[3] = 0;
  4836  02E4  01B6               	clrf	(_buf^(0+128)+3)
  4837                           
  4838                           ;mcp2515.c: 206: buf[4] = 0;
  4839  02E5  01B7               	clrf	(_buf^(0+128)+4)
  4840                           
  4841                           ;mcp2515.c: 208: buf[5] = dlc;
  4842  02E6  0020               	movlb	0	; select bank0
  4843  02E7  083B               	movf	can_send@dlc,w
  4844  02E8  00BC               	movwf	??_can_send
  4845  02E9  083C               	movf	??_can_send,w
  4846  02EA  0021               	movlb	1	; select bank1
  4847  02EB  00B8               	movwf	(_buf^(0+128)+5)
  4848                           
  4849                           ;mcp2515.c: 211: for(i=0; i<dlc; i++) {
  4850  02EC  0020               	movlb	0	; select bank0
  4851  02ED  01C4               	clrf	can_send@i
  4852  02EE                     l2461:	
  4853  02EE  083B               	movf	can_send@dlc,w
  4854  02EF  0244               	subwf	can_send@i,w
  4855  02F0  1803               	btfsc	3,0
  4856  02F1  2B1E               	goto	l2463
  4857                           
  4858                           ;mcp2515.c: 212: buf[6+i] = data_buf[i];
  4859  02F2  0844               	movf	can_send@i,w
  4860  02F3  0743               	addwf	can_send@data_buf,w
  4861  02F4  00BC               	movwf	??_can_send
  4862  02F5  083C               	movf	??_can_send,w
  4863  02F6  0086               	movwf	6
  4864  02F7  0187               	clrf	7
  4865  02F8  0801               	movf	1,w
  4866  02F9  00BD               	movwf	??_can_send+1
  4867  02FA  0844               	movf	can_send@i,w
  4868  02FB  3E06               	addlw	6
  4869  02FC  3EB3               	addlw	(low (_buf| 0))& (0+255)
  4870  02FD  0086               	movwf	6
  4871  02FE  0187               	clrf	7
  4872  02FF  083D               	movf	??_can_send+1,w
  4873  0300  0081               	movwf	1
  4874                           
  4875                           ;mcp2515.c: 213: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4876  0301  0862               	movf	_mode,w
  4877  0302  1903               	btfsc	3,2
  4878  0303  2B18               	goto	l2459
  4879  0304  305A               	movlw	low (STR_31| (0+32768))
  4880  0305  00A2               	movwf	printf@f
  4881  0306  3092               	movlw	high (STR_31| (0+32768))
  4882  0307  00A3               	movwf	printf@f+1
  4883  0308  0844               	movf	can_send@i,w
  4884  0309  0743               	addwf	can_send@data_buf,w
  4885  030A  00BC               	movwf	??_can_send
  4886  030B  083C               	movf	??_can_send,w
  4887  030C  0086               	movwf	6
  4888  030D  0187               	clrf	7
  4889  030E  0801               	movf	1,w
  4890  030F  00BD               	movwf	??_can_send+1
  4891  0310  01BE               	clrf	??_can_send+2
  4892  0311  083D               	movf	??_can_send+1,w
  4893  0312  00A4               	movwf	?_printf+2
  4894  0313  083E               	movf	??_can_send+2,w
  4895  0314  00A5               	movwf	?_printf+3
  4896  0315  3185  25B3  3182   	fcall	_printf
  4897  0318                     l2459:	
  4898  0318  3001               	movlw	1
  4899  0319  0020               	movlb	0	; select bank0
  4900  031A  00BC               	movwf	??_can_send
  4901  031B  083C               	movf	??_can_send,w
  4902  031C  07C4               	addwf	can_send@i,f
  4903  031D  2AEE               	goto	l2461
  4904  031E                     l2463:	
  4905                           
  4906                           ;mcp2515.c: 214: }
  4907                           ;mcp2515.c: 217: uint8_t len = 6 + dlc;
  4908  031E  083B               	movf	can_send@dlc,w
  4909  031F  3E06               	addlw	6
  4910  0320  00BC               	movwf	??_can_send
  4911  0321  083C               	movf	??_can_send,w
  4912  0322  00C0               	movwf	can_send@len
  4913                           
  4914                           ;mcp2515.c: 218: uint8_t bytes_written = SPI_exchange(buf, len);
  4915  0323  0840               	movf	can_send@len,w
  4916  0324  00BC               	movwf	??_can_send
  4917  0325  083C               	movf	??_can_send,w
  4918  0326  00F8               	movwf	SPI_exchange@len
  4919  0327  30B3               	movlw	(low (_buf| 0))& (0+255)
  4920  0328  318C  2486  3182   	fcall	_SPI_exchange
  4921  032B  0020               	movlb	0	; select bank0
  4922  032C  00BD               	movwf	??_can_send+1
  4923  032D  083D               	movf	??_can_send+1,w
  4924  032E  00C1               	movwf	can_send@bytes_written
  4925                           
  4926                           ;mcp2515.c: 220: buf[0] = 0b00000011;
  4927  032F  3003               	movlw	3
  4928  0330  00BC               	movwf	??_can_send
  4929  0331  083C               	movf	??_can_send,w
  4930  0332  0021               	movlb	1	; select bank1
  4931  0333  00B3               	movwf	_buf^(0+128)
  4932                           
  4933                           ;mcp2515.c: 221: buf[1] = txbnsidh[n];
  4934  0334  0020               	movlb	0	; select bank0
  4935  0335  0845               	movf	can_send@n,w
  4936  0336  3EFC               	addlw	low (_txbnsidh| (0+32768))
  4937  0337  0084               	movwf	4
  4938  0338  3093               	movlw	high (_txbnsidh| (0+32768))
  4939  0339  1803               	skipnc
  4940  033A  3E01               	addlw	1
  4941  033B  0085               	movwf	5
  4942  033C  0800               	movf	0,w	;code access
  4943  033D  00BC               	movwf	??_can_send
  4944  033E  083C               	movf	??_can_send,w
  4945  033F  0021               	movlb	1	; select bank1
  4946  0340  00B4               	movwf	(_buf^(0+128)+1)
  4947                           
  4948                           ;mcp2515.c: 222: buf[2] = 0x00;
  4949  0341  01B5               	clrf	(_buf^(0+128)+2)
  4950                           
  4951                           ;mcp2515.c: 223: SPI_exchange(buf, 3);
  4952  0342  3003               	movlw	3
  4953  0343  0020               	movlb	0	; select bank0
  4954  0344  00BC               	movwf	??_can_send
  4955  0345  083C               	movf	??_can_send,w
  4956  0346  00F8               	movwf	SPI_exchange@len
  4957  0347  30B3               	movlw	(low (_buf| 0))& (0+255)
  4958  0348  318C  2486  3182   	fcall	_SPI_exchange
  4959                           
  4960                           ;mcp2515.c: 225: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  4961  034B  0020               	movlb	0	; select bank0
  4962  034C  0862               	movf	_mode,w
  4963  034D  1903               	btfsc	3,2
  4964  034E  2B66               	goto	l2479
  4965  034F  30A2               	movlw	low (STR_32| (0+32768))
  4966  0350  00A2               	movwf	printf@f
  4967  0351  3092               	movlw	high (STR_32| (0+32768))
  4968  0352  00A3               	movwf	printf@f+1
  4969  0353  0845               	movf	can_send@n,w
  4970  0354  00BC               	movwf	??_can_send
  4971  0355  01BD               	clrf	??_can_send+1
  4972  0356  083C               	movf	??_can_send,w
  4973  0357  00A4               	movwf	?_printf+2
  4974  0358  083D               	movf	??_can_send+1,w
  4975  0359  00A5               	movwf	?_printf+3
  4976  035A  0021               	movlb	1	; select bank1
  4977  035B  0835               	movf	(_buf^(0+128)+2),w
  4978  035C  0020               	movlb	0	; select bank0
  4979  035D  00BE               	movwf	??_can_send+2
  4980  035E  01BF               	clrf	??_can_send+3
  4981  035F  083E               	movf	??_can_send+2,w
  4982  0360  00A6               	movwf	?_printf+4
  4983  0361  083F               	movf	??_can_send+3,w
  4984  0362  00A7               	movwf	?_printf+5
  4985  0363  3185  25B3  3182   	fcall	_printf
  4986  0366                     l2479:	
  4987                           
  4988                           ;mcp2515.c: 226: buf[0] = 0b00000011;
  4989  0366  3003               	movlw	3
  4990  0367  0020               	movlb	0	; select bank0
  4991  0368  00BC               	movwf	??_can_send
  4992  0369  083C               	movf	??_can_send,w
  4993  036A  0021               	movlb	1	; select bank1
  4994  036B  00B3               	movwf	_buf^(0+128)
  4995                           
  4996                           ;mcp2515.c: 227: buf[1] = txbnsidh[n] + 1;
  4997  036C  0020               	movlb	0	; select bank0
  4998  036D  0845               	movf	can_send@n,w
  4999  036E  3EFC               	addlw	low (_txbnsidh| (0+32768))
  5000  036F  0084               	movwf	4
  5001  0370  3093               	movlw	high (_txbnsidh| (0+32768))
  5002  0371  1803               	skipnc
  5003  0372  3E01               	addlw	1
  5004  0373  0085               	movwf	5
  5005  0374  0800               	movf	0,w	;code access
  5006  0375  3E01               	addlw	1
  5007  0376  00BC               	movwf	??_can_send
  5008  0377  083C               	movf	??_can_send,w
  5009  0378  0021               	movlb	1	; select bank1
  5010  0379  00B4               	movwf	(_buf^(0+128)+1)
  5011                           
  5012                           ;mcp2515.c: 228: buf[2] = 0x00;
  5013  037A  01B5               	clrf	(_buf^(0+128)+2)
  5014                           
  5015                           ;mcp2515.c: 229: SPI_exchange(buf, 3);
  5016  037B  3003               	movlw	3
  5017  037C  0020               	movlb	0	; select bank0
  5018  037D  00BC               	movwf	??_can_send
  5019  037E  083C               	movf	??_can_send,w
  5020  037F  00F8               	movwf	SPI_exchange@len
  5021  0380  30B3               	movlw	(low (_buf| 0))& (0+255)
  5022  0381  318C  2486  3182   	fcall	_SPI_exchange
  5023                           
  5024                           ;mcp2515.c: 231: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5025  0384  0020               	movlb	0	; select bank0
  5026  0385  0862               	movf	_mode,w
  5027  0386  1903               	btfsc	3,2
  5028  0387  2B9F               	goto	l2491
  5029  0388  30C4               	movlw	low (STR_33| (0+32768))
  5030  0389  00A2               	movwf	printf@f
  5031  038A  3092               	movlw	high (STR_33| (0+32768))
  5032  038B  00A3               	movwf	printf@f+1
  5033  038C  0845               	movf	can_send@n,w
  5034  038D  00BC               	movwf	??_can_send
  5035  038E  01BD               	clrf	??_can_send+1
  5036  038F  083C               	movf	??_can_send,w
  5037  0390  00A4               	movwf	?_printf+2
  5038  0391  083D               	movf	??_can_send+1,w
  5039  0392  00A5               	movwf	?_printf+3
  5040  0393  0021               	movlb	1	; select bank1
  5041  0394  0835               	movf	(_buf^(0+128)+2),w
  5042  0395  0020               	movlb	0	; select bank0
  5043  0396  00BE               	movwf	??_can_send+2
  5044  0397  01BF               	clrf	??_can_send+3
  5045  0398  083E               	movf	??_can_send+2,w
  5046  0399  00A6               	movwf	?_printf+4
  5047  039A  083F               	movf	??_can_send+3,w
  5048  039B  00A7               	movwf	?_printf+5
  5049  039C  3185  25B3  3182   	fcall	_printf
  5050  039F                     l2491:	
  5051                           
  5052                           ;mcp2515.c: 233: if (bytes_written == len) {
  5053  039F  0020               	movlb	0	; select bank0
  5054  03A0  0841               	movf	can_send@bytes_written,w
  5055  03A1  0640               	xorwf	can_send@len,w
  5056  03A2  1D03               	skipz
  5057  03A3  0008               	return
  5058                           
  5059                           ;mcp2515.c: 235: buf[0] = 0b10000000 + (0b00000001 << n);
  5060  03A4  3001               	movlw	1
  5061  03A5  00BC               	movwf	??_can_send
  5062  03A6  0A45               	incf	can_send@n,w
  5063  03A7  2BA9               	goto	u2184
  5064  03A8                     u2185:	
  5065  03A8  35BC               	lslf	??_can_send,f
  5066  03A9                     u2184:	
  5067  03A9  0B89               	decfsz	9,f
  5068  03AA  2BA8               	goto	u2185
  5069  03AB  083C               	movf	??_can_send,w
  5070  03AC  3E80               	addlw	128
  5071  03AD  00BD               	movwf	??_can_send+1
  5072  03AE  083D               	movf	??_can_send+1,w
  5073  03AF  0021               	movlb	1	; select bank1
  5074  03B0  00B3               	movwf	_buf^(0+128)
  5075                           
  5076                           ;mcp2515.c: 236: bytes_written = SPI_exchange(buf, 1);
  5077  03B1  01F8               	clrf	SPI_exchange@len
  5078  03B2  0AF8               	incf	SPI_exchange@len,f
  5079  03B3  30B3               	movlw	(low (_buf| 0))& (0+255)
  5080  03B4  318C  2486  3182   	fcall	_SPI_exchange
  5081  03B7  0020               	movlb	0	; select bank0
  5082  03B8  00BC               	movwf	??_can_send
  5083  03B9  083C               	movf	??_can_send,w
  5084  03BA  00C1               	movwf	can_send@bytes_written
  5085                           
  5086                           ;mcp2515.c: 237: if (bytes_written == 1) {
  5087  03BB  0341               	decf	can_send@bytes_written,w
  5088  03BC  1D03               	btfss	3,2
  5089  03BD  0008               	return
  5090                           
  5091                           ;mcp2515.c: 238: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5092  03BE  0862               	movf	_mode,w
  5093  03BF  1903               	btfsc	3,2
  5094  03C0  0008               	return
  5095  03C1  306E               	movlw	low (STR_34| (0+32768))
  5096  03C2  00A2               	movwf	printf@f
  5097  03C3  3092               	movlw	high (STR_34| (0+32768))
  5098  03C4  00A3               	movwf	printf@f+1
  5099  03C5  0843               	movf	can_send@data_buf,w
  5100  03C6  00BC               	movwf	??_can_send
  5101  03C7  083C               	movf	??_can_send,w
  5102  03C8  00A4               	movwf	low ((?_printf| 0+2))
  5103  03C9  3185  25B3         	fcall	_printf
  5104                           
  5105                           ;mcp2515.c: 239: return 1;
  5106                           ;	Return value of _can_send is never used
  5107  03CB  0008               	return
  5108  03CC                     __end_of_can_send:	
  5109                           ;mcp2515.c: 240: }
  5110                           ;mcp2515.c: 241: }
  5111                           ;mcp2515.c: 243: return 0;
  5112                           ;	Return value of _can_send is never used
  5113                           
  5114                           
  5115                           	psect	text7
  5116  0C5E                     __ptext7:	
  5117 ;; *************** function _can_logging_mode *****************
  5118 ;; Defined at:
  5119 ;;		line 26 in file "mcp2515.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  debug           1    wreg     unsigned char 
  5122 ;;  verbose         1    0[COMMON] unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  debug           1    2[COMMON] unsigned char 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		wreg
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5134 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;Total ram usage:        3 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _can_logging_mode
  5149  0C5E                     _can_logging_mode:	
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _can_logging_mode: [wreg]
  5153                           ;can_logging_mode@debug stored from wreg
  5154  0C5E  00F2               	movwf	can_logging_mode@debug
  5155                           
  5156                           ;mcp2515.c: 27: mode.debug = debug;
  5157  0C5F  0872               	movf	can_logging_mode@debug,w
  5158  0C60  00F1               	movwf	??_can_logging_mode
  5159  0C61  0871               	movf	??_can_logging_mode,w
  5160  0C62  0020               	movlb	0	; select bank0
  5161  0C63  00E2               	movwf	_mode
  5162                           
  5163                           ;mcp2515.c: 28: mode.verbose = verbose;
  5164  0C64  0870               	movf	can_logging_mode@verbose,w
  5165  0C65  00F1               	movwf	??_can_logging_mode
  5166  0C66  0871               	movf	??_can_logging_mode,w
  5167  0C67  00E3               	movwf	_mode+1
  5168  0C68  0008               	return
  5169  0C69                     __end_of_can_logging_mode:	
  5170                           
  5171                           	psect	text8
  5172  0F81                     __ptext8:	
  5173 ;; *************** function _can_init *****************
  5174 ;; Defined at:
  5175 ;;		line 49 in file "mcp2515.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  receive_hand    2   31[BANK0 ] PTR void 
  5178 ;;		 -> receive_handler(1), 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;Total ram usage:        3 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    4
  5197 ;; This function calls:
  5198 ;;		_SPI_exchange
  5199 ;;		_can_ope_mode
  5200 ;;		_can_set_sid
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _can_init
  5208  0F81                     _can_init:	
  5209                           
  5210                           ;mcp2515.c: 50: can_set_sid(0);
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5214  0F81  3000               	movlw	0
  5215  0F82  00F0               	movwf	can_set_sid@can_node
  5216  0F83  00F1               	movwf	can_set_sid@can_node+1
  5217  0F84  318C  24E6  318F   	fcall	_can_set_sid
  5218                           
  5219                           ;mcp2515.c: 51: handler = receive_handler;
  5220  0F87  0020               	movlb	0	; select bank0
  5221  0F88  0840               	movf	can_init@receive_handler+1,w
  5222  0F89  00EA               	movwf	_handler+1
  5223  0F8A  083F               	movf	can_init@receive_handler,w
  5224  0F8B  00E9               	movwf	_handler
  5225                           
  5226                           ;mcp2515.c: 53: can_ope_mode(0b10000000);
  5227  0F8C  3080               	movlw	128
  5228  0F8D  318E  2668  318F   	fcall	_can_ope_mode
  5229                           
  5230                           ;mcp2515.c: 54: buf[0] = 0b11000000;
  5231  0F90  30C0               	movlw	192
  5232  0F91  0020               	movlb	0	; select bank0
  5233  0F92  00C1               	movwf	??_can_init
  5234  0F93  0841               	movf	??_can_init,w
  5235  0F94  0021               	movlb	1	; select bank1
  5236  0F95  00B3               	movwf	_buf^(0+128)
  5237                           
  5238                           ;mcp2515.c: 55: SPI_exchange(buf, 1);
  5239  0F96  01F8               	clrf	SPI_exchange@len
  5240  0F97  0AF8               	incf	SPI_exchange@len,f
  5241  0F98  30B3               	movlw	(low (_buf| 0))& (0+255)
  5242  0F99  318C  2486  318F   	fcall	_SPI_exchange
  5243                           
  5244                           ;mcp2515.c: 57: buf[0] = 0b00000010;
  5245  0F9C  3002               	movlw	2
  5246  0F9D  0020               	movlb	0	; select bank0
  5247  0F9E  00C1               	movwf	??_can_init
  5248  0F9F  0841               	movf	??_can_init,w
  5249  0FA0  0021               	movlb	1	; select bank1
  5250  0FA1  00B3               	movwf	_buf^(0+128)
  5251                           
  5252                           ;mcp2515.c: 58: buf[1] = 0x28;
  5253  0FA2  3028               	movlw	40
  5254  0FA3  0020               	movlb	0	; select bank0
  5255  0FA4  00C1               	movwf	??_can_init
  5256  0FA5  0841               	movf	??_can_init,w
  5257  0FA6  0021               	movlb	1	; select bank1
  5258  0FA7  00B4               	movwf	(_buf^(0+128)+1)
  5259                           
  5260                           ;mcp2515.c: 59: buf[2] = 0b00000101;
  5261  0FA8  3005               	movlw	5
  5262  0FA9  0020               	movlb	0	; select bank0
  5263  0FAA  00C1               	movwf	??_can_init
  5264  0FAB  0841               	movf	??_can_init,w
  5265  0FAC  0021               	movlb	1	; select bank1
  5266  0FAD  00B5               	movwf	(_buf^(0+128)+2)
  5267                           
  5268                           ;mcp2515.c: 60: buf[4] = 0b11110001;
  5269  0FAE  30F1               	movlw	241
  5270  0FAF  0020               	movlb	0	; select bank0
  5271  0FB0  00C1               	movwf	??_can_init
  5272  0FB1  0841               	movf	??_can_init,w
  5273  0FB2  0021               	movlb	1	; select bank1
  5274  0FB3  00B7               	movwf	(_buf^(0+128)+4)
  5275                           
  5276                           ;mcp2515.c: 61: buf[5] = 0b01000001;
  5277  0FB4  3041               	movlw	65
  5278  0FB5  0020               	movlb	0	; select bank0
  5279  0FB6  00C1               	movwf	??_can_init
  5280  0FB7  0841               	movf	??_can_init,w
  5281  0FB8  0021               	movlb	1	; select bank1
  5282  0FB9  00B8               	movwf	(_buf^(0+128)+5)
  5283                           
  5284                           ;mcp2515.c: 62: SPI_exchange(buf, 5);
  5285  0FBA  3005               	movlw	5
  5286  0FBB  0020               	movlb	0	; select bank0
  5287  0FBC  00C1               	movwf	??_can_init
  5288  0FBD  0841               	movf	??_can_init,w
  5289  0FBE  00F8               	movwf	SPI_exchange@len
  5290  0FBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5291  0FC0  318C  2486  318F   	fcall	_SPI_exchange
  5292                           
  5293                           ;mcp2515.c: 64: buf[0] = 0b00000010;
  5294  0FC3  3002               	movlw	2
  5295  0FC4  0020               	movlb	0	; select bank0
  5296  0FC5  00C1               	movwf	??_can_init
  5297  0FC6  0841               	movf	??_can_init,w
  5298  0FC7  0021               	movlb	1	; select bank1
  5299  0FC8  00B3               	movwf	_buf^(0+128)
  5300                           
  5301                           ;mcp2515.c: 65: buf[1] = 0x60;
  5302  0FC9  3060               	movlw	96
  5303  0FCA  0020               	movlb	0	; select bank0
  5304  0FCB  00C1               	movwf	??_can_init
  5305  0FCC  0841               	movf	??_can_init,w
  5306  0FCD  0021               	movlb	1	; select bank1
  5307  0FCE  00B4               	movwf	(_buf^(0+128)+1)
  5308                           
  5309                           ;mcp2515.c: 66: buf[2] = 0b00100100;
  5310  0FCF  3024               	movlw	36
  5311  0FD0  0020               	movlb	0	; select bank0
  5312  0FD1  00C1               	movwf	??_can_init
  5313  0FD2  0841               	movf	??_can_init,w
  5314  0FD3  0021               	movlb	1	; select bank1
  5315  0FD4  00B5               	movwf	(_buf^(0+128)+2)
  5316                           
  5317                           ;mcp2515.c: 67: SPI_exchange(buf, 3);
  5318  0FD5  3003               	movlw	3
  5319  0FD6  0020               	movlb	0	; select bank0
  5320  0FD7  00C1               	movwf	??_can_init
  5321  0FD8  0841               	movf	??_can_init,w
  5322  0FD9  00F8               	movwf	SPI_exchange@len
  5323  0FDA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5324  0FDB  318C  2486  318F   	fcall	_SPI_exchange
  5325                           
  5326                           ;mcp2515.c: 69: buf[0] = 0b00000010;
  5327  0FDE  3002               	movlw	2
  5328  0FDF  0020               	movlb	0	; select bank0
  5329  0FE0  00C1               	movwf	??_can_init
  5330  0FE1  0841               	movf	??_can_init,w
  5331  0FE2  0021               	movlb	1	; select bank1
  5332  0FE3  00B3               	movwf	_buf^(0+128)
  5333                           
  5334                           ;mcp2515.c: 70: buf[1] = 0x70;
  5335  0FE4  3070               	movlw	112
  5336  0FE5  0020               	movlb	0	; select bank0
  5337  0FE6  00C1               	movwf	??_can_init
  5338  0FE7  0841               	movf	??_can_init,w
  5339  0FE8  0021               	movlb	1	; select bank1
  5340  0FE9  00B4               	movwf	(_buf^(0+128)+1)
  5341                           
  5342                           ;mcp2515.c: 71: buf[2] = 0b00100000;
  5343  0FEA  3020               	movlw	32
  5344  0FEB  0020               	movlb	0	; select bank0
  5345  0FEC  00C1               	movwf	??_can_init
  5346  0FED  0841               	movf	??_can_init,w
  5347  0FEE  0021               	movlb	1	; select bank1
  5348  0FEF  00B5               	movwf	(_buf^(0+128)+2)
  5349                           
  5350                           ;mcp2515.c: 72: SPI_exchange(buf, 3);
  5351  0FF0  3003               	movlw	3
  5352  0FF1  0020               	movlb	0	; select bank0
  5353  0FF2  00C1               	movwf	??_can_init
  5354  0FF3  0841               	movf	??_can_init,w
  5355  0FF4  00F8               	movwf	SPI_exchange@len
  5356  0FF5  30B3               	movlw	(low (_buf| 0))& (0+255)
  5357  0FF6  318C  2486  318F   	fcall	_SPI_exchange
  5358                           
  5359                           ;mcp2515.c: 74: mode.debug = 0;
  5360  0FF9  0020               	movlb	0	; select bank0
  5361  0FFA  01E2               	clrf	_mode
  5362                           
  5363                           ;mcp2515.c: 75: mode.verbose = 0;
  5364  0FFB  01E3               	clrf	_mode+1
  5365                           
  5366                           ;mcp2515.c: 77: can_ope_mode(0b00000000);
  5367  0FFC  3000               	movlw	0
  5368  0FFD  318E  2668         	fcall	_can_ope_mode
  5369  0FFF  0008               	return
  5370  1000                     __end_of_can_init:	
  5371                           
  5372                           	psect	text9
  5373  0CE6                     __ptext9:	
  5374 ;; *************** function _can_set_sid *****************
  5375 ;; Defined at:
  5376 ;;		line 39 in file "mcp2515.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  can_node        2    0[COMMON] unsigned int 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  sidl            1    6[COMMON] unsigned char 
  5381 ;;  sidh            1    5[COMMON] unsigned char 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;Total ram usage:        7 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_main
  5401 ;;		_can_init
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _can_set_sid
  5407  0CE6                     _can_set_sid:	
  5408                           
  5409                           ;mcp2515.c: 40: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5413  0CE6  0871               	movf	can_set_sid@can_node+1,w
  5414  0CE7  00F3               	movwf	??_can_set_sid+1
  5415  0CE8  0870               	movf	can_set_sid@can_node,w
  5416  0CE9  00F2               	movwf	??_can_set_sid
  5417  0CEA  36F3               	lsrf	??_can_set_sid+1,f
  5418  0CEB  0CF2               	rrf	??_can_set_sid,f
  5419  0CEC  36F3               	lsrf	??_can_set_sid+1,f
  5420  0CED  0CF2               	rrf	??_can_set_sid,f
  5421  0CEE  36F3               	lsrf	??_can_set_sid+1,f
  5422  0CEF  0CF2               	rrf	??_can_set_sid,f
  5423  0CF0  0872               	movf	??_can_set_sid,w
  5424  0CF1  00F4               	movwf	??_can_set_sid+2
  5425  0CF2  0874               	movf	??_can_set_sid+2,w
  5426  0CF3  00F5               	movwf	can_set_sid@sidh
  5427                           
  5428                           ;mcp2515.c: 41: uint8_t sidl = (can_node << 5) & 0x00e0;
  5429  0CF4  0870               	movf	can_set_sid@can_node,w
  5430  0CF5  00F2               	movwf	??_can_set_sid
  5431  0CF6  3004               	movlw	4
  5432  0CF7                     u1785:	
  5433  0CF7  35F2               	lslf	??_can_set_sid,f
  5434  0CF8  3EFF               	addlw	-1
  5435  0CF9  1D03               	skipz
  5436  0CFA  2CF7               	goto	u1785
  5437  0CFB  3572               	lslf	??_can_set_sid,w
  5438  0CFC  39E0               	andlw	224
  5439  0CFD  00F3               	movwf	??_can_set_sid+1
  5440  0CFE  0873               	movf	??_can_set_sid+1,w
  5441  0CFF  00F6               	movwf	can_set_sid@sidl
  5442                           
  5443                           ;mcp2515.c: 42: sid.sidh = sidh;
  5444  0D00  0875               	movf	can_set_sid@sidh,w
  5445  0D01  00F2               	movwf	??_can_set_sid
  5446  0D02  0872               	movf	??_can_set_sid,w
  5447  0D03  0020               	movlb	0	; select bank0
  5448  0D04  00E4               	movwf	_sid
  5449                           
  5450                           ;mcp2515.c: 43: sid.sidl = sidl;
  5451  0D05  0876               	movf	can_set_sid@sidl,w
  5452  0D06  00F2               	movwf	??_can_set_sid
  5453  0D07  0872               	movf	??_can_set_sid,w
  5454  0D08  00E5               	movwf	_sid+1
  5455  0D09  0008               	return
  5456  0D0A                     __end_of_can_set_sid:	
  5457                           
  5458                           	psect	text10
  5459  0173                     __ptext10:	
  5460 ;; *************** function _can_dump_registers *****************
  5461 ;; Defined at:
  5462 ;;		line 321 in file "mcp2515.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;Total ram usage:        2 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    4
  5483 ;; This function calls:
  5484 ;;		_printf
  5485 ;;		_read_register
  5486 ;; This function is called by:
  5487 ;;		_main
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           
  5492                           ;psect for function _can_dump_registers
  5493  0173                     _can_dump_registers:	
  5494                           
  5495                           ;mcp2515.c: 322: printf("---\n");
  5496                           
  5497                           ;incstack = 0
  5498                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5499  0173  3015               	movlw	low ((STR_7+18)| (0+32768))
  5500  0174  0020               	movlb	0	; select bank0
  5501  0175  00A2               	movwf	printf@f
  5502  0176  3092               	movlw	high ((STR_7+18)| (0+32768))
  5503  0177  00A3               	movwf	printf@f+1
  5504  0178  3185  25B3  3181   	fcall	_printf
  5505                           
  5506                           ;mcp2515.c: 323: printf("SIDH: %02x\n", sid.sidh);
  5507  017B  3096               	movlw	low ((STR_24+5)| (0+32768))
  5508  017C  0020               	movlb	0	; select bank0
  5509  017D  00A2               	movwf	printf@f
  5510  017E  3092               	movlw	high ((STR_24+5)| (0+32768))
  5511  017F  00A3               	movwf	printf@f+1
  5512  0180  0864               	movf	_sid,w
  5513  0181  00BB               	movwf	??_can_dump_registers
  5514  0182  01BC               	clrf	??_can_dump_registers+1
  5515  0183  083B               	movf	??_can_dump_registers,w
  5516  0184  00A4               	movwf	?_printf+2
  5517  0185  083C               	movf	??_can_dump_registers+1,w
  5518  0186  00A5               	movwf	?_printf+3
  5519  0187  3185  25B3  3181   	fcall	_printf
  5520                           
  5521                           ;mcp2515.c: 324: printf("SIDL: %02x\n", sid.sidl);
  5522  018A  30B8               	movlw	low ((STR_25+5)| (0+32768))
  5523  018B  0020               	movlb	0	; select bank0
  5524  018C  00A2               	movwf	printf@f
  5525  018D  3092               	movlw	high ((STR_25+5)| (0+32768))
  5526  018E  00A3               	movwf	printf@f+1
  5527  018F  0865               	movf	_sid+1,w
  5528  0190  00BB               	movwf	??_can_dump_registers
  5529  0191  01BC               	clrf	??_can_dump_registers+1
  5530  0192  083B               	movf	??_can_dump_registers,w
  5531  0193  00A4               	movwf	?_printf+2
  5532  0194  083C               	movf	??_can_dump_registers+1,w
  5533  0195  00A5               	movwf	?_printf+3
  5534  0196  3185  25B3  3181   	fcall	_printf
  5535                           
  5536                           ;mcp2515.c: 325: printf("\n");
  5537  0199  3018               	movlw	low ((STR_7+21)| (0+32768))
  5538  019A  0020               	movlb	0	; select bank0
  5539  019B  00A2               	movwf	printf@f
  5540  019C  3092               	movlw	high ((STR_7+21)| (0+32768))
  5541  019D  00A3               	movwf	printf@f+1
  5542  019E  3185  25B3  3181   	fcall	_printf
  5543                           
  5544                           ;mcp2515.c: 327: printf("CNF1: %02x\n", read_register(0x2a));
  5545  01A1  30A6               	movlw	low (STR_41| (0+32768))
  5546  01A2  0020               	movlb	0	; select bank0
  5547  01A3  00A2               	movwf	printf@f
  5548  01A4  3093               	movlw	high (STR_41| (0+32768))
  5549  01A5  00A3               	movwf	printf@f+1
  5550  01A6  302A               	movlw	42
  5551  01A7  318C  24B2  3181   	fcall	_read_register
  5552  01AA  0020               	movlb	0	; select bank0
  5553  01AB  00BB               	movwf	??_can_dump_registers
  5554  01AC  01BC               	clrf	??_can_dump_registers+1
  5555  01AD  083B               	movf	??_can_dump_registers,w
  5556  01AE  00A4               	movwf	?_printf+2
  5557  01AF  083C               	movf	??_can_dump_registers+1,w
  5558  01B0  00A5               	movwf	?_printf+3
  5559  01B1  3185  25B3  3181   	fcall	_printf
  5560                           
  5561                           ;mcp2515.c: 328: printf("CNF2: %02x\n", read_register(0x29));
  5562  01B4  30B2               	movlw	low (STR_42| (0+32768))
  5563  01B5  0020               	movlb	0	; select bank0
  5564  01B6  00A2               	movwf	printf@f
  5565  01B7  3093               	movlw	high (STR_42| (0+32768))
  5566  01B8  00A3               	movwf	printf@f+1
  5567  01B9  3029               	movlw	41
  5568  01BA  318C  24B2  3181   	fcall	_read_register
  5569  01BD  0020               	movlb	0	; select bank0
  5570  01BE  00BB               	movwf	??_can_dump_registers
  5571  01BF  01BC               	clrf	??_can_dump_registers+1
  5572  01C0  083B               	movf	??_can_dump_registers,w
  5573  01C1  00A4               	movwf	?_printf+2
  5574  01C2  083C               	movf	??_can_dump_registers+1,w
  5575  01C3  00A5               	movwf	?_printf+3
  5576  01C4  3185  25B3  3181   	fcall	_printf
  5577                           
  5578                           ;mcp2515.c: 329: printf("CNF3: %02x\n", read_register(0x28));
  5579  01C7  30BE               	movlw	low (STR_43| (0+32768))
  5580  01C8  0020               	movlb	0	; select bank0
  5581  01C9  00A2               	movwf	printf@f
  5582  01CA  3093               	movlw	high (STR_43| (0+32768))
  5583  01CB  00A3               	movwf	printf@f+1
  5584  01CC  3028               	movlw	40
  5585  01CD  318C  24B2  3181   	fcall	_read_register
  5586  01D0  0020               	movlb	0	; select bank0
  5587  01D1  00BB               	movwf	??_can_dump_registers
  5588  01D2  01BC               	clrf	??_can_dump_registers+1
  5589  01D3  083B               	movf	??_can_dump_registers,w
  5590  01D4  00A4               	movwf	?_printf+2
  5591  01D5  083C               	movf	??_can_dump_registers+1,w
  5592  01D6  00A5               	movwf	?_printf+3
  5593  01D7  3185  25B3  3181   	fcall	_printf
  5594                           
  5595                           ;mcp2515.c: 330: printf("\n");
  5596  01DA  3018               	movlw	low ((STR_7+21)| (0+32768))
  5597  01DB  0020               	movlb	0	; select bank0
  5598  01DC  00A2               	movwf	printf@f
  5599  01DD  3092               	movlw	high ((STR_7+21)| (0+32768))
  5600  01DE  00A3               	movwf	printf@f+1
  5601  01DF  3185  25B3  3181   	fcall	_printf
  5602                           
  5603                           ;mcp2515.c: 332: printf("TXB0CTRL: %02x\n", read_register(0x30));
  5604  01E2  30F5               	movlw	low (STR_45| (0+32768))
  5605  01E3  0020               	movlb	0	; select bank0
  5606  01E4  00A2               	movwf	printf@f
  5607  01E5  3092               	movlw	high (STR_45| (0+32768))
  5608  01E6  00A3               	movwf	printf@f+1
  5609  01E7  3030               	movlw	48
  5610  01E8  318C  24B2  3181   	fcall	_read_register
  5611  01EB  0020               	movlb	0	; select bank0
  5612  01EC  00BB               	movwf	??_can_dump_registers
  5613  01ED  01BC               	clrf	??_can_dump_registers+1
  5614  01EE  083B               	movf	??_can_dump_registers,w
  5615  01EF  00A4               	movwf	?_printf+2
  5616  01F0  083C               	movf	??_can_dump_registers+1,w
  5617  01F1  00A5               	movwf	?_printf+3
  5618  01F2  3185  25B3  3181   	fcall	_printf
  5619                           
  5620                           ;mcp2515.c: 333: printf("TXB1CTRL: %02x\n", read_register(0x40));
  5621  01F5  3015               	movlw	low (STR_46| (0+32768))
  5622  01F6  0020               	movlb	0	; select bank0
  5623  01F7  00A2               	movwf	printf@f
  5624  01F8  3093               	movlw	high (STR_46| (0+32768))
  5625  01F9  00A3               	movwf	printf@f+1
  5626  01FA  3040               	movlw	64
  5627  01FB  318C  24B2  3181   	fcall	_read_register
  5628  01FE  0020               	movlb	0	; select bank0
  5629  01FF  00BB               	movwf	??_can_dump_registers
  5630  0200  01BC               	clrf	??_can_dump_registers+1
  5631  0201  083B               	movf	??_can_dump_registers,w
  5632  0202  00A4               	movwf	?_printf+2
  5633  0203  083C               	movf	??_can_dump_registers+1,w
  5634  0204  00A5               	movwf	?_printf+3
  5635  0205  3185  25B3  3181   	fcall	_printf
  5636                           
  5637                           ;mcp2515.c: 334: printf("TXB2CTRL: %02x\n", read_register(0x50));
  5638  0208  3025               	movlw	low (STR_47| (0+32768))
  5639  0209  0020               	movlb	0	; select bank0
  5640  020A  00A2               	movwf	printf@f
  5641  020B  3093               	movlw	high (STR_47| (0+32768))
  5642  020C  00A3               	movwf	printf@f+1
  5643  020D  3050               	movlw	80
  5644  020E  318C  24B2  3181   	fcall	_read_register
  5645  0211  0020               	movlb	0	; select bank0
  5646  0212  00BB               	movwf	??_can_dump_registers
  5647  0213  01BC               	clrf	??_can_dump_registers+1
  5648  0214  083B               	movf	??_can_dump_registers,w
  5649  0215  00A4               	movwf	?_printf+2
  5650  0216  083C               	movf	??_can_dump_registers+1,w
  5651  0217  00A5               	movwf	?_printf+3
  5652  0218  3185  25B3  3181   	fcall	_printf
  5653                           
  5654                           ;mcp2515.c: 335: printf("\n");
  5655  021B  3018               	movlw	low ((STR_7+21)| (0+32768))
  5656  021C  0020               	movlb	0	; select bank0
  5657  021D  00A2               	movwf	printf@f
  5658  021E  3092               	movlw	high ((STR_7+21)| (0+32768))
  5659  021F  00A3               	movwf	printf@f+1
  5660  0220  3185  25B3  3181   	fcall	_printf
  5661                           
  5662                           ;mcp2515.c: 337: printf("RXB0CTRL: %02x\n", read_register(0x60));
  5663  0223  30E5               	movlw	low (STR_49| (0+32768))
  5664  0224  0020               	movlb	0	; select bank0
  5665  0225  00A2               	movwf	printf@f
  5666  0226  3092               	movlw	high (STR_49| (0+32768))
  5667  0227  00A3               	movwf	printf@f+1
  5668  0228  3060               	movlw	96
  5669  0229  318C  24B2  3181   	fcall	_read_register
  5670  022C  0020               	movlb	0	; select bank0
  5671  022D  00BB               	movwf	??_can_dump_registers
  5672  022E  01BC               	clrf	??_can_dump_registers+1
  5673  022F  083B               	movf	??_can_dump_registers,w
  5674  0230  00A4               	movwf	?_printf+2
  5675  0231  083C               	movf	??_can_dump_registers+1,w
  5676  0232  00A5               	movwf	?_printf+3
  5677  0233  3185  25B3  3181   	fcall	_printf
  5678                           
  5679                           ;mcp2515.c: 338: printf("RXB1CTRL: %02x\n", read_register(0x70));
  5680  0236  3005               	movlw	low (STR_50| (0+32768))
  5681  0237  0020               	movlb	0	; select bank0
  5682  0238  00A2               	movwf	printf@f
  5683  0239  3093               	movlw	high (STR_50| (0+32768))
  5684  023A  00A3               	movwf	printf@f+1
  5685  023B  3070               	movlw	112
  5686  023C  318C  24B2  3181   	fcall	_read_register
  5687  023F  0020               	movlb	0	; select bank0
  5688  0240  00BB               	movwf	??_can_dump_registers
  5689  0241  01BC               	clrf	??_can_dump_registers+1
  5690  0242  083B               	movf	??_can_dump_registers,w
  5691  0243  00A4               	movwf	?_printf+2
  5692  0244  083C               	movf	??_can_dump_registers+1,w
  5693  0245  00A5               	movwf	?_printf+3
  5694  0246  3185  25B3  3181   	fcall	_printf
  5695                           
  5696                           ;mcp2515.c: 339: printf("\n");
  5697  0249  3018               	movlw	low ((STR_7+21)| (0+32768))
  5698  024A  0020               	movlb	0	; select bank0
  5699  024B  00A2               	movwf	printf@f
  5700  024C  3092               	movlw	high ((STR_7+21)| (0+32768))
  5701  024D  00A3               	movwf	printf@f+1
  5702  024E  3185  25B3  3181   	fcall	_printf
  5703                           
  5704                           ;mcp2515.c: 341: printf("CANCTRL: %02x\n", read_register(0x0f));
  5705  0251  3044               	movlw	low (STR_52| (0+32768))
  5706  0252  0020               	movlb	0	; select bank0
  5707  0253  00A2               	movwf	printf@f
  5708  0254  3093               	movlw	high (STR_52| (0+32768))
  5709  0255  00A3               	movwf	printf@f+1
  5710  0256  300F               	movlw	15
  5711  0257  318C  24B2  3181   	fcall	_read_register
  5712  025A  0020               	movlb	0	; select bank0
  5713  025B  00BB               	movwf	??_can_dump_registers
  5714  025C  01BC               	clrf	??_can_dump_registers+1
  5715  025D  083B               	movf	??_can_dump_registers,w
  5716  025E  00A4               	movwf	?_printf+2
  5717  025F  083C               	movf	??_can_dump_registers+1,w
  5718  0260  00A5               	movwf	?_printf+3
  5719  0261  3185  25B3  3181   	fcall	_printf
  5720                           
  5721                           ;mcp2515.c: 342: printf("CANSTAT: %02x\n", read_register(0x0e));
  5722  0264  3053               	movlw	low (STR_21| (0+32768))
  5723  0265  0020               	movlb	0	; select bank0
  5724  0266  00A2               	movwf	printf@f
  5725  0267  3093               	movlw	high (STR_21| (0+32768))
  5726  0268  00A3               	movwf	printf@f+1
  5727  0269  300E               	movlw	14
  5728  026A  318C  24B2  3181   	fcall	_read_register
  5729  026D  0020               	movlb	0	; select bank0
  5730  026E  00BB               	movwf	??_can_dump_registers
  5731  026F  01BC               	clrf	??_can_dump_registers+1
  5732  0270  083B               	movf	??_can_dump_registers,w
  5733  0271  00A4               	movwf	?_printf+2
  5734  0272  083C               	movf	??_can_dump_registers+1,w
  5735  0273  00A5               	movwf	?_printf+3
  5736  0274  3185  25B3  3181   	fcall	_printf
  5737                           
  5738                           ;mcp2515.c: 343: printf("---\n");
  5739  0277  3015               	movlw	low ((STR_7+18)| (0+32768))
  5740  0278  0020               	movlb	0	; select bank0
  5741  0279  00A2               	movwf	printf@f
  5742  027A  3092               	movlw	high ((STR_7+18)| (0+32768))
  5743  027B  00A3               	movwf	printf@f+1
  5744  027C  3185  25B3         	fcall	_printf
  5745  027E  0008               	return
  5746  027F                     __end_of_can_dump_registers:	
  5747                           
  5748                           	psect	text11
  5749  0CB2                     __ptext11:	
  5750 ;; *************** function _read_register *****************
  5751 ;; Defined at:
  5752 ;;		line 310 in file "mcp2515.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  addr            1    wreg     unsigned char 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  addr            1    1[BANK0 ] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      unsigned char 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;Total ram usage:        2 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    3
  5773 ;; This function calls:
  5774 ;;		_SPI_exchange
  5775 ;; This function is called by:
  5776 ;;		_can_dump_registers
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function _read_register
  5782  0CB2                     _read_register:	
  5783                           
  5784                           ;incstack = 0
  5785                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5786                           ;read_register@addr stored from wreg
  5787  0CB2  0020               	movlb	0	; select bank0
  5788  0CB3  00A1               	movwf	read_register@addr
  5789                           
  5790                           ;mcp2515.c: 311: buf[0] = 0b00000011;
  5791  0CB4  3003               	movlw	3
  5792  0CB5  00A0               	movwf	??_read_register
  5793  0CB6  0820               	movf	??_read_register,w
  5794  0CB7  0021               	movlb	1	; select bank1
  5795  0CB8  00B3               	movwf	_buf^(0+128)
  5796                           
  5797                           ;mcp2515.c: 312: buf[1] = addr;
  5798  0CB9  0020               	movlb	0	; select bank0
  5799  0CBA  0821               	movf	read_register@addr,w
  5800  0CBB  00A0               	movwf	??_read_register
  5801  0CBC  0820               	movf	??_read_register,w
  5802  0CBD  0021               	movlb	1	; select bank1
  5803  0CBE  00B4               	movwf	(_buf^(0+128)+1)
  5804                           
  5805                           ;mcp2515.c: 313: buf[2] = 0x00;
  5806  0CBF  01B5               	clrf	(_buf^(0+128)+2)
  5807                           
  5808                           ;mcp2515.c: 314: SPI_exchange(buf, 3);
  5809  0CC0  3003               	movlw	3
  5810  0CC1  0020               	movlb	0	; select bank0
  5811  0CC2  00A0               	movwf	??_read_register
  5812  0CC3  0820               	movf	??_read_register,w
  5813  0CC4  00F8               	movwf	SPI_exchange@len
  5814  0CC5  30B3               	movlw	(low (_buf| 0))& (0+255)
  5815  0CC6  318C  2486         	fcall	_SPI_exchange
  5816                           
  5817                           ;mcp2515.c: 315: return buf[2];
  5818  0CC8  0021               	movlb	1	; select bank1
  5819  0CC9  0835               	movf	(_buf^(0+128)+2),w
  5820  0CCA  0008               	return
  5821  0CCB                     __end_of_read_register:	
  5822                           
  5823                           	psect	text12
  5824  0D91                     __ptext12:	
  5825 ;; *************** function _can_baudrate *****************
  5826 ;; Defined at:
  5827 ;;		line 277 in file "mcp2515.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  bpr             1    wreg     unsigned char 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  bpr             1   33[BANK0 ] unsigned char 
  5832 ;;  bytes_writte    1   35[BANK0 ] unsigned char 
  5833 ;;  mask            1   34[BANK0 ] unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      unsigned char 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;Total ram usage:        5 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    4
  5850 ;; This function calls:
  5851 ;;		_SPI_exchange
  5852 ;;		_can_ope_mode
  5853 ;; This function is called by:
  5854 ;;		_main
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _can_baudrate
  5860  0D91                     _can_baudrate:	
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5864                           ;can_baudrate@bpr stored from wreg
  5865  0D91  0020               	movlb	0	; select bank0
  5866  0D92  00C1               	movwf	can_baudrate@bpr
  5867                           
  5868                           ;mcp2515.c: 278: can_ope_mode(0b10000000);
  5869  0D93  3080               	movlw	128
  5870  0D94  318E  2668  318D   	fcall	_can_ope_mode
  5871                           
  5872                           ;mcp2515.c: 280: uint8_t mask = 0b00111111;
  5873  0D97  303F               	movlw	63
  5874  0D98  0020               	movlb	0	; select bank0
  5875  0D99  00BF               	movwf	??_can_baudrate
  5876  0D9A  083F               	movf	??_can_baudrate,w
  5877  0D9B  00C2               	movwf	can_baudrate@mask
  5878                           
  5879                           ;mcp2515.c: 281: buf[0] = 0b00000101;
  5880  0D9C  3005               	movlw	5
  5881  0D9D  00BF               	movwf	??_can_baudrate
  5882  0D9E  083F               	movf	??_can_baudrate,w
  5883  0D9F  0021               	movlb	1	; select bank1
  5884  0DA0  00B3               	movwf	_buf^(0+128)
  5885                           
  5886                           ;mcp2515.c: 282: buf[1] = 0x2a;
  5887  0DA1  302A               	movlw	42
  5888  0DA2  0020               	movlb	0	; select bank0
  5889  0DA3  00BF               	movwf	??_can_baudrate
  5890  0DA4  083F               	movf	??_can_baudrate,w
  5891  0DA5  0021               	movlb	1	; select bank1
  5892  0DA6  00B4               	movwf	(_buf^(0+128)+1)
  5893                           
  5894                           ;mcp2515.c: 283: buf[2] = mask;
  5895  0DA7  0020               	movlb	0	; select bank0
  5896  0DA8  0842               	movf	can_baudrate@mask,w
  5897  0DA9  00BF               	movwf	??_can_baudrate
  5898  0DAA  083F               	movf	??_can_baudrate,w
  5899  0DAB  0021               	movlb	1	; select bank1
  5900  0DAC  00B5               	movwf	(_buf^(0+128)+2)
  5901                           
  5902                           ;mcp2515.c: 284: buf[3] = bpr;
  5903  0DAD  0020               	movlb	0	; select bank0
  5904  0DAE  0841               	movf	can_baudrate@bpr,w
  5905  0DAF  00BF               	movwf	??_can_baudrate
  5906  0DB0  083F               	movf	??_can_baudrate,w
  5907  0DB1  0021               	movlb	1	; select bank1
  5908  0DB2  00B6               	movwf	(_buf^(0+128)+3)
  5909                           
  5910                           ;mcp2515.c: 285: uint8_t bytes_written = SPI_exchange(buf, 4);
  5911  0DB3  3004               	movlw	4
  5912  0DB4  0020               	movlb	0	; select bank0
  5913  0DB5  00BF               	movwf	??_can_baudrate
  5914  0DB6  083F               	movf	??_can_baudrate,w
  5915  0DB7  00F8               	movwf	SPI_exchange@len
  5916  0DB8  30B3               	movlw	(low (_buf| 0))& (0+255)
  5917  0DB9  318C  2486  318D   	fcall	_SPI_exchange
  5918  0DBC  0020               	movlb	0	; select bank0
  5919  0DBD  00C0               	movwf	??_can_baudrate+1
  5920  0DBE  0840               	movf	??_can_baudrate+1,w
  5921  0DBF  00C3               	movwf	can_baudrate@bytes_written
  5922                           
  5923                           ;mcp2515.c: 286: can_ope_mode(operation_mode);
  5924  0DC0  0868               	movf	_operation_mode,w
  5925  0DC1  318E  2668         	fcall	_can_ope_mode
  5926                           
  5927                           ;mcp2515.c: 290: return 0;
  5928                           ;	Return value of _can_baudrate is never used
  5929                           
  5930                           ;mcp2515.c: 289: } else {
  5931                           
  5932                           ;mcp2515.c: 288: return 1;
  5933                           ;	Return value of _can_baudrate is never used
  5934  0DC3  0008               	return
  5935  0DC4                     __end_of_can_baudrate:	
  5936                           
  5937                           	psect	text13
  5938  0D36                     __ptext13:	
  5939 ;; *************** function _can_abort *****************
  5940 ;; Defined at:
  5941 ;;		line 294 in file "mcp2515.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      unsigned char 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        3 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    4
  5962 ;; This function calls:
  5963 ;;		_SPI_exchange
  5964 ;;		_can_ope_mode
  5965 ;; This function is called by:
  5966 ;;		_main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           
  5971                           ;psect for function _can_abort
  5972  0D36                     _can_abort:	
  5973                           
  5974                           ;mcp2515.c: 295: can_ope_mode(0b10000000);
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5978  0D36  3080               	movlw	128
  5979  0D37  318E  2668  318D   	fcall	_can_ope_mode
  5980                           
  5981                           ;mcp2515.c: 297: buf[0] = 0b00000101;
  5982  0D3A  3005               	movlw	5
  5983  0D3B  0020               	movlb	0	; select bank0
  5984  0D3C  00BF               	movwf	??_can_abort
  5985  0D3D  083F               	movf	??_can_abort,w
  5986  0D3E  0021               	movlb	1	; select bank1
  5987  0D3F  00B3               	movwf	_buf^(0+128)
  5988                           
  5989                           ;mcp2515.c: 298: buf[1] = 0x0f;
  5990  0D40  300F               	movlw	15
  5991  0D41  0020               	movlb	0	; select bank0
  5992  0D42  00BF               	movwf	??_can_abort
  5993  0D43  083F               	movf	??_can_abort,w
  5994  0D44  0021               	movlb	1	; select bank1
  5995  0D45  00B4               	movwf	(_buf^(0+128)+1)
  5996                           
  5997                           ;mcp2515.c: 299: buf[2] = 0b00010000;
  5998  0D46  3010               	movlw	16
  5999  0D47  0020               	movlb	0	; select bank0
  6000  0D48  00BF               	movwf	??_can_abort
  6001  0D49  083F               	movf	??_can_abort,w
  6002  0D4A  0021               	movlb	1	; select bank1
  6003  0D4B  00B5               	movwf	(_buf^(0+128)+2)
  6004                           
  6005                           ;mcp2515.c: 300: buf[3] = 0b00010000;
  6006  0D4C  3010               	movlw	16
  6007  0D4D  0020               	movlb	0	; select bank0
  6008  0D4E  00BF               	movwf	??_can_abort
  6009  0D4F  083F               	movf	??_can_abort,w
  6010  0D50  0021               	movlb	1	; select bank1
  6011  0D51  00B6               	movwf	(_buf^(0+128)+3)
  6012                           
  6013                           ;mcp2515.c: 301: uint8_t bytes_written = SPI_exchange(buf, 4);
  6014  0D52  3004               	movlw	4
  6015  0D53  0020               	movlb	0	; select bank0
  6016  0D54  00BF               	movwf	??_can_abort
  6017  0D55  083F               	movf	??_can_abort,w
  6018  0D56  00F8               	movwf	SPI_exchange@len
  6019  0D57  30B3               	movlw	(low (_buf| 0))& (0+255)
  6020  0D58  318C  2486  318D   	fcall	_SPI_exchange
  6021  0D5B  0020               	movlb	0	; select bank0
  6022  0D5C  00C0               	movwf	??_can_abort+1
  6023  0D5D  0840               	movf	??_can_abort+1,w
  6024  0D5E  00C1               	movwf	can_abort@bytes_written
  6025                           
  6026                           ;mcp2515.c: 302: can_ope_mode(operation_mode);
  6027  0D5F  0868               	movf	_operation_mode,w
  6028  0D60  318E  2668         	fcall	_can_ope_mode
  6029                           
  6030                           ;mcp2515.c: 306: return 0;
  6031                           ;	Return value of _can_abort is never used
  6032                           
  6033                           ;mcp2515.c: 305: } else {
  6034                           
  6035                           ;mcp2515.c: 304: return 1;
  6036                           ;	Return value of _can_abort is never used
  6037  0D62  0008               	return
  6038  0D63                     __end_of_can_abort:	
  6039                           
  6040                           	psect	text14
  6041  0E68                     __ptext14:	
  6042 ;; *************** function _can_ope_mode *****************
  6043 ;; Defined at:
  6044 ;;		line 83 in file "mcp2515.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  ope_mode        1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  ope_mode        1   30[BANK0 ] unsigned char 
  6049 ;;  bytes_writte    1   29[BANK0 ] unsigned char 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      unsigned char 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;Total ram usage:        4 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    3
  6066 ;; This function calls:
  6067 ;;		_SPI_exchange
  6068 ;;		_printf
  6069 ;; This function is called by:
  6070 ;;		_main
  6071 ;;		_can_init
  6072 ;;		_can_set_mask
  6073 ;;		_can_baudrate
  6074 ;;		_can_abort
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _can_ope_mode
  6080  0E68                     _can_ope_mode:	
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6084                           ;can_ope_mode@ope_mode stored from wreg
  6085  0E68  0020               	movlb	0	; select bank0
  6086  0E69  00BE               	movwf	can_ope_mode@ope_mode
  6087                           
  6088                           ;mcp2515.c: 84: buf[0] = 0b00000010;
  6089  0E6A  3002               	movlw	2
  6090  0E6B  00BB               	movwf	??_can_ope_mode
  6091  0E6C  083B               	movf	??_can_ope_mode,w
  6092  0E6D  0021               	movlb	1	; select bank1
  6093  0E6E  00B3               	movwf	_buf^(0+128)
  6094                           
  6095                           ;mcp2515.c: 85: buf[1] = 0x0f;
  6096  0E6F  300F               	movlw	15
  6097  0E70  0020               	movlb	0	; select bank0
  6098  0E71  00BB               	movwf	??_can_ope_mode
  6099  0E72  083B               	movf	??_can_ope_mode,w
  6100  0E73  0021               	movlb	1	; select bank1
  6101  0E74  00B4               	movwf	(_buf^(0+128)+1)
  6102                           
  6103                           ;mcp2515.c: 86: buf[2] = ope_mode;
  6104  0E75  0020               	movlb	0	; select bank0
  6105  0E76  083E               	movf	can_ope_mode@ope_mode,w
  6106  0E77  00BB               	movwf	??_can_ope_mode
  6107  0E78  083B               	movf	??_can_ope_mode,w
  6108  0E79  0021               	movlb	1	; select bank1
  6109  0E7A  00B5               	movwf	(_buf^(0+128)+2)
  6110                           
  6111                           ;mcp2515.c: 87: uint8_t bytes_written = SPI_exchange(buf, 3);
  6112  0E7B  3003               	movlw	3
  6113  0E7C  0020               	movlb	0	; select bank0
  6114  0E7D  00BB               	movwf	??_can_ope_mode
  6115  0E7E  083B               	movf	??_can_ope_mode,w
  6116  0E7F  00F8               	movwf	SPI_exchange@len
  6117  0E80  30B3               	movlw	(low (_buf| 0))& (0+255)
  6118  0E81  318C  2486  318E   	fcall	_SPI_exchange
  6119  0E84  0020               	movlb	0	; select bank0
  6120  0E85  00BC               	movwf	??_can_ope_mode+1
  6121  0E86  083C               	movf	??_can_ope_mode+1,w
  6122  0E87  00BD               	movwf	can_ope_mode@bytes_written
  6123                           
  6124                           ;mcp2515.c: 89: if (ope_mode != 0b10000000) operation_mode = ope_mode;
  6125  0E88  3080               	movlw	128
  6126  0E89  063E               	xorwf	can_ope_mode@ope_mode,w
  6127  0E8A  1903               	btfsc	3,2
  6128  0E8B  2E90               	goto	l2139
  6129  0E8C  083E               	movf	can_ope_mode@ope_mode,w
  6130  0E8D  00BB               	movwf	??_can_ope_mode
  6131  0E8E  083B               	movf	??_can_ope_mode,w
  6132  0E8F  00E8               	movwf	_operation_mode
  6133  0E90                     l2139:	
  6134                           
  6135                           ;mcp2515.c: 91: if (bytes_written == 3) {
  6136  0E90  3003               	movlw	3
  6137  0E91  063D               	xorwf	can_ope_mode@bytes_written,w
  6138  0E92  1D03               	btfss	3,2
  6139  0E93  0008               	return
  6140                           
  6141                           ;mcp2515.c: 92: buf[0] = 0b00000011;
  6142  0E94  3003               	movlw	3
  6143  0E95  00BB               	movwf	??_can_ope_mode
  6144  0E96  083B               	movf	??_can_ope_mode,w
  6145  0E97  0021               	movlb	1	; select bank1
  6146  0E98  00B3               	movwf	_buf^(0+128)
  6147                           
  6148                           ;mcp2515.c: 93: buf[1] = 0x0e;
  6149  0E99  300E               	movlw	14
  6150  0E9A  0020               	movlb	0	; select bank0
  6151  0E9B  00BB               	movwf	??_can_ope_mode
  6152  0E9C  083B               	movf	??_can_ope_mode,w
  6153  0E9D  0021               	movlb	1	; select bank1
  6154  0E9E  00B4               	movwf	(_buf^(0+128)+1)
  6155                           
  6156                           ;mcp2515.c: 94: bytes_written = SPI_exchange(buf, 3);
  6157  0E9F  3003               	movlw	3
  6158  0EA0  0020               	movlb	0	; select bank0
  6159  0EA1  00BB               	movwf	??_can_ope_mode
  6160  0EA2  083B               	movf	??_can_ope_mode,w
  6161  0EA3  00F8               	movwf	SPI_exchange@len
  6162  0EA4  30B3               	movlw	(low (_buf| 0))& (0+255)
  6163  0EA5  318C  2486  318E   	fcall	_SPI_exchange
  6164  0EA8  0020               	movlb	0	; select bank0
  6165  0EA9  00BC               	movwf	??_can_ope_mode+1
  6166  0EAA  083C               	movf	??_can_ope_mode+1,w
  6167  0EAB  00BD               	movwf	can_ope_mode@bytes_written
  6168                           
  6169                           ;mcp2515.c: 95: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6170  0EAC  0862               	movf	_mode,w
  6171  0EAD  1903               	btfsc	3,2
  6172  0EAE  0008               	return
  6173  0EAF  3053               	movlw	low (STR_21| (0+32768))
  6174  0EB0  00A2               	movwf	printf@f
  6175  0EB1  3093               	movlw	high (STR_21| (0+32768))
  6176  0EB2  00A3               	movwf	printf@f+1
  6177  0EB3  0021               	movlb	1	; select bank1
  6178  0EB4  0835               	movf	(_buf^(0+128)+2),w
  6179  0EB5  0020               	movlb	0	; select bank0
  6180  0EB6  00BB               	movwf	??_can_ope_mode
  6181  0EB7  01BC               	clrf	??_can_ope_mode+1
  6182  0EB8  083B               	movf	??_can_ope_mode,w
  6183  0EB9  00A4               	movwf	?_printf+2
  6184  0EBA  083C               	movf	??_can_ope_mode+1,w
  6185  0EBB  00A5               	movwf	?_printf+3
  6186  0EBC  3185  25B3         	fcall	_printf
  6187                           
  6188                           ;mcp2515.c: 98: return 0;
  6189                           ;	Return value of _can_ope_mode is never used
  6190                           
  6191                           ;mcp2515.c: 97: } else {
  6192                           
  6193                           ;mcp2515.c: 96: return 1;
  6194                           ;	Return value of _can_ope_mode is never used
  6195  0EBE  0008               	return
  6196  0EBF                     __end_of_can_ope_mode:	
  6197                           
  6198                           	psect	text15
  6199  05B3                     __ptext15:	
  6200 ;; *************** function _printf *****************
  6201 ;; Defined at:
  6202 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6205 ;;		 -> STR_54(5), STR_53(15), STR_52(15), STR_51(2), 
  6206 ;;		 -> STR_50(16), STR_49(16), STR_48(2), STR_47(16), 
  6207 ;;		 -> STR_46(16), STR_45(16), STR_44(2), STR_43(12), 
  6208 ;;		 -> STR_42(12), STR_41(12), STR_40(2), STR_39(12), 
  6209 ;;		 -> STR_38(12), STR_37(5), STR_36(13), STR_35(13), 
  6210 ;;		 -> STR_34(18), STR_33(17), STR_32(17), STR_31(20), 
  6211 ;;		 -> STR_30(14), STR_29(14), STR_28(14), STR_27(15), 
  6212 ;;		 -> STR_26(16), STR_25(17), STR_24(17), STR_23(23), 
  6213 ;;		 -> STR_22(21), STR_21(15), STR_20(22), STR_19(44), 
  6214 ;;		 -> STR_18(57), STR_17(26), STR_16(21), STR_15(38), 
  6215 ;;		 -> STR_14(25), STR_13(42), STR_12(38), STR_11(58), 
  6216 ;;		 -> STR_10(54), STR_9(59), STR_8(51), STR_7(23), 
  6217 ;;		 -> STR_6(3), STR_5(4), STR_4(2), STR_3(6), 
  6218 ;;		 -> STR_2(6), STR_1(7), 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  idx             1   14[BANK0 ] unsigned char 
  6221 ;;  tmpval          4    0        struct .
  6222 ;;  width           2   24[BANK0 ] int 
  6223 ;;  val             2   21[BANK0 ] unsigned int 
  6224 ;;  len             2   18[BANK0 ] unsigned int 
  6225 ;;  cp              2   16[BANK0 ] PTR const unsigned char 
  6226 ;;		 -> STR_55(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6227 ;;		 -> txf_clear@n(1), main@buf(9), 
  6228 ;;  c               1   26[BANK0 ] char 
  6229 ;;  flag            1   23[BANK0 ] unsigned char 
  6230 ;;  ap              1   20[BANK0 ] PTR void [1]
  6231 ;;		 -> ?_printf(2), 
  6232 ;;  prec            1   15[BANK0 ] char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  2    2[BANK0 ] int 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6242 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;Total ram usage:       25 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    2
  6249 ;; This function calls:
  6250 ;;		___lwdiv
  6251 ;;		___lwmod
  6252 ;;		___wmul
  6253 ;;		_isdigit
  6254 ;;		_putch
  6255 ;; This function is called by:
  6256 ;;		_receive_handler
  6257 ;;		_main
  6258 ;;		_can_ope_mode
  6259 ;;		_can_set_mask
  6260 ;;		_receive
  6261 ;;		_can_send
  6262 ;;		_can_status_check
  6263 ;;		_can_dump_registers
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function _printf
  6269  05B3                     _printf:	
  6270                           
  6271                           ;doprnt.c: 466: va_list ap;
  6272                           ;doprnt.c: 499: signed char c;
  6273                           ;doprnt.c: 501: int width;
  6274                           ;doprnt.c: 506: signed char prec;
  6275                           ;doprnt.c: 508: unsigned char flag;
  6276                           ;doprnt.c: 523: union {
  6277                           ;doprnt.c: 524: unsigned long vd;
  6278                           ;doprnt.c: 525: double integ;
  6279                           ;doprnt.c: 526: } tmpval;
  6280                           ;doprnt.c: 528: unsigned int val;
  6281                           ;doprnt.c: 529: unsigned len;
  6282                           ;doprnt.c: 530: const char * cp;
  6283                           ;doprnt.c: 533: *ap = __va_start();
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6287  05B3  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6288  05B4  0020               	movlb	0	; select bank0
  6289  05B5  00AA               	movwf	??_printf
  6290  05B6  082A               	movf	??_printf,w
  6291  05B7  00B4               	movwf	printf@ap
  6292  05B8                     l2061:	
  6293                           ;doprnt.c: 536: while(c = *f++) {
  6294                           
  6295  05B8  0020               	movlb	0	; select bank0
  6296  05B9  0823               	movf	printf@f+1,w
  6297  05BA  00AB               	movwf	??_printf+1
  6298  05BB  0822               	movf	printf@f,w
  6299  05BC  00AA               	movwf	??_printf
  6300  05BD  0AA2               	incf	printf@f,f
  6301  05BE  1903               	skipnz
  6302  05BF  0AA3               	incf	printf@f+1,f
  6303  05C0  082A               	movf	??_printf,w
  6304  05C1  0084               	movwf	4
  6305  05C2  082B               	movf	??_printf+1,w
  6306  05C3  0085               	movwf	5
  6307  05C4  0800               	movf	0,w	;code access
  6308  05C5  00AC               	movwf	??_printf+2
  6309  05C6  082C               	movf	??_printf+2,w
  6310  05C7  00BA               	movwf	printf@c
  6311  05C8  083A               	movf	printf@c,w
  6312  05C9  1903               	btfsc	3,2
  6313  05CA  0008               	return
  6314                           
  6315                           ;doprnt.c: 538: if(c != '%')
  6316  05CB  3025               	movlw	37
  6317  05CC  063A               	xorwf	printf@c,w
  6318  05CD  1903               	btfsc	3,2
  6319  05CE  2DD4               	goto	l1913
  6320                           
  6321                           ;doprnt.c: 540: {
  6322                           ;doprnt.c: 541: (putch(c) );
  6323  05CF  083A               	movf	printf@c,w
  6324  05D0  318C  2426  3185   	fcall	_putch
  6325                           
  6326                           ;doprnt.c: 542: continue;
  6327  05D3  2DB8               	goto	l2061
  6328  05D4                     l1913:	
  6329                           
  6330                           ;doprnt.c: 543: }
  6331                           ;doprnt.c: 546: width = 0;
  6332  05D4  0020               	movlb	0	; select bank0
  6333  05D5  01B8               	clrf	printf@width
  6334  05D6  01B9               	clrf	printf@width+1
  6335                           
  6336                           ;doprnt.c: 548: flag = 0;
  6337  05D7  01B7               	clrf	printf@flag
  6338                           
  6339                           ;doprnt.c: 551: switch(*f) {
  6340                           
  6341                           ;doprnt.c: 550: for(;;) {
  6342  05D8  2DDE               	goto	l1919
  6343  05D9                     l383:	
  6344                           ;doprnt.c: 579: case '0':
  6345                           
  6346                           
  6347                           ;doprnt.c: 580: flag |= 0x04;
  6348  05D9  1537               	bsf	printf@flag,2
  6349                           
  6350                           ;doprnt.c: 581: f++;
  6351  05DA  3001               	movlw	1
  6352  05DB  07A2               	addwf	printf@f,f
  6353  05DC  3000               	movlw	0
  6354  05DD  3DA3               	addwfc	printf@f+1,f
  6355  05DE                     l1919:	
  6356                           ;doprnt.c: 584: }
  6357                           
  6358                           ;doprnt.c: 582: continue;
  6359                           
  6360  05DE  0822               	movf	printf@f,w
  6361  05DF  0084               	movwf	4
  6362  05E0  0823               	movf	printf@f+1,w
  6363  05E1  0085               	movwf	5
  6364  05E2  0800               	movf	0,w	;code access
  6365                           
  6366                           ; Switch size 1, requested type "space"
  6367                           ; Number of cases is 1, Range of values is 48 to 48
  6368                           ; switch strategies available:
  6369                           ; Name         Instructions Cycles
  6370                           ; simple_byte            4     3 (average)
  6371                           ; direct_byte           11     9 (fixed)
  6372                           ; jumptable            263     9 (fixed)
  6373                           ;	Chosen strategy is simple_byte
  6374  05E3  3A30               	xorlw	48	; case 48
  6375  05E4  1903               	skipnz
  6376  05E5  2DD9               	goto	l383
  6377  05E6  2DE7               	goto	l1921
  6378  05E7                     l1921:	
  6379                           ;doprnt.c: 586: }
  6380                           
  6381                           ;doprnt.c: 585: break;
  6382                           
  6383                           
  6384                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6385  05E7  0822               	movf	printf@f,w
  6386  05E8  0084               	movwf	4
  6387  05E9  0823               	movf	printf@f+1,w
  6388  05EA  0085               	movwf	5
  6389  05EB  0800               	movf	0,w	;code access
  6390  05EC  318C  2469  3185   	fcall	_isdigit
  6391  05EF  1C03               	btfss	3,0
  6392  05F0  2E92               	goto	l1973
  6393                           
  6394                           ;doprnt.c: 598: width = 0;
  6395  05F1  0020               	movlb	0	; select bank0
  6396  05F2  01B8               	clrf	printf@width
  6397  05F3  01B9               	clrf	printf@width+1
  6398  05F4                     l1925:	
  6399                           ;doprnt.c: 599: do {
  6400                           
  6401                           
  6402                           ;doprnt.c: 600: width *= 10;
  6403  05F4  300A               	movlw	10
  6404  05F5  00F0               	movwf	___wmul@multiplier
  6405  05F6  3000               	movlw	0
  6406  05F7  00F1               	movwf	___wmul@multiplier+1
  6407  05F8  0020               	movlb	0	; select bank0
  6408  05F9  0839               	movf	printf@width+1,w
  6409  05FA  00F3               	movwf	___wmul@multiplicand+1
  6410  05FB  0838               	movf	printf@width,w
  6411  05FC  00F2               	movwf	___wmul@multiplicand
  6412  05FD  318C  24CB  3185   	fcall	___wmul
  6413  0600  0871               	movf	?___wmul+1,w
  6414  0601  0020               	movlb	0	; select bank0
  6415  0602  00B9               	movwf	printf@width+1
  6416  0603  0870               	movf	?___wmul,w
  6417  0604  00B8               	movwf	printf@width
  6418                           
  6419                           ;doprnt.c: 601: width += *f++ - '0';
  6420  0605  0822               	movf	printf@f,w
  6421  0606  0084               	movwf	4
  6422  0607  0823               	movf	printf@f+1,w
  6423  0608  0085               	movwf	5
  6424  0609  0800               	movf	0,w	;code access
  6425  060A  3ED0               	addlw	208
  6426  060B  00AA               	movwf	??_printf
  6427  060C  30FF               	movlw	255
  6428  060D  1803               	skipnc
  6429  060E  3000               	movlw	0
  6430  060F  00AB               	movwf	??_printf+1
  6431  0610  082A               	movf	??_printf,w
  6432  0611  07B8               	addwf	printf@width,f
  6433  0612  082B               	movf	??_printf+1,w
  6434  0613  3DB9               	addwfc	printf@width+1,f
  6435  0614  3001               	movlw	1
  6436  0615  07A2               	addwf	printf@f,f
  6437  0616  3000               	movlw	0
  6438  0617  3DA3               	addwfc	printf@f+1,f
  6439                           
  6440                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6441  0618  0822               	movf	printf@f,w
  6442  0619  0084               	movwf	4
  6443  061A  0823               	movf	printf@f+1,w
  6444  061B  0085               	movwf	5
  6445  061C  0800               	movf	0,w	;code access
  6446  061D  318C  2469  3185   	fcall	_isdigit
  6447  0620  1C03               	btfss	3,0
  6448  0621  2E92               	goto	l1973
  6449  0622  2DF4               	goto	l1925
  6450  0623                     l396:	
  6451                           ;doprnt.c: 718: case 'x':
  6452                           
  6453                           ;doprnt.c: 698: case 'i':
  6454                           ;doprnt.c: 699: break;
  6455                           
  6456                           ;doprnt.c: 697: case 'd':
  6457                           
  6458                           ;doprnt.c: 638: goto alldone;
  6459                           
  6460                           ;doprnt.c: 637: case 0:
  6461                           
  6462                           ;doprnt.c: 608: }
  6463                           ;doprnt.c: 635: switch(c = *f++) {
  6464                           
  6465                           
  6466                           ;doprnt.c: 721: flag |= 0x80;
  6467  0623  17B7               	bsf	printf@flag,7
  6468                           
  6469                           ;doprnt.c: 723: break;
  6470  0624  2EB3               	goto	l395
  6471  0625                     l1933:	
  6472                           ;doprnt.c: 728: case 's':
  6473                           
  6474                           
  6475                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6476  0625  0834               	movf	printf@ap,w
  6477  0626  0086               	movwf	6
  6478  0627  0187               	clrf	7
  6479  0628  0801               	movf	1,w
  6480  0629  00B0               	movwf	printf@cp
  6481  062A  3000               	movlw	0
  6482  062B  00B1               	movwf	printf@cp+1
  6483  062C  3001               	movlw	1
  6484  062D  00AA               	movwf	??_printf
  6485  062E  082A               	movf	??_printf,w
  6486  062F  07B4               	addwf	printf@ap,f
  6487                           
  6488                           ;doprnt.c: 740: if(!cp)
  6489  0630  0830               	movf	printf@cp,w
  6490  0631  0431               	iorwf	printf@cp+1,w
  6491  0632  1D03               	btfss	3,2
  6492  0633  2E38               	goto	l1941
  6493                           
  6494                           ;doprnt.c: 741: cp = "(null)";
  6495  0634  30DC               	movlw	low (STR_55| (0+32768))
  6496  0635  00B0               	movwf	printf@cp
  6497  0636  3093               	movlw	high (STR_55| (0+32768))
  6498  0637  00B1               	movwf	printf@cp+1
  6499  0638                     l1941:	
  6500                           
  6501                           ;doprnt.c: 745: len = 0;
  6502  0638  01B2               	clrf	printf@len
  6503  0639  01B3               	clrf	printf@len+1
  6504  063A                     l1945:	
  6505                           ;doprnt.c: 746: while(cp[len])
  6506                           
  6507  063A  0830               	movf	printf@cp,w
  6508  063B  0732               	addwf	printf@len,w
  6509  063C  0084               	movwf	4
  6510  063D  0831               	movf	printf@cp+1,w
  6511  063E  3D33               	addwfc	printf@len+1,w
  6512  063F  0085               	movwf	5
  6513  0640  0012               	moviw fsr0++
  6514  0641  1903               	btfsc	3,2
  6515  0642  2E48               	goto	l1947
  6516                           
  6517                           ;doprnt.c: 747: len++;
  6518  0643  3001               	movlw	1
  6519  0644  07B2               	addwf	printf@len,f
  6520  0645  3000               	movlw	0
  6521  0646  3DB3               	addwfc	printf@len+1,f
  6522  0647  2E3A               	goto	l1945
  6523  0648                     l1947:	
  6524                           ;doprnt.c: 750: dostring:
  6525                           
  6526                           
  6527                           ;doprnt.c: 757: if(width > len)
  6528  0648  0839               	movf	printf@width+1,w
  6529  0649  0233               	subwf	printf@len+1,w
  6530  064A  1D03               	skipz
  6531  064B  2E4E               	goto	u1525
  6532  064C  0838               	movf	printf@width,w
  6533  064D  0232               	subwf	printf@len,w
  6534  064E                     u1525:	
  6535  064E  1803               	skipnc
  6536  064F  2E55               	goto	l1951
  6537                           
  6538                           ;doprnt.c: 758: width -= len;
  6539  0650  0832               	movf	printf@len,w
  6540  0651  02B8               	subwf	printf@width,f
  6541  0652  0833               	movf	printf@len+1,w
  6542  0653  3BB9               	subwfb	printf@width+1,f
  6543  0654  2E57               	goto	l1955
  6544  0655                     l1951:	
  6545                           
  6546                           ;doprnt.c: 759: else
  6547                           ;doprnt.c: 760: width = 0;
  6548  0655  01B8               	clrf	printf@width
  6549  0656  01B9               	clrf	printf@width+1
  6550  0657                     l1955:	
  6551                           ;doprnt.c: 764: while(width--)
  6552                           
  6553  0657  30FF               	movlw	255
  6554  0658  0020               	movlb	0	; select bank0
  6555  0659  07B8               	addwf	printf@width,f
  6556  065A  30FF               	movlw	255
  6557  065B  3DB9               	addwfc	printf@width+1,f
  6558  065C  0A38               	incf	printf@width,w
  6559  065D  1903               	btfsc	3,2
  6560  065E  0A39               	incf	printf@width+1,w
  6561  065F  1903               	btfsc	3,2
  6562  0660  2E73               	goto	l1961
  6563                           
  6564                           ;doprnt.c: 765: (putch(' ') );
  6565  0661  3020               	movlw	32
  6566  0662  318C  2426  3185   	fcall	_putch
  6567  0665  2E57               	goto	l1955
  6568  0666                     l1957:	
  6569                           ;doprnt.c: 767: while(len--)
  6570                           
  6571                           
  6572                           ;doprnt.c: 768: (putch(*cp++) );
  6573  0666  0830               	movf	printf@cp,w
  6574  0667  0084               	movwf	4
  6575  0668  0831               	movf	printf@cp+1,w
  6576  0669  0085               	movwf	5
  6577  066A  0800               	movf	0,w	;code access
  6578  066B  318C  2426  3185   	fcall	_putch
  6579  066E  3001               	movlw	1
  6580  066F  0020               	movlb	0	; select bank0
  6581  0670  07B0               	addwf	printf@cp,f
  6582  0671  3000               	movlw	0
  6583  0672  3DB1               	addwfc	printf@cp+1,f
  6584  0673                     l1961:	
  6585  0673  3001               	movlw	1
  6586  0674  02B2               	subwf	printf@len,f
  6587  0675  3000               	movlw	0
  6588  0676  3BB3               	subwfb	printf@len+1,f
  6589  0677  0A32               	incf	printf@len,w
  6590  0678  1D03               	skipz
  6591  0679  2E66               	goto	l1957
  6592  067A  0A33               	incf	printf@len+1,w
  6593  067B  1903               	btfsc	3,2
  6594  067C  2DB8               	goto	l2061
  6595  067D  2E66               	goto	l1957
  6596  067E                     l1963:	
  6597                           ;doprnt.c: 784: case 'c':
  6598                           
  6599                           ;doprnt.c: 774: continue;
  6600                           
  6601                           
  6602                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6603  067E  0834               	movf	printf@ap,w
  6604  067F  0086               	movwf	6
  6605  0680  0187               	clrf	7
  6606  0681  0801               	movf	1,w
  6607  0682  00AA               	movwf	??_printf
  6608  0683  082A               	movf	??_printf,w
  6609  0684  00BA               	movwf	printf@c
  6610  0685  3002               	movlw	2
  6611  0686  00AA               	movwf	??_printf
  6612  0687  082A               	movf	??_printf,w
  6613  0688  07B4               	addwf	printf@ap,f
  6614  0689                     l1967:	
  6615                           ;doprnt.c: 802: default:
  6616                           
  6617                           
  6618                           ;doprnt.c: 805: cp = (char *)&c;
  6619  0689  303A               	movlw	low printf@c
  6620  068A  00B0               	movwf	printf@cp
  6621  068B  3000               	movlw	high printf@c
  6622  068C  00B1               	movwf	printf@cp+1
  6623                           
  6624                           ;doprnt.c: 806: len = 1;
  6625  068D  3001               	movlw	1
  6626  068E  00B2               	movwf	printf@len
  6627  068F  3000               	movlw	0
  6628  0690  00B3               	movwf	printf@len+1
  6629                           
  6630                           ;doprnt.c: 807: goto dostring;
  6631  0691  2E48               	goto	l1947
  6632  0692                     l1973:	
  6633                           ;doprnt.c: 822: }
  6634                           
  6635  0692  0020               	movlb	0	; select bank0
  6636  0693  0823               	movf	printf@f+1,w
  6637  0694  00AB               	movwf	??_printf+1
  6638  0695  0822               	movf	printf@f,w
  6639  0696  00AA               	movwf	??_printf
  6640  0697  0AA2               	incf	printf@f,f
  6641  0698  1903               	skipnz
  6642  0699  0AA3               	incf	printf@f+1,f
  6643  069A  082A               	movf	??_printf,w
  6644  069B  0084               	movwf	4
  6645  069C  082B               	movf	??_printf+1,w
  6646  069D  0085               	movwf	5
  6647  069E  0800               	movf	0,w	;code access
  6648  069F  00BA               	movwf	printf@c
  6649                           
  6650                           ; Switch size 1, requested type "space"
  6651                           ; Number of cases is 6, Range of values is 0 to 120
  6652                           ; switch strategies available:
  6653                           ; Name         Instructions Cycles
  6654                           ; simple_byte           19    10 (average)
  6655                           ; direct_byte          248     6 (fixed)
  6656                           ; jumptable            260     6 (fixed)
  6657                           ;	Chosen strategy is simple_byte
  6658  06A0  3A00               	xorlw	0	; case 0
  6659  06A1  1903               	skipnz
  6660  06A2  2FED               	goto	l447
  6661  06A3  3A63               	xorlw	99	; case 99
  6662  06A4  1903               	skipnz
  6663  06A5  2E7E               	goto	l1963
  6664  06A6  3A07               	xorlw	7	; case 100
  6665  06A7  1903               	skipnz
  6666  06A8  2EB3               	goto	l395
  6667  06A9  3A0D               	xorlw	13	; case 105
  6668  06AA  1903               	skipnz
  6669  06AB  2EB3               	goto	l395
  6670  06AC  3A1A               	xorlw	26	; case 115
  6671  06AD  1903               	skipnz
  6672  06AE  2E25               	goto	l1933
  6673  06AF  3A0B               	xorlw	11	; case 120
  6674  06B0  1903               	skipnz
  6675  06B1  2E23               	goto	l396
  6676  06B2  2E89               	goto	l1967
  6677  06B3                     l395:	
  6678                           
  6679                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6680  06B3  0020               	movlb	0	; select bank0
  6681  06B4  1BB7               	btfsc	printf@flag,7
  6682  06B5  2ECD               	goto	l1985
  6683                           
  6684                           ;doprnt.c: 1253: {
  6685                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6686  06B6  0834               	movf	printf@ap,w
  6687  06B7  0086               	movwf	6
  6688  06B8  0187               	clrf	7
  6689  06B9  3F40               	moviw [0]fsr1
  6690  06BA  00B5               	movwf	printf@val
  6691  06BB  3F41               	moviw [1]fsr1
  6692  06BC  00B6               	movwf	printf@val+1
  6693  06BD  3002               	movlw	2
  6694  06BE  00AA               	movwf	??_printf
  6695  06BF  082A               	movf	??_printf,w
  6696  06C0  07B4               	addwf	printf@ap,f
  6697                           
  6698                           ;doprnt.c: 1261: if((int)val < 0) {
  6699  06C1  1FB6               	btfss	printf@val+1,7
  6700  06C2  2F1D               	goto	l2011
  6701                           
  6702                           ;doprnt.c: 1262: flag |= 0x03;
  6703  06C3  3003               	movlw	3
  6704  06C4  00AA               	movwf	??_printf
  6705  06C5  082A               	movf	??_printf,w
  6706  06C6  04B7               	iorwf	printf@flag,f
  6707                           
  6708                           ;doprnt.c: 1263: val = -val;
  6709  06C7  09B5               	comf	printf@val,f
  6710  06C8  09B6               	comf	printf@val+1,f
  6711  06C9  0AB5               	incf	printf@val,f
  6712  06CA  1903               	skipnz
  6713  06CB  0AB6               	incf	printf@val+1,f
  6714                           
  6715                           ;doprnt.c: 1264: }
  6716                           ;doprnt.c: 1266: }
  6717  06CC  2F1D               	goto	l2011
  6718  06CD                     l1985:	
  6719                           
  6720                           ;doprnt.c: 1268: else
  6721                           ;doprnt.c: 1273: {
  6722                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6723  06CD  0834               	movf	printf@ap,w
  6724  06CE  0086               	movwf	6
  6725  06CF  0187               	clrf	7
  6726  06D0  3F40               	moviw [0]fsr1
  6727  06D1  00B5               	movwf	printf@val
  6728  06D2  3F41               	moviw [1]fsr1
  6729  06D3  00B6               	movwf	printf@val+1
  6730  06D4  3002               	movlw	2
  6731  06D5  00AA               	movwf	??_printf
  6732  06D6  082A               	movf	??_printf,w
  6733  06D7  07B4               	addwf	printf@ap,f
  6734                           
  6735                           ;doprnt.c: 1287: }
  6736                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6737  06D8  2F1D               	goto	l2011
  6738  06D9                     l417:	
  6739                           ;doprnt.c: 1299: case 0x00:
  6740                           
  6741                           
  6742                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6743  06D9  01BA               	clrf	printf@c
  6744  06DA  0ABA               	incf	printf@c,f
  6745  06DB                     L9:	
  6746  06DB  3005               	movlw	5
  6747  06DC  063A               	xorwf	printf@c,w
  6748  06DD  1903               	btfsc	3,2
  6749  06DE  2F26               	goto	l2013
  6750                           
  6751                           ;doprnt.c: 1306: if(val < dpowers[c])
  6752  06DF  083A               	movf	printf@c,w
  6753  06E0  00AA               	movwf	??_printf
  6754  06E1  01AB               	clrf	??_printf+1
  6755  06E2  35AA               	lslf	??_printf,f
  6756  06E3  0DAB               	rlf	??_printf+1,f
  6757  06E4  30CA               	movlw	low (_dpowers| (0+32768))
  6758  06E5  072A               	addwf	??_printf,w
  6759  06E6  0084               	movwf	4
  6760  06E7  3093               	movlw	high (_dpowers| (0+32768))
  6761  06E8  3D2B               	addwfc	??_printf+1,w
  6762  06E9  0085               	movwf	5
  6763  06EA  3F00               	moviw [0]fsr0
  6764  06EB  00AC               	movwf	??_printf+2
  6765  06EC  3F01               	moviw [1]fsr0
  6766  06ED  00AD               	movwf	??_printf+3
  6767  06EE  082D               	movf	??_printf+3,w
  6768  06EF  0236               	subwf	printf@val+1,w
  6769  06F0  1D03               	skipz
  6770  06F1  2EF4               	goto	u1585
  6771  06F2  082C               	movf	??_printf+2,w
  6772  06F3  0235               	subwf	printf@val,w
  6773  06F4                     u1585:	
  6774  06F4  1C03               	btfss	3,0
  6775  06F5  2F26               	goto	l2013
  6776                           
  6777                           ;doprnt.c: 1307: break;
  6778  06F6  3001               	movlw	1
  6779  06F7  00AA               	movwf	??_printf
  6780  06F8  082A               	movf	??_printf,w
  6781  06F9  07BA               	addwf	printf@c,f
  6782  06FA  2EDB               	goto	L9
  6783  06FB                     l422:	
  6784                           ;doprnt.c: 1314: case 0x80:
  6785                           
  6786                           ;doprnt.c: 1309: break;
  6787                           
  6788                           
  6789                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6790  06FB  01BA               	clrf	printf@c
  6791  06FC  0ABA               	incf	printf@c,f
  6792  06FD                     L10:	
  6793  06FD  3004               	movlw	4
  6794  06FE  063A               	xorwf	printf@c,w
  6795  06FF  1903               	btfsc	3,2
  6796  0700  2F26               	goto	l2013
  6797                           
  6798                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6799  0701  083A               	movf	printf@c,w
  6800  0702  00AA               	movwf	??_printf
  6801  0703  01AB               	clrf	??_printf+1
  6802  0704  35AA               	lslf	??_printf,f
  6803  0705  0DAB               	rlf	??_printf+1,f
  6804  0706  30D4               	movlw	low (_hexpowers| (0+32768))
  6805  0707  072A               	addwf	??_printf,w
  6806  0708  0084               	movwf	4
  6807  0709  3093               	movlw	high (_hexpowers| (0+32768))
  6808  070A  3D2B               	addwfc	??_printf+1,w
  6809  070B  0085               	movwf	5
  6810  070C  3F00               	moviw [0]fsr0
  6811  070D  00AC               	movwf	??_printf+2
  6812  070E  3F01               	moviw [1]fsr0
  6813  070F  00AD               	movwf	??_printf+3
  6814  0710  082D               	movf	??_printf+3,w
  6815  0711  0236               	subwf	printf@val+1,w
  6816  0712  1D03               	skipz
  6817  0713  2F16               	goto	u1615
  6818  0714  082C               	movf	??_printf+2,w
  6819  0715  0235               	subwf	printf@val,w
  6820  0716                     u1615:	
  6821  0716  1C03               	btfss	3,0
  6822  0717  2F26               	goto	l2013
  6823                           
  6824                           ;doprnt.c: 1318: break;
  6825  0718  3001               	movlw	1
  6826  0719  00AA               	movwf	??_printf
  6827  071A  082A               	movf	??_printf,w
  6828  071B  07BA               	addwf	printf@c,f
  6829  071C  2EFD               	goto	L10
  6830  071D                     l2011:	
  6831                           ;doprnt.c: 1336: }
  6832                           
  6833                           ;doprnt.c: 1320: break;
  6834                           
  6835  071D  0837               	movf	printf@flag,w
  6836  071E  3980               	andlw	128
  6837                           
  6838                           ; Switch size 1, requested type "space"
  6839                           ; Number of cases is 2, Range of values is 0 to 128
  6840                           ; switch strategies available:
  6841                           ; Name         Instructions Cycles
  6842                           ; simple_byte            7     4 (average)
  6843                           ; jumptable            260     6 (fixed)
  6844                           ;	Chosen strategy is simple_byte
  6845  071F  3A00               	xorlw	0	; case 0
  6846  0720  1903               	skipnz
  6847  0721  2ED9               	goto	l417
  6848  0722  3A80               	xorlw	128	; case 128
  6849  0723  1903               	skipnz
  6850  0724  2EFB               	goto	l422
  6851  0725  2F26               	goto	l2013
  6852  0726                     l2013:	
  6853                           
  6854                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6855  0726  0838               	movf	printf@width,w
  6856  0727  0439               	iorwf	printf@width+1,w
  6857  0728  1903               	btfsc	3,2
  6858  0729  2F32               	goto	l426
  6859  072A  0837               	movf	printf@flag,w
  6860  072B  3903               	andlw	3
  6861  072C  1903               	btfsc	3,2
  6862  072D  2F32               	goto	l426
  6863                           
  6864                           ;doprnt.c: 1346: width--;
  6865  072E  30FF               	movlw	255
  6866  072F  07B8               	addwf	printf@width,f
  6867  0730  30FF               	movlw	255
  6868  0731  3DB9               	addwfc	printf@width+1,f
  6869  0732                     l426:	
  6870                           
  6871                           ;doprnt.c: 1381: if(width > c)
  6872  0732  083A               	movf	printf@c,w
  6873  0733  00AA               	movwf	??_printf
  6874  0734  01AB               	clrf	??_printf+1
  6875  0735  1BAA               	btfsc	??_printf,7
  6876  0736  03AB               	decf	??_printf+1,f
  6877  0737  082B               	movf	??_printf+1,w
  6878  0738  3A80               	xorlw	128
  6879  0739  00AC               	movwf	??_printf+2
  6880  073A  0839               	movf	printf@width+1,w
  6881  073B  3A80               	xorlw	128
  6882  073C  022C               	subwf	??_printf+2,w
  6883  073D  1D03               	skipz
  6884  073E  2F41               	goto	u1655
  6885  073F  0838               	movf	printf@width,w
  6886  0740  022A               	subwf	??_printf,w
  6887  0741                     u1655:	
  6888  0741  1803               	skipnc
  6889  0742  2F4E               	goto	l2021
  6890                           
  6891                           ;doprnt.c: 1382: width -= c;
  6892  0743  0020               	movlb	0	; select bank0
  6893  0744  083A               	movf	printf@c,w
  6894  0745  00AA               	movwf	??_printf
  6895  0746  01AB               	clrf	??_printf+1
  6896  0747  1BAA               	btfsc	??_printf,7
  6897  0748  03AB               	decf	??_printf+1,f
  6898  0749  082A               	movf	??_printf,w
  6899  074A  02B8               	subwf	printf@width,f
  6900  074B  082B               	movf	??_printf+1,w
  6901  074C  3BB9               	subwfb	printf@width+1,f
  6902  074D  2F51               	goto	l2023
  6903  074E                     l2021:	
  6904                           
  6905                           ;doprnt.c: 1383: else
  6906                           ;doprnt.c: 1384: width = 0;
  6907  074E  0020               	movlb	0	; select bank0
  6908  074F  01B8               	clrf	printf@width
  6909  0750  01B9               	clrf	printf@width+1
  6910  0751                     l2023:	
  6911                           
  6912                           ;doprnt.c: 1387: if(flag & 0x04) {
  6913  0751  1D37               	btfss	printf@flag,2
  6914  0752  2F6A               	goto	l2035
  6915                           
  6916                           ;doprnt.c: 1392: if(flag & 0x03)
  6917  0753  0837               	movf	printf@flag,w
  6918  0754  3903               	andlw	3
  6919  0755  1903               	btfsc	3,2
  6920  0756  2F5B               	goto	l2029
  6921                           
  6922                           ;doprnt.c: 1393: (putch('-') );
  6923  0757  302D               	movlw	45
  6924  0758  318C  2426  3185   	fcall	_putch
  6925  075B                     l2029:	
  6926                           
  6927                           ;doprnt.c: 1415: if(width)
  6928  075B  0020               	movlb	0	; select bank0
  6929  075C                     L11:	
  6930  075C  0838               	movf	printf@width,w
  6931  075D  0439               	iorwf	printf@width+1,w
  6932  075E  1903               	btfsc	3,2
  6933  075F  2F83               	goto	l2045
  6934                           
  6935                           ;doprnt.c: 1417: (putch('0') );
  6936                           
  6937                           ;doprnt.c: 1416: do
  6938  0760  3030               	movlw	48
  6939  0761  318C  2426  3185   	fcall	_putch
  6940                           
  6941                           ;doprnt.c: 1418: while(--width);
  6942  0764  30FF               	movlw	255
  6943  0765  0020               	movlb	0	; select bank0
  6944  0766  07B8               	addwf	printf@width,f
  6945  0767  30FF               	movlw	255
  6946  0768  3DB9               	addwfc	printf@width+1,f
  6947  0769  2F5C               	goto	L11
  6948  076A                     l2035:	
  6949                           ;doprnt.c: 1420: } else
  6950                           
  6951                           
  6952                           ;doprnt.c: 1422: {
  6953                           ;doprnt.c: 1424: if(width
  6954                           ;doprnt.c: 1428: )
  6955  076A  0838               	movf	printf@width,w
  6956  076B  0439               	iorwf	printf@width+1,w
  6957  076C  1903               	btfsc	3,2
  6958  076D  2F7B               	goto	l2041
  6959  076E                     l2037:	
  6960                           ;doprnt.c: 1429: do
  6961                           
  6962                           
  6963                           ;doprnt.c: 1430: (putch(' ') );
  6964  076E  3020               	movlw	32
  6965  076F  318C  2426  3185   	fcall	_putch
  6966                           
  6967                           ;doprnt.c: 1431: while(--width);
  6968  0772  30FF               	movlw	255
  6969  0773  0020               	movlb	0	; select bank0
  6970  0774  07B8               	addwf	printf@width,f
  6971  0775  30FF               	movlw	255
  6972  0776  3DB9               	addwfc	printf@width+1,f
  6973  0777  0838               	movf	printf@width,w
  6974  0778  0439               	iorwf	printf@width+1,w
  6975  0779  1D03               	btfss	3,2
  6976  077A  2F6E               	goto	l2037
  6977  077B                     l2041:	
  6978                           
  6979                           ;doprnt.c: 1438: if(flag & 0x03)
  6980  077B  0837               	movf	printf@flag,w
  6981  077C  3903               	andlw	3
  6982  077D  1903               	btfsc	3,2
  6983  077E  2F83               	goto	l2045
  6984                           
  6985                           ;doprnt.c: 1439: (putch('-') );
  6986  077F  302D               	movlw	45
  6987  0780  318C  2426  3185   	fcall	_putch
  6988  0783                     l2045:	
  6989                           
  6990                           ;doprnt.c: 1469: }
  6991                           ;doprnt.c: 1472: prec = c;
  6992  0783  0020               	movlb	0	; select bank0
  6993  0784  083A               	movf	printf@c,w
  6994  0785  00AA               	movwf	??_printf
  6995  0786  082A               	movf	??_printf,w
  6996  0787  00AF               	movwf	printf@prec
  6997                           
  6998                           ;doprnt.c: 1474: while(prec--) {
  6999  0788  2FDB               	goto	l2059
  7000  0789                     l2047:	
  7001                           ;doprnt.c: 1478: {
  7002                           ;doprnt.c: 1483: case 0x00:
  7003                           
  7004                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7005                           
  7006                           
  7007                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7008  0789  300A               	movlw	10
  7009  078A  00F8               	movwf	___lwmod@divisor
  7010  078B  3000               	movlw	0
  7011  078C  00F9               	movwf	___lwmod@divisor+1
  7012  078D  082F               	movf	printf@prec,w
  7013  078E  00AA               	movwf	??_printf
  7014  078F  01AB               	clrf	??_printf+1
  7015  0790  35AA               	lslf	??_printf,f
  7016  0791  0DAB               	rlf	??_printf+1,f
  7017  0792  30CA               	movlw	low (_dpowers| (0+32768))
  7018  0793  072A               	addwf	??_printf,w
  7019  0794  0084               	movwf	4
  7020  0795  3093               	movlw	high (_dpowers| (0+32768))
  7021  0796  3D2B               	addwfc	??_printf+1,w
  7022  0797  0085               	movwf	5
  7023  0798  3F00               	moviw [0]fsr0
  7024  0799  00F0               	movwf	___lwdiv@divisor
  7025  079A  3F01               	moviw [1]fsr0
  7026  079B  00F1               	movwf	___lwdiv@divisor+1
  7027  079C  0836               	movf	printf@val+1,w
  7028  079D  00F3               	movwf	___lwdiv@dividend+1
  7029  079E  0835               	movf	printf@val,w
  7030  079F  00F2               	movwf	___lwdiv@dividend
  7031  07A0  3180  200B  3185   	fcall	___lwdiv
  7032  07A3  0871               	movf	?___lwdiv+1,w
  7033  07A4  00FB               	movwf	___lwmod@dividend+1
  7034  07A5  0870               	movf	?___lwdiv,w
  7035  07A6  00FA               	movwf	___lwmod@dividend
  7036  07A7  318D  250A  3185   	fcall	___lwmod
  7037  07AA  0878               	movf	?___lwmod,w
  7038  07AB  3E30               	addlw	48
  7039  07AC  0020               	movlb	0	; select bank0
  7040  07AD  00AC               	movwf	??_printf+2
  7041  07AE  082C               	movf	??_printf+2,w
  7042  07AF  2FD6               	goto	L8
  7043  07B0                     l2049:	
  7044                           ;doprnt.c: 1497: case 0x80:
  7045                           
  7046                           ;doprnt.c: 1491: break;
  7047                           
  7048                           
  7049                           ;doprnt.c: 1499: {
  7050                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7051  07B0  082F               	movf	printf@prec,w
  7052  07B1  00AA               	movwf	??_printf
  7053  07B2  01AB               	clrf	??_printf+1
  7054  07B3  35AA               	lslf	??_printf,f
  7055  07B4  0DAB               	rlf	??_printf+1,f
  7056  07B5  30D4               	movlw	low (_hexpowers| (0+32768))
  7057  07B6  072A               	addwf	??_printf,w
  7058  07B7  0084               	movwf	4
  7059  07B8  3093               	movlw	high (_hexpowers| (0+32768))
  7060  07B9  3D2B               	addwfc	??_printf+1,w
  7061  07BA  0085               	movwf	5
  7062  07BB  3F00               	moviw [0]fsr0
  7063  07BC  00F0               	movwf	___lwdiv@divisor
  7064  07BD  3F01               	moviw [1]fsr0
  7065  07BE  00F1               	movwf	___lwdiv@divisor+1
  7066  07BF  0836               	movf	printf@val+1,w
  7067  07C0  00F3               	movwf	___lwdiv@dividend+1
  7068  07C1  0835               	movf	printf@val,w
  7069  07C2  00F2               	movwf	___lwdiv@dividend
  7070  07C3  3180  200B  3185   	fcall	___lwdiv
  7071  07C6  0870               	movf	?___lwdiv,w
  7072  07C7  390F               	andlw	15
  7073  07C8  0020               	movlb	0	; select bank0
  7074  07C9  00AC               	movwf	??_printf+2
  7075  07CA  082C               	movf	??_printf+2,w
  7076  07CB  00AE               	movwf	printf@idx
  7077                           
  7078                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7079  07CC  082E               	movf	printf@idx,w
  7080  07CD  3E80               	addlw	low (STR_56| (0+32768))
  7081  07CE  0084               	movwf	4
  7082  07CF  3092               	movlw	high (STR_56| (0+32768))
  7083  07D0  1803               	skipnc
  7084  07D1  3E01               	addlw	1
  7085  07D2  0085               	movwf	5
  7086  07D3  0800               	movf	0,w	;code access
  7087  07D4  00AA               	movwf	??_printf
  7088  07D5  082A               	movf	??_printf,w
  7089  07D6                     L8:	
  7090  07D6  00BA               	movwf	printf@c
  7091  07D7                     l2057:	
  7092                           ;doprnt.c: 1523: }
  7093                           
  7094                           ;doprnt.c: 1508: }
  7095                           ;doprnt.c: 1510: break;
  7096                           
  7097                           
  7098                           ;doprnt.c: 1524: (putch(c) );
  7099  07D7  083A               	movf	printf@c,w
  7100  07D8  318C  2426  3185   	fcall	_putch
  7101  07DB                     l2059:	
  7102  07DB  30FF               	movlw	255
  7103  07DC  0020               	movlb	0	; select bank0
  7104  07DD  00AA               	movwf	??_printf
  7105  07DE  082A               	movf	??_printf,w
  7106  07DF  07AF               	addwf	printf@prec,f
  7107  07E0  0A2F               	incf	printf@prec,w
  7108  07E1  1903               	btfsc	3,2
  7109  07E2  2DB8               	goto	l2061
  7110  07E3  0837               	movf	printf@flag,w
  7111  07E4  3980               	andlw	128
  7112                           
  7113                           ; Switch size 1, requested type "space"
  7114                           ; Number of cases is 2, Range of values is 0 to 128
  7115                           ; switch strategies available:
  7116                           ; Name         Instructions Cycles
  7117                           ; simple_byte            7     4 (average)
  7118                           ; jumptable            260     6 (fixed)
  7119                           ;	Chosen strategy is simple_byte
  7120  07E5  3A00               	xorlw	0	; case 0
  7121  07E6  1903               	skipnz
  7122  07E7  2F89               	goto	l2047
  7123  07E8  3A80               	xorlw	128	; case 128
  7124  07E9  1903               	skipnz
  7125  07EA  2FB0               	goto	l2049
  7126  07EB  2FD7               	goto	l2057
  7127  07EC  2FD7               	goto	l2057
  7128  07ED                     l447:	
  7129                           ;doprnt.c: 1540: return 0;
  7130                           ;	Return value of _printf is never used
  7131                           
  7132                           ;doprnt.c: 1525: }
  7133                           ;doprnt.c: 1533: }
  7134                           ;doprnt.c: 1535: alldone:
  7135                           
  7136  07ED  0008               	return
  7137  07EE                     __end_of_printf:	
  7138                           
  7139                           	psect	text16
  7140  0C26                     __ptext16:	
  7141 ;; *************** function _putch *****************
  7142 ;; Defined at:
  7143 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  txData          1    wreg     unsigned char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  txData          1    1[COMMON] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0, pclath, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;Total ram usage:        1 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    1
  7164 ;; This function calls:
  7165 ;;		_EUSART_Write
  7166 ;; This function is called by:
  7167 ;;		_printf
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _putch
  7173  0C26                     _putch:	
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7177                           ;putch@txData stored from wreg
  7178  0C26  00F1               	movwf	putch@txData
  7179                           
  7180                           ;eusart.c: 109: EUSART_Write(txData);
  7181  0C27  0871               	movf	putch@txData,w
  7182  0C28  318C  2438         	fcall	_EUSART_Write
  7183  0C2A  0008               	return
  7184  0C2B                     __end_of_putch:	
  7185                           
  7186                           	psect	text17
  7187  0C38                     __ptext17:	
  7188 ;; *************** function _EUSART_Write *****************
  7189 ;; Defined at:
  7190 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  txData          1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  txData          1    0[COMMON] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      void 
  7197 ;; Registers used:
  7198 ;;		wreg
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;Total ram usage:        1 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_putch
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _EUSART_Write
  7219  0C38                     _EUSART_Write:	
  7220                           
  7221                           ;incstack = 0
  7222                           ; Regs used in _EUSART_Write: [wreg]
  7223                           ;EUSART_Write@txData stored from wreg
  7224  0C38  00F0               	movwf	EUSART_Write@txData
  7225  0C39                     l58:	
  7226                           ;eusart.c: 96: {
  7227                           
  7228                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7229                           
  7230  0C39  0020               	movlb	0	; select bank0
  7231  0C3A  1E11               	btfss	17,4	;volatile
  7232  0C3B  2C39               	goto	l58
  7233                           
  7234                           ;eusart.c: 97: }
  7235                           ;eusart.c: 99: TXREG = txData;
  7236  0C3C  0870               	movf	EUSART_Write@txData,w
  7237  0C3D  0023               	movlb	3	; select bank3
  7238  0C3E  009A               	movwf	26	;volatile
  7239  0C3F  0008               	return
  7240  0C40                     __end_of_EUSART_Write:	
  7241                           
  7242                           	psect	text18
  7243  0D0A                     __ptext18:	
  7244 ;; *************** function ___lwmod *****************
  7245 ;; Defined at:
  7246 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  divisor         2    8[COMMON] unsigned int 
  7249 ;;  dividend        2   10[COMMON] unsigned int 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  counter         1   13[COMMON] unsigned char 
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  2    8[COMMON] unsigned int 
  7254 ;; Registers used:
  7255 ;;		wreg, status,2, status,0
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7261 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;Total ram usage:        6 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; This function calls:
  7268 ;;		Nothing
  7269 ;; This function is called by:
  7270 ;;		_printf
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function ___lwmod
  7276  0D0A                     ___lwmod:	
  7277                           
  7278                           ;incstack = 0
  7279                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7280  0D0A  0878               	movf	___lwmod@divisor,w
  7281  0D0B  0479               	iorwf	___lwmod@divisor+1,w
  7282  0D0C  1903               	btfsc	3,2
  7283  0D0D  2D31               	goto	l1871
  7284  0D0E  01FD               	clrf	___lwmod@counter
  7285  0D0F  0AFD               	incf	___lwmod@counter,f
  7286  0D10                     l1861:	
  7287  0D10  1BF9               	btfsc	___lwmod@divisor+1,7
  7288  0D11  2D1C               	goto	l1863
  7289  0D12  3001               	movlw	1
  7290  0D13                     u1365:	
  7291  0D13  35F8               	lslf	___lwmod@divisor,f
  7292  0D14  0DF9               	rlf	___lwmod@divisor+1,f
  7293  0D15  0B89               	decfsz	9,f
  7294  0D16  2D13               	goto	u1365
  7295  0D17  3001               	movlw	1
  7296  0D18  00FC               	movwf	??___lwmod
  7297  0D19  087C               	movf	??___lwmod,w
  7298  0D1A  07FD               	addwf	___lwmod@counter,f
  7299  0D1B  2D10               	goto	l1861
  7300  0D1C                     l1863:	
  7301  0D1C  0879               	movf	___lwmod@divisor+1,w
  7302  0D1D  027B               	subwf	___lwmod@dividend+1,w
  7303  0D1E  1D03               	skipz
  7304  0D1F  2D22               	goto	u1385
  7305  0D20  0878               	movf	___lwmod@divisor,w
  7306  0D21  027A               	subwf	___lwmod@dividend,w
  7307  0D22                     u1385:	
  7308  0D22  1C03               	skipc
  7309  0D23  2D28               	goto	l1867
  7310  0D24  0878               	movf	___lwmod@divisor,w
  7311  0D25  02FA               	subwf	___lwmod@dividend,f
  7312  0D26  0879               	movf	___lwmod@divisor+1,w
  7313  0D27  3BFB               	subwfb	___lwmod@dividend+1,f
  7314  0D28                     l1867:	
  7315  0D28  3001               	movlw	1
  7316  0D29                     u1395:	
  7317  0D29  36F9               	lsrf	___lwmod@divisor+1,f
  7318  0D2A  0CF8               	rrf	___lwmod@divisor,f
  7319  0D2B  0B89               	decfsz	9,f
  7320  0D2C  2D29               	goto	u1395
  7321  0D2D  3001               	movlw	1
  7322  0D2E  02FD               	subwf	___lwmod@counter,f
  7323  0D2F  1D03               	btfss	3,2
  7324  0D30  2D1C               	goto	l1863
  7325  0D31                     l1871:	
  7326  0D31  087B               	movf	___lwmod@dividend+1,w
  7327  0D32  00F9               	movwf	?___lwmod+1
  7328  0D33  087A               	movf	___lwmod@dividend,w
  7329  0D34  00F8               	movwf	?___lwmod
  7330  0D35  0008               	return
  7331  0D36                     __end_of___lwmod:	
  7332                           
  7333                           	psect	text19
  7334  000B                     __ptext19:	
  7335 ;; *************** function ___lwdiv *****************
  7336 ;; Defined at:
  7337 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  divisor         2    0[COMMON] unsigned int 
  7340 ;;  dividend        2    2[COMMON] unsigned int 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  quotient        2    5[COMMON] unsigned int 
  7343 ;;  counter         1    7[COMMON] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  2    0[COMMON] unsigned int 
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        8 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_printf
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function ___lwdiv
  7368  000B                     ___lwdiv:	
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7372  000B  01F5               	clrf	___lwdiv@quotient
  7373  000C  01F6               	clrf	___lwdiv@quotient+1
  7374  000D  0870               	movf	___lwdiv@divisor,w
  7375  000E  0471               	iorwf	___lwdiv@divisor+1,w
  7376  000F  1903               	btfsc	3,2
  7377  0010  283A               	goto	l1849
  7378  0011  01F7               	clrf	___lwdiv@counter
  7379  0012  0AF7               	incf	___lwdiv@counter,f
  7380  0013                     l1837:	
  7381  0013  1BF1               	btfsc	___lwdiv@divisor+1,7
  7382  0014  281F               	goto	l1839
  7383  0015  3001               	movlw	1
  7384  0016                     u1295:	
  7385  0016  35F0               	lslf	___lwdiv@divisor,f
  7386  0017  0DF1               	rlf	___lwdiv@divisor+1,f
  7387  0018  0B89               	decfsz	9,f
  7388  0019  2816               	goto	u1295
  7389  001A  3001               	movlw	1
  7390  001B  00F4               	movwf	??___lwdiv
  7391  001C  0874               	movf	??___lwdiv,w
  7392  001D  07F7               	addwf	___lwdiv@counter,f
  7393  001E  2813               	goto	l1837
  7394  001F                     l1839:	
  7395  001F  3001               	movlw	1
  7396  0020                     u1315:	
  7397  0020  35F5               	lslf	___lwdiv@quotient,f
  7398  0021  0DF6               	rlf	___lwdiv@quotient+1,f
  7399  0022  0B89               	decfsz	9,f
  7400  0023  2820               	goto	u1315
  7401  0024  0871               	movf	___lwdiv@divisor+1,w
  7402  0025  0273               	subwf	___lwdiv@dividend+1,w
  7403  0026  1D03               	skipz
  7404  0027  282A               	goto	u1325
  7405  0028  0870               	movf	___lwdiv@divisor,w
  7406  0029  0272               	subwf	___lwdiv@dividend,w
  7407  002A                     u1325:	
  7408  002A  1C03               	skipc
  7409  002B  2831               	goto	l1845
  7410  002C  0870               	movf	___lwdiv@divisor,w
  7411  002D  02F2               	subwf	___lwdiv@dividend,f
  7412  002E  0871               	movf	___lwdiv@divisor+1,w
  7413  002F  3BF3               	subwfb	___lwdiv@dividend+1,f
  7414  0030  1475               	bsf	___lwdiv@quotient,0
  7415  0031                     l1845:	
  7416  0031  3001               	movlw	1
  7417  0032                     u1335:	
  7418  0032  36F1               	lsrf	___lwdiv@divisor+1,f
  7419  0033  0CF0               	rrf	___lwdiv@divisor,f
  7420  0034  0B89               	decfsz	9,f
  7421  0035  2832               	goto	u1335
  7422  0036  3001               	movlw	1
  7423  0037  02F7               	subwf	___lwdiv@counter,f
  7424  0038  1D03               	btfss	3,2
  7425  0039  281F               	goto	l1839
  7426  003A                     l1849:	
  7427  003A  0876               	movf	___lwdiv@quotient+1,w
  7428  003B  00F1               	movwf	?___lwdiv+1
  7429  003C  0875               	movf	___lwdiv@quotient,w
  7430  003D  00F0               	movwf	?___lwdiv
  7431  003E  0008               	return
  7432  003F                     __end_of___lwdiv:	
  7433                           
  7434                           	psect	text20
  7435  0C86                     __ptext20:	
  7436 ;; *************** function _SPI_exchange *****************
  7437 ;; Defined at:
  7438 ;;		line 4 in file "spi.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  buf             1    wreg     PTR unsigned char 
  7441 ;;		 -> receive@rx_buf(15), buf(16), 
  7442 ;;  len             1    8[COMMON] unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  buf             1   13[COMMON] PTR unsigned char 
  7445 ;;		 -> receive@rx_buf(15), buf(16), 
  7446 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      unsigned char 
  7449 ;; Registers used:
  7450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7456 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;Total ram usage:        6 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    2
  7463 ;; This function calls:
  7464 ;;		_SPI_Exchange8bitBuffer
  7465 ;; This function is called by:
  7466 ;;		_can_init
  7467 ;;		_can_ope_mode
  7468 ;;		_can_set_mask
  7469 ;;		_txf_clear
  7470 ;;		_receive
  7471 ;;		_can_send
  7472 ;;		_can_status_check
  7473 ;;		_can_baudrate
  7474 ;;		_can_abort
  7475 ;;		_read_register
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function _SPI_exchange
  7481  0C86                     _SPI_exchange:	
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7485                           ;SPI_exchange@buf stored from wreg
  7486  0C86  00FD               	movwf	SPI_exchange@buf
  7487                           
  7488                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7489  0C87  0022               	movlb	2	; select bank2
  7490  0C88  120C               	bcf	12,4	;volatile
  7491                           
  7492                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7493  0C89  0878               	movf	SPI_exchange@len,w
  7494  0C8A  00F9               	movwf	??_SPI_exchange
  7495  0C8B  0879               	movf	??_SPI_exchange,w
  7496  0C8C  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7497  0C8D  087D               	movf	SPI_exchange@buf,w
  7498  0C8E  00FA               	movwf	??_SPI_exchange+1
  7499  0C8F  087A               	movf	??_SPI_exchange+1,w
  7500  0C90  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7501  0C91  087D               	movf	SPI_exchange@buf,w
  7502  0C92  318D  25C4         	fcall	_SPI_Exchange8bitBuffer
  7503  0C94  00FB               	movwf	??_SPI_exchange+2
  7504  0C95  087B               	movf	??_SPI_exchange+2,w
  7505  0C96  00FC               	movwf	SPI_exchange@bytes_written
  7506                           
  7507                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7508  0C97  0022               	movlb	2	; select bank2
  7509  0C98  160C               	bsf	12,4	;volatile
  7510                           
  7511                           ;spi.c: 8: return bytes_written;
  7512  0C99  087C               	movf	SPI_exchange@bytes_written,w
  7513  0C9A  0008               	return
  7514  0C9B                     __end_of_SPI_exchange:	
  7515                           
  7516                           	psect	text21
  7517  0DC4                     __ptext21:	
  7518 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7519 ;; Defined at:
  7520 ;;		line 91 in file "mcc_generated_files/spi.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;  dataIn          1    wreg     PTR unsigned char 
  7523 ;;		 -> receive@rx_buf(15), buf(16), 
  7524 ;;  bufLen          1    1[COMMON] unsigned char 
  7525 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7526 ;;		 -> receive@rx_buf(15), buf(16), 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7529 ;;		 -> receive@rx_buf(15), buf(16), 
  7530 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      unsigned char 
  7533 ;; Registers used:
  7534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;Total ram usage:        7 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    1
  7547 ;; This function calls:
  7548 ;;		_SPI_Exchange8bit
  7549 ;; This function is called by:
  7550 ;;		_SPI_exchange
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function _SPI_Exchange8bitBuffer
  7556  0DC4                     _SPI_Exchange8bitBuffer:	
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7560                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7561  0DC4  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7562                           
  7563                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7564  0DC5  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7565                           
  7566                           ;spi.c: 95: if(bufLen != 0)
  7567  0DC6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7568  0DC7  1903               	btfsc	3,2
  7569  0DC8  2E10               	goto	l1903
  7570                           
  7571                           ;spi.c: 96: {
  7572                           ;spi.c: 97: if(dataIn != (0))
  7573  0DC9  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7574  0DCA  1D03               	btfss	3,2
  7575  0DCB  2DF2               	goto	l1891
  7576  0DCC  2DF7               	goto	l1893
  7577  0DCD                     l1883:	
  7578                           ;spi.c: 98: {
  7579                           ;spi.c: 99: while(bytesWritten < bufLen)
  7580                           
  7581                           
  7582                           ;spi.c: 100: {
  7583                           ;spi.c: 101: if(dataOut == (0))
  7584  0DCD  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7585  0DCE  1D03               	btfss	3,2
  7586  0DCF  2DDB               	goto	l1887
  7587                           
  7588                           ;spi.c: 102: {
  7589                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7590  0DD0  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7591  0DD1  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7592  0DD2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7593  0DD3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7594  0DD4  0086               	movwf	6
  7595  0DD5  0187               	clrf	7
  7596  0DD6  0801               	movf	1,w
  7597  0DD7  318C  2440  318D   	fcall	_SPI_Exchange8bit
  7598                           
  7599                           ;spi.c: 104: }
  7600  0DDA  2DEE               	goto	l1889
  7601  0DDB                     l1887:	
  7602                           
  7603                           ;spi.c: 105: else
  7604                           ;spi.c: 106: {
  7605                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7606  0DDB  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7607  0DDC  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7608  0DDD  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7609  0DDE  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7610  0DDF  0086               	movwf	6
  7611  0DE0  0187               	clrf	7
  7612  0DE1  0801               	movf	1,w
  7613  0DE2  318C  2440  318D   	fcall	_SPI_Exchange8bit
  7614  0DE5  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7615  0DE6  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7616  0DE7  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7617  0DE8  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7618  0DE9  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7619  0DEA  0086               	movwf	6
  7620  0DEB  0187               	clrf	7
  7621  0DEC  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7622  0DED  0081               	movwf	1
  7623  0DEE                     l1889:	
  7624                           
  7625                           ;spi.c: 108: }
  7626                           ;spi.c: 110: bytesWritten++;
  7627  0DEE  3001               	movlw	1
  7628  0DEF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7629  0DF0  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7630  0DF1  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7631  0DF2                     l1891:	
  7632  0DF2  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7633  0DF3  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7634  0DF4  1803               	btfsc	3,0
  7635  0DF5  2E10               	goto	l1903
  7636  0DF6  2DCD               	goto	l1883
  7637  0DF7                     l1893:	
  7638                           ;spi.c: 111: }
  7639                           ;spi.c: 112: }
  7640                           
  7641                           
  7642                           ;spi.c: 113: else
  7643                           ;spi.c: 114: {
  7644                           ;spi.c: 115: if(dataOut != (0))
  7645  0DF7  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7646  0DF8  1D03               	btfss	3,2
  7647  0DF9  2E0C               	goto	l1901
  7648  0DFA  2E10               	goto	l1903
  7649  0DFB                     l1897:	
  7650                           ;spi.c: 116: {
  7651                           ;spi.c: 117: while(bytesWritten < bufLen )
  7652                           
  7653                           
  7654                           ;spi.c: 118: {
  7655                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7656  0DFB  3000               	movlw	0
  7657  0DFC  318C  2440  318D   	fcall	_SPI_Exchange8bit
  7658  0DFF  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7659  0E00  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7660  0E01  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7661  0E02  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7662  0E03  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7663  0E04  0086               	movwf	6
  7664  0E05  0187               	clrf	7
  7665  0E06  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7666  0E07  0081               	movwf	1
  7667                           
  7668                           ;spi.c: 121: bytesWritten++;
  7669  0E08  3001               	movlw	1
  7670  0E09  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7671  0E0A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7672  0E0B  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7673  0E0C                     l1901:	
  7674  0E0C  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7675  0E0D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7676  0E0E  1C03               	skipc
  7677  0E0F  2DFB               	goto	l1897
  7678  0E10                     l1903:	
  7679                           
  7680                           ;spi.c: 122: }
  7681                           ;spi.c: 123: }
  7682                           ;spi.c: 124: }
  7683                           ;spi.c: 125: }
  7684                           ;spi.c: 127: return bytesWritten;
  7685  0E10  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7686  0E11  0008               	return
  7687  0E12                     __end_of_SPI_Exchange8bitBuffer:	
  7688                           
  7689                           	psect	text22
  7690  0C40                     __ptext22:	
  7691 ;; *************** function _SPI_Exchange8bit *****************
  7692 ;; Defined at:
  7693 ;;		line 77 in file "mcc_generated_files/spi.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  data            1    wreg     unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  data            1    0[COMMON] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      unsigned char 
  7700 ;; Registers used:
  7701 ;;		wreg
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;Total ram usage:        1 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_SPI_Exchange8bitBuffer
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           
  7721                           ;psect for function _SPI_Exchange8bit
  7722  0C40                     _SPI_Exchange8bit:	
  7723                           
  7724                           ;incstack = 0
  7725                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7726                           ;SPI_Exchange8bit@data stored from wreg
  7727  0C40  00F0               	movwf	SPI_Exchange8bit@data
  7728                           
  7729                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7730  0C41  0024               	movlb	4	; select bank4
  7731  0C42  1395               	bcf	21,7	;volatile
  7732                           
  7733                           ;spi.c: 82: SSP1BUF = data;
  7734  0C43  0870               	movf	SPI_Exchange8bit@data,w
  7735  0C44  0091               	movwf	17	;volatile
  7736  0C45                     l113:	
  7737                           ;spi.c: 85: {
  7738                           
  7739                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7740                           
  7741  0C45  1C14               	btfss	20,0	;volatile
  7742  0C46  2C45               	goto	l113
  7743                           
  7744                           ;spi.c: 86: }
  7745                           ;spi.c: 88: return (SSP1BUF);
  7746  0C47  0811               	movf	17,w	;volatile
  7747  0C48  0008               	return
  7748  0C49                     __end_of_SPI_Exchange8bit:	
  7749                           
  7750                           	psect	text23
  7751  0F1A                     __ptext23:	
  7752 ;; *************** function _atoi *****************
  7753 ;; Defined at:
  7754 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  s               1    wreg     PTR const unsigned char 
  7757 ;;		 -> main@buf(9), 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  s               1   13[COMMON] PTR const unsigned char 
  7760 ;;		 -> main@buf(9), 
  7761 ;;  a               2   11[COMMON] int 
  7762 ;;  sign            1   10[COMMON] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  2    6[COMMON] int 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;Total ram usage:        8 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    1
  7779 ;; This function calls:
  7780 ;;		___wmul
  7781 ;;		_isdigit
  7782 ;; This function is called by:
  7783 ;;		_main
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _atoi
  7789  0F1A                     _atoi:	
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7793                           ;atoi@s stored from wreg
  7794  0F1A  00FD               	movwf	atoi@s
  7795  0F1B                     l2301:	
  7796  0F1B  087D               	movf	atoi@s,w
  7797  0F1C  0086               	movwf	6
  7798  0F1D  0187               	clrf	7
  7799  0F1E  3020               	movlw	32
  7800  0F1F  0601               	xorwf	1,w
  7801  0F20  1D03               	btfss	3,2
  7802  0F21  2F27               	goto	l2303
  7803  0F22                     l2299:	
  7804  0F22  3001               	movlw	1
  7805  0F23  00F8               	movwf	??_atoi
  7806  0F24  0878               	movf	??_atoi,w
  7807  0F25  07FD               	addwf	atoi@s,f
  7808  0F26  2F1B               	goto	l2301
  7809  0F27                     l2303:	
  7810  0F27  087D               	movf	atoi@s,w
  7811  0F28  0086               	movwf	6
  7812  0F29  0187               	clrf	7
  7813  0F2A  3009               	movlw	9
  7814  0F2B  0601               	xorwf	1,w
  7815  0F2C  1903               	btfsc	3,2
  7816  0F2D  2F22               	goto	l2299
  7817  0F2E  01FB               	clrf	atoi@a
  7818  0F2F  01FC               	clrf	atoi@a+1
  7819  0F30  01FA               	clrf	atoi@sign
  7820  0F31  087D               	movf	atoi@s,w
  7821  0F32  0086               	movwf	6
  7822  0F33  0187               	clrf	7
  7823  0F34  302D               	movlw	45
  7824  0F35  0601               	xorwf	1,w
  7825  0F36  1D03               	btfss	3,2
  7826  0F37  2F3D               	goto	l2311
  7827  0F38  3001               	movlw	1
  7828  0F39  00F8               	movwf	??_atoi
  7829  0F3A  0878               	movf	??_atoi,w
  7830  0F3B  07FA               	addwf	atoi@sign,f
  7831  0F3C  2F44               	goto	l2317
  7832  0F3D                     l2311:	
  7833  0F3D  087D               	movf	atoi@s,w
  7834  0F3E  0086               	movwf	6
  7835  0F3F  0187               	clrf	7
  7836  0F40  302B               	movlw	43
  7837  0F41  0601               	xorwf	1,w
  7838  0F42  1D03               	btfss	3,2
  7839  0F43  2F48               	goto	l2319
  7840  0F44                     l2317:	
  7841  0F44  3001               	movlw	1
  7842  0F45  00F8               	movwf	??_atoi
  7843  0F46  0878               	movf	??_atoi,w
  7844  0F47  07FD               	addwf	atoi@s,f
  7845  0F48                     l2319:	
  7846  0F48  087D               	movf	atoi@s,w
  7847  0F49  0086               	movwf	6
  7848  0F4A  0187               	clrf	7
  7849  0F4B  0801               	movf	1,w
  7850  0F4C  318C  2469  318F   	fcall	_isdigit
  7851  0F4F  1C03               	btfss	3,0
  7852  0F50  2F6D               	goto	l2321
  7853  0F51  087C               	movf	atoi@a+1,w
  7854  0F52  00F1               	movwf	___wmul@multiplier+1
  7855  0F53  087B               	movf	atoi@a,w
  7856  0F54  00F0               	movwf	___wmul@multiplier
  7857  0F55  300A               	movlw	10
  7858  0F56  00F2               	movwf	___wmul@multiplicand
  7859  0F57  3000               	movlw	0
  7860  0F58  00F3               	movwf	___wmul@multiplicand+1
  7861  0F59  318C  24CB  318F   	fcall	___wmul
  7862  0F5C  087D               	movf	atoi@s,w
  7863  0F5D  0086               	movwf	6
  7864  0F5E  0187               	clrf	7
  7865  0F5F  0801               	movf	1,w
  7866  0F60  0770               	addwf	?___wmul,w
  7867  0F61  00F8               	movwf	??_atoi
  7868  0F62  0871               	movf	?___wmul+1,w
  7869  0F63  1803               	skipnc
  7870  0F64  0A71               	incf	?___wmul+1,w
  7871  0F65  00F9               	movwf	??_atoi+1
  7872  0F66  0878               	movf	??_atoi,w
  7873  0F67  3ED0               	addlw	208
  7874  0F68  00FB               	movwf	atoi@a
  7875  0F69  30FF               	movlw	255
  7876  0F6A  3D79               	addwfc	??_atoi+1,w
  7877  0F6B  00FC               	movwf	atoi@a+1
  7878  0F6C  2F44               	goto	l2317
  7879  0F6D                     l2321:	
  7880  0F6D  087A               	movf	atoi@sign,w
  7881  0F6E  1903               	btfsc	3,2
  7882  0F6F  2F7C               	goto	l2327
  7883  0F70  097B               	comf	atoi@a,w
  7884  0F71  00F8               	movwf	??_atoi
  7885  0F72  097C               	comf	atoi@a+1,w
  7886  0F73  00F9               	movwf	??_atoi+1
  7887  0F74  0AF8               	incf	??_atoi,f
  7888  0F75  1903               	skipnz
  7889  0F76  0AF9               	incf	??_atoi+1,f
  7890  0F77  0878               	movf	??_atoi,w
  7891  0F78  00F6               	movwf	?_atoi
  7892  0F79  0879               	movf	??_atoi+1,w
  7893  0F7A  00F7               	movwf	?_atoi+1
  7894  0F7B  0008               	return
  7895  0F7C                     l2327:	
  7896  0F7C  087C               	movf	atoi@a+1,w
  7897  0F7D  00F7               	movwf	?_atoi+1
  7898  0F7E  087B               	movf	atoi@a,w
  7899  0F7F  00F6               	movwf	?_atoi
  7900  0F80  0008               	return
  7901  0F81                     __end_of_atoi:	
  7902                           
  7903                           	psect	text24
  7904  0C69                     __ptext24:	
  7905 ;; *************** function _isdigit *****************
  7906 ;; Defined at:
  7907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;  c               1    wreg     unsigned char 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  c               1    1[COMMON] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;		None               void
  7914 ;; Registers used:
  7915 ;;		wreg, status,2, status,0
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;Total ram usage:        2 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_printf
  7931 ;;		_atoi
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           
  7936                           ;psect for function _isdigit
  7937  0C69                     _isdigit:	
  7938                           
  7939                           ;incstack = 0
  7940                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7941                           ;isdigit@c stored from wreg
  7942  0C69  00F1               	movwf	isdigit@c
  7943  0C6A  01F0               	clrf	_isdigit$785
  7944  0C6B  303A               	movlw	58
  7945  0C6C  0271               	subwf	isdigit@c,w
  7946  0C6D  1803               	skipnc
  7947  0C6E  2C75               	goto	l1809
  7948  0C6F  3030               	movlw	48
  7949  0C70  0271               	subwf	isdigit@c,w
  7950  0C71  1C03               	skipc
  7951  0C72  2C75               	goto	l1809
  7952  0C73  01F0               	clrf	_isdigit$785
  7953  0C74  0AF0               	incf	_isdigit$785,f
  7954  0C75                     l1809:	
  7955  0C75  0C70               	rrf	_isdigit$785,w
  7956  0C76  0008               	return
  7957  0C77                     __end_of_isdigit:	
  7958                           
  7959                           	psect	text25
  7960  0CCB                     __ptext25:	
  7961 ;; *************** function ___wmul *****************
  7962 ;; Defined at:
  7963 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  multiplier      2    0[COMMON] unsigned int 
  7966 ;;  multiplicand    2    2[COMMON] unsigned int 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  product         2    4[COMMON] unsigned int 
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  2    0[COMMON] unsigned int 
  7971 ;; Registers used:
  7972 ;;		wreg, status,2, status,0
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;Total ram usage:        6 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; This function calls:
  7985 ;;		Nothing
  7986 ;; This function is called by:
  7987 ;;		_printf
  7988 ;;		_atoi
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function ___wmul
  7994  0CCB                     ___wmul:	
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7998  0CCB  01F4               	clrf	___wmul@product
  7999  0CCC  01F5               	clrf	___wmul@product+1
  8000  0CCD                     l1815:	
  8001  0CCD  1C70               	btfss	___wmul@multiplier,0
  8002  0CCE  2CD3               	goto	l531
  8003  0CCF  0872               	movf	___wmul@multiplicand,w
  8004  0CD0  07F4               	addwf	___wmul@product,f
  8005  0CD1  0873               	movf	___wmul@multiplicand+1,w
  8006  0CD2  3DF5               	addwfc	___wmul@product+1,f
  8007  0CD3                     l531:	
  8008  0CD3  3001               	movlw	1
  8009  0CD4                     u1255:	
  8010  0CD4  35F2               	lslf	___wmul@multiplicand,f
  8011  0CD5  0DF3               	rlf	___wmul@multiplicand+1,f
  8012  0CD6  0B89               	decfsz	9,f
  8013  0CD7  2CD4               	goto	u1255
  8014  0CD8  3001               	movlw	1
  8015  0CD9                     u1265:	
  8016  0CD9  36F1               	lsrf	___wmul@multiplier+1,f
  8017  0CDA  0CF0               	rrf	___wmul@multiplier,f
  8018  0CDB  0B89               	decfsz	9,f
  8019  0CDC  2CD9               	goto	u1265
  8020  0CDD  0870               	movf	___wmul@multiplier,w
  8021  0CDE  0471               	iorwf	___wmul@multiplier+1,w
  8022  0CDF  1D03               	btfss	3,2
  8023  0CE0  2CCD               	goto	l1815
  8024  0CE1  0875               	movf	___wmul@product+1,w
  8025  0CE2  00F1               	movwf	?___wmul+1
  8026  0CE3  0874               	movf	___wmul@product,w
  8027  0CE4  00F0               	movwf	?___wmul
  8028  0CE5  0008               	return
  8029  0CE6                     __end_of___wmul:	
  8030                           
  8031                           	psect	text26
  8032  0C77                     __ptext26:	
  8033 ;; *************** function _SYSTEM_Initialize *****************
  8034 ;; Defined at:
  8035 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;		None
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;		None
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  1    wreg      void 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0, pclath, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;Total ram usage:        0 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    1
  8056 ;; This function calls:
  8057 ;;		_EUSART_Initialize
  8058 ;;		_OSCILLATOR_Initialize
  8059 ;;		_PIN_MANAGER_Initialize
  8060 ;;		_SPI_Initialize
  8061 ;;		_WDT_Initialize
  8062 ;; This function is called by:
  8063 ;;		_main
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _SYSTEM_Initialize
  8069  0C77                     _SYSTEM_Initialize:	
  8070                           
  8071                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8075  0C77  318C  249B  318C   	fcall	_PIN_MANAGER_Initialize
  8076                           
  8077                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8078  0C7A  318C  2431  318C   	fcall	_OSCILLATOR_Initialize
  8079                           
  8080                           ;mcc.c: 75: WDT_Initialize();
  8081  0C7D  318C  2422  318C   	fcall	_WDT_Initialize
  8082                           
  8083                           ;mcc.c: 76: SPI_Initialize();
  8084  0C80  3180  2004  318C   	fcall	_SPI_Initialize
  8085                           
  8086                           ;mcc.c: 77: EUSART_Initialize();
  8087  0C83  318C  2453         	fcall	_EUSART_Initialize
  8088  0C85  0008               	return
  8089  0C86                     __end_of_SYSTEM_Initialize:	
  8090                           
  8091                           	psect	text27
  8092  0C22                     __ptext27:	
  8093 ;; *************** function _WDT_Initialize *****************
  8094 ;; Defined at:
  8095 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        0 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_SYSTEM_Initialize
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _WDT_Initialize
  8124  0C22                     _WDT_Initialize:	
  8125                           
  8126                           ;mcc.c: 93: WDTCON = 0x16;
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _WDT_Initialize: [wreg]
  8130  0C22  3016               	movlw	22
  8131  0C23  0021               	movlb	1	; select bank1
  8132  0C24  0097               	movwf	23	;volatile
  8133  0C25  0008               	return
  8134  0C26                     __end_of_WDT_Initialize:	
  8135                           
  8136                           	psect	text28
  8137  0004                     __ptext28:	
  8138 ;; *************** function _SPI_Initialize *****************
  8139 ;; Defined at:
  8140 ;;		line 63 in file "mcc_generated_files/spi.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;Total ram usage:        0 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_SYSTEM_Initialize
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _SPI_Initialize
  8169  0004                     _SPI_Initialize:	
  8170                           
  8171                           ;spi.c: 68: SSP1STAT = 0x40;
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8175  0004  3040               	movlw	64
  8176  0005  0024               	movlb	4	; select bank4
  8177  0006  0094               	movwf	20	;volatile
  8178                           
  8179                           ;spi.c: 71: SSP1CON1 = 0x20;
  8180  0007  3020               	movlw	32
  8181  0008  0095               	movwf	21	;volatile
  8182                           
  8183                           ;spi.c: 74: SSP1ADD = 0x00;
  8184  0009  0192               	clrf	18	;volatile
  8185  000A  0008               	return
  8186  000B                     __end_of_SPI_Initialize:	
  8187                           
  8188                           	psect	text29
  8189  0C9B                     __ptext29:	
  8190 ;; *************** function _PIN_MANAGER_Initialize *****************
  8191 ;; Defined at:
  8192 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_SYSTEM_Initialize
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _PIN_MANAGER_Initialize
  8221  0C9B                     _PIN_MANAGER_Initialize:	
  8222                           
  8223                           ;pin_manager.c: 57: LATA = 0x10;
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8227  0C9B  3010               	movlw	16
  8228  0C9C  0022               	movlb	2	; select bank2
  8229  0C9D  008C               	movwf	12	;volatile
  8230                           
  8231                           ;pin_manager.c: 58: LATC = 0x00;
  8232  0C9E  018E               	clrf	14	;volatile
  8233                           
  8234                           ;pin_manager.c: 63: TRISA = 0x2F;
  8235  0C9F  302F               	movlw	47
  8236  0CA0  0021               	movlb	1	; select bank1
  8237  0CA1  008C               	movwf	12	;volatile
  8238                           
  8239                           ;pin_manager.c: 64: TRISC = 0x32;
  8240  0CA2  3032               	movlw	50
  8241  0CA3  008E               	movwf	14	;volatile
  8242                           
  8243                           ;pin_manager.c: 69: ANSELC = 0x00;
  8244  0CA4  0023               	movlb	3	; select bank3
  8245  0CA5  018E               	clrf	14	;volatile
  8246                           
  8247                           ;pin_manager.c: 70: ANSELA = 0x07;
  8248  0CA6  3007               	movlw	7
  8249  0CA7  008C               	movwf	12	;volatile
  8250                           
  8251                           ;pin_manager.c: 75: WPUA = 0x00;
  8252  0CA8  0024               	movlb	4	; select bank4
  8253  0CA9  018C               	clrf	12	;volatile
  8254                           
  8255                           ;pin_manager.c: 76: WPUC = 0x30;
  8256  0CAA  3030               	movlw	48
  8257  0CAB  008E               	movwf	14	;volatile
  8258                           
  8259                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8260  0CAC  0021               	movlb	1	; select bank1
  8261  0CAD  1395               	bcf	21,7	;volatile
  8262                           
  8263                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8264  0CAE  0022               	movlb	2	; select bank2
  8265  0CAF  019E               	clrf	30	;volatile
  8266                           
  8267                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8268  0CB0  019D               	clrf	29	;volatile
  8269  0CB1  0008               	return
  8270  0CB2                     __end_of_PIN_MANAGER_Initialize:	
  8271                           
  8272                           	psect	text30
  8273  0C31                     __ptext30:	
  8274 ;; *************** function _OSCILLATOR_Initialize *****************
  8275 ;; Defined at:
  8276 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;		None
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;		None
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      void 
  8283 ;; Registers used:
  8284 ;;		wreg, status,2
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;Total ram usage:        0 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; This function calls:
  8297 ;;		Nothing
  8298 ;; This function is called by:
  8299 ;;		_SYSTEM_Initialize
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _OSCILLATOR_Initialize
  8305  0C31                     _OSCILLATOR_Initialize:	
  8306                           
  8307                           ;mcc.c: 83: OSCCON = 0x60;
  8308                           
  8309                           ;incstack = 0
  8310                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8311  0C31  3060               	movlw	96
  8312  0C32  0021               	movlb	1	; select bank1
  8313  0C33  0099               	movwf	25	;volatile
  8314                           
  8315                           ;mcc.c: 85: OSCTUNE = 0x00;
  8316  0C34  0198               	clrf	24	;volatile
  8317                           
  8318                           ;mcc.c: 87: BORCON = 0x00;
  8319  0C35  0022               	movlb	2	; select bank2
  8320  0C36  0196               	clrf	22	;volatile
  8321  0C37  0008               	return
  8322  0C38                     __end_of_OSCILLATOR_Initialize:	
  8323                           
  8324                           	psect	text31
  8325  0C53                     __ptext31:	
  8326 ;; *************** function _EUSART_Initialize *****************
  8327 ;; Defined at:
  8328 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;		None
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      void 
  8335 ;; Registers used:
  8336 ;;		wreg, status,2
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:        0 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_SYSTEM_Initialize
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _EUSART_Initialize
  8357  0C53                     _EUSART_Initialize:	
  8358                           
  8359                           ;eusart.c: 58: BAUDCON = 0x08;
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8363  0C53  3008               	movlw	8
  8364  0C54  0023               	movlb	3	; select bank3
  8365  0C55  009F               	movwf	31	;volatile
  8366                           
  8367                           ;eusart.c: 61: RCSTA = 0x90;
  8368  0C56  3090               	movlw	144
  8369  0C57  009D               	movwf	29	;volatile
  8370                           
  8371                           ;eusart.c: 64: TXSTA = 0x24;
  8372  0C58  3024               	movlw	36
  8373  0C59  009E               	movwf	30	;volatile
  8374                           
  8375                           ;eusart.c: 67: SPBRGL = 0x33;
  8376  0C5A  3033               	movlw	51
  8377  0C5B  009B               	movwf	27	;volatile
  8378                           
  8379                           ;eusart.c: 70: SPBRGH = 0x00;
  8380  0C5C  019C               	clrf	28	;volatile
  8381  0C5D  0008               	return
  8382  0C5E                     __end_of_EUSART_Initialize:	
  8383                           
  8384                           	psect	text32
  8385  0C49                     __ptext32:	
  8386 ;; *************** function _EUSART_Read *****************
  8387 ;; Defined at:
  8388 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      unsigned char 
  8395 ;; Registers used:
  8396 ;;		wreg
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;Total ram usage:        0 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		_main
  8412 ;;		_getch
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _EUSART_Read
  8418  0C49                     _EUSART_Read:	
  8419  0C49                     l51:	
  8420                           ;eusart.c: 78: {
  8421                           
  8422                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _EUSART_Read: [wreg]
  8426                           
  8427  0C49  0020               	movlb	0	; select bank0
  8428  0C4A  1E91               	btfss	17,5	;volatile
  8429  0C4B  2C49               	goto	l51
  8430                           
  8431                           ;eusart.c: 79: }
  8432                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8433  0C4C  0023               	movlb	3	; select bank3
  8434  0C4D  1C9D               	btfss	29,1	;volatile
  8435  0C4E  2C51               	goto	l2207
  8436                           
  8437                           ;eusart.c: 83: {
  8438                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8439  0C4F  121D               	bcf	29,4	;volatile
  8440                           
  8441                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8442  0C50  161D               	bsf	29,4	;volatile
  8443  0C51                     l2207:	
  8444                           
  8445                           ;eusart.c: 88: }
  8446                           ;eusart.c: 90: return RCREG;
  8447  0C51  0819               	movf	25,w	;volatile
  8448  0C52  0008               	return
  8449  0C53                     __end_of_EUSART_Read:	
  8450  007E                     btemp	set	126	;btemp
  8451  007E                     wtemp0	set	126


Data Sizes:
    Strings     999
    Constant    35
    Data        0
    BSS         23
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      75
    BANK1            80     19      35
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_55(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_54(CODE[5]), STR_53(CODE[15]), STR_52(CODE[15]), STR_51(CODE[2]), 
		 -> STR_50(CODE[16]), STR_49(CODE[16]), STR_48(CODE[2]), STR_47(CODE[16]), 
		 -> STR_46(CODE[16]), STR_45(CODE[16]), STR_44(CODE[2]), STR_43(CODE[12]), 
		 -> STR_42(CODE[12]), STR_41(CODE[12]), STR_40(CODE[2]), STR_39(CODE[12]), 
		 -> STR_38(CODE[12]), STR_37(CODE[5]), STR_36(CODE[13]), STR_35(CODE[13]), 
		 -> STR_34(CODE[18]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[20]), 
		 -> STR_30(CODE[14]), STR_29(CODE[14]), STR_28(CODE[14]), STR_27(CODE[15]), 
		 -> STR_26(CODE[16]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[23]), 
		 -> STR_22(CODE[21]), STR_21(CODE[15]), STR_20(CODE[22]), STR_19(CODE[44]), 
		 -> STR_18(CODE[57]), STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[38]), 
		 -> STR_14(CODE[25]), STR_13(CODE[42]), STR_12(CODE[38]), STR_11(CODE[58]), 
		 -> STR_10(CODE[54]), STR_9(CODE[59]), STR_8(CODE[51]), STR_7(CODE[23]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_abort->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  108915
                                             64 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   25699
                                             60 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14901
                                             34 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6203
                                             27 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        13    11      2   17148
                                             31 BANK0     13    11      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9035
                                             27 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   10966
                                             31 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8256
                                             27 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   10730
                                             31 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            3     3      0   10685
                                             31 BANK0      3     3      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8324
                                             27 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    21      8    5896
                                              2 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      23       7       43.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 16 17:17:21 2018

                    _SPI_Initialize 0004                         __CFG_CP$OFF 0000  
                  ?_receive_handler 003B                                  l51 0C49  
                                l58 0C39             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 1405                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C45                                 l202 03EB  
                               l203 03ED                                 l312 02AD  
                               l315 02BD                                 l332 0E31  
                               l341 0E57                                 l422 06FB  
                               l343 0E5B                                 l335 0E42  
                               l336 0E3D                                 l417 06D9  
                               l426 0732                                 l338 0E53  
                               l531 0CD3                                 l339 0E4E  
                               l447 07ED                                 l383 05D9  
                               l395 06B3                                 l396 0623  
          __end_of_can_status_check 0E68                        __CFG_CPD$OFF 0000  
                               _abc 13FF                                 _buf 00B3  
                               _sid 0064                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
             can_logging_mode@debug 0072                        ?_EUSART_Read 0070  
                              l2011 071D                                l2021 074E  
                              l2013 0726                                l2023 0751  
                              l2041 077B                                l2035 076A  
                              l2301 0F1B                                l2037 076E  
                              l2045 0783                                l2029 075B  
                              l2061 05B8                                l2207 0C51  
                              l2311 0F3D                                l2303 0F27  
                              l2047 0789                                l2321 0F6D  
                              l2049 07B0                                l2057 07D7  
                              l2081 0F0E                                l2059 07DB  
                              l2139 0E90                                l2067 0ED5  
                              l2317 0F44                                l2077 0EE9  
                              l2327 0F7C                                l2319 0F48  
                              l2431 02B9                                l2079 0F07  
                              l2425 02A7                                l2521 03DD  
                              l2187 015C                                l2611 04E3  
                              l1901 0E0C                                l2461 02EE  
                              l2437 02C9                                l2293 0E66  
                              l2285 0E61                                l2613 04E7  
                              l2605 04CA                                l2621 0586  
                              l2533 040C                                l1815 0CCD  
                              l1903 0E10                                l2463 031E  
                              l2439 02CB                                l2375 0092  
                              l2367 0066                                l2615 04F3  
                              l2623 058F                                l2543 042D  
                              l1809 0C75                                l1921 05E7  
                              l1913 05D4                                l2369 0083  
                              l2609 04DF                                l2553 044C  
                              l2625 0590                                l2299 0F22  
                              l2491 039F                                l2459 0318  
                              l2547 0443                                l2619 0564  
                              l1845 0031                                l1837 0013  
                              l1861 0D10                                l1941 0638  
                              l1933 0625                                l1925 05F4  
                              l2573 0475                                l2565 0466  
                              l1839 001F                                l1863 0D1C  
                              l1871 0D31                                l1951 0655  
                              l1919 05DE                                l2479 0366  
                              l2583 0487                                l2559 045A  
                              l1849 003A                                l1961 0673  
                              l1945 063A                                l2593 0496  
                              l2585 0489                                l2577 047C  
                              l2569 046C                                l1883 0DCD  
                              l1891 0DF2                                l1867 0D28  
                              l1963 067E                                l1955 0657  
                              l1947 0648                                l1893 0DF7  
                              l1957 0666                                l1973 0692  
                              l2597 04A5                                l1887 0DDB  
                              l1967 0689                                l1897 0DFB  
                              l1889 0DEE                                l1985 06CD  
                              STR_1 13E3                                STR_2 13F0  
                              STR_3 13F6                                STR_4 1218  
                              STR_5 127C                                STR_6 1402  
                              STR_7 1203                                STR_8 10E4  
                              STR_9 1000                                u2025 0049  
                              u1315 0020                                u2035 0054  
                              u1325 002A                                _LATA 010C  
                              u1255 0CD4                                u1335 0032  
                              _LATC 010E                                u1265 0CD9  
                              u1365 0D13                                u1525 064E  
                              u1295 0016                                u1615 0716  
                              u2184 03A9                                u1385 0D22  
                              u2185 03A8                                u1395 0D29  
                              u1655 0741                                u1824 0D6C  
                              u1585 06F4                                u1825 0D6B  
                              u1835 00E1                                u1785 0CF7  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 0F1A                                _main 03CC  
                              _mode 0062                     can_baudrate@bpr 0041  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 000B  
                      _SPI_exchange 0C86                       __CFG_MCLRE$ON 0000  
                  can_send@data_buf 0043          __end_of_can_dump_registers 027F  
    __end_of_SPI_Exchange8bitBuffer 0E12                       ?_EUSART_Write 0070  
    __size_of_OSCILLATOR_Initialize 0007       __end_of_OSCILLATOR_Initialize 0C38  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 10AE                               STR_11 103B  
                             STR_20 121A                               STR_12 116D  
                             STR_21 1353                               STR_13 1143  
                             STR_30 1362                               STR_22 1230  
                             STR_14 11D3                               STR_31 125A  
                             STR_23 11EC                               STR_15 1193  
                             STR_40 1218                               STR_32 12A2  
                             STR_24 1291                               STR_16 1245  
                             STR_41 13A6                               STR_33 12C4  
                             STR_25 12B3                               STR_17 11B9  
                     __CFG_WDTE$OFF 0000                               STR_42 13B2  
                             STR_50 1305                               STR_26 12D5  
                             STR_34 126E                               STR_18 1075  
                             STR_51 1218                               STR_43 13BE  
                             STR_35 1399                               STR_27 1335  
                             STR_19 1117                               STR_44 1218  
                             STR_36 138C                               STR_28 137E  
                             STR_52 1344                               STR_37 1215  
                             STR_53 1353                               STR_29 1370  
                             STR_45 12F5                               STR_54 1215  
                             STR_38 1296                               STR_46 1315  
                             STR_39 12B8                               STR_55 13DC  
                             STR_47 1325                               STR_48 1218  
                             STR_56 1280                               STR_49 12E5  
              __size_of_can_set_sid 0024                     __end_of___lwdiv 003F  
                   __end_of___lwmod 0D36       can_status_check@bytes_written 005E  
                             _RCREG 0199                               _RCSTA 019D  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 13D4                      _WDT_Initialize 0C22  
                   __end_of_max_idx 140A                     __end_of_isdigit 0C77  
                   __end_of_receive 0173                               atoi@a 007B  
                  can_baudrate@mask 0042                               atoi@s 007D  
                             _putch 0C26                               main@c 00B0  
                             main@n 00A6                               pclath 000A  
                             status 0003                               wtemp0 007E  
                     receive@rx_buf 0048                     ?_SPI_Initialize 0070  
                   __initialization 07EE               __size_of_can_baudrate 0033  
                      __end_of_atoi 0F81                        __end_of_main 05B3  
                     main@echo_back 00A5                      ??_EUSART_Write 0070  
            can_status_check@status 005F                              ??_atoi 0078  
                            ??_main 0060               can_set_mask@mask_sidh 004A  
             can_set_mask@mask_sidl 004B             can_logging_mode@verbose 0070  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0C26  
                     can_set_mask@n 003F            __end_of_SPI_Exchange8bit 0C49  
             __size_of_can_ope_mode 0057               __size_of_can_set_mask 0080  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                  __end_of_can_init 1000                        _can_baudrate 0D91  
                  __end_of_can_send 03CC                    receive_handler@i 0041  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0CCB  
                     _output_format 0066                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
                            _printf 05B3                        _can_ope_mode 0E68  
                      _can_set_mask 003F                           ??_isdigit 0070  
                         ??_receive 0042                     ?_WDT_Initialize 0070  
         __size_of_can_logging_mode 000B                    __end_of_rxfnsidh 13F0  
                  __end_of_txbnsidh 13FF                    __end_of_rxmnsidh 1409  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0C77  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
            __size_of_read_register 0019                  ?_SYSTEM_Initialize 0070  
                __size_of_can_abort 002D                      __pcstackCOMMON 0070  
               ??_SYSTEM_Initialize 0070                      can_send@status 0042  
                     __end_of_putch 0C2B                         receive@pbuf 0057  
                        __end_of_nm 1407                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 005C  
            can_abort@bytes_written 0041           __end_of_SYSTEM_Initialize 0C86  
                           ??_putch 0071                          __pbssBANK0 0062  
                        __pbssBANK1 00B3                __end_of_EUSART_Write 0C40  
                  can_set_mask@mask 0040                          __pmaintext 03CC  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0022                       _read_register 0CB2  
                         ?_can_init 003F                           ?_can_send 003B  
                _can_dump_registers 0173            __size_of_receive_handler 005B  
                           _OSCTUNE 0098                   __end_of_can_abort 0D63  
                           _SSP1ADD 0212                             _SSP1BUF 0211  
               ?_can_dump_registers 0070                  __size_of_txf_clear 002E  
                  ??_SPI_Initialize 0070                     __size_of___wmul 001B  
              ??_can_dump_registers 003B                       ??_can_set_sid 0072  
                           ___lwdiv 000B                             ___lwmod 0D0A  
                    ?_read_register 0070                             _handler 0069  
                           __ptext1 0E12                             __ptext2 0D63  
                           __ptext3 00BF                             __ptext4 0EBF  
                           __ptext5 003F                             __ptext6 027F  
                           __ptext7 0C5E                             __ptext8 0F81  
                           __ptext9 0CE6                     __size_of_printf 023B  
                 __end_of_hexpowers 13DC                             _dpowers 13CA  
                        ??_can_init 0041               _OSCILLATOR_Initialize 0C31  
                           _max_idx 1409                          ??_can_send 003C  
                           _isdigit 0C69                             _receive 00BF  
          ??_PIN_MANAGER_Initialize 0070                    _can_logging_mode 0C5E  
                 ?_SPI_Exchange8bit 0070                             main@cmd 00B1  
            txf_clear@bytes_written 0023                             main@buf 00A7  
                           main@bpr 00A1          __size_of_SYSTEM_Initialize 000F  
                           main@idx 00B2                             main@sid 00A0  
                           clrloop0 0C2C                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
                    _operation_mode 0068                   _EUSART_Initialize 0C53  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 003A                             printf@f 0022  
                 __end_of_txf_clear 0D91                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_set_sid 0D0A  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
                 ??_receive_handler 003E           __end_of_EUSART_Initialize 0C5E  
                       printf@width 0038            ??_SPI_Exchange8bitBuffer 0073  
                        main@status 00A2                 receive_handler@pbuf 003C  
                   ??_read_register 0020                      __end_of___wmul 0CE6  
                      _EUSART_Write 0C38              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 07EE                 start_initialization 07EE  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 1402  
                  _can_set_mask$491 0047                       ??_EUSART_Read 0070  
                       putch@txData 0071           can_baudrate@bytes_written 0043  
         __size_of_can_status_check 0056           can_ope_mode@bytes_written 003D  
                     ?_SPI_exchange 0078                            ??___wmul 0074  
                     txf_clear@mask 0022                         _can_set_sid 0CE6  
                          ??_printf 002A                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
               can_set_sid@can_node 0070                   read_register@addr 0021  
                 __size_of_can_init 007F                   __size_of_can_send 014D  
                        receive@dlc 005A       SPI_Exchange8bitBuffer@dataOut 0072  
                        receive@sid 0058                           _can_abort 0D36  
        __size_of_EUSART_Initialize 000B                 __end_of_EUSART_Read 0C53  
                         __pnvBANK0 0069                     can_set_mask@cmd 0049  
                    ??_SPI_exchange 0079     __size_of_SPI_Exchange8bitBuffer 004E  
                  ___lwdiv@dividend 0072              _PIN_MANAGER_Initialize 0C9B  
                   can_set_sid@sidh 0075                     can_set_sid@sidl 0076  
          __end_of_can_logging_mode 0C69                            ?___lwdiv 0070  
                          ?___lwmod 0078                            ?_isdigit 0070  
                          ?_receive 0070                           can_send@i 0044  
                         can_send@n 0045                           _hexpowers 13D4  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                        ?_can_abort 0070                       ?_can_baudrate 0070  
                    ___wmul@product 0074                            _LATAbits 010C  
                          _LATCbits 010E                           clear_ram0 0C2B  
                          _PIR1bits 0011           __size_of_SPI_Exchange8bit 0009  
                          _SSP1CON1 0215                            _SSP1STAT 0214  
       __size_of_can_dump_registers 010C                       ?_can_ope_mode 0070  
                 ___wmul@multiplier 0070                       ?_can_set_mask 003F  
            _SPI_Exchange8bitBuffer 0DC4                     _receive_handler 0EBF  
                        printf@flag 0037                          printf@prec 002F  
                         _txf_clear 0D63                  receive_handler@dlc 003D  
                receive_handler@sid 003B                         _EUSART_Read 0C49  
                    ??_can_baudrate 003F                         can_send@dlc 003B  
                       can_send@len 0040                    _can_status_check 0E12  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 003B                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C                      ??_can_set_mask 0041  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$785 0070  
              can_ope_mode@ope_mode 003E        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_init 0F81                            _can_send 027F  
                        txf_clear@n 0024                          ?_txf_clear 0070  
              __end_of_SPI_exchange 0C9B                    __size_of_isdigit 000E  
                  __size_of_receive 00B4                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0173  
                          __ptext11 0CB2                            __ptext20 0C86  
                          __ptext12 0D91                            __ptext21 0DC4  
                          __ptext13 0D36                            __ptext30 0C31  
                          __ptext22 0C40                            __ptext14 0E68  
                          __ptext31 0C53                            __ptext23 0F1A  
                          __ptext15 05B3                            __ptext32 0C49  
                          __ptext24 0C69                            __ptext16 0C26  
                          __ptext25 0CCB                            __ptext17 0C38  
                          __ptext26 0C77                            __ptext18 0D0A  
                          __ptext27 0C22                            __ptext19 000B  
                          __ptext28 0004                            __ptext29 0C9B  
                      _SSP1CON1bits 0215                         ??_can_abort 003F  
                     __size_of_atoi 0067                       __size_of_main 01E7  
                          atoi@sign 007A             __end_of_receive_handler 0F1A  
                      ?_can_set_sid 0070                           printf@idx 002E  
                         printf@len 0032                           printf@val 0035  
                      _SSP1STATbits 0214                            main@mask 00A3  
                          _rxfnsidh 13EA               __end_of_read_register 0CCB  
                          _txbnsidh 13FC                            _rxmnsidh 1407  
                    __pstringtext10 103B                      __pstringtext11 1075  
                    __pstringtext20 11EC                      __pstringtext12 10AE  
                    __pstringtext21 1203                      __pstringtext13 10E4  
                    __pstringtext30 12B3                      __pstringtext22 121A  
                    __pstringtext14 1117                      __pstringtext31 12C4  
                    __pstringtext23 1230                      __pstringtext15 1143  
                    __pstringtext40 1353                      __pstringtext32 12D5  
                    __pstringtext24 1245                      __pstringtext16 116D  
                    __pstringtext41 1362                      __pstringtext33 12E5  
                    __pstringtext25 125A                      __pstringtext17 1193  
                    __pstringtext50 13E3                      __pstringtext42 1370  
                    __pstringtext34 12F5                      __pstringtext26 126E  
                    __pstringtext18 11B9                      __pstringtext51 13F0  
                    __pstringtext43 137E                      __pstringtext35 1305  
                    __pstringtext27 1280                      __pstringtext19 11D3  
                    __pstringtext52 13F6                      __pstringtext44 138C  
                    __pstringtext36 1315                      __pstringtext28 1291  
                    __pstringtext53 1402                      __pstringtext45 1399  
                    __pstringtext37 1325                      __pstringtext29 12A2  
                    __pstringtext54 0000                      __pstringtext46 13A6  
                    __pstringtext38 1335                      __pstringtext47 13B2  
                    __pstringtext39 1344                      __pstringtext48 13BE  
                    __pstringtext49 13DC                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                            receive@n 005B  
                  ___lwmod@dividend 007A             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                 receive@bytes_read 0047                    _SPI_Exchange8bit 0C40  
             can_send@bytes_written 0041                            printf@ap 0034  
                          printf@cp 0030                   ?_can_logging_mode 0070  
           can_init@receive_handler 003F                  ??_can_logging_mode 0071  
              __end_of_can_baudrate 0DC4                       __pstringtext1 13CA  
                     __pstringtext2 13D4                       __pstringtext3 13EA  
                     __pstringtext4 13FC                       __pstringtext5 13FF  
                     __pstringtext6 1405                       __pstringtext7 1407  
                     __pstringtext8 1409                       __pstringtext9 1000  
                       ??_txf_clear 0020                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0CB2                __end_of_can_ope_mode 0EBF  
              __end_of_can_set_mask 00BF  
