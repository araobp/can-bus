

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 08:25:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	stringtext55,global,class=STRCODE,delta=2
    60                           	psect	stringtext56,global,class=STRCODE,delta=2
    61                           	psect	cinit,global,class=CODE,merge=1,delta=2
    62                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    63                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    64                           	psect	clrtext,global,class=CODE,delta=2
    65                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    67                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    68                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    69                           	psect	text1,local,class=CODE,merge=1,delta=2
    70                           	psect	text2,local,class=CODE,merge=1,delta=2
    71                           	psect	text3,local,class=CODE,merge=1,delta=2
    72                           	psect	text4,local,class=CODE,merge=1,delta=2
    73                           	psect	text5,local,class=CODE,merge=1,delta=2
    74                           	psect	text6,local,class=CODE,merge=1,delta=2
    75                           	psect	text7,local,class=CODE,merge=1,delta=2
    76                           	psect	text8,local,class=CODE,merge=1,delta=2
    77                           	psect	text9,local,class=CODE,merge=1,delta=2
    78                           	psect	text10,local,class=CODE,merge=1,delta=2
    79                           	psect	text11,local,class=CODE,merge=1,delta=2
    80                           	psect	text12,local,class=CODE,merge=1,delta=2
    81                           	psect	text13,local,class=CODE,merge=1,delta=2
    82                           	psect	text14,local,class=CODE,merge=1,delta=2
    83                           	psect	text15,local,class=CODE,merge=1,delta=2
    84                           	psect	text16,local,class=CODE,merge=1,delta=2
    85                           	psect	text17,local,class=CODE,merge=1,delta=2
    86                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text20,local,class=CODE,merge=1,delta=2
    89                           	psect	text21,local,class=CODE,merge=1,delta=2
    90                           	psect	text22,local,class=CODE,merge=1,delta=2
    91                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text26,local,class=CODE,merge=1,delta=2
    95                           	psect	text27,local,class=CODE,merge=1,delta=2
    96                           	psect	text28,local,class=CODE,merge=1,delta=2
    97                           	psect	text29,local,class=CODE,merge=1,delta=2
    98                           	psect	text30,local,class=CODE,merge=1,delta=2
    99                           	psect	text31,local,class=CODE,merge=1,delta=2
   100                           	psect	text32,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     
   103                           ; Version 1.45
   104                           ; Generated 16/11/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC16F1825 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  008C                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  020C                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038E                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  039A                     	;# 
   262  039C                     	;# 
   263  039D                     	;# 
   264  039E                     	;# 
   265  039F                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0098                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010E                     	;# 
   329  0111                     	;# 
   330  0112                     	;# 
   331  0113                     	;# 
   332  0114                     	;# 
   333  0115                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  0118                     	;# 
   337  0119                     	;# 
   338  011A                     	;# 
   339  011B                     	;# 
   340  011D                     	;# 
   341  011E                     	;# 
   342  018C                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019D                     	;# 
   359  019E                     	;# 
   360  019F                     	;# 
   361  020C                     	;# 
   362  020E                     	;# 
   363  0211                     	;# 
   364  0211                     	;# 
   365  0212                     	;# 
   366  0212                     	;# 
   367  0213                     	;# 
   368  0213                     	;# 
   369  0214                     	;# 
   370  0214                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0216                     	;# 
   376  0217                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038E                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  039A                     	;# 
   408  039C                     	;# 
   409  039D                     	;# 
   410  039E                     	;# 
   411  039F                     	;# 
   412  0415                     	;# 
   413  0416                     	;# 
   414  0417                     	;# 
   415  041C                     	;# 
   416  041D                     	;# 
   417  041E                     	;# 
   418  0FE4                     	;# 
   419  0FE5                     	;# 
   420  0FE6                     	;# 
   421  0FE7                     	;# 
   422  0FE8                     	;# 
   423  0FE9                     	;# 
   424  0FEA                     	;# 
   425  0FEB                     	;# 
   426  0FED                     	;# 
   427  0FEE                     	;# 
   428  0FEF                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0008                     	;# 
   438  0009                     	;# 
   439  000A                     	;# 
   440  000B                     	;# 
   441  000C                     	;# 
   442  000E                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  008C                     	;# 
   458  008E                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010E                     	;# 
   475  0111                     	;# 
   476  0112                     	;# 
   477  0113                     	;# 
   478  0114                     	;# 
   479  0115                     	;# 
   480  0116                     	;# 
   481  0117                     	;# 
   482  0118                     	;# 
   483  0119                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011D                     	;# 
   487  011E                     	;# 
   488  018C                     	;# 
   489  018E                     	;# 
   490  0191                     	;# 
   491  0191                     	;# 
   492  0192                     	;# 
   493  0193                     	;# 
   494  0193                     	;# 
   495  0193                     	;# 
   496  0194                     	;# 
   497  0195                     	;# 
   498  0196                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019E                     	;# 
   506  019F                     	;# 
   507  020C                     	;# 
   508  020E                     	;# 
   509  0211                     	;# 
   510  0211                     	;# 
   511  0212                     	;# 
   512  0212                     	;# 
   513  0213                     	;# 
   514  0213                     	;# 
   515  0214                     	;# 
   516  0214                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0215                     	;# 
   520  0216                     	;# 
   521  0216                     	;# 
   522  0217                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029D                     	;# 
   539  029E                     	;# 
   540  0311                     	;# 
   541  0311                     	;# 
   542  0312                     	;# 
   543  0313                     	;# 
   544  0318                     	;# 
   545  0318                     	;# 
   546  0319                     	;# 
   547  031A                     	;# 
   548  038C                     	;# 
   549  038E                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000E                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008E                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010E                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0113                     	;# 
   624  0114                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011A                     	;# 
   631  011B                     	;# 
   632  011D                     	;# 
   633  011E                     	;# 
   634  018C                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  029B                     	;# 
   683  029C                     	;# 
   684  029D                     	;# 
   685  029E                     	;# 
   686  0311                     	;# 
   687  0311                     	;# 
   688  0312                     	;# 
   689  0313                     	;# 
   690  0318                     	;# 
   691  0318                     	;# 
   692  0319                     	;# 
   693  031A                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  039A                     	;# 
   700  039C                     	;# 
   701  039D                     	;# 
   702  039E                     	;# 
   703  039F                     	;# 
   704  0415                     	;# 
   705  0416                     	;# 
   706  0417                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  001E                     	;# 
   748  001F                     	;# 
   749  008C                     	;# 
   750  008E                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010E                     	;# 
   767  0111                     	;# 
   768  0112                     	;# 
   769  0113                     	;# 
   770  0114                     	;# 
   771  0115                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  0118                     	;# 
   775  0119                     	;# 
   776  011A                     	;# 
   777  011B                     	;# 
   778  011D                     	;# 
   779  011E                     	;# 
   780  018C                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  0311                     	;# 
   833  0311                     	;# 
   834  0312                     	;# 
   835  0313                     	;# 
   836  0318                     	;# 
   837  0318                     	;# 
   838  0319                     	;# 
   839  031A                     	;# 
   840  038C                     	;# 
   841  038E                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  039A                     	;# 
   846  039C                     	;# 
   847  039D                     	;# 
   848  039E                     	;# 
   849  039F                     	;# 
   850  0415                     	;# 
   851  0416                     	;# 
   852  0417                     	;# 
   853  041C                     	;# 
   854  041D                     	;# 
   855  041E                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000E                     	;# 
   881  0011                     	;# 
   882  0012                     	;# 
   883  0013                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0016                     	;# 
   887  0017                     	;# 
   888  0018                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001E                     	;# 
   894  001F                     	;# 
   895  008C                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0097                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010E                     	;# 
   913  0111                     	;# 
   914  0112                     	;# 
   915  0113                     	;# 
   916  0114                     	;# 
   917  0115                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  0118                     	;# 
   921  0119                     	;# 
   922  011A                     	;# 
   923  011B                     	;# 
   924  011D                     	;# 
   925  011E                     	;# 
   926  018C                     	;# 
   927  018E                     	;# 
   928  0191                     	;# 
   929  0191                     	;# 
   930  0192                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0193                     	;# 
   934  0194                     	;# 
   935  0195                     	;# 
   936  0196                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019D                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  020C                     	;# 
   946  020E                     	;# 
   947  0211                     	;# 
   948  0211                     	;# 
   949  0212                     	;# 
   950  0212                     	;# 
   951  0213                     	;# 
   952  0213                     	;# 
   953  0214                     	;# 
   954  0214                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0216                     	;# 
   959  0216                     	;# 
   960  0217                     	;# 
   961  0217                     	;# 
   962  0291                     	;# 
   963  0291                     	;# 
   964  0292                     	;# 
   965  0293                     	;# 
   966  0294                     	;# 
   967  0295                     	;# 
   968  0295                     	;# 
   969  0296                     	;# 
   970  0298                     	;# 
   971  0298                     	;# 
   972  0299                     	;# 
   973  029A                     	;# 
   974  029B                     	;# 
   975  029C                     	;# 
   976  029D                     	;# 
   977  029E                     	;# 
   978  0311                     	;# 
   979  0311                     	;# 
   980  0312                     	;# 
   981  0313                     	;# 
   982  0318                     	;# 
   983  0318                     	;# 
   984  0319                     	;# 
   985  031A                     	;# 
   986  038C                     	;# 
   987  038E                     	;# 
   988  0391                     	;# 
   989  0392                     	;# 
   990  0393                     	;# 
   991  039A                     	;# 
   992  039C                     	;# 
   993  039D                     	;# 
   994  039E                     	;# 
   995  039F                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0FE4                     	;# 
  1003  0FE5                     	;# 
  1004  0FE6                     	;# 
  1005  0FE7                     	;# 
  1006  0FE8                     	;# 
  1007  0FE9                     	;# 
  1008  0FEA                     	;# 
  1009  0FEB                     	;# 
  1010  0FED                     	;# 
  1011  0FEE                     	;# 
  1012  0FEF                     	;# 
  1013  0000                     	;# 
  1014  0001                     	;# 
  1015  0002                     	;# 
  1016  0003                     	;# 
  1017  0004                     	;# 
  1018  0005                     	;# 
  1019  0006                     	;# 
  1020  0007                     	;# 
  1021  0008                     	;# 
  1022  0009                     	;# 
  1023  000A                     	;# 
  1024  000B                     	;# 
  1025  000C                     	;# 
  1026  000E                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001C                     	;# 
  1039  001E                     	;# 
  1040  001F                     	;# 
  1041  008C                     	;# 
  1042  008E                     	;# 
  1043  0091                     	;# 
  1044  0092                     	;# 
  1045  0093                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0098                     	;# 
  1050  0099                     	;# 
  1051  009A                     	;# 
  1052  009B                     	;# 
  1053  009B                     	;# 
  1054  009C                     	;# 
  1055  009D                     	;# 
  1056  009E                     	;# 
  1057  010C                     	;# 
  1058  010E                     	;# 
  1059  0111                     	;# 
  1060  0112                     	;# 
  1061  0113                     	;# 
  1062  0114                     	;# 
  1063  0115                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  0118                     	;# 
  1067  0119                     	;# 
  1068  011A                     	;# 
  1069  011B                     	;# 
  1070  011D                     	;# 
  1071  011E                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019D                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020E                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0291                     	;# 
  1109  0291                     	;# 
  1110  0292                     	;# 
  1111  0293                     	;# 
  1112  0294                     	;# 
  1113  0295                     	;# 
  1114  0295                     	;# 
  1115  0296                     	;# 
  1116  0298                     	;# 
  1117  0298                     	;# 
  1118  0299                     	;# 
  1119  029A                     	;# 
  1120  029B                     	;# 
  1121  029C                     	;# 
  1122  029D                     	;# 
  1123  029E                     	;# 
  1124  0311                     	;# 
  1125  0311                     	;# 
  1126  0312                     	;# 
  1127  0313                     	;# 
  1128  0318                     	;# 
  1129  0318                     	;# 
  1130  0319                     	;# 
  1131  031A                     	;# 
  1132  038C                     	;# 
  1133  038E                     	;# 
  1134  0391                     	;# 
  1135  0392                     	;# 
  1136  0393                     	;# 
  1137  039A                     	;# 
  1138  039C                     	;# 
  1139  039D                     	;# 
  1140  039E                     	;# 
  1141  039F                     	;# 
  1142  0415                     	;# 
  1143  0416                     	;# 
  1144  0417                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159                           
  1160                           	psect	stringtext1
  1161  13EB                     __pstringtext1:	
  1162  13EB                     _dpowers:	
  1163  13EB  3401               	retlw	1
  1164  13EC  3400               	retlw	0
  1165  13ED  340A               	retlw	10
  1166  13EE  3400               	retlw	0
  1167  13EF  3464               	retlw	100
  1168  13F0  3400               	retlw	0
  1169  13F1  34E8               	retlw	232
  1170  13F2  3403               	retlw	3
  1171  13F3  3410               	retlw	16
  1172  13F4  3427               	retlw	39
  1173  13F5                     __end_of_dpowers:	
  1174                           
  1175                           	psect	stringtext2
  1176  13F5                     __pstringtext2:	
  1177  13F5                     _hexpowers:	
  1178  13F5  3401               	retlw	1
  1179  13F6  3400               	retlw	0
  1180  13F7  3410               	retlw	16
  1181  13F8  3400               	retlw	0
  1182  13F9  3400               	retlw	0
  1183  13FA  3401               	retlw	1
  1184  13FB  3400               	retlw	0
  1185  13FC  3410               	retlw	16
  1186  13FD                     __end_of_hexpowers:	
  1187                           
  1188                           	psect	stringtext3
  1189  140B                     __pstringtext3:	
  1190  140B                     _rxfnsidh:	
  1191  140B  3400               	retlw	0
  1192  140C  3404               	retlw	4
  1193  140D  3408               	retlw	8
  1194  140E  3410               	retlw	16
  1195  140F  3414               	retlw	20
  1196  1410  3418               	retlw	24
  1197  1411                     __end_of_rxfnsidh:	
  1198                           
  1199                           	psect	stringtext4
  1200  1422                     __pstringtext4:	
  1201  1422                     _txbnsidh:	
  1202  1422  3431               	retlw	49
  1203  1423  3441               	retlw	65
  1204  1424  3451               	retlw	81
  1205  1425                     __end_of_txbnsidh:	
  1206                           
  1207                           	psect	stringtext5
  1208  1425                     __pstringtext5:	
  1209  1425                     _abc:	
  1210  1425  3400               	retlw	0
  1211  1426  3402               	retlw	2
  1212  1427  3404               	retlw	4
  1213  1428                     __end_of_abc:	
  1214                           
  1215                           	psect	stringtext6
  1216  142B                     __pstringtext6:	
  1217  142B                     _nm:	
  1218  142B  3400               	retlw	0
  1219  142C  3402               	retlw	2
  1220  142D                     __end_of_nm:	
  1221                           
  1222                           	psect	stringtext7
  1223  142D                     __pstringtext7:	
  1224  142D                     _rxmnsidh:	
  1225  142D  3420               	retlw	32
  1226  142E  3424               	retlw	36
  1227  142F                     __end_of_rxmnsidh:	
  1228                           
  1229                           	psect	stringtext8
  1230  142F                     __pstringtext8:	
  1231  142F                     _max_idx:	
  1232  142F  3407               	retlw	7
  1233  1430                     __end_of_max_idx:	
  1234                           
  1235                           	psect	nvBANK0
  1236  0069                     __pnvBANK0:	
  1237  0069                     _handler:	
  1238  0069                     	ds	2
  1239  0011                     _PIR1bits	set	17
  1240  0095                     _OPTION_REGbits	set	149
  1241  008E                     _TRISC	set	142
  1242  008C                     _TRISA	set	140
  1243  0097                     _WDTCON	set	151
  1244  0098                     _OSCTUNE	set	152
  1245  0099                     _OSCCON	set	153
  1246  010C                     _LATAbits	set	268
  1247  010E                     _LATCbits	set	270
  1248  011D                     _APFCON0	set	285
  1249  011E                     _APFCON1	set	286
  1250  010E                     _LATC	set	270
  1251  010C                     _LATA	set	268
  1252  0116                     _BORCON	set	278
  1253  018C                     _ANSELA	set	396
  1254  018E                     _ANSELC	set	398
  1255  019A                     _TXREG	set	410
  1256  0199                     _RCREG	set	409
  1257  019D                     _RCSTAbits	set	413
  1258  019C                     _SPBRGH	set	412
  1259  019B                     _SPBRGL	set	411
  1260  019E                     _TXSTA	set	414
  1261  019D                     _RCSTA	set	413
  1262  019F                     _BAUDCON	set	415
  1263  0214                     _SSP1STATbits	set	532
  1264  0211                     _SSP1BUF	set	529
  1265  0215                     _SSP1CON1bits	set	533
  1266  0212                     _SSP1ADD	set	530
  1267  0215                     _SSP1CON1	set	533
  1268  0214                     _SSP1STAT	set	532
  1269  020E                     _WPUC	set	526
  1270  020C                     _WPUA	set	524
  1271                           
  1272                           	psect	stringtext9
  1273  1000                     __pstringtext9:	
  1274  1000                     STR_10:	
  1275  1000  345B               	retlw	91	;'['
  1276  1001  3453               	retlw	83	;'S'
  1277  1002  3465               	retlw	101	;'e'
  1278  1003  3474               	retlw	116	;'t'
  1279  1004  3420               	retlw	32	;' '
  1280  1005  346F               	retlw	111	;'o'
  1281  1006  3475               	retlw	117	;'u'
  1282  1007  3474               	retlw	116	;'t'
  1283  1008  3470               	retlw	112	;'p'
  1284  1009  3475               	retlw	117	;'u'
  1285  100A  3474               	retlw	116	;'t'
  1286  100B  3420               	retlw	32	;' '
  1287  100C  346D               	retlw	109	;'m'
  1288  100D  346F               	retlw	111	;'o'
  1289  100E  3464               	retlw	100	;'d'
  1290  100F  3465               	retlw	101	;'e'
  1291  1010  345D               	retlw	93	;']'
  1292  1011  3420               	retlw	32	;' '
  1293  1012  347B               	retlw	123	;'{'
  1294  1013  3464               	retlw	100	;'d'
  1295  1014  3465               	retlw	101	;'e'
  1296  1015  3462               	retlw	98	;'b'
  1297  1016  3475               	retlw	117	;'u'
  1298  1017  3467               	retlw	103	;'g'
  1299  1018  343A               	retlw	58	;':'
  1300  1019  3420               	retlw	32	;' '
  1301  101A  3440               	retlw	64	;'@'
  1302  101B  3476               	retlw	118	;'v'
  1303  101C  3464               	retlw	100	;'d'
  1304  101D  342C               	retlw	44	;','
  1305  101E  3420               	retlw	32	;' '
  1306  101F  3476               	retlw	118	;'v'
  1307  1020  3465               	retlw	101	;'e'
  1308  1021  3472               	retlw	114	;'r'
  1309  1022  3462               	retlw	98	;'b'
  1310  1023  346F               	retlw	111	;'o'
  1311  1024  3473               	retlw	115	;'s'
  1312  1025  3465               	retlw	101	;'e'
  1313  1026  343A               	retlw	58	;':'
  1314  1027  3420               	retlw	32	;' '
  1315  1028  3440               	retlw	64	;'@'
  1316  1029  3476               	retlw	118	;'v'
  1317  102A  3476               	retlw	118	;'v'
  1318  102B  342C               	retlw	44	;','
  1319  102C  3420               	retlw	32	;' '
  1320  102D  346E               	retlw	110	;'n'
  1321  102E  346F               	retlw	111	;'o'
  1322  102F  3472               	retlw	114	;'r'
  1323  1030  346D               	retlw	109	;'m'
  1324  1031  3461               	retlw	97	;'a'
  1325  1032  346C               	retlw	108	;'l'
  1326  1033  343A               	retlw	58	;':'
  1327  1034  3420               	retlw	32	;' '
  1328  1035  3440               	retlw	64	;'@'
  1329  1036  3476               	retlw	118	;'v'
  1330  1037  346E               	retlw	110	;'n'
  1331  1038  347D               	retlw	125	;'}'
  1332  1039  340A               	retlw	10
  1333  103A  3400               	retlw	0
  1334                           
  1335                           	psect	stringtext10
  1336  103B                     __pstringtext10:	
  1337  103B                     STR_12:	
  1338  103B  3420               	retlw	32	;' '
  1339  103C  3420               	retlw	32	;' '
  1340  103D  3420               	retlw	32	;' '
  1341  103E  3420               	retlw	32	;' '
  1342  103F  3420               	retlw	32	;' '
  1343  1040  3477               	retlw	119	;'w'
  1344  1041  3469               	retlw	105	;'i'
  1345  1042  3474               	retlw	116	;'t'
  1346  1043  3468               	retlw	104	;'h'
  1347  1044  3420               	retlw	32	;' '
  1348  1045  3453               	retlw	83	;'S'
  1349  1046  3449               	retlw	73	;'I'
  1350  1047  3444               	retlw	68	;'D'
  1351  1048  343A               	retlw	58	;':'
  1352  1049  3420               	retlw	32	;' '
  1353  104A  3440               	retlw	64	;'@'
  1354  104B  346F               	retlw	111	;'o'
  1355  104C  346C               	retlw	108	;'l'
  1356  104D  3473               	retlw	115	;'s'
  1357  104E  3420               	retlw	32	;' '
  1358  104F  346F               	retlw	111	;'o'
  1359  1050  3472               	retlw	114	;'r'
  1360  1051  3420               	retlw	32	;' '
  1361  1052  3440               	retlw	64	;'@'
  1362  1053  346F               	retlw	111	;'o'
  1363  1054  346E               	retlw	110	;'n'
  1364  1055  3473               	retlw	115	;'s'
  1365  1056  342C               	retlw	44	;','
  1366  1057  3420               	retlw	32	;' '
  1367  1058  3469               	retlw	105	;'i'
  1368  1059  346E               	retlw	110	;'n'
  1369  105A  3420               	retlw	32	;' '
  1370  105B  3468               	retlw	104	;'h'
  1371  105C  3465               	retlw	101	;'e'
  1372  105D  3478               	retlw	120	;'x'
  1373  105E  3420               	retlw	32	;' '
  1374  105F  3466               	retlw	102	;'f'
  1375  1060  346F               	retlw	111	;'o'
  1376  1061  3472               	retlw	114	;'r'
  1377  1062  346D               	retlw	109	;'m'
  1378  1063  3461               	retlw	97	;'a'
  1379  1064  3474               	retlw	116	;'t'
  1380  1065  343A               	retlw	58	;':'
  1381  1066  3420               	retlw	32	;' '
  1382  1067  3440               	retlw	64	;'@'
  1383  1068  346F               	retlw	111	;'o'
  1384  1069  346C               	retlw	108	;'l'
  1385  106A  3468               	retlw	104	;'h'
  1386  106B  3420               	retlw	32	;' '
  1387  106C  346F               	retlw	111	;'o'
  1388  106D  3472               	retlw	114	;'r'
  1389  106E  3420               	retlw	32	;' '
  1390  106F  3440               	retlw	64	;'@'
  1391  1070  346F               	retlw	111	;'o'
  1392  1071  346E               	retlw	110	;'n'
  1393  1072  3468               	retlw	104	;'h'
  1394  1073  340A               	retlw	10
  1395  1074  3400               	retlw	0
  1396                           
  1397                           	psect	stringtext11
  1398  1075                     __pstringtext11:	
  1399  1075                     STR_19:	
  1400  1075  345B               	retlw	91	;'['
  1401  1076  3453               	retlw	83	;'S'
  1402  1077  3465               	retlw	101	;'e'
  1403  1078  346E               	retlw	110	;'n'
  1404  1079  3464               	retlw	100	;'d'
  1405  107A  3420               	retlw	32	;' '
  1406  107B  346D               	retlw	109	;'m'
  1407  107C  3465               	retlw	101	;'e'
  1408  107D  3473               	retlw	115	;'s'
  1409  107E  3473               	retlw	115	;'s'
  1410  107F  3461               	retlw	97	;'a'
  1411  1080  3467               	retlw	103	;'g'
  1412  1081  3465               	retlw	101	;'e'
  1413  1082  3420               	retlw	32	;' '
  1414  1083  3462               	retlw	98	;'b'
  1415  1084  3465               	retlw	101	;'e'
  1416  1085  3467               	retlw	103	;'g'
  1417  1086  3469               	retlw	105	;'i'
  1418  1087  346E               	retlw	110	;'n'
  1419  1088  346E               	retlw	110	;'n'
  1420  1089  3469               	retlw	105	;'i'
  1421  108A  346E               	retlw	110	;'n'
  1422  108B  3467               	retlw	103	;'g'
  1423  108C  3420               	retlw	32	;' '
  1424  108D  3477               	retlw	119	;'w'
  1425  108E  3469               	retlw	105	;'i'
  1426  108F  3474               	retlw	116	;'t'
  1427  1090  3468               	retlw	104	;'h'
  1428  1091  3420               	retlw	32	;' '
  1429  1092  3427               	retlw	39	;'''
  1430  1093  3440               	retlw	64	;'@'
  1431  1094  3427               	retlw	39	;'''
  1432  1095  3420               	retlw	32	;' '
  1433  1096  3463               	retlw	99	;'c'
  1434  1097  3468               	retlw	104	;'h'
  1435  1098  3461               	retlw	97	;'a'
  1436  1099  3472               	retlw	114	;'r'
  1437  109A  3461               	retlw	97	;'a'
  1438  109B  3463               	retlw	99	;'c'
  1439  109C  3474               	retlw	116	;'t'
  1440  109D  3465               	retlw	101	;'e'
  1441  109E  3472               	retlw	114	;'r'
  1442  109F  345D               	retlw	93	;']'
  1443  10A0  3420               	retlw	32	;' '
  1444  10A1  3440               	retlw	64	;'@'
  1445  10A2  343C               	retlw	60	;'<'
  1446  10A3  3440               	retlw	64	;'@'
  1447  10A4  346D               	retlw	109	;'m'
  1448  10A5  3465               	retlw	101	;'e'
  1449  10A6  3473               	retlw	115	;'s'
  1450  10A7  3473               	retlw	115	;'s'
  1451  10A8  3461               	retlw	97	;'a'
  1452  10A9  3467               	retlw	103	;'g'
  1453  10AA  3465               	retlw	101	;'e'
  1454  10AB  343E               	retlw	62	;'>'
  1455  10AC  340A               	retlw	10
  1456  10AD  3400               	retlw	0
  1457                           
  1458                           	psect	stringtext12
  1459  10AE                     __pstringtext12:	
  1460  10AE                     STR_11:	
  1461  10AE  345B               	retlw	91	;'['
  1462  10AF  3445               	retlw	69	;'E'
  1463  10B0  346E               	retlw	110	;'n'
  1464  10B1  3461               	retlw	97	;'a'
  1465  10B2  3462               	retlw	98	;'b'
  1466  10B3  346C               	retlw	108	;'l'
  1467  10B4  3465               	retlw	101	;'e'
  1468  10B5  3420               	retlw	32	;' '
  1469  10B6  346F               	retlw	111	;'o'
  1470  10B7  3470               	retlw	112	;'p'
  1471  10B8  3465               	retlw	101	;'e'
  1472  10B9  3472               	retlw	114	;'r'
  1473  10BA  3461               	retlw	97	;'a'
  1474  10BB  3474               	retlw	116	;'t'
  1475  10BC  3469               	retlw	105	;'i'
  1476  10BD  346F               	retlw	111	;'o'
  1477  10BE  346E               	retlw	110	;'n'
  1478  10BF  3420               	retlw	32	;' '
  1479  10C0  346D               	retlw	109	;'m'
  1480  10C1  346F               	retlw	111	;'o'
  1481  10C2  3464               	retlw	100	;'d'
  1482  10C3  3465               	retlw	101	;'e'
  1483  10C4  345D               	retlw	93	;']'
  1484  10C5  3420               	retlw	32	;' '
  1485  10C6  347B               	retlw	123	;'{'
  1486  10C7  346C               	retlw	108	;'l'
  1487  10C8  346F               	retlw	111	;'o'
  1488  10C9  346F               	retlw	111	;'o'
  1489  10CA  3470               	retlw	112	;'p'
  1490  10CB  3462               	retlw	98	;'b'
  1491  10CC  3461               	retlw	97	;'a'
  1492  10CD  3463               	retlw	99	;'c'
  1493  10CE  346B               	retlw	107	;'k'
  1494  10CF  343A               	retlw	58	;':'
  1495  10D0  3420               	retlw	32	;' '
  1496  10D1  3440               	retlw	64	;'@'
  1497  10D2  346F               	retlw	111	;'o'
  1498  10D3  346C               	retlw	108	;'l'
  1499  10D4  342C               	retlw	44	;','
  1500  10D5  3420               	retlw	32	;' '
  1501  10D6  346E               	retlw	110	;'n'
  1502  10D7  346F               	retlw	111	;'o'
  1503  10D8  3472               	retlw	114	;'r'
  1504  10D9  346D               	retlw	109	;'m'
  1505  10DA  3461               	retlw	97	;'a'
  1506  10DB  346C               	retlw	108	;'l'
  1507  10DC  343A               	retlw	58	;':'
  1508  10DD  3420               	retlw	32	;' '
  1509  10DE  3440               	retlw	64	;'@'
  1510  10DF  346F               	retlw	111	;'o'
  1511  10E0  346E               	retlw	110	;'n'
  1512  10E1  347D               	retlw	125	;'}'
  1513  10E2  340A               	retlw	10
  1514  10E3  3400               	retlw	0
  1515                           
  1516                           	psect	stringtext13
  1517  10E4                     __pstringtext13:	
  1518  10E4                     STR_9:	
  1519  10E4  345B               	retlw	91	;'['
  1520  10E5  3453               	retlw	83	;'S'
  1521  10E6  3465               	retlw	101	;'e'
  1522  10E7  3474               	retlw	116	;'t'
  1523  10E8  3420               	retlw	32	;' '
  1524  10E9  3473               	retlw	115	;'s'
  1525  10EA  3474               	retlw	116	;'t'
  1526  10EB  3461               	retlw	97	;'a'
  1527  10EC  346E               	retlw	110	;'n'
  1528  10ED  3464               	retlw	100	;'d'
  1529  10EE  3461               	retlw	97	;'a'
  1530  10EF  3472               	retlw	114	;'r'
  1531  10F0  3464               	retlw	100	;'d'
  1532  10F1  3420               	retlw	32	;' '
  1533  10F2  3469               	retlw	105	;'i'
  1534  10F3  3464               	retlw	100	;'d'
  1535  10F4  3465               	retlw	101	;'e'
  1536  10F5  346E               	retlw	110	;'n'
  1537  10F6  3474               	retlw	116	;'t'
  1538  10F7  3469               	retlw	105	;'i'
  1539  10F8  3466               	retlw	102	;'f'
  1540  10F9  3469               	retlw	105	;'i'
  1541  10FA  3465               	retlw	101	;'e'
  1542  10FB  3472               	retlw	114	;'r'
  1543  10FC  345D               	retlw	93	;']'
  1544  10FD  3420               	retlw	32	;' '
  1545  10FE  3440               	retlw	64	;'@'
  1546  10FF  3469               	retlw	105	;'i'
  1547  1100  343C               	retlw	60	;'<'
  1548  1101  3473               	retlw	115	;'s'
  1549  1102  3474               	retlw	116	;'t'
  1550  1103  3461               	retlw	97	;'a'
  1551  1104  346E               	retlw	110	;'n'
  1552  1105  3464               	retlw	100	;'d'
  1553  1106  3461               	retlw	97	;'a'
  1554  1107  3472               	retlw	114	;'r'
  1555  1108  3464               	retlw	100	;'d'
  1556  1109  3420               	retlw	32	;' '
  1557  110A  3469               	retlw	105	;'i'
  1558  110B  3464               	retlw	100	;'d'
  1559  110C  3465               	retlw	101	;'e'
  1560  110D  346E               	retlw	110	;'n'
  1561  110E  3474               	retlw	116	;'t'
  1562  110F  3469               	retlw	105	;'i'
  1563  1110  3466               	retlw	102	;'f'
  1564  1111  3469               	retlw	105	;'i'
  1565  1112  3465               	retlw	101	;'e'
  1566  1113  3472               	retlw	114	;'r'
  1567  1114  343E               	retlw	62	;'>'
  1568  1115  340A               	retlw	10
  1569  1116  3400               	retlw	0
  1570                           
  1571                           	psect	stringtext14
  1572  1117                     __pstringtext14:	
  1573  1117                     STR_20:	
  1574  1117  345B               	retlw	91	;'['
  1575  1118  3452               	retlw	82	;'R'
  1576  1119  3465               	retlw	101	;'e'
  1577  111A  3463               	retlw	99	;'c'
  1578  111B  3465               	retlw	101	;'e'
  1579  111C  3469               	retlw	105	;'i'
  1580  111D  3476               	retlw	118	;'v'
  1581  111E  3465               	retlw	101	;'e'
  1582  111F  3420               	retlw	32	;' '
  1583  1120  346D               	retlw	109	;'m'
  1584  1121  3465               	retlw	101	;'e'
  1585  1122  3473               	retlw	115	;'s'
  1586  1123  3473               	retlw	115	;'s'
  1587  1124  3461               	retlw	97	;'a'
  1588  1125  3467               	retlw	103	;'g'
  1589  1126  3465               	retlw	101	;'e'
  1590  1127  345D               	retlw	93	;']'
  1591  1128  3420               	retlw	32	;' '
  1592  1129  343C               	retlw	60	;'<'
  1593  112A  346D               	retlw	109	;'m'
  1594  112B  3465               	retlw	101	;'e'
  1595  112C  3473               	retlw	115	;'s'
  1596  112D  3473               	retlw	115	;'s'
  1597  112E  3461               	retlw	97	;'a'
  1598  112F  3467               	retlw	103	;'g'
  1599  1130  3465               	retlw	101	;'e'
  1600  1131  343E               	retlw	62	;'>'
  1601  1132  3420               	retlw	32	;' '
  1602  1133  3477               	retlw	119	;'w'
  1603  1134  3469               	retlw	105	;'i'
  1604  1135  346C               	retlw	108	;'l'
  1605  1136  346C               	retlw	108	;'l'
  1606  1137  3420               	retlw	32	;' '
  1607  1138  3462               	retlw	98	;'b'
  1608  1139  3465               	retlw	101	;'e'
  1609  113A  3420               	retlw	32	;' '
  1610  113B  346F               	retlw	111	;'o'
  1611  113C  3475               	retlw	117	;'u'
  1612  113D  3474               	retlw	116	;'t'
  1613  113E  3470               	retlw	112	;'p'
  1614  113F  3475               	retlw	117	;'u'
  1615  1140  3474               	retlw	116	;'t'
  1616  1141  340A               	retlw	10
  1617  1142  3400               	retlw	0
  1618                           
  1619                           	psect	stringtext15
  1620  1143                     __pstringtext15:	
  1621  1143                     STR_14:	
  1622  1143  345B               	retlw	91	;'['
  1623  1144  3453               	retlw	83	;'S'
  1624  1145  3465               	retlw	101	;'e'
  1625  1146  3474               	retlw	116	;'t'
  1626  1147  3420               	retlw	32	;' '
  1627  1148  3466               	retlw	102	;'f'
  1628  1149  3469               	retlw	105	;'i'
  1629  114A  346C               	retlw	108	;'l'
  1630  114B  3474               	retlw	116	;'t'
  1631  114C  3465               	retlw	101	;'e'
  1632  114D  3472               	retlw	114	;'r'
  1633  114E  345D               	retlw	93	;']'
  1634  114F  3420               	retlw	32	;' '
  1635  1150  3440               	retlw	64	;'@'
  1636  1151  3466               	retlw	102	;'f'
  1637  1152  343C               	retlw	60	;'<'
  1638  1153  346E               	retlw	110	;'n'
  1639  1154  343E               	retlw	62	;'>'
  1640  1155  343C               	retlw	60	;'<'
  1641  1156  3466               	retlw	102	;'f'
  1642  1157  3469               	retlw	105	;'i'
  1643  1158  346C               	retlw	108	;'l'
  1644  1159  3474               	retlw	116	;'t'
  1645  115A  3465               	retlw	101	;'e'
  1646  115B  3472               	retlw	114	;'r'
  1647  115C  3428               	retlw	40	;'('
  1648  115D  3453               	retlw	83	;'S'
  1649  115E  3449               	retlw	73	;'I'
  1650  115F  3444               	retlw	68	;'D'
  1651  1160  3431               	retlw	49	;'1'
  1652  1161  3430               	retlw	48	;'0'
  1653  1162  3420               	retlw	32	;' '
  1654  1163  347E               	retlw	126	;'~'
  1655  1164  3420               	retlw	32	;' '
  1656  1165  3453               	retlw	83	;'S'
  1657  1166  3449               	retlw	73	;'I'
  1658  1167  3444               	retlw	68	;'D'
  1659  1168  3430               	retlw	48	;'0'
  1660  1169  3429               	retlw	41	;')'
  1661  116A  343E               	retlw	62	;'>'
  1662  116B  340A               	retlw	10
  1663  116C  3400               	retlw	0
  1664                           
  1665                           	psect	stringtext16
  1666  116D                     __pstringtext16:	
  1667  116D                     STR_13:	
  1668  116D  345B               	retlw	91	;'['
  1669  116E  3453               	retlw	83	;'S'
  1670  116F  3465               	retlw	101	;'e'
  1671  1170  3474               	retlw	116	;'t'
  1672  1171  3420               	retlw	32	;' '
  1673  1172  346D               	retlw	109	;'m'
  1674  1173  3461               	retlw	97	;'a'
  1675  1174  3473               	retlw	115	;'s'
  1676  1175  346B               	retlw	107	;'k'
  1677  1176  345D               	retlw	93	;']'
  1678  1177  3420               	retlw	32	;' '
  1679  1178  3440               	retlw	64	;'@'
  1680  1179  346D               	retlw	109	;'m'
  1681  117A  343C               	retlw	60	;'<'
  1682  117B  346E               	retlw	110	;'n'
  1683  117C  343E               	retlw	62	;'>'
  1684  117D  343C               	retlw	60	;'<'
  1685  117E  346D               	retlw	109	;'m'
  1686  117F  3461               	retlw	97	;'a'
  1687  1180  3473               	retlw	115	;'s'
  1688  1181  346B               	retlw	107	;'k'
  1689  1182  3428               	retlw	40	;'('
  1690  1183  3453               	retlw	83	;'S'
  1691  1184  3449               	retlw	73	;'I'
  1692  1185  3444               	retlw	68	;'D'
  1693  1186  3431               	retlw	49	;'1'
  1694  1187  3430               	retlw	48	;'0'
  1695  1188  3420               	retlw	32	;' '
  1696  1189  347E               	retlw	126	;'~'
  1697  118A  3420               	retlw	32	;' '
  1698  118B  3453               	retlw	83	;'S'
  1699  118C  3449               	retlw	73	;'I'
  1700  118D  3444               	retlw	68	;'D'
  1701  118E  3430               	retlw	48	;'0'
  1702  118F  3429               	retlw	41	;')'
  1703  1190  343E               	retlw	62	;'>'
  1704  1191  340A               	retlw	10
  1705  1192  3400               	retlw	0
  1706                           
  1707                           	psect	stringtext17
  1708  1193                     __pstringtext17:	
  1709  1193                     STR_16:	
  1710  1193  345B               	retlw	91	;'['
  1711  1194  3441               	retlw	65	;'A'
  1712  1195  3462               	retlw	98	;'b'
  1713  1196  346F               	retlw	111	;'o'
  1714  1197  3472               	retlw	114	;'r'
  1715  1198  3474               	retlw	116	;'t'
  1716  1199  3420               	retlw	32	;' '
  1717  119A  3461               	retlw	97	;'a'
  1718  119B  346C               	retlw	108	;'l'
  1719  119C  346C               	retlw	108	;'l'
  1720  119D  3420               	retlw	32	;' '
  1721  119E  3470               	retlw	112	;'p'
  1722  119F  3465               	retlw	101	;'e'
  1723  11A0  346E               	retlw	110	;'n'
  1724  11A1  3464               	retlw	100	;'d'
  1725  11A2  3469               	retlw	105	;'i'
  1726  11A3  346E               	retlw	110	;'n'
  1727  11A4  3467               	retlw	103	;'g'
  1728  11A5  3420               	retlw	32	;' '
  1729  11A6  3474               	retlw	116	;'t'
  1730  11A7  3472               	retlw	114	;'r'
  1731  11A8  3461               	retlw	97	;'a'
  1732  11A9  346E               	retlw	110	;'n'
  1733  11AA  3473               	retlw	115	;'s'
  1734  11AB  346D               	retlw	109	;'m'
  1735  11AC  3469               	retlw	105	;'i'
  1736  11AD  3473               	retlw	115	;'s'
  1737  11AE  3473               	retlw	115	;'s'
  1738  11AF  3469               	retlw	105	;'i'
  1739  11B0  346F               	retlw	111	;'o'
  1740  11B1  346E               	retlw	110	;'n'
  1741  11B2  3473               	retlw	115	;'s'
  1742  11B3  345D               	retlw	93	;']'
  1743  11B4  3420               	retlw	32	;' '
  1744  11B5  3440               	retlw	64	;'@'
  1745  11B6  3461               	retlw	97	;'a'
  1746  11B7  340A               	retlw	10
  1747  11B8  3400               	retlw	0
  1748                           
  1749                           	psect	stringtext18
  1750  11B9                     __pstringtext18:	
  1751  11B9                     STR_7:	
  1752  11B9  342F               	retlw	47	;'/'
  1753  11BA  342F               	retlw	47	;'/'
  1754  11BB  342F               	retlw	47	;'/'
  1755  11BC  3420               	retlw	32	;' '
  1756  11BD  3455               	retlw	85	;'U'
  1757  11BE  3441               	retlw	65	;'A'
  1758  11BF  3452               	retlw	82	;'R'
  1759  11C0  3454               	retlw	84	;'T'
  1760  11C1  3432               	retlw	50	;'2'
  1761  11C2  3443               	retlw	67	;'C'
  1762  11C3  3441               	retlw	65	;'A'
  1763  11C4  344E               	retlw	78	;'N'
  1764  11C5  3420               	retlw	32	;' '
  1765  11C6  3448               	retlw	72	;'H'
  1766  11C7  3445               	retlw	69	;'E'
  1767  11C8  344C               	retlw	76	;'L'
  1768  11C9  3450               	retlw	80	;'P'
  1769  11CA  3420               	retlw	32	;' '
  1770  11CB  3428               	retlw	40	;'('
  1771  11CC  3476               	retlw	118	;'v'
  1772  11CD  3465               	retlw	101	;'e'
  1773  11CE  3472               	retlw	114	;'r'
  1774  11CF  3473               	retlw	115	;'s'
  1775  11D0  3469               	retlw	105	;'i'
  1776  11D1  346F               	retlw	111	;'o'
  1777  11D2  346E               	retlw	110	;'n'
  1778  11D3  3420               	retlw	32	;' '
  1779  11D4  3425               	retlw	37	;'%'
  1780  11D5  3473               	retlw	115	;'s'
  1781  11D6  3429               	retlw	41	;')'
  1782  11D7  3420               	retlw	32	;' '
  1783  11D8  342F               	retlw	47	;'/'
  1784  11D9  342F               	retlw	47	;'/'
  1785  11DA  342F               	retlw	47	;'/'
  1786  11DB  340A               	retlw	10
  1787  11DC  3400               	retlw	0
  1788                           
  1789                           	psect	stringtext19
  1790  11DD                     __pstringtext19:	
  1791  11DD                     STR_18:	
  1792  11DD  345B               	retlw	91	;'['
  1793  11DE  3453               	retlw	83	;'S'
  1794  11DF  3465               	retlw	101	;'e'
  1795  11E0  346E               	retlw	110	;'n'
  1796  11E1  3464               	retlw	100	;'d'
  1797  11E2  3420               	retlw	32	;' '
  1798  11E3  346D               	retlw	109	;'m'
  1799  11E4  3465               	retlw	101	;'e'
  1800  11E5  3473               	retlw	115	;'s'
  1801  11E6  3473               	retlw	115	;'s'
  1802  11E7  3461               	retlw	97	;'a'
  1803  11E8  3467               	retlw	103	;'g'
  1804  11E9  3465               	retlw	101	;'e'
  1805  11EA  345D               	retlw	93	;']'
  1806  11EB  3420               	retlw	32	;' '
  1807  11EC  343C               	retlw	60	;'<'
  1808  11ED  346D               	retlw	109	;'m'
  1809  11EE  3465               	retlw	101	;'e'
  1810  11EF  3473               	retlw	115	;'s'
  1811  11F0  3473               	retlw	115	;'s'
  1812  11F1  3461               	retlw	97	;'a'
  1813  11F2  3467               	retlw	103	;'g'
  1814  11F3  3465               	retlw	101	;'e'
  1815  11F4  343E               	retlw	62	;'>'
  1816  11F5  340A               	retlw	10
  1817  11F6  3400               	retlw	0
  1818                           
  1819                           	psect	stringtext20
  1820  11F7                     __pstringtext20:	
  1821  11F7                     STR_15:	
  1822  11F7  345B               	retlw	91	;'['
  1823  11F8  3453               	retlw	83	;'S'
  1824  11F9  3465               	retlw	101	;'e'
  1825  11FA  3474               	retlw	116	;'t'
  1826  11FB  3420               	retlw	32	;' '
  1827  11FC  3462               	retlw	98	;'b'
  1828  11FD  3461               	retlw	97	;'a'
  1829  11FE  3475               	retlw	117	;'u'
  1830  11FF  3464               	retlw	100	;'d'
  1831  1200  3420               	retlw	32	;' '
  1832  1201  3472               	retlw	114	;'r'
  1833  1202  3461               	retlw	97	;'a'
  1834  1203  3474               	retlw	116	;'t'
  1835  1204  3465               	retlw	101	;'e'
  1836  1205  345D               	retlw	93	;']'
  1837  1206  3420               	retlw	32	;' '
  1838  1207  3440               	retlw	64	;'@'
  1839  1208  3462               	retlw	98	;'b'
  1840  1209  343C               	retlw	60	;'<'
  1841  120A  3462               	retlw	98	;'b'
  1842  120B  3470               	retlw	112	;'p'
  1843  120C  3472               	retlw	114	;'r'
  1844  120D  343E               	retlw	62	;'>'
  1845  120E  340A               	retlw	10
  1846  120F  3400               	retlw	0
  1847                           
  1848                           	psect	stringtext21
  1849  1210                     __pstringtext21:	
  1850  1210                     STR_24:	
  1851  1210  3466               	retlw	102	;'f'
  1852  1211  3469               	retlw	105	;'i'
  1853  1212  346C               	retlw	108	;'l'
  1854  1213  3474               	retlw	116	;'t'
  1855  1214  3465               	retlw	101	;'e'
  1856  1215  3472               	retlw	114	;'r'
  1857  1216  3428               	retlw	40	;'('
  1858  1217  3425               	retlw	37	;'%'
  1859  1218  3464               	retlw	100	;'d'
  1860  1219  3429               	retlw	41	;')'
  1861  121A  343A               	retlw	58	;':'
  1862  121B  3420               	retlw	32	;' '
  1863  121C  3425               	retlw	37	;'%'
  1864  121D  3430               	retlw	48	;'0'
  1865  121E  3432               	retlw	50	;'2'
  1866  121F  3478               	retlw	120	;'x'
  1867  1220  3420               	retlw	32	;' '
  1868  1221  3425               	retlw	37	;'%'
  1869  1222  3430               	retlw	48	;'0'
  1870  1223  3432               	retlw	50	;'2'
  1871  1224  3478               	retlw	120	;'x'
  1872  1225  340A               	retlw	10
  1873  1226  3400               	retlw	0
  1874                           
  1875                           	psect	stringtext22
  1876  1227                     __pstringtext22:	
  1877  1227                     STR_21:	
  1878  1227  345B               	retlw	91	;'['
  1879  1228  3453               	retlw	83	;'S'
  1880  1229  3468               	retlw	104	;'h'
  1881  122A  346F               	retlw	111	;'o'
  1882  122B  3477               	retlw	119	;'w'
  1883  122C  3420               	retlw	32	;' '
  1884  122D  3474               	retlw	116	;'t'
  1885  122E  3468               	retlw	104	;'h'
  1886  122F  3469               	retlw	105	;'i'
  1887  1230  3473               	retlw	115	;'s'
  1888  1231  3420               	retlw	32	;' '
  1889  1232  3468               	retlw	104	;'h'
  1890  1233  3465               	retlw	101	;'e'
  1891  1234  346C               	retlw	108	;'l'
  1892  1235  3470               	retlw	112	;'p'
  1893  1236  345D               	retlw	93	;']'
  1894  1237  343A               	retlw	58	;':'
  1895  1238  3420               	retlw	32	;' '
  1896  1239  3440               	retlw	64	;'@'
  1897  123A  3468               	retlw	104	;'h'
  1898  123B  340A               	retlw	10
  1899  123C  3400               	retlw	0
  1900                           
  1901                           	psect	stringtext23
  1902  123D                     __pstringtext23:	
  1903  123D                     STR_23:	
  1904  123D  346D               	retlw	109	;'m'
  1905  123E  3461               	retlw	97	;'a'
  1906  123F  3473               	retlw	115	;'s'
  1907  1240  346B               	retlw	107	;'k'
  1908  1241  3428               	retlw	40	;'('
  1909  1242  3425               	retlw	37	;'%'
  1910  1243  3464               	retlw	100	;'d'
  1911  1244  3429               	retlw	41	;')'
  1912  1245  343A               	retlw	58	;':'
  1913  1246  3420               	retlw	32	;' '
  1914  1247  3425               	retlw	37	;'%'
  1915  1248  3430               	retlw	48	;'0'
  1916  1249  3432               	retlw	50	;'2'
  1917  124A  3478               	retlw	120	;'x'
  1918  124B  3420               	retlw	32	;' '
  1919  124C  3425               	retlw	37	;'%'
  1920  124D  3430               	retlw	48	;'0'
  1921  124E  3432               	retlw	50	;'2'
  1922  124F  3478               	retlw	120	;'x'
  1923  1250  340A               	retlw	10
  1924  1251  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext24
  1927  1252                     __pstringtext24:	
  1928  1252                     STR_17:	
  1929  1252  345B               	retlw	91	;'['
  1930  1253  3444               	retlw	68	;'D'
  1931  1254  3475               	retlw	117	;'u'
  1932  1255  346D               	retlw	109	;'m'
  1933  1256  3470               	retlw	112	;'p'
  1934  1257  3420               	retlw	32	;' '
  1935  1258  3472               	retlw	114	;'r'
  1936  1259  3465               	retlw	101	;'e'
  1937  125A  3467               	retlw	103	;'g'
  1938  125B  3469               	retlw	105	;'i'
  1939  125C  3473               	retlw	115	;'s'
  1940  125D  3474               	retlw	116	;'t'
  1941  125E  3465               	retlw	101	;'e'
  1942  125F  3472               	retlw	114	;'r'
  1943  1260  3473               	retlw	115	;'s'
  1944  1261  345D               	retlw	93	;']'
  1945  1262  3420               	retlw	32	;' '
  1946  1263  3440               	retlw	64	;'@'
  1947  1264  3464               	retlw	100	;'d'
  1948  1265  340A               	retlw	10
  1949  1266  3400               	retlw	0
  1950                           
  1951                           	psect	stringtext25
  1952  1267                     __pstringtext25:	
  1953  1267                     STR_32:	
  1954  1267  3443               	retlw	67	;'C'
  1955  1268  346F               	retlw	111	;'o'
  1956  1269  3470               	retlw	112	;'p'
  1957  126A  3479               	retlw	121	;'y'
  1958  126B  3469               	retlw	105	;'i'
  1959  126C  346E               	retlw	110	;'n'
  1960  126D  3467               	retlw	103	;'g'
  1961  126E  3420               	retlw	32	;' '
  1962  126F  3462               	retlw	98	;'b'
  1963  1270  3475               	retlw	117	;'u'
  1964  1271  3466               	retlw	102	;'f'
  1965  1272  3466               	retlw	102	;'f'
  1966  1273  3465               	retlw	101	;'e'
  1967  1274  3472               	retlw	114	;'r'
  1968  1275  343A               	retlw	58	;':'
  1969  1276  3420               	retlw	32	;' '
  1970  1277  3425               	retlw	37	;'%'
  1971  1278  3463               	retlw	99	;'c'
  1972  1279  340A               	retlw	10
  1973  127A  3400               	retlw	0
  1974                           
  1975                           	psect	stringtext26
  1976  127B                     __pstringtext26:	
  1977  127B                     STR_8:	
  1978  127B  3430               	retlw	48	;'0'
  1979  127C  342E               	retlw	46	;'.'
  1980  127D  3431               	retlw	49	;'1'
  1981  127E  3420               	retlw	32	;' '
  1982  127F  3420               	retlw	32	;' '
  1983  1280  344D               	retlw	77	;'M'
  1984  1281  3461               	retlw	97	;'a'
  1985  1282  3472               	retlw	114	;'r'
  1986  1283  3463               	retlw	99	;'c'
  1987  1284  3468               	retlw	104	;'h'
  1988  1285  3420               	retlw	32	;' '
  1989  1286  3431               	retlw	49	;'1'
  1990  1287  3437               	retlw	55	;'7'
  1991  1288  342C               	retlw	44	;','
  1992  1289  3420               	retlw	32	;' '
  1993  128A  3432               	retlw	50	;'2'
  1994  128B  3430               	retlw	48	;'0'
  1995  128C  3431               	retlw	49	;'1'
  1996  128D  3438               	retlw	56	;'8'
  1997  128E  3400               	retlw	0
  1998                           
  1999                           	psect	stringtext27
  2000  128F                     __pstringtext27:	
  2001  128F                     STR_35:	
  2002  128F  344D               	retlw	77	;'M'
  2003  1290  3465               	retlw	101	;'e'
  2004  1291  3473               	retlw	115	;'s'
  2005  1292  3473               	retlw	115	;'s'
  2006  1293  3461               	retlw	97	;'a'
  2007  1294  3467               	retlw	103	;'g'
  2008  1295  3465               	retlw	101	;'e'
  2009  1296  3420               	retlw	32	;' '
  2010  1297  3473               	retlw	115	;'s'
  2011  1298  3465               	retlw	101	;'e'
  2012  1299  346E               	retlw	110	;'n'
  2013  129A  3474               	retlw	116	;'t'
  2014  129B  343A               	retlw	58	;':'
  2015  129C  3420               	retlw	32	;' '
  2016  129D  3425               	retlw	37	;'%'
  2017  129E  3473               	retlw	115	;'s'
  2018  129F  340A               	retlw	10
  2019  12A0  3400               	retlw	0
  2020                           
  2021                           	psect	stringtext28
  2022  12A1                     __pstringtext28:	
  2023  12A1                     STR_57:	
  2024  12A1  3430               	retlw	48	;'0'
  2025  12A2  3431               	retlw	49	;'1'
  2026  12A3  3432               	retlw	50	;'2'
  2027  12A4  3433               	retlw	51	;'3'
  2028  12A5  3434               	retlw	52	;'4'
  2029  12A6  3435               	retlw	53	;'5'
  2030  12A7  3436               	retlw	54	;'6'
  2031  12A8  3437               	retlw	55	;'7'
  2032  12A9  3438               	retlw	56	;'8'
  2033  12AA  3439               	retlw	57	;'9'
  2034  12AB  3461               	retlw	97	;'a'
  2035  12AC  3462               	retlw	98	;'b'
  2036  12AD  3463               	retlw	99	;'c'
  2037  12AE  3464               	retlw	100	;'d'
  2038  12AF  3465               	retlw	101	;'e'
  2039  12B0  3466               	retlw	102	;'f'
  2040  12B1  3400               	retlw	0
  2041                           
  2042                           	psect	stringtext29
  2043  12B2                     __pstringtext29:	
  2044  12B2                     STR_25:	
  2045  12B2  3452               	retlw	82	;'R'
  2046  12B3  3458               	retlw	88	;'X'
  2047  12B4  3442               	retlw	66	;'B'
  2048  12B5  3425               	retlw	37	;'%'
  2049  12B6  3464               	retlw	100	;'d'
  2050  12B7  3453               	retlw	83	;'S'
  2051  12B8  3449               	retlw	73	;'I'
  2052  12B9  3444               	retlw	68	;'D'
  2053  12BA  3448               	retlw	72	;'H'
  2054  12BB  343A               	retlw	58	;':'
  2055  12BC  3420               	retlw	32	;' '
  2056  12BD  3425               	retlw	37	;'%'
  2057  12BE  3430               	retlw	48	;'0'
  2058  12BF  3432               	retlw	50	;'2'
  2059  12C0  3478               	retlw	120	;'x'
  2060  12C1  340A               	retlw	10
  2061  12C2  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext30
  2064  12C3                     __pstringtext30:	
  2065  12C3                     STR_33:	
  2066  12C3  3454               	retlw	84	;'T'
  2067  12C4  3458               	retlw	88	;'X'
  2068  12C5  3442               	retlw	66	;'B'
  2069  12C6  3425               	retlw	37	;'%'
  2070  12C7  3464               	retlw	100	;'d'
  2071  12C8  3453               	retlw	83	;'S'
  2072  12C9  3449               	retlw	73	;'I'
  2073  12CA  3444               	retlw	68	;'D'
  2074  12CB  3448               	retlw	72	;'H'
  2075  12CC  343A               	retlw	58	;':'
  2076  12CD  3420               	retlw	32	;' '
  2077  12CE  3425               	retlw	37	;'%'
  2078  12CF  3430               	retlw	48	;'0'
  2079  12D0  3432               	retlw	50	;'2'
  2080  12D1  3478               	retlw	120	;'x'
  2081  12D2  340A               	retlw	10
  2082  12D3  3400               	retlw	0
  2083                           
  2084                           	psect	stringtext31
  2085  12D4                     __pstringtext31:	
  2086  12D4                     STR_26:	
  2087  12D4  3452               	retlw	82	;'R'
  2088  12D5  3458               	retlw	88	;'X'
  2089  12D6  3442               	retlw	66	;'B'
  2090  12D7  3425               	retlw	37	;'%'
  2091  12D8  3464               	retlw	100	;'d'
  2092  12D9  3453               	retlw	83	;'S'
  2093  12DA  3449               	retlw	73	;'I'
  2094  12DB  3444               	retlw	68	;'D'
  2095  12DC  344C               	retlw	76	;'L'
  2096  12DD  343A               	retlw	58	;':'
  2097  12DE  3420               	retlw	32	;' '
  2098  12DF  3425               	retlw	37	;'%'
  2099  12E0  3430               	retlw	48	;'0'
  2100  12E1  3432               	retlw	50	;'2'
  2101  12E2  3478               	retlw	120	;'x'
  2102  12E3  340A               	retlw	10
  2103  12E4  3400               	retlw	0
  2104                           
  2105                           	psect	stringtext32
  2106  12E5                     __pstringtext32:	
  2107  12E5                     STR_34:	
  2108  12E5  3454               	retlw	84	;'T'
  2109  12E6  3458               	retlw	88	;'X'
  2110  12E7  3442               	retlw	66	;'B'
  2111  12E8  3425               	retlw	37	;'%'
  2112  12E9  3464               	retlw	100	;'d'
  2113  12EA  3453               	retlw	83	;'S'
  2114  12EB  3449               	retlw	73	;'I'
  2115  12EC  3444               	retlw	68	;'D'
  2116  12ED  344C               	retlw	76	;'L'
  2117  12EE  343A               	retlw	58	;':'
  2118  12EF  3420               	retlw	32	;' '
  2119  12F0  3425               	retlw	37	;'%'
  2120  12F1  3430               	retlw	48	;'0'
  2121  12F2  3432               	retlw	50	;'2'
  2122  12F3  3478               	retlw	120	;'x'
  2123  12F4  340A               	retlw	10
  2124  12F5  3400               	retlw	0
  2125                           
  2126                           	psect	stringtext33
  2127  12F6                     __pstringtext33:	
  2128  12F6                     STR_27:	
  2129  12F6  3452               	retlw	82	;'R'
  2130  12F7  3458               	retlw	88	;'X'
  2131  12F8  3442               	retlw	66	;'B'
  2132  12F9  3425               	retlw	37	;'%'
  2133  12FA  3464               	retlw	100	;'d'
  2134  12FB  3444               	retlw	68	;'D'
  2135  12FC  344C               	retlw	76	;'L'
  2136  12FD  3443               	retlw	67	;'C'
  2137  12FE  343A               	retlw	58	;':'
  2138  12FF  3420               	retlw	32	;' '
  2139  1300  3425               	retlw	37	;'%'
  2140  1301  3430               	retlw	48	;'0'
  2141  1302  3432               	retlw	50	;'2'
  2142  1303  3478               	retlw	120	;'x'
  2143  1304  340A               	retlw	10
  2144  1305  3400               	retlw	0
  2145                           
  2146                           	psect	stringtext34
  2147  1306                     __pstringtext34:	
  2148  1306                     STR_50:	
  2149  1306  3452               	retlw	82	;'R'
  2150  1307  3458               	retlw	88	;'X'
  2151  1308  3442               	retlw	66	;'B'
  2152  1309  3430               	retlw	48	;'0'
  2153  130A  3443               	retlw	67	;'C'
  2154  130B  3454               	retlw	84	;'T'
  2155  130C  3452               	retlw	82	;'R'
  2156  130D  344C               	retlw	76	;'L'
  2157  130E  343A               	retlw	58	;':'
  2158  130F  3420               	retlw	32	;' '
  2159  1310  3425               	retlw	37	;'%'
  2160  1311  3430               	retlw	48	;'0'
  2161  1312  3432               	retlw	50	;'2'
  2162  1313  3478               	retlw	120	;'x'
  2163  1314  340A               	retlw	10
  2164  1315  3400               	retlw	0
  2165                           
  2166                           	psect	stringtext35
  2167  1316                     __pstringtext35:	
  2168  1316                     STR_46:	
  2169  1316  3454               	retlw	84	;'T'
  2170  1317  3458               	retlw	88	;'X'
  2171  1318  3442               	retlw	66	;'B'
  2172  1319  3430               	retlw	48	;'0'
  2173  131A  3443               	retlw	67	;'C'
  2174  131B  3454               	retlw	84	;'T'
  2175  131C  3452               	retlw	82	;'R'
  2176  131D  344C               	retlw	76	;'L'
  2177  131E  343A               	retlw	58	;':'
  2178  131F  3420               	retlw	32	;' '
  2179  1320  3425               	retlw	37	;'%'
  2180  1321  3430               	retlw	48	;'0'
  2181  1322  3432               	retlw	50	;'2'
  2182  1323  3478               	retlw	120	;'x'
  2183  1324  340A               	retlw	10
  2184  1325  3400               	retlw	0
  2185                           
  2186                           	psect	stringtext36
  2187  1326                     __pstringtext36:	
  2188  1326                     STR_51:	
  2189  1326  3452               	retlw	82	;'R'
  2190  1327  3458               	retlw	88	;'X'
  2191  1328  3442               	retlw	66	;'B'
  2192  1329  3431               	retlw	49	;'1'
  2193  132A  3443               	retlw	67	;'C'
  2194  132B  3454               	retlw	84	;'T'
  2195  132C  3452               	retlw	82	;'R'
  2196  132D  344C               	retlw	76	;'L'
  2197  132E  343A               	retlw	58	;':'
  2198  132F  3420               	retlw	32	;' '
  2199  1330  3425               	retlw	37	;'%'
  2200  1331  3430               	retlw	48	;'0'
  2201  1332  3432               	retlw	50	;'2'
  2202  1333  3478               	retlw	120	;'x'
  2203  1334  340A               	retlw	10
  2204  1335  3400               	retlw	0
  2205                           
  2206                           	psect	stringtext37
  2207  1336                     __pstringtext37:	
  2208  1336                     STR_47:	
  2209  1336  3454               	retlw	84	;'T'
  2210  1337  3458               	retlw	88	;'X'
  2211  1338  3442               	retlw	66	;'B'
  2212  1339  3431               	retlw	49	;'1'
  2213  133A  3443               	retlw	67	;'C'
  2214  133B  3454               	retlw	84	;'T'
  2215  133C  3452               	retlw	82	;'R'
  2216  133D  344C               	retlw	76	;'L'
  2217  133E  343A               	retlw	58	;':'
  2218  133F  3420               	retlw	32	;' '
  2219  1340  3425               	retlw	37	;'%'
  2220  1341  3430               	retlw	48	;'0'
  2221  1342  3432               	retlw	50	;'2'
  2222  1343  3478               	retlw	120	;'x'
  2223  1344  340A               	retlw	10
  2224  1345  3400               	retlw	0
  2225                           
  2226                           	psect	stringtext38
  2227  1346                     __pstringtext38:	
  2228  1346                     STR_48:	
  2229  1346  3454               	retlw	84	;'T'
  2230  1347  3458               	retlw	88	;'X'
  2231  1348  3442               	retlw	66	;'B'
  2232  1349  3432               	retlw	50	;'2'
  2233  134A  3443               	retlw	67	;'C'
  2234  134B  3454               	retlw	84	;'T'
  2235  134C  3452               	retlw	82	;'R'
  2236  134D  344C               	retlw	76	;'L'
  2237  134E  343A               	retlw	58	;':'
  2238  134F  3420               	retlw	32	;' '
  2239  1350  3425               	retlw	37	;'%'
  2240  1351  3430               	retlw	48	;'0'
  2241  1352  3432               	retlw	50	;'2'
  2242  1353  3478               	retlw	120	;'x'
  2243  1354  340A               	retlw	10
  2244  1355  3400               	retlw	0
  2245                           
  2246                           	psect	stringtext39
  2247  1356                     __pstringtext39:	
  2248  1356                     STR_28:	
  2249  1356  3452               	retlw	82	;'R'
  2250  1357  3458               	retlw	88	;'X'
  2251  1358  3442               	retlw	66	;'B'
  2252  1359  3425               	retlw	37	;'%'
  2253  135A  3464               	retlw	100	;'d'
  2254  135B  3444               	retlw	68	;'D'
  2255  135C  3430               	retlw	48	;'0'
  2256  135D  343A               	retlw	58	;':'
  2257  135E  3420               	retlw	32	;' '
  2258  135F  3425               	retlw	37	;'%'
  2259  1360  3430               	retlw	48	;'0'
  2260  1361  3432               	retlw	50	;'2'
  2261  1362  3478               	retlw	120	;'x'
  2262  1363  340A               	retlw	10
  2263  1364  3400               	retlw	0
  2264                           
  2265                           	psect	stringtext40
  2266  1365                     __pstringtext40:	
  2267  1365                     STR_53:	
  2268  1365  3443               	retlw	67	;'C'
  2269  1366  3441               	retlw	65	;'A'
  2270  1367  344E               	retlw	78	;'N'
  2271  1368  3443               	retlw	67	;'C'
  2272  1369  3454               	retlw	84	;'T'
  2273  136A  3452               	retlw	82	;'R'
  2274  136B  344C               	retlw	76	;'L'
  2275  136C  343A               	retlw	58	;':'
  2276  136D  3420               	retlw	32	;' '
  2277  136E  3425               	retlw	37	;'%'
  2278  136F  3430               	retlw	48	;'0'
  2279  1370  3432               	retlw	50	;'2'
  2280  1371  3478               	retlw	120	;'x'
  2281  1372  340A               	retlw	10
  2282  1373  3400               	retlw	0
  2283                           
  2284                           	psect	stringtext41
  2285  1374                     __pstringtext41:	
  2286  1374                     STR_22:	
  2287  1374  3443               	retlw	67	;'C'
  2288  1375  3441               	retlw	65	;'A'
  2289  1376  344E               	retlw	78	;'N'
  2290  1377  3453               	retlw	83	;'S'
  2291  1378  3454               	retlw	84	;'T'
  2292  1379  3441               	retlw	65	;'A'
  2293  137A  3454               	retlw	84	;'T'
  2294  137B  343A               	retlw	58	;':'
  2295  137C  3420               	retlw	32	;' '
  2296  137D  3425               	retlw	37	;'%'
  2297  137E  3430               	retlw	48	;'0'
  2298  137F  3432               	retlw	50	;'2'
  2299  1380  3478               	retlw	120	;'x'
  2300  1381  340A               	retlw	10
  2301  1382  3400               	retlw	0
  2302                           
  2303                           	psect	stringtext42
  2304  1383                     __pstringtext42:	
  2305  1383                     STR_31:	
  2306  1383  3454               	retlw	84	;'T'
  2307  1384  3458               	retlw	88	;'X'
  2308  1385  3442               	retlw	66	;'B'
  2309  1386  3430               	retlw	48	;'0'
  2310  1387  3420               	retlw	32	;' '
  2311  1388  3469               	retlw	105	;'i'
  2312  1389  3473               	retlw	115	;'s'
  2313  138A  3420               	retlw	32	;' '
  2314  138B  3469               	retlw	105	;'i'
  2315  138C  3464               	retlw	100	;'d'
  2316  138D  346C               	retlw	108	;'l'
  2317  138E  3465               	retlw	101	;'e'
  2318  138F  340A               	retlw	10
  2319  1390  3400               	retlw	0
  2320                           
  2321                           	psect	stringtext43
  2322  1391                     __pstringtext43:	
  2323  1391                     STR_30:	
  2324  1391  3454               	retlw	84	;'T'
  2325  1392  3458               	retlw	88	;'X'
  2326  1393  3442               	retlw	66	;'B'
  2327  1394  3431               	retlw	49	;'1'
  2328  1395  3420               	retlw	32	;' '
  2329  1396  3469               	retlw	105	;'i'
  2330  1397  3473               	retlw	115	;'s'
  2331  1398  3420               	retlw	32	;' '
  2332  1399  3469               	retlw	105	;'i'
  2333  139A  3464               	retlw	100	;'d'
  2334  139B  346C               	retlw	108	;'l'
  2335  139C  3465               	retlw	101	;'e'
  2336  139D  340A               	retlw	10
  2337  139E  3400               	retlw	0
  2338                           
  2339                           	psect	stringtext44
  2340  139F                     __pstringtext44:	
  2341  139F                     STR_29:	
  2342  139F  3454               	retlw	84	;'T'
  2343  13A0  3458               	retlw	88	;'X'
  2344  13A1  3442               	retlw	66	;'B'
  2345  13A2  3432               	retlw	50	;'2'
  2346  13A3  3420               	retlw	32	;' '
  2347  13A4  3469               	retlw	105	;'i'
  2348  13A5  3473               	retlw	115	;'s'
  2349  13A6  3420               	retlw	32	;' '
  2350  13A7  3469               	retlw	105	;'i'
  2351  13A8  3464               	retlw	100	;'d'
  2352  13A9  346C               	retlw	108	;'l'
  2353  13AA  3465               	retlw	101	;'e'
  2354  13AB  340A               	retlw	10
  2355  13AC  3400               	retlw	0
  2356                           
  2357                           	psect	stringtext45
  2358  13AD                     __pstringtext45:	
  2359  13AD                     STR_37:	
  2360  13AD  3452               	retlw	82	;'R'
  2361  13AE  3458               	retlw	88	;'X'
  2362  13AF  3430               	retlw	48	;'0'
  2363  13B0  3449               	retlw	73	;'I'
  2364  13B1  3446               	retlw	70	;'F'
  2365  13B2  3420               	retlw	32	;' '
  2366  13B3  3469               	retlw	105	;'i'
  2367  13B4  3473               	retlw	115	;'s'
  2368  13B5  3420               	retlw	32	;' '
  2369  13B6  346F               	retlw	111	;'o'
  2370  13B7  346E               	retlw	110	;'n'
  2371  13B8  340A               	retlw	10
  2372  13B9  3400               	retlw	0
  2373                           
  2374                           	psect	stringtext46
  2375  13BA                     __pstringtext46:	
  2376  13BA                     STR_36:	
  2377  13BA  3452               	retlw	82	;'R'
  2378  13BB  3458               	retlw	88	;'X'
  2379  13BC  3431               	retlw	49	;'1'
  2380  13BD  3449               	retlw	73	;'I'
  2381  13BE  3446               	retlw	70	;'F'
  2382  13BF  3420               	retlw	32	;' '
  2383  13C0  3469               	retlw	105	;'i'
  2384  13C1  3473               	retlw	115	;'s'
  2385  13C2  3420               	retlw	32	;' '
  2386  13C3  346F               	retlw	111	;'o'
  2387  13C4  346E               	retlw	110	;'n'
  2388  13C5  340A               	retlw	10
  2389  13C6  3400               	retlw	0
  2390                           
  2391                           	psect	stringtext47
  2392  13C7                     __pstringtext47:	
  2393  13C7                     STR_42:	
  2394  13C7  3443               	retlw	67	;'C'
  2395  13C8  344E               	retlw	78	;'N'
  2396  13C9  3446               	retlw	70	;'F'
  2397  13CA  3431               	retlw	49	;'1'
  2398  13CB  343A               	retlw	58	;':'
  2399  13CC  3420               	retlw	32	;' '
  2400  13CD  3425               	retlw	37	;'%'
  2401  13CE  3430               	retlw	48	;'0'
  2402  13CF  3432               	retlw	50	;'2'
  2403  13D0  3478               	retlw	120	;'x'
  2404  13D1  340A               	retlw	10
  2405  13D2  3400               	retlw	0
  2406                           
  2407                           	psect	stringtext48
  2408  13D3                     __pstringtext48:	
  2409  13D3                     STR_43:	
  2410  13D3  3443               	retlw	67	;'C'
  2411  13D4  344E               	retlw	78	;'N'
  2412  13D5  3446               	retlw	70	;'F'
  2413  13D6  3432               	retlw	50	;'2'
  2414  13D7  343A               	retlw	58	;':'
  2415  13D8  3420               	retlw	32	;' '
  2416  13D9  3425               	retlw	37	;'%'
  2417  13DA  3430               	retlw	48	;'0'
  2418  13DB  3432               	retlw	50	;'2'
  2419  13DC  3478               	retlw	120	;'x'
  2420  13DD  340A               	retlw	10
  2421  13DE  3400               	retlw	0
  2422                           
  2423                           	psect	stringtext49
  2424  13DF                     __pstringtext49:	
  2425  13DF                     STR_44:	
  2426  13DF  3443               	retlw	67	;'C'
  2427  13E0  344E               	retlw	78	;'N'
  2428  13E1  3446               	retlw	70	;'F'
  2429  13E2  3433               	retlw	51	;'3'
  2430  13E3  343A               	retlw	58	;':'
  2431  13E4  3420               	retlw	32	;' '
  2432  13E5  3425               	retlw	37	;'%'
  2433  13E6  3430               	retlw	48	;'0'
  2434  13E7  3432               	retlw	50	;'2'
  2435  13E8  3478               	retlw	120	;'x'
  2436  13E9  340A               	retlw	10
  2437  13EA  3400               	retlw	0
  2438                           
  2439                           	psect	stringtext50
  2440  13FD                     __pstringtext50:	
  2441  13FD                     STR_56:	
  2442  13FD  3428               	retlw	40	;'('
  2443  13FE  346E               	retlw	110	;'n'
  2444  13FF  3475               	retlw	117	;'u'
  2445  1400  346C               	retlw	108	;'l'
  2446  1401  346C               	retlw	108	;'l'
  2447  1402  3429               	retlw	41	;')'
  2448  1403  3400               	retlw	0
  2449                           
  2450                           	psect	stringtext51
  2451  1404                     __pstringtext51:	
  2452  1404                     STR_1:	
  2453  1404  3425               	retlw	37	;'%'
  2454  1405  3464               	retlw	100	;'d'
  2455  1406  342C               	retlw	44	;','
  2456  1407  3425               	retlw	37	;'%'
  2457  1408  3473               	retlw	115	;'s'
  2458  1409  340A               	retlw	10
  2459  140A  3400               	retlw	0
  2460                           
  2461                           	psect	stringtext52
  2462  1411                     __pstringtext52:	
  2463  1411                     STR_2:	
  2464  1411  3425               	retlw	37	;'%'
  2465  1412  3430               	retlw	48	;'0'
  2466  1413  3432               	retlw	50	;'2'
  2467  1414  3478               	retlw	120	;'x'
  2468  1415  343A               	retlw	58	;':'
  2469  1416  3400               	retlw	0
  2470                           
  2471                           	psect	stringtext53
  2472  1417                     __pstringtext53:	
  2473  1417                     STR_3:	
  2474  1417  3420               	retlw	32	;' '
  2475  1418  3425               	retlw	37	;'%'
  2476  1419  3430               	retlw	48	;'0'
  2477  141A  3432               	retlw	50	;'2'
  2478  141B  3478               	retlw	120	;'x'
  2479  141C  3400               	retlw	0
  2480                           
  2481                           	psect	stringtext54
  2482  141D                     __pstringtext54:	
  2483  141D                     STR_38:	
  2484  141D  342D               	retlw	45	;'-'
  2485  141E  342D               	retlw	45	;'-'
  2486  141F  342D               	retlw	45	;'-'
  2487  1420  340A               	retlw	10
  2488  1421  3400               	retlw	0
  2489                           
  2490                           	psect	stringtext55
  2491  1428                     __pstringtext55:	
  2492  1428                     STR_6:	
  2493  1428  3425               	retlw	37	;'%'
  2494  1429  3463               	retlw	99	;'c'
  2495  142A  3400               	retlw	0
  2496                           
  2497                           	psect	stringtext56
  2498  0000                     __pstringtext56:	
  2499  1420                     
  2500                           ; #config settings
  2501  0000                     
  2502                           	psect	cinit
  2503  07EE                     start_initialization:	
  2504  07EE                     __initialization:	
  2505                           
  2506                           ; Clear objects allocated to BANK0
  2507  07EE  3062               	movlw	low __pbssBANK0
  2508  07EF  0084               	movwf	4
  2509  07F0  3000               	movlw	high __pbssBANK0
  2510  07F1  0085               	movwf	5
  2511  07F2  3007               	movlw	7
  2512  07F3  318C  241D  3187   	fcall	clear_ram0
  2513                           
  2514                           ; Clear objects allocated to BANK1
  2515  07F6  30B3               	movlw	low __pbssBANK1
  2516  07F7  0084               	movwf	4
  2517  07F8  3000               	movlw	high __pbssBANK1
  2518  07F9  0085               	movwf	5
  2519  07FA  3010               	movlw	16
  2520  07FB  318C  241D         	fcall	clear_ram0
  2521  07FD                     end_of_initialization:	
  2522                           ;End of C runtime variable initialization code
  2523                           
  2524  07FD                     __end_of__initialization:	
  2525  07FD  0020               	movlb	0
  2526  07FE  3183  2BBD         	ljmp	_main	;jump to C main() function
  2527                           
  2528                           	psect	bssBANK0
  2529  0062                     __pbssBANK0:	
  2530  0062                     _mode:	
  2531  0062                     	ds	2
  2532  0064                     _sid:	
  2533  0064                     	ds	2
  2534  0066                     _output_format:	
  2535  0066                     	ds	2
  2536  0068                     _operation_mode:	
  2537  0068                     	ds	1
  2538                           
  2539                           	psect	bssBANK1
  2540  00B3                     __pbssBANK1:	
  2541  00B3                     _buf:	
  2542  00B3                     	ds	16
  2543                           
  2544                           	psect	clrtext
  2545  0C1D                     clear_ram0:	
  2546                           ;	Called with FSR0 containing the base address, and
  2547                           ;	WREG with the size to clear
  2548                           
  2549  0C1D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2550  0C1E                     clrloop0:	
  2551  0C1E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2552  0C1F  3101               	addfsr 0,1
  2553  0C20  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2554  0C21  2C1E               	goto	clrloop0	;have we reached the end yet?
  2555  0C22  3400               	retlw	0	;all done for this memory range, return
  2556                           
  2557                           	psect	cstackBANK1
  2558  00A0                     __pcstackBANK1:	
  2559  00A0                     main@sid:	
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  00A0                     	ds	1
  2563  00A1                     main@bpr:	
  2564                           
  2565                           ; 1 bytes @ 0x1
  2566  00A1                     	ds	1
  2567  00A2                     main@status:	
  2568                           
  2569                           ; 1 bytes @ 0x2
  2570  00A2                     	ds	1
  2571  00A3                     main@mask:	
  2572                           
  2573                           ; 2 bytes @ 0x3
  2574  00A3                     	ds	2
  2575  00A5                     main@echo_back:	
  2576                           
  2577                           ; 1 bytes @ 0x5
  2578  00A5                     	ds	1
  2579  00A6                     main@n:	
  2580                           
  2581                           ; 1 bytes @ 0x6
  2582  00A6                     	ds	1
  2583  00A7                     main@buf:	
  2584                           
  2585                           ; 9 bytes @ 0x7
  2586  00A7                     	ds	9
  2587  00B0                     main@c:	
  2588                           
  2589                           ; 1 bytes @ 0x10
  2590  00B0                     	ds	1
  2591  00B1                     main@cmd:	
  2592                           
  2593                           ; 1 bytes @ 0x11
  2594  00B1                     	ds	1
  2595  00B2                     main@idx:	
  2596                           
  2597                           ; 1 bytes @ 0x12
  2598  00B2                     	ds	1
  2599                           
  2600                           	psect	cstackCOMMON
  2601  0070                     __pcstackCOMMON:	
  2602  0070                     ?_isdigit:	
  2603  0070                     ?_PIN_MANAGER_Initialize:	
  2604                           ; 1 bit 
  2605                           
  2606  0070                     ??_PIN_MANAGER_Initialize:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_OSCILLATOR_Initialize:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ??_OSCILLATOR_Initialize:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_WDT_Initialize:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ??_WDT_Initialize:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_SPI_Initialize:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ??_SPI_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_EUSART_Initialize:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ??_EUSART_Initialize:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_can_status_check:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_can_set_sid:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_can_logging_mode:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_can_ope_mode:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_can_abort:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_can_baudrate:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_can_dump_registers:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ??_isdigit:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_SYSTEM_Initialize:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ??_SYSTEM_Initialize:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_EUSART_Read:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ??_EUSART_Read:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_EUSART_Write:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ??_EUSART_Write:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_putch:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_SPI_Exchange8bit:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ??_SPI_Exchange8bit:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_main:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_txf_clear:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_receive:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_read_register:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?___wmul:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?___lwdiv:	
  2700                           ; 2 bytes @ 0x0
  2701                           
  2702  0070                     EUSART_Write@txData:	
  2703                           ; 2 bytes @ 0x0
  2704                           
  2705  0070                     SPI_Exchange8bit@data:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     can_logging_mode@verbose:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     _isdigit$792:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     can_set_sid@can_node:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ___wmul@multiplier:	
  2718                           ; 2 bytes @ 0x0
  2719                           
  2720  0070                     ___lwdiv@divisor:	
  2721                           ; 2 bytes @ 0x0
  2722                           
  2723                           
  2724                           ; 2 bytes @ 0x0
  2725  0070                     	ds	1
  2726  0071                     ??_can_logging_mode:	
  2727  0071                     ??_putch:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730  0071                     ?_SPI_Exchange8bitBuffer:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0071                     putch@txData:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2737                           ; 1 bytes @ 0x1
  2738                           
  2739  0071                     isdigit@c:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0071                     	ds	1
  2745  0072                     ??_can_set_sid:	
  2746  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2747                           ; 1 bytes @ 0x2
  2748                           
  2749  0072                     can_logging_mode@debug:	
  2750                           ; 1 bytes @ 0x2
  2751                           
  2752  0072                     ___wmul@multiplicand:	
  2753                           ; 1 bytes @ 0x2
  2754                           
  2755  0072                     ___lwdiv@dividend:	
  2756                           ; 2 bytes @ 0x2
  2757                           
  2758                           
  2759                           ; 2 bytes @ 0x2
  2760  0072                     	ds	1
  2761  0073                     ??_SPI_Exchange8bitBuffer:	
  2762                           
  2763                           ; 1 bytes @ 0x3
  2764  0073                     	ds	1
  2765  0074                     ??___wmul:	
  2766  0074                     ??___lwdiv:	
  2767                           ; 1 bytes @ 0x4
  2768                           
  2769  0074                     ___wmul@product:	
  2770                           ; 1 bytes @ 0x4
  2771                           
  2772                           
  2773                           ; 2 bytes @ 0x4
  2774  0074                     	ds	1
  2775  0075                     can_set_sid@sidh:	
  2776  0075                     ___lwdiv@quotient:	
  2777                           ; 1 bytes @ 0x5
  2778                           
  2779                           
  2780                           ; 2 bytes @ 0x5
  2781  0075                     	ds	1
  2782  0076                     ?_atoi:	
  2783  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2784                           ; 2 bytes @ 0x6
  2785                           
  2786  0076                     can_set_sid@sidl:	
  2787                           ; 1 bytes @ 0x6
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x6
  2791  0076                     	ds	1
  2792  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2793  0077                     ___lwdiv@counter:	
  2794                           ; 1 bytes @ 0x7
  2795                           
  2796                           
  2797                           ; 1 bytes @ 0x7
  2798  0077                     	ds	1
  2799  0078                     ??_atoi:	
  2800  0078                     ?_SPI_exchange:	
  2801                           ; 1 bytes @ 0x8
  2802                           
  2803  0078                     ?___lwmod:	
  2804                           ; 1 bytes @ 0x8
  2805                           
  2806  0078                     SPI_exchange@len:	
  2807                           ; 2 bytes @ 0x8
  2808                           
  2809  0078                     ___lwmod@divisor:	
  2810                           ; 1 bytes @ 0x8
  2811                           
  2812                           
  2813                           ; 2 bytes @ 0x8
  2814  0078                     	ds	1
  2815  0079                     ??_SPI_exchange:	
  2816                           
  2817                           ; 1 bytes @ 0x9
  2818  0079                     	ds	1
  2819  007A                     atoi@sign:	
  2820  007A                     ___lwmod@dividend:	
  2821                           ; 1 bytes @ 0xA
  2822                           
  2823                           
  2824                           ; 2 bytes @ 0xA
  2825  007A                     	ds	1
  2826  007B                     atoi@a:	
  2827                           
  2828                           ; 2 bytes @ 0xB
  2829  007B                     	ds	1
  2830  007C                     ??___lwmod:	
  2831  007C                     SPI_exchange@bytes_written:	
  2832                           ; 1 bytes @ 0xC
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0xC
  2836  007C                     	ds	1
  2837  007D                     SPI_exchange@buf:	
  2838  007D                     atoi@s:	
  2839                           ; 1 bytes @ 0xD
  2840                           
  2841  007D                     ___lwmod@counter:	
  2842                           ; 1 bytes @ 0xD
  2843                           
  2844                           
  2845                           ; 1 bytes @ 0xD
  2846  007D                     	ds	1
  2847                           
  2848                           	psect	cstackBANK0
  2849  0020                     __pcstackBANK0:	
  2850  0020                     ??_txf_clear:	
  2851  0020                     ??_read_register:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0x0
  2856  0020                     	ds	1
  2857  0021                     read_register@addr:	
  2858                           
  2859                           ; 1 bytes @ 0x1
  2860  0021                     	ds	1
  2861  0022                     ?_printf:	
  2862  0022                     txf_clear@mask:	
  2863                           ; 2 bytes @ 0x2
  2864                           
  2865  0022                     printf@f:	
  2866                           ; 1 bytes @ 0x2
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x2
  2870  0022                     	ds	1
  2871  0023                     txf_clear@bytes_written:	
  2872                           
  2873                           ; 1 bytes @ 0x3
  2874  0023                     	ds	1
  2875  0024                     txf_clear@n:	
  2876                           
  2877                           ; 1 bytes @ 0x4
  2878  0024                     	ds	6
  2879  002A                     ??_printf:	
  2880                           
  2881                           ; 1 bytes @ 0xA
  2882  002A                     	ds	4
  2883  002E                     printf@idx:	
  2884                           
  2885                           ; 1 bytes @ 0xE
  2886  002E                     	ds	1
  2887  002F                     printf@prec:	
  2888                           
  2889                           ; 1 bytes @ 0xF
  2890  002F                     	ds	1
  2891  0030                     printf@cp:	
  2892                           
  2893                           ; 2 bytes @ 0x10
  2894  0030                     	ds	2
  2895  0032                     printf@len:	
  2896                           
  2897                           ; 2 bytes @ 0x12
  2898  0032                     	ds	2
  2899  0034                     printf@ap:	
  2900                           
  2901                           ; 1 bytes @ 0x14
  2902  0034                     	ds	1
  2903  0035                     printf@val:	
  2904                           
  2905                           ; 2 bytes @ 0x15
  2906  0035                     	ds	2
  2907  0037                     printf@flag:	
  2908                           
  2909                           ; 1 bytes @ 0x17
  2910  0037                     	ds	1
  2911  0038                     printf@width:	
  2912                           
  2913                           ; 2 bytes @ 0x18
  2914  0038                     	ds	2
  2915  003A                     printf@c:	
  2916                           
  2917                           ; 1 bytes @ 0x1A
  2918  003A                     	ds	1
  2919  003B                     ??_can_ope_mode:	
  2920  003B                     ??_can_dump_registers:	
  2921                           ; 1 bytes @ 0x1B
  2922                           
  2923  003B                     ?_can_send:	
  2924                           ; 1 bytes @ 0x1B
  2925                           
  2926  003B                     ?_receive_handler:	
  2927                           ; 1 bytes @ 0x1B
  2928                           
  2929  003B                     receive_handler@sid:	
  2930                           ; 1 bytes @ 0x1B
  2931                           
  2932  003B                     can_send@dlc:	
  2933                           ; 1 bytes @ 0x1B
  2934                           
  2935                           
  2936                           ; 1 bytes @ 0x1B
  2937  003B                     	ds	1
  2938  003C                     ??_can_send:	
  2939  003C                     receive_handler@pbuf:	
  2940                           ; 1 bytes @ 0x1C
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x1C
  2944  003C                     	ds	1
  2945  003D                     receive_handler@dlc:	
  2946  003D                     can_ope_mode@bytes_written:	
  2947                           ; 1 bytes @ 0x1D
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x1D
  2951  003D                     	ds	1
  2952  003E                     ??_receive_handler:	
  2953  003E                     can_ope_mode@ope_mode:	
  2954                           ; 1 bytes @ 0x1E
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x1E
  2958  003E                     	ds	1
  2959  003F                     ?_can_init:	
  2960  003F                     ??_can_abort:	
  2961                           ; 1 bytes @ 0x1F
  2962                           
  2963  003F                     ??_can_baudrate:	
  2964                           ; 1 bytes @ 0x1F
  2965                           
  2966  003F                     ?_can_set_mask:	
  2967                           ; 1 bytes @ 0x1F
  2968                           
  2969  003F                     can_set_mask@n:	
  2970                           ; 1 bytes @ 0x1F
  2971                           
  2972  003F                     can_init@receive_handler:	
  2973                           ; 1 bytes @ 0x1F
  2974                           
  2975                           
  2976                           ; 2 bytes @ 0x1F
  2977  003F                     	ds	1
  2978  0040                     can_set_mask@mask:	
  2979  0040                     can_send@len:	
  2980                           ; 1 bytes @ 0x20
  2981                           
  2982                           
  2983                           ; 1 bytes @ 0x20
  2984  0040                     	ds	1
  2985  0041                     ??_can_init:	
  2986  0041                     ??_can_set_mask:	
  2987                           ; 1 bytes @ 0x21
  2988                           
  2989  0041                     receive_handler@i:	
  2990                           ; 1 bytes @ 0x21
  2991                           
  2992  0041                     can_send@bytes_written:	
  2993                           ; 1 bytes @ 0x21
  2994                           
  2995  0041                     can_baudrate@bpr:	
  2996                           ; 1 bytes @ 0x21
  2997                           
  2998  0041                     can_abort@bytes_written:	
  2999                           ; 1 bytes @ 0x21
  3000                           
  3001                           
  3002                           ; 1 bytes @ 0x21
  3003  0041                     	ds	1
  3004  0042                     ??_receive:	
  3005  0042                     can_send@status:	
  3006                           ; 1 bytes @ 0x22
  3007                           
  3008  0042                     can_baudrate@mask:	
  3009                           ; 1 bytes @ 0x22
  3010                           
  3011                           
  3012                           ; 1 bytes @ 0x22
  3013  0042                     	ds	1
  3014  0043                     can_send@data_buf:	
  3015  0043                     can_baudrate@bytes_written:	
  3016                           ; 1 bytes @ 0x23
  3017                           
  3018                           
  3019                           ; 1 bytes @ 0x23
  3020  0043                     	ds	1
  3021  0044                     can_send@i:	
  3022                           
  3023                           ; 1 bytes @ 0x24
  3024  0044                     	ds	1
  3025  0045                     can_send@n:	
  3026                           
  3027                           ; 1 bytes @ 0x25
  3028  0045                     	ds	2
  3029  0047                     receive@bytes_read:	
  3030  0047                     _can_set_mask$498:	
  3031                           ; 1 bytes @ 0x27
  3032                           
  3033                           
  3034                           ; 2 bytes @ 0x27
  3035  0047                     	ds	1
  3036  0048                     receive@rx_buf:	
  3037                           
  3038                           ; 15 bytes @ 0x28
  3039  0048                     	ds	1
  3040  0049                     can_set_mask@cmd:	
  3041                           
  3042                           ; 1 bytes @ 0x29
  3043  0049                     	ds	1
  3044  004A                     can_set_mask@mask_sidh:	
  3045                           
  3046                           ; 1 bytes @ 0x2A
  3047  004A                     	ds	1
  3048  004B                     can_set_mask@mask_sidl:	
  3049                           
  3050                           ; 1 bytes @ 0x2B
  3051  004B                     	ds	12
  3052  0057                     receive@pbuf:	
  3053                           
  3054                           ; 1 bytes @ 0x37
  3055  0057                     	ds	1
  3056  0058                     receive@id:	
  3057                           
  3058                           ; 2 bytes @ 0x38
  3059  0058                     	ds	2
  3060  005A                     receive@dlc:	
  3061                           
  3062                           ; 1 bytes @ 0x3A
  3063  005A                     	ds	1
  3064  005B                     receive@n:	
  3065                           
  3066                           ; 1 bytes @ 0x3B
  3067  005B                     	ds	1
  3068  005C                     ??_can_status_check:	
  3069                           
  3070                           ; 1 bytes @ 0x3C
  3071  005C                     	ds	2
  3072  005E                     can_status_check@bytes_written:	
  3073                           
  3074                           ; 1 bytes @ 0x3E
  3075  005E                     	ds	1
  3076  005F                     can_status_check@status:	
  3077                           
  3078                           ; 1 bytes @ 0x3F
  3079  005F                     	ds	1
  3080  0060                     ??_main:	
  3081                           
  3082                           ; 1 bytes @ 0x40
  3083  0060                     	ds	2
  3084                           
  3085                           	psect	maintext
  3086  03BD                     __pmaintext:	
  3087 ;;
  3088 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3089 ;;
  3090 ;; *************** function _main *****************
  3091 ;; Defined at:
  3092 ;;		line 45 in file "main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  status          1    2[BANK1 ] unsigned char 
  3097 ;;  buf             9    7[BANK1 ] unsigned char [9]
  3098 ;;  mask            2    3[BANK1 ] unsigned int 
  3099 ;;  idx             1   18[BANK1 ] unsigned char 
  3100 ;;  cmd             1   17[BANK1 ] unsigned char 
  3101 ;;  c               1   16[BANK1 ] unsigned char 
  3102 ;;  n               1    6[BANK1 ] unsigned char 
  3103 ;;  echo_back       1    5[BANK1 ] unsigned char 
  3104 ;;  bpr             1    1[BANK1 ] unsigned char 
  3105 ;;  sid             1    0[BANK1 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : B1F/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3118 ;;      Totals:         0       2      19       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;Total ram usage:       21 bytes
  3120 ;; Hardware stack levels required when called:    6
  3121 ;; This function calls:
  3122 ;;		_EUSART_Read
  3123 ;;		_SYSTEM_Initialize
  3124 ;;		_atoi
  3125 ;;		_can_abort
  3126 ;;		_can_baudrate
  3127 ;;		_can_dump_registers
  3128 ;;		_can_init
  3129 ;;		_can_logging_mode
  3130 ;;		_can_ope_mode
  3131 ;;		_can_send
  3132 ;;		_can_set_mask
  3133 ;;		_can_set_sid
  3134 ;;		_can_status_check
  3135 ;;		_printf
  3136 ;; This function is called by:
  3137 ;;		Startup code after reset
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _main
  3143  03BD                     _main:	
  3144                           
  3145                           ;main.c: 47: LATCbits.LATC3 = 1;
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3149  03BD  0022               	movlb	2	; select bank2
  3150  03BE  158E               	bsf	14,3	;volatile
  3151                           
  3152                           ;main.c: 49: uint8_t buf[9];
  3153                           ;main.c: 50: bool echo_back = 0;
  3154  03BF  0021               	movlb	1	; select bank1
  3155  03C0  01A5               	clrf	main@echo_back^(0+128)
  3156                           
  3157                           ;main.c: 51: uint8_t c, idx;
  3158                           ;main.c: 53: uint8_t cmd, sid, n, bpr;
  3159                           ;main.c: 54: uint16_t mask;
  3160                           ;main.c: 56: SYSTEM_Initialize();
  3161  03C1  318C  2470  3183   	fcall	_SYSTEM_Initialize
  3162                           
  3163                           ;main.c: 61: output_format.with_sid = 0;
  3164  03C4  0020               	movlb	0	; select bank0
  3165  03C5  01E6               	clrf	_output_format
  3166                           
  3167                           ;main.c: 62: output_format.hex_output = 0;
  3168  03C6  01E7               	clrf	_output_format+1
  3169                           
  3170                           ;main.c: 63: can_init(receive_handler);
  3171  03C7  30C0               	movlw	low _receive_handler
  3172  03C8  00BF               	movwf	can_init@receive_handler
  3173  03C9  300E               	movlw	high _receive_handler
  3174  03CA  00C0               	movwf	can_init@receive_handler+1
  3175  03CB  318F  2782  3183   	fcall	_can_init
  3176  03CE                     L1:	
  3177                           
  3178                           ;main.c: 65: idx = 0;
  3179  03CE  0021               	movlb	1	; select bank1
  3180  03CF  01B2               	clrf	main@idx^(0+128)
  3181  03D0                     l2529:	
  3182                           ;main.c: 67: while (1)
  3183                           
  3184                           
  3185                           ;main.c: 68: {
  3186                           ;main.c: 69: bool status = can_status_check();
  3187  03D0  318E  2613  3183   	fcall	_can_status_check
  3188  03D3  0020               	movlb	0	; select bank0
  3189  03D4  00E0               	movwf	??_main
  3190  03D5  0860               	movf	??_main,w
  3191  03D6  0021               	movlb	1	; select bank1
  3192  03D7  00A2               	movwf	main@status^(0+128)
  3193                           
  3194                           ;main.c: 70: if (status) {
  3195  03D8  0822               	movf	main@status^(0+128),w
  3196  03D9  1903               	btfsc	3,2
  3197  03DA  2BDE               	goto	l202
  3198                           
  3199                           ;main.c: 71: LATCbits.LATC3 = 0;
  3200  03DB  0022               	movlb	2	; select bank2
  3201  03DC  118E               	bcf	14,3	;volatile
  3202                           
  3203                           ;main.c: 72: } else {
  3204  03DD  2BE0               	goto	l203
  3205  03DE                     l202:	
  3206                           
  3207                           ;main.c: 73: LATCbits.LATC3 = 1;
  3208  03DE  0022               	movlb	2	; select bank2
  3209  03DF  158E               	bsf	14,3	;volatile
  3210  03E0                     l203:	
  3211                           
  3212                           ;main.c: 74: }
  3213                           ;main.c: 75: if ((PIR1bits.RCIF)) {
  3214  03E0  0020               	movlb	0	; select bank0
  3215  03E1  1E91               	btfss	17,5	;volatile
  3216  03E2  2BD0               	goto	l2529
  3217                           
  3218                           ;main.c: 76: c = EUSART_Read();
  3219  03E3  318C  2442  3183   	fcall	_EUSART_Read
  3220  03E6  0020               	movlb	0	; select bank0
  3221  03E7  00E0               	movwf	??_main
  3222  03E8  0860               	movf	??_main,w
  3223  03E9  0021               	movlb	1	; select bank1
  3224  03EA  00B0               	movwf	main@c^(0+128)
  3225                           
  3226                           ;main.c: 77: if (echo_back) printf("%c", c);
  3227  03EB  0825               	movf	main@echo_back^(0+128),w
  3228  03EC  1903               	btfsc	3,2
  3229  03ED  2BFF               	goto	l2541
  3230  03EE  3028               	movlw	low (STR_6| (0+32768))
  3231  03EF  0020               	movlb	0	; select bank0
  3232  03F0  00A2               	movwf	printf@f
  3233  03F1  3094               	movlw	high (STR_6| (0+32768))
  3234  03F2  00A3               	movwf	printf@f+1
  3235  03F3  0021               	movlb	1	; select bank1
  3236  03F4  0830               	movf	main@c^(0+128),w
  3237  03F5  0020               	movlb	0	; select bank0
  3238  03F6  00E0               	movwf	??_main
  3239  03F7  01E1               	clrf	??_main+1
  3240  03F8  0860               	movf	??_main,w
  3241  03F9  00A4               	movwf	?_printf+2
  3242  03FA  0861               	movf	??_main+1,w
  3243  03FB  00A5               	movwf	?_printf+3
  3244  03FC  3185  25B3  3183   	fcall	_printf
  3245  03FF                     l2541:	
  3246                           
  3247                           ;main.c: 79: buf[idx] = c;
  3248  03FF  0021               	movlb	1	; select bank1
  3249  0400  0830               	movf	main@c^(0+128),w
  3250  0401  0020               	movlb	0	; select bank0
  3251  0402  00E0               	movwf	??_main
  3252  0403  0021               	movlb	1	; select bank1
  3253  0404  0832               	movf	main@idx^(0+128),w
  3254  0405  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3255  0406  0086               	movwf	6
  3256  0407  0187               	clrf	7
  3257  0408  0020               	movlb	0	; select bank0
  3258  0409  0860               	movf	??_main,w
  3259  040A  0081               	movwf	1
  3260                           
  3261                           ;main.c: 80: if (c == '\n') {
  3262  040B  300A               	movlw	10
  3263  040C  0021               	movlb	1	; select bank1
  3264  040D  0630               	xorwf	main@c^(0+128),w
  3265  040E  1D03               	btfss	3,2
  3266  040F  2D90               	goto	l2635
  3267                           
  3268                           ;main.c: 81: buf[idx] = '\0';
  3269  0410  0832               	movf	main@idx^(0+128),w
  3270  0411  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3271  0412  0086               	movwf	6
  3272  0413  0187               	clrf	7
  3273  0414  0181               	clrf	1
  3274                           
  3275                           ;main.c: 82: if (buf[0] == '@') {
  3276  0415  3040               	movlw	64
  3277  0416  0627               	xorwf	main@buf^(0+128),w
  3278  0417  1D03               	btfss	3,2
  3279  0418  2D86               	goto	l2631
  3280                           
  3281                           ;main.c: 83: cmd = buf[1];
  3282  0419  0828               	movf	(main@buf^(0+128)+1),w
  3283  041A  0020               	movlb	0	; select bank0
  3284  041B  00E0               	movwf	??_main
  3285  041C  0860               	movf	??_main,w
  3286  041D  0021               	movlb	1	; select bank1
  3287  041E  00B1               	movwf	main@cmd^(0+128)
  3288                           
  3289                           ;main.c: 84: switch(cmd) {
  3290  041F  2D64               	goto	l2629
  3291  0420                     l2551:	
  3292                           ;main.c: 85: case 'i':
  3293                           
  3294                           
  3295                           ;main.c: 86: sid = (uint8_t)atoi(&buf[2]);
  3296  0420  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3297  0421  318F  271B  3183   	fcall	_atoi
  3298  0424  0876               	movf	?_atoi,w
  3299  0425  0020               	movlb	0	; select bank0
  3300  0426  00E0               	movwf	??_main
  3301  0427  0860               	movf	??_main,w
  3302  0428  0021               	movlb	1	; select bank1
  3303  0429  00A0               	movwf	main@sid^(0+128)
  3304                           
  3305                           ;main.c: 87: can_set_sid(sid);
  3306  042A  0820               	movf	main@sid^(0+128),w
  3307  042B  0020               	movlb	0	; select bank0
  3308  042C  00E0               	movwf	??_main
  3309  042D  01E1               	clrf	??_main+1
  3310  042E  0860               	movf	??_main,w
  3311  042F  00F0               	movwf	can_set_sid@can_node
  3312  0430  0861               	movf	??_main+1,w
  3313  0431  00F1               	movwf	can_set_sid@can_node+1
  3314  0432  318C  24DF  3183   	fcall	_can_set_sid
  3315                           
  3316                           ;main.c: 88: break;
  3317  0435  2BCE               	goto	L1
  3318  0436                     l2555:	
  3319                           ;main.c: 89: case 'v':
  3320                           
  3321                           
  3322                           ;main.c: 90: if (buf[2] == 'd') {
  3323  0436  3064               	movlw	100
  3324  0437  0021               	movlb	1	; select bank1
  3325  0438  0629               	xorwf	(main@buf^(0+128)+2),w
  3326  0439  1D03               	btfss	3,2
  3327  043A  2C3F               	goto	l2561
  3328                           
  3329                           ;main.c: 91: can_logging_mode(1, 1);
  3330  043B  01F0               	clrf	can_logging_mode@verbose
  3331  043C  0AF0               	incf	can_logging_mode@verbose,f
  3332  043D  3001               	movlw	1
  3333  043E  2C46               	goto	L2
  3334  043F                     l2561:	
  3335                           ;main.c: 93: } else if (buf[2] == 'v') {
  3336                           
  3337                           ;main.c: 92: echo_back = 1;
  3338                           
  3339  043F  3076               	movlw	118
  3340  0440  0629               	xorwf	(main@buf^(0+128)+2),w
  3341  0441  1D03               	btfss	3,2
  3342  0442  2C4D               	goto	l2567
  3343                           
  3344                           ;main.c: 94: can_logging_mode(0, 1);
  3345  0443  01F0               	clrf	can_logging_mode@verbose
  3346  0444  0AF0               	incf	can_logging_mode@verbose,f
  3347  0445  3000               	movlw	0
  3348  0446                     L2:	
  3349  0446  318C  2457  3183   	fcall	_can_logging_mode
  3350                           
  3351                           ;main.c: 95: echo_back = 1;
  3352  0449  0021               	movlb	1	; select bank1
  3353  044A  01A5               	clrf	main@echo_back^(0+128)
  3354  044B  0AA5               	incf	main@echo_back^(0+128),f
  3355                           
  3356                           ;main.c: 96: } else if (buf[2] == 'n') {
  3357  044C  2BCE               	goto	L1
  3358  044D                     l2567:	
  3359  044D  306E               	movlw	110
  3360  044E  0629               	xorwf	(main@buf^(0+128)+2),w
  3361  044F  1D03               	btfss	3,2
  3362  0450  2BCE               	goto	L1
  3363                           
  3364                           ;main.c: 97: can_logging_mode(0, 0);
  3365  0451  01F0               	clrf	can_logging_mode@verbose
  3366  0452  3000               	movlw	0
  3367  0453  318C  2457  3183   	fcall	_can_logging_mode
  3368                           
  3369                           ;main.c: 98: echo_back = 0;
  3370  0456  0021               	movlb	1	; select bank1
  3371  0457  01A5               	clrf	main@echo_back^(0+128)
  3372                           
  3373                           ;main.c: 99: }
  3374                           ;main.c: 100: break;
  3375  0458  2BCE               	goto	L1
  3376  0459                     l2573:	
  3377                           ;main.c: 101: case 'o':
  3378                           
  3379                           
  3380                           ;main.c: 102: if (buf[2] == 'l') {
  3381  0459  306C               	movlw	108
  3382  045A  0629               	xorwf	(main@buf^(0+128)+2),w
  3383  045B  1D03               	btfss	3,2
  3384  045C  2C5F               	goto	l2577
  3385                           
  3386                           ;main.c: 103: can_ope_mode(0b01000000u);
  3387  045D  3040               	movlw	64
  3388  045E  2C65               	goto	L3
  3389  045F                     l2577:	
  3390                           ;main.c: 104: } else if (buf[2] == 'n') {
  3391                           
  3392  045F  306E               	movlw	110
  3393  0460  0021               	movlb	1	; select bank1
  3394  0461  0629               	xorwf	(main@buf^(0+128)+2),w
  3395  0462  1D03               	btfss	3,2
  3396  0463  2C68               	goto	l2581
  3397                           
  3398                           ;main.c: 105: can_ope_mode(0b00000000u);
  3399  0464  3000               	movlw	0
  3400  0465                     L3:	
  3401  0465  318E  2669  3183   	fcall	_can_ope_mode
  3402  0468                     l2581:	
  3403                           
  3404                           ;main.c: 106: }
  3405                           ;main.c: 107: if (buf[3] == '\0') {
  3406  0468  0021               	movlb	1	; select bank1
  3407  0469  082A               	movf	(main@buf^(0+128)+3),w
  3408  046A  1D03               	btfss	3,2
  3409  046B  2C6F               	goto	l2585
  3410                           
  3411                           ;main.c: 108: output_format.with_sid = 0;
  3412  046C  0020               	movlb	0	; select bank0
  3413  046D  01E6               	clrf	_output_format
  3414  046E  2C7A               	goto	l2591
  3415  046F                     l2585:	
  3416                           ;main.c: 110: } else if (buf[3] == 's' && buf[4] == '\0') {
  3417                           
  3418                           ;main.c: 109: output_format.hex_output = 0;
  3419                           
  3420  046F  3073               	movlw	115
  3421  0470  0021               	movlb	1	; select bank1
  3422  0471  062A               	xorwf	(main@buf^(0+128)+3),w
  3423  0472  1D03               	btfss	3,2
  3424  0473  2C7C               	goto	l2593
  3425  0474  082B               	movf	(main@buf^(0+128)+4),w
  3426  0475  1D03               	btfss	3,2
  3427  0476  2C7C               	goto	l2593
  3428                           
  3429                           ;main.c: 111: output_format.with_sid = 1;
  3430  0477  0020               	movlb	0	; select bank0
  3431  0478  01E6               	clrf	_output_format
  3432  0479  0AE6               	incf	_output_format,f
  3433  047A                     l2591:	
  3434                           
  3435                           ;main.c: 112: output_format.hex_output = 0;
  3436  047A  01E7               	clrf	_output_format+1
  3437                           
  3438                           ;main.c: 113: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3439  047B  2BCE               	goto	L1
  3440  047C                     l2593:	
  3441  047C  3068               	movlw	104
  3442  047D  0021               	movlb	1	; select bank1
  3443  047E  062A               	xorwf	(main@buf^(0+128)+3),w
  3444  047F  1D03               	btfss	3,2
  3445  0480  2BCE               	goto	L1
  3446  0481  082B               	movf	(main@buf^(0+128)+4),w
  3447  0482  1D03               	btfss	3,2
  3448  0483  2BCE               	goto	L1
  3449                           
  3450                           ;main.c: 114: output_format.with_sid = 0;
  3451  0484  0020               	movlb	0	; select bank0
  3452  0485  01E6               	clrf	_output_format
  3453                           
  3454                           ;main.c: 115: output_format.hex_output = 1;
  3455  0486  01E7               	clrf	_output_format+1
  3456  0487  0AE7               	incf	_output_format+1,f
  3457                           
  3458                           ;main.c: 116: }
  3459                           ;main.c: 117: break;
  3460  0488  2BCE               	goto	L1
  3461  0489                     l2601:	
  3462                           ;main.c: 118: case 'b':
  3463                           
  3464                           
  3465                           ;main.c: 119: can_abort();
  3466  0489  318D  2503  3183   	fcall	_can_abort
  3467                           
  3468                           ;main.c: 120: bpr = (uint8_t)atoi(&buf[2]);
  3469  048C  30A9               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3470  048D  318F  271B  3183   	fcall	_atoi
  3471  0490  0876               	movf	?_atoi,w
  3472  0491  0020               	movlb	0	; select bank0
  3473  0492  00E0               	movwf	??_main
  3474  0493  0860               	movf	??_main,w
  3475  0494  0021               	movlb	1	; select bank1
  3476  0495  00A1               	movwf	main@bpr^(0+128)
  3477                           
  3478                           ;main.c: 121: can_baudrate(bpr);
  3479  0496  0821               	movf	main@bpr^(0+128),w
  3480  0497  318D  255E  3183   	fcall	_can_baudrate
  3481                           
  3482                           ;main.c: 122: break;
  3483  049A  2BCE               	goto	L1
  3484  049B                     l2607:	
  3485                           ;main.c: 123: case 'm':
  3486                           
  3487                           
  3488                           ;main.c: 124: case 'f':
  3489                           ;main.c: 125: n = buf[2] - 0x30u;
  3490  049B  0021               	movlb	1	; select bank1
  3491  049C  0829               	movf	(main@buf^(0+128)+2),w
  3492  049D  3ED0               	addlw	208
  3493  049E  0020               	movlb	0	; select bank0
  3494  049F  00E0               	movwf	??_main
  3495  04A0  0860               	movf	??_main,w
  3496  04A1  0021               	movlb	1	; select bank1
  3497  04A2  00A6               	movwf	main@n^(0+128)
  3498                           
  3499                           ;main.c: 126: mask = (uint8_t)atoi(&buf[3]);
  3500  04A3  30AA               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3501  04A4  318F  271B  3183   	fcall	_atoi
  3502  04A7  0876               	movf	?_atoi,w
  3503  04A8  0020               	movlb	0	; select bank0
  3504  04A9  00E0               	movwf	??_main
  3505  04AA  01E1               	clrf	??_main+1
  3506  04AB  0860               	movf	??_main,w
  3507  04AC  0021               	movlb	1	; select bank1
  3508  04AD  00A3               	movwf	main@mask^(0+128)
  3509  04AE  0020               	movlb	0	; select bank0
  3510  04AF  0861               	movf	??_main+1,w
  3511  04B0  0021               	movlb	1	; select bank1
  3512  04B1  00A4               	movwf	(main@mask+1)^(0+128)
  3513                           
  3514                           ;main.c: 127: if (cmd == 'm') {
  3515  04B2  306D               	movlw	109
  3516  04B3  0631               	xorwf	main@cmd^(0+128),w
  3517  04B4  1D03               	btfss	3,2
  3518  04B5  2CC6               	goto	l2615
  3519                           
  3520                           ;main.c: 128: can_set_mask(0u, n, mask);
  3521  04B6  0826               	movf	main@n^(0+128),w
  3522  04B7  0020               	movlb	0	; select bank0
  3523  04B8  00E0               	movwf	??_main
  3524  04B9  0860               	movf	??_main,w
  3525  04BA  00BF               	movwf	can_set_mask@n
  3526  04BB  0021               	movlb	1	; select bank1
  3527  04BC  0823               	movf	main@mask^(0+128),w
  3528  04BD  0020               	movlb	0	; select bank0
  3529  04BE  00E1               	movwf	??_main+1
  3530  04BF  0861               	movf	??_main+1,w
  3531  04C0  00C0               	movwf	can_set_mask@mask
  3532  04C1  3000               	movlw	0
  3533  04C2  3180  2030  3183   	fcall	_can_set_mask
  3534                           
  3535                           ;main.c: 129: } else if (cmd == 'f') {
  3536  04C5  2BCE               	goto	L1
  3537  04C6                     l2615:	
  3538  04C6  3066               	movlw	102
  3539  04C7  0021               	movlb	1	; select bank1
  3540  04C8  0631               	xorwf	main@cmd^(0+128),w
  3541  04C9  1D03               	btfss	3,2
  3542  04CA  2BCE               	goto	L1
  3543                           
  3544                           ;main.c: 130: can_set_mask(1u, n, mask);
  3545  04CB  0826               	movf	main@n^(0+128),w
  3546  04CC  0020               	movlb	0	; select bank0
  3547  04CD  00E0               	movwf	??_main
  3548  04CE  0860               	movf	??_main,w
  3549  04CF  00BF               	movwf	can_set_mask@n
  3550  04D0  0021               	movlb	1	; select bank1
  3551  04D1  0823               	movf	main@mask^(0+128),w
  3552  04D2  0020               	movlb	0	; select bank0
  3553  04D3  00E1               	movwf	??_main+1
  3554  04D4  0861               	movf	??_main+1,w
  3555  04D5  00C0               	movwf	can_set_mask@mask
  3556  04D6  3001               	movlw	1
  3557  04D7  3180  2030  3183   	fcall	_can_set_mask
  3558                           
  3559                           ;main.c: 131: }
  3560                           ;main.c: 132: break;
  3561  04DA  2BCE               	goto	L1
  3562  04DB                     l2619:	
  3563                           ;main.c: 133: case 'a':
  3564                           
  3565                           
  3566                           ;main.c: 134: can_abort();
  3567  04DB  318D  2503  3183   	fcall	_can_abort
  3568                           
  3569                           ;main.c: 135: break;
  3570  04DE  2BCE               	goto	L1
  3571  04DF                     l2621:	
  3572                           ;main.c: 136: case 'd':
  3573                           
  3574                           
  3575                           ;main.c: 137: can_dump_registers();
  3576  04DF  3181  2164  3183   	fcall	_can_dump_registers
  3577                           
  3578                           ;main.c: 138: break;
  3579  04E2  2BCE               	goto	L1
  3580  04E3                     l2623:	
  3581                           ;main.c: 139: case '@':
  3582                           
  3583                           
  3584                           ;main.c: 140: can_send(&buf[1], idx - 1u);
  3585  04E3  0021               	movlb	1	; select bank1
  3586  04E4  0832               	movf	main@idx^(0+128),w
  3587  04E5  3EFF               	addlw	255
  3588  04E6  0020               	movlb	0	; select bank0
  3589  04E7  00E0               	movwf	??_main
  3590  04E8  0860               	movf	??_main,w
  3591  04E9  00BB               	movwf	can_send@dlc
  3592  04EA  30A8               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3593  04EB  3182  2270  3183   	fcall	_can_send
  3594                           
  3595                           ;main.c: 141: break;
  3596  04EE  2BCE               	goto	L1
  3597  04EF                     l2625:	
  3598                           ;main.c: 142: case 'h':
  3599                           
  3600                           
  3601                           ;main.c: 143: printf("/// UART2CAN HELP (version %s) ///\n", "0.1  March 17, 2018");
  3602  04EF  30B9               	movlw	low (STR_7| (0+32768))
  3603  04F0  0020               	movlb	0	; select bank0
  3604  04F1  00A2               	movwf	printf@f
  3605  04F2  3091               	movlw	high (STR_7| (0+32768))
  3606  04F3  00A3               	movwf	printf@f+1
  3607  04F4  307B               	movlw	low (STR_8| (0+32768))
  3608  04F5  00A4               	movwf	low ((?_printf| 0+2))
  3609  04F6  3092               	movlw	high (STR_8| (0+32768))
  3610  04F7  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3611  04F8  3185  25B3  3183   	fcall	_printf
  3612                           
  3613                           ;main.c: 144: printf("[Set standard identifier] @i<standard identifier>\n");
  3614  04FB  30E4               	movlw	low (STR_9| (0+32768))
  3615  04FC  0020               	movlb	0	; select bank0
  3616  04FD  00A2               	movwf	printf@f
  3617  04FE  3090               	movlw	high (STR_9| (0+32768))
  3618  04FF  00A3               	movwf	printf@f+1
  3619  0500  3185  25B3  3183   	fcall	_printf
  3620                           
  3621                           ;main.c: 145: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3622  0503  3000               	movlw	low (STR_10| (0+32768))
  3623  0504  0020               	movlb	0	; select bank0
  3624  0505  00A2               	movwf	printf@f
  3625  0506  3090               	movlw	high (STR_10| (0+32768))
  3626  0507  00A3               	movwf	printf@f+1
  3627  0508  3185  25B3  3183   	fcall	_printf
  3628                           
  3629                           ;main.c: 146: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3630  050B  30AE               	movlw	low (STR_11| (0+32768))
  3631  050C  0020               	movlb	0	; select bank0
  3632  050D  00A2               	movwf	printf@f
  3633  050E  3090               	movlw	high (STR_11| (0+32768))
  3634  050F  00A3               	movwf	printf@f+1
  3635  0510  3185  25B3  3183   	fcall	_printf
  3636                           
  3637                           ;main.c: 147: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3638  0513  303B               	movlw	low (STR_12| (0+32768))
  3639  0514  0020               	movlb	0	; select bank0
  3640  0515  00A2               	movwf	printf@f
  3641  0516  3090               	movlw	high (STR_12| (0+32768))
  3642  0517  00A3               	movwf	printf@f+1
  3643  0518  3185  25B3  3183   	fcall	_printf
  3644                           
  3645                           ;main.c: 148: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3646  051B  306D               	movlw	low (STR_13| (0+32768))
  3647  051C  0020               	movlb	0	; select bank0
  3648  051D  00A2               	movwf	printf@f
  3649  051E  3091               	movlw	high (STR_13| (0+32768))
  3650  051F  00A3               	movwf	printf@f+1
  3651  0520  3185  25B3  3183   	fcall	_printf
  3652                           
  3653                           ;main.c: 149: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3654  0523  3043               	movlw	low (STR_14| (0+32768))
  3655  0524  0020               	movlb	0	; select bank0
  3656  0525  00A2               	movwf	printf@f
  3657  0526  3091               	movlw	high (STR_14| (0+32768))
  3658  0527  00A3               	movwf	printf@f+1
  3659  0528  3185  25B3  3183   	fcall	_printf
  3660                           
  3661                           ;main.c: 150: printf("[Set baud rate] @b<bpr>\n");
  3662  052B  30F7               	movlw	low (STR_15| (0+32768))
  3663  052C  0020               	movlb	0	; select bank0
  3664  052D  00A2               	movwf	printf@f
  3665  052E  3091               	movlw	high (STR_15| (0+32768))
  3666  052F  00A3               	movwf	printf@f+1
  3667  0530  3185  25B3  3183   	fcall	_printf
  3668                           
  3669                           ;main.c: 151: printf("[Abort all pending transmissions] @a\n");
  3670  0533  3093               	movlw	low (STR_16| (0+32768))
  3671  0534  0020               	movlb	0	; select bank0
  3672  0535  00A2               	movwf	printf@f
  3673  0536  3091               	movlw	high (STR_16| (0+32768))
  3674  0537  00A3               	movwf	printf@f+1
  3675  0538  3185  25B3  3183   	fcall	_printf
  3676                           
  3677                           ;main.c: 152: printf("[Dump registers] @d\n");
  3678  053B  3052               	movlw	low (STR_17| (0+32768))
  3679  053C  0020               	movlb	0	; select bank0
  3680  053D  00A2               	movwf	printf@f
  3681  053E  3092               	movlw	high (STR_17| (0+32768))
  3682  053F  00A3               	movwf	printf@f+1
  3683  0540  3185  25B3  3183   	fcall	_printf
  3684                           
  3685                           ;main.c: 153: printf("[Send message] <message>\n");
  3686  0543  30DD               	movlw	low (STR_18| (0+32768))
  3687  0544  0020               	movlb	0	; select bank0
  3688  0545  00A2               	movwf	printf@f
  3689  0546  3091               	movlw	high (STR_18| (0+32768))
  3690  0547  00A3               	movwf	printf@f+1
  3691  0548  3185  25B3  3183   	fcall	_printf
  3692                           
  3693                           ;main.c: 154: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3694  054B  3075               	movlw	low (STR_19| (0+32768))
  3695  054C  0020               	movlb	0	; select bank0
  3696  054D  00A2               	movwf	printf@f
  3697  054E  3090               	movlw	high (STR_19| (0+32768))
  3698  054F  00A3               	movwf	printf@f+1
  3699  0550  3185  25B3  3183   	fcall	_printf
  3700                           
  3701                           ;main.c: 155: printf("[Receive message] <message> will be output\n");
  3702  0553  3017               	movlw	low (STR_20| (0+32768))
  3703  0554  0020               	movlb	0	; select bank0
  3704  0555  00A2               	movwf	printf@f
  3705  0556  3091               	movlw	high (STR_20| (0+32768))
  3706  0557  00A3               	movwf	printf@f+1
  3707  0558  3185  25B3  3183   	fcall	_printf
  3708                           
  3709                           ;main.c: 156: printf("[Show this help]: @h\n");
  3710  055B  3027               	movlw	low (STR_21| (0+32768))
  3711  055C  0020               	movlb	0	; select bank0
  3712  055D  00A2               	movwf	printf@f
  3713  055E  3092               	movlw	high (STR_21| (0+32768))
  3714  055F  00A3               	movwf	printf@f+1
  3715  0560  3185  25B3  3183   	fcall	_printf
  3716                           
  3717                           ;main.c: 158: }
  3718                           
  3719                           ;main.c: 157: break;
  3720  0563  2BCE               	goto	L1
  3721  0564                     l2629:	
  3722  0564  0021               	movlb	1	; select bank1
  3723  0565  0831               	movf	main@cmd^(0+128),w
  3724                           
  3725                           ; Switch size 1, requested type "space"
  3726                           ; Number of cases is 10, Range of values is 64 to 118
  3727                           ; switch strategies available:
  3728                           ; Name         Instructions Cycles
  3729                           ; simple_byte           31    16 (average)
  3730                           ; direct_byte          119     9 (fixed)
  3731                           ; jumptable            263     9 (fixed)
  3732                           ;	Chosen strategy is simple_byte
  3733  0566  3A40               	xorlw	64	; case 64
  3734  0567  1903               	skipnz
  3735  0568  2CE3               	goto	l2623
  3736  0569  3A21               	xorlw	33	; case 97
  3737  056A  1903               	skipnz
  3738  056B  2CDB               	goto	l2619
  3739  056C  3A03               	xorlw	3	; case 98
  3740  056D  1903               	skipnz
  3741  056E  2C89               	goto	l2601
  3742  056F  3A06               	xorlw	6	; case 100
  3743  0570  1903               	skipnz
  3744  0571  2CDF               	goto	l2621
  3745  0572  3A02               	xorlw	2	; case 102
  3746  0573  1903               	skipnz
  3747  0574  2C9B               	goto	l2607
  3748  0575  3A0E               	xorlw	14	; case 104
  3749  0576  1903               	skipnz
  3750  0577  2CEF               	goto	l2625
  3751  0578  3A01               	xorlw	1	; case 105
  3752  0579  1903               	skipnz
  3753  057A  2C20               	goto	l2551
  3754  057B  3A04               	xorlw	4	; case 109
  3755  057C  1903               	skipnz
  3756  057D  2C9B               	goto	l2607
  3757  057E  3A02               	xorlw	2	; case 111
  3758  057F  1903               	skipnz
  3759  0580  2C59               	goto	l2573
  3760  0581  3A19               	xorlw	25	; case 118
  3761  0582  1903               	skipnz
  3762  0583  2C36               	goto	l2555
  3763  0584  2D8F               	goto	l2633
  3764                           
  3765                           ;main.c: 159: } else {
  3766  0585  2BCE               	goto	L1
  3767  0586                     l2631:	
  3768                           
  3769                           ;main.c: 160: can_send(buf, idx);
  3770  0586  0832               	movf	main@idx^(0+128),w
  3771  0587  0020               	movlb	0	; select bank0
  3772  0588  00E0               	movwf	??_main
  3773  0589  0860               	movf	??_main,w
  3774  058A  00BB               	movwf	can_send@dlc
  3775  058B  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3776  058C  3182  2270  3183   	fcall	_can_send
  3777  058F                     l2633:	
  3778  058F  2BCE               	goto	L1
  3779  0590                     l2635:	
  3780                           ;main.c: 164: } else if (++idx > max_idx) {
  3781                           
  3782                           ;main.c: 161: }
  3783                           ;main.c: 162: idx = 0;
  3784                           
  3785  0590  3001               	movlw	1
  3786  0591  0020               	movlb	0	; select bank0
  3787  0592  00E0               	movwf	??_main
  3788  0593  0860               	movf	??_main,w
  3789  0594  0021               	movlb	1	; select bank1
  3790  0595  07B2               	addwf	main@idx^(0+128),f
  3791  0596  302F               	movlw	low (_max_idx| (0+32768))
  3792  0597  0084               	movwf	4
  3793  0598  3094               	movlw	high (_max_idx| (0+32768))
  3794  0599  0085               	movwf	5
  3795  059A  0800               	movf	0,w	;code access
  3796  059B  0020               	movlb	0	; select bank0
  3797  059C  00E1               	movwf	??_main+1
  3798  059D  0021               	movlb	1	; select bank1
  3799  059E  0832               	movf	main@idx^(0+128),w
  3800  059F  0020               	movlb	0	; select bank0
  3801  05A0  0261               	subwf	??_main+1,w
  3802  05A1  1803               	skipnc
  3803  05A2  2BD0               	goto	l2529
  3804                           
  3805                           ;main.c: 165: buf[idx] = '\0';
  3806  05A3  0021               	movlb	1	; select bank1
  3807  05A4  0832               	movf	main@idx^(0+128),w
  3808  05A5  3EA7               	addlw	(low (main@buf| 0))& (0+255)
  3809  05A6  0086               	movwf	6
  3810  05A7  0187               	clrf	7
  3811  05A8  0181               	clrf	1
  3812                           
  3813                           ;main.c: 166: can_send(buf, idx);
  3814  05A9  0832               	movf	main@idx^(0+128),w
  3815  05AA  0020               	movlb	0	; select bank0
  3816  05AB  00E0               	movwf	??_main
  3817  05AC  0860               	movf	??_main,w
  3818  05AD  00BB               	movwf	can_send@dlc
  3819  05AE  30A7               	movlw	(low (main@buf| 0))& (0+255)
  3820  05AF  3182  2270  3183   	fcall	_can_send
  3821  05B2  2BCE               	goto	L1
  3822  05B3                     __end_of_main:	
  3823                           ;main.c: 167: idx = 0;
  3824                           
  3825                           
  3826                           	psect	text1
  3827  0E13                     __ptext1:	
  3828 ;; *************** function _can_status_check *****************
  3829 ;; Defined at:
  3830 ;;		line 253 in file "mcp2515.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  status          1   63[BANK0 ] unsigned char 
  3835 ;;  bytes_writte    1   62[BANK0 ] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      unsigned char 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;Total ram usage:        4 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    5
  3852 ;; This function calls:
  3853 ;;		_SPI_exchange
  3854 ;;		_printf
  3855 ;;		_receive
  3856 ;;		_txf_clear
  3857 ;; This function is called by:
  3858 ;;		_main
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _can_status_check
  3864  0E13                     _can_status_check:	
  3865                           
  3866                           ;mcp2515.c: 255: buf[0] = 0b10100000u;
  3867                           
  3868                           ;incstack = 0
  3869                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3870  0E13  30A0               	movlw	160
  3871  0E14  0020               	movlb	0	; select bank0
  3872  0E15  00DC               	movwf	??_can_status_check
  3873  0E16  085C               	movf	??_can_status_check,w
  3874  0E17  0021               	movlb	1	; select bank1
  3875  0E18  00B3               	movwf	_buf^(0+128)
  3876                           
  3877                           ;mcp2515.c: 256: buf[1] = 0x00;
  3878  0E19  01B4               	clrf	(_buf^(0+128)+1)
  3879                           
  3880                           ;mcp2515.c: 257: uint8_t bytes_written = SPI_exchange(buf, 2);
  3881  0E1A  3002               	movlw	2
  3882  0E1B  0020               	movlb	0	; select bank0
  3883  0E1C  00DC               	movwf	??_can_status_check
  3884  0E1D  085C               	movf	??_can_status_check,w
  3885  0E1E  00F8               	movwf	SPI_exchange@len
  3886  0E1F  30B3               	movlw	(low (_buf| 0))& (0+255)
  3887  0E20  318C  247F  318E   	fcall	_SPI_exchange
  3888  0E23  0020               	movlb	0	; select bank0
  3889  0E24  00DD               	movwf	??_can_status_check+1
  3890  0E25  085D               	movf	??_can_status_check+1,w
  3891  0E26  00DE               	movwf	can_status_check@bytes_written
  3892                           
  3893                           ;mcp2515.c: 258: uint8_t status = buf[1];
  3894  0E27  0021               	movlb	1	; select bank1
  3895  0E28  0834               	movf	(_buf^(0+128)+1),w
  3896  0E29  0020               	movlb	0	; select bank0
  3897  0E2A  00DC               	movwf	??_can_status_check
  3898  0E2B  085C               	movf	??_can_status_check,w
  3899  0E2C  00DF               	movwf	can_status_check@status
  3900                           
  3901                           ;mcp2515.c: 259: if (status == 0x00) {
  3902  0E2D  085F               	movf	can_status_check@status,w
  3903  0E2E  1D03               	btfss	3,2
  3904  0E2F  2E32               	goto	l334
  3905                           
  3906                           ;mcp2515.c: 260: return 1;
  3907  0E30  3001               	movlw	1
  3908  0E31  0008               	return
  3909  0E32                     l334:	
  3910                           ;mcp2515.c: 261: } else if ((status & 0b00000010u) > 0) {
  3911                           
  3912  0E32  1CDF               	btfss	can_status_check@status,1
  3913  0E33  2E43               	goto	l337
  3914                           
  3915                           ;mcp2515.c: 262: if (mode.debug) printf("RX1IF is on\n");
  3916  0E34  0862               	movf	_mode,w
  3917  0E35  1903               	btfsc	3,2
  3918  0E36  2E3E               	goto	l338
  3919  0E37  30BA               	movlw	low (STR_36| (0+32768))
  3920  0E38  00A2               	movwf	printf@f
  3921  0E39  3093               	movlw	high (STR_36| (0+32768))
  3922  0E3A  00A3               	movwf	printf@f+1
  3923  0E3B  3185  25B3  318E   	fcall	_printf
  3924  0E3E                     l338:	
  3925                           
  3926                           ;mcp2515.c: 263: receive(1);
  3927  0E3E  3001               	movlw	1
  3928  0E3F  3180  20B0  318E   	fcall	_receive
  3929                           
  3930                           ;mcp2515.c: 264: } else if ((status & 0b00000001u) > 0) {
  3931  0E42  2E62               	goto	l2291
  3932  0E43                     l337:	
  3933  0E43  1C5F               	btfss	can_status_check@status,0
  3934  0E44  2E54               	goto	l340
  3935                           
  3936                           ;mcp2515.c: 265: if (mode.debug) printf("RX0IF is on\n");
  3937  0E45  0862               	movf	_mode,w
  3938  0E46  1903               	btfsc	3,2
  3939  0E47  2E4F               	goto	l341
  3940  0E48  30AD               	movlw	low (STR_37| (0+32768))
  3941  0E49  00A2               	movwf	printf@f
  3942  0E4A  3093               	movlw	high (STR_37| (0+32768))
  3943  0E4B  00A3               	movwf	printf@f+1
  3944  0E4C  3185  25B3  318E   	fcall	_printf
  3945  0E4F                     l341:	
  3946                           
  3947                           ;mcp2515.c: 266: receive(0);
  3948  0E4F  3000               	movlw	0
  3949  0E50  3180  20B0  318E   	fcall	_receive
  3950                           
  3951                           ;mcp2515.c: 267: } else if ((status & 0b00001000u) > 0) {
  3952  0E53  2E62               	goto	l2291
  3953  0E54                     l340:	
  3954  0E54  1DDF               	btfss	can_status_check@status,3
  3955  0E55  2E58               	goto	l343
  3956                           
  3957                           ;mcp2515.c: 268: txf_clear(0);
  3958  0E56  3000               	movlw	0
  3959  0E57  2E5F               	goto	L4
  3960  0E58                     l343:	
  3961                           ;mcp2515.c: 269: } else if ((status & 0b00100000u) > 0) {
  3962                           
  3963  0E58  1EDF               	btfss	can_status_check@status,5
  3964  0E59  2E5C               	goto	l345
  3965                           
  3966                           ;mcp2515.c: 270: txf_clear(1);
  3967  0E5A  3001               	movlw	1
  3968  0E5B  2E5F               	goto	L4
  3969  0E5C                     l345:	
  3970                           ;mcp2515.c: 271: } else if ((status & 0b10000000u) > 0) {
  3971                           
  3972  0E5C  1FDF               	btfss	can_status_check@status,7
  3973  0E5D  2E62               	goto	l2291
  3974                           
  3975                           ;mcp2515.c: 272: txf_clear(2);
  3976  0E5E  3002               	movlw	2
  3977  0E5F                     L4:	
  3978  0E5F  318D  2530  318E   	fcall	_txf_clear
  3979  0E62                     l2291:	
  3980                           
  3981                           ;mcp2515.c: 273: }
  3982                           ;mcp2515.c: 274: if ((status & 0b00010000u) > 0) {
  3983  0E62  0020               	movlb	0	; select bank0
  3984  0E63  1E5F               	btfss	can_status_check@status,4
  3985  0E64  2E67               	goto	l2299
  3986                           
  3987                           ;mcp2515.c: 275: return 0;
  3988  0E65  3000               	movlw	0
  3989                           
  3990                           ;mcp2515.c: 276: } else {
  3991  0E66  0008               	return
  3992  0E67                     l2299:	
  3993                           
  3994                           ;mcp2515.c: 277: return 1;
  3995  0E67  3001               	movlw	1
  3996  0E68  0008               	return
  3997  0E69                     __end_of_can_status_check:	
  3998                           
  3999                           	psect	text2
  4000  0D30                     __ptext2:	
  4001 ;; *************** function _txf_clear *****************
  4002 ;; Defined at:
  4003 ;;		line 133 in file "mcp2515.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  n               1    wreg     unsigned char 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  n               1    4[BANK0 ] unsigned char 
  4008 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4009 ;;  mask            1    2[BANK0 ] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;Total ram usage:        5 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    3
  4026 ;; This function calls:
  4027 ;;		_SPI_exchange
  4028 ;; This function is called by:
  4029 ;;		_can_status_check
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           
  4034                           ;psect for function _txf_clear
  4035  0D30                     _txf_clear:	
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4039                           ;txf_clear@n stored from wreg
  4040  0D30  0020               	movlb	0	; select bank0
  4041  0D31  00A4               	movwf	txf_clear@n
  4042                           
  4043                           ;mcp2515.c: 134: uint8_t mask = 0b00000001u << (n + 2);
  4044  0D32  3001               	movlw	1
  4045  0D33  00A0               	movwf	??_txf_clear
  4046  0D34  0824               	movf	txf_clear@n,w
  4047  0D35  3E02               	addlw	2
  4048  0D36  0A89               	incf	9,f
  4049  0D37  2D39               	goto	u1824
  4050  0D38                     u1825:	
  4051  0D38  35A0               	lslf	??_txf_clear,f
  4052  0D39                     u1824:	
  4053  0D39  0B89               	decfsz	9,f
  4054  0D3A  2D38               	goto	u1825
  4055  0D3B  0820               	movf	??_txf_clear,w
  4056  0D3C  00A1               	movwf	??_txf_clear+1
  4057  0D3D  0821               	movf	??_txf_clear+1,w
  4058  0D3E  00A2               	movwf	txf_clear@mask
  4059                           
  4060                           ;mcp2515.c: 135: buf[0] =0b00000101u;
  4061  0D3F  3005               	movlw	5
  4062  0D40  00A0               	movwf	??_txf_clear
  4063  0D41  0820               	movf	??_txf_clear,w
  4064  0D42  0021               	movlb	1	; select bank1
  4065  0D43  00B3               	movwf	_buf^(0+128)
  4066                           
  4067                           ;mcp2515.c: 136: buf[1] = 0x2c;
  4068  0D44  302C               	movlw	44
  4069  0D45  0020               	movlb	0	; select bank0
  4070  0D46  00A0               	movwf	??_txf_clear
  4071  0D47  0820               	movf	??_txf_clear,w
  4072  0D48  0021               	movlb	1	; select bank1
  4073  0D49  00B4               	movwf	(_buf^(0+128)+1)
  4074                           
  4075                           ;mcp2515.c: 137: buf[2] = mask;
  4076  0D4A  0020               	movlb	0	; select bank0
  4077  0D4B  0822               	movf	txf_clear@mask,w
  4078  0D4C  00A0               	movwf	??_txf_clear
  4079  0D4D  0820               	movf	??_txf_clear,w
  4080  0D4E  0021               	movlb	1	; select bank1
  4081  0D4F  00B5               	movwf	(_buf^(0+128)+2)
  4082                           
  4083                           ;mcp2515.c: 138: buf[3] = 0x00;
  4084  0D50  01B6               	clrf	(_buf^(0+128)+3)
  4085                           
  4086                           ;mcp2515.c: 139: uint8_t bytes_written = SPI_exchange(buf, 4);
  4087  0D51  3004               	movlw	4
  4088  0D52  0020               	movlb	0	; select bank0
  4089  0D53  00A0               	movwf	??_txf_clear
  4090  0D54  0820               	movf	??_txf_clear,w
  4091  0D55  00F8               	movwf	SPI_exchange@len
  4092  0D56  30B3               	movlw	(low (_buf| 0))& (0+255)
  4093  0D57  318C  247F         	fcall	_SPI_exchange
  4094  0D59  0020               	movlb	0	; select bank0
  4095  0D5A  00A1               	movwf	??_txf_clear+1
  4096  0D5B  0821               	movf	??_txf_clear+1,w
  4097  0D5C  00A3               	movwf	txf_clear@bytes_written
  4098                           
  4099                           ;mcp2515.c: 143: return 0;
  4100                           ;	Return value of _txf_clear is never used
  4101                           
  4102                           ;mcp2515.c: 142: } else {
  4103                           
  4104                           ;mcp2515.c: 141: return 1;
  4105                           ;	Return value of _txf_clear is never used
  4106  0D5D  0008               	return
  4107  0D5E                     __end_of_txf_clear:	
  4108                           
  4109                           	psect	text3
  4110  00B0                     __ptext3:	
  4111 ;; *************** function _receive *****************
  4112 ;; Defined at:
  4113 ;;		line 150 in file "mcp2515.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  n               1    wreg     unsigned char 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  n               1   59[BANK0 ] unsigned char 
  4118 ;;  rx_buf         15   40[BANK0 ] unsigned char [15]
  4119 ;;  id              2   56[BANK0 ] unsigned int 
  4120 ;;  dlc             1   58[BANK0 ] unsigned char 
  4121 ;;  pbuf            1   55[BANK0 ] PTR unsigned char 
  4122 ;;		 -> receive@rx_buf(15), 
  4123 ;;  bytes_read      1   39[BANK0 ] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      void 
  4126 ;; Registers used:
  4127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4135 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;Total ram usage:       26 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    4
  4140 ;; This function calls:
  4141 ;;		Absolute function
  4142 ;;		_SPI_exchange
  4143 ;;		_printf
  4144 ;;		_receive_handler
  4145 ;; This function is called by:
  4146 ;;		_can_status_check
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           
  4151                           ;psect for function _receive
  4152  00B0                     _receive:	
  4153                           
  4154                           ;incstack = 0
  4155                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4156                           ;receive@n stored from wreg
  4157  00B0  0020               	movlb	0	; select bank0
  4158  00B1  00DB               	movwf	receive@n
  4159                           
  4160                           ;mcp2515.c: 154: uint8_t rx_buf[15];
  4161                           ;mcp2515.c: 157: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  4162  00B2  085B               	movf	receive@n,w
  4163  00B3  3E2B               	addlw	low (_nm| (0+32768))
  4164  00B4  0084               	movwf	4
  4165  00B5  3094               	movlw	high (_nm| (0+32768))
  4166  00B6  1803               	skipnc
  4167  00B7  3E01               	addlw	1
  4168  00B8  0085               	movwf	5
  4169  00B9  0800               	movf	0,w	;code access
  4170  00BA  0709               	addwf	9,w
  4171  00BB  3E90               	addlw	144
  4172  00BC  00C2               	movwf	??_receive
  4173  00BD  0842               	movf	??_receive,w
  4174  00BE  00C8               	movwf	receive@rx_buf
  4175                           
  4176                           ;mcp2515.c: 158: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4177  00BF  300E               	movlw	14
  4178  00C0  00C2               	movwf	??_receive
  4179  00C1  0842               	movf	??_receive,w
  4180  00C2  00F8               	movwf	SPI_exchange@len
  4181  00C3  3048               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4182  00C4  318C  247F  3180   	fcall	_SPI_exchange
  4183  00C7  0020               	movlb	0	; select bank0
  4184  00C8  00C3               	movwf	??_receive+1
  4185  00C9  0843               	movf	??_receive+1,w
  4186  00CA  00C7               	movwf	receive@bytes_read
  4187                           
  4188                           ;mcp2515.c: 159: uint8_t dlc = rx_buf[5];
  4189  00CB  084D               	movf	receive@rx_buf+5,w
  4190  00CC  00C2               	movwf	??_receive
  4191  00CD  0842               	movf	??_receive,w
  4192  00CE  00DA               	movwf	receive@dlc
  4193                           
  4194                           ;mcp2515.c: 160: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4195  00CF  084A               	movf	receive@rx_buf+2,w
  4196  00D0  00C2               	movwf	??_receive
  4197  00D1  3005               	movlw	5
  4198  00D2                     u1835:	
  4199  00D2  36C2               	lsrf	??_receive,f
  4200  00D3  0B89               	decfsz	9,f
  4201  00D4  28D2               	goto	u1835
  4202  00D5  0842               	movf	??_receive,w
  4203  00D6  00C3               	movwf	??_receive+1
  4204  00D7  01C4               	clrf	??_receive+2
  4205  00D8  0849               	movf	receive@rx_buf+1,w
  4206  00D9  00C5               	movwf	??_receive+3
  4207  00DA  01C6               	clrf	??_receive+4
  4208  00DB  35C5               	lslf	??_receive+3,f
  4209  00DC  0DC6               	rlf	??_receive+4,f
  4210  00DD  35C5               	lslf	??_receive+3,f
  4211  00DE  0DC6               	rlf	??_receive+4,f
  4212  00DF  35C5               	lslf	??_receive+3,f
  4213  00E0  0DC6               	rlf	??_receive+4,f
  4214  00E1  0843               	movf	??_receive+1,w
  4215  00E2  0745               	addwf	??_receive+3,w
  4216  00E3  00D8               	movwf	receive@id
  4217  00E4  0844               	movf	??_receive+2,w
  4218  00E5  3D46               	addwfc	??_receive+4,w
  4219  00E6  00D9               	movwf	receive@id+1
  4220                           
  4221                           ;mcp2515.c: 161: id = id & 0b0000011111111111u;
  4222  00E7  30FF               	movlw	255
  4223  00E8  0558               	andwf	receive@id,w
  4224  00E9  00D8               	movwf	receive@id
  4225  00EA  3007               	movlw	7
  4226  00EB  0559               	andwf	receive@id+1,w
  4227  00EC  00D9               	movwf	receive@id+1
  4228                           
  4229                           ;mcp2515.c: 162: rx_buf[6u+dlc] = (uint8_t)'\0';
  4230  00ED  085A               	movf	receive@dlc,w
  4231  00EE  3E06               	addlw	6
  4232  00EF  3E48               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4233  00F0  0086               	movwf	6
  4234  00F1  0187               	clrf	7
  4235  00F2  0181               	clrf	1
  4236                           
  4237                           ;mcp2515.c: 164: if (mode.debug) {
  4238  00F3  0862               	movf	_mode,w
  4239  00F4  1903               	btfsc	3,2
  4240  00F5  294D               	goto	l2193
  4241                           
  4242                           ;mcp2515.c: 165: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4243  00F6  30B2               	movlw	low (STR_25| (0+32768))
  4244  00F7  00A2               	movwf	printf@f
  4245  00F8  3092               	movlw	high (STR_25| (0+32768))
  4246  00F9  00A3               	movwf	printf@f+1
  4247  00FA  085B               	movf	receive@n,w
  4248  00FB  00C2               	movwf	??_receive
  4249  00FC  01C3               	clrf	??_receive+1
  4250  00FD  0842               	movf	??_receive,w
  4251  00FE  00A4               	movwf	?_printf+2
  4252  00FF  0843               	movf	??_receive+1,w
  4253  0100  00A5               	movwf	?_printf+3
  4254  0101  0849               	movf	receive@rx_buf+1,w
  4255  0102  00C4               	movwf	??_receive+2
  4256  0103  01C5               	clrf	??_receive+3
  4257  0104  0844               	movf	??_receive+2,w
  4258  0105  00A6               	movwf	?_printf+4
  4259  0106  0845               	movf	??_receive+3,w
  4260  0107  00A7               	movwf	?_printf+5
  4261  0108  3185  25B3  3180   	fcall	_printf
  4262                           
  4263                           ;mcp2515.c: 166: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4264  010B  30D4               	movlw	low (STR_26| (0+32768))
  4265  010C  0020               	movlb	0	; select bank0
  4266  010D  00A2               	movwf	printf@f
  4267  010E  3092               	movlw	high (STR_26| (0+32768))
  4268  010F  00A3               	movwf	printf@f+1
  4269  0110  085B               	movf	receive@n,w
  4270  0111  00C2               	movwf	??_receive
  4271  0112  01C3               	clrf	??_receive+1
  4272  0113  0842               	movf	??_receive,w
  4273  0114  00A4               	movwf	?_printf+2
  4274  0115  0843               	movf	??_receive+1,w
  4275  0116  00A5               	movwf	?_printf+3
  4276  0117  084A               	movf	receive@rx_buf+2,w
  4277  0118  00C4               	movwf	??_receive+2
  4278  0119  01C5               	clrf	??_receive+3
  4279  011A  0844               	movf	??_receive+2,w
  4280  011B  00A6               	movwf	?_printf+4
  4281  011C  0845               	movf	??_receive+3,w
  4282  011D  00A7               	movwf	?_printf+5
  4283  011E  3185  25B3  3180   	fcall	_printf
  4284                           
  4285                           ;mcp2515.c: 167: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4286  0121  30F6               	movlw	low (STR_27| (0+32768))
  4287  0122  0020               	movlb	0	; select bank0
  4288  0123  00A2               	movwf	printf@f
  4289  0124  3092               	movlw	high (STR_27| (0+32768))
  4290  0125  00A3               	movwf	printf@f+1
  4291  0126  085B               	movf	receive@n,w
  4292  0127  00C2               	movwf	??_receive
  4293  0128  01C3               	clrf	??_receive+1
  4294  0129  0842               	movf	??_receive,w
  4295  012A  00A4               	movwf	?_printf+2
  4296  012B  0843               	movf	??_receive+1,w
  4297  012C  00A5               	movwf	?_printf+3
  4298  012D  084D               	movf	receive@rx_buf+5,w
  4299  012E  00C4               	movwf	??_receive+2
  4300  012F  01C5               	clrf	??_receive+3
  4301  0130  0844               	movf	??_receive+2,w
  4302  0131  00A6               	movwf	?_printf+4
  4303  0132  0845               	movf	??_receive+3,w
  4304  0133  00A7               	movwf	?_printf+5
  4305  0134  3185  25B3  3180   	fcall	_printf
  4306                           
  4307                           ;mcp2515.c: 168: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4308  0137  3056               	movlw	low (STR_28| (0+32768))
  4309  0138  0020               	movlb	0	; select bank0
  4310  0139  00A2               	movwf	printf@f
  4311  013A  3093               	movlw	high (STR_28| (0+32768))
  4312  013B  00A3               	movwf	printf@f+1
  4313  013C  085B               	movf	receive@n,w
  4314  013D  00C2               	movwf	??_receive
  4315  013E  01C3               	clrf	??_receive+1
  4316  013F  0842               	movf	??_receive,w
  4317  0140  00A4               	movwf	?_printf+2
  4318  0141  0843               	movf	??_receive+1,w
  4319  0142  00A5               	movwf	?_printf+3
  4320  0143  084E               	movf	receive@rx_buf+6,w
  4321  0144  00C4               	movwf	??_receive+2
  4322  0145  01C5               	clrf	??_receive+3
  4323  0146  0844               	movf	??_receive+2,w
  4324  0147  00A6               	movwf	?_printf+4
  4325  0148  0845               	movf	??_receive+3,w
  4326  0149  00A7               	movwf	?_printf+5
  4327  014A  3185  25B3  3180   	fcall	_printf
  4328  014D                     l2193:	
  4329                           
  4330                           ;mcp2515.c: 169: }
  4331                           ;mcp2515.c: 172: uint8_t *pbuf = &rx_buf[6];
  4332  014D  304E               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4333  014E  0020               	movlb	0	; select bank0
  4334  014F  00C2               	movwf	??_receive
  4335  0150  0842               	movf	??_receive,w
  4336  0151  00D7               	movwf	receive@pbuf
  4337                           
  4338                           ;mcp2515.c: 173: handler(id, pbuf, dlc);
  4339  0152  0858               	movf	receive@id,w
  4340  0153  00C2               	movwf	??_receive
  4341  0154  0842               	movf	??_receive,w
  4342  0155  00BB               	movwf	receive_handler@sid
  4343  0156  0857               	movf	receive@pbuf,w
  4344  0157  00C3               	movwf	??_receive+1
  4345  0158  0843               	movf	??_receive+1,w
  4346  0159  00BC               	movwf	receive_handler@pbuf
  4347  015A  085A               	movf	receive@dlc,w
  4348  015B  00C4               	movwf	??_receive+2
  4349  015C  0844               	movf	??_receive+2,w
  4350  015D  00BD               	movwf	receive_handler@dlc
  4351  015E  086A               	movf	_handler+1,w
  4352  015F  008A               	movwf	10
  4353  0160  0869               	movf	_handler,w
  4354  0161  000A               	callw
  4355  0162  3180               	pagesel	$
  4356  0163  0008               	return
  4357  0164                     __end_of_receive:	
  4358                           
  4359                           	psect	text4
  4360  0EC0                     __ptext4:	
  4361 ;; *************** function _receive_handler *****************
  4362 ;; Defined at:
  4363 ;;		line 30 in file "main.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  sid             1   27[BANK0 ] unsigned char 
  4366 ;;  pbuf            1   28[BANK0 ] PTR unsigned char 
  4367 ;;		 -> receive@rx_buf(15), 
  4368 ;;  dlc             1   29[BANK0 ] unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  i               1   33[BANK0 ] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        7 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		_printf
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;;		_receive
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function _receive_handler
  4397  0EC0                     _receive_handler:	
  4398                           
  4399                           ;main.c: 31: uint8_t i;
  4400                           ;main.c: 32: if (output_format.with_sid) {
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4404  0EC0  0020               	movlb	0	; select bank0
  4405  0EC1  0866               	movf	_output_format,w
  4406  0EC2  1903               	btfsc	3,2
  4407  0EC3  2ED6               	goto	l2073
  4408                           
  4409                           ;main.c: 33: printf("%d,%s\n", sid, pbuf);
  4410  0EC4  3004               	movlw	low (STR_1| (0+32768))
  4411  0EC5  00A2               	movwf	printf@f
  4412  0EC6  3094               	movlw	high (STR_1| (0+32768))
  4413  0EC7  00A3               	movwf	printf@f+1
  4414  0EC8  083B               	movf	receive_handler@sid,w
  4415  0EC9  00BE               	movwf	??_receive_handler
  4416  0ECA  01BF               	clrf	??_receive_handler+1
  4417  0ECB  083E               	movf	??_receive_handler,w
  4418  0ECC  00A4               	movwf	?_printf+2
  4419  0ECD  083F               	movf	??_receive_handler+1,w
  4420  0ECE  00A5               	movwf	?_printf+3
  4421  0ECF  083C               	movf	receive_handler@pbuf,w
  4422  0ED0  00A6               	movwf	low ((?_printf| 0+4))
  4423  0ED1  3000               	movlw	0
  4424  0ED2  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4425  0ED3  3185  25B3         	fcall	_printf
  4426                           
  4427                           ;main.c: 34: } else if (output_format.hex_output) {
  4428  0ED5  0008               	return
  4429  0ED6                     l2073:	
  4430  0ED6  0020               	movlb	0	; select bank0
  4431  0ED7  0867               	movf	_output_format+1,w
  4432  0ED8  1903               	btfsc	3,2
  4433  0ED9  2F0F               	goto	l2087
  4434                           
  4435                           ;main.c: 35: printf("%02x:", sid);
  4436  0EDA  3011               	movlw	low (STR_2| (0+32768))
  4437  0EDB  00A2               	movwf	printf@f
  4438  0EDC  3094               	movlw	high (STR_2| (0+32768))
  4439  0EDD  00A3               	movwf	printf@f+1
  4440  0EDE  083B               	movf	receive_handler@sid,w
  4441  0EDF  00BE               	movwf	??_receive_handler
  4442  0EE0  01BF               	clrf	??_receive_handler+1
  4443  0EE1  083E               	movf	??_receive_handler,w
  4444  0EE2  00A4               	movwf	?_printf+2
  4445  0EE3  083F               	movf	??_receive_handler+1,w
  4446  0EE4  00A5               	movwf	?_printf+3
  4447  0EE5  3185  25B3  318E   	fcall	_printf
  4448                           
  4449                           ;main.c: 36: for(i=0; i<dlc; i++) {
  4450  0EE8  0020               	movlb	0	; select bank0
  4451  0EE9  01C1               	clrf	receive_handler@i
  4452  0EEA                     l2083:	
  4453  0EEA  083D               	movf	receive_handler@dlc,w
  4454  0EEB  0241               	subwf	receive_handler@i,w
  4455  0EEC  1803               	btfsc	3,0
  4456  0EED  2F08               	goto	l2085
  4457                           
  4458                           ;main.c: 37: printf(" %02x", pbuf[i]);
  4459  0EEE  3017               	movlw	low (STR_3| (0+32768))
  4460  0EEF  00A2               	movwf	printf@f
  4461  0EF0  3094               	movlw	high (STR_3| (0+32768))
  4462  0EF1  00A3               	movwf	printf@f+1
  4463  0EF2  0841               	movf	receive_handler@i,w
  4464  0EF3  073C               	addwf	receive_handler@pbuf,w
  4465  0EF4  00BE               	movwf	??_receive_handler
  4466  0EF5  083E               	movf	??_receive_handler,w
  4467  0EF6  0086               	movwf	6
  4468  0EF7  0187               	clrf	7
  4469  0EF8  0801               	movf	1,w
  4470  0EF9  00BF               	movwf	??_receive_handler+1
  4471  0EFA  01C0               	clrf	??_receive_handler+2
  4472  0EFB  083F               	movf	??_receive_handler+1,w
  4473  0EFC  00A4               	movwf	?_printf+2
  4474  0EFD  0840               	movf	??_receive_handler+2,w
  4475  0EFE  00A5               	movwf	?_printf+3
  4476  0EFF  3185  25B3  318E   	fcall	_printf
  4477  0F02  3001               	movlw	1
  4478  0F03  0020               	movlb	0	; select bank0
  4479  0F04  00BE               	movwf	??_receive_handler
  4480  0F05  083E               	movf	??_receive_handler,w
  4481  0F06  07C1               	addwf	receive_handler@i,f
  4482  0F07  2EEA               	goto	l2083
  4483  0F08                     l2085:	
  4484                           
  4485                           ;main.c: 38: }
  4486                           ;main.c: 39: printf("\n");
  4487  0F08  3020               	movlw	low ((STR_38+3)| (0+32768))
  4488  0F09  00A2               	movwf	printf@f
  4489  0F0A  3094               	movlw	high ((STR_38+3)| (0+32768))
  4490  0F0B  00A3               	movwf	printf@f+1
  4491  0F0C  3185  25B3         	fcall	_printf
  4492                           
  4493                           ;main.c: 40: } else {
  4494  0F0E  0008               	return
  4495  0F0F                     l2087:	
  4496                           
  4497                           ;main.c: 41: printf("%s\n", pbuf);
  4498  0F0F  309D               	movlw	low ((STR_35+14)| (0+32768))
  4499  0F10  0020               	movlb	0	; select bank0
  4500  0F11  00A2               	movwf	printf@f
  4501  0F12  3092               	movlw	high ((STR_35+14)| (0+32768))
  4502  0F13  00A3               	movwf	printf@f+1
  4503  0F14  083C               	movf	receive_handler@pbuf,w
  4504  0F15  00A4               	movwf	low ((?_printf| 0+2))
  4505  0F16  3000               	movlw	0
  4506  0F17  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4507  0F18  3185  25B3         	fcall	_printf
  4508  0F1A  0008               	return
  4509  0F1B                     __end_of_receive_handler:	
  4510                           
  4511                           	psect	text5
  4512  0030                     __ptext5:	
  4513 ;; *************** function _can_set_mask *****************
  4514 ;; Defined at:
  4515 ;;		line 109 in file "mcp2515.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  cmd             1    wreg     unsigned char 
  4518 ;;  n               1   31[BANK0 ] unsigned char 
  4519 ;;  mask            1   32[BANK0 ] unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  cmd             1   41[BANK0 ] unsigned char 
  4522 ;;  mask_sidl       1   43[BANK0 ] unsigned char 
  4523 ;;  mask_sidh       1   42[BANK0 ] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      void 
  4526 ;; Registers used:
  4527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;Total ram usage:       13 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    4
  4540 ;; This function calls:
  4541 ;;		_SPI_exchange
  4542 ;;		_can_ope_mode
  4543 ;;		_printf
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _can_set_mask
  4551  0030                     _can_set_mask:	
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4555                           ;can_set_mask@cmd stored from wreg
  4556  0030  0020               	movlb	0	; select bank0
  4557  0031  00C9               	movwf	can_set_mask@cmd
  4558                           
  4559                           ;mcp2515.c: 110: can_ope_mode(0b10000000u);
  4560  0032  3080               	movlw	128
  4561  0033  318E  2669  3180   	fcall	_can_ope_mode
  4562                           
  4563                           ;mcp2515.c: 111: uint8_t mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  4564  0036  0020               	movlb	0	; select bank0
  4565  0037  0840               	movf	can_set_mask@mask,w
  4566  0038  00C1               	movwf	??_can_set_mask
  4567  0039  3003               	movlw	3
  4568  003A                     u2025:	
  4569  003A  36C1               	lsrf	??_can_set_mask,f
  4570  003B  0B89               	decfsz	9,f
  4571  003C  283A               	goto	u2025
  4572  003D  0841               	movf	??_can_set_mask,w
  4573  003E  00C2               	movwf	??_can_set_mask+1
  4574  003F  0842               	movf	??_can_set_mask+1,w
  4575  0040  00CA               	movwf	can_set_mask@mask_sidh
  4576                           
  4577                           ;mcp2515.c: 112: uint8_t mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  4578  0041  0840               	movf	can_set_mask@mask,w
  4579  0042  3907               	andlw	7
  4580  0043  00C1               	movwf	??_can_set_mask
  4581  0044  3004               	movlw	4
  4582  0045                     u2035:	
  4583  0045  35C1               	lslf	??_can_set_mask,f
  4584  0046  3EFF               	addlw	-1
  4585  0047  1D03               	skipz
  4586  0048  2845               	goto	u2035
  4587  0049  3541               	lslf	??_can_set_mask,w
  4588  004A  00C2               	movwf	??_can_set_mask+1
  4589  004B  0842               	movf	??_can_set_mask+1,w
  4590  004C  00CB               	movwf	can_set_mask@mask_sidl
  4591                           
  4592                           ;mcp2515.c: 113: if (mode.debug) {
  4593  004D  0862               	movf	_mode,w
  4594  004E  1903               	btfsc	3,2
  4595  004F  2874               	goto	l2395
  4596                           
  4597                           ;mcp2515.c: 114: if (cmd == 0u) {
  4598  0050  0849               	movf	can_set_mask@cmd,w
  4599  0051  1D03               	btfss	3,2
  4600  0052  2857               	goto	l2393
  4601                           
  4602                           ;mcp2515.c: 115: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4603  0053  303D               	movlw	low (STR_23| (0+32768))
  4604  0054  00A2               	movwf	printf@f
  4605  0055  3092               	movlw	high (STR_23| (0+32768))
  4606  0056  285B               	goto	L6
  4607  0057                     l2393:	
  4608                           ;mcp2515.c: 116: } else {
  4609                           
  4610                           
  4611                           ;mcp2515.c: 117: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  4612  0057  3010               	movlw	low (STR_24| (0+32768))
  4613  0058  0020               	movlb	0	; select bank0
  4614  0059  00A2               	movwf	printf@f
  4615  005A  3092               	movlw	high (STR_24| (0+32768))
  4616  005B                     L6:	
  4617  005B  00A3               	movwf	printf@f+1
  4618  005C  083F               	movf	can_set_mask@n,w
  4619  005D  00C1               	movwf	??_can_set_mask
  4620  005E  01C2               	clrf	??_can_set_mask+1
  4621  005F  0841               	movf	??_can_set_mask,w
  4622  0060  00A4               	movwf	?_printf+2
  4623  0061  0842               	movf	??_can_set_mask+1,w
  4624  0062  00A5               	movwf	?_printf+3
  4625  0063  084A               	movf	can_set_mask@mask_sidh,w
  4626  0064  00C3               	movwf	??_can_set_mask+2
  4627  0065  01C4               	clrf	??_can_set_mask+3
  4628  0066  0843               	movf	??_can_set_mask+2,w
  4629  0067  00A6               	movwf	?_printf+4
  4630  0068  0844               	movf	??_can_set_mask+3,w
  4631  0069  00A7               	movwf	?_printf+5
  4632  006A  084B               	movf	can_set_mask@mask_sidl,w
  4633  006B  00C5               	movwf	??_can_set_mask+4
  4634  006C  01C6               	clrf	??_can_set_mask+5
  4635  006D  0845               	movf	??_can_set_mask+4,w
  4636  006E  00A8               	movwf	?_printf+6
  4637  006F  0846               	movf	??_can_set_mask+5,w
  4638  0070  00A9               	movwf	?_printf+7
  4639  0071  3185  25B3  3180   	fcall	_printf
  4640  0074                     l2395:	
  4641                           
  4642                           ;mcp2515.c: 118: }
  4643                           ;mcp2515.c: 119: }
  4644                           ;mcp2515.c: 120: buf[0] = 0b00000010u;
  4645  0074  3002               	movlw	2
  4646  0075  0020               	movlb	0	; select bank0
  4647  0076  00C1               	movwf	??_can_set_mask
  4648  0077  0841               	movf	??_can_set_mask,w
  4649  0078  0021               	movlb	1	; select bank1
  4650  0079  00B3               	movwf	_buf^(0+128)
  4651                           
  4652                           ;mcp2515.c: 121: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  4653  007A  0020               	movlb	0	; select bank0
  4654  007B  0849               	movf	can_set_mask@cmd,w
  4655  007C  1903               	btfsc	3,2
  4656  007D  2883               	goto	l2401
  4657  007E  083F               	movf	can_set_mask@n,w
  4658  007F  3E0B               	addlw	low (_rxfnsidh| (0+32768))
  4659  0080  0084               	movwf	4
  4660  0081  3094               	movlw	high (_rxfnsidh| (0+32768))
  4661  0082  2887               	goto	L5
  4662  0083                     l2401:	
  4663  0083  083F               	movf	can_set_mask@n,w
  4664  0084  3E2D               	addlw	low (_rxmnsidh| (0+32768))
  4665  0085  0084               	movwf	4
  4666  0086  3094               	movlw	high (_rxmnsidh| (0+32768))
  4667  0087                     L5:	
  4668  0087  1803               	skipnc
  4669  0088  3E01               	addlw	1
  4670  0089  0085               	movwf	5
  4671  008A  0800               	movf	0,w	;code access
  4672  008B  00C1               	movwf	??_can_set_mask
  4673  008C  01C2               	clrf	??_can_set_mask+1
  4674  008D  0841               	movf	??_can_set_mask,w
  4675  008E  00C7               	movwf	_can_set_mask$498
  4676  008F  0842               	movf	??_can_set_mask+1,w
  4677  0090  00C8               	movwf	_can_set_mask$498+1
  4678  0091  0847               	movf	_can_set_mask$498,w
  4679  0092  00C1               	movwf	??_can_set_mask
  4680  0093  0841               	movf	??_can_set_mask,w
  4681  0094  0021               	movlb	1	; select bank1
  4682  0095  00B4               	movwf	(_buf^(0+128)+1)
  4683                           
  4684                           ;mcp2515.c: 122: buf[2] = mask_sidh;
  4685  0096  0020               	movlb	0	; select bank0
  4686  0097  084A               	movf	can_set_mask@mask_sidh,w
  4687  0098  00C1               	movwf	??_can_set_mask
  4688  0099  0841               	movf	??_can_set_mask,w
  4689  009A  0021               	movlb	1	; select bank1
  4690  009B  00B5               	movwf	(_buf^(0+128)+2)
  4691                           
  4692                           ;mcp2515.c: 123: buf[3] = mask_sidl;
  4693  009C  0020               	movlb	0	; select bank0
  4694  009D  084B               	movf	can_set_mask@mask_sidl,w
  4695  009E  00C1               	movwf	??_can_set_mask
  4696  009F  0841               	movf	??_can_set_mask,w
  4697  00A0  0021               	movlb	1	; select bank1
  4698  00A1  00B6               	movwf	(_buf^(0+128)+3)
  4699                           
  4700                           ;mcp2515.c: 125: SPI_exchange(buf, 4);
  4701  00A2  3004               	movlw	4
  4702  00A3  0020               	movlb	0	; select bank0
  4703  00A4  00C1               	movwf	??_can_set_mask
  4704  00A5  0841               	movf	??_can_set_mask,w
  4705  00A6  00F8               	movwf	SPI_exchange@len
  4706  00A7  30B3               	movlw	(low (_buf| 0))& (0+255)
  4707  00A8  318C  247F  3180   	fcall	_SPI_exchange
  4708                           
  4709                           ;mcp2515.c: 127: can_ope_mode(operation_mode);
  4710  00AB  0020               	movlb	0	; select bank0
  4711  00AC  0868               	movf	_operation_mode,w
  4712  00AD  318E  2669         	fcall	_can_ope_mode
  4713  00AF  0008               	return
  4714  00B0                     __end_of_can_set_mask:	
  4715                           
  4716                           	psect	text6
  4717  0270                     __ptext6:	
  4718 ;; *************** function _can_send *****************
  4719 ;; Defined at:
  4720 ;;		line 179 in file "mcp2515.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  data_buf        1    wreg     PTR unsigned char 
  4723 ;;		 -> main@buf(9), 
  4724 ;;  dlc             1   27[BANK0 ] unsigned char 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  data_buf        1   35[BANK0 ] PTR unsigned char 
  4727 ;;		 -> main@buf(9), 
  4728 ;;  n               1   37[BANK0 ] unsigned char 
  4729 ;;  i               1   36[BANK0 ] unsigned char 
  4730 ;;  status          1   34[BANK0 ] unsigned char 
  4731 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  4732 ;;  len             1   32[BANK0 ] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      unsigned char 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4742 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;Total ram usage:       11 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    3
  4749 ;; This function calls:
  4750 ;;		_SPI_exchange
  4751 ;;		_printf
  4752 ;; This function is called by:
  4753 ;;		_main
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _can_send
  4759  0270                     _can_send:	
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4763                           ;can_send@data_buf stored from wreg
  4764  0270  0020               	movlb	0	; select bank0
  4765  0271  00C3               	movwf	can_send@data_buf
  4766                           
  4767                           ;mcp2515.c: 180: uint8_t i;
  4768                           ;mcp2515.c: 181: uint8_t n = 0;
  4769  0272  01C5               	clrf	can_send@n
  4770                           
  4771                           ;mcp2515.c: 183: buf[0] = 0b10100000u;
  4772  0273  30A0               	movlw	160
  4773  0274  00BC               	movwf	??_can_send
  4774  0275  083C               	movf	??_can_send,w
  4775  0276  0021               	movlb	1	; select bank1
  4776  0277  00B3               	movwf	_buf^(0+128)
  4777                           
  4778                           ;mcp2515.c: 184: buf[1] = 0x00;
  4779  0278  01B4               	clrf	(_buf^(0+128)+1)
  4780                           
  4781                           ;mcp2515.c: 185: uint8_t bytes_written = SPI_exchange(buf, 2);
  4782  0279  3002               	movlw	2
  4783  027A  0020               	movlb	0	; select bank0
  4784  027B  00BC               	movwf	??_can_send
  4785  027C  083C               	movf	??_can_send,w
  4786  027D  00F8               	movwf	SPI_exchange@len
  4787  027E  30B3               	movlw	(low (_buf| 0))& (0+255)
  4788  027F  318C  247F  3182   	fcall	_SPI_exchange
  4789  0282  0020               	movlb	0	; select bank0
  4790  0283  00BD               	movwf	??_can_send+1
  4791  0284  083D               	movf	??_can_send+1,w
  4792  0285  00C1               	movwf	can_send@bytes_written
  4793                           
  4794                           ;mcp2515.c: 186: uint8_t status = buf[1];
  4795  0286  0021               	movlb	1	; select bank1
  4796  0287  0834               	movf	(_buf^(0+128)+1),w
  4797  0288  0020               	movlb	0	; select bank0
  4798  0289  00BC               	movwf	??_can_send
  4799  028A  083C               	movf	??_can_send,w
  4800  028B  00C2               	movwf	can_send@status
  4801                           
  4802                           ;mcp2515.c: 187: if ((status & 0b01000000u) == 0) {
  4803  028C  1B42               	btfsc	can_send@status,6
  4804  028D  2A9E               	goto	l314
  4805                           
  4806                           ;mcp2515.c: 188: if (mode.debug) printf("TXB2 is idle\n");
  4807  028E  0862               	movf	_mode,w
  4808  028F  1903               	btfsc	3,2
  4809  0290  2A98               	goto	l2431
  4810  0291  309F               	movlw	low (STR_29| (0+32768))
  4811  0292  00A2               	movwf	printf@f
  4812  0293  3093               	movlw	high (STR_29| (0+32768))
  4813  0294  00A3               	movwf	printf@f+1
  4814  0295  3185  25B3  3182   	fcall	_printf
  4815  0298                     l2431:	
  4816                           
  4817                           ;mcp2515.c: 189: n = 2;
  4818  0298  3002               	movlw	2
  4819  0299  0020               	movlb	0	; select bank0
  4820  029A  00BC               	movwf	??_can_send
  4821  029B  083C               	movf	??_can_send,w
  4822  029C  00C5               	movwf	can_send@n
  4823                           
  4824                           ;mcp2515.c: 190: } else if ((status & 0b00010000u) == 0) {
  4825  029D  2ABC               	goto	l2445
  4826  029E                     l314:	
  4827  029E  1A42               	btfsc	can_send@status,4
  4828  029F  2AAE               	goto	l317
  4829                           
  4830                           ;mcp2515.c: 191: if (mode.debug) printf("TXB1 is idle\n");
  4831  02A0  0862               	movf	_mode,w
  4832  02A1  1903               	btfsc	3,2
  4833  02A2  2AAA               	goto	l2437
  4834  02A3  3091               	movlw	low (STR_30| (0+32768))
  4835  02A4  00A2               	movwf	printf@f
  4836  02A5  3093               	movlw	high (STR_30| (0+32768))
  4837  02A6  00A3               	movwf	printf@f+1
  4838  02A7  3185  25B3  3182   	fcall	_printf
  4839  02AA                     l2437:	
  4840                           
  4841                           ;mcp2515.c: 192: n = 1;
  4842  02AA  0020               	movlb	0	; select bank0
  4843  02AB  01C5               	clrf	can_send@n
  4844  02AC  0AC5               	incf	can_send@n,f
  4845                           
  4846                           ;mcp2515.c: 193: } else if ((status & 0b00000100u) == 0) {
  4847  02AD  2ABC               	goto	l2445
  4848  02AE                     l317:	
  4849  02AE  1942               	btfsc	can_send@status,2
  4850  02AF  2ABC               	goto	l2445
  4851                           
  4852                           ;mcp2515.c: 194: if (mode.debug) printf("TXB0 is idle\n");
  4853  02B0  0862               	movf	_mode,w
  4854  02B1  1903               	btfsc	3,2
  4855  02B2  2ABA               	goto	l2443
  4856  02B3  3083               	movlw	low (STR_31| (0+32768))
  4857  02B4  00A2               	movwf	printf@f
  4858  02B5  3093               	movlw	high (STR_31| (0+32768))
  4859  02B6  00A3               	movwf	printf@f+1
  4860  02B7  3185  25B3  3182   	fcall	_printf
  4861  02BA                     l2443:	
  4862                           
  4863                           ;mcp2515.c: 195: n = 0;
  4864  02BA  0020               	movlb	0	; select bank0
  4865  02BB  01C5               	clrf	can_send@n
  4866  02BC                     l2445:	
  4867                           
  4868                           ;mcp2515.c: 196: }
  4869                           ;mcp2515.c: 202: buf[0] = 0b01000000u + abc[n];
  4870  02BC  0845               	movf	can_send@n,w
  4871  02BD  3E25               	addlw	low (_abc| (0+32768))
  4872  02BE  0084               	movwf	4
  4873  02BF  3094               	movlw	high (_abc| (0+32768))
  4874  02C0  1803               	skipnc
  4875  02C1  3E01               	addlw	1
  4876  02C2  0085               	movwf	5
  4877  02C3  0800               	movf	0,w	;code access
  4878  02C4  3E40               	addlw	64
  4879  02C5  00BC               	movwf	??_can_send
  4880  02C6  083C               	movf	??_can_send,w
  4881  02C7  0021               	movlb	1	; select bank1
  4882  02C8  00B3               	movwf	_buf^(0+128)
  4883                           
  4884                           ;mcp2515.c: 204: buf[1] = sid.sidh;
  4885  02C9  0020               	movlb	0	; select bank0
  4886  02CA  0864               	movf	_sid,w
  4887  02CB  00BC               	movwf	??_can_send
  4888  02CC  083C               	movf	??_can_send,w
  4889  02CD  0021               	movlb	1	; select bank1
  4890  02CE  00B4               	movwf	(_buf^(0+128)+1)
  4891                           
  4892                           ;mcp2515.c: 206: buf[2] = sid.sidl;
  4893  02CF  0020               	movlb	0	; select bank0
  4894  02D0  0865               	movf	_sid+1,w
  4895  02D1  00BC               	movwf	??_can_send
  4896  02D2  083C               	movf	??_can_send,w
  4897  02D3  0021               	movlb	1	; select bank1
  4898  02D4  00B5               	movwf	(_buf^(0+128)+2)
  4899                           
  4900                           ;mcp2515.c: 208: buf[3] = 0;
  4901  02D5  01B6               	clrf	(_buf^(0+128)+3)
  4902                           
  4903                           ;mcp2515.c: 210: buf[4] = 0;
  4904  02D6  01B7               	clrf	(_buf^(0+128)+4)
  4905                           
  4906                           ;mcp2515.c: 212: buf[5] = dlc;
  4907  02D7  0020               	movlb	0	; select bank0
  4908  02D8  083B               	movf	can_send@dlc,w
  4909  02D9  00BC               	movwf	??_can_send
  4910  02DA  083C               	movf	??_can_send,w
  4911  02DB  0021               	movlb	1	; select bank1
  4912  02DC  00B8               	movwf	(_buf^(0+128)+5)
  4913                           
  4914                           ;mcp2515.c: 215: for(i=0; i<dlc; i++) {
  4915  02DD  0020               	movlb	0	; select bank0
  4916  02DE  01C4               	clrf	can_send@i
  4917  02DF                     l2467:	
  4918  02DF  083B               	movf	can_send@dlc,w
  4919  02E0  0244               	subwf	can_send@i,w
  4920  02E1  1803               	btfsc	3,0
  4921  02E2  2B0F               	goto	l2469
  4922                           
  4923                           ;mcp2515.c: 216: buf[6u+i] = data_buf[i];
  4924  02E3  0844               	movf	can_send@i,w
  4925  02E4  0743               	addwf	can_send@data_buf,w
  4926  02E5  00BC               	movwf	??_can_send
  4927  02E6  083C               	movf	??_can_send,w
  4928  02E7  0086               	movwf	6
  4929  02E8  0187               	clrf	7
  4930  02E9  0801               	movf	1,w
  4931  02EA  00BD               	movwf	??_can_send+1
  4932  02EB  0844               	movf	can_send@i,w
  4933  02EC  3E06               	addlw	6
  4934  02ED  3EB3               	addlw	(low (_buf| 0))& (0+255)
  4935  02EE  0086               	movwf	6
  4936  02EF  0187               	clrf	7
  4937  02F0  083D               	movf	??_can_send+1,w
  4938  02F1  0081               	movwf	1
  4939                           
  4940                           ;mcp2515.c: 217: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4941  02F2  0862               	movf	_mode,w
  4942  02F3  1903               	btfsc	3,2
  4943  02F4  2B09               	goto	l2465
  4944  02F5  3067               	movlw	low (STR_32| (0+32768))
  4945  02F6  00A2               	movwf	printf@f
  4946  02F7  3092               	movlw	high (STR_32| (0+32768))
  4947  02F8  00A3               	movwf	printf@f+1
  4948  02F9  0844               	movf	can_send@i,w
  4949  02FA  0743               	addwf	can_send@data_buf,w
  4950  02FB  00BC               	movwf	??_can_send
  4951  02FC  083C               	movf	??_can_send,w
  4952  02FD  0086               	movwf	6
  4953  02FE  0187               	clrf	7
  4954  02FF  0801               	movf	1,w
  4955  0300  00BD               	movwf	??_can_send+1
  4956  0301  01BE               	clrf	??_can_send+2
  4957  0302  083D               	movf	??_can_send+1,w
  4958  0303  00A4               	movwf	?_printf+2
  4959  0304  083E               	movf	??_can_send+2,w
  4960  0305  00A5               	movwf	?_printf+3
  4961  0306  3185  25B3  3182   	fcall	_printf
  4962  0309                     l2465:	
  4963  0309  3001               	movlw	1
  4964  030A  0020               	movlb	0	; select bank0
  4965  030B  00BC               	movwf	??_can_send
  4966  030C  083C               	movf	??_can_send,w
  4967  030D  07C4               	addwf	can_send@i,f
  4968  030E  2ADF               	goto	l2467
  4969  030F                     l2469:	
  4970                           
  4971                           ;mcp2515.c: 218: }
  4972                           ;mcp2515.c: 221: uint8_t len = 6u + dlc;
  4973  030F  083B               	movf	can_send@dlc,w
  4974  0310  3E06               	addlw	6
  4975  0311  00BC               	movwf	??_can_send
  4976  0312  083C               	movf	??_can_send,w
  4977  0313  00C0               	movwf	can_send@len
  4978                           
  4979                           ;mcp2515.c: 222: uint8_t bytes_written = SPI_exchange(buf, len);
  4980  0314  0840               	movf	can_send@len,w
  4981  0315  00BC               	movwf	??_can_send
  4982  0316  083C               	movf	??_can_send,w
  4983  0317  00F8               	movwf	SPI_exchange@len
  4984  0318  30B3               	movlw	(low (_buf| 0))& (0+255)
  4985  0319  318C  247F  3182   	fcall	_SPI_exchange
  4986  031C  0020               	movlb	0	; select bank0
  4987  031D  00BD               	movwf	??_can_send+1
  4988  031E  083D               	movf	??_can_send+1,w
  4989  031F  00C1               	movwf	can_send@bytes_written
  4990                           
  4991                           ;mcp2515.c: 224: buf[0] = 0b00000011u;
  4992  0320  3003               	movlw	3
  4993  0321  00BC               	movwf	??_can_send
  4994  0322  083C               	movf	??_can_send,w
  4995  0323  0021               	movlb	1	; select bank1
  4996  0324  00B3               	movwf	_buf^(0+128)
  4997                           
  4998                           ;mcp2515.c: 225: buf[1] = txbnsidh[n];
  4999  0325  0020               	movlb	0	; select bank0
  5000  0326  0845               	movf	can_send@n,w
  5001  0327  3E22               	addlw	low (_txbnsidh| (0+32768))
  5002  0328  0084               	movwf	4
  5003  0329  3094               	movlw	high (_txbnsidh| (0+32768))
  5004  032A  1803               	skipnc
  5005  032B  3E01               	addlw	1
  5006  032C  0085               	movwf	5
  5007  032D  0800               	movf	0,w	;code access
  5008  032E  00BC               	movwf	??_can_send
  5009  032F  083C               	movf	??_can_send,w
  5010  0330  0021               	movlb	1	; select bank1
  5011  0331  00B4               	movwf	(_buf^(0+128)+1)
  5012                           
  5013                           ;mcp2515.c: 226: buf[2] = 0x00;
  5014  0332  01B5               	clrf	(_buf^(0+128)+2)
  5015                           
  5016                           ;mcp2515.c: 227: SPI_exchange(buf, 3);
  5017  0333  3003               	movlw	3
  5018  0334  0020               	movlb	0	; select bank0
  5019  0335  00BC               	movwf	??_can_send
  5020  0336  083C               	movf	??_can_send,w
  5021  0337  00F8               	movwf	SPI_exchange@len
  5022  0338  30B3               	movlw	(low (_buf| 0))& (0+255)
  5023  0339  318C  247F  3182   	fcall	_SPI_exchange
  5024                           
  5025                           ;mcp2515.c: 229: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5026  033C  0020               	movlb	0	; select bank0
  5027  033D  0862               	movf	_mode,w
  5028  033E  1903               	btfsc	3,2
  5029  033F  2B57               	goto	l2485
  5030  0340  30C3               	movlw	low (STR_33| (0+32768))
  5031  0341  00A2               	movwf	printf@f
  5032  0342  3092               	movlw	high (STR_33| (0+32768))
  5033  0343  00A3               	movwf	printf@f+1
  5034  0344  0845               	movf	can_send@n,w
  5035  0345  00BC               	movwf	??_can_send
  5036  0346  01BD               	clrf	??_can_send+1
  5037  0347  083C               	movf	??_can_send,w
  5038  0348  00A4               	movwf	?_printf+2
  5039  0349  083D               	movf	??_can_send+1,w
  5040  034A  00A5               	movwf	?_printf+3
  5041  034B  0021               	movlb	1	; select bank1
  5042  034C  0835               	movf	(_buf^(0+128)+2),w
  5043  034D  0020               	movlb	0	; select bank0
  5044  034E  00BE               	movwf	??_can_send+2
  5045  034F  01BF               	clrf	??_can_send+3
  5046  0350  083E               	movf	??_can_send+2,w
  5047  0351  00A6               	movwf	?_printf+4
  5048  0352  083F               	movf	??_can_send+3,w
  5049  0353  00A7               	movwf	?_printf+5
  5050  0354  3185  25B3  3182   	fcall	_printf
  5051  0357                     l2485:	
  5052                           
  5053                           ;mcp2515.c: 230: buf[0] = 0b00000011u;
  5054  0357  3003               	movlw	3
  5055  0358  0020               	movlb	0	; select bank0
  5056  0359  00BC               	movwf	??_can_send
  5057  035A  083C               	movf	??_can_send,w
  5058  035B  0021               	movlb	1	; select bank1
  5059  035C  00B3               	movwf	_buf^(0+128)
  5060                           
  5061                           ;mcp2515.c: 231: buf[1] = txbnsidh[n] + 1u;
  5062  035D  0020               	movlb	0	; select bank0
  5063  035E  0845               	movf	can_send@n,w
  5064  035F  3E22               	addlw	low (_txbnsidh| (0+32768))
  5065  0360  0084               	movwf	4
  5066  0361  3094               	movlw	high (_txbnsidh| (0+32768))
  5067  0362  1803               	skipnc
  5068  0363  3E01               	addlw	1
  5069  0364  0085               	movwf	5
  5070  0365  0800               	movf	0,w	;code access
  5071  0366  3E01               	addlw	1
  5072  0367  00BC               	movwf	??_can_send
  5073  0368  083C               	movf	??_can_send,w
  5074  0369  0021               	movlb	1	; select bank1
  5075  036A  00B4               	movwf	(_buf^(0+128)+1)
  5076                           
  5077                           ;mcp2515.c: 232: buf[2] = 0x00;
  5078  036B  01B5               	clrf	(_buf^(0+128)+2)
  5079                           
  5080                           ;mcp2515.c: 233: SPI_exchange(buf, 3);
  5081  036C  3003               	movlw	3
  5082  036D  0020               	movlb	0	; select bank0
  5083  036E  00BC               	movwf	??_can_send
  5084  036F  083C               	movf	??_can_send,w
  5085  0370  00F8               	movwf	SPI_exchange@len
  5086  0371  30B3               	movlw	(low (_buf| 0))& (0+255)
  5087  0372  318C  247F  3182   	fcall	_SPI_exchange
  5088                           
  5089                           ;mcp2515.c: 235: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5090  0375  0020               	movlb	0	; select bank0
  5091  0376  0862               	movf	_mode,w
  5092  0377  1903               	btfsc	3,2
  5093  0378  2B90               	goto	l2497
  5094  0379  30E5               	movlw	low (STR_34| (0+32768))
  5095  037A  00A2               	movwf	printf@f
  5096  037B  3092               	movlw	high (STR_34| (0+32768))
  5097  037C  00A3               	movwf	printf@f+1
  5098  037D  0845               	movf	can_send@n,w
  5099  037E  00BC               	movwf	??_can_send
  5100  037F  01BD               	clrf	??_can_send+1
  5101  0380  083C               	movf	??_can_send,w
  5102  0381  00A4               	movwf	?_printf+2
  5103  0382  083D               	movf	??_can_send+1,w
  5104  0383  00A5               	movwf	?_printf+3
  5105  0384  0021               	movlb	1	; select bank1
  5106  0385  0835               	movf	(_buf^(0+128)+2),w
  5107  0386  0020               	movlb	0	; select bank0
  5108  0387  00BE               	movwf	??_can_send+2
  5109  0388  01BF               	clrf	??_can_send+3
  5110  0389  083E               	movf	??_can_send+2,w
  5111  038A  00A6               	movwf	?_printf+4
  5112  038B  083F               	movf	??_can_send+3,w
  5113  038C  00A7               	movwf	?_printf+5
  5114  038D  3185  25B3  3182   	fcall	_printf
  5115  0390                     l2497:	
  5116                           
  5117                           ;mcp2515.c: 237: if (bytes_written == len) {
  5118  0390  0020               	movlb	0	; select bank0
  5119  0391  0841               	movf	can_send@bytes_written,w
  5120  0392  0640               	xorwf	can_send@len,w
  5121  0393  1D03               	skipz
  5122  0394  0008               	return
  5123                           
  5124                           ;mcp2515.c: 239: buf[0] = 0b10000000u + (0b00000001u << n);
  5125  0395  3001               	movlw	1
  5126  0396  00BC               	movwf	??_can_send
  5127  0397  0A45               	incf	can_send@n,w
  5128  0398  2B9A               	goto	u2184
  5129  0399                     u2185:	
  5130  0399  35BC               	lslf	??_can_send,f
  5131  039A                     u2184:	
  5132  039A  0B89               	decfsz	9,f
  5133  039B  2B99               	goto	u2185
  5134  039C  083C               	movf	??_can_send,w
  5135  039D  3E80               	addlw	128
  5136  039E  00BD               	movwf	??_can_send+1
  5137  039F  083D               	movf	??_can_send+1,w
  5138  03A0  0021               	movlb	1	; select bank1
  5139  03A1  00B3               	movwf	_buf^(0+128)
  5140                           
  5141                           ;mcp2515.c: 240: bytes_written = SPI_exchange(buf, 1);
  5142  03A2  01F8               	clrf	SPI_exchange@len
  5143  03A3  0AF8               	incf	SPI_exchange@len,f
  5144  03A4  30B3               	movlw	(low (_buf| 0))& (0+255)
  5145  03A5  318C  247F  3182   	fcall	_SPI_exchange
  5146  03A8  0020               	movlb	0	; select bank0
  5147  03A9  00BC               	movwf	??_can_send
  5148  03AA  083C               	movf	??_can_send,w
  5149  03AB  00C1               	movwf	can_send@bytes_written
  5150                           
  5151                           ;mcp2515.c: 241: if (bytes_written == 1) {
  5152  03AC  0341               	decf	can_send@bytes_written,w
  5153  03AD  1D03               	btfss	3,2
  5154  03AE  0008               	return
  5155                           
  5156                           ;mcp2515.c: 242: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5157  03AF  0862               	movf	_mode,w
  5158  03B0  1903               	btfsc	3,2
  5159  03B1  0008               	return
  5160  03B2  308F               	movlw	low (STR_35| (0+32768))
  5161  03B3  00A2               	movwf	printf@f
  5162  03B4  3092               	movlw	high (STR_35| (0+32768))
  5163  03B5  00A3               	movwf	printf@f+1
  5164  03B6  0843               	movf	can_send@data_buf,w
  5165  03B7  00A4               	movwf	low ((?_printf| 0+2))
  5166  03B8  3000               	movlw	0
  5167  03B9  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5168  03BA  3185  25B3         	fcall	_printf
  5169                           
  5170                           ;mcp2515.c: 243: return 1;
  5171                           ;	Return value of _can_send is never used
  5172  03BC  0008               	return
  5173  03BD                     __end_of_can_send:	
  5174                           ;mcp2515.c: 244: }
  5175                           ;mcp2515.c: 245: }
  5176                           ;mcp2515.c: 247: return 0;
  5177                           ;	Return value of _can_send is never used
  5178                           
  5179                           
  5180                           	psect	text7
  5181  0C57                     __ptext7:	
  5182 ;; *************** function _can_logging_mode *****************
  5183 ;; Defined at:
  5184 ;;		line 28 in file "mcp2515.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  debug           1    wreg     unsigned char 
  5187 ;;  verbose         1    0[COMMON] unsigned char 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  debug           1    2[COMMON] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  1    wreg      void 
  5192 ;; Registers used:
  5193 ;;		wreg
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5199 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;Total ram usage:        3 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_main
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _can_logging_mode
  5214  0C57                     _can_logging_mode:	
  5215                           
  5216                           ;incstack = 0
  5217                           ; Regs used in _can_logging_mode: [wreg]
  5218                           ;can_logging_mode@debug stored from wreg
  5219  0C57  00F2               	movwf	can_logging_mode@debug
  5220                           
  5221                           ;mcp2515.c: 29: mode.debug = debug;
  5222  0C58  0872               	movf	can_logging_mode@debug,w
  5223  0C59  00F1               	movwf	??_can_logging_mode
  5224  0C5A  0871               	movf	??_can_logging_mode,w
  5225  0C5B  0020               	movlb	0	; select bank0
  5226  0C5C  00E2               	movwf	_mode
  5227                           
  5228                           ;mcp2515.c: 30: mode.verbose = verbose;
  5229  0C5D  0870               	movf	can_logging_mode@verbose,w
  5230  0C5E  00F1               	movwf	??_can_logging_mode
  5231  0C5F  0871               	movf	??_can_logging_mode,w
  5232  0C60  00E3               	movwf	_mode+1
  5233  0C61  0008               	return
  5234  0C62                     __end_of_can_logging_mode:	
  5235                           
  5236                           	psect	text8
  5237  0F82                     __ptext8:	
  5238 ;; *************** function _can_init *****************
  5239 ;; Defined at:
  5240 ;;		line 51 in file "mcp2515.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  receive_hand    2   31[BANK0 ] PTR void 
  5243 ;;		 -> receive_handler(1), 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5255 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;Total ram usage:        3 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    4
  5262 ;; This function calls:
  5263 ;;		_SPI_exchange
  5264 ;;		_can_ope_mode
  5265 ;;		_can_set_sid
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _can_init
  5273  0F82                     _can_init:	
  5274                           
  5275                           ;mcp2515.c: 52: can_set_sid(0);
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5279  0F82  3000               	movlw	0
  5280  0F83  00F0               	movwf	can_set_sid@can_node
  5281  0F84  00F1               	movwf	can_set_sid@can_node+1
  5282  0F85  318C  24DF  318F   	fcall	_can_set_sid
  5283                           
  5284                           ;mcp2515.c: 53: handler = receive_handler;
  5285  0F88  0020               	movlb	0	; select bank0
  5286  0F89  0840               	movf	can_init@receive_handler+1,w
  5287  0F8A  00EA               	movwf	_handler+1
  5288  0F8B  083F               	movf	can_init@receive_handler,w
  5289  0F8C  00E9               	movwf	_handler
  5290                           
  5291                           ;mcp2515.c: 56: buf[0] = 0b11000000u;
  5292  0F8D  30C0               	movlw	192
  5293  0F8E  00C1               	movwf	??_can_init
  5294  0F8F  0841               	movf	??_can_init,w
  5295  0F90  0021               	movlb	1	; select bank1
  5296  0F91  00B3               	movwf	_buf^(0+128)
  5297                           
  5298                           ;mcp2515.c: 57: SPI_exchange(buf, 1);
  5299  0F92  01F8               	clrf	SPI_exchange@len
  5300  0F93  0AF8               	incf	SPI_exchange@len,f
  5301  0F94  30B3               	movlw	(low (_buf| 0))& (0+255)
  5302  0F95  318C  247F  318F   	fcall	_SPI_exchange
  5303                           
  5304                           ;mcp2515.c: 59: _delay((unsigned long)((2 + 48)*(2000000/4000000.0)));
  5305  0F98  3008               	movlw	8
  5306  0F99                     u2397:	
  5307  0F99  0B89               	decfsz	9,f
  5308  0F9A  2F99               	goto	u2397
  5309  0F9B  0000               	nop
  5310                           
  5311                           ;mcp2515.c: 61: buf[0] = 0b00000010u;
  5312  0F9C  3002               	movlw	2
  5313  0F9D  0020               	movlb	0	; select bank0
  5314  0F9E  00C1               	movwf	??_can_init
  5315  0F9F  0841               	movf	??_can_init,w
  5316  0FA0  0021               	movlb	1	; select bank1
  5317  0FA1  00B3               	movwf	_buf^(0+128)
  5318                           
  5319                           ;mcp2515.c: 62: buf[1] = 0x28u;
  5320  0FA2  3028               	movlw	40
  5321  0FA3  0020               	movlb	0	; select bank0
  5322  0FA4  00C1               	movwf	??_can_init
  5323  0FA5  0841               	movf	??_can_init,w
  5324  0FA6  0021               	movlb	1	; select bank1
  5325  0FA7  00B4               	movwf	(_buf^(0+128)+1)
  5326                           
  5327                           ;mcp2515.c: 63: buf[2] = 0b00000101u;
  5328  0FA8  3005               	movlw	5
  5329  0FA9  0020               	movlb	0	; select bank0
  5330  0FAA  00C1               	movwf	??_can_init
  5331  0FAB  0841               	movf	??_can_init,w
  5332  0FAC  0021               	movlb	1	; select bank1
  5333  0FAD  00B5               	movwf	(_buf^(0+128)+2)
  5334                           
  5335                           ;mcp2515.c: 64: buf[3] = 0b11110001u;
  5336  0FAE  30F1               	movlw	241
  5337  0FAF  0020               	movlb	0	; select bank0
  5338  0FB0  00C1               	movwf	??_can_init
  5339  0FB1  0841               	movf	??_can_init,w
  5340  0FB2  0021               	movlb	1	; select bank1
  5341  0FB3  00B6               	movwf	(_buf^(0+128)+3)
  5342                           
  5343                           ;mcp2515.c: 65: buf[4] = 0b01000001u;
  5344  0FB4  3041               	movlw	65
  5345  0FB5  0020               	movlb	0	; select bank0
  5346  0FB6  00C1               	movwf	??_can_init
  5347  0FB7  0841               	movf	??_can_init,w
  5348  0FB8  0021               	movlb	1	; select bank1
  5349  0FB9  00B7               	movwf	(_buf^(0+128)+4)
  5350                           
  5351                           ;mcp2515.c: 66: SPI_exchange(buf, 5);
  5352  0FBA  3005               	movlw	5
  5353  0FBB  0020               	movlb	0	; select bank0
  5354  0FBC  00C1               	movwf	??_can_init
  5355  0FBD  0841               	movf	??_can_init,w
  5356  0FBE  00F8               	movwf	SPI_exchange@len
  5357  0FBF  30B3               	movlw	(low (_buf| 0))& (0+255)
  5358  0FC0  318C  247F  318F   	fcall	_SPI_exchange
  5359                           
  5360                           ;mcp2515.c: 68: buf[0] = 0b00000010u;
  5361  0FC3  3002               	movlw	2
  5362  0FC4  0020               	movlb	0	; select bank0
  5363  0FC5  00C1               	movwf	??_can_init
  5364  0FC6  0841               	movf	??_can_init,w
  5365  0FC7  0021               	movlb	1	; select bank1
  5366  0FC8  00B3               	movwf	_buf^(0+128)
  5367                           
  5368                           ;mcp2515.c: 69: buf[1] = 0x60u;
  5369  0FC9  3060               	movlw	96
  5370  0FCA  0020               	movlb	0	; select bank0
  5371  0FCB  00C1               	movwf	??_can_init
  5372  0FCC  0841               	movf	??_can_init,w
  5373  0FCD  0021               	movlb	1	; select bank1
  5374  0FCE  00B4               	movwf	(_buf^(0+128)+1)
  5375                           
  5376                           ;mcp2515.c: 70: buf[2] = 0b00100100u;
  5377  0FCF  3024               	movlw	36
  5378  0FD0  0020               	movlb	0	; select bank0
  5379  0FD1  00C1               	movwf	??_can_init
  5380  0FD2  0841               	movf	??_can_init,w
  5381  0FD3  0021               	movlb	1	; select bank1
  5382  0FD4  00B5               	movwf	(_buf^(0+128)+2)
  5383                           
  5384                           ;mcp2515.c: 71: SPI_exchange(buf, 3);
  5385  0FD5  3003               	movlw	3
  5386  0FD6  0020               	movlb	0	; select bank0
  5387  0FD7  00C1               	movwf	??_can_init
  5388  0FD8  0841               	movf	??_can_init,w
  5389  0FD9  00F8               	movwf	SPI_exchange@len
  5390  0FDA  30B3               	movlw	(low (_buf| 0))& (0+255)
  5391  0FDB  318C  247F  318F   	fcall	_SPI_exchange
  5392                           
  5393                           ;mcp2515.c: 73: buf[0] = 0b00000010u;
  5394  0FDE  3002               	movlw	2
  5395  0FDF  0020               	movlb	0	; select bank0
  5396  0FE0  00C1               	movwf	??_can_init
  5397  0FE1  0841               	movf	??_can_init,w
  5398  0FE2  0021               	movlb	1	; select bank1
  5399  0FE3  00B3               	movwf	_buf^(0+128)
  5400                           
  5401                           ;mcp2515.c: 74: buf[1] = 0x70u;
  5402  0FE4  3070               	movlw	112
  5403  0FE5  0020               	movlb	0	; select bank0
  5404  0FE6  00C1               	movwf	??_can_init
  5405  0FE7  0841               	movf	??_can_init,w
  5406  0FE8  0021               	movlb	1	; select bank1
  5407  0FE9  00B4               	movwf	(_buf^(0+128)+1)
  5408                           
  5409                           ;mcp2515.c: 75: buf[2] = 0b00100000u;
  5410  0FEA  3020               	movlw	32
  5411  0FEB  0020               	movlb	0	; select bank0
  5412  0FEC  00C1               	movwf	??_can_init
  5413  0FED  0841               	movf	??_can_init,w
  5414  0FEE  0021               	movlb	1	; select bank1
  5415  0FEF  00B5               	movwf	(_buf^(0+128)+2)
  5416                           
  5417                           ;mcp2515.c: 76: SPI_exchange(buf, 3);
  5418  0FF0  3003               	movlw	3
  5419  0FF1  0020               	movlb	0	; select bank0
  5420  0FF2  00C1               	movwf	??_can_init
  5421  0FF3  0841               	movf	??_can_init,w
  5422  0FF4  00F8               	movwf	SPI_exchange@len
  5423  0FF5  30B3               	movlw	(low (_buf| 0))& (0+255)
  5424  0FF6  318C  247F  318F   	fcall	_SPI_exchange
  5425                           
  5426                           ;mcp2515.c: 78: mode.debug = 0;
  5427  0FF9  0020               	movlb	0	; select bank0
  5428  0FFA  01E2               	clrf	_mode
  5429                           
  5430                           ;mcp2515.c: 79: mode.verbose = 0;
  5431  0FFB  01E3               	clrf	_mode+1
  5432                           
  5433                           ;mcp2515.c: 81: can_ope_mode(0b00000000u);
  5434  0FFC  3000               	movlw	0
  5435  0FFD  318E  2669         	fcall	_can_ope_mode
  5436  0FFF  0008               	return
  5437  1000                     __end_of_can_init:	
  5438                           
  5439                           	psect	text9
  5440  0CDF                     __ptext9:	
  5441 ;; *************** function _can_set_sid *****************
  5442 ;; Defined at:
  5443 ;;		line 41 in file "mcp2515.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  can_node        2    0[COMMON] unsigned int 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  sidl            1    6[COMMON] unsigned char 
  5448 ;;  sidh            1    5[COMMON] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;Total ram usage:        7 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;;		_can_init
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _can_set_sid
  5474  0CDF                     _can_set_sid:	
  5475                           
  5476                           ;mcp2515.c: 42: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5480  0CDF  0871               	movf	can_set_sid@can_node+1,w
  5481  0CE0  00F3               	movwf	??_can_set_sid+1
  5482  0CE1  0870               	movf	can_set_sid@can_node,w
  5483  0CE2  00F2               	movwf	??_can_set_sid
  5484  0CE3  36F3               	lsrf	??_can_set_sid+1,f
  5485  0CE4  0CF2               	rrf	??_can_set_sid,f
  5486  0CE5  36F3               	lsrf	??_can_set_sid+1,f
  5487  0CE6  0CF2               	rrf	??_can_set_sid,f
  5488  0CE7  36F3               	lsrf	??_can_set_sid+1,f
  5489  0CE8  0CF2               	rrf	??_can_set_sid,f
  5490  0CE9  0872               	movf	??_can_set_sid,w
  5491  0CEA  00F4               	movwf	??_can_set_sid+2
  5492  0CEB  0874               	movf	??_can_set_sid+2,w
  5493  0CEC  00F5               	movwf	can_set_sid@sidh
  5494                           
  5495                           ;mcp2515.c: 43: uint8_t sidl = (can_node << 5) & 0x00e0;
  5496  0CED  0870               	movf	can_set_sid@can_node,w
  5497  0CEE  00F2               	movwf	??_can_set_sid
  5498  0CEF  3004               	movlw	4
  5499  0CF0                     u1785:	
  5500  0CF0  35F2               	lslf	??_can_set_sid,f
  5501  0CF1  3EFF               	addlw	-1
  5502  0CF2  1D03               	skipz
  5503  0CF3  2CF0               	goto	u1785
  5504  0CF4  3572               	lslf	??_can_set_sid,w
  5505  0CF5  39E0               	andlw	224
  5506  0CF6  00F3               	movwf	??_can_set_sid+1
  5507  0CF7  0873               	movf	??_can_set_sid+1,w
  5508  0CF8  00F6               	movwf	can_set_sid@sidl
  5509                           
  5510                           ;mcp2515.c: 44: sid.sidh = sidh;
  5511  0CF9  0875               	movf	can_set_sid@sidh,w
  5512  0CFA  00F2               	movwf	??_can_set_sid
  5513  0CFB  0872               	movf	??_can_set_sid,w
  5514  0CFC  0020               	movlb	0	; select bank0
  5515  0CFD  00E4               	movwf	_sid
  5516                           
  5517                           ;mcp2515.c: 45: sid.sidl = sidl;
  5518  0CFE  0876               	movf	can_set_sid@sidl,w
  5519  0CFF  00F2               	movwf	??_can_set_sid
  5520  0D00  0872               	movf	??_can_set_sid,w
  5521  0D01  00E5               	movwf	_sid+1
  5522  0D02  0008               	return
  5523  0D03                     __end_of_can_set_sid:	
  5524                           
  5525                           	psect	text10
  5526  0164                     __ptext10:	
  5527 ;; *************** function _can_dump_registers *****************
  5528 ;; Defined at:
  5529 ;;		line 325 in file "mcp2515.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    4
  5550 ;; This function calls:
  5551 ;;		_printf
  5552 ;;		_read_register
  5553 ;; This function is called by:
  5554 ;;		_main
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           
  5559                           ;psect for function _can_dump_registers
  5560  0164                     _can_dump_registers:	
  5561                           
  5562                           ;mcp2515.c: 326: printf("---\n");
  5563                           
  5564                           ;incstack = 0
  5565                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5566  0164  301D               	movlw	low (STR_38| (0+32768))
  5567  0165  0020               	movlb	0	; select bank0
  5568  0166  00A2               	movwf	printf@f
  5569  0167  3094               	movlw	high (STR_38| (0+32768))
  5570  0168  00A3               	movwf	printf@f+1
  5571  0169  3185  25B3  3181   	fcall	_printf
  5572                           
  5573                           ;mcp2515.c: 327: printf("SIDH: %02x\n", sid.sidh);
  5574  016C  30B7               	movlw	low ((STR_25+5)| (0+32768))
  5575  016D  0020               	movlb	0	; select bank0
  5576  016E  00A2               	movwf	printf@f
  5577  016F  3092               	movlw	high ((STR_25+5)| (0+32768))
  5578  0170  00A3               	movwf	printf@f+1
  5579  0171  0864               	movf	_sid,w
  5580  0172  00BB               	movwf	??_can_dump_registers
  5581  0173  01BC               	clrf	??_can_dump_registers+1
  5582  0174  083B               	movf	??_can_dump_registers,w
  5583  0175  00A4               	movwf	?_printf+2
  5584  0176  083C               	movf	??_can_dump_registers+1,w
  5585  0177  00A5               	movwf	?_printf+3
  5586  0178  3185  25B3  3181   	fcall	_printf
  5587                           
  5588                           ;mcp2515.c: 328: printf("SIDL: %02x\n", sid.sidl);
  5589  017B  30D9               	movlw	low ((STR_26+5)| (0+32768))
  5590  017C  0020               	movlb	0	; select bank0
  5591  017D  00A2               	movwf	printf@f
  5592  017E  3092               	movlw	high ((STR_26+5)| (0+32768))
  5593  017F  00A3               	movwf	printf@f+1
  5594  0180  0865               	movf	_sid+1,w
  5595  0181  00BB               	movwf	??_can_dump_registers
  5596  0182  01BC               	clrf	??_can_dump_registers+1
  5597  0183  083B               	movf	??_can_dump_registers,w
  5598  0184  00A4               	movwf	?_printf+2
  5599  0185  083C               	movf	??_can_dump_registers+1,w
  5600  0186  00A5               	movwf	?_printf+3
  5601  0187  3185  25B3  3181   	fcall	_printf
  5602                           
  5603                           ;mcp2515.c: 329: printf("\n");
  5604  018A  3020               	movlw	low ((STR_38+3)| (0+32768))
  5605  018B  0020               	movlb	0	; select bank0
  5606  018C  00A2               	movwf	printf@f
  5607  018D  3094               	movlw	high ((STR_38+3)| (0+32768))
  5608  018E  00A3               	movwf	printf@f+1
  5609  018F  3185  25B3  3181   	fcall	_printf
  5610                           
  5611                           ;mcp2515.c: 331: printf("CNF1: %02x\n", read_register(0x2au));
  5612  0192  30C7               	movlw	low (STR_42| (0+32768))
  5613  0193  0020               	movlb	0	; select bank0
  5614  0194  00A2               	movwf	printf@f
  5615  0195  3093               	movlw	high (STR_42| (0+32768))
  5616  0196  00A3               	movwf	printf@f+1
  5617  0197  302A               	movlw	42
  5618  0198  318C  24AB  3181   	fcall	_read_register
  5619  019B  0020               	movlb	0	; select bank0
  5620  019C  00BB               	movwf	??_can_dump_registers
  5621  019D  01BC               	clrf	??_can_dump_registers+1
  5622  019E  083B               	movf	??_can_dump_registers,w
  5623  019F  00A4               	movwf	?_printf+2
  5624  01A0  083C               	movf	??_can_dump_registers+1,w
  5625  01A1  00A5               	movwf	?_printf+3
  5626  01A2  3185  25B3  3181   	fcall	_printf
  5627                           
  5628                           ;mcp2515.c: 332: printf("CNF2: %02x\n", read_register(0x29u));
  5629  01A5  30D3               	movlw	low (STR_43| (0+32768))
  5630  01A6  0020               	movlb	0	; select bank0
  5631  01A7  00A2               	movwf	printf@f
  5632  01A8  3093               	movlw	high (STR_43| (0+32768))
  5633  01A9  00A3               	movwf	printf@f+1
  5634  01AA  3029               	movlw	41
  5635  01AB  318C  24AB  3181   	fcall	_read_register
  5636  01AE  0020               	movlb	0	; select bank0
  5637  01AF  00BB               	movwf	??_can_dump_registers
  5638  01B0  01BC               	clrf	??_can_dump_registers+1
  5639  01B1  083B               	movf	??_can_dump_registers,w
  5640  01B2  00A4               	movwf	?_printf+2
  5641  01B3  083C               	movf	??_can_dump_registers+1,w
  5642  01B4  00A5               	movwf	?_printf+3
  5643  01B5  3185  25B3  3181   	fcall	_printf
  5644                           
  5645                           ;mcp2515.c: 333: printf("CNF3: %02x\n", read_register(0x28u));
  5646  01B8  30DF               	movlw	low (STR_44| (0+32768))
  5647  01B9  0020               	movlb	0	; select bank0
  5648  01BA  00A2               	movwf	printf@f
  5649  01BB  3093               	movlw	high (STR_44| (0+32768))
  5650  01BC  00A3               	movwf	printf@f+1
  5651  01BD  3028               	movlw	40
  5652  01BE  318C  24AB  3181   	fcall	_read_register
  5653  01C1  0020               	movlb	0	; select bank0
  5654  01C2  00BB               	movwf	??_can_dump_registers
  5655  01C3  01BC               	clrf	??_can_dump_registers+1
  5656  01C4  083B               	movf	??_can_dump_registers,w
  5657  01C5  00A4               	movwf	?_printf+2
  5658  01C6  083C               	movf	??_can_dump_registers+1,w
  5659  01C7  00A5               	movwf	?_printf+3
  5660  01C8  3185  25B3  3181   	fcall	_printf
  5661                           
  5662                           ;mcp2515.c: 334: printf("\n");
  5663  01CB  3020               	movlw	low ((STR_38+3)| (0+32768))
  5664  01CC  0020               	movlb	0	; select bank0
  5665  01CD  00A2               	movwf	printf@f
  5666  01CE  3094               	movlw	high ((STR_38+3)| (0+32768))
  5667  01CF  00A3               	movwf	printf@f+1
  5668  01D0  3185  25B3  3181   	fcall	_printf
  5669                           
  5670                           ;mcp2515.c: 336: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  5671  01D3  3016               	movlw	low (STR_46| (0+32768))
  5672  01D4  0020               	movlb	0	; select bank0
  5673  01D5  00A2               	movwf	printf@f
  5674  01D6  3093               	movlw	high (STR_46| (0+32768))
  5675  01D7  00A3               	movwf	printf@f+1
  5676  01D8  3030               	movlw	48
  5677  01D9  318C  24AB  3181   	fcall	_read_register
  5678  01DC  0020               	movlb	0	; select bank0
  5679  01DD  00BB               	movwf	??_can_dump_registers
  5680  01DE  01BC               	clrf	??_can_dump_registers+1
  5681  01DF  083B               	movf	??_can_dump_registers,w
  5682  01E0  00A4               	movwf	?_printf+2
  5683  01E1  083C               	movf	??_can_dump_registers+1,w
  5684  01E2  00A5               	movwf	?_printf+3
  5685  01E3  3185  25B3  3181   	fcall	_printf
  5686                           
  5687                           ;mcp2515.c: 337: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  5688  01E6  3036               	movlw	low (STR_47| (0+32768))
  5689  01E7  0020               	movlb	0	; select bank0
  5690  01E8  00A2               	movwf	printf@f
  5691  01E9  3093               	movlw	high (STR_47| (0+32768))
  5692  01EA  00A3               	movwf	printf@f+1
  5693  01EB  3040               	movlw	64
  5694  01EC  318C  24AB  3181   	fcall	_read_register
  5695  01EF  0020               	movlb	0	; select bank0
  5696  01F0  00BB               	movwf	??_can_dump_registers
  5697  01F1  01BC               	clrf	??_can_dump_registers+1
  5698  01F2  083B               	movf	??_can_dump_registers,w
  5699  01F3  00A4               	movwf	?_printf+2
  5700  01F4  083C               	movf	??_can_dump_registers+1,w
  5701  01F5  00A5               	movwf	?_printf+3
  5702  01F6  3185  25B3  3181   	fcall	_printf
  5703                           
  5704                           ;mcp2515.c: 338: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  5705  01F9  3046               	movlw	low (STR_48| (0+32768))
  5706  01FA  0020               	movlb	0	; select bank0
  5707  01FB  00A2               	movwf	printf@f
  5708  01FC  3093               	movlw	high (STR_48| (0+32768))
  5709  01FD  00A3               	movwf	printf@f+1
  5710  01FE  3050               	movlw	80
  5711  01FF  318C  24AB  3181   	fcall	_read_register
  5712  0202  0020               	movlb	0	; select bank0
  5713  0203  00BB               	movwf	??_can_dump_registers
  5714  0204  01BC               	clrf	??_can_dump_registers+1
  5715  0205  083B               	movf	??_can_dump_registers,w
  5716  0206  00A4               	movwf	?_printf+2
  5717  0207  083C               	movf	??_can_dump_registers+1,w
  5718  0208  00A5               	movwf	?_printf+3
  5719  0209  3185  25B3  3181   	fcall	_printf
  5720                           
  5721                           ;mcp2515.c: 339: printf("\n");
  5722  020C  3020               	movlw	low ((STR_38+3)| (0+32768))
  5723  020D  0020               	movlb	0	; select bank0
  5724  020E  00A2               	movwf	printf@f
  5725  020F  3094               	movlw	high ((STR_38+3)| (0+32768))
  5726  0210  00A3               	movwf	printf@f+1
  5727  0211  3185  25B3  3181   	fcall	_printf
  5728                           
  5729                           ;mcp2515.c: 341: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  5730  0214  3006               	movlw	low (STR_50| (0+32768))
  5731  0215  0020               	movlb	0	; select bank0
  5732  0216  00A2               	movwf	printf@f
  5733  0217  3093               	movlw	high (STR_50| (0+32768))
  5734  0218  00A3               	movwf	printf@f+1
  5735  0219  3060               	movlw	96
  5736  021A  318C  24AB  3181   	fcall	_read_register
  5737  021D  0020               	movlb	0	; select bank0
  5738  021E  00BB               	movwf	??_can_dump_registers
  5739  021F  01BC               	clrf	??_can_dump_registers+1
  5740  0220  083B               	movf	??_can_dump_registers,w
  5741  0221  00A4               	movwf	?_printf+2
  5742  0222  083C               	movf	??_can_dump_registers+1,w
  5743  0223  00A5               	movwf	?_printf+3
  5744  0224  3185  25B3  3181   	fcall	_printf
  5745                           
  5746                           ;mcp2515.c: 342: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  5747  0227  3026               	movlw	low (STR_51| (0+32768))
  5748  0228  0020               	movlb	0	; select bank0
  5749  0229  00A2               	movwf	printf@f
  5750  022A  3093               	movlw	high (STR_51| (0+32768))
  5751  022B  00A3               	movwf	printf@f+1
  5752  022C  3070               	movlw	112
  5753  022D  318C  24AB  3181   	fcall	_read_register
  5754  0230  0020               	movlb	0	; select bank0
  5755  0231  00BB               	movwf	??_can_dump_registers
  5756  0232  01BC               	clrf	??_can_dump_registers+1
  5757  0233  083B               	movf	??_can_dump_registers,w
  5758  0234  00A4               	movwf	?_printf+2
  5759  0235  083C               	movf	??_can_dump_registers+1,w
  5760  0236  00A5               	movwf	?_printf+3
  5761  0237  3185  25B3  3181   	fcall	_printf
  5762                           
  5763                           ;mcp2515.c: 343: printf("\n");
  5764  023A  3020               	movlw	low ((STR_38+3)| (0+32768))
  5765  023B  0020               	movlb	0	; select bank0
  5766  023C  00A2               	movwf	printf@f
  5767  023D  3094               	movlw	high ((STR_38+3)| (0+32768))
  5768  023E  00A3               	movwf	printf@f+1
  5769  023F  3185  25B3  3181   	fcall	_printf
  5770                           
  5771                           ;mcp2515.c: 345: printf("CANCTRL: %02x\n", read_register(0x0fu));
  5772  0242  3065               	movlw	low (STR_53| (0+32768))
  5773  0243  0020               	movlb	0	; select bank0
  5774  0244  00A2               	movwf	printf@f
  5775  0245  3093               	movlw	high (STR_53| (0+32768))
  5776  0246  00A3               	movwf	printf@f+1
  5777  0247  300F               	movlw	15
  5778  0248  318C  24AB  3181   	fcall	_read_register
  5779  024B  0020               	movlb	0	; select bank0
  5780  024C  00BB               	movwf	??_can_dump_registers
  5781  024D  01BC               	clrf	??_can_dump_registers+1
  5782  024E  083B               	movf	??_can_dump_registers,w
  5783  024F  00A4               	movwf	?_printf+2
  5784  0250  083C               	movf	??_can_dump_registers+1,w
  5785  0251  00A5               	movwf	?_printf+3
  5786  0252  3185  25B3  3181   	fcall	_printf
  5787                           
  5788                           ;mcp2515.c: 346: printf("CANSTAT: %02x\n", read_register(0x0e));
  5789  0255  3074               	movlw	low (STR_22| (0+32768))
  5790  0256  0020               	movlb	0	; select bank0
  5791  0257  00A2               	movwf	printf@f
  5792  0258  3093               	movlw	high (STR_22| (0+32768))
  5793  0259  00A3               	movwf	printf@f+1
  5794  025A  300E               	movlw	14
  5795  025B  318C  24AB  3181   	fcall	_read_register
  5796  025E  0020               	movlb	0	; select bank0
  5797  025F  00BB               	movwf	??_can_dump_registers
  5798  0260  01BC               	clrf	??_can_dump_registers+1
  5799  0261  083B               	movf	??_can_dump_registers,w
  5800  0262  00A4               	movwf	?_printf+2
  5801  0263  083C               	movf	??_can_dump_registers+1,w
  5802  0264  00A5               	movwf	?_printf+3
  5803  0265  3185  25B3  3181   	fcall	_printf
  5804                           
  5805                           ;mcp2515.c: 347: printf("---\n");
  5806  0268  301D               	movlw	low (STR_38| (0+32768))
  5807  0269  0020               	movlb	0	; select bank0
  5808  026A  00A2               	movwf	printf@f
  5809  026B  3094               	movlw	high (STR_38| (0+32768))
  5810  026C  00A3               	movwf	printf@f+1
  5811  026D  3185  25B3         	fcall	_printf
  5812  026F  0008               	return
  5813  0270                     __end_of_can_dump_registers:	
  5814                           
  5815                           	psect	text11
  5816  0CAB                     __ptext11:	
  5817 ;; *************** function _read_register *****************
  5818 ;; Defined at:
  5819 ;;		line 314 in file "mcp2515.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  addr            1    wreg     unsigned char 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  addr            1    1[BANK0 ] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      unsigned char 
  5826 ;; Registers used:
  5827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;Total ram usage:        2 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    3
  5840 ;; This function calls:
  5841 ;;		_SPI_exchange
  5842 ;; This function is called by:
  5843 ;;		_can_dump_registers
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           
  5848                           ;psect for function _read_register
  5849  0CAB                     _read_register:	
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5853                           ;read_register@addr stored from wreg
  5854  0CAB  0020               	movlb	0	; select bank0
  5855  0CAC  00A1               	movwf	read_register@addr
  5856                           
  5857                           ;mcp2515.c: 315: buf[0] = 0b00000011u;
  5858  0CAD  3003               	movlw	3
  5859  0CAE  00A0               	movwf	??_read_register
  5860  0CAF  0820               	movf	??_read_register,w
  5861  0CB0  0021               	movlb	1	; select bank1
  5862  0CB1  00B3               	movwf	_buf^(0+128)
  5863                           
  5864                           ;mcp2515.c: 316: buf[1] = addr;
  5865  0CB2  0020               	movlb	0	; select bank0
  5866  0CB3  0821               	movf	read_register@addr,w
  5867  0CB4  00A0               	movwf	??_read_register
  5868  0CB5  0820               	movf	??_read_register,w
  5869  0CB6  0021               	movlb	1	; select bank1
  5870  0CB7  00B4               	movwf	(_buf^(0+128)+1)
  5871                           
  5872                           ;mcp2515.c: 317: buf[2] = 0x00;
  5873  0CB8  01B5               	clrf	(_buf^(0+128)+2)
  5874                           
  5875                           ;mcp2515.c: 318: SPI_exchange(buf, 3);
  5876  0CB9  3003               	movlw	3
  5877  0CBA  0020               	movlb	0	; select bank0
  5878  0CBB  00A0               	movwf	??_read_register
  5879  0CBC  0820               	movf	??_read_register,w
  5880  0CBD  00F8               	movwf	SPI_exchange@len
  5881  0CBE  30B3               	movlw	(low (_buf| 0))& (0+255)
  5882  0CBF  318C  247F         	fcall	_SPI_exchange
  5883                           
  5884                           ;mcp2515.c: 319: return buf[2];
  5885  0CC1  0021               	movlb	1	; select bank1
  5886  0CC2  0835               	movf	(_buf^(0+128)+2),w
  5887  0CC3  0008               	return
  5888  0CC4                     __end_of_read_register:	
  5889                           
  5890                           	psect	text12
  5891  0D5E                     __ptext12:	
  5892 ;; *************** function _can_baudrate *****************
  5893 ;; Defined at:
  5894 ;;		line 281 in file "mcp2515.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  bpr             1    wreg     unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  bpr             1   33[BANK0 ] unsigned char 
  5899 ;;  bytes_writte    1   35[BANK0 ] unsigned char 
  5900 ;;  mask            1   34[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  1    wreg      unsigned char 
  5903 ;; Registers used:
  5904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        5 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    4
  5917 ;; This function calls:
  5918 ;;		_SPI_exchange
  5919 ;;		_can_ope_mode
  5920 ;; This function is called by:
  5921 ;;		_main
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _can_baudrate
  5927  0D5E                     _can_baudrate:	
  5928                           
  5929                           ;incstack = 0
  5930                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5931                           ;can_baudrate@bpr stored from wreg
  5932  0D5E  0020               	movlb	0	; select bank0
  5933  0D5F  00C1               	movwf	can_baudrate@bpr
  5934                           
  5935                           ;mcp2515.c: 282: can_ope_mode(0b10000000u);
  5936  0D60  3080               	movlw	128
  5937  0D61  318E  2669  318D   	fcall	_can_ope_mode
  5938                           
  5939                           ;mcp2515.c: 284: uint8_t mask = 0b00111111;
  5940  0D64  303F               	movlw	63
  5941  0D65  0020               	movlb	0	; select bank0
  5942  0D66  00BF               	movwf	??_can_baudrate
  5943  0D67  083F               	movf	??_can_baudrate,w
  5944  0D68  00C2               	movwf	can_baudrate@mask
  5945                           
  5946                           ;mcp2515.c: 285: buf[0] = 0b00000101u;
  5947  0D69  3005               	movlw	5
  5948  0D6A  00BF               	movwf	??_can_baudrate
  5949  0D6B  083F               	movf	??_can_baudrate,w
  5950  0D6C  0021               	movlb	1	; select bank1
  5951  0D6D  00B3               	movwf	_buf^(0+128)
  5952                           
  5953                           ;mcp2515.c: 286: buf[1] = 0x2au;
  5954  0D6E  302A               	movlw	42
  5955  0D6F  0020               	movlb	0	; select bank0
  5956  0D70  00BF               	movwf	??_can_baudrate
  5957  0D71  083F               	movf	??_can_baudrate,w
  5958  0D72  0021               	movlb	1	; select bank1
  5959  0D73  00B4               	movwf	(_buf^(0+128)+1)
  5960                           
  5961                           ;mcp2515.c: 287: buf[2] = mask;
  5962  0D74  0020               	movlb	0	; select bank0
  5963  0D75  0842               	movf	can_baudrate@mask,w
  5964  0D76  00BF               	movwf	??_can_baudrate
  5965  0D77  083F               	movf	??_can_baudrate,w
  5966  0D78  0021               	movlb	1	; select bank1
  5967  0D79  00B5               	movwf	(_buf^(0+128)+2)
  5968                           
  5969                           ;mcp2515.c: 288: buf[3] = bpr;
  5970  0D7A  0020               	movlb	0	; select bank0
  5971  0D7B  0841               	movf	can_baudrate@bpr,w
  5972  0D7C  00BF               	movwf	??_can_baudrate
  5973  0D7D  083F               	movf	??_can_baudrate,w
  5974  0D7E  0021               	movlb	1	; select bank1
  5975  0D7F  00B6               	movwf	(_buf^(0+128)+3)
  5976                           
  5977                           ;mcp2515.c: 289: uint8_t bytes_written = SPI_exchange(buf, 4);
  5978  0D80  3004               	movlw	4
  5979  0D81  0020               	movlb	0	; select bank0
  5980  0D82  00BF               	movwf	??_can_baudrate
  5981  0D83  083F               	movf	??_can_baudrate,w
  5982  0D84  00F8               	movwf	SPI_exchange@len
  5983  0D85  30B3               	movlw	(low (_buf| 0))& (0+255)
  5984  0D86  318C  247F  318D   	fcall	_SPI_exchange
  5985  0D89  0020               	movlb	0	; select bank0
  5986  0D8A  00C0               	movwf	??_can_baudrate+1
  5987  0D8B  0840               	movf	??_can_baudrate+1,w
  5988  0D8C  00C3               	movwf	can_baudrate@bytes_written
  5989                           
  5990                           ;mcp2515.c: 290: can_ope_mode(operation_mode);
  5991  0D8D  0868               	movf	_operation_mode,w
  5992  0D8E  318E  2669         	fcall	_can_ope_mode
  5993                           
  5994                           ;mcp2515.c: 294: return 0;
  5995                           ;	Return value of _can_baudrate is never used
  5996                           
  5997                           ;mcp2515.c: 293: } else {
  5998                           
  5999                           ;mcp2515.c: 292: return 1;
  6000                           ;	Return value of _can_baudrate is never used
  6001  0D90  0008               	return
  6002  0D91                     __end_of_can_baudrate:	
  6003                           
  6004                           	psect	text13
  6005  0D03                     __ptext13:	
  6006 ;; *************** function _can_abort *****************
  6007 ;; Defined at:
  6008 ;;		line 298 in file "mcp2515.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  bytes_writte    1   33[BANK0 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      unsigned char 
  6015 ;; Registers used:
  6016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;Total ram usage:        3 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    4
  6029 ;; This function calls:
  6030 ;;		_SPI_exchange
  6031 ;;		_can_ope_mode
  6032 ;; This function is called by:
  6033 ;;		_main
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _can_abort
  6039  0D03                     _can_abort:	
  6040                           
  6041                           ;mcp2515.c: 299: can_ope_mode(0b10000000u);
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6045  0D03  3080               	movlw	128
  6046  0D04  318E  2669  318D   	fcall	_can_ope_mode
  6047                           
  6048                           ;mcp2515.c: 301: buf[0] = 0b00000101u;
  6049  0D07  3005               	movlw	5
  6050  0D08  0020               	movlb	0	; select bank0
  6051  0D09  00BF               	movwf	??_can_abort
  6052  0D0A  083F               	movf	??_can_abort,w
  6053  0D0B  0021               	movlb	1	; select bank1
  6054  0D0C  00B3               	movwf	_buf^(0+128)
  6055                           
  6056                           ;mcp2515.c: 302: buf[1] = 0x0fu;
  6057  0D0D  300F               	movlw	15
  6058  0D0E  0020               	movlb	0	; select bank0
  6059  0D0F  00BF               	movwf	??_can_abort
  6060  0D10  083F               	movf	??_can_abort,w
  6061  0D11  0021               	movlb	1	; select bank1
  6062  0D12  00B4               	movwf	(_buf^(0+128)+1)
  6063                           
  6064                           ;mcp2515.c: 303: buf[2] = 0b00010000u;
  6065  0D13  3010               	movlw	16
  6066  0D14  0020               	movlb	0	; select bank0
  6067  0D15  00BF               	movwf	??_can_abort
  6068  0D16  083F               	movf	??_can_abort,w
  6069  0D17  0021               	movlb	1	; select bank1
  6070  0D18  00B5               	movwf	(_buf^(0+128)+2)
  6071                           
  6072                           ;mcp2515.c: 304: buf[3] = 0b00010000u;
  6073  0D19  3010               	movlw	16
  6074  0D1A  0020               	movlb	0	; select bank0
  6075  0D1B  00BF               	movwf	??_can_abort
  6076  0D1C  083F               	movf	??_can_abort,w
  6077  0D1D  0021               	movlb	1	; select bank1
  6078  0D1E  00B6               	movwf	(_buf^(0+128)+3)
  6079                           
  6080                           ;mcp2515.c: 305: uint8_t bytes_written = SPI_exchange(buf, 4);
  6081  0D1F  3004               	movlw	4
  6082  0D20  0020               	movlb	0	; select bank0
  6083  0D21  00BF               	movwf	??_can_abort
  6084  0D22  083F               	movf	??_can_abort,w
  6085  0D23  00F8               	movwf	SPI_exchange@len
  6086  0D24  30B3               	movlw	(low (_buf| 0))& (0+255)
  6087  0D25  318C  247F  318D   	fcall	_SPI_exchange
  6088  0D28  0020               	movlb	0	; select bank0
  6089  0D29  00C0               	movwf	??_can_abort+1
  6090  0D2A  0840               	movf	??_can_abort+1,w
  6091  0D2B  00C1               	movwf	can_abort@bytes_written
  6092                           
  6093                           ;mcp2515.c: 306: can_ope_mode(operation_mode);
  6094  0D2C  0868               	movf	_operation_mode,w
  6095  0D2D  318E  2669         	fcall	_can_ope_mode
  6096                           
  6097                           ;mcp2515.c: 310: return 0;
  6098                           ;	Return value of _can_abort is never used
  6099                           
  6100                           ;mcp2515.c: 309: } else {
  6101                           
  6102                           ;mcp2515.c: 308: return 1;
  6103                           ;	Return value of _can_abort is never used
  6104  0D2F  0008               	return
  6105  0D30                     __end_of_can_abort:	
  6106                           
  6107                           	psect	text14
  6108  0E69                     __ptext14:	
  6109 ;; *************** function _can_ope_mode *****************
  6110 ;; Defined at:
  6111 ;;		line 87 in file "mcp2515.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  ope_mode        1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  ope_mode        1   30[BANK0 ] unsigned char 
  6116 ;;  bytes_writte    1   29[BANK0 ] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      unsigned char 
  6119 ;; Registers used:
  6120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        4 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    3
  6133 ;; This function calls:
  6134 ;;		_SPI_exchange
  6135 ;;		_printf
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;;		_can_init
  6139 ;;		_can_set_mask
  6140 ;;		_can_baudrate
  6141 ;;		_can_abort
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           
  6146                           ;psect for function _can_ope_mode
  6147  0E69                     _can_ope_mode:	
  6148                           
  6149                           ;incstack = 0
  6150                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6151                           ;can_ope_mode@ope_mode stored from wreg
  6152  0E69  0020               	movlb	0	; select bank0
  6153  0E6A  00BE               	movwf	can_ope_mode@ope_mode
  6154                           
  6155                           ;mcp2515.c: 88: buf[0] = 0b00000010u;
  6156  0E6B  3002               	movlw	2
  6157  0E6C  00BB               	movwf	??_can_ope_mode
  6158  0E6D  083B               	movf	??_can_ope_mode,w
  6159  0E6E  0021               	movlb	1	; select bank1
  6160  0E6F  00B3               	movwf	_buf^(0+128)
  6161                           
  6162                           ;mcp2515.c: 89: buf[1] = 0x0fu;
  6163  0E70  300F               	movlw	15
  6164  0E71  0020               	movlb	0	; select bank0
  6165  0E72  00BB               	movwf	??_can_ope_mode
  6166  0E73  083B               	movf	??_can_ope_mode,w
  6167  0E74  0021               	movlb	1	; select bank1
  6168  0E75  00B4               	movwf	(_buf^(0+128)+1)
  6169                           
  6170                           ;mcp2515.c: 90: buf[2] = ope_mode;
  6171  0E76  0020               	movlb	0	; select bank0
  6172  0E77  083E               	movf	can_ope_mode@ope_mode,w
  6173  0E78  00BB               	movwf	??_can_ope_mode
  6174  0E79  083B               	movf	??_can_ope_mode,w
  6175  0E7A  0021               	movlb	1	; select bank1
  6176  0E7B  00B5               	movwf	(_buf^(0+128)+2)
  6177                           
  6178                           ;mcp2515.c: 91: uint8_t bytes_written = SPI_exchange(buf, 3);
  6179  0E7C  3003               	movlw	3
  6180  0E7D  0020               	movlb	0	; select bank0
  6181  0E7E  00BB               	movwf	??_can_ope_mode
  6182  0E7F  083B               	movf	??_can_ope_mode,w
  6183  0E80  00F8               	movwf	SPI_exchange@len
  6184  0E81  30B3               	movlw	(low (_buf| 0))& (0+255)
  6185  0E82  318C  247F  318E   	fcall	_SPI_exchange
  6186  0E85  0020               	movlb	0	; select bank0
  6187  0E86  00BC               	movwf	??_can_ope_mode+1
  6188  0E87  083C               	movf	??_can_ope_mode+1,w
  6189  0E88  00BD               	movwf	can_ope_mode@bytes_written
  6190                           
  6191                           ;mcp2515.c: 93: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  6192  0E89  3080               	movlw	128
  6193  0E8A  063E               	xorwf	can_ope_mode@ope_mode,w
  6194  0E8B  1903               	btfsc	3,2
  6195  0E8C  2E91               	goto	l2145
  6196  0E8D  083E               	movf	can_ope_mode@ope_mode,w
  6197  0E8E  00BB               	movwf	??_can_ope_mode
  6198  0E8F  083B               	movf	??_can_ope_mode,w
  6199  0E90  00E8               	movwf	_operation_mode
  6200  0E91                     l2145:	
  6201                           
  6202                           ;mcp2515.c: 95: if (bytes_written == 3) {
  6203  0E91  3003               	movlw	3
  6204  0E92  063D               	xorwf	can_ope_mode@bytes_written,w
  6205  0E93  1D03               	btfss	3,2
  6206  0E94  0008               	return
  6207                           
  6208                           ;mcp2515.c: 96: buf[0] = 0b00000011u;
  6209  0E95  3003               	movlw	3
  6210  0E96  00BB               	movwf	??_can_ope_mode
  6211  0E97  083B               	movf	??_can_ope_mode,w
  6212  0E98  0021               	movlb	1	; select bank1
  6213  0E99  00B3               	movwf	_buf^(0+128)
  6214                           
  6215                           ;mcp2515.c: 97: buf[1] = 0x0e;
  6216  0E9A  300E               	movlw	14
  6217  0E9B  0020               	movlb	0	; select bank0
  6218  0E9C  00BB               	movwf	??_can_ope_mode
  6219  0E9D  083B               	movf	??_can_ope_mode,w
  6220  0E9E  0021               	movlb	1	; select bank1
  6221  0E9F  00B4               	movwf	(_buf^(0+128)+1)
  6222                           
  6223                           ;mcp2515.c: 98: bytes_written = SPI_exchange(buf, 3);
  6224  0EA0  3003               	movlw	3
  6225  0EA1  0020               	movlb	0	; select bank0
  6226  0EA2  00BB               	movwf	??_can_ope_mode
  6227  0EA3  083B               	movf	??_can_ope_mode,w
  6228  0EA4  00F8               	movwf	SPI_exchange@len
  6229  0EA5  30B3               	movlw	(low (_buf| 0))& (0+255)
  6230  0EA6  318C  247F  318E   	fcall	_SPI_exchange
  6231  0EA9  0020               	movlb	0	; select bank0
  6232  0EAA  00BC               	movwf	??_can_ope_mode+1
  6233  0EAB  083C               	movf	??_can_ope_mode+1,w
  6234  0EAC  00BD               	movwf	can_ope_mode@bytes_written
  6235                           
  6236                           ;mcp2515.c: 99: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6237  0EAD  0862               	movf	_mode,w
  6238  0EAE  1903               	btfsc	3,2
  6239  0EAF  0008               	return
  6240  0EB0  3074               	movlw	low (STR_22| (0+32768))
  6241  0EB1  00A2               	movwf	printf@f
  6242  0EB2  3093               	movlw	high (STR_22| (0+32768))
  6243  0EB3  00A3               	movwf	printf@f+1
  6244  0EB4  0021               	movlb	1	; select bank1
  6245  0EB5  0835               	movf	(_buf^(0+128)+2),w
  6246  0EB6  0020               	movlb	0	; select bank0
  6247  0EB7  00BB               	movwf	??_can_ope_mode
  6248  0EB8  01BC               	clrf	??_can_ope_mode+1
  6249  0EB9  083B               	movf	??_can_ope_mode,w
  6250  0EBA  00A4               	movwf	?_printf+2
  6251  0EBB  083C               	movf	??_can_ope_mode+1,w
  6252  0EBC  00A5               	movwf	?_printf+3
  6253  0EBD  3185  25B3         	fcall	_printf
  6254                           
  6255                           ;mcp2515.c: 102: return 0;
  6256                           ;	Return value of _can_ope_mode is never used
  6257                           
  6258                           ;mcp2515.c: 101: } else {
  6259                           
  6260                           ;mcp2515.c: 100: return 1;
  6261                           ;	Return value of _can_ope_mode is never used
  6262  0EBF  0008               	return
  6263  0EC0                     __end_of_can_ope_mode:	
  6264                           
  6265                           	psect	text15
  6266  05B3                     __ptext15:	
  6267 ;; *************** function _printf *****************
  6268 ;; Defined at:
  6269 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6272 ;;		 -> STR_55(5), STR_54(15), STR_53(15), STR_52(2), 
  6273 ;;		 -> STR_51(16), STR_50(16), STR_49(2), STR_48(16), 
  6274 ;;		 -> STR_47(16), STR_46(16), STR_45(2), STR_44(12), 
  6275 ;;		 -> STR_43(12), STR_42(12), STR_41(2), STR_40(12), 
  6276 ;;		 -> STR_39(12), STR_38(5), STR_37(13), STR_36(13), 
  6277 ;;		 -> STR_35(18), STR_34(17), STR_33(17), STR_32(20), 
  6278 ;;		 -> STR_31(14), STR_30(14), STR_29(14), STR_28(15), 
  6279 ;;		 -> STR_27(16), STR_26(17), STR_25(17), STR_24(23), 
  6280 ;;		 -> STR_23(21), STR_22(15), STR_21(22), STR_20(44), 
  6281 ;;		 -> STR_19(57), STR_18(26), STR_17(21), STR_16(38), 
  6282 ;;		 -> STR_15(25), STR_14(42), STR_13(38), STR_12(58), 
  6283 ;;		 -> STR_11(54), STR_10(59), STR_9(51), STR_7(36), 
  6284 ;;		 -> STR_6(3), STR_5(4), STR_4(2), STR_3(6), 
  6285 ;;		 -> STR_2(6), STR_1(7), 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  idx             1   14[BANK0 ] unsigned char 
  6288 ;;  tmpval          4    0        struct .
  6289 ;;  width           2   24[BANK0 ] int 
  6290 ;;  val             2   21[BANK0 ] unsigned int 
  6291 ;;  len             2   18[BANK0 ] unsigned int 
  6292 ;;  cp              2   16[BANK0 ] PTR const unsigned char 
  6293 ;;		 -> STR_56(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6294 ;;		 -> txf_clear@n(1), STR_8(20), main@buf(9), 
  6295 ;;  c               1   26[BANK0 ] char 
  6296 ;;  flag            1   23[BANK0 ] unsigned char 
  6297 ;;  ap              1   20[BANK0 ] PTR void [1]
  6298 ;;		 -> ?_printf(2), 
  6299 ;;  prec            1   15[BANK0 ] char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  2    2[BANK0 ] int 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:       25 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    2
  6316 ;; This function calls:
  6317 ;;		___lwdiv
  6318 ;;		___lwmod
  6319 ;;		___wmul
  6320 ;;		_isdigit
  6321 ;;		_putch
  6322 ;; This function is called by:
  6323 ;;		_receive_handler
  6324 ;;		_main
  6325 ;;		_can_ope_mode
  6326 ;;		_can_set_mask
  6327 ;;		_receive
  6328 ;;		_can_send
  6329 ;;		_can_status_check
  6330 ;;		_can_dump_registers
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _printf
  6336  05B3                     _printf:	
  6337                           
  6338                           ;doprnt.c: 466: va_list ap;
  6339                           ;doprnt.c: 499: signed char c;
  6340                           ;doprnt.c: 501: int width;
  6341                           ;doprnt.c: 506: signed char prec;
  6342                           ;doprnt.c: 508: unsigned char flag;
  6343                           ;doprnt.c: 523: union {
  6344                           ;doprnt.c: 524: unsigned long vd;
  6345                           ;doprnt.c: 525: double integ;
  6346                           ;doprnt.c: 526: } tmpval;
  6347                           ;doprnt.c: 528: unsigned int val;
  6348                           ;doprnt.c: 529: unsigned len;
  6349                           ;doprnt.c: 530: const char * cp;
  6350                           ;doprnt.c: 533: *ap = __va_start();
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6354  05B3  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6355  05B4  0020               	movlb	0	; select bank0
  6356  05B5  00AA               	movwf	??_printf
  6357  05B6  082A               	movf	??_printf,w
  6358  05B7  00B4               	movwf	printf@ap
  6359  05B8                     l2067:	
  6360                           ;doprnt.c: 536: while(c = *f++) {
  6361                           
  6362  05B8  0020               	movlb	0	; select bank0
  6363  05B9  0823               	movf	printf@f+1,w
  6364  05BA  00AB               	movwf	??_printf+1
  6365  05BB  0822               	movf	printf@f,w
  6366  05BC  00AA               	movwf	??_printf
  6367  05BD  0AA2               	incf	printf@f,f
  6368  05BE  1903               	skipnz
  6369  05BF  0AA3               	incf	printf@f+1,f
  6370  05C0  082A               	movf	??_printf,w
  6371  05C1  0084               	movwf	4
  6372  05C2  082B               	movf	??_printf+1,w
  6373  05C3  0085               	movwf	5
  6374  05C4  0800               	movf	0,w	;code access
  6375  05C5  00AC               	movwf	??_printf+2
  6376  05C6  082C               	movf	??_printf+2,w
  6377  05C7  00BA               	movwf	printf@c
  6378  05C8  083A               	movf	printf@c,w
  6379  05C9  1903               	btfsc	3,2
  6380  05CA  0008               	return
  6381                           
  6382                           ;doprnt.c: 538: if(c != '%')
  6383  05CB  3025               	movlw	37
  6384  05CC  063A               	xorwf	printf@c,w
  6385  05CD  1903               	btfsc	3,2
  6386  05CE  2DD4               	goto	l1919
  6387                           
  6388                           ;doprnt.c: 540: {
  6389                           ;doprnt.c: 541: (putch(c) );
  6390  05CF  083A               	movf	printf@c,w
  6391  05D0  318C  2418  3185   	fcall	_putch
  6392                           
  6393                           ;doprnt.c: 542: continue;
  6394  05D3  2DB8               	goto	l2067
  6395  05D4                     l1919:	
  6396                           
  6397                           ;doprnt.c: 543: }
  6398                           ;doprnt.c: 546: width = 0;
  6399  05D4  0020               	movlb	0	; select bank0
  6400  05D5  01B8               	clrf	printf@width
  6401  05D6  01B9               	clrf	printf@width+1
  6402                           
  6403                           ;doprnt.c: 548: flag = 0;
  6404  05D7  01B7               	clrf	printf@flag
  6405                           
  6406                           ;doprnt.c: 551: switch(*f) {
  6407                           
  6408                           ;doprnt.c: 550: for(;;) {
  6409  05D8  2DDE               	goto	l1925
  6410  05D9                     l385:	
  6411                           ;doprnt.c: 579: case '0':
  6412                           
  6413                           
  6414                           ;doprnt.c: 580: flag |= 0x04;
  6415  05D9  1537               	bsf	printf@flag,2
  6416                           
  6417                           ;doprnt.c: 581: f++;
  6418  05DA  3001               	movlw	1
  6419  05DB  07A2               	addwf	printf@f,f
  6420  05DC  3000               	movlw	0
  6421  05DD  3DA3               	addwfc	printf@f+1,f
  6422  05DE                     l1925:	
  6423                           ;doprnt.c: 584: }
  6424                           
  6425                           ;doprnt.c: 582: continue;
  6426                           
  6427  05DE  0822               	movf	printf@f,w
  6428  05DF  0084               	movwf	4
  6429  05E0  0823               	movf	printf@f+1,w
  6430  05E1  0085               	movwf	5
  6431  05E2  0800               	movf	0,w	;code access
  6432                           
  6433                           ; Switch size 1, requested type "space"
  6434                           ; Number of cases is 1, Range of values is 48 to 48
  6435                           ; switch strategies available:
  6436                           ; Name         Instructions Cycles
  6437                           ; simple_byte            4     3 (average)
  6438                           ; direct_byte           11     9 (fixed)
  6439                           ; jumptable            263     9 (fixed)
  6440                           ;	Chosen strategy is simple_byte
  6441  05E3  3A30               	xorlw	48	; case 48
  6442  05E4  1903               	skipnz
  6443  05E5  2DD9               	goto	l385
  6444  05E6  2DE7               	goto	l1927
  6445  05E7                     l1927:	
  6446                           ;doprnt.c: 586: }
  6447                           
  6448                           ;doprnt.c: 585: break;
  6449                           
  6450                           
  6451                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6452  05E7  0822               	movf	printf@f,w
  6453  05E8  0084               	movwf	4
  6454  05E9  0823               	movf	printf@f+1,w
  6455  05EA  0085               	movwf	5
  6456  05EB  0800               	movf	0,w	;code access
  6457  05EC  318C  2462  3185   	fcall	_isdigit
  6458  05EF  1C03               	btfss	3,0
  6459  05F0  2E92               	goto	l1979
  6460                           
  6461                           ;doprnt.c: 598: width = 0;
  6462  05F1  0020               	movlb	0	; select bank0
  6463  05F2  01B8               	clrf	printf@width
  6464  05F3  01B9               	clrf	printf@width+1
  6465  05F4                     l1931:	
  6466                           ;doprnt.c: 599: do {
  6467                           
  6468                           
  6469                           ;doprnt.c: 600: width *= 10;
  6470  05F4  300A               	movlw	10
  6471  05F5  00F0               	movwf	___wmul@multiplier
  6472  05F6  3000               	movlw	0
  6473  05F7  00F1               	movwf	___wmul@multiplier+1
  6474  05F8  0020               	movlb	0	; select bank0
  6475  05F9  0839               	movf	printf@width+1,w
  6476  05FA  00F3               	movwf	___wmul@multiplicand+1
  6477  05FB  0838               	movf	printf@width,w
  6478  05FC  00F2               	movwf	___wmul@multiplicand
  6479  05FD  318C  24C4  3185   	fcall	___wmul
  6480  0600  0871               	movf	?___wmul+1,w
  6481  0601  0020               	movlb	0	; select bank0
  6482  0602  00B9               	movwf	printf@width+1
  6483  0603  0870               	movf	?___wmul,w
  6484  0604  00B8               	movwf	printf@width
  6485                           
  6486                           ;doprnt.c: 601: width += *f++ - '0';
  6487  0605  0822               	movf	printf@f,w
  6488  0606  0084               	movwf	4
  6489  0607  0823               	movf	printf@f+1,w
  6490  0608  0085               	movwf	5
  6491  0609  0800               	movf	0,w	;code access
  6492  060A  3ED0               	addlw	208
  6493  060B  00AA               	movwf	??_printf
  6494  060C  30FF               	movlw	255
  6495  060D  1803               	skipnc
  6496  060E  3000               	movlw	0
  6497  060F  00AB               	movwf	??_printf+1
  6498  0610  082A               	movf	??_printf,w
  6499  0611  07B8               	addwf	printf@width,f
  6500  0612  082B               	movf	??_printf+1,w
  6501  0613  3DB9               	addwfc	printf@width+1,f
  6502  0614  3001               	movlw	1
  6503  0615  07A2               	addwf	printf@f,f
  6504  0616  3000               	movlw	0
  6505  0617  3DA3               	addwfc	printf@f+1,f
  6506                           
  6507                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6508  0618  0822               	movf	printf@f,w
  6509  0619  0084               	movwf	4
  6510  061A  0823               	movf	printf@f+1,w
  6511  061B  0085               	movwf	5
  6512  061C  0800               	movf	0,w	;code access
  6513  061D  318C  2462  3185   	fcall	_isdigit
  6514  0620  1C03               	btfss	3,0
  6515  0621  2E92               	goto	l1979
  6516  0622  2DF4               	goto	l1931
  6517  0623                     l398:	
  6518                           ;doprnt.c: 718: case 'x':
  6519                           
  6520                           ;doprnt.c: 698: case 'i':
  6521                           ;doprnt.c: 699: break;
  6522                           
  6523                           ;doprnt.c: 697: case 'd':
  6524                           
  6525                           ;doprnt.c: 638: goto alldone;
  6526                           
  6527                           ;doprnt.c: 637: case 0:
  6528                           
  6529                           ;doprnt.c: 608: }
  6530                           ;doprnt.c: 635: switch(c = *f++) {
  6531                           
  6532                           
  6533                           ;doprnt.c: 721: flag |= 0x80;
  6534  0623  17B7               	bsf	printf@flag,7
  6535                           
  6536                           ;doprnt.c: 723: break;
  6537  0624  2EB3               	goto	l397
  6538  0625                     l1939:	
  6539                           ;doprnt.c: 728: case 's':
  6540                           
  6541                           
  6542                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6543  0625  0834               	movf	printf@ap,w
  6544  0626  0086               	movwf	6
  6545  0627  0187               	clrf	7
  6546  0628  3F40               	moviw [0]fsr1
  6547  0629  00B0               	movwf	printf@cp
  6548  062A  3F41               	moviw [1]fsr1
  6549  062B  00B1               	movwf	printf@cp+1
  6550  062C  3002               	movlw	2
  6551  062D  00AA               	movwf	??_printf
  6552  062E  082A               	movf	??_printf,w
  6553  062F  07B4               	addwf	printf@ap,f
  6554                           
  6555                           ;doprnt.c: 740: if(!cp)
  6556  0630  0830               	movf	printf@cp,w
  6557  0631  0431               	iorwf	printf@cp+1,w
  6558  0632  1D03               	btfss	3,2
  6559  0633  2E38               	goto	l1947
  6560                           
  6561                           ;doprnt.c: 741: cp = "(null)";
  6562  0634  30FD               	movlw	low (STR_56| (0+32768))
  6563  0635  00B0               	movwf	printf@cp
  6564  0636  3093               	movlw	high (STR_56| (0+32768))
  6565  0637  00B1               	movwf	printf@cp+1
  6566  0638                     l1947:	
  6567                           
  6568                           ;doprnt.c: 745: len = 0;
  6569  0638  01B2               	clrf	printf@len
  6570  0639  01B3               	clrf	printf@len+1
  6571  063A                     l1951:	
  6572                           ;doprnt.c: 746: while(cp[len])
  6573                           
  6574  063A  0830               	movf	printf@cp,w
  6575  063B  0732               	addwf	printf@len,w
  6576  063C  0084               	movwf	4
  6577  063D  0831               	movf	printf@cp+1,w
  6578  063E  3D33               	addwfc	printf@len+1,w
  6579  063F  0085               	movwf	5
  6580  0640  0012               	moviw fsr0++
  6581  0641  1903               	btfsc	3,2
  6582  0642  2E48               	goto	l1953
  6583                           
  6584                           ;doprnt.c: 747: len++;
  6585  0643  3001               	movlw	1
  6586  0644  07B2               	addwf	printf@len,f
  6587  0645  3000               	movlw	0
  6588  0646  3DB3               	addwfc	printf@len+1,f
  6589  0647  2E3A               	goto	l1951
  6590  0648                     l1953:	
  6591                           ;doprnt.c: 750: dostring:
  6592                           
  6593                           
  6594                           ;doprnt.c: 757: if(width > len)
  6595  0648  0839               	movf	printf@width+1,w
  6596  0649  0233               	subwf	printf@len+1,w
  6597  064A  1D03               	skipz
  6598  064B  2E4E               	goto	u1525
  6599  064C  0838               	movf	printf@width,w
  6600  064D  0232               	subwf	printf@len,w
  6601  064E                     u1525:	
  6602  064E  1803               	skipnc
  6603  064F  2E55               	goto	l1957
  6604                           
  6605                           ;doprnt.c: 758: width -= len;
  6606  0650  0832               	movf	printf@len,w
  6607  0651  02B8               	subwf	printf@width,f
  6608  0652  0833               	movf	printf@len+1,w
  6609  0653  3BB9               	subwfb	printf@width+1,f
  6610  0654  2E57               	goto	l1961
  6611  0655                     l1957:	
  6612                           
  6613                           ;doprnt.c: 759: else
  6614                           ;doprnt.c: 760: width = 0;
  6615  0655  01B8               	clrf	printf@width
  6616  0656  01B9               	clrf	printf@width+1
  6617  0657                     l1961:	
  6618                           ;doprnt.c: 764: while(width--)
  6619                           
  6620  0657  30FF               	movlw	255
  6621  0658  0020               	movlb	0	; select bank0
  6622  0659  07B8               	addwf	printf@width,f
  6623  065A  30FF               	movlw	255
  6624  065B  3DB9               	addwfc	printf@width+1,f
  6625  065C  0A38               	incf	printf@width,w
  6626  065D  1903               	btfsc	3,2
  6627  065E  0A39               	incf	printf@width+1,w
  6628  065F  1903               	btfsc	3,2
  6629  0660  2E73               	goto	l1967
  6630                           
  6631                           ;doprnt.c: 765: (putch(' ') );
  6632  0661  3020               	movlw	32
  6633  0662  318C  2418  3185   	fcall	_putch
  6634  0665  2E57               	goto	l1961
  6635  0666                     l1963:	
  6636                           ;doprnt.c: 767: while(len--)
  6637                           
  6638                           
  6639                           ;doprnt.c: 768: (putch(*cp++) );
  6640  0666  0830               	movf	printf@cp,w
  6641  0667  0084               	movwf	4
  6642  0668  0831               	movf	printf@cp+1,w
  6643  0669  0085               	movwf	5
  6644  066A  0800               	movf	0,w	;code access
  6645  066B  318C  2418  3185   	fcall	_putch
  6646  066E  3001               	movlw	1
  6647  066F  0020               	movlb	0	; select bank0
  6648  0670  07B0               	addwf	printf@cp,f
  6649  0671  3000               	movlw	0
  6650  0672  3DB1               	addwfc	printf@cp+1,f
  6651  0673                     l1967:	
  6652  0673  3001               	movlw	1
  6653  0674  02B2               	subwf	printf@len,f
  6654  0675  3000               	movlw	0
  6655  0676  3BB3               	subwfb	printf@len+1,f
  6656  0677  0A32               	incf	printf@len,w
  6657  0678  1D03               	skipz
  6658  0679  2E66               	goto	l1963
  6659  067A  0A33               	incf	printf@len+1,w
  6660  067B  1903               	btfsc	3,2
  6661  067C  2DB8               	goto	l2067
  6662  067D  2E66               	goto	l1963
  6663  067E                     l1969:	
  6664                           ;doprnt.c: 784: case 'c':
  6665                           
  6666                           ;doprnt.c: 774: continue;
  6667                           
  6668                           
  6669                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6670  067E  0834               	movf	printf@ap,w
  6671  067F  0086               	movwf	6
  6672  0680  0187               	clrf	7
  6673  0681  0801               	movf	1,w
  6674  0682  00AA               	movwf	??_printf
  6675  0683  082A               	movf	??_printf,w
  6676  0684  00BA               	movwf	printf@c
  6677  0685  3002               	movlw	2
  6678  0686  00AA               	movwf	??_printf
  6679  0687  082A               	movf	??_printf,w
  6680  0688  07B4               	addwf	printf@ap,f
  6681  0689                     l1973:	
  6682                           ;doprnt.c: 802: default:
  6683                           
  6684                           
  6685                           ;doprnt.c: 805: cp = (char *)&c;
  6686  0689  303A               	movlw	low printf@c
  6687  068A  00B0               	movwf	printf@cp
  6688  068B  3000               	movlw	high printf@c
  6689  068C  00B1               	movwf	printf@cp+1
  6690                           
  6691                           ;doprnt.c: 806: len = 1;
  6692  068D  3001               	movlw	1
  6693  068E  00B2               	movwf	printf@len
  6694  068F  3000               	movlw	0
  6695  0690  00B3               	movwf	printf@len+1
  6696                           
  6697                           ;doprnt.c: 807: goto dostring;
  6698  0691  2E48               	goto	l1953
  6699  0692                     l1979:	
  6700                           ;doprnt.c: 822: }
  6701                           
  6702  0692  0020               	movlb	0	; select bank0
  6703  0693  0823               	movf	printf@f+1,w
  6704  0694  00AB               	movwf	??_printf+1
  6705  0695  0822               	movf	printf@f,w
  6706  0696  00AA               	movwf	??_printf
  6707  0697  0AA2               	incf	printf@f,f
  6708  0698  1903               	skipnz
  6709  0699  0AA3               	incf	printf@f+1,f
  6710  069A  082A               	movf	??_printf,w
  6711  069B  0084               	movwf	4
  6712  069C  082B               	movf	??_printf+1,w
  6713  069D  0085               	movwf	5
  6714  069E  0800               	movf	0,w	;code access
  6715  069F  00BA               	movwf	printf@c
  6716                           
  6717                           ; Switch size 1, requested type "space"
  6718                           ; Number of cases is 6, Range of values is 0 to 120
  6719                           ; switch strategies available:
  6720                           ; Name         Instructions Cycles
  6721                           ; simple_byte           19    10 (average)
  6722                           ; direct_byte          248     6 (fixed)
  6723                           ; jumptable            260     6 (fixed)
  6724                           ;	Chosen strategy is simple_byte
  6725  06A0  3A00               	xorlw	0	; case 0
  6726  06A1  1903               	skipnz
  6727  06A2  2FED               	goto	l449
  6728  06A3  3A63               	xorlw	99	; case 99
  6729  06A4  1903               	skipnz
  6730  06A5  2E7E               	goto	l1969
  6731  06A6  3A07               	xorlw	7	; case 100
  6732  06A7  1903               	skipnz
  6733  06A8  2EB3               	goto	l397
  6734  06A9  3A0D               	xorlw	13	; case 105
  6735  06AA  1903               	skipnz
  6736  06AB  2EB3               	goto	l397
  6737  06AC  3A1A               	xorlw	26	; case 115
  6738  06AD  1903               	skipnz
  6739  06AE  2E25               	goto	l1939
  6740  06AF  3A0B               	xorlw	11	; case 120
  6741  06B0  1903               	skipnz
  6742  06B1  2E23               	goto	l398
  6743  06B2  2E89               	goto	l1973
  6744  06B3                     l397:	
  6745                           
  6746                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6747  06B3  0020               	movlb	0	; select bank0
  6748  06B4  1BB7               	btfsc	printf@flag,7
  6749  06B5  2ECD               	goto	l1991
  6750                           
  6751                           ;doprnt.c: 1253: {
  6752                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6753  06B6  0834               	movf	printf@ap,w
  6754  06B7  0086               	movwf	6
  6755  06B8  0187               	clrf	7
  6756  06B9  3F40               	moviw [0]fsr1
  6757  06BA  00B5               	movwf	printf@val
  6758  06BB  3F41               	moviw [1]fsr1
  6759  06BC  00B6               	movwf	printf@val+1
  6760  06BD  3002               	movlw	2
  6761  06BE  00AA               	movwf	??_printf
  6762  06BF  082A               	movf	??_printf,w
  6763  06C0  07B4               	addwf	printf@ap,f
  6764                           
  6765                           ;doprnt.c: 1261: if((int)val < 0) {
  6766  06C1  1FB6               	btfss	printf@val+1,7
  6767  06C2  2F1D               	goto	l2017
  6768                           
  6769                           ;doprnt.c: 1262: flag |= 0x03;
  6770  06C3  3003               	movlw	3
  6771  06C4  00AA               	movwf	??_printf
  6772  06C5  082A               	movf	??_printf,w
  6773  06C6  04B7               	iorwf	printf@flag,f
  6774                           
  6775                           ;doprnt.c: 1263: val = -val;
  6776  06C7  09B5               	comf	printf@val,f
  6777  06C8  09B6               	comf	printf@val+1,f
  6778  06C9  0AB5               	incf	printf@val,f
  6779  06CA  1903               	skipnz
  6780  06CB  0AB6               	incf	printf@val+1,f
  6781                           
  6782                           ;doprnt.c: 1264: }
  6783                           ;doprnt.c: 1266: }
  6784  06CC  2F1D               	goto	l2017
  6785  06CD                     l1991:	
  6786                           
  6787                           ;doprnt.c: 1268: else
  6788                           ;doprnt.c: 1273: {
  6789                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6790  06CD  0834               	movf	printf@ap,w
  6791  06CE  0086               	movwf	6
  6792  06CF  0187               	clrf	7
  6793  06D0  3F40               	moviw [0]fsr1
  6794  06D1  00B5               	movwf	printf@val
  6795  06D2  3F41               	moviw [1]fsr1
  6796  06D3  00B6               	movwf	printf@val+1
  6797  06D4  3002               	movlw	2
  6798  06D5  00AA               	movwf	??_printf
  6799  06D6  082A               	movf	??_printf,w
  6800  06D7  07B4               	addwf	printf@ap,f
  6801                           
  6802                           ;doprnt.c: 1287: }
  6803                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6804  06D8  2F1D               	goto	l2017
  6805  06D9                     l419:	
  6806                           ;doprnt.c: 1299: case 0x00:
  6807                           
  6808                           
  6809                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6810  06D9  01BA               	clrf	printf@c
  6811  06DA  0ABA               	incf	printf@c,f
  6812  06DB                     L9:	
  6813  06DB  3005               	movlw	5
  6814  06DC  063A               	xorwf	printf@c,w
  6815  06DD  1903               	btfsc	3,2
  6816  06DE  2F26               	goto	l2019
  6817                           
  6818                           ;doprnt.c: 1306: if(val < dpowers[c])
  6819  06DF  083A               	movf	printf@c,w
  6820  06E0  00AA               	movwf	??_printf
  6821  06E1  01AB               	clrf	??_printf+1
  6822  06E2  35AA               	lslf	??_printf,f
  6823  06E3  0DAB               	rlf	??_printf+1,f
  6824  06E4  30EB               	movlw	low (_dpowers| (0+32768))
  6825  06E5  072A               	addwf	??_printf,w
  6826  06E6  0084               	movwf	4
  6827  06E7  3093               	movlw	high (_dpowers| (0+32768))
  6828  06E8  3D2B               	addwfc	??_printf+1,w
  6829  06E9  0085               	movwf	5
  6830  06EA  3F00               	moviw [0]fsr0
  6831  06EB  00AC               	movwf	??_printf+2
  6832  06EC  3F01               	moviw [1]fsr0
  6833  06ED  00AD               	movwf	??_printf+3
  6834  06EE  082D               	movf	??_printf+3,w
  6835  06EF  0236               	subwf	printf@val+1,w
  6836  06F0  1D03               	skipz
  6837  06F1  2EF4               	goto	u1585
  6838  06F2  082C               	movf	??_printf+2,w
  6839  06F3  0235               	subwf	printf@val,w
  6840  06F4                     u1585:	
  6841  06F4  1C03               	btfss	3,0
  6842  06F5  2F26               	goto	l2019
  6843                           
  6844                           ;doprnt.c: 1307: break;
  6845  06F6  3001               	movlw	1
  6846  06F7  00AA               	movwf	??_printf
  6847  06F8  082A               	movf	??_printf,w
  6848  06F9  07BA               	addwf	printf@c,f
  6849  06FA  2EDB               	goto	L9
  6850  06FB                     l424:	
  6851                           ;doprnt.c: 1314: case 0x80:
  6852                           
  6853                           ;doprnt.c: 1309: break;
  6854                           
  6855                           
  6856                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6857  06FB  01BA               	clrf	printf@c
  6858  06FC  0ABA               	incf	printf@c,f
  6859  06FD                     L10:	
  6860  06FD  3004               	movlw	4
  6861  06FE  063A               	xorwf	printf@c,w
  6862  06FF  1903               	btfsc	3,2
  6863  0700  2F26               	goto	l2019
  6864                           
  6865                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6866  0701  083A               	movf	printf@c,w
  6867  0702  00AA               	movwf	??_printf
  6868  0703  01AB               	clrf	??_printf+1
  6869  0704  35AA               	lslf	??_printf,f
  6870  0705  0DAB               	rlf	??_printf+1,f
  6871  0706  30F5               	movlw	low (_hexpowers| (0+32768))
  6872  0707  072A               	addwf	??_printf,w
  6873  0708  0084               	movwf	4
  6874  0709  3093               	movlw	high (_hexpowers| (0+32768))
  6875  070A  3D2B               	addwfc	??_printf+1,w
  6876  070B  0085               	movwf	5
  6877  070C  3F00               	moviw [0]fsr0
  6878  070D  00AC               	movwf	??_printf+2
  6879  070E  3F01               	moviw [1]fsr0
  6880  070F  00AD               	movwf	??_printf+3
  6881  0710  082D               	movf	??_printf+3,w
  6882  0711  0236               	subwf	printf@val+1,w
  6883  0712  1D03               	skipz
  6884  0713  2F16               	goto	u1615
  6885  0714  082C               	movf	??_printf+2,w
  6886  0715  0235               	subwf	printf@val,w
  6887  0716                     u1615:	
  6888  0716  1C03               	btfss	3,0
  6889  0717  2F26               	goto	l2019
  6890                           
  6891                           ;doprnt.c: 1318: break;
  6892  0718  3001               	movlw	1
  6893  0719  00AA               	movwf	??_printf
  6894  071A  082A               	movf	??_printf,w
  6895  071B  07BA               	addwf	printf@c,f
  6896  071C  2EFD               	goto	L10
  6897  071D                     l2017:	
  6898                           ;doprnt.c: 1336: }
  6899                           
  6900                           ;doprnt.c: 1320: break;
  6901                           
  6902  071D  0837               	movf	printf@flag,w
  6903  071E  3980               	andlw	128
  6904                           
  6905                           ; Switch size 1, requested type "space"
  6906                           ; Number of cases is 2, Range of values is 0 to 128
  6907                           ; switch strategies available:
  6908                           ; Name         Instructions Cycles
  6909                           ; simple_byte            7     4 (average)
  6910                           ; jumptable            260     6 (fixed)
  6911                           ;	Chosen strategy is simple_byte
  6912  071F  3A00               	xorlw	0	; case 0
  6913  0720  1903               	skipnz
  6914  0721  2ED9               	goto	l419
  6915  0722  3A80               	xorlw	128	; case 128
  6916  0723  1903               	skipnz
  6917  0724  2EFB               	goto	l424
  6918  0725  2F26               	goto	l2019
  6919  0726                     l2019:	
  6920                           
  6921                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6922  0726  0838               	movf	printf@width,w
  6923  0727  0439               	iorwf	printf@width+1,w
  6924  0728  1903               	btfsc	3,2
  6925  0729  2F32               	goto	l428
  6926  072A  0837               	movf	printf@flag,w
  6927  072B  3903               	andlw	3
  6928  072C  1903               	btfsc	3,2
  6929  072D  2F32               	goto	l428
  6930                           
  6931                           ;doprnt.c: 1346: width--;
  6932  072E  30FF               	movlw	255
  6933  072F  07B8               	addwf	printf@width,f
  6934  0730  30FF               	movlw	255
  6935  0731  3DB9               	addwfc	printf@width+1,f
  6936  0732                     l428:	
  6937                           
  6938                           ;doprnt.c: 1381: if(width > c)
  6939  0732  083A               	movf	printf@c,w
  6940  0733  00AA               	movwf	??_printf
  6941  0734  01AB               	clrf	??_printf+1
  6942  0735  1BAA               	btfsc	??_printf,7
  6943  0736  03AB               	decf	??_printf+1,f
  6944  0737  082B               	movf	??_printf+1,w
  6945  0738  3A80               	xorlw	128
  6946  0739  00AC               	movwf	??_printf+2
  6947  073A  0839               	movf	printf@width+1,w
  6948  073B  3A80               	xorlw	128
  6949  073C  022C               	subwf	??_printf+2,w
  6950  073D  1D03               	skipz
  6951  073E  2F41               	goto	u1655
  6952  073F  0838               	movf	printf@width,w
  6953  0740  022A               	subwf	??_printf,w
  6954  0741                     u1655:	
  6955  0741  1803               	skipnc
  6956  0742  2F4E               	goto	l2027
  6957                           
  6958                           ;doprnt.c: 1382: width -= c;
  6959  0743  0020               	movlb	0	; select bank0
  6960  0744  083A               	movf	printf@c,w
  6961  0745  00AA               	movwf	??_printf
  6962  0746  01AB               	clrf	??_printf+1
  6963  0747  1BAA               	btfsc	??_printf,7
  6964  0748  03AB               	decf	??_printf+1,f
  6965  0749  082A               	movf	??_printf,w
  6966  074A  02B8               	subwf	printf@width,f
  6967  074B  082B               	movf	??_printf+1,w
  6968  074C  3BB9               	subwfb	printf@width+1,f
  6969  074D  2F51               	goto	l2029
  6970  074E                     l2027:	
  6971                           
  6972                           ;doprnt.c: 1383: else
  6973                           ;doprnt.c: 1384: width = 0;
  6974  074E  0020               	movlb	0	; select bank0
  6975  074F  01B8               	clrf	printf@width
  6976  0750  01B9               	clrf	printf@width+1
  6977  0751                     l2029:	
  6978                           
  6979                           ;doprnt.c: 1387: if(flag & 0x04) {
  6980  0751  1D37               	btfss	printf@flag,2
  6981  0752  2F6A               	goto	l2041
  6982                           
  6983                           ;doprnt.c: 1392: if(flag & 0x03)
  6984  0753  0837               	movf	printf@flag,w
  6985  0754  3903               	andlw	3
  6986  0755  1903               	btfsc	3,2
  6987  0756  2F5B               	goto	l2035
  6988                           
  6989                           ;doprnt.c: 1393: (putch('-') );
  6990  0757  302D               	movlw	45
  6991  0758  318C  2418  3185   	fcall	_putch
  6992  075B                     l2035:	
  6993                           
  6994                           ;doprnt.c: 1415: if(width)
  6995  075B  0020               	movlb	0	; select bank0
  6996  075C                     L11:	
  6997  075C  0838               	movf	printf@width,w
  6998  075D  0439               	iorwf	printf@width+1,w
  6999  075E  1903               	btfsc	3,2
  7000  075F  2F83               	goto	l2051
  7001                           
  7002                           ;doprnt.c: 1417: (putch('0') );
  7003                           
  7004                           ;doprnt.c: 1416: do
  7005  0760  3030               	movlw	48
  7006  0761  318C  2418  3185   	fcall	_putch
  7007                           
  7008                           ;doprnt.c: 1418: while(--width);
  7009  0764  30FF               	movlw	255
  7010  0765  0020               	movlb	0	; select bank0
  7011  0766  07B8               	addwf	printf@width,f
  7012  0767  30FF               	movlw	255
  7013  0768  3DB9               	addwfc	printf@width+1,f
  7014  0769  2F5C               	goto	L11
  7015  076A                     l2041:	
  7016                           ;doprnt.c: 1420: } else
  7017                           
  7018                           
  7019                           ;doprnt.c: 1422: {
  7020                           ;doprnt.c: 1424: if(width
  7021                           ;doprnt.c: 1428: )
  7022  076A  0838               	movf	printf@width,w
  7023  076B  0439               	iorwf	printf@width+1,w
  7024  076C  1903               	btfsc	3,2
  7025  076D  2F7B               	goto	l2047
  7026  076E                     l2043:	
  7027                           ;doprnt.c: 1429: do
  7028                           
  7029                           
  7030                           ;doprnt.c: 1430: (putch(' ') );
  7031  076E  3020               	movlw	32
  7032  076F  318C  2418  3185   	fcall	_putch
  7033                           
  7034                           ;doprnt.c: 1431: while(--width);
  7035  0772  30FF               	movlw	255
  7036  0773  0020               	movlb	0	; select bank0
  7037  0774  07B8               	addwf	printf@width,f
  7038  0775  30FF               	movlw	255
  7039  0776  3DB9               	addwfc	printf@width+1,f
  7040  0777  0838               	movf	printf@width,w
  7041  0778  0439               	iorwf	printf@width+1,w
  7042  0779  1D03               	btfss	3,2
  7043  077A  2F6E               	goto	l2043
  7044  077B                     l2047:	
  7045                           
  7046                           ;doprnt.c: 1438: if(flag & 0x03)
  7047  077B  0837               	movf	printf@flag,w
  7048  077C  3903               	andlw	3
  7049  077D  1903               	btfsc	3,2
  7050  077E  2F83               	goto	l2051
  7051                           
  7052                           ;doprnt.c: 1439: (putch('-') );
  7053  077F  302D               	movlw	45
  7054  0780  318C  2418  3185   	fcall	_putch
  7055  0783                     l2051:	
  7056                           
  7057                           ;doprnt.c: 1469: }
  7058                           ;doprnt.c: 1472: prec = c;
  7059  0783  0020               	movlb	0	; select bank0
  7060  0784  083A               	movf	printf@c,w
  7061  0785  00AA               	movwf	??_printf
  7062  0786  082A               	movf	??_printf,w
  7063  0787  00AF               	movwf	printf@prec
  7064                           
  7065                           ;doprnt.c: 1474: while(prec--) {
  7066  0788  2FDB               	goto	l2065
  7067  0789                     l2053:	
  7068                           ;doprnt.c: 1478: {
  7069                           ;doprnt.c: 1483: case 0x00:
  7070                           
  7071                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7072                           
  7073                           
  7074                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7075  0789  300A               	movlw	10
  7076  078A  00F8               	movwf	___lwmod@divisor
  7077  078B  3000               	movlw	0
  7078  078C  00F9               	movwf	___lwmod@divisor+1
  7079  078D  082F               	movf	printf@prec,w
  7080  078E  00AA               	movwf	??_printf
  7081  078F  01AB               	clrf	??_printf+1
  7082  0790  35AA               	lslf	??_printf,f
  7083  0791  0DAB               	rlf	??_printf+1,f
  7084  0792  30EB               	movlw	low (_dpowers| (0+32768))
  7085  0793  072A               	addwf	??_printf,w
  7086  0794  0084               	movwf	4
  7087  0795  3093               	movlw	high (_dpowers| (0+32768))
  7088  0796  3D2B               	addwfc	??_printf+1,w
  7089  0797  0085               	movwf	5
  7090  0798  3F00               	moviw [0]fsr0
  7091  0799  00F0               	movwf	___lwdiv@divisor
  7092  079A  3F01               	moviw [1]fsr0
  7093  079B  00F1               	movwf	___lwdiv@divisor+1
  7094  079C  0836               	movf	printf@val+1,w
  7095  079D  00F3               	movwf	___lwdiv@dividend+1
  7096  079E  0835               	movf	printf@val,w
  7097  079F  00F2               	movwf	___lwdiv@dividend
  7098  07A0  318D  2591  3185   	fcall	___lwdiv
  7099  07A3  0871               	movf	?___lwdiv+1,w
  7100  07A4  00FB               	movwf	___lwmod@dividend+1
  7101  07A5  0870               	movf	?___lwdiv,w
  7102  07A6  00FA               	movwf	___lwmod@dividend
  7103  07A7  3180  2004  3185   	fcall	___lwmod
  7104  07AA  0878               	movf	?___lwmod,w
  7105  07AB  3E30               	addlw	48
  7106  07AC  0020               	movlb	0	; select bank0
  7107  07AD  00AC               	movwf	??_printf+2
  7108  07AE  082C               	movf	??_printf+2,w
  7109  07AF  2FD6               	goto	L8
  7110  07B0                     l2055:	
  7111                           ;doprnt.c: 1497: case 0x80:
  7112                           
  7113                           ;doprnt.c: 1491: break;
  7114                           
  7115                           
  7116                           ;doprnt.c: 1499: {
  7117                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7118  07B0  082F               	movf	printf@prec,w
  7119  07B1  00AA               	movwf	??_printf
  7120  07B2  01AB               	clrf	??_printf+1
  7121  07B3  35AA               	lslf	??_printf,f
  7122  07B4  0DAB               	rlf	??_printf+1,f
  7123  07B5  30F5               	movlw	low (_hexpowers| (0+32768))
  7124  07B6  072A               	addwf	??_printf,w
  7125  07B7  0084               	movwf	4
  7126  07B8  3093               	movlw	high (_hexpowers| (0+32768))
  7127  07B9  3D2B               	addwfc	??_printf+1,w
  7128  07BA  0085               	movwf	5
  7129  07BB  3F00               	moviw [0]fsr0
  7130  07BC  00F0               	movwf	___lwdiv@divisor
  7131  07BD  3F01               	moviw [1]fsr0
  7132  07BE  00F1               	movwf	___lwdiv@divisor+1
  7133  07BF  0836               	movf	printf@val+1,w
  7134  07C0  00F3               	movwf	___lwdiv@dividend+1
  7135  07C1  0835               	movf	printf@val,w
  7136  07C2  00F2               	movwf	___lwdiv@dividend
  7137  07C3  318D  2591  3185   	fcall	___lwdiv
  7138  07C6  0870               	movf	?___lwdiv,w
  7139  07C7  390F               	andlw	15
  7140  07C8  0020               	movlb	0	; select bank0
  7141  07C9  00AC               	movwf	??_printf+2
  7142  07CA  082C               	movf	??_printf+2,w
  7143  07CB  00AE               	movwf	printf@idx
  7144                           
  7145                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7146  07CC  082E               	movf	printf@idx,w
  7147  07CD  3EA1               	addlw	low (STR_57| (0+32768))
  7148  07CE  0084               	movwf	4
  7149  07CF  3092               	movlw	high (STR_57| (0+32768))
  7150  07D0  1803               	skipnc
  7151  07D1  3E01               	addlw	1
  7152  07D2  0085               	movwf	5
  7153  07D3  0800               	movf	0,w	;code access
  7154  07D4  00AA               	movwf	??_printf
  7155  07D5  082A               	movf	??_printf,w
  7156  07D6                     L8:	
  7157  07D6  00BA               	movwf	printf@c
  7158  07D7                     l2063:	
  7159                           ;doprnt.c: 1523: }
  7160                           
  7161                           ;doprnt.c: 1508: }
  7162                           ;doprnt.c: 1510: break;
  7163                           
  7164                           
  7165                           ;doprnt.c: 1524: (putch(c) );
  7166  07D7  083A               	movf	printf@c,w
  7167  07D8  318C  2418  3185   	fcall	_putch
  7168  07DB                     l2065:	
  7169  07DB  30FF               	movlw	255
  7170  07DC  0020               	movlb	0	; select bank0
  7171  07DD  00AA               	movwf	??_printf
  7172  07DE  082A               	movf	??_printf,w
  7173  07DF  07AF               	addwf	printf@prec,f
  7174  07E0  0A2F               	incf	printf@prec,w
  7175  07E1  1903               	btfsc	3,2
  7176  07E2  2DB8               	goto	l2067
  7177  07E3  0837               	movf	printf@flag,w
  7178  07E4  3980               	andlw	128
  7179                           
  7180                           ; Switch size 1, requested type "space"
  7181                           ; Number of cases is 2, Range of values is 0 to 128
  7182                           ; switch strategies available:
  7183                           ; Name         Instructions Cycles
  7184                           ; simple_byte            7     4 (average)
  7185                           ; jumptable            260     6 (fixed)
  7186                           ;	Chosen strategy is simple_byte
  7187  07E5  3A00               	xorlw	0	; case 0
  7188  07E6  1903               	skipnz
  7189  07E7  2F89               	goto	l2053
  7190  07E8  3A80               	xorlw	128	; case 128
  7191  07E9  1903               	skipnz
  7192  07EA  2FB0               	goto	l2055
  7193  07EB  2FD7               	goto	l2063
  7194  07EC  2FD7               	goto	l2063
  7195  07ED                     l449:	
  7196                           ;doprnt.c: 1540: return 0;
  7197                           ;	Return value of _printf is never used
  7198                           
  7199                           ;doprnt.c: 1525: }
  7200                           ;doprnt.c: 1533: }
  7201                           ;doprnt.c: 1535: alldone:
  7202                           
  7203  07ED  0008               	return
  7204  07EE                     __end_of_printf:	
  7205                           
  7206                           	psect	text16
  7207  0C18                     __ptext16:	
  7208 ;; *************** function _putch *****************
  7209 ;; Defined at:
  7210 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  txData          1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  txData          1    1[COMMON] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        1 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    1
  7231 ;; This function calls:
  7232 ;;		_EUSART_Write
  7233 ;; This function is called by:
  7234 ;;		_printf
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _putch
  7240  0C18                     _putch:	
  7241                           
  7242                           ;incstack = 0
  7243                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7244                           ;putch@txData stored from wreg
  7245  0C18  00F1               	movwf	putch@txData
  7246                           
  7247                           ;eusart.c: 109: EUSART_Write(txData);
  7248  0C19  0871               	movf	putch@txData,w
  7249  0C1A  318C  2431         	fcall	_EUSART_Write
  7250  0C1C  0008               	return
  7251  0C1D                     __end_of_putch:	
  7252                           
  7253                           	psect	text17
  7254  0C31                     __ptext17:	
  7255 ;; *************** function _EUSART_Write *****************
  7256 ;; Defined at:
  7257 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  txData          1    wreg     unsigned char 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  txData          1    0[COMMON] unsigned char 
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      void 
  7264 ;; Registers used:
  7265 ;;		wreg
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;Total ram usage:        1 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		_putch
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _EUSART_Write
  7286  0C31                     _EUSART_Write:	
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _EUSART_Write: [wreg]
  7290                           ;EUSART_Write@txData stored from wreg
  7291  0C31  00F0               	movwf	EUSART_Write@txData
  7292  0C32                     l58:	
  7293                           ;eusart.c: 96: {
  7294                           
  7295                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7296                           
  7297  0C32  0020               	movlb	0	; select bank0
  7298  0C33  1E11               	btfss	17,4	;volatile
  7299  0C34  2C32               	goto	l58
  7300                           
  7301                           ;eusart.c: 97: }
  7302                           ;eusart.c: 99: TXREG = txData;
  7303  0C35  0870               	movf	EUSART_Write@txData,w
  7304  0C36  0023               	movlb	3	; select bank3
  7305  0C37  009A               	movwf	26	;volatile
  7306  0C38  0008               	return
  7307  0C39                     __end_of_EUSART_Write:	
  7308                           
  7309                           	psect	text18
  7310  0004                     __ptext18:	
  7311 ;; *************** function ___lwmod *****************
  7312 ;; Defined at:
  7313 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  divisor         2    8[COMMON] unsigned int 
  7316 ;;  dividend        2   10[COMMON] unsigned int 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  counter         1   13[COMMON] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  2    8[COMMON] unsigned int 
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;Total ram usage:        6 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_printf
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           
  7342                           ;psect for function ___lwmod
  7343  0004                     ___lwmod:	
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7347  0004  0878               	movf	___lwmod@divisor,w
  7348  0005  0479               	iorwf	___lwmod@divisor+1,w
  7349  0006  1903               	btfsc	3,2
  7350  0007  282B               	goto	l1877
  7351  0008  01FD               	clrf	___lwmod@counter
  7352  0009  0AFD               	incf	___lwmod@counter,f
  7353  000A                     l1867:	
  7354  000A  1BF9               	btfsc	___lwmod@divisor+1,7
  7355  000B  2816               	goto	l1869
  7356  000C  3001               	movlw	1
  7357  000D                     u1365:	
  7358  000D  35F8               	lslf	___lwmod@divisor,f
  7359  000E  0DF9               	rlf	___lwmod@divisor+1,f
  7360  000F  0B89               	decfsz	9,f
  7361  0010  280D               	goto	u1365
  7362  0011  3001               	movlw	1
  7363  0012  00FC               	movwf	??___lwmod
  7364  0013  087C               	movf	??___lwmod,w
  7365  0014  07FD               	addwf	___lwmod@counter,f
  7366  0015  280A               	goto	l1867
  7367  0016                     l1869:	
  7368  0016  0879               	movf	___lwmod@divisor+1,w
  7369  0017  027B               	subwf	___lwmod@dividend+1,w
  7370  0018  1D03               	skipz
  7371  0019  281C               	goto	u1385
  7372  001A  0878               	movf	___lwmod@divisor,w
  7373  001B  027A               	subwf	___lwmod@dividend,w
  7374  001C                     u1385:	
  7375  001C  1C03               	skipc
  7376  001D  2822               	goto	l1873
  7377  001E  0878               	movf	___lwmod@divisor,w
  7378  001F  02FA               	subwf	___lwmod@dividend,f
  7379  0020  0879               	movf	___lwmod@divisor+1,w
  7380  0021  3BFB               	subwfb	___lwmod@dividend+1,f
  7381  0022                     l1873:	
  7382  0022  3001               	movlw	1
  7383  0023                     u1395:	
  7384  0023  36F9               	lsrf	___lwmod@divisor+1,f
  7385  0024  0CF8               	rrf	___lwmod@divisor,f
  7386  0025  0B89               	decfsz	9,f
  7387  0026  2823               	goto	u1395
  7388  0027  3001               	movlw	1
  7389  0028  02FD               	subwf	___lwmod@counter,f
  7390  0029  1D03               	btfss	3,2
  7391  002A  2816               	goto	l1869
  7392  002B                     l1877:	
  7393  002B  087B               	movf	___lwmod@dividend+1,w
  7394  002C  00F9               	movwf	?___lwmod+1
  7395  002D  087A               	movf	___lwmod@dividend,w
  7396  002E  00F8               	movwf	?___lwmod
  7397  002F  0008               	return
  7398  0030                     __end_of___lwmod:	
  7399                           
  7400                           	psect	text19
  7401  0D91                     __ptext19:	
  7402 ;; *************** function ___lwdiv *****************
  7403 ;; Defined at:
  7404 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  divisor         2    0[COMMON] unsigned int 
  7407 ;;  dividend        2    2[COMMON] unsigned int 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;  quotient        2    5[COMMON] unsigned int 
  7410 ;;  counter         1    7[COMMON] unsigned char 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  2    0[COMMON] unsigned int 
  7413 ;; Registers used:
  7414 ;;		wreg, status,2, status,0
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        8 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_printf
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           
  7434                           ;psect for function ___lwdiv
  7435  0D91                     ___lwdiv:	
  7436                           
  7437                           ;incstack = 0
  7438                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7439  0D91  01F5               	clrf	___lwdiv@quotient
  7440  0D92  01F6               	clrf	___lwdiv@quotient+1
  7441  0D93  0870               	movf	___lwdiv@divisor,w
  7442  0D94  0471               	iorwf	___lwdiv@divisor+1,w
  7443  0D95  1903               	btfsc	3,2
  7444  0D96  2DC0               	goto	l1855
  7445  0D97  01F7               	clrf	___lwdiv@counter
  7446  0D98  0AF7               	incf	___lwdiv@counter,f
  7447  0D99                     l1843:	
  7448  0D99  1BF1               	btfsc	___lwdiv@divisor+1,7
  7449  0D9A  2DA5               	goto	l1845
  7450  0D9B  3001               	movlw	1
  7451  0D9C                     u1295:	
  7452  0D9C  35F0               	lslf	___lwdiv@divisor,f
  7453  0D9D  0DF1               	rlf	___lwdiv@divisor+1,f
  7454  0D9E  0B89               	decfsz	9,f
  7455  0D9F  2D9C               	goto	u1295
  7456  0DA0  3001               	movlw	1
  7457  0DA1  00F4               	movwf	??___lwdiv
  7458  0DA2  0874               	movf	??___lwdiv,w
  7459  0DA3  07F7               	addwf	___lwdiv@counter,f
  7460  0DA4  2D99               	goto	l1843
  7461  0DA5                     l1845:	
  7462  0DA5  3001               	movlw	1
  7463  0DA6                     u1315:	
  7464  0DA6  35F5               	lslf	___lwdiv@quotient,f
  7465  0DA7  0DF6               	rlf	___lwdiv@quotient+1,f
  7466  0DA8  0B89               	decfsz	9,f
  7467  0DA9  2DA6               	goto	u1315
  7468  0DAA  0871               	movf	___lwdiv@divisor+1,w
  7469  0DAB  0273               	subwf	___lwdiv@dividend+1,w
  7470  0DAC  1D03               	skipz
  7471  0DAD  2DB0               	goto	u1325
  7472  0DAE  0870               	movf	___lwdiv@divisor,w
  7473  0DAF  0272               	subwf	___lwdiv@dividend,w
  7474  0DB0                     u1325:	
  7475  0DB0  1C03               	skipc
  7476  0DB1  2DB7               	goto	l1851
  7477  0DB2  0870               	movf	___lwdiv@divisor,w
  7478  0DB3  02F2               	subwf	___lwdiv@dividend,f
  7479  0DB4  0871               	movf	___lwdiv@divisor+1,w
  7480  0DB5  3BF3               	subwfb	___lwdiv@dividend+1,f
  7481  0DB6  1475               	bsf	___lwdiv@quotient,0
  7482  0DB7                     l1851:	
  7483  0DB7  3001               	movlw	1
  7484  0DB8                     u1335:	
  7485  0DB8  36F1               	lsrf	___lwdiv@divisor+1,f
  7486  0DB9  0CF0               	rrf	___lwdiv@divisor,f
  7487  0DBA  0B89               	decfsz	9,f
  7488  0DBB  2DB8               	goto	u1335
  7489  0DBC  3001               	movlw	1
  7490  0DBD  02F7               	subwf	___lwdiv@counter,f
  7491  0DBE  1D03               	btfss	3,2
  7492  0DBF  2DA5               	goto	l1845
  7493  0DC0                     l1855:	
  7494  0DC0  0876               	movf	___lwdiv@quotient+1,w
  7495  0DC1  00F1               	movwf	?___lwdiv+1
  7496  0DC2  0875               	movf	___lwdiv@quotient,w
  7497  0DC3  00F0               	movwf	?___lwdiv
  7498  0DC4  0008               	return
  7499  0DC5                     __end_of___lwdiv:	
  7500                           
  7501                           	psect	text20
  7502  0C7F                     __ptext20:	
  7503 ;; *************** function _SPI_exchange *****************
  7504 ;; Defined at:
  7505 ;;		line 4 in file "spi.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  buf             1    wreg     PTR unsigned char 
  7508 ;;		 -> receive@rx_buf(15), buf(16), 
  7509 ;;  len             1    8[COMMON] unsigned char 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  buf             1   13[COMMON] PTR unsigned char 
  7512 ;;		 -> receive@rx_buf(15), buf(16), 
  7513 ;;  bytes_writte    1   12[COMMON] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      unsigned char 
  7516 ;; Registers used:
  7517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7523 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;Total ram usage:        6 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    2
  7530 ;; This function calls:
  7531 ;;		_SPI_Exchange8bitBuffer
  7532 ;; This function is called by:
  7533 ;;		_can_init
  7534 ;;		_can_ope_mode
  7535 ;;		_can_set_mask
  7536 ;;		_txf_clear
  7537 ;;		_receive
  7538 ;;		_can_send
  7539 ;;		_can_status_check
  7540 ;;		_can_baudrate
  7541 ;;		_can_abort
  7542 ;;		_read_register
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           
  7547                           ;psect for function _SPI_exchange
  7548  0C7F                     _SPI_exchange:	
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7552                           ;SPI_exchange@buf stored from wreg
  7553  0C7F  00FD               	movwf	SPI_exchange@buf
  7554                           
  7555                           ;spi.c: 5: LATAbits.LATA4 = 0;
  7556  0C80  0022               	movlb	2	; select bank2
  7557  0C81  120C               	bcf	12,4	;volatile
  7558                           
  7559                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  7560  0C82  0878               	movf	SPI_exchange@len,w
  7561  0C83  00F9               	movwf	??_SPI_exchange
  7562  0C84  0879               	movf	??_SPI_exchange,w
  7563  0C85  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  7564  0C86  087D               	movf	SPI_exchange@buf,w
  7565  0C87  00FA               	movwf	??_SPI_exchange+1
  7566  0C88  087A               	movf	??_SPI_exchange+1,w
  7567  0C89  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  7568  0C8A  087D               	movf	SPI_exchange@buf,w
  7569  0C8B  318D  25C5         	fcall	_SPI_Exchange8bitBuffer
  7570  0C8D  00FB               	movwf	??_SPI_exchange+2
  7571  0C8E  087B               	movf	??_SPI_exchange+2,w
  7572  0C8F  00FC               	movwf	SPI_exchange@bytes_written
  7573                           
  7574                           ;spi.c: 7: LATAbits.LATA4 = 1;
  7575  0C90  0022               	movlb	2	; select bank2
  7576  0C91  160C               	bsf	12,4	;volatile
  7577                           
  7578                           ;spi.c: 8: return bytes_written;
  7579  0C92  087C               	movf	SPI_exchange@bytes_written,w
  7580  0C93  0008               	return
  7581  0C94                     __end_of_SPI_exchange:	
  7582                           
  7583                           	psect	text21
  7584  0DC5                     __ptext21:	
  7585 ;; *************** function _SPI_Exchange8bitBuffer *****************
  7586 ;; Defined at:
  7587 ;;		line 91 in file "mcc_generated_files/spi.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  dataIn          1    wreg     PTR unsigned char 
  7590 ;;		 -> receive@rx_buf(15), buf(16), 
  7591 ;;  bufLen          1    1[COMMON] unsigned char 
  7592 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  7593 ;;		 -> receive@rx_buf(15), buf(16), 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  7596 ;;		 -> receive@rx_buf(15), buf(16), 
  7597 ;;  bytesWritten    1    7[COMMON] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      unsigned char 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        7 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    1
  7614 ;; This function calls:
  7615 ;;		_SPI_Exchange8bit
  7616 ;; This function is called by:
  7617 ;;		_SPI_exchange
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _SPI_Exchange8bitBuffer
  7623  0DC5                     _SPI_Exchange8bitBuffer:	
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7627                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  7628  0DC5  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  7629                           
  7630                           ;spi.c: 93: uint8_t bytesWritten = 0;
  7631  0DC6  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  7632                           
  7633                           ;spi.c: 95: if(bufLen != 0)
  7634  0DC7  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7635  0DC8  1903               	btfsc	3,2
  7636  0DC9  2E11               	goto	l1909
  7637                           
  7638                           ;spi.c: 96: {
  7639                           ;spi.c: 97: if(dataIn != (0))
  7640  0DCA  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  7641  0DCB  1D03               	btfss	3,2
  7642  0DCC  2DF3               	goto	l1897
  7643  0DCD  2DF8               	goto	l1899
  7644  0DCE                     l1889:	
  7645                           ;spi.c: 98: {
  7646                           ;spi.c: 99: while(bytesWritten < bufLen)
  7647                           
  7648                           
  7649                           ;spi.c: 100: {
  7650                           ;spi.c: 101: if(dataOut == (0))
  7651  0DCE  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7652  0DCF  1D03               	btfss	3,2
  7653  0DD0  2DDC               	goto	l1893
  7654                           
  7655                           ;spi.c: 102: {
  7656                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  7657  0DD1  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7658  0DD2  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7659  0DD3  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7660  0DD4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7661  0DD5  0086               	movwf	6
  7662  0DD6  0187               	clrf	7
  7663  0DD7  0801               	movf	1,w
  7664  0DD8  318C  2439  318D   	fcall	_SPI_Exchange8bit
  7665                           
  7666                           ;spi.c: 104: }
  7667  0DDB  2DEF               	goto	l1895
  7668  0DDC                     l1893:	
  7669                           
  7670                           ;spi.c: 105: else
  7671                           ;spi.c: 106: {
  7672                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  7673  0DDC  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7674  0DDD  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  7675  0DDE  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7676  0DDF  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7677  0DE0  0086               	movwf	6
  7678  0DE1  0187               	clrf	7
  7679  0DE2  0801               	movf	1,w
  7680  0DE3  318C  2439  318D   	fcall	_SPI_Exchange8bit
  7681  0DE6  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7682  0DE7  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7683  0DE8  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7684  0DE9  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  7685  0DEA  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  7686  0DEB  0086               	movwf	6
  7687  0DEC  0187               	clrf	7
  7688  0DED  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7689  0DEE  0081               	movwf	1
  7690  0DEF                     l1895:	
  7691                           
  7692                           ;spi.c: 108: }
  7693                           ;spi.c: 110: bytesWritten++;
  7694  0DEF  3001               	movlw	1
  7695  0DF0  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7696  0DF1  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7697  0DF2  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7698  0DF3                     l1897:	
  7699  0DF3  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7700  0DF4  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7701  0DF5  1803               	btfsc	3,0
  7702  0DF6  2E11               	goto	l1909
  7703  0DF7  2DCE               	goto	l1889
  7704  0DF8                     l1899:	
  7705                           ;spi.c: 111: }
  7706                           ;spi.c: 112: }
  7707                           
  7708                           
  7709                           ;spi.c: 113: else
  7710                           ;spi.c: 114: {
  7711                           ;spi.c: 115: if(dataOut != (0))
  7712  0DF8  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  7713  0DF9  1D03               	btfss	3,2
  7714  0DFA  2E0D               	goto	l1907
  7715  0DFB  2E11               	goto	l1909
  7716  0DFC                     l1903:	
  7717                           ;spi.c: 116: {
  7718                           ;spi.c: 117: while(bytesWritten < bufLen )
  7719                           
  7720                           
  7721                           ;spi.c: 118: {
  7722                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  7723  0DFC  3000               	movlw	0
  7724  0DFD  318C  2439  318D   	fcall	_SPI_Exchange8bit
  7725  0E00  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7726  0E01  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7727  0E02  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  7728  0E03  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  7729  0E04  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  7730  0E05  0086               	movwf	6
  7731  0E06  0187               	clrf	7
  7732  0E07  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7733  0E08  0081               	movwf	1
  7734                           
  7735                           ;spi.c: 121: bytesWritten++;
  7736  0E09  3001               	movlw	1
  7737  0E0A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  7738  0E0B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  7739  0E0C  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  7740  0E0D                     l1907:	
  7741  0E0D  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  7742  0E0E  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  7743  0E0F  1C03               	skipc
  7744  0E10  2DFC               	goto	l1903
  7745  0E11                     l1909:	
  7746                           
  7747                           ;spi.c: 122: }
  7748                           ;spi.c: 123: }
  7749                           ;spi.c: 124: }
  7750                           ;spi.c: 125: }
  7751                           ;spi.c: 127: return bytesWritten;
  7752  0E11  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  7753  0E12  0008               	return
  7754  0E13                     __end_of_SPI_Exchange8bitBuffer:	
  7755                           
  7756                           	psect	text22
  7757  0C39                     __ptext22:	
  7758 ;; *************** function _SPI_Exchange8bit *****************
  7759 ;; Defined at:
  7760 ;;		line 77 in file "mcc_generated_files/spi.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;  data            1    wreg     unsigned char 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  data            1    0[COMMON] unsigned char 
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      unsigned char 
  7767 ;; Registers used:
  7768 ;;		wreg
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;Total ram usage:        1 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_SPI_Exchange8bitBuffer
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _SPI_Exchange8bit
  7789  0C39                     _SPI_Exchange8bit:	
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _SPI_Exchange8bit: [wreg]
  7793                           ;SPI_Exchange8bit@data stored from wreg
  7794  0C39  00F0               	movwf	SPI_Exchange8bit@data
  7795                           
  7796                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  7797  0C3A  0024               	movlb	4	; select bank4
  7798  0C3B  1395               	bcf	21,7	;volatile
  7799                           
  7800                           ;spi.c: 82: SSP1BUF = data;
  7801  0C3C  0870               	movf	SPI_Exchange8bit@data,w
  7802  0C3D  0091               	movwf	17	;volatile
  7803  0C3E                     l113:	
  7804                           ;spi.c: 85: {
  7805                           
  7806                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  7807                           
  7808  0C3E  1C14               	btfss	20,0	;volatile
  7809  0C3F  2C3E               	goto	l113
  7810                           
  7811                           ;spi.c: 86: }
  7812                           ;spi.c: 88: return (SSP1BUF);
  7813  0C40  0811               	movf	17,w	;volatile
  7814  0C41  0008               	return
  7815  0C42                     __end_of_SPI_Exchange8bit:	
  7816                           
  7817                           	psect	text23
  7818  0F1B                     __ptext23:	
  7819 ;; *************** function _atoi *****************
  7820 ;; Defined at:
  7821 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  s               1    wreg     PTR const unsigned char 
  7824 ;;		 -> main@buf(9), 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  s               1   13[COMMON] PTR const unsigned char 
  7827 ;;		 -> main@buf(9), 
  7828 ;;  a               2   11[COMMON] int 
  7829 ;;  sign            1   10[COMMON] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  2    6[COMMON] int 
  7832 ;; Registers used:
  7833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:        8 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    1
  7846 ;; This function calls:
  7847 ;;		___wmul
  7848 ;;		_isdigit
  7849 ;; This function is called by:
  7850 ;;		_main
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _atoi
  7856  0F1B                     _atoi:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7860                           ;atoi@s stored from wreg
  7861  0F1B  00FD               	movwf	atoi@s
  7862  0F1C                     l2307:	
  7863  0F1C  087D               	movf	atoi@s,w
  7864  0F1D  0086               	movwf	6
  7865  0F1E  0187               	clrf	7
  7866  0F1F  3020               	movlw	32
  7867  0F20  0601               	xorwf	1,w
  7868  0F21  1D03               	btfss	3,2
  7869  0F22  2F28               	goto	l2309
  7870  0F23                     l2305:	
  7871  0F23  3001               	movlw	1
  7872  0F24  00F8               	movwf	??_atoi
  7873  0F25  0878               	movf	??_atoi,w
  7874  0F26  07FD               	addwf	atoi@s,f
  7875  0F27  2F1C               	goto	l2307
  7876  0F28                     l2309:	
  7877  0F28  087D               	movf	atoi@s,w
  7878  0F29  0086               	movwf	6
  7879  0F2A  0187               	clrf	7
  7880  0F2B  3009               	movlw	9
  7881  0F2C  0601               	xorwf	1,w
  7882  0F2D  1903               	btfsc	3,2
  7883  0F2E  2F23               	goto	l2305
  7884  0F2F  01FB               	clrf	atoi@a
  7885  0F30  01FC               	clrf	atoi@a+1
  7886  0F31  01FA               	clrf	atoi@sign
  7887  0F32  087D               	movf	atoi@s,w
  7888  0F33  0086               	movwf	6
  7889  0F34  0187               	clrf	7
  7890  0F35  302D               	movlw	45
  7891  0F36  0601               	xorwf	1,w
  7892  0F37  1D03               	btfss	3,2
  7893  0F38  2F3E               	goto	l2317
  7894  0F39  3001               	movlw	1
  7895  0F3A  00F8               	movwf	??_atoi
  7896  0F3B  0878               	movf	??_atoi,w
  7897  0F3C  07FA               	addwf	atoi@sign,f
  7898  0F3D  2F45               	goto	l2323
  7899  0F3E                     l2317:	
  7900  0F3E  087D               	movf	atoi@s,w
  7901  0F3F  0086               	movwf	6
  7902  0F40  0187               	clrf	7
  7903  0F41  302B               	movlw	43
  7904  0F42  0601               	xorwf	1,w
  7905  0F43  1D03               	btfss	3,2
  7906  0F44  2F49               	goto	l2325
  7907  0F45                     l2323:	
  7908  0F45  3001               	movlw	1
  7909  0F46  00F8               	movwf	??_atoi
  7910  0F47  0878               	movf	??_atoi,w
  7911  0F48  07FD               	addwf	atoi@s,f
  7912  0F49                     l2325:	
  7913  0F49  087D               	movf	atoi@s,w
  7914  0F4A  0086               	movwf	6
  7915  0F4B  0187               	clrf	7
  7916  0F4C  0801               	movf	1,w
  7917  0F4D  318C  2462  318F   	fcall	_isdigit
  7918  0F50  1C03               	btfss	3,0
  7919  0F51  2F6E               	goto	l2327
  7920  0F52  087C               	movf	atoi@a+1,w
  7921  0F53  00F1               	movwf	___wmul@multiplier+1
  7922  0F54  087B               	movf	atoi@a,w
  7923  0F55  00F0               	movwf	___wmul@multiplier
  7924  0F56  300A               	movlw	10
  7925  0F57  00F2               	movwf	___wmul@multiplicand
  7926  0F58  3000               	movlw	0
  7927  0F59  00F3               	movwf	___wmul@multiplicand+1
  7928  0F5A  318C  24C4  318F   	fcall	___wmul
  7929  0F5D  087D               	movf	atoi@s,w
  7930  0F5E  0086               	movwf	6
  7931  0F5F  0187               	clrf	7
  7932  0F60  0801               	movf	1,w
  7933  0F61  0770               	addwf	?___wmul,w
  7934  0F62  00F8               	movwf	??_atoi
  7935  0F63  0871               	movf	?___wmul+1,w
  7936  0F64  1803               	skipnc
  7937  0F65  0A71               	incf	?___wmul+1,w
  7938  0F66  00F9               	movwf	??_atoi+1
  7939  0F67  0878               	movf	??_atoi,w
  7940  0F68  3ED0               	addlw	208
  7941  0F69  00FB               	movwf	atoi@a
  7942  0F6A  30FF               	movlw	255
  7943  0F6B  3D79               	addwfc	??_atoi+1,w
  7944  0F6C  00FC               	movwf	atoi@a+1
  7945  0F6D  2F45               	goto	l2323
  7946  0F6E                     l2327:	
  7947  0F6E  087A               	movf	atoi@sign,w
  7948  0F6F  1903               	btfsc	3,2
  7949  0F70  2F7D               	goto	l2333
  7950  0F71  097B               	comf	atoi@a,w
  7951  0F72  00F8               	movwf	??_atoi
  7952  0F73  097C               	comf	atoi@a+1,w
  7953  0F74  00F9               	movwf	??_atoi+1
  7954  0F75  0AF8               	incf	??_atoi,f
  7955  0F76  1903               	skipnz
  7956  0F77  0AF9               	incf	??_atoi+1,f
  7957  0F78  0878               	movf	??_atoi,w
  7958  0F79  00F6               	movwf	?_atoi
  7959  0F7A  0879               	movf	??_atoi+1,w
  7960  0F7B  00F7               	movwf	?_atoi+1
  7961  0F7C  0008               	return
  7962  0F7D                     l2333:	
  7963  0F7D  087C               	movf	atoi@a+1,w
  7964  0F7E  00F7               	movwf	?_atoi+1
  7965  0F7F  087B               	movf	atoi@a,w
  7966  0F80  00F6               	movwf	?_atoi
  7967  0F81  0008               	return
  7968  0F82                     __end_of_atoi:	
  7969                           
  7970                           	psect	text24
  7971  0C62                     __ptext24:	
  7972 ;; *************** function _isdigit *****************
  7973 ;; Defined at:
  7974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  c               1    wreg     unsigned char 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  c               1    1[COMMON] unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;		None               void
  7981 ;; Registers used:
  7982 ;;		wreg, status,2, status,0
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;Total ram usage:        2 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_printf
  7998 ;;		_atoi
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function _isdigit
  8004  0C62                     _isdigit:	
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8008                           ;isdigit@c stored from wreg
  8009  0C62  00F1               	movwf	isdigit@c
  8010  0C63  01F0               	clrf	_isdigit$792
  8011  0C64  303A               	movlw	58
  8012  0C65  0271               	subwf	isdigit@c,w
  8013  0C66  1803               	skipnc
  8014  0C67  2C6E               	goto	l1815
  8015  0C68  3030               	movlw	48
  8016  0C69  0271               	subwf	isdigit@c,w
  8017  0C6A  1C03               	skipc
  8018  0C6B  2C6E               	goto	l1815
  8019  0C6C  01F0               	clrf	_isdigit$792
  8020  0C6D  0AF0               	incf	_isdigit$792,f
  8021  0C6E                     l1815:	
  8022  0C6E  0C70               	rrf	_isdigit$792,w
  8023  0C6F  0008               	return
  8024  0C70                     __end_of_isdigit:	
  8025                           
  8026                           	psect	text25
  8027  0CC4                     __ptext25:	
  8028 ;; *************** function ___wmul *****************
  8029 ;; Defined at:
  8030 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  multiplier      2    0[COMMON] unsigned int 
  8033 ;;  multiplicand    2    2[COMMON] unsigned int 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  product         2    4[COMMON] unsigned int 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  2    0[COMMON] unsigned int 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        6 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; This function calls:
  8052 ;;		Nothing
  8053 ;; This function is called by:
  8054 ;;		_printf
  8055 ;;		_atoi
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function ___wmul
  8061  0CC4                     ___wmul:	
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8065  0CC4  01F4               	clrf	___wmul@product
  8066  0CC5  01F5               	clrf	___wmul@product+1
  8067  0CC6                     l1821:	
  8068  0CC6  1C70               	btfss	___wmul@multiplier,0
  8069  0CC7  2CCC               	goto	l533
  8070  0CC8  0872               	movf	___wmul@multiplicand,w
  8071  0CC9  07F4               	addwf	___wmul@product,f
  8072  0CCA  0873               	movf	___wmul@multiplicand+1,w
  8073  0CCB  3DF5               	addwfc	___wmul@product+1,f
  8074  0CCC                     l533:	
  8075  0CCC  3001               	movlw	1
  8076  0CCD                     u1255:	
  8077  0CCD  35F2               	lslf	___wmul@multiplicand,f
  8078  0CCE  0DF3               	rlf	___wmul@multiplicand+1,f
  8079  0CCF  0B89               	decfsz	9,f
  8080  0CD0  2CCD               	goto	u1255
  8081  0CD1  3001               	movlw	1
  8082  0CD2                     u1265:	
  8083  0CD2  36F1               	lsrf	___wmul@multiplier+1,f
  8084  0CD3  0CF0               	rrf	___wmul@multiplier,f
  8085  0CD4  0B89               	decfsz	9,f
  8086  0CD5  2CD2               	goto	u1265
  8087  0CD6  0870               	movf	___wmul@multiplier,w
  8088  0CD7  0471               	iorwf	___wmul@multiplier+1,w
  8089  0CD8  1D03               	btfss	3,2
  8090  0CD9  2CC6               	goto	l1821
  8091  0CDA  0875               	movf	___wmul@product+1,w
  8092  0CDB  00F1               	movwf	?___wmul+1
  8093  0CDC  0874               	movf	___wmul@product,w
  8094  0CDD  00F0               	movwf	?___wmul
  8095  0CDE  0008               	return
  8096  0CDF                     __end_of___wmul:	
  8097                           
  8098                           	psect	text26
  8099  0C70                     __ptext26:	
  8100 ;; *************** function _SYSTEM_Initialize *****************
  8101 ;; Defined at:
  8102 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      void 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0, pclath, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    1
  8123 ;; This function calls:
  8124 ;;		_EUSART_Initialize
  8125 ;;		_OSCILLATOR_Initialize
  8126 ;;		_PIN_MANAGER_Initialize
  8127 ;;		_SPI_Initialize
  8128 ;;		_WDT_Initialize
  8129 ;; This function is called by:
  8130 ;;		_main
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _SYSTEM_Initialize
  8136  0C70                     _SYSTEM_Initialize:	
  8137                           
  8138                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8139                           
  8140                           ;incstack = 0
  8141                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8142  0C70  318C  2494  318C   	fcall	_PIN_MANAGER_Initialize
  8143                           
  8144                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8145  0C73  318C  2423  318C   	fcall	_OSCILLATOR_Initialize
  8146                           
  8147                           ;mcc.c: 75: WDT_Initialize();
  8148  0C76  318C  2414  318C   	fcall	_WDT_Initialize
  8149                           
  8150                           ;mcc.c: 76: SPI_Initialize();
  8151  0C79  318C  242A  318C   	fcall	_SPI_Initialize
  8152                           
  8153                           ;mcc.c: 77: EUSART_Initialize();
  8154  0C7C  318C  244C         	fcall	_EUSART_Initialize
  8155  0C7E  0008               	return
  8156  0C7F                     __end_of_SYSTEM_Initialize:	
  8157                           
  8158                           	psect	text27
  8159  0C14                     __ptext27:	
  8160 ;; *************** function _WDT_Initialize *****************
  8161 ;; Defined at:
  8162 ;;		line 90 in file "mcc_generated_files/mcc.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;		None
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		wreg
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;Total ram usage:        0 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; This function calls:
  8183 ;;		Nothing
  8184 ;; This function is called by:
  8185 ;;		_SYSTEM_Initialize
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           
  8190                           ;psect for function _WDT_Initialize
  8191  0C14                     _WDT_Initialize:	
  8192                           
  8193                           ;mcc.c: 93: WDTCON = 0x16;
  8194                           
  8195                           ;incstack = 0
  8196                           ; Regs used in _WDT_Initialize: [wreg]
  8197  0C14  3016               	movlw	22
  8198  0C15  0021               	movlb	1	; select bank1
  8199  0C16  0097               	movwf	23	;volatile
  8200  0C17  0008               	return
  8201  0C18                     __end_of_WDT_Initialize:	
  8202                           
  8203                           	psect	text28
  8204  0C2A                     __ptext28:	
  8205 ;; *************** function _SPI_Initialize *****************
  8206 ;; Defined at:
  8207 ;;		line 63 in file "mcc_generated_files/spi.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; This function calls:
  8228 ;;		Nothing
  8229 ;; This function is called by:
  8230 ;;		_SYSTEM_Initialize
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _SPI_Initialize
  8236  0C2A                     _SPI_Initialize:	
  8237                           
  8238                           ;spi.c: 68: SSP1STAT = 0x40;
  8239                           
  8240                           ;incstack = 0
  8241                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8242  0C2A  3040               	movlw	64
  8243  0C2B  0024               	movlb	4	; select bank4
  8244  0C2C  0094               	movwf	20	;volatile
  8245                           
  8246                           ;spi.c: 71: SSP1CON1 = 0x20;
  8247  0C2D  3020               	movlw	32
  8248  0C2E  0095               	movwf	21	;volatile
  8249                           
  8250                           ;spi.c: 74: SSP1ADD = 0x00;
  8251  0C2F  0192               	clrf	18	;volatile
  8252  0C30  0008               	return
  8253  0C31                     __end_of_SPI_Initialize:	
  8254                           
  8255                           	psect	text29
  8256  0C94                     __ptext29:	
  8257 ;; *************** function _PIN_MANAGER_Initialize *****************
  8258 ;; Defined at:
  8259 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_SYSTEM_Initialize
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           
  8287                           ;psect for function _PIN_MANAGER_Initialize
  8288  0C94                     _PIN_MANAGER_Initialize:	
  8289                           
  8290                           ;pin_manager.c: 57: LATA = 0x10;
  8291                           
  8292                           ;incstack = 0
  8293                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8294  0C94  3010               	movlw	16
  8295  0C95  0022               	movlb	2	; select bank2
  8296  0C96  008C               	movwf	12	;volatile
  8297                           
  8298                           ;pin_manager.c: 58: LATC = 0x00;
  8299  0C97  018E               	clrf	14	;volatile
  8300                           
  8301                           ;pin_manager.c: 63: TRISA = 0x2F;
  8302  0C98  302F               	movlw	47
  8303  0C99  0021               	movlb	1	; select bank1
  8304  0C9A  008C               	movwf	12	;volatile
  8305                           
  8306                           ;pin_manager.c: 64: TRISC = 0x32;
  8307  0C9B  3032               	movlw	50
  8308  0C9C  008E               	movwf	14	;volatile
  8309                           
  8310                           ;pin_manager.c: 69: ANSELC = 0x00;
  8311  0C9D  0023               	movlb	3	; select bank3
  8312  0C9E  018E               	clrf	14	;volatile
  8313                           
  8314                           ;pin_manager.c: 70: ANSELA = 0x07;
  8315  0C9F  3007               	movlw	7
  8316  0CA0  008C               	movwf	12	;volatile
  8317                           
  8318                           ;pin_manager.c: 75: WPUA = 0x00;
  8319  0CA1  0024               	movlb	4	; select bank4
  8320  0CA2  018C               	clrf	12	;volatile
  8321                           
  8322                           ;pin_manager.c: 76: WPUC = 0x30;
  8323  0CA3  3030               	movlw	48
  8324  0CA4  008E               	movwf	14	;volatile
  8325                           
  8326                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  8327  0CA5  0021               	movlb	1	; select bank1
  8328  0CA6  1395               	bcf	21,7	;volatile
  8329                           
  8330                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8331  0CA7  0022               	movlb	2	; select bank2
  8332  0CA8  019E               	clrf	30	;volatile
  8333                           
  8334                           ;pin_manager.c: 84: APFCON0 = 0x00;
  8335  0CA9  019D               	clrf	29	;volatile
  8336  0CAA  0008               	return
  8337  0CAB                     __end_of_PIN_MANAGER_Initialize:	
  8338                           
  8339                           	psect	text30
  8340  0C23                     __ptext30:	
  8341 ;; *************** function _OSCILLATOR_Initialize *****************
  8342 ;; Defined at:
  8343 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;		None
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      void 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;Total ram usage:        0 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; This function calls:
  8364 ;;		Nothing
  8365 ;; This function is called by:
  8366 ;;		_SYSTEM_Initialize
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           
  8371                           ;psect for function _OSCILLATOR_Initialize
  8372  0C23                     _OSCILLATOR_Initialize:	
  8373                           
  8374                           ;mcc.c: 83: OSCCON = 0x60;
  8375                           
  8376                           ;incstack = 0
  8377                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8378  0C23  3060               	movlw	96
  8379  0C24  0021               	movlb	1	; select bank1
  8380  0C25  0099               	movwf	25	;volatile
  8381                           
  8382                           ;mcc.c: 85: OSCTUNE = 0x00;
  8383  0C26  0198               	clrf	24	;volatile
  8384                           
  8385                           ;mcc.c: 87: BORCON = 0x00;
  8386  0C27  0022               	movlb	2	; select bank2
  8387  0C28  0196               	clrf	22	;volatile
  8388  0C29  0008               	return
  8389  0C2A                     __end_of_OSCILLATOR_Initialize:	
  8390                           
  8391                           	psect	text31
  8392  0C4C                     __ptext31:	
  8393 ;; *************** function _EUSART_Initialize *****************
  8394 ;; Defined at:
  8395 ;;		line 53 in file "mcc_generated_files/eusart.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;		None
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;		None
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, status,2
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;Total ram usage:        0 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; This function calls:
  8416 ;;		Nothing
  8417 ;; This function is called by:
  8418 ;;		_SYSTEM_Initialize
  8419 ;; This function uses a non-reentrant model
  8420 ;;
  8421                           
  8422                           
  8423                           ;psect for function _EUSART_Initialize
  8424  0C4C                     _EUSART_Initialize:	
  8425                           
  8426                           ;eusart.c: 58: BAUDCON = 0x08;
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8430  0C4C  3008               	movlw	8
  8431  0C4D  0023               	movlb	3	; select bank3
  8432  0C4E  009F               	movwf	31	;volatile
  8433                           
  8434                           ;eusart.c: 61: RCSTA = 0x90;
  8435  0C4F  3090               	movlw	144
  8436  0C50  009D               	movwf	29	;volatile
  8437                           
  8438                           ;eusart.c: 64: TXSTA = 0x24;
  8439  0C51  3024               	movlw	36
  8440  0C52  009E               	movwf	30	;volatile
  8441                           
  8442                           ;eusart.c: 67: SPBRGL = 0x33;
  8443  0C53  3033               	movlw	51
  8444  0C54  009B               	movwf	27	;volatile
  8445                           
  8446                           ;eusart.c: 70: SPBRGH = 0x00;
  8447  0C55  019C               	clrf	28	;volatile
  8448  0C56  0008               	return
  8449  0C57                     __end_of_EUSART_Initialize:	
  8450                           
  8451                           	psect	text32
  8452  0C42                     __ptext32:	
  8453 ;; *************** function _EUSART_Read *****************
  8454 ;; Defined at:
  8455 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;		None
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      unsigned char 
  8462 ;; Registers used:
  8463 ;;		wreg
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:        0 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; This function calls:
  8476 ;;		Nothing
  8477 ;; This function is called by:
  8478 ;;		_main
  8479 ;;		_getch
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _EUSART_Read
  8485  0C42                     _EUSART_Read:	
  8486  0C42                     l51:	
  8487                           ;eusart.c: 78: {
  8488                           
  8489                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _EUSART_Read: [wreg]
  8493                           
  8494  0C42  0020               	movlb	0	; select bank0
  8495  0C43  1E91               	btfss	17,5	;volatile
  8496  0C44  2C42               	goto	l51
  8497                           
  8498                           ;eusart.c: 79: }
  8499                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  8500  0C45  0023               	movlb	3	; select bank3
  8501  0C46  1C9D               	btfss	29,1	;volatile
  8502  0C47  2C4A               	goto	l2213
  8503                           
  8504                           ;eusart.c: 83: {
  8505                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  8506  0C48  121D               	bcf	29,4	;volatile
  8507                           
  8508                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  8509  0C49  161D               	bsf	29,4	;volatile
  8510  0C4A                     l2213:	
  8511                           
  8512                           ;eusart.c: 88: }
  8513                           ;eusart.c: 90: return RCREG;
  8514  0C4A  0819               	movf	25,w	;volatile
  8515  0C4B  0008               	return
  8516  0C4C                     __end_of_EUSART_Read:	
  8517  007E                     btemp	set	126	;btemp
  8518  007E                     wtemp0	set	126


Data Sizes:
    Strings     1037
    Constant    35
    Data        0
    BSS         23
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      75
    BANK1            80     19      35
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[20]), main@buf(BANK1[9]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_55(CODE[5]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[2]), 
		 -> STR_51(CODE[16]), STR_50(CODE[16]), STR_49(CODE[2]), STR_48(CODE[16]), 
		 -> STR_47(CODE[16]), STR_46(CODE[16]), STR_45(CODE[2]), STR_44(CODE[12]), 
		 -> STR_43(CODE[12]), STR_42(CODE[12]), STR_41(CODE[2]), STR_40(CODE[12]), 
		 -> STR_39(CODE[12]), STR_38(CODE[5]), STR_37(CODE[13]), STR_36(CODE[13]), 
		 -> STR_35(CODE[18]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[20]), 
		 -> STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[14]), STR_28(CODE[15]), 
		 -> STR_27(CODE[16]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[23]), 
		 -> STR_23(CODE[21]), STR_22(CODE[15]), STR_21(CODE[22]), STR_20(CODE[44]), 
		 -> STR_19(CODE[57]), STR_18(CODE[26]), STR_17(CODE[21]), STR_16(CODE[38]), 
		 -> STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), STR_12(CODE[58]), 
		 -> STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), STR_7(CODE[36]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 9
		 -> main@buf(BANK1[9]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned char ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_abort->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  108915
                                             64 BANK0      2     2      0
                                              0 BANK1     19    19      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   25699
                                             60 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   14901
                                             34 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      7     4      3    6203
                                             27 BANK0      7     4      3
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        13    11      2   17148
                                             31 BANK0     13    11      2
                       _SPI_exchange
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9035
                                             27 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   10966
                                             31 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8256
                                             27 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   10730
                                             31 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            3     3      0   10685
                                             31 BANK0      3     3      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8324
                                             27 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    21      8    5896
                                              2 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     13      23       7       43.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 08:25:06 2018

                    _SPI_Initialize 0C2A                         __CFG_CP$OFF 0000  
                  ?_receive_handler 003B                                  l51 0C42  
                                l58 0C32             ?_SPI_Exchange8bitBuffer 0071  
                                _nm 142B                 ___wmul@multiplicand 0072  
             __size_of_SPI_exchange 0015                         __CFG_LVP$ON 0000  
                               l113 0C3E                                 l202 03DE  
                               l203 03E0                                 l314 029E  
                               l340 0E54                                 l317 02AE  
                               l341 0E4F                                 l334 0E32  
                               l343 0E58                                 l424 06FB  
                               l345 0E5C                                 l337 0E43  
                               l338 0E3E                                 l419 06D9  
                               l428 0732                                 l533 0CCC  
                               l449 07ED                                 l385 05D9  
                               l397 06B3                                 l398 0623  
          __end_of_can_status_check 0E69                        __CFG_CPD$OFF 0000  
                               _abc 1425                                 _buf 00B3  
                               _sid 0064                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
             can_logging_mode@debug 0072                        ?_EUSART_Read 0070  
                              l2041 076A                                l2017 071D  
                              l2043 076E                                l2051 0783  
                              l2035 075B                                l2027 074E  
                              l2019 0726                                l2213 0C4A  
                              l2053 0789                                l2029 0751  
                              l2055 07B0                                l2063 07D7  
                              l2047 077B                                l2305 0F23  
                              l2065 07DB                                l2145 0E91  
                              l2401 0083                                l2073 0ED6  
                              l2323 0F45                                l2307 0F1C  
                              l2067 05B8                                l2083 0EEA  
                              l2333 0F7D                                l2325 0F49  
                              l2317 0F3E                                l2309 0F28  
                              l2085 0F08                                l2327 0F6E  
                              l2431 0298                                l2087 0F0F  
                              l2193 014D                                l2601 0489  
                              l2443 02BA                                l2291 0E62  
                              l1821 0CC6                                l2437 02AA  
                              l2445 02BC                                l2621 04DF  
                              l2541 03FF                                l1815 0C6E  
                              l1903 0DFC                                l2623 04E3  
                              l2615 04C6                                l2607 049B  
                              l2551 0420                                l2631 0586  
                              l2465 0309                                l2393 0057  
                              l2625 04EF                                l2561 043F  
                              l2633 058F                                l2529 03D0  
                              l1907 0E0D                                l1851 0DB7  
                              l1843 0D99                                l1931 05F4  
                              l2467 02DF                                l2395 0074  
                              l2299 0E67                                l2619 04DB  
                              l2555 0436                                l2635 0590  
                              l1909 0E11                                l1845 0DA5  
                              l1925 05DE                                l2485 0357  
                              l2469 030F                                l2581 0468  
                              l2573 0459                                l2629 0564  
                              l1855 0DC0                                l1951 063A  
                              l1927 05E7                                l1919 05D4  
                              l2591 047A                                l2567 044D  
                              l1873 0022                                l1961 0657  
                              l1953 0648                                l2497 0390  
                              l2593 047C                                l2585 046F  
                              l2577 045F                                l1867 000A  
                              l1963 0666                                l1947 0638  
                              l1939 0625                                l1893 0DDC  
                              l1869 0016                                l1877 002B  
                              l1973 0689                                l1957 0655  
                              l1895 0DEF                                l1991 06CD  
                              l1967 0673                                l1889 0DCE  
                              l1897 0DF3                                l1969 067E  
                              l1899 0DF8                                l1979 0692  
                              STR_1 1404                                STR_2 1411  
                              STR_3 1417                                STR_4 1420  
                              STR_5 129D                                STR_6 1428  
                              STR_7 11B9                                STR_8 127B  
                              STR_9 10E4                                u2025 003A  
                              u1315 0DA6                                u2035 0045  
                              u1325 0DB0                                _LATA 010C  
                              u1255 0CCD                                u1335 0DB8  
                              _LATC 010E                                u1265 0CD2  
                              u1365 000D                                u1525 064E  
                              u1295 0D9C                                u1615 0716  
                              u2184 039A                                u1385 001C  
                              u2185 0399                                u1395 0023  
                              u1655 0741                                u1824 0D39  
                              u1585 06F4                                u1825 0D38  
                              u1835 00D2                                u2397 0F99  
                              u1785 0CF0                                _WPUA 020C  
                              _WPUC 020E                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _atoi 0F1B  
                              _main 03BD                                _mode 0062  
                   can_baudrate@bpr 0041                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0002  
            __end_of_SPI_Initialize 0C31                        _SPI_exchange 0C7F  
                     __CFG_MCLRE$ON 0000                    can_send@data_buf 0043  
        __end_of_can_dump_registers 0270      __end_of_SPI_Exchange8bitBuffer 0E13  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
     __end_of_OSCILLATOR_Initialize 0C2A                               ?_atoi 0076  
                             ?_main 0070                               STR_10 1000  
                             STR_11 10AE                               STR_20 1117  
                             STR_12 103B                               STR_21 1227  
                             STR_13 116D                               STR_30 1391  
                             STR_22 1374                               STR_14 1143  
                             STR_31 1383                               STR_23 123D  
                             STR_15 11F7                               STR_40 12D9  
                             STR_32 1267                               STR_24 1210  
                             STR_16 1193                               STR_41 1420  
                             STR_33 12C3                               STR_25 12B2  
                             STR_17 1252                       __CFG_WDTE$OFF 0000  
                             STR_42 13C7                               STR_50 1306  
                             STR_34 12E5                               STR_26 12D4  
                             STR_18 11DD                               STR_43 13D3  
                             STR_51 1326                               STR_27 12F6  
                             STR_35 128F                               STR_19 1075  
                             STR_52 1420                               STR_44 13DF  
                             STR_36 13BA                               STR_28 1356  
                             STR_45 1420                               STR_37 13AD  
                             STR_29 139F                               STR_53 1365  
                             STR_54 1374                               STR_38 141D  
                             STR_46 1316                               STR_55 141D  
                             STR_39 12B7                               STR_47 1336  
                             STR_56 13FD                               STR_48 1346  
                             STR_49 1420                               STR_57 12A1  
              __size_of_can_set_sid 0024                     __end_of___lwdiv 0DC5  
                   __end_of___lwmod 0030       can_status_check@bytes_written 005E  
                             _RCREG 0199                               _RCSTA 019D  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 13F5                      _WDT_Initialize 0C14  
                   __end_of_max_idx 1430                     __end_of_isdigit 0C70  
                   __end_of_receive 0164                               atoi@a 007B  
                  can_baudrate@mask 0042                               atoi@s 007D  
                             _putch 0C18                               main@c 00B0  
                             main@n 00A6                               pclath 000A  
                             status 0003                               wtemp0 007E  
                     receive@rx_buf 0048                     ?_SPI_Initialize 0070  
                   __initialization 07EE               __size_of_can_baudrate 0033  
                      __end_of_atoi 0F82                        __end_of_main 05B3  
                     main@echo_back 00A5                      ??_EUSART_Write 0070  
            can_status_check@status 005F                              ??_atoi 0078  
                            ??_main 0060               can_set_mask@mask_sidh 004A  
             can_set_mask@mask_sidl 004B             can_logging_mode@verbose 0070  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0C18  
                     can_set_mask@n 003F            __end_of_SPI_Exchange8bit 0C42  
             __size_of_can_ope_mode 0057               __size_of_can_set_mask 0080  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                  __end_of_can_init 1000                        _can_baudrate 0D5E  
                  __end_of_can_send 03BD                    receive_handler@i 0041  
                    __CFG_PWRTE$OFF 0000                              ___wmul 0CC4  
                     _output_format 0066                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
                            _printf 05B3                        _can_ope_mode 0E69  
                      _can_set_mask 0030                           ??_isdigit 0070  
                         ??_receive 0042                     ?_WDT_Initialize 0070  
         __size_of_can_logging_mode 000B                    __end_of_rxfnsidh 1411  
                  __end_of_txbnsidh 1425                    __end_of_rxmnsidh 142F  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0C70  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
            __size_of_read_register 0019                  ?_SYSTEM_Initialize 0070  
                __size_of_can_abort 002D                      __pcstackCOMMON 0070  
               ??_SYSTEM_Initialize 0070                      can_send@status 0042  
                     __end_of_putch 0C1D                         receive@pbuf 0057  
                        __end_of_nm 142D                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 005C  
            can_abort@bytes_written 0041           __end_of_SYSTEM_Initialize 0C7F  
                           ??_putch 0071                          __pbssBANK0 0062  
                        __pbssBANK1 00B3                __end_of_EUSART_Write 0C39  
                  can_set_mask@mask 0040                          __pmaintext 03BD  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0022                       _read_register 0CAB  
                         ?_can_init 003F                           ?_can_send 003B  
                _can_dump_registers 0164            __size_of_receive_handler 005B  
                           _OSCTUNE 0098                   __end_of_can_abort 0D30  
                           _SSP1ADD 0212                             _SSP1BUF 0211  
               ?_can_dump_registers 0070                  __size_of_txf_clear 002E  
                  ??_SPI_Initialize 0070                     __size_of___wmul 001B  
              ??_can_dump_registers 003B                       ??_can_set_sid 0072  
                           ___lwdiv 0D91                             ___lwmod 0004  
                    ?_read_register 0070                             _handler 0069  
                           __ptext1 0E13                             __ptext2 0D30  
                           __ptext3 00B0                             __ptext4 0EC0  
                           __ptext5 0030                             __ptext6 0270  
                           __ptext7 0C57                             __ptext8 0F82  
                           __ptext9 0CDF                     __size_of_printf 023B  
                 __end_of_hexpowers 13FD                             _dpowers 13EB  
                        ??_can_init 0041               _OSCILLATOR_Initialize 0C23  
                           _max_idx 142F                          ??_can_send 003C  
                           _isdigit 0C62                             _receive 00B0  
          ??_PIN_MANAGER_Initialize 0070                    _can_logging_mode 0C57  
                 ?_SPI_Exchange8bit 0070                             main@cmd 00B1  
            txf_clear@bytes_written 0023                             main@buf 00A7  
                           main@bpr 00A1          __size_of_SYSTEM_Initialize 000F  
                           main@idx 00B2                             main@sid 00A0  
                           clrloop0 0C1E                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
                    _operation_mode 0068                   _EUSART_Initialize 0C4C  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 003A                             printf@f 0022  
                 __end_of_txf_clear 0D5E                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_set_sid 0D03  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
                 ??_receive_handler 003E           __end_of_EUSART_Initialize 0C57  
                       printf@width 0038            ??_SPI_Exchange8bitBuffer 0073  
                        main@status 00A2                 receive_handler@pbuf 003C  
                   ??_read_register 0020                      __end_of___wmul 0CDF  
                      _EUSART_Write 0C31              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 07EE                 start_initialization 07EE  
   __size_of_PIN_MANAGER_Initialize 0017                         __end_of_abc 1428  
                  _can_set_mask$498 0047                       ??_EUSART_Read 0070  
                       putch@txData 0071           can_baudrate@bytes_written 0043  
         __size_of_can_status_check 0056           can_ope_mode@bytes_written 003D  
                     ?_SPI_exchange 0078                            ??___wmul 0074  
                     txf_clear@mask 0022                         _can_set_sid 0CDF  
                          ??_printf 002A                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
               can_set_sid@can_node 0070                   read_register@addr 0021  
                 __size_of_can_init 007E                   __size_of_can_send 014D  
                        receive@dlc 005A       SPI_Exchange8bitBuffer@dataOut 0072  
                         _can_abort 0D03          __size_of_EUSART_Initialize 000B  
               __end_of_EUSART_Read 0C4C                           __pnvBANK0 0069  
                   can_set_mask@cmd 0049                      ??_SPI_exchange 0079  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0C94                     can_set_sid@sidh 0075  
                   can_set_sid@sidl 0076            __end_of_can_logging_mode 0C62  
                          ?___lwdiv 0070                            ?___lwmod 0078  
                          ?_isdigit 0070                            ?_receive 0070  
                         can_send@i 0044                           can_send@n 0045  
                         _hexpowers 13F5                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                          ?_can_abort 0070  
                     ?_can_baudrate 0070                      ___wmul@product 0074  
                          _LATAbits 010C                            _LATCbits 010E  
                         clear_ram0 0C1D                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214         __size_of_can_dump_registers 010C  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
                     ?_can_set_mask 003F              _SPI_Exchange8bitBuffer 0DC5  
                   _receive_handler 0EC0                          printf@flag 0037  
                        printf@prec 002F                           _txf_clear 0D30  
                receive_handler@dlc 003D                  receive_handler@sid 003B  
                       _EUSART_Read 0C42                      ??_can_baudrate 003F  
                       can_send@dlc 003B                         can_send@len 0040  
                  _can_status_check 0E13             __size_of_SPI_Initialize 0007  
           ??_OSCILLATOR_Initialize 0070                      ??_can_ope_mode 003B  
                  __size_of___lwdiv 0034                    __size_of___lwmod 002C  
                    ??_can_set_mask 0041        SPI_Exchange8bitBuffer@dataIn 0076  
                         receive@id 0058                         _isdigit$792 0070  
              can_ope_mode@ope_mode 003E        SPI_Exchange8bitBuffer@bufLen 0071  
                          _can_init 0F82                            _can_send 0270  
                        txf_clear@n 0024                          ?_txf_clear 0070  
              __end_of_SPI_exchange 0C94                    __size_of_isdigit 000E  
                  __size_of_receive 00B4                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 0164  
                          __ptext11 0CAB                            __ptext20 0C7F  
                          __ptext12 0D5E                            __ptext21 0DC5  
                          __ptext13 0D03                            __ptext30 0C23  
                          __ptext22 0C39                            __ptext14 0E69  
                          __ptext31 0C4C                            __ptext23 0F1B  
                          __ptext15 05B3                            __ptext32 0C42  
                          __ptext24 0C62                            __ptext16 0C18  
                          __ptext25 0CC4                            __ptext17 0C31  
                          __ptext26 0C70                            __ptext18 0004  
                          __ptext27 0C14                            __ptext19 0D91  
                          __ptext28 0C2A                            __ptext29 0C94  
                      _SSP1CON1bits 0215                         ??_can_abort 003F  
                     __size_of_atoi 0067                       __size_of_main 01F6  
                          atoi@sign 007A             __end_of_receive_handler 0F1B  
                      ?_can_set_sid 0070                           printf@idx 002E  
                         printf@len 0032                           printf@val 0035  
                      _SSP1STATbits 0214                            main@mask 00A3  
                          _rxfnsidh 140B               __end_of_read_register 0CC4  
                          _txbnsidh 1422                            _rxmnsidh 142D  
                    __pstringtext10 103B                      __pstringtext11 1075  
                    __pstringtext20 11F7                      __pstringtext12 10AE  
                    __pstringtext21 1210                      __pstringtext13 10E4  
                    __pstringtext30 12C3                      __pstringtext22 1227  
                    __pstringtext14 1117                      __pstringtext31 12D4  
                    __pstringtext23 123D                      __pstringtext15 1143  
                    __pstringtext40 1365                      __pstringtext32 12E5  
                    __pstringtext24 1252                      __pstringtext16 116D  
                    __pstringtext41 1374                      __pstringtext33 12F6  
                    __pstringtext25 1267                      __pstringtext17 1193  
                    __pstringtext50 13FD                      __pstringtext42 1383  
                    __pstringtext34 1306                      __pstringtext26 127B  
                    __pstringtext18 11B9                      __pstringtext51 1404  
                    __pstringtext43 1391                      __pstringtext35 1316  
                    __pstringtext27 128F                      __pstringtext19 11DD  
                    __pstringtext52 1411                      __pstringtext44 139F  
                    __pstringtext36 1326                      __pstringtext28 12A1  
                    __pstringtext53 1417                      __pstringtext45 13AD  
                    __pstringtext37 1336                      __pstringtext29 12B2  
                    __pstringtext54 141D                      __pstringtext46 13BA  
                    __pstringtext38 1346                      __pstringtext55 1428  
                    __pstringtext47 13C7                      __pstringtext39 1356  
                    __pstringtext56 0000                      __pstringtext48 13D3  
                    __pstringtext49 13DF                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                            receive@n 005B  
                  ___lwmod@dividend 007A             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                 receive@bytes_read 0047                    _SPI_Exchange8bit 0C39  
             can_send@bytes_written 0041                            printf@ap 0034  
                          printf@cp 0030                   ?_can_logging_mode 0070  
           can_init@receive_handler 003F                  ??_can_logging_mode 0071  
              __end_of_can_baudrate 0D91                       __pstringtext1 13EB  
                     __pstringtext2 13F5                       __pstringtext3 140B  
                     __pstringtext4 1422                       __pstringtext5 1425  
                     __pstringtext6 142B                       __pstringtext7 142D  
                     __pstringtext8 142F                       __pstringtext9 1000  
                       ??_txf_clear 0020                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0CAB                __end_of_can_ope_mode 0EC0  
              __end_of_can_set_mask 00B0  
