

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 14 21:53:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	stringtext18,global,class=STRCODE,delta=2
    24                           	psect	stringtext19,global,class=STRCODE,delta=2
    25                           	psect	stringtext20,global,class=STRCODE,delta=2
    26                           	psect	stringtext21,global,class=STRCODE,delta=2
    27                           	psect	stringtext22,global,class=STRCODE,delta=2
    28                           	psect	stringtext23,global,class=STRCODE,delta=2
    29                           	psect	stringtext24,global,class=STRCODE,delta=2
    30                           	psect	stringtext25,global,class=STRCODE,delta=2
    31                           	psect	stringtext26,global,class=STRCODE,delta=2
    32                           	psect	stringtext27,global,class=STRCODE,delta=2
    33                           	psect	stringtext28,global,class=STRCODE,delta=2
    34                           	psect	stringtext29,global,class=STRCODE,delta=2
    35                           	psect	stringtext30,global,class=STRCODE,delta=2
    36                           	psect	stringtext31,global,class=STRCODE,delta=2
    37                           	psect	stringtext32,global,class=STRCODE,delta=2
    38                           	psect	stringtext33,global,class=STRCODE,delta=2
    39                           	psect	stringtext34,global,class=STRCODE,delta=2
    40                           	psect	stringtext35,global,class=STRCODE,delta=2
    41                           	psect	stringtext36,global,class=STRCODE,delta=2
    42                           	psect	stringtext37,global,class=STRCODE,delta=2
    43                           	psect	stringtext38,global,class=STRCODE,delta=2
    44                           	psect	stringtext39,global,class=STRCODE,delta=2
    45                           	psect	stringtext40,global,class=STRCODE,delta=2
    46                           	psect	stringtext41,global,class=STRCODE,delta=2
    47                           	psect	stringtext42,global,class=STRCODE,delta=2
    48                           	psect	stringtext43,global,class=STRCODE,delta=2
    49                           	psect	stringtext44,global,class=STRCODE,delta=2
    50                           	psect	cinit,global,class=CODE,merge=1,delta=2
    51                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    52                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    53                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    54                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    55                           	psect	inittext,global,class=CODE,delta=2
    56                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    57                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    58                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    59                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    60                           	psect	text1,local,class=CODE,merge=1,delta=2
    61                           	psect	text2,local,class=CODE,merge=1,delta=2
    62                           	psect	text3,local,class=CODE,merge=1,delta=2
    63                           	psect	text4,local,class=CODE,merge=1,delta=2
    64                           	psect	text5,local,class=CODE,merge=1,delta=2
    65                           	psect	text6,local,class=CODE,merge=1,delta=2
    66                           	psect	text7,local,class=CODE,merge=1,delta=2
    67                           	psect	text8,local,class=CODE,merge=1,delta=2
    68                           	psect	text9,local,class=CODE,merge=1,delta=2
    69                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text12,local,class=CODE,merge=1,delta=2
    72                           	psect	text13,local,class=CODE,merge=1,delta=2
    73                           	psect	text14,local,class=CODE,merge=1,delta=2
    74                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text18,local,class=CODE,merge=1,delta=2
    78                           	psect	text19,local,class=CODE,merge=1,delta=2
    79                           	psect	text20,local,class=CODE,merge=1,delta=2
    80                           	psect	text21,local,class=CODE,merge=1,delta=2
    81                           	psect	text22,local,class=CODE,merge=1,delta=2
    82                           	psect	text23,local,class=CODE,merge=1,delta=2
    83                           	psect	text24,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     
    86                           ; Version 1.45
    87                           ; Generated 16/11/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F1825 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  008C                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0095                     	;# 
   154  0096                     	;# 
   155  0097                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009A                     	;# 
   159  009B                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010E                     	;# 
   166  0111                     	;# 
   167  0112                     	;# 
   168  0113                     	;# 
   169  0114                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0118                     	;# 
   174  0119                     	;# 
   175  011A                     	;# 
   176  011B                     	;# 
   177  011D                     	;# 
   178  011E                     	;# 
   179  018C                     	;# 
   180  018E                     	;# 
   181  0191                     	;# 
   182  0191                     	;# 
   183  0192                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0199                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019D                     	;# 
   196  019E                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0216                     	;# 
   213  0217                     	;# 
   214  0217                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0294                     	;# 
   220  0295                     	;# 
   221  0295                     	;# 
   222  0296                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029B                     	;# 
   228  029C                     	;# 
   229  029D                     	;# 
   230  029E                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0318                     	;# 
   236  0318                     	;# 
   237  0319                     	;# 
   238  031A                     	;# 
   239  038C                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  039A                     	;# 
   245  039C                     	;# 
   246  039D                     	;# 
   247  039E                     	;# 
   248  039F                     	;# 
   249  0415                     	;# 
   250  0416                     	;# 
   251  0417                     	;# 
   252  041C                     	;# 
   253  041D                     	;# 
   254  041E                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000E                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  008C                     	;# 
   295  008E                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0098                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010E                     	;# 
   312  0111                     	;# 
   313  0112                     	;# 
   314  0113                     	;# 
   315  0114                     	;# 
   316  0115                     	;# 
   317  0116                     	;# 
   318  0117                     	;# 
   319  0118                     	;# 
   320  0119                     	;# 
   321  011A                     	;# 
   322  011B                     	;# 
   323  011D                     	;# 
   324  011E                     	;# 
   325  018C                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019D                     	;# 
   342  019E                     	;# 
   343  019F                     	;# 
   344  020C                     	;# 
   345  020E                     	;# 
   346  0211                     	;# 
   347  0211                     	;# 
   348  0212                     	;# 
   349  0212                     	;# 
   350  0213                     	;# 
   351  0213                     	;# 
   352  0214                     	;# 
   353  0214                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0216                     	;# 
   359  0217                     	;# 
   360  0217                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0294                     	;# 
   366  0295                     	;# 
   367  0295                     	;# 
   368  0296                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  029B                     	;# 
   374  029C                     	;# 
   375  029D                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  038C                     	;# 
   386  038E                     	;# 
   387  0391                     	;# 
   388  0392                     	;# 
   389  0393                     	;# 
   390  039A                     	;# 
   391  039C                     	;# 
   392  039D                     	;# 
   393  039E                     	;# 
   394  039F                     	;# 
   395  0415                     	;# 
   396  0416                     	;# 
   397  0417                     	;# 
   398  041C                     	;# 
   399  041D                     	;# 
   400  041E                     	;# 
   401  0FE4                     	;# 
   402  0FE5                     	;# 
   403  0FE6                     	;# 
   404  0FE7                     	;# 
   405  0FE8                     	;# 
   406  0FE9                     	;# 
   407  0FEA                     	;# 
   408  0FEB                     	;# 
   409  0FED                     	;# 
   410  0FEE                     	;# 
   411  0FEF                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000E                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  008C                     	;# 
   441  008E                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010E                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018E                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020C                     	;# 
   491  020E                     	;# 
   492  0211                     	;# 
   493  0211                     	;# 
   494  0212                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0213                     	;# 
   498  0214                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0294                     	;# 
   512  0295                     	;# 
   513  0295                     	;# 
   514  0296                     	;# 
   515  0298                     	;# 
   516  0298                     	;# 
   517  0299                     	;# 
   518  029A                     	;# 
   519  029B                     	;# 
   520  029C                     	;# 
   521  029D                     	;# 
   522  029E                     	;# 
   523  0311                     	;# 
   524  0311                     	;# 
   525  0312                     	;# 
   526  0313                     	;# 
   527  0318                     	;# 
   528  0318                     	;# 
   529  0319                     	;# 
   530  031A                     	;# 
   531  038C                     	;# 
   532  038E                     	;# 
   533  0391                     	;# 
   534  0392                     	;# 
   535  0393                     	;# 
   536  039A                     	;# 
   537  039C                     	;# 
   538  039D                     	;# 
   539  039E                     	;# 
   540  039F                     	;# 
   541  0415                     	;# 
   542  0416                     	;# 
   543  0417                     	;# 
   544  041C                     	;# 
   545  041D                     	;# 
   546  041E                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000E                     	;# 
   572  0011                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001E                     	;# 
   585  001F                     	;# 
   586  008C                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  010C                     	;# 
   603  010E                     	;# 
   604  0111                     	;# 
   605  0112                     	;# 
   606  0113                     	;# 
   607  0114                     	;# 
   608  0115                     	;# 
   609  0116                     	;# 
   610  0117                     	;# 
   611  0118                     	;# 
   612  0119                     	;# 
   613  011A                     	;# 
   614  011B                     	;# 
   615  011D                     	;# 
   616  011E                     	;# 
   617  018C                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019C                     	;# 
   633  019D                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  020C                     	;# 
   637  020E                     	;# 
   638  0211                     	;# 
   639  0211                     	;# 
   640  0212                     	;# 
   641  0212                     	;# 
   642  0213                     	;# 
   643  0213                     	;# 
   644  0214                     	;# 
   645  0214                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0215                     	;# 
   649  0216                     	;# 
   650  0216                     	;# 
   651  0217                     	;# 
   652  0217                     	;# 
   653  0291                     	;# 
   654  0291                     	;# 
   655  0292                     	;# 
   656  0293                     	;# 
   657  0294                     	;# 
   658  0295                     	;# 
   659  0295                     	;# 
   660  0296                     	;# 
   661  0298                     	;# 
   662  0298                     	;# 
   663  0299                     	;# 
   664  029A                     	;# 
   665  029B                     	;# 
   666  029C                     	;# 
   667  029D                     	;# 
   668  029E                     	;# 
   669  0311                     	;# 
   670  0311                     	;# 
   671  0312                     	;# 
   672  0313                     	;# 
   673  0318                     	;# 
   674  0318                     	;# 
   675  0319                     	;# 
   676  031A                     	;# 
   677  038C                     	;# 
   678  038E                     	;# 
   679  0391                     	;# 
   680  0392                     	;# 
   681  0393                     	;# 
   682  039A                     	;# 
   683  039C                     	;# 
   684  039D                     	;# 
   685  039E                     	;# 
   686  039F                     	;# 
   687  0415                     	;# 
   688  0416                     	;# 
   689  0417                     	;# 
   690  041C                     	;# 
   691  041D                     	;# 
   692  041E                     	;# 
   693  0FE4                     	;# 
   694  0FE5                     	;# 
   695  0FE6                     	;# 
   696  0FE7                     	;# 
   697  0FE8                     	;# 
   698  0FE9                     	;# 
   699  0FEA                     	;# 
   700  0FEB                     	;# 
   701  0FED                     	;# 
   702  0FEE                     	;# 
   703  0FEF                     	;# 
   704  0000                     	;# 
   705  0001                     	;# 
   706  0002                     	;# 
   707  0003                     	;# 
   708  0004                     	;# 
   709  0005                     	;# 
   710  0006                     	;# 
   711  0007                     	;# 
   712  0008                     	;# 
   713  0009                     	;# 
   714  000A                     	;# 
   715  000B                     	;# 
   716  000C                     	;# 
   717  000E                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  001E                     	;# 
   731  001F                     	;# 
   732  008C                     	;# 
   733  008E                     	;# 
   734  0091                     	;# 
   735  0092                     	;# 
   736  0093                     	;# 
   737  0095                     	;# 
   738  0096                     	;# 
   739  0097                     	;# 
   740  0098                     	;# 
   741  0099                     	;# 
   742  009A                     	;# 
   743  009B                     	;# 
   744  009B                     	;# 
   745  009C                     	;# 
   746  009D                     	;# 
   747  009E                     	;# 
   748  010C                     	;# 
   749  010E                     	;# 
   750  0111                     	;# 
   751  0112                     	;# 
   752  0113                     	;# 
   753  0114                     	;# 
   754  0115                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  0118                     	;# 
   758  0119                     	;# 
   759  011A                     	;# 
   760  011B                     	;# 
   761  011D                     	;# 
   762  011E                     	;# 
   763  018C                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020C                     	;# 
   783  020E                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0294                     	;# 
   804  0295                     	;# 
   805  0295                     	;# 
   806  0296                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  029B                     	;# 
   812  029C                     	;# 
   813  029D                     	;# 
   814  029E                     	;# 
   815  0311                     	;# 
   816  0311                     	;# 
   817  0312                     	;# 
   818  0313                     	;# 
   819  0318                     	;# 
   820  0318                     	;# 
   821  0319                     	;# 
   822  031A                     	;# 
   823  038C                     	;# 
   824  038E                     	;# 
   825  0391                     	;# 
   826  0392                     	;# 
   827  0393                     	;# 
   828  039A                     	;# 
   829  039C                     	;# 
   830  039D                     	;# 
   831  039E                     	;# 
   832  039F                     	;# 
   833  0415                     	;# 
   834  0416                     	;# 
   835  0417                     	;# 
   836  041C                     	;# 
   837  041D                     	;# 
   838  041E                     	;# 
   839  0FE4                     	;# 
   840  0FE5                     	;# 
   841  0FE6                     	;# 
   842  0FE7                     	;# 
   843  0FE8                     	;# 
   844  0FE9                     	;# 
   845  0FEA                     	;# 
   846  0FEB                     	;# 
   847  0FED                     	;# 
   848  0FEE                     	;# 
   849  0FEF                     	;# 
   850                           
   851                           	psect	idataBANK0
   852  0E0F                     __pidataBANK0:	
   853                           
   854                           ;initializer for can_status_check@F2968
   855  0E0F  34A0               	retlw	160
   856  0E10  3400               	retlw	0
   857                           
   858                           ;initializer for can_send@F2958
   859  0E11  34A0               	retlw	160
   860  0E12  3400               	retlw	0
   861                           
   862                           	psect	idataBANK1
   863  0E18                     __pidataBANK1:	
   864                           
   865                           ;initializer for main@F2974
   866  0E18  3402               	retlw	2
   867  0E19  3428               	retlw	40
   868  0E1A  3405               	retlw	5
   869  0E1B  34F1               	retlw	241
   870  0E1C  3441               	retlw	65
   871                           
   872                           	psect	stringtext1
   873  1322                     __pstringtext1:	
   874  1322                     _dpowers:	
   875  1322  3401               	retlw	1
   876  1323  3400               	retlw	0
   877  1324  340A               	retlw	10
   878  1325  3400               	retlw	0
   879  1326  3464               	retlw	100
   880  1327  3400               	retlw	0
   881  1328  34E8               	retlw	232
   882  1329  3403               	retlw	3
   883  132A  3410               	retlw	16
   884  132B  3427               	retlw	39
   885  132C                     __end_of_dpowers:	
   886                           
   887                           	psect	stringtext2
   888  132C                     __pstringtext2:	
   889  132C                     _hexpowers:	
   890  132C  3401               	retlw	1
   891  132D  3400               	retlw	0
   892  132E  3410               	retlw	16
   893  132F  3400               	retlw	0
   894  1330  3400               	retlw	0
   895  1331  3401               	retlw	1
   896  1332  3400               	retlw	0
   897  1333  3410               	retlw	16
   898  1334                     __end_of_hexpowers:	
   899                           
   900                           	psect	stringtext3
   901  133B                     __pstringtext3:	
   902  133B                     _rxfnsidh:	
   903  133B  3400               	retlw	0
   904  133C  3404               	retlw	4
   905  133D  3408               	retlw	8
   906  133E  3410               	retlw	16
   907  133F  3414               	retlw	20
   908  1340  3418               	retlw	24
   909  1341                     __end_of_rxfnsidh:	
   910                           
   911                           	psect	stringtext4
   912  1341                     __pstringtext4:	
   913  1341                     _txbnsidh:	
   914  1341  3431               	retlw	49
   915  1342  3441               	retlw	65
   916  1343  3451               	retlw	81
   917  1344                     __end_of_txbnsidh:	
   918                           
   919                           	psect	stringtext5
   920  1344                     __pstringtext5:	
   921  1344                     _abc:	
   922  1344  3400               	retlw	0
   923  1345  3402               	retlw	2
   924  1346  3404               	retlw	4
   925  1347                     __end_of_abc:	
   926                           
   927                           	psect	stringtext6
   928  134A                     __pstringtext6:	
   929  134A                     _nm:	
   930  134A  3400               	retlw	0
   931  134B  3402               	retlw	2
   932  134C                     __end_of_nm:	
   933                           
   934                           	psect	stringtext7
   935  134C                     __pstringtext7:	
   936  134C                     _rxmnsidh:	
   937  134C  3420               	retlw	32
   938  134D  3424               	retlw	36
   939  134E                     __end_of_rxmnsidh:	
   940                           
   941                           	psect	stringtext8
   942  1000                     __pstringtext8:	
   943  1000                     _max_idx:	
   944  1000  3407               	retlw	7
   945  1001                     __end_of_max_idx:	
   946  0011                     _PIR1bits	set	17
   947  0095                     _OPTION_REGbits	set	149
   948  008E                     _TRISC	set	142
   949  008C                     _TRISA	set	140
   950  0097                     _WDTCON	set	151
   951  0098                     _OSCTUNE	set	152
   952  0099                     _OSCCON	set	153
   953  010E                     _LATCbits	set	270
   954  010C                     _LATAbits	set	268
   955  011D                     _APFCON0	set	285
   956  011E                     _APFCON1	set	286
   957  010E                     _LATC	set	270
   958  010C                     _LATA	set	268
   959  0116                     _BORCON	set	278
   960  018C                     _ANSELA	set	396
   961  018E                     _ANSELC	set	398
   962  019A                     _TXREG	set	410
   963  0199                     _RCREG	set	409
   964  019D                     _RCSTAbits	set	413
   965  019C                     _SPBRGH	set	412
   966  019B                     _SPBRGL	set	411
   967  019E                     _TXSTA	set	414
   968  019D                     _RCSTA	set	413
   969  019F                     _BAUDCON	set	415
   970  0214                     _SSP1STATbits	set	532
   971  0211                     _SSP1BUF	set	529
   972  0215                     _SSP1CON1bits	set	533
   973  0212                     _SSP1ADD	set	530
   974  0215                     _SSP1CON1	set	533
   975  0214                     _SSP1STAT	set	532
   976  020E                     _WPUC	set	526
   977  020C                     _WPUA	set	524
   978  1001                     STR_28:	
   979  1001  345B               	retlw	91	;'['
   980  1002  3453               	retlw	83	;'S'
   981  1003  3465               	retlw	101	;'e'
   982  1004  3474               	retlw	116	;'t'
   983  1005  3420               	retlw	32	;' '
   984  1006  346F               	retlw	111	;'o'
   985  1007  3475               	retlw	117	;'u'
   986  1008  3474               	retlw	116	;'t'
   987  1009  3470               	retlw	112	;'p'
   988  100A  3475               	retlw	117	;'u'
   989  100B  3474               	retlw	116	;'t'
   990  100C  3420               	retlw	32	;' '
   991  100D  346D               	retlw	109	;'m'
   992  100E  346F               	retlw	111	;'o'
   993  100F  3464               	retlw	100	;'d'
   994  1010  3465               	retlw	101	;'e'
   995  1011  345D               	retlw	93	;']'
   996  1012  3420               	retlw	32	;' '
   997  1013  347B               	retlw	123	;'{'
   998  1014  3464               	retlw	100	;'d'
   999  1015  3465               	retlw	101	;'e'
  1000  1016  3462               	retlw	98	;'b'
  1001  1017  3475               	retlw	117	;'u'
  1002  1018  3467               	retlw	103	;'g'
  1003  1019  343A               	retlw	58	;':'
  1004  101A  3420               	retlw	32	;' '
  1005  101B  3440               	retlw	64	;'@'
  1006  101C  3476               	retlw	118	;'v'
  1007  101D  3464               	retlw	100	;'d'
  1008  101E  342C               	retlw	44	;','
  1009  101F  3420               	retlw	32	;' '
  1010  1020  3476               	retlw	118	;'v'
  1011  1021  3465               	retlw	101	;'e'
  1012  1022  3472               	retlw	114	;'r'
  1013  1023  3462               	retlw	98	;'b'
  1014  1024  346F               	retlw	111	;'o'
  1015  1025  3473               	retlw	115	;'s'
  1016  1026  3465               	retlw	101	;'e'
  1017  1027  343A               	retlw	58	;':'
  1018  1028  3420               	retlw	32	;' '
  1019  1029  3440               	retlw	64	;'@'
  1020  102A  3476               	retlw	118	;'v'
  1021  102B  3476               	retlw	118	;'v'
  1022  102C  342C               	retlw	44	;','
  1023  102D  3420               	retlw	32	;' '
  1024  102E  346E               	retlw	110	;'n'
  1025  102F  346F               	retlw	111	;'o'
  1026  1030  3472               	retlw	114	;'r'
  1027  1031  346D               	retlw	109	;'m'
  1028  1032  3461               	retlw	97	;'a'
  1029  1033  346C               	retlw	108	;'l'
  1030  1034  343A               	retlw	58	;':'
  1031  1035  3420               	retlw	32	;' '
  1032  1036  3440               	retlw	64	;'@'
  1033  1037  3476               	retlw	118	;'v'
  1034  1038  346E               	retlw	110	;'n'
  1035  1039  347D               	retlw	125	;'}'
  1036  103A  340A               	retlw	10
  1037  103B  3400               	retlw	0
  1038                           
  1039                           	psect	stringtext9
  1040  103C                     __pstringtext9:	
  1041  103C                     STR_29:	
  1042  103C  345B               	retlw	91	;'['
  1043  103D  3445               	retlw	69	;'E'
  1044  103E  346E               	retlw	110	;'n'
  1045  103F  3461               	retlw	97	;'a'
  1046  1040  3462               	retlw	98	;'b'
  1047  1041  346C               	retlw	108	;'l'
  1048  1042  3465               	retlw	101	;'e'
  1049  1043  3420               	retlw	32	;' '
  1050  1044  346F               	retlw	111	;'o'
  1051  1045  3470               	retlw	112	;'p'
  1052  1046  3465               	retlw	101	;'e'
  1053  1047  3472               	retlw	114	;'r'
  1054  1048  3461               	retlw	97	;'a'
  1055  1049  3474               	retlw	116	;'t'
  1056  104A  3469               	retlw	105	;'i'
  1057  104B  346F               	retlw	111	;'o'
  1058  104C  346E               	retlw	110	;'n'
  1059  104D  3420               	retlw	32	;' '
  1060  104E  346D               	retlw	109	;'m'
  1061  104F  346F               	retlw	111	;'o'
  1062  1050  3464               	retlw	100	;'d'
  1063  1051  3465               	retlw	101	;'e'
  1064  1052  345D               	retlw	93	;']'
  1065  1053  3420               	retlw	32	;' '
  1066  1054  347B               	retlw	123	;'{'
  1067  1055  346C               	retlw	108	;'l'
  1068  1056  346F               	retlw	111	;'o'
  1069  1057  346F               	retlw	111	;'o'
  1070  1058  3470               	retlw	112	;'p'
  1071  1059  3462               	retlw	98	;'b'
  1072  105A  3461               	retlw	97	;'a'
  1073  105B  3463               	retlw	99	;'c'
  1074  105C  346B               	retlw	107	;'k'
  1075  105D  343A               	retlw	58	;':'
  1076  105E  3420               	retlw	32	;' '
  1077  105F  3440               	retlw	64	;'@'
  1078  1060  346F               	retlw	111	;'o'
  1079  1061  346C               	retlw	108	;'l'
  1080  1062  342C               	retlw	44	;','
  1081  1063  3420               	retlw	32	;' '
  1082  1064  346E               	retlw	110	;'n'
  1083  1065  346F               	retlw	111	;'o'
  1084  1066  3472               	retlw	114	;'r'
  1085  1067  346D               	retlw	109	;'m'
  1086  1068  3461               	retlw	97	;'a'
  1087  1069  346C               	retlw	108	;'l'
  1088  106A  343A               	retlw	58	;':'
  1089  106B  3420               	retlw	32	;' '
  1090  106C  3440               	retlw	64	;'@'
  1091  106D  346F               	retlw	111	;'o'
  1092  106E  346E               	retlw	110	;'n'
  1093  106F  347D               	retlw	125	;'}'
  1094  1070  340A               	retlw	10
  1095  1071  3400               	retlw	0
  1096                           
  1097                           	psect	stringtext10
  1098  1072                     __pstringtext10:	
  1099  1072                     STR_27:	
  1100  1072  345B               	retlw	91	;'['
  1101  1073  3453               	retlw	83	;'S'
  1102  1074  3465               	retlw	101	;'e'
  1103  1075  3474               	retlw	116	;'t'
  1104  1076  3420               	retlw	32	;' '
  1105  1077  3473               	retlw	115	;'s'
  1106  1078  3474               	retlw	116	;'t'
  1107  1079  3461               	retlw	97	;'a'
  1108  107A  346E               	retlw	110	;'n'
  1109  107B  3464               	retlw	100	;'d'
  1110  107C  3461               	retlw	97	;'a'
  1111  107D  3472               	retlw	114	;'r'
  1112  107E  3464               	retlw	100	;'d'
  1113  107F  3420               	retlw	32	;' '
  1114  1080  3469               	retlw	105	;'i'
  1115  1081  3464               	retlw	100	;'d'
  1116  1082  3465               	retlw	101	;'e'
  1117  1083  346E               	retlw	110	;'n'
  1118  1084  3474               	retlw	116	;'t'
  1119  1085  3469               	retlw	105	;'i'
  1120  1086  3466               	retlw	102	;'f'
  1121  1087  3469               	retlw	105	;'i'
  1122  1088  3465               	retlw	101	;'e'
  1123  1089  3472               	retlw	114	;'r'
  1124  108A  345D               	retlw	93	;']'
  1125  108B  3420               	retlw	32	;' '
  1126  108C  3440               	retlw	64	;'@'
  1127  108D  3469               	retlw	105	;'i'
  1128  108E  343C               	retlw	60	;'<'
  1129  108F  3453               	retlw	83	;'S'
  1130  1090  3474               	retlw	116	;'t'
  1131  1091  3461               	retlw	97	;'a'
  1132  1092  346E               	retlw	110	;'n'
  1133  1093  3464               	retlw	100	;'d'
  1134  1094  3461               	retlw	97	;'a'
  1135  1095  3472               	retlw	114	;'r'
  1136  1096  3464               	retlw	100	;'d'
  1137  1097  3420               	retlw	32	;' '
  1138  1098  3449               	retlw	73	;'I'
  1139  1099  3464               	retlw	100	;'d'
  1140  109A  3465               	retlw	101	;'e'
  1141  109B  346E               	retlw	110	;'n'
  1142  109C  3474               	retlw	116	;'t'
  1143  109D  3469               	retlw	105	;'i'
  1144  109E  3466               	retlw	102	;'f'
  1145  109F  3469               	retlw	105	;'i'
  1146  10A0  3465               	retlw	101	;'e'
  1147  10A1  3472               	retlw	114	;'r'
  1148  10A2  343E               	retlw	62	;'>'
  1149  10A3  340A               	retlw	10
  1150  10A4  3400               	retlw	0
  1151                           
  1152                           	psect	stringtext11
  1153  10A5                     __pstringtext11:	
  1154  10A5                     STR_33:	
  1155  10A5  345B               	retlw	91	;'['
  1156  10A6  3452               	retlw	82	;'R'
  1157  10A7  3465               	retlw	101	;'e'
  1158  10A8  3463               	retlw	99	;'c'
  1159  10A9  3465               	retlw	101	;'e'
  1160  10AA  3469               	retlw	105	;'i'
  1161  10AB  3476               	retlw	118	;'v'
  1162  10AC  3465               	retlw	101	;'e'
  1163  10AD  3420               	retlw	32	;' '
  1164  10AE  346D               	retlw	109	;'m'
  1165  10AF  3465               	retlw	101	;'e'
  1166  10B0  3473               	retlw	115	;'s'
  1167  10B1  3473               	retlw	115	;'s'
  1168  10B2  3461               	retlw	97	;'a'
  1169  10B3  3467               	retlw	103	;'g'
  1170  10B4  3465               	retlw	101	;'e'
  1171  10B5  345D               	retlw	93	;']'
  1172  10B6  3420               	retlw	32	;' '
  1173  10B7  343C               	retlw	60	;'<'
  1174  10B8  346D               	retlw	109	;'m'
  1175  10B9  3465               	retlw	101	;'e'
  1176  10BA  3473               	retlw	115	;'s'
  1177  10BB  3473               	retlw	115	;'s'
  1178  10BC  3461               	retlw	97	;'a'
  1179  10BD  3467               	retlw	103	;'g'
  1180  10BE  3465               	retlw	101	;'e'
  1181  10BF  343E               	retlw	62	;'>'
  1182  10C0  3420               	retlw	32	;' '
  1183  10C1  3477               	retlw	119	;'w'
  1184  10C2  3469               	retlw	105	;'i'
  1185  10C3  346C               	retlw	108	;'l'
  1186  10C4  346C               	retlw	108	;'l'
  1187  10C5  3420               	retlw	32	;' '
  1188  10C6  3462               	retlw	98	;'b'
  1189  10C7  3465               	retlw	101	;'e'
  1190  10C8  3420               	retlw	32	;' '
  1191  10C9  346F               	retlw	111	;'o'
  1192  10CA  3475               	retlw	117	;'u'
  1193  10CB  3474               	retlw	116	;'t'
  1194  10CC  3470               	retlw	112	;'p'
  1195  10CD  3475               	retlw	117	;'u'
  1196  10CE  3474               	retlw	116	;'t'
  1197  10CF  340A               	retlw	10
  1198  10D0  3400               	retlw	0
  1199                           
  1200                           	psect	stringtext12
  1201  10D1                     __pstringtext12:	
  1202  10D1                     STR_31:	
  1203  10D1  345B               	retlw	91	;'['
  1204  10D2  3453               	retlw	83	;'S'
  1205  10D3  3465               	retlw	101	;'e'
  1206  10D4  3474               	retlw	116	;'t'
  1207  10D5  3420               	retlw	32	;' '
  1208  10D6  3466               	retlw	102	;'f'
  1209  10D7  3469               	retlw	105	;'i'
  1210  10D8  346C               	retlw	108	;'l'
  1211  10D9  3474               	retlw	116	;'t'
  1212  10DA  3465               	retlw	101	;'e'
  1213  10DB  3472               	retlw	114	;'r'
  1214  10DC  345D               	retlw	93	;']'
  1215  10DD  3420               	retlw	32	;' '
  1216  10DE  3440               	retlw	64	;'@'
  1217  10DF  3466               	retlw	102	;'f'
  1218  10E0  343C               	retlw	60	;'<'
  1219  10E1  346E               	retlw	110	;'n'
  1220  10E2  343E               	retlw	62	;'>'
  1221  10E3  343C               	retlw	60	;'<'
  1222  10E4  3466               	retlw	102	;'f'
  1223  10E5  3469               	retlw	105	;'i'
  1224  10E6  346C               	retlw	108	;'l'
  1225  10E7  3474               	retlw	116	;'t'
  1226  10E8  3465               	retlw	101	;'e'
  1227  10E9  3472               	retlw	114	;'r'
  1228  10EA  3428               	retlw	40	;'('
  1229  10EB  3453               	retlw	83	;'S'
  1230  10EC  3449               	retlw	73	;'I'
  1231  10ED  3444               	retlw	68	;'D'
  1232  10EE  3431               	retlw	49	;'1'
  1233  10EF  3430               	retlw	48	;'0'
  1234  10F0  3420               	retlw	32	;' '
  1235  10F1  347E               	retlw	126	;'~'
  1236  10F2  3420               	retlw	32	;' '
  1237  10F3  3453               	retlw	83	;'S'
  1238  10F4  3449               	retlw	73	;'I'
  1239  10F5  3444               	retlw	68	;'D'
  1240  10F6  3430               	retlw	48	;'0'
  1241  10F7  3429               	retlw	41	;')'
  1242  10F8  343E               	retlw	62	;'>'
  1243  10F9  340A               	retlw	10
  1244  10FA  3400               	retlw	0
  1245                           
  1246                           	psect	stringtext13
  1247  10FB                     __pstringtext13:	
  1248  10FB                     STR_30:	
  1249  10FB  345B               	retlw	91	;'['
  1250  10FC  3453               	retlw	83	;'S'
  1251  10FD  3465               	retlw	101	;'e'
  1252  10FE  3474               	retlw	116	;'t'
  1253  10FF  3420               	retlw	32	;' '
  1254  1100  346D               	retlw	109	;'m'
  1255  1101  3461               	retlw	97	;'a'
  1256  1102  3473               	retlw	115	;'s'
  1257  1103  346B               	retlw	107	;'k'
  1258  1104  345D               	retlw	93	;']'
  1259  1105  3420               	retlw	32	;' '
  1260  1106  3440               	retlw	64	;'@'
  1261  1107  346D               	retlw	109	;'m'
  1262  1108  343C               	retlw	60	;'<'
  1263  1109  346E               	retlw	110	;'n'
  1264  110A  343E               	retlw	62	;'>'
  1265  110B  343C               	retlw	60	;'<'
  1266  110C  346D               	retlw	109	;'m'
  1267  110D  3461               	retlw	97	;'a'
  1268  110E  3473               	retlw	115	;'s'
  1269  110F  346B               	retlw	107	;'k'
  1270  1110  3428               	retlw	40	;'('
  1271  1111  3453               	retlw	83	;'S'
  1272  1112  3449               	retlw	73	;'I'
  1273  1113  3444               	retlw	68	;'D'
  1274  1114  3431               	retlw	49	;'1'
  1275  1115  3430               	retlw	48	;'0'
  1276  1116  3420               	retlw	32	;' '
  1277  1117  347E               	retlw	126	;'~'
  1278  1118  3420               	retlw	32	;' '
  1279  1119  3453               	retlw	83	;'S'
  1280  111A  3449               	retlw	73	;'I'
  1281  111B  3444               	retlw	68	;'D'
  1282  111C  3430               	retlw	48	;'0'
  1283  111D  3429               	retlw	41	;')'
  1284  111E  343E               	retlw	62	;'>'
  1285  111F  340A               	retlw	10
  1286  1120  3400               	retlw	0
  1287                           
  1288                           	psect	stringtext14
  1289  1121                     __pstringtext14:	
  1290  1121                     STR_32:	
  1291  1121  345B               	retlw	91	;'['
  1292  1122  3453               	retlw	83	;'S'
  1293  1123  3465               	retlw	101	;'e'
  1294  1124  346E               	retlw	110	;'n'
  1295  1125  3464               	retlw	100	;'d'
  1296  1126  3420               	retlw	32	;' '
  1297  1127  346D               	retlw	109	;'m'
  1298  1128  3465               	retlw	101	;'e'
  1299  1129  3473               	retlw	115	;'s'
  1300  112A  3473               	retlw	115	;'s'
  1301  112B  3461               	retlw	97	;'a'
  1302  112C  3467               	retlw	103	;'g'
  1303  112D  3465               	retlw	101	;'e'
  1304  112E  345D               	retlw	93	;']'
  1305  112F  3420               	retlw	32	;' '
  1306  1130  343C               	retlw	60	;'<'
  1307  1131  346D               	retlw	109	;'m'
  1308  1132  3465               	retlw	101	;'e'
  1309  1133  3473               	retlw	115	;'s'
  1310  1134  3473               	retlw	115	;'s'
  1311  1135  3461               	retlw	97	;'a'
  1312  1136  3467               	retlw	103	;'g'
  1313  1137  3465               	retlw	101	;'e'
  1314  1138  343E               	retlw	62	;'>'
  1315  1139  340A               	retlw	10
  1316  113A  3400               	retlw	0
  1317                           
  1318                           	psect	stringtext15
  1319  113B                     __pstringtext15:	
  1320  113B                     STR_38:	
  1321  113B  340A               	retlw	10
  1322  113C  3455               	retlw	85	;'U'
  1323  113D  346E               	retlw	110	;'n'
  1324  113E  3461               	retlw	97	;'a'
  1325  113F  3462               	retlw	98	;'b'
  1326  1140  346C               	retlw	108	;'l'
  1327  1141  3465               	retlw	101	;'e'
  1328  1142  3420               	retlw	32	;' '
  1329  1143  3474               	retlw	116	;'t'
  1330  1144  346F               	retlw	111	;'o'
  1331  1145  3420               	retlw	32	;' '
  1332  1146  3473               	retlw	115	;'s'
  1333  1147  3465               	retlw	101	;'e'
  1334  1148  346E               	retlw	110	;'n'
  1335  1149  3464               	retlw	100	;'d'
  1336  114A  3420               	retlw	32	;' '
  1337  114B  346D               	retlw	109	;'m'
  1338  114C  3465               	retlw	101	;'e'
  1339  114D  3473               	retlw	115	;'s'
  1340  114E  3473               	retlw	115	;'s'
  1341  114F  3461               	retlw	97	;'a'
  1342  1150  3467               	retlw	103	;'g'
  1343  1151  3465               	retlw	101	;'e'
  1344  1152  340A               	retlw	10
  1345  1153  3400               	retlw	0
  1346                           
  1347                           	psect	stringtext16
  1348  1154                     __pstringtext16:	
  1349  1154                     STR_7:	
  1350  1154  344D               	retlw	77	;'M'
  1351  1155  3465               	retlw	101	;'e'
  1352  1156  3473               	retlw	115	;'s'
  1353  1157  3473               	retlw	115	;'s'
  1354  1158  3461               	retlw	97	;'a'
  1355  1159  3467               	retlw	103	;'g'
  1356  115A  3465               	retlw	101	;'e'
  1357  115B  3420               	retlw	32	;' '
  1358  115C  3472               	retlw	114	;'r'
  1359  115D  3465               	retlw	101	;'e'
  1360  115E  3463               	retlw	99	;'c'
  1361  115F  3465               	retlw	101	;'e'
  1362  1160  3469               	retlw	105	;'i'
  1363  1161  3476               	retlw	118	;'v'
  1364  1162  3465               	retlw	101	;'e'
  1365  1163  3464               	retlw	100	;'d'
  1366  1164  343A               	retlw	58	;':'
  1367  1165  3420               	retlw	32	;' '
  1368  1166  3425               	retlw	37	;'%'
  1369  1167  3464               	retlw	100	;'d'
  1370  1168  342C               	retlw	44	;','
  1371  1169  3425               	retlw	37	;'%'
  1372  116A  3473               	retlw	115	;'s'
  1373  116B  340A               	retlw	10
  1374  116C  3400               	retlw	0
  1375                           
  1376                           	psect	stringtext17
  1377  116D                     __pstringtext17:	
  1378  116D                     STR_26:	
  1379  116D  342D               	retlw	45	;'-'
  1380  116E  342D               	retlw	45	;'-'
  1381  116F  342D               	retlw	45	;'-'
  1382  1170  3420               	retlw	32	;' '
  1383  1171  3455               	retlw	85	;'U'
  1384  1172  3441               	retlw	65	;'A'
  1385  1173  3452               	retlw	82	;'R'
  1386  1174  3454               	retlw	84	;'T'
  1387  1175  3432               	retlw	50	;'2'
  1388  1176  3443               	retlw	67	;'C'
  1389  1177  3441               	retlw	65	;'A'
  1390  1178  344E               	retlw	78	;'N'
  1391  1179  3420               	retlw	32	;' '
  1392  117A  3448               	retlw	72	;'H'
  1393  117B  3445               	retlw	69	;'E'
  1394  117C  344C               	retlw	76	;'L'
  1395  117D  3450               	retlw	80	;'P'
  1396  117E  3420               	retlw	32	;' '
  1397  117F  342D               	retlw	45	;'-'
  1398  1180  342D               	retlw	45	;'-'
  1399  1181  342D               	retlw	45	;'-'
  1400  1182  340A               	retlw	10
  1401  1183  3400               	retlw	0
  1402                           
  1403                           	psect	stringtext18
  1404  1184                     __pstringtext18:	
  1405  1184                     STR_21:	
  1406  1184  3466               	retlw	102	;'f'
  1407  1185  3469               	retlw	105	;'i'
  1408  1186  346C               	retlw	108	;'l'
  1409  1187  3474               	retlw	116	;'t'
  1410  1188  3465               	retlw	101	;'e'
  1411  1189  3472               	retlw	114	;'r'
  1412  118A  3428               	retlw	40	;'('
  1413  118B  3425               	retlw	37	;'%'
  1414  118C  3464               	retlw	100	;'d'
  1415  118D  3429               	retlw	41	;')'
  1416  118E  343A               	retlw	58	;':'
  1417  118F  3420               	retlw	32	;' '
  1418  1190  3425               	retlw	37	;'%'
  1419  1191  3430               	retlw	48	;'0'
  1420  1192  3432               	retlw	50	;'2'
  1421  1193  3478               	retlw	120	;'x'
  1422  1194  3420               	retlw	32	;' '
  1423  1195  3425               	retlw	37	;'%'
  1424  1196  3430               	retlw	48	;'0'
  1425  1197  3432               	retlw	50	;'2'
  1426  1198  3478               	retlw	120	;'x'
  1427  1199  340A               	retlw	10
  1428  119A  3400               	retlw	0
  1429                           
  1430                           	psect	stringtext19
  1431  119B                     __pstringtext19:	
  1432  119B                     STR_34:	
  1433  119B  345B               	retlw	91	;'['
  1434  119C  3453               	retlw	83	;'S'
  1435  119D  3468               	retlw	104	;'h'
  1436  119E  346F               	retlw	111	;'o'
  1437  119F  3477               	retlw	119	;'w'
  1438  11A0  3420               	retlw	32	;' '
  1439  11A1  3474               	retlw	116	;'t'
  1440  11A2  3468               	retlw	104	;'h'
  1441  11A3  3469               	retlw	105	;'i'
  1442  11A4  3473               	retlw	115	;'s'
  1443  11A5  3420               	retlw	32	;' '
  1444  11A6  3468               	retlw	104	;'h'
  1445  11A7  3465               	retlw	101	;'e'
  1446  11A8  346C               	retlw	108	;'l'
  1447  11A9  3470               	retlw	112	;'p'
  1448  11AA  345D               	retlw	93	;']'
  1449  11AB  343A               	retlw	58	;':'
  1450  11AC  3420               	retlw	32	;' '
  1451  11AD  3440               	retlw	64	;'@'
  1452  11AE  3468               	retlw	104	;'h'
  1453  11AF  340A               	retlw	10
  1454  11B0  3400               	retlw	0
  1455                           
  1456                           	psect	stringtext20
  1457  11B1                     __pstringtext20:	
  1458  11B1                     STR_8:	
  1459  11B1  344D               	retlw	77	;'M'
  1460  11B2  3465               	retlw	101	;'e'
  1461  11B3  3473               	retlw	115	;'s'
  1462  11B4  3473               	retlw	115	;'s'
  1463  11B5  3461               	retlw	97	;'a'
  1464  11B6  3467               	retlw	103	;'g'
  1465  11B7  3465               	retlw	101	;'e'
  1466  11B8  3420               	retlw	32	;' '
  1467  11B9  3472               	retlw	114	;'r'
  1468  11BA  3465               	retlw	101	;'e'
  1469  11BB  3463               	retlw	99	;'c'
  1470  11BC  3465               	retlw	101	;'e'
  1471  11BD  3469               	retlw	105	;'i'
  1472  11BE  3476               	retlw	118	;'v'
  1473  11BF  3465               	retlw	101	;'e'
  1474  11C0  3464               	retlw	100	;'d'
  1475  11C1  343A               	retlw	58	;':'
  1476  11C2  3420               	retlw	32	;' '
  1477  11C3  3425               	retlw	37	;'%'
  1478  11C4  3473               	retlw	115	;'s'
  1479  11C5  340A               	retlw	10
  1480  11C6  3400               	retlw	0
  1481                           
  1482                           	psect	stringtext21
  1483  11C7                     __pstringtext21:	
  1484  11C7                     STR_20:	
  1485  11C7  346D               	retlw	109	;'m'
  1486  11C8  3461               	retlw	97	;'a'
  1487  11C9  3473               	retlw	115	;'s'
  1488  11CA  346B               	retlw	107	;'k'
  1489  11CB  3428               	retlw	40	;'('
  1490  11CC  3425               	retlw	37	;'%'
  1491  11CD  3464               	retlw	100	;'d'
  1492  11CE  3429               	retlw	41	;')'
  1493  11CF  343A               	retlw	58	;':'
  1494  11D0  3420               	retlw	32	;' '
  1495  11D1  3425               	retlw	37	;'%'
  1496  11D2  3430               	retlw	48	;'0'
  1497  11D3  3432               	retlw	50	;'2'
  1498  11D4  3478               	retlw	120	;'x'
  1499  11D5  3420               	retlw	32	;' '
  1500  11D6  3425               	retlw	37	;'%'
  1501  11D7  3430               	retlw	48	;'0'
  1502  11D8  3432               	retlw	50	;'2'
  1503  11D9  3478               	retlw	120	;'x'
  1504  11DA  340A               	retlw	10
  1505  11DB  3400               	retlw	0
  1506                           
  1507                           	psect	stringtext22
  1508  11DC                     __pstringtext22:	
  1509  11DC                     STR_14:	
  1510  11DC  3443               	retlw	67	;'C'
  1511  11DD  346F               	retlw	111	;'o'
  1512  11DE  3470               	retlw	112	;'p'
  1513  11DF  3479               	retlw	121	;'y'
  1514  11E0  3469               	retlw	105	;'i'
  1515  11E1  346E               	retlw	110	;'n'
  1516  11E2  3467               	retlw	103	;'g'
  1517  11E3  3420               	retlw	32	;' '
  1518  11E4  3462               	retlw	98	;'b'
  1519  11E5  3475               	retlw	117	;'u'
  1520  11E6  3466               	retlw	102	;'f'
  1521  11E7  3466               	retlw	102	;'f'
  1522  11E8  3465               	retlw	101	;'e'
  1523  11E9  3472               	retlw	114	;'r'
  1524  11EA  343A               	retlw	58	;':'
  1525  11EB  3420               	retlw	32	;' '
  1526  11EC  3425               	retlw	37	;'%'
  1527  11ED  3463               	retlw	99	;'c'
  1528  11EE  340A               	retlw	10
  1529  11EF  3400               	retlw	0
  1530                           
  1531                           	psect	stringtext23
  1532  11F0                     __pstringtext23:	
  1533  11F0                     STR_1:	
  1534  11F0  3453               	retlw	83	;'S'
  1535  11F1  3449               	retlw	73	;'I'
  1536  11F2  3444               	retlw	68	;'D'
  1537  11F3  3420               	retlw	32	;' '
  1538  11F4  3473               	retlw	115	;'s'
  1539  11F5  3465               	retlw	101	;'e'
  1540  11F6  3474               	retlw	116	;'t'
  1541  11F7  343A               	retlw	58	;':'
  1542  11F8  3420               	retlw	32	;' '
  1543  11F9  3425               	retlw	37	;'%'
  1544  11FA  3430               	retlw	48	;'0'
  1545  11FB  3432               	retlw	50	;'2'
  1546  11FC  3478               	retlw	120	;'x'
  1547  11FD  3420               	retlw	32	;' '
  1548  11FE  3425               	retlw	37	;'%'
  1549  11FF  3430               	retlw	48	;'0'
  1550  1200  3432               	retlw	50	;'2'
  1551  1201  3478               	retlw	120	;'x'
  1552  1202  340A               	retlw	10
  1553  1203  3400               	retlw	0
  1554                           
  1555                           	psect	stringtext24
  1556  1204                     __pstringtext24:	
  1557  1204                     STR_37:	
  1558  1204  340A               	retlw	10
  1559  1205  344D               	retlw	77	;'M'
  1560  1206  3465               	retlw	101	;'e'
  1561  1207  3473               	retlw	115	;'s'
  1562  1208  3473               	retlw	115	;'s'
  1563  1209  3461               	retlw	97	;'a'
  1564  120A  3467               	retlw	103	;'g'
  1565  120B  3465               	retlw	101	;'e'
  1566  120C  3420               	retlw	32	;' '
  1567  120D  3473               	retlw	115	;'s'
  1568  120E  3465               	retlw	101	;'e'
  1569  120F  346E               	retlw	110	;'n'
  1570  1210  3474               	retlw	116	;'t'
  1571  1211  343A               	retlw	58	;':'
  1572  1212  3420               	retlw	32	;' '
  1573  1213  3425               	retlw	37	;'%'
  1574  1214  3473               	retlw	115	;'s'
  1575  1215  340A               	retlw	10
  1576  1216  3400               	retlw	0
  1577                           
  1578                           	psect	stringtext25
  1579  1217                     __pstringtext25:	
  1580  1217                     STR_40:	
  1581  1217  3430               	retlw	48	;'0'
  1582  1218  3431               	retlw	49	;'1'
  1583  1219  3432               	retlw	50	;'2'
  1584  121A  3433               	retlw	51	;'3'
  1585  121B  3434               	retlw	52	;'4'
  1586  121C  3435               	retlw	53	;'5'
  1587  121D  3436               	retlw	54	;'6'
  1588  121E  3437               	retlw	55	;'7'
  1589  121F  3438               	retlw	56	;'8'
  1590  1220  3439               	retlw	57	;'9'
  1591  1221  3461               	retlw	97	;'a'
  1592  1222  3462               	retlw	98	;'b'
  1593  1223  3463               	retlw	99	;'c'
  1594  1224  3464               	retlw	100	;'d'
  1595  1225  3465               	retlw	101	;'e'
  1596  1226  3466               	retlw	102	;'f'
  1597  1227  3400               	retlw	0
  1598                           
  1599                           	psect	stringtext26
  1600  1228                     __pstringtext26:	
  1601  1228                     STR_3:	
  1602  1228  3452               	retlw	82	;'R'
  1603  1229  3458               	retlw	88	;'X'
  1604  122A  3442               	retlw	66	;'B'
  1605  122B  3425               	retlw	37	;'%'
  1606  122C  3464               	retlw	100	;'d'
  1607  122D  3453               	retlw	83	;'S'
  1608  122E  3449               	retlw	73	;'I'
  1609  122F  3444               	retlw	68	;'D'
  1610  1230  3448               	retlw	72	;'H'
  1611  1231  343A               	retlw	58	;':'
  1612  1232  3420               	retlw	32	;' '
  1613  1233  3425               	retlw	37	;'%'
  1614  1234  3430               	retlw	48	;'0'
  1615  1235  3432               	retlw	50	;'2'
  1616  1236  3478               	retlw	120	;'x'
  1617  1237  340A               	retlw	10
  1618  1238  3400               	retlw	0
  1619                           
  1620                           	psect	stringtext27
  1621  1239                     __pstringtext27:	
  1622  1239                     STR_15:	
  1623  1239  3454               	retlw	84	;'T'
  1624  123A  3458               	retlw	88	;'X'
  1625  123B  3442               	retlw	66	;'B'
  1626  123C  3425               	retlw	37	;'%'
  1627  123D  3464               	retlw	100	;'d'
  1628  123E  3453               	retlw	83	;'S'
  1629  123F  3449               	retlw	73	;'I'
  1630  1240  3444               	retlw	68	;'D'
  1631  1241  3448               	retlw	72	;'H'
  1632  1242  343A               	retlw	58	;':'
  1633  1243  3420               	retlw	32	;' '
  1634  1244  3425               	retlw	37	;'%'
  1635  1245  3430               	retlw	48	;'0'
  1636  1246  3432               	retlw	50	;'2'
  1637  1247  3478               	retlw	120	;'x'
  1638  1248  340A               	retlw	10
  1639  1249  3400               	retlw	0
  1640                           
  1641                           	psect	stringtext28
  1642  124A                     __pstringtext28:	
  1643  124A                     STR_24:	
  1644  124A  3452               	retlw	82	;'R'
  1645  124B  3458               	retlw	88	;'X'
  1646  124C  3446               	retlw	70	;'F'
  1647  124D  3425               	retlw	37	;'%'
  1648  124E  3464               	retlw	100	;'d'
  1649  124F  3453               	retlw	83	;'S'
  1650  1250  3449               	retlw	73	;'I'
  1651  1251  3444               	retlw	68	;'D'
  1652  1252  3448               	retlw	72	;'H'
  1653  1253  343A               	retlw	58	;':'
  1654  1254  3420               	retlw	32	;' '
  1655  1255  3425               	retlw	37	;'%'
  1656  1256  3430               	retlw	48	;'0'
  1657  1257  3432               	retlw	50	;'2'
  1658  1258  3478               	retlw	120	;'x'
  1659  1259  340A               	retlw	10
  1660  125A  3400               	retlw	0
  1661                           
  1662                           	psect	stringtext29
  1663  125B                     __pstringtext29:	
  1664  125B                     STR_22:	
  1665  125B  3452               	retlw	82	;'R'
  1666  125C  3458               	retlw	88	;'X'
  1667  125D  344D               	retlw	77	;'M'
  1668  125E  3425               	retlw	37	;'%'
  1669  125F  3464               	retlw	100	;'d'
  1670  1260  3453               	retlw	83	;'S'
  1671  1261  3449               	retlw	73	;'I'
  1672  1262  3444               	retlw	68	;'D'
  1673  1263  3448               	retlw	72	;'H'
  1674  1264  343A               	retlw	58	;':'
  1675  1265  3420               	retlw	32	;' '
  1676  1266  3425               	retlw	37	;'%'
  1677  1267  3430               	retlw	48	;'0'
  1678  1268  3432               	retlw	50	;'2'
  1679  1269  3478               	retlw	120	;'x'
  1680  126A  340A               	retlw	10
  1681  126B  3400               	retlw	0
  1682                           
  1683                           	psect	stringtext30
  1684  126C                     __pstringtext30:	
  1685  126C                     STR_4:	
  1686  126C  3452               	retlw	82	;'R'
  1687  126D  3458               	retlw	88	;'X'
  1688  126E  3442               	retlw	66	;'B'
  1689  126F  3425               	retlw	37	;'%'
  1690  1270  3464               	retlw	100	;'d'
  1691  1271  3453               	retlw	83	;'S'
  1692  1272  3449               	retlw	73	;'I'
  1693  1273  3444               	retlw	68	;'D'
  1694  1274  344C               	retlw	76	;'L'
  1695  1275  343A               	retlw	58	;':'
  1696  1276  3420               	retlw	32	;' '
  1697  1277  3425               	retlw	37	;'%'
  1698  1278  3430               	retlw	48	;'0'
  1699  1279  3432               	retlw	50	;'2'
  1700  127A  3478               	retlw	120	;'x'
  1701  127B  340A               	retlw	10
  1702  127C  3400               	retlw	0
  1703                           
  1704                           	psect	stringtext31
  1705  127D                     __pstringtext31:	
  1706  127D                     STR_16:	
  1707  127D  3454               	retlw	84	;'T'
  1708  127E  3458               	retlw	88	;'X'
  1709  127F  3442               	retlw	66	;'B'
  1710  1280  3425               	retlw	37	;'%'
  1711  1281  3464               	retlw	100	;'d'
  1712  1282  3453               	retlw	83	;'S'
  1713  1283  3449               	retlw	73	;'I'
  1714  1284  3444               	retlw	68	;'D'
  1715  1285  344C               	retlw	76	;'L'
  1716  1286  343A               	retlw	58	;':'
  1717  1287  3420               	retlw	32	;' '
  1718  1288  3425               	retlw	37	;'%'
  1719  1289  3430               	retlw	48	;'0'
  1720  128A  3432               	retlw	50	;'2'
  1721  128B  3478               	retlw	120	;'x'
  1722  128C  340A               	retlw	10
  1723  128D  3400               	retlw	0
  1724                           
  1725                           	psect	stringtext32
  1726  128E                     __pstringtext32:	
  1727  128E                     STR_25:	
  1728  128E  3452               	retlw	82	;'R'
  1729  128F  3458               	retlw	88	;'X'
  1730  1290  3446               	retlw	70	;'F'
  1731  1291  3425               	retlw	37	;'%'
  1732  1292  3464               	retlw	100	;'d'
  1733  1293  3453               	retlw	83	;'S'
  1734  1294  3449               	retlw	73	;'I'
  1735  1295  3444               	retlw	68	;'D'
  1736  1296  344C               	retlw	76	;'L'
  1737  1297  343A               	retlw	58	;':'
  1738  1298  3420               	retlw	32	;' '
  1739  1299  3425               	retlw	37	;'%'
  1740  129A  3430               	retlw	48	;'0'
  1741  129B  3432               	retlw	50	;'2'
  1742  129C  3478               	retlw	120	;'x'
  1743  129D  340A               	retlw	10
  1744  129E  3400               	retlw	0
  1745                           
  1746                           	psect	stringtext33
  1747  129F                     __pstringtext33:	
  1748  129F                     STR_23:	
  1749  129F  3452               	retlw	82	;'R'
  1750  12A0  3458               	retlw	88	;'X'
  1751  12A1  344D               	retlw	77	;'M'
  1752  12A2  3425               	retlw	37	;'%'
  1753  12A3  3464               	retlw	100	;'d'
  1754  12A4  3453               	retlw	83	;'S'
  1755  12A5  3449               	retlw	73	;'I'
  1756  12A6  3444               	retlw	68	;'D'
  1757  12A7  344C               	retlw	76	;'L'
  1758  12A8  343A               	retlw	58	;':'
  1759  12A9  3420               	retlw	32	;' '
  1760  12AA  3425               	retlw	37	;'%'
  1761  12AB  3430               	retlw	48	;'0'
  1762  12AC  3432               	retlw	50	;'2'
  1763  12AD  3478               	retlw	120	;'x'
  1764  12AE  340A               	retlw	10
  1765  12AF  3400               	retlw	0
  1766                           
  1767                           	psect	stringtext34
  1768  12B0                     __pstringtext34:	
  1769  12B0                     STR_5:	
  1770  12B0  3452               	retlw	82	;'R'
  1771  12B1  3458               	retlw	88	;'X'
  1772  12B2  3442               	retlw	66	;'B'
  1773  12B3  3425               	retlw	37	;'%'
  1774  12B4  3464               	retlw	100	;'d'
  1775  12B5  3444               	retlw	68	;'D'
  1776  12B6  344C               	retlw	76	;'L'
  1777  12B7  3443               	retlw	67	;'C'
  1778  12B8  343A               	retlw	58	;':'
  1779  12B9  3420               	retlw	32	;' '
  1780  12BA  3425               	retlw	37	;'%'
  1781  12BB  3430               	retlw	48	;'0'
  1782  12BC  3432               	retlw	50	;'2'
  1783  12BD  3478               	retlw	120	;'x'
  1784  12BE  340A               	retlw	10
  1785  12BF  3400               	retlw	0
  1786                           
  1787                           	psect	stringtext35
  1788  12C0                     __pstringtext35:	
  1789  12C0                     STR_6:	
  1790  12C0  3452               	retlw	82	;'R'
  1791  12C1  3458               	retlw	88	;'X'
  1792  12C2  3442               	retlw	66	;'B'
  1793  12C3  3425               	retlw	37	;'%'
  1794  12C4  3464               	retlw	100	;'d'
  1795  12C5  3444               	retlw	68	;'D'
  1796  12C6  3430               	retlw	48	;'0'
  1797  12C7  343A               	retlw	58	;':'
  1798  12C8  3420               	retlw	32	;' '
  1799  12C9  3425               	retlw	37	;'%'
  1800  12CA  3430               	retlw	48	;'0'
  1801  12CB  3432               	retlw	50	;'2'
  1802  12CC  3478               	retlw	120	;'x'
  1803  12CD  340A               	retlw	10
  1804  12CE  3400               	retlw	0
  1805                           
  1806                           	psect	stringtext36
  1807  12CF                     __pstringtext36:	
  1808  12CF                     STR_2:	
  1809  12CF  3443               	retlw	67	;'C'
  1810  12D0  3441               	retlw	65	;'A'
  1811  12D1  344E               	retlw	78	;'N'
  1812  12D2  3453               	retlw	83	;'S'
  1813  12D3  3454               	retlw	84	;'T'
  1814  12D4  3441               	retlw	65	;'A'
  1815  12D5  3454               	retlw	84	;'T'
  1816  12D6  343A               	retlw	58	;':'
  1817  12D7  3420               	retlw	32	;' '
  1818  12D8  3425               	retlw	37	;'%'
  1819  12D9  3430               	retlw	48	;'0'
  1820  12DA  3432               	retlw	50	;'2'
  1821  12DB  3478               	retlw	120	;'x'
  1822  12DC  340A               	retlw	10
  1823  12DD  3400               	retlw	0
  1824                           
  1825                           	psect	stringtext37
  1826  12DE                     __pstringtext37:	
  1827  12DE                     STR_11:	
  1828  12DE  3454               	retlw	84	;'T'
  1829  12DF  3458               	retlw	88	;'X'
  1830  12E0  3442               	retlw	66	;'B'
  1831  12E1  3430               	retlw	48	;'0'
  1832  12E2  3420               	retlw	32	;' '
  1833  12E3  3469               	retlw	105	;'i'
  1834  12E4  3473               	retlw	115	;'s'
  1835  12E5  3420               	retlw	32	;' '
  1836  12E6  3469               	retlw	105	;'i'
  1837  12E7  3464               	retlw	100	;'d'
  1838  12E8  346C               	retlw	108	;'l'
  1839  12E9  3465               	retlw	101	;'e'
  1840  12EA  340A               	retlw	10
  1841  12EB  3400               	retlw	0
  1842                           
  1843                           	psect	stringtext38
  1844  12EC                     __pstringtext38:	
  1845  12EC                     STR_12:	
  1846  12EC  3454               	retlw	84	;'T'
  1847  12ED  3458               	retlw	88	;'X'
  1848  12EE  3442               	retlw	66	;'B'
  1849  12EF  3431               	retlw	49	;'1'
  1850  12F0  3420               	retlw	32	;' '
  1851  12F1  3469               	retlw	105	;'i'
  1852  12F2  3473               	retlw	115	;'s'
  1853  12F3  3420               	retlw	32	;' '
  1854  12F4  3469               	retlw	105	;'i'
  1855  12F5  3464               	retlw	100	;'d'
  1856  12F6  346C               	retlw	108	;'l'
  1857  12F7  3465               	retlw	101	;'e'
  1858  12F8  340A               	retlw	10
  1859  12F9  3400               	retlw	0
  1860                           
  1861                           	psect	stringtext39
  1862  12FA                     __pstringtext39:	
  1863  12FA                     STR_13:	
  1864  12FA  3454               	retlw	84	;'T'
  1865  12FB  3458               	retlw	88	;'X'
  1866  12FC  3442               	retlw	66	;'B'
  1867  12FD  3432               	retlw	50	;'2'
  1868  12FE  3420               	retlw	32	;' '
  1869  12FF  3469               	retlw	105	;'i'
  1870  1300  3473               	retlw	115	;'s'
  1871  1301  3420               	retlw	32	;' '
  1872  1302  3469               	retlw	105	;'i'
  1873  1303  3464               	retlw	100	;'d'
  1874  1304  346C               	retlw	108	;'l'
  1875  1305  3465               	retlw	101	;'e'
  1876  1306  340A               	retlw	10
  1877  1307  3400               	retlw	0
  1878                           
  1879                           	psect	stringtext40
  1880  1308                     __pstringtext40:	
  1881  1308                     STR_17:	
  1882  1308  3452               	retlw	82	;'R'
  1883  1309  3458               	retlw	88	;'X'
  1884  130A  3430               	retlw	48	;'0'
  1885  130B  3449               	retlw	73	;'I'
  1886  130C  3446               	retlw	70	;'F'
  1887  130D  3420               	retlw	32	;' '
  1888  130E  3469               	retlw	105	;'i'
  1889  130F  3473               	retlw	115	;'s'
  1890  1310  3420               	retlw	32	;' '
  1891  1311  346F               	retlw	111	;'o'
  1892  1312  346E               	retlw	110	;'n'
  1893  1313  340A               	retlw	10
  1894  1314  3400               	retlw	0
  1895                           
  1896                           	psect	stringtext41
  1897  1315                     __pstringtext41:	
  1898  1315                     STR_18:	
  1899  1315  3452               	retlw	82	;'R'
  1900  1316  3458               	retlw	88	;'X'
  1901  1317  3431               	retlw	49	;'1'
  1902  1318  3449               	retlw	73	;'I'
  1903  1319  3446               	retlw	70	;'F'
  1904  131A  3420               	retlw	32	;' '
  1905  131B  3469               	retlw	105	;'i'
  1906  131C  3473               	retlw	115	;'s'
  1907  131D  3420               	retlw	32	;' '
  1908  131E  346F               	retlw	111	;'o'
  1909  131F  346E               	retlw	110	;'n'
  1910  1320  340A               	retlw	10
  1911  1321  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext42
  1914  1334                     __pstringtext42:	
  1915  1334                     STR_39:	
  1916  1334  3428               	retlw	40	;'('
  1917  1335  346E               	retlw	110	;'n'
  1918  1336  3475               	retlw	117	;'u'
  1919  1337  346C               	retlw	108	;'l'
  1920  1338  346C               	retlw	108	;'l'
  1921  1339  3429               	retlw	41	;')'
  1922  133A  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext43
  1925  1347                     __pstringtext43:	
  1926  1347                     STR_19:	
  1927  1347  3425               	retlw	37	;'%'
  1928  1348  3463               	retlw	99	;'c'
  1929  1349  3400               	retlw	0
  1930                           
  1931                           	psect	stringtext44
  1932  0000                     __pstringtext44:	
  1933  113C                     
  1934                           ; #config settings
  1935  0000                     
  1936                           	psect	cinit
  1937  07D4                     start_initialization:	
  1938  07D4                     __initialization:	
  1939                           
  1940                           ; Initialize objects allocated to BANK0
  1941  07D4  300F               	movlw	low __pidataBANK0
  1942  07D5  0084               	movwf	4
  1943  07D6  308E               	movlw	(high __pidataBANK0)| (0+128)
  1944  07D7  0085               	movwf	5
  1945  07D8  3065               	movlw	low __pdataBANK0
  1946  07D9  0086               	movwf	6
  1947  07DA  3000               	movlw	high __pdataBANK0
  1948  07DB  0087               	movwf	7
  1949  07DC  3004               	movlw	4
  1950  07DD  318E  261D  3187   	fcall	init_ram
  1951                           
  1952                           ; Initialize objects allocated to BANK1
  1953  07E0  3018               	movlw	low __pidataBANK1
  1954  07E1  0084               	movwf	4
  1955  07E2  308E               	movlw	(high __pidataBANK1)| (0+128)
  1956  07E3  0085               	movwf	5
  1957  07E4  30C1               	movlw	low __pdataBANK1
  1958  07E5  0086               	movwf	6
  1959  07E6  3000               	movlw	high __pdataBANK1
  1960  07E7  0087               	movwf	7
  1961  07E8  3005               	movlw	5
  1962  07E9  318E  261D         	fcall	init_ram
  1963                           
  1964                           ; Clear objects allocated to BANK0
  1965  07EB  01DF               	clrf	__pbssBANK0& (0+127)
  1966  07EC  01E0               	clrf	(__pbssBANK0+1)& (0+127)
  1967  07ED  01E1               	clrf	(__pbssBANK0+2)& (0+127)
  1968  07EE  01E2               	clrf	(__pbssBANK0+3)& (0+127)
  1969  07EF  01E3               	clrf	(__pbssBANK0+4)& (0+127)
  1970  07F0  01E4               	clrf	(__pbssBANK0+5)& (0+127)
  1971                           
  1972                           ; Clear objects allocated to BANK1
  1973  07F1  0021               	movlb	1	; select bank1
  1974  07F2  01B6               	clrf	__pbssBANK1& (0+127)
  1975  07F3  01B7               	clrf	(__pbssBANK1+1)& (0+127)
  1976  07F4  01B8               	clrf	(__pbssBANK1+2)& (0+127)
  1977  07F5  01B9               	clrf	(__pbssBANK1+3)& (0+127)
  1978  07F6  01BA               	clrf	(__pbssBANK1+4)& (0+127)
  1979  07F7  01BB               	clrf	(__pbssBANK1+5)& (0+127)
  1980  07F8  01BC               	clrf	(__pbssBANK1+6)& (0+127)
  1981  07F9  01BD               	clrf	(__pbssBANK1+7)& (0+127)
  1982  07FA  01BE               	clrf	(__pbssBANK1+8)& (0+127)
  1983  07FB  01BF               	clrf	(__pbssBANK1+9)& (0+127)
  1984  07FC  01C0               	clrf	(__pbssBANK1+10)& (0+127)
  1985  07FD                     end_of_initialization:	
  1986                           ;End of C runtime variable initialization code
  1987                           
  1988  07FD                     __end_of__initialization:	
  1989  07FD  0020               	movlb	0
  1990  07FE  3185  2D0E         	ljmp	_main	;jump to C main() function
  1991                           
  1992                           	psect	bssBANK0
  1993  005F                     __pbssBANK0:	
  1994  005F                     _mode:	
  1995  005F                     	ds	4
  1996  0063                     _sid:	
  1997  0063                     	ds	2
  1998                           
  1999                           	psect	dataBANK0
  2000  0065                     __pdataBANK0:	
  2001  0065                     can_status_check@F2968:	
  2002  0065                     	ds	2
  2003  0067                     can_send@F2958:	
  2004  0067                     	ds	2
  2005                           
  2006                           	psect	bssBANK1
  2007  00B6                     __pbssBANK1:	
  2008  00B6                     _idx:	
  2009  00B6                     	ds	1
  2010  00B7                     _c:	
  2011  00B7                     	ds	1
  2012  00B8                     _buf:	
  2013  00B8                     	ds	9
  2014                           
  2015                           	psect	dataBANK1
  2016  00C1                     __pdataBANK1:	
  2017  00C1                     main@F2974:	
  2018  00C1                     	ds	5
  2019                           
  2020                           	psect	inittext
  2021  0E1D                     init_ram:	
  2022  0E1D  00FE               	movwf	126
  2023  0E1E                     initloop:	
  2024  0E1E  0012               	moviw fsr0++
  2025  0E1F  001E               	movwi fsr1++
  2026  0E20  0BFE               	decfsz	126,f
  2027  0E21  2E1E               	goto	initloop
  2028  0E22  3400               	retlw	0
  2029                           
  2030                           	psect	cstackBANK1
  2031  00A0                     __pcstackBANK1:	
  2032  00A0                     main@cnf_buf:	
  2033                           
  2034                           ; 5 bytes @ 0x0
  2035  00A0                     	ds	5
  2036  00A5                     _main$433:	
  2037                           
  2038                           ; 2 bytes @ 0x5
  2039  00A5                     	ds	2
  2040  00A7                     _main$434:	
  2041                           
  2042                           ; 2 bytes @ 0x7
  2043  00A7                     	ds	2
  2044  00A9                     main@sid:	
  2045                           
  2046                           ; 1 bytes @ 0x9
  2047  00A9                     	ds	1
  2048  00AA                     main@rc:	
  2049                           
  2050                           ; 1 bytes @ 0xA
  2051  00AA                     	ds	1
  2052  00AB                     main@rc_452:	
  2053                           
  2054                           ; 1 bytes @ 0xB
  2055  00AB                     	ds	1
  2056  00AC                     main@mask:	
  2057                           
  2058                           ; 2 bytes @ 0xC
  2059  00AC                     	ds	2
  2060  00AE                     main@mask_sidh:	
  2061                           
  2062                           ; 1 bytes @ 0xE
  2063  00AE                     	ds	1
  2064  00AF                     main@mask_sidl:	
  2065                           
  2066                           ; 1 bytes @ 0xF
  2067  00AF                     	ds	1
  2068  00B0                     main@mask_buf:	
  2069                           
  2070                           ; 4 bytes @ 0x10
  2071  00B0                     	ds	4
  2072  00B4                     main@cmd:	
  2073                           
  2074                           ; 1 bytes @ 0x14
  2075  00B4                     	ds	1
  2076  00B5                     main@n:	
  2077                           
  2078                           ; 1 bytes @ 0x15
  2079  00B5                     	ds	1
  2080                           
  2081                           	psect	cstackCOMMON
  2082  0070                     __pcstackCOMMON:	
  2083  0070                     ?_isdigit:	
  2084  0070                     ?_PIN_MANAGER_Initialize:	
  2085                           ; 1 bit 
  2086                           
  2087  0070                     ??_PIN_MANAGER_Initialize:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090  0070                     ?_OSCILLATOR_Initialize:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093  0070                     ??_OSCILLATOR_Initialize:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ?_WDT_Initialize:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099  0070                     ??_WDT_Initialize:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102  0070                     ?_SPI_Initialize:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0070                     ??_SPI_Initialize:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_EUSART_Initialize:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ??_EUSART_Initialize:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ??_isdigit:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_SYSTEM_Initialize:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ??_SYSTEM_Initialize:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ?_EUSART_Read:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ??_EUSART_Read:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ?_EUSART_Write:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ??_EUSART_Write:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_putch:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_SPI_Exchange8bit:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ??_SPI_Exchange8bit:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_can_ope_mode:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_can_txf_clear:	
  2148                           ; 1 bytes @ 0x0
  2149                           
  2150  0070                     ?_can_receive:	
  2151                           ; 1 bytes @ 0x0
  2152                           
  2153  0070                     ?_can_status_check:	
  2154                           ; 1 bytes @ 0x0
  2155                           
  2156  0070                     ?_main:	
  2157                           ; 1 bytes @ 0x0
  2158                           
  2159  0070                     ?___wmul:	
  2160                           ; 1 bytes @ 0x0
  2161                           
  2162  0070                     ?___lwdiv:	
  2163                           ; 2 bytes @ 0x0
  2164                           
  2165  0070                     EUSART_Write@txData:	
  2166                           ; 2 bytes @ 0x0
  2167                           
  2168  0070                     SPI_Exchange8bit@data:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     _isdigit$683:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     ___wmul@multiplier:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     ___lwdiv@divisor:	
  2178                           ; 2 bytes @ 0x0
  2179                           
  2180                           
  2181                           ; 2 bytes @ 0x0
  2182  0070                     	ds	1
  2183  0071                     ??_putch:	
  2184  0071                     ?_SPI_Exchange8bitBuffer:	
  2185                           ; 1 bytes @ 0x1
  2186                           
  2187  0071                     putch@txData:	
  2188                           ; 1 bytes @ 0x1
  2189                           
  2190  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2191                           ; 1 bytes @ 0x1
  2192                           
  2193  0071                     isdigit@c:	
  2194                           ; 1 bytes @ 0x1
  2195                           
  2196                           
  2197                           ; 1 bytes @ 0x1
  2198  0071                     	ds	1
  2199  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2200  0072                     ___wmul@multiplicand:	
  2201                           ; 1 bytes @ 0x2
  2202                           
  2203  0072                     ___lwdiv@dividend:	
  2204                           ; 2 bytes @ 0x2
  2205                           
  2206                           
  2207                           ; 2 bytes @ 0x2
  2208  0072                     	ds	1
  2209  0073                     ??_SPI_Exchange8bitBuffer:	
  2210                           
  2211                           ; 1 bytes @ 0x3
  2212  0073                     	ds	1
  2213  0074                     ??___wmul:	
  2214  0074                     ??___lwdiv:	
  2215                           ; 1 bytes @ 0x4
  2216                           
  2217  0074                     ___wmul@product:	
  2218                           ; 1 bytes @ 0x4
  2219                           
  2220                           
  2221                           ; 2 bytes @ 0x4
  2222  0074                     	ds	1
  2223  0075                     ___lwdiv@quotient:	
  2224                           
  2225                           ; 2 bytes @ 0x5
  2226  0075                     	ds	1
  2227  0076                     ?_atoi:	
  2228  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2229                           ; 2 bytes @ 0x6
  2230                           
  2231                           
  2232                           ; 1 bytes @ 0x6
  2233  0076                     	ds	1
  2234  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2235  0077                     ___lwdiv@counter:	
  2236                           ; 1 bytes @ 0x7
  2237                           
  2238                           
  2239                           ; 1 bytes @ 0x7
  2240  0077                     	ds	1
  2241  0078                     ??_atoi:	
  2242  0078                     ?_SPI_exchange:	
  2243                           ; 1 bytes @ 0x8
  2244                           
  2245  0078                     ?___lwmod:	
  2246                           ; 1 bytes @ 0x8
  2247                           
  2248  0078                     SPI_exchange@len:	
  2249                           ; 2 bytes @ 0x8
  2250                           
  2251  0078                     ___lwmod@divisor:	
  2252                           ; 1 bytes @ 0x8
  2253                           
  2254                           
  2255                           ; 2 bytes @ 0x8
  2256  0078                     	ds	1
  2257  0079                     ??_SPI_exchange:	
  2258                           
  2259                           ; 1 bytes @ 0x9
  2260  0079                     	ds	1
  2261  007A                     atoi@sign:	
  2262  007A                     ___lwmod@dividend:	
  2263                           ; 1 bytes @ 0xA
  2264                           
  2265                           
  2266                           ; 2 bytes @ 0xA
  2267  007A                     	ds	1
  2268  007B                     atoi@a:	
  2269                           
  2270                           ; 2 bytes @ 0xB
  2271  007B                     	ds	1
  2272  007C                     ??___lwmod:	
  2273  007C                     SPI_exchange@bytes_written:	
  2274                           ; 1 bytes @ 0xC
  2275                           
  2276                           
  2277                           ; 1 bytes @ 0xC
  2278  007C                     	ds	1
  2279  007D                     SPI_exchange@buf:	
  2280  007D                     atoi@s:	
  2281                           ; 1 bytes @ 0xD
  2282                           
  2283  007D                     ___lwmod@counter:	
  2284                           ; 1 bytes @ 0xD
  2285                           
  2286                           
  2287                           ; 1 bytes @ 0xD
  2288  007D                     	ds	1
  2289                           
  2290                           	psect	cstackBANK0
  2291  0020                     __pcstackBANK0:	
  2292  0020                     ??_can_txf_clear:	
  2293  0020                     ?_printf:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0020                     printf@f:	
  2297                           ; 2 bytes @ 0x0
  2298                           
  2299                           
  2300                           ; 2 bytes @ 0x0
  2301  0020                     	ds	2
  2302  0022                     can_txf_clear@n:	
  2303                           
  2304                           ; 1 bytes @ 0x2
  2305  0022                     	ds	1
  2306  0023                     can_txf_clear@mask:	
  2307                           
  2308                           ; 1 bytes @ 0x3
  2309  0023                     	ds	1
  2310  0024                     can_txf_clear@bytes_written:	
  2311                           
  2312                           ; 1 bytes @ 0x4
  2313  0024                     	ds	1
  2314  0025                     can_txf_clear@can_int_flag:	
  2315                           
  2316                           ; 4 bytes @ 0x5
  2317  0025                     	ds	3
  2318  0028                     ??_printf:	
  2319                           
  2320                           ; 1 bytes @ 0x8
  2321  0028                     	ds	4
  2322  002C                     printf@idx:	
  2323                           
  2324                           ; 1 bytes @ 0xC
  2325  002C                     	ds	1
  2326  002D                     printf@prec:	
  2327                           
  2328                           ; 1 bytes @ 0xD
  2329  002D                     	ds	1
  2330  002E                     printf@cp:	
  2331                           
  2332                           ; 2 bytes @ 0xE
  2333  002E                     	ds	2
  2334  0030                     printf@len:	
  2335                           
  2336                           ; 2 bytes @ 0x10
  2337  0030                     	ds	2
  2338  0032                     printf@ap:	
  2339                           
  2340                           ; 1 bytes @ 0x12
  2341  0032                     	ds	1
  2342  0033                     printf@val:	
  2343                           
  2344                           ; 2 bytes @ 0x13
  2345  0033                     	ds	2
  2346  0035                     printf@flag:	
  2347                           
  2348                           ; 1 bytes @ 0x15
  2349  0035                     	ds	1
  2350  0036                     printf@width:	
  2351                           
  2352                           ; 2 bytes @ 0x16
  2353  0036                     	ds	2
  2354  0038                     printf@c:	
  2355                           
  2356                           ; 1 bytes @ 0x18
  2357  0038                     	ds	1
  2358  0039                     ?_set_sid:	
  2359  0039                     ??_can_ope_mode:	
  2360                           ; 1 bytes @ 0x19
  2361                           
  2362  0039                     ??_can_receive:	
  2363                           ; 1 bytes @ 0x19
  2364                           
  2365  0039                     ?_can_send:	
  2366                           ; 1 bytes @ 0x19
  2367                           
  2368  0039                     can_send@dlc:	
  2369                           ; 1 bytes @ 0x19
  2370                           
  2371  0039                     set_sid@can_node:	
  2372                           ; 1 bytes @ 0x19
  2373                           
  2374                           
  2375                           ; 2 bytes @ 0x19
  2376  0039                     	ds	1
  2377  003A                     ??_can_send:	
  2378                           
  2379                           ; 1 bytes @ 0x1A
  2380  003A                     	ds	1
  2381  003B                     ??_set_sid:	
  2382  003B                     can_ope_mode@ope_mode:	
  2383                           ; 1 bytes @ 0x1B
  2384                           
  2385                           
  2386                           ; 1 bytes @ 0x1B
  2387  003B                     	ds	1
  2388  003C                     can_ope_mode@bytes_written:	
  2389                           
  2390                           ; 1 bytes @ 0x1C
  2391  003C                     	ds	1
  2392  003D                     can_ope_mode@can_ctrl_buf:	
  2393                           
  2394                           ; 3 bytes @ 0x1D
  2395  003D                     	ds	1
  2396  003E                     can_receive@bytes_read:	
  2397  003E                     can_send@tx_buf:	
  2398                           ; 1 bytes @ 0x1E
  2399                           
  2400                           
  2401                           ; 14 bytes @ 0x1E
  2402  003E                     	ds	1
  2403  003F                     set_sid@sidh:	
  2404  003F                     can_receive@rx_buf:	
  2405                           ; 1 bytes @ 0x1F
  2406                           
  2407                           
  2408                           ; 15 bytes @ 0x1F
  2409  003F                     	ds	1
  2410  0040                     set_sid@sidl:	
  2411                           
  2412                           ; 1 bytes @ 0x20
  2413  0040                     	ds	12
  2414  004C                     can_send@can_status_buf:	
  2415                           
  2416                           ; 2 bytes @ 0x2C
  2417  004C                     	ds	2
  2418  004E                     can_receive@dlc:	
  2419  004E                     can_send@buf:	
  2420                           ; 1 bytes @ 0x2E
  2421                           
  2422                           
  2423                           ; 1 bytes @ 0x2E
  2424  004E                     	ds	1
  2425  004F                     can_send@len:	
  2426  004F                     can_receive@sid:	
  2427                           ; 1 bytes @ 0x2F
  2428                           
  2429                           
  2430                           ; 2 bytes @ 0x2F
  2431  004F                     	ds	1
  2432  0050                     can_send@bytes_written:	
  2433                           
  2434                           ; 1 bytes @ 0x30
  2435  0050                     	ds	1
  2436  0051                     can_receive@rx_buf_ptr:	
  2437  0051                     can_send@txb_ctrl_buf:	
  2438                           ; 1 bytes @ 0x31
  2439                           
  2440                           
  2441                           ; 1 bytes @ 0x31
  2442  0051                     	ds	1
  2443  0052                     can_receive@n:	
  2444  0052                     can_send@status:	
  2445                           ; 1 bytes @ 0x32
  2446                           
  2447                           
  2448                           ; 1 bytes @ 0x32
  2449  0052                     	ds	1
  2450  0053                     ??_can_status_check:	
  2451  0053                     can_send@debug_buf:	
  2452                           ; 1 bytes @ 0x33
  2453                           
  2454                           
  2455                           ; 3 bytes @ 0x33
  2456  0053                     	ds	2
  2457  0055                     can_status_check@bytes_written:	
  2458                           
  2459                           ; 1 bytes @ 0x35
  2460  0055                     	ds	1
  2461  0056                     can_send@i:	
  2462  0056                     can_status_check@can_status_buf:	
  2463                           ; 1 bytes @ 0x36
  2464                           
  2465                           
  2466                           ; 2 bytes @ 0x36
  2467  0056                     	ds	1
  2468  0057                     can_send@n:	
  2469                           
  2470                           ; 1 bytes @ 0x37
  2471  0057                     	ds	1
  2472  0058                     can_status_check@status:	
  2473                           
  2474                           ; 1 bytes @ 0x38
  2475  0058                     	ds	1
  2476  0059                     ??_main:	
  2477                           
  2478                           ; 1 bytes @ 0x39
  2479  0059                     	ds	6
  2480                           
  2481                           	psect	maintext
  2482  050E                     __pmaintext:	
  2483 ;;
  2484 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2485 ;;
  2486 ;; *************** function _main *****************
  2487 ;; Defined at:
  2488 ;;		line 246 in file "main.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  rc              1   10[BANK1 ] unsigned char 
  2493 ;;  mask_buf        4   16[BANK1 ] unsigned char [4]
  2494 ;;  mask            2   12[BANK1 ] unsigned int 
  2495 ;;  n               1   21[BANK1 ] unsigned char 
  2496 ;;  cmd             1   20[BANK1 ] unsigned char 
  2497 ;;  mask_sidl       1   15[BANK1 ] unsigned char 
  2498 ;;  mask_sidh       1   14[BANK1 ] unsigned char 
  2499 ;;  sid             1    9[BANK1 ] unsigned char 
  2500 ;;  rc              1   11[BANK1 ] unsigned char 
  2501 ;;  cnf_buf         5    0[BANK1 ] unsigned char [5]
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  1    wreg      void 
  2504 ;; Registers used:
  2505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : B1F/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2512 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2513 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2514 ;;      Totals:         0       6      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;Total ram usage:       28 bytes
  2516 ;; Hardware stack levels required when called:    5
  2517 ;; This function calls:
  2518 ;;		_EUSART_Read
  2519 ;;		_SPI_exchange
  2520 ;;		_SYSTEM_Initialize
  2521 ;;		_atoi
  2522 ;;		_can_ope_mode
  2523 ;;		_can_send
  2524 ;;		_can_status_check
  2525 ;;		_printf
  2526 ;;		_set_sid
  2527 ;; This function is called by:
  2528 ;;		Startup code after reset
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           
  2533                           ;psect for function _main
  2534  050E                     _main:	
  2535                           
  2536                           ;main.c: 248: SYSTEM_Initialize();
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2540  050E  318E  265A  3185   	fcall	_SYSTEM_Initialize
  2541                           
  2542                           ;main.c: 253: set_sid(0);
  2543  0511  3000               	movlw	0
  2544  0512  0020               	movlb	0	; select bank0
  2545  0513  00B9               	movwf	set_sid@can_node
  2546  0514  00BA               	movwf	set_sid@can_node+1
  2547  0515  318F  2738  3185   	fcall	_set_sid
  2548                           
  2549                           ;main.c: 255: can_ope_mode(0b10000000);
  2550  0518  3080               	movlw	128
  2551  0519  318F  2773  3185   	fcall	_can_ope_mode
  2552                           
  2553                           ;main.c: 256: uint8_t cnf_buf[5] = {0b00000010, 0x28, 0b00000101, 0b11110001, 0b01000001
      +                          };
  2554  051C  30C1               	movlw	low main@F2974
  2555  051D  0086               	movwf	6
  2556  051E  3000               	movlw	high main@F2974
  2557  051F  0087               	movwf	7
  2558  0520  30A0               	movlw	low main@cnf_buf
  2559  0521  0084               	movwf	4
  2560  0522  3000               	movlw	high main@cnf_buf
  2561  0523  0085               	movwf	5
  2562  0524  3005               	movlw	5
  2563  0525  0020               	movlb	0	; select bank0
  2564  0526  00D9               	movwf	??_main
  2565  0527                     u2240:	
  2566  0527  0016               	moviw fsr1++
  2567  0528  001A               	movwi fsr0++
  2568  0529  0BD9               	decfsz	??_main,f
  2569  052A  2D27               	goto	u2240
  2570                           
  2571                           ;main.c: 257: SPI_exchange(cnf_buf, 5);
  2572  052B  3005               	movlw	5
  2573  052C  00D9               	movwf	??_main
  2574  052D  0859               	movf	??_main,w
  2575  052E  00F8               	movwf	SPI_exchange@len
  2576  052F  30A0               	movlw	(low (main@cnf_buf| 0))& (0+255)
  2577  0530  318E  2669  3185   	fcall	_SPI_exchange
  2578                           
  2579                           ;main.c: 259: mode.debug = 0;
  2580  0533  0020               	movlb	0	; select bank0
  2581  0534  01DF               	clrf	_mode
  2582                           
  2583                           ;main.c: 260: mode.verbose = 0;
  2584  0535  01E0               	clrf	_mode+1
  2585                           
  2586                           ;main.c: 261: mode.ope_mode = 0b00000000;
  2587  0536  01E1               	clrf	_mode+2
  2588                           
  2589                           ;main.c: 262: can_ope_mode(0b00000000);
  2590  0537  3000               	movlw	0
  2591  0538  318F  2773  3185   	fcall	_can_ope_mode
  2592  053B  2D8D               	goto	L7
  2593  053C                     l2242:	
  2594                           ;main.c: 288: case 'i':
  2595                           
  2596                           ;main.c: 281: uint8_t sid;
  2597                           ;main.c: 282: uint8_t n;
  2598                           ;main.c: 283: uint16_t mask;
  2599                           ;main.c: 284: uint8_t mask_sidh;
  2600                           ;main.c: 285: uint8_t mask_sidl;
  2601                           ;main.c: 286: uint8_t mask_buf[4];
  2602                           ;main.c: 287: switch(cmd) {
  2603                           
  2604                           ;main.c: 263: mode.with_sid = 0;
  2605                           
  2606                           
  2607                           ;main.c: 289: sid = atoi(&buf[2]);
  2608  053C  30BA               	movlw	(low ((_buf| 0+2)))& (0+255)
  2609  053D  3180  205F  3185   	fcall	_atoi
  2610  0540  0876               	movf	?_atoi,w
  2611  0541  0020               	movlb	0	; select bank0
  2612  0542  00D9               	movwf	??_main
  2613  0543  0859               	movf	??_main,w
  2614  0544  0021               	movlb	1	; select bank1
  2615  0545  00A9               	movwf	main@sid^(0+128)
  2616                           
  2617                           ;main.c: 290: set_sid(sid);
  2618  0546  0829               	movf	main@sid^(0+128),w
  2619  0547  0020               	movlb	0	; select bank0
  2620  0548  00D9               	movwf	??_main
  2621  0549  01DA               	clrf	??_main+1
  2622  054A  0859               	movf	??_main,w
  2623  054B  00B9               	movwf	set_sid@can_node
  2624  054C  085A               	movf	??_main+1,w
  2625  054D  00BA               	movwf	set_sid@can_node+1
  2626  054E  318F  2738  3185   	fcall	_set_sid
  2627                           
  2628                           ;main.c: 291: break;
  2629  0551  2F16               	goto	L3
  2630  0552                     l2246:	
  2631                           ;main.c: 292: case 'v':
  2632                           
  2633                           
  2634                           ;main.c: 293: if (buf[2] == 'd') {
  2635  0552  3064               	movlw	100
  2636  0553  0021               	movlb	1	; select bank1
  2637  0554  063A               	xorwf	(_buf^(0+128)+2),w
  2638  0555  1D03               	btfss	3,2
  2639  0556  2D5B               	goto	l2250
  2640                           
  2641                           ;main.c: 294: mode.debug = 1;
  2642  0557  0020               	movlb	0	; select bank0
  2643  0558  01DF               	clrf	_mode
  2644  0559  0ADF               	incf	_mode,f
  2645  055A  2D62               	goto	l2254
  2646  055B                     l2250:	
  2647                           ;main.c: 296: } else if (buf[2] == 'v') {
  2648                           
  2649                           ;main.c: 295: mode.verbose = 1;
  2650                           
  2651  055B  3076               	movlw	118
  2652  055C  0021               	movlb	1	; select bank1
  2653  055D  063A               	xorwf	(_buf^(0+128)+2),w
  2654  055E  1D03               	btfss	3,2
  2655  055F  2D65               	goto	l2256
  2656                           
  2657                           ;main.c: 297: mode.debug = 0;
  2658  0560  0020               	movlb	0	; select bank0
  2659  0561  01DF               	clrf	_mode
  2660  0562                     l2254:	
  2661                           
  2662                           ;main.c: 298: mode.verbose = 1;
  2663  0562  01E0               	clrf	_mode+1
  2664  0563  0AE0               	incf	_mode+1,f
  2665                           
  2666                           ;main.c: 299: } else if (buf[2] == 'n') {
  2667  0564  2F16               	goto	L3
  2668  0565                     l2256:	
  2669  0565  306E               	movlw	110
  2670  0566  0021               	movlb	1	; select bank1
  2671  0567  063A               	xorwf	(_buf^(0+128)+2),w
  2672  0568  1D03               	btfss	3,2
  2673  0569  2F16               	goto	L3
  2674                           
  2675                           ;main.c: 300: mode.debug = 0;
  2676  056A  0020               	movlb	0	; select bank0
  2677  056B  01DF               	clrf	_mode
  2678                           
  2679                           ;main.c: 301: mode.verbose = 0;
  2680  056C  01E0               	clrf	_mode+1
  2681                           
  2682                           ;main.c: 302: }
  2683                           ;main.c: 303: break;
  2684  056D  2F16               	goto	L3
  2685  056E                     l2260:	
  2686                           ;main.c: 304: case 'o':
  2687                           
  2688                           
  2689                           ;main.c: 305: if (buf[2] == 'l') {
  2690  056E  306C               	movlw	108
  2691  056F  0021               	movlb	1	; select bank1
  2692  0570  063A               	xorwf	(_buf^(0+128)+2),w
  2693  0571  1D03               	btfss	3,2
  2694  0572  2D7A               	goto	l2266
  2695                           
  2696                           ;main.c: 306: mode.ope_mode = 0b01000000;
  2697  0573  3040               	movlw	64
  2698  0574  0020               	movlb	0	; select bank0
  2699  0575  00D9               	movwf	??_main
  2700  0576  0859               	movf	??_main,w
  2701  0577  00E1               	movwf	_mode+2
  2702                           
  2703                           ;main.c: 307: can_ope_mode(0b01000000);
  2704  0578  3040               	movlw	64
  2705  0579  2D82               	goto	L4
  2706  057A                     l2266:	
  2707                           ;main.c: 308: } else if (buf[2] == 'n') {
  2708                           
  2709  057A  306E               	movlw	110
  2710  057B  0021               	movlb	1	; select bank1
  2711  057C  063A               	xorwf	(_buf^(0+128)+2),w
  2712  057D  1D03               	btfss	3,2
  2713  057E  2D85               	goto	l2272
  2714                           
  2715                           ;main.c: 309: mode.ope_mode = 0b00000000;
  2716  057F  0020               	movlb	0	; select bank0
  2717  0580  01E1               	clrf	_mode+2
  2718                           
  2719                           ;main.c: 310: can_ope_mode(0b00000000);
  2720  0581  3000               	movlw	0
  2721  0582                     L4:	
  2722  0582  318F  2773  3185   	fcall	_can_ope_mode
  2723  0585                     l2272:	
  2724                           
  2725                           ;main.c: 311: }
  2726                           ;main.c: 312: if (buf[3] != '\0') {
  2727  0585  0021               	movlb	1	; select bank1
  2728  0586  083B               	movf	(_buf^(0+128)+3),w
  2729  0587  1903               	btfsc	3,2
  2730  0588  2F16               	goto	L3
  2731                           
  2732                           ;main.c: 313: if (buf[3] == 'n') {
  2733  0589  306E               	movlw	110
  2734  058A  063B               	xorwf	(_buf^(0+128)+3),w
  2735  058B  1D03               	btfss	3,2
  2736  058C  2D90               	goto	l2278
  2737  058D                     L7:	
  2738                           
  2739                           ;main.c: 314: mode.with_sid = 0;
  2740  058D  0020               	movlb	0	; select bank0
  2741  058E  01E2               	clrf	_mode+3
  2742                           
  2743                           ;main.c: 315: } else if (buf[3] == 's') {
  2744  058F  2F16               	goto	L3
  2745  0590                     l2278:	
  2746  0590  3073               	movlw	115
  2747  0591  0021               	movlb	1	; select bank1
  2748  0592  063B               	xorwf	(_buf^(0+128)+3),w
  2749  0593  1D03               	btfss	3,2
  2750  0594  2F16               	goto	L3
  2751                           
  2752                           ;main.c: 316: mode.with_sid = 1;
  2753  0595  0020               	movlb	0	; select bank0
  2754  0596  01E2               	clrf	_mode+3
  2755  0597  0AE2               	incf	_mode+3,f
  2756                           
  2757                           ;main.c: 317: }
  2758                           ;main.c: 318: }
  2759                           ;main.c: 319: break;
  2760  0598  2F16               	goto	L3
  2761  0599                     l2282:	
  2762                           ;main.c: 320: case 'm':
  2763                           
  2764                           
  2765                           ;main.c: 321: case 'f':
  2766                           ;main.c: 322: can_ope_mode(0b10000000);
  2767  0599  3080               	movlw	128
  2768  059A  318F  2773  3185   	fcall	_can_ope_mode
  2769                           
  2770                           ;main.c: 323: n = buf[2] - 0x30;
  2771  059D  0021               	movlb	1	; select bank1
  2772  059E  083A               	movf	(_buf^(0+128)+2),w
  2773  059F  3ED0               	addlw	208
  2774  05A0  0020               	movlb	0	; select bank0
  2775  05A1  00D9               	movwf	??_main
  2776  05A2  0859               	movf	??_main,w
  2777  05A3  0021               	movlb	1	; select bank1
  2778  05A4  00B5               	movwf	main@n^(0+128)
  2779                           
  2780                           ;main.c: 324: mask = atoi(&buf[3]);
  2781  05A5  30BB               	movlw	(low ((_buf| 0+3)))& (0+255)
  2782  05A6  3180  205F  3185   	fcall	_atoi
  2783  05A9  0877               	movf	?_atoi+1,w
  2784  05AA  0021               	movlb	1	; select bank1
  2785  05AB  00AD               	movwf	(main@mask+1)^(0+128)
  2786  05AC  0876               	movf	?_atoi,w
  2787  05AD  00AC               	movwf	main@mask^(0+128)
  2788                           
  2789                           ;main.c: 325: mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  2790  05AE  082D               	movf	(main@mask+1)^(0+128),w
  2791  05AF  0020               	movlb	0	; select bank0
  2792  05B0  00DA               	movwf	??_main+1
  2793  05B1  0021               	movlb	1	; select bank1
  2794  05B2  082C               	movf	main@mask^(0+128),w
  2795  05B3  0020               	movlb	0	; select bank0
  2796  05B4  00D9               	movwf	??_main
  2797  05B5  36DA               	lsrf	??_main+1,f
  2798  05B6  0CD9               	rrf	??_main,f
  2799  05B7  36DA               	lsrf	??_main+1,f
  2800  05B8  0CD9               	rrf	??_main,f
  2801  05B9  36DA               	lsrf	??_main+1,f
  2802  05BA  0CD9               	rrf	??_main,f
  2803  05BB  0859               	movf	??_main,w
  2804  05BC  00DB               	movwf	??_main+2
  2805  05BD  085B               	movf	??_main+2,w
  2806  05BE  0021               	movlb	1	; select bank1
  2807  05BF  00AE               	movwf	main@mask_sidh^(0+128)
  2808                           
  2809                           ;main.c: 326: mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  2810  05C0  082C               	movf	main@mask^(0+128),w
  2811  05C1  3907               	andlw	7
  2812  05C2  0020               	movlb	0	; select bank0
  2813  05C3  00D9               	movwf	??_main
  2814  05C4  3004               	movlw	4
  2815  05C5                     u2375:	
  2816  05C5  35D9               	lslf	??_main,f
  2817  05C6  3EFF               	addlw	-1
  2818  05C7  1D03               	skipz
  2819  05C8  2DC5               	goto	u2375
  2820  05C9  3559               	lslf	??_main,w
  2821  05CA  00DA               	movwf	??_main+1
  2822  05CB  085A               	movf	??_main+1,w
  2823  05CC  0021               	movlb	1	; select bank1
  2824  05CD  00AF               	movwf	main@mask_sidl^(0+128)
  2825                           
  2826                           ;main.c: 327: if (mode.debug) {
  2827  05CE  0020               	movlb	0	; select bank0
  2828  05CF  085F               	movf	_mode,w
  2829  05D0  1903               	btfsc	3,2
  2830  05D1  2DFF               	goto	l2300
  2831                           
  2832                           ;main.c: 328: if (cmd == 'm') {
  2833  05D2  306D               	movlw	109
  2834  05D3  0021               	movlb	1	; select bank1
  2835  05D4  0634               	xorwf	main@cmd^(0+128),w
  2836  05D5  1D03               	btfss	3,2
  2837  05D6  2DDC               	goto	l2298
  2838                           
  2839                           ;main.c: 329: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2840  05D7  30C7               	movlw	low (STR_20| (0+32768))
  2841  05D8  0020               	movlb	0	; select bank0
  2842  05D9  00A0               	movwf	printf@f
  2843  05DA  3091               	movlw	high (STR_20| (0+32768))
  2844  05DB  2DE0               	goto	L5
  2845  05DC                     l2298:	
  2846                           ;main.c: 330: } else {
  2847                           
  2848                           
  2849                           ;main.c: 331: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2850  05DC  3084               	movlw	low (STR_21| (0+32768))
  2851  05DD  0020               	movlb	0	; select bank0
  2852  05DE  00A0               	movwf	printf@f
  2853  05DF  3091               	movlw	high (STR_21| (0+32768))
  2854  05E0                     L5:	
  2855  05E0  00A1               	movwf	printf@f+1
  2856  05E1  0021               	movlb	1	; select bank1
  2857  05E2  0835               	movf	main@n^(0+128),w
  2858  05E3  0020               	movlb	0	; select bank0
  2859  05E4  00D9               	movwf	??_main
  2860  05E5  01DA               	clrf	??_main+1
  2861  05E6  0859               	movf	??_main,w
  2862  05E7  00A2               	movwf	?_printf+2
  2863  05E8  085A               	movf	??_main+1,w
  2864  05E9  00A3               	movwf	?_printf+3
  2865  05EA  0021               	movlb	1	; select bank1
  2866  05EB  082E               	movf	main@mask_sidh^(0+128),w
  2867  05EC  0020               	movlb	0	; select bank0
  2868  05ED  00DB               	movwf	??_main+2
  2869  05EE  01DC               	clrf	??_main+3
  2870  05EF  085B               	movf	??_main+2,w
  2871  05F0  00A4               	movwf	?_printf+4
  2872  05F1  085C               	movf	??_main+3,w
  2873  05F2  00A5               	movwf	?_printf+5
  2874  05F3  0021               	movlb	1	; select bank1
  2875  05F4  082F               	movf	main@mask_sidl^(0+128),w
  2876  05F5  0020               	movlb	0	; select bank0
  2877  05F6  00DD               	movwf	??_main+4
  2878  05F7  01DE               	clrf	??_main+5
  2879  05F8  085D               	movf	??_main+4,w
  2880  05F9  00A6               	movwf	?_printf+6
  2881  05FA  085E               	movf	??_main+5,w
  2882  05FB  00A7               	movwf	?_printf+7
  2883  05FC  3182  22D3  3185   	fcall	_printf
  2884  05FF                     l2300:	
  2885                           
  2886                           ;main.c: 332: }
  2887                           ;main.c: 333: }
  2888                           ;main.c: 334: mask_buf[0] = 0b00000010;
  2889  05FF  3002               	movlw	2
  2890  0600  0020               	movlb	0	; select bank0
  2891  0601  00D9               	movwf	??_main
  2892  0602  0859               	movf	??_main,w
  2893  0603  0021               	movlb	1	; select bank1
  2894  0604  00B0               	movwf	main@mask_buf^(0+128)
  2895                           
  2896                           ;main.c: 335: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2897  0605  306D               	movlw	109
  2898  0606  0634               	xorwf	main@cmd^(0+128),w
  2899  0607  1903               	btfsc	3,2
  2900  0608  2E0E               	goto	l2306
  2901  0609  0835               	movf	main@n^(0+128),w
  2902  060A  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2903  060B  0084               	movwf	4
  2904  060C  3093               	movlw	high (_rxfnsidh| (0+32768))
  2905  060D  2E12               	goto	L1
  2906  060E                     l2306:	
  2907  060E  0835               	movf	main@n^(0+128),w
  2908  060F  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2909  0610  0084               	movwf	4
  2910  0611  3093               	movlw	high (_rxmnsidh| (0+32768))
  2911  0612                     L1:	
  2912  0612  1803               	skipnc
  2913  0613  3E01               	addlw	1
  2914  0614  0085               	movwf	5
  2915  0615  0800               	movf	0,w	;code access
  2916  0616  0020               	movlb	0	; select bank0
  2917  0617  00D9               	movwf	??_main
  2918  0618  01DA               	clrf	??_main+1
  2919  0619  0859               	movf	??_main,w
  2920  061A  0021               	movlb	1	; select bank1
  2921  061B  00A5               	movwf	_main$433^(0+128)
  2922  061C  0020               	movlb	0	; select bank0
  2923  061D  085A               	movf	??_main+1,w
  2924  061E  0021               	movlb	1	; select bank1
  2925  061F  00A6               	movwf	(_main$433+1)^(0+128)
  2926  0620  0825               	movf	_main$433^(0+128),w
  2927  0621  0020               	movlb	0	; select bank0
  2928  0622  00D9               	movwf	??_main
  2929  0623  0859               	movf	??_main,w
  2930  0624  0021               	movlb	1	; select bank1
  2931  0625  00B1               	movwf	(main@mask_buf^(0+128)+1)
  2932                           
  2933                           ;main.c: 336: mask_buf[2] = mask_sidh;
  2934  0626  082E               	movf	main@mask_sidh^(0+128),w
  2935  0627  0020               	movlb	0	; select bank0
  2936  0628  00D9               	movwf	??_main
  2937  0629  0859               	movf	??_main,w
  2938  062A  0021               	movlb	1	; select bank1
  2939  062B  00B2               	movwf	(main@mask_buf^(0+128)+2)
  2940                           
  2941                           ;main.c: 337: mask_buf[3] = mask_sidl;
  2942  062C  082F               	movf	main@mask_sidl^(0+128),w
  2943  062D  0020               	movlb	0	; select bank0
  2944  062E  00D9               	movwf	??_main
  2945  062F  0859               	movf	??_main,w
  2946  0630  0021               	movlb	1	; select bank1
  2947  0631  00B3               	movwf	(main@mask_buf^(0+128)+3)
  2948                           
  2949                           ;main.c: 338: SPI_exchange(mask_buf, 4);
  2950  0632  3004               	movlw	4
  2951  0633  0020               	movlb	0	; select bank0
  2952  0634  00D9               	movwf	??_main
  2953  0635  0859               	movf	??_main,w
  2954  0636  00F8               	movwf	SPI_exchange@len
  2955  0637  30B0               	movlw	(low (main@mask_buf| 0))& (0+255)
  2956  0638  318E  2669  3185   	fcall	_SPI_exchange
  2957                           
  2958                           ;main.c: 340: if (mode.debug) {
  2959  063B  0020               	movlb	0	; select bank0
  2960  063C  085F               	movf	_mode,w
  2961  063D  1903               	btfsc	3,2
  2962  063E  2EC8               	goto	l283
  2963                           
  2964                           ;main.c: 341: mask_buf[0] = 0b00000011;
  2965  063F  3003               	movlw	3
  2966  0640  00D9               	movwf	??_main
  2967  0641  0859               	movf	??_main,w
  2968  0642  0021               	movlb	1	; select bank1
  2969  0643  00B0               	movwf	main@mask_buf^(0+128)
  2970                           
  2971                           ;main.c: 342: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2972  0644  306D               	movlw	109
  2973  0645  0634               	xorwf	main@cmd^(0+128),w
  2974  0646  1903               	btfsc	3,2
  2975  0647  2E4D               	goto	l2324
  2976  0648  0835               	movf	main@n^(0+128),w
  2977  0649  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2978  064A  0084               	movwf	4
  2979  064B  3093               	movlw	high (_rxfnsidh| (0+32768))
  2980  064C  2E51               	goto	L2
  2981  064D                     l2324:	
  2982  064D  0835               	movf	main@n^(0+128),w
  2983  064E  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2984  064F  0084               	movwf	4
  2985  0650  3093               	movlw	high (_rxmnsidh| (0+32768))
  2986  0651                     L2:	
  2987  0651  1803               	skipnc
  2988  0652  3E01               	addlw	1
  2989  0653  0085               	movwf	5
  2990  0654  0800               	movf	0,w	;code access
  2991  0655  0020               	movlb	0	; select bank0
  2992  0656  00D9               	movwf	??_main
  2993  0657  01DA               	clrf	??_main+1
  2994  0658  0859               	movf	??_main,w
  2995  0659  0021               	movlb	1	; select bank1
  2996  065A  00A7               	movwf	_main$434^(0+128)
  2997  065B  0020               	movlb	0	; select bank0
  2998  065C  085A               	movf	??_main+1,w
  2999  065D  0021               	movlb	1	; select bank1
  3000  065E  00A8               	movwf	(_main$434+1)^(0+128)
  3001  065F  0827               	movf	_main$434^(0+128),w
  3002  0660  0020               	movlb	0	; select bank0
  3003  0661  00D9               	movwf	??_main
  3004  0662  0859               	movf	??_main,w
  3005  0663  0021               	movlb	1	; select bank1
  3006  0664  00B1               	movwf	(main@mask_buf^(0+128)+1)
  3007                           
  3008                           ;main.c: 343: mask_buf[2] = 0x00;
  3009  0665  01B2               	clrf	(main@mask_buf^(0+128)+2)
  3010                           
  3011                           ;main.c: 344: mask_buf[3] = 0x00;
  3012  0666  01B3               	clrf	(main@mask_buf^(0+128)+3)
  3013                           
  3014                           ;main.c: 345: SPI_exchange(mask_buf, 4);
  3015  0667  3004               	movlw	4
  3016  0668  0020               	movlb	0	; select bank0
  3017  0669  00D9               	movwf	??_main
  3018  066A  0859               	movf	??_main,w
  3019  066B  00F8               	movwf	SPI_exchange@len
  3020  066C  30B0               	movlw	(low (main@mask_buf| 0))& (0+255)
  3021  066D  318E  2669  3185   	fcall	_SPI_exchange
  3022                           
  3023                           ;main.c: 346: if (cmd == 'm') {
  3024  0670  306D               	movlw	109
  3025  0671  0021               	movlb	1	; select bank1
  3026  0672  0634               	xorwf	main@cmd^(0+128),w
  3027  0673  1D03               	btfss	3,2
  3028  0674  2E94               	goto	l2338
  3029                           
  3030                           ;main.c: 347: printf("RXM%dSIDH: %02x\n", n, mask_buf[2]);
  3031  0675  305B               	movlw	low (STR_22| (0+32768))
  3032  0676  0020               	movlb	0	; select bank0
  3033  0677  00A0               	movwf	printf@f
  3034  0678  3092               	movlw	high (STR_22| (0+32768))
  3035  0679  00A1               	movwf	printf@f+1
  3036  067A  0021               	movlb	1	; select bank1
  3037  067B  0835               	movf	main@n^(0+128),w
  3038  067C  0020               	movlb	0	; select bank0
  3039  067D  00D9               	movwf	??_main
  3040  067E  01DA               	clrf	??_main+1
  3041  067F  0859               	movf	??_main,w
  3042  0680  00A2               	movwf	?_printf+2
  3043  0681  085A               	movf	??_main+1,w
  3044  0682  00A3               	movwf	?_printf+3
  3045  0683  0021               	movlb	1	; select bank1
  3046  0684  0832               	movf	(main@mask_buf^(0+128)+2),w
  3047  0685  0020               	movlb	0	; select bank0
  3048  0686  00DB               	movwf	??_main+2
  3049  0687  01DC               	clrf	??_main+3
  3050  0688  085B               	movf	??_main+2,w
  3051  0689  00A4               	movwf	?_printf+4
  3052  068A  085C               	movf	??_main+3,w
  3053  068B  00A5               	movwf	?_printf+5
  3054  068C  3182  22D3  3185   	fcall	_printf
  3055                           
  3056                           ;main.c: 348: printf("RXM%dSIDL: %02x\n", n, mask_buf[3]);
  3057  068F  309F               	movlw	low (STR_23| (0+32768))
  3058  0690  0020               	movlb	0	; select bank0
  3059  0691  00A0               	movwf	printf@f
  3060  0692  3092               	movlw	high (STR_23| (0+32768))
  3061  0693  2EB2               	goto	L6
  3062  0694                     l2338:	
  3063                           ;main.c: 349: } else {
  3064                           
  3065                           
  3066                           ;main.c: 350: printf("RXF%dSIDH: %02x\n", n, mask_buf[2]);
  3067  0694  304A               	movlw	low (STR_24| (0+32768))
  3068  0695  0020               	movlb	0	; select bank0
  3069  0696  00A0               	movwf	printf@f
  3070  0697  3092               	movlw	high (STR_24| (0+32768))
  3071  0698  00A1               	movwf	printf@f+1
  3072  0699  0021               	movlb	1	; select bank1
  3073  069A  0835               	movf	main@n^(0+128),w
  3074  069B  0020               	movlb	0	; select bank0
  3075  069C  00D9               	movwf	??_main
  3076  069D  01DA               	clrf	??_main+1
  3077  069E  0859               	movf	??_main,w
  3078  069F  00A2               	movwf	?_printf+2
  3079  06A0  085A               	movf	??_main+1,w
  3080  06A1  00A3               	movwf	?_printf+3
  3081  06A2  0021               	movlb	1	; select bank1
  3082  06A3  0832               	movf	(main@mask_buf^(0+128)+2),w
  3083  06A4  0020               	movlb	0	; select bank0
  3084  06A5  00DB               	movwf	??_main+2
  3085  06A6  01DC               	clrf	??_main+3
  3086  06A7  085B               	movf	??_main+2,w
  3087  06A8  00A4               	movwf	?_printf+4
  3088  06A9  085C               	movf	??_main+3,w
  3089  06AA  00A5               	movwf	?_printf+5
  3090  06AB  3182  22D3  3185   	fcall	_printf
  3091                           
  3092                           ;main.c: 351: printf("RXF%dSIDL: %02x\n", n, mask_buf[3]);
  3093  06AE  308E               	movlw	low (STR_25| (0+32768))
  3094  06AF  0020               	movlb	0	; select bank0
  3095  06B0  00A0               	movwf	printf@f
  3096  06B1  3092               	movlw	high (STR_25| (0+32768))
  3097  06B2                     L6:	
  3098  06B2  00A1               	movwf	printf@f+1
  3099  06B3  0021               	movlb	1	; select bank1
  3100  06B4  0835               	movf	main@n^(0+128),w
  3101  06B5  0020               	movlb	0	; select bank0
  3102  06B6  00D9               	movwf	??_main
  3103  06B7  01DA               	clrf	??_main+1
  3104  06B8  0859               	movf	??_main,w
  3105  06B9  00A2               	movwf	?_printf+2
  3106  06BA  085A               	movf	??_main+1,w
  3107  06BB  00A3               	movwf	?_printf+3
  3108  06BC  0021               	movlb	1	; select bank1
  3109  06BD  0833               	movf	(main@mask_buf^(0+128)+3),w
  3110  06BE  0020               	movlb	0	; select bank0
  3111  06BF  00DB               	movwf	??_main+2
  3112  06C0  01DC               	clrf	??_main+3
  3113  06C1  085B               	movf	??_main+2,w
  3114  06C2  00A4               	movwf	?_printf+4
  3115  06C3  085C               	movf	??_main+3,w
  3116  06C4  00A5               	movwf	?_printf+5
  3117  06C5  3182  22D3  3185   	fcall	_printf
  3118  06C8                     l283:	
  3119                           
  3120                           ;main.c: 352: }
  3121                           ;main.c: 353: }
  3122                           ;main.c: 355: can_ope_mode(mode.ope_mode);
  3123  06C8  0020               	movlb	0	; select bank0
  3124  06C9  0861               	movf	_mode+2,w
  3125  06CA  318F  2773  3185   	fcall	_can_ope_mode
  3126                           
  3127                           ;main.c: 356: break;
  3128  06CD  2F16               	goto	L3
  3129  06CE                     l2340:	
  3130                           ;main.c: 357: case 'h':
  3131                           
  3132                           
  3133                           ;main.c: 358: printf("--- UART2CAN HELP ---\n");
  3134  06CE  306D               	movlw	low (STR_26| (0+32768))
  3135  06CF  0020               	movlb	0	; select bank0
  3136  06D0  00A0               	movwf	printf@f
  3137  06D1  3091               	movlw	high (STR_26| (0+32768))
  3138  06D2  00A1               	movwf	printf@f+1
  3139  06D3  3182  22D3  3185   	fcall	_printf
  3140                           
  3141                           ;main.c: 359: printf("[Set standard identifier] @i<Standard Identifier>\n");
  3142  06D6  3072               	movlw	low (STR_27| (0+32768))
  3143  06D7  0020               	movlb	0	; select bank0
  3144  06D8  00A0               	movwf	printf@f
  3145  06D9  3090               	movlw	high (STR_27| (0+32768))
  3146  06DA  00A1               	movwf	printf@f+1
  3147  06DB  3182  22D3  3185   	fcall	_printf
  3148                           
  3149                           ;main.c: 360: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3150  06DE  3001               	movlw	low (STR_28| (0+32768))
  3151  06DF  0020               	movlb	0	; select bank0
  3152  06E0  00A0               	movwf	printf@f
  3153  06E1  3090               	movlw	high (STR_28| (0+32768))
  3154  06E2  00A1               	movwf	printf@f+1
  3155  06E3  3182  22D3  3185   	fcall	_printf
  3156                           
  3157                           ;main.c: 361: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3158  06E6  303C               	movlw	low (STR_29| (0+32768))
  3159  06E7  0020               	movlb	0	; select bank0
  3160  06E8  00A0               	movwf	printf@f
  3161  06E9  3090               	movlw	high (STR_29| (0+32768))
  3162  06EA  00A1               	movwf	printf@f+1
  3163  06EB  3182  22D3  3185   	fcall	_printf
  3164                           
  3165                           ;main.c: 362: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3166  06EE  30FB               	movlw	low (STR_30| (0+32768))
  3167  06EF  0020               	movlb	0	; select bank0
  3168  06F0  00A0               	movwf	printf@f
  3169  06F1  3090               	movlw	high (STR_30| (0+32768))
  3170  06F2  00A1               	movwf	printf@f+1
  3171  06F3  3182  22D3  3185   	fcall	_printf
  3172                           
  3173                           ;main.c: 363: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3174  06F6  30D1               	movlw	low (STR_31| (0+32768))
  3175  06F7  0020               	movlb	0	; select bank0
  3176  06F8  00A0               	movwf	printf@f
  3177  06F9  3090               	movlw	high (STR_31| (0+32768))
  3178  06FA  00A1               	movwf	printf@f+1
  3179  06FB  3182  22D3  3185   	fcall	_printf
  3180                           
  3181                           ;main.c: 364: printf("[Send message] <message>\n");
  3182  06FE  3021               	movlw	low (STR_32| (0+32768))
  3183  06FF  0020               	movlb	0	; select bank0
  3184  0700  00A0               	movwf	printf@f
  3185  0701  3091               	movlw	high (STR_32| (0+32768))
  3186  0702  00A1               	movwf	printf@f+1
  3187  0703  3182  22D3  3185   	fcall	_printf
  3188                           
  3189                           ;main.c: 365: printf("[Receive message] <message> will be output\n");
  3190  0706  30A5               	movlw	low (STR_33| (0+32768))
  3191  0707  0020               	movlb	0	; select bank0
  3192  0708  00A0               	movwf	printf@f
  3193  0709  3090               	movlw	high (STR_33| (0+32768))
  3194  070A  00A1               	movwf	printf@f+1
  3195  070B  3182  22D3  3185   	fcall	_printf
  3196                           
  3197                           ;main.c: 366: printf("[Show this help]: @h\n");
  3198  070E  309B               	movlw	low (STR_34| (0+32768))
  3199  070F  0020               	movlb	0	; select bank0
  3200  0710  00A0               	movwf	printf@f
  3201  0711  3091               	movlw	high (STR_34| (0+32768))
  3202  0712                     L10:	
  3203  0712  00A1               	movwf	printf@f+1
  3204  0713                     L8:	
  3205  0713  3182  22D3  3185   	fcall	_printf
  3206  0716                     L3:	
  3207                           ;main.c: 368: }
  3208                           
  3209                           ;main.c: 367: break;
  3210                           
  3211                           
  3212                           ;main.c: 265: idx = 0;
  3213  0716  0021               	movlb	1	; select bank1
  3214  0717  01B6               	clrf	_idx^(0+128)
  3215  0718                     l2222:	
  3216                           ;main.c: 267: while (1)
  3217                           
  3218                           
  3219                           ;main.c: 268: {
  3220                           ;main.c: 269: can_status_check();
  3221  0718  318F  27B6  3185   	fcall	_can_status_check
  3222                           
  3223                           ;main.c: 271: if ((PIR1bits.RCIF)) {
  3224  071B  0020               	movlb	0	; select bank0
  3225  071C  1E91               	btfss	17,5	;volatile
  3226  071D  2F18               	goto	l2222
  3227                           
  3228                           ;main.c: 272: c = EUSART_Read();
  3229  071E  318E  2642  3185   	fcall	_EUSART_Read
  3230  0721  0020               	movlb	0	; select bank0
  3231  0722  00D9               	movwf	??_main
  3232  0723  0859               	movf	??_main,w
  3233  0724  0021               	movlb	1	; select bank1
  3234  0725  00B7               	movwf	_c^(0+128)
  3235                           
  3236                           ;main.c: 273: if (mode.verbose) printf("%c", c);
  3237  0726  0020               	movlb	0	; select bank0
  3238  0727  0860               	movf	_mode+1,w
  3239  0728  1903               	btfsc	3,2
  3240  0729  2F3A               	goto	l2232
  3241  072A  3047               	movlw	low (STR_19| (0+32768))
  3242  072B  00A0               	movwf	printf@f
  3243  072C  3093               	movlw	high (STR_19| (0+32768))
  3244  072D  00A1               	movwf	printf@f+1
  3245  072E  0021               	movlb	1	; select bank1
  3246  072F  0837               	movf	_c^(0+128),w
  3247  0730  0020               	movlb	0	; select bank0
  3248  0731  00D9               	movwf	??_main
  3249  0732  01DA               	clrf	??_main+1
  3250  0733  0859               	movf	??_main,w
  3251  0734  00A2               	movwf	?_printf+2
  3252  0735  085A               	movf	??_main+1,w
  3253  0736  00A3               	movwf	?_printf+3
  3254  0737  3182  22D3  3185   	fcall	_printf
  3255  073A                     l2232:	
  3256                           
  3257                           ;main.c: 276: buf[idx] = c;
  3258  073A  0021               	movlb	1	; select bank1
  3259  073B  0837               	movf	_c^(0+128),w
  3260  073C  0020               	movlb	0	; select bank0
  3261  073D  00D9               	movwf	??_main
  3262  073E  0021               	movlb	1	; select bank1
  3263  073F  0836               	movf	_idx^(0+128),w
  3264  0740  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3265  0741  0086               	movwf	6
  3266  0742  0187               	clrf	7
  3267  0743  0020               	movlb	0	; select bank0
  3268  0744  0859               	movf	??_main,w
  3269  0745  0081               	movwf	1
  3270                           
  3271                           ;main.c: 277: if (c == '\n') {
  3272  0746  300A               	movlw	10
  3273  0747  0021               	movlb	1	; select bank1
  3274  0748  0637               	xorwf	_c^(0+128),w
  3275  0749  1D03               	btfss	3,2
  3276  074A  2F95               	goto	l2360
  3277                           
  3278                           ;main.c: 278: buf[idx] = '\0';
  3279  074B  0836               	movf	_idx^(0+128),w
  3280  074C  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3281  074D  0086               	movwf	6
  3282  074E  0187               	clrf	7
  3283  074F  0181               	clrf	1
  3284                           
  3285                           ;main.c: 279: if (buf[0] == '@') {
  3286  0750  3040               	movlw	64
  3287  0751  0638               	xorwf	_buf^(0+128),w
  3288  0752  1D03               	btfss	3,2
  3289  0753  2F70               	goto	l2346
  3290                           
  3291                           ;main.c: 280: uint8_t cmd = buf[1];
  3292  0754  0839               	movf	(_buf^(0+128)+1),w
  3293  0755  0020               	movlb	0	; select bank0
  3294  0756  00D9               	movwf	??_main
  3295  0757  0859               	movf	??_main,w
  3296  0758  0021               	movlb	1	; select bank1
  3297  0759  00B4               	movwf	main@cmd^(0+128)
  3298  075A  0021               	movlb	1	; select bank1
  3299  075B  0834               	movf	main@cmd^(0+128),w
  3300                           
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 6, Range of values is 102 to 118
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte           19    10 (average)
  3306                           ; direct_byte           43     9 (fixed)
  3307                           ; jumptable            263     9 (fixed)
  3308                           ;	Chosen strategy is simple_byte
  3309  075C  3A66               	xorlw	102	; case 102
  3310  075D  1903               	skipnz
  3311  075E  2D99               	goto	l2282
  3312  075F  3A0E               	xorlw	14	; case 104
  3313  0760  1903               	skipnz
  3314  0761  2ECE               	goto	l2340
  3315  0762  3A01               	xorlw	1	; case 105
  3316  0763  1903               	skipnz
  3317  0764  2D3C               	goto	l2242
  3318  0765  3A04               	xorlw	4	; case 109
  3319  0766  1903               	skipnz
  3320  0767  2D99               	goto	l2282
  3321  0768  3A02               	xorlw	2	; case 111
  3322  0769  1903               	skipnz
  3323  076A  2D6E               	goto	l2260
  3324  076B  3A19               	xorlw	25	; case 118
  3325  076C  1903               	skipnz
  3326  076D  2D52               	goto	l2246
  3327  076E  2F94               	goto	l2358
  3328                           
  3329                           ;main.c: 369: } else {
  3330  076F  2F16               	goto	L3
  3331  0770                     l2346:	
  3332                           
  3333                           ;main.c: 370: bool rc = can_send(buf, idx);
  3334  0770  0836               	movf	_idx^(0+128),w
  3335  0771  0020               	movlb	0	; select bank0
  3336  0772  00D9               	movwf	??_main
  3337  0773  0859               	movf	??_main,w
  3338  0774  00B9               	movwf	can_send@dlc
  3339  0775  30B8               	movlw	(low (_buf| 0))& (0+255)
  3340  0776  3181  21A0  3185   	fcall	_can_send
  3341  0779  0020               	movlb	0	; select bank0
  3342  077A  00DA               	movwf	??_main+1
  3343  077B  085A               	movf	??_main+1,w
  3344  077C  0021               	movlb	1	; select bank1
  3345  077D  00AA               	movwf	main@rc^(0+128)
  3346                           
  3347                           ;main.c: 371: if (rc) {
  3348  077E  082A               	movf	main@rc^(0+128),w
  3349  077F  1903               	btfsc	3,2
  3350  0780  2F89               	goto	l2354
  3351                           
  3352                           ;main.c: 372: if (mode.verbose) printf("Message sent: %s\n", buf);
  3353  0781  0020               	movlb	0	; select bank0
  3354  0782  0860               	movf	_mode+1,w
  3355  0783  1903               	btfsc	3,2
  3356  0784  2F16               	goto	L3
  3357  0785  3005               	movlw	low ((STR_37+1)| (0+32768))
  3358  0786  00A0               	movwf	printf@f
  3359  0787  3092               	movlw	high ((STR_37+1)| (0+32768))
  3360  0788  2FC6               	goto	L9
  3361  0789                     l2354:	
  3362                           ;main.c: 373: } else {
  3363                           
  3364                           
  3365                           ;main.c: 374: if (mode.verbose) printf("Unable to send message\n");
  3366  0789  0020               	movlb	0	; select bank0
  3367  078A  0860               	movf	_mode+1,w
  3368  078B  1903               	btfsc	3,2
  3369  078C  2F16               	goto	L3
  3370  078D  303C               	movlw	low ((STR_38+1)| (0+32768))
  3371  078E  00A0               	movwf	printf@f
  3372  078F  3091               	movlw	high ((STR_38+1)| (0+32768))
  3373  0790  00A1               	movwf	printf@f+1
  3374  0791  3182  22D3  3185   	fcall	_printf
  3375  0794                     l2358:	
  3376  0794  2F16               	goto	L3
  3377  0795                     l2360:	
  3378                           ;main.c: 378: } else if (++idx > max_idx) {
  3379                           
  3380                           ;main.c: 375: }
  3381                           ;main.c: 376: }
  3382                           ;main.c: 377: idx = 0;
  3383                           
  3384  0795  3001               	movlw	1
  3385  0796  0020               	movlb	0	; select bank0
  3386  0797  00D9               	movwf	??_main
  3387  0798  0859               	movf	??_main,w
  3388  0799  0021               	movlb	1	; select bank1
  3389  079A  07B6               	addwf	_idx^(0+128),f
  3390  079B  3000               	movlw	low (_max_idx| (0+32768))
  3391  079C  0084               	movwf	4
  3392  079D  3090               	movlw	high (_max_idx| (0+32768))
  3393  079E  0085               	movwf	5
  3394  079F  0800               	movf	0,w	;code access
  3395  07A0  0020               	movlb	0	; select bank0
  3396  07A1  00DA               	movwf	??_main+1
  3397  07A2  0021               	movlb	1	; select bank1
  3398  07A3  0836               	movf	_idx^(0+128),w
  3399  07A4  0020               	movlb	0	; select bank0
  3400  07A5  025A               	subwf	??_main+1,w
  3401  07A6  1803               	skipnc
  3402  07A7  2F18               	goto	l2222
  3403                           
  3404                           ;main.c: 379: buf[idx] = '\0';
  3405  07A8  0021               	movlb	1	; select bank1
  3406  07A9  0836               	movf	_idx^(0+128),w
  3407  07AA  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3408  07AB  0086               	movwf	6
  3409  07AC  0187               	clrf	7
  3410  07AD  0181               	clrf	1
  3411                           
  3412                           ;main.c: 380: bool rc = can_send(buf, idx);
  3413  07AE  0836               	movf	_idx^(0+128),w
  3414  07AF  0020               	movlb	0	; select bank0
  3415  07B0  00D9               	movwf	??_main
  3416  07B1  0859               	movf	??_main,w
  3417  07B2  00B9               	movwf	can_send@dlc
  3418  07B3  30B8               	movlw	(low (_buf| 0))& (0+255)
  3419  07B4  3181  21A0  3185   	fcall	_can_send
  3420  07B7  0020               	movlb	0	; select bank0
  3421  07B8  00DA               	movwf	??_main+1
  3422  07B9  085A               	movf	??_main+1,w
  3423  07BA  0021               	movlb	1	; select bank1
  3424  07BB  00AB               	movwf	main@rc_452^(0+128)
  3425                           
  3426                           ;main.c: 381: if (rc) {
  3427  07BC  082B               	movf	main@rc_452^(0+128),w
  3428  07BD  1903               	btfsc	3,2
  3429  07BE  2FCC               	goto	l2372
  3430                           
  3431                           ;main.c: 382: if (mode.verbose) printf("\nMessage sent: %s\n", buf);
  3432  07BF  0020               	movlb	0	; select bank0
  3433  07C0  0860               	movf	_mode+1,w
  3434  07C1  1903               	btfsc	3,2
  3435  07C2  2F16               	goto	L3
  3436  07C3  3004               	movlw	low (STR_37| (0+32768))
  3437  07C4  00A0               	movwf	printf@f
  3438  07C5  3092               	movlw	high (STR_37| (0+32768))
  3439  07C6                     L9:	
  3440  07C6  00A1               	movwf	printf@f+1
  3441  07C7  30B8               	movlw	(low (_buf| 0))& (0+255)
  3442  07C8  00D9               	movwf	??_main
  3443  07C9  0859               	movf	??_main,w
  3444  07CA  00A2               	movwf	low ((?_printf| 0+2))
  3445  07CB  2F13               	goto	L8
  3446  07CC                     l2372:	
  3447                           ;main.c: 383: } else {
  3448                           
  3449                           
  3450                           ;main.c: 384: if (mode.verbose) printf("\nUnable to send message\n");
  3451  07CC  0020               	movlb	0	; select bank0
  3452  07CD  0860               	movf	_mode+1,w
  3453  07CE  1903               	btfsc	3,2
  3454  07CF  2F16               	goto	L3
  3455  07D0  303B               	movlw	low (STR_38| (0+32768))
  3456  07D1  00A0               	movwf	printf@f
  3457  07D2  3091               	movlw	high (STR_38| (0+32768))
  3458  07D3  2F12               	goto	L10
  3459  07D4                     __end_of_main:	
  3460                           ;main.c: 385: }
  3461                           ;main.c: 386: idx = 0;
  3462                           
  3463                           
  3464                           	psect	text1
  3465  0F38                     __ptext1:	
  3466 ;; *************** function _set_sid *****************
  3467 ;; Defined at:
  3468 ;;		line 37 in file "main.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  can_node        2   25[BANK0 ] unsigned int 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  sidl            1   32[BANK0 ] unsigned char 
  3473 ;;  sidh            1   31[BANK0 ] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3485 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3486 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3487 ;;Total ram usage:        8 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    3
  3490 ;; This function calls:
  3491 ;;		_printf
  3492 ;; This function is called by:
  3493 ;;		_main
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _set_sid
  3499  0F38                     _set_sid:	
  3500                           
  3501                           ;main.c: 38: uint8_t sidh = (can_node >> 3) & 0x00ff;
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3505  0F38  0020               	movlb	0	; select bank0
  3506  0F39  083A               	movf	set_sid@can_node+1,w
  3507  0F3A  00BC               	movwf	??_set_sid+1
  3508  0F3B  0839               	movf	set_sid@can_node,w
  3509  0F3C  00BB               	movwf	??_set_sid
  3510  0F3D  36BC               	lsrf	??_set_sid+1,f
  3511  0F3E  0CBB               	rrf	??_set_sid,f
  3512  0F3F  36BC               	lsrf	??_set_sid+1,f
  3513  0F40  0CBB               	rrf	??_set_sid,f
  3514  0F41  36BC               	lsrf	??_set_sid+1,f
  3515  0F42  0CBB               	rrf	??_set_sid,f
  3516  0F43  083B               	movf	??_set_sid,w
  3517  0F44  00BD               	movwf	??_set_sid+2
  3518  0F45  083D               	movf	??_set_sid+2,w
  3519  0F46  00BF               	movwf	set_sid@sidh
  3520                           
  3521                           ;main.c: 39: uint8_t sidl = (can_node << 5) & 0x00e0;
  3522  0F47  0839               	movf	set_sid@can_node,w
  3523  0F48  00BB               	movwf	??_set_sid
  3524  0F49  3004               	movlw	4
  3525  0F4A                     u1915:	
  3526  0F4A  35BB               	lslf	??_set_sid,f
  3527  0F4B  3EFF               	addlw	-1
  3528  0F4C  1D03               	skipz
  3529  0F4D  2F4A               	goto	u1915
  3530  0F4E  353B               	lslf	??_set_sid,w
  3531  0F4F  39E0               	andlw	224
  3532  0F50  00BC               	movwf	??_set_sid+1
  3533  0F51  083C               	movf	??_set_sid+1,w
  3534  0F52  00C0               	movwf	set_sid@sidl
  3535                           
  3536                           ;main.c: 40: sid.sidh = sidh;
  3537  0F53  083F               	movf	set_sid@sidh,w
  3538  0F54  00BB               	movwf	??_set_sid
  3539  0F55  083B               	movf	??_set_sid,w
  3540  0F56  00E3               	movwf	_sid
  3541                           
  3542                           ;main.c: 41: sid.sidl = sidl;
  3543  0F57  0840               	movf	set_sid@sidl,w
  3544  0F58  00BB               	movwf	??_set_sid
  3545  0F59  083B               	movf	??_set_sid,w
  3546  0F5A  00E4               	movwf	_sid+1
  3547                           
  3548                           ;main.c: 42: if (mode.debug) printf("SID set: %02x %02x\n", sidh, sidl);
  3549  0F5B  085F               	movf	_mode,w
  3550  0F5C  1903               	btfsc	3,2
  3551  0F5D  0008               	return
  3552  0F5E  30F0               	movlw	low (STR_1| (0+32768))
  3553  0F5F  00A0               	movwf	printf@f
  3554  0F60  3091               	movlw	high (STR_1| (0+32768))
  3555  0F61  00A1               	movwf	printf@f+1
  3556  0F62  083F               	movf	set_sid@sidh,w
  3557  0F63  00BB               	movwf	??_set_sid
  3558  0F64  01BC               	clrf	??_set_sid+1
  3559  0F65  083B               	movf	??_set_sid,w
  3560  0F66  00A2               	movwf	?_printf+2
  3561  0F67  083C               	movf	??_set_sid+1,w
  3562  0F68  00A3               	movwf	?_printf+3
  3563  0F69  0840               	movf	set_sid@sidl,w
  3564  0F6A  00BD               	movwf	??_set_sid+2
  3565  0F6B  01BE               	clrf	??_set_sid+3
  3566  0F6C  083D               	movf	??_set_sid+2,w
  3567  0F6D  00A4               	movwf	?_printf+4
  3568  0F6E  083E               	movf	??_set_sid+3,w
  3569  0F6F  00A5               	movwf	?_printf+5
  3570  0F70  3182  22D3         	fcall	_printf
  3571  0F72  0008               	return
  3572  0F73                     __end_of_set_sid:	
  3573                           
  3574                           	psect	text2
  3575  0FB6                     __ptext2:	
  3576 ;; *************** function _can_status_check *****************
  3577 ;; Defined at:
  3578 ;;		line 223 in file "main.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  can_status_b    2   54[BANK0 ] unsigned char [2]
  3583 ;;  status          1   56[BANK0 ] unsigned char 
  3584 ;;  bytes_writte    1   53[BANK0 ] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3597 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3598 ;;Total ram usage:        6 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    4
  3601 ;; This function calls:
  3602 ;;		_SPI_exchange
  3603 ;;		_can_receive
  3604 ;;		_can_txf_clear
  3605 ;;		_printf
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function _can_status_check
  3613  0FB6                     _can_status_check:	
  3614                           
  3615                           ;main.c: 225: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3616                           
  3617                           ;incstack = 0
  3618                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3619  0FB6  0020               	movlb	0	; select bank0
  3620  0FB7  0866               	movf	can_status_check@F2968+1,w
  3621  0FB8  00D7               	movwf	can_status_check@can_status_buf+1
  3622  0FB9  0865               	movf	can_status_check@F2968,w
  3623  0FBA  00D6               	movwf	can_status_check@can_status_buf
  3624                           
  3625                           ;main.c: 226: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  3626  0FBB  3002               	movlw	2
  3627  0FBC  00D3               	movwf	??_can_status_check
  3628  0FBD  0853               	movf	??_can_status_check,w
  3629  0FBE  00F8               	movwf	SPI_exchange@len
  3630  0FBF  3056               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3631  0FC0  318E  2669  318F   	fcall	_SPI_exchange
  3632  0FC3  0020               	movlb	0	; select bank0
  3633  0FC4  00D4               	movwf	??_can_status_check+1
  3634  0FC5  0854               	movf	??_can_status_check+1,w
  3635  0FC6  00D5               	movwf	can_status_check@bytes_written
  3636                           
  3637                           ;main.c: 227: uint8_t status = can_status_buf[1];
  3638  0FC7  0857               	movf	can_status_check@can_status_buf+1,w
  3639  0FC8  00D3               	movwf	??_can_status_check
  3640  0FC9  0853               	movf	??_can_status_check,w
  3641  0FCA  00D8               	movwf	can_status_check@status
  3642                           
  3643                           ;main.c: 228: if (status == 0x00) {
  3644  0FCB  0858               	movf	can_status_check@status,w
  3645  0FCC  1903               	btfsc	3,2
  3646  0FCD  0008               	return
  3647                           
  3648                           ;main.c: 230: } else if ((status & 0b00000001) > 0) {
  3649                           
  3650                           ;main.c: 229: return;
  3651  0FCE  1C58               	btfss	can_status_check@status,0
  3652  0FCF  2FDE               	goto	l235
  3653                           
  3654                           ;main.c: 231: if (mode.debug) printf("RX0IF is on\n");
  3655  0FD0  085F               	movf	_mode,w
  3656  0FD1  1903               	btfsc	3,2
  3657  0FD2  2FDA               	goto	l236
  3658  0FD3  3008               	movlw	low (STR_17| (0+32768))
  3659  0FD4  00A0               	movwf	printf@f
  3660  0FD5  3093               	movlw	high (STR_17| (0+32768))
  3661  0FD6  00A1               	movwf	printf@f+1
  3662  0FD7  3182  22D3  318F   	fcall	_printf
  3663  0FDA                     l236:	
  3664                           
  3665                           ;main.c: 232: can_receive(0);
  3666  0FDA  3000               	movlw	0
  3667  0FDB  3180  20C6         	fcall	_can_receive
  3668                           
  3669                           ;main.c: 233: } else if ((status & 0b00000010) > 0) {
  3670  0FDD  0008               	return
  3671  0FDE                     l235:	
  3672  0FDE  1CD8               	btfss	can_status_check@status,1
  3673  0FDF  2FEE               	goto	l238
  3674                           
  3675                           ;main.c: 234: if (mode.debug) printf("RX1IF is on\n");
  3676  0FE0  085F               	movf	_mode,w
  3677  0FE1  1903               	btfsc	3,2
  3678  0FE2  2FEA               	goto	l239
  3679  0FE3  3015               	movlw	low (STR_18| (0+32768))
  3680  0FE4  00A0               	movwf	printf@f
  3681  0FE5  3093               	movlw	high (STR_18| (0+32768))
  3682  0FE6  00A1               	movwf	printf@f+1
  3683  0FE7  3182  22D3  318F   	fcall	_printf
  3684  0FEA                     l239:	
  3685                           
  3686                           ;main.c: 235: can_receive(1);
  3687  0FEA  3001               	movlw	1
  3688  0FEB  3180  20C6         	fcall	_can_receive
  3689                           
  3690                           ;main.c: 236: } else if ((status & 0b00001000) > 0) {
  3691  0FED  0008               	return
  3692  0FEE                     l238:	
  3693  0FEE  1DD8               	btfss	can_status_check@status,3
  3694  0FEF  2FF4               	goto	l241
  3695                           
  3696                           ;main.c: 237: can_txf_clear(0);
  3697  0FF0  3000               	movlw	0
  3698  0FF1  318E  26B0         	fcall	_can_txf_clear
  3699                           
  3700                           ;main.c: 238: } else if ((status & 0b00100000) > 0) {
  3701  0FF3  0008               	return
  3702  0FF4                     l241:	
  3703  0FF4  1ED8               	btfss	can_status_check@status,5
  3704  0FF5  2FFA               	goto	l243
  3705                           
  3706                           ;main.c: 239: can_txf_clear(1);
  3707  0FF6  3001               	movlw	1
  3708  0FF7  318E  26B0         	fcall	_can_txf_clear
  3709                           
  3710                           ;main.c: 240: } else if ((status & 0b10000000) > 0) {
  3711  0FF9  0008               	return
  3712  0FFA                     l243:	
  3713  0FFA  1FD8               	btfss	can_status_check@status,7
  3714  0FFB  0008               	return
  3715                           
  3716                           ;main.c: 241: can_txf_clear(2);
  3717  0FFC  3002               	movlw	2
  3718  0FFD  318E  26B0         	fcall	_can_txf_clear
  3719  0FFF  0008               	return
  3720  1000                     __end_of_can_status_check:	
  3721                           ;main.c: 242: }
  3722                           ;main.c: 243: return;
  3723                           
  3724                           
  3725                           	psect	text3
  3726  0EB0                     __ptext3:	
  3727 ;; *************** function _can_txf_clear *****************
  3728 ;; Defined at:
  3729 ;;		line 75 in file "main.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  n               1    wreg     unsigned char 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  n               1    2[BANK0 ] unsigned char 
  3734 ;;  can_int_flag    4    5[BANK0 ] unsigned char [4]
  3735 ;;  bytes_writte    1    4[BANK0 ] unsigned char 
  3736 ;;  mask            1    3[BANK0 ] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      unsigned char 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3747 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3749 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3750 ;;Total ram usage:        9 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    3
  3753 ;; This function calls:
  3754 ;;		_SPI_exchange
  3755 ;; This function is called by:
  3756 ;;		_can_status_check
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _can_txf_clear
  3762  0EB0                     _can_txf_clear:	
  3763                           
  3764                           ;incstack = 0
  3765                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3766                           ;can_txf_clear@n stored from wreg
  3767  0EB0  0020               	movlb	0	; select bank0
  3768  0EB1  00A2               	movwf	can_txf_clear@n
  3769                           
  3770                           ;main.c: 76: uint8_t mask = 0b00000001 << (n + 2);
  3771  0EB2  3001               	movlw	1
  3772  0EB3  00A0               	movwf	??_can_txf_clear
  3773  0EB4  0822               	movf	can_txf_clear@n,w
  3774  0EB5  3E02               	addlw	2
  3775  0EB6  0A89               	incf	9,f
  3776  0EB7  2EB9               	goto	u1814
  3777  0EB8                     u1815:	
  3778  0EB8  35A0               	lslf	??_can_txf_clear,f
  3779  0EB9                     u1814:	
  3780  0EB9  0B89               	decfsz	9,f
  3781  0EBA  2EB8               	goto	u1815
  3782  0EBB  0820               	movf	??_can_txf_clear,w
  3783  0EBC  00A1               	movwf	??_can_txf_clear+1
  3784  0EBD  0821               	movf	??_can_txf_clear+1,w
  3785  0EBE  00A3               	movwf	can_txf_clear@mask
  3786                           
  3787                           ;main.c: 77: uint8_t can_int_flag[4];
  3788                           ;main.c: 78: can_int_flag[0] =0b00000101;
  3789  0EBF  3005               	movlw	5
  3790  0EC0  00A0               	movwf	??_can_txf_clear
  3791  0EC1  0820               	movf	??_can_txf_clear,w
  3792  0EC2  00A5               	movwf	can_txf_clear@can_int_flag
  3793                           
  3794                           ;main.c: 79: can_int_flag[1] = 0x2c;
  3795  0EC3  302C               	movlw	44
  3796  0EC4  00A0               	movwf	??_can_txf_clear
  3797  0EC5  0820               	movf	??_can_txf_clear,w
  3798  0EC6  00A6               	movwf	can_txf_clear@can_int_flag+1
  3799                           
  3800                           ;main.c: 80: can_int_flag[2] = mask;
  3801  0EC7  0823               	movf	can_txf_clear@mask,w
  3802  0EC8  00A0               	movwf	??_can_txf_clear
  3803  0EC9  0820               	movf	??_can_txf_clear,w
  3804  0ECA  00A7               	movwf	can_txf_clear@can_int_flag+2
  3805                           
  3806                           ;main.c: 81: can_int_flag[3] = 0x00;
  3807  0ECB  01A8               	clrf	can_txf_clear@can_int_flag+3
  3808                           
  3809                           ;main.c: 82: uint8_t bytes_written = SPI_exchange(can_int_flag, 4);
  3810  0ECC  3004               	movlw	4
  3811  0ECD  00A0               	movwf	??_can_txf_clear
  3812  0ECE  0820               	movf	??_can_txf_clear,w
  3813  0ECF  00F8               	movwf	SPI_exchange@len
  3814  0ED0  3025               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  3815  0ED1  318E  2669         	fcall	_SPI_exchange
  3816  0ED3  0020               	movlb	0	; select bank0
  3817  0ED4  00A1               	movwf	??_can_txf_clear+1
  3818  0ED5  0821               	movf	??_can_txf_clear+1,w
  3819  0ED6  00A4               	movwf	can_txf_clear@bytes_written
  3820                           
  3821                           ;main.c: 86: return 0;
  3822                           ;	Return value of _can_txf_clear is never used
  3823                           
  3824                           ;main.c: 85: } else {
  3825                           
  3826                           ;main.c: 84: return 1;
  3827                           ;	Return value of _can_txf_clear is never used
  3828  0ED7  0008               	return
  3829  0ED8                     __end_of_can_txf_clear:	
  3830                           
  3831                           	psect	text4
  3832  00C6                     __ptext4:	
  3833 ;; *************** function _can_receive *****************
  3834 ;; Defined at:
  3835 ;;		line 93 in file "main.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  n               1    wreg     unsigned char 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  n               1   50[BANK0 ] unsigned char 
  3840 ;;  rx_buf         15   31[BANK0 ] unsigned char [15]
  3841 ;;  sid             2   47[BANK0 ] unsigned int 
  3842 ;;  rx_buf_ptr      1   49[BANK0 ] PTR unsigned char 
  3843 ;;		 -> can_receive@rx_buf(15), 
  3844 ;;  dlc             1   46[BANK0 ] unsigned char 
  3845 ;;  bytes_read      1   30[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;Total ram usage:       26 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    3
  3862 ;; This function calls:
  3863 ;;		_SPI_exchange
  3864 ;;		_printf
  3865 ;; This function is called by:
  3866 ;;		_can_status_check
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function _can_receive
  3872  00C6                     _can_receive:	
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3876                           ;can_receive@n stored from wreg
  3877  00C6  0020               	movlb	0	; select bank0
  3878  00C7  00D2               	movwf	can_receive@n
  3879                           
  3880                           ;main.c: 97: uint8_t rx_buf[15];
  3881                           ;main.c: 100: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  3882  00C8  0852               	movf	can_receive@n,w
  3883  00C9  3E4A               	addlw	low (_nm| (0+32768))
  3884  00CA  0084               	movwf	4
  3885  00CB  3093               	movlw	high (_nm| (0+32768))
  3886  00CC  1803               	skipnc
  3887  00CD  3E01               	addlw	1
  3888  00CE  0085               	movwf	5
  3889  00CF  0800               	movf	0,w	;code access
  3890  00D0  0709               	addwf	9,w
  3891  00D1  3E90               	addlw	144
  3892  00D2  00B9               	movwf	??_can_receive
  3893  00D3  0839               	movf	??_can_receive,w
  3894  00D4  00BF               	movwf	can_receive@rx_buf
  3895                           
  3896                           ;main.c: 101: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  3897  00D5  300E               	movlw	14
  3898  00D6  00B9               	movwf	??_can_receive
  3899  00D7  0839               	movf	??_can_receive,w
  3900  00D8  00F8               	movwf	SPI_exchange@len
  3901  00D9  303F               	movlw	(low (can_receive@rx_buf| 0))& (0+255)
  3902  00DA  318E  2669  3180   	fcall	_SPI_exchange
  3903  00DD  0020               	movlb	0	; select bank0
  3904  00DE  00BA               	movwf	??_can_receive+1
  3905  00DF  083A               	movf	??_can_receive+1,w
  3906  00E0  00BE               	movwf	can_receive@bytes_read
  3907                           
  3908                           ;main.c: 102: uint8_t dlc = rx_buf[5];
  3909  00E1  0844               	movf	can_receive@rx_buf+5,w
  3910  00E2  00B9               	movwf	??_can_receive
  3911  00E3  0839               	movf	??_can_receive,w
  3912  00E4  00CE               	movwf	can_receive@dlc
  3913                           
  3914                           ;main.c: 103: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  3915  00E5  0841               	movf	can_receive@rx_buf+2,w
  3916  00E6  00B9               	movwf	??_can_receive
  3917  00E7  3005               	movlw	5
  3918  00E8                     u1825:	
  3919  00E8  36B9               	lsrf	??_can_receive,f
  3920  00E9  0B89               	decfsz	9,f
  3921  00EA  28E8               	goto	u1825
  3922  00EB  0839               	movf	??_can_receive,w
  3923  00EC  00BA               	movwf	??_can_receive+1
  3924  00ED  01BB               	clrf	??_can_receive+2
  3925  00EE  0840               	movf	can_receive@rx_buf+1,w
  3926  00EF  00BC               	movwf	??_can_receive+3
  3927  00F0  01BD               	clrf	??_can_receive+4
  3928  00F1  35BC               	lslf	??_can_receive+3,f
  3929  00F2  0DBD               	rlf	??_can_receive+4,f
  3930  00F3  35BC               	lslf	??_can_receive+3,f
  3931  00F4  0DBD               	rlf	??_can_receive+4,f
  3932  00F5  35BC               	lslf	??_can_receive+3,f
  3933  00F6  0DBD               	rlf	??_can_receive+4,f
  3934  00F7  083A               	movf	??_can_receive+1,w
  3935  00F8  073C               	addwf	??_can_receive+3,w
  3936  00F9  00CF               	movwf	can_receive@sid
  3937  00FA  083B               	movf	??_can_receive+2,w
  3938  00FB  3D3D               	addwfc	??_can_receive+4,w
  3939  00FC  00D0               	movwf	can_receive@sid+1
  3940                           
  3941                           ;main.c: 104: sid = sid & 0b0000011111111111;
  3942  00FD  30FF               	movlw	255
  3943  00FE  054F               	andwf	can_receive@sid,w
  3944  00FF  00CF               	movwf	can_receive@sid
  3945  0100  3007               	movlw	7
  3946  0101  0550               	andwf	can_receive@sid+1,w
  3947  0102  00D0               	movwf	can_receive@sid+1
  3948                           
  3949                           ;main.c: 105: rx_buf[6+dlc] = '\0';
  3950  0103  084E               	movf	can_receive@dlc,w
  3951  0104  3E06               	addlw	6
  3952  0105  3E3F               	addlw	(low (can_receive@rx_buf| 0))& (0+255)
  3953  0106  0086               	movwf	6
  3954  0107  0187               	clrf	7
  3955  0108  0181               	clrf	1
  3956                           
  3957                           ;main.c: 107: if (mode.debug) {
  3958  0109  085F               	movf	_mode,w
  3959  010A  1903               	btfsc	3,2
  3960  010B  2963               	goto	l1982
  3961                           
  3962                           ;main.c: 108: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  3963  010C  3028               	movlw	low (STR_3| (0+32768))
  3964  010D  00A0               	movwf	printf@f
  3965  010E  3092               	movlw	high (STR_3| (0+32768))
  3966  010F  00A1               	movwf	printf@f+1
  3967  0110  0852               	movf	can_receive@n,w
  3968  0111  00B9               	movwf	??_can_receive
  3969  0112  01BA               	clrf	??_can_receive+1
  3970  0113  0839               	movf	??_can_receive,w
  3971  0114  00A2               	movwf	?_printf+2
  3972  0115  083A               	movf	??_can_receive+1,w
  3973  0116  00A3               	movwf	?_printf+3
  3974  0117  0840               	movf	can_receive@rx_buf+1,w
  3975  0118  00BB               	movwf	??_can_receive+2
  3976  0119  01BC               	clrf	??_can_receive+3
  3977  011A  083B               	movf	??_can_receive+2,w
  3978  011B  00A4               	movwf	?_printf+4
  3979  011C  083C               	movf	??_can_receive+3,w
  3980  011D  00A5               	movwf	?_printf+5
  3981  011E  3182  22D3  3180   	fcall	_printf
  3982                           
  3983                           ;main.c: 109: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  3984  0121  306C               	movlw	low (STR_4| (0+32768))
  3985  0122  0020               	movlb	0	; select bank0
  3986  0123  00A0               	movwf	printf@f
  3987  0124  3092               	movlw	high (STR_4| (0+32768))
  3988  0125  00A1               	movwf	printf@f+1
  3989  0126  0852               	movf	can_receive@n,w
  3990  0127  00B9               	movwf	??_can_receive
  3991  0128  01BA               	clrf	??_can_receive+1
  3992  0129  0839               	movf	??_can_receive,w
  3993  012A  00A2               	movwf	?_printf+2
  3994  012B  083A               	movf	??_can_receive+1,w
  3995  012C  00A3               	movwf	?_printf+3
  3996  012D  0841               	movf	can_receive@rx_buf+2,w
  3997  012E  00BB               	movwf	??_can_receive+2
  3998  012F  01BC               	clrf	??_can_receive+3
  3999  0130  083B               	movf	??_can_receive+2,w
  4000  0131  00A4               	movwf	?_printf+4
  4001  0132  083C               	movf	??_can_receive+3,w
  4002  0133  00A5               	movwf	?_printf+5
  4003  0134  3182  22D3  3180   	fcall	_printf
  4004                           
  4005                           ;main.c: 110: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4006  0137  30B0               	movlw	low (STR_5| (0+32768))
  4007  0138  0020               	movlb	0	; select bank0
  4008  0139  00A0               	movwf	printf@f
  4009  013A  3092               	movlw	high (STR_5| (0+32768))
  4010  013B  00A1               	movwf	printf@f+1
  4011  013C  0852               	movf	can_receive@n,w
  4012  013D  00B9               	movwf	??_can_receive
  4013  013E  01BA               	clrf	??_can_receive+1
  4014  013F  0839               	movf	??_can_receive,w
  4015  0140  00A2               	movwf	?_printf+2
  4016  0141  083A               	movf	??_can_receive+1,w
  4017  0142  00A3               	movwf	?_printf+3
  4018  0143  0844               	movf	can_receive@rx_buf+5,w
  4019  0144  00BB               	movwf	??_can_receive+2
  4020  0145  01BC               	clrf	??_can_receive+3
  4021  0146  083B               	movf	??_can_receive+2,w
  4022  0147  00A4               	movwf	?_printf+4
  4023  0148  083C               	movf	??_can_receive+3,w
  4024  0149  00A5               	movwf	?_printf+5
  4025  014A  3182  22D3  3180   	fcall	_printf
  4026                           
  4027                           ;main.c: 111: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4028  014D  30C0               	movlw	low (STR_6| (0+32768))
  4029  014E  0020               	movlb	0	; select bank0
  4030  014F  00A0               	movwf	printf@f
  4031  0150  3092               	movlw	high (STR_6| (0+32768))
  4032  0151  00A1               	movwf	printf@f+1
  4033  0152  0852               	movf	can_receive@n,w
  4034  0153  00B9               	movwf	??_can_receive
  4035  0154  01BA               	clrf	??_can_receive+1
  4036  0155  0839               	movf	??_can_receive,w
  4037  0156  00A2               	movwf	?_printf+2
  4038  0157  083A               	movf	??_can_receive+1,w
  4039  0158  00A3               	movwf	?_printf+3
  4040  0159  0845               	movf	can_receive@rx_buf+6,w
  4041  015A  00BB               	movwf	??_can_receive+2
  4042  015B  01BC               	clrf	??_can_receive+3
  4043  015C  083B               	movf	??_can_receive+2,w
  4044  015D  00A4               	movwf	?_printf+4
  4045  015E  083C               	movf	??_can_receive+3,w
  4046  015F  00A5               	movwf	?_printf+5
  4047  0160  3182  22D3  3180   	fcall	_printf
  4048  0163                     l1982:	
  4049                           
  4050                           ;main.c: 112: }
  4051                           ;main.c: 127: uint8_t *rx_buf_ptr = &rx_buf[6];
  4052  0163  3045               	movlw	(low ((can_receive@rx_buf| 0+6)))& (0+255)
  4053  0164  0020               	movlb	0	; select bank0
  4054  0165  00B9               	movwf	??_can_receive
  4055  0166  0839               	movf	??_can_receive,w
  4056  0167  00D1               	movwf	can_receive@rx_buf_ptr
  4057                           
  4058                           ;main.c: 128: if (mode.verbose) {
  4059  0168  0860               	movf	_mode+1,w
  4060  0169  1903               	btfsc	3,2
  4061  016A  2977               	goto	l1992
  4062                           
  4063                           ;main.c: 129: if (mode.with_sid) {
  4064  016B  0862               	movf	_mode+3,w
  4065  016C  1903               	btfsc	3,2
  4066  016D  2972               	goto	l1990
  4067                           
  4068                           ;main.c: 130: printf("Message received: %d,%s\n", sid, rx_buf_ptr);
  4069  016E  3054               	movlw	low (STR_7| (0+32768))
  4070  016F  00A0               	movwf	printf@f
  4071  0170  3091               	movlw	high (STR_7| (0+32768))
  4072  0171  297E               	goto	L12
  4073  0172                     l1990:	
  4074                           ;main.c: 131: } else {
  4075                           
  4076                           
  4077                           ;main.c: 132: printf("Message received: %s\n", rx_buf_ptr);
  4078  0172  30B1               	movlw	low (STR_8| (0+32768))
  4079  0173  0020               	movlb	0	; select bank0
  4080  0174  00A0               	movwf	printf@f
  4081  0175  3091               	movlw	high (STR_8| (0+32768))
  4082  0176  298C               	goto	L13
  4083  0177                     l1992:	
  4084                           ;main.c: 133: }
  4085                           ;main.c: 134: } else {
  4086                           
  4087                           
  4088                           ;main.c: 135: if (mode.with_sid) {
  4089  0177  0020               	movlb	0	; select bank0
  4090  0178  0862               	movf	_mode+3,w
  4091  0179  1903               	btfsc	3,2
  4092  017A  2988               	goto	l1996
  4093                           
  4094                           ;main.c: 136: printf("%d,%s\n", sid, rx_buf_ptr);
  4095  017B  3066               	movlw	low ((STR_7+18)| (0+32768))
  4096  017C  00A0               	movwf	printf@f
  4097  017D  3091               	movlw	high ((STR_7+18)| (0+32768))
  4098  017E                     L12:	
  4099  017E  00A1               	movwf	printf@f+1
  4100  017F  0850               	movf	can_receive@sid+1,w
  4101  0180  00A3               	movwf	?_printf+3
  4102  0181  084F               	movf	can_receive@sid,w
  4103  0182  00A2               	movwf	?_printf+2
  4104  0183  0851               	movf	can_receive@rx_buf_ptr,w
  4105  0184  00B9               	movwf	??_can_receive
  4106  0185  0839               	movf	??_can_receive,w
  4107  0186  00A4               	movwf	low ((?_printf| 0+4))
  4108  0187  2991               	goto	L11
  4109  0188                     l1996:	
  4110                           ;main.c: 137: } else {
  4111                           
  4112                           
  4113                           ;main.c: 138: printf("%s\n", rx_buf_ptr);
  4114  0188  30C3               	movlw	low ((STR_8+18)| (0+32768))
  4115  0189  0020               	movlb	0	; select bank0
  4116  018A  00A0               	movwf	printf@f
  4117  018B  3091               	movlw	high ((STR_8+18)| (0+32768))
  4118  018C                     L13:	
  4119  018C  00A1               	movwf	printf@f+1
  4120  018D  0851               	movf	can_receive@rx_buf_ptr,w
  4121  018E  00B9               	movwf	??_can_receive
  4122  018F  0839               	movf	??_can_receive,w
  4123  0190  00A2               	movwf	low ((?_printf| 0+2))
  4124  0191                     L11:	
  4125  0191  3182  22D3  3180   	fcall	_printf
  4126                           
  4127                           ;main.c: 139: }
  4128                           ;main.c: 140: }
  4129                           ;main.c: 141: LATCbits.LATC3 = !LATCbits.LATC3;
  4130  0194  1003               	clrc
  4131  0195  0022               	movlb	2	; select bank2
  4132  0196  1D8E               	btfss	14,3	;volatile
  4133  0197  1403               	setc
  4134  0198  1C03               	btfss	3,0
  4135  0199  299D               	goto	u1870
  4136  019A  0022               	movlb	2	; select bank2
  4137  019B  158E               	bsf	14,3	;volatile
  4138  019C  0008               	return
  4139  019D                     u1870:	
  4140  019D  0022               	movlb	2	; select bank2
  4141  019E  118E               	bcf	14,3	;volatile
  4142  019F  0008               	return
  4143  01A0                     __end_of_can_receive:	
  4144                           
  4145                           	psect	text5
  4146  01A0                     __ptext5:	
  4147 ;; *************** function _can_send *****************
  4148 ;; Defined at:
  4149 ;;		line 147 in file "main.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  buf             1    wreg     PTR unsigned char 
  4152 ;;		 -> buf(9), 
  4153 ;;  dlc             1   25[BANK0 ] unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  buf             1   46[BANK0 ] PTR unsigned char 
  4156 ;;		 -> buf(9), 
  4157 ;;  txb_ctrl_buf    1   49[BANK0 ] unsigned char [1]
  4158 ;;  tx_buf         14   30[BANK0 ] unsigned char [14]
  4159 ;;  debug_buf       3   51[BANK0 ] unsigned char [3]
  4160 ;;  can_status_b    2   44[BANK0 ] unsigned char [2]
  4161 ;;  n               1   55[BANK0 ] unsigned char 
  4162 ;;  i               1   54[BANK0 ] unsigned char 
  4163 ;;  status          1   50[BANK0 ] unsigned char 
  4164 ;;  bytes_writte    1   48[BANK0 ] unsigned char 
  4165 ;;  len             1   47[BANK0 ] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      unsigned char 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4175 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;Total ram usage:       31 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    3
  4182 ;; This function calls:
  4183 ;;		_SPI_exchange
  4184 ;;		_printf
  4185 ;; This function is called by:
  4186 ;;		_main
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _can_send
  4192  01A0                     _can_send:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4196                           ;can_send@buf stored from wreg
  4197  01A0  0020               	movlb	0	; select bank0
  4198  01A1  00CE               	movwf	can_send@buf
  4199                           
  4200                           ;main.c: 148: uint8_t i;
  4201                           ;main.c: 149: uint8_t n = 0;
  4202  01A2  01D7               	clrf	can_send@n
  4203                           
  4204                           ;main.c: 151: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  4205  01A3  0868               	movf	can_send@F2958+1,w
  4206  01A4  00CD               	movwf	can_send@can_status_buf+1
  4207  01A5  0867               	movf	can_send@F2958,w
  4208  01A6  00CC               	movwf	can_send@can_status_buf
  4209                           
  4210                           ;main.c: 152: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  4211  01A7  3002               	movlw	2
  4212  01A8  00BA               	movwf	??_can_send
  4213  01A9  083A               	movf	??_can_send,w
  4214  01AA  00F8               	movwf	SPI_exchange@len
  4215  01AB  304C               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  4216  01AC  318E  2669  3181   	fcall	_SPI_exchange
  4217  01AF  0020               	movlb	0	; select bank0
  4218  01B0  00BB               	movwf	??_can_send+1
  4219  01B1  083B               	movf	??_can_send+1,w
  4220  01B2  00D0               	movwf	can_send@bytes_written
  4221                           
  4222                           ;main.c: 153: uint8_t status = can_status_buf[1];
  4223  01B3  084D               	movf	can_send@can_status_buf+1,w
  4224  01B4  00BA               	movwf	??_can_send
  4225  01B5  083A               	movf	??_can_send,w
  4226  01B6  00D2               	movwf	can_send@status
  4227                           
  4228                           ;main.c: 154: if ((status & 0b00000100) == 0) {
  4229  01B7  1952               	btfsc	can_send@status,2
  4230  01B8  29C6               	goto	l211
  4231                           
  4232                           ;main.c: 155: if (mode.debug) printf("TXB0 is idle\n");
  4233  01B9  085F               	movf	_mode,w
  4234  01BA  1903               	btfsc	3,2
  4235  01BB  29C3               	goto	l2050
  4236  01BC  30DE               	movlw	low (STR_11| (0+32768))
  4237  01BD  00A0               	movwf	printf@f
  4238  01BE  3092               	movlw	high (STR_11| (0+32768))
  4239  01BF  00A1               	movwf	printf@f+1
  4240  01C0  3182  22D3  3181   	fcall	_printf
  4241  01C3                     l2050:	
  4242                           
  4243                           ;main.c: 156: n = 0;
  4244  01C3  0020               	movlb	0	; select bank0
  4245  01C4  01D7               	clrf	can_send@n
  4246                           
  4247                           ;main.c: 157: } else if ((status & 0b00010000) == 0) {
  4248  01C5  29E7               	goto	l2064
  4249  01C6                     l211:	
  4250  01C6  1A52               	btfsc	can_send@status,4
  4251  01C7  29D6               	goto	l214
  4252                           
  4253                           ;main.c: 158: if (mode.debug) printf("TXB1 is idle\n");
  4254  01C8  085F               	movf	_mode,w
  4255  01C9  1903               	btfsc	3,2
  4256  01CA  29D2               	goto	l2056
  4257  01CB  30EC               	movlw	low (STR_12| (0+32768))
  4258  01CC  00A0               	movwf	printf@f
  4259  01CD  3092               	movlw	high (STR_12| (0+32768))
  4260  01CE  00A1               	movwf	printf@f+1
  4261  01CF  3182  22D3  3181   	fcall	_printf
  4262  01D2                     l2056:	
  4263                           
  4264                           ;main.c: 159: n = 1;
  4265  01D2  0020               	movlb	0	; select bank0
  4266  01D3  01D7               	clrf	can_send@n
  4267  01D4  0AD7               	incf	can_send@n,f
  4268                           
  4269                           ;main.c: 160: } else if ((status & 0b01000000) > 0) {
  4270  01D5  29E7               	goto	l2064
  4271  01D6                     l214:	
  4272  01D6  1F52               	btfss	can_send@status,6
  4273  01D7  29E7               	goto	l2064
  4274                           
  4275                           ;main.c: 161: if (mode.debug) printf("TXB2 is idle\n");
  4276  01D8  085F               	movf	_mode,w
  4277  01D9  1903               	btfsc	3,2
  4278  01DA  29E2               	goto	l2062
  4279  01DB  30FA               	movlw	low (STR_13| (0+32768))
  4280  01DC  00A0               	movwf	printf@f
  4281  01DD  3092               	movlw	high (STR_13| (0+32768))
  4282  01DE  00A1               	movwf	printf@f+1
  4283  01DF  3182  22D3  3181   	fcall	_printf
  4284  01E2                     l2062:	
  4285                           
  4286                           ;main.c: 162: n = 2;
  4287  01E2  3002               	movlw	2
  4288  01E3  0020               	movlb	0	; select bank0
  4289  01E4  00BA               	movwf	??_can_send
  4290  01E5  083A               	movf	??_can_send,w
  4291  01E6  00D7               	movwf	can_send@n
  4292  01E7                     l2064:	
  4293                           
  4294                           ;main.c: 163: }
  4295                           ;main.c: 167: uint8_t tx_buf[14];
  4296                           ;main.c: 170: tx_buf[0] = 0b01000000 + abc[n];
  4297  01E7  0857               	movf	can_send@n,w
  4298  01E8  3E44               	addlw	low (_abc| (0+32768))
  4299  01E9  0084               	movwf	4
  4300  01EA  3093               	movlw	high (_abc| (0+32768))
  4301  01EB  1803               	skipnc
  4302  01EC  3E01               	addlw	1
  4303  01ED  0085               	movwf	5
  4304  01EE  0800               	movf	0,w	;code access
  4305  01EF  3E40               	addlw	64
  4306  01F0  00BA               	movwf	??_can_send
  4307  01F1  083A               	movf	??_can_send,w
  4308  01F2  00BE               	movwf	can_send@tx_buf
  4309                           
  4310                           ;main.c: 172: tx_buf[1] = sid.sidh;
  4311  01F3  0863               	movf	_sid,w
  4312  01F4  00BA               	movwf	??_can_send
  4313  01F5  083A               	movf	??_can_send,w
  4314  01F6  00BF               	movwf	can_send@tx_buf+1
  4315                           
  4316                           ;main.c: 174: tx_buf[2] = sid.sidl;
  4317  01F7  0864               	movf	_sid+1,w
  4318  01F8  00BA               	movwf	??_can_send
  4319  01F9  083A               	movf	??_can_send,w
  4320  01FA  00C0               	movwf	can_send@tx_buf+2
  4321                           
  4322                           ;main.c: 176: tx_buf[3] = 0;
  4323  01FB  01C1               	clrf	can_send@tx_buf+3
  4324                           
  4325                           ;main.c: 178: tx_buf[4] = 0;
  4326  01FC  01C2               	clrf	can_send@tx_buf+4
  4327                           
  4328                           ;main.c: 180: tx_buf[5] = dlc;
  4329  01FD  0839               	movf	can_send@dlc,w
  4330  01FE  00BA               	movwf	??_can_send
  4331  01FF  083A               	movf	??_can_send,w
  4332  0200  00C3               	movwf	can_send@tx_buf+5
  4333                           
  4334                           ;main.c: 183: for(i=0; i<dlc; i++) {
  4335  0201  01D6               	clrf	can_send@i
  4336  0202                     l2086:	
  4337  0202  0839               	movf	can_send@dlc,w
  4338  0203  0256               	subwf	can_send@i,w
  4339  0204  1803               	btfsc	3,0
  4340  0205  2A31               	goto	l2088
  4341                           
  4342                           ;main.c: 184: tx_buf[6+i] = buf[i];
  4343  0206  0856               	movf	can_send@i,w
  4344  0207  074E               	addwf	can_send@buf,w
  4345  0208  00BA               	movwf	??_can_send
  4346  0209  083A               	movf	??_can_send,w
  4347  020A  0086               	movwf	6
  4348  020B  0187               	clrf	7
  4349  020C  0801               	movf	1,w
  4350  020D  00BB               	movwf	??_can_send+1
  4351  020E  0856               	movf	can_send@i,w
  4352  020F  3E06               	addlw	6
  4353  0210  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4354  0211  0086               	movwf	6
  4355  0212  0187               	clrf	7
  4356  0213  083B               	movf	??_can_send+1,w
  4357  0214  0081               	movwf	1
  4358                           
  4359                           ;main.c: 185: if (mode.debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4360  0215  085F               	movf	_mode,w
  4361  0216  1903               	btfsc	3,2
  4362  0217  2A2B               	goto	l2084
  4363  0218  30DC               	movlw	low (STR_14| (0+32768))
  4364  0219  00A0               	movwf	printf@f
  4365  021A  3091               	movlw	high (STR_14| (0+32768))
  4366  021B  00A1               	movwf	printf@f+1
  4367  021C  0856               	movf	can_send@i,w
  4368  021D  3E06               	addlw	6
  4369  021E  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4370  021F  0086               	movwf	6
  4371  0220  0187               	clrf	7
  4372  0221  0801               	movf	1,w
  4373  0222  00BA               	movwf	??_can_send
  4374  0223  01BB               	clrf	??_can_send+1
  4375  0224  083A               	movf	??_can_send,w
  4376  0225  00A2               	movwf	?_printf+2
  4377  0226  083B               	movf	??_can_send+1,w
  4378  0227  00A3               	movwf	?_printf+3
  4379  0228  3182  22D3  3181   	fcall	_printf
  4380  022B                     l2084:	
  4381  022B  3001               	movlw	1
  4382  022C  0020               	movlb	0	; select bank0
  4383  022D  00BA               	movwf	??_can_send
  4384  022E  083A               	movf	??_can_send,w
  4385  022F  07D6               	addwf	can_send@i,f
  4386  0230  2A02               	goto	l2086
  4387  0231                     l2088:	
  4388                           
  4389                           ;main.c: 186: }
  4390                           ;main.c: 189: uint8_t len = 6 + dlc;
  4391  0231  0839               	movf	can_send@dlc,w
  4392  0232  3E06               	addlw	6
  4393  0233  00BA               	movwf	??_can_send
  4394  0234  083A               	movf	??_can_send,w
  4395  0235  00CF               	movwf	can_send@len
  4396                           
  4397                           ;main.c: 190: uint8_t bytes_written = SPI_exchange(tx_buf, len);
  4398  0236  084F               	movf	can_send@len,w
  4399  0237  00BA               	movwf	??_can_send
  4400  0238  083A               	movf	??_can_send,w
  4401  0239  00F8               	movwf	SPI_exchange@len
  4402  023A  303E               	movlw	(low (can_send@tx_buf| 0))& (0+255)
  4403  023B  318E  2669  3181   	fcall	_SPI_exchange
  4404  023E  0020               	movlb	0	; select bank0
  4405  023F  00BB               	movwf	??_can_send+1
  4406  0240  083B               	movf	??_can_send+1,w
  4407  0241  00D0               	movwf	can_send@bytes_written
  4408                           
  4409                           ;main.c: 192: uint8_t debug_buf[3];
  4410                           ;main.c: 193: debug_buf[0] = 0b00000011;
  4411  0242  3003               	movlw	3
  4412  0243  00BA               	movwf	??_can_send
  4413  0244  083A               	movf	??_can_send,w
  4414  0245  00D3               	movwf	can_send@debug_buf
  4415                           
  4416                           ;main.c: 194: debug_buf[1] = txbnsidh[n];
  4417  0246  0857               	movf	can_send@n,w
  4418  0247  3E41               	addlw	low (_txbnsidh| (0+32768))
  4419  0248  0084               	movwf	4
  4420  0249  3093               	movlw	high (_txbnsidh| (0+32768))
  4421  024A  1803               	skipnc
  4422  024B  3E01               	addlw	1
  4423  024C  0085               	movwf	5
  4424  024D  0800               	movf	0,w	;code access
  4425  024E  00BA               	movwf	??_can_send
  4426  024F  083A               	movf	??_can_send,w
  4427  0250  00D4               	movwf	can_send@debug_buf+1
  4428                           
  4429                           ;main.c: 195: debug_buf[2] = 0x00;
  4430  0251  01D5               	clrf	can_send@debug_buf+2
  4431                           
  4432                           ;main.c: 196: SPI_exchange(debug_buf, 3);
  4433  0252  3003               	movlw	3
  4434  0253  00BA               	movwf	??_can_send
  4435  0254  083A               	movf	??_can_send,w
  4436  0255  00F8               	movwf	SPI_exchange@len
  4437  0256  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4438  0257  318E  2669  3181   	fcall	_SPI_exchange
  4439                           
  4440                           ;main.c: 198: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  4441  025A  0020               	movlb	0	; select bank0
  4442  025B  085F               	movf	_mode,w
  4443  025C  1903               	btfsc	3,2
  4444  025D  2A73               	goto	l2104
  4445  025E  3039               	movlw	low (STR_15| (0+32768))
  4446  025F  00A0               	movwf	printf@f
  4447  0260  3092               	movlw	high (STR_15| (0+32768))
  4448  0261  00A1               	movwf	printf@f+1
  4449  0262  0857               	movf	can_send@n,w
  4450  0263  00BA               	movwf	??_can_send
  4451  0264  01BB               	clrf	??_can_send+1
  4452  0265  083A               	movf	??_can_send,w
  4453  0266  00A2               	movwf	?_printf+2
  4454  0267  083B               	movf	??_can_send+1,w
  4455  0268  00A3               	movwf	?_printf+3
  4456  0269  0855               	movf	can_send@debug_buf+2,w
  4457  026A  00BC               	movwf	??_can_send+2
  4458  026B  01BD               	clrf	??_can_send+3
  4459  026C  083C               	movf	??_can_send+2,w
  4460  026D  00A4               	movwf	?_printf+4
  4461  026E  083D               	movf	??_can_send+3,w
  4462  026F  00A5               	movwf	?_printf+5
  4463  0270  3182  22D3  3181   	fcall	_printf
  4464  0273                     l2104:	
  4465                           
  4466                           ;main.c: 199: debug_buf[0] = 0b00000011;
  4467  0273  3003               	movlw	3
  4468  0274  0020               	movlb	0	; select bank0
  4469  0275  00BA               	movwf	??_can_send
  4470  0276  083A               	movf	??_can_send,w
  4471  0277  00D3               	movwf	can_send@debug_buf
  4472                           
  4473                           ;main.c: 200: debug_buf[1] = txbnsidh[n] + 1;
  4474  0278  0857               	movf	can_send@n,w
  4475  0279  3E41               	addlw	low (_txbnsidh| (0+32768))
  4476  027A  0084               	movwf	4
  4477  027B  3093               	movlw	high (_txbnsidh| (0+32768))
  4478  027C  1803               	skipnc
  4479  027D  3E01               	addlw	1
  4480  027E  0085               	movwf	5
  4481  027F  0800               	movf	0,w	;code access
  4482  0280  3E01               	addlw	1
  4483  0281  00BA               	movwf	??_can_send
  4484  0282  083A               	movf	??_can_send,w
  4485  0283  00D4               	movwf	can_send@debug_buf+1
  4486                           
  4487                           ;main.c: 201: debug_buf[2] = 0x00;
  4488  0284  01D5               	clrf	can_send@debug_buf+2
  4489                           
  4490                           ;main.c: 202: SPI_exchange(debug_buf, 3);
  4491  0285  3003               	movlw	3
  4492  0286  00BA               	movwf	??_can_send
  4493  0287  083A               	movf	??_can_send,w
  4494  0288  00F8               	movwf	SPI_exchange@len
  4495  0289  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4496  028A  318E  2669  3181   	fcall	_SPI_exchange
  4497                           
  4498                           ;main.c: 204: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  4499  028D  0020               	movlb	0	; select bank0
  4500  028E  085F               	movf	_mode,w
  4501  028F  1903               	btfsc	3,2
  4502  0290  2AA6               	goto	l2116
  4503  0291  307D               	movlw	low (STR_16| (0+32768))
  4504  0292  00A0               	movwf	printf@f
  4505  0293  3092               	movlw	high (STR_16| (0+32768))
  4506  0294  00A1               	movwf	printf@f+1
  4507  0295  0857               	movf	can_send@n,w
  4508  0296  00BA               	movwf	??_can_send
  4509  0297  01BB               	clrf	??_can_send+1
  4510  0298  083A               	movf	??_can_send,w
  4511  0299  00A2               	movwf	?_printf+2
  4512  029A  083B               	movf	??_can_send+1,w
  4513  029B  00A3               	movwf	?_printf+3
  4514  029C  0855               	movf	can_send@debug_buf+2,w
  4515  029D  00BC               	movwf	??_can_send+2
  4516  029E  01BD               	clrf	??_can_send+3
  4517  029F  083C               	movf	??_can_send+2,w
  4518  02A0  00A4               	movwf	?_printf+4
  4519  02A1  083D               	movf	??_can_send+3,w
  4520  02A2  00A5               	movwf	?_printf+5
  4521  02A3  3182  22D3  3181   	fcall	_printf
  4522  02A6                     l2116:	
  4523                           
  4524                           ;main.c: 206: if (bytes_written == len) {
  4525  02A6  0020               	movlb	0	; select bank0
  4526  02A7  0850               	movf	can_send@bytes_written,w
  4527  02A8  064F               	xorwf	can_send@len,w
  4528  02A9  1D03               	skipz
  4529  02AA  2AD1               	goto	l2130
  4530                           
  4531                           ;main.c: 208: uint8_t txb_ctrl_buf[1];
  4532                           ;main.c: 209: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  4533  02AB  3001               	movlw	1
  4534  02AC  00BA               	movwf	??_can_send
  4535  02AD  0A57               	incf	can_send@n,w
  4536  02AE  2AB0               	goto	u2064
  4537  02AF                     u2065:	
  4538  02AF  35BA               	lslf	??_can_send,f
  4539  02B0                     u2064:	
  4540  02B0  0B89               	decfsz	9,f
  4541  02B1  2AAF               	goto	u2065
  4542  02B2  083A               	movf	??_can_send,w
  4543  02B3  3E80               	addlw	128
  4544  02B4  00BB               	movwf	??_can_send+1
  4545  02B5  083B               	movf	??_can_send+1,w
  4546  02B6  00D1               	movwf	can_send@txb_ctrl_buf
  4547                           
  4548                           ;main.c: 210: bytes_written = SPI_exchange(txb_ctrl_buf, 1);
  4549  02B7  01F8               	clrf	SPI_exchange@len
  4550  02B8  0AF8               	incf	SPI_exchange@len,f
  4551  02B9  3051               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4552  02BA  318E  2669  3181   	fcall	_SPI_exchange
  4553  02BD  0020               	movlb	0	; select bank0
  4554  02BE  00BA               	movwf	??_can_send
  4555  02BF  083A               	movf	??_can_send,w
  4556  02C0  00D0               	movwf	can_send@bytes_written
  4557                           
  4558                           ;main.c: 211: if (bytes_written == 1) {
  4559  02C1  0350               	decf	can_send@bytes_written,w
  4560  02C2  1D03               	btfss	3,2
  4561  02C3  2AD1               	goto	l2130
  4562                           
  4563                           ;main.c: 212: LATCbits.LATC3 = !LATCbits.LATC3;
  4564  02C4  1003               	clrc
  4565  02C5  0022               	movlb	2	; select bank2
  4566  02C6  1D8E               	btfss	14,3	;volatile
  4567  02C7  1403               	setc
  4568  02C8  1C03               	btfss	3,0
  4569  02C9  2ACD               	goto	u2080
  4570  02CA  0022               	movlb	2	; select bank2
  4571  02CB  158E               	bsf	14,3	;volatile
  4572  02CC  2ACF               	goto	l2126
  4573  02CD                     u2080:	
  4574  02CD  0022               	movlb	2	; select bank2
  4575  02CE  118E               	bcf	14,3	;volatile
  4576  02CF                     l2126:	
  4577                           
  4578                           ;main.c: 213: return 1;
  4579  02CF  3001               	movlw	1
  4580  02D0  0008               	return
  4581  02D1                     l2130:	
  4582                           
  4583                           ;main.c: 214: }
  4584                           ;main.c: 215: }
  4585                           ;main.c: 217: return 0;
  4586  02D1  3000               	movlw	0
  4587  02D2  0008               	return
  4588  02D3                     __end_of_can_send:	
  4589                           
  4590                           	psect	text6
  4591  0F73                     __ptext6:	
  4592 ;; *************** function _can_ope_mode *****************
  4593 ;; Defined at:
  4594 ;;		line 55 in file "main.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  ope_mode        1    wreg     unsigned char 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  ope_mode        1   27[BANK0 ] unsigned char 
  4599 ;;  can_ctrl_buf    3   29[BANK0 ] unsigned char [3]
  4600 ;;  bytes_writte    1   28[BANK0 ] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      unsigned char 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4614 ;;Total ram usage:        7 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    3
  4617 ;; This function calls:
  4618 ;;		_SPI_exchange
  4619 ;;		_printf
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _can_ope_mode
  4627  0F73                     _can_ope_mode:	
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4631                           ;can_ope_mode@ope_mode stored from wreg
  4632  0F73  0020               	movlb	0	; select bank0
  4633  0F74  00BB               	movwf	can_ope_mode@ope_mode
  4634                           
  4635                           ;main.c: 56: uint8_t can_ctrl_buf[3];
  4636                           ;main.c: 57: can_ctrl_buf[0] = 0b00000010;
  4637  0F75  3002               	movlw	2
  4638  0F76  00B9               	movwf	??_can_ope_mode
  4639  0F77  0839               	movf	??_can_ope_mode,w
  4640  0F78  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4641                           
  4642                           ;main.c: 58: can_ctrl_buf[1] = 0x0f;
  4643  0F79  300F               	movlw	15
  4644  0F7A  00B9               	movwf	??_can_ope_mode
  4645  0F7B  0839               	movf	??_can_ope_mode,w
  4646  0F7C  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4647                           
  4648                           ;main.c: 59: can_ctrl_buf[2] = ope_mode;
  4649  0F7D  083B               	movf	can_ope_mode@ope_mode,w
  4650  0F7E  00B9               	movwf	??_can_ope_mode
  4651  0F7F  0839               	movf	??_can_ope_mode,w
  4652  0F80  00BF               	movwf	can_ope_mode@can_ctrl_buf+2
  4653                           
  4654                           ;main.c: 60: uint8_t bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4655  0F81  3003               	movlw	3
  4656  0F82  00B9               	movwf	??_can_ope_mode
  4657  0F83  0839               	movf	??_can_ope_mode,w
  4658  0F84  00F8               	movwf	SPI_exchange@len
  4659  0F85  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4660  0F86  318E  2669  318F   	fcall	_SPI_exchange
  4661  0F89  0020               	movlb	0	; select bank0
  4662  0F8A  00BA               	movwf	??_can_ope_mode+1
  4663  0F8B  083A               	movf	??_can_ope_mode+1,w
  4664  0F8C  00BC               	movwf	can_ope_mode@bytes_written
  4665                           
  4666                           ;main.c: 61: if (bytes_written == 3) {
  4667  0F8D  3003               	movlw	3
  4668  0F8E  063C               	xorwf	can_ope_mode@bytes_written,w
  4669  0F8F  1D03               	btfss	3,2
  4670  0F90  0008               	return
  4671                           
  4672                           ;main.c: 62: can_ctrl_buf[0] = 0b00000011;
  4673  0F91  3003               	movlw	3
  4674  0F92  00B9               	movwf	??_can_ope_mode
  4675  0F93  0839               	movf	??_can_ope_mode,w
  4676  0F94  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4677                           
  4678                           ;main.c: 63: can_ctrl_buf[1] = 0x0e;
  4679  0F95  300E               	movlw	14
  4680  0F96  00B9               	movwf	??_can_ope_mode
  4681  0F97  0839               	movf	??_can_ope_mode,w
  4682  0F98  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4683                           
  4684                           ;main.c: 64: bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4685  0F99  3003               	movlw	3
  4686  0F9A  00B9               	movwf	??_can_ope_mode
  4687  0F9B  0839               	movf	??_can_ope_mode,w
  4688  0F9C  00F8               	movwf	SPI_exchange@len
  4689  0F9D  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4690  0F9E  318E  2669  318F   	fcall	_SPI_exchange
  4691  0FA1  0020               	movlb	0	; select bank0
  4692  0FA2  00BA               	movwf	??_can_ope_mode+1
  4693  0FA3  083A               	movf	??_can_ope_mode+1,w
  4694  0FA4  00BC               	movwf	can_ope_mode@bytes_written
  4695                           
  4696                           ;main.c: 65: if (mode.debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  4697  0FA5  085F               	movf	_mode,w
  4698  0FA6  1903               	btfsc	3,2
  4699  0FA7  0008               	return
  4700  0FA8  30CF               	movlw	low (STR_2| (0+32768))
  4701  0FA9  00A0               	movwf	printf@f
  4702  0FAA  3092               	movlw	high (STR_2| (0+32768))
  4703  0FAB  00A1               	movwf	printf@f+1
  4704  0FAC  083F               	movf	can_ope_mode@can_ctrl_buf+2,w
  4705  0FAD  00B9               	movwf	??_can_ope_mode
  4706  0FAE  01BA               	clrf	??_can_ope_mode+1
  4707  0FAF  0839               	movf	??_can_ope_mode,w
  4708  0FB0  00A2               	movwf	?_printf+2
  4709  0FB1  083A               	movf	??_can_ope_mode+1,w
  4710  0FB2  00A3               	movwf	?_printf+3
  4711  0FB3  3182  22D3         	fcall	_printf
  4712                           
  4713                           ;main.c: 68: return 0;
  4714                           ;	Return value of _can_ope_mode is never used
  4715                           
  4716                           ;main.c: 67: } else {
  4717                           
  4718                           ;main.c: 66: return 1;
  4719                           ;	Return value of _can_ope_mode is never used
  4720  0FB5  0008               	return
  4721  0FB6                     __end_of_can_ope_mode:	
  4722                           
  4723                           	psect	text7
  4724  02D3                     __ptext7:	
  4725 ;; *************** function _printf *****************
  4726 ;; Defined at:
  4727 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  4730 ;;		 -> STR_38(25), STR_37(19), STR_36(24), STR_35(18), 
  4731 ;;		 -> STR_34(22), STR_33(44), STR_32(26), STR_31(42), 
  4732 ;;		 -> STR_30(38), STR_29(54), STR_28(59), STR_27(51), 
  4733 ;;		 -> STR_26(23), STR_25(17), STR_24(17), STR_23(17), 
  4734 ;;		 -> STR_22(17), STR_21(23), STR_20(21), STR_19(3), 
  4735 ;;		 -> STR_18(13), STR_17(13), STR_16(17), STR_15(17), 
  4736 ;;		 -> STR_14(20), STR_13(14), STR_12(14), STR_11(14), 
  4737 ;;		 -> STR_10(4), STR_9(7), STR_8(22), STR_7(25), 
  4738 ;;		 -> STR_6(15), STR_5(16), STR_4(17), STR_3(17), 
  4739 ;;		 -> STR_2(15), STR_1(20), 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  idx             1   12[BANK0 ] unsigned char 
  4742 ;;  tmpval          4    0        struct .
  4743 ;;  width           2   22[BANK0 ] int 
  4744 ;;  val             2   19[BANK0 ] unsigned int 
  4745 ;;  len             2   16[BANK0 ] unsigned int 
  4746 ;;  cp              2   14[BANK0 ] PTR const unsigned char 
  4747 ;;		 -> STR_39(7), printf@c(1), buf(9), can_receive@rx_buf(15), 
  4748 ;;  c               1   24[BANK0 ] char 
  4749 ;;  flag            1   21[BANK0 ] unsigned char 
  4750 ;;  ap              1   18[BANK0 ] PTR void [1]
  4751 ;;		 -> ?_printf(2), 
  4752 ;;  prec            1   13[BANK0 ] char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  2    0[BANK0 ] int 
  4755 ;; Registers used:
  4756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4762 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;Total ram usage:       25 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    2
  4769 ;; This function calls:
  4770 ;;		___lwdiv
  4771 ;;		___lwmod
  4772 ;;		___wmul
  4773 ;;		_isdigit
  4774 ;;		_putch
  4775 ;; This function is called by:
  4776 ;;		_set_sid
  4777 ;;		_can_ope_mode
  4778 ;;		_can_receive
  4779 ;;		_can_send
  4780 ;;		_can_status_check
  4781 ;;		_main
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           
  4786                           ;psect for function _printf
  4787  02D3                     _printf:	
  4788                           
  4789                           ;doprnt.c: 466: va_list ap;
  4790                           ;doprnt.c: 499: signed char c;
  4791                           ;doprnt.c: 501: int width;
  4792                           ;doprnt.c: 506: signed char prec;
  4793                           ;doprnt.c: 508: unsigned char flag;
  4794                           ;doprnt.c: 523: union {
  4795                           ;doprnt.c: 524: unsigned long vd;
  4796                           ;doprnt.c: 525: double integ;
  4797                           ;doprnt.c: 526: } tmpval;
  4798                           ;doprnt.c: 528: unsigned int val;
  4799                           ;doprnt.c: 529: unsigned len;
  4800                           ;doprnt.c: 530: const char * cp;
  4801                           ;doprnt.c: 533: *ap = __va_start();
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4805  02D3  3022               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4806  02D4  0020               	movlb	0	; select bank0
  4807  02D5  00A8               	movwf	??_printf
  4808  02D6  0828               	movf	??_printf,w
  4809  02D7  00B2               	movwf	printf@ap
  4810  02D8                     l1904:	
  4811                           ;doprnt.c: 536: while(c = *f++) {
  4812                           
  4813  02D8  0020               	movlb	0	; select bank0
  4814  02D9  0821               	movf	printf@f+1,w
  4815  02DA  00A9               	movwf	??_printf+1
  4816  02DB  0820               	movf	printf@f,w
  4817  02DC  00A8               	movwf	??_printf
  4818  02DD  0AA0               	incf	printf@f,f
  4819  02DE  1903               	skipnz
  4820  02DF  0AA1               	incf	printf@f+1,f
  4821  02E0  0828               	movf	??_printf,w
  4822  02E1  0084               	movwf	4
  4823  02E2  0829               	movf	??_printf+1,w
  4824  02E3  0085               	movwf	5
  4825  02E4  0800               	movf	0,w	;code access
  4826  02E5  00AA               	movwf	??_printf+2
  4827  02E6  082A               	movf	??_printf+2,w
  4828  02E7  00B8               	movwf	printf@c
  4829  02E8  0838               	movf	printf@c,w
  4830  02E9  1903               	btfsc	3,2
  4831  02EA  0008               	return
  4832                           
  4833                           ;doprnt.c: 538: if(c != '%')
  4834  02EB  3025               	movlw	37
  4835  02EC  0638               	xorwf	printf@c,w
  4836  02ED  1903               	btfsc	3,2
  4837  02EE  2AF4               	goto	l1756
  4838                           
  4839                           ;doprnt.c: 540: {
  4840                           ;doprnt.c: 541: (putch(c) );
  4841  02EF  0838               	movf	printf@c,w
  4842  02F0  318E  2613  3182   	fcall	_putch
  4843                           
  4844                           ;doprnt.c: 542: continue;
  4845  02F3  2AD8               	goto	l1904
  4846  02F4                     l1756:	
  4847                           
  4848                           ;doprnt.c: 543: }
  4849                           ;doprnt.c: 546: width = 0;
  4850  02F4  0020               	movlb	0	; select bank0
  4851  02F5  01B6               	clrf	printf@width
  4852  02F6  01B7               	clrf	printf@width+1
  4853                           
  4854                           ;doprnt.c: 548: flag = 0;
  4855  02F7  01B5               	clrf	printf@flag
  4856                           
  4857                           ;doprnt.c: 551: switch(*f) {
  4858                           
  4859                           ;doprnt.c: 550: for(;;) {
  4860  02F8  2AFE               	goto	l1762
  4861  02F9                     l324:	
  4862                           ;doprnt.c: 579: case '0':
  4863                           
  4864                           
  4865                           ;doprnt.c: 580: flag |= 0x04;
  4866  02F9  1535               	bsf	printf@flag,2
  4867                           
  4868                           ;doprnt.c: 581: f++;
  4869  02FA  3001               	movlw	1
  4870  02FB  07A0               	addwf	printf@f,f
  4871  02FC  3000               	movlw	0
  4872  02FD  3DA1               	addwfc	printf@f+1,f
  4873  02FE                     l1762:	
  4874                           ;doprnt.c: 584: }
  4875                           
  4876                           ;doprnt.c: 582: continue;
  4877                           
  4878  02FE  0820               	movf	printf@f,w
  4879  02FF  0084               	movwf	4
  4880  0300  0821               	movf	printf@f+1,w
  4881  0301  0085               	movwf	5
  4882  0302  0800               	movf	0,w	;code access
  4883                           
  4884                           ; Switch size 1, requested type "space"
  4885                           ; Number of cases is 1, Range of values is 48 to 48
  4886                           ; switch strategies available:
  4887                           ; Name         Instructions Cycles
  4888                           ; simple_byte            4     3 (average)
  4889                           ; direct_byte           11     9 (fixed)
  4890                           ; jumptable            263     9 (fixed)
  4891                           ;	Chosen strategy is simple_byte
  4892  0303  3A30               	xorlw	48	; case 48
  4893  0304  1903               	skipnz
  4894  0305  2AF9               	goto	l324
  4895  0306  2B07               	goto	l1764
  4896  0307                     l1764:	
  4897                           ;doprnt.c: 586: }
  4898                           
  4899                           ;doprnt.c: 585: break;
  4900                           
  4901                           
  4902                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4903  0307  0820               	movf	printf@f,w
  4904  0308  0084               	movwf	4
  4905  0309  0821               	movf	printf@f+1,w
  4906  030A  0085               	movwf	5
  4907  030B  0800               	movf	0,w	;code access
  4908  030C  318E  264C  3182   	fcall	_isdigit
  4909  030F  1C03               	btfss	3,0
  4910  0310  2BB2               	goto	l1816
  4911                           
  4912                           ;doprnt.c: 598: width = 0;
  4913  0311  0020               	movlb	0	; select bank0
  4914  0312  01B6               	clrf	printf@width
  4915  0313  01B7               	clrf	printf@width+1
  4916  0314                     l1768:	
  4917                           ;doprnt.c: 599: do {
  4918                           
  4919                           
  4920                           ;doprnt.c: 600: width *= 10;
  4921  0314  300A               	movlw	10
  4922  0315  00F0               	movwf	___wmul@multiplier
  4923  0316  3000               	movlw	0
  4924  0317  00F1               	movwf	___wmul@multiplier+1
  4925  0318  0020               	movlb	0	; select bank0
  4926  0319  0837               	movf	printf@width+1,w
  4927  031A  00F3               	movwf	___wmul@multiplicand+1
  4928  031B  0836               	movf	printf@width,w
  4929  031C  00F2               	movwf	___wmul@multiplicand
  4930  031D  318E  2695  3182   	fcall	___wmul
  4931  0320  0871               	movf	?___wmul+1,w
  4932  0321  0020               	movlb	0	; select bank0
  4933  0322  00B7               	movwf	printf@width+1
  4934  0323  0870               	movf	?___wmul,w
  4935  0324  00B6               	movwf	printf@width
  4936                           
  4937                           ;doprnt.c: 601: width += *f++ - '0';
  4938  0325  0820               	movf	printf@f,w
  4939  0326  0084               	movwf	4
  4940  0327  0821               	movf	printf@f+1,w
  4941  0328  0085               	movwf	5
  4942  0329  0800               	movf	0,w	;code access
  4943  032A  3ED0               	addlw	208
  4944  032B  00A8               	movwf	??_printf
  4945  032C  30FF               	movlw	255
  4946  032D  1803               	skipnc
  4947  032E  3000               	movlw	0
  4948  032F  00A9               	movwf	??_printf+1
  4949  0330  0828               	movf	??_printf,w
  4950  0331  07B6               	addwf	printf@width,f
  4951  0332  0829               	movf	??_printf+1,w
  4952  0333  3DB7               	addwfc	printf@width+1,f
  4953  0334  3001               	movlw	1
  4954  0335  07A0               	addwf	printf@f,f
  4955  0336  3000               	movlw	0
  4956  0337  3DA1               	addwfc	printf@f+1,f
  4957                           
  4958                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4959  0338  0820               	movf	printf@f,w
  4960  0339  0084               	movwf	4
  4961  033A  0821               	movf	printf@f+1,w
  4962  033B  0085               	movwf	5
  4963  033C  0800               	movf	0,w	;code access
  4964  033D  318E  264C  3182   	fcall	_isdigit
  4965  0340  1C03               	btfss	3,0
  4966  0341  2BB2               	goto	l1816
  4967  0342  2B14               	goto	l1768
  4968  0343                     l337:	
  4969                           ;doprnt.c: 718: case 'x':
  4970                           
  4971                           ;doprnt.c: 698: case 'i':
  4972                           ;doprnt.c: 699: break;
  4973                           
  4974                           ;doprnt.c: 697: case 'd':
  4975                           
  4976                           ;doprnt.c: 638: goto alldone;
  4977                           
  4978                           ;doprnt.c: 637: case 0:
  4979                           
  4980                           ;doprnt.c: 608: }
  4981                           ;doprnt.c: 635: switch(c = *f++) {
  4982                           
  4983                           
  4984                           ;doprnt.c: 721: flag |= 0x80;
  4985  0343  17B5               	bsf	printf@flag,7
  4986                           
  4987                           ;doprnt.c: 723: break;
  4988  0344  2BD3               	goto	l336
  4989  0345                     l1776:	
  4990                           ;doprnt.c: 728: case 's':
  4991                           
  4992                           
  4993                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4994  0345  0832               	movf	printf@ap,w
  4995  0346  0086               	movwf	6
  4996  0347  0187               	clrf	7
  4997  0348  0801               	movf	1,w
  4998  0349  00AE               	movwf	printf@cp
  4999  034A  3000               	movlw	0
  5000  034B  00AF               	movwf	printf@cp+1
  5001  034C  3001               	movlw	1
  5002  034D  00A8               	movwf	??_printf
  5003  034E  0828               	movf	??_printf,w
  5004  034F  07B2               	addwf	printf@ap,f
  5005                           
  5006                           ;doprnt.c: 740: if(!cp)
  5007  0350  082E               	movf	printf@cp,w
  5008  0351  042F               	iorwf	printf@cp+1,w
  5009  0352  1D03               	btfss	3,2
  5010  0353  2B58               	goto	l1784
  5011                           
  5012                           ;doprnt.c: 741: cp = "(null)";
  5013  0354  3034               	movlw	low (STR_39| (0+32768))
  5014  0355  00AE               	movwf	printf@cp
  5015  0356  3093               	movlw	high (STR_39| (0+32768))
  5016  0357  00AF               	movwf	printf@cp+1
  5017  0358                     l1784:	
  5018                           
  5019                           ;doprnt.c: 745: len = 0;
  5020  0358  01B0               	clrf	printf@len
  5021  0359  01B1               	clrf	printf@len+1
  5022  035A                     l1788:	
  5023                           ;doprnt.c: 746: while(cp[len])
  5024                           
  5025  035A  082E               	movf	printf@cp,w
  5026  035B  0730               	addwf	printf@len,w
  5027  035C  0084               	movwf	4
  5028  035D  082F               	movf	printf@cp+1,w
  5029  035E  3D31               	addwfc	printf@len+1,w
  5030  035F  0085               	movwf	5
  5031  0360  0012               	moviw fsr0++
  5032  0361  1903               	btfsc	3,2
  5033  0362  2B68               	goto	l1790
  5034                           
  5035                           ;doprnt.c: 747: len++;
  5036  0363  3001               	movlw	1
  5037  0364  07B0               	addwf	printf@len,f
  5038  0365  3000               	movlw	0
  5039  0366  3DB1               	addwfc	printf@len+1,f
  5040  0367  2B5A               	goto	l1788
  5041  0368                     l1790:	
  5042                           ;doprnt.c: 750: dostring:
  5043                           
  5044                           
  5045                           ;doprnt.c: 757: if(width > len)
  5046  0368  0837               	movf	printf@width+1,w
  5047  0369  0231               	subwf	printf@len+1,w
  5048  036A  1D03               	skipz
  5049  036B  2B6E               	goto	u1585
  5050  036C  0836               	movf	printf@width,w
  5051  036D  0230               	subwf	printf@len,w
  5052  036E                     u1585:	
  5053  036E  1803               	skipnc
  5054  036F  2B75               	goto	l1794
  5055                           
  5056                           ;doprnt.c: 758: width -= len;
  5057  0370  0830               	movf	printf@len,w
  5058  0371  02B6               	subwf	printf@width,f
  5059  0372  0831               	movf	printf@len+1,w
  5060  0373  3BB7               	subwfb	printf@width+1,f
  5061  0374  2B77               	goto	l1798
  5062  0375                     l1794:	
  5063                           
  5064                           ;doprnt.c: 759: else
  5065                           ;doprnt.c: 760: width = 0;
  5066  0375  01B6               	clrf	printf@width
  5067  0376  01B7               	clrf	printf@width+1
  5068  0377                     l1798:	
  5069                           ;doprnt.c: 764: while(width--)
  5070                           
  5071  0377  30FF               	movlw	255
  5072  0378  0020               	movlb	0	; select bank0
  5073  0379  07B6               	addwf	printf@width,f
  5074  037A  30FF               	movlw	255
  5075  037B  3DB7               	addwfc	printf@width+1,f
  5076  037C  0A36               	incf	printf@width,w
  5077  037D  1903               	btfsc	3,2
  5078  037E  0A37               	incf	printf@width+1,w
  5079  037F  1903               	btfsc	3,2
  5080  0380  2B93               	goto	l1804
  5081                           
  5082                           ;doprnt.c: 765: (putch(' ') );
  5083  0381  3020               	movlw	32
  5084  0382  318E  2613  3182   	fcall	_putch
  5085  0385  2B77               	goto	l1798
  5086  0386                     l1800:	
  5087                           ;doprnt.c: 767: while(len--)
  5088                           
  5089                           
  5090                           ;doprnt.c: 768: (putch(*cp++) );
  5091  0386  082E               	movf	printf@cp,w
  5092  0387  0084               	movwf	4
  5093  0388  082F               	movf	printf@cp+1,w
  5094  0389  0085               	movwf	5
  5095  038A  0800               	movf	0,w	;code access
  5096  038B  318E  2613  3182   	fcall	_putch
  5097  038E  3001               	movlw	1
  5098  038F  0020               	movlb	0	; select bank0
  5099  0390  07AE               	addwf	printf@cp,f
  5100  0391  3000               	movlw	0
  5101  0392  3DAF               	addwfc	printf@cp+1,f
  5102  0393                     l1804:	
  5103  0393  3001               	movlw	1
  5104  0394  02B0               	subwf	printf@len,f
  5105  0395  3000               	movlw	0
  5106  0396  3BB1               	subwfb	printf@len+1,f
  5107  0397  0A30               	incf	printf@len,w
  5108  0398  1D03               	skipz
  5109  0399  2B86               	goto	l1800
  5110  039A  0A31               	incf	printf@len+1,w
  5111  039B  1903               	btfsc	3,2
  5112  039C  2AD8               	goto	l1904
  5113  039D  2B86               	goto	l1800
  5114  039E                     l1806:	
  5115                           ;doprnt.c: 784: case 'c':
  5116                           
  5117                           ;doprnt.c: 774: continue;
  5118                           
  5119                           
  5120                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5121  039E  0832               	movf	printf@ap,w
  5122  039F  0086               	movwf	6
  5123  03A0  0187               	clrf	7
  5124  03A1  0801               	movf	1,w
  5125  03A2  00A8               	movwf	??_printf
  5126  03A3  0828               	movf	??_printf,w
  5127  03A4  00B8               	movwf	printf@c
  5128  03A5  3002               	movlw	2
  5129  03A6  00A8               	movwf	??_printf
  5130  03A7  0828               	movf	??_printf,w
  5131  03A8  07B2               	addwf	printf@ap,f
  5132  03A9                     l1810:	
  5133                           ;doprnt.c: 802: default:
  5134                           
  5135                           
  5136                           ;doprnt.c: 805: cp = (char *)&c;
  5137  03A9  3038               	movlw	low printf@c
  5138  03AA  00AE               	movwf	printf@cp
  5139  03AB  3000               	movlw	high printf@c
  5140  03AC  00AF               	movwf	printf@cp+1
  5141                           
  5142                           ;doprnt.c: 806: len = 1;
  5143  03AD  3001               	movlw	1
  5144  03AE  00B0               	movwf	printf@len
  5145  03AF  3000               	movlw	0
  5146  03B0  00B1               	movwf	printf@len+1
  5147                           
  5148                           ;doprnt.c: 807: goto dostring;
  5149  03B1  2B68               	goto	l1790
  5150  03B2                     l1816:	
  5151                           ;doprnt.c: 822: }
  5152                           
  5153  03B2  0020               	movlb	0	; select bank0
  5154  03B3  0821               	movf	printf@f+1,w
  5155  03B4  00A9               	movwf	??_printf+1
  5156  03B5  0820               	movf	printf@f,w
  5157  03B6  00A8               	movwf	??_printf
  5158  03B7  0AA0               	incf	printf@f,f
  5159  03B8  1903               	skipnz
  5160  03B9  0AA1               	incf	printf@f+1,f
  5161  03BA  0828               	movf	??_printf,w
  5162  03BB  0084               	movwf	4
  5163  03BC  0829               	movf	??_printf+1,w
  5164  03BD  0085               	movwf	5
  5165  03BE  0800               	movf	0,w	;code access
  5166  03BF  00B8               	movwf	printf@c
  5167                           
  5168                           ; Switch size 1, requested type "space"
  5169                           ; Number of cases is 6, Range of values is 0 to 120
  5170                           ; switch strategies available:
  5171                           ; Name         Instructions Cycles
  5172                           ; simple_byte           19    10 (average)
  5173                           ; direct_byte          248     6 (fixed)
  5174                           ; jumptable            260     6 (fixed)
  5175                           ;	Chosen strategy is simple_byte
  5176  03C0  3A00               	xorlw	0	; case 0
  5177  03C1  1903               	skipnz
  5178  03C2  2D0D               	goto	l388
  5179  03C3  3A63               	xorlw	99	; case 99
  5180  03C4  1903               	skipnz
  5181  03C5  2B9E               	goto	l1806
  5182  03C6  3A07               	xorlw	7	; case 100
  5183  03C7  1903               	skipnz
  5184  03C8  2BD3               	goto	l336
  5185  03C9  3A0D               	xorlw	13	; case 105
  5186  03CA  1903               	skipnz
  5187  03CB  2BD3               	goto	l336
  5188  03CC  3A1A               	xorlw	26	; case 115
  5189  03CD  1903               	skipnz
  5190  03CE  2B45               	goto	l1776
  5191  03CF  3A0B               	xorlw	11	; case 120
  5192  03D0  1903               	skipnz
  5193  03D1  2B43               	goto	l337
  5194  03D2  2BA9               	goto	l1810
  5195  03D3                     l336:	
  5196                           
  5197                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5198  03D3  0020               	movlb	0	; select bank0
  5199  03D4  1BB5               	btfsc	printf@flag,7
  5200  03D5  2BED               	goto	l1828
  5201                           
  5202                           ;doprnt.c: 1253: {
  5203                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5204  03D6  0832               	movf	printf@ap,w
  5205  03D7  0086               	movwf	6
  5206  03D8  0187               	clrf	7
  5207  03D9  3F40               	moviw [0]fsr1
  5208  03DA  00B3               	movwf	printf@val
  5209  03DB  3F41               	moviw [1]fsr1
  5210  03DC  00B4               	movwf	printf@val+1
  5211  03DD  3002               	movlw	2
  5212  03DE  00A8               	movwf	??_printf
  5213  03DF  0828               	movf	??_printf,w
  5214  03E0  07B2               	addwf	printf@ap,f
  5215                           
  5216                           ;doprnt.c: 1261: if((int)val < 0) {
  5217  03E1  1FB4               	btfss	printf@val+1,7
  5218  03E2  2C3D               	goto	l1854
  5219                           
  5220                           ;doprnt.c: 1262: flag |= 0x03;
  5221  03E3  3003               	movlw	3
  5222  03E4  00A8               	movwf	??_printf
  5223  03E5  0828               	movf	??_printf,w
  5224  03E6  04B5               	iorwf	printf@flag,f
  5225                           
  5226                           ;doprnt.c: 1263: val = -val;
  5227  03E7  09B3               	comf	printf@val,f
  5228  03E8  09B4               	comf	printf@val+1,f
  5229  03E9  0AB3               	incf	printf@val,f
  5230  03EA  1903               	skipnz
  5231  03EB  0AB4               	incf	printf@val+1,f
  5232                           
  5233                           ;doprnt.c: 1264: }
  5234                           ;doprnt.c: 1266: }
  5235  03EC  2C3D               	goto	l1854
  5236  03ED                     l1828:	
  5237                           
  5238                           ;doprnt.c: 1268: else
  5239                           ;doprnt.c: 1273: {
  5240                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5241  03ED  0832               	movf	printf@ap,w
  5242  03EE  0086               	movwf	6
  5243  03EF  0187               	clrf	7
  5244  03F0  3F40               	moviw [0]fsr1
  5245  03F1  00B3               	movwf	printf@val
  5246  03F2  3F41               	moviw [1]fsr1
  5247  03F3  00B4               	movwf	printf@val+1
  5248  03F4  3002               	movlw	2
  5249  03F5  00A8               	movwf	??_printf
  5250  03F6  0828               	movf	??_printf,w
  5251  03F7  07B2               	addwf	printf@ap,f
  5252                           
  5253                           ;doprnt.c: 1287: }
  5254                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5255  03F8  2C3D               	goto	l1854
  5256  03F9                     l358:	
  5257                           ;doprnt.c: 1299: case 0x00:
  5258                           
  5259                           
  5260                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5261  03F9  01B8               	clrf	printf@c
  5262  03FA  0AB8               	incf	printf@c,f
  5263  03FB                     L16:	
  5264  03FB  3005               	movlw	5
  5265  03FC  0638               	xorwf	printf@c,w
  5266  03FD  1903               	btfsc	3,2
  5267  03FE  2C46               	goto	l1856
  5268                           
  5269                           ;doprnt.c: 1306: if(val < dpowers[c])
  5270  03FF  0838               	movf	printf@c,w
  5271  0400  00A8               	movwf	??_printf
  5272  0401  01A9               	clrf	??_printf+1
  5273  0402  35A8               	lslf	??_printf,f
  5274  0403  0DA9               	rlf	??_printf+1,f
  5275  0404  3022               	movlw	low (_dpowers| (0+32768))
  5276  0405  0728               	addwf	??_printf,w
  5277  0406  0084               	movwf	4
  5278  0407  3093               	movlw	high (_dpowers| (0+32768))
  5279  0408  3D29               	addwfc	??_printf+1,w
  5280  0409  0085               	movwf	5
  5281  040A  3F00               	moviw [0]fsr0
  5282  040B  00AA               	movwf	??_printf+2
  5283  040C  3F01               	moviw [1]fsr0
  5284  040D  00AB               	movwf	??_printf+3
  5285  040E  082B               	movf	??_printf+3,w
  5286  040F  0234               	subwf	printf@val+1,w
  5287  0410  1D03               	skipz
  5288  0411  2C14               	goto	u1645
  5289  0412  082A               	movf	??_printf+2,w
  5290  0413  0233               	subwf	printf@val,w
  5291  0414                     u1645:	
  5292  0414  1C03               	btfss	3,0
  5293  0415  2C46               	goto	l1856
  5294                           
  5295                           ;doprnt.c: 1307: break;
  5296  0416  3001               	movlw	1
  5297  0417  00A8               	movwf	??_printf
  5298  0418  0828               	movf	??_printf,w
  5299  0419  07B8               	addwf	printf@c,f
  5300  041A  2BFB               	goto	L16
  5301  041B                     l363:	
  5302                           ;doprnt.c: 1314: case 0x80:
  5303                           
  5304                           ;doprnt.c: 1309: break;
  5305                           
  5306                           
  5307                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5308  041B  01B8               	clrf	printf@c
  5309  041C  0AB8               	incf	printf@c,f
  5310  041D                     L17:	
  5311  041D  3004               	movlw	4
  5312  041E  0638               	xorwf	printf@c,w
  5313  041F  1903               	btfsc	3,2
  5314  0420  2C46               	goto	l1856
  5315                           
  5316                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5317  0421  0838               	movf	printf@c,w
  5318  0422  00A8               	movwf	??_printf
  5319  0423  01A9               	clrf	??_printf+1
  5320  0424  35A8               	lslf	??_printf,f
  5321  0425  0DA9               	rlf	??_printf+1,f
  5322  0426  302C               	movlw	low (_hexpowers| (0+32768))
  5323  0427  0728               	addwf	??_printf,w
  5324  0428  0084               	movwf	4
  5325  0429  3093               	movlw	high (_hexpowers| (0+32768))
  5326  042A  3D29               	addwfc	??_printf+1,w
  5327  042B  0085               	movwf	5
  5328  042C  3F00               	moviw [0]fsr0
  5329  042D  00AA               	movwf	??_printf+2
  5330  042E  3F01               	moviw [1]fsr0
  5331  042F  00AB               	movwf	??_printf+3
  5332  0430  082B               	movf	??_printf+3,w
  5333  0431  0234               	subwf	printf@val+1,w
  5334  0432  1D03               	skipz
  5335  0433  2C36               	goto	u1675
  5336  0434  082A               	movf	??_printf+2,w
  5337  0435  0233               	subwf	printf@val,w
  5338  0436                     u1675:	
  5339  0436  1C03               	btfss	3,0
  5340  0437  2C46               	goto	l1856
  5341                           
  5342                           ;doprnt.c: 1318: break;
  5343  0438  3001               	movlw	1
  5344  0439  00A8               	movwf	??_printf
  5345  043A  0828               	movf	??_printf,w
  5346  043B  07B8               	addwf	printf@c,f
  5347  043C  2C1D               	goto	L17
  5348  043D                     l1854:	
  5349                           ;doprnt.c: 1336: }
  5350                           
  5351                           ;doprnt.c: 1320: break;
  5352                           
  5353  043D  0835               	movf	printf@flag,w
  5354  043E  3980               	andlw	128
  5355                           
  5356                           ; Switch size 1, requested type "space"
  5357                           ; Number of cases is 2, Range of values is 0 to 128
  5358                           ; switch strategies available:
  5359                           ; Name         Instructions Cycles
  5360                           ; simple_byte            7     4 (average)
  5361                           ; jumptable            260     6 (fixed)
  5362                           ;	Chosen strategy is simple_byte
  5363  043F  3A00               	xorlw	0	; case 0
  5364  0440  1903               	skipnz
  5365  0441  2BF9               	goto	l358
  5366  0442  3A80               	xorlw	128	; case 128
  5367  0443  1903               	skipnz
  5368  0444  2C1B               	goto	l363
  5369  0445  2C46               	goto	l1856
  5370  0446                     l1856:	
  5371                           
  5372                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5373  0446  0836               	movf	printf@width,w
  5374  0447  0437               	iorwf	printf@width+1,w
  5375  0448  1903               	btfsc	3,2
  5376  0449  2C52               	goto	l367
  5377  044A  0835               	movf	printf@flag,w
  5378  044B  3903               	andlw	3
  5379  044C  1903               	btfsc	3,2
  5380  044D  2C52               	goto	l367
  5381                           
  5382                           ;doprnt.c: 1346: width--;
  5383  044E  30FF               	movlw	255
  5384  044F  07B6               	addwf	printf@width,f
  5385  0450  30FF               	movlw	255
  5386  0451  3DB7               	addwfc	printf@width+1,f
  5387  0452                     l367:	
  5388                           
  5389                           ;doprnt.c: 1381: if(width > c)
  5390  0452  0838               	movf	printf@c,w
  5391  0453  00A8               	movwf	??_printf
  5392  0454  01A9               	clrf	??_printf+1
  5393  0455  1BA8               	btfsc	??_printf,7
  5394  0456  03A9               	decf	??_printf+1,f
  5395  0457  0829               	movf	??_printf+1,w
  5396  0458  3A80               	xorlw	128
  5397  0459  00AA               	movwf	??_printf+2
  5398  045A  0837               	movf	printf@width+1,w
  5399  045B  3A80               	xorlw	128
  5400  045C  022A               	subwf	??_printf+2,w
  5401  045D  1D03               	skipz
  5402  045E  2C61               	goto	u1715
  5403  045F  0836               	movf	printf@width,w
  5404  0460  0228               	subwf	??_printf,w
  5405  0461                     u1715:	
  5406  0461  1803               	skipnc
  5407  0462  2C6E               	goto	l1864
  5408                           
  5409                           ;doprnt.c: 1382: width -= c;
  5410  0463  0020               	movlb	0	; select bank0
  5411  0464  0838               	movf	printf@c,w
  5412  0465  00A8               	movwf	??_printf
  5413  0466  01A9               	clrf	??_printf+1
  5414  0467  1BA8               	btfsc	??_printf,7
  5415  0468  03A9               	decf	??_printf+1,f
  5416  0469  0828               	movf	??_printf,w
  5417  046A  02B6               	subwf	printf@width,f
  5418  046B  0829               	movf	??_printf+1,w
  5419  046C  3BB7               	subwfb	printf@width+1,f
  5420  046D  2C71               	goto	l1866
  5421  046E                     l1864:	
  5422                           
  5423                           ;doprnt.c: 1383: else
  5424                           ;doprnt.c: 1384: width = 0;
  5425  046E  0020               	movlb	0	; select bank0
  5426  046F  01B6               	clrf	printf@width
  5427  0470  01B7               	clrf	printf@width+1
  5428  0471                     l1866:	
  5429                           
  5430                           ;doprnt.c: 1387: if(flag & 0x04) {
  5431  0471  1D35               	btfss	printf@flag,2
  5432  0472  2C8A               	goto	l1878
  5433                           
  5434                           ;doprnt.c: 1392: if(flag & 0x03)
  5435  0473  0835               	movf	printf@flag,w
  5436  0474  3903               	andlw	3
  5437  0475  1903               	btfsc	3,2
  5438  0476  2C7B               	goto	l1872
  5439                           
  5440                           ;doprnt.c: 1393: (putch('-') );
  5441  0477  302D               	movlw	45
  5442  0478  318E  2613  3182   	fcall	_putch
  5443  047B                     l1872:	
  5444                           
  5445                           ;doprnt.c: 1415: if(width)
  5446  047B  0020               	movlb	0	; select bank0
  5447  047C                     L18:	
  5448  047C  0836               	movf	printf@width,w
  5449  047D  0437               	iorwf	printf@width+1,w
  5450  047E  1903               	btfsc	3,2
  5451  047F  2CA3               	goto	l1888
  5452                           
  5453                           ;doprnt.c: 1417: (putch('0') );
  5454                           
  5455                           ;doprnt.c: 1416: do
  5456  0480  3030               	movlw	48
  5457  0481  318E  2613  3182   	fcall	_putch
  5458                           
  5459                           ;doprnt.c: 1418: while(--width);
  5460  0484  30FF               	movlw	255
  5461  0485  0020               	movlb	0	; select bank0
  5462  0486  07B6               	addwf	printf@width,f
  5463  0487  30FF               	movlw	255
  5464  0488  3DB7               	addwfc	printf@width+1,f
  5465  0489  2C7C               	goto	L18
  5466  048A                     l1878:	
  5467                           ;doprnt.c: 1420: } else
  5468                           
  5469                           
  5470                           ;doprnt.c: 1422: {
  5471                           ;doprnt.c: 1424: if(width
  5472                           ;doprnt.c: 1428: )
  5473  048A  0836               	movf	printf@width,w
  5474  048B  0437               	iorwf	printf@width+1,w
  5475  048C  1903               	btfsc	3,2
  5476  048D  2C9B               	goto	l1884
  5477  048E                     l1880:	
  5478                           ;doprnt.c: 1429: do
  5479                           
  5480                           
  5481                           ;doprnt.c: 1430: (putch(' ') );
  5482  048E  3020               	movlw	32
  5483  048F  318E  2613  3182   	fcall	_putch
  5484                           
  5485                           ;doprnt.c: 1431: while(--width);
  5486  0492  30FF               	movlw	255
  5487  0493  0020               	movlb	0	; select bank0
  5488  0494  07B6               	addwf	printf@width,f
  5489  0495  30FF               	movlw	255
  5490  0496  3DB7               	addwfc	printf@width+1,f
  5491  0497  0836               	movf	printf@width,w
  5492  0498  0437               	iorwf	printf@width+1,w
  5493  0499  1D03               	btfss	3,2
  5494  049A  2C8E               	goto	l1880
  5495  049B                     l1884:	
  5496                           
  5497                           ;doprnt.c: 1438: if(flag & 0x03)
  5498  049B  0835               	movf	printf@flag,w
  5499  049C  3903               	andlw	3
  5500  049D  1903               	btfsc	3,2
  5501  049E  2CA3               	goto	l1888
  5502                           
  5503                           ;doprnt.c: 1439: (putch('-') );
  5504  049F  302D               	movlw	45
  5505  04A0  318E  2613  3182   	fcall	_putch
  5506  04A3                     l1888:	
  5507                           
  5508                           ;doprnt.c: 1469: }
  5509                           ;doprnt.c: 1472: prec = c;
  5510  04A3  0020               	movlb	0	; select bank0
  5511  04A4  0838               	movf	printf@c,w
  5512  04A5  00A8               	movwf	??_printf
  5513  04A6  0828               	movf	??_printf,w
  5514  04A7  00AD               	movwf	printf@prec
  5515                           
  5516                           ;doprnt.c: 1474: while(prec--) {
  5517  04A8  2CFB               	goto	l1902
  5518  04A9                     l1890:	
  5519                           ;doprnt.c: 1478: {
  5520                           ;doprnt.c: 1483: case 0x00:
  5521                           
  5522                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  5523                           
  5524                           
  5525                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5526  04A9  300A               	movlw	10
  5527  04AA  00F8               	movwf	___lwmod@divisor
  5528  04AB  3000               	movlw	0
  5529  04AC  00F9               	movwf	___lwmod@divisor+1
  5530  04AD  082D               	movf	printf@prec,w
  5531  04AE  00A8               	movwf	??_printf
  5532  04AF  01A9               	clrf	??_printf+1
  5533  04B0  35A8               	lslf	??_printf,f
  5534  04B1  0DA9               	rlf	??_printf+1,f
  5535  04B2  3022               	movlw	low (_dpowers| (0+32768))
  5536  04B3  0728               	addwf	??_printf,w
  5537  04B4  0084               	movwf	4
  5538  04B5  3093               	movlw	high (_dpowers| (0+32768))
  5539  04B6  3D29               	addwfc	??_printf+1,w
  5540  04B7  0085               	movwf	5
  5541  04B8  3F00               	moviw [0]fsr0
  5542  04B9  00F0               	movwf	___lwdiv@divisor
  5543  04BA  3F01               	moviw [1]fsr0
  5544  04BB  00F1               	movwf	___lwdiv@divisor+1
  5545  04BC  0834               	movf	printf@val+1,w
  5546  04BD  00F3               	movwf	___lwdiv@dividend+1
  5547  04BE  0833               	movf	printf@val,w
  5548  04BF  00F2               	movwf	___lwdiv@dividend
  5549  04C0  318F  2704  3182   	fcall	___lwdiv
  5550  04C3  0871               	movf	?___lwdiv+1,w
  5551  04C4  00FB               	movwf	___lwmod@dividend+1
  5552  04C5  0870               	movf	?___lwdiv,w
  5553  04C6  00FA               	movwf	___lwmod@dividend
  5554  04C7  318E  26D8  3182   	fcall	___lwmod
  5555  04CA  0878               	movf	?___lwmod,w
  5556  04CB  3E30               	addlw	48
  5557  04CC  0020               	movlb	0	; select bank0
  5558  04CD  00AA               	movwf	??_printf+2
  5559  04CE  082A               	movf	??_printf+2,w
  5560  04CF  2CF6               	goto	L15
  5561  04D0                     l1892:	
  5562                           ;doprnt.c: 1497: case 0x80:
  5563                           
  5564                           ;doprnt.c: 1491: break;
  5565                           
  5566                           
  5567                           ;doprnt.c: 1499: {
  5568                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5569  04D0  082D               	movf	printf@prec,w
  5570  04D1  00A8               	movwf	??_printf
  5571  04D2  01A9               	clrf	??_printf+1
  5572  04D3  35A8               	lslf	??_printf,f
  5573  04D4  0DA9               	rlf	??_printf+1,f
  5574  04D5  302C               	movlw	low (_hexpowers| (0+32768))
  5575  04D6  0728               	addwf	??_printf,w
  5576  04D7  0084               	movwf	4
  5577  04D8  3093               	movlw	high (_hexpowers| (0+32768))
  5578  04D9  3D29               	addwfc	??_printf+1,w
  5579  04DA  0085               	movwf	5
  5580  04DB  3F00               	moviw [0]fsr0
  5581  04DC  00F0               	movwf	___lwdiv@divisor
  5582  04DD  3F01               	moviw [1]fsr0
  5583  04DE  00F1               	movwf	___lwdiv@divisor+1
  5584  04DF  0834               	movf	printf@val+1,w
  5585  04E0  00F3               	movwf	___lwdiv@dividend+1
  5586  04E1  0833               	movf	printf@val,w
  5587  04E2  00F2               	movwf	___lwdiv@dividend
  5588  04E3  318F  2704  3182   	fcall	___lwdiv
  5589  04E6  0870               	movf	?___lwdiv,w
  5590  04E7  390F               	andlw	15
  5591  04E8  0020               	movlb	0	; select bank0
  5592  04E9  00AA               	movwf	??_printf+2
  5593  04EA  082A               	movf	??_printf+2,w
  5594  04EB  00AC               	movwf	printf@idx
  5595                           
  5596                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5597  04EC  082C               	movf	printf@idx,w
  5598  04ED  3E17               	addlw	low (STR_40| (0+32768))
  5599  04EE  0084               	movwf	4
  5600  04EF  3092               	movlw	high (STR_40| (0+32768))
  5601  04F0  1803               	skipnc
  5602  04F1  3E01               	addlw	1
  5603  04F2  0085               	movwf	5
  5604  04F3  0800               	movf	0,w	;code access
  5605  04F4  00A8               	movwf	??_printf
  5606  04F5  0828               	movf	??_printf,w
  5607  04F6                     L15:	
  5608  04F6  00B8               	movwf	printf@c
  5609  04F7                     l1900:	
  5610                           ;doprnt.c: 1523: }
  5611                           
  5612                           ;doprnt.c: 1508: }
  5613                           ;doprnt.c: 1510: break;
  5614                           
  5615                           
  5616                           ;doprnt.c: 1524: (putch(c) );
  5617  04F7  0838               	movf	printf@c,w
  5618  04F8  318E  2613  3182   	fcall	_putch
  5619  04FB                     l1902:	
  5620  04FB  30FF               	movlw	255
  5621  04FC  0020               	movlb	0	; select bank0
  5622  04FD  00A8               	movwf	??_printf
  5623  04FE  0828               	movf	??_printf,w
  5624  04FF  07AD               	addwf	printf@prec,f
  5625  0500  0A2D               	incf	printf@prec,w
  5626  0501  1903               	btfsc	3,2
  5627  0502  2AD8               	goto	l1904
  5628  0503  0835               	movf	printf@flag,w
  5629  0504  3980               	andlw	128
  5630                           
  5631                           ; Switch size 1, requested type "space"
  5632                           ; Number of cases is 2, Range of values is 0 to 128
  5633                           ; switch strategies available:
  5634                           ; Name         Instructions Cycles
  5635                           ; simple_byte            7     4 (average)
  5636                           ; jumptable            260     6 (fixed)
  5637                           ;	Chosen strategy is simple_byte
  5638  0505  3A00               	xorlw	0	; case 0
  5639  0506  1903               	skipnz
  5640  0507  2CA9               	goto	l1890
  5641  0508  3A80               	xorlw	128	; case 128
  5642  0509  1903               	skipnz
  5643  050A  2CD0               	goto	l1892
  5644  050B  2CF7               	goto	l1900
  5645  050C  2CF7               	goto	l1900
  5646  050D                     l388:	
  5647                           ;doprnt.c: 1540: return 0;
  5648                           ;	Return value of _printf is never used
  5649                           
  5650                           ;doprnt.c: 1525: }
  5651                           ;doprnt.c: 1533: }
  5652                           ;doprnt.c: 1535: alldone:
  5653                           
  5654  050D  0008               	return
  5655  050E                     __end_of_printf:	
  5656                           
  5657                           	psect	text8
  5658  0E13                     __ptext8:	
  5659 ;; *************** function _putch *****************
  5660 ;; Defined at:
  5661 ;;		line 107 in file "mcc_generated_files/eusart.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  txData          1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  txData          1    1[COMMON] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, pclath, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:        1 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    1
  5682 ;; This function calls:
  5683 ;;		_EUSART_Write
  5684 ;; This function is called by:
  5685 ;;		_printf
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _putch
  5691  0E13                     _putch:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5695                           ;putch@txData stored from wreg
  5696  0E13  00F1               	movwf	putch@txData
  5697                           
  5698                           ;eusart.c: 109: EUSART_Write(txData);
  5699  0E14  0871               	movf	putch@txData,w
  5700  0E15  318E  2631         	fcall	_EUSART_Write
  5701  0E17  0008               	return
  5702  0E18                     __end_of_putch:	
  5703                           
  5704                           	psect	text9
  5705  0E31                     __ptext9:	
  5706 ;; *************** function _EUSART_Write *****************
  5707 ;; Defined at:
  5708 ;;		line 93 in file "mcc_generated_files/eusart.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  txData          1    wreg     unsigned char 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  txData          1    0[COMMON] unsigned char 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;Total ram usage:        1 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_putch
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _EUSART_Write
  5737  0E31                     _EUSART_Write:	
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _EUSART_Write: [wreg]
  5741                           ;EUSART_Write@txData stored from wreg
  5742  0E31  00F0               	movwf	EUSART_Write@txData
  5743  0E32                     l58:	
  5744                           ;eusart.c: 96: {
  5745                           
  5746                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  5747                           
  5748  0E32  0020               	movlb	0	; select bank0
  5749  0E33  1E11               	btfss	17,4	;volatile
  5750  0E34  2E32               	goto	l58
  5751                           
  5752                           ;eusart.c: 97: }
  5753                           ;eusart.c: 99: TXREG = txData;
  5754  0E35  0870               	movf	EUSART_Write@txData,w
  5755  0E36  0023               	movlb	3	; select bank3
  5756  0E37  009A               	movwf	26	;volatile
  5757  0E38  0008               	return
  5758  0E39                     __end_of_EUSART_Write:	
  5759                           
  5760                           	psect	text10
  5761  0ED8                     __ptext10:	
  5762 ;; *************** function ___lwmod *****************
  5763 ;; Defined at:
  5764 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  divisor         2    8[COMMON] unsigned int 
  5767 ;;  dividend        2   10[COMMON] unsigned int 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  counter         1   13[COMMON] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  2    8[COMMON] unsigned int 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;Total ram usage:        6 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_printf
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function ___lwmod
  5794  0ED8                     ___lwmod:	
  5795                           
  5796                           ;incstack = 0
  5797                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5798  0ED8  0878               	movf	___lwmod@divisor,w
  5799  0ED9  0479               	iorwf	___lwmod@divisor+1,w
  5800  0EDA  1903               	btfsc	3,2
  5801  0EDB  2EFF               	goto	l1746
  5802  0EDC  01FD               	clrf	___lwmod@counter
  5803  0EDD  0AFD               	incf	___lwmod@counter,f
  5804  0EDE                     l1736:	
  5805  0EDE  1BF9               	btfsc	___lwmod@divisor+1,7
  5806  0EDF  2EEA               	goto	l1738
  5807  0EE0  3001               	movlw	1
  5808  0EE1                     u1485:	
  5809  0EE1  35F8               	lslf	___lwmod@divisor,f
  5810  0EE2  0DF9               	rlf	___lwmod@divisor+1,f
  5811  0EE3  0B89               	decfsz	9,f
  5812  0EE4  2EE1               	goto	u1485
  5813  0EE5  3001               	movlw	1
  5814  0EE6  00FC               	movwf	??___lwmod
  5815  0EE7  087C               	movf	??___lwmod,w
  5816  0EE8  07FD               	addwf	___lwmod@counter,f
  5817  0EE9  2EDE               	goto	l1736
  5818  0EEA                     l1738:	
  5819  0EEA  0879               	movf	___lwmod@divisor+1,w
  5820  0EEB  027B               	subwf	___lwmod@dividend+1,w
  5821  0EEC  1D03               	skipz
  5822  0EED  2EF0               	goto	u1505
  5823  0EEE  0878               	movf	___lwmod@divisor,w
  5824  0EEF  027A               	subwf	___lwmod@dividend,w
  5825  0EF0                     u1505:	
  5826  0EF0  1C03               	skipc
  5827  0EF1  2EF6               	goto	l1742
  5828  0EF2  0878               	movf	___lwmod@divisor,w
  5829  0EF3  02FA               	subwf	___lwmod@dividend,f
  5830  0EF4  0879               	movf	___lwmod@divisor+1,w
  5831  0EF5  3BFB               	subwfb	___lwmod@dividend+1,f
  5832  0EF6                     l1742:	
  5833  0EF6  3001               	movlw	1
  5834  0EF7                     u1515:	
  5835  0EF7  36F9               	lsrf	___lwmod@divisor+1,f
  5836  0EF8  0CF8               	rrf	___lwmod@divisor,f
  5837  0EF9  0B89               	decfsz	9,f
  5838  0EFA  2EF7               	goto	u1515
  5839  0EFB  3001               	movlw	1
  5840  0EFC  02FD               	subwf	___lwmod@counter,f
  5841  0EFD  1D03               	btfss	3,2
  5842  0EFE  2EEA               	goto	l1738
  5843  0EFF                     l1746:	
  5844  0EFF  087B               	movf	___lwmod@dividend+1,w
  5845  0F00  00F9               	movwf	?___lwmod+1
  5846  0F01  087A               	movf	___lwmod@dividend,w
  5847  0F02  00F8               	movwf	?___lwmod
  5848  0F03  0008               	return
  5849  0F04                     __end_of___lwmod:	
  5850                           
  5851                           	psect	text11
  5852  0F04                     __ptext11:	
  5853 ;; *************** function ___lwdiv *****************
  5854 ;; Defined at:
  5855 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  divisor         2    0[COMMON] unsigned int 
  5858 ;;  dividend        2    2[COMMON] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  quotient        2    5[COMMON] unsigned int 
  5861 ;;  counter         1    7[COMMON] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  2    0[COMMON] unsigned int 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:        8 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_printf
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           
  5885                           ;psect for function ___lwdiv
  5886  0F04                     ___lwdiv:	
  5887                           
  5888                           ;incstack = 0
  5889                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5890  0F04  01F5               	clrf	___lwdiv@quotient
  5891  0F05  01F6               	clrf	___lwdiv@quotient+1
  5892  0F06  0870               	movf	___lwdiv@divisor,w
  5893  0F07  0471               	iorwf	___lwdiv@divisor+1,w
  5894  0F08  1903               	btfsc	3,2
  5895  0F09  2F33               	goto	l1724
  5896  0F0A  01F7               	clrf	___lwdiv@counter
  5897  0F0B  0AF7               	incf	___lwdiv@counter,f
  5898  0F0C                     l1712:	
  5899  0F0C  1BF1               	btfsc	___lwdiv@divisor+1,7
  5900  0F0D  2F18               	goto	l1714
  5901  0F0E  3001               	movlw	1
  5902  0F0F                     u1415:	
  5903  0F0F  35F0               	lslf	___lwdiv@divisor,f
  5904  0F10  0DF1               	rlf	___lwdiv@divisor+1,f
  5905  0F11  0B89               	decfsz	9,f
  5906  0F12  2F0F               	goto	u1415
  5907  0F13  3001               	movlw	1
  5908  0F14  00F4               	movwf	??___lwdiv
  5909  0F15  0874               	movf	??___lwdiv,w
  5910  0F16  07F7               	addwf	___lwdiv@counter,f
  5911  0F17  2F0C               	goto	l1712
  5912  0F18                     l1714:	
  5913  0F18  3001               	movlw	1
  5914  0F19                     u1435:	
  5915  0F19  35F5               	lslf	___lwdiv@quotient,f
  5916  0F1A  0DF6               	rlf	___lwdiv@quotient+1,f
  5917  0F1B  0B89               	decfsz	9,f
  5918  0F1C  2F19               	goto	u1435
  5919  0F1D  0871               	movf	___lwdiv@divisor+1,w
  5920  0F1E  0273               	subwf	___lwdiv@dividend+1,w
  5921  0F1F  1D03               	skipz
  5922  0F20  2F23               	goto	u1445
  5923  0F21  0870               	movf	___lwdiv@divisor,w
  5924  0F22  0272               	subwf	___lwdiv@dividend,w
  5925  0F23                     u1445:	
  5926  0F23  1C03               	skipc
  5927  0F24  2F2A               	goto	l1720
  5928  0F25  0870               	movf	___lwdiv@divisor,w
  5929  0F26  02F2               	subwf	___lwdiv@dividend,f
  5930  0F27  0871               	movf	___lwdiv@divisor+1,w
  5931  0F28  3BF3               	subwfb	___lwdiv@dividend+1,f
  5932  0F29  1475               	bsf	___lwdiv@quotient,0
  5933  0F2A                     l1720:	
  5934  0F2A  3001               	movlw	1
  5935  0F2B                     u1455:	
  5936  0F2B  36F1               	lsrf	___lwdiv@divisor+1,f
  5937  0F2C  0CF0               	rrf	___lwdiv@divisor,f
  5938  0F2D  0B89               	decfsz	9,f
  5939  0F2E  2F2B               	goto	u1455
  5940  0F2F  3001               	movlw	1
  5941  0F30  02F7               	subwf	___lwdiv@counter,f
  5942  0F31  1D03               	btfss	3,2
  5943  0F32  2F18               	goto	l1714
  5944  0F33                     l1724:	
  5945  0F33  0876               	movf	___lwdiv@quotient+1,w
  5946  0F34  00F1               	movwf	?___lwdiv+1
  5947  0F35  0875               	movf	___lwdiv@quotient,w
  5948  0F36  00F0               	movwf	?___lwdiv
  5949  0F37  0008               	return
  5950  0F38                     __end_of___lwdiv:	
  5951                           
  5952                           	psect	text12
  5953  0E69                     __ptext12:	
  5954 ;; *************** function _SPI_exchange *****************
  5955 ;; Defined at:
  5956 ;;		line 45 in file "main.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  buf             1    wreg     PTR unsigned char 
  5959 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  5960 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  5961 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  5962 ;;  len             1    8[COMMON] unsigned char 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  buf             1   13[COMMON] PTR unsigned char 
  5965 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  5966 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  5967 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  5968 ;;  bytes_writte    1   12[COMMON] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      unsigned char 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        6 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    2
  5985 ;; This function calls:
  5986 ;;		_SPI_Exchange8bitBuffer
  5987 ;; This function is called by:
  5988 ;;		_can_ope_mode
  5989 ;;		_can_txf_clear
  5990 ;;		_can_receive
  5991 ;;		_can_send
  5992 ;;		_can_status_check
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _SPI_exchange
  5999  0E69                     _SPI_exchange:	
  6000                           
  6001                           ;incstack = 0
  6002                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6003                           ;SPI_exchange@buf stored from wreg
  6004  0E69  00FD               	movwf	SPI_exchange@buf
  6005                           
  6006                           ;main.c: 46: LATAbits.LATA4 = 0;
  6007  0E6A  0022               	movlb	2	; select bank2
  6008  0E6B  120C               	bcf	12,4	;volatile
  6009                           
  6010                           ;main.c: 47: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  6011  0E6C  0878               	movf	SPI_exchange@len,w
  6012  0E6D  00F9               	movwf	??_SPI_exchange
  6013  0E6E  0879               	movf	??_SPI_exchange,w
  6014  0E6F  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  6015  0E70  087D               	movf	SPI_exchange@buf,w
  6016  0E71  00FA               	movwf	??_SPI_exchange+1
  6017  0E72  087A               	movf	??_SPI_exchange+1,w
  6018  0E73  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  6019  0E74  087D               	movf	SPI_exchange@buf,w
  6020  0E75  3180  2011         	fcall	_SPI_Exchange8bitBuffer
  6021  0E77  00FB               	movwf	??_SPI_exchange+2
  6022  0E78  087B               	movf	??_SPI_exchange+2,w
  6023  0E79  00FC               	movwf	SPI_exchange@bytes_written
  6024                           
  6025                           ;main.c: 48: LATAbits.LATA4 = 1;
  6026  0E7A  0022               	movlb	2	; select bank2
  6027  0E7B  160C               	bsf	12,4	;volatile
  6028                           
  6029                           ;main.c: 49: return bytes_written;
  6030  0E7C  087C               	movf	SPI_exchange@bytes_written,w
  6031  0E7D  0008               	return
  6032  0E7E                     __end_of_SPI_exchange:	
  6033                           
  6034                           	psect	text13
  6035  0011                     __ptext13:	
  6036 ;; *************** function _SPI_Exchange8bitBuffer *****************
  6037 ;; Defined at:
  6038 ;;		line 91 in file "mcc_generated_files/spi.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  dataIn          1    wreg     PTR unsigned char 
  6041 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6042 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6043 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6044 ;;  bufLen          1    1[COMMON] unsigned char 
  6045 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  6046 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6047 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6048 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  6051 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6052 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6053 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6054 ;;  bytesWritten    1    7[COMMON] unsigned char 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      unsigned char 
  6057 ;; Registers used:
  6058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6064 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;Total ram usage:        7 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    1
  6071 ;; This function calls:
  6072 ;;		_SPI_Exchange8bit
  6073 ;; This function is called by:
  6074 ;;		_SPI_exchange
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _SPI_Exchange8bitBuffer
  6080  0011                     _SPI_Exchange8bitBuffer:	
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6084                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  6085  0011  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  6086                           
  6087                           ;spi.c: 93: uint8_t bytesWritten = 0;
  6088  0012  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  6089                           
  6090                           ;spi.c: 95: if(bufLen != 0)
  6091  0013  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6092  0014  1903               	btfsc	3,2
  6093  0015  285D               	goto	l1672
  6094                           
  6095                           ;spi.c: 96: {
  6096                           ;spi.c: 97: if(dataIn != (0))
  6097  0016  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  6098  0017  1D03               	btfss	3,2
  6099  0018  283F               	goto	l1660
  6100  0019  2844               	goto	l1662
  6101  001A                     l1652:	
  6102                           ;spi.c: 98: {
  6103                           ;spi.c: 99: while(bytesWritten < bufLen)
  6104                           
  6105                           
  6106                           ;spi.c: 100: {
  6107                           ;spi.c: 101: if(dataOut == (0))
  6108  001A  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6109  001B  1D03               	btfss	3,2
  6110  001C  2828               	goto	l1656
  6111                           
  6112                           ;spi.c: 102: {
  6113                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  6114  001D  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6115  001E  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6116  001F  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6117  0020  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6118  0021  0086               	movwf	6
  6119  0022  0187               	clrf	7
  6120  0023  0801               	movf	1,w
  6121  0024  318E  2639  3180   	fcall	_SPI_Exchange8bit
  6122                           
  6123                           ;spi.c: 104: }
  6124  0027  283B               	goto	l1658
  6125  0028                     l1656:	
  6126                           
  6127                           ;spi.c: 105: else
  6128                           ;spi.c: 106: {
  6129                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  6130  0028  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6131  0029  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6132  002A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6133  002B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6134  002C  0086               	movwf	6
  6135  002D  0187               	clrf	7
  6136  002E  0801               	movf	1,w
  6137  002F  318E  2639  3180   	fcall	_SPI_Exchange8bit
  6138  0032  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6139  0033  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6140  0034  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6141  0035  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  6142  0036  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  6143  0037  0086               	movwf	6
  6144  0038  0187               	clrf	7
  6145  0039  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6146  003A  0081               	movwf	1
  6147  003B                     l1658:	
  6148                           
  6149                           ;spi.c: 108: }
  6150                           ;spi.c: 110: bytesWritten++;
  6151  003B  3001               	movlw	1
  6152  003C  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6153  003D  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6154  003E  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6155  003F                     l1660:	
  6156  003F  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6157  0040  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6158  0041  1803               	btfsc	3,0
  6159  0042  285D               	goto	l1672
  6160  0043  281A               	goto	l1652
  6161  0044                     l1662:	
  6162                           ;spi.c: 111: }
  6163                           ;spi.c: 112: }
  6164                           
  6165                           
  6166                           ;spi.c: 113: else
  6167                           ;spi.c: 114: {
  6168                           ;spi.c: 115: if(dataOut != (0))
  6169  0044  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6170  0045  1D03               	btfss	3,2
  6171  0046  2859               	goto	l1670
  6172  0047  285D               	goto	l1672
  6173  0048                     l1666:	
  6174                           ;spi.c: 116: {
  6175                           ;spi.c: 117: while(bytesWritten < bufLen )
  6176                           
  6177                           
  6178                           ;spi.c: 118: {
  6179                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  6180  0048  3000               	movlw	0
  6181  0049  318E  2639  3180   	fcall	_SPI_Exchange8bit
  6182  004C  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6183  004D  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6184  004E  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6185  004F  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6186  0050  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6187  0051  0086               	movwf	6
  6188  0052  0187               	clrf	7
  6189  0053  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6190  0054  0081               	movwf	1
  6191                           
  6192                           ;spi.c: 121: bytesWritten++;
  6193  0055  3001               	movlw	1
  6194  0056  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6195  0057  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6196  0058  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6197  0059                     l1670:	
  6198  0059  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6199  005A  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6200  005B  1C03               	skipc
  6201  005C  2848               	goto	l1666
  6202  005D                     l1672:	
  6203                           
  6204                           ;spi.c: 122: }
  6205                           ;spi.c: 123: }
  6206                           ;spi.c: 124: }
  6207                           ;spi.c: 125: }
  6208                           ;spi.c: 127: return bytesWritten;
  6209  005D  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6210  005E  0008               	return
  6211  005F                     __end_of_SPI_Exchange8bitBuffer:	
  6212                           
  6213                           	psect	text14
  6214  0E39                     __ptext14:	
  6215 ;; *************** function _SPI_Exchange8bit *****************
  6216 ;; Defined at:
  6217 ;;		line 77 in file "mcc_generated_files/spi.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  data            1    wreg     unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  data            1    0[COMMON] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      unsigned char 
  6224 ;; Registers used:
  6225 ;;		wreg
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;Total ram usage:        1 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_SPI_Exchange8bitBuffer
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _SPI_Exchange8bit
  6246  0E39                     _SPI_Exchange8bit:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _SPI_Exchange8bit: [wreg]
  6250                           ;SPI_Exchange8bit@data stored from wreg
  6251  0E39  00F0               	movwf	SPI_Exchange8bit@data
  6252                           
  6253                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  6254  0E3A  0024               	movlb	4	; select bank4
  6255  0E3B  1395               	bcf	21,7	;volatile
  6256                           
  6257                           ;spi.c: 82: SSP1BUF = data;
  6258  0E3C  0870               	movf	SPI_Exchange8bit@data,w
  6259  0E3D  0091               	movwf	17	;volatile
  6260  0E3E                     l113:	
  6261                           ;spi.c: 85: {
  6262                           
  6263                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  6264                           
  6265  0E3E  1C14               	btfss	20,0	;volatile
  6266  0E3F  2E3E               	goto	l113
  6267                           
  6268                           ;spi.c: 86: }
  6269                           ;spi.c: 88: return (SSP1BUF);
  6270  0E40  0811               	movf	17,w	;volatile
  6271  0E41  0008               	return
  6272  0E42                     __end_of_SPI_Exchange8bit:	
  6273                           
  6274                           	psect	text15
  6275  005F                     __ptext15:	
  6276 ;; *************** function _atoi *****************
  6277 ;; Defined at:
  6278 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;  s               1    wreg     PTR const unsigned char 
  6281 ;;		 -> buf(9), 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  s               1   13[COMMON] PTR const unsigned char 
  6284 ;;		 -> buf(9), 
  6285 ;;  a               2   11[COMMON] int 
  6286 ;;  sign            1   10[COMMON] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  2    6[COMMON] int 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;Total ram usage:        8 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    1
  6303 ;; This function calls:
  6304 ;;		___wmul
  6305 ;;		_isdigit
  6306 ;; This function is called by:
  6307 ;;		_main
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           
  6312                           ;psect for function _atoi
  6313  005F                     _atoi:	
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6317                           ;atoi@s stored from wreg
  6318  005F  00FD               	movwf	atoi@s
  6319  0060                     l2166:	
  6320  0060  087D               	movf	atoi@s,w
  6321  0061  0086               	movwf	6
  6322  0062  0187               	clrf	7
  6323  0063  3020               	movlw	32
  6324  0064  0601               	xorwf	1,w
  6325  0065  1D03               	btfss	3,2
  6326  0066  286C               	goto	l2168
  6327  0067                     l2164:	
  6328  0067  3001               	movlw	1
  6329  0068  00F8               	movwf	??_atoi
  6330  0069  0878               	movf	??_atoi,w
  6331  006A  07FD               	addwf	atoi@s,f
  6332  006B  2860               	goto	l2166
  6333  006C                     l2168:	
  6334  006C  087D               	movf	atoi@s,w
  6335  006D  0086               	movwf	6
  6336  006E  0187               	clrf	7
  6337  006F  3009               	movlw	9
  6338  0070  0601               	xorwf	1,w
  6339  0071  1903               	btfsc	3,2
  6340  0072  2867               	goto	l2164
  6341  0073  01FB               	clrf	atoi@a
  6342  0074  01FC               	clrf	atoi@a+1
  6343  0075  01FA               	clrf	atoi@sign
  6344  0076  087D               	movf	atoi@s,w
  6345  0077  0086               	movwf	6
  6346  0078  0187               	clrf	7
  6347  0079  302D               	movlw	45
  6348  007A  0601               	xorwf	1,w
  6349  007B  1D03               	btfss	3,2
  6350  007C  2882               	goto	l2176
  6351  007D  3001               	movlw	1
  6352  007E  00F8               	movwf	??_atoi
  6353  007F  0878               	movf	??_atoi,w
  6354  0080  07FA               	addwf	atoi@sign,f
  6355  0081  2889               	goto	l2182
  6356  0082                     l2176:	
  6357  0082  087D               	movf	atoi@s,w
  6358  0083  0086               	movwf	6
  6359  0084  0187               	clrf	7
  6360  0085  302B               	movlw	43
  6361  0086  0601               	xorwf	1,w
  6362  0087  1D03               	btfss	3,2
  6363  0088  288D               	goto	l2184
  6364  0089                     l2182:	
  6365  0089  3001               	movlw	1
  6366  008A  00F8               	movwf	??_atoi
  6367  008B  0878               	movf	??_atoi,w
  6368  008C  07FD               	addwf	atoi@s,f
  6369  008D                     l2184:	
  6370  008D  087D               	movf	atoi@s,w
  6371  008E  0086               	movwf	6
  6372  008F  0187               	clrf	7
  6373  0090  0801               	movf	1,w
  6374  0091  318E  264C  3180   	fcall	_isdigit
  6375  0094  1C03               	btfss	3,0
  6376  0095  28B2               	goto	l2186
  6377  0096  087C               	movf	atoi@a+1,w
  6378  0097  00F1               	movwf	___wmul@multiplier+1
  6379  0098  087B               	movf	atoi@a,w
  6380  0099  00F0               	movwf	___wmul@multiplier
  6381  009A  300A               	movlw	10
  6382  009B  00F2               	movwf	___wmul@multiplicand
  6383  009C  3000               	movlw	0
  6384  009D  00F3               	movwf	___wmul@multiplicand+1
  6385  009E  318E  2695  3180   	fcall	___wmul
  6386  00A1  087D               	movf	atoi@s,w
  6387  00A2  0086               	movwf	6
  6388  00A3  0187               	clrf	7
  6389  00A4  0801               	movf	1,w
  6390  00A5  0770               	addwf	?___wmul,w
  6391  00A6  00F8               	movwf	??_atoi
  6392  00A7  0871               	movf	?___wmul+1,w
  6393  00A8  1803               	skipnc
  6394  00A9  0A71               	incf	?___wmul+1,w
  6395  00AA  00F9               	movwf	??_atoi+1
  6396  00AB  0878               	movf	??_atoi,w
  6397  00AC  3ED0               	addlw	208
  6398  00AD  00FB               	movwf	atoi@a
  6399  00AE  30FF               	movlw	255
  6400  00AF  3D79               	addwfc	??_atoi+1,w
  6401  00B0  00FC               	movwf	atoi@a+1
  6402  00B1  2889               	goto	l2182
  6403  00B2                     l2186:	
  6404  00B2  087A               	movf	atoi@sign,w
  6405  00B3  1903               	btfsc	3,2
  6406  00B4  28C1               	goto	l2192
  6407  00B5  097B               	comf	atoi@a,w
  6408  00B6  00F8               	movwf	??_atoi
  6409  00B7  097C               	comf	atoi@a+1,w
  6410  00B8  00F9               	movwf	??_atoi+1
  6411  00B9  0AF8               	incf	??_atoi,f
  6412  00BA  1903               	skipnz
  6413  00BB  0AF9               	incf	??_atoi+1,f
  6414  00BC  0878               	movf	??_atoi,w
  6415  00BD  00F6               	movwf	?_atoi
  6416  00BE  0879               	movf	??_atoi+1,w
  6417  00BF  00F7               	movwf	?_atoi+1
  6418  00C0  0008               	return
  6419  00C1                     l2192:	
  6420  00C1  087C               	movf	atoi@a+1,w
  6421  00C2  00F7               	movwf	?_atoi+1
  6422  00C3  087B               	movf	atoi@a,w
  6423  00C4  00F6               	movwf	?_atoi
  6424  00C5  0008               	return
  6425  00C6                     __end_of_atoi:	
  6426                           
  6427                           	psect	text16
  6428  0E4C                     __ptext16:	
  6429 ;; *************** function _isdigit *****************
  6430 ;; Defined at:
  6431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  c               1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  c               1    1[COMMON] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;		None               void
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;Total ram usage:        2 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_printf
  6455 ;;		_atoi
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function _isdigit
  6461  0E4C                     _isdigit:	
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6465                           ;isdigit@c stored from wreg
  6466  0E4C  00F1               	movwf	isdigit@c
  6467  0E4D  01F0               	clrf	_isdigit$683
  6468  0E4E  303A               	movlw	58
  6469  0E4F  0271               	subwf	isdigit@c,w
  6470  0E50  1803               	skipnc
  6471  0E51  2E58               	goto	l1684
  6472  0E52  3030               	movlw	48
  6473  0E53  0271               	subwf	isdigit@c,w
  6474  0E54  1C03               	skipc
  6475  0E55  2E58               	goto	l1684
  6476  0E56  01F0               	clrf	_isdigit$683
  6477  0E57  0AF0               	incf	_isdigit$683,f
  6478  0E58                     l1684:	
  6479  0E58  0C70               	rrf	_isdigit$683,w
  6480  0E59  0008               	return
  6481  0E5A                     __end_of_isdigit:	
  6482                           
  6483                           	psect	text17
  6484  0E95                     __ptext17:	
  6485 ;; *************** function ___wmul *****************
  6486 ;; Defined at:
  6487 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  multiplier      2    0[COMMON] unsigned int 
  6490 ;;  multiplicand    2    2[COMMON] unsigned int 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  product         2    4[COMMON] unsigned int 
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  2    0[COMMON] unsigned int 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;Total ram usage:        6 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_printf
  6512 ;;		_atoi
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           
  6517                           ;psect for function ___wmul
  6518  0E95                     ___wmul:	
  6519                           
  6520                           ;incstack = 0
  6521                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6522  0E95  01F4               	clrf	___wmul@product
  6523  0E96  01F5               	clrf	___wmul@product+1
  6524  0E97                     l1690:	
  6525  0E97  1C70               	btfss	___wmul@multiplier,0
  6526  0E98  2E9D               	goto	l472
  6527  0E99  0872               	movf	___wmul@multiplicand,w
  6528  0E9A  07F4               	addwf	___wmul@product,f
  6529  0E9B  0873               	movf	___wmul@multiplicand+1,w
  6530  0E9C  3DF5               	addwfc	___wmul@product+1,f
  6531  0E9D                     l472:	
  6532  0E9D  3001               	movlw	1
  6533  0E9E                     u1375:	
  6534  0E9E  35F2               	lslf	___wmul@multiplicand,f
  6535  0E9F  0DF3               	rlf	___wmul@multiplicand+1,f
  6536  0EA0  0B89               	decfsz	9,f
  6537  0EA1  2E9E               	goto	u1375
  6538  0EA2  3001               	movlw	1
  6539  0EA3                     u1385:	
  6540  0EA3  36F1               	lsrf	___wmul@multiplier+1,f
  6541  0EA4  0CF0               	rrf	___wmul@multiplier,f
  6542  0EA5  0B89               	decfsz	9,f
  6543  0EA6  2EA3               	goto	u1385
  6544  0EA7  0870               	movf	___wmul@multiplier,w
  6545  0EA8  0471               	iorwf	___wmul@multiplier+1,w
  6546  0EA9  1D03               	btfss	3,2
  6547  0EAA  2E97               	goto	l1690
  6548  0EAB  0875               	movf	___wmul@product+1,w
  6549  0EAC  00F1               	movwf	?___wmul+1
  6550  0EAD  0874               	movf	___wmul@product,w
  6551  0EAE  00F0               	movwf	?___wmul
  6552  0EAF  0008               	return
  6553  0EB0                     __end_of___wmul:	
  6554                           
  6555                           	psect	text18
  6556  0E5A                     __ptext18:	
  6557 ;; *************** function _SYSTEM_Initialize *****************
  6558 ;; Defined at:
  6559 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0, pclath, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    1
  6580 ;; This function calls:
  6581 ;;		_EUSART_Initialize
  6582 ;;		_OSCILLATOR_Initialize
  6583 ;;		_PIN_MANAGER_Initialize
  6584 ;;		_SPI_Initialize
  6585 ;;		_WDT_Initialize
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _SYSTEM_Initialize
  6593  0E5A                     _SYSTEM_Initialize:	
  6594                           
  6595                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6599  0E5A  318E  267E  318E   	fcall	_PIN_MANAGER_Initialize
  6600                           
  6601                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6602  0E5D  318E  2623  318E   	fcall	_OSCILLATOR_Initialize
  6603                           
  6604                           ;mcc.c: 75: WDT_Initialize();
  6605  0E60  318E  260B  318E   	fcall	_WDT_Initialize
  6606                           
  6607                           ;mcc.c: 76: SPI_Initialize();
  6608  0E63  318E  262A  318E   	fcall	_SPI_Initialize
  6609                           
  6610                           ;mcc.c: 77: EUSART_Initialize();
  6611  0E66  3180  2006         	fcall	_EUSART_Initialize
  6612  0E68  0008               	return
  6613  0E69                     __end_of_SYSTEM_Initialize:	
  6614                           
  6615                           	psect	text19
  6616  0E0B                     __ptext19:	
  6617 ;; *************** function _WDT_Initialize *****************
  6618 ;; Defined at:
  6619 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;		None
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;		None
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  1    wreg      void 
  6626 ;; Registers used:
  6627 ;;		wreg
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;Total ram usage:        0 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_SYSTEM_Initialize
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _WDT_Initialize
  6648  0E0B                     _WDT_Initialize:	
  6649                           
  6650                           ;mcc.c: 93: WDTCON = 0x16;
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _WDT_Initialize: [wreg]
  6654  0E0B  3016               	movlw	22
  6655  0E0C  0021               	movlb	1	; select bank1
  6656  0E0D  0097               	movwf	23	;volatile
  6657  0E0E  0008               	return
  6658  0E0F                     __end_of_WDT_Initialize:	
  6659                           
  6660                           	psect	text20
  6661  0E2A                     __ptext20:	
  6662 ;; *************** function _SPI_Initialize *****************
  6663 ;; Defined at:
  6664 ;;		line 63 in file "mcc_generated_files/spi.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;		None
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, status,2
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;Total ram usage:        0 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_SYSTEM_Initialize
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _SPI_Initialize
  6693  0E2A                     _SPI_Initialize:	
  6694                           
  6695                           ;spi.c: 68: SSP1STAT = 0x40;
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  6699  0E2A  3040               	movlw	64
  6700  0E2B  0024               	movlb	4	; select bank4
  6701  0E2C  0094               	movwf	20	;volatile
  6702                           
  6703                           ;spi.c: 71: SSP1CON1 = 0x20;
  6704  0E2D  3020               	movlw	32
  6705  0E2E  0095               	movwf	21	;volatile
  6706                           
  6707                           ;spi.c: 74: SSP1ADD = 0x00;
  6708  0E2F  0192               	clrf	18	;volatile
  6709  0E30  0008               	return
  6710  0E31                     __end_of_SPI_Initialize:	
  6711                           
  6712                           	psect	text21
  6713  0E7E                     __ptext21:	
  6714 ;; *************** function _PIN_MANAGER_Initialize *****************
  6715 ;; Defined at:
  6716 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_SYSTEM_Initialize
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _PIN_MANAGER_Initialize
  6745  0E7E                     _PIN_MANAGER_Initialize:	
  6746                           
  6747                           ;pin_manager.c: 57: LATA = 0x10;
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6751  0E7E  3010               	movlw	16
  6752  0E7F  0022               	movlb	2	; select bank2
  6753  0E80  008C               	movwf	12	;volatile
  6754                           
  6755                           ;pin_manager.c: 58: LATC = 0x00;
  6756  0E81  018E               	clrf	14	;volatile
  6757                           
  6758                           ;pin_manager.c: 63: TRISA = 0x2F;
  6759  0E82  302F               	movlw	47
  6760  0E83  0021               	movlb	1	; select bank1
  6761  0E84  008C               	movwf	12	;volatile
  6762                           
  6763                           ;pin_manager.c: 64: TRISC = 0x32;
  6764  0E85  3032               	movlw	50
  6765  0E86  008E               	movwf	14	;volatile
  6766                           
  6767                           ;pin_manager.c: 69: ANSELC = 0x00;
  6768  0E87  0023               	movlb	3	; select bank3
  6769  0E88  018E               	clrf	14	;volatile
  6770                           
  6771                           ;pin_manager.c: 70: ANSELA = 0x07;
  6772  0E89  3007               	movlw	7
  6773  0E8A  008C               	movwf	12	;volatile
  6774                           
  6775                           ;pin_manager.c: 75: WPUA = 0x00;
  6776  0E8B  0024               	movlb	4	; select bank4
  6777  0E8C  018C               	clrf	12	;volatile
  6778                           
  6779                           ;pin_manager.c: 76: WPUC = 0x30;
  6780  0E8D  3030               	movlw	48
  6781  0E8E  008E               	movwf	14	;volatile
  6782                           
  6783                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6784  0E8F  0021               	movlb	1	; select bank1
  6785  0E90  1395               	bcf	21,7	;volatile
  6786                           
  6787                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6788  0E91  0022               	movlb	2	; select bank2
  6789  0E92  019E               	clrf	30	;volatile
  6790                           
  6791                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6792  0E93  019D               	clrf	29	;volatile
  6793  0E94  0008               	return
  6794  0E95                     __end_of_PIN_MANAGER_Initialize:	
  6795                           
  6796                           	psect	text22
  6797  0E23                     __ptext22:	
  6798 ;; *************** function _OSCILLATOR_Initialize *****************
  6799 ;; Defined at:
  6800 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;		None
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;Total ram usage:        0 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_SYSTEM_Initialize
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _OSCILLATOR_Initialize
  6829  0E23                     _OSCILLATOR_Initialize:	
  6830                           
  6831                           ;mcc.c: 83: OSCCON = 0x60;
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6835  0E23  3060               	movlw	96
  6836  0E24  0021               	movlb	1	; select bank1
  6837  0E25  0099               	movwf	25	;volatile
  6838                           
  6839                           ;mcc.c: 85: OSCTUNE = 0x00;
  6840  0E26  0198               	clrf	24	;volatile
  6841                           
  6842                           ;mcc.c: 87: BORCON = 0x00;
  6843  0E27  0022               	movlb	2	; select bank2
  6844  0E28  0196               	clrf	22	;volatile
  6845  0E29  0008               	return
  6846  0E2A                     __end_of_OSCILLATOR_Initialize:	
  6847                           
  6848                           	psect	text23
  6849  0006                     __ptext23:	
  6850 ;; *************** function _EUSART_Initialize *****************
  6851 ;; Defined at:
  6852 ;;		line 53 in file "mcc_generated_files/eusart.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      void 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        0 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_SYSTEM_Initialize
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _EUSART_Initialize
  6881  0006                     _EUSART_Initialize:	
  6882                           
  6883                           ;eusart.c: 58: BAUDCON = 0x08;
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6887  0006  3008               	movlw	8
  6888  0007  0023               	movlb	3	; select bank3
  6889  0008  009F               	movwf	31	;volatile
  6890                           
  6891                           ;eusart.c: 61: RCSTA = 0x90;
  6892  0009  3090               	movlw	144
  6893  000A  009D               	movwf	29	;volatile
  6894                           
  6895                           ;eusart.c: 64: TXSTA = 0x24;
  6896  000B  3024               	movlw	36
  6897  000C  009E               	movwf	30	;volatile
  6898                           
  6899                           ;eusart.c: 67: SPBRGL = 0x33;
  6900  000D  3033               	movlw	51
  6901  000E  009B               	movwf	27	;volatile
  6902                           
  6903                           ;eusart.c: 70: SPBRGH = 0x00;
  6904  000F  019C               	clrf	28	;volatile
  6905  0010  0008               	return
  6906  0011                     __end_of_EUSART_Initialize:	
  6907                           
  6908                           	psect	text24
  6909  0E42                     __ptext24:	
  6910 ;; *************** function _EUSART_Read *****************
  6911 ;; Defined at:
  6912 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      unsigned char 
  6919 ;; Registers used:
  6920 ;;		wreg
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        0 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; This function calls:
  6933 ;;		Nothing
  6934 ;; This function is called by:
  6935 ;;		_main
  6936 ;;		_getch
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function _EUSART_Read
  6942  0E42                     _EUSART_Read:	
  6943  0E42                     l51:	
  6944                           ;eusart.c: 78: {
  6945                           
  6946                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _EUSART_Read: [wreg]
  6950                           
  6951  0E42  0020               	movlb	0	; select bank0
  6952  0E43  1E91               	btfss	17,5	;volatile
  6953  0E44  2E42               	goto	l51
  6954                           
  6955                           ;eusart.c: 79: }
  6956                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  6957  0E45  0023               	movlb	3	; select bank3
  6958  0E46  1C9D               	btfss	29,1	;volatile
  6959  0E47  2E4A               	goto	l2006
  6960                           
  6961                           ;eusart.c: 83: {
  6962                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  6963  0E48  121D               	bcf	29,4	;volatile
  6964                           
  6965                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  6966  0E49  161D               	bsf	29,4	;volatile
  6967  0E4A                     l2006:	
  6968                           
  6969                           ;eusart.c: 88: }
  6970                           ;eusart.c: 90: return RCREG;
  6971  0E4A  0819               	movf	25,w	;volatile
  6972  0E4B  0008               	return
  6973  0E4C                     __end_of_EUSART_Read:	
  6974  007E                     btemp	set	126	;btemp
  6975  007E                     wtemp0	set	126


Data Sizes:
    Strings     811
    Constant    35
    Data        9
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      73
    BANK1            80     22      38
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_39(CODE[7]), printf@c(BANK0[1]), buf(BANK1[9]), can_receive@rx_buf(BANK0[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_38(CODE[25]), STR_37(CODE[19]), STR_36(CODE[24]), STR_35(CODE[18]), 
		 -> STR_34(CODE[22]), STR_33(CODE[44]), STR_32(CODE[26]), STR_31(CODE[42]), 
		 -> STR_30(CODE[38]), STR_29(CODE[54]), STR_28(CODE[59]), STR_27(CODE[51]), 
		 -> STR_26(CODE[23]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[21]), STR_19(CODE[3]), 
		 -> STR_18(CODE[13]), STR_17(CODE[13]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[20]), STR_13(CODE[14]), STR_12(CODE[14]), STR_11(CODE[14]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[22]), STR_7(CODE[25]), 
		 -> STR_6(CODE[15]), STR_5(CODE[16]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    can_receive@rx_buf_ptr	PTR unsigned char  size(1) Largest target is 15
		 -> can_receive@rx_buf(BANK0[15]), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_SPI_exchange
    _main->_atoi
    _can_status_check->_SPI_exchange
    _can_txf_clear->_SPI_exchange
    _can_receive->_SPI_exchange
    _can_send->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_receive->_printf
    _can_send->_printf
    _can_ope_mode->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   44560
                                             57 BANK0      6     6      0
                                              0 BANK1     22    22      0
                        _EUSART_Read
                       _SPI_exchange
                  _SYSTEM_Initialize
                               _atoi
                       _can_ope_mode
                           _can_send
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    5134
                                             25 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     6     6      0   16232
                                             51 BANK0      6     6      0
                       _SPI_exchange
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                        9     9      0    2037
                                              0 BANK0      9     9      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         26    26      0    7269
                                             25 BANK0     26    26      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            31    30      1    7872
                                             25 BANK0     31    30      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_ope_mode                                         7     7      0    6933
                                             25 BANK0      7     7      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              29    21      8    4872
                                              0 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    1868
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     704
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SPI_exchange
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     16      26       7       47.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 14 21:53:19 2018

                    _SPI_Initialize 0E2A               __end_of_can_txf_clear 0ED8  
                                 _c 00B7                         __CFG_CP$OFF 0000  
                                l51 0E42                                  l58 0E32  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 134A  
               ___wmul@multiplicand 0072               __size_of_SPI_exchange 0015  
                       __CFG_LVP$ON 0000                                 l113 0E3E  
                               l211 01C6                                 l214 01D6  
                               l241 0FF4                                 l243 0FFA  
                               l235 0FDE                                 l324 02F9  
                               l236 0FDA                                 l238 0FEE  
                               l239 0FEA                                 l336 03D3  
                               l337 0343                                 l363 041B  
                               l283 06C8                                 l358 03F9  
                               l367 0452                                 l472 0E9D  
                               l388 050D            __end_of_can_status_check 1000  
                      __CFG_CPD$OFF 0000                                 _abc 1344  
                               _buf 00B8                                 _idx 00B6  
                               _sid 0063                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
                 can_receive@rx_buf 003F                         main@cnf_buf 00A0  
                      ?_EUSART_Read 0070                                l2006 0E4A  
                              l2104 0273                                l2130 02D1  
                              l2050 01C3                                l2116 02A6  
                              l2300 05FF                                l2126 02CF  
                              l2062 01E2                                l2222 0718  
                              l2056 01D2                                l2064 01E7  
                              l2232 073A                                l2306 060E  
                              l2250 055B                                l2242 053C  
                              l2164 0067                                l2084 022B  
                              l2340 06CE                                l2324 064D  
                              l2260 056E                                l2182 0089  
                              l2166 0060                                l2086 0202  
                              l2254 0562                                l2246 0552  
                              l2192 00C1                                l2184 008D  
                              l2176 0082                                l2168 006C  
                              l1720 0F2A                                l1712 0F0C  
                              l1800 0386                                l2088 0231  
                              l2272 0585                                l2256 0565  
                              l2360 0795                                l2186 00B2  
                              l1714 0F18                                l1810 03A9  
                              l2354 0789                                l2338 0694  
                              l2282 0599                                l2266 057A  
                              l2346 0770                                l1652 001A  
                              l1660 003F                                l1724 0F33  
                              l1900 04F7                                l1804 0393  
                              l2372 07CC                                l1670 0059  
                              l1662 0044                                l1742 0EF6  
                              l1902 04FB                                l1806 039E  
                              l2278 0590                                l2358 0794  
                              l1656 0028                                l1672 005D  
                              l1736 0EDE                                l1816 03B2  
                              l1904 02D8                                l1690 0E97  
                              l1666 0048                                l1658 003B  
                              l1738 0EEA                                l1746 0EFF  
                              l1762 02FE                                l2298 05DC  
                              l1684 0E58                                l1828 03ED  
                              l1764 0307                                l1756 02F4  
                              l1854 043D                                l1790 0368  
                              l1880 048E                                l1872 047B  
                              l1864 046E                                l1856 0446  
                              l1784 0358                                l1776 0345  
                              l1768 0314                                l1890 04A9  
                              l1866 0471                                l1794 0375  
                              l1892 04D0                                l1884 049B  
                              l1788 035A                                l1878 048A  
                              l1798 0377                                l1990 0172  
                              l1982 0163                                l1888 04A3  
                              l1992 0177                                l1996 0188  
                              STR_1 11F0                                STR_2 12CF  
                              STR_3 1228                                STR_4 126C  
                              STR_5 12B0                                STR_6 12C0  
                              STR_7 1154                                STR_8 11B1  
                              STR_9 1166                                _LATA 010C  
                              u1415 0F0F                                _LATC 010E  
                              u2080 02CD                                u2064 02B0  
                              u2240 0527                                u1505 0EF0  
                              u2065 02AF                                u1435 0F19  
                              u1515 0EF7                                u1445 0F23  
                              u1375 0E9E                                u1455 0F2B  
                              u1385 0EA3                                u1715 0461  
                              u1485 0EE1                                u1645 0414  
                              u1814 0EB9                                u1815 0EB8  
                              u2375 05C5                                u1585 036E  
                              u1825 00E8                                u1675 0436  
                              u1915 0F4A                                u1870 019D  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 005F                                _main 050E  
                              _mode 005F                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0002  
            __end_of_SPI_Initialize 0E31                        _SPI_exchange 0E69  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 005F  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 00DA       __end_of_OSCILLATOR_Initialize 0E2A  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 11C3                               STR_11 12DE  
                             STR_12 12EC                               STR_20 11C7  
                             STR_13 12FA                               STR_21 1184  
                             STR_22 125B                               STR_14 11DC  
                             STR_30 10FB                               STR_23 129F  
                             STR_15 1239                               STR_31 10D1  
                             STR_16 127D                               STR_24 124A  
                             STR_40 1217                               STR_32 1121  
                             STR_17 1308                               STR_25 128E  
                             STR_33 10A5                       __CFG_WDTE$OFF 0000  
                             STR_18 1315                               STR_34 119B  
                             STR_26 116D                               STR_35 1205  
                             STR_19 1347                               STR_27 1072  
                             STR_36 113C                               STR_28 1001  
                             STR_37 1204                               STR_29 103C  
                             STR_38 113B                               STR_39 1334  
                   __end_of___lwdiv 0F38                     __end_of___lwmod 0F04  
     can_status_check@bytes_written 0055                               _RCREG 0199  
                             _RCSTA 019D                        main@mask_buf 00B0  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 132C                      _WDT_Initialize 0E0B  
                   __end_of_max_idx 1001                     __end_of_isdigit 0E5A  
                             atoi@a 007B                               atoi@s 007D  
                             _putch 0E13                               main@n 00B5  
                     can_send@F2958 0067                     __end_of_set_sid 0F73  
                             status 0003                               wtemp0 007E  
            can_send@can_status_buf 004C                     ?_SPI_Initialize 0070  
                   __initialization 07D4                   can_send@debug_buf 0053  
                      __end_of_atoi 00C6                        __end_of_main 07D4  
                    ??_EUSART_Write 0070              can_status_check@status 0058  
                            ??_atoi 0078                              ??_main 0059  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0E0F  
          __end_of_SPI_Exchange8bit 0E42               __size_of_can_ope_mode 0043  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                     main@mask_sidh 00AE                       main@mask_sidl 00AF  
                  __end_of_can_send 02D3                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0E95                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
         can_txf_clear@can_int_flag 0025                              _printf 02D3  
                      _can_ope_mode 0F73                              main@rc 00AA  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 003B                    __end_of_rxfnsidh 1341  
                  __end_of_txbnsidh 1344                    __end_of_rxmnsidh 134E  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0E5A  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
                    can_receive@dlc 004E                      can_receive@sid 004F  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 0E0F                        __pidataBANK1 0E18  
               ??_SYSTEM_Initialize 0070                      can_send@tx_buf 003E  
                    can_send@status 0052                       __end_of_putch 0E18  
                        __end_of_nm 134C                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 0053  
         __end_of_SYSTEM_Initialize 0E69                             ??_putch 0071  
                        __pbssBANK0 005F                          __pbssBANK1 00B6  
              __end_of_EUSART_Write 0E39                          __pmaintext 050E  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0020                           ?_can_send 0039  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211              __size_of_can_txf_clear 0028  
                  ??_SPI_Initialize 0070                       ??_can_receive 0039  
                   __size_of___wmul 001B                             ___lwdiv 0F04  
                           ___lwmod 0ED8                             __ptext1 0F38  
                           __ptext2 0FB6                             __ptext3 0EB0  
                           __ptext4 00C6                             __ptext5 01A0  
                           __ptext6 0F73                             __ptext7 02D3  
                           __ptext8 0E13                             __ptext9 0E31  
                   __size_of_printf 023B                   __end_of_hexpowers 1334  
                           _dpowers 1322               _OSCILLATOR_Initialize 0E23  
                           _max_idx 1000                          ??_can_send 003A  
                           _isdigit 0E4C            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 0F38      can_status_check@can_status_buf 0056  
                 ?_SPI_Exchange8bit 0070                             main@cmd 00B4  
                    can_txf_clear@n 0022                         set_sid@sidh 003F  
                       set_sid@sidl 0040          __size_of_SYSTEM_Initialize 000F  
                           main@sid 00A9                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
             can_receive@bytes_read 003E                             init_ram 0E1D  
                           initloop 0E1E                   _EUSART_Initialize 0006  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 0038                             printf@f 0020  
                     _can_txf_clear 0EB0                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_receive 01A0  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
         __end_of_EUSART_Initialize 0011                          main@rc_452 00AB  
                 can_txf_clear@mask 0023                         printf@width 0036  
          ??_SPI_Exchange8bitBuffer 0073            can_ope_mode@can_ctrl_buf 003D  
             can_receive@rx_buf_ptr 0051                      ?_can_txf_clear 0070  
                    __end_of___wmul 0EB0               can_status_check@F2968 0065  
                      _EUSART_Write 0E31              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 050E                 start_initialization 07D4  
                      can_receive@n 0052     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 1347                       ??_EUSART_Read 0070  
                       putch@txData 0071           __size_of_can_status_check 004A  
         can_ope_mode@bytes_written 003C                       ?_SPI_exchange 0078  
                          ??___wmul 0074                         _can_receive 00C6  
                       __pdataBANK0 0065                         __pdataBANK1 00C1  
                          ??_printf 0028                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
                 __size_of_can_send 0133       SPI_Exchange8bitBuffer@dataOut 0072  
        __size_of_EUSART_Initialize 000B                 __end_of_EUSART_Read 0E4C  
                    ??_SPI_exchange 0079     __size_of_SPI_Exchange8bitBuffer 004E  
                   ??_can_txf_clear 0020                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0E7E                            ?___lwdiv 0070  
                          ?___lwmod 0078                            ?_isdigit 0070  
                         can_send@i 0056                           can_send@n 0057  
                          ?_set_sid 0039                           _hexpowers 132C  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                    ___wmul@product 0074                            _LATAbits 010C  
                          _LATCbits 010E                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                           main@F2974 00C1  
                          _SSP1CON1 0215                            _SSP1STAT 0214  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
            _SPI_Exchange8bitBuffer 0011                          printf@flag 0035  
                        printf@prec 002D                         _EUSART_Read 0E42  
                       can_send@dlc 0039                         can_send@buf 004E  
                       can_send@len 004F                    _can_status_check 0FB6  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 0039                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$683 0070                can_ope_mode@ope_mode 003B  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 01A0  
              __end_of_SPI_exchange 0E7E                    __size_of_isdigit 000E  
                          _main$433 00A5                            _main$434 00A7  
                   ___lwdiv@divisor 0070                     ___lwdiv@counter 0077  
                          __ptext10 0ED8                            __ptext11 0F04  
                          __ptext20 0E2A                            __ptext12 0E69  
                          __ptext21 0E7E                            __ptext13 0011  
                          __ptext22 0E23                            __ptext14 0E39  
                          __ptext23 0006                            __ptext15 005F  
                          __ptext24 0E42                            __ptext16 0E4C  
                          __ptext17 0E95                            __ptext18 0E5A  
                          __ptext19 0E0B                    __size_of_set_sid 003B  
                      _SSP1CON1bits 0215                       __size_of_atoi 0067  
                     __size_of_main 02C6                can_send@txb_ctrl_buf 0051  
                      ?_can_receive 0070                            atoi@sign 007A  
                         printf@idx 002C                           printf@len 0030  
                         printf@val 0033                        _SSP1STATbits 0214  
                          main@mask 00AC                            _rxfnsidh 133B  
                          _txbnsidh 1341                            _rxmnsidh 134C  
                    __pstringtext10 1072                      __pstringtext11 10A5  
                    __pstringtext20 11B1                      __pstringtext12 10D1  
                    __pstringtext21 11C7                      __pstringtext13 10FB  
                    __pstringtext30 126C                      __pstringtext22 11DC  
                    __pstringtext14 1121                      __pstringtext31 127D  
                    __pstringtext23 11F0                      __pstringtext15 113B  
                    __pstringtext40 1308                      __pstringtext32 128E  
                    __pstringtext24 1204                      __pstringtext16 1154  
                    __pstringtext41 1315                      __pstringtext33 129F  
                    __pstringtext25 1217                      __pstringtext17 116D  
                    __pstringtext42 1334                      __pstringtext34 12B0  
                    __pstringtext26 1228                      __pstringtext18 1184  
                    __pstringtext43 1347                      __pstringtext35 12C0  
                    __pstringtext27 1239                      __pstringtext19 119B  
                    __pstringtext44 0000                      __pstringtext36 12CF  
                    __pstringtext28 124A                      __pstringtext37 12DE  
                    __pstringtext29 125B                      __pstringtext38 12EC  
                    __pstringtext39 12FA                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                    ___lwmod@dividend 007A  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                    _SPI_Exchange8bit 0E39  
             can_send@bytes_written 0050                            printf@ap 0032  
                          printf@cp 002E          can_txf_clear@bytes_written 0024  
                     __pstringtext1 1322                       __pstringtext2 132C  
                     __pstringtext3 133B                       __pstringtext4 1341  
                     __pstringtext5 1344                       __pstringtext6 134A  
                     __pstringtext7 134C                       __pstringtext8 1000  
                     __pstringtext9 103C                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0E95                __end_of_can_ope_mode 0FB6  
                   set_sid@can_node 0039  
