

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 05:14:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	stringtext13,global,class=STRCODE,delta=2
    17                           	psect	stringtext14,global,class=STRCODE,delta=2
    18                           	psect	stringtext15,global,class=STRCODE,delta=2
    19                           	psect	stringtext16,global,class=STRCODE,delta=2
    20                           	psect	stringtext17,global,class=STRCODE,delta=2
    21                           	psect	stringtext18,global,class=STRCODE,delta=2
    22                           	psect	stringtext19,global,class=STRCODE,delta=2
    23                           	psect	stringtext20,global,class=STRCODE,delta=2
    24                           	psect	stringtext21,global,class=STRCODE,delta=2
    25                           	psect	stringtext22,global,class=STRCODE,delta=2
    26                           	psect	stringtext23,global,class=STRCODE,delta=2
    27                           	psect	stringtext24,global,class=STRCODE,delta=2
    28                           	psect	stringtext25,global,class=STRCODE,delta=2
    29                           	psect	stringtext26,global,class=STRCODE,delta=2
    30                           	psect	stringtext27,global,class=STRCODE,delta=2
    31                           	psect	stringtext28,global,class=STRCODE,delta=2
    32                           	psect	stringtext29,global,class=STRCODE,delta=2
    33                           	psect	stringtext30,global,class=STRCODE,delta=2
    34                           	psect	stringtext31,global,class=STRCODE,delta=2
    35                           	psect	stringtext32,global,class=STRCODE,delta=2
    36                           	psect	stringtext33,global,class=STRCODE,delta=2
    37                           	psect	stringtext34,global,class=STRCODE,delta=2
    38                           	psect	stringtext35,global,class=STRCODE,delta=2
    39                           	psect	stringtext36,global,class=STRCODE,delta=2
    40                           	psect	stringtext37,global,class=STRCODE,delta=2
    41                           	psect	stringtext38,global,class=STRCODE,delta=2
    42                           	psect	stringtext39,global,class=STRCODE,delta=2
    43                           	psect	stringtext40,global,class=STRCODE,delta=2
    44                           	psect	stringtext41,global,class=STRCODE,delta=2
    45                           	psect	stringtext42,global,class=STRCODE,delta=2
    46                           	psect	stringtext43,global,class=STRCODE,delta=2
    47                           	psect	stringtext44,global,class=STRCODE,delta=2
    48                           	psect	stringtext45,global,class=STRCODE,delta=2
    49                           	psect	stringtext46,global,class=STRCODE,delta=2
    50                           	psect	stringtext47,global,class=STRCODE,delta=2
    51                           	psect	stringtext48,global,class=STRCODE,delta=2
    52                           	psect	stringtext49,global,class=STRCODE,delta=2
    53                           	psect	stringtext50,global,class=STRCODE,delta=2
    54                           	psect	stringtext51,global,class=STRCODE,delta=2
    55                           	psect	stringtext52,global,class=STRCODE,delta=2
    56                           	psect	stringtext53,global,class=STRCODE,delta=2
    57                           	psect	stringtext54,global,class=STRCODE,delta=2
    58                           	psect	stringtext55,global,class=STRCODE,delta=2
    59                           	psect	stringtext56,global,class=STRCODE,delta=2
    60                           	psect	stringtext57,global,class=STRCODE,delta=2
    61                           	psect	stringtext58,global,class=STRCODE,delta=2
    62                           	psect	cinit,global,class=CODE,merge=1,delta=2
    63                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    64                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    65                           	psect	clrtext,global,class=CODE,delta=2
    66                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    67                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    68                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    69                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    70                           	psect	text1,local,class=CODE,merge=1,delta=2
    71                           	psect	text2,local,class=CODE,merge=1,delta=2
    72                           	psect	text3,local,class=CODE,merge=1,delta=2
    73                           	psect	text4,local,class=CODE,merge=1,delta=2
    74                           	psect	text5,local,class=CODE,merge=1,delta=2
    75                           	psect	text6,local,class=CODE,merge=1,delta=2
    76                           	psect	text7,local,class=CODE,merge=1,delta=2
    77                           	psect	text8,local,class=CODE,merge=1,delta=2
    78                           	psect	text9,local,class=CODE,merge=1,delta=2
    79                           	psect	text10,local,class=CODE,merge=1,delta=2
    80                           	psect	text11,local,class=CODE,merge=1,delta=2
    81                           	psect	text12,local,class=CODE,merge=1,delta=2
    82                           	psect	text13,local,class=CODE,merge=1,delta=2
    83                           	psect	text14,local,class=CODE,merge=1,delta=2
    84                           	psect	text15,local,class=CODE,merge=1,delta=2
    85                           	psect	text16,local,class=CODE,merge=1,delta=2
    86                           	psect	text17,local,class=CODE,merge=1,delta=2
    87                           	psect	text18,local,class=CODE,merge=1,delta=2
    88                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text21,local,class=CODE,merge=1,delta=2
    91                           	psect	text22,local,class=CODE,merge=1,delta=2
    92                           	psect	text23,local,class=CODE,merge=1,delta=2
    93                           	psect	text24,local,class=CODE,merge=1,delta=2
    94                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text28,local,class=CODE,merge=1,delta=2
    98                           	psect	text29,local,class=CODE,merge=1,delta=2
    99                           	psect	text30,local,class=CODE,merge=1,delta=2
   100                           	psect	text31,local,class=CODE,merge=1,delta=2
   101                           	psect	text32,local,class=CODE,merge=1,delta=2
   102                           	psect	text33,local,class=CODE,merge=1,delta=2
   103                           	psect	text34,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x7E,2
   105  0000                     
   106                           ; Version 1.45
   107                           ; Generated 16/11/2017 GMT
   108                           ; 
   109                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC16F1825 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000E                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  008C                     	;# 
   169  008E                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0095                     	;# 
   174  0096                     	;# 
   175  0097                     	;# 
   176  0098                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  010C                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011A                     	;# 
   196  011B                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  018C                     	;# 
   200  018E                     	;# 
   201  0191                     	;# 
   202  0191                     	;# 
   203  0192                     	;# 
   204  0193                     	;# 
   205  0193                     	;# 
   206  0193                     	;# 
   207  0194                     	;# 
   208  0195                     	;# 
   209  0196                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019F                     	;# 
   218  020C                     	;# 
   219  020E                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0214                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0216                     	;# 
   232  0216                     	;# 
   233  0217                     	;# 
   234  0217                     	;# 
   235  0291                     	;# 
   236  0291                     	;# 
   237  0292                     	;# 
   238  0293                     	;# 
   239  0294                     	;# 
   240  0295                     	;# 
   241  0295                     	;# 
   242  0296                     	;# 
   243  0298                     	;# 
   244  0298                     	;# 
   245  0299                     	;# 
   246  029A                     	;# 
   247  029B                     	;# 
   248  029C                     	;# 
   249  029D                     	;# 
   250  029E                     	;# 
   251  0311                     	;# 
   252  0311                     	;# 
   253  0312                     	;# 
   254  0313                     	;# 
   255  0318                     	;# 
   256  0318                     	;# 
   257  0319                     	;# 
   258  031A                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  039A                     	;# 
   265  039C                     	;# 
   266  039D                     	;# 
   267  039E                     	;# 
   268  039F                     	;# 
   269  0415                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000E                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001E                     	;# 
   313  001F                     	;# 
   314  008C                     	;# 
   315  008E                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011E                     	;# 
   345  018C                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0194                     	;# 
   354  0195                     	;# 
   355  0196                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020C                     	;# 
   365  020E                     	;# 
   366  0211                     	;# 
   367  0211                     	;# 
   368  0212                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0213                     	;# 
   372  0214                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0215                     	;# 
   377  0216                     	;# 
   378  0216                     	;# 
   379  0217                     	;# 
   380  0217                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0294                     	;# 
   386  0295                     	;# 
   387  0295                     	;# 
   388  0296                     	;# 
   389  0298                     	;# 
   390  0298                     	;# 
   391  0299                     	;# 
   392  029A                     	;# 
   393  029B                     	;# 
   394  029C                     	;# 
   395  029D                     	;# 
   396  029E                     	;# 
   397  0311                     	;# 
   398  0311                     	;# 
   399  0312                     	;# 
   400  0313                     	;# 
   401  0318                     	;# 
   402  0318                     	;# 
   403  0319                     	;# 
   404  031A                     	;# 
   405  038C                     	;# 
   406  038E                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  039A                     	;# 
   411  039C                     	;# 
   412  039D                     	;# 
   413  039E                     	;# 
   414  039F                     	;# 
   415  0415                     	;# 
   416  0416                     	;# 
   417  0417                     	;# 
   418  041C                     	;# 
   419  041D                     	;# 
   420  041E                     	;# 
   421  0FE4                     	;# 
   422  0FE5                     	;# 
   423  0FE6                     	;# 
   424  0FE7                     	;# 
   425  0FE8                     	;# 
   426  0FE9                     	;# 
   427  0FEA                     	;# 
   428  0FEB                     	;# 
   429  0FED                     	;# 
   430  0FEE                     	;# 
   431  0FEF                     	;# 
   432  0000                     	;# 
   433  0001                     	;# 
   434  0002                     	;# 
   435  0003                     	;# 
   436  0004                     	;# 
   437  0005                     	;# 
   438  0006                     	;# 
   439  0007                     	;# 
   440  0008                     	;# 
   441  0009                     	;# 
   442  000A                     	;# 
   443  000B                     	;# 
   444  000C                     	;# 
   445  000E                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0013                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001C                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  008C                     	;# 
   461  008E                     	;# 
   462  0091                     	;# 
   463  0092                     	;# 
   464  0093                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0097                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009A                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  010C                     	;# 
   477  010E                     	;# 
   478  0111                     	;# 
   479  0112                     	;# 
   480  0113                     	;# 
   481  0114                     	;# 
   482  0115                     	;# 
   483  0116                     	;# 
   484  0117                     	;# 
   485  0118                     	;# 
   486  0119                     	;# 
   487  011A                     	;# 
   488  011B                     	;# 
   489  011D                     	;# 
   490  011E                     	;# 
   491  018C                     	;# 
   492  018E                     	;# 
   493  0191                     	;# 
   494  0191                     	;# 
   495  0192                     	;# 
   496  0193                     	;# 
   497  0193                     	;# 
   498  0193                     	;# 
   499  0194                     	;# 
   500  0195                     	;# 
   501  0196                     	;# 
   502  0199                     	;# 
   503  019A                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019E                     	;# 
   509  019F                     	;# 
   510  020C                     	;# 
   511  020E                     	;# 
   512  0211                     	;# 
   513  0211                     	;# 
   514  0212                     	;# 
   515  0212                     	;# 
   516  0213                     	;# 
   517  0213                     	;# 
   518  0214                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0216                     	;# 
   524  0216                     	;# 
   525  0217                     	;# 
   526  0217                     	;# 
   527  0291                     	;# 
   528  0291                     	;# 
   529  0292                     	;# 
   530  0293                     	;# 
   531  0294                     	;# 
   532  0295                     	;# 
   533  0295                     	;# 
   534  0296                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  029B                     	;# 
   540  029C                     	;# 
   541  029D                     	;# 
   542  029E                     	;# 
   543  0311                     	;# 
   544  0311                     	;# 
   545  0312                     	;# 
   546  0313                     	;# 
   547  0318                     	;# 
   548  0318                     	;# 
   549  0319                     	;# 
   550  031A                     	;# 
   551  038C                     	;# 
   552  038E                     	;# 
   553  0391                     	;# 
   554  0392                     	;# 
   555  0393                     	;# 
   556  039A                     	;# 
   557  039C                     	;# 
   558  039D                     	;# 
   559  039E                     	;# 
   560  039F                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000E                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  001E                     	;# 
   605  001F                     	;# 
   606  008C                     	;# 
   607  008E                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0097                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009A                     	;# 
   617  009B                     	;# 
   618  009B                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  010C                     	;# 
   623  010E                     	;# 
   624  0111                     	;# 
   625  0112                     	;# 
   626  0113                     	;# 
   627  0114                     	;# 
   628  0115                     	;# 
   629  0116                     	;# 
   630  0117                     	;# 
   631  0118                     	;# 
   632  0119                     	;# 
   633  011A                     	;# 
   634  011B                     	;# 
   635  011D                     	;# 
   636  011E                     	;# 
   637  018C                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020C                     	;# 
   657  020E                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0291                     	;# 
   674  0291                     	;# 
   675  0292                     	;# 
   676  0293                     	;# 
   677  0294                     	;# 
   678  0295                     	;# 
   679  0295                     	;# 
   680  0296                     	;# 
   681  0298                     	;# 
   682  0298                     	;# 
   683  0299                     	;# 
   684  029A                     	;# 
   685  029B                     	;# 
   686  029C                     	;# 
   687  029D                     	;# 
   688  029E                     	;# 
   689  0311                     	;# 
   690  0311                     	;# 
   691  0312                     	;# 
   692  0313                     	;# 
   693  0318                     	;# 
   694  0318                     	;# 
   695  0319                     	;# 
   696  031A                     	;# 
   697  038C                     	;# 
   698  038E                     	;# 
   699  0391                     	;# 
   700  0392                     	;# 
   701  0393                     	;# 
   702  039A                     	;# 
   703  039C                     	;# 
   704  039D                     	;# 
   705  039E                     	;# 
   706  039F                     	;# 
   707  0415                     	;# 
   708  0416                     	;# 
   709  0417                     	;# 
   710  041C                     	;# 
   711  041D                     	;# 
   712  041E                     	;# 
   713  0FE4                     	;# 
   714  0FE5                     	;# 
   715  0FE6                     	;# 
   716  0FE7                     	;# 
   717  0FE8                     	;# 
   718  0FE9                     	;# 
   719  0FEA                     	;# 
   720  0FEB                     	;# 
   721  0FED                     	;# 
   722  0FEE                     	;# 
   723  0FEF                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  000E                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0013                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  001E                     	;# 
   751  001F                     	;# 
   752  008C                     	;# 
   753  008E                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0093                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010E                     	;# 
   770  0111                     	;# 
   771  0112                     	;# 
   772  0113                     	;# 
   773  0114                     	;# 
   774  0115                     	;# 
   775  0116                     	;# 
   776  0117                     	;# 
   777  0118                     	;# 
   778  0119                     	;# 
   779  011A                     	;# 
   780  011B                     	;# 
   781  011D                     	;# 
   782  011E                     	;# 
   783  018C                     	;# 
   784  018E                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0193                     	;# 
   791  0194                     	;# 
   792  0195                     	;# 
   793  0196                     	;# 
   794  0199                     	;# 
   795  019A                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020C                     	;# 
   803  020E                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  0291                     	;# 
   820  0291                     	;# 
   821  0292                     	;# 
   822  0293                     	;# 
   823  0294                     	;# 
   824  0295                     	;# 
   825  0295                     	;# 
   826  0296                     	;# 
   827  0298                     	;# 
   828  0298                     	;# 
   829  0299                     	;# 
   830  029A                     	;# 
   831  029B                     	;# 
   832  029C                     	;# 
   833  029D                     	;# 
   834  029E                     	;# 
   835  0311                     	;# 
   836  0311                     	;# 
   837  0312                     	;# 
   838  0313                     	;# 
   839  0318                     	;# 
   840  0318                     	;# 
   841  0319                     	;# 
   842  031A                     	;# 
   843  038C                     	;# 
   844  038E                     	;# 
   845  0391                     	;# 
   846  0392                     	;# 
   847  0393                     	;# 
   848  039A                     	;# 
   849  039C                     	;# 
   850  039D                     	;# 
   851  039E                     	;# 
   852  039F                     	;# 
   853  0415                     	;# 
   854  0416                     	;# 
   855  0417                     	;# 
   856  041C                     	;# 
   857  041D                     	;# 
   858  041E                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000E                     	;# 
   884  0011                     	;# 
   885  0012                     	;# 
   886  0013                     	;# 
   887  0015                     	;# 
   888  0016                     	;# 
   889  0016                     	;# 
   890  0017                     	;# 
   891  0018                     	;# 
   892  0019                     	;# 
   893  001A                     	;# 
   894  001B                     	;# 
   895  001C                     	;# 
   896  001E                     	;# 
   897  001F                     	;# 
   898  008C                     	;# 
   899  008E                     	;# 
   900  0091                     	;# 
   901  0092                     	;# 
   902  0093                     	;# 
   903  0095                     	;# 
   904  0096                     	;# 
   905  0097                     	;# 
   906  0098                     	;# 
   907  0099                     	;# 
   908  009A                     	;# 
   909  009B                     	;# 
   910  009B                     	;# 
   911  009C                     	;# 
   912  009D                     	;# 
   913  009E                     	;# 
   914  010C                     	;# 
   915  010E                     	;# 
   916  0111                     	;# 
   917  0112                     	;# 
   918  0113                     	;# 
   919  0114                     	;# 
   920  0115                     	;# 
   921  0116                     	;# 
   922  0117                     	;# 
   923  0118                     	;# 
   924  0119                     	;# 
   925  011A                     	;# 
   926  011B                     	;# 
   927  011D                     	;# 
   928  011E                     	;# 
   929  018C                     	;# 
   930  018E                     	;# 
   931  0191                     	;# 
   932  0191                     	;# 
   933  0192                     	;# 
   934  0193                     	;# 
   935  0193                     	;# 
   936  0193                     	;# 
   937  0194                     	;# 
   938  0195                     	;# 
   939  0196                     	;# 
   940  0199                     	;# 
   941  019A                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019C                     	;# 
   945  019D                     	;# 
   946  019E                     	;# 
   947  019F                     	;# 
   948  020C                     	;# 
   949  020E                     	;# 
   950  0211                     	;# 
   951  0211                     	;# 
   952  0212                     	;# 
   953  0212                     	;# 
   954  0213                     	;# 
   955  0213                     	;# 
   956  0214                     	;# 
   957  0214                     	;# 
   958  0215                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0216                     	;# 
   962  0216                     	;# 
   963  0217                     	;# 
   964  0217                     	;# 
   965  0291                     	;# 
   966  0291                     	;# 
   967  0292                     	;# 
   968  0293                     	;# 
   969  0294                     	;# 
   970  0295                     	;# 
   971  0295                     	;# 
   972  0296                     	;# 
   973  0298                     	;# 
   974  0298                     	;# 
   975  0299                     	;# 
   976  029A                     	;# 
   977  029B                     	;# 
   978  029C                     	;# 
   979  029D                     	;# 
   980  029E                     	;# 
   981  0311                     	;# 
   982  0311                     	;# 
   983  0312                     	;# 
   984  0313                     	;# 
   985  0318                     	;# 
   986  0318                     	;# 
   987  0319                     	;# 
   988  031A                     	;# 
   989  038C                     	;# 
   990  038E                     	;# 
   991  0391                     	;# 
   992  0392                     	;# 
   993  0393                     	;# 
   994  039A                     	;# 
   995  039C                     	;# 
   996  039D                     	;# 
   997  039E                     	;# 
   998  039F                     	;# 
   999  0415                     	;# 
  1000  0416                     	;# 
  1001  0417                     	;# 
  1002  041C                     	;# 
  1003  041D                     	;# 
  1004  041E                     	;# 
  1005  0FE4                     	;# 
  1006  0FE5                     	;# 
  1007  0FE6                     	;# 
  1008  0FE7                     	;# 
  1009  0FE8                     	;# 
  1010  0FE9                     	;# 
  1011  0FEA                     	;# 
  1012  0FEB                     	;# 
  1013  0FED                     	;# 
  1014  0FEE                     	;# 
  1015  0FEF                     	;# 
  1016  0000                     	;# 
  1017  0001                     	;# 
  1018  0002                     	;# 
  1019  0003                     	;# 
  1020  0004                     	;# 
  1021  0005                     	;# 
  1022  0006                     	;# 
  1023  0007                     	;# 
  1024  0008                     	;# 
  1025  0009                     	;# 
  1026  000A                     	;# 
  1027  000B                     	;# 
  1028  000C                     	;# 
  1029  000E                     	;# 
  1030  0011                     	;# 
  1031  0012                     	;# 
  1032  0013                     	;# 
  1033  0015                     	;# 
  1034  0016                     	;# 
  1035  0016                     	;# 
  1036  0017                     	;# 
  1037  0018                     	;# 
  1038  0019                     	;# 
  1039  001A                     	;# 
  1040  001B                     	;# 
  1041  001C                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008E                     	;# 
  1046  0091                     	;# 
  1047  0092                     	;# 
  1048  0093                     	;# 
  1049  0095                     	;# 
  1050  0096                     	;# 
  1051  0097                     	;# 
  1052  0098                     	;# 
  1053  0099                     	;# 
  1054  009A                     	;# 
  1055  009B                     	;# 
  1056  009B                     	;# 
  1057  009C                     	;# 
  1058  009D                     	;# 
  1059  009E                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011A                     	;# 
  1072  011B                     	;# 
  1073  011D                     	;# 
  1074  011E                     	;# 
  1075  018C                     	;# 
  1076  018E                     	;# 
  1077  0191                     	;# 
  1078  0191                     	;# 
  1079  0192                     	;# 
  1080  0193                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0199                     	;# 
  1087  019A                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020C                     	;# 
  1095  020E                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0294                     	;# 
  1116  0295                     	;# 
  1117  0295                     	;# 
  1118  0296                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  029B                     	;# 
  1124  029C                     	;# 
  1125  029D                     	;# 
  1126  029E                     	;# 
  1127  0311                     	;# 
  1128  0311                     	;# 
  1129  0312                     	;# 
  1130  0313                     	;# 
  1131  0318                     	;# 
  1132  0318                     	;# 
  1133  0319                     	;# 
  1134  031A                     	;# 
  1135  038C                     	;# 
  1136  038E                     	;# 
  1137  0391                     	;# 
  1138  0392                     	;# 
  1139  0393                     	;# 
  1140  039A                     	;# 
  1141  039C                     	;# 
  1142  039D                     	;# 
  1143  039E                     	;# 
  1144  039F                     	;# 
  1145  0415                     	;# 
  1146  0416                     	;# 
  1147  0417                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162                           
  1163                           	psect	stringtext1
  1164  1474                     __pstringtext1:	
  1165  1474                     _dpowers:	
  1166  1474  3401               	retlw	1
  1167  1475  3400               	retlw	0
  1168  1476  340A               	retlw	10
  1169  1477  3400               	retlw	0
  1170  1478  3464               	retlw	100
  1171  1479  3400               	retlw	0
  1172  147A  34E8               	retlw	232
  1173  147B  3403               	retlw	3
  1174  147C  3410               	retlw	16
  1175  147D  3427               	retlw	39
  1176  147E                     __end_of_dpowers:	
  1177                           
  1178                           	psect	stringtext2
  1179  147E                     __pstringtext2:	
  1180  147E                     _hexpowers:	
  1181  147E  3401               	retlw	1
  1182  147F  3400               	retlw	0
  1183  1480  3410               	retlw	16
  1184  1481  3400               	retlw	0
  1185  1482  3400               	retlw	0
  1186  1483  3401               	retlw	1
  1187  1484  3400               	retlw	0
  1188  1485  3410               	retlw	16
  1189  1486                     __end_of_hexpowers:	
  1190                           
  1191                           	psect	stringtext3
  1192  1494                     __pstringtext3:	
  1193  1494                     _rxfnsidh:	
  1194  1494  3400               	retlw	0
  1195  1495  3404               	retlw	4
  1196  1496  3408               	retlw	8
  1197  1497  3410               	retlw	16
  1198  1498  3414               	retlw	20
  1199  1499  3418               	retlw	24
  1200  149A                     __end_of_rxfnsidh:	
  1201                           
  1202                           	psect	stringtext4
  1203  14AB                     __pstringtext4:	
  1204  14AB                     _txbnsidh:	
  1205  14AB  3431               	retlw	49
  1206  14AC  3441               	retlw	65
  1207  14AD  3451               	retlw	81
  1208  14AE                     __end_of_txbnsidh:	
  1209                           
  1210                           	psect	stringtext5
  1211  14AE                     __pstringtext5:	
  1212  14AE                     _abc:	
  1213  14AE  3400               	retlw	0
  1214  14AF  3402               	retlw	2
  1215  14B0  3404               	retlw	4
  1216  14B1                     __end_of_abc:	
  1217                           
  1218                           	psect	stringtext6
  1219  14B4                     __pstringtext6:	
  1220  14B4                     _nm:	
  1221  14B4  3400               	retlw	0
  1222  14B5  3402               	retlw	2
  1223  14B6                     __end_of_nm:	
  1224                           
  1225                           	psect	stringtext7
  1226  1000                     __pstringtext7:	
  1227  1000                     _rxmnsidh:	
  1228  1000  3420               	retlw	32
  1229  1001  3424               	retlw	36
  1230  1002                     __end_of_rxmnsidh:	
  1231  0011                     _PIR1bits	set	17
  1232  0095                     _OPTION_REGbits	set	149
  1233  008E                     _TRISC	set	142
  1234  008C                     _TRISA	set	140
  1235  0097                     _WDTCON	set	151
  1236  0098                     _OSCTUNE	set	152
  1237  0099                     _OSCCON	set	153
  1238  04D6                     _PLLR	set	1238
  1239  010C                     _LATAbits	set	268
  1240  010E                     _LATCbits	set	270
  1241  011D                     _APFCON0	set	285
  1242  011E                     _APFCON1	set	286
  1243  010E                     _LATC	set	270
  1244  010C                     _LATA	set	268
  1245  0116                     _BORCON	set	278
  1246  018C                     _ANSELA	set	396
  1247  018E                     _ANSELC	set	398
  1248  019A                     _TXREG	set	410
  1249  0199                     _RCREG	set	409
  1250  019D                     _RCSTAbits	set	413
  1251  019C                     _SPBRGH	set	412
  1252  019B                     _SPBRGL	set	411
  1253  019E                     _TXSTA	set	414
  1254  019D                     _RCSTA	set	413
  1255  019F                     _BAUDCON	set	415
  1256  0214                     _SSP1STATbits	set	532
  1257  0211                     _SSP1BUF	set	529
  1258  0215                     _SSP1CON1bits	set	533
  1259  0212                     _SSP1ADD	set	530
  1260  0215                     _SSP1CON1	set	533
  1261  0214                     _SSP1STAT	set	532
  1262  020E                     _WPUC	set	526
  1263  020C                     _WPUA	set	524
  1264  1002                     STR_10:	
  1265  1002  345B               	retlw	91	;'['
  1266  1003  3453               	retlw	83	;'S'
  1267  1004  3465               	retlw	101	;'e'
  1268  1005  3474               	retlw	116	;'t'
  1269  1006  3420               	retlw	32	;' '
  1270  1007  346F               	retlw	111	;'o'
  1271  1008  3475               	retlw	117	;'u'
  1272  1009  3474               	retlw	116	;'t'
  1273  100A  3470               	retlw	112	;'p'
  1274  100B  3475               	retlw	117	;'u'
  1275  100C  3474               	retlw	116	;'t'
  1276  100D  3420               	retlw	32	;' '
  1277  100E  346D               	retlw	109	;'m'
  1278  100F  346F               	retlw	111	;'o'
  1279  1010  3464               	retlw	100	;'d'
  1280  1011  3465               	retlw	101	;'e'
  1281  1012  345D               	retlw	93	;']'
  1282  1013  3420               	retlw	32	;' '
  1283  1014  347B               	retlw	123	;'{'
  1284  1015  3464               	retlw	100	;'d'
  1285  1016  3465               	retlw	101	;'e'
  1286  1017  3462               	retlw	98	;'b'
  1287  1018  3475               	retlw	117	;'u'
  1288  1019  3467               	retlw	103	;'g'
  1289  101A  343A               	retlw	58	;':'
  1290  101B  3420               	retlw	32	;' '
  1291  101C  3440               	retlw	64	;'@'
  1292  101D  3476               	retlw	118	;'v'
  1293  101E  3464               	retlw	100	;'d'
  1294  101F  342C               	retlw	44	;','
  1295  1020  3420               	retlw	32	;' '
  1296  1021  3476               	retlw	118	;'v'
  1297  1022  3465               	retlw	101	;'e'
  1298  1023  3472               	retlw	114	;'r'
  1299  1024  3462               	retlw	98	;'b'
  1300  1025  346F               	retlw	111	;'o'
  1301  1026  3473               	retlw	115	;'s'
  1302  1027  3465               	retlw	101	;'e'
  1303  1028  343A               	retlw	58	;':'
  1304  1029  3420               	retlw	32	;' '
  1305  102A  3440               	retlw	64	;'@'
  1306  102B  3476               	retlw	118	;'v'
  1307  102C  3476               	retlw	118	;'v'
  1308  102D  342C               	retlw	44	;','
  1309  102E  3420               	retlw	32	;' '
  1310  102F  346E               	retlw	110	;'n'
  1311  1030  346F               	retlw	111	;'o'
  1312  1031  3472               	retlw	114	;'r'
  1313  1032  346D               	retlw	109	;'m'
  1314  1033  3461               	retlw	97	;'a'
  1315  1034  346C               	retlw	108	;'l'
  1316  1035  343A               	retlw	58	;':'
  1317  1036  3420               	retlw	32	;' '
  1318  1037  3440               	retlw	64	;'@'
  1319  1038  3476               	retlw	118	;'v'
  1320  1039  346E               	retlw	110	;'n'
  1321  103A  347D               	retlw	125	;'}'
  1322  103B  340A               	retlw	10
  1323  103C  3400               	retlw	0
  1324                           
  1325                           	psect	stringtext8
  1326  103D                     __pstringtext8:	
  1327  103D                     STR_12:	
  1328  103D  3420               	retlw	32	;' '
  1329  103E  3420               	retlw	32	;' '
  1330  103F  3420               	retlw	32	;' '
  1331  1040  3420               	retlw	32	;' '
  1332  1041  3420               	retlw	32	;' '
  1333  1042  3477               	retlw	119	;'w'
  1334  1043  3469               	retlw	105	;'i'
  1335  1044  3474               	retlw	116	;'t'
  1336  1045  3468               	retlw	104	;'h'
  1337  1046  3420               	retlw	32	;' '
  1338  1047  3453               	retlw	83	;'S'
  1339  1048  3449               	retlw	73	;'I'
  1340  1049  3444               	retlw	68	;'D'
  1341  104A  343A               	retlw	58	;':'
  1342  104B  3420               	retlw	32	;' '
  1343  104C  3440               	retlw	64	;'@'
  1344  104D  346F               	retlw	111	;'o'
  1345  104E  346C               	retlw	108	;'l'
  1346  104F  3473               	retlw	115	;'s'
  1347  1050  3420               	retlw	32	;' '
  1348  1051  346F               	retlw	111	;'o'
  1349  1052  3472               	retlw	114	;'r'
  1350  1053  3420               	retlw	32	;' '
  1351  1054  3440               	retlw	64	;'@'
  1352  1055  346F               	retlw	111	;'o'
  1353  1056  346E               	retlw	110	;'n'
  1354  1057  3473               	retlw	115	;'s'
  1355  1058  342C               	retlw	44	;','
  1356  1059  3420               	retlw	32	;' '
  1357  105A  3469               	retlw	105	;'i'
  1358  105B  346E               	retlw	110	;'n'
  1359  105C  3420               	retlw	32	;' '
  1360  105D  3468               	retlw	104	;'h'
  1361  105E  3465               	retlw	101	;'e'
  1362  105F  3478               	retlw	120	;'x'
  1363  1060  3420               	retlw	32	;' '
  1364  1061  3466               	retlw	102	;'f'
  1365  1062  346F               	retlw	111	;'o'
  1366  1063  3472               	retlw	114	;'r'
  1367  1064  346D               	retlw	109	;'m'
  1368  1065  3461               	retlw	97	;'a'
  1369  1066  3474               	retlw	116	;'t'
  1370  1067  343A               	retlw	58	;':'
  1371  1068  3420               	retlw	32	;' '
  1372  1069  3440               	retlw	64	;'@'
  1373  106A  346F               	retlw	111	;'o'
  1374  106B  346C               	retlw	108	;'l'
  1375  106C  3468               	retlw	104	;'h'
  1376  106D  3420               	retlw	32	;' '
  1377  106E  346F               	retlw	111	;'o'
  1378  106F  3472               	retlw	114	;'r'
  1379  1070  3420               	retlw	32	;' '
  1380  1071  3440               	retlw	64	;'@'
  1381  1072  346F               	retlw	111	;'o'
  1382  1073  346E               	retlw	110	;'n'
  1383  1074  3468               	retlw	104	;'h'
  1384  1075  340A               	retlw	10
  1385  1076  3400               	retlw	0
  1386                           
  1387                           	psect	stringtext9
  1388  1077                     __pstringtext9:	
  1389  1077                     STR_20:	
  1390  1077  345B               	retlw	91	;'['
  1391  1078  3453               	retlw	83	;'S'
  1392  1079  3465               	retlw	101	;'e'
  1393  107A  346E               	retlw	110	;'n'
  1394  107B  3464               	retlw	100	;'d'
  1395  107C  3420               	retlw	32	;' '
  1396  107D  346D               	retlw	109	;'m'
  1397  107E  3465               	retlw	101	;'e'
  1398  107F  3473               	retlw	115	;'s'
  1399  1080  3473               	retlw	115	;'s'
  1400  1081  3461               	retlw	97	;'a'
  1401  1082  3467               	retlw	103	;'g'
  1402  1083  3465               	retlw	101	;'e'
  1403  1084  3420               	retlw	32	;' '
  1404  1085  3462               	retlw	98	;'b'
  1405  1086  3465               	retlw	101	;'e'
  1406  1087  3467               	retlw	103	;'g'
  1407  1088  3469               	retlw	105	;'i'
  1408  1089  346E               	retlw	110	;'n'
  1409  108A  346E               	retlw	110	;'n'
  1410  108B  3469               	retlw	105	;'i'
  1411  108C  346E               	retlw	110	;'n'
  1412  108D  3467               	retlw	103	;'g'
  1413  108E  3420               	retlw	32	;' '
  1414  108F  3477               	retlw	119	;'w'
  1415  1090  3469               	retlw	105	;'i'
  1416  1091  3474               	retlw	116	;'t'
  1417  1092  3468               	retlw	104	;'h'
  1418  1093  3420               	retlw	32	;' '
  1419  1094  3427               	retlw	39	;'''
  1420  1095  3440               	retlw	64	;'@'
  1421  1096  3427               	retlw	39	;'''
  1422  1097  3420               	retlw	32	;' '
  1423  1098  3463               	retlw	99	;'c'
  1424  1099  3468               	retlw	104	;'h'
  1425  109A  3461               	retlw	97	;'a'
  1426  109B  3472               	retlw	114	;'r'
  1427  109C  3461               	retlw	97	;'a'
  1428  109D  3463               	retlw	99	;'c'
  1429  109E  3474               	retlw	116	;'t'
  1430  109F  3465               	retlw	101	;'e'
  1431  10A0  3472               	retlw	114	;'r'
  1432  10A1  345D               	retlw	93	;']'
  1433  10A2  3420               	retlw	32	;' '
  1434  10A3  3440               	retlw	64	;'@'
  1435  10A4  343C               	retlw	60	;'<'
  1436  10A5  3440               	retlw	64	;'@'
  1437  10A6  346D               	retlw	109	;'m'
  1438  10A7  3465               	retlw	101	;'e'
  1439  10A8  3473               	retlw	115	;'s'
  1440  10A9  3473               	retlw	115	;'s'
  1441  10AA  3461               	retlw	97	;'a'
  1442  10AB  3467               	retlw	103	;'g'
  1443  10AC  3465               	retlw	101	;'e'
  1444  10AD  343E               	retlw	62	;'>'
  1445  10AE  340A               	retlw	10
  1446  10AF  3400               	retlw	0
  1447                           
  1448                           	psect	stringtext10
  1449  10B0                     __pstringtext10:	
  1450  10B0                     STR_11:	
  1451  10B0  345B               	retlw	91	;'['
  1452  10B1  3445               	retlw	69	;'E'
  1453  10B2  346E               	retlw	110	;'n'
  1454  10B3  3461               	retlw	97	;'a'
  1455  10B4  3462               	retlw	98	;'b'
  1456  10B5  346C               	retlw	108	;'l'
  1457  10B6  3465               	retlw	101	;'e'
  1458  10B7  3420               	retlw	32	;' '
  1459  10B8  346F               	retlw	111	;'o'
  1460  10B9  3470               	retlw	112	;'p'
  1461  10BA  3465               	retlw	101	;'e'
  1462  10BB  3472               	retlw	114	;'r'
  1463  10BC  3461               	retlw	97	;'a'
  1464  10BD  3474               	retlw	116	;'t'
  1465  10BE  3469               	retlw	105	;'i'
  1466  10BF  346F               	retlw	111	;'o'
  1467  10C0  346E               	retlw	110	;'n'
  1468  10C1  3420               	retlw	32	;' '
  1469  10C2  346D               	retlw	109	;'m'
  1470  10C3  346F               	retlw	111	;'o'
  1471  10C4  3464               	retlw	100	;'d'
  1472  10C5  3465               	retlw	101	;'e'
  1473  10C6  345D               	retlw	93	;']'
  1474  10C7  3420               	retlw	32	;' '
  1475  10C8  347B               	retlw	123	;'{'
  1476  10C9  346C               	retlw	108	;'l'
  1477  10CA  346F               	retlw	111	;'o'
  1478  10CB  346F               	retlw	111	;'o'
  1479  10CC  3470               	retlw	112	;'p'
  1480  10CD  3462               	retlw	98	;'b'
  1481  10CE  3461               	retlw	97	;'a'
  1482  10CF  3463               	retlw	99	;'c'
  1483  10D0  346B               	retlw	107	;'k'
  1484  10D1  343A               	retlw	58	;':'
  1485  10D2  3420               	retlw	32	;' '
  1486  10D3  3440               	retlw	64	;'@'
  1487  10D4  346F               	retlw	111	;'o'
  1488  10D5  346C               	retlw	108	;'l'
  1489  10D6  342C               	retlw	44	;','
  1490  10D7  3420               	retlw	32	;' '
  1491  10D8  346E               	retlw	110	;'n'
  1492  10D9  346F               	retlw	111	;'o'
  1493  10DA  3472               	retlw	114	;'r'
  1494  10DB  346D               	retlw	109	;'m'
  1495  10DC  3461               	retlw	97	;'a'
  1496  10DD  346C               	retlw	108	;'l'
  1497  10DE  343A               	retlw	58	;':'
  1498  10DF  3420               	retlw	32	;' '
  1499  10E0  3440               	retlw	64	;'@'
  1500  10E1  346F               	retlw	111	;'o'
  1501  10E2  346E               	retlw	110	;'n'
  1502  10E3  347D               	retlw	125	;'}'
  1503  10E4  340A               	retlw	10
  1504  10E5  3400               	retlw	0
  1505                           
  1506                           	psect	stringtext11
  1507  10E6                     __pstringtext11:	
  1508  10E6                     STR_9:	
  1509  10E6  345B               	retlw	91	;'['
  1510  10E7  3453               	retlw	83	;'S'
  1511  10E8  3465               	retlw	101	;'e'
  1512  10E9  3474               	retlw	116	;'t'
  1513  10EA  3420               	retlw	32	;' '
  1514  10EB  3473               	retlw	115	;'s'
  1515  10EC  3474               	retlw	116	;'t'
  1516  10ED  3461               	retlw	97	;'a'
  1517  10EE  346E               	retlw	110	;'n'
  1518  10EF  3464               	retlw	100	;'d'
  1519  10F0  3461               	retlw	97	;'a'
  1520  10F1  3472               	retlw	114	;'r'
  1521  10F2  3464               	retlw	100	;'d'
  1522  10F3  3420               	retlw	32	;' '
  1523  10F4  3469               	retlw	105	;'i'
  1524  10F5  3464               	retlw	100	;'d'
  1525  10F6  3465               	retlw	101	;'e'
  1526  10F7  346E               	retlw	110	;'n'
  1527  10F8  3474               	retlw	116	;'t'
  1528  10F9  3469               	retlw	105	;'i'
  1529  10FA  3466               	retlw	102	;'f'
  1530  10FB  3469               	retlw	105	;'i'
  1531  10FC  3465               	retlw	101	;'e'
  1532  10FD  3472               	retlw	114	;'r'
  1533  10FE  345D               	retlw	93	;']'
  1534  10FF  3420               	retlw	32	;' '
  1535  1100  3440               	retlw	64	;'@'
  1536  1101  3469               	retlw	105	;'i'
  1537  1102  343C               	retlw	60	;'<'
  1538  1103  3473               	retlw	115	;'s'
  1539  1104  3474               	retlw	116	;'t'
  1540  1105  3461               	retlw	97	;'a'
  1541  1106  346E               	retlw	110	;'n'
  1542  1107  3464               	retlw	100	;'d'
  1543  1108  3461               	retlw	97	;'a'
  1544  1109  3472               	retlw	114	;'r'
  1545  110A  3464               	retlw	100	;'d'
  1546  110B  3420               	retlw	32	;' '
  1547  110C  3469               	retlw	105	;'i'
  1548  110D  3464               	retlw	100	;'d'
  1549  110E  3465               	retlw	101	;'e'
  1550  110F  346E               	retlw	110	;'n'
  1551  1110  3474               	retlw	116	;'t'
  1552  1111  3469               	retlw	105	;'i'
  1553  1112  3466               	retlw	102	;'f'
  1554  1113  3469               	retlw	105	;'i'
  1555  1114  3465               	retlw	101	;'e'
  1556  1115  3472               	retlw	114	;'r'
  1557  1116  343E               	retlw	62	;'>'
  1558  1117  340A               	retlw	10
  1559  1118  3400               	retlw	0
  1560                           
  1561                           	psect	stringtext12
  1562  1119                     __pstringtext12:	
  1563  1119                     STR_41:	
  1564  1119  3452               	retlw	82	;'R'
  1565  111A  3458               	retlw	88	;'X'
  1566  111B  3446               	retlw	70	;'F'
  1567  111C  3425               	retlw	37	;'%'
  1568  111D  3464               	retlw	100	;'d'
  1569  111E  3420               	retlw	32	;' '
  1570  111F  3452               	retlw	82	;'R'
  1571  1120  3458               	retlw	88	;'X'
  1572  1121  3446               	retlw	70	;'F'
  1573  1122  3425               	retlw	37	;'%'
  1574  1123  3464               	retlw	100	;'d'
  1575  1124  3453               	retlw	83	;'S'
  1576  1125  3449               	retlw	73	;'I'
  1577  1126  3444               	retlw	68	;'D'
  1578  1127  3448               	retlw	72	;'H'
  1579  1128  3420               	retlw	32	;' '
  1580  1129  3452               	retlw	82	;'R'
  1581  112A  3458               	retlw	88	;'X'
  1582  112B  3446               	retlw	70	;'F'
  1583  112C  3425               	retlw	37	;'%'
  1584  112D  3464               	retlw	100	;'d'
  1585  112E  3453               	retlw	83	;'S'
  1586  112F  3449               	retlw	73	;'I'
  1587  1130  3444               	retlw	68	;'D'
  1588  1131  344C               	retlw	76	;'L'
  1589  1132  343A               	retlw	58	;':'
  1590  1133  3420               	retlw	32	;' '
  1591  1134  3425               	retlw	37	;'%'
  1592  1135  3434               	retlw	52	;'4'
  1593  1136  3464               	retlw	100	;'d'
  1594  1137  3420               	retlw	32	;' '
  1595  1138  3425               	retlw	37	;'%'
  1596  1139  3430               	retlw	48	;'0'
  1597  113A  3432               	retlw	50	;'2'
  1598  113B  3458               	retlw	88	;'X'
  1599  113C  3468               	retlw	104	;'h'
  1600  113D  3420               	retlw	32	;' '
  1601  113E  3425               	retlw	37	;'%'
  1602  113F  3430               	retlw	48	;'0'
  1603  1140  3432               	retlw	50	;'2'
  1604  1141  3458               	retlw	88	;'X'
  1605  1142  3468               	retlw	104	;'h'
  1606  1143  340A               	retlw	10
  1607  1144  3400               	retlw	0
  1608                           
  1609                           	psect	stringtext13
  1610  1145                     __pstringtext13:	
  1611  1145                     STR_40:	
  1612  1145  3452               	retlw	82	;'R'
  1613  1146  3458               	retlw	88	;'X'
  1614  1147  344D               	retlw	77	;'M'
  1615  1148  3425               	retlw	37	;'%'
  1616  1149  3464               	retlw	100	;'d'
  1617  114A  3420               	retlw	32	;' '
  1618  114B  3452               	retlw	82	;'R'
  1619  114C  3458               	retlw	88	;'X'
  1620  114D  344D               	retlw	77	;'M'
  1621  114E  3425               	retlw	37	;'%'
  1622  114F  3464               	retlw	100	;'d'
  1623  1150  3453               	retlw	83	;'S'
  1624  1151  3449               	retlw	73	;'I'
  1625  1152  3444               	retlw	68	;'D'
  1626  1153  3448               	retlw	72	;'H'
  1627  1154  3420               	retlw	32	;' '
  1628  1155  3452               	retlw	82	;'R'
  1629  1156  3458               	retlw	88	;'X'
  1630  1157  344D               	retlw	77	;'M'
  1631  1158  3425               	retlw	37	;'%'
  1632  1159  3464               	retlw	100	;'d'
  1633  115A  3453               	retlw	83	;'S'
  1634  115B  3449               	retlw	73	;'I'
  1635  115C  3444               	retlw	68	;'D'
  1636  115D  344C               	retlw	76	;'L'
  1637  115E  343A               	retlw	58	;':'
  1638  115F  3420               	retlw	32	;' '
  1639  1160  3425               	retlw	37	;'%'
  1640  1161  3434               	retlw	52	;'4'
  1641  1162  3464               	retlw	100	;'d'
  1642  1163  3420               	retlw	32	;' '
  1643  1164  3425               	retlw	37	;'%'
  1644  1165  3430               	retlw	48	;'0'
  1645  1166  3432               	retlw	50	;'2'
  1646  1167  3458               	retlw	88	;'X'
  1647  1168  3468               	retlw	104	;'h'
  1648  1169  3420               	retlw	32	;' '
  1649  116A  3425               	retlw	37	;'%'
  1650  116B  3430               	retlw	48	;'0'
  1651  116C  3432               	retlw	50	;'2'
  1652  116D  3458               	retlw	88	;'X'
  1653  116E  3468               	retlw	104	;'h'
  1654  116F  340A               	retlw	10
  1655  1170  3400               	retlw	0
  1656                           
  1657                           	psect	stringtext14
  1658  1171                     __pstringtext14:	
  1659  1171                     STR_21:	
  1660  1171  345B               	retlw	91	;'['
  1661  1172  3452               	retlw	82	;'R'
  1662  1173  3465               	retlw	101	;'e'
  1663  1174  3463               	retlw	99	;'c'
  1664  1175  3465               	retlw	101	;'e'
  1665  1176  3469               	retlw	105	;'i'
  1666  1177  3476               	retlw	118	;'v'
  1667  1178  3465               	retlw	101	;'e'
  1668  1179  3420               	retlw	32	;' '
  1669  117A  346D               	retlw	109	;'m'
  1670  117B  3465               	retlw	101	;'e'
  1671  117C  3473               	retlw	115	;'s'
  1672  117D  3473               	retlw	115	;'s'
  1673  117E  3461               	retlw	97	;'a'
  1674  117F  3467               	retlw	103	;'g'
  1675  1180  3465               	retlw	101	;'e'
  1676  1181  345D               	retlw	93	;']'
  1677  1182  3420               	retlw	32	;' '
  1678  1183  343C               	retlw	60	;'<'
  1679  1184  346D               	retlw	109	;'m'
  1680  1185  3465               	retlw	101	;'e'
  1681  1186  3473               	retlw	115	;'s'
  1682  1187  3473               	retlw	115	;'s'
  1683  1188  3461               	retlw	97	;'a'
  1684  1189  3467               	retlw	103	;'g'
  1685  118A  3465               	retlw	101	;'e'
  1686  118B  343E               	retlw	62	;'>'
  1687  118C  3420               	retlw	32	;' '
  1688  118D  3477               	retlw	119	;'w'
  1689  118E  3469               	retlw	105	;'i'
  1690  118F  346C               	retlw	108	;'l'
  1691  1190  346C               	retlw	108	;'l'
  1692  1191  3420               	retlw	32	;' '
  1693  1192  3462               	retlw	98	;'b'
  1694  1193  3465               	retlw	101	;'e'
  1695  1194  3420               	retlw	32	;' '
  1696  1195  346F               	retlw	111	;'o'
  1697  1196  3475               	retlw	117	;'u'
  1698  1197  3474               	retlw	116	;'t'
  1699  1198  3470               	retlw	112	;'p'
  1700  1199  3475               	retlw	117	;'u'
  1701  119A  3474               	retlw	116	;'t'
  1702  119B  340A               	retlw	10
  1703  119C  3400               	retlw	0
  1704                           
  1705                           	psect	stringtext15
  1706  119D                     __pstringtext15:	
  1707  119D                     STR_14:	
  1708  119D  345B               	retlw	91	;'['
  1709  119E  3453               	retlw	83	;'S'
  1710  119F  3465               	retlw	101	;'e'
  1711  11A0  3474               	retlw	116	;'t'
  1712  11A1  3420               	retlw	32	;' '
  1713  11A2  3466               	retlw	102	;'f'
  1714  11A3  3469               	retlw	105	;'i'
  1715  11A4  346C               	retlw	108	;'l'
  1716  11A5  3474               	retlw	116	;'t'
  1717  11A6  3465               	retlw	101	;'e'
  1718  11A7  3472               	retlw	114	;'r'
  1719  11A8  345D               	retlw	93	;']'
  1720  11A9  3420               	retlw	32	;' '
  1721  11AA  3440               	retlw	64	;'@'
  1722  11AB  3466               	retlw	102	;'f'
  1723  11AC  343C               	retlw	60	;'<'
  1724  11AD  346E               	retlw	110	;'n'
  1725  11AE  343E               	retlw	62	;'>'
  1726  11AF  343C               	retlw	60	;'<'
  1727  11B0  3466               	retlw	102	;'f'
  1728  11B1  3469               	retlw	105	;'i'
  1729  11B2  346C               	retlw	108	;'l'
  1730  11B3  3474               	retlw	116	;'t'
  1731  11B4  3465               	retlw	101	;'e'
  1732  11B5  3472               	retlw	114	;'r'
  1733  11B6  3428               	retlw	40	;'('
  1734  11B7  3453               	retlw	83	;'S'
  1735  11B8  3449               	retlw	73	;'I'
  1736  11B9  3444               	retlw	68	;'D'
  1737  11BA  3431               	retlw	49	;'1'
  1738  11BB  3430               	retlw	48	;'0'
  1739  11BC  3420               	retlw	32	;' '
  1740  11BD  347E               	retlw	126	;'~'
  1741  11BE  3420               	retlw	32	;' '
  1742  11BF  3453               	retlw	83	;'S'
  1743  11C0  3449               	retlw	73	;'I'
  1744  11C1  3444               	retlw	68	;'D'
  1745  11C2  3430               	retlw	48	;'0'
  1746  11C3  3429               	retlw	41	;')'
  1747  11C4  343E               	retlw	62	;'>'
  1748  11C5  340A               	retlw	10
  1749  11C6  3400               	retlw	0
  1750                           
  1751                           	psect	stringtext16
  1752  11C7                     __pstringtext16:	
  1753  11C7                     STR_13:	
  1754  11C7  345B               	retlw	91	;'['
  1755  11C8  3453               	retlw	83	;'S'
  1756  11C9  3465               	retlw	101	;'e'
  1757  11CA  3474               	retlw	116	;'t'
  1758  11CB  3420               	retlw	32	;' '
  1759  11CC  346D               	retlw	109	;'m'
  1760  11CD  3461               	retlw	97	;'a'
  1761  11CE  3473               	retlw	115	;'s'
  1762  11CF  346B               	retlw	107	;'k'
  1763  11D0  345D               	retlw	93	;']'
  1764  11D1  3420               	retlw	32	;' '
  1765  11D2  3440               	retlw	64	;'@'
  1766  11D3  346D               	retlw	109	;'m'
  1767  11D4  343C               	retlw	60	;'<'
  1768  11D5  346E               	retlw	110	;'n'
  1769  11D6  343E               	retlw	62	;'>'
  1770  11D7  343C               	retlw	60	;'<'
  1771  11D8  346D               	retlw	109	;'m'
  1772  11D9  3461               	retlw	97	;'a'
  1773  11DA  3473               	retlw	115	;'s'
  1774  11DB  346B               	retlw	107	;'k'
  1775  11DC  3428               	retlw	40	;'('
  1776  11DD  3453               	retlw	83	;'S'
  1777  11DE  3449               	retlw	73	;'I'
  1778  11DF  3444               	retlw	68	;'D'
  1779  11E0  3431               	retlw	49	;'1'
  1780  11E1  3430               	retlw	48	;'0'
  1781  11E2  3420               	retlw	32	;' '
  1782  11E3  347E               	retlw	126	;'~'
  1783  11E4  3420               	retlw	32	;' '
  1784  11E5  3453               	retlw	83	;'S'
  1785  11E6  3449               	retlw	73	;'I'
  1786  11E7  3444               	retlw	68	;'D'
  1787  11E8  3430               	retlw	48	;'0'
  1788  11E9  3429               	retlw	41	;')'
  1789  11EA  343E               	retlw	62	;'>'
  1790  11EB  340A               	retlw	10
  1791  11EC  3400               	retlw	0
  1792                           
  1793                           	psect	stringtext17
  1794  11ED                     __pstringtext17:	
  1795  11ED                     STR_16:	
  1796  11ED  345B               	retlw	91	;'['
  1797  11EE  3441               	retlw	65	;'A'
  1798  11EF  3462               	retlw	98	;'b'
  1799  11F0  346F               	retlw	111	;'o'
  1800  11F1  3472               	retlw	114	;'r'
  1801  11F2  3474               	retlw	116	;'t'
  1802  11F3  3420               	retlw	32	;' '
  1803  11F4  3461               	retlw	97	;'a'
  1804  11F5  346C               	retlw	108	;'l'
  1805  11F6  346C               	retlw	108	;'l'
  1806  11F7  3420               	retlw	32	;' '
  1807  11F8  3470               	retlw	112	;'p'
  1808  11F9  3465               	retlw	101	;'e'
  1809  11FA  346E               	retlw	110	;'n'
  1810  11FB  3464               	retlw	100	;'d'
  1811  11FC  3469               	retlw	105	;'i'
  1812  11FD  346E               	retlw	110	;'n'
  1813  11FE  3467               	retlw	103	;'g'
  1814  11FF  3420               	retlw	32	;' '
  1815  1200  3474               	retlw	116	;'t'
  1816  1201  3472               	retlw	114	;'r'
  1817  1202  3461               	retlw	97	;'a'
  1818  1203  346E               	retlw	110	;'n'
  1819  1204  3473               	retlw	115	;'s'
  1820  1205  346D               	retlw	109	;'m'
  1821  1206  3469               	retlw	105	;'i'
  1822  1207  3473               	retlw	115	;'s'
  1823  1208  3473               	retlw	115	;'s'
  1824  1209  3469               	retlw	105	;'i'
  1825  120A  346F               	retlw	111	;'o'
  1826  120B  346E               	retlw	110	;'n'
  1827  120C  3473               	retlw	115	;'s'
  1828  120D  345D               	retlw	93	;']'
  1829  120E  3420               	retlw	32	;' '
  1830  120F  3440               	retlw	64	;'@'
  1831  1210  3461               	retlw	97	;'a'
  1832  1211  340A               	retlw	10
  1833  1212  3400               	retlw	0
  1834                           
  1835                           	psect	stringtext18
  1836  1213                     __pstringtext18:	
  1837  1213                     STR_7:	
  1838  1213  342F               	retlw	47	;'/'
  1839  1214  342F               	retlw	47	;'/'
  1840  1215  342F               	retlw	47	;'/'
  1841  1216  3420               	retlw	32	;' '
  1842  1217  3455               	retlw	85	;'U'
  1843  1218  3441               	retlw	65	;'A'
  1844  1219  3452               	retlw	82	;'R'
  1845  121A  3454               	retlw	84	;'T'
  1846  121B  3432               	retlw	50	;'2'
  1847  121C  3443               	retlw	67	;'C'
  1848  121D  3441               	retlw	65	;'A'
  1849  121E  344E               	retlw	78	;'N'
  1850  121F  3420               	retlw	32	;' '
  1851  1220  3448               	retlw	72	;'H'
  1852  1221  3445               	retlw	69	;'E'
  1853  1222  344C               	retlw	76	;'L'
  1854  1223  3450               	retlw	80	;'P'
  1855  1224  3420               	retlw	32	;' '
  1856  1225  3428               	retlw	40	;'('
  1857  1226  3476               	retlw	118	;'v'
  1858  1227  3465               	retlw	101	;'e'
  1859  1228  3472               	retlw	114	;'r'
  1860  1229  3473               	retlw	115	;'s'
  1861  122A  3469               	retlw	105	;'i'
  1862  122B  346F               	retlw	111	;'o'
  1863  122C  346E               	retlw	110	;'n'
  1864  122D  3420               	retlw	32	;' '
  1865  122E  3425               	retlw	37	;'%'
  1866  122F  3473               	retlw	115	;'s'
  1867  1230  3429               	retlw	41	;')'
  1868  1231  3420               	retlw	32	;' '
  1869  1232  342F               	retlw	47	;'/'
  1870  1233  342F               	retlw	47	;'/'
  1871  1234  342F               	retlw	47	;'/'
  1872  1235  340A               	retlw	10
  1873  1236  3400               	retlw	0
  1874                           
  1875                           	psect	stringtext19
  1876  1237                     __pstringtext19:	
  1877  1237                     STR_17:	
  1878  1237  345B               	retlw	91	;'['
  1879  1238  3444               	retlw	68	;'D'
  1880  1239  3475               	retlw	117	;'u'
  1881  123A  346D               	retlw	109	;'m'
  1882  123B  3470               	retlw	112	;'p'
  1883  123C  3420               	retlw	32	;' '
  1884  123D  346D               	retlw	109	;'m'
  1885  123E  3461               	retlw	97	;'a'
  1886  123F  3473               	retlw	115	;'s'
  1887  1240  346B               	retlw	107	;'k'
  1888  1241  3473               	retlw	115	;'s'
  1889  1242  3420               	retlw	32	;' '
  1890  1243  3461               	retlw	97	;'a'
  1891  1244  346E               	retlw	110	;'n'
  1892  1245  3464               	retlw	100	;'d'
  1893  1246  3420               	retlw	32	;' '
  1894  1247  3466               	retlw	102	;'f'
  1895  1248  3469               	retlw	105	;'i'
  1896  1249  346C               	retlw	108	;'l'
  1897  124A  3474               	retlw	116	;'t'
  1898  124B  3465               	retlw	101	;'e'
  1899  124C  3472               	retlw	114	;'r'
  1900  124D  3473               	retlw	115	;'s'
  1901  124E  345D               	retlw	93	;']'
  1902  124F  3420               	retlw	32	;' '
  1903  1250  3440               	retlw	64	;'@'
  1904  1251  3446               	retlw	70	;'F'
  1905  1252  340A               	retlw	10
  1906  1253  3400               	retlw	0
  1907                           
  1908                           	psect	stringtext20
  1909  1254                     __pstringtext20:	
  1910  1254                     STR_19:	
  1911  1254  345B               	retlw	91	;'['
  1912  1255  3453               	retlw	83	;'S'
  1913  1256  3465               	retlw	101	;'e'
  1914  1257  346E               	retlw	110	;'n'
  1915  1258  3464               	retlw	100	;'d'
  1916  1259  3420               	retlw	32	;' '
  1917  125A  346D               	retlw	109	;'m'
  1918  125B  3465               	retlw	101	;'e'
  1919  125C  3473               	retlw	115	;'s'
  1920  125D  3473               	retlw	115	;'s'
  1921  125E  3461               	retlw	97	;'a'
  1922  125F  3467               	retlw	103	;'g'
  1923  1260  3465               	retlw	101	;'e'
  1924  1261  345D               	retlw	93	;']'
  1925  1262  3420               	retlw	32	;' '
  1926  1263  343C               	retlw	60	;'<'
  1927  1264  346D               	retlw	109	;'m'
  1928  1265  3465               	retlw	101	;'e'
  1929  1266  3473               	retlw	115	;'s'
  1930  1267  3473               	retlw	115	;'s'
  1931  1268  3461               	retlw	97	;'a'
  1932  1269  3467               	retlw	103	;'g'
  1933  126A  3465               	retlw	101	;'e'
  1934  126B  343E               	retlw	62	;'>'
  1935  126C  340A               	retlw	10
  1936  126D  3400               	retlw	0
  1937                           
  1938                           	psect	stringtext21
  1939  126E                     __pstringtext21:	
  1940  126E                     STR_15:	
  1941  126E  345B               	retlw	91	;'['
  1942  126F  3453               	retlw	83	;'S'
  1943  1270  3465               	retlw	101	;'e'
  1944  1271  3474               	retlw	116	;'t'
  1945  1272  3420               	retlw	32	;' '
  1946  1273  3462               	retlw	98	;'b'
  1947  1274  3461               	retlw	97	;'a'
  1948  1275  3475               	retlw	117	;'u'
  1949  1276  3464               	retlw	100	;'d'
  1950  1277  3420               	retlw	32	;' '
  1951  1278  3472               	retlw	114	;'r'
  1952  1279  3461               	retlw	97	;'a'
  1953  127A  3474               	retlw	116	;'t'
  1954  127B  3465               	retlw	101	;'e'
  1955  127C  345D               	retlw	93	;']'
  1956  127D  3420               	retlw	32	;' '
  1957  127E  3440               	retlw	64	;'@'
  1958  127F  3462               	retlw	98	;'b'
  1959  1280  343C               	retlw	60	;'<'
  1960  1281  3462               	retlw	98	;'b'
  1961  1282  3470               	retlw	112	;'p'
  1962  1283  3472               	retlw	114	;'r'
  1963  1284  343E               	retlw	62	;'>'
  1964  1285  340A               	retlw	10
  1965  1286  3400               	retlw	0
  1966                           
  1967                           	psect	stringtext22
  1968  1287                     __pstringtext22:	
  1969  1287                     STR_25:	
  1970  1287  3466               	retlw	102	;'f'
  1971  1288  3469               	retlw	105	;'i'
  1972  1289  346C               	retlw	108	;'l'
  1973  128A  3474               	retlw	116	;'t'
  1974  128B  3465               	retlw	101	;'e'
  1975  128C  3472               	retlw	114	;'r'
  1976  128D  3428               	retlw	40	;'('
  1977  128E  3425               	retlw	37	;'%'
  1978  128F  3464               	retlw	100	;'d'
  1979  1290  3429               	retlw	41	;')'
  1980  1291  343A               	retlw	58	;':'
  1981  1292  3420               	retlw	32	;' '
  1982  1293  3425               	retlw	37	;'%'
  1983  1294  3430               	retlw	48	;'0'
  1984  1295  3432               	retlw	50	;'2'
  1985  1296  3478               	retlw	120	;'x'
  1986  1297  3420               	retlw	32	;' '
  1987  1298  3425               	retlw	37	;'%'
  1988  1299  3430               	retlw	48	;'0'
  1989  129A  3432               	retlw	50	;'2'
  1990  129B  3478               	retlw	120	;'x'
  1991  129C  340A               	retlw	10
  1992  129D  3400               	retlw	0
  1993                           
  1994                           	psect	stringtext23
  1995  129E                     __pstringtext23:	
  1996  129E                     STR_22:	
  1997  129E  345B               	retlw	91	;'['
  1998  129F  3453               	retlw	83	;'S'
  1999  12A0  3468               	retlw	104	;'h'
  2000  12A1  346F               	retlw	111	;'o'
  2001  12A2  3477               	retlw	119	;'w'
  2002  12A3  3420               	retlw	32	;' '
  2003  12A4  3474               	retlw	116	;'t'
  2004  12A5  3468               	retlw	104	;'h'
  2005  12A6  3469               	retlw	105	;'i'
  2006  12A7  3473               	retlw	115	;'s'
  2007  12A8  3420               	retlw	32	;' '
  2008  12A9  3468               	retlw	104	;'h'
  2009  12AA  3465               	retlw	101	;'e'
  2010  12AB  346C               	retlw	108	;'l'
  2011  12AC  3470               	retlw	112	;'p'
  2012  12AD  345D               	retlw	93	;']'
  2013  12AE  343A               	retlw	58	;':'
  2014  12AF  3420               	retlw	32	;' '
  2015  12B0  3440               	retlw	64	;'@'
  2016  12B1  3468               	retlw	104	;'h'
  2017  12B2  340A               	retlw	10
  2018  12B3  3400               	retlw	0
  2019                           
  2020                           	psect	stringtext24
  2021  12B4                     __pstringtext24:	
  2022  12B4                     STR_24:	
  2023  12B4  346D               	retlw	109	;'m'
  2024  12B5  3461               	retlw	97	;'a'
  2025  12B6  3473               	retlw	115	;'s'
  2026  12B7  346B               	retlw	107	;'k'
  2027  12B8  3428               	retlw	40	;'('
  2028  12B9  3425               	retlw	37	;'%'
  2029  12BA  3464               	retlw	100	;'d'
  2030  12BB  3429               	retlw	41	;')'
  2031  12BC  343A               	retlw	58	;':'
  2032  12BD  3420               	retlw	32	;' '
  2033  12BE  3425               	retlw	37	;'%'
  2034  12BF  3430               	retlw	48	;'0'
  2035  12C0  3432               	retlw	50	;'2'
  2036  12C1  3478               	retlw	120	;'x'
  2037  12C2  3420               	retlw	32	;' '
  2038  12C3  3425               	retlw	37	;'%'
  2039  12C4  3430               	retlw	48	;'0'
  2040  12C5  3432               	retlw	50	;'2'
  2041  12C6  3478               	retlw	120	;'x'
  2042  12C7  340A               	retlw	10
  2043  12C8  3400               	retlw	0
  2044                           
  2045                           	psect	stringtext25
  2046  12C9                     __pstringtext25:	
  2047  12C9                     STR_18:	
  2048  12C9  345B               	retlw	91	;'['
  2049  12CA  3444               	retlw	68	;'D'
  2050  12CB  3475               	retlw	117	;'u'
  2051  12CC  346D               	retlw	109	;'m'
  2052  12CD  3470               	retlw	112	;'p'
  2053  12CE  3420               	retlw	32	;' '
  2054  12CF  3472               	retlw	114	;'r'
  2055  12D0  3465               	retlw	101	;'e'
  2056  12D1  3467               	retlw	103	;'g'
  2057  12D2  3469               	retlw	105	;'i'
  2058  12D3  3473               	retlw	115	;'s'
  2059  12D4  3474               	retlw	116	;'t'
  2060  12D5  3465               	retlw	101	;'e'
  2061  12D6  3472               	retlw	114	;'r'
  2062  12D7  3473               	retlw	115	;'s'
  2063  12D8  345D               	retlw	93	;']'
  2064  12D9  3420               	retlw	32	;' '
  2065  12DA  3440               	retlw	64	;'@'
  2066  12DB  3444               	retlw	68	;'D'
  2067  12DC  340A               	retlw	10
  2068  12DD  3400               	retlw	0
  2069                           
  2070                           	psect	stringtext26
  2071  12DE                     __pstringtext26:	
  2072  12DE                     STR_8:	
  2073  12DE  3430               	retlw	48	;'0'
  2074  12DF  342E               	retlw	46	;'.'
  2075  12E0  3431               	retlw	49	;'1'
  2076  12E1  3433               	retlw	51	;'3'
  2077  12E2  3420               	retlw	32	;' '
  2078  12E3  3420               	retlw	32	;' '
  2079  12E4  344D               	retlw	77	;'M'
  2080  12E5  3461               	retlw	97	;'a'
  2081  12E6  3472               	retlw	114	;'r'
  2082  12E7  3463               	retlw	99	;'c'
  2083  12E8  3468               	retlw	104	;'h'
  2084  12E9  3420               	retlw	32	;' '
  2085  12EA  3432               	retlw	50	;'2'
  2086  12EB  3433               	retlw	51	;'3'
  2087  12EC  342C               	retlw	44	;','
  2088  12ED  3420               	retlw	32	;' '
  2089  12EE  3432               	retlw	50	;'2'
  2090  12EF  3430               	retlw	48	;'0'
  2091  12F0  3431               	retlw	49	;'1'
  2092  12F1  3438               	retlw	56	;'8'
  2093  12F2  3400               	retlw	0
  2094                           
  2095                           	psect	stringtext27
  2096  12F3                     __pstringtext27:	
  2097  12F3                     STR_33:	
  2098  12F3  3443               	retlw	67	;'C'
  2099  12F4  346F               	retlw	111	;'o'
  2100  12F5  3470               	retlw	112	;'p'
  2101  12F6  3479               	retlw	121	;'y'
  2102  12F7  3469               	retlw	105	;'i'
  2103  12F8  346E               	retlw	110	;'n'
  2104  12F9  3467               	retlw	103	;'g'
  2105  12FA  3420               	retlw	32	;' '
  2106  12FB  3462               	retlw	98	;'b'
  2107  12FC  3475               	retlw	117	;'u'
  2108  12FD  3466               	retlw	102	;'f'
  2109  12FE  3466               	retlw	102	;'f'
  2110  12FF  3465               	retlw	101	;'e'
  2111  1300  3472               	retlw	114	;'r'
  2112  1301  343A               	retlw	58	;':'
  2113  1302  3420               	retlw	32	;' '
  2114  1303  3425               	retlw	37	;'%'
  2115  1304  3463               	retlw	99	;'c'
  2116  1305  340A               	retlw	10
  2117  1306  3400               	retlw	0
  2118                           
  2119                           	psect	stringtext28
  2120  1307                     __pstringtext28:	
  2121  1307                     STR_36:	
  2122  1307  344D               	retlw	77	;'M'
  2123  1308  3465               	retlw	101	;'e'
  2124  1309  3473               	retlw	115	;'s'
  2125  130A  3473               	retlw	115	;'s'
  2126  130B  3461               	retlw	97	;'a'
  2127  130C  3467               	retlw	103	;'g'
  2128  130D  3465               	retlw	101	;'e'
  2129  130E  3420               	retlw	32	;' '
  2130  130F  3473               	retlw	115	;'s'
  2131  1310  3465               	retlw	101	;'e'
  2132  1311  346E               	retlw	110	;'n'
  2133  1312  3474               	retlw	116	;'t'
  2134  1313  343A               	retlw	58	;':'
  2135  1314  3420               	retlw	32	;' '
  2136  1315  3425               	retlw	37	;'%'
  2137  1316  3473               	retlw	115	;'s'
  2138  1317  340A               	retlw	10
  2139  1318  3400               	retlw	0
  2140                           
  2141                           	psect	stringtext29
  2142  1319                     __pstringtext29:	
  2143  1319                     STR_62:	
  2144  1319  3430               	retlw	48	;'0'
  2145  131A  3431               	retlw	49	;'1'
  2146  131B  3432               	retlw	50	;'2'
  2147  131C  3433               	retlw	51	;'3'
  2148  131D  3434               	retlw	52	;'4'
  2149  131E  3435               	retlw	53	;'5'
  2150  131F  3436               	retlw	54	;'6'
  2151  1320  3437               	retlw	55	;'7'
  2152  1321  3438               	retlw	56	;'8'
  2153  1322  3439               	retlw	57	;'9'
  2154  1323  3441               	retlw	65	;'A'
  2155  1324  3442               	retlw	66	;'B'
  2156  1325  3443               	retlw	67	;'C'
  2157  1326  3444               	retlw	68	;'D'
  2158  1327  3445               	retlw	69	;'E'
  2159  1328  3446               	retlw	70	;'F'
  2160  1329  3400               	retlw	0
  2161                           
  2162                           	psect	stringtext30
  2163  132A                     __pstringtext30:	
  2164  132A                     STR_63:	
  2165  132A  3430               	retlw	48	;'0'
  2166  132B  3431               	retlw	49	;'1'
  2167  132C  3432               	retlw	50	;'2'
  2168  132D  3433               	retlw	51	;'3'
  2169  132E  3434               	retlw	52	;'4'
  2170  132F  3435               	retlw	53	;'5'
  2171  1330  3436               	retlw	54	;'6'
  2172  1331  3437               	retlw	55	;'7'
  2173  1332  3438               	retlw	56	;'8'
  2174  1333  3439               	retlw	57	;'9'
  2175  1334  3461               	retlw	97	;'a'
  2176  1335  3462               	retlw	98	;'b'
  2177  1336  3463               	retlw	99	;'c'
  2178  1337  3464               	retlw	100	;'d'
  2179  1338  3465               	retlw	101	;'e'
  2180  1339  3466               	retlw	102	;'f'
  2181  133A  3400               	retlw	0
  2182                           
  2183                           	psect	stringtext31
  2184  133B                     __pstringtext31:	
  2185  133B                     STR_26:	
  2186  133B  3452               	retlw	82	;'R'
  2187  133C  3458               	retlw	88	;'X'
  2188  133D  3442               	retlw	66	;'B'
  2189  133E  3425               	retlw	37	;'%'
  2190  133F  3464               	retlw	100	;'d'
  2191  1340  3453               	retlw	83	;'S'
  2192  1341  3449               	retlw	73	;'I'
  2193  1342  3444               	retlw	68	;'D'
  2194  1343  3448               	retlw	72	;'H'
  2195  1344  343A               	retlw	58	;':'
  2196  1345  3420               	retlw	32	;' '
  2197  1346  3425               	retlw	37	;'%'
  2198  1347  3430               	retlw	48	;'0'
  2199  1348  3432               	retlw	50	;'2'
  2200  1349  3478               	retlw	120	;'x'
  2201  134A  340A               	retlw	10
  2202  134B  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext32
  2205  134C                     __pstringtext32:	
  2206  134C                     STR_34:	
  2207  134C  3454               	retlw	84	;'T'
  2208  134D  3458               	retlw	88	;'X'
  2209  134E  3442               	retlw	66	;'B'
  2210  134F  3425               	retlw	37	;'%'
  2211  1350  3464               	retlw	100	;'d'
  2212  1351  3453               	retlw	83	;'S'
  2213  1352  3449               	retlw	73	;'I'
  2214  1353  3444               	retlw	68	;'D'
  2215  1354  3448               	retlw	72	;'H'
  2216  1355  343A               	retlw	58	;':'
  2217  1356  3420               	retlw	32	;' '
  2218  1357  3425               	retlw	37	;'%'
  2219  1358  3430               	retlw	48	;'0'
  2220  1359  3432               	retlw	50	;'2'
  2221  135A  3478               	retlw	120	;'x'
  2222  135B  340A               	retlw	10
  2223  135C  3400               	retlw	0
  2224                           
  2225                           	psect	stringtext33
  2226  135D                     __pstringtext33:	
  2227  135D                     STR_27:	
  2228  135D  3452               	retlw	82	;'R'
  2229  135E  3458               	retlw	88	;'X'
  2230  135F  3442               	retlw	66	;'B'
  2231  1360  3425               	retlw	37	;'%'
  2232  1361  3464               	retlw	100	;'d'
  2233  1362  3453               	retlw	83	;'S'
  2234  1363  3449               	retlw	73	;'I'
  2235  1364  3444               	retlw	68	;'D'
  2236  1365  344C               	retlw	76	;'L'
  2237  1366  343A               	retlw	58	;':'
  2238  1367  3420               	retlw	32	;' '
  2239  1368  3425               	retlw	37	;'%'
  2240  1369  3430               	retlw	48	;'0'
  2241  136A  3432               	retlw	50	;'2'
  2242  136B  3478               	retlw	120	;'x'
  2243  136C  340A               	retlw	10
  2244  136D  3400               	retlw	0
  2245                           
  2246                           	psect	stringtext34
  2247  136E                     __pstringtext34:	
  2248  136E                     STR_35:	
  2249  136E  3454               	retlw	84	;'T'
  2250  136F  3458               	retlw	88	;'X'
  2251  1370  3442               	retlw	66	;'B'
  2252  1371  3425               	retlw	37	;'%'
  2253  1372  3464               	retlw	100	;'d'
  2254  1373  3453               	retlw	83	;'S'
  2255  1374  3449               	retlw	73	;'I'
  2256  1375  3444               	retlw	68	;'D'
  2257  1376  344C               	retlw	76	;'L'
  2258  1377  343A               	retlw	58	;':'
  2259  1378  3420               	retlw	32	;' '
  2260  1379  3425               	retlw	37	;'%'
  2261  137A  3430               	retlw	48	;'0'
  2262  137B  3432               	retlw	50	;'2'
  2263  137C  3478               	retlw	120	;'x'
  2264  137D  340A               	retlw	10
  2265  137E  3400               	retlw	0
  2266                           
  2267                           	psect	stringtext35
  2268  137F                     __pstringtext35:	
  2269  137F                     STR_28:	
  2270  137F  3452               	retlw	82	;'R'
  2271  1380  3458               	retlw	88	;'X'
  2272  1381  3442               	retlw	66	;'B'
  2273  1382  3425               	retlw	37	;'%'
  2274  1383  3464               	retlw	100	;'d'
  2275  1384  3444               	retlw	68	;'D'
  2276  1385  344C               	retlw	76	;'L'
  2277  1386  3443               	retlw	67	;'C'
  2278  1387  343A               	retlw	58	;':'
  2279  1388  3420               	retlw	32	;' '
  2280  1389  3425               	retlw	37	;'%'
  2281  138A  3430               	retlw	48	;'0'
  2282  138B  3432               	retlw	50	;'2'
  2283  138C  3478               	retlw	120	;'x'
  2284  138D  340A               	retlw	10
  2285  138E  3400               	retlw	0
  2286                           
  2287                           	psect	stringtext36
  2288  138F                     __pstringtext36:	
  2289  138F                     STR_55:	
  2290  138F  3452               	retlw	82	;'R'
  2291  1390  3458               	retlw	88	;'X'
  2292  1391  3442               	retlw	66	;'B'
  2293  1392  3430               	retlw	48	;'0'
  2294  1393  3443               	retlw	67	;'C'
  2295  1394  3454               	retlw	84	;'T'
  2296  1395  3452               	retlw	82	;'R'
  2297  1396  344C               	retlw	76	;'L'
  2298  1397  343A               	retlw	58	;':'
  2299  1398  3420               	retlw	32	;' '
  2300  1399  3425               	retlw	37	;'%'
  2301  139A  3430               	retlw	48	;'0'
  2302  139B  3432               	retlw	50	;'2'
  2303  139C  3478               	retlw	120	;'x'
  2304  139D  340A               	retlw	10
  2305  139E  3400               	retlw	0
  2306                           
  2307                           	psect	stringtext37
  2308  139F                     __pstringtext37:	
  2309  139F                     STR_51:	
  2310  139F  3454               	retlw	84	;'T'
  2311  13A0  3458               	retlw	88	;'X'
  2312  13A1  3442               	retlw	66	;'B'
  2313  13A2  3430               	retlw	48	;'0'
  2314  13A3  3443               	retlw	67	;'C'
  2315  13A4  3454               	retlw	84	;'T'
  2316  13A5  3452               	retlw	82	;'R'
  2317  13A6  344C               	retlw	76	;'L'
  2318  13A7  343A               	retlw	58	;':'
  2319  13A8  3420               	retlw	32	;' '
  2320  13A9  3425               	retlw	37	;'%'
  2321  13AA  3430               	retlw	48	;'0'
  2322  13AB  3432               	retlw	50	;'2'
  2323  13AC  3478               	retlw	120	;'x'
  2324  13AD  340A               	retlw	10
  2325  13AE  3400               	retlw	0
  2326                           
  2327                           	psect	stringtext38
  2328  13AF                     __pstringtext38:	
  2329  13AF                     STR_56:	
  2330  13AF  3452               	retlw	82	;'R'
  2331  13B0  3458               	retlw	88	;'X'
  2332  13B1  3442               	retlw	66	;'B'
  2333  13B2  3431               	retlw	49	;'1'
  2334  13B3  3443               	retlw	67	;'C'
  2335  13B4  3454               	retlw	84	;'T'
  2336  13B5  3452               	retlw	82	;'R'
  2337  13B6  344C               	retlw	76	;'L'
  2338  13B7  343A               	retlw	58	;':'
  2339  13B8  3420               	retlw	32	;' '
  2340  13B9  3425               	retlw	37	;'%'
  2341  13BA  3430               	retlw	48	;'0'
  2342  13BB  3432               	retlw	50	;'2'
  2343  13BC  3478               	retlw	120	;'x'
  2344  13BD  340A               	retlw	10
  2345  13BE  3400               	retlw	0
  2346                           
  2347                           	psect	stringtext39
  2348  13BF                     __pstringtext39:	
  2349  13BF                     STR_52:	
  2350  13BF  3454               	retlw	84	;'T'
  2351  13C0  3458               	retlw	88	;'X'
  2352  13C1  3442               	retlw	66	;'B'
  2353  13C2  3431               	retlw	49	;'1'
  2354  13C3  3443               	retlw	67	;'C'
  2355  13C4  3454               	retlw	84	;'T'
  2356  13C5  3452               	retlw	82	;'R'
  2357  13C6  344C               	retlw	76	;'L'
  2358  13C7  343A               	retlw	58	;':'
  2359  13C8  3420               	retlw	32	;' '
  2360  13C9  3425               	retlw	37	;'%'
  2361  13CA  3430               	retlw	48	;'0'
  2362  13CB  3432               	retlw	50	;'2'
  2363  13CC  3478               	retlw	120	;'x'
  2364  13CD  340A               	retlw	10
  2365  13CE  3400               	retlw	0
  2366                           
  2367                           	psect	stringtext40
  2368  13CF                     __pstringtext40:	
  2369  13CF                     STR_53:	
  2370  13CF  3454               	retlw	84	;'T'
  2371  13D0  3458               	retlw	88	;'X'
  2372  13D1  3442               	retlw	66	;'B'
  2373  13D2  3432               	retlw	50	;'2'
  2374  13D3  3443               	retlw	67	;'C'
  2375  13D4  3454               	retlw	84	;'T'
  2376  13D5  3452               	retlw	82	;'R'
  2377  13D6  344C               	retlw	76	;'L'
  2378  13D7  343A               	retlw	58	;':'
  2379  13D8  3420               	retlw	32	;' '
  2380  13D9  3425               	retlw	37	;'%'
  2381  13DA  3430               	retlw	48	;'0'
  2382  13DB  3432               	retlw	50	;'2'
  2383  13DC  3478               	retlw	120	;'x'
  2384  13DD  340A               	retlw	10
  2385  13DE  3400               	retlw	0
  2386                           
  2387                           	psect	stringtext41
  2388  13DF                     __pstringtext41:	
  2389  13DF                     STR_29:	
  2390  13DF  3452               	retlw	82	;'R'
  2391  13E0  3458               	retlw	88	;'X'
  2392  13E1  3442               	retlw	66	;'B'
  2393  13E2  3425               	retlw	37	;'%'
  2394  13E3  3464               	retlw	100	;'d'
  2395  13E4  3444               	retlw	68	;'D'
  2396  13E5  3430               	retlw	48	;'0'
  2397  13E6  343A               	retlw	58	;':'
  2398  13E7  3420               	retlw	32	;' '
  2399  13E8  3425               	retlw	37	;'%'
  2400  13E9  3430               	retlw	48	;'0'
  2401  13EA  3432               	retlw	50	;'2'
  2402  13EB  3478               	retlw	120	;'x'
  2403  13EC  340A               	retlw	10
  2404  13ED  3400               	retlw	0
  2405                           
  2406                           	psect	stringtext42
  2407  13EE                     __pstringtext42:	
  2408  13EE                     STR_58:	
  2409  13EE  3443               	retlw	67	;'C'
  2410  13EF  3441               	retlw	65	;'A'
  2411  13F0  344E               	retlw	78	;'N'
  2412  13F1  3443               	retlw	67	;'C'
  2413  13F2  3454               	retlw	84	;'T'
  2414  13F3  3452               	retlw	82	;'R'
  2415  13F4  344C               	retlw	76	;'L'
  2416  13F5  343A               	retlw	58	;':'
  2417  13F6  3420               	retlw	32	;' '
  2418  13F7  3425               	retlw	37	;'%'
  2419  13F8  3430               	retlw	48	;'0'
  2420  13F9  3432               	retlw	50	;'2'
  2421  13FA  3478               	retlw	120	;'x'
  2422  13FB  340A               	retlw	10
  2423  13FC  3400               	retlw	0
  2424                           
  2425                           	psect	stringtext43
  2426  13FD                     __pstringtext43:	
  2427  13FD                     STR_23:	
  2428  13FD  3443               	retlw	67	;'C'
  2429  13FE  3441               	retlw	65	;'A'
  2430  13FF  344E               	retlw	78	;'N'
  2431  1400  3453               	retlw	83	;'S'
  2432  1401  3454               	retlw	84	;'T'
  2433  1402  3441               	retlw	65	;'A'
  2434  1403  3454               	retlw	84	;'T'
  2435  1404  343A               	retlw	58	;':'
  2436  1405  3420               	retlw	32	;' '
  2437  1406  3425               	retlw	37	;'%'
  2438  1407  3430               	retlw	48	;'0'
  2439  1408  3432               	retlw	50	;'2'
  2440  1409  3478               	retlw	120	;'x'
  2441  140A  340A               	retlw	10
  2442  140B  3400               	retlw	0
  2443                           
  2444                           	psect	stringtext44
  2445  140C                     __pstringtext44:	
  2446  140C                     STR_32:	
  2447  140C  3454               	retlw	84	;'T'
  2448  140D  3458               	retlw	88	;'X'
  2449  140E  3442               	retlw	66	;'B'
  2450  140F  3430               	retlw	48	;'0'
  2451  1410  3420               	retlw	32	;' '
  2452  1411  3469               	retlw	105	;'i'
  2453  1412  3473               	retlw	115	;'s'
  2454  1413  3420               	retlw	32	;' '
  2455  1414  3469               	retlw	105	;'i'
  2456  1415  3464               	retlw	100	;'d'
  2457  1416  346C               	retlw	108	;'l'
  2458  1417  3465               	retlw	101	;'e'
  2459  1418  340A               	retlw	10
  2460  1419  3400               	retlw	0
  2461                           
  2462                           	psect	stringtext45
  2463  141A                     __pstringtext45:	
  2464  141A                     STR_31:	
  2465  141A  3454               	retlw	84	;'T'
  2466  141B  3458               	retlw	88	;'X'
  2467  141C  3442               	retlw	66	;'B'
  2468  141D  3431               	retlw	49	;'1'
  2469  141E  3420               	retlw	32	;' '
  2470  141F  3469               	retlw	105	;'i'
  2471  1420  3473               	retlw	115	;'s'
  2472  1421  3420               	retlw	32	;' '
  2473  1422  3469               	retlw	105	;'i'
  2474  1423  3464               	retlw	100	;'d'
  2475  1424  346C               	retlw	108	;'l'
  2476  1425  3465               	retlw	101	;'e'
  2477  1426  340A               	retlw	10
  2478  1427  3400               	retlw	0
  2479                           
  2480                           	psect	stringtext46
  2481  1428                     __pstringtext46:	
  2482  1428                     STR_30:	
  2483  1428  3454               	retlw	84	;'T'
  2484  1429  3458               	retlw	88	;'X'
  2485  142A  3442               	retlw	66	;'B'
  2486  142B  3432               	retlw	50	;'2'
  2487  142C  3420               	retlw	32	;' '
  2488  142D  3469               	retlw	105	;'i'
  2489  142E  3473               	retlw	115	;'s'
  2490  142F  3420               	retlw	32	;' '
  2491  1430  3469               	retlw	105	;'i'
  2492  1431  3464               	retlw	100	;'d'
  2493  1432  346C               	retlw	108	;'l'
  2494  1433  3465               	retlw	101	;'e'
  2495  1434  340A               	retlw	10
  2496  1435  3400               	retlw	0
  2497                           
  2498                           	psect	stringtext47
  2499  1436                     __pstringtext47:	
  2500  1436                     STR_38:	
  2501  1436  3452               	retlw	82	;'R'
  2502  1437  3458               	retlw	88	;'X'
  2503  1438  3430               	retlw	48	;'0'
  2504  1439  3449               	retlw	73	;'I'
  2505  143A  3446               	retlw	70	;'F'
  2506  143B  3420               	retlw	32	;' '
  2507  143C  3469               	retlw	105	;'i'
  2508  143D  3473               	retlw	115	;'s'
  2509  143E  3420               	retlw	32	;' '
  2510  143F  346F               	retlw	111	;'o'
  2511  1440  346E               	retlw	110	;'n'
  2512  1441  340A               	retlw	10
  2513  1442  3400               	retlw	0
  2514                           
  2515                           	psect	stringtext48
  2516  1443                     __pstringtext48:	
  2517  1443                     STR_37:	
  2518  1443  3452               	retlw	82	;'R'
  2519  1444  3458               	retlw	88	;'X'
  2520  1445  3431               	retlw	49	;'1'
  2521  1446  3449               	retlw	73	;'I'
  2522  1447  3446               	retlw	70	;'F'
  2523  1448  3420               	retlw	32	;' '
  2524  1449  3469               	retlw	105	;'i'
  2525  144A  3473               	retlw	115	;'s'
  2526  144B  3420               	retlw	32	;' '
  2527  144C  346F               	retlw	111	;'o'
  2528  144D  346E               	retlw	110	;'n'
  2529  144E  340A               	retlw	10
  2530  144F  3400               	retlw	0
  2531                           
  2532                           	psect	stringtext49
  2533  1450                     __pstringtext49:	
  2534  1450                     STR_47:	
  2535  1450  3443               	retlw	67	;'C'
  2536  1451  344E               	retlw	78	;'N'
  2537  1452  3446               	retlw	70	;'F'
  2538  1453  3431               	retlw	49	;'1'
  2539  1454  343A               	retlw	58	;':'
  2540  1455  3420               	retlw	32	;' '
  2541  1456  3425               	retlw	37	;'%'
  2542  1457  3430               	retlw	48	;'0'
  2543  1458  3432               	retlw	50	;'2'
  2544  1459  3478               	retlw	120	;'x'
  2545  145A  340A               	retlw	10
  2546  145B  3400               	retlw	0
  2547                           
  2548                           	psect	stringtext50
  2549  145C                     __pstringtext50:	
  2550  145C                     STR_48:	
  2551  145C  3443               	retlw	67	;'C'
  2552  145D  344E               	retlw	78	;'N'
  2553  145E  3446               	retlw	70	;'F'
  2554  145F  3432               	retlw	50	;'2'
  2555  1460  343A               	retlw	58	;':'
  2556  1461  3420               	retlw	32	;' '
  2557  1462  3425               	retlw	37	;'%'
  2558  1463  3430               	retlw	48	;'0'
  2559  1464  3432               	retlw	50	;'2'
  2560  1465  3478               	retlw	120	;'x'
  2561  1466  340A               	retlw	10
  2562  1467  3400               	retlw	0
  2563                           
  2564                           	psect	stringtext51
  2565  1468                     __pstringtext51:	
  2566  1468                     STR_49:	
  2567  1468  3443               	retlw	67	;'C'
  2568  1469  344E               	retlw	78	;'N'
  2569  146A  3446               	retlw	70	;'F'
  2570  146B  3433               	retlw	51	;'3'
  2571  146C  343A               	retlw	58	;':'
  2572  146D  3420               	retlw	32	;' '
  2573  146E  3425               	retlw	37	;'%'
  2574  146F  3430               	retlw	48	;'0'
  2575  1470  3432               	retlw	50	;'2'
  2576  1471  3478               	retlw	120	;'x'
  2577  1472  340A               	retlw	10
  2578  1473  3400               	retlw	0
  2579                           
  2580                           	psect	stringtext52
  2581  1486                     __pstringtext52:	
  2582  1486                     STR_61:	
  2583  1486  3428               	retlw	40	;'('
  2584  1487  346E               	retlw	110	;'n'
  2585  1488  3475               	retlw	117	;'u'
  2586  1489  346C               	retlw	108	;'l'
  2587  148A  346C               	retlw	108	;'l'
  2588  148B  3429               	retlw	41	;')'
  2589  148C  3400               	retlw	0
  2590                           
  2591                           	psect	stringtext53
  2592  148D                     __pstringtext53:	
  2593  148D                     STR_1:	
  2594  148D  3425               	retlw	37	;'%'
  2595  148E  3464               	retlw	100	;'d'
  2596  148F  342C               	retlw	44	;','
  2597  1490  3425               	retlw	37	;'%'
  2598  1491  3473               	retlw	115	;'s'
  2599  1492  340A               	retlw	10
  2600  1493  3400               	retlw	0
  2601                           
  2602                           	psect	stringtext54
  2603  149A                     __pstringtext54:	
  2604  149A                     STR_2:	
  2605  149A  3425               	retlw	37	;'%'
  2606  149B  3430               	retlw	48	;'0'
  2607  149C  3433               	retlw	51	;'3'
  2608  149D  3478               	retlw	120	;'x'
  2609  149E  343A               	retlw	58	;':'
  2610  149F  3400               	retlw	0
  2611                           
  2612                           	psect	stringtext55
  2613  14A0                     __pstringtext55:	
  2614  14A0                     STR_3:	
  2615  14A0  3420               	retlw	32	;' '
  2616  14A1  3425               	retlw	37	;'%'
  2617  14A2  3430               	retlw	48	;'0'
  2618  14A3  3432               	retlw	50	;'2'
  2619  14A4  3478               	retlw	120	;'x'
  2620  14A5  3400               	retlw	0
  2621                           
  2622                           	psect	stringtext56
  2623  14A6                     __pstringtext56:	
  2624  14A6                     STR_39:	
  2625  14A6  342D               	retlw	45	;'-'
  2626  14A7  342D               	retlw	45	;'-'
  2627  14A8  342D               	retlw	45	;'-'
  2628  14A9  340A               	retlw	10
  2629  14AA  3400               	retlw	0
  2630                           
  2631                           	psect	stringtext57
  2632  14B1                     __pstringtext57:	
  2633  14B1                     STR_6:	
  2634  14B1  3425               	retlw	37	;'%'
  2635  14B2  3463               	retlw	99	;'c'
  2636  14B3  3400               	retlw	0
  2637                           
  2638                           	psect	stringtext58
  2639  0000                     __pstringtext58:	
  2640  14A9                     
  2641                           ; #config settings
  2642  0000                     
  2643                           	psect	cinit
  2644  07F0                     start_initialization:	
  2645  07F0                     __initialization:	
  2646                           
  2647                           ; Clear objects allocated to BANK0
  2648  07F0  0020               	movlb	0	; select bank0
  2649  07F1  01EB               	clrf	__pbssBANK0& (0+127)
  2650  07F2  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2651  07F3  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2652  07F4  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2653  07F5  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  2654                           
  2655                           ; Clear objects allocated to BANK1
  2656  07F6  30A0               	movlw	low __pbssBANK1
  2657  07F7  0084               	movwf	4
  2658  07F8  3000               	movlw	high __pbssBANK1
  2659  07F9  0085               	movwf	5
  2660  07FA  3024               	movlw	36
  2661  07FB  318A  22F4         	fcall	clear_ram0
  2662  07FD                     end_of_initialization:	
  2663                           ;End of C runtime variable initialization code
  2664                           
  2665  07FD                     __end_of__initialization:	
  2666  07FD  0020               	movlb	0
  2667  07FE  3183  2BA0         	ljmp	_main	;jump to C main() function
  2668                           
  2669                           	psect	bssBANK0
  2670  006B                     __pbssBANK0:	
  2671  006B                     _mode:	
  2672  006B                     	ds	2
  2673  006D                     _output_format:	
  2674  006D                     	ds	2
  2675  006F                     _operation_mode:	
  2676  006F                     	ds	1
  2677                           
  2678                           	psect	bssBANK1
  2679  00A0                     __pbssBANK1:	
  2680  00A0                     _save_rxfn:	
  2681  00A0                     	ds	12
  2682  00AC                     _save_rxmn:	
  2683  00AC                     	ds	4
  2684  00B0                     _handler:	
  2685  00B0                     	ds	2
  2686  00B2                     _sid:	
  2687  00B2                     	ds	2
  2688  00B4                     _buf:	
  2689  00B4                     	ds	16
  2690                           
  2691                           	psect	clrtext
  2692  0AF4                     clear_ram0:	
  2693                           ;	Called with FSR0 containing the base address, and
  2694                           ;	WREG with the size to clear
  2695                           
  2696  0AF4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2697  0AF5                     clrloop0:	
  2698  0AF5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2699  0AF6  3101               	addfsr 0,1
  2700  0AF7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2701  0AF8  2AF5               	goto	clrloop0	;have we reached the end yet?
  2702  0AF9  3400               	retlw	0	;all done for this memory range, return
  2703                           
  2704                           	psect	cstackBANK1
  2705  00C4                     __pcstackBANK1:	
  2706  00C4                     main@buf:	
  2707                           
  2708                           ; 16 bytes @ 0x0
  2709  00C4                     	ds	16
  2710  00D4                     main@sid:	
  2711                           
  2712                           ; 1 bytes @ 0x10
  2713  00D4                     	ds	1
  2714  00D5                     main@bpr:	
  2715                           
  2716                           ; 1 bytes @ 0x11
  2717  00D5                     	ds	1
  2718  00D6                     main@status:	
  2719                           
  2720                           ; 1 bytes @ 0x12
  2721  00D6                     	ds	1
  2722  00D7                     main@mask:	
  2723                           
  2724                           ; 2 bytes @ 0x13
  2725  00D7                     	ds	2
  2726  00D9                     main@echo_back:	
  2727                           
  2728                           ; 1 bytes @ 0x15
  2729  00D9                     	ds	1
  2730  00DA                     main@n:	
  2731                           
  2732                           ; 1 bytes @ 0x16
  2733  00DA                     	ds	1
  2734  00DB                     main@c:	
  2735                           
  2736                           ; 1 bytes @ 0x17
  2737  00DB                     	ds	1
  2738  00DC                     main@cmd:	
  2739                           
  2740                           ; 1 bytes @ 0x18
  2741  00DC                     	ds	1
  2742  00DD                     main@idx:	
  2743                           
  2744                           ; 1 bytes @ 0x19
  2745  00DD                     	ds	1
  2746                           
  2747                           	psect	cstackCOMMON
  2748  0070                     __pcstackCOMMON:	
  2749  0070                     ?_isdigit:	
  2750  0070                     ?_PIN_MANAGER_Initialize:	
  2751                           ; 1 bit 
  2752                           
  2753  0070                     ??_PIN_MANAGER_Initialize:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ?_OSCILLATOR_Initialize:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     ??_OSCILLATOR_Initialize:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ?_WDT_Initialize:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ??_WDT_Initialize:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ?_SPI_Initialize:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ??_SPI_Initialize:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_EUSART_Initialize:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ??_EUSART_Initialize:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_can_status_check:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_can_set_sid:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_can_logging_mode:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_can_ope_mode:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_can_abort:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_can_baudrate:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_can_dump_masks_and_filters:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_can_dump_registers:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ??_isdigit:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_SYSTEM_Initialize:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ??_SYSTEM_Initialize:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_EUSART_Read:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ??_EUSART_Read:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_EUSART_Write:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ??_EUSART_Write:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_putch:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_SPI_Exchange8bit:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ??_SPI_Exchange8bit:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_main:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ?_abort_pending_transmissions:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_txf_clear:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_receive:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_read_register:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?___wmul:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ?___lwdiv:	
  2853                           ; 2 bytes @ 0x0
  2854                           
  2855  0070                     EUSART_Write@txData:	
  2856                           ; 2 bytes @ 0x0
  2857                           
  2858  0070                     SPI_Exchange8bit@data:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     can_logging_mode@verbose:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     _isdigit$827:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     can_set_sid@can_node:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ___wmul@multiplier:	
  2871                           ; 2 bytes @ 0x0
  2872                           
  2873  0070                     ___lwdiv@divisor:	
  2874                           ; 2 bytes @ 0x0
  2875                           
  2876                           
  2877                           ; 2 bytes @ 0x0
  2878  0070                     	ds	1
  2879  0071                     ??_can_logging_mode:	
  2880  0071                     ??_putch:	
  2881                           ; 1 bytes @ 0x1
  2882                           
  2883  0071                     ?_SPI_Exchange8bitBuffer:	
  2884                           ; 1 bytes @ 0x1
  2885                           
  2886  0071                     putch@txData:	
  2887                           ; 1 bytes @ 0x1
  2888                           
  2889  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0071                     isdigit@c:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895                           
  2896                           ; 1 bytes @ 0x1
  2897  0071                     	ds	1
  2898  0072                     ??_can_set_sid:	
  2899  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2900                           ; 1 bytes @ 0x2
  2901                           
  2902  0072                     can_logging_mode@debug:	
  2903                           ; 1 bytes @ 0x2
  2904                           
  2905  0072                     ___wmul@multiplicand:	
  2906                           ; 1 bytes @ 0x2
  2907                           
  2908  0072                     ___lwdiv@dividend:	
  2909                           ; 2 bytes @ 0x2
  2910                           
  2911                           
  2912                           ; 2 bytes @ 0x2
  2913  0072                     	ds	1
  2914  0073                     ??_SPI_Exchange8bitBuffer:	
  2915                           
  2916                           ; 1 bytes @ 0x3
  2917  0073                     	ds	1
  2918  0074                     ??___wmul:	
  2919  0074                     ??___lwdiv:	
  2920                           ; 1 bytes @ 0x4
  2921                           
  2922  0074                     ___wmul@product:	
  2923                           ; 1 bytes @ 0x4
  2924                           
  2925                           
  2926                           ; 2 bytes @ 0x4
  2927  0074                     	ds	1
  2928  0075                     can_set_sid@sidh:	
  2929  0075                     ___lwdiv@quotient:	
  2930                           ; 1 bytes @ 0x5
  2931                           
  2932                           
  2933                           ; 2 bytes @ 0x5
  2934  0075                     	ds	1
  2935  0076                     ?_atoi:	
  2936  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2937                           ; 2 bytes @ 0x6
  2938                           
  2939  0076                     can_set_sid@sidl:	
  2940                           ; 1 bytes @ 0x6
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x6
  2944  0076                     	ds	1
  2945  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2946  0077                     ___lwdiv@counter:	
  2947                           ; 1 bytes @ 0x7
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x7
  2951  0077                     	ds	1
  2952  0078                     ??_atoi:	
  2953  0078                     ?_SPI_exchange:	
  2954                           ; 1 bytes @ 0x8
  2955                           
  2956  0078                     ?___lwmod:	
  2957                           ; 1 bytes @ 0x8
  2958                           
  2959  0078                     SPI_exchange@len:	
  2960                           ; 2 bytes @ 0x8
  2961                           
  2962  0078                     ___lwmod@divisor:	
  2963                           ; 1 bytes @ 0x8
  2964                           
  2965                           
  2966                           ; 2 bytes @ 0x8
  2967  0078                     	ds	1
  2968  0079                     ??_SPI_exchange:	
  2969                           
  2970                           ; 1 bytes @ 0x9
  2971  0079                     	ds	1
  2972  007A                     atoi@sign:	
  2973  007A                     ___lwmod@dividend:	
  2974                           ; 1 bytes @ 0xA
  2975                           
  2976                           
  2977                           ; 2 bytes @ 0xA
  2978  007A                     	ds	1
  2979  007B                     atoi@a:	
  2980                           
  2981                           ; 2 bytes @ 0xB
  2982  007B                     	ds	1
  2983  007C                     ??___lwmod:	
  2984  007C                     SPI_exchange@bytes_written:	
  2985                           ; 1 bytes @ 0xC
  2986                           
  2987                           
  2988                           ; 1 bytes @ 0xC
  2989  007C                     	ds	1
  2990  007D                     SPI_exchange@buf:	
  2991  007D                     atoi@s:	
  2992                           ; 1 bytes @ 0xD
  2993                           
  2994  007D                     ___lwmod@counter:	
  2995                           ; 1 bytes @ 0xD
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0xD
  2999  007D                     	ds	1
  3000                           
  3001                           	psect	cstackBANK0
  3002  0020                     __pcstackBANK0:	
  3003  0020                     ??_abort_pending_transmissions:	
  3004  0020                     ??_txf_clear:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0020                     ??_read_register:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0x0
  3012  0020                     	ds	1
  3013  0021                     read_register@addr:	
  3014                           
  3015                           ; 1 bytes @ 0x1
  3016  0021                     	ds	1
  3017  0022                     ?_printf:	
  3018  0022                     abort_pending_transmissions@bytes_written:	
  3019                           ; 2 bytes @ 0x2
  3020                           
  3021  0022                     txf_clear@mask:	
  3022                           ; 1 bytes @ 0x2
  3023                           
  3024  0022                     printf@f:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027                           
  3028                           ; 2 bytes @ 0x2
  3029  0022                     	ds	1
  3030  0023                     txf_clear@bytes_written:	
  3031                           
  3032                           ; 1 bytes @ 0x3
  3033  0023                     	ds	1
  3034  0024                     txf_clear@n:	
  3035                           
  3036                           ; 1 bytes @ 0x4
  3037  0024                     	ds	12
  3038  0030                     ??_printf:	
  3039                           
  3040                           ; 1 bytes @ 0x10
  3041  0030                     	ds	4
  3042  0034                     _printf$636:	
  3043                           
  3044                           ; 2 bytes @ 0x14
  3045  0034                     	ds	2
  3046  0036                     printf@idx:	
  3047                           
  3048                           ; 1 bytes @ 0x16
  3049  0036                     	ds	1
  3050  0037                     printf@prec:	
  3051                           
  3052                           ; 1 bytes @ 0x17
  3053  0037                     	ds	1
  3054  0038                     printf@cp:	
  3055                           
  3056                           ; 2 bytes @ 0x18
  3057  0038                     	ds	2
  3058  003A                     printf@len:	
  3059                           
  3060                           ; 2 bytes @ 0x1A
  3061  003A                     	ds	2
  3062  003C                     printf@ap:	
  3063                           
  3064                           ; 1 bytes @ 0x1C
  3065  003C                     	ds	1
  3066  003D                     printf@val:	
  3067                           
  3068                           ; 2 bytes @ 0x1D
  3069  003D                     	ds	2
  3070  003F                     printf@flag:	
  3071                           
  3072                           ; 1 bytes @ 0x1F
  3073  003F                     	ds	1
  3074  0040                     printf@width:	
  3075                           
  3076                           ; 2 bytes @ 0x20
  3077  0040                     	ds	2
  3078  0042                     printf@c:	
  3079                           
  3080                           ; 1 bytes @ 0x22
  3081  0042                     	ds	1
  3082  0043                     ??_can_ope_mode:	
  3083  0043                     ??_can_dump_masks_and_filters:	
  3084                           ; 1 bytes @ 0x23
  3085                           
  3086  0043                     ??_can_dump_registers:	
  3087                           ; 1 bytes @ 0x23
  3088                           
  3089  0043                     ?_can_send:	
  3090                           ; 1 bytes @ 0x23
  3091                           
  3092  0043                     ?_receive_handler:	
  3093                           ; 1 bytes @ 0x23
  3094                           
  3095  0043                     can_send@dlc:	
  3096                           ; 1 bytes @ 0x23
  3097                           
  3098  0043                     receive_handler@sid:	
  3099                           ; 1 bytes @ 0x23
  3100                           
  3101                           
  3102                           ; 2 bytes @ 0x23
  3103  0043                     	ds	1
  3104  0044                     ??_can_send:	
  3105                           
  3106                           ; 1 bytes @ 0x24
  3107  0044                     	ds	1
  3108  0045                     receive_handler@buf:	
  3109  0045                     can_ope_mode@bytes_written:	
  3110                           ; 1 bytes @ 0x25
  3111                           
  3112                           
  3113                           ; 1 bytes @ 0x25
  3114  0045                     	ds	1
  3115  0046                     receive_handler@dlc:	
  3116  0046                     can_ope_mode@ope_mode:	
  3117                           ; 1 bytes @ 0x26
  3118                           
  3119                           
  3120                           ; 1 bytes @ 0x26
  3121  0046                     	ds	1
  3122  0047                     ?_can_init:	
  3123  0047                     ??_can_abort:	
  3124                           ; 1 bytes @ 0x27
  3125                           
  3126  0047                     ??_can_baudrate:	
  3127                           ; 1 bytes @ 0x27
  3128                           
  3129  0047                     ?_can_set_mask:	
  3130                           ; 1 bytes @ 0x27
  3131                           
  3132  0047                     ??_receive_handler:	
  3133                           ; 1 bytes @ 0x27
  3134                           
  3135  0047                     can_set_mask@n:	
  3136                           ; 1 bytes @ 0x27
  3137                           
  3138  0047                     can_init@receive_handler:	
  3139                           ; 1 bytes @ 0x27
  3140                           
  3141                           
  3142                           ; 2 bytes @ 0x27
  3143  0047                     	ds	1
  3144  0048                     can_send@len:	
  3145  0048                     can_abort@bytes_written:	
  3146                           ; 1 bytes @ 0x28
  3147                           
  3148  0048                     can_set_mask@mask:	
  3149                           ; 1 bytes @ 0x28
  3150                           
  3151                           
  3152                           ; 2 bytes @ 0x28
  3153  0048                     	ds	1
  3154  0049                     ??_can_init:	
  3155  0049                     can_send@bytes_written:	
  3156                           ; 1 bytes @ 0x29
  3157                           
  3158  0049                     can_baudrate@bpr:	
  3159                           ; 1 bytes @ 0x29
  3160                           
  3161                           
  3162                           ; 1 bytes @ 0x29
  3163  0049                     	ds	1
  3164  004A                     ??_can_set_mask:	
  3165  004A                     receive_handler@i:	
  3166                           ; 1 bytes @ 0x2A
  3167                           
  3168  004A                     can_send@status:	
  3169                           ; 1 bytes @ 0x2A
  3170                           
  3171  004A                     can_baudrate@mask:	
  3172                           ; 1 bytes @ 0x2A
  3173                           
  3174                           
  3175                           ; 1 bytes @ 0x2A
  3176  004A                     	ds	1
  3177  004B                     ??_receive:	
  3178  004B                     can_send@data_buf:	
  3179                           ; 1 bytes @ 0x2B
  3180                           
  3181  004B                     can_baudrate@bytes_written:	
  3182                           ; 1 bytes @ 0x2B
  3183                           
  3184                           
  3185                           ; 1 bytes @ 0x2B
  3186  004B                     	ds	1
  3187  004C                     can_send@i:	
  3188                           
  3189                           ; 1 bytes @ 0x2C
  3190  004C                     	ds	1
  3191  004D                     can_send@n:	
  3192  004D                     can_dump_masks_and_filters@h:	
  3193                           ; 1 bytes @ 0x2D
  3194                           
  3195                           
  3196                           ; 1 bytes @ 0x2D
  3197  004D                     	ds	1
  3198  004E                     can_dump_masks_and_filters@l:	
  3199                           
  3200                           ; 1 bytes @ 0x2E
  3201  004E                     	ds	1
  3202  004F                     can_dump_masks_and_filters@m:	
  3203                           
  3204                           ; 2 bytes @ 0x2F
  3205  004F                     	ds	1
  3206  0050                     receive@bytes_read:	
  3207  0050                     _can_set_mask$510:	
  3208                           ; 1 bytes @ 0x30
  3209                           
  3210                           
  3211                           ; 2 bytes @ 0x30
  3212  0050                     	ds	1
  3213  0051                     can_dump_masks_and_filters@i:	
  3214  0051                     receive@rx_buf:	
  3215                           ; 1 bytes @ 0x31
  3216                           
  3217                           
  3218                           ; 15 bytes @ 0x31
  3219  0051                     	ds	1
  3220  0052                     can_set_mask@cmd:	
  3221                           
  3222                           ; 1 bytes @ 0x32
  3223  0052                     	ds	1
  3224  0053                     can_set_mask@mask_sidh:	
  3225                           
  3226                           ; 1 bytes @ 0x33
  3227  0053                     	ds	1
  3228  0054                     can_set_mask@mask_sidl:	
  3229                           
  3230                           ; 1 bytes @ 0x34
  3231  0054                     	ds	12
  3232  0060                     receive@pbuf:	
  3233                           
  3234                           ; 1 bytes @ 0x40
  3235  0060                     	ds	1
  3236  0061                     receive@id:	
  3237                           
  3238                           ; 2 bytes @ 0x41
  3239  0061                     	ds	2
  3240  0063                     receive@dlc:	
  3241                           
  3242                           ; 1 bytes @ 0x43
  3243  0063                     	ds	1
  3244  0064                     receive@n:	
  3245                           
  3246                           ; 1 bytes @ 0x44
  3247  0064                     	ds	1
  3248  0065                     ??_can_status_check:	
  3249                           
  3250                           ; 1 bytes @ 0x45
  3251  0065                     	ds	2
  3252  0067                     can_status_check@bytes_written:	
  3253                           
  3254                           ; 1 bytes @ 0x47
  3255  0067                     	ds	1
  3256  0068                     can_status_check@status:	
  3257                           
  3258                           ; 1 bytes @ 0x48
  3259  0068                     	ds	1
  3260  0069                     ??_main:	
  3261                           
  3262                           ; 1 bytes @ 0x49
  3263  0069                     	ds	2
  3264                           
  3265                           	psect	maintext
  3266  03A0                     __pmaintext:	
  3267 ;;
  3268 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3269 ;;
  3270 ;; *************** function _main *****************
  3271 ;; Defined at:
  3272 ;;		line 48 in file "main.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  status          1   18[BANK1 ] unsigned char 
  3277 ;;  buf            16    0[BANK1 ] unsigned char [16]
  3278 ;;  mask            2   19[BANK1 ] unsigned int 
  3279 ;;  idx             1   25[BANK1 ] unsigned char 
  3280 ;;  cmd             1   24[BANK1 ] unsigned char 
  3281 ;;  c               1   23[BANK1 ] unsigned char 
  3282 ;;  n               1   22[BANK1 ] unsigned char 
  3283 ;;  echo_back       1   21[BANK1 ] unsigned char 
  3284 ;;  bpr             1   17[BANK1 ] unsigned char 
  3285 ;;  sid             1   16[BANK1 ] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : B1F/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3298 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0
  3299 ;;Total ram usage:       28 bytes
  3300 ;; Hardware stack levels required when called:    6
  3301 ;; This function calls:
  3302 ;;		_EUSART_Read
  3303 ;;		_SYSTEM_Initialize
  3304 ;;		_atoi
  3305 ;;		_can_abort
  3306 ;;		_can_baudrate
  3307 ;;		_can_dump_masks_and_filters
  3308 ;;		_can_dump_registers
  3309 ;;		_can_init
  3310 ;;		_can_logging_mode
  3311 ;;		_can_ope_mode
  3312 ;;		_can_send
  3313 ;;		_can_set_mask
  3314 ;;		_can_set_sid
  3315 ;;		_can_status_check
  3316 ;;		_printf
  3317 ;; This function is called by:
  3318 ;;		Startup code after reset
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _main
  3324  03A0                     _main:	
  3325                           
  3326                           ;main.c: 50: LATCbits.LATC3 = 1;
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3330  03A0  0022               	movlb	2	; select bank2
  3331  03A1  158E               	bsf	14,3	;volatile
  3332                           
  3333                           ;main.c: 52: uint8_t buf[16];
  3334                           ;main.c: 53: bool echo_back = 0;
  3335  03A2  0021               	movlb	1	; select bank1
  3336  03A3  01D9               	clrf	main@echo_back^(0+128)
  3337                           
  3338                           ;main.c: 54: uint8_t c, idx;
  3339                           ;main.c: 56: uint8_t cmd, sid, n, bpr;
  3340                           ;main.c: 57: uint16_t mask;
  3341                           ;main.c: 59: _delay((unsigned long)((100)*(32000000/4000.0)));
  3342  03A4  3005               	movlw	5
  3343  03A5  0020               	movlb	0	; select bank0
  3344  03A6  00EA               	movwf	??_main+1
  3345  03A7  300F               	movlw	15
  3346  03A8  00E9               	movwf	??_main
  3347  03A9  30F1               	movlw	241
  3348  03AA                     u2637:	
  3349  03AA  0B89               	decfsz	9,f
  3350  03AB  2BAA               	goto	u2637
  3351  03AC  0BE9               	decfsz	??_main,f
  3352  03AD  2BAA               	goto	u2637
  3353  03AE  0BEA               	decfsz	??_main+1,f
  3354  03AF  2BAA               	goto	u2637
  3355                           
  3356                           ;main.c: 61: SYSTEM_Initialize();
  3357  03B0  318B  233F  3183   	fcall	_SYSTEM_Initialize
  3358                           
  3359                           ;main.c: 66: output_format.with_sid = 0;
  3360  03B3  0020               	movlb	0	; select bank0
  3361  03B4  01ED               	clrf	_output_format
  3362                           
  3363                           ;main.c: 67: output_format.hex_output = 0;
  3364  03B5  01EE               	clrf	_output_format+1
  3365                           
  3366                           ;main.c: 68: can_init(receive_handler);
  3367  03B6  3016               	movlw	low _receive_handler
  3368  03B7  00C7               	movwf	can_init@receive_handler
  3369  03B8  300D               	movlw	high _receive_handler
  3370  03B9  00C8               	movwf	can_init@receive_handler+1
  3371  03BA  318E  2618  3183   	fcall	_can_init
  3372  03BD                     L1:	
  3373                           
  3374                           ;main.c: 70: idx = 0;
  3375  03BD  0021               	movlb	1	; select bank1
  3376  03BE  01DD               	clrf	main@idx^(0+128)
  3377  03BF                     l2736:	
  3378                           ;main.c: 72: while (1)
  3379                           
  3380                           
  3381                           ;main.c: 73: {
  3382                           ;main.c: 74: bool status = can_status_check();
  3383  03BF  318D  256B  3183   	fcall	_can_status_check
  3384  03C2  0020               	movlb	0	; select bank0
  3385  03C3  00E9               	movwf	??_main
  3386  03C4  0869               	movf	??_main,w
  3387  03C5  0021               	movlb	1	; select bank1
  3388  03C6  00D6               	movwf	main@status^(0+128)
  3389                           
  3390                           ;main.c: 75: if (status) {
  3391  03C7  0856               	movf	main@status^(0+128),w
  3392  03C8  1903               	btfsc	3,2
  3393  03C9  2BCD               	goto	l209
  3394                           
  3395                           ;main.c: 76: LATCbits.LATC3 = 0;
  3396  03CA  0022               	movlb	2	; select bank2
  3397  03CB  118E               	bcf	14,3	;volatile
  3398                           
  3399                           ;main.c: 77: } else {
  3400  03CC  2BCF               	goto	l210
  3401  03CD                     l209:	
  3402                           
  3403                           ;main.c: 78: LATCbits.LATC3 = 1;
  3404  03CD  0022               	movlb	2	; select bank2
  3405  03CE  158E               	bsf	14,3	;volatile
  3406  03CF                     l210:	
  3407                           
  3408                           ;main.c: 79: }
  3409                           ;main.c: 80: if ((PIR1bits.RCIF)) {
  3410  03CF  0020               	movlb	0	; select bank0
  3411  03D0  1E91               	btfss	17,5	;volatile
  3412  03D1  2BBF               	goto	l2736
  3413                           
  3414                           ;main.c: 81: c = EUSART_Read();
  3415  03D2  318B  2312  3183   	fcall	_EUSART_Read
  3416  03D5  0020               	movlb	0	; select bank0
  3417  03D6  00E9               	movwf	??_main
  3418  03D7  0869               	movf	??_main,w
  3419  03D8  0021               	movlb	1	; select bank1
  3420  03D9  00DB               	movwf	main@c^(0+128)
  3421                           
  3422                           ;main.c: 82: if (echo_back) printf("%c", c);
  3423  03DA  0859               	movf	main@echo_back^(0+128),w
  3424  03DB  1903               	btfsc	3,2
  3425  03DC  2BEE               	goto	l2748
  3426  03DD  30B1               	movlw	low (STR_6| (0+32768))
  3427  03DE  0020               	movlb	0	; select bank0
  3428  03DF  00A2               	movwf	printf@f
  3429  03E0  3094               	movlw	high (STR_6| (0+32768))
  3430  03E1  00A3               	movwf	printf@f+1
  3431  03E2  0021               	movlb	1	; select bank1
  3432  03E3  085B               	movf	main@c^(0+128),w
  3433  03E4  0020               	movlb	0	; select bank0
  3434  03E5  00E9               	movwf	??_main
  3435  03E6  01EA               	clrf	??_main+1
  3436  03E7  0869               	movf	??_main,w
  3437  03E8  00A4               	movwf	?_printf+2
  3438  03E9  086A               	movf	??_main+1,w
  3439  03EA  00A5               	movwf	?_printf+3
  3440  03EB  3185  25A5  3183   	fcall	_printf
  3441  03EE                     l2748:	
  3442                           
  3443                           ;main.c: 84: buf[idx] = c;
  3444  03EE  0021               	movlb	1	; select bank1
  3445  03EF  085B               	movf	main@c^(0+128),w
  3446  03F0  0020               	movlb	0	; select bank0
  3447  03F1  00E9               	movwf	??_main
  3448  03F2  0021               	movlb	1	; select bank1
  3449  03F3  085D               	movf	main@idx^(0+128),w
  3450  03F4  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3451  03F5  0086               	movwf	6
  3452  03F6  0187               	clrf	7
  3453  03F7  0020               	movlb	0	; select bank0
  3454  03F8  0869               	movf	??_main,w
  3455  03F9  0081               	movwf	1
  3456                           
  3457                           ;main.c: 87: if (c == '\n') {
  3458  03FA  300A               	movlw	10
  3459  03FB  0021               	movlb	1	; select bank1
  3460  03FC  065B               	xorwf	main@c^(0+128),w
  3461  03FD  1D03               	btfss	3,2
  3462  03FE  2D8C               	goto	l2844
  3463                           
  3464                           ;main.c: 88: buf[idx] = '\0';
  3465  03FF  085D               	movf	main@idx^(0+128),w
  3466  0400  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3467  0401  0086               	movwf	6
  3468  0402  0187               	clrf	7
  3469  0403  0181               	clrf	1
  3470                           
  3471                           ;main.c: 89: if (buf[0] == '@') {
  3472  0404  3040               	movlw	64
  3473  0405  0644               	xorwf	main@buf^(0+128),w
  3474  0406  1D03               	btfss	3,2
  3475  0407  2D82               	goto	l2840
  3476                           
  3477                           ;main.c: 90: cmd = buf[1];
  3478  0408  0845               	movf	(main@buf^(0+128)+1),w
  3479  0409  0020               	movlb	0	; select bank0
  3480  040A  00E9               	movwf	??_main
  3481  040B  0869               	movf	??_main,w
  3482  040C  0021               	movlb	1	; select bank1
  3483  040D  00DC               	movwf	main@cmd^(0+128)
  3484                           
  3485                           ;main.c: 91: switch(cmd) {
  3486  040E  2D5D               	goto	l2838
  3487  040F                     l2758:	
  3488                           ;main.c: 92: case 'i':
  3489                           
  3490                           
  3491                           ;main.c: 93: sid = (uint8_t)atoi(&buf[2]);
  3492  040F  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3493  0410  3180  2010  3183   	fcall	_atoi
  3494  0413  0876               	movf	?_atoi,w
  3495  0414  0020               	movlb	0	; select bank0
  3496  0415  00E9               	movwf	??_main
  3497  0416  0869               	movf	??_main,w
  3498  0417  0021               	movlb	1	; select bank1
  3499  0418  00D4               	movwf	main@sid^(0+128)
  3500                           
  3501                           ;main.c: 94: can_set_sid(sid);
  3502  0419  0854               	movf	main@sid^(0+128),w
  3503  041A  0020               	movlb	0	; select bank0
  3504  041B  00E9               	movwf	??_main
  3505  041C  01EA               	clrf	??_main+1
  3506  041D  0869               	movf	??_main,w
  3507  041E  00F0               	movwf	can_set_sid@can_node
  3508  041F  086A               	movf	??_main+1,w
  3509  0420  00F1               	movwf	can_set_sid@can_node+1
  3510  0421  318B  23BD  3183   	fcall	_can_set_sid
  3511                           
  3512                           ;main.c: 95: break;
  3513  0424  2BBD               	goto	L1
  3514  0425                     l2762:	
  3515                           ;main.c: 96: case 'v':
  3516                           
  3517                           
  3518                           ;main.c: 97: if (buf[2] == 'd') {
  3519  0425  3064               	movlw	100
  3520  0426  0021               	movlb	1	; select bank1
  3521  0427  0646               	xorwf	(main@buf^(0+128)+2),w
  3522  0428  1D03               	btfss	3,2
  3523  0429  2C2E               	goto	l2768
  3524                           
  3525                           ;main.c: 98: can_logging_mode(1, 1);
  3526  042A  01F0               	clrf	can_logging_mode@verbose
  3527  042B  0AF0               	incf	can_logging_mode@verbose,f
  3528  042C  3001               	movlw	1
  3529  042D  2C35               	goto	L2
  3530  042E                     l2768:	
  3531                           ;main.c: 100: } else if (buf[2] == 'v') {
  3532                           
  3533                           ;main.c: 99: echo_back = 1;
  3534                           
  3535  042E  3076               	movlw	118
  3536  042F  0646               	xorwf	(main@buf^(0+128)+2),w
  3537  0430  1D03               	btfss	3,2
  3538  0431  2C3C               	goto	l2774
  3539                           
  3540                           ;main.c: 101: can_logging_mode(0, 1);
  3541  0432  01F0               	clrf	can_logging_mode@verbose
  3542  0433  0AF0               	incf	can_logging_mode@verbose,f
  3543  0434  3000               	movlw	0
  3544  0435                     L2:	
  3545  0435  318B  2326  3183   	fcall	_can_logging_mode
  3546                           
  3547                           ;main.c: 102: echo_back = 1;
  3548  0438  0021               	movlb	1	; select bank1
  3549  0439  01D9               	clrf	main@echo_back^(0+128)
  3550  043A  0AD9               	incf	main@echo_back^(0+128),f
  3551                           
  3552                           ;main.c: 103: } else if (buf[2] == 'n') {
  3553  043B  2BBD               	goto	L1
  3554  043C                     l2774:	
  3555  043C  306E               	movlw	110
  3556  043D  0646               	xorwf	(main@buf^(0+128)+2),w
  3557  043E  1D03               	btfss	3,2
  3558  043F  2BBD               	goto	L1
  3559                           
  3560                           ;main.c: 104: can_logging_mode(0, 0);
  3561  0440  01F0               	clrf	can_logging_mode@verbose
  3562  0441  3000               	movlw	0
  3563  0442  318B  2326  3183   	fcall	_can_logging_mode
  3564                           
  3565                           ;main.c: 105: echo_back = 0;
  3566  0445  0021               	movlb	1	; select bank1
  3567  0446  01D9               	clrf	main@echo_back^(0+128)
  3568                           
  3569                           ;main.c: 106: }
  3570                           ;main.c: 107: break;
  3571  0447  2BBD               	goto	L1
  3572  0448                     l2780:	
  3573                           ;main.c: 108: case 'o':
  3574                           
  3575                           
  3576                           ;main.c: 109: if (buf[2] == 'l') {
  3577  0448  306C               	movlw	108
  3578  0449  0646               	xorwf	(main@buf^(0+128)+2),w
  3579  044A  1D03               	btfss	3,2
  3580  044B  2C4E               	goto	l2784
  3581                           
  3582                           ;main.c: 110: can_ope_mode(0b01000000u);
  3583  044C  3040               	movlw	64
  3584  044D  2C54               	goto	L3
  3585  044E                     l2784:	
  3586                           ;main.c: 111: } else if (buf[2] == 'n') {
  3587                           
  3588  044E  306E               	movlw	110
  3589  044F  0021               	movlb	1	; select bank1
  3590  0450  0646               	xorwf	(main@buf^(0+128)+2),w
  3591  0451  1D03               	btfss	3,2
  3592  0452  2C57               	goto	l2788
  3593                           
  3594                           ;main.c: 112: can_ope_mode(0b00000000u);
  3595  0453  3000               	movlw	0
  3596  0454                     L3:	
  3597  0454  318D  25C1  3183   	fcall	_can_ope_mode
  3598  0457                     l2788:	
  3599                           
  3600                           ;main.c: 113: }
  3601                           ;main.c: 114: if (buf[3] == '\0') {
  3602  0457  0021               	movlb	1	; select bank1
  3603  0458  0847               	movf	(main@buf^(0+128)+3),w
  3604  0459  1D03               	btfss	3,2
  3605  045A  2C5E               	goto	l2792
  3606                           
  3607                           ;main.c: 115: output_format.with_sid = 0;
  3608  045B  0020               	movlb	0	; select bank0
  3609  045C  01ED               	clrf	_output_format
  3610  045D  2C69               	goto	l2798
  3611  045E                     l2792:	
  3612                           ;main.c: 117: } else if (buf[3] == 's' && buf[4] == '\0') {
  3613                           
  3614                           ;main.c: 116: output_format.hex_output = 0;
  3615                           
  3616  045E  3073               	movlw	115
  3617  045F  0021               	movlb	1	; select bank1
  3618  0460  0647               	xorwf	(main@buf^(0+128)+3),w
  3619  0461  1D03               	btfss	3,2
  3620  0462  2C6B               	goto	l2800
  3621  0463  0848               	movf	(main@buf^(0+128)+4),w
  3622  0464  1D03               	btfss	3,2
  3623  0465  2C6B               	goto	l2800
  3624                           
  3625                           ;main.c: 118: output_format.with_sid = 1;
  3626  0466  0020               	movlb	0	; select bank0
  3627  0467  01ED               	clrf	_output_format
  3628  0468  0AED               	incf	_output_format,f
  3629  0469                     l2798:	
  3630                           
  3631                           ;main.c: 119: output_format.hex_output = 0;
  3632  0469  01EE               	clrf	_output_format+1
  3633                           
  3634                           ;main.c: 120: } else if (buf[3] == 'h' && buf[4] == '\0') {
  3635  046A  2BBD               	goto	L1
  3636  046B                     l2800:	
  3637  046B  3068               	movlw	104
  3638  046C  0021               	movlb	1	; select bank1
  3639  046D  0647               	xorwf	(main@buf^(0+128)+3),w
  3640  046E  1D03               	btfss	3,2
  3641  046F  2BBD               	goto	L1
  3642  0470  0848               	movf	(main@buf^(0+128)+4),w
  3643  0471  1D03               	btfss	3,2
  3644  0472  2BBD               	goto	L1
  3645                           
  3646                           ;main.c: 121: output_format.with_sid = 0;
  3647  0473  0020               	movlb	0	; select bank0
  3648  0474  01ED               	clrf	_output_format
  3649                           
  3650                           ;main.c: 122: output_format.hex_output = 1;
  3651  0475  01EE               	clrf	_output_format+1
  3652  0476  0AEE               	incf	_output_format+1,f
  3653                           
  3654                           ;main.c: 123: }
  3655                           ;main.c: 124: break;
  3656  0477  2BBD               	goto	L1
  3657  0478                     l2808:	
  3658                           ;main.c: 125: case 'b':
  3659                           
  3660                           
  3661                           ;main.c: 126: can_abort();
  3662  0478  318B  234E  3183   	fcall	_can_abort
  3663                           
  3664                           ;main.c: 127: bpr = (uint8_t)atoi(&buf[2]);
  3665  047B  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3666  047C  3180  2010  3183   	fcall	_atoi
  3667  047F  0876               	movf	?_atoi,w
  3668  0480  0020               	movlb	0	; select bank0
  3669  0481  00E9               	movwf	??_main
  3670  0482  0869               	movf	??_main,w
  3671  0483  0021               	movlb	1	; select bank1
  3672  0484  00D5               	movwf	main@bpr^(0+128)
  3673                           
  3674                           ;main.c: 128: can_baudrate(bpr);
  3675  0485  0855               	movf	main@bpr^(0+128),w
  3676  0486  318C  2461  3183   	fcall	_can_baudrate
  3677                           
  3678                           ;main.c: 129: break;
  3679  0489  2BBD               	goto	L1
  3680  048A                     l2814:	
  3681                           ;main.c: 130: case 'm':
  3682                           
  3683                           
  3684                           ;main.c: 131: case 'f':
  3685                           ;main.c: 132: n = buf[2] - 0x30u;
  3686  048A  0021               	movlb	1	; select bank1
  3687  048B  0846               	movf	(main@buf^(0+128)+2),w
  3688  048C  3ED0               	addlw	208
  3689  048D  0020               	movlb	0	; select bank0
  3690  048E  00E9               	movwf	??_main
  3691  048F  0869               	movf	??_main,w
  3692  0490  0021               	movlb	1	; select bank1
  3693  0491  00DA               	movwf	main@n^(0+128)
  3694                           
  3695                           ;main.c: 133: mask = (uint16_t)atoi(&buf[3]);
  3696  0492  30C7               	movlw	(low ((main@buf| 0+3)))& (0+255)
  3697  0493  3180  2010  3183   	fcall	_atoi
  3698  0496  0877               	movf	?_atoi+1,w
  3699  0497  0021               	movlb	1	; select bank1
  3700  0498  00D8               	movwf	(main@mask+1)^(0+128)
  3701  0499  0876               	movf	?_atoi,w
  3702  049A  00D7               	movwf	main@mask^(0+128)
  3703                           
  3704                           ;main.c: 134: if (cmd == 'm') {
  3705  049B  306D               	movlw	109
  3706  049C  065C               	xorwf	main@cmd^(0+128),w
  3707  049D  1D03               	btfss	3,2
  3708  049E  2CB1               	goto	l2822
  3709                           
  3710                           ;main.c: 135: can_set_mask(0u, n, mask);
  3711  049F  085A               	movf	main@n^(0+128),w
  3712  04A0  0020               	movlb	0	; select bank0
  3713  04A1  00E9               	movwf	??_main
  3714  04A2  0869               	movf	??_main,w
  3715  04A3  00C7               	movwf	can_set_mask@n
  3716  04A4  0021               	movlb	1	; select bank1
  3717  04A5  0858               	movf	(main@mask+1)^(0+128),w
  3718  04A6  0020               	movlb	0	; select bank0
  3719  04A7  00C9               	movwf	can_set_mask@mask+1
  3720  04A8  0021               	movlb	1	; select bank1
  3721  04A9  0857               	movf	main@mask^(0+128),w
  3722  04AA  0020               	movlb	0	; select bank0
  3723  04AB  00C8               	movwf	can_set_mask@mask
  3724  04AC  3000               	movlw	0
  3725  04AD  318E  26A6  3183   	fcall	_can_set_mask
  3726                           
  3727                           ;main.c: 136: } else if (cmd == 'f') {
  3728  04B0  2BBD               	goto	L1
  3729  04B1                     l2822:	
  3730  04B1  3066               	movlw	102
  3731  04B2  0021               	movlb	1	; select bank1
  3732  04B3  065C               	xorwf	main@cmd^(0+128),w
  3733  04B4  1D03               	btfss	3,2
  3734  04B5  2BBD               	goto	L1
  3735                           
  3736                           ;main.c: 137: can_set_mask(1u, n, mask);
  3737  04B6  085A               	movf	main@n^(0+128),w
  3738  04B7  0020               	movlb	0	; select bank0
  3739  04B8  00E9               	movwf	??_main
  3740  04B9  0869               	movf	??_main,w
  3741  04BA  00C7               	movwf	can_set_mask@n
  3742  04BB  0021               	movlb	1	; select bank1
  3743  04BC  0858               	movf	(main@mask+1)^(0+128),w
  3744  04BD  0020               	movlb	0	; select bank0
  3745  04BE  00C9               	movwf	can_set_mask@mask+1
  3746  04BF  0021               	movlb	1	; select bank1
  3747  04C0  0857               	movf	main@mask^(0+128),w
  3748  04C1  0020               	movlb	0	; select bank0
  3749  04C2  00C8               	movwf	can_set_mask@mask
  3750  04C3  3001               	movlw	1
  3751  04C4  318E  26A6  3183   	fcall	_can_set_mask
  3752                           
  3753                           ;main.c: 138: }
  3754                           ;main.c: 139: break;
  3755  04C7  2BBD               	goto	L1
  3756  04C8                     l2826:	
  3757                           ;main.c: 140: case 'a':
  3758                           
  3759                           
  3760                           ;main.c: 141: can_abort();
  3761  04C8  318B  234E  3183   	fcall	_can_abort
  3762                           
  3763                           ;main.c: 142: break;
  3764  04CB  2BBD               	goto	L1
  3765  04CC                     l2828:	
  3766                           ;main.c: 143: case 'F':
  3767                           
  3768                           
  3769                           ;main.c: 144: can_dump_masks_and_filters();
  3770  04CC  3180  2077  3183   	fcall	_can_dump_masks_and_filters
  3771                           
  3772                           ;main.c: 145: break;
  3773  04CF  2BBD               	goto	L1
  3774  04D0                     l2830:	
  3775                           ;main.c: 146: case 'D':
  3776                           
  3777                           
  3778                           ;main.c: 147: can_dump_registers();
  3779  04D0  3181  2143  3183   	fcall	_can_dump_registers
  3780                           
  3781                           ;main.c: 148: break;
  3782  04D3  2BBD               	goto	L1
  3783  04D4                     l2832:	
  3784                           ;main.c: 149: case '@':
  3785                           
  3786                           
  3787                           ;main.c: 150: can_send(&buf[1], idx - 1u);
  3788  04D4  0021               	movlb	1	; select bank1
  3789  04D5  085D               	movf	main@idx^(0+128),w
  3790  04D6  3EFF               	addlw	255
  3791  04D7  0020               	movlb	0	; select bank0
  3792  04D8  00E9               	movwf	??_main
  3793  04D9  0869               	movf	??_main,w
  3794  04DA  00C3               	movwf	can_send@dlc
  3795  04DB  30C5               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3796  04DC  3182  2253  3183   	fcall	_can_send
  3797                           
  3798                           ;main.c: 151: break;
  3799  04DF  2BBD               	goto	L1
  3800  04E0                     l2834:	
  3801                           ;main.c: 152: case 'h':
  3802                           
  3803                           
  3804                           ;main.c: 153: printf("/// UART2CAN HELP (version %s) ///\n", "0.13  March 23, 2018");
  3805  04E0  3013               	movlw	low (STR_7| (0+32768))
  3806  04E1  0020               	movlb	0	; select bank0
  3807  04E2  00A2               	movwf	printf@f
  3808  04E3  3092               	movlw	high (STR_7| (0+32768))
  3809  04E4  00A3               	movwf	printf@f+1
  3810  04E5  30DE               	movlw	low (STR_8| (0+32768))
  3811  04E6  00A4               	movwf	low ((?_printf| 0+2))
  3812  04E7  3092               	movlw	high (STR_8| (0+32768))
  3813  04E8  00A5               	movwf	(low ((?_printf| 0+2))+1)
  3814  04E9  3185  25A5  3183   	fcall	_printf
  3815                           
  3816                           ;main.c: 154: printf("[Set standard identifier] @i<standard identifier>\n");
  3817  04EC  30E6               	movlw	low (STR_9| (0+32768))
  3818  04ED  0020               	movlb	0	; select bank0
  3819  04EE  00A2               	movwf	printf@f
  3820  04EF  3090               	movlw	high (STR_9| (0+32768))
  3821  04F0  00A3               	movwf	printf@f+1
  3822  04F1  3185  25A5  3183   	fcall	_printf
  3823                           
  3824                           ;main.c: 155: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3825  04F4  3002               	movlw	low (STR_10| (0+32768))
  3826  04F5  0020               	movlb	0	; select bank0
  3827  04F6  00A2               	movwf	printf@f
  3828  04F7  3090               	movlw	high (STR_10| (0+32768))
  3829  04F8  00A3               	movwf	printf@f+1
  3830  04F9  3185  25A5  3183   	fcall	_printf
  3831                           
  3832                           ;main.c: 156: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3833  04FC  30B0               	movlw	low (STR_11| (0+32768))
  3834  04FD  0020               	movlb	0	; select bank0
  3835  04FE  00A2               	movwf	printf@f
  3836  04FF  3090               	movlw	high (STR_11| (0+32768))
  3837  0500  00A3               	movwf	printf@f+1
  3838  0501  3185  25A5  3183   	fcall	_printf
  3839                           
  3840                           ;main.c: 157: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  3841  0504  303D               	movlw	low (STR_12| (0+32768))
  3842  0505  0020               	movlb	0	; select bank0
  3843  0506  00A2               	movwf	printf@f
  3844  0507  3090               	movlw	high (STR_12| (0+32768))
  3845  0508  00A3               	movwf	printf@f+1
  3846  0509  3185  25A5  3183   	fcall	_printf
  3847                           
  3848                           ;main.c: 158: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3849  050C  30C7               	movlw	low (STR_13| (0+32768))
  3850  050D  0020               	movlb	0	; select bank0
  3851  050E  00A2               	movwf	printf@f
  3852  050F  3091               	movlw	high (STR_13| (0+32768))
  3853  0510  00A3               	movwf	printf@f+1
  3854  0511  3185  25A5  3183   	fcall	_printf
  3855                           
  3856                           ;main.c: 159: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3857  0514  309D               	movlw	low (STR_14| (0+32768))
  3858  0515  0020               	movlb	0	; select bank0
  3859  0516  00A2               	movwf	printf@f
  3860  0517  3091               	movlw	high (STR_14| (0+32768))
  3861  0518  00A3               	movwf	printf@f+1
  3862  0519  3185  25A5  3183   	fcall	_printf
  3863                           
  3864                           ;main.c: 160: printf("[Set baud rate] @b<bpr>\n");
  3865  051C  306E               	movlw	low (STR_15| (0+32768))
  3866  051D  0020               	movlb	0	; select bank0
  3867  051E  00A2               	movwf	printf@f
  3868  051F  3092               	movlw	high (STR_15| (0+32768))
  3869  0520  00A3               	movwf	printf@f+1
  3870  0521  3185  25A5  3183   	fcall	_printf
  3871                           
  3872                           ;main.c: 161: printf("[Abort all pending transmissions] @a\n");
  3873  0524  30ED               	movlw	low (STR_16| (0+32768))
  3874  0525  0020               	movlb	0	; select bank0
  3875  0526  00A2               	movwf	printf@f
  3876  0527  3091               	movlw	high (STR_16| (0+32768))
  3877  0528  00A3               	movwf	printf@f+1
  3878  0529  3185  25A5  3183   	fcall	_printf
  3879                           
  3880                           ;main.c: 162: printf("[Dump masks and filters] @F\n");
  3881  052C  3037               	movlw	low (STR_17| (0+32768))
  3882  052D  0020               	movlb	0	; select bank0
  3883  052E  00A2               	movwf	printf@f
  3884  052F  3092               	movlw	high (STR_17| (0+32768))
  3885  0530  00A3               	movwf	printf@f+1
  3886  0531  3185  25A5  3183   	fcall	_printf
  3887                           
  3888                           ;main.c: 163: printf("[Dump registers] @D\n");
  3889  0534  30C9               	movlw	low (STR_18| (0+32768))
  3890  0535  0020               	movlb	0	; select bank0
  3891  0536  00A2               	movwf	printf@f
  3892  0537  3092               	movlw	high (STR_18| (0+32768))
  3893  0538  00A3               	movwf	printf@f+1
  3894  0539  3185  25A5  3183   	fcall	_printf
  3895                           
  3896                           ;main.c: 164: printf("[Send message] <message>\n");
  3897  053C  3054               	movlw	low (STR_19| (0+32768))
  3898  053D  0020               	movlb	0	; select bank0
  3899  053E  00A2               	movwf	printf@f
  3900  053F  3092               	movlw	high (STR_19| (0+32768))
  3901  0540  00A3               	movwf	printf@f+1
  3902  0541  3185  25A5  3183   	fcall	_printf
  3903                           
  3904                           ;main.c: 165: printf("[Send message beginning with \'@\' character] @<@message>\n");
  3905  0544  3077               	movlw	low (STR_20| (0+32768))
  3906  0545  0020               	movlb	0	; select bank0
  3907  0546  00A2               	movwf	printf@f
  3908  0547  3090               	movlw	high (STR_20| (0+32768))
  3909  0548  00A3               	movwf	printf@f+1
  3910  0549  3185  25A5  3183   	fcall	_printf
  3911                           
  3912                           ;main.c: 166: printf("[Receive message] <message> will be output\n");
  3913  054C  3071               	movlw	low (STR_21| (0+32768))
  3914  054D  0020               	movlb	0	; select bank0
  3915  054E  00A2               	movwf	printf@f
  3916  054F  3091               	movlw	high (STR_21| (0+32768))
  3917  0550  00A3               	movwf	printf@f+1
  3918  0551  3185  25A5  3183   	fcall	_printf
  3919                           
  3920                           ;main.c: 167: printf("[Show this help]: @h\n");
  3921  0554  309E               	movlw	low (STR_22| (0+32768))
  3922  0555  0020               	movlb	0	; select bank0
  3923  0556  00A2               	movwf	printf@f
  3924  0557  3092               	movlw	high (STR_22| (0+32768))
  3925  0558  00A3               	movwf	printf@f+1
  3926  0559  3185  25A5  3183   	fcall	_printf
  3927                           
  3928                           ;main.c: 169: }
  3929                           
  3930                           ;main.c: 168: break;
  3931  055C  2BBD               	goto	L1
  3932  055D                     l2838:	
  3933  055D  0021               	movlb	1	; select bank1
  3934  055E  085C               	movf	main@cmd^(0+128),w
  3935                           
  3936                           ; Switch size 1, requested type "space"
  3937                           ; Number of cases is 11, Range of values is 64 to 118
  3938                           ; switch strategies available:
  3939                           ; Name         Instructions Cycles
  3940                           ; simple_byte           34    18 (average)
  3941                           ; direct_byte          119     9 (fixed)
  3942                           ; jumptable            263     9 (fixed)
  3943                           ;	Chosen strategy is simple_byte
  3944  055F  3A40               	xorlw	64	; case 64
  3945  0560  1903               	skipnz
  3946  0561  2CD4               	goto	l2832
  3947  0562  3A04               	xorlw	4	; case 68
  3948  0563  1903               	skipnz
  3949  0564  2CD0               	goto	l2830
  3950  0565  3A02               	xorlw	2	; case 70
  3951  0566  1903               	skipnz
  3952  0567  2CCC               	goto	l2828
  3953  0568  3A27               	xorlw	39	; case 97
  3954  0569  1903               	skipnz
  3955  056A  2CC8               	goto	l2826
  3956  056B  3A03               	xorlw	3	; case 98
  3957  056C  1903               	skipnz
  3958  056D  2C78               	goto	l2808
  3959  056E  3A04               	xorlw	4	; case 102
  3960  056F  1903               	skipnz
  3961  0570  2C8A               	goto	l2814
  3962  0571  3A0E               	xorlw	14	; case 104
  3963  0572  1903               	skipnz
  3964  0573  2CE0               	goto	l2834
  3965  0574  3A01               	xorlw	1	; case 105
  3966  0575  1903               	skipnz
  3967  0576  2C0F               	goto	l2758
  3968  0577  3A04               	xorlw	4	; case 109
  3969  0578  1903               	skipnz
  3970  0579  2C8A               	goto	l2814
  3971  057A  3A02               	xorlw	2	; case 111
  3972  057B  1903               	skipnz
  3973  057C  2C48               	goto	l2780
  3974  057D  3A19               	xorlw	25	; case 118
  3975  057E  1903               	skipnz
  3976  057F  2C25               	goto	l2762
  3977  0580  2D8B               	goto	l2842
  3978                           
  3979                           ;main.c: 170: } else {
  3980  0581  2BBD               	goto	L1
  3981  0582                     l2840:	
  3982                           
  3983                           ;main.c: 171: can_send(buf, idx);
  3984  0582  085D               	movf	main@idx^(0+128),w
  3985  0583  0020               	movlb	0	; select bank0
  3986  0584  00E9               	movwf	??_main
  3987  0585  0869               	movf	??_main,w
  3988  0586  00C3               	movwf	can_send@dlc
  3989  0587  30C4               	movlw	(low (main@buf| 0))& (0+255)
  3990  0588  3182  2253  3183   	fcall	_can_send
  3991  058B                     l2842:	
  3992  058B  2BBD               	goto	L1
  3993  058C                     l2844:	
  3994                           ;main.c: 175: } else if (++idx > 7) {
  3995                           
  3996                           ;main.c: 172: }
  3997                           ;main.c: 173: idx = 0;
  3998                           
  3999  058C  3001               	movlw	1
  4000  058D  0020               	movlb	0	; select bank0
  4001  058E  00E9               	movwf	??_main
  4002  058F  0869               	movf	??_main,w
  4003  0590  0021               	movlb	1	; select bank1
  4004  0591  07DD               	addwf	main@idx^(0+128),f
  4005  0592  3008               	movlw	8
  4006  0593  025D               	subwf	main@idx^(0+128),w
  4007  0594  1C03               	skipc
  4008  0595  2BBF               	goto	l2736
  4009                           
  4010                           ;main.c: 176: buf[idx] = '\0';
  4011  0596  085D               	movf	main@idx^(0+128),w
  4012  0597  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  4013  0598  0086               	movwf	6
  4014  0599  0187               	clrf	7
  4015  059A  0181               	clrf	1
  4016                           
  4017                           ;main.c: 177: can_send(buf, idx);
  4018  059B  085D               	movf	main@idx^(0+128),w
  4019  059C  0020               	movlb	0	; select bank0
  4020  059D  00E9               	movwf	??_main
  4021  059E  0869               	movf	??_main,w
  4022  059F  00C3               	movwf	can_send@dlc
  4023  05A0  30C4               	movlw	(low (main@buf| 0))& (0+255)
  4024  05A1  3182  2253  3183   	fcall	_can_send
  4025  05A4  2BBD               	goto	L1
  4026  05A5                     __end_of_main:	
  4027                           ;main.c: 178: idx = 0;
  4028                           
  4029                           
  4030                           	psect	text1
  4031  0D6B                     __ptext1:	
  4032 ;; *************** function _can_status_check *****************
  4033 ;; Defined at:
  4034 ;;		line 269 in file "mcp2515.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  status          1   72[BANK0 ] unsigned char 
  4039 ;;  bytes_writte    1   71[BANK0 ] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      unsigned char 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;Total ram usage:        4 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		_SPI_exchange
  4058 ;;		_printf
  4059 ;;		_receive
  4060 ;;		_txf_clear
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _can_status_check
  4068  0D6B                     _can_status_check:	
  4069                           
  4070                           ;mcp2515.c: 271: buf[0] = 0b10100000u;
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4074  0D6B  30A0               	movlw	160
  4075  0D6C  0020               	movlb	0	; select bank0
  4076  0D6D  00E5               	movwf	??_can_status_check
  4077  0D6E  0865               	movf	??_can_status_check,w
  4078  0D6F  0021               	movlb	1	; select bank1
  4079  0D70  00B4               	movwf	_buf^(0+128)
  4080                           
  4081                           ;mcp2515.c: 272: buf[1] = 0x00;
  4082  0D71  01B5               	clrf	(_buf^(0+128)+1)
  4083                           
  4084                           ;mcp2515.c: 273: uint8_t bytes_written = SPI_exchange(buf, 2);
  4085  0D72  3002               	movlw	2
  4086  0D73  0020               	movlb	0	; select bank0
  4087  0D74  00E5               	movwf	??_can_status_check
  4088  0D75  0865               	movf	??_can_status_check,w
  4089  0D76  00F8               	movwf	SPI_exchange@len
  4090  0D77  30B4               	movlw	(low (_buf| 0))& (0+255)
  4091  0D78  318B  235D  318D   	fcall	_SPI_exchange
  4092  0D7B  0020               	movlb	0	; select bank0
  4093  0D7C  00E6               	movwf	??_can_status_check+1
  4094  0D7D  0866               	movf	??_can_status_check+1,w
  4095  0D7E  00E7               	movwf	can_status_check@bytes_written
  4096                           
  4097                           ;mcp2515.c: 274: uint8_t status = buf[1];
  4098  0D7F  0021               	movlb	1	; select bank1
  4099  0D80  0835               	movf	(_buf^(0+128)+1),w
  4100  0D81  0020               	movlb	0	; select bank0
  4101  0D82  00E5               	movwf	??_can_status_check
  4102  0D83  0865               	movf	??_can_status_check,w
  4103  0D84  00E8               	movwf	can_status_check@status
  4104                           
  4105                           ;mcp2515.c: 275: if (status == 0x00) {
  4106  0D85  0868               	movf	can_status_check@status,w
  4107  0D86  1D03               	btfss	3,2
  4108  0D87  2D8A               	goto	l354
  4109                           
  4110                           ;mcp2515.c: 276: return 1;
  4111  0D88  3001               	movlw	1
  4112  0D89  0008               	return
  4113  0D8A                     l354:	
  4114                           ;mcp2515.c: 277: } else if ((status & 0b00000010u) > 0) {
  4115                           
  4116  0D8A  1CE8               	btfss	can_status_check@status,1
  4117  0D8B  2D9B               	goto	l357
  4118                           
  4119                           ;mcp2515.c: 278: if (mode.debug) printf("RX1IF is on\n");
  4120  0D8C  086B               	movf	_mode,w
  4121  0D8D  1903               	btfsc	3,2
  4122  0D8E  2D96               	goto	l358
  4123  0D8F  3043               	movlw	low (STR_37| (0+32768))
  4124  0D90  00A2               	movwf	printf@f
  4125  0D91  3094               	movlw	high (STR_37| (0+32768))
  4126  0D92  00A3               	movwf	printf@f+1
  4127  0D93  3185  25A5  318D   	fcall	_printf
  4128  0D96                     l358:	
  4129                           
  4130                           ;mcp2515.c: 279: receive(1);
  4131  0D96  3001               	movlw	1
  4132  0D97  318F  274B  318D   	fcall	_receive
  4133                           
  4134                           ;mcp2515.c: 280: } else if ((status & 0b00000001u) > 0) {
  4135  0D9A  2DBA               	goto	l2450
  4136  0D9B                     l357:	
  4137  0D9B  1C68               	btfss	can_status_check@status,0
  4138  0D9C  2DAC               	goto	l360
  4139                           
  4140                           ;mcp2515.c: 281: if (mode.debug) printf("RX0IF is on\n");
  4141  0D9D  086B               	movf	_mode,w
  4142  0D9E  1903               	btfsc	3,2
  4143  0D9F  2DA7               	goto	l361
  4144  0DA0  3036               	movlw	low (STR_38| (0+32768))
  4145  0DA1  00A2               	movwf	printf@f
  4146  0DA2  3094               	movlw	high (STR_38| (0+32768))
  4147  0DA3  00A3               	movwf	printf@f+1
  4148  0DA4  3185  25A5  318D   	fcall	_printf
  4149  0DA7                     l361:	
  4150                           
  4151                           ;mcp2515.c: 282: receive(0);
  4152  0DA7  3000               	movlw	0
  4153  0DA8  318F  274B  318D   	fcall	_receive
  4154                           
  4155                           ;mcp2515.c: 283: } else if ((status & 0b00001000u) > 0) {
  4156  0DAB  2DBA               	goto	l2450
  4157  0DAC                     l360:	
  4158  0DAC  1DE8               	btfss	can_status_check@status,3
  4159  0DAD  2DB0               	goto	l363
  4160                           
  4161                           ;mcp2515.c: 284: txf_clear(0);
  4162  0DAE  3000               	movlw	0
  4163  0DAF  2DB7               	goto	L4
  4164  0DB0                     l363:	
  4165                           ;mcp2515.c: 285: } else if ((status & 0b00100000u) > 0) {
  4166                           
  4167  0DB0  1EE8               	btfss	can_status_check@status,5
  4168  0DB1  2DB4               	goto	l365
  4169                           
  4170                           ;mcp2515.c: 286: txf_clear(1);
  4171  0DB2  3001               	movlw	1
  4172  0DB3  2DB7               	goto	L4
  4173  0DB4                     l365:	
  4174                           ;mcp2515.c: 287: } else if ((status & 0b10000000u) > 0) {
  4175                           
  4176  0DB4  1FE8               	btfss	can_status_check@status,7
  4177  0DB5  2DBA               	goto	l2450
  4178                           
  4179                           ;mcp2515.c: 288: txf_clear(2);
  4180  0DB6  3002               	movlw	2
  4181  0DB7                     L4:	
  4182  0DB7  318C  2433  318D   	fcall	_txf_clear
  4183  0DBA                     l2450:	
  4184                           
  4185                           ;mcp2515.c: 289: }
  4186                           ;mcp2515.c: 290: if ((status & 0b00010000u) > 0) {
  4187  0DBA  0020               	movlb	0	; select bank0
  4188  0DBB  1E68               	btfss	can_status_check@status,4
  4189  0DBC  2DBF               	goto	l2458
  4190                           
  4191                           ;mcp2515.c: 291: return 0;
  4192  0DBD  3000               	movlw	0
  4193                           
  4194                           ;mcp2515.c: 292: } else {
  4195  0DBE  0008               	return
  4196  0DBF                     l2458:	
  4197                           
  4198                           ;mcp2515.c: 293: return 1;
  4199  0DBF  3001               	movlw	1
  4200  0DC0  0008               	return
  4201  0DC1                     __end_of_can_status_check:	
  4202                           
  4203                           	psect	text2
  4204  0C33                     __ptext2:	
  4205 ;; *************** function _txf_clear *****************
  4206 ;; Defined at:
  4207 ;;		line 149 in file "mcp2515.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  n               1    wreg     unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  n               1    4[BANK0 ] unsigned char 
  4212 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  4213 ;;  mask            1    2[BANK0 ] unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      unsigned char 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        5 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		_SPI_exchange
  4232 ;; This function is called by:
  4233 ;;		_can_status_check
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _txf_clear
  4239  0C33                     _txf_clear:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4243                           ;txf_clear@n stored from wreg
  4244  0C33  0020               	movlb	0	; select bank0
  4245  0C34  00A4               	movwf	txf_clear@n
  4246                           
  4247                           ;mcp2515.c: 150: uint8_t mask = 0b00000001u << (n + 2);
  4248  0C35  3001               	movlw	1
  4249  0C36  00A0               	movwf	??_txf_clear
  4250  0C37  0824               	movf	txf_clear@n,w
  4251  0C38  3E02               	addlw	2
  4252  0C39  0A89               	incf	9,f
  4253  0C3A  2C3C               	goto	u1994
  4254  0C3B                     u1995:	
  4255  0C3B  35A0               	lslf	??_txf_clear,f
  4256  0C3C                     u1994:	
  4257  0C3C  0B89               	decfsz	9,f
  4258  0C3D  2C3B               	goto	u1995
  4259  0C3E  0820               	movf	??_txf_clear,w
  4260  0C3F  00A1               	movwf	??_txf_clear+1
  4261  0C40  0821               	movf	??_txf_clear+1,w
  4262  0C41  00A2               	movwf	txf_clear@mask
  4263                           
  4264                           ;mcp2515.c: 151: buf[0] =0b00000101u;
  4265  0C42  3005               	movlw	5
  4266  0C43  00A0               	movwf	??_txf_clear
  4267  0C44  0820               	movf	??_txf_clear,w
  4268  0C45  0021               	movlb	1	; select bank1
  4269  0C46  00B4               	movwf	_buf^(0+128)
  4270                           
  4271                           ;mcp2515.c: 152: buf[1] = 0x2c;
  4272  0C47  302C               	movlw	44
  4273  0C48  0020               	movlb	0	; select bank0
  4274  0C49  00A0               	movwf	??_txf_clear
  4275  0C4A  0820               	movf	??_txf_clear,w
  4276  0C4B  0021               	movlb	1	; select bank1
  4277  0C4C  00B5               	movwf	(_buf^(0+128)+1)
  4278                           
  4279                           ;mcp2515.c: 153: buf[2] = mask;
  4280  0C4D  0020               	movlb	0	; select bank0
  4281  0C4E  0822               	movf	txf_clear@mask,w
  4282  0C4F  00A0               	movwf	??_txf_clear
  4283  0C50  0820               	movf	??_txf_clear,w
  4284  0C51  0021               	movlb	1	; select bank1
  4285  0C52  00B6               	movwf	(_buf^(0+128)+2)
  4286                           
  4287                           ;mcp2515.c: 154: buf[3] = 0x00;
  4288  0C53  01B7               	clrf	(_buf^(0+128)+3)
  4289                           
  4290                           ;mcp2515.c: 155: uint8_t bytes_written = SPI_exchange(buf, 4);
  4291  0C54  3004               	movlw	4
  4292  0C55  0020               	movlb	0	; select bank0
  4293  0C56  00A0               	movwf	??_txf_clear
  4294  0C57  0820               	movf	??_txf_clear,w
  4295  0C58  00F8               	movwf	SPI_exchange@len
  4296  0C59  30B4               	movlw	(low (_buf| 0))& (0+255)
  4297  0C5A  318B  235D         	fcall	_SPI_exchange
  4298  0C5C  0020               	movlb	0	; select bank0
  4299  0C5D  00A1               	movwf	??_txf_clear+1
  4300  0C5E  0821               	movf	??_txf_clear+1,w
  4301  0C5F  00A3               	movwf	txf_clear@bytes_written
  4302                           
  4303                           ;mcp2515.c: 159: return 0;
  4304                           ;	Return value of _txf_clear is never used
  4305                           
  4306                           ;mcp2515.c: 158: } else {
  4307                           
  4308                           ;mcp2515.c: 157: return 1;
  4309                           ;	Return value of _txf_clear is never used
  4310  0C60  0008               	return
  4311  0C61                     __end_of_txf_clear:	
  4312                           
  4313                           	psect	text3
  4314  0F4B                     __ptext3:	
  4315 ;; *************** function _receive *****************
  4316 ;; Defined at:
  4317 ;;		line 166 in file "mcp2515.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  n               1    wreg     unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  n               1   68[BANK0 ] unsigned char 
  4322 ;;  rx_buf         15   49[BANK0 ] unsigned char [15]
  4323 ;;  id              2   65[BANK0 ] unsigned int 
  4324 ;;  dlc             1   67[BANK0 ] unsigned char 
  4325 ;;  pbuf            1   64[BANK0 ] PTR unsigned char 
  4326 ;;		 -> receive@rx_buf(15), 
  4327 ;;  bytes_read      1   48[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:       26 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    4
  4344 ;; This function calls:
  4345 ;;		Absolute function
  4346 ;;		_SPI_exchange
  4347 ;;		_printf
  4348 ;;		_receive_handler
  4349 ;; This function is called by:
  4350 ;;		_can_status_check
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function _receive
  4356  0F4B                     _receive:	
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4360                           ;receive@n stored from wreg
  4361  0F4B  0020               	movlb	0	; select bank0
  4362  0F4C  00E4               	movwf	receive@n
  4363                           
  4364                           ;mcp2515.c: 170: uint8_t rx_buf[15];
  4365                           ;mcp2515.c: 173: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  4366  0F4D  0864               	movf	receive@n,w
  4367  0F4E  3EB4               	addlw	low (_nm| (0+32768))
  4368  0F4F  0084               	movwf	4
  4369  0F50  3094               	movlw	high (_nm| (0+32768))
  4370  0F51  1803               	skipnc
  4371  0F52  3E01               	addlw	1
  4372  0F53  0085               	movwf	5
  4373  0F54  0800               	movf	0,w	;code access
  4374  0F55  0709               	addwf	9,w
  4375  0F56  3E90               	addlw	144
  4376  0F57  00CB               	movwf	??_receive
  4377  0F58  084B               	movf	??_receive,w
  4378  0F59  00D1               	movwf	receive@rx_buf
  4379                           
  4380                           ;mcp2515.c: 174: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  4381  0F5A  300E               	movlw	14
  4382  0F5B  00CB               	movwf	??_receive
  4383  0F5C  084B               	movf	??_receive,w
  4384  0F5D  00F8               	movwf	SPI_exchange@len
  4385  0F5E  3051               	movlw	(low (receive@rx_buf| 0))& (0+255)
  4386  0F5F  318B  235D  318F   	fcall	_SPI_exchange
  4387  0F62  0020               	movlb	0	; select bank0
  4388  0F63  00CC               	movwf	??_receive+1
  4389  0F64  084C               	movf	??_receive+1,w
  4390  0F65  00D0               	movwf	receive@bytes_read
  4391                           
  4392                           ;mcp2515.c: 175: uint8_t dlc = rx_buf[5];
  4393  0F66  0856               	movf	receive@rx_buf+5,w
  4394  0F67  00CB               	movwf	??_receive
  4395  0F68  084B               	movf	??_receive,w
  4396  0F69  00E3               	movwf	receive@dlc
  4397                           
  4398                           ;mcp2515.c: 176: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  4399  0F6A  0853               	movf	receive@rx_buf+2,w
  4400  0F6B  00CB               	movwf	??_receive
  4401  0F6C  3005               	movlw	5
  4402  0F6D                     u2005:	
  4403  0F6D  36CB               	lsrf	??_receive,f
  4404  0F6E  0B89               	decfsz	9,f
  4405  0F6F  2F6D               	goto	u2005
  4406  0F70  084B               	movf	??_receive,w
  4407  0F71  00CC               	movwf	??_receive+1
  4408  0F72  01CD               	clrf	??_receive+2
  4409  0F73  0852               	movf	receive@rx_buf+1,w
  4410  0F74  00CE               	movwf	??_receive+3
  4411  0F75  01CF               	clrf	??_receive+4
  4412  0F76  35CE               	lslf	??_receive+3,f
  4413  0F77  0DCF               	rlf	??_receive+4,f
  4414  0F78  35CE               	lslf	??_receive+3,f
  4415  0F79  0DCF               	rlf	??_receive+4,f
  4416  0F7A  35CE               	lslf	??_receive+3,f
  4417  0F7B  0DCF               	rlf	??_receive+4,f
  4418  0F7C  084C               	movf	??_receive+1,w
  4419  0F7D  074E               	addwf	??_receive+3,w
  4420  0F7E  00E1               	movwf	receive@id
  4421  0F7F  084D               	movf	??_receive+2,w
  4422  0F80  3D4F               	addwfc	??_receive+4,w
  4423  0F81  00E2               	movwf	receive@id+1
  4424                           
  4425                           ;mcp2515.c: 177: id = id & 0b0000011111111111u;
  4426  0F82  30FF               	movlw	255
  4427  0F83  0561               	andwf	receive@id,w
  4428  0F84  00E1               	movwf	receive@id
  4429  0F85  3007               	movlw	7
  4430  0F86  0562               	andwf	receive@id+1,w
  4431  0F87  00E2               	movwf	receive@id+1
  4432                           
  4433                           ;mcp2515.c: 178: rx_buf[6u+dlc] = (uint8_t)'\0';
  4434  0F88  0863               	movf	receive@dlc,w
  4435  0F89  3E06               	addlw	6
  4436  0F8A  3E51               	addlw	(low (receive@rx_buf| 0))& (0+255)
  4437  0F8B  0086               	movwf	6
  4438  0F8C  0187               	clrf	7
  4439  0F8D  0181               	clrf	1
  4440                           
  4441                           ;mcp2515.c: 180: if (mode.debug) {
  4442  0F8E  086B               	movf	_mode,w
  4443  0F8F  1903               	btfsc	3,2
  4444  0F90  2FE8               	goto	l2350
  4445                           
  4446                           ;mcp2515.c: 181: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  4447  0F91  303B               	movlw	low (STR_26| (0+32768))
  4448  0F92  00A2               	movwf	printf@f
  4449  0F93  3093               	movlw	high (STR_26| (0+32768))
  4450  0F94  00A3               	movwf	printf@f+1
  4451  0F95  0864               	movf	receive@n,w
  4452  0F96  00CB               	movwf	??_receive
  4453  0F97  01CC               	clrf	??_receive+1
  4454  0F98  084B               	movf	??_receive,w
  4455  0F99  00A4               	movwf	?_printf+2
  4456  0F9A  084C               	movf	??_receive+1,w
  4457  0F9B  00A5               	movwf	?_printf+3
  4458  0F9C  0852               	movf	receive@rx_buf+1,w
  4459  0F9D  00CD               	movwf	??_receive+2
  4460  0F9E  01CE               	clrf	??_receive+3
  4461  0F9F  084D               	movf	??_receive+2,w
  4462  0FA0  00A6               	movwf	?_printf+4
  4463  0FA1  084E               	movf	??_receive+3,w
  4464  0FA2  00A7               	movwf	?_printf+5
  4465  0FA3  3185  25A5  318F   	fcall	_printf
  4466                           
  4467                           ;mcp2515.c: 182: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  4468  0FA6  305D               	movlw	low (STR_27| (0+32768))
  4469  0FA7  0020               	movlb	0	; select bank0
  4470  0FA8  00A2               	movwf	printf@f
  4471  0FA9  3093               	movlw	high (STR_27| (0+32768))
  4472  0FAA  00A3               	movwf	printf@f+1
  4473  0FAB  0864               	movf	receive@n,w
  4474  0FAC  00CB               	movwf	??_receive
  4475  0FAD  01CC               	clrf	??_receive+1
  4476  0FAE  084B               	movf	??_receive,w
  4477  0FAF  00A4               	movwf	?_printf+2
  4478  0FB0  084C               	movf	??_receive+1,w
  4479  0FB1  00A5               	movwf	?_printf+3
  4480  0FB2  0853               	movf	receive@rx_buf+2,w
  4481  0FB3  00CD               	movwf	??_receive+2
  4482  0FB4  01CE               	clrf	??_receive+3
  4483  0FB5  084D               	movf	??_receive+2,w
  4484  0FB6  00A6               	movwf	?_printf+4
  4485  0FB7  084E               	movf	??_receive+3,w
  4486  0FB8  00A7               	movwf	?_printf+5
  4487  0FB9  3185  25A5  318F   	fcall	_printf
  4488                           
  4489                           ;mcp2515.c: 183: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4490  0FBC  307F               	movlw	low (STR_28| (0+32768))
  4491  0FBD  0020               	movlb	0	; select bank0
  4492  0FBE  00A2               	movwf	printf@f
  4493  0FBF  3093               	movlw	high (STR_28| (0+32768))
  4494  0FC0  00A3               	movwf	printf@f+1
  4495  0FC1  0864               	movf	receive@n,w
  4496  0FC2  00CB               	movwf	??_receive
  4497  0FC3  01CC               	clrf	??_receive+1
  4498  0FC4  084B               	movf	??_receive,w
  4499  0FC5  00A4               	movwf	?_printf+2
  4500  0FC6  084C               	movf	??_receive+1,w
  4501  0FC7  00A5               	movwf	?_printf+3
  4502  0FC8  0856               	movf	receive@rx_buf+5,w
  4503  0FC9  00CD               	movwf	??_receive+2
  4504  0FCA  01CE               	clrf	??_receive+3
  4505  0FCB  084D               	movf	??_receive+2,w
  4506  0FCC  00A6               	movwf	?_printf+4
  4507  0FCD  084E               	movf	??_receive+3,w
  4508  0FCE  00A7               	movwf	?_printf+5
  4509  0FCF  3185  25A5  318F   	fcall	_printf
  4510                           
  4511                           ;mcp2515.c: 184: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4512  0FD2  30DF               	movlw	low (STR_29| (0+32768))
  4513  0FD3  0020               	movlb	0	; select bank0
  4514  0FD4  00A2               	movwf	printf@f
  4515  0FD5  3093               	movlw	high (STR_29| (0+32768))
  4516  0FD6  00A3               	movwf	printf@f+1
  4517  0FD7  0864               	movf	receive@n,w
  4518  0FD8  00CB               	movwf	??_receive
  4519  0FD9  01CC               	clrf	??_receive+1
  4520  0FDA  084B               	movf	??_receive,w
  4521  0FDB  00A4               	movwf	?_printf+2
  4522  0FDC  084C               	movf	??_receive+1,w
  4523  0FDD  00A5               	movwf	?_printf+3
  4524  0FDE  0857               	movf	receive@rx_buf+6,w
  4525  0FDF  00CD               	movwf	??_receive+2
  4526  0FE0  01CE               	clrf	??_receive+3
  4527  0FE1  084D               	movf	??_receive+2,w
  4528  0FE2  00A6               	movwf	?_printf+4
  4529  0FE3  084E               	movf	??_receive+3,w
  4530  0FE4  00A7               	movwf	?_printf+5
  4531  0FE5  3185  25A5  318F   	fcall	_printf
  4532  0FE8                     l2350:	
  4533                           
  4534                           ;mcp2515.c: 185: }
  4535                           ;mcp2515.c: 188: uint8_t *pbuf = &rx_buf[6];
  4536  0FE8  3057               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  4537  0FE9  0020               	movlb	0	; select bank0
  4538  0FEA  00CB               	movwf	??_receive
  4539  0FEB  084B               	movf	??_receive,w
  4540  0FEC  00E0               	movwf	receive@pbuf
  4541                           
  4542                           ;mcp2515.c: 189: handler(id, pbuf, dlc);
  4543  0FED  0862               	movf	receive@id+1,w
  4544  0FEE  00C4               	movwf	receive_handler@sid+1
  4545  0FEF  0861               	movf	receive@id,w
  4546  0FF0  00C3               	movwf	receive_handler@sid
  4547  0FF1  0860               	movf	receive@pbuf,w
  4548  0FF2  00CB               	movwf	??_receive
  4549  0FF3  084B               	movf	??_receive,w
  4550  0FF4  00C5               	movwf	receive_handler@buf
  4551  0FF5  0863               	movf	receive@dlc,w
  4552  0FF6  00CC               	movwf	??_receive+1
  4553  0FF7  084C               	movf	??_receive+1,w
  4554  0FF8  00C6               	movwf	receive_handler@dlc
  4555  0FF9  0021               	movlb	1	; select bank1
  4556  0FFA  0831               	movf	(_handler+1)^(0+128),w
  4557  0FFB  008A               	movwf	10
  4558  0FFC  0830               	movf	_handler^(0+128),w
  4559  0FFD  000A               	callw
  4560  0FFE  318F               	pagesel	$
  4561  0FFF  0008               	return
  4562  1000                     __end_of_receive:	
  4563                           
  4564                           	psect	text4
  4565  0D16                     __ptext4:	
  4566 ;; *************** function _receive_handler *****************
  4567 ;; Defined at:
  4568 ;;		line 33 in file "main.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  sid             2   35[BANK0 ] unsigned int 
  4571 ;;  buf             1   37[BANK0 ] PTR unsigned char 
  4572 ;;		 -> receive@rx_buf(15), 
  4573 ;;  dlc             1   38[BANK0 ] unsigned char 
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  i               1   42[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;Total ram usage:        8 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    3
  4592 ;; This function calls:
  4593 ;;		_printf
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;;		_receive
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _receive_handler
  4602  0D16                     _receive_handler:	
  4603                           
  4604                           ;main.c: 34: uint8_t i;
  4605                           ;main.c: 35: if (output_format.with_sid) {
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4609  0D16  0020               	movlb	0	; select bank0
  4610  0D17  086D               	movf	_output_format,w
  4611  0D18  1903               	btfsc	3,2
  4612  0D19  2D29               	goto	l2220
  4613                           
  4614                           ;main.c: 36: printf("%d,%s\n", sid, buf);
  4615  0D1A  308D               	movlw	low (STR_1| (0+32768))
  4616  0D1B  00A2               	movwf	printf@f
  4617  0D1C  3094               	movlw	high (STR_1| (0+32768))
  4618  0D1D  00A3               	movwf	printf@f+1
  4619  0D1E  0844               	movf	receive_handler@sid+1,w
  4620  0D1F  00A5               	movwf	?_printf+3
  4621  0D20  0843               	movf	receive_handler@sid,w
  4622  0D21  00A4               	movwf	?_printf+2
  4623  0D22  0845               	movf	receive_handler@buf,w
  4624  0D23  00A6               	movwf	low ((?_printf| 0+4))
  4625  0D24  3000               	movlw	0
  4626  0D25  00A7               	movwf	(low ((?_printf| 0+4))+1)
  4627  0D26  3185  25A5         	fcall	_printf
  4628                           
  4629                           ;main.c: 37: } else if (output_format.hex_output) {
  4630  0D28  0008               	return
  4631  0D29                     l2220:	
  4632  0D29  0020               	movlb	0	; select bank0
  4633  0D2A  086E               	movf	_output_format+1,w
  4634  0D2B  1903               	btfsc	3,2
  4635  0D2C  2D5F               	goto	l2234
  4636                           
  4637                           ;main.c: 38: printf("%03x:", sid);
  4638  0D2D  309A               	movlw	low (STR_2| (0+32768))
  4639  0D2E  00A2               	movwf	printf@f
  4640  0D2F  3094               	movlw	high (STR_2| (0+32768))
  4641  0D30  00A3               	movwf	printf@f+1
  4642  0D31  0844               	movf	receive_handler@sid+1,w
  4643  0D32  00A5               	movwf	?_printf+3
  4644  0D33  0843               	movf	receive_handler@sid,w
  4645  0D34  00A4               	movwf	?_printf+2
  4646  0D35  3185  25A5  318D   	fcall	_printf
  4647                           
  4648                           ;main.c: 39: for(i=0; i<dlc; i++) {
  4649  0D38  0020               	movlb	0	; select bank0
  4650  0D39  01CA               	clrf	receive_handler@i
  4651  0D3A                     l2230:	
  4652  0D3A  0846               	movf	receive_handler@dlc,w
  4653  0D3B  024A               	subwf	receive_handler@i,w
  4654  0D3C  1803               	btfsc	3,0
  4655  0D3D  2D58               	goto	l2232
  4656                           
  4657                           ;main.c: 40: printf(" %02x", buf[i]);
  4658  0D3E  30A0               	movlw	low (STR_3| (0+32768))
  4659  0D3F  00A2               	movwf	printf@f
  4660  0D40  3094               	movlw	high (STR_3| (0+32768))
  4661  0D41  00A3               	movwf	printf@f+1
  4662  0D42  084A               	movf	receive_handler@i,w
  4663  0D43  0745               	addwf	receive_handler@buf,w
  4664  0D44  00C7               	movwf	??_receive_handler
  4665  0D45  0847               	movf	??_receive_handler,w
  4666  0D46  0086               	movwf	6
  4667  0D47  0187               	clrf	7
  4668  0D48  0801               	movf	1,w
  4669  0D49  00C8               	movwf	??_receive_handler+1
  4670  0D4A  01C9               	clrf	??_receive_handler+2
  4671  0D4B  0848               	movf	??_receive_handler+1,w
  4672  0D4C  00A4               	movwf	?_printf+2
  4673  0D4D  0849               	movf	??_receive_handler+2,w
  4674  0D4E  00A5               	movwf	?_printf+3
  4675  0D4F  3185  25A5  318D   	fcall	_printf
  4676  0D52  3001               	movlw	1
  4677  0D53  0020               	movlb	0	; select bank0
  4678  0D54  00C7               	movwf	??_receive_handler
  4679  0D55  0847               	movf	??_receive_handler,w
  4680  0D56  07CA               	addwf	receive_handler@i,f
  4681  0D57  2D3A               	goto	l2230
  4682  0D58                     l2232:	
  4683                           
  4684                           ;main.c: 41: }
  4685                           ;main.c: 42: printf("\n");
  4686  0D58  30A9               	movlw	low ((STR_39+3)| (0+32768))
  4687  0D59  00A2               	movwf	printf@f
  4688  0D5A  3094               	movlw	high ((STR_39+3)| (0+32768))
  4689  0D5B  00A3               	movwf	printf@f+1
  4690  0D5C  3185  25A5         	fcall	_printf
  4691                           
  4692                           ;main.c: 43: } else {
  4693  0D5E  0008               	return
  4694  0D5F                     l2234:	
  4695                           
  4696                           ;main.c: 44: printf("%s\n", buf);
  4697  0D5F  3015               	movlw	low ((STR_36+14)| (0+32768))
  4698  0D60  0020               	movlb	0	; select bank0
  4699  0D61  00A2               	movwf	printf@f
  4700  0D62  3093               	movlw	high ((STR_36+14)| (0+32768))
  4701  0D63  00A3               	movwf	printf@f+1
  4702  0D64  0845               	movf	receive_handler@buf,w
  4703  0D65  00A4               	movwf	low ((?_printf| 0+2))
  4704  0D66  3000               	movlw	0
  4705  0D67  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4706  0D68  3185  25A5         	fcall	_printf
  4707  0D6A  0008               	return
  4708  0D6B                     __end_of_receive_handler:	
  4709                           
  4710                           	psect	text5
  4711  0EA6                     __ptext5:	
  4712 ;; *************** function _can_set_mask *****************
  4713 ;; Defined at:
  4714 ;;		line 122 in file "mcp2515.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  cmd             1    wreg     unsigned char 
  4717 ;;  n               1   39[BANK0 ] unsigned char 
  4718 ;;  mask            2   40[BANK0 ] unsigned int 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  cmd             1   50[BANK0 ] unsigned char 
  4721 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  4722 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  1    wreg      void 
  4725 ;; Registers used:
  4726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4732 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;Total ram usage:       14 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    4
  4739 ;; This function calls:
  4740 ;;		_SPI_exchange
  4741 ;;		_abort_pending_transmissions
  4742 ;;		_can_ope_mode
  4743 ;;		_printf
  4744 ;; This function is called by:
  4745 ;;		_main
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function _can_set_mask
  4751  0EA6                     _can_set_mask:	
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4755                           ;can_set_mask@cmd stored from wreg
  4756  0EA6  0020               	movlb	0	; select bank0
  4757  0EA7  00D2               	movwf	can_set_mask@cmd
  4758                           
  4759                           ;mcp2515.c: 123: can_ope_mode(0b10000000u);
  4760  0EA8  3080               	movlw	128
  4761  0EA9  318D  25C1  318E   	fcall	_can_ope_mode
  4762                           
  4763                           ;mcp2515.c: 124: abort_pending_transmissions();
  4764  0EAC  318B  23E1  318E   	fcall	_abort_pending_transmissions
  4765                           
  4766                           ;mcp2515.c: 125: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  4767  0EAF  3008               	movlw	8
  4768  0EB0  0020               	movlb	0	; select bank0
  4769  0EB1  0249               	subwf	can_set_mask@mask+1,w
  4770  0EB2  3000               	movlw	0
  4771  0EB3  1903               	skipnz
  4772  0EB4  0248               	subwf	can_set_mask@mask,w
  4773  0EB5  1C03               	btfss	3,0
  4774  0EB6  2EBB               	goto	l2542
  4775  0EB7  30FF               	movlw	255
  4776  0EB8  00C8               	movwf	can_set_mask@mask
  4777  0EB9  3007               	movlw	7
  4778  0EBA  00C9               	movwf	can_set_mask@mask+1
  4779  0EBB                     l2542:	
  4780                           
  4781                           ;mcp2515.c: 126: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  4782  0EBB  0849               	movf	can_set_mask@mask+1,w
  4783  0EBC  00CB               	movwf	??_can_set_mask+1
  4784  0EBD  0848               	movf	can_set_mask@mask,w
  4785  0EBE  00CA               	movwf	??_can_set_mask
  4786  0EBF  36CB               	lsrf	??_can_set_mask+1,f
  4787  0EC0  0CCA               	rrf	??_can_set_mask,f
  4788  0EC1  36CB               	lsrf	??_can_set_mask+1,f
  4789  0EC2  0CCA               	rrf	??_can_set_mask,f
  4790  0EC3  36CB               	lsrf	??_can_set_mask+1,f
  4791  0EC4  0CCA               	rrf	??_can_set_mask,f
  4792  0EC5  084A               	movf	??_can_set_mask,w
  4793  0EC6  00CC               	movwf	??_can_set_mask+2
  4794  0EC7  084C               	movf	??_can_set_mask+2,w
  4795  0EC8  00D3               	movwf	can_set_mask@mask_sidh
  4796                           
  4797                           ;mcp2515.c: 127: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  4798  0EC9  0848               	movf	can_set_mask@mask,w
  4799  0ECA  3907               	andlw	7
  4800  0ECB  00CA               	movwf	??_can_set_mask
  4801  0ECC  3004               	movlw	4
  4802  0ECD                     u2205:	
  4803  0ECD  35CA               	lslf	??_can_set_mask,f
  4804  0ECE  3EFF               	addlw	-1
  4805  0ECF  1D03               	skipz
  4806  0ED0  2ECD               	goto	u2205
  4807  0ED1  354A               	lslf	??_can_set_mask,w
  4808  0ED2  00CB               	movwf	??_can_set_mask+1
  4809  0ED3  084B               	movf	??_can_set_mask+1,w
  4810  0ED4  00D4               	movwf	can_set_mask@mask_sidl
  4811                           
  4812                           ;mcp2515.c: 129: if (cmd == 0u) {
  4813  0ED5  0852               	movf	can_set_mask@cmd,w
  4814  0ED6  1D03               	btfss	3,2
  4815  0ED7  2EE7               	goto	l2554
  4816                           
  4817                           ;mcp2515.c: 130: save_rxmn[n] = mask;
  4818  0ED8  3547               	lslf	can_set_mask@n,w
  4819  0ED9  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  4820  0EDA  0086               	movwf	6
  4821  0EDB  0187               	clrf	7
  4822  0EDC  0848               	movf	can_set_mask@mask,w
  4823  0EDD  3FC0               	movwi [0]fsr1
  4824  0EDE  0849               	movf	can_set_mask@mask+1,w
  4825  0EDF  3FC1               	movwi [1]fsr1
  4826                           
  4827                           ;mcp2515.c: 131: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  4828  0EE0  086B               	movf	_mode,w
  4829  0EE1  1903               	btfsc	3,2
  4830  0EE2  2F0F               	goto	l2560
  4831  0EE3  30B4               	movlw	low (STR_24| (0+32768))
  4832  0EE4  00A2               	movwf	printf@f
  4833  0EE5  3092               	movlw	high (STR_24| (0+32768))
  4834  0EE6  2EF6               	goto	L6
  4835  0EE7                     l2554:	
  4836                           ;mcp2515.c: 132: } else {
  4837                           
  4838                           
  4839                           ;mcp2515.c: 133: save_rxfn[n] = mask;
  4840  0EE7  0020               	movlb	0	; select bank0
  4841  0EE8  3547               	lslf	can_set_mask@n,w
  4842  0EE9  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  4843  0EEA  0086               	movwf	6
  4844  0EEB  0187               	clrf	7
  4845  0EEC  0848               	movf	can_set_mask@mask,w
  4846  0EED  3FC0               	movwi [0]fsr1
  4847  0EEE  0849               	movf	can_set_mask@mask+1,w
  4848  0EEF  3FC1               	movwi [1]fsr1
  4849                           
  4850                           ;mcp2515.c: 134: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  4851  0EF0  086B               	movf	_mode,w
  4852  0EF1  1903               	btfsc	3,2
  4853  0EF2  2F0F               	goto	l2560
  4854  0EF3  3087               	movlw	low (STR_25| (0+32768))
  4855  0EF4  00A2               	movwf	printf@f
  4856  0EF5  3092               	movlw	high (STR_25| (0+32768))
  4857  0EF6                     L6:	
  4858  0EF6  00A3               	movwf	printf@f+1
  4859  0EF7  0847               	movf	can_set_mask@n,w
  4860  0EF8  00CA               	movwf	??_can_set_mask
  4861  0EF9  01CB               	clrf	??_can_set_mask+1
  4862  0EFA  084A               	movf	??_can_set_mask,w
  4863  0EFB  00A4               	movwf	?_printf+2
  4864  0EFC  084B               	movf	??_can_set_mask+1,w
  4865  0EFD  00A5               	movwf	?_printf+3
  4866  0EFE  0853               	movf	can_set_mask@mask_sidh,w
  4867  0EFF  00CC               	movwf	??_can_set_mask+2
  4868  0F00  01CD               	clrf	??_can_set_mask+3
  4869  0F01  084C               	movf	??_can_set_mask+2,w
  4870  0F02  00A6               	movwf	?_printf+4
  4871  0F03  084D               	movf	??_can_set_mask+3,w
  4872  0F04  00A7               	movwf	?_printf+5
  4873  0F05  0854               	movf	can_set_mask@mask_sidl,w
  4874  0F06  00CE               	movwf	??_can_set_mask+4
  4875  0F07  01CF               	clrf	??_can_set_mask+5
  4876  0F08  084E               	movf	??_can_set_mask+4,w
  4877  0F09  00A8               	movwf	?_printf+6
  4878  0F0A  084F               	movf	??_can_set_mask+5,w
  4879  0F0B  00A9               	movwf	?_printf+7
  4880  0F0C  3185  25A5  318E   	fcall	_printf
  4881  0F0F                     l2560:	
  4882                           
  4883                           ;mcp2515.c: 135: }
  4884                           ;mcp2515.c: 137: buf[0] = 0b00000010u;
  4885  0F0F  3002               	movlw	2
  4886  0F10  0020               	movlb	0	; select bank0
  4887  0F11  00CA               	movwf	??_can_set_mask
  4888  0F12  084A               	movf	??_can_set_mask,w
  4889  0F13  0021               	movlb	1	; select bank1
  4890  0F14  00B4               	movwf	_buf^(0+128)
  4891                           
  4892                           ;mcp2515.c: 138: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  4893  0F15  0020               	movlb	0	; select bank0
  4894  0F16  0852               	movf	can_set_mask@cmd,w
  4895  0F17  1903               	btfsc	3,2
  4896  0F18  2F1E               	goto	l2566
  4897  0F19  0847               	movf	can_set_mask@n,w
  4898  0F1A  3E94               	addlw	low (_rxfnsidh| (0+32768))
  4899  0F1B  0084               	movwf	4
  4900  0F1C  3094               	movlw	high (_rxfnsidh| (0+32768))
  4901  0F1D  2F22               	goto	L5
  4902  0F1E                     l2566:	
  4903  0F1E  0847               	movf	can_set_mask@n,w
  4904  0F1F  3E00               	addlw	low (_rxmnsidh| (0+32768))
  4905  0F20  0084               	movwf	4
  4906  0F21  3090               	movlw	high (_rxmnsidh| (0+32768))
  4907  0F22                     L5:	
  4908  0F22  1803               	skipnc
  4909  0F23  3E01               	addlw	1
  4910  0F24  0085               	movwf	5
  4911  0F25  0800               	movf	0,w	;code access
  4912  0F26  00CA               	movwf	??_can_set_mask
  4913  0F27  01CB               	clrf	??_can_set_mask+1
  4914  0F28  084A               	movf	??_can_set_mask,w
  4915  0F29  00D0               	movwf	_can_set_mask$510
  4916  0F2A  084B               	movf	??_can_set_mask+1,w
  4917  0F2B  00D1               	movwf	_can_set_mask$510+1
  4918  0F2C  0850               	movf	_can_set_mask$510,w
  4919  0F2D  00CA               	movwf	??_can_set_mask
  4920  0F2E  084A               	movf	??_can_set_mask,w
  4921  0F2F  0021               	movlb	1	; select bank1
  4922  0F30  00B5               	movwf	(_buf^(0+128)+1)
  4923                           
  4924                           ;mcp2515.c: 139: buf[2] = mask_sidh;
  4925  0F31  0020               	movlb	0	; select bank0
  4926  0F32  0853               	movf	can_set_mask@mask_sidh,w
  4927  0F33  00CA               	movwf	??_can_set_mask
  4928  0F34  084A               	movf	??_can_set_mask,w
  4929  0F35  0021               	movlb	1	; select bank1
  4930  0F36  00B6               	movwf	(_buf^(0+128)+2)
  4931                           
  4932                           ;mcp2515.c: 140: buf[3] = mask_sidl;
  4933  0F37  0020               	movlb	0	; select bank0
  4934  0F38  0854               	movf	can_set_mask@mask_sidl,w
  4935  0F39  00CA               	movwf	??_can_set_mask
  4936  0F3A  084A               	movf	??_can_set_mask,w
  4937  0F3B  0021               	movlb	1	; select bank1
  4938  0F3C  00B7               	movwf	(_buf^(0+128)+3)
  4939                           
  4940                           ;mcp2515.c: 141: SPI_exchange(buf, 4);
  4941  0F3D  3004               	movlw	4
  4942  0F3E  0020               	movlb	0	; select bank0
  4943  0F3F  00CA               	movwf	??_can_set_mask
  4944  0F40  084A               	movf	??_can_set_mask,w
  4945  0F41  00F8               	movwf	SPI_exchange@len
  4946  0F42  30B4               	movlw	(low (_buf| 0))& (0+255)
  4947  0F43  318B  235D  318E   	fcall	_SPI_exchange
  4948                           
  4949                           ;mcp2515.c: 143: can_ope_mode(operation_mode);
  4950  0F46  0020               	movlb	0	; select bank0
  4951  0F47  086F               	movf	_operation_mode,w
  4952  0F48  318D  25C1         	fcall	_can_ope_mode
  4953  0F4A  0008               	return
  4954  0F4B                     __end_of_can_set_mask:	
  4955                           
  4956                           	psect	text6
  4957  0253                     __ptext6:	
  4958 ;; *************** function _can_send *****************
  4959 ;; Defined at:
  4960 ;;		line 195 in file "mcp2515.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  data_buf        1    wreg     PTR unsigned char 
  4963 ;;		 -> main@buf(16), 
  4964 ;;  dlc             1   35[BANK0 ] unsigned char 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  4967 ;;		 -> main@buf(16), 
  4968 ;;  n               1   45[BANK0 ] unsigned char 
  4969 ;;  i               1   44[BANK0 ] unsigned char 
  4970 ;;  status          1   42[BANK0 ] unsigned char 
  4971 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  4972 ;;  len             1   40[BANK0 ] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:       11 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    3
  4989 ;; This function calls:
  4990 ;;		_SPI_exchange
  4991 ;;		_printf
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _can_send
  4999  0253                     _can_send:	
  5000                           
  5001                           ;incstack = 0
  5002                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5003                           ;can_send@data_buf stored from wreg
  5004  0253  0020               	movlb	0	; select bank0
  5005  0254  00CB               	movwf	can_send@data_buf
  5006                           
  5007                           ;mcp2515.c: 196: uint8_t i;
  5008                           ;mcp2515.c: 197: uint8_t n = 0;
  5009  0255  01CD               	clrf	can_send@n
  5010                           
  5011                           ;mcp2515.c: 199: buf[0] = 0b10100000u;
  5012  0256  30A0               	movlw	160
  5013  0257  00C4               	movwf	??_can_send
  5014  0258  0844               	movf	??_can_send,w
  5015  0259  0021               	movlb	1	; select bank1
  5016  025A  00B4               	movwf	_buf^(0+128)
  5017                           
  5018                           ;mcp2515.c: 200: buf[1] = 0x00;
  5019  025B  01B5               	clrf	(_buf^(0+128)+1)
  5020                           
  5021                           ;mcp2515.c: 201: uint8_t bytes_written = SPI_exchange(buf, 2);
  5022  025C  3002               	movlw	2
  5023  025D  0020               	movlb	0	; select bank0
  5024  025E  00C4               	movwf	??_can_send
  5025  025F  0844               	movf	??_can_send,w
  5026  0260  00F8               	movwf	SPI_exchange@len
  5027  0261  30B4               	movlw	(low (_buf| 0))& (0+255)
  5028  0262  318B  235D  3182   	fcall	_SPI_exchange
  5029  0265  0020               	movlb	0	; select bank0
  5030  0266  00C5               	movwf	??_can_send+1
  5031  0267  0845               	movf	??_can_send+1,w
  5032  0268  00C9               	movwf	can_send@bytes_written
  5033                           
  5034                           ;mcp2515.c: 202: uint8_t status = buf[1];
  5035  0269  0021               	movlb	1	; select bank1
  5036  026A  0835               	movf	(_buf^(0+128)+1),w
  5037  026B  0020               	movlb	0	; select bank0
  5038  026C  00C4               	movwf	??_can_send
  5039  026D  0844               	movf	??_can_send,w
  5040  026E  00CA               	movwf	can_send@status
  5041                           
  5042                           ;mcp2515.c: 203: if ((status & 0b01000000u) == 0) {
  5043  026F  1B4A               	btfsc	can_send@status,6
  5044  0270  2A81               	goto	l334
  5045                           
  5046                           ;mcp2515.c: 204: if (mode.debug) printf("TXB2 is idle\n");
  5047  0271  086B               	movf	_mode,w
  5048  0272  1903               	btfsc	3,2
  5049  0273  2A7B               	goto	l2636
  5050  0274  3028               	movlw	low (STR_30| (0+32768))
  5051  0275  00A2               	movwf	printf@f
  5052  0276  3094               	movlw	high (STR_30| (0+32768))
  5053  0277  00A3               	movwf	printf@f+1
  5054  0278  3185  25A5  3182   	fcall	_printf
  5055  027B                     l2636:	
  5056                           
  5057                           ;mcp2515.c: 205: n = 2;
  5058  027B  3002               	movlw	2
  5059  027C  0020               	movlb	0	; select bank0
  5060  027D  00C4               	movwf	??_can_send
  5061  027E  0844               	movf	??_can_send,w
  5062  027F  00CD               	movwf	can_send@n
  5063                           
  5064                           ;mcp2515.c: 206: } else if ((status & 0b00010000u) == 0) {
  5065  0280  2A9F               	goto	l2650
  5066  0281                     l334:	
  5067  0281  1A4A               	btfsc	can_send@status,4
  5068  0282  2A91               	goto	l337
  5069                           
  5070                           ;mcp2515.c: 207: if (mode.debug) printf("TXB1 is idle\n");
  5071  0283  086B               	movf	_mode,w
  5072  0284  1903               	btfsc	3,2
  5073  0285  2A8D               	goto	l2642
  5074  0286  301A               	movlw	low (STR_31| (0+32768))
  5075  0287  00A2               	movwf	printf@f
  5076  0288  3094               	movlw	high (STR_31| (0+32768))
  5077  0289  00A3               	movwf	printf@f+1
  5078  028A  3185  25A5  3182   	fcall	_printf
  5079  028D                     l2642:	
  5080                           
  5081                           ;mcp2515.c: 208: n = 1;
  5082  028D  0020               	movlb	0	; select bank0
  5083  028E  01CD               	clrf	can_send@n
  5084  028F  0ACD               	incf	can_send@n,f
  5085                           
  5086                           ;mcp2515.c: 209: } else if ((status & 0b00000100u) == 0) {
  5087  0290  2A9F               	goto	l2650
  5088  0291                     l337:	
  5089  0291  194A               	btfsc	can_send@status,2
  5090  0292  2A9F               	goto	l2650
  5091                           
  5092                           ;mcp2515.c: 210: if (mode.debug) printf("TXB0 is idle\n");
  5093  0293  086B               	movf	_mode,w
  5094  0294  1903               	btfsc	3,2
  5095  0295  2A9D               	goto	l2648
  5096  0296  300C               	movlw	low (STR_32| (0+32768))
  5097  0297  00A2               	movwf	printf@f
  5098  0298  3094               	movlw	high (STR_32| (0+32768))
  5099  0299  00A3               	movwf	printf@f+1
  5100  029A  3185  25A5  3182   	fcall	_printf
  5101  029D                     l2648:	
  5102                           
  5103                           ;mcp2515.c: 211: n = 0;
  5104  029D  0020               	movlb	0	; select bank0
  5105  029E  01CD               	clrf	can_send@n
  5106  029F                     l2650:	
  5107                           
  5108                           ;mcp2515.c: 212: }
  5109                           ;mcp2515.c: 218: buf[0] = 0b01000000u + abc[n];
  5110  029F  084D               	movf	can_send@n,w
  5111  02A0  3EAE               	addlw	low (_abc| (0+32768))
  5112  02A1  0084               	movwf	4
  5113  02A2  3094               	movlw	high (_abc| (0+32768))
  5114  02A3  1803               	skipnc
  5115  02A4  3E01               	addlw	1
  5116  02A5  0085               	movwf	5
  5117  02A6  0800               	movf	0,w	;code access
  5118  02A7  3E40               	addlw	64
  5119  02A8  00C4               	movwf	??_can_send
  5120  02A9  0844               	movf	??_can_send,w
  5121  02AA  0021               	movlb	1	; select bank1
  5122  02AB  00B4               	movwf	_buf^(0+128)
  5123                           
  5124                           ;mcp2515.c: 220: buf[1] = sid.sidh;
  5125  02AC  0832               	movf	_sid^(0+128),w
  5126  02AD  0020               	movlb	0	; select bank0
  5127  02AE  00C4               	movwf	??_can_send
  5128  02AF  0844               	movf	??_can_send,w
  5129  02B0  0021               	movlb	1	; select bank1
  5130  02B1  00B5               	movwf	(_buf^(0+128)+1)
  5131                           
  5132                           ;mcp2515.c: 222: buf[2] = sid.sidl;
  5133  02B2  0833               	movf	(_sid^(0+128)+1),w
  5134  02B3  0020               	movlb	0	; select bank0
  5135  02B4  00C4               	movwf	??_can_send
  5136  02B5  0844               	movf	??_can_send,w
  5137  02B6  0021               	movlb	1	; select bank1
  5138  02B7  00B6               	movwf	(_buf^(0+128)+2)
  5139                           
  5140                           ;mcp2515.c: 224: buf[3] = 0;
  5141  02B8  01B7               	clrf	(_buf^(0+128)+3)
  5142                           
  5143                           ;mcp2515.c: 226: buf[4] = 0;
  5144  02B9  01B8               	clrf	(_buf^(0+128)+4)
  5145                           
  5146                           ;mcp2515.c: 228: buf[5] = dlc;
  5147  02BA  0020               	movlb	0	; select bank0
  5148  02BB  0843               	movf	can_send@dlc,w
  5149  02BC  00C4               	movwf	??_can_send
  5150  02BD  0844               	movf	??_can_send,w
  5151  02BE  0021               	movlb	1	; select bank1
  5152  02BF  00B9               	movwf	(_buf^(0+128)+5)
  5153                           
  5154                           ;mcp2515.c: 231: for(i=0; i<dlc; i++) {
  5155  02C0  0020               	movlb	0	; select bank0
  5156  02C1  01CC               	clrf	can_send@i
  5157  02C2                     l2672:	
  5158  02C2  0843               	movf	can_send@dlc,w
  5159  02C3  024C               	subwf	can_send@i,w
  5160  02C4  1803               	btfsc	3,0
  5161  02C5  2AF2               	goto	l2674
  5162                           
  5163                           ;mcp2515.c: 232: buf[6u+i] = data_buf[i];
  5164  02C6  084C               	movf	can_send@i,w
  5165  02C7  074B               	addwf	can_send@data_buf,w
  5166  02C8  00C4               	movwf	??_can_send
  5167  02C9  0844               	movf	??_can_send,w
  5168  02CA  0086               	movwf	6
  5169  02CB  0187               	clrf	7
  5170  02CC  0801               	movf	1,w
  5171  02CD  00C5               	movwf	??_can_send+1
  5172  02CE  084C               	movf	can_send@i,w
  5173  02CF  3E06               	addlw	6
  5174  02D0  3EB4               	addlw	(low (_buf| 0))& (0+255)
  5175  02D1  0086               	movwf	6
  5176  02D2  0187               	clrf	7
  5177  02D3  0845               	movf	??_can_send+1,w
  5178  02D4  0081               	movwf	1
  5179                           
  5180                           ;mcp2515.c: 233: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  5181  02D5  086B               	movf	_mode,w
  5182  02D6  1903               	btfsc	3,2
  5183  02D7  2AEC               	goto	l2670
  5184  02D8  30F3               	movlw	low (STR_33| (0+32768))
  5185  02D9  00A2               	movwf	printf@f
  5186  02DA  3092               	movlw	high (STR_33| (0+32768))
  5187  02DB  00A3               	movwf	printf@f+1
  5188  02DC  084C               	movf	can_send@i,w
  5189  02DD  074B               	addwf	can_send@data_buf,w
  5190  02DE  00C4               	movwf	??_can_send
  5191  02DF  0844               	movf	??_can_send,w
  5192  02E0  0086               	movwf	6
  5193  02E1  0187               	clrf	7
  5194  02E2  0801               	movf	1,w
  5195  02E3  00C5               	movwf	??_can_send+1
  5196  02E4  01C6               	clrf	??_can_send+2
  5197  02E5  0845               	movf	??_can_send+1,w
  5198  02E6  00A4               	movwf	?_printf+2
  5199  02E7  0846               	movf	??_can_send+2,w
  5200  02E8  00A5               	movwf	?_printf+3
  5201  02E9  3185  25A5  3182   	fcall	_printf
  5202  02EC                     l2670:	
  5203  02EC  3001               	movlw	1
  5204  02ED  0020               	movlb	0	; select bank0
  5205  02EE  00C4               	movwf	??_can_send
  5206  02EF  0844               	movf	??_can_send,w
  5207  02F0  07CC               	addwf	can_send@i,f
  5208  02F1  2AC2               	goto	l2672
  5209  02F2                     l2674:	
  5210                           
  5211                           ;mcp2515.c: 234: }
  5212                           ;mcp2515.c: 237: uint8_t len = 6u + dlc;
  5213  02F2  0843               	movf	can_send@dlc,w
  5214  02F3  3E06               	addlw	6
  5215  02F4  00C4               	movwf	??_can_send
  5216  02F5  0844               	movf	??_can_send,w
  5217  02F6  00C8               	movwf	can_send@len
  5218                           
  5219                           ;mcp2515.c: 238: uint8_t bytes_written = SPI_exchange(buf, len);
  5220  02F7  0848               	movf	can_send@len,w
  5221  02F8  00C4               	movwf	??_can_send
  5222  02F9  0844               	movf	??_can_send,w
  5223  02FA  00F8               	movwf	SPI_exchange@len
  5224  02FB  30B4               	movlw	(low (_buf| 0))& (0+255)
  5225  02FC  318B  235D  3182   	fcall	_SPI_exchange
  5226  02FF  0020               	movlb	0	; select bank0
  5227  0300  00C5               	movwf	??_can_send+1
  5228  0301  0845               	movf	??_can_send+1,w
  5229  0302  00C9               	movwf	can_send@bytes_written
  5230                           
  5231                           ;mcp2515.c: 240: buf[0] = 0b00000011u;
  5232  0303  3003               	movlw	3
  5233  0304  00C4               	movwf	??_can_send
  5234  0305  0844               	movf	??_can_send,w
  5235  0306  0021               	movlb	1	; select bank1
  5236  0307  00B4               	movwf	_buf^(0+128)
  5237                           
  5238                           ;mcp2515.c: 241: buf[1] = txbnsidh[n];
  5239  0308  0020               	movlb	0	; select bank0
  5240  0309  084D               	movf	can_send@n,w
  5241  030A  3EAB               	addlw	low (_txbnsidh| (0+32768))
  5242  030B  0084               	movwf	4
  5243  030C  3094               	movlw	high (_txbnsidh| (0+32768))
  5244  030D  1803               	skipnc
  5245  030E  3E01               	addlw	1
  5246  030F  0085               	movwf	5
  5247  0310  0800               	movf	0,w	;code access
  5248  0311  00C4               	movwf	??_can_send
  5249  0312  0844               	movf	??_can_send,w
  5250  0313  0021               	movlb	1	; select bank1
  5251  0314  00B5               	movwf	(_buf^(0+128)+1)
  5252                           
  5253                           ;mcp2515.c: 242: buf[2] = 0x00;
  5254  0315  01B6               	clrf	(_buf^(0+128)+2)
  5255                           
  5256                           ;mcp2515.c: 243: SPI_exchange(buf, 3);
  5257  0316  3003               	movlw	3
  5258  0317  0020               	movlb	0	; select bank0
  5259  0318  00C4               	movwf	??_can_send
  5260  0319  0844               	movf	??_can_send,w
  5261  031A  00F8               	movwf	SPI_exchange@len
  5262  031B  30B4               	movlw	(low (_buf| 0))& (0+255)
  5263  031C  318B  235D  3182   	fcall	_SPI_exchange
  5264                           
  5265                           ;mcp2515.c: 245: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  5266  031F  0020               	movlb	0	; select bank0
  5267  0320  086B               	movf	_mode,w
  5268  0321  1903               	btfsc	3,2
  5269  0322  2B3A               	goto	l2690
  5270  0323  304C               	movlw	low (STR_34| (0+32768))
  5271  0324  00A2               	movwf	printf@f
  5272  0325  3093               	movlw	high (STR_34| (0+32768))
  5273  0326  00A3               	movwf	printf@f+1
  5274  0327  084D               	movf	can_send@n,w
  5275  0328  00C4               	movwf	??_can_send
  5276  0329  01C5               	clrf	??_can_send+1
  5277  032A  0844               	movf	??_can_send,w
  5278  032B  00A4               	movwf	?_printf+2
  5279  032C  0845               	movf	??_can_send+1,w
  5280  032D  00A5               	movwf	?_printf+3
  5281  032E  0021               	movlb	1	; select bank1
  5282  032F  0836               	movf	(_buf^(0+128)+2),w
  5283  0330  0020               	movlb	0	; select bank0
  5284  0331  00C6               	movwf	??_can_send+2
  5285  0332  01C7               	clrf	??_can_send+3
  5286  0333  0846               	movf	??_can_send+2,w
  5287  0334  00A6               	movwf	?_printf+4
  5288  0335  0847               	movf	??_can_send+3,w
  5289  0336  00A7               	movwf	?_printf+5
  5290  0337  3185  25A5  3182   	fcall	_printf
  5291  033A                     l2690:	
  5292                           
  5293                           ;mcp2515.c: 246: buf[0] = 0b00000011u;
  5294  033A  3003               	movlw	3
  5295  033B  0020               	movlb	0	; select bank0
  5296  033C  00C4               	movwf	??_can_send
  5297  033D  0844               	movf	??_can_send,w
  5298  033E  0021               	movlb	1	; select bank1
  5299  033F  00B4               	movwf	_buf^(0+128)
  5300                           
  5301                           ;mcp2515.c: 247: buf[1] = txbnsidh[n] + 1u;
  5302  0340  0020               	movlb	0	; select bank0
  5303  0341  084D               	movf	can_send@n,w
  5304  0342  3EAB               	addlw	low (_txbnsidh| (0+32768))
  5305  0343  0084               	movwf	4
  5306  0344  3094               	movlw	high (_txbnsidh| (0+32768))
  5307  0345  1803               	skipnc
  5308  0346  3E01               	addlw	1
  5309  0347  0085               	movwf	5
  5310  0348  0800               	movf	0,w	;code access
  5311  0349  3E01               	addlw	1
  5312  034A  00C4               	movwf	??_can_send
  5313  034B  0844               	movf	??_can_send,w
  5314  034C  0021               	movlb	1	; select bank1
  5315  034D  00B5               	movwf	(_buf^(0+128)+1)
  5316                           
  5317                           ;mcp2515.c: 248: buf[2] = 0x00;
  5318  034E  01B6               	clrf	(_buf^(0+128)+2)
  5319                           
  5320                           ;mcp2515.c: 249: SPI_exchange(buf, 3);
  5321  034F  3003               	movlw	3
  5322  0350  0020               	movlb	0	; select bank0
  5323  0351  00C4               	movwf	??_can_send
  5324  0352  0844               	movf	??_can_send,w
  5325  0353  00F8               	movwf	SPI_exchange@len
  5326  0354  30B4               	movlw	(low (_buf| 0))& (0+255)
  5327  0355  318B  235D  3182   	fcall	_SPI_exchange
  5328                           
  5329                           ;mcp2515.c: 251: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  5330  0358  0020               	movlb	0	; select bank0
  5331  0359  086B               	movf	_mode,w
  5332  035A  1903               	btfsc	3,2
  5333  035B  2B73               	goto	l2702
  5334  035C  306E               	movlw	low (STR_35| (0+32768))
  5335  035D  00A2               	movwf	printf@f
  5336  035E  3093               	movlw	high (STR_35| (0+32768))
  5337  035F  00A3               	movwf	printf@f+1
  5338  0360  084D               	movf	can_send@n,w
  5339  0361  00C4               	movwf	??_can_send
  5340  0362  01C5               	clrf	??_can_send+1
  5341  0363  0844               	movf	??_can_send,w
  5342  0364  00A4               	movwf	?_printf+2
  5343  0365  0845               	movf	??_can_send+1,w
  5344  0366  00A5               	movwf	?_printf+3
  5345  0367  0021               	movlb	1	; select bank1
  5346  0368  0836               	movf	(_buf^(0+128)+2),w
  5347  0369  0020               	movlb	0	; select bank0
  5348  036A  00C6               	movwf	??_can_send+2
  5349  036B  01C7               	clrf	??_can_send+3
  5350  036C  0846               	movf	??_can_send+2,w
  5351  036D  00A6               	movwf	?_printf+4
  5352  036E  0847               	movf	??_can_send+3,w
  5353  036F  00A7               	movwf	?_printf+5
  5354  0370  3185  25A5  3182   	fcall	_printf
  5355  0373                     l2702:	
  5356                           
  5357                           ;mcp2515.c: 253: if (bytes_written == len) {
  5358  0373  0020               	movlb	0	; select bank0
  5359  0374  0849               	movf	can_send@bytes_written,w
  5360  0375  0648               	xorwf	can_send@len,w
  5361  0376  1D03               	skipz
  5362  0377  0008               	return
  5363                           
  5364                           ;mcp2515.c: 255: buf[0] = 0b10000000u + (0b00000001u << n);
  5365  0378  3001               	movlw	1
  5366  0379  00C4               	movwf	??_can_send
  5367  037A  0A4D               	incf	can_send@n,w
  5368  037B  2B7D               	goto	u2424
  5369  037C                     u2425:	
  5370  037C  35C4               	lslf	??_can_send,f
  5371  037D                     u2424:	
  5372  037D  0B89               	decfsz	9,f
  5373  037E  2B7C               	goto	u2425
  5374  037F  0844               	movf	??_can_send,w
  5375  0380  3E80               	addlw	128
  5376  0381  00C5               	movwf	??_can_send+1
  5377  0382  0845               	movf	??_can_send+1,w
  5378  0383  0021               	movlb	1	; select bank1
  5379  0384  00B4               	movwf	_buf^(0+128)
  5380                           
  5381                           ;mcp2515.c: 256: bytes_written = SPI_exchange(buf, 1);
  5382  0385  01F8               	clrf	SPI_exchange@len
  5383  0386  0AF8               	incf	SPI_exchange@len,f
  5384  0387  30B4               	movlw	(low (_buf| 0))& (0+255)
  5385  0388  318B  235D  3182   	fcall	_SPI_exchange
  5386  038B  0020               	movlb	0	; select bank0
  5387  038C  00C4               	movwf	??_can_send
  5388  038D  0844               	movf	??_can_send,w
  5389  038E  00C9               	movwf	can_send@bytes_written
  5390                           
  5391                           ;mcp2515.c: 257: if (bytes_written == 1) {
  5392  038F  0349               	decf	can_send@bytes_written,w
  5393  0390  1D03               	btfss	3,2
  5394  0391  0008               	return
  5395                           
  5396                           ;mcp2515.c: 258: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5397  0392  086B               	movf	_mode,w
  5398  0393  1903               	btfsc	3,2
  5399  0394  0008               	return
  5400  0395  3007               	movlw	low (STR_36| (0+32768))
  5401  0396  00A2               	movwf	printf@f
  5402  0397  3093               	movlw	high (STR_36| (0+32768))
  5403  0398  00A3               	movwf	printf@f+1
  5404  0399  084B               	movf	can_send@data_buf,w
  5405  039A  00A4               	movwf	low ((?_printf| 0+2))
  5406  039B  3000               	movlw	0
  5407  039C  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5408  039D  3185  25A5         	fcall	_printf
  5409                           
  5410                           ;mcp2515.c: 259: return 1;
  5411                           ;	Return value of _can_send is never used
  5412  039F  0008               	return
  5413  03A0                     __end_of_can_send:	
  5414                           ;mcp2515.c: 260: }
  5415                           ;mcp2515.c: 261: }
  5416                           ;mcp2515.c: 263: return 0;
  5417                           ;	Return value of _can_send is never used
  5418                           
  5419                           
  5420                           	psect	text7
  5421  0B26                     __ptext7:	
  5422 ;; *************** function _can_logging_mode *****************
  5423 ;; Defined at:
  5424 ;;		line 30 in file "mcp2515.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  debug           1    wreg     unsigned char 
  5427 ;;  verbose         1    0[COMMON] unsigned char 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  debug           1    2[COMMON] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        3 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _can_logging_mode
  5454  0B26                     _can_logging_mode:	
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _can_logging_mode: [wreg]
  5458                           ;can_logging_mode@debug stored from wreg
  5459  0B26  00F2               	movwf	can_logging_mode@debug
  5460                           
  5461                           ;mcp2515.c: 31: mode.debug = debug;
  5462  0B27  0872               	movf	can_logging_mode@debug,w
  5463  0B28  00F1               	movwf	??_can_logging_mode
  5464  0B29  0871               	movf	??_can_logging_mode,w
  5465  0B2A  0020               	movlb	0	; select bank0
  5466  0B2B  00EB               	movwf	_mode
  5467                           
  5468                           ;mcp2515.c: 32: mode.verbose = verbose;
  5469  0B2C  0870               	movf	can_logging_mode@verbose,w
  5470  0B2D  00F1               	movwf	??_can_logging_mode
  5471  0B2E  0871               	movf	??_can_logging_mode,w
  5472  0B2F  00EC               	movwf	_mode+1
  5473  0B30  0008               	return
  5474  0B31                     __end_of_can_logging_mode:	
  5475                           
  5476                           	psect	text8
  5477  0E18                     __ptext8:	
  5478 ;; *************** function _can_init *****************
  5479 ;; Defined at:
  5480 ;;		line 53 in file "mcp2515.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  receive_hand    2   39[BANK0 ] PTR void 
  5483 ;;		 -> receive_handler(1), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:        4 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    4
  5502 ;; This function calls:
  5503 ;;		_SPI_exchange
  5504 ;;		_can_ope_mode
  5505 ;;		_can_set_sid
  5506 ;; This function is called by:
  5507 ;;		_main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _can_init
  5513  0E18                     _can_init:	
  5514                           
  5515                           ;mcp2515.c: 54: _delay((unsigned long)((100)*(32000000/4000.0)));
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5519  0E18  3005               	movlw	5
  5520  0E19  0020               	movlb	0	; select bank0
  5521  0E1A  00CA               	movwf	??_can_init+1
  5522  0E1B  300F               	movlw	15
  5523  0E1C  00C9               	movwf	??_can_init
  5524  0E1D  30F1               	movlw	241
  5525  0E1E                     u2647:	
  5526  0E1E  0B89               	decfsz	9,f
  5527  0E1F  2E1E               	goto	u2647
  5528  0E20  0BC9               	decfsz	??_can_init,f
  5529  0E21  2E1E               	goto	u2647
  5530  0E22  0BCA               	decfsz	??_can_init+1,f
  5531  0E23  2E1E               	goto	u2647
  5532                           
  5533                           ;mcp2515.c: 56: can_set_sid(0);
  5534  0E24  3000               	movlw	0
  5535  0E25  00F0               	movwf	can_set_sid@can_node
  5536  0E26  00F1               	movwf	can_set_sid@can_node+1
  5537  0E27  318B  23BD  318E   	fcall	_can_set_sid
  5538                           
  5539                           ;mcp2515.c: 57: handler = receive_handler;
  5540  0E2A  0020               	movlb	0	; select bank0
  5541  0E2B  0848               	movf	can_init@receive_handler+1,w
  5542  0E2C  0021               	movlb	1	; select bank1
  5543  0E2D  00B1               	movwf	(_handler+1)^(0+128)
  5544  0E2E  0020               	movlb	0	; select bank0
  5545  0E2F  0847               	movf	can_init@receive_handler,w
  5546  0E30  0021               	movlb	1	; select bank1
  5547  0E31  00B0               	movwf	_handler^(0+128)
  5548                           
  5549                           ;mcp2515.c: 60: buf[0] = 0b11000000u;
  5550  0E32  30C0               	movlw	192
  5551  0E33  0020               	movlb	0	; select bank0
  5552  0E34  00C9               	movwf	??_can_init
  5553  0E35  0849               	movf	??_can_init,w
  5554  0E36  0021               	movlb	1	; select bank1
  5555  0E37  00B4               	movwf	_buf^(0+128)
  5556                           
  5557                           ;mcp2515.c: 61: SPI_exchange(buf, 1);
  5558  0E38  01F8               	clrf	SPI_exchange@len
  5559  0E39  0AF8               	incf	SPI_exchange@len,f
  5560  0E3A  30B4               	movlw	(low (_buf| 0))& (0+255)
  5561  0E3B  318B  235D  318E   	fcall	_SPI_exchange
  5562                           
  5563                           ;mcp2515.c: 63: _delay((unsigned long)((2+48)*(32000000/4000000.0)));
  5564  0E3E  3085               	movlw	133
  5565  0E3F                     u2657:	
  5566  0E3F  0B89               	decfsz	9,f
  5567  0E40  2E3F               	goto	u2657
  5568  0E41  0000               	nop
  5569                           
  5570                           ;mcp2515.c: 65: buf[0] = 0b00000010u;
  5571  0E42  3002               	movlw	2
  5572  0E43  0020               	movlb	0	; select bank0
  5573  0E44  00C9               	movwf	??_can_init
  5574  0E45  0849               	movf	??_can_init,w
  5575  0E46  0021               	movlb	1	; select bank1
  5576  0E47  00B4               	movwf	_buf^(0+128)
  5577                           
  5578                           ;mcp2515.c: 66: buf[1] = 0x28u;
  5579  0E48  3028               	movlw	40
  5580  0E49  0020               	movlb	0	; select bank0
  5581  0E4A  00C9               	movwf	??_can_init
  5582  0E4B  0849               	movf	??_can_init,w
  5583  0E4C  0021               	movlb	1	; select bank1
  5584  0E4D  00B5               	movwf	(_buf^(0+128)+1)
  5585                           
  5586                           ;mcp2515.c: 67: buf[2] = 0b00000101u;
  5587  0E4E  3005               	movlw	5
  5588  0E4F  0020               	movlb	0	; select bank0
  5589  0E50  00C9               	movwf	??_can_init
  5590  0E51  0849               	movf	??_can_init,w
  5591  0E52  0021               	movlb	1	; select bank1
  5592  0E53  00B6               	movwf	(_buf^(0+128)+2)
  5593                           
  5594                           ;mcp2515.c: 68: buf[3] = 0b11110001u;
  5595  0E54  30F1               	movlw	241
  5596  0E55  0020               	movlb	0	; select bank0
  5597  0E56  00C9               	movwf	??_can_init
  5598  0E57  0849               	movf	??_can_init,w
  5599  0E58  0021               	movlb	1	; select bank1
  5600  0E59  00B7               	movwf	(_buf^(0+128)+3)
  5601                           
  5602                           ;mcp2515.c: 69: buf[4] = 0b01000001u;
  5603  0E5A  3041               	movlw	65
  5604  0E5B  0020               	movlb	0	; select bank0
  5605  0E5C  00C9               	movwf	??_can_init
  5606  0E5D  0849               	movf	??_can_init,w
  5607  0E5E  0021               	movlb	1	; select bank1
  5608  0E5F  00B8               	movwf	(_buf^(0+128)+4)
  5609                           
  5610                           ;mcp2515.c: 70: SPI_exchange(buf, 5);
  5611  0E60  3005               	movlw	5
  5612  0E61  0020               	movlb	0	; select bank0
  5613  0E62  00C9               	movwf	??_can_init
  5614  0E63  0849               	movf	??_can_init,w
  5615  0E64  00F8               	movwf	SPI_exchange@len
  5616  0E65  30B4               	movlw	(low (_buf| 0))& (0+255)
  5617  0E66  318B  235D  318E   	fcall	_SPI_exchange
  5618                           
  5619                           ;mcp2515.c: 72: buf[0] = 0b00000010u;
  5620  0E69  3002               	movlw	2
  5621  0E6A  0020               	movlb	0	; select bank0
  5622  0E6B  00C9               	movwf	??_can_init
  5623  0E6C  0849               	movf	??_can_init,w
  5624  0E6D  0021               	movlb	1	; select bank1
  5625  0E6E  00B4               	movwf	_buf^(0+128)
  5626                           
  5627                           ;mcp2515.c: 73: buf[1] = 0x60u;
  5628  0E6F  3060               	movlw	96
  5629  0E70  0020               	movlb	0	; select bank0
  5630  0E71  00C9               	movwf	??_can_init
  5631  0E72  0849               	movf	??_can_init,w
  5632  0E73  0021               	movlb	1	; select bank1
  5633  0E74  00B5               	movwf	(_buf^(0+128)+1)
  5634                           
  5635                           ;mcp2515.c: 74: buf[2] = 0b00100100u;
  5636  0E75  3024               	movlw	36
  5637  0E76  0020               	movlb	0	; select bank0
  5638  0E77  00C9               	movwf	??_can_init
  5639  0E78  0849               	movf	??_can_init,w
  5640  0E79  0021               	movlb	1	; select bank1
  5641  0E7A  00B6               	movwf	(_buf^(0+128)+2)
  5642                           
  5643                           ;mcp2515.c: 75: SPI_exchange(buf, 3);
  5644  0E7B  3003               	movlw	3
  5645  0E7C  0020               	movlb	0	; select bank0
  5646  0E7D  00C9               	movwf	??_can_init
  5647  0E7E  0849               	movf	??_can_init,w
  5648  0E7F  00F8               	movwf	SPI_exchange@len
  5649  0E80  30B4               	movlw	(low (_buf| 0))& (0+255)
  5650  0E81  318B  235D  318E   	fcall	_SPI_exchange
  5651                           
  5652                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  5653  0E84  3002               	movlw	2
  5654  0E85  0020               	movlb	0	; select bank0
  5655  0E86  00C9               	movwf	??_can_init
  5656  0E87  0849               	movf	??_can_init,w
  5657  0E88  0021               	movlb	1	; select bank1
  5658  0E89  00B4               	movwf	_buf^(0+128)
  5659                           
  5660                           ;mcp2515.c: 78: buf[1] = 0x70u;
  5661  0E8A  3070               	movlw	112
  5662  0E8B  0020               	movlb	0	; select bank0
  5663  0E8C  00C9               	movwf	??_can_init
  5664  0E8D  0849               	movf	??_can_init,w
  5665  0E8E  0021               	movlb	1	; select bank1
  5666  0E8F  00B5               	movwf	(_buf^(0+128)+1)
  5667                           
  5668                           ;mcp2515.c: 79: buf[2] = 0b00100000u;
  5669  0E90  3020               	movlw	32
  5670  0E91  0020               	movlb	0	; select bank0
  5671  0E92  00C9               	movwf	??_can_init
  5672  0E93  0849               	movf	??_can_init,w
  5673  0E94  0021               	movlb	1	; select bank1
  5674  0E95  00B6               	movwf	(_buf^(0+128)+2)
  5675                           
  5676                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  5677  0E96  3003               	movlw	3
  5678  0E97  0020               	movlb	0	; select bank0
  5679  0E98  00C9               	movwf	??_can_init
  5680  0E99  0849               	movf	??_can_init,w
  5681  0E9A  00F8               	movwf	SPI_exchange@len
  5682  0E9B  30B4               	movlw	(low (_buf| 0))& (0+255)
  5683  0E9C  318B  235D  318E   	fcall	_SPI_exchange
  5684                           
  5685                           ;mcp2515.c: 82: mode.debug = 0;
  5686  0E9F  0020               	movlb	0	; select bank0
  5687  0EA0  01EB               	clrf	_mode
  5688                           
  5689                           ;mcp2515.c: 83: mode.verbose = 0;
  5690  0EA1  01EC               	clrf	_mode+1
  5691                           
  5692                           ;mcp2515.c: 85: can_ope_mode(0b00000000u);
  5693  0EA2  3000               	movlw	0
  5694  0EA3  318D  25C1         	fcall	_can_ope_mode
  5695  0EA5  0008               	return
  5696  0EA6                     __end_of_can_init:	
  5697                           
  5698                           	psect	text9
  5699  0BBD                     __ptext9:	
  5700 ;; *************** function _can_set_sid *****************
  5701 ;; Defined at:
  5702 ;;		line 43 in file "mcp2515.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  can_node        2    0[COMMON] unsigned int 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  sidl            1    6[COMMON] unsigned char 
  5707 ;;  sidh            1    5[COMMON] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      void 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;Total ram usage:        7 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_main
  5727 ;;		_can_init
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _can_set_sid
  5733  0BBD                     _can_set_sid:	
  5734                           
  5735                           ;mcp2515.c: 44: uint8_t sidh = (can_node >> 3) & 0x00ff;
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  5739  0BBD  0871               	movf	can_set_sid@can_node+1,w
  5740  0BBE  00F3               	movwf	??_can_set_sid+1
  5741  0BBF  0870               	movf	can_set_sid@can_node,w
  5742  0BC0  00F2               	movwf	??_can_set_sid
  5743  0BC1  36F3               	lsrf	??_can_set_sid+1,f
  5744  0BC2  0CF2               	rrf	??_can_set_sid,f
  5745  0BC3  36F3               	lsrf	??_can_set_sid+1,f
  5746  0BC4  0CF2               	rrf	??_can_set_sid,f
  5747  0BC5  36F3               	lsrf	??_can_set_sid+1,f
  5748  0BC6  0CF2               	rrf	??_can_set_sid,f
  5749  0BC7  0872               	movf	??_can_set_sid,w
  5750  0BC8  00F4               	movwf	??_can_set_sid+2
  5751  0BC9  0874               	movf	??_can_set_sid+2,w
  5752  0BCA  00F5               	movwf	can_set_sid@sidh
  5753                           
  5754                           ;mcp2515.c: 45: uint8_t sidl = (can_node << 5) & 0x00e0;
  5755  0BCB  0870               	movf	can_set_sid@can_node,w
  5756  0BCC  00F2               	movwf	??_can_set_sid
  5757  0BCD  3004               	movlw	4
  5758  0BCE                     u1955:	
  5759  0BCE  35F2               	lslf	??_can_set_sid,f
  5760  0BCF  3EFF               	addlw	-1
  5761  0BD0  1D03               	skipz
  5762  0BD1  2BCE               	goto	u1955
  5763  0BD2  3572               	lslf	??_can_set_sid,w
  5764  0BD3  39E0               	andlw	224
  5765  0BD4  00F3               	movwf	??_can_set_sid+1
  5766  0BD5  0873               	movf	??_can_set_sid+1,w
  5767  0BD6  00F6               	movwf	can_set_sid@sidl
  5768                           
  5769                           ;mcp2515.c: 46: sid.sidh = sidh;
  5770  0BD7  0875               	movf	can_set_sid@sidh,w
  5771  0BD8  00F2               	movwf	??_can_set_sid
  5772  0BD9  0872               	movf	??_can_set_sid,w
  5773  0BDA  0021               	movlb	1	; select bank1
  5774  0BDB  00B2               	movwf	_sid^(0+128)
  5775                           
  5776                           ;mcp2515.c: 47: sid.sidl = sidl;
  5777  0BDC  0876               	movf	can_set_sid@sidl,w
  5778  0BDD  00F2               	movwf	??_can_set_sid
  5779  0BDE  0872               	movf	??_can_set_sid,w
  5780  0BDF  00B3               	movwf	(_sid^(0+128)+1)
  5781  0BE0  0008               	return
  5782  0BE1                     __end_of_can_set_sid:	
  5783                           
  5784                           	psect	text10
  5785  0143                     __ptext10:	
  5786 ;; *************** function _can_dump_registers *****************
  5787 ;; Defined at:
  5788 ;;		line 356 in file "mcp2515.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;Total ram usage:        2 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    4
  5809 ;; This function calls:
  5810 ;;		_printf
  5811 ;;		_read_register
  5812 ;; This function is called by:
  5813 ;;		_main
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function _can_dump_registers
  5819  0143                     _can_dump_registers:	
  5820                           
  5821                           ;mcp2515.c: 357: printf("---\n");
  5822                           
  5823                           ;incstack = 0
  5824                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5825  0143  30A6               	movlw	low (STR_39| (0+32768))
  5826  0144  0020               	movlb	0	; select bank0
  5827  0145  00A2               	movwf	printf@f
  5828  0146  3094               	movlw	high (STR_39| (0+32768))
  5829  0147  00A3               	movwf	printf@f+1
  5830  0148  3185  25A5  3181   	fcall	_printf
  5831                           
  5832                           ;mcp2515.c: 358: printf("SIDH: %02x\n", sid.sidh);
  5833  014B  3040               	movlw	low ((STR_26+5)| (0+32768))
  5834  014C  0020               	movlb	0	; select bank0
  5835  014D  00A2               	movwf	printf@f
  5836  014E  3093               	movlw	high ((STR_26+5)| (0+32768))
  5837  014F  00A3               	movwf	printf@f+1
  5838  0150  0021               	movlb	1	; select bank1
  5839  0151  0832               	movf	_sid^(0+128),w
  5840  0152  0020               	movlb	0	; select bank0
  5841  0153  00C3               	movwf	??_can_dump_registers
  5842  0154  01C4               	clrf	??_can_dump_registers+1
  5843  0155  0843               	movf	??_can_dump_registers,w
  5844  0156  00A4               	movwf	?_printf+2
  5845  0157  0844               	movf	??_can_dump_registers+1,w
  5846  0158  00A5               	movwf	?_printf+3
  5847  0159  3185  25A5  3181   	fcall	_printf
  5848                           
  5849                           ;mcp2515.c: 359: printf("SIDL: %02x\n", sid.sidl);
  5850  015C  3062               	movlw	low ((STR_27+5)| (0+32768))
  5851  015D  0020               	movlb	0	; select bank0
  5852  015E  00A2               	movwf	printf@f
  5853  015F  3093               	movlw	high ((STR_27+5)| (0+32768))
  5854  0160  00A3               	movwf	printf@f+1
  5855  0161  0021               	movlb	1	; select bank1
  5856  0162  0833               	movf	(_sid^(0+128)+1),w
  5857  0163  0020               	movlb	0	; select bank0
  5858  0164  00C3               	movwf	??_can_dump_registers
  5859  0165  01C4               	clrf	??_can_dump_registers+1
  5860  0166  0843               	movf	??_can_dump_registers,w
  5861  0167  00A4               	movwf	?_printf+2
  5862  0168  0844               	movf	??_can_dump_registers+1,w
  5863  0169  00A5               	movwf	?_printf+3
  5864  016A  3185  25A5  3181   	fcall	_printf
  5865                           
  5866                           ;mcp2515.c: 360: printf("\n");
  5867  016D  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5868  016E  0020               	movlb	0	; select bank0
  5869  016F  00A2               	movwf	printf@f
  5870  0170  3094               	movlw	high ((STR_39+3)| (0+32768))
  5871  0171  00A3               	movwf	printf@f+1
  5872  0172  3185  25A5  3181   	fcall	_printf
  5873                           
  5874                           ;mcp2515.c: 362: printf("CNF1: %02x\n", read_register(0x2au));
  5875  0175  3050               	movlw	low (STR_47| (0+32768))
  5876  0176  0020               	movlb	0	; select bank0
  5877  0177  00A2               	movwf	printf@f
  5878  0178  3094               	movlw	high (STR_47| (0+32768))
  5879  0179  00A3               	movwf	printf@f+1
  5880  017A  302A               	movlw	42
  5881  017B  318B  2389  3181   	fcall	_read_register
  5882  017E  0020               	movlb	0	; select bank0
  5883  017F  00C3               	movwf	??_can_dump_registers
  5884  0180  01C4               	clrf	??_can_dump_registers+1
  5885  0181  0843               	movf	??_can_dump_registers,w
  5886  0182  00A4               	movwf	?_printf+2
  5887  0183  0844               	movf	??_can_dump_registers+1,w
  5888  0184  00A5               	movwf	?_printf+3
  5889  0185  3185  25A5  3181   	fcall	_printf
  5890                           
  5891                           ;mcp2515.c: 363: printf("CNF2: %02x\n", read_register(0x29u));
  5892  0188  305C               	movlw	low (STR_48| (0+32768))
  5893  0189  0020               	movlb	0	; select bank0
  5894  018A  00A2               	movwf	printf@f
  5895  018B  3094               	movlw	high (STR_48| (0+32768))
  5896  018C  00A3               	movwf	printf@f+1
  5897  018D  3029               	movlw	41
  5898  018E  318B  2389  3181   	fcall	_read_register
  5899  0191  0020               	movlb	0	; select bank0
  5900  0192  00C3               	movwf	??_can_dump_registers
  5901  0193  01C4               	clrf	??_can_dump_registers+1
  5902  0194  0843               	movf	??_can_dump_registers,w
  5903  0195  00A4               	movwf	?_printf+2
  5904  0196  0844               	movf	??_can_dump_registers+1,w
  5905  0197  00A5               	movwf	?_printf+3
  5906  0198  3185  25A5  3181   	fcall	_printf
  5907                           
  5908                           ;mcp2515.c: 364: printf("CNF3: %02x\n", read_register(0x28u));
  5909  019B  3068               	movlw	low (STR_49| (0+32768))
  5910  019C  0020               	movlb	0	; select bank0
  5911  019D  00A2               	movwf	printf@f
  5912  019E  3094               	movlw	high (STR_49| (0+32768))
  5913  019F  00A3               	movwf	printf@f+1
  5914  01A0  3028               	movlw	40
  5915  01A1  318B  2389  3181   	fcall	_read_register
  5916  01A4  0020               	movlb	0	; select bank0
  5917  01A5  00C3               	movwf	??_can_dump_registers
  5918  01A6  01C4               	clrf	??_can_dump_registers+1
  5919  01A7  0843               	movf	??_can_dump_registers,w
  5920  01A8  00A4               	movwf	?_printf+2
  5921  01A9  0844               	movf	??_can_dump_registers+1,w
  5922  01AA  00A5               	movwf	?_printf+3
  5923  01AB  3185  25A5  3181   	fcall	_printf
  5924                           
  5925                           ;mcp2515.c: 365: printf("\n");
  5926  01AE  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5927  01AF  0020               	movlb	0	; select bank0
  5928  01B0  00A2               	movwf	printf@f
  5929  01B1  3094               	movlw	high ((STR_39+3)| (0+32768))
  5930  01B2  00A3               	movwf	printf@f+1
  5931  01B3  3185  25A5  3181   	fcall	_printf
  5932                           
  5933                           ;mcp2515.c: 367: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  5934  01B6  309F               	movlw	low (STR_51| (0+32768))
  5935  01B7  0020               	movlb	0	; select bank0
  5936  01B8  00A2               	movwf	printf@f
  5937  01B9  3093               	movlw	high (STR_51| (0+32768))
  5938  01BA  00A3               	movwf	printf@f+1
  5939  01BB  3030               	movlw	48
  5940  01BC  318B  2389  3181   	fcall	_read_register
  5941  01BF  0020               	movlb	0	; select bank0
  5942  01C0  00C3               	movwf	??_can_dump_registers
  5943  01C1  01C4               	clrf	??_can_dump_registers+1
  5944  01C2  0843               	movf	??_can_dump_registers,w
  5945  01C3  00A4               	movwf	?_printf+2
  5946  01C4  0844               	movf	??_can_dump_registers+1,w
  5947  01C5  00A5               	movwf	?_printf+3
  5948  01C6  3185  25A5  3181   	fcall	_printf
  5949                           
  5950                           ;mcp2515.c: 368: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  5951  01C9  30BF               	movlw	low (STR_52| (0+32768))
  5952  01CA  0020               	movlb	0	; select bank0
  5953  01CB  00A2               	movwf	printf@f
  5954  01CC  3093               	movlw	high (STR_52| (0+32768))
  5955  01CD  00A3               	movwf	printf@f+1
  5956  01CE  3040               	movlw	64
  5957  01CF  318B  2389  3181   	fcall	_read_register
  5958  01D2  0020               	movlb	0	; select bank0
  5959  01D3  00C3               	movwf	??_can_dump_registers
  5960  01D4  01C4               	clrf	??_can_dump_registers+1
  5961  01D5  0843               	movf	??_can_dump_registers,w
  5962  01D6  00A4               	movwf	?_printf+2
  5963  01D7  0844               	movf	??_can_dump_registers+1,w
  5964  01D8  00A5               	movwf	?_printf+3
  5965  01D9  3185  25A5  3181   	fcall	_printf
  5966                           
  5967                           ;mcp2515.c: 369: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  5968  01DC  30CF               	movlw	low (STR_53| (0+32768))
  5969  01DD  0020               	movlb	0	; select bank0
  5970  01DE  00A2               	movwf	printf@f
  5971  01DF  3093               	movlw	high (STR_53| (0+32768))
  5972  01E0  00A3               	movwf	printf@f+1
  5973  01E1  3050               	movlw	80
  5974  01E2  318B  2389  3181   	fcall	_read_register
  5975  01E5  0020               	movlb	0	; select bank0
  5976  01E6  00C3               	movwf	??_can_dump_registers
  5977  01E7  01C4               	clrf	??_can_dump_registers+1
  5978  01E8  0843               	movf	??_can_dump_registers,w
  5979  01E9  00A4               	movwf	?_printf+2
  5980  01EA  0844               	movf	??_can_dump_registers+1,w
  5981  01EB  00A5               	movwf	?_printf+3
  5982  01EC  3185  25A5  3181   	fcall	_printf
  5983                           
  5984                           ;mcp2515.c: 370: printf("\n");
  5985  01EF  30A9               	movlw	low ((STR_39+3)| (0+32768))
  5986  01F0  0020               	movlb	0	; select bank0
  5987  01F1  00A2               	movwf	printf@f
  5988  01F2  3094               	movlw	high ((STR_39+3)| (0+32768))
  5989  01F3  00A3               	movwf	printf@f+1
  5990  01F4  3185  25A5  3181   	fcall	_printf
  5991                           
  5992                           ;mcp2515.c: 372: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  5993  01F7  308F               	movlw	low (STR_55| (0+32768))
  5994  01F8  0020               	movlb	0	; select bank0
  5995  01F9  00A2               	movwf	printf@f
  5996  01FA  3093               	movlw	high (STR_55| (0+32768))
  5997  01FB  00A3               	movwf	printf@f+1
  5998  01FC  3060               	movlw	96
  5999  01FD  318B  2389  3181   	fcall	_read_register
  6000  0200  0020               	movlb	0	; select bank0
  6001  0201  00C3               	movwf	??_can_dump_registers
  6002  0202  01C4               	clrf	??_can_dump_registers+1
  6003  0203  0843               	movf	??_can_dump_registers,w
  6004  0204  00A4               	movwf	?_printf+2
  6005  0205  0844               	movf	??_can_dump_registers+1,w
  6006  0206  00A5               	movwf	?_printf+3
  6007  0207  3185  25A5  3181   	fcall	_printf
  6008                           
  6009                           ;mcp2515.c: 373: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6010  020A  30AF               	movlw	low (STR_56| (0+32768))
  6011  020B  0020               	movlb	0	; select bank0
  6012  020C  00A2               	movwf	printf@f
  6013  020D  3093               	movlw	high (STR_56| (0+32768))
  6014  020E  00A3               	movwf	printf@f+1
  6015  020F  3070               	movlw	112
  6016  0210  318B  2389  3181   	fcall	_read_register
  6017  0213  0020               	movlb	0	; select bank0
  6018  0214  00C3               	movwf	??_can_dump_registers
  6019  0215  01C4               	clrf	??_can_dump_registers+1
  6020  0216  0843               	movf	??_can_dump_registers,w
  6021  0217  00A4               	movwf	?_printf+2
  6022  0218  0844               	movf	??_can_dump_registers+1,w
  6023  0219  00A5               	movwf	?_printf+3
  6024  021A  3185  25A5  3181   	fcall	_printf
  6025                           
  6026                           ;mcp2515.c: 374: printf("\n");
  6027  021D  30A9               	movlw	low ((STR_39+3)| (0+32768))
  6028  021E  0020               	movlb	0	; select bank0
  6029  021F  00A2               	movwf	printf@f
  6030  0220  3094               	movlw	high ((STR_39+3)| (0+32768))
  6031  0221  00A3               	movwf	printf@f+1
  6032  0222  3185  25A5  3181   	fcall	_printf
  6033                           
  6034                           ;mcp2515.c: 376: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6035  0225  30EE               	movlw	low (STR_58| (0+32768))
  6036  0226  0020               	movlb	0	; select bank0
  6037  0227  00A2               	movwf	printf@f
  6038  0228  3093               	movlw	high (STR_58| (0+32768))
  6039  0229  00A3               	movwf	printf@f+1
  6040  022A  300F               	movlw	15
  6041  022B  318B  2389  3181   	fcall	_read_register
  6042  022E  0020               	movlb	0	; select bank0
  6043  022F  00C3               	movwf	??_can_dump_registers
  6044  0230  01C4               	clrf	??_can_dump_registers+1
  6045  0231  0843               	movf	??_can_dump_registers,w
  6046  0232  00A4               	movwf	?_printf+2
  6047  0233  0844               	movf	??_can_dump_registers+1,w
  6048  0234  00A5               	movwf	?_printf+3
  6049  0235  3185  25A5  3181   	fcall	_printf
  6050                           
  6051                           ;mcp2515.c: 377: printf("CANSTAT: %02x\n", read_register(0x0e));
  6052  0238  30FD               	movlw	low (STR_23| (0+32768))
  6053  0239  0020               	movlb	0	; select bank0
  6054  023A  00A2               	movwf	printf@f
  6055  023B  3093               	movlw	high (STR_23| (0+32768))
  6056  023C  00A3               	movwf	printf@f+1
  6057  023D  300E               	movlw	14
  6058  023E  318B  2389  3181   	fcall	_read_register
  6059  0241  0020               	movlb	0	; select bank0
  6060  0242  00C3               	movwf	??_can_dump_registers
  6061  0243  01C4               	clrf	??_can_dump_registers+1
  6062  0244  0843               	movf	??_can_dump_registers,w
  6063  0245  00A4               	movwf	?_printf+2
  6064  0246  0844               	movf	??_can_dump_registers+1,w
  6065  0247  00A5               	movwf	?_printf+3
  6066  0248  3185  25A5  3181   	fcall	_printf
  6067                           
  6068                           ;mcp2515.c: 378: printf("---\n");
  6069  024B  30A6               	movlw	low (STR_39| (0+32768))
  6070  024C  0020               	movlb	0	; select bank0
  6071  024D  00A2               	movwf	printf@f
  6072  024E  3094               	movlw	high (STR_39| (0+32768))
  6073  024F  00A3               	movwf	printf@f+1
  6074  0250  3185  25A5         	fcall	_printf
  6075  0252  0008               	return
  6076  0253                     __end_of_can_dump_registers:	
  6077                           
  6078                           	psect	text11
  6079  0B89                     __ptext11:	
  6080 ;; *************** function _read_register *****************
  6081 ;; Defined at:
  6082 ;;		line 326 in file "mcp2515.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  addr            1    wreg     unsigned char 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  addr            1    1[BANK0 ] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      unsigned char 
  6089 ;; Registers used:
  6090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;Total ram usage:        2 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    3
  6103 ;; This function calls:
  6104 ;;		_SPI_exchange
  6105 ;; This function is called by:
  6106 ;;		_can_dump_registers
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function _read_register
  6112  0B89                     _read_register:	
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6116                           ;read_register@addr stored from wreg
  6117  0B89  0020               	movlb	0	; select bank0
  6118  0B8A  00A1               	movwf	read_register@addr
  6119                           
  6120                           ;mcp2515.c: 327: buf[0] = 0b00000011u;
  6121  0B8B  3003               	movlw	3
  6122  0B8C  00A0               	movwf	??_read_register
  6123  0B8D  0820               	movf	??_read_register,w
  6124  0B8E  0021               	movlb	1	; select bank1
  6125  0B8F  00B4               	movwf	_buf^(0+128)
  6126                           
  6127                           ;mcp2515.c: 328: buf[1] = addr;
  6128  0B90  0020               	movlb	0	; select bank0
  6129  0B91  0821               	movf	read_register@addr,w
  6130  0B92  00A0               	movwf	??_read_register
  6131  0B93  0820               	movf	??_read_register,w
  6132  0B94  0021               	movlb	1	; select bank1
  6133  0B95  00B5               	movwf	(_buf^(0+128)+1)
  6134                           
  6135                           ;mcp2515.c: 329: buf[2] = 0x00;
  6136  0B96  01B6               	clrf	(_buf^(0+128)+2)
  6137                           
  6138                           ;mcp2515.c: 330: SPI_exchange(buf, 3);
  6139  0B97  3003               	movlw	3
  6140  0B98  0020               	movlb	0	; select bank0
  6141  0B99  00A0               	movwf	??_read_register
  6142  0B9A  0820               	movf	??_read_register,w
  6143  0B9B  00F8               	movwf	SPI_exchange@len
  6144  0B9C  30B4               	movlw	(low (_buf| 0))& (0+255)
  6145  0B9D  318B  235D         	fcall	_SPI_exchange
  6146                           
  6147                           ;mcp2515.c: 331: return buf[2];
  6148  0B9F  0021               	movlb	1	; select bank1
  6149  0BA0  0836               	movf	(_buf^(0+128)+2),w
  6150  0BA1  0008               	return
  6151  0BA2                     __end_of_read_register:	
  6152                           
  6153                           	psect	text12
  6154  0077                     __ptext12:	
  6155 ;; *************** function _can_dump_masks_and_filters *****************
  6156 ;; Defined at:
  6157 ;;		line 334 in file "mcp2515.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  m               2   47[BANK0 ] unsigned int 
  6162 ;;  i               1   49[BANK0 ] unsigned char 
  6163 ;;  l               1   46[BANK0 ] unsigned char 
  6164 ;;  h               1   45[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;Total ram usage:       15 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    3
  6181 ;; This function calls:
  6182 ;;		_printf
  6183 ;; This function is called by:
  6184 ;;		_main
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           
  6189                           ;psect for function _can_dump_masks_and_filters
  6190  0077                     _can_dump_masks_and_filters:	
  6191                           
  6192                           ;mcp2515.c: 335: uint8_t i, h, l;
  6193                           ;mcp2515.c: 336: uint16_t m;
  6194                           ;mcp2515.c: 337: printf("---\n");
  6195                           
  6196                           ;incstack = 0
  6197                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6198  0077  30A6               	movlw	low (STR_39| (0+32768))
  6199  0078  0020               	movlb	0	; select bank0
  6200  0079  00A2               	movwf	printf@f
  6201  007A  3094               	movlw	high (STR_39| (0+32768))
  6202  007B  00A3               	movwf	printf@f+1
  6203  007C  3185  25A5  3180   	fcall	_printf
  6204                           
  6205                           ;mcp2515.c: 338: for(i=0; i<2; i++) {
  6206  007F  0020               	movlb	0	; select bank0
  6207  0080  01D1               	clrf	can_dump_masks_and_filters@i
  6208  0081  3002               	movlw	2
  6209  0082  0251               	subwf	can_dump_masks_and_filters@i,w
  6210  0083  1803               	btfsc	3,0
  6211  0084  28DE               	goto	l2598
  6212  0085                     l2586:	
  6213                           
  6214                           ;mcp2515.c: 339: m = save_rxmn[i];
  6215  0085  3551               	lslf	can_dump_masks_and_filters@i,w
  6216  0086  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6217  0087  0086               	movwf	6
  6218  0088  0187               	clrf	7
  6219  0089  3F40               	moviw [0]fsr1
  6220  008A  00CF               	movwf	can_dump_masks_and_filters@m
  6221  008B  3F41               	moviw [1]fsr1
  6222  008C  00D0               	movwf	can_dump_masks_and_filters@m+1
  6223                           
  6224                           ;mcp2515.c: 340: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6225  008D  0850               	movf	can_dump_masks_and_filters@m+1,w
  6226  008E  00C4               	movwf	??_can_dump_masks_and_filters+1
  6227  008F  084F               	movf	can_dump_masks_and_filters@m,w
  6228  0090  00C3               	movwf	??_can_dump_masks_and_filters
  6229  0091  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6230  0092  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6231  0093  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6232  0094  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6233  0095  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6234  0096  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6235  0097  0843               	movf	??_can_dump_masks_and_filters,w
  6236  0098  00C5               	movwf	??_can_dump_masks_and_filters+2
  6237  0099  0845               	movf	??_can_dump_masks_and_filters+2,w
  6238  009A  00CD               	movwf	can_dump_masks_and_filters@h
  6239                           
  6240                           ;mcp2515.c: 341: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6241  009B  084F               	movf	can_dump_masks_and_filters@m,w
  6242  009C  3907               	andlw	7
  6243  009D  00C3               	movwf	??_can_dump_masks_and_filters
  6244  009E  3004               	movlw	4
  6245  009F                     u2265:	
  6246  009F  35C3               	lslf	??_can_dump_masks_and_filters,f
  6247  00A0  3EFF               	addlw	-1
  6248  00A1  1D03               	skipz
  6249  00A2  289F               	goto	u2265
  6250  00A3  3543               	lslf	??_can_dump_masks_and_filters,w
  6251  00A4  00C4               	movwf	??_can_dump_masks_and_filters+1
  6252  00A5  0844               	movf	??_can_dump_masks_and_filters+1,w
  6253  00A6  00CE               	movwf	can_dump_masks_and_filters@l
  6254                           
  6255                           ;mcp2515.c: 342: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6256  00A7  3045               	movlw	low (STR_40| (0+32768))
  6257  00A8  00A2               	movwf	printf@f
  6258  00A9  3091               	movlw	high (STR_40| (0+32768))
  6259  00AA  00A3               	movwf	printf@f+1
  6260  00AB  0851               	movf	can_dump_masks_and_filters@i,w
  6261  00AC  00C3               	movwf	??_can_dump_masks_and_filters
  6262  00AD  01C4               	clrf	??_can_dump_masks_and_filters+1
  6263  00AE  0843               	movf	??_can_dump_masks_and_filters,w
  6264  00AF  00A4               	movwf	?_printf+2
  6265  00B0  0844               	movf	??_can_dump_masks_and_filters+1,w
  6266  00B1  00A5               	movwf	?_printf+3
  6267  00B2  0851               	movf	can_dump_masks_and_filters@i,w
  6268  00B3  00C5               	movwf	??_can_dump_masks_and_filters+2
  6269  00B4  01C6               	clrf	??_can_dump_masks_and_filters+3
  6270  00B5  0845               	movf	??_can_dump_masks_and_filters+2,w
  6271  00B6  00A6               	movwf	?_printf+4
  6272  00B7  0846               	movf	??_can_dump_masks_and_filters+3,w
  6273  00B8  00A7               	movwf	?_printf+5
  6274  00B9  0851               	movf	can_dump_masks_and_filters@i,w
  6275  00BA  00C7               	movwf	??_can_dump_masks_and_filters+4
  6276  00BB  01C8               	clrf	??_can_dump_masks_and_filters+5
  6277  00BC  0847               	movf	??_can_dump_masks_and_filters+4,w
  6278  00BD  00A8               	movwf	?_printf+6
  6279  00BE  0848               	movf	??_can_dump_masks_and_filters+5,w
  6280  00BF  00A9               	movwf	?_printf+7
  6281  00C0  0850               	movf	can_dump_masks_and_filters@m+1,w
  6282  00C1  00AB               	movwf	?_printf+9
  6283  00C2  084F               	movf	can_dump_masks_and_filters@m,w
  6284  00C3  00AA               	movwf	?_printf+8
  6285  00C4  084D               	movf	can_dump_masks_and_filters@h,w
  6286  00C5  00C9               	movwf	??_can_dump_masks_and_filters+6
  6287  00C6  01CA               	clrf	??_can_dump_masks_and_filters+7
  6288  00C7  0849               	movf	??_can_dump_masks_and_filters+6,w
  6289  00C8  00AC               	movwf	?_printf+10
  6290  00C9  084A               	movf	??_can_dump_masks_and_filters+7,w
  6291  00CA  00AD               	movwf	?_printf+11
  6292  00CB  084E               	movf	can_dump_masks_and_filters@l,w
  6293  00CC  00CB               	movwf	??_can_dump_masks_and_filters+8
  6294  00CD  01CC               	clrf	??_can_dump_masks_and_filters+9
  6295  00CE  084B               	movf	??_can_dump_masks_and_filters+8,w
  6296  00CF  00AE               	movwf	?_printf+12
  6297  00D0  084C               	movf	??_can_dump_masks_and_filters+9,w
  6298  00D1  00AF               	movwf	?_printf+13
  6299  00D2  3185  25A5  3180   	fcall	_printf
  6300  00D5  3001               	movlw	1
  6301  00D6  0020               	movlb	0	; select bank0
  6302  00D7  00C3               	movwf	??_can_dump_masks_and_filters
  6303  00D8  0843               	movf	??_can_dump_masks_and_filters,w
  6304  00D9  07D1               	addwf	can_dump_masks_and_filters@i,f
  6305  00DA  3002               	movlw	2
  6306  00DB  0251               	subwf	can_dump_masks_and_filters@i,w
  6307  00DC  1C03               	skipc
  6308  00DD  2885               	goto	l2586
  6309  00DE                     l2598:	
  6310                           
  6311                           ;mcp2515.c: 343: }
  6312                           ;mcp2515.c: 344: for(i=0; i<6; i++) {
  6313  00DE  01D1               	clrf	can_dump_masks_and_filters@i
  6314  00DF  3006               	movlw	6
  6315  00E0  0251               	subwf	can_dump_masks_and_filters@i,w
  6316  00E1  1803               	btfsc	3,0
  6317  00E2  293C               	goto	l2616
  6318  00E3                     l2604:	
  6319                           
  6320                           ;mcp2515.c: 345: m = save_rxfn[i];
  6321  00E3  3551               	lslf	can_dump_masks_and_filters@i,w
  6322  00E4  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6323  00E5  0086               	movwf	6
  6324  00E6  0187               	clrf	7
  6325  00E7  3F40               	moviw [0]fsr1
  6326  00E8  00CF               	movwf	can_dump_masks_and_filters@m
  6327  00E9  3F41               	moviw [1]fsr1
  6328  00EA  00D0               	movwf	can_dump_masks_and_filters@m+1
  6329                           
  6330                           ;mcp2515.c: 346: h = ((uint8_t)((m >> 3) & 0x00ffu));
  6331  00EB  0850               	movf	can_dump_masks_and_filters@m+1,w
  6332  00EC  00C4               	movwf	??_can_dump_masks_and_filters+1
  6333  00ED  084F               	movf	can_dump_masks_and_filters@m,w
  6334  00EE  00C3               	movwf	??_can_dump_masks_and_filters
  6335  00EF  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6336  00F0  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6337  00F1  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6338  00F2  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6339  00F3  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  6340  00F4  0CC3               	rrf	??_can_dump_masks_and_filters,f
  6341  00F5  0843               	movf	??_can_dump_masks_and_filters,w
  6342  00F6  00C5               	movwf	??_can_dump_masks_and_filters+2
  6343  00F7  0845               	movf	??_can_dump_masks_and_filters+2,w
  6344  00F8  00CD               	movwf	can_dump_masks_and_filters@h
  6345                           
  6346                           ;mcp2515.c: 347: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  6347  00F9  084F               	movf	can_dump_masks_and_filters@m,w
  6348  00FA  3907               	andlw	7
  6349  00FB  00C3               	movwf	??_can_dump_masks_and_filters
  6350  00FC  3004               	movlw	4
  6351  00FD                     u2295:	
  6352  00FD  35C3               	lslf	??_can_dump_masks_and_filters,f
  6353  00FE  3EFF               	addlw	-1
  6354  00FF  1D03               	skipz
  6355  0100  28FD               	goto	u2295
  6356  0101  3543               	lslf	??_can_dump_masks_and_filters,w
  6357  0102  00C4               	movwf	??_can_dump_masks_and_filters+1
  6358  0103  0844               	movf	??_can_dump_masks_and_filters+1,w
  6359  0104  00CE               	movwf	can_dump_masks_and_filters@l
  6360                           
  6361                           ;mcp2515.c: 348: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  6362  0105  3019               	movlw	low (STR_41| (0+32768))
  6363  0106  00A2               	movwf	printf@f
  6364  0107  3091               	movlw	high (STR_41| (0+32768))
  6365  0108  00A3               	movwf	printf@f+1
  6366  0109  0851               	movf	can_dump_masks_and_filters@i,w
  6367  010A  00C3               	movwf	??_can_dump_masks_and_filters
  6368  010B  01C4               	clrf	??_can_dump_masks_and_filters+1
  6369  010C  0843               	movf	??_can_dump_masks_and_filters,w
  6370  010D  00A4               	movwf	?_printf+2
  6371  010E  0844               	movf	??_can_dump_masks_and_filters+1,w
  6372  010F  00A5               	movwf	?_printf+3
  6373  0110  0851               	movf	can_dump_masks_and_filters@i,w
  6374  0111  00C5               	movwf	??_can_dump_masks_and_filters+2
  6375  0112  01C6               	clrf	??_can_dump_masks_and_filters+3
  6376  0113  0845               	movf	??_can_dump_masks_and_filters+2,w
  6377  0114  00A6               	movwf	?_printf+4
  6378  0115  0846               	movf	??_can_dump_masks_and_filters+3,w
  6379  0116  00A7               	movwf	?_printf+5
  6380  0117  0851               	movf	can_dump_masks_and_filters@i,w
  6381  0118  00C7               	movwf	??_can_dump_masks_and_filters+4
  6382  0119  01C8               	clrf	??_can_dump_masks_and_filters+5
  6383  011A  0847               	movf	??_can_dump_masks_and_filters+4,w
  6384  011B  00A8               	movwf	?_printf+6
  6385  011C  0848               	movf	??_can_dump_masks_and_filters+5,w
  6386  011D  00A9               	movwf	?_printf+7
  6387  011E  0850               	movf	can_dump_masks_and_filters@m+1,w
  6388  011F  00AB               	movwf	?_printf+9
  6389  0120  084F               	movf	can_dump_masks_and_filters@m,w
  6390  0121  00AA               	movwf	?_printf+8
  6391  0122  084D               	movf	can_dump_masks_and_filters@h,w
  6392  0123  00C9               	movwf	??_can_dump_masks_and_filters+6
  6393  0124  01CA               	clrf	??_can_dump_masks_and_filters+7
  6394  0125  0849               	movf	??_can_dump_masks_and_filters+6,w
  6395  0126  00AC               	movwf	?_printf+10
  6396  0127  084A               	movf	??_can_dump_masks_and_filters+7,w
  6397  0128  00AD               	movwf	?_printf+11
  6398  0129  084E               	movf	can_dump_masks_and_filters@l,w
  6399  012A  00CB               	movwf	??_can_dump_masks_and_filters+8
  6400  012B  01CC               	clrf	??_can_dump_masks_and_filters+9
  6401  012C  084B               	movf	??_can_dump_masks_and_filters+8,w
  6402  012D  00AE               	movwf	?_printf+12
  6403  012E  084C               	movf	??_can_dump_masks_and_filters+9,w
  6404  012F  00AF               	movwf	?_printf+13
  6405  0130  3185  25A5  3180   	fcall	_printf
  6406  0133  3001               	movlw	1
  6407  0134  0020               	movlb	0	; select bank0
  6408  0135  00C3               	movwf	??_can_dump_masks_and_filters
  6409  0136  0843               	movf	??_can_dump_masks_and_filters,w
  6410  0137  07D1               	addwf	can_dump_masks_and_filters@i,f
  6411  0138  3006               	movlw	6
  6412  0139  0251               	subwf	can_dump_masks_and_filters@i,w
  6413  013A  1C03               	skipc
  6414  013B  28E3               	goto	l2604
  6415  013C                     l2616:	
  6416                           
  6417                           ;mcp2515.c: 349: }
  6418                           ;mcp2515.c: 350: printf("---\n");
  6419  013C  30A6               	movlw	low (STR_39| (0+32768))
  6420  013D  00A2               	movwf	printf@f
  6421  013E  3094               	movlw	high (STR_39| (0+32768))
  6422  013F  00A3               	movwf	printf@f+1
  6423  0140  3185  25A5         	fcall	_printf
  6424  0142  0008               	return
  6425  0143                     __end_of_can_dump_masks_and_filters:	
  6426                           
  6427                           	psect	text13
  6428  0C61                     __ptext13:	
  6429 ;; *************** function _can_baudrate *****************
  6430 ;; Defined at:
  6431 ;;		line 297 in file "mcp2515.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  bpr             1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  bpr             1   41[BANK0 ] unsigned char 
  6436 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  6437 ;;  mask            1   42[BANK0 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      unsigned char 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;Total ram usage:        5 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    4
  6454 ;; This function calls:
  6455 ;;		_SPI_exchange
  6456 ;;		_can_ope_mode
  6457 ;; This function is called by:
  6458 ;;		_main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _can_baudrate
  6464  0C61                     _can_baudrate:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6468                           ;can_baudrate@bpr stored from wreg
  6469  0C61  0020               	movlb	0	; select bank0
  6470  0C62  00C9               	movwf	can_baudrate@bpr
  6471                           
  6472                           ;mcp2515.c: 298: can_ope_mode(0b10000000u);
  6473  0C63  3080               	movlw	128
  6474  0C64  318D  25C1  318C   	fcall	_can_ope_mode
  6475                           
  6476                           ;mcp2515.c: 301: uint8_t mask = 0b00111111;
  6477  0C67  303F               	movlw	63
  6478  0C68  0020               	movlb	0	; select bank0
  6479  0C69  00C7               	movwf	??_can_baudrate
  6480  0C6A  0847               	movf	??_can_baudrate,w
  6481  0C6B  00CA               	movwf	can_baudrate@mask
  6482                           
  6483                           ;mcp2515.c: 302: buf[0] = 0b00000101u;
  6484  0C6C  3005               	movlw	5
  6485  0C6D  00C7               	movwf	??_can_baudrate
  6486  0C6E  0847               	movf	??_can_baudrate,w
  6487  0C6F  0021               	movlb	1	; select bank1
  6488  0C70  00B4               	movwf	_buf^(0+128)
  6489                           
  6490                           ;mcp2515.c: 303: buf[1] = 0x2au;
  6491  0C71  302A               	movlw	42
  6492  0C72  0020               	movlb	0	; select bank0
  6493  0C73  00C7               	movwf	??_can_baudrate
  6494  0C74  0847               	movf	??_can_baudrate,w
  6495  0C75  0021               	movlb	1	; select bank1
  6496  0C76  00B5               	movwf	(_buf^(0+128)+1)
  6497                           
  6498                           ;mcp2515.c: 304: buf[2] = mask;
  6499  0C77  0020               	movlb	0	; select bank0
  6500  0C78  084A               	movf	can_baudrate@mask,w
  6501  0C79  00C7               	movwf	??_can_baudrate
  6502  0C7A  0847               	movf	??_can_baudrate,w
  6503  0C7B  0021               	movlb	1	; select bank1
  6504  0C7C  00B6               	movwf	(_buf^(0+128)+2)
  6505                           
  6506                           ;mcp2515.c: 305: buf[3] = bpr;
  6507  0C7D  0020               	movlb	0	; select bank0
  6508  0C7E  0849               	movf	can_baudrate@bpr,w
  6509  0C7F  00C7               	movwf	??_can_baudrate
  6510  0C80  0847               	movf	??_can_baudrate,w
  6511  0C81  0021               	movlb	1	; select bank1
  6512  0C82  00B7               	movwf	(_buf^(0+128)+3)
  6513                           
  6514                           ;mcp2515.c: 306: uint8_t bytes_written = SPI_exchange(buf, 4);
  6515  0C83  3004               	movlw	4
  6516  0C84  0020               	movlb	0	; select bank0
  6517  0C85  00C7               	movwf	??_can_baudrate
  6518  0C86  0847               	movf	??_can_baudrate,w
  6519  0C87  00F8               	movwf	SPI_exchange@len
  6520  0C88  30B4               	movlw	(low (_buf| 0))& (0+255)
  6521  0C89  318B  235D  318C   	fcall	_SPI_exchange
  6522  0C8C  0020               	movlb	0	; select bank0
  6523  0C8D  00C8               	movwf	??_can_baudrate+1
  6524  0C8E  0848               	movf	??_can_baudrate+1,w
  6525  0C8F  00CB               	movwf	can_baudrate@bytes_written
  6526                           
  6527                           ;mcp2515.c: 307: can_ope_mode(operation_mode);
  6528  0C90  086F               	movf	_operation_mode,w
  6529  0C91  318D  25C1         	fcall	_can_ope_mode
  6530                           
  6531                           ;mcp2515.c: 311: return 0;
  6532                           ;	Return value of _can_baudrate is never used
  6533                           
  6534                           ;mcp2515.c: 310: } else {
  6535                           
  6536                           ;mcp2515.c: 309: return 1;
  6537                           ;	Return value of _can_baudrate is never used
  6538  0C93  0008               	return
  6539  0C94                     __end_of_can_baudrate:	
  6540                           
  6541                           	psect	text14
  6542  0B4E                     __ptext14:	
  6543 ;; *************** function _can_abort *****************
  6544 ;; Defined at:
  6545 ;;		line 315 in file "mcp2515.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      unsigned char 
  6552 ;; Registers used:
  6553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;Total ram usage:        2 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    4
  6566 ;; This function calls:
  6567 ;;		_abort_pending_transmissions
  6568 ;;		_can_ope_mode
  6569 ;; This function is called by:
  6570 ;;		_main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _can_abort
  6576  0B4E                     _can_abort:	
  6577                           
  6578                           ;mcp2515.c: 316: can_ope_mode(0b10000000u);
  6579                           
  6580                           ;incstack = 0
  6581                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6582  0B4E  3080               	movlw	128
  6583  0B4F  318D  25C1  318B   	fcall	_can_ope_mode
  6584                           
  6585                           ;mcp2515.c: 317: uint8_t bytes_written = abort_pending_transmissions();
  6586  0B52  318B  23E1  318B   	fcall	_abort_pending_transmissions
  6587  0B55  0020               	movlb	0	; select bank0
  6588  0B56  00C7               	movwf	??_can_abort
  6589  0B57  0847               	movf	??_can_abort,w
  6590  0B58  00C8               	movwf	can_abort@bytes_written
  6591                           
  6592                           ;mcp2515.c: 318: can_ope_mode(operation_mode);
  6593  0B59  086F               	movf	_operation_mode,w
  6594  0B5A  318D  25C1         	fcall	_can_ope_mode
  6595                           
  6596                           ;mcp2515.c: 322: return 0;
  6597                           ;	Return value of _can_abort is never used
  6598                           
  6599                           ;mcp2515.c: 321: } else {
  6600                           
  6601                           ;mcp2515.c: 320: return 1;
  6602                           ;	Return value of _can_abort is never used
  6603  0B5C  0008               	return
  6604  0B5D                     __end_of_can_abort:	
  6605                           
  6606                           	psect	text15
  6607  0DC1                     __ptext15:	
  6608 ;; *************** function _can_ope_mode *****************
  6609 ;; Defined at:
  6610 ;;		line 91 in file "mcp2515.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  ope_mode        1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  6615 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      unsigned char 
  6618 ;; Registers used:
  6619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:        4 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    3
  6632 ;; This function calls:
  6633 ;;		_SPI_exchange
  6634 ;;		_printf
  6635 ;; This function is called by:
  6636 ;;		_main
  6637 ;;		_can_init
  6638 ;;		_can_set_mask
  6639 ;;		_can_baudrate
  6640 ;;		_can_abort
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _can_ope_mode
  6646  0DC1                     _can_ope_mode:	
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6650                           ;can_ope_mode@ope_mode stored from wreg
  6651  0DC1  0020               	movlb	0	; select bank0
  6652  0DC2  00C6               	movwf	can_ope_mode@ope_mode
  6653                           
  6654                           ;mcp2515.c: 92: buf[0] = 0b00000010u;
  6655  0DC3  3002               	movlw	2
  6656  0DC4  00C3               	movwf	??_can_ope_mode
  6657  0DC5  0843               	movf	??_can_ope_mode,w
  6658  0DC6  0021               	movlb	1	; select bank1
  6659  0DC7  00B4               	movwf	_buf^(0+128)
  6660                           
  6661                           ;mcp2515.c: 93: buf[1] = 0x0fu;
  6662  0DC8  300F               	movlw	15
  6663  0DC9  0020               	movlb	0	; select bank0
  6664  0DCA  00C3               	movwf	??_can_ope_mode
  6665  0DCB  0843               	movf	??_can_ope_mode,w
  6666  0DCC  0021               	movlb	1	; select bank1
  6667  0DCD  00B5               	movwf	(_buf^(0+128)+1)
  6668                           
  6669                           ;mcp2515.c: 94: buf[2] = ope_mode;
  6670  0DCE  0020               	movlb	0	; select bank0
  6671  0DCF  0846               	movf	can_ope_mode@ope_mode,w
  6672  0DD0  00C3               	movwf	??_can_ope_mode
  6673  0DD1  0843               	movf	??_can_ope_mode,w
  6674  0DD2  0021               	movlb	1	; select bank1
  6675  0DD3  00B6               	movwf	(_buf^(0+128)+2)
  6676                           
  6677                           ;mcp2515.c: 95: uint8_t bytes_written = SPI_exchange(buf, 3);
  6678  0DD4  3003               	movlw	3
  6679  0DD5  0020               	movlb	0	; select bank0
  6680  0DD6  00C3               	movwf	??_can_ope_mode
  6681  0DD7  0843               	movf	??_can_ope_mode,w
  6682  0DD8  00F8               	movwf	SPI_exchange@len
  6683  0DD9  30B4               	movlw	(low (_buf| 0))& (0+255)
  6684  0DDA  318B  235D  318D   	fcall	_SPI_exchange
  6685  0DDD  0020               	movlb	0	; select bank0
  6686  0DDE  00C4               	movwf	??_can_ope_mode+1
  6687  0DDF  0844               	movf	??_can_ope_mode+1,w
  6688  0DE0  00C5               	movwf	can_ope_mode@bytes_written
  6689                           
  6690                           ;mcp2515.c: 97: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  6691  0DE1  3080               	movlw	128
  6692  0DE2  0646               	xorwf	can_ope_mode@ope_mode,w
  6693  0DE3  1903               	btfsc	3,2
  6694  0DE4  2DE9               	goto	l2294
  6695  0DE5  0846               	movf	can_ope_mode@ope_mode,w
  6696  0DE6  00C3               	movwf	??_can_ope_mode
  6697  0DE7  0843               	movf	??_can_ope_mode,w
  6698  0DE8  00EF               	movwf	_operation_mode
  6699  0DE9                     l2294:	
  6700                           
  6701                           ;mcp2515.c: 99: if (bytes_written == 3) {
  6702  0DE9  3003               	movlw	3
  6703  0DEA  0645               	xorwf	can_ope_mode@bytes_written,w
  6704  0DEB  1D03               	btfss	3,2
  6705  0DEC  0008               	return
  6706                           
  6707                           ;mcp2515.c: 100: buf[0] = 0b00000011u;
  6708  0DED  3003               	movlw	3
  6709  0DEE  00C3               	movwf	??_can_ope_mode
  6710  0DEF  0843               	movf	??_can_ope_mode,w
  6711  0DF0  0021               	movlb	1	; select bank1
  6712  0DF1  00B4               	movwf	_buf^(0+128)
  6713                           
  6714                           ;mcp2515.c: 101: buf[1] = 0x0e;
  6715  0DF2  300E               	movlw	14
  6716  0DF3  0020               	movlb	0	; select bank0
  6717  0DF4  00C3               	movwf	??_can_ope_mode
  6718  0DF5  0843               	movf	??_can_ope_mode,w
  6719  0DF6  0021               	movlb	1	; select bank1
  6720  0DF7  00B5               	movwf	(_buf^(0+128)+1)
  6721                           
  6722                           ;mcp2515.c: 102: bytes_written = SPI_exchange(buf, 3);
  6723  0DF8  3003               	movlw	3
  6724  0DF9  0020               	movlb	0	; select bank0
  6725  0DFA  00C3               	movwf	??_can_ope_mode
  6726  0DFB  0843               	movf	??_can_ope_mode,w
  6727  0DFC  00F8               	movwf	SPI_exchange@len
  6728  0DFD  30B4               	movlw	(low (_buf| 0))& (0+255)
  6729  0DFE  318B  235D  318D   	fcall	_SPI_exchange
  6730  0E01  0020               	movlb	0	; select bank0
  6731  0E02  00C4               	movwf	??_can_ope_mode+1
  6732  0E03  0844               	movf	??_can_ope_mode+1,w
  6733  0E04  00C5               	movwf	can_ope_mode@bytes_written
  6734                           
  6735                           ;mcp2515.c: 103: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  6736  0E05  086B               	movf	_mode,w
  6737  0E06  1903               	btfsc	3,2
  6738  0E07  0008               	return
  6739  0E08  30FD               	movlw	low (STR_23| (0+32768))
  6740  0E09  00A2               	movwf	printf@f
  6741  0E0A  3093               	movlw	high (STR_23| (0+32768))
  6742  0E0B  00A3               	movwf	printf@f+1
  6743  0E0C  0021               	movlb	1	; select bank1
  6744  0E0D  0836               	movf	(_buf^(0+128)+2),w
  6745  0E0E  0020               	movlb	0	; select bank0
  6746  0E0F  00C3               	movwf	??_can_ope_mode
  6747  0E10  01C4               	clrf	??_can_ope_mode+1
  6748  0E11  0843               	movf	??_can_ope_mode,w
  6749  0E12  00A4               	movwf	?_printf+2
  6750  0E13  0844               	movf	??_can_ope_mode+1,w
  6751  0E14  00A5               	movwf	?_printf+3
  6752  0E15  3185  25A5         	fcall	_printf
  6753                           
  6754                           ;mcp2515.c: 106: return 0;
  6755                           ;	Return value of _can_ope_mode is never used
  6756                           
  6757                           ;mcp2515.c: 105: } else {
  6758                           
  6759                           ;mcp2515.c: 104: return 1;
  6760                           ;	Return value of _can_ope_mode is never used
  6761  0E17  0008               	return
  6762  0E18                     __end_of_can_ope_mode:	
  6763                           
  6764                           	psect	text16
  6765  05A5                     __ptext16:	
  6766 ;; *************** function _printf *****************
  6767 ;; Defined at:
  6768 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  6771 ;;		 -> STR_60(5), STR_59(15), STR_58(15), STR_57(2), 
  6772 ;;		 -> STR_56(16), STR_55(16), STR_54(2), STR_53(16), 
  6773 ;;		 -> STR_52(16), STR_51(16), STR_50(2), STR_49(12), 
  6774 ;;		 -> STR_48(12), STR_47(12), STR_46(2), STR_45(12), 
  6775 ;;		 -> STR_44(12), STR_43(5), STR_42(5), STR_41(44), 
  6776 ;;		 -> STR_40(44), STR_39(5), STR_38(13), STR_37(13), 
  6777 ;;		 -> STR_36(18), STR_35(17), STR_34(17), STR_33(20), 
  6778 ;;		 -> STR_32(14), STR_31(14), STR_30(14), STR_29(15), 
  6779 ;;		 -> STR_28(16), STR_27(17), STR_26(17), STR_25(23), 
  6780 ;;		 -> STR_24(21), STR_23(15), STR_22(22), STR_21(44), 
  6781 ;;		 -> STR_20(57), STR_19(26), STR_18(21), STR_17(29), 
  6782 ;;		 -> STR_16(38), STR_15(25), STR_14(42), STR_13(38), 
  6783 ;;		 -> STR_12(58), STR_11(54), STR_10(59), STR_9(51), 
  6784 ;;		 -> STR_7(36), STR_6(3), STR_5(4), STR_4(2), 
  6785 ;;		 -> STR_3(6), STR_2(6), STR_1(7), 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  idx             1   22[BANK0 ] unsigned char 
  6788 ;;  tmpval          4    0        struct .
  6789 ;;  width           2   32[BANK0 ] int 
  6790 ;;  val             2   29[BANK0 ] unsigned int 
  6791 ;;  len             2   26[BANK0 ] unsigned int 
  6792 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  6793 ;;		 -> STR_61(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  6794 ;;		 -> txf_clear@n(1), STR_8(21), main@buf(16), 
  6795 ;;  c               1   34[BANK0 ] char 
  6796 ;;  flag            1   31[BANK0 ] unsigned char 
  6797 ;;  ap              1   28[BANK0 ] PTR void [1]
  6798 ;;		 -> ?_printf(2), 
  6799 ;;  prec            1   23[BANK0 ] char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  2    2[BANK0 ] int 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:       33 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    2
  6816 ;; This function calls:
  6817 ;;		___lwdiv
  6818 ;;		___lwmod
  6819 ;;		___wmul
  6820 ;;		_isdigit
  6821 ;;		_putch
  6822 ;; This function is called by:
  6823 ;;		_receive_handler
  6824 ;;		_main
  6825 ;;		_can_ope_mode
  6826 ;;		_can_set_mask
  6827 ;;		_receive
  6828 ;;		_can_send
  6829 ;;		_can_status_check
  6830 ;;		_can_dump_masks_and_filters
  6831 ;;		_can_dump_registers
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           
  6836                           ;psect for function _printf
  6837  05A5                     _printf:	
  6838                           
  6839                           ;doprnt.c: 466: va_list ap;
  6840                           ;doprnt.c: 499: signed char c;
  6841                           ;doprnt.c: 501: int width;
  6842                           ;doprnt.c: 506: signed char prec;
  6843                           ;doprnt.c: 508: unsigned char flag;
  6844                           ;doprnt.c: 523: union {
  6845                           ;doprnt.c: 524: unsigned long vd;
  6846                           ;doprnt.c: 525: double integ;
  6847                           ;doprnt.c: 526: } tmpval;
  6848                           ;doprnt.c: 528: unsigned int val;
  6849                           ;doprnt.c: 529: unsigned len;
  6850                           ;doprnt.c: 530: const char * cp;
  6851                           ;doprnt.c: 533: *ap = __va_start();
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6855  05A5  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6856  05A6  0020               	movlb	0	; select bank0
  6857  05A7  00B0               	movwf	??_printf
  6858  05A8  0830               	movf	??_printf,w
  6859  05A9  00BC               	movwf	printf@ap
  6860  05AA                     l2214:	
  6861                           ;doprnt.c: 536: while(c = *f++) {
  6862                           
  6863  05AA  0020               	movlb	0	; select bank0
  6864  05AB  0823               	movf	printf@f+1,w
  6865  05AC  00B1               	movwf	??_printf+1
  6866  05AD  0822               	movf	printf@f,w
  6867  05AE  00B0               	movwf	??_printf
  6868  05AF  0AA2               	incf	printf@f,f
  6869  05B0  1903               	skipnz
  6870  05B1  0AA3               	incf	printf@f+1,f
  6871  05B2  0830               	movf	??_printf,w
  6872  05B3  0084               	movwf	4
  6873  05B4  0831               	movf	??_printf+1,w
  6874  05B5  0085               	movwf	5
  6875  05B6  0800               	movf	0,w	;code access
  6876  05B7  00B2               	movwf	??_printf+2
  6877  05B8  0832               	movf	??_printf+2,w
  6878  05B9  00C2               	movwf	printf@c
  6879  05BA  0842               	movf	printf@c,w
  6880  05BB  1903               	btfsc	3,2
  6881  05BC  0008               	return
  6882                           
  6883                           ;doprnt.c: 538: if(c != '%')
  6884  05BD  3025               	movlw	37
  6885  05BE  0642               	xorwf	printf@c,w
  6886  05BF  1903               	btfsc	3,2
  6887  05C0  2DC6               	goto	l2060
  6888                           
  6889                           ;doprnt.c: 540: {
  6890                           ;doprnt.c: 541: (putch(c) );
  6891  05C1  0842               	movf	printf@c,w
  6892  05C2  318A  22EF  3185   	fcall	_putch
  6893                           
  6894                           ;doprnt.c: 542: continue;
  6895  05C5  2DAA               	goto	l2214
  6896  05C6                     l2060:	
  6897                           
  6898                           ;doprnt.c: 543: }
  6899                           ;doprnt.c: 546: width = 0;
  6900  05C6  0020               	movlb	0	; select bank0
  6901  05C7  01C0               	clrf	printf@width
  6902  05C8  01C1               	clrf	printf@width+1
  6903                           
  6904                           ;doprnt.c: 548: flag = 0;
  6905  05C9  01BF               	clrf	printf@flag
  6906                           
  6907                           ;doprnt.c: 551: switch(*f) {
  6908                           
  6909                           ;doprnt.c: 550: for(;;) {
  6910  05CA  2DD0               	goto	l2066
  6911  05CB                     l423:	
  6912                           ;doprnt.c: 579: case '0':
  6913                           
  6914                           
  6915                           ;doprnt.c: 580: flag |= 0x04;
  6916  05CB  153F               	bsf	printf@flag,2
  6917                           
  6918                           ;doprnt.c: 581: f++;
  6919  05CC  3001               	movlw	1
  6920  05CD  07A2               	addwf	printf@f,f
  6921  05CE  3000               	movlw	0
  6922  05CF  3DA3               	addwfc	printf@f+1,f
  6923  05D0                     l2066:	
  6924                           ;doprnt.c: 584: }
  6925                           
  6926                           ;doprnt.c: 582: continue;
  6927                           
  6928  05D0  0822               	movf	printf@f,w
  6929  05D1  0084               	movwf	4
  6930  05D2  0823               	movf	printf@f+1,w
  6931  05D3  0085               	movwf	5
  6932  05D4  0800               	movf	0,w	;code access
  6933                           
  6934                           ; Switch size 1, requested type "space"
  6935                           ; Number of cases is 1, Range of values is 48 to 48
  6936                           ; switch strategies available:
  6937                           ; Name         Instructions Cycles
  6938                           ; simple_byte            4     3 (average)
  6939                           ; direct_byte           11     9 (fixed)
  6940                           ; jumptable            263     9 (fixed)
  6941                           ;	Chosen strategy is simple_byte
  6942  05D5  3A30               	xorlw	48	; case 48
  6943  05D6  1903               	skipnz
  6944  05D7  2DCB               	goto	l423
  6945  05D8  2DD9               	goto	l2068
  6946  05D9                     l2068:	
  6947                           ;doprnt.c: 586: }
  6948                           
  6949                           ;doprnt.c: 585: break;
  6950                           
  6951                           
  6952                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6953  05D9  0822               	movf	printf@f,w
  6954  05DA  0084               	movwf	4
  6955  05DB  0823               	movf	printf@f+1,w
  6956  05DC  0085               	movwf	5
  6957  05DD  0800               	movf	0,w	;code access
  6958  05DE  318B  2331  3185   	fcall	_isdigit
  6959  05E1  1C03               	btfss	3,0
  6960  05E2  2E85               	goto	l2120
  6961                           
  6962                           ;doprnt.c: 598: width = 0;
  6963  05E3  0020               	movlb	0	; select bank0
  6964  05E4  01C0               	clrf	printf@width
  6965  05E5  01C1               	clrf	printf@width+1
  6966  05E6                     l2072:	
  6967                           ;doprnt.c: 599: do {
  6968                           
  6969                           
  6970                           ;doprnt.c: 600: width *= 10;
  6971  05E6  300A               	movlw	10
  6972  05E7  00F0               	movwf	___wmul@multiplier
  6973  05E8  3000               	movlw	0
  6974  05E9  00F1               	movwf	___wmul@multiplier+1
  6975  05EA  0020               	movlb	0	; select bank0
  6976  05EB  0841               	movf	printf@width+1,w
  6977  05EC  00F3               	movwf	___wmul@multiplicand+1
  6978  05ED  0840               	movf	printf@width,w
  6979  05EE  00F2               	movwf	___wmul@multiplicand
  6980  05EF  318B  23A2  3185   	fcall	___wmul
  6981  05F2  0871               	movf	?___wmul+1,w
  6982  05F3  0020               	movlb	0	; select bank0
  6983  05F4  00C1               	movwf	printf@width+1
  6984  05F5  0870               	movf	?___wmul,w
  6985  05F6  00C0               	movwf	printf@width
  6986                           
  6987                           ;doprnt.c: 601: width += *f++ - '0';
  6988  05F7  0822               	movf	printf@f,w
  6989  05F8  0084               	movwf	4
  6990  05F9  0823               	movf	printf@f+1,w
  6991  05FA  0085               	movwf	5
  6992  05FB  0800               	movf	0,w	;code access
  6993  05FC  3ED0               	addlw	208
  6994  05FD  00B0               	movwf	??_printf
  6995  05FE  30FF               	movlw	255
  6996  05FF  1803               	skipnc
  6997  0600  3000               	movlw	0
  6998  0601  00B1               	movwf	??_printf+1
  6999  0602  0830               	movf	??_printf,w
  7000  0603  07C0               	addwf	printf@width,f
  7001  0604  0831               	movf	??_printf+1,w
  7002  0605  3DC1               	addwfc	printf@width+1,f
  7003  0606  3001               	movlw	1
  7004  0607  07A2               	addwf	printf@f,f
  7005  0608  3000               	movlw	0
  7006  0609  3DA3               	addwfc	printf@f+1,f
  7007                           
  7008                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7009  060A  0822               	movf	printf@f,w
  7010  060B  0084               	movwf	4
  7011  060C  0823               	movf	printf@f+1,w
  7012  060D  0085               	movwf	5
  7013  060E  0800               	movf	0,w	;code access
  7014  060F  318B  2331  3185   	fcall	_isdigit
  7015  0612  1C03               	btfss	3,0
  7016  0613  2E85               	goto	l2120
  7017  0614  2DE6               	goto	l2072
  7018  0615                     l436:	
  7019                           ;doprnt.c: 712: case 'X':
  7020                           
  7021                           ;doprnt.c: 698: case 'i':
  7022                           ;doprnt.c: 699: break;
  7023                           
  7024                           ;doprnt.c: 697: case 'd':
  7025                           
  7026                           ;doprnt.c: 638: goto alldone;
  7027                           
  7028                           ;doprnt.c: 637: case 0:
  7029                           
  7030                           ;doprnt.c: 608: }
  7031                           ;doprnt.c: 635: switch(c = *f++) {
  7032                           
  7033                           
  7034                           ;doprnt.c: 714: flag |= 0x20;
  7035  0615  16BF               	bsf	printf@flag,5
  7036  0616                     l437:	
  7037                           ;doprnt.c: 718: case 'x':
  7038                           
  7039                           
  7040                           ;doprnt.c: 721: flag |= 0x80;
  7041  0616  17BF               	bsf	printf@flag,7
  7042                           
  7043                           ;doprnt.c: 723: break;
  7044  0617  2EA9               	goto	l435
  7045  0618                     l2080:	
  7046                           ;doprnt.c: 728: case 's':
  7047                           
  7048                           
  7049                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7050  0618  083C               	movf	printf@ap,w
  7051  0619  0086               	movwf	6
  7052  061A  0187               	clrf	7
  7053  061B  3F40               	moviw [0]fsr1
  7054  061C  00B8               	movwf	printf@cp
  7055  061D  3F41               	moviw [1]fsr1
  7056  061E  00B9               	movwf	printf@cp+1
  7057  061F  3002               	movlw	2
  7058  0620  00B0               	movwf	??_printf
  7059  0621  0830               	movf	??_printf,w
  7060  0622  07BC               	addwf	printf@ap,f
  7061                           
  7062                           ;doprnt.c: 740: if(!cp)
  7063  0623  0838               	movf	printf@cp,w
  7064  0624  0439               	iorwf	printf@cp+1,w
  7065  0625  1D03               	btfss	3,2
  7066  0626  2E2B               	goto	l2088
  7067                           
  7068                           ;doprnt.c: 741: cp = "(null)";
  7069  0627  3086               	movlw	low (STR_61| (0+32768))
  7070  0628  00B8               	movwf	printf@cp
  7071  0629  3094               	movlw	high (STR_61| (0+32768))
  7072  062A  00B9               	movwf	printf@cp+1
  7073  062B                     l2088:	
  7074                           
  7075                           ;doprnt.c: 745: len = 0;
  7076  062B  01BA               	clrf	printf@len
  7077  062C  01BB               	clrf	printf@len+1
  7078  062D                     l2092:	
  7079                           ;doprnt.c: 746: while(cp[len])
  7080                           
  7081  062D  0838               	movf	printf@cp,w
  7082  062E  073A               	addwf	printf@len,w
  7083  062F  0084               	movwf	4
  7084  0630  0839               	movf	printf@cp+1,w
  7085  0631  3D3B               	addwfc	printf@len+1,w
  7086  0632  0085               	movwf	5
  7087  0633  0012               	moviw fsr0++
  7088  0634  1903               	btfsc	3,2
  7089  0635  2E3B               	goto	l2094
  7090                           
  7091                           ;doprnt.c: 747: len++;
  7092  0636  3001               	movlw	1
  7093  0637  07BA               	addwf	printf@len,f
  7094  0638  3000               	movlw	0
  7095  0639  3DBB               	addwfc	printf@len+1,f
  7096  063A  2E2D               	goto	l2092
  7097  063B                     l2094:	
  7098                           ;doprnt.c: 750: dostring:
  7099                           
  7100                           
  7101                           ;doprnt.c: 757: if(width > len)
  7102  063B  0841               	movf	printf@width+1,w
  7103  063C  023B               	subwf	printf@len+1,w
  7104  063D  1D03               	skipz
  7105  063E  2E41               	goto	u1675
  7106  063F  0840               	movf	printf@width,w
  7107  0640  023A               	subwf	printf@len,w
  7108  0641                     u1675:	
  7109  0641  1803               	skipnc
  7110  0642  2E48               	goto	l2098
  7111                           
  7112                           ;doprnt.c: 758: width -= len;
  7113  0643  083A               	movf	printf@len,w
  7114  0644  02C0               	subwf	printf@width,f
  7115  0645  083B               	movf	printf@len+1,w
  7116  0646  3BC1               	subwfb	printf@width+1,f
  7117  0647  2E4A               	goto	l2102
  7118  0648                     l2098:	
  7119                           
  7120                           ;doprnt.c: 759: else
  7121                           ;doprnt.c: 760: width = 0;
  7122  0648  01C0               	clrf	printf@width
  7123  0649  01C1               	clrf	printf@width+1
  7124  064A                     l2102:	
  7125                           ;doprnt.c: 764: while(width--)
  7126                           
  7127  064A  30FF               	movlw	255
  7128  064B  0020               	movlb	0	; select bank0
  7129  064C  07C0               	addwf	printf@width,f
  7130  064D  30FF               	movlw	255
  7131  064E  3DC1               	addwfc	printf@width+1,f
  7132  064F  0A40               	incf	printf@width,w
  7133  0650  1903               	btfsc	3,2
  7134  0651  0A41               	incf	printf@width+1,w
  7135  0652  1903               	btfsc	3,2
  7136  0653  2E66               	goto	l2108
  7137                           
  7138                           ;doprnt.c: 765: (putch(' ') );
  7139  0654  3020               	movlw	32
  7140  0655  318A  22EF  3185   	fcall	_putch
  7141  0658  2E4A               	goto	l2102
  7142  0659                     l2104:	
  7143                           ;doprnt.c: 767: while(len--)
  7144                           
  7145                           
  7146                           ;doprnt.c: 768: (putch(*cp++) );
  7147  0659  0838               	movf	printf@cp,w
  7148  065A  0084               	movwf	4
  7149  065B  0839               	movf	printf@cp+1,w
  7150  065C  0085               	movwf	5
  7151  065D  0800               	movf	0,w	;code access
  7152  065E  318A  22EF  3185   	fcall	_putch
  7153  0661  3001               	movlw	1
  7154  0662  0020               	movlb	0	; select bank0
  7155  0663  07B8               	addwf	printf@cp,f
  7156  0664  3000               	movlw	0
  7157  0665  3DB9               	addwfc	printf@cp+1,f
  7158  0666                     l2108:	
  7159  0666  3001               	movlw	1
  7160  0667  02BA               	subwf	printf@len,f
  7161  0668  3000               	movlw	0
  7162  0669  3BBB               	subwfb	printf@len+1,f
  7163  066A  0A3A               	incf	printf@len,w
  7164  066B  1D03               	skipz
  7165  066C  2E59               	goto	l2104
  7166  066D  0A3B               	incf	printf@len+1,w
  7167  066E  1903               	btfsc	3,2
  7168  066F  2DAA               	goto	l2214
  7169  0670  2E59               	goto	l2104
  7170  0671                     l2110:	
  7171                           ;doprnt.c: 784: case 'c':
  7172                           
  7173                           ;doprnt.c: 774: continue;
  7174                           
  7175                           
  7176                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7177  0671  083C               	movf	printf@ap,w
  7178  0672  0086               	movwf	6
  7179  0673  0187               	clrf	7
  7180  0674  0801               	movf	1,w
  7181  0675  00B0               	movwf	??_printf
  7182  0676  0830               	movf	??_printf,w
  7183  0677  00C2               	movwf	printf@c
  7184  0678  3002               	movlw	2
  7185  0679  00B0               	movwf	??_printf
  7186  067A  0830               	movf	??_printf,w
  7187  067B  07BC               	addwf	printf@ap,f
  7188  067C                     l2114:	
  7189                           ;doprnt.c: 802: default:
  7190                           
  7191                           
  7192                           ;doprnt.c: 805: cp = (char *)&c;
  7193  067C  3042               	movlw	low printf@c
  7194  067D  00B8               	movwf	printf@cp
  7195  067E  3000               	movlw	high printf@c
  7196  067F  00B9               	movwf	printf@cp+1
  7197                           
  7198                           ;doprnt.c: 806: len = 1;
  7199  0680  3001               	movlw	1
  7200  0681  00BA               	movwf	printf@len
  7201  0682  3000               	movlw	0
  7202  0683  00BB               	movwf	printf@len+1
  7203                           
  7204                           ;doprnt.c: 807: goto dostring;
  7205  0684  2E3B               	goto	l2094
  7206  0685                     l2120:	
  7207                           ;doprnt.c: 822: }
  7208                           
  7209  0685  0020               	movlb	0	; select bank0
  7210  0686  0823               	movf	printf@f+1,w
  7211  0687  00B1               	movwf	??_printf+1
  7212  0688  0822               	movf	printf@f,w
  7213  0689  00B0               	movwf	??_printf
  7214  068A  0AA2               	incf	printf@f,f
  7215  068B  1903               	skipnz
  7216  068C  0AA3               	incf	printf@f+1,f
  7217  068D  0830               	movf	??_printf,w
  7218  068E  0084               	movwf	4
  7219  068F  0831               	movf	??_printf+1,w
  7220  0690  0085               	movwf	5
  7221  0691  0800               	movf	0,w	;code access
  7222  0692  00C2               	movwf	printf@c
  7223                           
  7224                           ; Switch size 1, requested type "space"
  7225                           ; Number of cases is 7, Range of values is 0 to 120
  7226                           ; switch strategies available:
  7227                           ; Name         Instructions Cycles
  7228                           ; simple_byte           22    12 (average)
  7229                           ; direct_byte          248     6 (fixed)
  7230                           ; jumptable            260     6 (fixed)
  7231                           ;	Chosen strategy is simple_byte
  7232  0693  3A00               	xorlw	0	; case 0
  7233  0694  1903               	skipnz
  7234  0695  2FEF               	goto	l492
  7235  0696  3A58               	xorlw	88	; case 88
  7236  0697  1903               	skipnz
  7237  0698  2E15               	goto	l436
  7238  0699  3A3B               	xorlw	59	; case 99
  7239  069A  1903               	skipnz
  7240  069B  2E71               	goto	l2110
  7241  069C  3A07               	xorlw	7	; case 100
  7242  069D  1903               	skipnz
  7243  069E  2EA9               	goto	l435
  7244  069F  3A0D               	xorlw	13	; case 105
  7245  06A0  1903               	skipnz
  7246  06A1  2EA9               	goto	l435
  7247  06A2  3A1A               	xorlw	26	; case 115
  7248  06A3  1903               	skipnz
  7249  06A4  2E18               	goto	l2080
  7250  06A5  3A0B               	xorlw	11	; case 120
  7251  06A6  1903               	skipnz
  7252  06A7  2E16               	goto	l437
  7253  06A8  2E7C               	goto	l2114
  7254  06A9                     l435:	
  7255                           
  7256                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7257  06A9  0020               	movlb	0	; select bank0
  7258  06AA  1BBF               	btfsc	printf@flag,7
  7259  06AB  2EC3               	goto	l2132
  7260                           
  7261                           ;doprnt.c: 1253: {
  7262                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7263  06AC  083C               	movf	printf@ap,w
  7264  06AD  0086               	movwf	6
  7265  06AE  0187               	clrf	7
  7266  06AF  3F40               	moviw [0]fsr1
  7267  06B0  00BD               	movwf	printf@val
  7268  06B1  3F41               	moviw [1]fsr1
  7269  06B2  00BE               	movwf	printf@val+1
  7270  06B3  3002               	movlw	2
  7271  06B4  00B0               	movwf	??_printf
  7272  06B5  0830               	movf	??_printf,w
  7273  06B6  07BC               	addwf	printf@ap,f
  7274                           
  7275                           ;doprnt.c: 1261: if((int)val < 0) {
  7276  06B7  1FBE               	btfss	printf@val+1,7
  7277  06B8  2F13               	goto	l2158
  7278                           
  7279                           ;doprnt.c: 1262: flag |= 0x03;
  7280  06B9  3003               	movlw	3
  7281  06BA  00B0               	movwf	??_printf
  7282  06BB  0830               	movf	??_printf,w
  7283  06BC  04BF               	iorwf	printf@flag,f
  7284                           
  7285                           ;doprnt.c: 1263: val = -val;
  7286  06BD  09BD               	comf	printf@val,f
  7287  06BE  09BE               	comf	printf@val+1,f
  7288  06BF  0ABD               	incf	printf@val,f
  7289  06C0  1903               	skipnz
  7290  06C1  0ABE               	incf	printf@val+1,f
  7291                           
  7292                           ;doprnt.c: 1264: }
  7293                           ;doprnt.c: 1266: }
  7294  06C2  2F13               	goto	l2158
  7295  06C3                     l2132:	
  7296                           
  7297                           ;doprnt.c: 1268: else
  7298                           ;doprnt.c: 1273: {
  7299                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7300  06C3  083C               	movf	printf@ap,w
  7301  06C4  0086               	movwf	6
  7302  06C5  0187               	clrf	7
  7303  06C6  3F40               	moviw [0]fsr1
  7304  06C7  00BD               	movwf	printf@val
  7305  06C8  3F41               	moviw [1]fsr1
  7306  06C9  00BE               	movwf	printf@val+1
  7307  06CA  3002               	movlw	2
  7308  06CB  00B0               	movwf	??_printf
  7309  06CC  0830               	movf	??_printf,w
  7310  06CD  07BC               	addwf	printf@ap,f
  7311                           
  7312                           ;doprnt.c: 1287: }
  7313                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7314  06CE  2F13               	goto	l2158
  7315  06CF                     l458:	
  7316                           ;doprnt.c: 1299: case 0x00:
  7317                           
  7318                           
  7319                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7320  06CF  01C2               	clrf	printf@c
  7321  06D0  0AC2               	incf	printf@c,f
  7322  06D1                     L10:	
  7323  06D1  3005               	movlw	5
  7324  06D2  0642               	xorwf	printf@c,w
  7325  06D3  1903               	btfsc	3,2
  7326  06D4  2F1C               	goto	l2160
  7327                           
  7328                           ;doprnt.c: 1306: if(val < dpowers[c])
  7329  06D5  0842               	movf	printf@c,w
  7330  06D6  00B0               	movwf	??_printf
  7331  06D7  01B1               	clrf	??_printf+1
  7332  06D8  35B0               	lslf	??_printf,f
  7333  06D9  0DB1               	rlf	??_printf+1,f
  7334  06DA  3074               	movlw	low (_dpowers| (0+32768))
  7335  06DB  0730               	addwf	??_printf,w
  7336  06DC  0084               	movwf	4
  7337  06DD  3094               	movlw	high (_dpowers| (0+32768))
  7338  06DE  3D31               	addwfc	??_printf+1,w
  7339  06DF  0085               	movwf	5
  7340  06E0  3F00               	moviw [0]fsr0
  7341  06E1  00B2               	movwf	??_printf+2
  7342  06E2  3F01               	moviw [1]fsr0
  7343  06E3  00B3               	movwf	??_printf+3
  7344  06E4  0833               	movf	??_printf+3,w
  7345  06E5  023E               	subwf	printf@val+1,w
  7346  06E6  1D03               	skipz
  7347  06E7  2EEA               	goto	u1735
  7348  06E8  0832               	movf	??_printf+2,w
  7349  06E9  023D               	subwf	printf@val,w
  7350  06EA                     u1735:	
  7351  06EA  1C03               	btfss	3,0
  7352  06EB  2F1C               	goto	l2160
  7353                           
  7354                           ;doprnt.c: 1307: break;
  7355  06EC  3001               	movlw	1
  7356  06ED  00B0               	movwf	??_printf
  7357  06EE  0830               	movf	??_printf,w
  7358  06EF  07C2               	addwf	printf@c,f
  7359  06F0  2ED1               	goto	L10
  7360  06F1                     l463:	
  7361                           ;doprnt.c: 1314: case 0x80:
  7362                           
  7363                           ;doprnt.c: 1309: break;
  7364                           
  7365                           
  7366                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7367  06F1  01C2               	clrf	printf@c
  7368  06F2  0AC2               	incf	printf@c,f
  7369  06F3                     L11:	
  7370  06F3  3004               	movlw	4
  7371  06F4  0642               	xorwf	printf@c,w
  7372  06F5  1903               	btfsc	3,2
  7373  06F6  2F1C               	goto	l2160
  7374                           
  7375                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7376  06F7  0842               	movf	printf@c,w
  7377  06F8  00B0               	movwf	??_printf
  7378  06F9  01B1               	clrf	??_printf+1
  7379  06FA  35B0               	lslf	??_printf,f
  7380  06FB  0DB1               	rlf	??_printf+1,f
  7381  06FC  307E               	movlw	low (_hexpowers| (0+32768))
  7382  06FD  0730               	addwf	??_printf,w
  7383  06FE  0084               	movwf	4
  7384  06FF  3094               	movlw	high (_hexpowers| (0+32768))
  7385  0700  3D31               	addwfc	??_printf+1,w
  7386  0701  0085               	movwf	5
  7387  0702  3F00               	moviw [0]fsr0
  7388  0703  00B2               	movwf	??_printf+2
  7389  0704  3F01               	moviw [1]fsr0
  7390  0705  00B3               	movwf	??_printf+3
  7391  0706  0833               	movf	??_printf+3,w
  7392  0707  023E               	subwf	printf@val+1,w
  7393  0708  1D03               	skipz
  7394  0709  2F0C               	goto	u1765
  7395  070A  0832               	movf	??_printf+2,w
  7396  070B  023D               	subwf	printf@val,w
  7397  070C                     u1765:	
  7398  070C  1C03               	btfss	3,0
  7399  070D  2F1C               	goto	l2160
  7400                           
  7401                           ;doprnt.c: 1318: break;
  7402  070E  3001               	movlw	1
  7403  070F  00B0               	movwf	??_printf
  7404  0710  0830               	movf	??_printf,w
  7405  0711  07C2               	addwf	printf@c,f
  7406  0712  2EF3               	goto	L11
  7407  0713                     l2158:	
  7408                           ;doprnt.c: 1336: }
  7409                           
  7410                           ;doprnt.c: 1320: break;
  7411                           
  7412  0713  083F               	movf	printf@flag,w
  7413  0714  3980               	andlw	128
  7414                           
  7415                           ; Switch size 1, requested type "space"
  7416                           ; Number of cases is 2, Range of values is 0 to 128
  7417                           ; switch strategies available:
  7418                           ; Name         Instructions Cycles
  7419                           ; simple_byte            7     4 (average)
  7420                           ; jumptable            260     6 (fixed)
  7421                           ;	Chosen strategy is simple_byte
  7422  0715  3A00               	xorlw	0	; case 0
  7423  0716  1903               	skipnz
  7424  0717  2ECF               	goto	l458
  7425  0718  3A80               	xorlw	128	; case 128
  7426  0719  1903               	skipnz
  7427  071A  2EF1               	goto	l463
  7428  071B  2F1C               	goto	l2160
  7429  071C                     l2160:	
  7430                           
  7431                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7432  071C  0840               	movf	printf@width,w
  7433  071D  0441               	iorwf	printf@width+1,w
  7434  071E  1903               	btfsc	3,2
  7435  071F  2F28               	goto	l467
  7436  0720  083F               	movf	printf@flag,w
  7437  0721  3903               	andlw	3
  7438  0722  1903               	btfsc	3,2
  7439  0723  2F28               	goto	l467
  7440                           
  7441                           ;doprnt.c: 1346: width--;
  7442  0724  30FF               	movlw	255
  7443  0725  07C0               	addwf	printf@width,f
  7444  0726  30FF               	movlw	255
  7445  0727  3DC1               	addwfc	printf@width+1,f
  7446  0728                     l467:	
  7447                           
  7448                           ;doprnt.c: 1381: if(width > c)
  7449  0728  0842               	movf	printf@c,w
  7450  0729  00B0               	movwf	??_printf
  7451  072A  01B1               	clrf	??_printf+1
  7452  072B  1BB0               	btfsc	??_printf,7
  7453  072C  03B1               	decf	??_printf+1,f
  7454  072D  0831               	movf	??_printf+1,w
  7455  072E  3A80               	xorlw	128
  7456  072F  00B2               	movwf	??_printf+2
  7457  0730  0841               	movf	printf@width+1,w
  7458  0731  3A80               	xorlw	128
  7459  0732  0232               	subwf	??_printf+2,w
  7460  0733  1D03               	skipz
  7461  0734  2F37               	goto	u1805
  7462  0735  0840               	movf	printf@width,w
  7463  0736  0230               	subwf	??_printf,w
  7464  0737                     u1805:	
  7465  0737  1803               	skipnc
  7466  0738  2F44               	goto	l2168
  7467                           
  7468                           ;doprnt.c: 1382: width -= c;
  7469  0739  0020               	movlb	0	; select bank0
  7470  073A  0842               	movf	printf@c,w
  7471  073B  00B0               	movwf	??_printf
  7472  073C  01B1               	clrf	??_printf+1
  7473  073D  1BB0               	btfsc	??_printf,7
  7474  073E  03B1               	decf	??_printf+1,f
  7475  073F  0830               	movf	??_printf,w
  7476  0740  02C0               	subwf	printf@width,f
  7477  0741  0831               	movf	??_printf+1,w
  7478  0742  3BC1               	subwfb	printf@width+1,f
  7479  0743  2F47               	goto	l2170
  7480  0744                     l2168:	
  7481                           
  7482                           ;doprnt.c: 1383: else
  7483                           ;doprnt.c: 1384: width = 0;
  7484  0744  0020               	movlb	0	; select bank0
  7485  0745  01C0               	clrf	printf@width
  7486  0746  01C1               	clrf	printf@width+1
  7487  0747                     l2170:	
  7488                           
  7489                           ;doprnt.c: 1387: if(flag & 0x04) {
  7490  0747  1D3F               	btfss	printf@flag,2
  7491  0748  2F60               	goto	l2182
  7492                           
  7493                           ;doprnt.c: 1392: if(flag & 0x03)
  7494  0749  083F               	movf	printf@flag,w
  7495  074A  3903               	andlw	3
  7496  074B  1903               	btfsc	3,2
  7497  074C  2F51               	goto	l2176
  7498                           
  7499                           ;doprnt.c: 1393: (putch('-') );
  7500  074D  302D               	movlw	45
  7501  074E  318A  22EF  3185   	fcall	_putch
  7502  0751                     l2176:	
  7503                           
  7504                           ;doprnt.c: 1415: if(width)
  7505  0751  0020               	movlb	0	; select bank0
  7506  0752                     L12:	
  7507  0752  0840               	movf	printf@width,w
  7508  0753  0441               	iorwf	printf@width+1,w
  7509  0754  1903               	btfsc	3,2
  7510  0755  2F79               	goto	l2192
  7511                           
  7512                           ;doprnt.c: 1417: (putch('0') );
  7513                           
  7514                           ;doprnt.c: 1416: do
  7515  0756  3030               	movlw	48
  7516  0757  318A  22EF  3185   	fcall	_putch
  7517                           
  7518                           ;doprnt.c: 1418: while(--width);
  7519  075A  30FF               	movlw	255
  7520  075B  0020               	movlb	0	; select bank0
  7521  075C  07C0               	addwf	printf@width,f
  7522  075D  30FF               	movlw	255
  7523  075E  3DC1               	addwfc	printf@width+1,f
  7524  075F  2F52               	goto	L12
  7525  0760                     l2182:	
  7526                           ;doprnt.c: 1420: } else
  7527                           
  7528                           
  7529                           ;doprnt.c: 1422: {
  7530                           ;doprnt.c: 1424: if(width
  7531                           ;doprnt.c: 1428: )
  7532  0760  0840               	movf	printf@width,w
  7533  0761  0441               	iorwf	printf@width+1,w
  7534  0762  1903               	btfsc	3,2
  7535  0763  2F71               	goto	l2188
  7536  0764                     l2184:	
  7537                           ;doprnt.c: 1429: do
  7538                           
  7539                           
  7540                           ;doprnt.c: 1430: (putch(' ') );
  7541  0764  3020               	movlw	32
  7542  0765  318A  22EF  3185   	fcall	_putch
  7543                           
  7544                           ;doprnt.c: 1431: while(--width);
  7545  0768  30FF               	movlw	255
  7546  0769  0020               	movlb	0	; select bank0
  7547  076A  07C0               	addwf	printf@width,f
  7548  076B  30FF               	movlw	255
  7549  076C  3DC1               	addwfc	printf@width+1,f
  7550  076D  0840               	movf	printf@width,w
  7551  076E  0441               	iorwf	printf@width+1,w
  7552  076F  1D03               	btfss	3,2
  7553  0770  2F64               	goto	l2184
  7554  0771                     l2188:	
  7555                           
  7556                           ;doprnt.c: 1438: if(flag & 0x03)
  7557  0771  083F               	movf	printf@flag,w
  7558  0772  3903               	andlw	3
  7559  0773  1903               	btfsc	3,2
  7560  0774  2F79               	goto	l2192
  7561                           
  7562                           ;doprnt.c: 1439: (putch('-') );
  7563  0775  302D               	movlw	45
  7564  0776  318A  22EF  3185   	fcall	_putch
  7565  0779                     l2192:	
  7566                           
  7567                           ;doprnt.c: 1469: }
  7568                           ;doprnt.c: 1472: prec = c;
  7569  0779  0020               	movlb	0	; select bank0
  7570  077A  0842               	movf	printf@c,w
  7571  077B  00B0               	movwf	??_printf
  7572  077C  0830               	movf	??_printf,w
  7573  077D  00B7               	movwf	printf@prec
  7574                           
  7575                           ;doprnt.c: 1474: while(prec--) {
  7576  077E  2FDD               	goto	l2212
  7577  077F                     l2194:	
  7578                           ;doprnt.c: 1478: {
  7579                           ;doprnt.c: 1483: case 0x00:
  7580                           
  7581                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  7582                           
  7583                           
  7584                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7585  077F  300A               	movlw	10
  7586  0780  00F8               	movwf	___lwmod@divisor
  7587  0781  3000               	movlw	0
  7588  0782  00F9               	movwf	___lwmod@divisor+1
  7589  0783  0837               	movf	printf@prec,w
  7590  0784  00B0               	movwf	??_printf
  7591  0785  01B1               	clrf	??_printf+1
  7592  0786  35B0               	lslf	??_printf,f
  7593  0787  0DB1               	rlf	??_printf+1,f
  7594  0788  3074               	movlw	low (_dpowers| (0+32768))
  7595  0789  0730               	addwf	??_printf,w
  7596  078A  0084               	movwf	4
  7597  078B  3094               	movlw	high (_dpowers| (0+32768))
  7598  078C  3D31               	addwfc	??_printf+1,w
  7599  078D  0085               	movwf	5
  7600  078E  3F00               	moviw [0]fsr0
  7601  078F  00F0               	movwf	___lwdiv@divisor
  7602  0790  3F01               	moviw [1]fsr0
  7603  0791  00F1               	movwf	___lwdiv@divisor+1
  7604  0792  083E               	movf	printf@val+1,w
  7605  0793  00F3               	movwf	___lwdiv@dividend+1
  7606  0794  083D               	movf	printf@val,w
  7607  0795  00F2               	movwf	___lwdiv@dividend
  7608  0796  318C  2494  3185   	fcall	___lwdiv
  7609  0799  0871               	movf	?___lwdiv+1,w
  7610  079A  00FB               	movwf	___lwmod@dividend+1
  7611  079B  0870               	movf	?___lwdiv,w
  7612  079C  00FA               	movwf	___lwmod@dividend
  7613  079D  318C  2407  3185   	fcall	___lwmod
  7614  07A0  0878               	movf	?___lwmod,w
  7615  07A1  3E30               	addlw	48
  7616  07A2  0020               	movlb	0	; select bank0
  7617  07A3  2FD6               	goto	L8
  7618  07A4                     l2196:	
  7619                           ;doprnt.c: 1497: case 0x80:
  7620                           
  7621                           ;doprnt.c: 1491: break;
  7622                           
  7623                           
  7624                           ;doprnt.c: 1499: {
  7625                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7626  07A4  0837               	movf	printf@prec,w
  7627  07A5  00B0               	movwf	??_printf
  7628  07A6  01B1               	clrf	??_printf+1
  7629  07A7  35B0               	lslf	??_printf,f
  7630  07A8  0DB1               	rlf	??_printf+1,f
  7631  07A9  307E               	movlw	low (_hexpowers| (0+32768))
  7632  07AA  0730               	addwf	??_printf,w
  7633  07AB  0084               	movwf	4
  7634  07AC  3094               	movlw	high (_hexpowers| (0+32768))
  7635  07AD  3D31               	addwfc	??_printf+1,w
  7636  07AE  0085               	movwf	5
  7637  07AF  3F00               	moviw [0]fsr0
  7638  07B0  00F0               	movwf	___lwdiv@divisor
  7639  07B1  3F01               	moviw [1]fsr0
  7640  07B2  00F1               	movwf	___lwdiv@divisor+1
  7641  07B3  083E               	movf	printf@val+1,w
  7642  07B4  00F3               	movwf	___lwdiv@dividend+1
  7643  07B5  083D               	movf	printf@val,w
  7644  07B6  00F2               	movwf	___lwdiv@dividend
  7645  07B7  318C  2494  3185   	fcall	___lwdiv
  7646  07BA  0870               	movf	?___lwdiv,w
  7647  07BB  390F               	andlw	15
  7648  07BC  0020               	movlb	0	; select bank0
  7649  07BD  00B2               	movwf	??_printf+2
  7650  07BE  0832               	movf	??_printf+2,w
  7651  07BF  00B6               	movwf	printf@idx
  7652                           
  7653                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7654  07C0  1ABF               	btfsc	printf@flag,5
  7655  07C1  2FC6               	goto	l2202
  7656  07C2  302A               	movlw	low (STR_63| (0+32768))
  7657  07C3  00B4               	movwf	_printf$636
  7658  07C4  3093               	movlw	high (STR_63| (0+32768))
  7659  07C5  2FC9               	goto	L9
  7660  07C6                     l2202:	
  7661  07C6  3019               	movlw	low (STR_62| (0+32768))
  7662  07C7  00B4               	movwf	_printf$636
  7663  07C8  3093               	movlw	high (STR_62| (0+32768))
  7664  07C9                     L9:	
  7665  07C9  00B5               	movwf	_printf$636+1
  7666  07CA  0835               	movf	_printf$636+1,w
  7667  07CB  00B1               	movwf	??_printf+1
  7668  07CC  0834               	movf	_printf$636,w
  7669  07CD  00B0               	movwf	??_printf
  7670  07CE  0836               	movf	printf@idx,w
  7671  07CF  0730               	addwf	??_printf,w
  7672  07D0  0084               	movwf	4
  7673  07D1  0831               	movf	??_printf+1,w
  7674  07D2  1803               	skipnc
  7675  07D3  0A31               	incf	??_printf+1,w
  7676  07D4  0085               	movwf	5
  7677  07D5  0800               	movf	0,w	;code access
  7678  07D6                     L8:	
  7679  07D6  00B2               	movwf	??_printf+2
  7680  07D7  0832               	movf	??_printf+2,w
  7681  07D8  00C2               	movwf	printf@c
  7682  07D9                     l2210:	
  7683                           ;doprnt.c: 1523: }
  7684                           
  7685                           ;doprnt.c: 1508: }
  7686                           ;doprnt.c: 1510: break;
  7687                           
  7688                           
  7689                           ;doprnt.c: 1524: (putch(c) );
  7690  07D9  0842               	movf	printf@c,w
  7691  07DA  318A  22EF  3185   	fcall	_putch
  7692  07DD                     l2212:	
  7693  07DD  30FF               	movlw	255
  7694  07DE  0020               	movlb	0	; select bank0
  7695  07DF  00B0               	movwf	??_printf
  7696  07E0  0830               	movf	??_printf,w
  7697  07E1  07B7               	addwf	printf@prec,f
  7698  07E2  0A37               	incf	printf@prec,w
  7699  07E3  1903               	btfsc	3,2
  7700  07E4  2DAA               	goto	l2214
  7701  07E5  083F               	movf	printf@flag,w
  7702  07E6  3980               	andlw	128
  7703                           
  7704                           ; Switch size 1, requested type "space"
  7705                           ; Number of cases is 2, Range of values is 0 to 128
  7706                           ; switch strategies available:
  7707                           ; Name         Instructions Cycles
  7708                           ; simple_byte            7     4 (average)
  7709                           ; jumptable            260     6 (fixed)
  7710                           ;	Chosen strategy is simple_byte
  7711  07E7  3A00               	xorlw	0	; case 0
  7712  07E8  1903               	skipnz
  7713  07E9  2F7F               	goto	l2194
  7714  07EA  3A80               	xorlw	128	; case 128
  7715  07EB  1903               	skipnz
  7716  07EC  2FA4               	goto	l2196
  7717  07ED  2FD9               	goto	l2210
  7718  07EE  2FD9               	goto	l2210
  7719  07EF                     l492:	
  7720                           ;doprnt.c: 1540: return 0;
  7721                           ;	Return value of _printf is never used
  7722                           
  7723                           ;doprnt.c: 1525: }
  7724                           ;doprnt.c: 1533: }
  7725                           ;doprnt.c: 1535: alldone:
  7726                           
  7727  07EF  0008               	return
  7728  07F0                     __end_of_printf:	
  7729                           
  7730                           	psect	text17
  7731  0AEF                     __ptext17:	
  7732 ;; *************** function _putch *****************
  7733 ;; Defined at:
  7734 ;;		line 107 in file "mcc_generated_files/eusart.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  txData          1    wreg     unsigned char 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  txData          1    1[COMMON] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0, pclath, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;Total ram usage:        1 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    1
  7755 ;; This function calls:
  7756 ;;		_EUSART_Write
  7757 ;; This function is called by:
  7758 ;;		_printf
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _putch
  7764  0AEF                     _putch:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7768                           ;putch@txData stored from wreg
  7769  0AEF  00F1               	movwf	putch@txData
  7770                           
  7771                           ;eusart.c: 109: EUSART_Write(txData);
  7772  0AF0  0871               	movf	putch@txData,w
  7773  0AF1  318B  2301         	fcall	_EUSART_Write
  7774  0AF3  0008               	return
  7775  0AF4                     __end_of_putch:	
  7776                           
  7777                           	psect	text18
  7778  0B01                     __ptext18:	
  7779 ;; *************** function _EUSART_Write *****************
  7780 ;; Defined at:
  7781 ;;		line 93 in file "mcc_generated_files/eusart.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  txData          1    wreg     unsigned char 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  txData          1    0[COMMON] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		wreg
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;Total ram usage:        1 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; This function calls:
  7802 ;;		Nothing
  7803 ;; This function is called by:
  7804 ;;		_putch
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _EUSART_Write
  7810  0B01                     _EUSART_Write:	
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _EUSART_Write: [wreg]
  7814                           ;EUSART_Write@txData stored from wreg
  7815  0B01  00F0               	movwf	EUSART_Write@txData
  7816  0B02                     l63:	
  7817                           ;eusart.c: 96: {
  7818                           
  7819                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  7820                           
  7821  0B02  0020               	movlb	0	; select bank0
  7822  0B03  1E11               	btfss	17,4	;volatile
  7823  0B04  2B02               	goto	l63
  7824                           
  7825                           ;eusart.c: 97: }
  7826                           ;eusart.c: 99: TXREG = txData;
  7827  0B05  0870               	movf	EUSART_Write@txData,w
  7828  0B06  0023               	movlb	3	; select bank3
  7829  0B07  009A               	movwf	26	;volatile
  7830  0B08  0008               	return
  7831  0B09                     __end_of_EUSART_Write:	
  7832                           
  7833                           	psect	text19
  7834  0C07                     __ptext19:	
  7835 ;; *************** function ___lwmod *****************
  7836 ;; Defined at:
  7837 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  divisor         2    8[COMMON] unsigned int 
  7840 ;;  dividend        2   10[COMMON] unsigned int 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  counter         1   13[COMMON] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  2    8[COMMON] unsigned int 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:        6 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_printf
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function ___lwmod
  7867  0C07                     ___lwmod:	
  7868                           
  7869                           ;incstack = 0
  7870                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7871  0C07  0878               	movf	___lwmod@divisor,w
  7872  0C08  0479               	iorwf	___lwmod@divisor+1,w
  7873  0C09  1903               	btfsc	3,2
  7874  0C0A  2C2E               	goto	l2018
  7875  0C0B  01FD               	clrf	___lwmod@counter
  7876  0C0C  0AFD               	incf	___lwmod@counter,f
  7877  0C0D                     l2008:	
  7878  0C0D  1BF9               	btfsc	___lwmod@divisor+1,7
  7879  0C0E  2C19               	goto	l2010
  7880  0C0F  3001               	movlw	1
  7881  0C10                     u1515:	
  7882  0C10  35F8               	lslf	___lwmod@divisor,f
  7883  0C11  0DF9               	rlf	___lwmod@divisor+1,f
  7884  0C12  0B89               	decfsz	9,f
  7885  0C13  2C10               	goto	u1515
  7886  0C14  3001               	movlw	1
  7887  0C15  00FC               	movwf	??___lwmod
  7888  0C16  087C               	movf	??___lwmod,w
  7889  0C17  07FD               	addwf	___lwmod@counter,f
  7890  0C18  2C0D               	goto	l2008
  7891  0C19                     l2010:	
  7892  0C19  0879               	movf	___lwmod@divisor+1,w
  7893  0C1A  027B               	subwf	___lwmod@dividend+1,w
  7894  0C1B  1D03               	skipz
  7895  0C1C  2C1F               	goto	u1535
  7896  0C1D  0878               	movf	___lwmod@divisor,w
  7897  0C1E  027A               	subwf	___lwmod@dividend,w
  7898  0C1F                     u1535:	
  7899  0C1F  1C03               	skipc
  7900  0C20  2C25               	goto	l2014
  7901  0C21  0878               	movf	___lwmod@divisor,w
  7902  0C22  02FA               	subwf	___lwmod@dividend,f
  7903  0C23  0879               	movf	___lwmod@divisor+1,w
  7904  0C24  3BFB               	subwfb	___lwmod@dividend+1,f
  7905  0C25                     l2014:	
  7906  0C25  3001               	movlw	1
  7907  0C26                     u1545:	
  7908  0C26  36F9               	lsrf	___lwmod@divisor+1,f
  7909  0C27  0CF8               	rrf	___lwmod@divisor,f
  7910  0C28  0B89               	decfsz	9,f
  7911  0C29  2C26               	goto	u1545
  7912  0C2A  3001               	movlw	1
  7913  0C2B  02FD               	subwf	___lwmod@counter,f
  7914  0C2C  1D03               	btfss	3,2
  7915  0C2D  2C19               	goto	l2010
  7916  0C2E                     l2018:	
  7917  0C2E  087B               	movf	___lwmod@dividend+1,w
  7918  0C2F  00F9               	movwf	?___lwmod+1
  7919  0C30  087A               	movf	___lwmod@dividend,w
  7920  0C31  00F8               	movwf	?___lwmod
  7921  0C32  0008               	return
  7922  0C33                     __end_of___lwmod:	
  7923                           
  7924                           	psect	text20
  7925  0C94                     __ptext20:	
  7926 ;; *************** function ___lwdiv *****************
  7927 ;; Defined at:
  7928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  divisor         2    0[COMMON] unsigned int 
  7931 ;;  dividend        2    2[COMMON] unsigned int 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  quotient        2    5[COMMON] unsigned int 
  7934 ;;  counter         1    7[COMMON] unsigned char 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  2    0[COMMON] unsigned int 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;Total ram usage:        8 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_printf
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function ___lwdiv
  7959  0C94                     ___lwdiv:	
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7963  0C94  01F5               	clrf	___lwdiv@quotient
  7964  0C95  01F6               	clrf	___lwdiv@quotient+1
  7965  0C96  0870               	movf	___lwdiv@divisor,w
  7966  0C97  0471               	iorwf	___lwdiv@divisor+1,w
  7967  0C98  1903               	btfsc	3,2
  7968  0C99  2CC3               	goto	l1996
  7969  0C9A  01F7               	clrf	___lwdiv@counter
  7970  0C9B  0AF7               	incf	___lwdiv@counter,f
  7971  0C9C                     l1984:	
  7972  0C9C  1BF1               	btfsc	___lwdiv@divisor+1,7
  7973  0C9D  2CA8               	goto	l1986
  7974  0C9E  3001               	movlw	1
  7975  0C9F                     u1445:	
  7976  0C9F  35F0               	lslf	___lwdiv@divisor,f
  7977  0CA0  0DF1               	rlf	___lwdiv@divisor+1,f
  7978  0CA1  0B89               	decfsz	9,f
  7979  0CA2  2C9F               	goto	u1445
  7980  0CA3  3001               	movlw	1
  7981  0CA4  00F4               	movwf	??___lwdiv
  7982  0CA5  0874               	movf	??___lwdiv,w
  7983  0CA6  07F7               	addwf	___lwdiv@counter,f
  7984  0CA7  2C9C               	goto	l1984
  7985  0CA8                     l1986:	
  7986  0CA8  3001               	movlw	1
  7987  0CA9                     u1465:	
  7988  0CA9  35F5               	lslf	___lwdiv@quotient,f
  7989  0CAA  0DF6               	rlf	___lwdiv@quotient+1,f
  7990  0CAB  0B89               	decfsz	9,f
  7991  0CAC  2CA9               	goto	u1465
  7992  0CAD  0871               	movf	___lwdiv@divisor+1,w
  7993  0CAE  0273               	subwf	___lwdiv@dividend+1,w
  7994  0CAF  1D03               	skipz
  7995  0CB0  2CB3               	goto	u1475
  7996  0CB1  0870               	movf	___lwdiv@divisor,w
  7997  0CB2  0272               	subwf	___lwdiv@dividend,w
  7998  0CB3                     u1475:	
  7999  0CB3  1C03               	skipc
  8000  0CB4  2CBA               	goto	l1992
  8001  0CB5  0870               	movf	___lwdiv@divisor,w
  8002  0CB6  02F2               	subwf	___lwdiv@dividend,f
  8003  0CB7  0871               	movf	___lwdiv@divisor+1,w
  8004  0CB8  3BF3               	subwfb	___lwdiv@dividend+1,f
  8005  0CB9  1475               	bsf	___lwdiv@quotient,0
  8006  0CBA                     l1992:	
  8007  0CBA  3001               	movlw	1
  8008  0CBB                     u1485:	
  8009  0CBB  36F1               	lsrf	___lwdiv@divisor+1,f
  8010  0CBC  0CF0               	rrf	___lwdiv@divisor,f
  8011  0CBD  0B89               	decfsz	9,f
  8012  0CBE  2CBB               	goto	u1485
  8013  0CBF  3001               	movlw	1
  8014  0CC0  02F7               	subwf	___lwdiv@counter,f
  8015  0CC1  1D03               	btfss	3,2
  8016  0CC2  2CA8               	goto	l1986
  8017  0CC3                     l1996:	
  8018  0CC3  0876               	movf	___lwdiv@quotient+1,w
  8019  0CC4  00F1               	movwf	?___lwdiv+1
  8020  0CC5  0875               	movf	___lwdiv@quotient,w
  8021  0CC6  00F0               	movwf	?___lwdiv
  8022  0CC7  0008               	return
  8023  0CC8                     __end_of___lwdiv:	
  8024                           
  8025                           	psect	text21
  8026  0BE1                     __ptext21:	
  8027 ;; *************** function _abort_pending_transmissions *****************
  8028 ;; Defined at:
  8029 ;;		line 110 in file "mcp2515.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      unsigned char 
  8036 ;; Registers used:
  8037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;Total ram usage:        3 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    3
  8050 ;; This function calls:
  8051 ;;		_SPI_exchange
  8052 ;; This function is called by:
  8053 ;;		_can_set_mask
  8054 ;;		_can_abort
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _abort_pending_transmissions
  8060  0BE1                     _abort_pending_transmissions:	
  8061                           
  8062                           ;mcp2515.c: 111: buf[0] = 0b00000101u;
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8066  0BE1  3005               	movlw	5
  8067  0BE2  0020               	movlb	0	; select bank0
  8068  0BE3  00A0               	movwf	??_abort_pending_transmissions
  8069  0BE4  0820               	movf	??_abort_pending_transmissions,w
  8070  0BE5  0021               	movlb	1	; select bank1
  8071  0BE6  00B4               	movwf	_buf^(0+128)
  8072                           
  8073                           ;mcp2515.c: 112: buf[1] = 0x0fu;
  8074  0BE7  300F               	movlw	15
  8075  0BE8  0020               	movlb	0	; select bank0
  8076  0BE9  00A0               	movwf	??_abort_pending_transmissions
  8077  0BEA  0820               	movf	??_abort_pending_transmissions,w
  8078  0BEB  0021               	movlb	1	; select bank1
  8079  0BEC  00B5               	movwf	(_buf^(0+128)+1)
  8080                           
  8081                           ;mcp2515.c: 113: buf[2] = 0b00010000u;
  8082  0BED  3010               	movlw	16
  8083  0BEE  0020               	movlb	0	; select bank0
  8084  0BEF  00A0               	movwf	??_abort_pending_transmissions
  8085  0BF0  0820               	movf	??_abort_pending_transmissions,w
  8086  0BF1  0021               	movlb	1	; select bank1
  8087  0BF2  00B6               	movwf	(_buf^(0+128)+2)
  8088                           
  8089                           ;mcp2515.c: 114: buf[3] = 0b00010000u;
  8090  0BF3  3010               	movlw	16
  8091  0BF4  0020               	movlb	0	; select bank0
  8092  0BF5  00A0               	movwf	??_abort_pending_transmissions
  8093  0BF6  0820               	movf	??_abort_pending_transmissions,w
  8094  0BF7  0021               	movlb	1	; select bank1
  8095  0BF8  00B7               	movwf	(_buf^(0+128)+3)
  8096                           
  8097                           ;mcp2515.c: 115: uint8_t bytes_written = SPI_exchange(buf, 4);
  8098  0BF9  3004               	movlw	4
  8099  0BFA  0020               	movlb	0	; select bank0
  8100  0BFB  00A0               	movwf	??_abort_pending_transmissions
  8101  0BFC  0820               	movf	??_abort_pending_transmissions,w
  8102  0BFD  00F8               	movwf	SPI_exchange@len
  8103  0BFE  30B4               	movlw	(low (_buf| 0))& (0+255)
  8104  0BFF  318B  235D         	fcall	_SPI_exchange
  8105  0C01  0020               	movlb	0	; select bank0
  8106  0C02  00A1               	movwf	??_abort_pending_transmissions+1
  8107  0C03  0821               	movf	??_abort_pending_transmissions+1,w
  8108  0C04  00A2               	movwf	abort_pending_transmissions@bytes_written
  8109                           
  8110                           ;mcp2515.c: 116: return bytes_written;
  8111  0C05  0822               	movf	abort_pending_transmissions@bytes_written,w
  8112  0C06  0008               	return
  8113  0C07                     __end_of_abort_pending_transmissions:	
  8114                           
  8115                           	psect	text22
  8116  0B5D                     __ptext22:	
  8117 ;; *************** function _SPI_exchange *****************
  8118 ;; Defined at:
  8119 ;;		line 4 in file "spi.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  buf             1    wreg     PTR unsigned char 
  8122 ;;		 -> receive@rx_buf(15), buf(16), 
  8123 ;;  len             1    8[COMMON] unsigned char 
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;  buf             1   13[COMMON] PTR unsigned char 
  8126 ;;		 -> receive@rx_buf(15), buf(16), 
  8127 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      unsigned char 
  8130 ;; Registers used:
  8131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8137 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;Total ram usage:        6 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    2
  8144 ;; This function calls:
  8145 ;;		_SPI_Exchange8bitBuffer
  8146 ;; This function is called by:
  8147 ;;		_can_init
  8148 ;;		_can_ope_mode
  8149 ;;		_abort_pending_transmissions
  8150 ;;		_can_set_mask
  8151 ;;		_txf_clear
  8152 ;;		_receive
  8153 ;;		_can_send
  8154 ;;		_can_status_check
  8155 ;;		_can_baudrate
  8156 ;;		_read_register
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           
  8161                           ;psect for function _SPI_exchange
  8162  0B5D                     _SPI_exchange:	
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8166                           ;SPI_exchange@buf stored from wreg
  8167  0B5D  00FD               	movwf	SPI_exchange@buf
  8168                           
  8169                           ;spi.c: 5: LATAbits.LATA2 = 0;
  8170  0B5E  0022               	movlb	2	; select bank2
  8171  0B5F  110C               	bcf	12,2	;volatile
  8172                           
  8173                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  8174  0B60  0878               	movf	SPI_exchange@len,w
  8175  0B61  00F9               	movwf	??_SPI_exchange
  8176  0B62  0879               	movf	??_SPI_exchange,w
  8177  0B63  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8178  0B64  087D               	movf	SPI_exchange@buf,w
  8179  0B65  00FA               	movwf	??_SPI_exchange+1
  8180  0B66  087A               	movf	??_SPI_exchange+1,w
  8181  0B67  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8182  0B68  087D               	movf	SPI_exchange@buf,w
  8183  0B69  318C  24C8         	fcall	_SPI_Exchange8bitBuffer
  8184  0B6B  00FB               	movwf	??_SPI_exchange+2
  8185  0B6C  087B               	movf	??_SPI_exchange+2,w
  8186  0B6D  00FC               	movwf	SPI_exchange@bytes_written
  8187                           
  8188                           ;spi.c: 7: LATAbits.LATA2 = 1;
  8189  0B6E  0022               	movlb	2	; select bank2
  8190  0B6F  150C               	bsf	12,2	;volatile
  8191                           
  8192                           ;spi.c: 8: return bytes_written;
  8193  0B70  087C               	movf	SPI_exchange@bytes_written,w
  8194  0B71  0008               	return
  8195  0B72                     __end_of_SPI_exchange:	
  8196                           
  8197                           	psect	text23
  8198  0CC8                     __ptext23:	
  8199 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8200 ;; Defined at:
  8201 ;;		line 91 in file "mcc_generated_files/spi.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  dataIn          1    wreg     PTR unsigned char 
  8204 ;;		 -> receive@rx_buf(15), buf(16), 
  8205 ;;  bufLen          1    1[COMMON] unsigned char 
  8206 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8207 ;;		 -> receive@rx_buf(15), buf(16), 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8210 ;;		 -> receive@rx_buf(15), buf(16), 
  8211 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      unsigned char 
  8214 ;; Registers used:
  8215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;Total ram usage:        7 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    1
  8228 ;; This function calls:
  8229 ;;		_SPI_Exchange8bit
  8230 ;; This function is called by:
  8231 ;;		_SPI_exchange
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function _SPI_Exchange8bitBuffer
  8237  0CC8                     _SPI_Exchange8bitBuffer:	
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8241                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8242  0CC8  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8243                           
  8244                           ;spi.c: 93: uint8_t bytesWritten = 0;
  8245  0CC9  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8246                           
  8247                           ;spi.c: 95: if(bufLen != 0)
  8248  0CCA  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8249  0CCB  1903               	btfsc	3,2
  8250  0CCC  2D14               	goto	l2050
  8251                           
  8252                           ;spi.c: 96: {
  8253                           ;spi.c: 97: if(dataIn != (0))
  8254  0CCD  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8255  0CCE  1D03               	btfss	3,2
  8256  0CCF  2CF6               	goto	l2038
  8257  0CD0  2CFB               	goto	l2040
  8258  0CD1                     l2030:	
  8259                           ;spi.c: 98: {
  8260                           ;spi.c: 99: while(bytesWritten < bufLen)
  8261                           
  8262                           
  8263                           ;spi.c: 100: {
  8264                           ;spi.c: 101: if(dataOut == (0))
  8265  0CD1  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8266  0CD2  1D03               	btfss	3,2
  8267  0CD3  2CDF               	goto	l2034
  8268                           
  8269                           ;spi.c: 102: {
  8270                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  8271  0CD4  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8272  0CD5  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8273  0CD6  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8274  0CD7  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8275  0CD8  0086               	movwf	6
  8276  0CD9  0187               	clrf	7
  8277  0CDA  0801               	movf	1,w
  8278  0CDB  318B  2309  318C   	fcall	_SPI_Exchange8bit
  8279                           
  8280                           ;spi.c: 104: }
  8281  0CDE  2CF2               	goto	l2036
  8282  0CDF                     l2034:	
  8283                           
  8284                           ;spi.c: 105: else
  8285                           ;spi.c: 106: {
  8286                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8287  0CDF  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8288  0CE0  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8289  0CE1  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8290  0CE2  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8291  0CE3  0086               	movwf	6
  8292  0CE4  0187               	clrf	7
  8293  0CE5  0801               	movf	1,w
  8294  0CE6  318B  2309  318C   	fcall	_SPI_Exchange8bit
  8295  0CE9  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8296  0CEA  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8297  0CEB  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8298  0CEC  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  8299  0CED  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  8300  0CEE  0086               	movwf	6
  8301  0CEF  0187               	clrf	7
  8302  0CF0  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8303  0CF1  0081               	movwf	1
  8304  0CF2                     l2036:	
  8305                           
  8306                           ;spi.c: 108: }
  8307                           ;spi.c: 110: bytesWritten++;
  8308  0CF2  3001               	movlw	1
  8309  0CF3  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8310  0CF4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8311  0CF5  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8312  0CF6                     l2038:	
  8313  0CF6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8314  0CF7  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8315  0CF8  1803               	btfsc	3,0
  8316  0CF9  2D14               	goto	l2050
  8317  0CFA  2CD1               	goto	l2030
  8318  0CFB                     l2040:	
  8319                           ;spi.c: 111: }
  8320                           ;spi.c: 112: }
  8321                           
  8322                           
  8323                           ;spi.c: 113: else
  8324                           ;spi.c: 114: {
  8325                           ;spi.c: 115: if(dataOut != (0))
  8326  0CFB  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8327  0CFC  1D03               	btfss	3,2
  8328  0CFD  2D10               	goto	l2048
  8329  0CFE  2D14               	goto	l2050
  8330  0CFF                     l2044:	
  8331                           ;spi.c: 116: {
  8332                           ;spi.c: 117: while(bytesWritten < bufLen )
  8333                           
  8334                           
  8335                           ;spi.c: 118: {
  8336                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8337  0CFF  3000               	movlw	0
  8338  0D00  318B  2309  318C   	fcall	_SPI_Exchange8bit
  8339  0D03  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8340  0D04  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8341  0D05  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8342  0D06  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8343  0D07  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8344  0D08  0086               	movwf	6
  8345  0D09  0187               	clrf	7
  8346  0D0A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8347  0D0B  0081               	movwf	1
  8348                           
  8349                           ;spi.c: 121: bytesWritten++;
  8350  0D0C  3001               	movlw	1
  8351  0D0D  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8352  0D0E  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8353  0D0F  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8354  0D10                     l2048:	
  8355  0D10  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8356  0D11  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8357  0D12  1C03               	skipc
  8358  0D13  2CFF               	goto	l2044
  8359  0D14                     l2050:	
  8360                           
  8361                           ;spi.c: 122: }
  8362                           ;spi.c: 123: }
  8363                           ;spi.c: 124: }
  8364                           ;spi.c: 125: }
  8365                           ;spi.c: 127: return bytesWritten;
  8366  0D14  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8367  0D15  0008               	return
  8368  0D16                     __end_of_SPI_Exchange8bitBuffer:	
  8369                           
  8370                           	psect	text24
  8371  0B09                     __ptext24:	
  8372 ;; *************** function _SPI_Exchange8bit *****************
  8373 ;; Defined at:
  8374 ;;		line 77 in file "mcc_generated_files/spi.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  data            1    wreg     unsigned char 
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  data            1    0[COMMON] unsigned char 
  8379 ;; Return value:  Size  Location     Type
  8380 ;;                  1    wreg      unsigned char 
  8381 ;; Registers used:
  8382 ;;		wreg
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;Total ram usage:        1 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_SPI_Exchange8bitBuffer
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _SPI_Exchange8bit
  8403  0B09                     _SPI_Exchange8bit:	
  8404                           
  8405                           ;incstack = 0
  8406                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8407                           ;SPI_Exchange8bit@data stored from wreg
  8408  0B09  00F0               	movwf	SPI_Exchange8bit@data
  8409                           
  8410                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  8411  0B0A  0024               	movlb	4	; select bank4
  8412  0B0B  1395               	bcf	21,7	;volatile
  8413                           
  8414                           ;spi.c: 82: SSP1BUF = data;
  8415  0B0C  0870               	movf	SPI_Exchange8bit@data,w
  8416  0B0D  0091               	movwf	17	;volatile
  8417  0B0E                     l118:	
  8418                           ;spi.c: 85: {
  8419                           
  8420                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  8421                           
  8422  0B0E  1C14               	btfss	20,0	;volatile
  8423  0B0F  2B0E               	goto	l118
  8424                           
  8425                           ;spi.c: 86: }
  8426                           ;spi.c: 88: return (SSP1BUF);
  8427  0B10  0811               	movf	17,w	;volatile
  8428  0B11  0008               	return
  8429  0B12                     __end_of_SPI_Exchange8bit:	
  8430                           
  8431                           	psect	text25
  8432  0010                     __ptext25:	
  8433 ;; *************** function _atoi *****************
  8434 ;; Defined at:
  8435 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;  s               1    wreg     PTR const unsigned char 
  8438 ;;		 -> main@buf(16), 
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;  s               1   13[COMMON] PTR const unsigned char 
  8441 ;;		 -> main@buf(16), 
  8442 ;;  a               2   11[COMMON] int 
  8443 ;;  sign            1   10[COMMON] unsigned char 
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  2    6[COMMON] int 
  8446 ;; Registers used:
  8447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8448 ;; Tracked objects:
  8449 ;;		On entry : 0/0
  8450 ;;		On exit  : 0/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;Total ram usage:        8 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    1
  8460 ;; This function calls:
  8461 ;;		___wmul
  8462 ;;		_isdigit
  8463 ;; This function is called by:
  8464 ;;		_main
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           
  8469                           ;psect for function _atoi
  8470  0010                     _atoi:	
  8471                           
  8472                           ;incstack = 0
  8473                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8474                           ;atoi@s stored from wreg
  8475  0010  00FD               	movwf	atoi@s
  8476  0011                     l2466:	
  8477  0011  087D               	movf	atoi@s,w
  8478  0012  0086               	movwf	6
  8479  0013  0187               	clrf	7
  8480  0014  3020               	movlw	32
  8481  0015  0601               	xorwf	1,w
  8482  0016  1D03               	btfss	3,2
  8483  0017  281D               	goto	l2468
  8484  0018                     l2464:	
  8485  0018  3001               	movlw	1
  8486  0019  00F8               	movwf	??_atoi
  8487  001A  0878               	movf	??_atoi,w
  8488  001B  07FD               	addwf	atoi@s,f
  8489  001C  2811               	goto	l2466
  8490  001D                     l2468:	
  8491  001D  087D               	movf	atoi@s,w
  8492  001E  0086               	movwf	6
  8493  001F  0187               	clrf	7
  8494  0020  3009               	movlw	9
  8495  0021  0601               	xorwf	1,w
  8496  0022  1903               	btfsc	3,2
  8497  0023  2818               	goto	l2464
  8498  0024  01FB               	clrf	atoi@a
  8499  0025  01FC               	clrf	atoi@a+1
  8500  0026  01FA               	clrf	atoi@sign
  8501  0027  087D               	movf	atoi@s,w
  8502  0028  0086               	movwf	6
  8503  0029  0187               	clrf	7
  8504  002A  302D               	movlw	45
  8505  002B  0601               	xorwf	1,w
  8506  002C  1D03               	btfss	3,2
  8507  002D  2833               	goto	l2476
  8508  002E  3001               	movlw	1
  8509  002F  00F8               	movwf	??_atoi
  8510  0030  0878               	movf	??_atoi,w
  8511  0031  07FA               	addwf	atoi@sign,f
  8512  0032  283A               	goto	l2482
  8513  0033                     l2476:	
  8514  0033  087D               	movf	atoi@s,w
  8515  0034  0086               	movwf	6
  8516  0035  0187               	clrf	7
  8517  0036  302B               	movlw	43
  8518  0037  0601               	xorwf	1,w
  8519  0038  1D03               	btfss	3,2
  8520  0039  283E               	goto	l2484
  8521  003A                     l2482:	
  8522  003A  3001               	movlw	1
  8523  003B  00F8               	movwf	??_atoi
  8524  003C  0878               	movf	??_atoi,w
  8525  003D  07FD               	addwf	atoi@s,f
  8526  003E                     l2484:	
  8527  003E  087D               	movf	atoi@s,w
  8528  003F  0086               	movwf	6
  8529  0040  0187               	clrf	7
  8530  0041  0801               	movf	1,w
  8531  0042  318B  2331  3180   	fcall	_isdigit
  8532  0045  1C03               	btfss	3,0
  8533  0046  2863               	goto	l2486
  8534  0047  087C               	movf	atoi@a+1,w
  8535  0048  00F1               	movwf	___wmul@multiplier+1
  8536  0049  087B               	movf	atoi@a,w
  8537  004A  00F0               	movwf	___wmul@multiplier
  8538  004B  300A               	movlw	10
  8539  004C  00F2               	movwf	___wmul@multiplicand
  8540  004D  3000               	movlw	0
  8541  004E  00F3               	movwf	___wmul@multiplicand+1
  8542  004F  318B  23A2  3180   	fcall	___wmul
  8543  0052  087D               	movf	atoi@s,w
  8544  0053  0086               	movwf	6
  8545  0054  0187               	clrf	7
  8546  0055  0801               	movf	1,w
  8547  0056  0770               	addwf	?___wmul,w
  8548  0057  00F8               	movwf	??_atoi
  8549  0058  0871               	movf	?___wmul+1,w
  8550  0059  1803               	skipnc
  8551  005A  0A71               	incf	?___wmul+1,w
  8552  005B  00F9               	movwf	??_atoi+1
  8553  005C  0878               	movf	??_atoi,w
  8554  005D  3ED0               	addlw	208
  8555  005E  00FB               	movwf	atoi@a
  8556  005F  30FF               	movlw	255
  8557  0060  3D79               	addwfc	??_atoi+1,w
  8558  0061  00FC               	movwf	atoi@a+1
  8559  0062  283A               	goto	l2482
  8560  0063                     l2486:	
  8561  0063  087A               	movf	atoi@sign,w
  8562  0064  1903               	btfsc	3,2
  8563  0065  2872               	goto	l2492
  8564  0066  097B               	comf	atoi@a,w
  8565  0067  00F8               	movwf	??_atoi
  8566  0068  097C               	comf	atoi@a+1,w
  8567  0069  00F9               	movwf	??_atoi+1
  8568  006A  0AF8               	incf	??_atoi,f
  8569  006B  1903               	skipnz
  8570  006C  0AF9               	incf	??_atoi+1,f
  8571  006D  0878               	movf	??_atoi,w
  8572  006E  00F6               	movwf	?_atoi
  8573  006F  0879               	movf	??_atoi+1,w
  8574  0070  00F7               	movwf	?_atoi+1
  8575  0071  0008               	return
  8576  0072                     l2492:	
  8577  0072  087C               	movf	atoi@a+1,w
  8578  0073  00F7               	movwf	?_atoi+1
  8579  0074  087B               	movf	atoi@a,w
  8580  0075  00F6               	movwf	?_atoi
  8581  0076  0008               	return
  8582  0077                     __end_of_atoi:	
  8583                           
  8584                           	psect	text26
  8585  0B31                     __ptext26:	
  8586 ;; *************** function _isdigit *****************
  8587 ;; Defined at:
  8588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  c               1    wreg     unsigned char 
  8591 ;; Auto vars:     Size  Location     Type
  8592 ;;  c               1    1[COMMON] unsigned char 
  8593 ;; Return value:  Size  Location     Type
  8594 ;;		None               void
  8595 ;; Registers used:
  8596 ;;		wreg, status,2, status,0
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;Total ram usage:        2 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_printf
  8612 ;;		_atoi
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function _isdigit
  8618  0B31                     _isdigit:	
  8619                           
  8620                           ;incstack = 0
  8621                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8622                           ;isdigit@c stored from wreg
  8623  0B31  00F1               	movwf	isdigit@c
  8624  0B32  01F0               	clrf	_isdigit$827
  8625  0B33  303A               	movlw	58
  8626  0B34  0271               	subwf	isdigit@c,w
  8627  0B35  1803               	skipnc
  8628  0B36  2B3D               	goto	l1956
  8629  0B37  3030               	movlw	48
  8630  0B38  0271               	subwf	isdigit@c,w
  8631  0B39  1C03               	skipc
  8632  0B3A  2B3D               	goto	l1956
  8633  0B3B  01F0               	clrf	_isdigit$827
  8634  0B3C  0AF0               	incf	_isdigit$827,f
  8635  0B3D                     l1956:	
  8636  0B3D  0C70               	rrf	_isdigit$827,w
  8637  0B3E  0008               	return
  8638  0B3F                     __end_of_isdigit:	
  8639                           
  8640                           	psect	text27
  8641  0BA2                     __ptext27:	
  8642 ;; *************** function ___wmul *****************
  8643 ;; Defined at:
  8644 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;  multiplier      2    0[COMMON] unsigned int 
  8647 ;;  multiplicand    2    2[COMMON] unsigned int 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  product         2    4[COMMON] unsigned int 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  2    0[COMMON] unsigned int 
  8652 ;; Registers used:
  8653 ;;		wreg, status,2, status,0
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;Total ram usage:        6 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_printf
  8669 ;;		_atoi
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           
  8674                           ;psect for function ___wmul
  8675  0BA2                     ___wmul:	
  8676                           
  8677                           ;incstack = 0
  8678                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8679  0BA2  01F4               	clrf	___wmul@product
  8680  0BA3  01F5               	clrf	___wmul@product+1
  8681  0BA4                     l1962:	
  8682  0BA4  1C70               	btfss	___wmul@multiplier,0
  8683  0BA5  2BAA               	goto	l576
  8684  0BA6  0872               	movf	___wmul@multiplicand,w
  8685  0BA7  07F4               	addwf	___wmul@product,f
  8686  0BA8  0873               	movf	___wmul@multiplicand+1,w
  8687  0BA9  3DF5               	addwfc	___wmul@product+1,f
  8688  0BAA                     l576:	
  8689  0BAA  3001               	movlw	1
  8690  0BAB                     u1405:	
  8691  0BAB  35F2               	lslf	___wmul@multiplicand,f
  8692  0BAC  0DF3               	rlf	___wmul@multiplicand+1,f
  8693  0BAD  0B89               	decfsz	9,f
  8694  0BAE  2BAB               	goto	u1405
  8695  0BAF  3001               	movlw	1
  8696  0BB0                     u1415:	
  8697  0BB0  36F1               	lsrf	___wmul@multiplier+1,f
  8698  0BB1  0CF0               	rrf	___wmul@multiplier,f
  8699  0BB2  0B89               	decfsz	9,f
  8700  0BB3  2BB0               	goto	u1415
  8701  0BB4  0870               	movf	___wmul@multiplier,w
  8702  0BB5  0471               	iorwf	___wmul@multiplier+1,w
  8703  0BB6  1D03               	btfss	3,2
  8704  0BB7  2BA4               	goto	l1962
  8705  0BB8  0875               	movf	___wmul@product+1,w
  8706  0BB9  00F1               	movwf	?___wmul+1
  8707  0BBA  0874               	movf	___wmul@product,w
  8708  0BBB  00F0               	movwf	?___wmul
  8709  0BBC  0008               	return
  8710  0BBD                     __end_of___wmul:	
  8711                           
  8712                           	psect	text28
  8713  0B3F                     __ptext28:	
  8714 ;; *************** function _SYSTEM_Initialize *****************
  8715 ;; Defined at:
  8716 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;		None
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;		None
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      void 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0, pclath, cstack
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;Total ram usage:        0 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    1
  8737 ;; This function calls:
  8738 ;;		_EUSART_Initialize
  8739 ;;		_OSCILLATOR_Initialize
  8740 ;;		_PIN_MANAGER_Initialize
  8741 ;;		_SPI_Initialize
  8742 ;;		_WDT_Initialize
  8743 ;; This function is called by:
  8744 ;;		_main
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           
  8749                           ;psect for function _SYSTEM_Initialize
  8750  0B3F                     _SYSTEM_Initialize:	
  8751                           
  8752                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8753                           
  8754                           ;incstack = 0
  8755                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8756  0B3F  318B  2372  318B   	fcall	_PIN_MANAGER_Initialize
  8757                           
  8758                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8759  0B42  318B  231C  318B   	fcall	_OSCILLATOR_Initialize
  8760                           
  8761                           ;mcc.c: 75: WDT_Initialize();
  8762  0B45  318A  22EB  318B   	fcall	_WDT_Initialize
  8763                           
  8764                           ;mcc.c: 76: SPI_Initialize();
  8765  0B48  318A  22FA  318B   	fcall	_SPI_Initialize
  8766                           
  8767                           ;mcc.c: 77: EUSART_Initialize();
  8768  0B4B  3180  2004         	fcall	_EUSART_Initialize
  8769  0B4D  0008               	return
  8770  0B4E                     __end_of_SYSTEM_Initialize:	
  8771                           
  8772                           	psect	text29
  8773  0AEB                     __ptext29:	
  8774 ;; *************** function _WDT_Initialize *****************
  8775 ;; Defined at:
  8776 ;;		line 94 in file "mcc_generated_files/mcc.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; This function calls:
  8797 ;;		Nothing
  8798 ;; This function is called by:
  8799 ;;		_SYSTEM_Initialize
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           
  8804                           ;psect for function _WDT_Initialize
  8805  0AEB                     _WDT_Initialize:	
  8806                           
  8807                           ;mcc.c: 97: WDTCON = 0x16;
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _WDT_Initialize: [wreg]
  8811  0AEB  3016               	movlw	22
  8812  0AEC  0021               	movlb	1	; select bank1
  8813  0AED  0097               	movwf	23	;volatile
  8814  0AEE  0008               	return
  8815  0AEF                     __end_of_WDT_Initialize:	
  8816                           
  8817                           	psect	text30
  8818  0AFA                     __ptext30:	
  8819 ;; *************** function _SPI_Initialize *****************
  8820 ;; Defined at:
  8821 ;;		line 63 in file "mcc_generated_files/spi.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;		None
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      void 
  8828 ;; Registers used:
  8829 ;;		wreg, status,2
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;Total ram usage:        0 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_SYSTEM_Initialize
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _SPI_Initialize
  8850  0AFA                     _SPI_Initialize:	
  8851                           
  8852                           ;spi.c: 68: SSP1STAT = 0x40;
  8853                           
  8854                           ;incstack = 0
  8855                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8856  0AFA  3040               	movlw	64
  8857  0AFB  0024               	movlb	4	; select bank4
  8858  0AFC  0094               	movwf	20	;volatile
  8859                           
  8860                           ;spi.c: 71: SSP1CON1 = 0x20;
  8861  0AFD  3020               	movlw	32
  8862  0AFE  0095               	movwf	21	;volatile
  8863                           
  8864                           ;spi.c: 74: SSP1ADD = 0x00;
  8865  0AFF  0192               	clrf	18	;volatile
  8866  0B00  0008               	return
  8867  0B01                     __end_of_SPI_Initialize:	
  8868                           
  8869                           	psect	text31
  8870  0B72                     __ptext31:	
  8871 ;; *************** function _PIN_MANAGER_Initialize *****************
  8872 ;; Defined at:
  8873 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_SYSTEM_Initialize
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           
  8901                           ;psect for function _PIN_MANAGER_Initialize
  8902  0B72                     _PIN_MANAGER_Initialize:	
  8903                           
  8904                           ;pin_manager.c: 57: LATA = 0x14;
  8905                           
  8906                           ;incstack = 0
  8907                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8908  0B72  3014               	movlw	20
  8909  0B73  0022               	movlb	2	; select bank2
  8910  0B74  008C               	movwf	12	;volatile
  8911                           
  8912                           ;pin_manager.c: 58: LATC = 0x00;
  8913  0B75  018E               	clrf	14	;volatile
  8914                           
  8915                           ;pin_manager.c: 63: TRISA = 0x3B;
  8916  0B76  303B               	movlw	59
  8917  0B77  0021               	movlb	1	; select bank1
  8918  0B78  008C               	movwf	12	;volatile
  8919                           
  8920                           ;pin_manager.c: 64: TRISC = 0x32;
  8921  0B79  3032               	movlw	50
  8922  0B7A  008E               	movwf	14	;volatile
  8923                           
  8924                           ;pin_manager.c: 69: ANSELC = 0x00;
  8925  0B7B  0023               	movlb	3	; select bank3
  8926  0B7C  018E               	clrf	14	;volatile
  8927                           
  8928                           ;pin_manager.c: 70: ANSELA = 0x00;
  8929  0B7D  018C               	clrf	12	;volatile
  8930                           
  8931                           ;pin_manager.c: 75: WPUA = 0x00;
  8932  0B7E  0024               	movlb	4	; select bank4
  8933  0B7F  018C               	clrf	12	;volatile
  8934                           
  8935                           ;pin_manager.c: 76: WPUC = 0x30;
  8936  0B80  3030               	movlw	48
  8937  0B81  008E               	movwf	14	;volatile
  8938                           
  8939                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 1;
  8940  0B82  0021               	movlb	1	; select bank1
  8941  0B83  1795               	bsf	21,7	;volatile
  8942                           
  8943                           ;pin_manager.c: 83: APFCON1 = 0x00;
  8944  0B84  0022               	movlb	2	; select bank2
  8945  0B85  019E               	clrf	30	;volatile
  8946                           
  8947                           ;pin_manager.c: 84: APFCON0 = 0x84;
  8948  0B86  3084               	movlw	132
  8949  0B87  009D               	movwf	29	;volatile
  8950  0B88  0008               	return
  8951  0B89                     __end_of_PIN_MANAGER_Initialize:	
  8952                           
  8953                           	psect	text32
  8954  0B1C                     __ptext32:	
  8955 ;; *************** function _OSCILLATOR_Initialize *****************
  8956 ;; Defined at:
  8957 ;;		line 80 in file "mcc_generated_files/mcc.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;		None
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;		None
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  1    wreg      void 
  8964 ;; Registers used:
  8965 ;;		wreg, status,2
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;Total ram usage:        0 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; This function calls:
  8978 ;;		Nothing
  8979 ;; This function is called by:
  8980 ;;		_SYSTEM_Initialize
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           
  8985                           ;psect for function _OSCILLATOR_Initialize
  8986  0B1C                     _OSCILLATOR_Initialize:	
  8987                           
  8988                           ;mcc.c: 83: OSCCON = 0x70;
  8989                           
  8990                           ;incstack = 0
  8991                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8992  0B1C  3070               	movlw	112
  8993  0B1D  0021               	movlb	1	; select bank1
  8994  0B1E  0099               	movwf	25	;volatile
  8995                           
  8996                           ;mcc.c: 85: OSCTUNE = 0x00;
  8997  0B1F  0198               	clrf	24	;volatile
  8998                           
  8999                           ;mcc.c: 87: BORCON = 0x00;
  9000  0B20  0022               	movlb	2	; select bank2
  9001  0B21  0196               	clrf	22	;volatile
  9002  0B22                     l26:	
  9003                           ;mcc.c: 90: {
  9004                           
  9005                           ;mcc.c: 89: while(PLLR == 0)
  9006                           
  9007  0B22  0021               	movlb	1	; select bank1
  9008  0B23  1B1A               	btfsc	26,6	;volatile
  9009  0B24  0008               	return
  9010  0B25  2B22               	goto	l26
  9011  0B26                     __end_of_OSCILLATOR_Initialize:	
  9012                           
  9013                           	psect	text33
  9014  0004                     __ptext33:	
  9015 ;; *************** function _EUSART_Initialize *****************
  9016 ;; Defined at:
  9017 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      void 
  9024 ;; Registers used:
  9025 ;;		wreg
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        0 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; This function calls:
  9038 ;;		Nothing
  9039 ;; This function is called by:
  9040 ;;		_SYSTEM_Initialize
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function _EUSART_Initialize
  9046  0004                     _EUSART_Initialize:	
  9047                           
  9048                           ;eusart.c: 58: BAUDCON = 0x08;
  9049                           
  9050                           ;incstack = 0
  9051                           ; Regs used in _EUSART_Initialize: [wreg]
  9052  0004  3008               	movlw	8
  9053  0005  0023               	movlb	3	; select bank3
  9054  0006  009F               	movwf	31	;volatile
  9055                           
  9056                           ;eusart.c: 61: RCSTA = 0x90;
  9057  0007  3090               	movlw	144
  9058  0008  009D               	movwf	29	;volatile
  9059                           
  9060                           ;eusart.c: 64: TXSTA = 0x24;
  9061  0009  3024               	movlw	36
  9062  000A  009E               	movwf	30	;volatile
  9063                           
  9064                           ;eusart.c: 67: SPBRGL = 0x40;
  9065  000B  3040               	movlw	64
  9066  000C  009B               	movwf	27	;volatile
  9067                           
  9068                           ;eusart.c: 70: SPBRGH = 0x03;
  9069  000D  3003               	movlw	3
  9070  000E  009C               	movwf	28	;volatile
  9071  000F  0008               	return
  9072  0010                     __end_of_EUSART_Initialize:	
  9073                           
  9074                           	psect	text34
  9075  0B12                     __ptext34:	
  9076 ;; *************** function _EUSART_Read *****************
  9077 ;; Defined at:
  9078 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;		None
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;		None
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      unsigned char 
  9085 ;; Registers used:
  9086 ;;		wreg
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;Total ram usage:        0 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; This function calls:
  9099 ;;		Nothing
  9100 ;; This function is called by:
  9101 ;;		_main
  9102 ;;		_getch
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           
  9107                           ;psect for function _EUSART_Read
  9108  0B12                     _EUSART_Read:	
  9109  0B12                     l56:	
  9110                           ;eusart.c: 78: {
  9111                           
  9112                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9113                           
  9114                           ;incstack = 0
  9115                           ; Regs used in _EUSART_Read: [wreg]
  9116                           
  9117  0B12  0020               	movlb	0	; select bank0
  9118  0B13  1E91               	btfss	17,5	;volatile
  9119  0B14  2B12               	goto	l56
  9120                           
  9121                           ;eusart.c: 79: }
  9122                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9123  0B15  0023               	movlb	3	; select bank3
  9124  0B16  1C9D               	btfss	29,1	;volatile
  9125  0B17  2B1A               	goto	l2370
  9126                           
  9127                           ;eusart.c: 83: {
  9128                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9129  0B18  121D               	bcf	29,4	;volatile
  9130                           
  9131                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9132  0B19  161D               	bsf	29,4	;volatile
  9133  0B1A                     l2370:	
  9134                           
  9135                           ;eusart.c: 88: }
  9136                           ;eusart.c: 90: return RCREG;
  9137  0B1A  0819               	movf	25,w	;volatile
  9138  0B1B  0008               	return
  9139  0B1C                     __end_of_EUSART_Read:	
  9140  007E                     btemp	set	126	;btemp
  9141  007E                     wtemp0	set	126


Data Sizes:
    Strings     1172
    Constant    34
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     26      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    printf$636	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_63(CODE[17]), STR_62(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_61(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_8(CODE[21]), main@buf(BANK1[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_60(CODE[5]), STR_59(CODE[15]), STR_58(CODE[15]), STR_57(CODE[2]), 
		 -> STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[2]), STR_53(CODE[16]), 
		 -> STR_52(CODE[16]), STR_51(CODE[16]), STR_50(CODE[2]), STR_49(CODE[12]), 
		 -> STR_48(CODE[12]), STR_47(CODE[12]), STR_46(CODE[2]), STR_45(CODE[12]), 
		 -> STR_44(CODE[12]), STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[44]), 
		 -> STR_40(CODE[44]), STR_39(CODE[5]), STR_38(CODE[13]), STR_37(CODE[13]), 
		 -> STR_36(CODE[18]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[20]), 
		 -> STR_32(CODE[14]), STR_31(CODE[14]), STR_30(CODE[14]), STR_29(CODE[15]), 
		 -> STR_28(CODE[16]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[23]), 
		 -> STR_24(CODE[21]), STR_23(CODE[15]), STR_22(CODE[22]), STR_21(CODE[44]), 
		 -> STR_20(CODE[57]), STR_19(CODE[26]), STR_18(CODE[21]), STR_17(CODE[29]), 
		 -> STR_16(CODE[38]), STR_15(CODE[25]), STR_14(CODE[42]), STR_13(CODE[38]), 
		 -> STR_12(CODE[58]), STR_11(CODE[54]), STR_10(CODE[59]), STR_9(CODE[51]), 
		 -> STR_7(CODE[36]), STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[2]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 16
		 -> main@buf(BANK1[16]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@buf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_send->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_send->_printf
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  122571
                                             73 BANK0      2     2      0
                                              0 BANK1     26    26      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   26800
                                             69 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   15635
                                             43 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      8     4      4    6570
                                             35 BANK0      8     4      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   20354
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            11    10      1    9402
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             4     2      2   11333
                                             39 BANK0      4     2      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (1) _can_set_sid                                          7     5      2     218
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8623
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    6757
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11097
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11075
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8691
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    6263
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      9C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      9C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 05:14:04 2018

                          _SPI_Initialize 0AFA                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0043                                        l26 0B22  
                                      l63 0B02                                        l56 0B12  
                 ?_SPI_Exchange8bitBuffer 0071                                        _nm 14B4  
                     ___wmul@multiplicand 0072                     __size_of_SPI_exchange 0015  
                             __CFG_LVP$ON 0000                                       l210 03CF  
                                     l118 0B0E                                       l209 03CD  
                                     l334 0281                                       l423 05CB  
                                     l360 0DAC                                       l337 0291  
                                     l361 0DA7                                       l354 0D8A  
                                     l435 06A9                                       l363 0DB0  
                                     l436 0615                                       l437 0616  
                                     l365 0DB4                                       l357 0D9B  
                                     l358 0D96                                       l463 06F1  
                                     l458 06CF                                       l467 0728  
                                     l492 07EF                                       l576 0BAA  
                __end_of_can_status_check 0DC1                              __CFG_CPD$OFF 0000  
                                     _abc 14AE                                       _buf 00B4  
                                     _sid 00B2                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                   can_logging_mode@debug 0072                              ?_EUSART_Read 0070  
                                    l2010 0C19                                      l2030 0CD1  
                                    l2014 0C25                                      l2110 0671  
                                    l2102 064A                                      l2040 0CFB  
                                    l2008 0C0D                                      l2104 0659  
                                    l2120 0685                                      l2034 0CDF  
                                    l2050 0D14                                      l2018 0C2E  
                                    l2202 07C6                                      l2210 07D9  
                                    l2114 067C                                      l2044 0CFF  
                                    l2036 0CF2                                      l2212 07DD  
                                    l2132 06C3                                      l2108 0666  
                                    l2060 05C6                                      l2220 0D29  
                                    l2038 0CF6                                      l2214 05AA  
                                    l2230 0D3A                                      l2048 0D10  
                                    l2160 071C                                      l2080 0618  
                                    l2072 05E6                                      l2232 0D58  
                                    l2170 0747                                      l2066 05D0  
                                    l2234 0D5F                                      l2092 062D  
                                    l2068 05D9                                      l2182 0760  
                                    l2158 0713                                      l2094 063B  
                                    l2350 0FE8                                      l2184 0764  
                                    l2192 0779                                      l2176 0751  
                                    l2168 0744                                      l2088 062B  
                                    l2370 0B1A                                      l2194 077F  
                                    l2098 0648                                      l2450 0DBA  
                                    l2196 07A4                                      l2188 0771  
                                    l2604 00E3                                      l2294 0DE9  
                                    l2702 0373                                      l2542 0EBB  
                                    l2464 0018                                      l2616 013C  
                                    l2560 0F0F                                      l2800 046B  
                                    l2482 003A                                      l2466 0011  
                                    l2642 028D                                      l2650 029F  
                                    l2554 0EE7                                      l2458 0DBF  
                                    l2492 0072                                      l2484 003E  
                                    l2476 0033                                      l2468 001D  
                                    l2636 027B                                      l2486 0063  
                                    l2670 02EC                                      l2566 0F1E  
                                    l2830 04D0                                      l2822 04B1  
                                    l2814 048A                                      l2672 02C2  
                                    l2648 029D                                      l2832 04D4  
                                    l2808 0478                                      l2840 0582  
                                    l2736 03BF                                      l1962 0BA4  
                                    l2586 0085                                      l2690 033A  
                                    l2674 02F2                                      l2834 04E0  
                                    l2826 04C8                                      l2762 0425  
                                    l2842 058B                                      l1956 0B3D  
                                    l2828 04CC                                      l2780 0448  
                                    l2844 058C                                      l2748 03EE  
                                    l2598 00DE                                      l2774 043C  
                                    l2758 040F                                      l2838 055D  
                                    l1992 0CBA                                      l1984 0C9C  
                                    l2792 045E                                      l2784 044E  
                                    l2768 042E                                      l1986 0CA8  
                                    l1996 0CC3                                      l2788 0457  
                                    l2798 0469                                      STR_1 148D  
                                    STR_2 149A                                      STR_3 14A0  
                                    STR_4 14A9                                      STR_5 1315  
                                    STR_6 14B1                                      STR_7 1213  
                                    STR_8 12DE                                      STR_9 10E6  
                                    u2005 0F6D                                      u1405 0BAB  
                                    u2205 0ECD                                      _LATA 010C  
                                    u1415 0BB0                                      _LATC 010E  
                                    u1515 0C10                                      u1445 0C9F  
                                    u1535 0C1F                                      u2424 037D  
                                    u1465 0CA9                                      u1545 0C26  
                                    u2265 009F                                      u2425 037C  
                                    u1475 0CB3                                      u1485 0CBB  
                                    u1805 0737                                      u1735 06EA  
                                    u2295 00FD                                      u1675 0641  
                                    u1765 070C                                      u2637 03AA  
                                    u2647 0E1E                                      u2657 0E3F  
                                    u1955 0BCE                                      u1994 0C3C  
                                    u1995 0C3B                                      _PLLR 04D6  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _atoi 0010                                      _main 03A0  
                                    _mode 006B                           can_baudrate@bpr 0049  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    start 0002                    __end_of_SPI_Initialize 0B01  
                            _SPI_exchange 0B5D                             __CFG_MCLRE$ON 0000  
                        can_send@data_buf 004B                __end_of_can_dump_registers 0253  
          __end_of_SPI_Exchange8bitBuffer 0D16                             __CFG_PLLEN$ON 0000  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 000A  
           __end_of_OSCILLATOR_Initialize 0B26                                     ?_atoi 0076  
                                   ?_main 0070                                     STR_10 1002  
                                   STR_11 10B0                                     STR_20 1077  
                                   STR_12 103D                                     STR_13 11C7  
                                   STR_21 1171                                     STR_30 1428  
                                   STR_22 129E                                     STR_14 119D  
                                   STR_31 141A                                     STR_23 13FD  
                                   STR_15 126E                                     STR_32 140C  
                                   STR_24 12B4                                     STR_16 11ED  
                                   STR_40 1145                                     STR_33 12F3  
                                   STR_25 1287                                     STR_17 1237  
                                   STR_41 1119                             __CFG_WDTE$OFF 0000  
                                   STR_50 14A9                                     STR_42 14A6  
                                   STR_34 134C                                     STR_26 133B  
                                   STR_18 12C9                                     STR_43 14A6  
                                   STR_51 139F                                     STR_35 136E  
                                   STR_27 135D                                     STR_19 1254  
                                   STR_60 14A6                                     STR_44 1340  
                                   STR_52 13BF                                     STR_28 137F  
                                   STR_36 1307                                     STR_45 1362  
                                   STR_61 1486                                     STR_37 1443  
                                   STR_29 13DF                                     STR_53 13CF  
                                   STR_54 14A9                                     STR_46 14A9  
                                   STR_38 1436                                     STR_62 1319  
                                   STR_39 14A6                                     STR_47 1450  
                                   STR_55 138F                                     STR_63 132A  
                                   STR_48 145C                                     STR_56 13AF  
                                   STR_57 14A9                                     STR_49 1468  
                                   STR_58 13EE                                     STR_59 13FD  
                    __size_of_can_set_sid 0024                           __end_of___lwdiv 0CC8  
                         __end_of___lwmod 0C33             can_status_check@bytes_written 0067  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                         SPI_exchange@buf 007D                           SPI_exchange@len 0078  
                         __end_of_dpowers 147E                            _WDT_Initialize 0AEB  
                         __end_of_isdigit 0B3F                           __end_of_receive 1000  
                                   atoi@a 007B                          can_baudrate@mask 004A  
                                   atoi@s 007D                                     _putch 0AEF  
                                   main@c 00DB                                     main@n 00DA  
            ?_abort_pending_transmissions 0070                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                           receive@rx_buf 0051                           ?_SPI_Initialize 0070  
     __size_of_can_dump_masks_and_filters 00CC                           __initialization 07F0  
                   __size_of_can_baudrate 0033                              __end_of_atoi 0077  
                            __end_of_main 05A5                             main@echo_back 00D9  
                          ??_EUSART_Write 0070                    can_status_check@status 0068  
                                  ??_atoi 0078                                    ??_main 0069  
                   can_set_mask@mask_sidh 0053                     can_set_mask@mask_sidl 0054  
                 can_logging_mode@verbose 0070                    __end_of_WDT_Initialize 0AEF  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 0B12  
                   __size_of_can_ope_mode 0057                     __size_of_can_set_mask 00A5  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                        __end_of_can_init 0EA6                              _can_baudrate 0C61  
                        __end_of_can_send 03A0                          receive_handler@i 004A  
                          __CFG_PWRTE$OFF 0000                                    ___wmul 0BA2  
                           _output_format 006D                            __CFG_STVREN$ON 0000  
                               ??___lwdiv 0074                                 ??___lwmod 007C  
                                  _printf 05A5                              _can_ope_mode 0DC1  
                            _can_set_mask 0EA6                                 ??_isdigit 0070  
                               ??_receive 004B                           ?_WDT_Initialize 0070  
               __size_of_can_logging_mode 000B                          __end_of_rxfnsidh 149A  
                        __end_of_txbnsidh 14AE                          __end_of_rxmnsidh 1002  
                    __size_of_EUSART_Read 000A                         _SYSTEM_Initialize 0B3F  
               SPI_exchange@bytes_written 007C                   __end_of__initialization 07FD  
                  __size_of_read_register 0019                        ?_SYSTEM_Initialize 0070  
                      __size_of_can_abort 000F                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0070                            can_send@status 004A  
    __size_of_abort_pending_transmissions 0026                             __end_of_putch 0AF4  
                             receive@pbuf 0060        __end_of_can_dump_masks_and_filters 0143  
              _can_dump_masks_and_filters 0077                                __end_of_nm 14B6  
                       ?_can_status_check 0070                            _OPTION_REGbits 0095  
                      ??_can_status_check 0065                    can_abort@bytes_written 0048  
               __end_of_SYSTEM_Initialize 0B4E                                   ??_putch 0071  
                              __pbssBANK0 006B                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 0B09                          can_set_mask@mask 0048  
                              __pmaintext 03A0                                   ?___wmul 0070  
                                 _BAUDCON 019F                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0022  
                           _read_register 0B89                                 ?_can_init 0047  
                               ?_can_send 0043                        _can_dump_registers 0143  
                __size_of_receive_handler 0055                                   _OSCTUNE 0098  
                       __end_of_can_abort 0B5D                                   _SSP1ADD 0212  
                                 _SSP1BUF 0211                       ?_can_dump_registers 0070  
                      __size_of_txf_clear 002E                          ??_SPI_Initialize 0070  
                         __size_of___wmul 001B                      ??_can_dump_registers 0043  
                           ??_can_set_sid 0072                                   ___lwdiv 0C94  
                                 ___lwmod 0C07                            ?_read_register 0070  
                                 _handler 00B0                                   __ptext1 0D6B  
                                 __ptext2 0C33                                   __ptext3 0F4B  
                                 __ptext4 0D16                                   __ptext5 0EA6  
                                 __ptext6 0253                                   __ptext7 0B26  
                                 __ptext8 0E18                                   __ptext9 0BBD  
                         __size_of_printf 024B                         __end_of_hexpowers 1486  
                                 _dpowers 1474                                ??_can_init 0049  
                   _OSCILLATOR_Initialize 0B1C                                ??_can_send 0044  
                                 _isdigit 0B31                                   _receive 0F4B  
                ??_PIN_MANAGER_Initialize 0070                          _can_logging_mode 0B26  
                       ?_SPI_Exchange8bit 0070                                   main@cmd 00DC  
                  txf_clear@bytes_written 0023                                   main@buf 00C4  
                                 main@bpr 00D5                __size_of_SYSTEM_Initialize 000F  
                                 main@idx 00DD                                   main@sid 00D4  
                                 clrloop0 0AF5                      end_of_initialization 07FD  
                      ??_SPI_Exchange8bit 0070                      SPI_Exchange8bit@data 0070  
                          _operation_mode 006F                         _EUSART_Initialize 0004  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0042                                   printf@f 0022  
                              _printf$636 0034                         __end_of_txf_clear 0C61  
                     ??_EUSART_Initialize 0070                          ??_WDT_Initialize 0070  
                     __end_of_can_set_sid 0BE1                          __CFG_FOSC$INTOSC 0000  
            ??_can_dump_masks_and_filters 0043                     __size_of_EUSART_Write 0008  
                       ??_receive_handler 0047                 __end_of_EUSART_Initialize 0010  
                             printf@width 0040                  ??_SPI_Exchange8bitBuffer 0073  
                              main@status 00D6  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0BBD  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0B01  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07F0  
                     start_initialization 07F0           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 14B1                          _can_set_mask$510 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0C07  
             _abort_pending_transmissions 0BE1                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
               can_ope_mode@bytes_written 0045             ??_abort_pending_transmissions 0020  
                           ?_SPI_exchange 0078                                  ??___wmul 0074  
                           txf_clear@mask 0022                               _can_set_sid 0BBD  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00C4  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008E                         __size_of_can_send 014D  
                              receive@dlc 0063             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 0B4E                __size_of_EUSART_Initialize 000C  
                     __end_of_EUSART_Read 0B1C                           can_set_mask@cmd 0052  
                          ??_SPI_exchange 0079           __size_of_SPI_Exchange8bitBuffer 004E  
                        ___lwdiv@dividend 0072                    _PIN_MANAGER_Initialize 0B72  
                         can_set_sid@sidh 0075                           can_set_sid@sidl 0076  
                __end_of_can_logging_mode 0B31                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                                 _hexpowers 147E  
                        ___lwdiv@quotient 0075                            __size_of_putch 0005  
                              ?_can_abort 0070                             ?_can_baudrate 0070  
                          ___wmul@product 0074                                  _LATAbits 010C  
                                _LATCbits 010E                                 clear_ram0 0AF4  
                               _save_rxfn 00A0                                 _save_rxmn 00AC  
                                _PIR1bits 0011                 __size_of_SPI_Exchange8bit 0009  
                                _SSP1CON1 0215                                  _SSP1STAT 0214  
             __size_of_can_dump_registers 0110                             ?_can_ope_mode 0070  
                       ___wmul@multiplier 0070                             ?_can_set_mask 0047  
                  _SPI_Exchange8bitBuffer 0CC8                           _receive_handler 0D16  
                              printf@flag 003F                                printf@prec 0037  
                               _txf_clear 0C33                        receive_handler@dlc 0046  
                      receive_handler@buf 0045                        receive_handler@sid 0043  
                             _EUSART_Read 0B12                            ??_can_baudrate 0047  
                             can_send@dlc 0043                               can_send@len 0048  
                        _can_status_check 0D6B                   __size_of_SPI_Initialize 0007  
                 ??_OSCILLATOR_Initialize 0070                            ??_can_ope_mode 0043  
                        __size_of___lwdiv 0034                          __size_of___lwmod 002C  
                          ??_can_set_mask 004A              SPI_Exchange8bitBuffer@dataIn 0076  
                               receive@id 0061                               _isdigit$827 0070  
                    can_ope_mode@ope_mode 0046              SPI_Exchange8bitBuffer@bufLen 0071  
                                _can_init 0E18                                  _can_send 0253  
                              txf_clear@n 0024                                ?_txf_clear 0070  
                    __end_of_SPI_exchange 0B72                          __size_of_isdigit 000E  
                        __size_of_receive 00B5                           ___lwdiv@divisor 0070  
                         ___lwdiv@counter 0077                                  __ptext10 0143  
                                __ptext11 0B89                                  __ptext20 0C94  
                                __ptext12 0077                                  __ptext21 0BE1  
                                __ptext13 0C61                                  __ptext30 0AFA  
                                __ptext22 0B5D                                  __ptext14 0B4E  
                                __ptext31 0B72                                  __ptext23 0CC8  
                                __ptext15 0DC1                                  __ptext32 0B1C  
                                __ptext24 0B09                                  __ptext16 05A5  
                                __ptext33 0004                                  __ptext25 0010  
                                __ptext17 0AEF                                  __ptext34 0B12  
                                __ptext26 0B31                                  __ptext18 0B01  
                                __ptext27 0BA2                                  __ptext19 0C07  
                                __ptext28 0B3F                                  __ptext29 0AEB  
                            _SSP1CON1bits 0215                               ??_can_abort 0047  
                           __size_of_atoi 0067                             __size_of_main 0205  
                                atoi@sign 007A                   __end_of_receive_handler 0D6B  
                            ?_can_set_sid 0070                                 printf@idx 0036  
                               printf@len 003A                                 printf@val 003D  
                            _SSP1STATbits 0214                                  main@mask 00D7  
                                _rxfnsidh 1494                     __end_of_read_register 0BA2  
                                _txbnsidh 14AB                                  _rxmnsidh 1000  
                          __pstringtext10 10B0                            __pstringtext11 10E6  
                          __pstringtext20 1254                            __pstringtext12 1119  
                          __pstringtext21 126E                            __pstringtext13 1145  
                          __pstringtext30 132A                            __pstringtext22 1287  
                          __pstringtext14 1171                            __pstringtext31 133B  
                          __pstringtext23 129E                            __pstringtext15 119D  
                          __pstringtext40 13CF                            __pstringtext32 134C  
                          __pstringtext24 12B4                            __pstringtext16 11C7  
                          __pstringtext41 13DF                            __pstringtext33 135D  
                          __pstringtext25 12C9                            __pstringtext17 11ED  
                          __pstringtext50 145C                            __pstringtext42 13EE  
                          __pstringtext34 136E                            __pstringtext26 12DE  
                          __pstringtext18 1213                            __pstringtext51 1468  
                          __pstringtext43 13FD                            __pstringtext35 137F  
                          __pstringtext27 12F3                            __pstringtext19 1237  
                          __pstringtext52 1486                            __pstringtext44 140C  
                          __pstringtext36 138F                            __pstringtext28 1307  
                          __pstringtext53 148D                            __pstringtext45 141A  
                          __pstringtext37 139F                            __pstringtext29 1319  
                          __pstringtext54 149A                            __pstringtext46 1428  
                          __pstringtext38 13AF                            __pstringtext55 14A0  
                          __pstringtext47 1436                            __pstringtext39 13BF  
                          __pstringtext56 14A6                            __pstringtext48 1443  
                          __pstringtext57 14B1                            __pstringtext49 1450  
                          __pstringtext58 0000                                  isdigit@c 0071  
                 __size_of_WDT_Initialize 0004                                  receive@n 0064  
                        ___lwmod@dividend 007A                   ?_PIN_MANAGER_Initialize 0070  
                       __CFG_CLKOUTEN$OFF 0000        SPI_Exchange8bitBuffer@bytesWritten 0077  
                       receive@bytes_read 0050                          _SPI_Exchange8bit 0B09  
                   can_send@bytes_written 0049                                  printf@ap 003C  
                                printf@cp 0038                         ?_can_logging_mode 0070  
                 can_init@receive_handler 0047                        ??_can_logging_mode 0071  
                    __end_of_can_baudrate 0C94                             __pstringtext1 1474  
                           __pstringtext2 147E                             __pstringtext3 1494  
                           __pstringtext4 14AB                             __pstringtext5 14AE  
                           __pstringtext6 14B4                             __pstringtext7 1000  
                           __pstringtext8 103D                             __pstringtext9 1077  
                             ??_txf_clear 0020                           ___lwmod@divisor 0078  
                         ___lwmod@counter 007D                        EUSART_Write@txData 0070  
          __end_of_PIN_MANAGER_Initialize 0B89                      __end_of_can_ope_mode 0E18  
                    __end_of_can_set_mask 0F4B  
