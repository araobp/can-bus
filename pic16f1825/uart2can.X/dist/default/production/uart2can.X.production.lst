

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 14 21:12:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	stringtext18,global,class=STRCODE,delta=2
    24                           	psect	stringtext19,global,class=STRCODE,delta=2
    25                           	psect	stringtext20,global,class=STRCODE,delta=2
    26                           	psect	stringtext21,global,class=STRCODE,delta=2
    27                           	psect	stringtext22,global,class=STRCODE,delta=2
    28                           	psect	stringtext23,global,class=STRCODE,delta=2
    29                           	psect	stringtext24,global,class=STRCODE,delta=2
    30                           	psect	stringtext25,global,class=STRCODE,delta=2
    31                           	psect	stringtext26,global,class=STRCODE,delta=2
    32                           	psect	stringtext27,global,class=STRCODE,delta=2
    33                           	psect	stringtext28,global,class=STRCODE,delta=2
    34                           	psect	stringtext29,global,class=STRCODE,delta=2
    35                           	psect	stringtext30,global,class=STRCODE,delta=2
    36                           	psect	stringtext31,global,class=STRCODE,delta=2
    37                           	psect	stringtext32,global,class=STRCODE,delta=2
    38                           	psect	stringtext33,global,class=STRCODE,delta=2
    39                           	psect	stringtext34,global,class=STRCODE,delta=2
    40                           	psect	stringtext35,global,class=STRCODE,delta=2
    41                           	psect	stringtext36,global,class=STRCODE,delta=2
    42                           	psect	stringtext37,global,class=STRCODE,delta=2
    43                           	psect	stringtext38,global,class=STRCODE,delta=2
    44                           	psect	stringtext39,global,class=STRCODE,delta=2
    45                           	psect	stringtext40,global,class=STRCODE,delta=2
    46                           	psect	stringtext41,global,class=STRCODE,delta=2
    47                           	psect	stringtext42,global,class=STRCODE,delta=2
    48                           	psect	stringtext43,global,class=STRCODE,delta=2
    49                           	psect	stringtext44,global,class=STRCODE,delta=2
    50                           	psect	cinit,global,class=CODE,merge=1,delta=2
    51                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    52                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    53                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    54                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    55                           	psect	inittext,global,class=CODE,delta=2
    56                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    57                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    58                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    59                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    60                           	psect	text1,local,class=CODE,merge=1,delta=2
    61                           	psect	text2,local,class=CODE,merge=1,delta=2
    62                           	psect	text3,local,class=CODE,merge=1,delta=2
    63                           	psect	text4,local,class=CODE,merge=1,delta=2
    64                           	psect	text5,local,class=CODE,merge=1,delta=2
    65                           	psect	text6,local,class=CODE,merge=1,delta=2
    66                           	psect	text7,local,class=CODE,merge=1,delta=2
    67                           	psect	text8,local,class=CODE,merge=1,delta=2
    68                           	psect	text9,local,class=CODE,merge=1,delta=2
    69                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text12,local,class=CODE,merge=1,delta=2
    72                           	psect	text13,local,class=CODE,merge=1,delta=2
    73                           	psect	text14,local,class=CODE,merge=1,delta=2
    74                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text18,local,class=CODE,merge=1,delta=2
    78                           	psect	text19,local,class=CODE,merge=1,delta=2
    79                           	psect	text20,local,class=CODE,merge=1,delta=2
    80                           	psect	text21,local,class=CODE,merge=1,delta=2
    81                           	psect	text22,local,class=CODE,merge=1,delta=2
    82                           	psect	text23,local,class=CODE,merge=1,delta=2
    83                           	psect	text24,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     
    86                           ; Version 1.45
    87                           ; Generated 16/11/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F1825 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  008C                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0095                     	;# 
   154  0096                     	;# 
   155  0097                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009A                     	;# 
   159  009B                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010E                     	;# 
   166  0111                     	;# 
   167  0112                     	;# 
   168  0113                     	;# 
   169  0114                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0118                     	;# 
   174  0119                     	;# 
   175  011A                     	;# 
   176  011B                     	;# 
   177  011D                     	;# 
   178  011E                     	;# 
   179  018C                     	;# 
   180  018E                     	;# 
   181  0191                     	;# 
   182  0191                     	;# 
   183  0192                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0199                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019D                     	;# 
   196  019E                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0216                     	;# 
   213  0217                     	;# 
   214  0217                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0294                     	;# 
   220  0295                     	;# 
   221  0295                     	;# 
   222  0296                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029B                     	;# 
   228  029C                     	;# 
   229  029D                     	;# 
   230  029E                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0318                     	;# 
   236  0318                     	;# 
   237  0319                     	;# 
   238  031A                     	;# 
   239  038C                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  039A                     	;# 
   245  039C                     	;# 
   246  039D                     	;# 
   247  039E                     	;# 
   248  039F                     	;# 
   249  0415                     	;# 
   250  0416                     	;# 
   251  0417                     	;# 
   252  041C                     	;# 
   253  041D                     	;# 
   254  041E                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000E                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  008C                     	;# 
   295  008E                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0098                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010E                     	;# 
   312  0111                     	;# 
   313  0112                     	;# 
   314  0113                     	;# 
   315  0114                     	;# 
   316  0115                     	;# 
   317  0116                     	;# 
   318  0117                     	;# 
   319  0118                     	;# 
   320  0119                     	;# 
   321  011A                     	;# 
   322  011B                     	;# 
   323  011D                     	;# 
   324  011E                     	;# 
   325  018C                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019D                     	;# 
   342  019E                     	;# 
   343  019F                     	;# 
   344  020C                     	;# 
   345  020E                     	;# 
   346  0211                     	;# 
   347  0211                     	;# 
   348  0212                     	;# 
   349  0212                     	;# 
   350  0213                     	;# 
   351  0213                     	;# 
   352  0214                     	;# 
   353  0214                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0216                     	;# 
   359  0217                     	;# 
   360  0217                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0294                     	;# 
   366  0295                     	;# 
   367  0295                     	;# 
   368  0296                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  029B                     	;# 
   374  029C                     	;# 
   375  029D                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  038C                     	;# 
   386  038E                     	;# 
   387  0391                     	;# 
   388  0392                     	;# 
   389  0393                     	;# 
   390  039A                     	;# 
   391  039C                     	;# 
   392  039D                     	;# 
   393  039E                     	;# 
   394  039F                     	;# 
   395  0415                     	;# 
   396  0416                     	;# 
   397  0417                     	;# 
   398  041C                     	;# 
   399  041D                     	;# 
   400  041E                     	;# 
   401  0FE4                     	;# 
   402  0FE5                     	;# 
   403  0FE6                     	;# 
   404  0FE7                     	;# 
   405  0FE8                     	;# 
   406  0FE9                     	;# 
   407  0FEA                     	;# 
   408  0FEB                     	;# 
   409  0FED                     	;# 
   410  0FEE                     	;# 
   411  0FEF                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000E                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  008C                     	;# 
   441  008E                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010E                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018E                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020C                     	;# 
   491  020E                     	;# 
   492  0211                     	;# 
   493  0211                     	;# 
   494  0212                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0213                     	;# 
   498  0214                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0294                     	;# 
   512  0295                     	;# 
   513  0295                     	;# 
   514  0296                     	;# 
   515  0298                     	;# 
   516  0298                     	;# 
   517  0299                     	;# 
   518  029A                     	;# 
   519  029B                     	;# 
   520  029C                     	;# 
   521  029D                     	;# 
   522  029E                     	;# 
   523  0311                     	;# 
   524  0311                     	;# 
   525  0312                     	;# 
   526  0313                     	;# 
   527  0318                     	;# 
   528  0318                     	;# 
   529  0319                     	;# 
   530  031A                     	;# 
   531  038C                     	;# 
   532  038E                     	;# 
   533  0391                     	;# 
   534  0392                     	;# 
   535  0393                     	;# 
   536  039A                     	;# 
   537  039C                     	;# 
   538  039D                     	;# 
   539  039E                     	;# 
   540  039F                     	;# 
   541  0415                     	;# 
   542  0416                     	;# 
   543  0417                     	;# 
   544  041C                     	;# 
   545  041D                     	;# 
   546  041E                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000E                     	;# 
   572  0011                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001E                     	;# 
   585  001F                     	;# 
   586  008C                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  010C                     	;# 
   603  010E                     	;# 
   604  0111                     	;# 
   605  0112                     	;# 
   606  0113                     	;# 
   607  0114                     	;# 
   608  0115                     	;# 
   609  0116                     	;# 
   610  0117                     	;# 
   611  0118                     	;# 
   612  0119                     	;# 
   613  011A                     	;# 
   614  011B                     	;# 
   615  011D                     	;# 
   616  011E                     	;# 
   617  018C                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019C                     	;# 
   633  019D                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  020C                     	;# 
   637  020E                     	;# 
   638  0211                     	;# 
   639  0211                     	;# 
   640  0212                     	;# 
   641  0212                     	;# 
   642  0213                     	;# 
   643  0213                     	;# 
   644  0214                     	;# 
   645  0214                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0215                     	;# 
   649  0216                     	;# 
   650  0216                     	;# 
   651  0217                     	;# 
   652  0217                     	;# 
   653  0291                     	;# 
   654  0291                     	;# 
   655  0292                     	;# 
   656  0293                     	;# 
   657  0294                     	;# 
   658  0295                     	;# 
   659  0295                     	;# 
   660  0296                     	;# 
   661  0298                     	;# 
   662  0298                     	;# 
   663  0299                     	;# 
   664  029A                     	;# 
   665  029B                     	;# 
   666  029C                     	;# 
   667  029D                     	;# 
   668  029E                     	;# 
   669  0311                     	;# 
   670  0311                     	;# 
   671  0312                     	;# 
   672  0313                     	;# 
   673  0318                     	;# 
   674  0318                     	;# 
   675  0319                     	;# 
   676  031A                     	;# 
   677  038C                     	;# 
   678  038E                     	;# 
   679  0391                     	;# 
   680  0392                     	;# 
   681  0393                     	;# 
   682  039A                     	;# 
   683  039C                     	;# 
   684  039D                     	;# 
   685  039E                     	;# 
   686  039F                     	;# 
   687  0415                     	;# 
   688  0416                     	;# 
   689  0417                     	;# 
   690  041C                     	;# 
   691  041D                     	;# 
   692  041E                     	;# 
   693  0FE4                     	;# 
   694  0FE5                     	;# 
   695  0FE6                     	;# 
   696  0FE7                     	;# 
   697  0FE8                     	;# 
   698  0FE9                     	;# 
   699  0FEA                     	;# 
   700  0FEB                     	;# 
   701  0FED                     	;# 
   702  0FEE                     	;# 
   703  0FEF                     	;# 
   704  0000                     	;# 
   705  0001                     	;# 
   706  0002                     	;# 
   707  0003                     	;# 
   708  0004                     	;# 
   709  0005                     	;# 
   710  0006                     	;# 
   711  0007                     	;# 
   712  0008                     	;# 
   713  0009                     	;# 
   714  000A                     	;# 
   715  000B                     	;# 
   716  000C                     	;# 
   717  000E                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  001E                     	;# 
   731  001F                     	;# 
   732  008C                     	;# 
   733  008E                     	;# 
   734  0091                     	;# 
   735  0092                     	;# 
   736  0093                     	;# 
   737  0095                     	;# 
   738  0096                     	;# 
   739  0097                     	;# 
   740  0098                     	;# 
   741  0099                     	;# 
   742  009A                     	;# 
   743  009B                     	;# 
   744  009B                     	;# 
   745  009C                     	;# 
   746  009D                     	;# 
   747  009E                     	;# 
   748  010C                     	;# 
   749  010E                     	;# 
   750  0111                     	;# 
   751  0112                     	;# 
   752  0113                     	;# 
   753  0114                     	;# 
   754  0115                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  0118                     	;# 
   758  0119                     	;# 
   759  011A                     	;# 
   760  011B                     	;# 
   761  011D                     	;# 
   762  011E                     	;# 
   763  018C                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020C                     	;# 
   783  020E                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0294                     	;# 
   804  0295                     	;# 
   805  0295                     	;# 
   806  0296                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  029B                     	;# 
   812  029C                     	;# 
   813  029D                     	;# 
   814  029E                     	;# 
   815  0311                     	;# 
   816  0311                     	;# 
   817  0312                     	;# 
   818  0313                     	;# 
   819  0318                     	;# 
   820  0318                     	;# 
   821  0319                     	;# 
   822  031A                     	;# 
   823  038C                     	;# 
   824  038E                     	;# 
   825  0391                     	;# 
   826  0392                     	;# 
   827  0393                     	;# 
   828  039A                     	;# 
   829  039C                     	;# 
   830  039D                     	;# 
   831  039E                     	;# 
   832  039F                     	;# 
   833  0415                     	;# 
   834  0416                     	;# 
   835  0417                     	;# 
   836  041C                     	;# 
   837  041D                     	;# 
   838  041E                     	;# 
   839  0FE4                     	;# 
   840  0FE5                     	;# 
   841  0FE6                     	;# 
   842  0FE7                     	;# 
   843  0FE8                     	;# 
   844  0FE9                     	;# 
   845  0FEA                     	;# 
   846  0FEB                     	;# 
   847  0FED                     	;# 
   848  0FEE                     	;# 
   849  0FEF                     	;# 
   850                           
   851                           	psect	idataBANK0
   852  0E13                     __pidataBANK0:	
   853                           
   854                           ;initializer for can_status_check@F2968
   855  0E13  34A0               	retlw	160
   856  0E14  3400               	retlw	0
   857                           
   858                           ;initializer for can_send@F2958
   859  0E15  34A0               	retlw	160
   860  0E16  3400               	retlw	0
   861                           
   862                           	psect	idataBANK1
   863  0E1C                     __pidataBANK1:	
   864                           
   865                           ;initializer for main@F2974
   866  0E1C  3402               	retlw	2
   867  0E1D  3428               	retlw	40
   868  0E1E  3405               	retlw	5
   869  0E1F  34F1               	retlw	241
   870  0E20  3441               	retlw	65
   871                           
   872                           	psect	stringtext1
   873  1322                     __pstringtext1:	
   874  1322                     _dpowers:	
   875  1322  3401               	retlw	1
   876  1323  3400               	retlw	0
   877  1324  340A               	retlw	10
   878  1325  3400               	retlw	0
   879  1326  3464               	retlw	100
   880  1327  3400               	retlw	0
   881  1328  34E8               	retlw	232
   882  1329  3403               	retlw	3
   883  132A  3410               	retlw	16
   884  132B  3427               	retlw	39
   885  132C                     __end_of_dpowers:	
   886                           
   887                           	psect	stringtext2
   888  132C                     __pstringtext2:	
   889  132C                     _hexpowers:	
   890  132C  3401               	retlw	1
   891  132D  3400               	retlw	0
   892  132E  3410               	retlw	16
   893  132F  3400               	retlw	0
   894  1330  3400               	retlw	0
   895  1331  3401               	retlw	1
   896  1332  3400               	retlw	0
   897  1333  3410               	retlw	16
   898  1334                     __end_of_hexpowers:	
   899                           
   900                           	psect	stringtext3
   901  133B                     __pstringtext3:	
   902  133B                     _rxfnsidh:	
   903  133B  3400               	retlw	0
   904  133C  3404               	retlw	4
   905  133D  3408               	retlw	8
   906  133E  3410               	retlw	16
   907  133F  3414               	retlw	20
   908  1340  3418               	retlw	24
   909  1341                     __end_of_rxfnsidh:	
   910                           
   911                           	psect	stringtext4
   912  1341                     __pstringtext4:	
   913  1341                     _txbnsidh:	
   914  1341  3431               	retlw	49
   915  1342  3441               	retlw	65
   916  1343  3451               	retlw	81
   917  1344                     __end_of_txbnsidh:	
   918                           
   919                           	psect	stringtext5
   920  1344                     __pstringtext5:	
   921  1344                     _abc:	
   922  1344  3400               	retlw	0
   923  1345  3402               	retlw	2
   924  1346  3404               	retlw	4
   925  1347                     __end_of_abc:	
   926                           
   927                           	psect	stringtext6
   928  134A                     __pstringtext6:	
   929  134A                     _nm:	
   930  134A  3400               	retlw	0
   931  134B  3402               	retlw	2
   932  134C                     __end_of_nm:	
   933                           
   934                           	psect	stringtext7
   935  134C                     __pstringtext7:	
   936  134C                     _rxmnsidh:	
   937  134C  3420               	retlw	32
   938  134D  3424               	retlw	36
   939  134E                     __end_of_rxmnsidh:	
   940                           
   941                           	psect	stringtext8
   942  1000                     __pstringtext8:	
   943  1000                     _max_idx:	
   944  1000  3407               	retlw	7
   945  1001                     __end_of_max_idx:	
   946  0011                     _PIR1bits	set	17
   947  0095                     _OPTION_REGbits	set	149
   948  008E                     _TRISC	set	142
   949  008C                     _TRISA	set	140
   950  0097                     _WDTCON	set	151
   951  0098                     _OSCTUNE	set	152
   952  0099                     _OSCCON	set	153
   953  010E                     _LATCbits	set	270
   954  010C                     _LATAbits	set	268
   955  011D                     _APFCON0	set	285
   956  011E                     _APFCON1	set	286
   957  010E                     _LATC	set	270
   958  010C                     _LATA	set	268
   959  0116                     _BORCON	set	278
   960  018C                     _ANSELA	set	396
   961  018E                     _ANSELC	set	398
   962  019A                     _TXREG	set	410
   963  0199                     _RCREG	set	409
   964  019D                     _RCSTAbits	set	413
   965  019C                     _SPBRGH	set	412
   966  019B                     _SPBRGL	set	411
   967  019E                     _TXSTA	set	414
   968  019D                     _RCSTA	set	413
   969  019F                     _BAUDCON	set	415
   970  0214                     _SSP1STATbits	set	532
   971  0211                     _SSP1BUF	set	529
   972  0215                     _SSP1CON1bits	set	533
   973  0212                     _SSP1ADD	set	530
   974  0215                     _SSP1CON1	set	533
   975  0214                     _SSP1STAT	set	532
   976  020E                     _WPUC	set	526
   977  020C                     _WPUA	set	524
   978  1001                     STR_28:	
   979  1001  345B               	retlw	91	;'['
   980  1002  3453               	retlw	83	;'S'
   981  1003  3465               	retlw	101	;'e'
   982  1004  3474               	retlw	116	;'t'
   983  1005  3420               	retlw	32	;' '
   984  1006  346F               	retlw	111	;'o'
   985  1007  3475               	retlw	117	;'u'
   986  1008  3474               	retlw	116	;'t'
   987  1009  3470               	retlw	112	;'p'
   988  100A  3475               	retlw	117	;'u'
   989  100B  3474               	retlw	116	;'t'
   990  100C  3420               	retlw	32	;' '
   991  100D  346D               	retlw	109	;'m'
   992  100E  346F               	retlw	111	;'o'
   993  100F  3464               	retlw	100	;'d'
   994  1010  3465               	retlw	101	;'e'
   995  1011  345D               	retlw	93	;']'
   996  1012  3420               	retlw	32	;' '
   997  1013  347B               	retlw	123	;'{'
   998  1014  3464               	retlw	100	;'d'
   999  1015  3465               	retlw	101	;'e'
  1000  1016  3462               	retlw	98	;'b'
  1001  1017  3475               	retlw	117	;'u'
  1002  1018  3467               	retlw	103	;'g'
  1003  1019  343A               	retlw	58	;':'
  1004  101A  3420               	retlw	32	;' '
  1005  101B  3440               	retlw	64	;'@'
  1006  101C  3476               	retlw	118	;'v'
  1007  101D  3464               	retlw	100	;'d'
  1008  101E  342C               	retlw	44	;','
  1009  101F  3420               	retlw	32	;' '
  1010  1020  3476               	retlw	118	;'v'
  1011  1021  3465               	retlw	101	;'e'
  1012  1022  3472               	retlw	114	;'r'
  1013  1023  3462               	retlw	98	;'b'
  1014  1024  346F               	retlw	111	;'o'
  1015  1025  3473               	retlw	115	;'s'
  1016  1026  3465               	retlw	101	;'e'
  1017  1027  343A               	retlw	58	;':'
  1018  1028  3420               	retlw	32	;' '
  1019  1029  3440               	retlw	64	;'@'
  1020  102A  3476               	retlw	118	;'v'
  1021  102B  3476               	retlw	118	;'v'
  1022  102C  342C               	retlw	44	;','
  1023  102D  3420               	retlw	32	;' '
  1024  102E  346E               	retlw	110	;'n'
  1025  102F  346F               	retlw	111	;'o'
  1026  1030  3472               	retlw	114	;'r'
  1027  1031  346D               	retlw	109	;'m'
  1028  1032  3461               	retlw	97	;'a'
  1029  1033  346C               	retlw	108	;'l'
  1030  1034  343A               	retlw	58	;':'
  1031  1035  3420               	retlw	32	;' '
  1032  1036  3440               	retlw	64	;'@'
  1033  1037  3476               	retlw	118	;'v'
  1034  1038  346E               	retlw	110	;'n'
  1035  1039  347D               	retlw	125	;'}'
  1036  103A  340A               	retlw	10
  1037  103B  3400               	retlw	0
  1038                           
  1039                           	psect	stringtext9
  1040  103C                     __pstringtext9:	
  1041  103C                     STR_29:	
  1042  103C  345B               	retlw	91	;'['
  1043  103D  3445               	retlw	69	;'E'
  1044  103E  346E               	retlw	110	;'n'
  1045  103F  3461               	retlw	97	;'a'
  1046  1040  3462               	retlw	98	;'b'
  1047  1041  346C               	retlw	108	;'l'
  1048  1042  3465               	retlw	101	;'e'
  1049  1043  3420               	retlw	32	;' '
  1050  1044  346F               	retlw	111	;'o'
  1051  1045  3470               	retlw	112	;'p'
  1052  1046  3465               	retlw	101	;'e'
  1053  1047  3472               	retlw	114	;'r'
  1054  1048  3461               	retlw	97	;'a'
  1055  1049  3474               	retlw	116	;'t'
  1056  104A  3469               	retlw	105	;'i'
  1057  104B  346F               	retlw	111	;'o'
  1058  104C  346E               	retlw	110	;'n'
  1059  104D  3420               	retlw	32	;' '
  1060  104E  346D               	retlw	109	;'m'
  1061  104F  346F               	retlw	111	;'o'
  1062  1050  3464               	retlw	100	;'d'
  1063  1051  3465               	retlw	101	;'e'
  1064  1052  345D               	retlw	93	;']'
  1065  1053  3420               	retlw	32	;' '
  1066  1054  347B               	retlw	123	;'{'
  1067  1055  346C               	retlw	108	;'l'
  1068  1056  346F               	retlw	111	;'o'
  1069  1057  346F               	retlw	111	;'o'
  1070  1058  3470               	retlw	112	;'p'
  1071  1059  3462               	retlw	98	;'b'
  1072  105A  3461               	retlw	97	;'a'
  1073  105B  3463               	retlw	99	;'c'
  1074  105C  346B               	retlw	107	;'k'
  1075  105D  343A               	retlw	58	;':'
  1076  105E  3420               	retlw	32	;' '
  1077  105F  3440               	retlw	64	;'@'
  1078  1060  346F               	retlw	111	;'o'
  1079  1061  346C               	retlw	108	;'l'
  1080  1062  342C               	retlw	44	;','
  1081  1063  3420               	retlw	32	;' '
  1082  1064  346E               	retlw	110	;'n'
  1083  1065  346F               	retlw	111	;'o'
  1084  1066  3472               	retlw	114	;'r'
  1085  1067  346D               	retlw	109	;'m'
  1086  1068  3461               	retlw	97	;'a'
  1087  1069  346C               	retlw	108	;'l'
  1088  106A  343A               	retlw	58	;':'
  1089  106B  3420               	retlw	32	;' '
  1090  106C  3440               	retlw	64	;'@'
  1091  106D  346F               	retlw	111	;'o'
  1092  106E  346E               	retlw	110	;'n'
  1093  106F  347D               	retlw	125	;'}'
  1094  1070  340A               	retlw	10
  1095  1071  3400               	retlw	0
  1096                           
  1097                           	psect	stringtext10
  1098  1072                     __pstringtext10:	
  1099  1072                     STR_27:	
  1100  1072  345B               	retlw	91	;'['
  1101  1073  3453               	retlw	83	;'S'
  1102  1074  3465               	retlw	101	;'e'
  1103  1075  3474               	retlw	116	;'t'
  1104  1076  3420               	retlw	32	;' '
  1105  1077  3473               	retlw	115	;'s'
  1106  1078  3474               	retlw	116	;'t'
  1107  1079  3461               	retlw	97	;'a'
  1108  107A  346E               	retlw	110	;'n'
  1109  107B  3464               	retlw	100	;'d'
  1110  107C  3461               	retlw	97	;'a'
  1111  107D  3472               	retlw	114	;'r'
  1112  107E  3464               	retlw	100	;'d'
  1113  107F  3420               	retlw	32	;' '
  1114  1080  3469               	retlw	105	;'i'
  1115  1081  3464               	retlw	100	;'d'
  1116  1082  3465               	retlw	101	;'e'
  1117  1083  346E               	retlw	110	;'n'
  1118  1084  3474               	retlw	116	;'t'
  1119  1085  3469               	retlw	105	;'i'
  1120  1086  3466               	retlw	102	;'f'
  1121  1087  3469               	retlw	105	;'i'
  1122  1088  3465               	retlw	101	;'e'
  1123  1089  3472               	retlw	114	;'r'
  1124  108A  345D               	retlw	93	;']'
  1125  108B  3420               	retlw	32	;' '
  1126  108C  3440               	retlw	64	;'@'
  1127  108D  3469               	retlw	105	;'i'
  1128  108E  343C               	retlw	60	;'<'
  1129  108F  3453               	retlw	83	;'S'
  1130  1090  3474               	retlw	116	;'t'
  1131  1091  3461               	retlw	97	;'a'
  1132  1092  346E               	retlw	110	;'n'
  1133  1093  3464               	retlw	100	;'d'
  1134  1094  3461               	retlw	97	;'a'
  1135  1095  3472               	retlw	114	;'r'
  1136  1096  3464               	retlw	100	;'d'
  1137  1097  3420               	retlw	32	;' '
  1138  1098  3449               	retlw	73	;'I'
  1139  1099  3464               	retlw	100	;'d'
  1140  109A  3465               	retlw	101	;'e'
  1141  109B  346E               	retlw	110	;'n'
  1142  109C  3474               	retlw	116	;'t'
  1143  109D  3469               	retlw	105	;'i'
  1144  109E  3466               	retlw	102	;'f'
  1145  109F  3469               	retlw	105	;'i'
  1146  10A0  3465               	retlw	101	;'e'
  1147  10A1  3472               	retlw	114	;'r'
  1148  10A2  343E               	retlw	62	;'>'
  1149  10A3  340A               	retlw	10
  1150  10A4  3400               	retlw	0
  1151                           
  1152                           	psect	stringtext11
  1153  10A5                     __pstringtext11:	
  1154  10A5                     STR_33:	
  1155  10A5  345B               	retlw	91	;'['
  1156  10A6  3452               	retlw	82	;'R'
  1157  10A7  3465               	retlw	101	;'e'
  1158  10A8  3463               	retlw	99	;'c'
  1159  10A9  3465               	retlw	101	;'e'
  1160  10AA  3469               	retlw	105	;'i'
  1161  10AB  3476               	retlw	118	;'v'
  1162  10AC  3465               	retlw	101	;'e'
  1163  10AD  3420               	retlw	32	;' '
  1164  10AE  346D               	retlw	109	;'m'
  1165  10AF  3465               	retlw	101	;'e'
  1166  10B0  3473               	retlw	115	;'s'
  1167  10B1  3473               	retlw	115	;'s'
  1168  10B2  3461               	retlw	97	;'a'
  1169  10B3  3467               	retlw	103	;'g'
  1170  10B4  3465               	retlw	101	;'e'
  1171  10B5  345D               	retlw	93	;']'
  1172  10B6  3420               	retlw	32	;' '
  1173  10B7  343C               	retlw	60	;'<'
  1174  10B8  346D               	retlw	109	;'m'
  1175  10B9  3465               	retlw	101	;'e'
  1176  10BA  3473               	retlw	115	;'s'
  1177  10BB  3473               	retlw	115	;'s'
  1178  10BC  3461               	retlw	97	;'a'
  1179  10BD  3467               	retlw	103	;'g'
  1180  10BE  3465               	retlw	101	;'e'
  1181  10BF  343E               	retlw	62	;'>'
  1182  10C0  3420               	retlw	32	;' '
  1183  10C1  3477               	retlw	119	;'w'
  1184  10C2  3469               	retlw	105	;'i'
  1185  10C3  346C               	retlw	108	;'l'
  1186  10C4  346C               	retlw	108	;'l'
  1187  10C5  3420               	retlw	32	;' '
  1188  10C6  3462               	retlw	98	;'b'
  1189  10C7  3465               	retlw	101	;'e'
  1190  10C8  3420               	retlw	32	;' '
  1191  10C9  346F               	retlw	111	;'o'
  1192  10CA  3475               	retlw	117	;'u'
  1193  10CB  3474               	retlw	116	;'t'
  1194  10CC  3470               	retlw	112	;'p'
  1195  10CD  3475               	retlw	117	;'u'
  1196  10CE  3474               	retlw	116	;'t'
  1197  10CF  340A               	retlw	10
  1198  10D0  3400               	retlw	0
  1199                           
  1200                           	psect	stringtext12
  1201  10D1                     __pstringtext12:	
  1202  10D1                     STR_31:	
  1203  10D1  345B               	retlw	91	;'['
  1204  10D2  3453               	retlw	83	;'S'
  1205  10D3  3465               	retlw	101	;'e'
  1206  10D4  3474               	retlw	116	;'t'
  1207  10D5  3420               	retlw	32	;' '
  1208  10D6  3466               	retlw	102	;'f'
  1209  10D7  3469               	retlw	105	;'i'
  1210  10D8  346C               	retlw	108	;'l'
  1211  10D9  3474               	retlw	116	;'t'
  1212  10DA  3465               	retlw	101	;'e'
  1213  10DB  3472               	retlw	114	;'r'
  1214  10DC  345D               	retlw	93	;']'
  1215  10DD  3420               	retlw	32	;' '
  1216  10DE  3440               	retlw	64	;'@'
  1217  10DF  3466               	retlw	102	;'f'
  1218  10E0  343C               	retlw	60	;'<'
  1219  10E1  346E               	retlw	110	;'n'
  1220  10E2  343E               	retlw	62	;'>'
  1221  10E3  343C               	retlw	60	;'<'
  1222  10E4  3466               	retlw	102	;'f'
  1223  10E5  3469               	retlw	105	;'i'
  1224  10E6  346C               	retlw	108	;'l'
  1225  10E7  3474               	retlw	116	;'t'
  1226  10E8  3465               	retlw	101	;'e'
  1227  10E9  3472               	retlw	114	;'r'
  1228  10EA  3428               	retlw	40	;'('
  1229  10EB  3453               	retlw	83	;'S'
  1230  10EC  3449               	retlw	73	;'I'
  1231  10ED  3444               	retlw	68	;'D'
  1232  10EE  3431               	retlw	49	;'1'
  1233  10EF  3430               	retlw	48	;'0'
  1234  10F0  3420               	retlw	32	;' '
  1235  10F1  347E               	retlw	126	;'~'
  1236  10F2  3420               	retlw	32	;' '
  1237  10F3  3453               	retlw	83	;'S'
  1238  10F4  3449               	retlw	73	;'I'
  1239  10F5  3444               	retlw	68	;'D'
  1240  10F6  3430               	retlw	48	;'0'
  1241  10F7  3429               	retlw	41	;')'
  1242  10F8  343E               	retlw	62	;'>'
  1243  10F9  340A               	retlw	10
  1244  10FA  3400               	retlw	0
  1245                           
  1246                           	psect	stringtext13
  1247  10FB                     __pstringtext13:	
  1248  10FB                     STR_30:	
  1249  10FB  345B               	retlw	91	;'['
  1250  10FC  3453               	retlw	83	;'S'
  1251  10FD  3465               	retlw	101	;'e'
  1252  10FE  3474               	retlw	116	;'t'
  1253  10FF  3420               	retlw	32	;' '
  1254  1100  346D               	retlw	109	;'m'
  1255  1101  3461               	retlw	97	;'a'
  1256  1102  3473               	retlw	115	;'s'
  1257  1103  346B               	retlw	107	;'k'
  1258  1104  345D               	retlw	93	;']'
  1259  1105  3420               	retlw	32	;' '
  1260  1106  3440               	retlw	64	;'@'
  1261  1107  346D               	retlw	109	;'m'
  1262  1108  343C               	retlw	60	;'<'
  1263  1109  346E               	retlw	110	;'n'
  1264  110A  343E               	retlw	62	;'>'
  1265  110B  343C               	retlw	60	;'<'
  1266  110C  346D               	retlw	109	;'m'
  1267  110D  3461               	retlw	97	;'a'
  1268  110E  3473               	retlw	115	;'s'
  1269  110F  346B               	retlw	107	;'k'
  1270  1110  3428               	retlw	40	;'('
  1271  1111  3453               	retlw	83	;'S'
  1272  1112  3449               	retlw	73	;'I'
  1273  1113  3444               	retlw	68	;'D'
  1274  1114  3431               	retlw	49	;'1'
  1275  1115  3430               	retlw	48	;'0'
  1276  1116  3420               	retlw	32	;' '
  1277  1117  347E               	retlw	126	;'~'
  1278  1118  3420               	retlw	32	;' '
  1279  1119  3453               	retlw	83	;'S'
  1280  111A  3449               	retlw	73	;'I'
  1281  111B  3444               	retlw	68	;'D'
  1282  111C  3430               	retlw	48	;'0'
  1283  111D  3429               	retlw	41	;')'
  1284  111E  343E               	retlw	62	;'>'
  1285  111F  340A               	retlw	10
  1286  1120  3400               	retlw	0
  1287                           
  1288                           	psect	stringtext14
  1289  1121                     __pstringtext14:	
  1290  1121                     STR_32:	
  1291  1121  345B               	retlw	91	;'['
  1292  1122  3453               	retlw	83	;'S'
  1293  1123  3465               	retlw	101	;'e'
  1294  1124  346E               	retlw	110	;'n'
  1295  1125  3464               	retlw	100	;'d'
  1296  1126  3420               	retlw	32	;' '
  1297  1127  346D               	retlw	109	;'m'
  1298  1128  3465               	retlw	101	;'e'
  1299  1129  3473               	retlw	115	;'s'
  1300  112A  3473               	retlw	115	;'s'
  1301  112B  3461               	retlw	97	;'a'
  1302  112C  3467               	retlw	103	;'g'
  1303  112D  3465               	retlw	101	;'e'
  1304  112E  345D               	retlw	93	;']'
  1305  112F  3420               	retlw	32	;' '
  1306  1130  343C               	retlw	60	;'<'
  1307  1131  346D               	retlw	109	;'m'
  1308  1132  3465               	retlw	101	;'e'
  1309  1133  3473               	retlw	115	;'s'
  1310  1134  3473               	retlw	115	;'s'
  1311  1135  3461               	retlw	97	;'a'
  1312  1136  3467               	retlw	103	;'g'
  1313  1137  3465               	retlw	101	;'e'
  1314  1138  343E               	retlw	62	;'>'
  1315  1139  340A               	retlw	10
  1316  113A  3400               	retlw	0
  1317                           
  1318                           	psect	stringtext15
  1319  113B                     __pstringtext15:	
  1320  113B                     STR_38:	
  1321  113B  340A               	retlw	10
  1322  113C  3455               	retlw	85	;'U'
  1323  113D  346E               	retlw	110	;'n'
  1324  113E  3461               	retlw	97	;'a'
  1325  113F  3462               	retlw	98	;'b'
  1326  1140  346C               	retlw	108	;'l'
  1327  1141  3465               	retlw	101	;'e'
  1328  1142  3420               	retlw	32	;' '
  1329  1143  3474               	retlw	116	;'t'
  1330  1144  346F               	retlw	111	;'o'
  1331  1145  3420               	retlw	32	;' '
  1332  1146  3473               	retlw	115	;'s'
  1333  1147  3465               	retlw	101	;'e'
  1334  1148  346E               	retlw	110	;'n'
  1335  1149  3464               	retlw	100	;'d'
  1336  114A  3420               	retlw	32	;' '
  1337  114B  346D               	retlw	109	;'m'
  1338  114C  3465               	retlw	101	;'e'
  1339  114D  3473               	retlw	115	;'s'
  1340  114E  3473               	retlw	115	;'s'
  1341  114F  3461               	retlw	97	;'a'
  1342  1150  3467               	retlw	103	;'g'
  1343  1151  3465               	retlw	101	;'e'
  1344  1152  340A               	retlw	10
  1345  1153  3400               	retlw	0
  1346                           
  1347                           	psect	stringtext16
  1348  1154                     __pstringtext16:	
  1349  1154                     STR_7:	
  1350  1154  344D               	retlw	77	;'M'
  1351  1155  3465               	retlw	101	;'e'
  1352  1156  3473               	retlw	115	;'s'
  1353  1157  3473               	retlw	115	;'s'
  1354  1158  3461               	retlw	97	;'a'
  1355  1159  3467               	retlw	103	;'g'
  1356  115A  3465               	retlw	101	;'e'
  1357  115B  3420               	retlw	32	;' '
  1358  115C  3472               	retlw	114	;'r'
  1359  115D  3465               	retlw	101	;'e'
  1360  115E  3463               	retlw	99	;'c'
  1361  115F  3465               	retlw	101	;'e'
  1362  1160  3469               	retlw	105	;'i'
  1363  1161  3476               	retlw	118	;'v'
  1364  1162  3465               	retlw	101	;'e'
  1365  1163  3464               	retlw	100	;'d'
  1366  1164  343A               	retlw	58	;':'
  1367  1165  3420               	retlw	32	;' '
  1368  1166  3425               	retlw	37	;'%'
  1369  1167  3464               	retlw	100	;'d'
  1370  1168  342C               	retlw	44	;','
  1371  1169  3425               	retlw	37	;'%'
  1372  116A  3473               	retlw	115	;'s'
  1373  116B  340A               	retlw	10
  1374  116C  3400               	retlw	0
  1375                           
  1376                           	psect	stringtext17
  1377  116D                     __pstringtext17:	
  1378  116D                     STR_26:	
  1379  116D  342D               	retlw	45	;'-'
  1380  116E  342D               	retlw	45	;'-'
  1381  116F  342D               	retlw	45	;'-'
  1382  1170  3420               	retlw	32	;' '
  1383  1171  3455               	retlw	85	;'U'
  1384  1172  3441               	retlw	65	;'A'
  1385  1173  3452               	retlw	82	;'R'
  1386  1174  3454               	retlw	84	;'T'
  1387  1175  3432               	retlw	50	;'2'
  1388  1176  3443               	retlw	67	;'C'
  1389  1177  3441               	retlw	65	;'A'
  1390  1178  344E               	retlw	78	;'N'
  1391  1179  3420               	retlw	32	;' '
  1392  117A  3448               	retlw	72	;'H'
  1393  117B  3445               	retlw	69	;'E'
  1394  117C  344C               	retlw	76	;'L'
  1395  117D  3450               	retlw	80	;'P'
  1396  117E  3420               	retlw	32	;' '
  1397  117F  342D               	retlw	45	;'-'
  1398  1180  342D               	retlw	45	;'-'
  1399  1181  342D               	retlw	45	;'-'
  1400  1182  340A               	retlw	10
  1401  1183  3400               	retlw	0
  1402                           
  1403                           	psect	stringtext18
  1404  1184                     __pstringtext18:	
  1405  1184                     STR_21:	
  1406  1184  3466               	retlw	102	;'f'
  1407  1185  3469               	retlw	105	;'i'
  1408  1186  346C               	retlw	108	;'l'
  1409  1187  3474               	retlw	116	;'t'
  1410  1188  3465               	retlw	101	;'e'
  1411  1189  3472               	retlw	114	;'r'
  1412  118A  3428               	retlw	40	;'('
  1413  118B  3425               	retlw	37	;'%'
  1414  118C  3464               	retlw	100	;'d'
  1415  118D  3429               	retlw	41	;')'
  1416  118E  343A               	retlw	58	;':'
  1417  118F  3420               	retlw	32	;' '
  1418  1190  3425               	retlw	37	;'%'
  1419  1191  3430               	retlw	48	;'0'
  1420  1192  3432               	retlw	50	;'2'
  1421  1193  3478               	retlw	120	;'x'
  1422  1194  3420               	retlw	32	;' '
  1423  1195  3425               	retlw	37	;'%'
  1424  1196  3430               	retlw	48	;'0'
  1425  1197  3432               	retlw	50	;'2'
  1426  1198  3478               	retlw	120	;'x'
  1427  1199  340A               	retlw	10
  1428  119A  3400               	retlw	0
  1429                           
  1430                           	psect	stringtext19
  1431  119B                     __pstringtext19:	
  1432  119B                     STR_34:	
  1433  119B  345B               	retlw	91	;'['
  1434  119C  3453               	retlw	83	;'S'
  1435  119D  3468               	retlw	104	;'h'
  1436  119E  346F               	retlw	111	;'o'
  1437  119F  3477               	retlw	119	;'w'
  1438  11A0  3420               	retlw	32	;' '
  1439  11A1  3474               	retlw	116	;'t'
  1440  11A2  3468               	retlw	104	;'h'
  1441  11A3  3469               	retlw	105	;'i'
  1442  11A4  3473               	retlw	115	;'s'
  1443  11A5  3420               	retlw	32	;' '
  1444  11A6  3468               	retlw	104	;'h'
  1445  11A7  3465               	retlw	101	;'e'
  1446  11A8  346C               	retlw	108	;'l'
  1447  11A9  3470               	retlw	112	;'p'
  1448  11AA  345D               	retlw	93	;']'
  1449  11AB  343A               	retlw	58	;':'
  1450  11AC  3420               	retlw	32	;' '
  1451  11AD  3440               	retlw	64	;'@'
  1452  11AE  3468               	retlw	104	;'h'
  1453  11AF  340A               	retlw	10
  1454  11B0  3400               	retlw	0
  1455                           
  1456                           	psect	stringtext20
  1457  11B1                     __pstringtext20:	
  1458  11B1                     STR_8:	
  1459  11B1  344D               	retlw	77	;'M'
  1460  11B2  3465               	retlw	101	;'e'
  1461  11B3  3473               	retlw	115	;'s'
  1462  11B4  3473               	retlw	115	;'s'
  1463  11B5  3461               	retlw	97	;'a'
  1464  11B6  3467               	retlw	103	;'g'
  1465  11B7  3465               	retlw	101	;'e'
  1466  11B8  3420               	retlw	32	;' '
  1467  11B9  3472               	retlw	114	;'r'
  1468  11BA  3465               	retlw	101	;'e'
  1469  11BB  3463               	retlw	99	;'c'
  1470  11BC  3465               	retlw	101	;'e'
  1471  11BD  3469               	retlw	105	;'i'
  1472  11BE  3476               	retlw	118	;'v'
  1473  11BF  3465               	retlw	101	;'e'
  1474  11C0  3464               	retlw	100	;'d'
  1475  11C1  343A               	retlw	58	;':'
  1476  11C2  3420               	retlw	32	;' '
  1477  11C3  3425               	retlw	37	;'%'
  1478  11C4  3473               	retlw	115	;'s'
  1479  11C5  340A               	retlw	10
  1480  11C6  3400               	retlw	0
  1481                           
  1482                           	psect	stringtext21
  1483  11C7                     __pstringtext21:	
  1484  11C7                     STR_20:	
  1485  11C7  346D               	retlw	109	;'m'
  1486  11C8  3461               	retlw	97	;'a'
  1487  11C9  3473               	retlw	115	;'s'
  1488  11CA  346B               	retlw	107	;'k'
  1489  11CB  3428               	retlw	40	;'('
  1490  11CC  3425               	retlw	37	;'%'
  1491  11CD  3464               	retlw	100	;'d'
  1492  11CE  3429               	retlw	41	;')'
  1493  11CF  343A               	retlw	58	;':'
  1494  11D0  3420               	retlw	32	;' '
  1495  11D1  3425               	retlw	37	;'%'
  1496  11D2  3430               	retlw	48	;'0'
  1497  11D3  3432               	retlw	50	;'2'
  1498  11D4  3478               	retlw	120	;'x'
  1499  11D5  3420               	retlw	32	;' '
  1500  11D6  3425               	retlw	37	;'%'
  1501  11D7  3430               	retlw	48	;'0'
  1502  11D8  3432               	retlw	50	;'2'
  1503  11D9  3478               	retlw	120	;'x'
  1504  11DA  340A               	retlw	10
  1505  11DB  3400               	retlw	0
  1506                           
  1507                           	psect	stringtext22
  1508  11DC                     __pstringtext22:	
  1509  11DC                     STR_14:	
  1510  11DC  3443               	retlw	67	;'C'
  1511  11DD  346F               	retlw	111	;'o'
  1512  11DE  3470               	retlw	112	;'p'
  1513  11DF  3479               	retlw	121	;'y'
  1514  11E0  3469               	retlw	105	;'i'
  1515  11E1  346E               	retlw	110	;'n'
  1516  11E2  3467               	retlw	103	;'g'
  1517  11E3  3420               	retlw	32	;' '
  1518  11E4  3462               	retlw	98	;'b'
  1519  11E5  3475               	retlw	117	;'u'
  1520  11E6  3466               	retlw	102	;'f'
  1521  11E7  3466               	retlw	102	;'f'
  1522  11E8  3465               	retlw	101	;'e'
  1523  11E9  3472               	retlw	114	;'r'
  1524  11EA  343A               	retlw	58	;':'
  1525  11EB  3420               	retlw	32	;' '
  1526  11EC  3425               	retlw	37	;'%'
  1527  11ED  3463               	retlw	99	;'c'
  1528  11EE  340A               	retlw	10
  1529  11EF  3400               	retlw	0
  1530                           
  1531                           	psect	stringtext23
  1532  11F0                     __pstringtext23:	
  1533  11F0                     STR_1:	
  1534  11F0  3453               	retlw	83	;'S'
  1535  11F1  3449               	retlw	73	;'I'
  1536  11F2  3444               	retlw	68	;'D'
  1537  11F3  3420               	retlw	32	;' '
  1538  11F4  3473               	retlw	115	;'s'
  1539  11F5  3465               	retlw	101	;'e'
  1540  11F6  3474               	retlw	116	;'t'
  1541  11F7  343A               	retlw	58	;':'
  1542  11F8  3420               	retlw	32	;' '
  1543  11F9  3425               	retlw	37	;'%'
  1544  11FA  3430               	retlw	48	;'0'
  1545  11FB  3432               	retlw	50	;'2'
  1546  11FC  3478               	retlw	120	;'x'
  1547  11FD  3420               	retlw	32	;' '
  1548  11FE  3425               	retlw	37	;'%'
  1549  11FF  3430               	retlw	48	;'0'
  1550  1200  3432               	retlw	50	;'2'
  1551  1201  3478               	retlw	120	;'x'
  1552  1202  340A               	retlw	10
  1553  1203  3400               	retlw	0
  1554                           
  1555                           	psect	stringtext24
  1556  1204                     __pstringtext24:	
  1557  1204                     STR_37:	
  1558  1204  340A               	retlw	10
  1559  1205  344D               	retlw	77	;'M'
  1560  1206  3465               	retlw	101	;'e'
  1561  1207  3473               	retlw	115	;'s'
  1562  1208  3473               	retlw	115	;'s'
  1563  1209  3461               	retlw	97	;'a'
  1564  120A  3467               	retlw	103	;'g'
  1565  120B  3465               	retlw	101	;'e'
  1566  120C  3420               	retlw	32	;' '
  1567  120D  3473               	retlw	115	;'s'
  1568  120E  3465               	retlw	101	;'e'
  1569  120F  346E               	retlw	110	;'n'
  1570  1210  3474               	retlw	116	;'t'
  1571  1211  343A               	retlw	58	;':'
  1572  1212  3420               	retlw	32	;' '
  1573  1213  3425               	retlw	37	;'%'
  1574  1214  3473               	retlw	115	;'s'
  1575  1215  340A               	retlw	10
  1576  1216  3400               	retlw	0
  1577                           
  1578                           	psect	stringtext25
  1579  1217                     __pstringtext25:	
  1580  1217                     STR_40:	
  1581  1217  3430               	retlw	48	;'0'
  1582  1218  3431               	retlw	49	;'1'
  1583  1219  3432               	retlw	50	;'2'
  1584  121A  3433               	retlw	51	;'3'
  1585  121B  3434               	retlw	52	;'4'
  1586  121C  3435               	retlw	53	;'5'
  1587  121D  3436               	retlw	54	;'6'
  1588  121E  3437               	retlw	55	;'7'
  1589  121F  3438               	retlw	56	;'8'
  1590  1220  3439               	retlw	57	;'9'
  1591  1221  3461               	retlw	97	;'a'
  1592  1222  3462               	retlw	98	;'b'
  1593  1223  3463               	retlw	99	;'c'
  1594  1224  3464               	retlw	100	;'d'
  1595  1225  3465               	retlw	101	;'e'
  1596  1226  3466               	retlw	102	;'f'
  1597  1227  3400               	retlw	0
  1598                           
  1599                           	psect	stringtext26
  1600  1228                     __pstringtext26:	
  1601  1228                     STR_3:	
  1602  1228  3452               	retlw	82	;'R'
  1603  1229  3458               	retlw	88	;'X'
  1604  122A  3442               	retlw	66	;'B'
  1605  122B  3425               	retlw	37	;'%'
  1606  122C  3464               	retlw	100	;'d'
  1607  122D  3453               	retlw	83	;'S'
  1608  122E  3449               	retlw	73	;'I'
  1609  122F  3444               	retlw	68	;'D'
  1610  1230  3448               	retlw	72	;'H'
  1611  1231  343A               	retlw	58	;':'
  1612  1232  3420               	retlw	32	;' '
  1613  1233  3425               	retlw	37	;'%'
  1614  1234  3430               	retlw	48	;'0'
  1615  1235  3432               	retlw	50	;'2'
  1616  1236  3478               	retlw	120	;'x'
  1617  1237  340A               	retlw	10
  1618  1238  3400               	retlw	0
  1619                           
  1620                           	psect	stringtext27
  1621  1239                     __pstringtext27:	
  1622  1239                     STR_15:	
  1623  1239  3454               	retlw	84	;'T'
  1624  123A  3458               	retlw	88	;'X'
  1625  123B  3442               	retlw	66	;'B'
  1626  123C  3425               	retlw	37	;'%'
  1627  123D  3464               	retlw	100	;'d'
  1628  123E  3453               	retlw	83	;'S'
  1629  123F  3449               	retlw	73	;'I'
  1630  1240  3444               	retlw	68	;'D'
  1631  1241  3448               	retlw	72	;'H'
  1632  1242  343A               	retlw	58	;':'
  1633  1243  3420               	retlw	32	;' '
  1634  1244  3425               	retlw	37	;'%'
  1635  1245  3430               	retlw	48	;'0'
  1636  1246  3432               	retlw	50	;'2'
  1637  1247  3478               	retlw	120	;'x'
  1638  1248  340A               	retlw	10
  1639  1249  3400               	retlw	0
  1640                           
  1641                           	psect	stringtext28
  1642  124A                     __pstringtext28:	
  1643  124A                     STR_24:	
  1644  124A  3452               	retlw	82	;'R'
  1645  124B  3458               	retlw	88	;'X'
  1646  124C  3446               	retlw	70	;'F'
  1647  124D  3425               	retlw	37	;'%'
  1648  124E  3464               	retlw	100	;'d'
  1649  124F  3453               	retlw	83	;'S'
  1650  1250  3449               	retlw	73	;'I'
  1651  1251  3444               	retlw	68	;'D'
  1652  1252  3448               	retlw	72	;'H'
  1653  1253  343A               	retlw	58	;':'
  1654  1254  3420               	retlw	32	;' '
  1655  1255  3425               	retlw	37	;'%'
  1656  1256  3430               	retlw	48	;'0'
  1657  1257  3432               	retlw	50	;'2'
  1658  1258  3478               	retlw	120	;'x'
  1659  1259  340A               	retlw	10
  1660  125A  3400               	retlw	0
  1661                           
  1662                           	psect	stringtext29
  1663  125B                     __pstringtext29:	
  1664  125B                     STR_22:	
  1665  125B  3452               	retlw	82	;'R'
  1666  125C  3458               	retlw	88	;'X'
  1667  125D  344D               	retlw	77	;'M'
  1668  125E  3425               	retlw	37	;'%'
  1669  125F  3464               	retlw	100	;'d'
  1670  1260  3453               	retlw	83	;'S'
  1671  1261  3449               	retlw	73	;'I'
  1672  1262  3444               	retlw	68	;'D'
  1673  1263  3448               	retlw	72	;'H'
  1674  1264  343A               	retlw	58	;':'
  1675  1265  3420               	retlw	32	;' '
  1676  1266  3425               	retlw	37	;'%'
  1677  1267  3430               	retlw	48	;'0'
  1678  1268  3432               	retlw	50	;'2'
  1679  1269  3478               	retlw	120	;'x'
  1680  126A  340A               	retlw	10
  1681  126B  3400               	retlw	0
  1682                           
  1683                           	psect	stringtext30
  1684  126C                     __pstringtext30:	
  1685  126C                     STR_4:	
  1686  126C  3452               	retlw	82	;'R'
  1687  126D  3458               	retlw	88	;'X'
  1688  126E  3442               	retlw	66	;'B'
  1689  126F  3425               	retlw	37	;'%'
  1690  1270  3464               	retlw	100	;'d'
  1691  1271  3453               	retlw	83	;'S'
  1692  1272  3449               	retlw	73	;'I'
  1693  1273  3444               	retlw	68	;'D'
  1694  1274  344C               	retlw	76	;'L'
  1695  1275  343A               	retlw	58	;':'
  1696  1276  3420               	retlw	32	;' '
  1697  1277  3425               	retlw	37	;'%'
  1698  1278  3430               	retlw	48	;'0'
  1699  1279  3432               	retlw	50	;'2'
  1700  127A  3478               	retlw	120	;'x'
  1701  127B  340A               	retlw	10
  1702  127C  3400               	retlw	0
  1703                           
  1704                           	psect	stringtext31
  1705  127D                     __pstringtext31:	
  1706  127D                     STR_16:	
  1707  127D  3454               	retlw	84	;'T'
  1708  127E  3458               	retlw	88	;'X'
  1709  127F  3442               	retlw	66	;'B'
  1710  1280  3425               	retlw	37	;'%'
  1711  1281  3464               	retlw	100	;'d'
  1712  1282  3453               	retlw	83	;'S'
  1713  1283  3449               	retlw	73	;'I'
  1714  1284  3444               	retlw	68	;'D'
  1715  1285  344C               	retlw	76	;'L'
  1716  1286  343A               	retlw	58	;':'
  1717  1287  3420               	retlw	32	;' '
  1718  1288  3425               	retlw	37	;'%'
  1719  1289  3430               	retlw	48	;'0'
  1720  128A  3432               	retlw	50	;'2'
  1721  128B  3478               	retlw	120	;'x'
  1722  128C  340A               	retlw	10
  1723  128D  3400               	retlw	0
  1724                           
  1725                           	psect	stringtext32
  1726  128E                     __pstringtext32:	
  1727  128E                     STR_25:	
  1728  128E  3452               	retlw	82	;'R'
  1729  128F  3458               	retlw	88	;'X'
  1730  1290  3446               	retlw	70	;'F'
  1731  1291  3425               	retlw	37	;'%'
  1732  1292  3464               	retlw	100	;'d'
  1733  1293  3453               	retlw	83	;'S'
  1734  1294  3449               	retlw	73	;'I'
  1735  1295  3444               	retlw	68	;'D'
  1736  1296  344C               	retlw	76	;'L'
  1737  1297  343A               	retlw	58	;':'
  1738  1298  3420               	retlw	32	;' '
  1739  1299  3425               	retlw	37	;'%'
  1740  129A  3430               	retlw	48	;'0'
  1741  129B  3432               	retlw	50	;'2'
  1742  129C  3478               	retlw	120	;'x'
  1743  129D  340A               	retlw	10
  1744  129E  3400               	retlw	0
  1745                           
  1746                           	psect	stringtext33
  1747  129F                     __pstringtext33:	
  1748  129F                     STR_23:	
  1749  129F  3452               	retlw	82	;'R'
  1750  12A0  3458               	retlw	88	;'X'
  1751  12A1  344D               	retlw	77	;'M'
  1752  12A2  3425               	retlw	37	;'%'
  1753  12A3  3464               	retlw	100	;'d'
  1754  12A4  3453               	retlw	83	;'S'
  1755  12A5  3449               	retlw	73	;'I'
  1756  12A6  3444               	retlw	68	;'D'
  1757  12A7  344C               	retlw	76	;'L'
  1758  12A8  343A               	retlw	58	;':'
  1759  12A9  3420               	retlw	32	;' '
  1760  12AA  3425               	retlw	37	;'%'
  1761  12AB  3430               	retlw	48	;'0'
  1762  12AC  3432               	retlw	50	;'2'
  1763  12AD  3478               	retlw	120	;'x'
  1764  12AE  340A               	retlw	10
  1765  12AF  3400               	retlw	0
  1766                           
  1767                           	psect	stringtext34
  1768  12B0                     __pstringtext34:	
  1769  12B0                     STR_5:	
  1770  12B0  3452               	retlw	82	;'R'
  1771  12B1  3458               	retlw	88	;'X'
  1772  12B2  3442               	retlw	66	;'B'
  1773  12B3  3425               	retlw	37	;'%'
  1774  12B4  3464               	retlw	100	;'d'
  1775  12B5  3444               	retlw	68	;'D'
  1776  12B6  344C               	retlw	76	;'L'
  1777  12B7  3443               	retlw	67	;'C'
  1778  12B8  343A               	retlw	58	;':'
  1779  12B9  3420               	retlw	32	;' '
  1780  12BA  3425               	retlw	37	;'%'
  1781  12BB  3430               	retlw	48	;'0'
  1782  12BC  3432               	retlw	50	;'2'
  1783  12BD  3478               	retlw	120	;'x'
  1784  12BE  340A               	retlw	10
  1785  12BF  3400               	retlw	0
  1786                           
  1787                           	psect	stringtext35
  1788  12C0                     __pstringtext35:	
  1789  12C0                     STR_6:	
  1790  12C0  3452               	retlw	82	;'R'
  1791  12C1  3458               	retlw	88	;'X'
  1792  12C2  3442               	retlw	66	;'B'
  1793  12C3  3425               	retlw	37	;'%'
  1794  12C4  3464               	retlw	100	;'d'
  1795  12C5  3444               	retlw	68	;'D'
  1796  12C6  3430               	retlw	48	;'0'
  1797  12C7  343A               	retlw	58	;':'
  1798  12C8  3420               	retlw	32	;' '
  1799  12C9  3425               	retlw	37	;'%'
  1800  12CA  3430               	retlw	48	;'0'
  1801  12CB  3432               	retlw	50	;'2'
  1802  12CC  3478               	retlw	120	;'x'
  1803  12CD  340A               	retlw	10
  1804  12CE  3400               	retlw	0
  1805                           
  1806                           	psect	stringtext36
  1807  12CF                     __pstringtext36:	
  1808  12CF                     STR_2:	
  1809  12CF  3443               	retlw	67	;'C'
  1810  12D0  3441               	retlw	65	;'A'
  1811  12D1  344E               	retlw	78	;'N'
  1812  12D2  3453               	retlw	83	;'S'
  1813  12D3  3454               	retlw	84	;'T'
  1814  12D4  3441               	retlw	65	;'A'
  1815  12D5  3454               	retlw	84	;'T'
  1816  12D6  343A               	retlw	58	;':'
  1817  12D7  3420               	retlw	32	;' '
  1818  12D8  3425               	retlw	37	;'%'
  1819  12D9  3430               	retlw	48	;'0'
  1820  12DA  3432               	retlw	50	;'2'
  1821  12DB  3478               	retlw	120	;'x'
  1822  12DC  340A               	retlw	10
  1823  12DD  3400               	retlw	0
  1824                           
  1825                           	psect	stringtext37
  1826  12DE                     __pstringtext37:	
  1827  12DE                     STR_11:	
  1828  12DE  3454               	retlw	84	;'T'
  1829  12DF  3458               	retlw	88	;'X'
  1830  12E0  3442               	retlw	66	;'B'
  1831  12E1  3430               	retlw	48	;'0'
  1832  12E2  3420               	retlw	32	;' '
  1833  12E3  3469               	retlw	105	;'i'
  1834  12E4  3473               	retlw	115	;'s'
  1835  12E5  3420               	retlw	32	;' '
  1836  12E6  3469               	retlw	105	;'i'
  1837  12E7  3464               	retlw	100	;'d'
  1838  12E8  346C               	retlw	108	;'l'
  1839  12E9  3465               	retlw	101	;'e'
  1840  12EA  340A               	retlw	10
  1841  12EB  3400               	retlw	0
  1842                           
  1843                           	psect	stringtext38
  1844  12EC                     __pstringtext38:	
  1845  12EC                     STR_12:	
  1846  12EC  3454               	retlw	84	;'T'
  1847  12ED  3458               	retlw	88	;'X'
  1848  12EE  3442               	retlw	66	;'B'
  1849  12EF  3431               	retlw	49	;'1'
  1850  12F0  3420               	retlw	32	;' '
  1851  12F1  3469               	retlw	105	;'i'
  1852  12F2  3473               	retlw	115	;'s'
  1853  12F3  3420               	retlw	32	;' '
  1854  12F4  3469               	retlw	105	;'i'
  1855  12F5  3464               	retlw	100	;'d'
  1856  12F6  346C               	retlw	108	;'l'
  1857  12F7  3465               	retlw	101	;'e'
  1858  12F8  340A               	retlw	10
  1859  12F9  3400               	retlw	0
  1860                           
  1861                           	psect	stringtext39
  1862  12FA                     __pstringtext39:	
  1863  12FA                     STR_13:	
  1864  12FA  3454               	retlw	84	;'T'
  1865  12FB  3458               	retlw	88	;'X'
  1866  12FC  3442               	retlw	66	;'B'
  1867  12FD  3432               	retlw	50	;'2'
  1868  12FE  3420               	retlw	32	;' '
  1869  12FF  3469               	retlw	105	;'i'
  1870  1300  3473               	retlw	115	;'s'
  1871  1301  3420               	retlw	32	;' '
  1872  1302  3469               	retlw	105	;'i'
  1873  1303  3464               	retlw	100	;'d'
  1874  1304  346C               	retlw	108	;'l'
  1875  1305  3465               	retlw	101	;'e'
  1876  1306  340A               	retlw	10
  1877  1307  3400               	retlw	0
  1878                           
  1879                           	psect	stringtext40
  1880  1308                     __pstringtext40:	
  1881  1308                     STR_17:	
  1882  1308  3452               	retlw	82	;'R'
  1883  1309  3458               	retlw	88	;'X'
  1884  130A  3430               	retlw	48	;'0'
  1885  130B  3449               	retlw	73	;'I'
  1886  130C  3446               	retlw	70	;'F'
  1887  130D  3420               	retlw	32	;' '
  1888  130E  3469               	retlw	105	;'i'
  1889  130F  3473               	retlw	115	;'s'
  1890  1310  3420               	retlw	32	;' '
  1891  1311  346F               	retlw	111	;'o'
  1892  1312  346E               	retlw	110	;'n'
  1893  1313  340A               	retlw	10
  1894  1314  3400               	retlw	0
  1895                           
  1896                           	psect	stringtext41
  1897  1315                     __pstringtext41:	
  1898  1315                     STR_18:	
  1899  1315  3452               	retlw	82	;'R'
  1900  1316  3458               	retlw	88	;'X'
  1901  1317  3431               	retlw	49	;'1'
  1902  1318  3449               	retlw	73	;'I'
  1903  1319  3446               	retlw	70	;'F'
  1904  131A  3420               	retlw	32	;' '
  1905  131B  3469               	retlw	105	;'i'
  1906  131C  3473               	retlw	115	;'s'
  1907  131D  3420               	retlw	32	;' '
  1908  131E  346F               	retlw	111	;'o'
  1909  131F  346E               	retlw	110	;'n'
  1910  1320  340A               	retlw	10
  1911  1321  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext42
  1914  1334                     __pstringtext42:	
  1915  1334                     STR_39:	
  1916  1334  3428               	retlw	40	;'('
  1917  1335  346E               	retlw	110	;'n'
  1918  1336  3475               	retlw	117	;'u'
  1919  1337  346C               	retlw	108	;'l'
  1920  1338  346C               	retlw	108	;'l'
  1921  1339  3429               	retlw	41	;')'
  1922  133A  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext43
  1925  1347                     __pstringtext43:	
  1926  1347                     STR_19:	
  1927  1347  3425               	retlw	37	;'%'
  1928  1348  3463               	retlw	99	;'c'
  1929  1349  3400               	retlw	0
  1930                           
  1931                           	psect	stringtext44
  1932  0000                     __pstringtext44:	
  1933  113C                     
  1934                           ; #config settings
  1935  0000                     
  1936                           	psect	cinit
  1937  07D4                     start_initialization:	
  1938  07D4                     __initialization:	
  1939                           
  1940                           ; Initialize objects allocated to BANK0
  1941  07D4  3013               	movlw	low __pidataBANK0
  1942  07D5  0084               	movwf	4
  1943  07D6  308E               	movlw	(high __pidataBANK0)| (0+128)
  1944  07D7  0085               	movwf	5
  1945  07D8  3065               	movlw	low __pdataBANK0
  1946  07D9  0086               	movwf	6
  1947  07DA  3000               	movlw	high __pdataBANK0
  1948  07DB  0087               	movwf	7
  1949  07DC  3004               	movlw	4
  1950  07DD  318E  2621  3187   	fcall	init_ram
  1951                           
  1952                           ; Initialize objects allocated to BANK1
  1953  07E0  301C               	movlw	low __pidataBANK1
  1954  07E1  0084               	movwf	4
  1955  07E2  308E               	movlw	(high __pidataBANK1)| (0+128)
  1956  07E3  0085               	movwf	5
  1957  07E4  30C1               	movlw	low __pdataBANK1
  1958  07E5  0086               	movwf	6
  1959  07E6  3000               	movlw	high __pdataBANK1
  1960  07E7  0087               	movwf	7
  1961  07E8  3005               	movlw	5
  1962  07E9  318E  2621         	fcall	init_ram
  1963                           
  1964                           ; Clear objects allocated to BANK0
  1965  07EB  01DF               	clrf	__pbssBANK0& (0+127)
  1966  07EC  01E0               	clrf	(__pbssBANK0+1)& (0+127)
  1967  07ED  01E1               	clrf	(__pbssBANK0+2)& (0+127)
  1968  07EE  01E2               	clrf	(__pbssBANK0+3)& (0+127)
  1969  07EF  01E3               	clrf	(__pbssBANK0+4)& (0+127)
  1970  07F0  01E4               	clrf	(__pbssBANK0+5)& (0+127)
  1971                           
  1972                           ; Clear objects allocated to BANK1
  1973  07F1  0021               	movlb	1	; select bank1
  1974  07F2  01B6               	clrf	__pbssBANK1& (0+127)
  1975  07F3  01B7               	clrf	(__pbssBANK1+1)& (0+127)
  1976  07F4  01B8               	clrf	(__pbssBANK1+2)& (0+127)
  1977  07F5  01B9               	clrf	(__pbssBANK1+3)& (0+127)
  1978  07F6  01BA               	clrf	(__pbssBANK1+4)& (0+127)
  1979  07F7  01BB               	clrf	(__pbssBANK1+5)& (0+127)
  1980  07F8  01BC               	clrf	(__pbssBANK1+6)& (0+127)
  1981  07F9  01BD               	clrf	(__pbssBANK1+7)& (0+127)
  1982  07FA  01BE               	clrf	(__pbssBANK1+8)& (0+127)
  1983  07FB  01BF               	clrf	(__pbssBANK1+9)& (0+127)
  1984  07FC  01C0               	clrf	(__pbssBANK1+10)& (0+127)
  1985  07FD                     end_of_initialization:	
  1986                           ;End of C runtime variable initialization code
  1987                           
  1988  07FD                     __end_of__initialization:	
  1989  07FD  0020               	movlb	0
  1990  07FE  3185  2D12         	ljmp	_main	;jump to C main() function
  1991                           
  1992                           	psect	bssBANK0
  1993  005F                     __pbssBANK0:	
  1994  005F                     _mode:	
  1995  005F                     	ds	4
  1996  0063                     _sid:	
  1997  0063                     	ds	2
  1998                           
  1999                           	psect	dataBANK0
  2000  0065                     __pdataBANK0:	
  2001  0065                     can_status_check@F2968:	
  2002  0065                     	ds	2
  2003  0067                     can_send@F2958:	
  2004  0067                     	ds	2
  2005                           
  2006                           	psect	bssBANK1
  2007  00B6                     __pbssBANK1:	
  2008  00B6                     _idx:	
  2009  00B6                     	ds	1
  2010  00B7                     _c:	
  2011  00B7                     	ds	1
  2012  00B8                     _buf:	
  2013  00B8                     	ds	9
  2014                           
  2015                           	psect	dataBANK1
  2016  00C1                     __pdataBANK1:	
  2017  00C1                     main@F2974:	
  2018  00C1                     	ds	5
  2019                           
  2020                           	psect	inittext
  2021  0E21                     init_ram:	
  2022  0E21  00FE               	movwf	126
  2023  0E22                     initloop:	
  2024  0E22  0012               	moviw fsr0++
  2025  0E23  001E               	movwi fsr1++
  2026  0E24  0BFE               	decfsz	126,f
  2027  0E25  2E22               	goto	initloop
  2028  0E26  3400               	retlw	0
  2029                           
  2030                           	psect	cstackBANK1
  2031  00A0                     __pcstackBANK1:	
  2032  00A0                     main@cnf_buf:	
  2033                           
  2034                           ; 5 bytes @ 0x0
  2035  00A0                     	ds	5
  2036  00A5                     _main$433:	
  2037                           
  2038                           ; 2 bytes @ 0x5
  2039  00A5                     	ds	2
  2040  00A7                     _main$434:	
  2041                           
  2042                           ; 2 bytes @ 0x7
  2043  00A7                     	ds	2
  2044  00A9                     main@sid:	
  2045                           
  2046                           ; 1 bytes @ 0x9
  2047  00A9                     	ds	1
  2048  00AA                     main@rc:	
  2049                           
  2050                           ; 1 bytes @ 0xA
  2051  00AA                     	ds	1
  2052  00AB                     main@rc_452:	
  2053                           
  2054                           ; 1 bytes @ 0xB
  2055  00AB                     	ds	1
  2056  00AC                     main@mask:	
  2057                           
  2058                           ; 2 bytes @ 0xC
  2059  00AC                     	ds	2
  2060  00AE                     main@mask_sidh:	
  2061                           
  2062                           ; 1 bytes @ 0xE
  2063  00AE                     	ds	1
  2064  00AF                     main@mask_sidl:	
  2065                           
  2066                           ; 1 bytes @ 0xF
  2067  00AF                     	ds	1
  2068  00B0                     main@mask_buf:	
  2069                           
  2070                           ; 4 bytes @ 0x10
  2071  00B0                     	ds	4
  2072  00B4                     main@cmd:	
  2073                           
  2074                           ; 1 bytes @ 0x14
  2075  00B4                     	ds	1
  2076  00B5                     main@n:	
  2077                           
  2078                           ; 1 bytes @ 0x15
  2079  00B5                     	ds	1
  2080                           
  2081                           	psect	cstackCOMMON
  2082  0070                     __pcstackCOMMON:	
  2083  0070                     ?_isdigit:	
  2084  0070                     ?_PIN_MANAGER_Initialize:	
  2085                           ; 1 bit 
  2086                           
  2087  0070                     ??_PIN_MANAGER_Initialize:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090  0070                     ?_OSCILLATOR_Initialize:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093  0070                     ??_OSCILLATOR_Initialize:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ?_WDT_Initialize:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099  0070                     ??_WDT_Initialize:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102  0070                     ?_SPI_Initialize:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0070                     ??_SPI_Initialize:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_EUSART_Initialize:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ??_EUSART_Initialize:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ??_isdigit:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_SYSTEM_Initialize:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ??_SYSTEM_Initialize:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ?_EUSART_Read:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ??_EUSART_Read:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ?_EUSART_Write:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ??_EUSART_Write:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_putch:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_SPI_Exchange8bit:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ??_SPI_Exchange8bit:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_can_ope_mode:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_can_txf_clear:	
  2148                           ; 1 bytes @ 0x0
  2149                           
  2150  0070                     ?_can_receive:	
  2151                           ; 1 bytes @ 0x0
  2152                           
  2153  0070                     ?_can_status_check:	
  2154                           ; 1 bytes @ 0x0
  2155                           
  2156  0070                     ?_main:	
  2157                           ; 1 bytes @ 0x0
  2158                           
  2159  0070                     ?___wmul:	
  2160                           ; 1 bytes @ 0x0
  2161                           
  2162  0070                     ?___lwdiv:	
  2163                           ; 2 bytes @ 0x0
  2164                           
  2165  0070                     EUSART_Write@txData:	
  2166                           ; 2 bytes @ 0x0
  2167                           
  2168  0070                     SPI_Exchange8bit@data:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     _isdigit$683:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     ___wmul@multiplier:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     ___lwdiv@divisor:	
  2178                           ; 2 bytes @ 0x0
  2179                           
  2180                           
  2181                           ; 2 bytes @ 0x0
  2182  0070                     	ds	1
  2183  0071                     ??_putch:	
  2184  0071                     ?_SPI_Exchange8bitBuffer:	
  2185                           ; 1 bytes @ 0x1
  2186                           
  2187  0071                     putch@txData:	
  2188                           ; 1 bytes @ 0x1
  2189                           
  2190  0071                     SPI_Exchange8bitBuffer@bufLen:	
  2191                           ; 1 bytes @ 0x1
  2192                           
  2193  0071                     isdigit@c:	
  2194                           ; 1 bytes @ 0x1
  2195                           
  2196                           
  2197                           ; 1 bytes @ 0x1
  2198  0071                     	ds	1
  2199  0072                     SPI_Exchange8bitBuffer@dataOut:	
  2200  0072                     ___wmul@multiplicand:	
  2201                           ; 1 bytes @ 0x2
  2202                           
  2203  0072                     ___lwdiv@dividend:	
  2204                           ; 2 bytes @ 0x2
  2205                           
  2206                           
  2207                           ; 2 bytes @ 0x2
  2208  0072                     	ds	1
  2209  0073                     ??_SPI_Exchange8bitBuffer:	
  2210                           
  2211                           ; 1 bytes @ 0x3
  2212  0073                     	ds	1
  2213  0074                     ??___wmul:	
  2214  0074                     ??___lwdiv:	
  2215                           ; 1 bytes @ 0x4
  2216                           
  2217  0074                     ___wmul@product:	
  2218                           ; 1 bytes @ 0x4
  2219                           
  2220                           
  2221                           ; 2 bytes @ 0x4
  2222  0074                     	ds	1
  2223  0075                     ___lwdiv@quotient:	
  2224                           
  2225                           ; 2 bytes @ 0x5
  2226  0075                     	ds	1
  2227  0076                     ?_atoi:	
  2228  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2229                           ; 2 bytes @ 0x6
  2230                           
  2231                           
  2232                           ; 1 bytes @ 0x6
  2233  0076                     	ds	1
  2234  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2235  0077                     ___lwdiv@counter:	
  2236                           ; 1 bytes @ 0x7
  2237                           
  2238                           
  2239                           ; 1 bytes @ 0x7
  2240  0077                     	ds	1
  2241  0078                     ??_atoi:	
  2242  0078                     ?_SPI_exchange:	
  2243                           ; 1 bytes @ 0x8
  2244                           
  2245  0078                     ?___lwmod:	
  2246                           ; 1 bytes @ 0x8
  2247                           
  2248  0078                     SPI_exchange@len:	
  2249                           ; 2 bytes @ 0x8
  2250                           
  2251  0078                     ___lwmod@divisor:	
  2252                           ; 1 bytes @ 0x8
  2253                           
  2254                           
  2255                           ; 2 bytes @ 0x8
  2256  0078                     	ds	1
  2257  0079                     ??_SPI_exchange:	
  2258                           
  2259                           ; 1 bytes @ 0x9
  2260  0079                     	ds	1
  2261  007A                     atoi@sign:	
  2262  007A                     ___lwmod@dividend:	
  2263                           ; 1 bytes @ 0xA
  2264                           
  2265                           
  2266                           ; 2 bytes @ 0xA
  2267  007A                     	ds	1
  2268  007B                     atoi@a:	
  2269                           
  2270                           ; 2 bytes @ 0xB
  2271  007B                     	ds	1
  2272  007C                     ??___lwmod:	
  2273  007C                     SPI_exchange@bytes_written:	
  2274                           ; 1 bytes @ 0xC
  2275                           
  2276                           
  2277                           ; 1 bytes @ 0xC
  2278  007C                     	ds	1
  2279  007D                     SPI_exchange@buf:	
  2280  007D                     atoi@s:	
  2281                           ; 1 bytes @ 0xD
  2282                           
  2283  007D                     ___lwmod@counter:	
  2284                           ; 1 bytes @ 0xD
  2285                           
  2286                           
  2287                           ; 1 bytes @ 0xD
  2288  007D                     	ds	1
  2289                           
  2290                           	psect	cstackBANK0
  2291  0020                     __pcstackBANK0:	
  2292  0020                     ??_can_txf_clear:	
  2293  0020                     ?_printf:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0020                     printf@f:	
  2297                           ; 2 bytes @ 0x0
  2298                           
  2299                           
  2300                           ; 2 bytes @ 0x0
  2301  0020                     	ds	2
  2302  0022                     can_txf_clear@n:	
  2303                           
  2304                           ; 1 bytes @ 0x2
  2305  0022                     	ds	1
  2306  0023                     can_txf_clear@mask:	
  2307                           
  2308                           ; 1 bytes @ 0x3
  2309  0023                     	ds	1
  2310  0024                     can_txf_clear@bytes_written:	
  2311                           
  2312                           ; 1 bytes @ 0x4
  2313  0024                     	ds	1
  2314  0025                     can_txf_clear@can_int_flag:	
  2315                           
  2316                           ; 4 bytes @ 0x5
  2317  0025                     	ds	3
  2318  0028                     ??_printf:	
  2319                           
  2320                           ; 1 bytes @ 0x8
  2321  0028                     	ds	4
  2322  002C                     printf@idx:	
  2323                           
  2324                           ; 1 bytes @ 0xC
  2325  002C                     	ds	1
  2326  002D                     printf@prec:	
  2327                           
  2328                           ; 1 bytes @ 0xD
  2329  002D                     	ds	1
  2330  002E                     printf@cp:	
  2331                           
  2332                           ; 2 bytes @ 0xE
  2333  002E                     	ds	2
  2334  0030                     printf@len:	
  2335                           
  2336                           ; 2 bytes @ 0x10
  2337  0030                     	ds	2
  2338  0032                     printf@ap:	
  2339                           
  2340                           ; 1 bytes @ 0x12
  2341  0032                     	ds	1
  2342  0033                     printf@val:	
  2343                           
  2344                           ; 2 bytes @ 0x13
  2345  0033                     	ds	2
  2346  0035                     printf@flag:	
  2347                           
  2348                           ; 1 bytes @ 0x15
  2349  0035                     	ds	1
  2350  0036                     printf@width:	
  2351                           
  2352                           ; 2 bytes @ 0x16
  2353  0036                     	ds	2
  2354  0038                     printf@c:	
  2355                           
  2356                           ; 1 bytes @ 0x18
  2357  0038                     	ds	1
  2358  0039                     ?_set_sid:	
  2359  0039                     ??_can_ope_mode:	
  2360                           ; 1 bytes @ 0x19
  2361                           
  2362  0039                     ??_can_receive:	
  2363                           ; 1 bytes @ 0x19
  2364                           
  2365  0039                     ?_can_send:	
  2366                           ; 1 bytes @ 0x19
  2367                           
  2368  0039                     can_send@dlc:	
  2369                           ; 1 bytes @ 0x19
  2370                           
  2371  0039                     set_sid@can_node:	
  2372                           ; 1 bytes @ 0x19
  2373                           
  2374                           
  2375                           ; 2 bytes @ 0x19
  2376  0039                     	ds	1
  2377  003A                     ??_can_send:	
  2378                           
  2379                           ; 1 bytes @ 0x1A
  2380  003A                     	ds	1
  2381  003B                     ??_set_sid:	
  2382  003B                     can_ope_mode@ope_mode:	
  2383                           ; 1 bytes @ 0x1B
  2384                           
  2385                           
  2386                           ; 1 bytes @ 0x1B
  2387  003B                     	ds	1
  2388  003C                     can_ope_mode@bytes_written:	
  2389                           
  2390                           ; 1 bytes @ 0x1C
  2391  003C                     	ds	1
  2392  003D                     can_ope_mode@can_ctrl_buf:	
  2393                           
  2394                           ; 3 bytes @ 0x1D
  2395  003D                     	ds	1
  2396  003E                     can_receive@bytes_read:	
  2397  003E                     can_send@tx_buf:	
  2398                           ; 1 bytes @ 0x1E
  2399                           
  2400                           
  2401                           ; 14 bytes @ 0x1E
  2402  003E                     	ds	1
  2403  003F                     set_sid@sidh:	
  2404  003F                     can_receive@rx_buf:	
  2405                           ; 1 bytes @ 0x1F
  2406                           
  2407                           
  2408                           ; 15 bytes @ 0x1F
  2409  003F                     	ds	1
  2410  0040                     set_sid@sidl:	
  2411                           
  2412                           ; 1 bytes @ 0x20
  2413  0040                     	ds	12
  2414  004C                     can_send@can_status_buf:	
  2415                           
  2416                           ; 2 bytes @ 0x2C
  2417  004C                     	ds	2
  2418  004E                     can_receive@dlc:	
  2419  004E                     can_send@buf:	
  2420                           ; 1 bytes @ 0x2E
  2421                           
  2422                           
  2423                           ; 1 bytes @ 0x2E
  2424  004E                     	ds	1
  2425  004F                     can_send@len:	
  2426  004F                     can_receive@sid:	
  2427                           ; 1 bytes @ 0x2F
  2428                           
  2429                           
  2430                           ; 2 bytes @ 0x2F
  2431  004F                     	ds	1
  2432  0050                     can_send@bytes_written:	
  2433                           
  2434                           ; 1 bytes @ 0x30
  2435  0050                     	ds	1
  2436  0051                     can_receive@rx_buf_ptr:	
  2437  0051                     can_send@txb_ctrl_buf:	
  2438                           ; 1 bytes @ 0x31
  2439                           
  2440                           
  2441                           ; 1 bytes @ 0x31
  2442  0051                     	ds	1
  2443  0052                     can_receive@n:	
  2444  0052                     can_send@status:	
  2445                           ; 1 bytes @ 0x32
  2446                           
  2447                           
  2448                           ; 1 bytes @ 0x32
  2449  0052                     	ds	1
  2450  0053                     ??_can_status_check:	
  2451  0053                     can_send@debug_buf:	
  2452                           ; 1 bytes @ 0x33
  2453                           
  2454                           
  2455                           ; 3 bytes @ 0x33
  2456  0053                     	ds	2
  2457  0055                     can_status_check@bytes_written:	
  2458                           
  2459                           ; 1 bytes @ 0x35
  2460  0055                     	ds	1
  2461  0056                     can_send@i:	
  2462  0056                     can_status_check@can_status_buf:	
  2463                           ; 1 bytes @ 0x36
  2464                           
  2465                           
  2466                           ; 2 bytes @ 0x36
  2467  0056                     	ds	1
  2468  0057                     can_send@n:	
  2469                           
  2470                           ; 1 bytes @ 0x37
  2471  0057                     	ds	1
  2472  0058                     can_status_check@status:	
  2473                           
  2474                           ; 1 bytes @ 0x38
  2475  0058                     	ds	1
  2476  0059                     ??_main:	
  2477                           
  2478                           ; 1 bytes @ 0x39
  2479  0059                     	ds	6
  2480                           
  2481                           	psect	maintext
  2482  0512                     __pmaintext:	
  2483 ;;
  2484 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2485 ;;
  2486 ;; *************** function _main *****************
  2487 ;; Defined at:
  2488 ;;		line 246 in file "main.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  rc              1   10[BANK1 ] unsigned char 
  2493 ;;  mask_buf        4   16[BANK1 ] unsigned char [4]
  2494 ;;  mask            2   12[BANK1 ] unsigned int 
  2495 ;;  n               1   21[BANK1 ] unsigned char 
  2496 ;;  cmd             1   20[BANK1 ] unsigned char 
  2497 ;;  mask_sidl       1   15[BANK1 ] unsigned char 
  2498 ;;  mask_sidh       1   14[BANK1 ] unsigned char 
  2499 ;;  sid             1    9[BANK1 ] unsigned char 
  2500 ;;  rc              1   11[BANK1 ] unsigned char 
  2501 ;;  cnf_buf         5    0[BANK1 ] unsigned char [5]
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  1    wreg      void 
  2504 ;; Registers used:
  2505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : B1F/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2512 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2513 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2514 ;;      Totals:         0       6      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;Total ram usage:       28 bytes
  2516 ;; Hardware stack levels required when called:    5
  2517 ;; This function calls:
  2518 ;;		_EUSART_Read
  2519 ;;		_SPI_exchange
  2520 ;;		_SYSTEM_Initialize
  2521 ;;		_atoi
  2522 ;;		_can_ope_mode
  2523 ;;		_can_send
  2524 ;;		_can_status_check
  2525 ;;		_printf
  2526 ;;		_set_sid
  2527 ;; This function is called by:
  2528 ;;		Startup code after reset
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           
  2533                           ;psect for function _main
  2534  0512                     _main:	
  2535                           
  2536                           ;main.c: 248: SYSTEM_Initialize();
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2540  0512  3180  2006  3185   	fcall	_SYSTEM_Initialize
  2541                           
  2542                           ;main.c: 253: set_sid(0);
  2543  0515  3000               	movlw	0
  2544  0516  0020               	movlb	0	; select bank0
  2545  0517  00B9               	movwf	set_sid@can_node
  2546  0518  00BA               	movwf	set_sid@can_node+1
  2547  0519  318F  2738  3185   	fcall	_set_sid
  2548                           
  2549                           ;main.c: 255: uint8_t cnf_buf[5] = {0b00000010, 0x28, 0b00000101, 0b11110001, 0b01000001
      +                          };
  2550  051C  30C1               	movlw	low main@F2974
  2551  051D  0086               	movwf	6
  2552  051E  3000               	movlw	high main@F2974
  2553  051F  0087               	movwf	7
  2554  0520  30A0               	movlw	low main@cnf_buf
  2555  0521  0084               	movwf	4
  2556  0522  3000               	movlw	high main@cnf_buf
  2557  0523  0085               	movwf	5
  2558  0524  3005               	movlw	5
  2559  0525  0020               	movlb	0	; select bank0
  2560  0526  00D9               	movwf	??_main
  2561  0527                     u2240:	
  2562  0527  0016               	moviw fsr1++
  2563  0528  001A               	movwi fsr0++
  2564  0529  0BD9               	decfsz	??_main,f
  2565  052A  2D27               	goto	u2240
  2566                           
  2567                           ;main.c: 256: SPI_exchange(cnf_buf, 5);
  2568  052B  3005               	movlw	5
  2569  052C  00D9               	movwf	??_main
  2570  052D  0859               	movf	??_main,w
  2571  052E  00F8               	movwf	SPI_exchange@len
  2572  052F  30A0               	movlw	(low (main@cnf_buf| 0))& (0+255)
  2573  0530  318E  2669  3185   	fcall	_SPI_exchange
  2574                           
  2575                           ;main.c: 258: mode.debug = 0;
  2576  0533  0020               	movlb	0	; select bank0
  2577  0534  01DF               	clrf	_mode
  2578                           
  2579                           ;main.c: 259: mode.verbose = 0;
  2580  0535  01E0               	clrf	_mode+1
  2581                           
  2582                           ;main.c: 260: mode.ope_mode = 0b00000000;
  2583  0536  01E1               	clrf	_mode+2
  2584                           
  2585                           ;main.c: 261: can_ope_mode(0b00000000);
  2586  0537  3000               	movlw	0
  2587  0538  318F  2773  3185   	fcall	_can_ope_mode
  2588  053B  2D8D               	goto	L7
  2589  053C                     l2238:	
  2590                           ;main.c: 287: case 'i':
  2591                           
  2592                           ;main.c: 280: uint8_t sid;
  2593                           ;main.c: 281: uint8_t n;
  2594                           ;main.c: 282: uint16_t mask;
  2595                           ;main.c: 283: uint8_t mask_sidh;
  2596                           ;main.c: 284: uint8_t mask_sidl;
  2597                           ;main.c: 285: uint8_t mask_buf[4];
  2598                           ;main.c: 286: switch(cmd) {
  2599                           
  2600                           ;main.c: 262: mode.with_sid = 0;
  2601                           
  2602                           
  2603                           ;main.c: 288: sid = atoi(&buf[2]);
  2604  053C  30BA               	movlw	(low ((_buf| 0+2)))& (0+255)
  2605  053D  3180  2063  3185   	fcall	_atoi
  2606  0540  0876               	movf	?_atoi,w
  2607  0541  0020               	movlb	0	; select bank0
  2608  0542  00D9               	movwf	??_main
  2609  0543  0859               	movf	??_main,w
  2610  0544  0021               	movlb	1	; select bank1
  2611  0545  00A9               	movwf	main@sid^(0+128)
  2612                           
  2613                           ;main.c: 289: set_sid(sid);
  2614  0546  0829               	movf	main@sid^(0+128),w
  2615  0547  0020               	movlb	0	; select bank0
  2616  0548  00D9               	movwf	??_main
  2617  0549  01DA               	clrf	??_main+1
  2618  054A  0859               	movf	??_main,w
  2619  054B  00B9               	movwf	set_sid@can_node
  2620  054C  085A               	movf	??_main+1,w
  2621  054D  00BA               	movwf	set_sid@can_node+1
  2622  054E  318F  2738  3185   	fcall	_set_sid
  2623                           
  2624                           ;main.c: 290: break;
  2625  0551  2F16               	goto	L3
  2626  0552                     l2242:	
  2627                           ;main.c: 291: case 'v':
  2628                           
  2629                           
  2630                           ;main.c: 292: if (buf[2] == 'd') {
  2631  0552  3064               	movlw	100
  2632  0553  0021               	movlb	1	; select bank1
  2633  0554  063A               	xorwf	(_buf^(0+128)+2),w
  2634  0555  1D03               	btfss	3,2
  2635  0556  2D5B               	goto	l2246
  2636                           
  2637                           ;main.c: 293: mode.debug = 1;
  2638  0557  0020               	movlb	0	; select bank0
  2639  0558  01DF               	clrf	_mode
  2640  0559  0ADF               	incf	_mode,f
  2641  055A  2D62               	goto	l2250
  2642  055B                     l2246:	
  2643                           ;main.c: 295: } else if (buf[2] == 'v') {
  2644                           
  2645                           ;main.c: 294: mode.verbose = 1;
  2646                           
  2647  055B  3076               	movlw	118
  2648  055C  0021               	movlb	1	; select bank1
  2649  055D  063A               	xorwf	(_buf^(0+128)+2),w
  2650  055E  1D03               	btfss	3,2
  2651  055F  2D65               	goto	l2252
  2652                           
  2653                           ;main.c: 296: mode.debug = 0;
  2654  0560  0020               	movlb	0	; select bank0
  2655  0561  01DF               	clrf	_mode
  2656  0562                     l2250:	
  2657                           
  2658                           ;main.c: 297: mode.verbose = 1;
  2659  0562  01E0               	clrf	_mode+1
  2660  0563  0AE0               	incf	_mode+1,f
  2661                           
  2662                           ;main.c: 298: } else if (buf[2] == 'n') {
  2663  0564  2F16               	goto	L3
  2664  0565                     l2252:	
  2665  0565  306E               	movlw	110
  2666  0566  0021               	movlb	1	; select bank1
  2667  0567  063A               	xorwf	(_buf^(0+128)+2),w
  2668  0568  1D03               	btfss	3,2
  2669  0569  2F16               	goto	L3
  2670                           
  2671                           ;main.c: 299: mode.debug = 0;
  2672  056A  0020               	movlb	0	; select bank0
  2673  056B  01DF               	clrf	_mode
  2674                           
  2675                           ;main.c: 300: mode.verbose = 0;
  2676  056C  01E0               	clrf	_mode+1
  2677                           
  2678                           ;main.c: 301: }
  2679                           ;main.c: 302: break;
  2680  056D  2F16               	goto	L3
  2681  056E                     l2256:	
  2682                           ;main.c: 303: case 'o':
  2683                           
  2684                           
  2685                           ;main.c: 304: if (buf[2] == 'l') {
  2686  056E  306C               	movlw	108
  2687  056F  0021               	movlb	1	; select bank1
  2688  0570  063A               	xorwf	(_buf^(0+128)+2),w
  2689  0571  1D03               	btfss	3,2
  2690  0572  2D7A               	goto	l2262
  2691                           
  2692                           ;main.c: 305: mode.ope_mode = 0b01000000;
  2693  0573  3040               	movlw	64
  2694  0574  0020               	movlb	0	; select bank0
  2695  0575  00D9               	movwf	??_main
  2696  0576  0859               	movf	??_main,w
  2697  0577  00E1               	movwf	_mode+2
  2698                           
  2699                           ;main.c: 306: can_ope_mode(0b01000000);
  2700  0578  3040               	movlw	64
  2701  0579  2D82               	goto	L4
  2702  057A                     l2262:	
  2703                           ;main.c: 307: } else if (buf[2] == 'n') {
  2704                           
  2705  057A  306E               	movlw	110
  2706  057B  0021               	movlb	1	; select bank1
  2707  057C  063A               	xorwf	(_buf^(0+128)+2),w
  2708  057D  1D03               	btfss	3,2
  2709  057E  2D85               	goto	l2268
  2710                           
  2711                           ;main.c: 308: mode.ope_mode = 0b00000000;
  2712  057F  0020               	movlb	0	; select bank0
  2713  0580  01E1               	clrf	_mode+2
  2714                           
  2715                           ;main.c: 309: can_ope_mode(0b00000000);
  2716  0581  3000               	movlw	0
  2717  0582                     L4:	
  2718  0582  318F  2773  3185   	fcall	_can_ope_mode
  2719  0585                     l2268:	
  2720                           
  2721                           ;main.c: 310: }
  2722                           ;main.c: 311: if (buf[3] != '\0') {
  2723  0585  0021               	movlb	1	; select bank1
  2724  0586  083B               	movf	(_buf^(0+128)+3),w
  2725  0587  1903               	btfsc	3,2
  2726  0588  2F16               	goto	L3
  2727                           
  2728                           ;main.c: 312: if (buf[3] == 'n') {
  2729  0589  306E               	movlw	110
  2730  058A  063B               	xorwf	(_buf^(0+128)+3),w
  2731  058B  1D03               	btfss	3,2
  2732  058C  2D90               	goto	l2274
  2733  058D                     L7:	
  2734                           
  2735                           ;main.c: 313: mode.with_sid = 0;
  2736  058D  0020               	movlb	0	; select bank0
  2737  058E  01E2               	clrf	_mode+3
  2738                           
  2739                           ;main.c: 314: } else if (buf[3] == 's') {
  2740  058F  2F16               	goto	L3
  2741  0590                     l2274:	
  2742  0590  3073               	movlw	115
  2743  0591  0021               	movlb	1	; select bank1
  2744  0592  063B               	xorwf	(_buf^(0+128)+3),w
  2745  0593  1D03               	btfss	3,2
  2746  0594  2F16               	goto	L3
  2747                           
  2748                           ;main.c: 315: mode.with_sid = 1;
  2749  0595  0020               	movlb	0	; select bank0
  2750  0596  01E2               	clrf	_mode+3
  2751  0597  0AE2               	incf	_mode+3,f
  2752                           
  2753                           ;main.c: 316: }
  2754                           ;main.c: 317: }
  2755                           ;main.c: 318: break;
  2756  0598  2F16               	goto	L3
  2757  0599                     l2278:	
  2758                           ;main.c: 319: case 'm':
  2759                           
  2760                           
  2761                           ;main.c: 320: case 'f':
  2762                           ;main.c: 321: can_ope_mode(0b10000000);
  2763  0599  3080               	movlw	128
  2764  059A  318F  2773  3185   	fcall	_can_ope_mode
  2765                           
  2766                           ;main.c: 322: n = buf[2] - 0x30;
  2767  059D  0021               	movlb	1	; select bank1
  2768  059E  083A               	movf	(_buf^(0+128)+2),w
  2769  059F  3ED0               	addlw	208
  2770  05A0  0020               	movlb	0	; select bank0
  2771  05A1  00D9               	movwf	??_main
  2772  05A2  0859               	movf	??_main,w
  2773  05A3  0021               	movlb	1	; select bank1
  2774  05A4  00B5               	movwf	main@n^(0+128)
  2775                           
  2776                           ;main.c: 323: mask = atoi(&buf[3]);
  2777  05A5  30BB               	movlw	(low ((_buf| 0+3)))& (0+255)
  2778  05A6  3180  2063  3185   	fcall	_atoi
  2779  05A9  0877               	movf	?_atoi+1,w
  2780  05AA  0021               	movlb	1	; select bank1
  2781  05AB  00AD               	movwf	(main@mask+1)^(0+128)
  2782  05AC  0876               	movf	?_atoi,w
  2783  05AD  00AC               	movwf	main@mask^(0+128)
  2784                           
  2785                           ;main.c: 324: mask_sidh = (uint8_t)((mask >> 3) & 0x00ff);
  2786  05AE  082D               	movf	(main@mask+1)^(0+128),w
  2787  05AF  0020               	movlb	0	; select bank0
  2788  05B0  00DA               	movwf	??_main+1
  2789  05B1  0021               	movlb	1	; select bank1
  2790  05B2  082C               	movf	main@mask^(0+128),w
  2791  05B3  0020               	movlb	0	; select bank0
  2792  05B4  00D9               	movwf	??_main
  2793  05B5  36DA               	lsrf	??_main+1,f
  2794  05B6  0CD9               	rrf	??_main,f
  2795  05B7  36DA               	lsrf	??_main+1,f
  2796  05B8  0CD9               	rrf	??_main,f
  2797  05B9  36DA               	lsrf	??_main+1,f
  2798  05BA  0CD9               	rrf	??_main,f
  2799  05BB  0859               	movf	??_main,w
  2800  05BC  00DB               	movwf	??_main+2
  2801  05BD  085B               	movf	??_main+2,w
  2802  05BE  0021               	movlb	1	; select bank1
  2803  05BF  00AE               	movwf	main@mask_sidh^(0+128)
  2804                           
  2805                           ;main.c: 325: mask_sidl = (uint8_t)(((mask & 0x0007) << 5) & 0x00ff);
  2806  05C0  082C               	movf	main@mask^(0+128),w
  2807  05C1  3907               	andlw	7
  2808  05C2  0020               	movlb	0	; select bank0
  2809  05C3  00D9               	movwf	??_main
  2810  05C4  3004               	movlw	4
  2811  05C5                     u2375:	
  2812  05C5  35D9               	lslf	??_main,f
  2813  05C6  3EFF               	addlw	-1
  2814  05C7  1D03               	skipz
  2815  05C8  2DC5               	goto	u2375
  2816  05C9  3559               	lslf	??_main,w
  2817  05CA  00DA               	movwf	??_main+1
  2818  05CB  085A               	movf	??_main+1,w
  2819  05CC  0021               	movlb	1	; select bank1
  2820  05CD  00AF               	movwf	main@mask_sidl^(0+128)
  2821                           
  2822                           ;main.c: 326: if (mode.debug) {
  2823  05CE  0020               	movlb	0	; select bank0
  2824  05CF  085F               	movf	_mode,w
  2825  05D0  1903               	btfsc	3,2
  2826  05D1  2DFF               	goto	l2296
  2827                           
  2828                           ;main.c: 327: if (cmd == 'm') {
  2829  05D2  306D               	movlw	109
  2830  05D3  0021               	movlb	1	; select bank1
  2831  05D4  0634               	xorwf	main@cmd^(0+128),w
  2832  05D5  1D03               	btfss	3,2
  2833  05D6  2DDC               	goto	l2294
  2834                           
  2835                           ;main.c: 328: printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2836  05D7  30C7               	movlw	low (STR_20| (0+32768))
  2837  05D8  0020               	movlb	0	; select bank0
  2838  05D9  00A0               	movwf	printf@f
  2839  05DA  3091               	movlw	high (STR_20| (0+32768))
  2840  05DB  2DE0               	goto	L5
  2841  05DC                     l2294:	
  2842                           ;main.c: 329: } else {
  2843                           
  2844                           
  2845                           ;main.c: 330: printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_sidl);
  2846  05DC  3084               	movlw	low (STR_21| (0+32768))
  2847  05DD  0020               	movlb	0	; select bank0
  2848  05DE  00A0               	movwf	printf@f
  2849  05DF  3091               	movlw	high (STR_21| (0+32768))
  2850  05E0                     L5:	
  2851  05E0  00A1               	movwf	printf@f+1
  2852  05E1  0021               	movlb	1	; select bank1
  2853  05E2  0835               	movf	main@n^(0+128),w
  2854  05E3  0020               	movlb	0	; select bank0
  2855  05E4  00D9               	movwf	??_main
  2856  05E5  01DA               	clrf	??_main+1
  2857  05E6  0859               	movf	??_main,w
  2858  05E7  00A2               	movwf	?_printf+2
  2859  05E8  085A               	movf	??_main+1,w
  2860  05E9  00A3               	movwf	?_printf+3
  2861  05EA  0021               	movlb	1	; select bank1
  2862  05EB  082E               	movf	main@mask_sidh^(0+128),w
  2863  05EC  0020               	movlb	0	; select bank0
  2864  05ED  00DB               	movwf	??_main+2
  2865  05EE  01DC               	clrf	??_main+3
  2866  05EF  085B               	movf	??_main+2,w
  2867  05F0  00A4               	movwf	?_printf+4
  2868  05F1  085C               	movf	??_main+3,w
  2869  05F2  00A5               	movwf	?_printf+5
  2870  05F3  0021               	movlb	1	; select bank1
  2871  05F4  082F               	movf	main@mask_sidl^(0+128),w
  2872  05F5  0020               	movlb	0	; select bank0
  2873  05F6  00DD               	movwf	??_main+4
  2874  05F7  01DE               	clrf	??_main+5
  2875  05F8  085D               	movf	??_main+4,w
  2876  05F9  00A6               	movwf	?_printf+6
  2877  05FA  085E               	movf	??_main+5,w
  2878  05FB  00A7               	movwf	?_printf+7
  2879  05FC  3182  22D7  3185   	fcall	_printf
  2880  05FF                     l2296:	
  2881                           
  2882                           ;main.c: 331: }
  2883                           ;main.c: 332: }
  2884                           ;main.c: 333: mask_buf[0] = 0b00000010;
  2885  05FF  3002               	movlw	2
  2886  0600  0020               	movlb	0	; select bank0
  2887  0601  00D9               	movwf	??_main
  2888  0602  0859               	movf	??_main,w
  2889  0603  0021               	movlb	1	; select bank1
  2890  0604  00B0               	movwf	main@mask_buf^(0+128)
  2891                           
  2892                           ;main.c: 334: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2893  0605  306D               	movlw	109
  2894  0606  0634               	xorwf	main@cmd^(0+128),w
  2895  0607  1903               	btfsc	3,2
  2896  0608  2E0E               	goto	l2302
  2897  0609  0835               	movf	main@n^(0+128),w
  2898  060A  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2899  060B  0084               	movwf	4
  2900  060C  3093               	movlw	high (_rxfnsidh| (0+32768))
  2901  060D  2E12               	goto	L1
  2902  060E                     l2302:	
  2903  060E  0835               	movf	main@n^(0+128),w
  2904  060F  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2905  0610  0084               	movwf	4
  2906  0611  3093               	movlw	high (_rxmnsidh| (0+32768))
  2907  0612                     L1:	
  2908  0612  1803               	skipnc
  2909  0613  3E01               	addlw	1
  2910  0614  0085               	movwf	5
  2911  0615  0800               	movf	0,w	;code access
  2912  0616  0020               	movlb	0	; select bank0
  2913  0617  00D9               	movwf	??_main
  2914  0618  01DA               	clrf	??_main+1
  2915  0619  0859               	movf	??_main,w
  2916  061A  0021               	movlb	1	; select bank1
  2917  061B  00A5               	movwf	_main$433^(0+128)
  2918  061C  0020               	movlb	0	; select bank0
  2919  061D  085A               	movf	??_main+1,w
  2920  061E  0021               	movlb	1	; select bank1
  2921  061F  00A6               	movwf	(_main$433+1)^(0+128)
  2922  0620  0825               	movf	_main$433^(0+128),w
  2923  0621  0020               	movlb	0	; select bank0
  2924  0622  00D9               	movwf	??_main
  2925  0623  0859               	movf	??_main,w
  2926  0624  0021               	movlb	1	; select bank1
  2927  0625  00B1               	movwf	(main@mask_buf^(0+128)+1)
  2928                           
  2929                           ;main.c: 335: mask_buf[2] = mask_sidh;
  2930  0626  082E               	movf	main@mask_sidh^(0+128),w
  2931  0627  0020               	movlb	0	; select bank0
  2932  0628  00D9               	movwf	??_main
  2933  0629  0859               	movf	??_main,w
  2934  062A  0021               	movlb	1	; select bank1
  2935  062B  00B2               	movwf	(main@mask_buf^(0+128)+2)
  2936                           
  2937                           ;main.c: 336: mask_buf[3] = mask_sidl;
  2938  062C  082F               	movf	main@mask_sidl^(0+128),w
  2939  062D  0020               	movlb	0	; select bank0
  2940  062E  00D9               	movwf	??_main
  2941  062F  0859               	movf	??_main,w
  2942  0630  0021               	movlb	1	; select bank1
  2943  0631  00B3               	movwf	(main@mask_buf^(0+128)+3)
  2944                           
  2945                           ;main.c: 337: SPI_exchange(mask_buf, 4);
  2946  0632  3004               	movlw	4
  2947  0633  0020               	movlb	0	; select bank0
  2948  0634  00D9               	movwf	??_main
  2949  0635  0859               	movf	??_main,w
  2950  0636  00F8               	movwf	SPI_exchange@len
  2951  0637  30B0               	movlw	(low (main@mask_buf| 0))& (0+255)
  2952  0638  318E  2669  3185   	fcall	_SPI_exchange
  2953                           
  2954                           ;main.c: 339: if (mode.debug) {
  2955  063B  0020               	movlb	0	; select bank0
  2956  063C  085F               	movf	_mode,w
  2957  063D  1903               	btfsc	3,2
  2958  063E  2EC8               	goto	l283
  2959                           
  2960                           ;main.c: 340: mask_buf[0] = 0b00000011;
  2961  063F  3003               	movlw	3
  2962  0640  00D9               	movwf	??_main
  2963  0641  0859               	movf	??_main,w
  2964  0642  0021               	movlb	1	; select bank1
  2965  0643  00B0               	movwf	main@mask_buf^(0+128)
  2966                           
  2967                           ;main.c: 341: mask_buf[1] = (cmd == 'm')? rxmnsidh[n]: rxfnsidh[n];
  2968  0644  306D               	movlw	109
  2969  0645  0634               	xorwf	main@cmd^(0+128),w
  2970  0646  1903               	btfsc	3,2
  2971  0647  2E4D               	goto	l2320
  2972  0648  0835               	movf	main@n^(0+128),w
  2973  0649  3E3B               	addlw	low (_rxfnsidh| (0+32768))
  2974  064A  0084               	movwf	4
  2975  064B  3093               	movlw	high (_rxfnsidh| (0+32768))
  2976  064C  2E51               	goto	L2
  2977  064D                     l2320:	
  2978  064D  0835               	movf	main@n^(0+128),w
  2979  064E  3E4C               	addlw	low (_rxmnsidh| (0+32768))
  2980  064F  0084               	movwf	4
  2981  0650  3093               	movlw	high (_rxmnsidh| (0+32768))
  2982  0651                     L2:	
  2983  0651  1803               	skipnc
  2984  0652  3E01               	addlw	1
  2985  0653  0085               	movwf	5
  2986  0654  0800               	movf	0,w	;code access
  2987  0655  0020               	movlb	0	; select bank0
  2988  0656  00D9               	movwf	??_main
  2989  0657  01DA               	clrf	??_main+1
  2990  0658  0859               	movf	??_main,w
  2991  0659  0021               	movlb	1	; select bank1
  2992  065A  00A7               	movwf	_main$434^(0+128)
  2993  065B  0020               	movlb	0	; select bank0
  2994  065C  085A               	movf	??_main+1,w
  2995  065D  0021               	movlb	1	; select bank1
  2996  065E  00A8               	movwf	(_main$434+1)^(0+128)
  2997  065F  0827               	movf	_main$434^(0+128),w
  2998  0660  0020               	movlb	0	; select bank0
  2999  0661  00D9               	movwf	??_main
  3000  0662  0859               	movf	??_main,w
  3001  0663  0021               	movlb	1	; select bank1
  3002  0664  00B1               	movwf	(main@mask_buf^(0+128)+1)
  3003                           
  3004                           ;main.c: 342: mask_buf[2] = 0x00;
  3005  0665  01B2               	clrf	(main@mask_buf^(0+128)+2)
  3006                           
  3007                           ;main.c: 343: mask_buf[3] = 0x00;
  3008  0666  01B3               	clrf	(main@mask_buf^(0+128)+3)
  3009                           
  3010                           ;main.c: 344: SPI_exchange(mask_buf, 4);
  3011  0667  3004               	movlw	4
  3012  0668  0020               	movlb	0	; select bank0
  3013  0669  00D9               	movwf	??_main
  3014  066A  0859               	movf	??_main,w
  3015  066B  00F8               	movwf	SPI_exchange@len
  3016  066C  30B0               	movlw	(low (main@mask_buf| 0))& (0+255)
  3017  066D  318E  2669  3185   	fcall	_SPI_exchange
  3018                           
  3019                           ;main.c: 345: if (cmd == 'm') {
  3020  0670  306D               	movlw	109
  3021  0671  0021               	movlb	1	; select bank1
  3022  0672  0634               	xorwf	main@cmd^(0+128),w
  3023  0673  1D03               	btfss	3,2
  3024  0674  2E94               	goto	l2334
  3025                           
  3026                           ;main.c: 346: printf("RXM%dSIDH: %02x\n", n, mask_buf[2]);
  3027  0675  305B               	movlw	low (STR_22| (0+32768))
  3028  0676  0020               	movlb	0	; select bank0
  3029  0677  00A0               	movwf	printf@f
  3030  0678  3092               	movlw	high (STR_22| (0+32768))
  3031  0679  00A1               	movwf	printf@f+1
  3032  067A  0021               	movlb	1	; select bank1
  3033  067B  0835               	movf	main@n^(0+128),w
  3034  067C  0020               	movlb	0	; select bank0
  3035  067D  00D9               	movwf	??_main
  3036  067E  01DA               	clrf	??_main+1
  3037  067F  0859               	movf	??_main,w
  3038  0680  00A2               	movwf	?_printf+2
  3039  0681  085A               	movf	??_main+1,w
  3040  0682  00A3               	movwf	?_printf+3
  3041  0683  0021               	movlb	1	; select bank1
  3042  0684  0832               	movf	(main@mask_buf^(0+128)+2),w
  3043  0685  0020               	movlb	0	; select bank0
  3044  0686  00DB               	movwf	??_main+2
  3045  0687  01DC               	clrf	??_main+3
  3046  0688  085B               	movf	??_main+2,w
  3047  0689  00A4               	movwf	?_printf+4
  3048  068A  085C               	movf	??_main+3,w
  3049  068B  00A5               	movwf	?_printf+5
  3050  068C  3182  22D7  3185   	fcall	_printf
  3051                           
  3052                           ;main.c: 347: printf("RXM%dSIDL: %02x\n", n, mask_buf[3]);
  3053  068F  309F               	movlw	low (STR_23| (0+32768))
  3054  0690  0020               	movlb	0	; select bank0
  3055  0691  00A0               	movwf	printf@f
  3056  0692  3092               	movlw	high (STR_23| (0+32768))
  3057  0693  2EB2               	goto	L6
  3058  0694                     l2334:	
  3059                           ;main.c: 348: } else {
  3060                           
  3061                           
  3062                           ;main.c: 349: printf("RXF%dSIDH: %02x\n", n, mask_buf[2]);
  3063  0694  304A               	movlw	low (STR_24| (0+32768))
  3064  0695  0020               	movlb	0	; select bank0
  3065  0696  00A0               	movwf	printf@f
  3066  0697  3092               	movlw	high (STR_24| (0+32768))
  3067  0698  00A1               	movwf	printf@f+1
  3068  0699  0021               	movlb	1	; select bank1
  3069  069A  0835               	movf	main@n^(0+128),w
  3070  069B  0020               	movlb	0	; select bank0
  3071  069C  00D9               	movwf	??_main
  3072  069D  01DA               	clrf	??_main+1
  3073  069E  0859               	movf	??_main,w
  3074  069F  00A2               	movwf	?_printf+2
  3075  06A0  085A               	movf	??_main+1,w
  3076  06A1  00A3               	movwf	?_printf+3
  3077  06A2  0021               	movlb	1	; select bank1
  3078  06A3  0832               	movf	(main@mask_buf^(0+128)+2),w
  3079  06A4  0020               	movlb	0	; select bank0
  3080  06A5  00DB               	movwf	??_main+2
  3081  06A6  01DC               	clrf	??_main+3
  3082  06A7  085B               	movf	??_main+2,w
  3083  06A8  00A4               	movwf	?_printf+4
  3084  06A9  085C               	movf	??_main+3,w
  3085  06AA  00A5               	movwf	?_printf+5
  3086  06AB  3182  22D7  3185   	fcall	_printf
  3087                           
  3088                           ;main.c: 350: printf("RXF%dSIDL: %02x\n", n, mask_buf[3]);
  3089  06AE  308E               	movlw	low (STR_25| (0+32768))
  3090  06AF  0020               	movlb	0	; select bank0
  3091  06B0  00A0               	movwf	printf@f
  3092  06B1  3092               	movlw	high (STR_25| (0+32768))
  3093  06B2                     L6:	
  3094  06B2  00A1               	movwf	printf@f+1
  3095  06B3  0021               	movlb	1	; select bank1
  3096  06B4  0835               	movf	main@n^(0+128),w
  3097  06B5  0020               	movlb	0	; select bank0
  3098  06B6  00D9               	movwf	??_main
  3099  06B7  01DA               	clrf	??_main+1
  3100  06B8  0859               	movf	??_main,w
  3101  06B9  00A2               	movwf	?_printf+2
  3102  06BA  085A               	movf	??_main+1,w
  3103  06BB  00A3               	movwf	?_printf+3
  3104  06BC  0021               	movlb	1	; select bank1
  3105  06BD  0833               	movf	(main@mask_buf^(0+128)+3),w
  3106  06BE  0020               	movlb	0	; select bank0
  3107  06BF  00DB               	movwf	??_main+2
  3108  06C0  01DC               	clrf	??_main+3
  3109  06C1  085B               	movf	??_main+2,w
  3110  06C2  00A4               	movwf	?_printf+4
  3111  06C3  085C               	movf	??_main+3,w
  3112  06C4  00A5               	movwf	?_printf+5
  3113  06C5  3182  22D7  3185   	fcall	_printf
  3114  06C8                     l283:	
  3115                           
  3116                           ;main.c: 351: }
  3117                           ;main.c: 352: }
  3118                           ;main.c: 354: can_ope_mode(mode.ope_mode);
  3119  06C8  0020               	movlb	0	; select bank0
  3120  06C9  0861               	movf	_mode+2,w
  3121  06CA  318F  2773  3185   	fcall	_can_ope_mode
  3122                           
  3123                           ;main.c: 355: break;
  3124  06CD  2F16               	goto	L3
  3125  06CE                     l2336:	
  3126                           ;main.c: 356: case 'h':
  3127                           
  3128                           
  3129                           ;main.c: 357: printf("--- UART2CAN HELP ---\n");
  3130  06CE  306D               	movlw	low (STR_26| (0+32768))
  3131  06CF  0020               	movlb	0	; select bank0
  3132  06D0  00A0               	movwf	printf@f
  3133  06D1  3091               	movlw	high (STR_26| (0+32768))
  3134  06D2  00A1               	movwf	printf@f+1
  3135  06D3  3182  22D7  3185   	fcall	_printf
  3136                           
  3137                           ;main.c: 358: printf("[Set standard identifier] @i<Standard Identifier>\n");
  3138  06D6  3072               	movlw	low (STR_27| (0+32768))
  3139  06D7  0020               	movlb	0	; select bank0
  3140  06D8  00A0               	movwf	printf@f
  3141  06D9  3090               	movlw	high (STR_27| (0+32768))
  3142  06DA  00A1               	movwf	printf@f+1
  3143  06DB  3182  22D7  3185   	fcall	_printf
  3144                           
  3145                           ;main.c: 359: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  3146  06DE  3001               	movlw	low (STR_28| (0+32768))
  3147  06DF  0020               	movlb	0	; select bank0
  3148  06E0  00A0               	movwf	printf@f
  3149  06E1  3090               	movlw	high (STR_28| (0+32768))
  3150  06E2  00A1               	movwf	printf@f+1
  3151  06E3  3182  22D7  3185   	fcall	_printf
  3152                           
  3153                           ;main.c: 360: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  3154  06E6  303C               	movlw	low (STR_29| (0+32768))
  3155  06E7  0020               	movlb	0	; select bank0
  3156  06E8  00A0               	movwf	printf@f
  3157  06E9  3090               	movlw	high (STR_29| (0+32768))
  3158  06EA  00A1               	movwf	printf@f+1
  3159  06EB  3182  22D7  3185   	fcall	_printf
  3160                           
  3161                           ;main.c: 361: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  3162  06EE  30FB               	movlw	low (STR_30| (0+32768))
  3163  06EF  0020               	movlb	0	; select bank0
  3164  06F0  00A0               	movwf	printf@f
  3165  06F1  3090               	movlw	high (STR_30| (0+32768))
  3166  06F2  00A1               	movwf	printf@f+1
  3167  06F3  3182  22D7  3185   	fcall	_printf
  3168                           
  3169                           ;main.c: 362: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  3170  06F6  30D1               	movlw	low (STR_31| (0+32768))
  3171  06F7  0020               	movlb	0	; select bank0
  3172  06F8  00A0               	movwf	printf@f
  3173  06F9  3090               	movlw	high (STR_31| (0+32768))
  3174  06FA  00A1               	movwf	printf@f+1
  3175  06FB  3182  22D7  3185   	fcall	_printf
  3176                           
  3177                           ;main.c: 363: printf("[Send message] <message>\n");
  3178  06FE  3021               	movlw	low (STR_32| (0+32768))
  3179  06FF  0020               	movlb	0	; select bank0
  3180  0700  00A0               	movwf	printf@f
  3181  0701  3091               	movlw	high (STR_32| (0+32768))
  3182  0702  00A1               	movwf	printf@f+1
  3183  0703  3182  22D7  3185   	fcall	_printf
  3184                           
  3185                           ;main.c: 364: printf("[Receive message] <message> will be output\n");
  3186  0706  30A5               	movlw	low (STR_33| (0+32768))
  3187  0707  0020               	movlb	0	; select bank0
  3188  0708  00A0               	movwf	printf@f
  3189  0709  3090               	movlw	high (STR_33| (0+32768))
  3190  070A  00A1               	movwf	printf@f+1
  3191  070B  3182  22D7  3185   	fcall	_printf
  3192                           
  3193                           ;main.c: 365: printf("[Show this help]: @h\n");
  3194  070E  309B               	movlw	low (STR_34| (0+32768))
  3195  070F  0020               	movlb	0	; select bank0
  3196  0710  00A0               	movwf	printf@f
  3197  0711  3091               	movlw	high (STR_34| (0+32768))
  3198  0712                     L10:	
  3199  0712  00A1               	movwf	printf@f+1
  3200  0713                     L8:	
  3201  0713  3182  22D7  3185   	fcall	_printf
  3202  0716                     L3:	
  3203                           ;main.c: 367: }
  3204                           
  3205                           ;main.c: 366: break;
  3206                           
  3207                           
  3208                           ;main.c: 264: idx = 0;
  3209  0716  0021               	movlb	1	; select bank1
  3210  0717  01B6               	clrf	_idx^(0+128)
  3211  0718                     l2218:	
  3212                           ;main.c: 266: while (1)
  3213                           
  3214                           
  3215                           ;main.c: 267: {
  3216                           ;main.c: 268: can_status_check();
  3217  0718  318F  27B6  3185   	fcall	_can_status_check
  3218                           
  3219                           ;main.c: 270: if ((PIR1bits.RCIF)) {
  3220  071B  0020               	movlb	0	; select bank0
  3221  071C  1E91               	btfss	17,5	;volatile
  3222  071D  2F18               	goto	l2218
  3223                           
  3224                           ;main.c: 271: c = EUSART_Read();
  3225  071E  318E  2646  3185   	fcall	_EUSART_Read
  3226  0721  0020               	movlb	0	; select bank0
  3227  0722  00D9               	movwf	??_main
  3228  0723  0859               	movf	??_main,w
  3229  0724  0021               	movlb	1	; select bank1
  3230  0725  00B7               	movwf	_c^(0+128)
  3231                           
  3232                           ;main.c: 272: if (mode.verbose) printf("%c", c);
  3233  0726  0020               	movlb	0	; select bank0
  3234  0727  0860               	movf	_mode+1,w
  3235  0728  1903               	btfsc	3,2
  3236  0729  2F3A               	goto	l2228
  3237  072A  3047               	movlw	low (STR_19| (0+32768))
  3238  072B  00A0               	movwf	printf@f
  3239  072C  3093               	movlw	high (STR_19| (0+32768))
  3240  072D  00A1               	movwf	printf@f+1
  3241  072E  0021               	movlb	1	; select bank1
  3242  072F  0837               	movf	_c^(0+128),w
  3243  0730  0020               	movlb	0	; select bank0
  3244  0731  00D9               	movwf	??_main
  3245  0732  01DA               	clrf	??_main+1
  3246  0733  0859               	movf	??_main,w
  3247  0734  00A2               	movwf	?_printf+2
  3248  0735  085A               	movf	??_main+1,w
  3249  0736  00A3               	movwf	?_printf+3
  3250  0737  3182  22D7  3185   	fcall	_printf
  3251  073A                     l2228:	
  3252                           
  3253                           ;main.c: 275: buf[idx] = c;
  3254  073A  0021               	movlb	1	; select bank1
  3255  073B  0837               	movf	_c^(0+128),w
  3256  073C  0020               	movlb	0	; select bank0
  3257  073D  00D9               	movwf	??_main
  3258  073E  0021               	movlb	1	; select bank1
  3259  073F  0836               	movf	_idx^(0+128),w
  3260  0740  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3261  0741  0086               	movwf	6
  3262  0742  0187               	clrf	7
  3263  0743  0020               	movlb	0	; select bank0
  3264  0744  0859               	movf	??_main,w
  3265  0745  0081               	movwf	1
  3266                           
  3267                           ;main.c: 276: if (c == '\n') {
  3268  0746  300A               	movlw	10
  3269  0747  0021               	movlb	1	; select bank1
  3270  0748  0637               	xorwf	_c^(0+128),w
  3271  0749  1D03               	btfss	3,2
  3272  074A  2F95               	goto	l2356
  3273                           
  3274                           ;main.c: 277: buf[idx] = '\0';
  3275  074B  0836               	movf	_idx^(0+128),w
  3276  074C  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3277  074D  0086               	movwf	6
  3278  074E  0187               	clrf	7
  3279  074F  0181               	clrf	1
  3280                           
  3281                           ;main.c: 278: if (buf[0] == '@') {
  3282  0750  3040               	movlw	64
  3283  0751  0638               	xorwf	_buf^(0+128),w
  3284  0752  1D03               	btfss	3,2
  3285  0753  2F70               	goto	l2342
  3286                           
  3287                           ;main.c: 279: uint8_t cmd = buf[1];
  3288  0754  0839               	movf	(_buf^(0+128)+1),w
  3289  0755  0020               	movlb	0	; select bank0
  3290  0756  00D9               	movwf	??_main
  3291  0757  0859               	movf	??_main,w
  3292  0758  0021               	movlb	1	; select bank1
  3293  0759  00B4               	movwf	main@cmd^(0+128)
  3294  075A  0021               	movlb	1	; select bank1
  3295  075B  0834               	movf	main@cmd^(0+128),w
  3296                           
  3297                           ; Switch size 1, requested type "space"
  3298                           ; Number of cases is 6, Range of values is 102 to 118
  3299                           ; switch strategies available:
  3300                           ; Name         Instructions Cycles
  3301                           ; simple_byte           19    10 (average)
  3302                           ; direct_byte           43     9 (fixed)
  3303                           ; jumptable            263     9 (fixed)
  3304                           ;	Chosen strategy is simple_byte
  3305  075C  3A66               	xorlw	102	; case 102
  3306  075D  1903               	skipnz
  3307  075E  2D99               	goto	l2278
  3308  075F  3A0E               	xorlw	14	; case 104
  3309  0760  1903               	skipnz
  3310  0761  2ECE               	goto	l2336
  3311  0762  3A01               	xorlw	1	; case 105
  3312  0763  1903               	skipnz
  3313  0764  2D3C               	goto	l2238
  3314  0765  3A04               	xorlw	4	; case 109
  3315  0766  1903               	skipnz
  3316  0767  2D99               	goto	l2278
  3317  0768  3A02               	xorlw	2	; case 111
  3318  0769  1903               	skipnz
  3319  076A  2D6E               	goto	l2256
  3320  076B  3A19               	xorlw	25	; case 118
  3321  076C  1903               	skipnz
  3322  076D  2D52               	goto	l2242
  3323  076E  2F94               	goto	l2354
  3324                           
  3325                           ;main.c: 368: } else {
  3326  076F  2F16               	goto	L3
  3327  0770                     l2342:	
  3328                           
  3329                           ;main.c: 369: bool rc = can_send(buf, idx);
  3330  0770  0836               	movf	_idx^(0+128),w
  3331  0771  0020               	movlb	0	; select bank0
  3332  0772  00D9               	movwf	??_main
  3333  0773  0859               	movf	??_main,w
  3334  0774  00B9               	movwf	can_send@dlc
  3335  0775  30B8               	movlw	(low (_buf| 0))& (0+255)
  3336  0776  3181  21A4  3185   	fcall	_can_send
  3337  0779  0020               	movlb	0	; select bank0
  3338  077A  00DA               	movwf	??_main+1
  3339  077B  085A               	movf	??_main+1,w
  3340  077C  0021               	movlb	1	; select bank1
  3341  077D  00AA               	movwf	main@rc^(0+128)
  3342                           
  3343                           ;main.c: 370: if (rc) {
  3344  077E  082A               	movf	main@rc^(0+128),w
  3345  077F  1903               	btfsc	3,2
  3346  0780  2F89               	goto	l2350
  3347                           
  3348                           ;main.c: 371: if (mode.verbose) printf("Message sent: %s\n", buf);
  3349  0781  0020               	movlb	0	; select bank0
  3350  0782  0860               	movf	_mode+1,w
  3351  0783  1903               	btfsc	3,2
  3352  0784  2F16               	goto	L3
  3353  0785  3005               	movlw	low ((STR_37+1)| (0+32768))
  3354  0786  00A0               	movwf	printf@f
  3355  0787  3092               	movlw	high ((STR_37+1)| (0+32768))
  3356  0788  2FC6               	goto	L9
  3357  0789                     l2350:	
  3358                           ;main.c: 372: } else {
  3359                           
  3360                           
  3361                           ;main.c: 373: if (mode.verbose) printf("Unable to send message\n");
  3362  0789  0020               	movlb	0	; select bank0
  3363  078A  0860               	movf	_mode+1,w
  3364  078B  1903               	btfsc	3,2
  3365  078C  2F16               	goto	L3
  3366  078D  303C               	movlw	low ((STR_38+1)| (0+32768))
  3367  078E  00A0               	movwf	printf@f
  3368  078F  3091               	movlw	high ((STR_38+1)| (0+32768))
  3369  0790  00A1               	movwf	printf@f+1
  3370  0791  3182  22D7  3185   	fcall	_printf
  3371  0794                     l2354:	
  3372  0794  2F16               	goto	L3
  3373  0795                     l2356:	
  3374                           ;main.c: 377: } else if (++idx > max_idx) {
  3375                           
  3376                           ;main.c: 374: }
  3377                           ;main.c: 375: }
  3378                           ;main.c: 376: idx = 0;
  3379                           
  3380  0795  3001               	movlw	1
  3381  0796  0020               	movlb	0	; select bank0
  3382  0797  00D9               	movwf	??_main
  3383  0798  0859               	movf	??_main,w
  3384  0799  0021               	movlb	1	; select bank1
  3385  079A  07B6               	addwf	_idx^(0+128),f
  3386  079B  3000               	movlw	low (_max_idx| (0+32768))
  3387  079C  0084               	movwf	4
  3388  079D  3090               	movlw	high (_max_idx| (0+32768))
  3389  079E  0085               	movwf	5
  3390  079F  0800               	movf	0,w	;code access
  3391  07A0  0020               	movlb	0	; select bank0
  3392  07A1  00DA               	movwf	??_main+1
  3393  07A2  0021               	movlb	1	; select bank1
  3394  07A3  0836               	movf	_idx^(0+128),w
  3395  07A4  0020               	movlb	0	; select bank0
  3396  07A5  025A               	subwf	??_main+1,w
  3397  07A6  1803               	skipnc
  3398  07A7  2F18               	goto	l2218
  3399                           
  3400                           ;main.c: 378: buf[idx] = '\0';
  3401  07A8  0021               	movlb	1	; select bank1
  3402  07A9  0836               	movf	_idx^(0+128),w
  3403  07AA  3EB8               	addlw	(low (_buf| 0))& (0+255)
  3404  07AB  0086               	movwf	6
  3405  07AC  0187               	clrf	7
  3406  07AD  0181               	clrf	1
  3407                           
  3408                           ;main.c: 379: bool rc = can_send(buf, idx);
  3409  07AE  0836               	movf	_idx^(0+128),w
  3410  07AF  0020               	movlb	0	; select bank0
  3411  07B0  00D9               	movwf	??_main
  3412  07B1  0859               	movf	??_main,w
  3413  07B2  00B9               	movwf	can_send@dlc
  3414  07B3  30B8               	movlw	(low (_buf| 0))& (0+255)
  3415  07B4  3181  21A4  3185   	fcall	_can_send
  3416  07B7  0020               	movlb	0	; select bank0
  3417  07B8  00DA               	movwf	??_main+1
  3418  07B9  085A               	movf	??_main+1,w
  3419  07BA  0021               	movlb	1	; select bank1
  3420  07BB  00AB               	movwf	main@rc_452^(0+128)
  3421                           
  3422                           ;main.c: 380: if (rc) {
  3423  07BC  082B               	movf	main@rc_452^(0+128),w
  3424  07BD  1903               	btfsc	3,2
  3425  07BE  2FCC               	goto	l2368
  3426                           
  3427                           ;main.c: 381: if (mode.verbose) printf("\nMessage sent: %s\n", buf);
  3428  07BF  0020               	movlb	0	; select bank0
  3429  07C0  0860               	movf	_mode+1,w
  3430  07C1  1903               	btfsc	3,2
  3431  07C2  2F16               	goto	L3
  3432  07C3  3004               	movlw	low (STR_37| (0+32768))
  3433  07C4  00A0               	movwf	printf@f
  3434  07C5  3092               	movlw	high (STR_37| (0+32768))
  3435  07C6                     L9:	
  3436  07C6  00A1               	movwf	printf@f+1
  3437  07C7  30B8               	movlw	(low (_buf| 0))& (0+255)
  3438  07C8  00D9               	movwf	??_main
  3439  07C9  0859               	movf	??_main,w
  3440  07CA  00A2               	movwf	low ((?_printf| 0+2))
  3441  07CB  2F13               	goto	L8
  3442  07CC                     l2368:	
  3443                           ;main.c: 382: } else {
  3444                           
  3445                           
  3446                           ;main.c: 383: if (mode.verbose) printf("\nUnable to send message\n");
  3447  07CC  0020               	movlb	0	; select bank0
  3448  07CD  0860               	movf	_mode+1,w
  3449  07CE  1903               	btfsc	3,2
  3450  07CF  2F16               	goto	L3
  3451  07D0  303B               	movlw	low (STR_38| (0+32768))
  3452  07D1  00A0               	movwf	printf@f
  3453  07D2  3091               	movlw	high (STR_38| (0+32768))
  3454  07D3  2F12               	goto	L10
  3455  07D4                     __end_of_main:	
  3456                           ;main.c: 384: }
  3457                           ;main.c: 385: idx = 0;
  3458                           
  3459                           
  3460                           	psect	text1
  3461  0F38                     __ptext1:	
  3462 ;; *************** function _set_sid *****************
  3463 ;; Defined at:
  3464 ;;		line 37 in file "main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  can_node        2   25[BANK0 ] unsigned int 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  sidl            1   32[BANK0 ] unsigned char 
  3469 ;;  sidh            1   31[BANK0 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3479 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3481 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3482 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3483 ;;Total ram usage:        8 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    3
  3486 ;; This function calls:
  3487 ;;		_printf
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _set_sid
  3495  0F38                     _set_sid:	
  3496                           
  3497                           ;main.c: 38: uint8_t sidh = (can_node >> 3) & 0x00ff;
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3501  0F38  0020               	movlb	0	; select bank0
  3502  0F39  083A               	movf	set_sid@can_node+1,w
  3503  0F3A  00BC               	movwf	??_set_sid+1
  3504  0F3B  0839               	movf	set_sid@can_node,w
  3505  0F3C  00BB               	movwf	??_set_sid
  3506  0F3D  36BC               	lsrf	??_set_sid+1,f
  3507  0F3E  0CBB               	rrf	??_set_sid,f
  3508  0F3F  36BC               	lsrf	??_set_sid+1,f
  3509  0F40  0CBB               	rrf	??_set_sid,f
  3510  0F41  36BC               	lsrf	??_set_sid+1,f
  3511  0F42  0CBB               	rrf	??_set_sid,f
  3512  0F43  083B               	movf	??_set_sid,w
  3513  0F44  00BD               	movwf	??_set_sid+2
  3514  0F45  083D               	movf	??_set_sid+2,w
  3515  0F46  00BF               	movwf	set_sid@sidh
  3516                           
  3517                           ;main.c: 39: uint8_t sidl = (can_node << 5) & 0x00e0;
  3518  0F47  0839               	movf	set_sid@can_node,w
  3519  0F48  00BB               	movwf	??_set_sid
  3520  0F49  3004               	movlw	4
  3521  0F4A                     u1915:	
  3522  0F4A  35BB               	lslf	??_set_sid,f
  3523  0F4B  3EFF               	addlw	-1
  3524  0F4C  1D03               	skipz
  3525  0F4D  2F4A               	goto	u1915
  3526  0F4E  353B               	lslf	??_set_sid,w
  3527  0F4F  39E0               	andlw	224
  3528  0F50  00BC               	movwf	??_set_sid+1
  3529  0F51  083C               	movf	??_set_sid+1,w
  3530  0F52  00C0               	movwf	set_sid@sidl
  3531                           
  3532                           ;main.c: 40: sid.sidh = sidh;
  3533  0F53  083F               	movf	set_sid@sidh,w
  3534  0F54  00BB               	movwf	??_set_sid
  3535  0F55  083B               	movf	??_set_sid,w
  3536  0F56  00E3               	movwf	_sid
  3537                           
  3538                           ;main.c: 41: sid.sidl = sidl;
  3539  0F57  0840               	movf	set_sid@sidl,w
  3540  0F58  00BB               	movwf	??_set_sid
  3541  0F59  083B               	movf	??_set_sid,w
  3542  0F5A  00E4               	movwf	_sid+1
  3543                           
  3544                           ;main.c: 42: if (mode.debug) printf("SID set: %02x %02x\n", sidh, sidl);
  3545  0F5B  085F               	movf	_mode,w
  3546  0F5C  1903               	btfsc	3,2
  3547  0F5D  0008               	return
  3548  0F5E  30F0               	movlw	low (STR_1| (0+32768))
  3549  0F5F  00A0               	movwf	printf@f
  3550  0F60  3091               	movlw	high (STR_1| (0+32768))
  3551  0F61  00A1               	movwf	printf@f+1
  3552  0F62  083F               	movf	set_sid@sidh,w
  3553  0F63  00BB               	movwf	??_set_sid
  3554  0F64  01BC               	clrf	??_set_sid+1
  3555  0F65  083B               	movf	??_set_sid,w
  3556  0F66  00A2               	movwf	?_printf+2
  3557  0F67  083C               	movf	??_set_sid+1,w
  3558  0F68  00A3               	movwf	?_printf+3
  3559  0F69  0840               	movf	set_sid@sidl,w
  3560  0F6A  00BD               	movwf	??_set_sid+2
  3561  0F6B  01BE               	clrf	??_set_sid+3
  3562  0F6C  083D               	movf	??_set_sid+2,w
  3563  0F6D  00A4               	movwf	?_printf+4
  3564  0F6E  083E               	movf	??_set_sid+3,w
  3565  0F6F  00A5               	movwf	?_printf+5
  3566  0F70  3182  22D7         	fcall	_printf
  3567  0F72  0008               	return
  3568  0F73                     __end_of_set_sid:	
  3569                           
  3570                           	psect	text2
  3571  0FB6                     __ptext2:	
  3572 ;; *************** function _can_status_check *****************
  3573 ;; Defined at:
  3574 ;;		line 223 in file "main.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  can_status_b    2   54[BANK0 ] unsigned char [2]
  3579 ;;  status          1   56[BANK0 ] unsigned char 
  3580 ;;  bytes_writte    1   53[BANK0 ] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;Total ram usage:        6 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    4
  3597 ;; This function calls:
  3598 ;;		_SPI_exchange
  3599 ;;		_can_receive
  3600 ;;		_can_txf_clear
  3601 ;;		_printf
  3602 ;; This function is called by:
  3603 ;;		_main
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _can_status_check
  3609  0FB6                     _can_status_check:	
  3610                           
  3611                           ;main.c: 225: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3615  0FB6  0020               	movlb	0	; select bank0
  3616  0FB7  0866               	movf	can_status_check@F2968+1,w
  3617  0FB8  00D7               	movwf	can_status_check@can_status_buf+1
  3618  0FB9  0865               	movf	can_status_check@F2968,w
  3619  0FBA  00D6               	movwf	can_status_check@can_status_buf
  3620                           
  3621                           ;main.c: 226: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  3622  0FBB  3002               	movlw	2
  3623  0FBC  00D3               	movwf	??_can_status_check
  3624  0FBD  0853               	movf	??_can_status_check,w
  3625  0FBE  00F8               	movwf	SPI_exchange@len
  3626  0FBF  3056               	movlw	(low (can_status_check@can_status_buf| 0))& (0+255)
  3627  0FC0  318E  2669  318F   	fcall	_SPI_exchange
  3628  0FC3  0020               	movlb	0	; select bank0
  3629  0FC4  00D4               	movwf	??_can_status_check+1
  3630  0FC5  0854               	movf	??_can_status_check+1,w
  3631  0FC6  00D5               	movwf	can_status_check@bytes_written
  3632                           
  3633                           ;main.c: 227: uint8_t status = can_status_buf[1];
  3634  0FC7  0857               	movf	can_status_check@can_status_buf+1,w
  3635  0FC8  00D3               	movwf	??_can_status_check
  3636  0FC9  0853               	movf	??_can_status_check,w
  3637  0FCA  00D8               	movwf	can_status_check@status
  3638                           
  3639                           ;main.c: 228: if (status == 0x00) {
  3640  0FCB  0858               	movf	can_status_check@status,w
  3641  0FCC  1903               	btfsc	3,2
  3642  0FCD  0008               	return
  3643                           
  3644                           ;main.c: 230: } else if ((status & 0b00000001) > 0) {
  3645                           
  3646                           ;main.c: 229: return;
  3647  0FCE  1C58               	btfss	can_status_check@status,0
  3648  0FCF  2FDE               	goto	l235
  3649                           
  3650                           ;main.c: 231: if (mode.debug) printf("RX0IF is on\n");
  3651  0FD0  085F               	movf	_mode,w
  3652  0FD1  1903               	btfsc	3,2
  3653  0FD2  2FDA               	goto	l236
  3654  0FD3  3008               	movlw	low (STR_17| (0+32768))
  3655  0FD4  00A0               	movwf	printf@f
  3656  0FD5  3093               	movlw	high (STR_17| (0+32768))
  3657  0FD6  00A1               	movwf	printf@f+1
  3658  0FD7  3182  22D7  318F   	fcall	_printf
  3659  0FDA                     l236:	
  3660                           
  3661                           ;main.c: 232: can_receive(0);
  3662  0FDA  3000               	movlw	0
  3663  0FDB  3180  20CA         	fcall	_can_receive
  3664                           
  3665                           ;main.c: 233: } else if ((status & 0b00000010) > 0) {
  3666  0FDD  0008               	return
  3667  0FDE                     l235:	
  3668  0FDE  1CD8               	btfss	can_status_check@status,1
  3669  0FDF  2FEE               	goto	l238
  3670                           
  3671                           ;main.c: 234: if (mode.debug) printf("RX1IF is on\n");
  3672  0FE0  085F               	movf	_mode,w
  3673  0FE1  1903               	btfsc	3,2
  3674  0FE2  2FEA               	goto	l239
  3675  0FE3  3015               	movlw	low (STR_18| (0+32768))
  3676  0FE4  00A0               	movwf	printf@f
  3677  0FE5  3093               	movlw	high (STR_18| (0+32768))
  3678  0FE6  00A1               	movwf	printf@f+1
  3679  0FE7  3182  22D7  318F   	fcall	_printf
  3680  0FEA                     l239:	
  3681                           
  3682                           ;main.c: 235: can_receive(1);
  3683  0FEA  3001               	movlw	1
  3684  0FEB  3180  20CA         	fcall	_can_receive
  3685                           
  3686                           ;main.c: 236: } else if ((status & 0b00001000) > 0) {
  3687  0FED  0008               	return
  3688  0FEE                     l238:	
  3689  0FEE  1DD8               	btfss	can_status_check@status,3
  3690  0FEF  2FF4               	goto	l241
  3691                           
  3692                           ;main.c: 237: can_txf_clear(0);
  3693  0FF0  3000               	movlw	0
  3694  0FF1  318E  26B0         	fcall	_can_txf_clear
  3695                           
  3696                           ;main.c: 238: } else if ((status & 0b00100000) > 0) {
  3697  0FF3  0008               	return
  3698  0FF4                     l241:	
  3699  0FF4  1ED8               	btfss	can_status_check@status,5
  3700  0FF5  2FFA               	goto	l243
  3701                           
  3702                           ;main.c: 239: can_txf_clear(1);
  3703  0FF6  3001               	movlw	1
  3704  0FF7  318E  26B0         	fcall	_can_txf_clear
  3705                           
  3706                           ;main.c: 240: } else if ((status & 0b10000000) > 0) {
  3707  0FF9  0008               	return
  3708  0FFA                     l243:	
  3709  0FFA  1FD8               	btfss	can_status_check@status,7
  3710  0FFB  0008               	return
  3711                           
  3712                           ;main.c: 241: can_txf_clear(2);
  3713  0FFC  3002               	movlw	2
  3714  0FFD  318E  26B0         	fcall	_can_txf_clear
  3715  0FFF  0008               	return
  3716  1000                     __end_of_can_status_check:	
  3717                           ;main.c: 242: }
  3718                           ;main.c: 243: return;
  3719                           
  3720                           
  3721                           	psect	text3
  3722  0EB0                     __ptext3:	
  3723 ;; *************** function _can_txf_clear *****************
  3724 ;; Defined at:
  3725 ;;		line 75 in file "main.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  n               1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  n               1    2[BANK0 ] unsigned char 
  3730 ;;  can_int_flag    4    5[BANK0 ] unsigned char [4]
  3731 ;;  bytes_writte    1    4[BANK0 ] unsigned char 
  3732 ;;  mask            1    3[BANK0 ] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      unsigned char 
  3735 ;; Registers used:
  3736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;Total ram usage:        9 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    3
  3749 ;; This function calls:
  3750 ;;		_SPI_exchange
  3751 ;; This function is called by:
  3752 ;;		_can_status_check
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _can_txf_clear
  3758  0EB0                     _can_txf_clear:	
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _can_txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3762                           ;can_txf_clear@n stored from wreg
  3763  0EB0  0020               	movlb	0	; select bank0
  3764  0EB1  00A2               	movwf	can_txf_clear@n
  3765                           
  3766                           ;main.c: 76: uint8_t mask = 0b00000001 << (n + 2);
  3767  0EB2  3001               	movlw	1
  3768  0EB3  00A0               	movwf	??_can_txf_clear
  3769  0EB4  0822               	movf	can_txf_clear@n,w
  3770  0EB5  3E02               	addlw	2
  3771  0EB6  0A89               	incf	9,f
  3772  0EB7  2EB9               	goto	u1814
  3773  0EB8                     u1815:	
  3774  0EB8  35A0               	lslf	??_can_txf_clear,f
  3775  0EB9                     u1814:	
  3776  0EB9  0B89               	decfsz	9,f
  3777  0EBA  2EB8               	goto	u1815
  3778  0EBB  0820               	movf	??_can_txf_clear,w
  3779  0EBC  00A1               	movwf	??_can_txf_clear+1
  3780  0EBD  0821               	movf	??_can_txf_clear+1,w
  3781  0EBE  00A3               	movwf	can_txf_clear@mask
  3782                           
  3783                           ;main.c: 77: uint8_t can_int_flag[4];
  3784                           ;main.c: 78: can_int_flag[0] =0b00000101;
  3785  0EBF  3005               	movlw	5
  3786  0EC0  00A0               	movwf	??_can_txf_clear
  3787  0EC1  0820               	movf	??_can_txf_clear,w
  3788  0EC2  00A5               	movwf	can_txf_clear@can_int_flag
  3789                           
  3790                           ;main.c: 79: can_int_flag[1] = 0x2c;
  3791  0EC3  302C               	movlw	44
  3792  0EC4  00A0               	movwf	??_can_txf_clear
  3793  0EC5  0820               	movf	??_can_txf_clear,w
  3794  0EC6  00A6               	movwf	can_txf_clear@can_int_flag+1
  3795                           
  3796                           ;main.c: 80: can_int_flag[2] = mask;
  3797  0EC7  0823               	movf	can_txf_clear@mask,w
  3798  0EC8  00A0               	movwf	??_can_txf_clear
  3799  0EC9  0820               	movf	??_can_txf_clear,w
  3800  0ECA  00A7               	movwf	can_txf_clear@can_int_flag+2
  3801                           
  3802                           ;main.c: 81: can_int_flag[3] = 0x00;
  3803  0ECB  01A8               	clrf	can_txf_clear@can_int_flag+3
  3804                           
  3805                           ;main.c: 82: uint8_t bytes_written = SPI_exchange(can_int_flag, 4);
  3806  0ECC  3004               	movlw	4
  3807  0ECD  00A0               	movwf	??_can_txf_clear
  3808  0ECE  0820               	movf	??_can_txf_clear,w
  3809  0ECF  00F8               	movwf	SPI_exchange@len
  3810  0ED0  3025               	movlw	(low (can_txf_clear@can_int_flag| 0))& (0+255)
  3811  0ED1  318E  2669         	fcall	_SPI_exchange
  3812  0ED3  0020               	movlb	0	; select bank0
  3813  0ED4  00A1               	movwf	??_can_txf_clear+1
  3814  0ED5  0821               	movf	??_can_txf_clear+1,w
  3815  0ED6  00A4               	movwf	can_txf_clear@bytes_written
  3816                           
  3817                           ;main.c: 86: return 0;
  3818                           ;	Return value of _can_txf_clear is never used
  3819                           
  3820                           ;main.c: 85: } else {
  3821                           
  3822                           ;main.c: 84: return 1;
  3823                           ;	Return value of _can_txf_clear is never used
  3824  0ED7  0008               	return
  3825  0ED8                     __end_of_can_txf_clear:	
  3826                           
  3827                           	psect	text4
  3828  00CA                     __ptext4:	
  3829 ;; *************** function _can_receive *****************
  3830 ;; Defined at:
  3831 ;;		line 93 in file "main.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  n               1    wreg     unsigned char 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  n               1   50[BANK0 ] unsigned char 
  3836 ;;  rx_buf         15   31[BANK0 ] unsigned char [15]
  3837 ;;  sid             2   47[BANK0 ] unsigned int 
  3838 ;;  rx_buf_ptr      1   49[BANK0 ] PTR unsigned char 
  3839 ;;		 -> can_receive@rx_buf(15), 
  3840 ;;  dlc             1   46[BANK0 ] unsigned char 
  3841 ;;  bytes_read      1   30[BANK0 ] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;Total ram usage:       26 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    3
  3858 ;; This function calls:
  3859 ;;		_SPI_exchange
  3860 ;;		_printf
  3861 ;; This function is called by:
  3862 ;;		_can_status_check
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           
  3867                           ;psect for function _can_receive
  3868  00CA                     _can_receive:	
  3869                           
  3870                           ;incstack = 0
  3871                           ; Regs used in _can_receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3872                           ;can_receive@n stored from wreg
  3873  00CA  0020               	movlb	0	; select bank0
  3874  00CB  00D2               	movwf	can_receive@n
  3875                           
  3876                           ;main.c: 97: uint8_t rx_buf[15];
  3877                           ;main.c: 100: rx_buf[0] = 0b10010000 + (nm[n] << 1);
  3878  00CC  0852               	movf	can_receive@n,w
  3879  00CD  3E4A               	addlw	low (_nm| (0+32768))
  3880  00CE  0084               	movwf	4
  3881  00CF  3093               	movlw	high (_nm| (0+32768))
  3882  00D0  1803               	skipnc
  3883  00D1  3E01               	addlw	1
  3884  00D2  0085               	movwf	5
  3885  00D3  0800               	movf	0,w	;code access
  3886  00D4  0709               	addwf	9,w
  3887  00D5  3E90               	addlw	144
  3888  00D6  00B9               	movwf	??_can_receive
  3889  00D7  0839               	movf	??_can_receive,w
  3890  00D8  00BF               	movwf	can_receive@rx_buf
  3891                           
  3892                           ;main.c: 101: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  3893  00D9  300E               	movlw	14
  3894  00DA  00B9               	movwf	??_can_receive
  3895  00DB  0839               	movf	??_can_receive,w
  3896  00DC  00F8               	movwf	SPI_exchange@len
  3897  00DD  303F               	movlw	(low (can_receive@rx_buf| 0))& (0+255)
  3898  00DE  318E  2669  3180   	fcall	_SPI_exchange
  3899  00E1  0020               	movlb	0	; select bank0
  3900  00E2  00BA               	movwf	??_can_receive+1
  3901  00E3  083A               	movf	??_can_receive+1,w
  3902  00E4  00BE               	movwf	can_receive@bytes_read
  3903                           
  3904                           ;main.c: 102: uint8_t dlc = rx_buf[5];
  3905  00E5  0844               	movf	can_receive@rx_buf+5,w
  3906  00E6  00B9               	movwf	??_can_receive
  3907  00E7  0839               	movf	??_can_receive,w
  3908  00E8  00CE               	movwf	can_receive@dlc
  3909                           
  3910                           ;main.c: 103: uint16_t sid = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  3911  00E9  0841               	movf	can_receive@rx_buf+2,w
  3912  00EA  00B9               	movwf	??_can_receive
  3913  00EB  3005               	movlw	5
  3914  00EC                     u1825:	
  3915  00EC  36B9               	lsrf	??_can_receive,f
  3916  00ED  0B89               	decfsz	9,f
  3917  00EE  28EC               	goto	u1825
  3918  00EF  0839               	movf	??_can_receive,w
  3919  00F0  00BA               	movwf	??_can_receive+1
  3920  00F1  01BB               	clrf	??_can_receive+2
  3921  00F2  0840               	movf	can_receive@rx_buf+1,w
  3922  00F3  00BC               	movwf	??_can_receive+3
  3923  00F4  01BD               	clrf	??_can_receive+4
  3924  00F5  35BC               	lslf	??_can_receive+3,f
  3925  00F6  0DBD               	rlf	??_can_receive+4,f
  3926  00F7  35BC               	lslf	??_can_receive+3,f
  3927  00F8  0DBD               	rlf	??_can_receive+4,f
  3928  00F9  35BC               	lslf	??_can_receive+3,f
  3929  00FA  0DBD               	rlf	??_can_receive+4,f
  3930  00FB  083A               	movf	??_can_receive+1,w
  3931  00FC  073C               	addwf	??_can_receive+3,w
  3932  00FD  00CF               	movwf	can_receive@sid
  3933  00FE  083B               	movf	??_can_receive+2,w
  3934  00FF  3D3D               	addwfc	??_can_receive+4,w
  3935  0100  00D0               	movwf	can_receive@sid+1
  3936                           
  3937                           ;main.c: 104: sid = sid & 0b0000011111111111;
  3938  0101  30FF               	movlw	255
  3939  0102  054F               	andwf	can_receive@sid,w
  3940  0103  00CF               	movwf	can_receive@sid
  3941  0104  3007               	movlw	7
  3942  0105  0550               	andwf	can_receive@sid+1,w
  3943  0106  00D0               	movwf	can_receive@sid+1
  3944                           
  3945                           ;main.c: 105: rx_buf[6+dlc] = '\0';
  3946  0107  084E               	movf	can_receive@dlc,w
  3947  0108  3E06               	addlw	6
  3948  0109  3E3F               	addlw	(low (can_receive@rx_buf| 0))& (0+255)
  3949  010A  0086               	movwf	6
  3950  010B  0187               	clrf	7
  3951  010C  0181               	clrf	1
  3952                           
  3953                           ;main.c: 107: if (mode.debug) {
  3954  010D  085F               	movf	_mode,w
  3955  010E  1903               	btfsc	3,2
  3956  010F  2967               	goto	l1980
  3957                           
  3958                           ;main.c: 108: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  3959  0110  3028               	movlw	low (STR_3| (0+32768))
  3960  0111  00A0               	movwf	printf@f
  3961  0112  3092               	movlw	high (STR_3| (0+32768))
  3962  0113  00A1               	movwf	printf@f+1
  3963  0114  0852               	movf	can_receive@n,w
  3964  0115  00B9               	movwf	??_can_receive
  3965  0116  01BA               	clrf	??_can_receive+1
  3966  0117  0839               	movf	??_can_receive,w
  3967  0118  00A2               	movwf	?_printf+2
  3968  0119  083A               	movf	??_can_receive+1,w
  3969  011A  00A3               	movwf	?_printf+3
  3970  011B  0840               	movf	can_receive@rx_buf+1,w
  3971  011C  00BB               	movwf	??_can_receive+2
  3972  011D  01BC               	clrf	??_can_receive+3
  3973  011E  083B               	movf	??_can_receive+2,w
  3974  011F  00A4               	movwf	?_printf+4
  3975  0120  083C               	movf	??_can_receive+3,w
  3976  0121  00A5               	movwf	?_printf+5
  3977  0122  3182  22D7  3180   	fcall	_printf
  3978                           
  3979                           ;main.c: 109: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  3980  0125  306C               	movlw	low (STR_4| (0+32768))
  3981  0126  0020               	movlb	0	; select bank0
  3982  0127  00A0               	movwf	printf@f
  3983  0128  3092               	movlw	high (STR_4| (0+32768))
  3984  0129  00A1               	movwf	printf@f+1
  3985  012A  0852               	movf	can_receive@n,w
  3986  012B  00B9               	movwf	??_can_receive
  3987  012C  01BA               	clrf	??_can_receive+1
  3988  012D  0839               	movf	??_can_receive,w
  3989  012E  00A2               	movwf	?_printf+2
  3990  012F  083A               	movf	??_can_receive+1,w
  3991  0130  00A3               	movwf	?_printf+3
  3992  0131  0841               	movf	can_receive@rx_buf+2,w
  3993  0132  00BB               	movwf	??_can_receive+2
  3994  0133  01BC               	clrf	??_can_receive+3
  3995  0134  083B               	movf	??_can_receive+2,w
  3996  0135  00A4               	movwf	?_printf+4
  3997  0136  083C               	movf	??_can_receive+3,w
  3998  0137  00A5               	movwf	?_printf+5
  3999  0138  3182  22D7  3180   	fcall	_printf
  4000                           
  4001                           ;main.c: 110: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  4002  013B  30B0               	movlw	low (STR_5| (0+32768))
  4003  013C  0020               	movlb	0	; select bank0
  4004  013D  00A0               	movwf	printf@f
  4005  013E  3092               	movlw	high (STR_5| (0+32768))
  4006  013F  00A1               	movwf	printf@f+1
  4007  0140  0852               	movf	can_receive@n,w
  4008  0141  00B9               	movwf	??_can_receive
  4009  0142  01BA               	clrf	??_can_receive+1
  4010  0143  0839               	movf	??_can_receive,w
  4011  0144  00A2               	movwf	?_printf+2
  4012  0145  083A               	movf	??_can_receive+1,w
  4013  0146  00A3               	movwf	?_printf+3
  4014  0147  0844               	movf	can_receive@rx_buf+5,w
  4015  0148  00BB               	movwf	??_can_receive+2
  4016  0149  01BC               	clrf	??_can_receive+3
  4017  014A  083B               	movf	??_can_receive+2,w
  4018  014B  00A4               	movwf	?_printf+4
  4019  014C  083C               	movf	??_can_receive+3,w
  4020  014D  00A5               	movwf	?_printf+5
  4021  014E  3182  22D7  3180   	fcall	_printf
  4022                           
  4023                           ;main.c: 111: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  4024  0151  30C0               	movlw	low (STR_6| (0+32768))
  4025  0152  0020               	movlb	0	; select bank0
  4026  0153  00A0               	movwf	printf@f
  4027  0154  3092               	movlw	high (STR_6| (0+32768))
  4028  0155  00A1               	movwf	printf@f+1
  4029  0156  0852               	movf	can_receive@n,w
  4030  0157  00B9               	movwf	??_can_receive
  4031  0158  01BA               	clrf	??_can_receive+1
  4032  0159  0839               	movf	??_can_receive,w
  4033  015A  00A2               	movwf	?_printf+2
  4034  015B  083A               	movf	??_can_receive+1,w
  4035  015C  00A3               	movwf	?_printf+3
  4036  015D  0845               	movf	can_receive@rx_buf+6,w
  4037  015E  00BB               	movwf	??_can_receive+2
  4038  015F  01BC               	clrf	??_can_receive+3
  4039  0160  083B               	movf	??_can_receive+2,w
  4040  0161  00A4               	movwf	?_printf+4
  4041  0162  083C               	movf	??_can_receive+3,w
  4042  0163  00A5               	movwf	?_printf+5
  4043  0164  3182  22D7  3180   	fcall	_printf
  4044  0167                     l1980:	
  4045                           
  4046                           ;main.c: 112: }
  4047                           ;main.c: 127: uint8_t *rx_buf_ptr = &rx_buf[6];
  4048  0167  3045               	movlw	(low ((can_receive@rx_buf| 0+6)))& (0+255)
  4049  0168  0020               	movlb	0	; select bank0
  4050  0169  00B9               	movwf	??_can_receive
  4051  016A  0839               	movf	??_can_receive,w
  4052  016B  00D1               	movwf	can_receive@rx_buf_ptr
  4053                           
  4054                           ;main.c: 128: if (mode.verbose) {
  4055  016C  0860               	movf	_mode+1,w
  4056  016D  1903               	btfsc	3,2
  4057  016E  297B               	goto	l1990
  4058                           
  4059                           ;main.c: 129: if (mode.with_sid) {
  4060  016F  0862               	movf	_mode+3,w
  4061  0170  1903               	btfsc	3,2
  4062  0171  2976               	goto	l1988
  4063                           
  4064                           ;main.c: 130: printf("Message received: %d,%s\n", sid, rx_buf_ptr);
  4065  0172  3054               	movlw	low (STR_7| (0+32768))
  4066  0173  00A0               	movwf	printf@f
  4067  0174  3091               	movlw	high (STR_7| (0+32768))
  4068  0175  2982               	goto	L12
  4069  0176                     l1988:	
  4070                           ;main.c: 131: } else {
  4071                           
  4072                           
  4073                           ;main.c: 132: printf("Message received: %s\n", rx_buf_ptr);
  4074  0176  30B1               	movlw	low (STR_8| (0+32768))
  4075  0177  0020               	movlb	0	; select bank0
  4076  0178  00A0               	movwf	printf@f
  4077  0179  3091               	movlw	high (STR_8| (0+32768))
  4078  017A  2990               	goto	L13
  4079  017B                     l1990:	
  4080                           ;main.c: 133: }
  4081                           ;main.c: 134: } else {
  4082                           
  4083                           
  4084                           ;main.c: 135: if (mode.with_sid) {
  4085  017B  0020               	movlb	0	; select bank0
  4086  017C  0862               	movf	_mode+3,w
  4087  017D  1903               	btfsc	3,2
  4088  017E  298C               	goto	l1994
  4089                           
  4090                           ;main.c: 136: printf("%d,%s\n", sid, rx_buf_ptr);
  4091  017F  3066               	movlw	low ((STR_7+18)| (0+32768))
  4092  0180  00A0               	movwf	printf@f
  4093  0181  3091               	movlw	high ((STR_7+18)| (0+32768))
  4094  0182                     L12:	
  4095  0182  00A1               	movwf	printf@f+1
  4096  0183  0850               	movf	can_receive@sid+1,w
  4097  0184  00A3               	movwf	?_printf+3
  4098  0185  084F               	movf	can_receive@sid,w
  4099  0186  00A2               	movwf	?_printf+2
  4100  0187  0851               	movf	can_receive@rx_buf_ptr,w
  4101  0188  00B9               	movwf	??_can_receive
  4102  0189  0839               	movf	??_can_receive,w
  4103  018A  00A4               	movwf	low ((?_printf| 0+4))
  4104  018B  2995               	goto	L11
  4105  018C                     l1994:	
  4106                           ;main.c: 137: } else {
  4107                           
  4108                           
  4109                           ;main.c: 138: printf("%s\n", rx_buf_ptr);
  4110  018C  30C3               	movlw	low ((STR_8+18)| (0+32768))
  4111  018D  0020               	movlb	0	; select bank0
  4112  018E  00A0               	movwf	printf@f
  4113  018F  3091               	movlw	high ((STR_8+18)| (0+32768))
  4114  0190                     L13:	
  4115  0190  00A1               	movwf	printf@f+1
  4116  0191  0851               	movf	can_receive@rx_buf_ptr,w
  4117  0192  00B9               	movwf	??_can_receive
  4118  0193  0839               	movf	??_can_receive,w
  4119  0194  00A2               	movwf	low ((?_printf| 0+2))
  4120  0195                     L11:	
  4121  0195  3182  22D7  3180   	fcall	_printf
  4122                           
  4123                           ;main.c: 139: }
  4124                           ;main.c: 140: }
  4125                           ;main.c: 141: LATCbits.LATC3 = !LATCbits.LATC3;
  4126  0198  1003               	clrc
  4127  0199  0022               	movlb	2	; select bank2
  4128  019A  1D8E               	btfss	14,3	;volatile
  4129  019B  1403               	setc
  4130  019C  1C03               	btfss	3,0
  4131  019D  29A1               	goto	u1870
  4132  019E  0022               	movlb	2	; select bank2
  4133  019F  158E               	bsf	14,3	;volatile
  4134  01A0  0008               	return
  4135  01A1                     u1870:	
  4136  01A1  0022               	movlb	2	; select bank2
  4137  01A2  118E               	bcf	14,3	;volatile
  4138  01A3  0008               	return
  4139  01A4                     __end_of_can_receive:	
  4140                           
  4141                           	psect	text5
  4142  01A4                     __ptext5:	
  4143 ;; *************** function _can_send *****************
  4144 ;; Defined at:
  4145 ;;		line 147 in file "main.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  buf             1    wreg     PTR unsigned char 
  4148 ;;		 -> buf(9), 
  4149 ;;  dlc             1   25[BANK0 ] unsigned char 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  buf             1   46[BANK0 ] PTR unsigned char 
  4152 ;;		 -> buf(9), 
  4153 ;;  txb_ctrl_buf    1   49[BANK0 ] unsigned char [1]
  4154 ;;  tx_buf         14   30[BANK0 ] unsigned char [14]
  4155 ;;  debug_buf       3   51[BANK0 ] unsigned char [3]
  4156 ;;  can_status_b    2   44[BANK0 ] unsigned char [2]
  4157 ;;  n               1   55[BANK0 ] unsigned char 
  4158 ;;  i               1   54[BANK0 ] unsigned char 
  4159 ;;  status          1   50[BANK0 ] unsigned char 
  4160 ;;  bytes_writte    1   48[BANK0 ] unsigned char 
  4161 ;;  len             1   47[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      unsigned char 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:       31 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    3
  4178 ;; This function calls:
  4179 ;;		_SPI_exchange
  4180 ;;		_printf
  4181 ;; This function is called by:
  4182 ;;		_main
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           
  4187                           ;psect for function _can_send
  4188  01A4                     _can_send:	
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4192                           ;can_send@buf stored from wreg
  4193  01A4  0020               	movlb	0	; select bank0
  4194  01A5  00CE               	movwf	can_send@buf
  4195                           
  4196                           ;main.c: 148: uint8_t i;
  4197                           ;main.c: 149: uint8_t n = 0;
  4198  01A6  01D7               	clrf	can_send@n
  4199                           
  4200                           ;main.c: 151: uint8_t can_status_buf[2] = {0b10100000, 0x00};
  4201  01A7  0868               	movf	can_send@F2958+1,w
  4202  01A8  00CD               	movwf	can_send@can_status_buf+1
  4203  01A9  0867               	movf	can_send@F2958,w
  4204  01AA  00CC               	movwf	can_send@can_status_buf
  4205                           
  4206                           ;main.c: 152: uint8_t bytes_written = SPI_exchange(can_status_buf, 2);
  4207  01AB  3002               	movlw	2
  4208  01AC  00BA               	movwf	??_can_send
  4209  01AD  083A               	movf	??_can_send,w
  4210  01AE  00F8               	movwf	SPI_exchange@len
  4211  01AF  304C               	movlw	(low (can_send@can_status_buf| 0))& (0+255)
  4212  01B0  318E  2669  3181   	fcall	_SPI_exchange
  4213  01B3  0020               	movlb	0	; select bank0
  4214  01B4  00BB               	movwf	??_can_send+1
  4215  01B5  083B               	movf	??_can_send+1,w
  4216  01B6  00D0               	movwf	can_send@bytes_written
  4217                           
  4218                           ;main.c: 153: uint8_t status = can_status_buf[1];
  4219  01B7  084D               	movf	can_send@can_status_buf+1,w
  4220  01B8  00BA               	movwf	??_can_send
  4221  01B9  083A               	movf	??_can_send,w
  4222  01BA  00D2               	movwf	can_send@status
  4223                           
  4224                           ;main.c: 154: if ((status & 0b00000100) == 0) {
  4225  01BB  1952               	btfsc	can_send@status,2
  4226  01BC  29CA               	goto	l211
  4227                           
  4228                           ;main.c: 155: if (mode.debug) printf("TXB0 is idle\n");
  4229  01BD  085F               	movf	_mode,w
  4230  01BE  1903               	btfsc	3,2
  4231  01BF  29C7               	goto	l2048
  4232  01C0  30DE               	movlw	low (STR_11| (0+32768))
  4233  01C1  00A0               	movwf	printf@f
  4234  01C2  3092               	movlw	high (STR_11| (0+32768))
  4235  01C3  00A1               	movwf	printf@f+1
  4236  01C4  3182  22D7  3181   	fcall	_printf
  4237  01C7                     l2048:	
  4238                           
  4239                           ;main.c: 156: n = 0;
  4240  01C7  0020               	movlb	0	; select bank0
  4241  01C8  01D7               	clrf	can_send@n
  4242                           
  4243                           ;main.c: 157: } else if ((status & 0b00010000) == 0) {
  4244  01C9  29EB               	goto	l2062
  4245  01CA                     l211:	
  4246  01CA  1A52               	btfsc	can_send@status,4
  4247  01CB  29DA               	goto	l214
  4248                           
  4249                           ;main.c: 158: if (mode.debug) printf("TXB1 is idle\n");
  4250  01CC  085F               	movf	_mode,w
  4251  01CD  1903               	btfsc	3,2
  4252  01CE  29D6               	goto	l2054
  4253  01CF  30EC               	movlw	low (STR_12| (0+32768))
  4254  01D0  00A0               	movwf	printf@f
  4255  01D1  3092               	movlw	high (STR_12| (0+32768))
  4256  01D2  00A1               	movwf	printf@f+1
  4257  01D3  3182  22D7  3181   	fcall	_printf
  4258  01D6                     l2054:	
  4259                           
  4260                           ;main.c: 159: n = 1;
  4261  01D6  0020               	movlb	0	; select bank0
  4262  01D7  01D7               	clrf	can_send@n
  4263  01D8  0AD7               	incf	can_send@n,f
  4264                           
  4265                           ;main.c: 160: } else if ((status & 0b01000000) > 0) {
  4266  01D9  29EB               	goto	l2062
  4267  01DA                     l214:	
  4268  01DA  1F52               	btfss	can_send@status,6
  4269  01DB  29EB               	goto	l2062
  4270                           
  4271                           ;main.c: 161: if (mode.debug) printf("TXB2 is idle\n");
  4272  01DC  085F               	movf	_mode,w
  4273  01DD  1903               	btfsc	3,2
  4274  01DE  29E6               	goto	l2060
  4275  01DF  30FA               	movlw	low (STR_13| (0+32768))
  4276  01E0  00A0               	movwf	printf@f
  4277  01E1  3092               	movlw	high (STR_13| (0+32768))
  4278  01E2  00A1               	movwf	printf@f+1
  4279  01E3  3182  22D7  3181   	fcall	_printf
  4280  01E6                     l2060:	
  4281                           
  4282                           ;main.c: 162: n = 2;
  4283  01E6  3002               	movlw	2
  4284  01E7  0020               	movlb	0	; select bank0
  4285  01E8  00BA               	movwf	??_can_send
  4286  01E9  083A               	movf	??_can_send,w
  4287  01EA  00D7               	movwf	can_send@n
  4288  01EB                     l2062:	
  4289                           
  4290                           ;main.c: 163: }
  4291                           ;main.c: 167: uint8_t tx_buf[14];
  4292                           ;main.c: 170: tx_buf[0] = 0b01000000 + abc[n];
  4293  01EB  0857               	movf	can_send@n,w
  4294  01EC  3E44               	addlw	low (_abc| (0+32768))
  4295  01ED  0084               	movwf	4
  4296  01EE  3093               	movlw	high (_abc| (0+32768))
  4297  01EF  1803               	skipnc
  4298  01F0  3E01               	addlw	1
  4299  01F1  0085               	movwf	5
  4300  01F2  0800               	movf	0,w	;code access
  4301  01F3  3E40               	addlw	64
  4302  01F4  00BA               	movwf	??_can_send
  4303  01F5  083A               	movf	??_can_send,w
  4304  01F6  00BE               	movwf	can_send@tx_buf
  4305                           
  4306                           ;main.c: 172: tx_buf[1] = sid.sidh;
  4307  01F7  0863               	movf	_sid,w
  4308  01F8  00BA               	movwf	??_can_send
  4309  01F9  083A               	movf	??_can_send,w
  4310  01FA  00BF               	movwf	can_send@tx_buf+1
  4311                           
  4312                           ;main.c: 174: tx_buf[2] = sid.sidl;
  4313  01FB  0864               	movf	_sid+1,w
  4314  01FC  00BA               	movwf	??_can_send
  4315  01FD  083A               	movf	??_can_send,w
  4316  01FE  00C0               	movwf	can_send@tx_buf+2
  4317                           
  4318                           ;main.c: 176: tx_buf[3] = 0;
  4319  01FF  01C1               	clrf	can_send@tx_buf+3
  4320                           
  4321                           ;main.c: 178: tx_buf[4] = 0;
  4322  0200  01C2               	clrf	can_send@tx_buf+4
  4323                           
  4324                           ;main.c: 180: tx_buf[5] = dlc;
  4325  0201  0839               	movf	can_send@dlc,w
  4326  0202  00BA               	movwf	??_can_send
  4327  0203  083A               	movf	??_can_send,w
  4328  0204  00C3               	movwf	can_send@tx_buf+5
  4329                           
  4330                           ;main.c: 183: for(i=0; i<dlc; i++) {
  4331  0205  01D6               	clrf	can_send@i
  4332  0206                     l2084:	
  4333  0206  0839               	movf	can_send@dlc,w
  4334  0207  0256               	subwf	can_send@i,w
  4335  0208  1803               	btfsc	3,0
  4336  0209  2A35               	goto	l2086
  4337                           
  4338                           ;main.c: 184: tx_buf[6+i] = buf[i];
  4339  020A  0856               	movf	can_send@i,w
  4340  020B  074E               	addwf	can_send@buf,w
  4341  020C  00BA               	movwf	??_can_send
  4342  020D  083A               	movf	??_can_send,w
  4343  020E  0086               	movwf	6
  4344  020F  0187               	clrf	7
  4345  0210  0801               	movf	1,w
  4346  0211  00BB               	movwf	??_can_send+1
  4347  0212  0856               	movf	can_send@i,w
  4348  0213  3E06               	addlw	6
  4349  0214  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4350  0215  0086               	movwf	6
  4351  0216  0187               	clrf	7
  4352  0217  083B               	movf	??_can_send+1,w
  4353  0218  0081               	movwf	1
  4354                           
  4355                           ;main.c: 185: if (mode.debug) printf("Copying buffer: %c\n", tx_buf[6+i]);
  4356  0219  085F               	movf	_mode,w
  4357  021A  1903               	btfsc	3,2
  4358  021B  2A2F               	goto	l2082
  4359  021C  30DC               	movlw	low (STR_14| (0+32768))
  4360  021D  00A0               	movwf	printf@f
  4361  021E  3091               	movlw	high (STR_14| (0+32768))
  4362  021F  00A1               	movwf	printf@f+1
  4363  0220  0856               	movf	can_send@i,w
  4364  0221  3E06               	addlw	6
  4365  0222  3E3E               	addlw	(low (can_send@tx_buf| 0))& (0+255)
  4366  0223  0086               	movwf	6
  4367  0224  0187               	clrf	7
  4368  0225  0801               	movf	1,w
  4369  0226  00BA               	movwf	??_can_send
  4370  0227  01BB               	clrf	??_can_send+1
  4371  0228  083A               	movf	??_can_send,w
  4372  0229  00A2               	movwf	?_printf+2
  4373  022A  083B               	movf	??_can_send+1,w
  4374  022B  00A3               	movwf	?_printf+3
  4375  022C  3182  22D7  3181   	fcall	_printf
  4376  022F                     l2082:	
  4377  022F  3001               	movlw	1
  4378  0230  0020               	movlb	0	; select bank0
  4379  0231  00BA               	movwf	??_can_send
  4380  0232  083A               	movf	??_can_send,w
  4381  0233  07D6               	addwf	can_send@i,f
  4382  0234  2A06               	goto	l2084
  4383  0235                     l2086:	
  4384                           
  4385                           ;main.c: 186: }
  4386                           ;main.c: 189: uint8_t len = 6 + dlc;
  4387  0235  0839               	movf	can_send@dlc,w
  4388  0236  3E06               	addlw	6
  4389  0237  00BA               	movwf	??_can_send
  4390  0238  083A               	movf	??_can_send,w
  4391  0239  00CF               	movwf	can_send@len
  4392                           
  4393                           ;main.c: 190: uint8_t bytes_written = SPI_exchange(tx_buf, len);
  4394  023A  084F               	movf	can_send@len,w
  4395  023B  00BA               	movwf	??_can_send
  4396  023C  083A               	movf	??_can_send,w
  4397  023D  00F8               	movwf	SPI_exchange@len
  4398  023E  303E               	movlw	(low (can_send@tx_buf| 0))& (0+255)
  4399  023F  318E  2669  3181   	fcall	_SPI_exchange
  4400  0242  0020               	movlb	0	; select bank0
  4401  0243  00BB               	movwf	??_can_send+1
  4402  0244  083B               	movf	??_can_send+1,w
  4403  0245  00D0               	movwf	can_send@bytes_written
  4404                           
  4405                           ;main.c: 192: uint8_t debug_buf[3];
  4406                           ;main.c: 193: debug_buf[0] = 0b00000011;
  4407  0246  3003               	movlw	3
  4408  0247  00BA               	movwf	??_can_send
  4409  0248  083A               	movf	??_can_send,w
  4410  0249  00D3               	movwf	can_send@debug_buf
  4411                           
  4412                           ;main.c: 194: debug_buf[1] = txbnsidh[n];
  4413  024A  0857               	movf	can_send@n,w
  4414  024B  3E41               	addlw	low (_txbnsidh| (0+32768))
  4415  024C  0084               	movwf	4
  4416  024D  3093               	movlw	high (_txbnsidh| (0+32768))
  4417  024E  1803               	skipnc
  4418  024F  3E01               	addlw	1
  4419  0250  0085               	movwf	5
  4420  0251  0800               	movf	0,w	;code access
  4421  0252  00BA               	movwf	??_can_send
  4422  0253  083A               	movf	??_can_send,w
  4423  0254  00D4               	movwf	can_send@debug_buf+1
  4424                           
  4425                           ;main.c: 195: debug_buf[2] = 0x00;
  4426  0255  01D5               	clrf	can_send@debug_buf+2
  4427                           
  4428                           ;main.c: 196: SPI_exchange(debug_buf, 3);
  4429  0256  3003               	movlw	3
  4430  0257  00BA               	movwf	??_can_send
  4431  0258  083A               	movf	??_can_send,w
  4432  0259  00F8               	movwf	SPI_exchange@len
  4433  025A  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4434  025B  318E  2669  3181   	fcall	_SPI_exchange
  4435                           
  4436                           ;main.c: 198: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, debug_buf[2]);
  4437  025E  0020               	movlb	0	; select bank0
  4438  025F  085F               	movf	_mode,w
  4439  0260  1903               	btfsc	3,2
  4440  0261  2A77               	goto	l2102
  4441  0262  3039               	movlw	low (STR_15| (0+32768))
  4442  0263  00A0               	movwf	printf@f
  4443  0264  3092               	movlw	high (STR_15| (0+32768))
  4444  0265  00A1               	movwf	printf@f+1
  4445  0266  0857               	movf	can_send@n,w
  4446  0267  00BA               	movwf	??_can_send
  4447  0268  01BB               	clrf	??_can_send+1
  4448  0269  083A               	movf	??_can_send,w
  4449  026A  00A2               	movwf	?_printf+2
  4450  026B  083B               	movf	??_can_send+1,w
  4451  026C  00A3               	movwf	?_printf+3
  4452  026D  0855               	movf	can_send@debug_buf+2,w
  4453  026E  00BC               	movwf	??_can_send+2
  4454  026F  01BD               	clrf	??_can_send+3
  4455  0270  083C               	movf	??_can_send+2,w
  4456  0271  00A4               	movwf	?_printf+4
  4457  0272  083D               	movf	??_can_send+3,w
  4458  0273  00A5               	movwf	?_printf+5
  4459  0274  3182  22D7  3181   	fcall	_printf
  4460  0277                     l2102:	
  4461                           
  4462                           ;main.c: 199: debug_buf[0] = 0b00000011;
  4463  0277  3003               	movlw	3
  4464  0278  0020               	movlb	0	; select bank0
  4465  0279  00BA               	movwf	??_can_send
  4466  027A  083A               	movf	??_can_send,w
  4467  027B  00D3               	movwf	can_send@debug_buf
  4468                           
  4469                           ;main.c: 200: debug_buf[1] = txbnsidh[n] + 1;
  4470  027C  0857               	movf	can_send@n,w
  4471  027D  3E41               	addlw	low (_txbnsidh| (0+32768))
  4472  027E  0084               	movwf	4
  4473  027F  3093               	movlw	high (_txbnsidh| (0+32768))
  4474  0280  1803               	skipnc
  4475  0281  3E01               	addlw	1
  4476  0282  0085               	movwf	5
  4477  0283  0800               	movf	0,w	;code access
  4478  0284  3E01               	addlw	1
  4479  0285  00BA               	movwf	??_can_send
  4480  0286  083A               	movf	??_can_send,w
  4481  0287  00D4               	movwf	can_send@debug_buf+1
  4482                           
  4483                           ;main.c: 201: debug_buf[2] = 0x00;
  4484  0288  01D5               	clrf	can_send@debug_buf+2
  4485                           
  4486                           ;main.c: 202: SPI_exchange(debug_buf, 3);
  4487  0289  3003               	movlw	3
  4488  028A  00BA               	movwf	??_can_send
  4489  028B  083A               	movf	??_can_send,w
  4490  028C  00F8               	movwf	SPI_exchange@len
  4491  028D  3053               	movlw	(low (can_send@debug_buf| 0))& (0+255)
  4492  028E  318E  2669  3181   	fcall	_SPI_exchange
  4493                           
  4494                           ;main.c: 204: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, debug_buf[2]);
  4495  0291  0020               	movlb	0	; select bank0
  4496  0292  085F               	movf	_mode,w
  4497  0293  1903               	btfsc	3,2
  4498  0294  2AAA               	goto	l2114
  4499  0295  307D               	movlw	low (STR_16| (0+32768))
  4500  0296  00A0               	movwf	printf@f
  4501  0297  3092               	movlw	high (STR_16| (0+32768))
  4502  0298  00A1               	movwf	printf@f+1
  4503  0299  0857               	movf	can_send@n,w
  4504  029A  00BA               	movwf	??_can_send
  4505  029B  01BB               	clrf	??_can_send+1
  4506  029C  083A               	movf	??_can_send,w
  4507  029D  00A2               	movwf	?_printf+2
  4508  029E  083B               	movf	??_can_send+1,w
  4509  029F  00A3               	movwf	?_printf+3
  4510  02A0  0855               	movf	can_send@debug_buf+2,w
  4511  02A1  00BC               	movwf	??_can_send+2
  4512  02A2  01BD               	clrf	??_can_send+3
  4513  02A3  083C               	movf	??_can_send+2,w
  4514  02A4  00A4               	movwf	?_printf+4
  4515  02A5  083D               	movf	??_can_send+3,w
  4516  02A6  00A5               	movwf	?_printf+5
  4517  02A7  3182  22D7  3181   	fcall	_printf
  4518  02AA                     l2114:	
  4519                           
  4520                           ;main.c: 206: if (bytes_written == len) {
  4521  02AA  0020               	movlb	0	; select bank0
  4522  02AB  0850               	movf	can_send@bytes_written,w
  4523  02AC  064F               	xorwf	can_send@len,w
  4524  02AD  1D03               	skipz
  4525  02AE  2AD5               	goto	l2128
  4526                           
  4527                           ;main.c: 208: uint8_t txb_ctrl_buf[1];
  4528                           ;main.c: 209: txb_ctrl_buf[0] = 0b10000000 + (0b00000001 << n);
  4529  02AF  3001               	movlw	1
  4530  02B0  00BA               	movwf	??_can_send
  4531  02B1  0A57               	incf	can_send@n,w
  4532  02B2  2AB4               	goto	u2064
  4533  02B3                     u2065:	
  4534  02B3  35BA               	lslf	??_can_send,f
  4535  02B4                     u2064:	
  4536  02B4  0B89               	decfsz	9,f
  4537  02B5  2AB3               	goto	u2065
  4538  02B6  083A               	movf	??_can_send,w
  4539  02B7  3E80               	addlw	128
  4540  02B8  00BB               	movwf	??_can_send+1
  4541  02B9  083B               	movf	??_can_send+1,w
  4542  02BA  00D1               	movwf	can_send@txb_ctrl_buf
  4543                           
  4544                           ;main.c: 210: bytes_written = SPI_exchange(txb_ctrl_buf, 1);
  4545  02BB  01F8               	clrf	SPI_exchange@len
  4546  02BC  0AF8               	incf	SPI_exchange@len,f
  4547  02BD  3051               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  4548  02BE  318E  2669  3181   	fcall	_SPI_exchange
  4549  02C1  0020               	movlb	0	; select bank0
  4550  02C2  00BA               	movwf	??_can_send
  4551  02C3  083A               	movf	??_can_send,w
  4552  02C4  00D0               	movwf	can_send@bytes_written
  4553                           
  4554                           ;main.c: 211: if (bytes_written == 1) {
  4555  02C5  0350               	decf	can_send@bytes_written,w
  4556  02C6  1D03               	btfss	3,2
  4557  02C7  2AD5               	goto	l2128
  4558                           
  4559                           ;main.c: 212: LATCbits.LATC3 = !LATCbits.LATC3;
  4560  02C8  1003               	clrc
  4561  02C9  0022               	movlb	2	; select bank2
  4562  02CA  1D8E               	btfss	14,3	;volatile
  4563  02CB  1403               	setc
  4564  02CC  1C03               	btfss	3,0
  4565  02CD  2AD1               	goto	u2080
  4566  02CE  0022               	movlb	2	; select bank2
  4567  02CF  158E               	bsf	14,3	;volatile
  4568  02D0  2AD3               	goto	l2124
  4569  02D1                     u2080:	
  4570  02D1  0022               	movlb	2	; select bank2
  4571  02D2  118E               	bcf	14,3	;volatile
  4572  02D3                     l2124:	
  4573                           
  4574                           ;main.c: 213: return 1;
  4575  02D3  3001               	movlw	1
  4576  02D4  0008               	return
  4577  02D5                     l2128:	
  4578                           
  4579                           ;main.c: 214: }
  4580                           ;main.c: 215: }
  4581                           ;main.c: 217: return 0;
  4582  02D5  3000               	movlw	0
  4583  02D6  0008               	return
  4584  02D7                     __end_of_can_send:	
  4585                           
  4586                           	psect	text6
  4587  0F73                     __ptext6:	
  4588 ;; *************** function _can_ope_mode *****************
  4589 ;; Defined at:
  4590 ;;		line 55 in file "main.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  ope_mode        1    wreg     unsigned char 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  ope_mode        1   27[BANK0 ] unsigned char 
  4595 ;;  can_ctrl_buf    3   29[BANK0 ] unsigned char [3]
  4596 ;;  bytes_writte    1   28[BANK0 ] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      unsigned char 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;Total ram usage:        7 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    3
  4613 ;; This function calls:
  4614 ;;		_SPI_exchange
  4615 ;;		_printf
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _can_ope_mode
  4623  0F73                     _can_ope_mode:	
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4627                           ;can_ope_mode@ope_mode stored from wreg
  4628  0F73  0020               	movlb	0	; select bank0
  4629  0F74  00BB               	movwf	can_ope_mode@ope_mode
  4630                           
  4631                           ;main.c: 56: uint8_t can_ctrl_buf[3];
  4632                           ;main.c: 57: can_ctrl_buf[0] = 0b00000010;
  4633  0F75  3002               	movlw	2
  4634  0F76  00B9               	movwf	??_can_ope_mode
  4635  0F77  0839               	movf	??_can_ope_mode,w
  4636  0F78  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4637                           
  4638                           ;main.c: 58: can_ctrl_buf[1] = 0x0f;
  4639  0F79  300F               	movlw	15
  4640  0F7A  00B9               	movwf	??_can_ope_mode
  4641  0F7B  0839               	movf	??_can_ope_mode,w
  4642  0F7C  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4643                           
  4644                           ;main.c: 59: can_ctrl_buf[2] = ope_mode;
  4645  0F7D  083B               	movf	can_ope_mode@ope_mode,w
  4646  0F7E  00B9               	movwf	??_can_ope_mode
  4647  0F7F  0839               	movf	??_can_ope_mode,w
  4648  0F80  00BF               	movwf	can_ope_mode@can_ctrl_buf+2
  4649                           
  4650                           ;main.c: 60: uint8_t bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4651  0F81  3003               	movlw	3
  4652  0F82  00B9               	movwf	??_can_ope_mode
  4653  0F83  0839               	movf	??_can_ope_mode,w
  4654  0F84  00F8               	movwf	SPI_exchange@len
  4655  0F85  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4656  0F86  318E  2669  318F   	fcall	_SPI_exchange
  4657  0F89  0020               	movlb	0	; select bank0
  4658  0F8A  00BA               	movwf	??_can_ope_mode+1
  4659  0F8B  083A               	movf	??_can_ope_mode+1,w
  4660  0F8C  00BC               	movwf	can_ope_mode@bytes_written
  4661                           
  4662                           ;main.c: 61: if (bytes_written == 3) {
  4663  0F8D  3003               	movlw	3
  4664  0F8E  063C               	xorwf	can_ope_mode@bytes_written,w
  4665  0F8F  1D03               	btfss	3,2
  4666  0F90  0008               	return
  4667                           
  4668                           ;main.c: 62: can_ctrl_buf[0] = 0b00000011;
  4669  0F91  3003               	movlw	3
  4670  0F92  00B9               	movwf	??_can_ope_mode
  4671  0F93  0839               	movf	??_can_ope_mode,w
  4672  0F94  00BD               	movwf	can_ope_mode@can_ctrl_buf
  4673                           
  4674                           ;main.c: 63: can_ctrl_buf[1] = 0x0e;
  4675  0F95  300E               	movlw	14
  4676  0F96  00B9               	movwf	??_can_ope_mode
  4677  0F97  0839               	movf	??_can_ope_mode,w
  4678  0F98  00BE               	movwf	can_ope_mode@can_ctrl_buf+1
  4679                           
  4680                           ;main.c: 64: bytes_written = SPI_exchange(can_ctrl_buf, 3);
  4681  0F99  3003               	movlw	3
  4682  0F9A  00B9               	movwf	??_can_ope_mode
  4683  0F9B  0839               	movf	??_can_ope_mode,w
  4684  0F9C  00F8               	movwf	SPI_exchange@len
  4685  0F9D  303D               	movlw	(low (can_ope_mode@can_ctrl_buf| 0))& (0+255)
  4686  0F9E  318E  2669  318F   	fcall	_SPI_exchange
  4687  0FA1  0020               	movlb	0	; select bank0
  4688  0FA2  00BA               	movwf	??_can_ope_mode+1
  4689  0FA3  083A               	movf	??_can_ope_mode+1,w
  4690  0FA4  00BC               	movwf	can_ope_mode@bytes_written
  4691                           
  4692                           ;main.c: 65: if (mode.debug) printf("CANSTAT: %02x\n", can_ctrl_buf[2]);
  4693  0FA5  085F               	movf	_mode,w
  4694  0FA6  1903               	btfsc	3,2
  4695  0FA7  0008               	return
  4696  0FA8  30CF               	movlw	low (STR_2| (0+32768))
  4697  0FA9  00A0               	movwf	printf@f
  4698  0FAA  3092               	movlw	high (STR_2| (0+32768))
  4699  0FAB  00A1               	movwf	printf@f+1
  4700  0FAC  083F               	movf	can_ope_mode@can_ctrl_buf+2,w
  4701  0FAD  00B9               	movwf	??_can_ope_mode
  4702  0FAE  01BA               	clrf	??_can_ope_mode+1
  4703  0FAF  0839               	movf	??_can_ope_mode,w
  4704  0FB0  00A2               	movwf	?_printf+2
  4705  0FB1  083A               	movf	??_can_ope_mode+1,w
  4706  0FB2  00A3               	movwf	?_printf+3
  4707  0FB3  3182  22D7         	fcall	_printf
  4708                           
  4709                           ;main.c: 68: return 0;
  4710                           ;	Return value of _can_ope_mode is never used
  4711                           
  4712                           ;main.c: 67: } else {
  4713                           
  4714                           ;main.c: 66: return 1;
  4715                           ;	Return value of _can_ope_mode is never used
  4716  0FB5  0008               	return
  4717  0FB6                     __end_of_can_ope_mode:	
  4718                           
  4719                           	psect	text7
  4720  02D7                     __ptext7:	
  4721 ;; *************** function _printf *****************
  4722 ;; Defined at:
  4723 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  4726 ;;		 -> STR_38(25), STR_37(19), STR_36(24), STR_35(18), 
  4727 ;;		 -> STR_34(22), STR_33(44), STR_32(26), STR_31(42), 
  4728 ;;		 -> STR_30(38), STR_29(54), STR_28(59), STR_27(51), 
  4729 ;;		 -> STR_26(23), STR_25(17), STR_24(17), STR_23(17), 
  4730 ;;		 -> STR_22(17), STR_21(23), STR_20(21), STR_19(3), 
  4731 ;;		 -> STR_18(13), STR_17(13), STR_16(17), STR_15(17), 
  4732 ;;		 -> STR_14(20), STR_13(14), STR_12(14), STR_11(14), 
  4733 ;;		 -> STR_10(4), STR_9(7), STR_8(22), STR_7(25), 
  4734 ;;		 -> STR_6(15), STR_5(16), STR_4(17), STR_3(17), 
  4735 ;;		 -> STR_2(15), STR_1(20), 
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  idx             1   12[BANK0 ] unsigned char 
  4738 ;;  tmpval          4    0        struct .
  4739 ;;  width           2   22[BANK0 ] int 
  4740 ;;  val             2   19[BANK0 ] unsigned int 
  4741 ;;  len             2   16[BANK0 ] unsigned int 
  4742 ;;  cp              2   14[BANK0 ] PTR const unsigned char 
  4743 ;;		 -> STR_39(7), printf@c(1), buf(9), can_receive@rx_buf(15), 
  4744 ;;  c               1   24[BANK0 ] char 
  4745 ;;  flag            1   21[BANK0 ] unsigned char 
  4746 ;;  ap              1   18[BANK0 ] PTR void [1]
  4747 ;;		 -> ?_printf(2), 
  4748 ;;  prec            1   13[BANK0 ] char 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  2    0[BANK0 ] int 
  4751 ;; Registers used:
  4752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4758 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;Total ram usage:       25 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    2
  4765 ;; This function calls:
  4766 ;;		___lwdiv
  4767 ;;		___lwmod
  4768 ;;		___wmul
  4769 ;;		_isdigit
  4770 ;;		_putch
  4771 ;; This function is called by:
  4772 ;;		_set_sid
  4773 ;;		_can_ope_mode
  4774 ;;		_can_receive
  4775 ;;		_can_send
  4776 ;;		_can_status_check
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _printf
  4783  02D7                     _printf:	
  4784                           
  4785                           ;doprnt.c: 466: va_list ap;
  4786                           ;doprnt.c: 499: signed char c;
  4787                           ;doprnt.c: 501: int width;
  4788                           ;doprnt.c: 506: signed char prec;
  4789                           ;doprnt.c: 508: unsigned char flag;
  4790                           ;doprnt.c: 523: union {
  4791                           ;doprnt.c: 524: unsigned long vd;
  4792                           ;doprnt.c: 525: double integ;
  4793                           ;doprnt.c: 526: } tmpval;
  4794                           ;doprnt.c: 528: unsigned int val;
  4795                           ;doprnt.c: 529: unsigned len;
  4796                           ;doprnt.c: 530: const char * cp;
  4797                           ;doprnt.c: 533: *ap = __va_start();
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4801  02D7  3022               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4802  02D8  0020               	movlb	0	; select bank0
  4803  02D9  00A8               	movwf	??_printf
  4804  02DA  0828               	movf	??_printf,w
  4805  02DB  00B2               	movwf	printf@ap
  4806  02DC                     l1902:	
  4807                           ;doprnt.c: 536: while(c = *f++) {
  4808                           
  4809  02DC  0020               	movlb	0	; select bank0
  4810  02DD  0821               	movf	printf@f+1,w
  4811  02DE  00A9               	movwf	??_printf+1
  4812  02DF  0820               	movf	printf@f,w
  4813  02E0  00A8               	movwf	??_printf
  4814  02E1  0AA0               	incf	printf@f,f
  4815  02E2  1903               	skipnz
  4816  02E3  0AA1               	incf	printf@f+1,f
  4817  02E4  0828               	movf	??_printf,w
  4818  02E5  0084               	movwf	4
  4819  02E6  0829               	movf	??_printf+1,w
  4820  02E7  0085               	movwf	5
  4821  02E8  0800               	movf	0,w	;code access
  4822  02E9  00AA               	movwf	??_printf+2
  4823  02EA  082A               	movf	??_printf+2,w
  4824  02EB  00B8               	movwf	printf@c
  4825  02EC  0838               	movf	printf@c,w
  4826  02ED  1903               	btfsc	3,2
  4827  02EE  0008               	return
  4828                           
  4829                           ;doprnt.c: 538: if(c != '%')
  4830  02EF  3025               	movlw	37
  4831  02F0  0638               	xorwf	printf@c,w
  4832  02F1  1903               	btfsc	3,2
  4833  02F2  2AF8               	goto	l1754
  4834                           
  4835                           ;doprnt.c: 540: {
  4836                           ;doprnt.c: 541: (putch(c) );
  4837  02F3  0838               	movf	printf@c,w
  4838  02F4  318E  2617  3182   	fcall	_putch
  4839                           
  4840                           ;doprnt.c: 542: continue;
  4841  02F7  2ADC               	goto	l1902
  4842  02F8                     l1754:	
  4843                           
  4844                           ;doprnt.c: 543: }
  4845                           ;doprnt.c: 546: width = 0;
  4846  02F8  0020               	movlb	0	; select bank0
  4847  02F9  01B6               	clrf	printf@width
  4848  02FA  01B7               	clrf	printf@width+1
  4849                           
  4850                           ;doprnt.c: 548: flag = 0;
  4851  02FB  01B5               	clrf	printf@flag
  4852                           
  4853                           ;doprnt.c: 551: switch(*f) {
  4854                           
  4855                           ;doprnt.c: 550: for(;;) {
  4856  02FC  2B02               	goto	l1760
  4857  02FD                     l324:	
  4858                           ;doprnt.c: 579: case '0':
  4859                           
  4860                           
  4861                           ;doprnt.c: 580: flag |= 0x04;
  4862  02FD  1535               	bsf	printf@flag,2
  4863                           
  4864                           ;doprnt.c: 581: f++;
  4865  02FE  3001               	movlw	1
  4866  02FF  07A0               	addwf	printf@f,f
  4867  0300  3000               	movlw	0
  4868  0301  3DA1               	addwfc	printf@f+1,f
  4869  0302                     l1760:	
  4870                           ;doprnt.c: 584: }
  4871                           
  4872                           ;doprnt.c: 582: continue;
  4873                           
  4874  0302  0820               	movf	printf@f,w
  4875  0303  0084               	movwf	4
  4876  0304  0821               	movf	printf@f+1,w
  4877  0305  0085               	movwf	5
  4878  0306  0800               	movf	0,w	;code access
  4879                           
  4880                           ; Switch size 1, requested type "space"
  4881                           ; Number of cases is 1, Range of values is 48 to 48
  4882                           ; switch strategies available:
  4883                           ; Name         Instructions Cycles
  4884                           ; simple_byte            4     3 (average)
  4885                           ; direct_byte           11     9 (fixed)
  4886                           ; jumptable            263     9 (fixed)
  4887                           ;	Chosen strategy is simple_byte
  4888  0307  3A30               	xorlw	48	; case 48
  4889  0308  1903               	skipnz
  4890  0309  2AFD               	goto	l324
  4891  030A  2B0B               	goto	l1762
  4892  030B                     l1762:	
  4893                           ;doprnt.c: 586: }
  4894                           
  4895                           ;doprnt.c: 585: break;
  4896                           
  4897                           
  4898                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4899  030B  0820               	movf	printf@f,w
  4900  030C  0084               	movwf	4
  4901  030D  0821               	movf	printf@f+1,w
  4902  030E  0085               	movwf	5
  4903  030F  0800               	movf	0,w	;code access
  4904  0310  318E  265B  3182   	fcall	_isdigit
  4905  0313  1C03               	btfss	3,0
  4906  0314  2BB6               	goto	l1814
  4907                           
  4908                           ;doprnt.c: 598: width = 0;
  4909  0315  0020               	movlb	0	; select bank0
  4910  0316  01B6               	clrf	printf@width
  4911  0317  01B7               	clrf	printf@width+1
  4912  0318                     l1766:	
  4913                           ;doprnt.c: 599: do {
  4914                           
  4915                           
  4916                           ;doprnt.c: 600: width *= 10;
  4917  0318  300A               	movlw	10
  4918  0319  00F0               	movwf	___wmul@multiplier
  4919  031A  3000               	movlw	0
  4920  031B  00F1               	movwf	___wmul@multiplier+1
  4921  031C  0020               	movlb	0	; select bank0
  4922  031D  0837               	movf	printf@width+1,w
  4923  031E  00F3               	movwf	___wmul@multiplicand+1
  4924  031F  0836               	movf	printf@width,w
  4925  0320  00F2               	movwf	___wmul@multiplicand
  4926  0321  318E  2695  3182   	fcall	___wmul
  4927  0324  0871               	movf	?___wmul+1,w
  4928  0325  0020               	movlb	0	; select bank0
  4929  0326  00B7               	movwf	printf@width+1
  4930  0327  0870               	movf	?___wmul,w
  4931  0328  00B6               	movwf	printf@width
  4932                           
  4933                           ;doprnt.c: 601: width += *f++ - '0';
  4934  0329  0820               	movf	printf@f,w
  4935  032A  0084               	movwf	4
  4936  032B  0821               	movf	printf@f+1,w
  4937  032C  0085               	movwf	5
  4938  032D  0800               	movf	0,w	;code access
  4939  032E  3ED0               	addlw	208
  4940  032F  00A8               	movwf	??_printf
  4941  0330  30FF               	movlw	255
  4942  0331  1803               	skipnc
  4943  0332  3000               	movlw	0
  4944  0333  00A9               	movwf	??_printf+1
  4945  0334  0828               	movf	??_printf,w
  4946  0335  07B6               	addwf	printf@width,f
  4947  0336  0829               	movf	??_printf+1,w
  4948  0337  3DB7               	addwfc	printf@width+1,f
  4949  0338  3001               	movlw	1
  4950  0339  07A0               	addwf	printf@f,f
  4951  033A  3000               	movlw	0
  4952  033B  3DA1               	addwfc	printf@f+1,f
  4953                           
  4954                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4955  033C  0820               	movf	printf@f,w
  4956  033D  0084               	movwf	4
  4957  033E  0821               	movf	printf@f+1,w
  4958  033F  0085               	movwf	5
  4959  0340  0800               	movf	0,w	;code access
  4960  0341  318E  265B  3182   	fcall	_isdigit
  4961  0344  1C03               	btfss	3,0
  4962  0345  2BB6               	goto	l1814
  4963  0346  2B18               	goto	l1766
  4964  0347                     l337:	
  4965                           ;doprnt.c: 718: case 'x':
  4966                           
  4967                           ;doprnt.c: 698: case 'i':
  4968                           ;doprnt.c: 699: break;
  4969                           
  4970                           ;doprnt.c: 697: case 'd':
  4971                           
  4972                           ;doprnt.c: 638: goto alldone;
  4973                           
  4974                           ;doprnt.c: 637: case 0:
  4975                           
  4976                           ;doprnt.c: 608: }
  4977                           ;doprnt.c: 635: switch(c = *f++) {
  4978                           
  4979                           
  4980                           ;doprnt.c: 721: flag |= 0x80;
  4981  0347  17B5               	bsf	printf@flag,7
  4982                           
  4983                           ;doprnt.c: 723: break;
  4984  0348  2BD7               	goto	l336
  4985  0349                     l1774:	
  4986                           ;doprnt.c: 728: case 's':
  4987                           
  4988                           
  4989                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4990  0349  0832               	movf	printf@ap,w
  4991  034A  0086               	movwf	6
  4992  034B  0187               	clrf	7
  4993  034C  0801               	movf	1,w
  4994  034D  00AE               	movwf	printf@cp
  4995  034E  3000               	movlw	0
  4996  034F  00AF               	movwf	printf@cp+1
  4997  0350  3001               	movlw	1
  4998  0351  00A8               	movwf	??_printf
  4999  0352  0828               	movf	??_printf,w
  5000  0353  07B2               	addwf	printf@ap,f
  5001                           
  5002                           ;doprnt.c: 740: if(!cp)
  5003  0354  082E               	movf	printf@cp,w
  5004  0355  042F               	iorwf	printf@cp+1,w
  5005  0356  1D03               	btfss	3,2
  5006  0357  2B5C               	goto	l1782
  5007                           
  5008                           ;doprnt.c: 741: cp = "(null)";
  5009  0358  3034               	movlw	low (STR_39| (0+32768))
  5010  0359  00AE               	movwf	printf@cp
  5011  035A  3093               	movlw	high (STR_39| (0+32768))
  5012  035B  00AF               	movwf	printf@cp+1
  5013  035C                     l1782:	
  5014                           
  5015                           ;doprnt.c: 745: len = 0;
  5016  035C  01B0               	clrf	printf@len
  5017  035D  01B1               	clrf	printf@len+1
  5018  035E                     l1786:	
  5019                           ;doprnt.c: 746: while(cp[len])
  5020                           
  5021  035E  082E               	movf	printf@cp,w
  5022  035F  0730               	addwf	printf@len,w
  5023  0360  0084               	movwf	4
  5024  0361  082F               	movf	printf@cp+1,w
  5025  0362  3D31               	addwfc	printf@len+1,w
  5026  0363  0085               	movwf	5
  5027  0364  0012               	moviw fsr0++
  5028  0365  1903               	btfsc	3,2
  5029  0366  2B6C               	goto	l1788
  5030                           
  5031                           ;doprnt.c: 747: len++;
  5032  0367  3001               	movlw	1
  5033  0368  07B0               	addwf	printf@len,f
  5034  0369  3000               	movlw	0
  5035  036A  3DB1               	addwfc	printf@len+1,f
  5036  036B  2B5E               	goto	l1786
  5037  036C                     l1788:	
  5038                           ;doprnt.c: 750: dostring:
  5039                           
  5040                           
  5041                           ;doprnt.c: 757: if(width > len)
  5042  036C  0837               	movf	printf@width+1,w
  5043  036D  0231               	subwf	printf@len+1,w
  5044  036E  1D03               	skipz
  5045  036F  2B72               	goto	u1585
  5046  0370  0836               	movf	printf@width,w
  5047  0371  0230               	subwf	printf@len,w
  5048  0372                     u1585:	
  5049  0372  1803               	skipnc
  5050  0373  2B79               	goto	l1792
  5051                           
  5052                           ;doprnt.c: 758: width -= len;
  5053  0374  0830               	movf	printf@len,w
  5054  0375  02B6               	subwf	printf@width,f
  5055  0376  0831               	movf	printf@len+1,w
  5056  0377  3BB7               	subwfb	printf@width+1,f
  5057  0378  2B7B               	goto	l1796
  5058  0379                     l1792:	
  5059                           
  5060                           ;doprnt.c: 759: else
  5061                           ;doprnt.c: 760: width = 0;
  5062  0379  01B6               	clrf	printf@width
  5063  037A  01B7               	clrf	printf@width+1
  5064  037B                     l1796:	
  5065                           ;doprnt.c: 764: while(width--)
  5066                           
  5067  037B  30FF               	movlw	255
  5068  037C  0020               	movlb	0	; select bank0
  5069  037D  07B6               	addwf	printf@width,f
  5070  037E  30FF               	movlw	255
  5071  037F  3DB7               	addwfc	printf@width+1,f
  5072  0380  0A36               	incf	printf@width,w
  5073  0381  1903               	btfsc	3,2
  5074  0382  0A37               	incf	printf@width+1,w
  5075  0383  1903               	btfsc	3,2
  5076  0384  2B97               	goto	l1802
  5077                           
  5078                           ;doprnt.c: 765: (putch(' ') );
  5079  0385  3020               	movlw	32
  5080  0386  318E  2617  3182   	fcall	_putch
  5081  0389  2B7B               	goto	l1796
  5082  038A                     l1798:	
  5083                           ;doprnt.c: 767: while(len--)
  5084                           
  5085                           
  5086                           ;doprnt.c: 768: (putch(*cp++) );
  5087  038A  082E               	movf	printf@cp,w
  5088  038B  0084               	movwf	4
  5089  038C  082F               	movf	printf@cp+1,w
  5090  038D  0085               	movwf	5
  5091  038E  0800               	movf	0,w	;code access
  5092  038F  318E  2617  3182   	fcall	_putch
  5093  0392  3001               	movlw	1
  5094  0393  0020               	movlb	0	; select bank0
  5095  0394  07AE               	addwf	printf@cp,f
  5096  0395  3000               	movlw	0
  5097  0396  3DAF               	addwfc	printf@cp+1,f
  5098  0397                     l1802:	
  5099  0397  3001               	movlw	1
  5100  0398  02B0               	subwf	printf@len,f
  5101  0399  3000               	movlw	0
  5102  039A  3BB1               	subwfb	printf@len+1,f
  5103  039B  0A30               	incf	printf@len,w
  5104  039C  1D03               	skipz
  5105  039D  2B8A               	goto	l1798
  5106  039E  0A31               	incf	printf@len+1,w
  5107  039F  1903               	btfsc	3,2
  5108  03A0  2ADC               	goto	l1902
  5109  03A1  2B8A               	goto	l1798
  5110  03A2                     l1804:	
  5111                           ;doprnt.c: 784: case 'c':
  5112                           
  5113                           ;doprnt.c: 774: continue;
  5114                           
  5115                           
  5116                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5117  03A2  0832               	movf	printf@ap,w
  5118  03A3  0086               	movwf	6
  5119  03A4  0187               	clrf	7
  5120  03A5  0801               	movf	1,w
  5121  03A6  00A8               	movwf	??_printf
  5122  03A7  0828               	movf	??_printf,w
  5123  03A8  00B8               	movwf	printf@c
  5124  03A9  3002               	movlw	2
  5125  03AA  00A8               	movwf	??_printf
  5126  03AB  0828               	movf	??_printf,w
  5127  03AC  07B2               	addwf	printf@ap,f
  5128  03AD                     l1808:	
  5129                           ;doprnt.c: 802: default:
  5130                           
  5131                           
  5132                           ;doprnt.c: 805: cp = (char *)&c;
  5133  03AD  3038               	movlw	low printf@c
  5134  03AE  00AE               	movwf	printf@cp
  5135  03AF  3000               	movlw	high printf@c
  5136  03B0  00AF               	movwf	printf@cp+1
  5137                           
  5138                           ;doprnt.c: 806: len = 1;
  5139  03B1  3001               	movlw	1
  5140  03B2  00B0               	movwf	printf@len
  5141  03B3  3000               	movlw	0
  5142  03B4  00B1               	movwf	printf@len+1
  5143                           
  5144                           ;doprnt.c: 807: goto dostring;
  5145  03B5  2B6C               	goto	l1788
  5146  03B6                     l1814:	
  5147                           ;doprnt.c: 822: }
  5148                           
  5149  03B6  0020               	movlb	0	; select bank0
  5150  03B7  0821               	movf	printf@f+1,w
  5151  03B8  00A9               	movwf	??_printf+1
  5152  03B9  0820               	movf	printf@f,w
  5153  03BA  00A8               	movwf	??_printf
  5154  03BB  0AA0               	incf	printf@f,f
  5155  03BC  1903               	skipnz
  5156  03BD  0AA1               	incf	printf@f+1,f
  5157  03BE  0828               	movf	??_printf,w
  5158  03BF  0084               	movwf	4
  5159  03C0  0829               	movf	??_printf+1,w
  5160  03C1  0085               	movwf	5
  5161  03C2  0800               	movf	0,w	;code access
  5162  03C3  00B8               	movwf	printf@c
  5163                           
  5164                           ; Switch size 1, requested type "space"
  5165                           ; Number of cases is 6, Range of values is 0 to 120
  5166                           ; switch strategies available:
  5167                           ; Name         Instructions Cycles
  5168                           ; simple_byte           19    10 (average)
  5169                           ; direct_byte          248     6 (fixed)
  5170                           ; jumptable            260     6 (fixed)
  5171                           ;	Chosen strategy is simple_byte
  5172  03C4  3A00               	xorlw	0	; case 0
  5173  03C5  1903               	skipnz
  5174  03C6  2D11               	goto	l388
  5175  03C7  3A63               	xorlw	99	; case 99
  5176  03C8  1903               	skipnz
  5177  03C9  2BA2               	goto	l1804
  5178  03CA  3A07               	xorlw	7	; case 100
  5179  03CB  1903               	skipnz
  5180  03CC  2BD7               	goto	l336
  5181  03CD  3A0D               	xorlw	13	; case 105
  5182  03CE  1903               	skipnz
  5183  03CF  2BD7               	goto	l336
  5184  03D0  3A1A               	xorlw	26	; case 115
  5185  03D1  1903               	skipnz
  5186  03D2  2B49               	goto	l1774
  5187  03D3  3A0B               	xorlw	11	; case 120
  5188  03D4  1903               	skipnz
  5189  03D5  2B47               	goto	l337
  5190  03D6  2BAD               	goto	l1808
  5191  03D7                     l336:	
  5192                           
  5193                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5194  03D7  0020               	movlb	0	; select bank0
  5195  03D8  1BB5               	btfsc	printf@flag,7
  5196  03D9  2BF1               	goto	l1826
  5197                           
  5198                           ;doprnt.c: 1253: {
  5199                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5200  03DA  0832               	movf	printf@ap,w
  5201  03DB  0086               	movwf	6
  5202  03DC  0187               	clrf	7
  5203  03DD  3F40               	moviw [0]fsr1
  5204  03DE  00B3               	movwf	printf@val
  5205  03DF  3F41               	moviw [1]fsr1
  5206  03E0  00B4               	movwf	printf@val+1
  5207  03E1  3002               	movlw	2
  5208  03E2  00A8               	movwf	??_printf
  5209  03E3  0828               	movf	??_printf,w
  5210  03E4  07B2               	addwf	printf@ap,f
  5211                           
  5212                           ;doprnt.c: 1261: if((int)val < 0) {
  5213  03E5  1FB4               	btfss	printf@val+1,7
  5214  03E6  2C41               	goto	l1852
  5215                           
  5216                           ;doprnt.c: 1262: flag |= 0x03;
  5217  03E7  3003               	movlw	3
  5218  03E8  00A8               	movwf	??_printf
  5219  03E9  0828               	movf	??_printf,w
  5220  03EA  04B5               	iorwf	printf@flag,f
  5221                           
  5222                           ;doprnt.c: 1263: val = -val;
  5223  03EB  09B3               	comf	printf@val,f
  5224  03EC  09B4               	comf	printf@val+1,f
  5225  03ED  0AB3               	incf	printf@val,f
  5226  03EE  1903               	skipnz
  5227  03EF  0AB4               	incf	printf@val+1,f
  5228                           
  5229                           ;doprnt.c: 1264: }
  5230                           ;doprnt.c: 1266: }
  5231  03F0  2C41               	goto	l1852
  5232  03F1                     l1826:	
  5233                           
  5234                           ;doprnt.c: 1268: else
  5235                           ;doprnt.c: 1273: {
  5236                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5237  03F1  0832               	movf	printf@ap,w
  5238  03F2  0086               	movwf	6
  5239  03F3  0187               	clrf	7
  5240  03F4  3F40               	moviw [0]fsr1
  5241  03F5  00B3               	movwf	printf@val
  5242  03F6  3F41               	moviw [1]fsr1
  5243  03F7  00B4               	movwf	printf@val+1
  5244  03F8  3002               	movlw	2
  5245  03F9  00A8               	movwf	??_printf
  5246  03FA  0828               	movf	??_printf,w
  5247  03FB  07B2               	addwf	printf@ap,f
  5248                           
  5249                           ;doprnt.c: 1287: }
  5250                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5251  03FC  2C41               	goto	l1852
  5252  03FD                     l358:	
  5253                           ;doprnt.c: 1299: case 0x00:
  5254                           
  5255                           
  5256                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5257  03FD  01B8               	clrf	printf@c
  5258  03FE  0AB8               	incf	printf@c,f
  5259  03FF                     L16:	
  5260  03FF  3005               	movlw	5
  5261  0400  0638               	xorwf	printf@c,w
  5262  0401  1903               	btfsc	3,2
  5263  0402  2C4A               	goto	l1854
  5264                           
  5265                           ;doprnt.c: 1306: if(val < dpowers[c])
  5266  0403  0838               	movf	printf@c,w
  5267  0404  00A8               	movwf	??_printf
  5268  0405  01A9               	clrf	??_printf+1
  5269  0406  35A8               	lslf	??_printf,f
  5270  0407  0DA9               	rlf	??_printf+1,f
  5271  0408  3022               	movlw	low (_dpowers| (0+32768))
  5272  0409  0728               	addwf	??_printf,w
  5273  040A  0084               	movwf	4
  5274  040B  3093               	movlw	high (_dpowers| (0+32768))
  5275  040C  3D29               	addwfc	??_printf+1,w
  5276  040D  0085               	movwf	5
  5277  040E  3F00               	moviw [0]fsr0
  5278  040F  00AA               	movwf	??_printf+2
  5279  0410  3F01               	moviw [1]fsr0
  5280  0411  00AB               	movwf	??_printf+3
  5281  0412  082B               	movf	??_printf+3,w
  5282  0413  0234               	subwf	printf@val+1,w
  5283  0414  1D03               	skipz
  5284  0415  2C18               	goto	u1645
  5285  0416  082A               	movf	??_printf+2,w
  5286  0417  0233               	subwf	printf@val,w
  5287  0418                     u1645:	
  5288  0418  1C03               	btfss	3,0
  5289  0419  2C4A               	goto	l1854
  5290                           
  5291                           ;doprnt.c: 1307: break;
  5292  041A  3001               	movlw	1
  5293  041B  00A8               	movwf	??_printf
  5294  041C  0828               	movf	??_printf,w
  5295  041D  07B8               	addwf	printf@c,f
  5296  041E  2BFF               	goto	L16
  5297  041F                     l363:	
  5298                           ;doprnt.c: 1314: case 0x80:
  5299                           
  5300                           ;doprnt.c: 1309: break;
  5301                           
  5302                           
  5303                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5304  041F  01B8               	clrf	printf@c
  5305  0420  0AB8               	incf	printf@c,f
  5306  0421                     L17:	
  5307  0421  3004               	movlw	4
  5308  0422  0638               	xorwf	printf@c,w
  5309  0423  1903               	btfsc	3,2
  5310  0424  2C4A               	goto	l1854
  5311                           
  5312                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5313  0425  0838               	movf	printf@c,w
  5314  0426  00A8               	movwf	??_printf
  5315  0427  01A9               	clrf	??_printf+1
  5316  0428  35A8               	lslf	??_printf,f
  5317  0429  0DA9               	rlf	??_printf+1,f
  5318  042A  302C               	movlw	low (_hexpowers| (0+32768))
  5319  042B  0728               	addwf	??_printf,w
  5320  042C  0084               	movwf	4
  5321  042D  3093               	movlw	high (_hexpowers| (0+32768))
  5322  042E  3D29               	addwfc	??_printf+1,w
  5323  042F  0085               	movwf	5
  5324  0430  3F00               	moviw [0]fsr0
  5325  0431  00AA               	movwf	??_printf+2
  5326  0432  3F01               	moviw [1]fsr0
  5327  0433  00AB               	movwf	??_printf+3
  5328  0434  082B               	movf	??_printf+3,w
  5329  0435  0234               	subwf	printf@val+1,w
  5330  0436  1D03               	skipz
  5331  0437  2C3A               	goto	u1675
  5332  0438  082A               	movf	??_printf+2,w
  5333  0439  0233               	subwf	printf@val,w
  5334  043A                     u1675:	
  5335  043A  1C03               	btfss	3,0
  5336  043B  2C4A               	goto	l1854
  5337                           
  5338                           ;doprnt.c: 1318: break;
  5339  043C  3001               	movlw	1
  5340  043D  00A8               	movwf	??_printf
  5341  043E  0828               	movf	??_printf,w
  5342  043F  07B8               	addwf	printf@c,f
  5343  0440  2C21               	goto	L17
  5344  0441                     l1852:	
  5345                           ;doprnt.c: 1336: }
  5346                           
  5347                           ;doprnt.c: 1320: break;
  5348                           
  5349  0441  0835               	movf	printf@flag,w
  5350  0442  3980               	andlw	128
  5351                           
  5352                           ; Switch size 1, requested type "space"
  5353                           ; Number of cases is 2, Range of values is 0 to 128
  5354                           ; switch strategies available:
  5355                           ; Name         Instructions Cycles
  5356                           ; simple_byte            7     4 (average)
  5357                           ; jumptable            260     6 (fixed)
  5358                           ;	Chosen strategy is simple_byte
  5359  0443  3A00               	xorlw	0	; case 0
  5360  0444  1903               	skipnz
  5361  0445  2BFD               	goto	l358
  5362  0446  3A80               	xorlw	128	; case 128
  5363  0447  1903               	skipnz
  5364  0448  2C1F               	goto	l363
  5365  0449  2C4A               	goto	l1854
  5366  044A                     l1854:	
  5367                           
  5368                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5369  044A  0836               	movf	printf@width,w
  5370  044B  0437               	iorwf	printf@width+1,w
  5371  044C  1903               	btfsc	3,2
  5372  044D  2C56               	goto	l367
  5373  044E  0835               	movf	printf@flag,w
  5374  044F  3903               	andlw	3
  5375  0450  1903               	btfsc	3,2
  5376  0451  2C56               	goto	l367
  5377                           
  5378                           ;doprnt.c: 1346: width--;
  5379  0452  30FF               	movlw	255
  5380  0453  07B6               	addwf	printf@width,f
  5381  0454  30FF               	movlw	255
  5382  0455  3DB7               	addwfc	printf@width+1,f
  5383  0456                     l367:	
  5384                           
  5385                           ;doprnt.c: 1381: if(width > c)
  5386  0456  0838               	movf	printf@c,w
  5387  0457  00A8               	movwf	??_printf
  5388  0458  01A9               	clrf	??_printf+1
  5389  0459  1BA8               	btfsc	??_printf,7
  5390  045A  03A9               	decf	??_printf+1,f
  5391  045B  0829               	movf	??_printf+1,w
  5392  045C  3A80               	xorlw	128
  5393  045D  00AA               	movwf	??_printf+2
  5394  045E  0837               	movf	printf@width+1,w
  5395  045F  3A80               	xorlw	128
  5396  0460  022A               	subwf	??_printf+2,w
  5397  0461  1D03               	skipz
  5398  0462  2C65               	goto	u1715
  5399  0463  0836               	movf	printf@width,w
  5400  0464  0228               	subwf	??_printf,w
  5401  0465                     u1715:	
  5402  0465  1803               	skipnc
  5403  0466  2C72               	goto	l1862
  5404                           
  5405                           ;doprnt.c: 1382: width -= c;
  5406  0467  0020               	movlb	0	; select bank0
  5407  0468  0838               	movf	printf@c,w
  5408  0469  00A8               	movwf	??_printf
  5409  046A  01A9               	clrf	??_printf+1
  5410  046B  1BA8               	btfsc	??_printf,7
  5411  046C  03A9               	decf	??_printf+1,f
  5412  046D  0828               	movf	??_printf,w
  5413  046E  02B6               	subwf	printf@width,f
  5414  046F  0829               	movf	??_printf+1,w
  5415  0470  3BB7               	subwfb	printf@width+1,f
  5416  0471  2C75               	goto	l1864
  5417  0472                     l1862:	
  5418                           
  5419                           ;doprnt.c: 1383: else
  5420                           ;doprnt.c: 1384: width = 0;
  5421  0472  0020               	movlb	0	; select bank0
  5422  0473  01B6               	clrf	printf@width
  5423  0474  01B7               	clrf	printf@width+1
  5424  0475                     l1864:	
  5425                           
  5426                           ;doprnt.c: 1387: if(flag & 0x04) {
  5427  0475  1D35               	btfss	printf@flag,2
  5428  0476  2C8E               	goto	l1876
  5429                           
  5430                           ;doprnt.c: 1392: if(flag & 0x03)
  5431  0477  0835               	movf	printf@flag,w
  5432  0478  3903               	andlw	3
  5433  0479  1903               	btfsc	3,2
  5434  047A  2C7F               	goto	l1870
  5435                           
  5436                           ;doprnt.c: 1393: (putch('-') );
  5437  047B  302D               	movlw	45
  5438  047C  318E  2617  3182   	fcall	_putch
  5439  047F                     l1870:	
  5440                           
  5441                           ;doprnt.c: 1415: if(width)
  5442  047F  0020               	movlb	0	; select bank0
  5443  0480                     L18:	
  5444  0480  0836               	movf	printf@width,w
  5445  0481  0437               	iorwf	printf@width+1,w
  5446  0482  1903               	btfsc	3,2
  5447  0483  2CA7               	goto	l1886
  5448                           
  5449                           ;doprnt.c: 1417: (putch('0') );
  5450                           
  5451                           ;doprnt.c: 1416: do
  5452  0484  3030               	movlw	48
  5453  0485  318E  2617  3182   	fcall	_putch
  5454                           
  5455                           ;doprnt.c: 1418: while(--width);
  5456  0488  30FF               	movlw	255
  5457  0489  0020               	movlb	0	; select bank0
  5458  048A  07B6               	addwf	printf@width,f
  5459  048B  30FF               	movlw	255
  5460  048C  3DB7               	addwfc	printf@width+1,f
  5461  048D  2C80               	goto	L18
  5462  048E                     l1876:	
  5463                           ;doprnt.c: 1420: } else
  5464                           
  5465                           
  5466                           ;doprnt.c: 1422: {
  5467                           ;doprnt.c: 1424: if(width
  5468                           ;doprnt.c: 1428: )
  5469  048E  0836               	movf	printf@width,w
  5470  048F  0437               	iorwf	printf@width+1,w
  5471  0490  1903               	btfsc	3,2
  5472  0491  2C9F               	goto	l1882
  5473  0492                     l1878:	
  5474                           ;doprnt.c: 1429: do
  5475                           
  5476                           
  5477                           ;doprnt.c: 1430: (putch(' ') );
  5478  0492  3020               	movlw	32
  5479  0493  318E  2617  3182   	fcall	_putch
  5480                           
  5481                           ;doprnt.c: 1431: while(--width);
  5482  0496  30FF               	movlw	255
  5483  0497  0020               	movlb	0	; select bank0
  5484  0498  07B6               	addwf	printf@width,f
  5485  0499  30FF               	movlw	255
  5486  049A  3DB7               	addwfc	printf@width+1,f
  5487  049B  0836               	movf	printf@width,w
  5488  049C  0437               	iorwf	printf@width+1,w
  5489  049D  1D03               	btfss	3,2
  5490  049E  2C92               	goto	l1878
  5491  049F                     l1882:	
  5492                           
  5493                           ;doprnt.c: 1438: if(flag & 0x03)
  5494  049F  0835               	movf	printf@flag,w
  5495  04A0  3903               	andlw	3
  5496  04A1  1903               	btfsc	3,2
  5497  04A2  2CA7               	goto	l1886
  5498                           
  5499                           ;doprnt.c: 1439: (putch('-') );
  5500  04A3  302D               	movlw	45
  5501  04A4  318E  2617  3182   	fcall	_putch
  5502  04A7                     l1886:	
  5503                           
  5504                           ;doprnt.c: 1469: }
  5505                           ;doprnt.c: 1472: prec = c;
  5506  04A7  0020               	movlb	0	; select bank0
  5507  04A8  0838               	movf	printf@c,w
  5508  04A9  00A8               	movwf	??_printf
  5509  04AA  0828               	movf	??_printf,w
  5510  04AB  00AD               	movwf	printf@prec
  5511                           
  5512                           ;doprnt.c: 1474: while(prec--) {
  5513  04AC  2CFF               	goto	l1900
  5514  04AD                     l1888:	
  5515                           ;doprnt.c: 1478: {
  5516                           ;doprnt.c: 1483: case 0x00:
  5517                           
  5518                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  5519                           
  5520                           
  5521                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5522  04AD  300A               	movlw	10
  5523  04AE  00F8               	movwf	___lwmod@divisor
  5524  04AF  3000               	movlw	0
  5525  04B0  00F9               	movwf	___lwmod@divisor+1
  5526  04B1  082D               	movf	printf@prec,w
  5527  04B2  00A8               	movwf	??_printf
  5528  04B3  01A9               	clrf	??_printf+1
  5529  04B4  35A8               	lslf	??_printf,f
  5530  04B5  0DA9               	rlf	??_printf+1,f
  5531  04B6  3022               	movlw	low (_dpowers| (0+32768))
  5532  04B7  0728               	addwf	??_printf,w
  5533  04B8  0084               	movwf	4
  5534  04B9  3093               	movlw	high (_dpowers| (0+32768))
  5535  04BA  3D29               	addwfc	??_printf+1,w
  5536  04BB  0085               	movwf	5
  5537  04BC  3F00               	moviw [0]fsr0
  5538  04BD  00F0               	movwf	___lwdiv@divisor
  5539  04BE  3F01               	moviw [1]fsr0
  5540  04BF  00F1               	movwf	___lwdiv@divisor+1
  5541  04C0  0834               	movf	printf@val+1,w
  5542  04C1  00F3               	movwf	___lwdiv@dividend+1
  5543  04C2  0833               	movf	printf@val,w
  5544  04C3  00F2               	movwf	___lwdiv@dividend
  5545  04C4  318F  2704  3182   	fcall	___lwdiv
  5546  04C7  0871               	movf	?___lwdiv+1,w
  5547  04C8  00FB               	movwf	___lwmod@dividend+1
  5548  04C9  0870               	movf	?___lwdiv,w
  5549  04CA  00FA               	movwf	___lwmod@dividend
  5550  04CB  318E  26D8  3182   	fcall	___lwmod
  5551  04CE  0878               	movf	?___lwmod,w
  5552  04CF  3E30               	addlw	48
  5553  04D0  0020               	movlb	0	; select bank0
  5554  04D1  00AA               	movwf	??_printf+2
  5555  04D2  082A               	movf	??_printf+2,w
  5556  04D3  2CFA               	goto	L15
  5557  04D4                     l1890:	
  5558                           ;doprnt.c: 1497: case 0x80:
  5559                           
  5560                           ;doprnt.c: 1491: break;
  5561                           
  5562                           
  5563                           ;doprnt.c: 1499: {
  5564                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5565  04D4  082D               	movf	printf@prec,w
  5566  04D5  00A8               	movwf	??_printf
  5567  04D6  01A9               	clrf	??_printf+1
  5568  04D7  35A8               	lslf	??_printf,f
  5569  04D8  0DA9               	rlf	??_printf+1,f
  5570  04D9  302C               	movlw	low (_hexpowers| (0+32768))
  5571  04DA  0728               	addwf	??_printf,w
  5572  04DB  0084               	movwf	4
  5573  04DC  3093               	movlw	high (_hexpowers| (0+32768))
  5574  04DD  3D29               	addwfc	??_printf+1,w
  5575  04DE  0085               	movwf	5
  5576  04DF  3F00               	moviw [0]fsr0
  5577  04E0  00F0               	movwf	___lwdiv@divisor
  5578  04E1  3F01               	moviw [1]fsr0
  5579  04E2  00F1               	movwf	___lwdiv@divisor+1
  5580  04E3  0834               	movf	printf@val+1,w
  5581  04E4  00F3               	movwf	___lwdiv@dividend+1
  5582  04E5  0833               	movf	printf@val,w
  5583  04E6  00F2               	movwf	___lwdiv@dividend
  5584  04E7  318F  2704  3182   	fcall	___lwdiv
  5585  04EA  0870               	movf	?___lwdiv,w
  5586  04EB  390F               	andlw	15
  5587  04EC  0020               	movlb	0	; select bank0
  5588  04ED  00AA               	movwf	??_printf+2
  5589  04EE  082A               	movf	??_printf+2,w
  5590  04EF  00AC               	movwf	printf@idx
  5591                           
  5592                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5593  04F0  082C               	movf	printf@idx,w
  5594  04F1  3E17               	addlw	low (STR_40| (0+32768))
  5595  04F2  0084               	movwf	4
  5596  04F3  3092               	movlw	high (STR_40| (0+32768))
  5597  04F4  1803               	skipnc
  5598  04F5  3E01               	addlw	1
  5599  04F6  0085               	movwf	5
  5600  04F7  0800               	movf	0,w	;code access
  5601  04F8  00A8               	movwf	??_printf
  5602  04F9  0828               	movf	??_printf,w
  5603  04FA                     L15:	
  5604  04FA  00B8               	movwf	printf@c
  5605  04FB                     l1898:	
  5606                           ;doprnt.c: 1523: }
  5607                           
  5608                           ;doprnt.c: 1508: }
  5609                           ;doprnt.c: 1510: break;
  5610                           
  5611                           
  5612                           ;doprnt.c: 1524: (putch(c) );
  5613  04FB  0838               	movf	printf@c,w
  5614  04FC  318E  2617  3182   	fcall	_putch
  5615  04FF                     l1900:	
  5616  04FF  30FF               	movlw	255
  5617  0500  0020               	movlb	0	; select bank0
  5618  0501  00A8               	movwf	??_printf
  5619  0502  0828               	movf	??_printf,w
  5620  0503  07AD               	addwf	printf@prec,f
  5621  0504  0A2D               	incf	printf@prec,w
  5622  0505  1903               	btfsc	3,2
  5623  0506  2ADC               	goto	l1902
  5624  0507  0835               	movf	printf@flag,w
  5625  0508  3980               	andlw	128
  5626                           
  5627                           ; Switch size 1, requested type "space"
  5628                           ; Number of cases is 2, Range of values is 0 to 128
  5629                           ; switch strategies available:
  5630                           ; Name         Instructions Cycles
  5631                           ; simple_byte            7     4 (average)
  5632                           ; jumptable            260     6 (fixed)
  5633                           ;	Chosen strategy is simple_byte
  5634  0509  3A00               	xorlw	0	; case 0
  5635  050A  1903               	skipnz
  5636  050B  2CAD               	goto	l1888
  5637  050C  3A80               	xorlw	128	; case 128
  5638  050D  1903               	skipnz
  5639  050E  2CD4               	goto	l1890
  5640  050F  2CFB               	goto	l1898
  5641  0510  2CFB               	goto	l1898
  5642  0511                     l388:	
  5643                           ;doprnt.c: 1540: return 0;
  5644                           ;	Return value of _printf is never used
  5645                           
  5646                           ;doprnt.c: 1525: }
  5647                           ;doprnt.c: 1533: }
  5648                           ;doprnt.c: 1535: alldone:
  5649                           
  5650  0511  0008               	return
  5651  0512                     __end_of_printf:	
  5652                           
  5653                           	psect	text8
  5654  0E17                     __ptext8:	
  5655 ;; *************** function _putch *****************
  5656 ;; Defined at:
  5657 ;;		line 107 in file "mcc_generated_files/eusart.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  txData          1    wreg     unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  txData          1    1[COMMON] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        1 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    1
  5678 ;; This function calls:
  5679 ;;		_EUSART_Write
  5680 ;; This function is called by:
  5681 ;;		_printf
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _putch
  5687  0E17                     _putch:	
  5688                           
  5689                           ;incstack = 0
  5690                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5691                           ;putch@txData stored from wreg
  5692  0E17  00F1               	movwf	putch@txData
  5693                           
  5694                           ;eusart.c: 109: EUSART_Write(txData);
  5695  0E18  0871               	movf	putch@txData,w
  5696  0E19  318E  2635         	fcall	_EUSART_Write
  5697  0E1B  0008               	return
  5698  0E1C                     __end_of_putch:	
  5699                           
  5700                           	psect	text9
  5701  0E35                     __ptext9:	
  5702 ;; *************** function _EUSART_Write *****************
  5703 ;; Defined at:
  5704 ;;		line 93 in file "mcc_generated_files/eusart.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  txData          1    wreg     unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  txData          1    0[COMMON] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;Total ram usage:        1 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_putch
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _EUSART_Write
  5733  0E35                     _EUSART_Write:	
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _EUSART_Write: [wreg]
  5737                           ;EUSART_Write@txData stored from wreg
  5738  0E35  00F0               	movwf	EUSART_Write@txData
  5739  0E36                     l58:	
  5740                           ;eusart.c: 96: {
  5741                           
  5742                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  5743                           
  5744  0E36  0020               	movlb	0	; select bank0
  5745  0E37  1E11               	btfss	17,4	;volatile
  5746  0E38  2E36               	goto	l58
  5747                           
  5748                           ;eusart.c: 97: }
  5749                           ;eusart.c: 99: TXREG = txData;
  5750  0E39  0870               	movf	EUSART_Write@txData,w
  5751  0E3A  0023               	movlb	3	; select bank3
  5752  0E3B  009A               	movwf	26	;volatile
  5753  0E3C  0008               	return
  5754  0E3D                     __end_of_EUSART_Write:	
  5755                           
  5756                           	psect	text10
  5757  0ED8                     __ptext10:	
  5758 ;; *************** function ___lwmod *****************
  5759 ;; Defined at:
  5760 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  divisor         2    8[COMMON] unsigned int 
  5763 ;;  dividend        2   10[COMMON] unsigned int 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  counter         1   13[COMMON] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2    8[COMMON] unsigned int 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;Total ram usage:        6 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_printf
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function ___lwmod
  5790  0ED8                     ___lwmod:	
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5794  0ED8  0878               	movf	___lwmod@divisor,w
  5795  0ED9  0479               	iorwf	___lwmod@divisor+1,w
  5796  0EDA  1903               	btfsc	3,2
  5797  0EDB  2EFF               	goto	l1744
  5798  0EDC  01FD               	clrf	___lwmod@counter
  5799  0EDD  0AFD               	incf	___lwmod@counter,f
  5800  0EDE                     l1734:	
  5801  0EDE  1BF9               	btfsc	___lwmod@divisor+1,7
  5802  0EDF  2EEA               	goto	l1736
  5803  0EE0  3001               	movlw	1
  5804  0EE1                     u1485:	
  5805  0EE1  35F8               	lslf	___lwmod@divisor,f
  5806  0EE2  0DF9               	rlf	___lwmod@divisor+1,f
  5807  0EE3  0B89               	decfsz	9,f
  5808  0EE4  2EE1               	goto	u1485
  5809  0EE5  3001               	movlw	1
  5810  0EE6  00FC               	movwf	??___lwmod
  5811  0EE7  087C               	movf	??___lwmod,w
  5812  0EE8  07FD               	addwf	___lwmod@counter,f
  5813  0EE9  2EDE               	goto	l1734
  5814  0EEA                     l1736:	
  5815  0EEA  0879               	movf	___lwmod@divisor+1,w
  5816  0EEB  027B               	subwf	___lwmod@dividend+1,w
  5817  0EEC  1D03               	skipz
  5818  0EED  2EF0               	goto	u1505
  5819  0EEE  0878               	movf	___lwmod@divisor,w
  5820  0EEF  027A               	subwf	___lwmod@dividend,w
  5821  0EF0                     u1505:	
  5822  0EF0  1C03               	skipc
  5823  0EF1  2EF6               	goto	l1740
  5824  0EF2  0878               	movf	___lwmod@divisor,w
  5825  0EF3  02FA               	subwf	___lwmod@dividend,f
  5826  0EF4  0879               	movf	___lwmod@divisor+1,w
  5827  0EF5  3BFB               	subwfb	___lwmod@dividend+1,f
  5828  0EF6                     l1740:	
  5829  0EF6  3001               	movlw	1
  5830  0EF7                     u1515:	
  5831  0EF7  36F9               	lsrf	___lwmod@divisor+1,f
  5832  0EF8  0CF8               	rrf	___lwmod@divisor,f
  5833  0EF9  0B89               	decfsz	9,f
  5834  0EFA  2EF7               	goto	u1515
  5835  0EFB  3001               	movlw	1
  5836  0EFC  02FD               	subwf	___lwmod@counter,f
  5837  0EFD  1D03               	btfss	3,2
  5838  0EFE  2EEA               	goto	l1736
  5839  0EFF                     l1744:	
  5840  0EFF  087B               	movf	___lwmod@dividend+1,w
  5841  0F00  00F9               	movwf	?___lwmod+1
  5842  0F01  087A               	movf	___lwmod@dividend,w
  5843  0F02  00F8               	movwf	?___lwmod
  5844  0F03  0008               	return
  5845  0F04                     __end_of___lwmod:	
  5846                           
  5847                           	psect	text11
  5848  0F04                     __ptext11:	
  5849 ;; *************** function ___lwdiv *****************
  5850 ;; Defined at:
  5851 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  divisor         2    0[COMMON] unsigned int 
  5854 ;;  dividend        2    2[COMMON] unsigned int 
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;  quotient        2    5[COMMON] unsigned int 
  5857 ;;  counter         1    7[COMMON] unsigned char 
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  2    0[COMMON] unsigned int 
  5860 ;; Registers used:
  5861 ;;		wreg, status,2, status,0
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;Total ram usage:        8 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; This function calls:
  5874 ;;		Nothing
  5875 ;; This function is called by:
  5876 ;;		_printf
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           
  5881                           ;psect for function ___lwdiv
  5882  0F04                     ___lwdiv:	
  5883                           
  5884                           ;incstack = 0
  5885                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5886  0F04  01F5               	clrf	___lwdiv@quotient
  5887  0F05  01F6               	clrf	___lwdiv@quotient+1
  5888  0F06  0870               	movf	___lwdiv@divisor,w
  5889  0F07  0471               	iorwf	___lwdiv@divisor+1,w
  5890  0F08  1903               	btfsc	3,2
  5891  0F09  2F33               	goto	l1722
  5892  0F0A  01F7               	clrf	___lwdiv@counter
  5893  0F0B  0AF7               	incf	___lwdiv@counter,f
  5894  0F0C                     l1710:	
  5895  0F0C  1BF1               	btfsc	___lwdiv@divisor+1,7
  5896  0F0D  2F18               	goto	l1712
  5897  0F0E  3001               	movlw	1
  5898  0F0F                     u1415:	
  5899  0F0F  35F0               	lslf	___lwdiv@divisor,f
  5900  0F10  0DF1               	rlf	___lwdiv@divisor+1,f
  5901  0F11  0B89               	decfsz	9,f
  5902  0F12  2F0F               	goto	u1415
  5903  0F13  3001               	movlw	1
  5904  0F14  00F4               	movwf	??___lwdiv
  5905  0F15  0874               	movf	??___lwdiv,w
  5906  0F16  07F7               	addwf	___lwdiv@counter,f
  5907  0F17  2F0C               	goto	l1710
  5908  0F18                     l1712:	
  5909  0F18  3001               	movlw	1
  5910  0F19                     u1435:	
  5911  0F19  35F5               	lslf	___lwdiv@quotient,f
  5912  0F1A  0DF6               	rlf	___lwdiv@quotient+1,f
  5913  0F1B  0B89               	decfsz	9,f
  5914  0F1C  2F19               	goto	u1435
  5915  0F1D  0871               	movf	___lwdiv@divisor+1,w
  5916  0F1E  0273               	subwf	___lwdiv@dividend+1,w
  5917  0F1F  1D03               	skipz
  5918  0F20  2F23               	goto	u1445
  5919  0F21  0870               	movf	___lwdiv@divisor,w
  5920  0F22  0272               	subwf	___lwdiv@dividend,w
  5921  0F23                     u1445:	
  5922  0F23  1C03               	skipc
  5923  0F24  2F2A               	goto	l1718
  5924  0F25  0870               	movf	___lwdiv@divisor,w
  5925  0F26  02F2               	subwf	___lwdiv@dividend,f
  5926  0F27  0871               	movf	___lwdiv@divisor+1,w
  5927  0F28  3BF3               	subwfb	___lwdiv@dividend+1,f
  5928  0F29  1475               	bsf	___lwdiv@quotient,0
  5929  0F2A                     l1718:	
  5930  0F2A  3001               	movlw	1
  5931  0F2B                     u1455:	
  5932  0F2B  36F1               	lsrf	___lwdiv@divisor+1,f
  5933  0F2C  0CF0               	rrf	___lwdiv@divisor,f
  5934  0F2D  0B89               	decfsz	9,f
  5935  0F2E  2F2B               	goto	u1455
  5936  0F2F  3001               	movlw	1
  5937  0F30  02F7               	subwf	___lwdiv@counter,f
  5938  0F31  1D03               	btfss	3,2
  5939  0F32  2F18               	goto	l1712
  5940  0F33                     l1722:	
  5941  0F33  0876               	movf	___lwdiv@quotient+1,w
  5942  0F34  00F1               	movwf	?___lwdiv+1
  5943  0F35  0875               	movf	___lwdiv@quotient,w
  5944  0F36  00F0               	movwf	?___lwdiv
  5945  0F37  0008               	return
  5946  0F38                     __end_of___lwdiv:	
  5947                           
  5948                           	psect	text12
  5949  0E69                     __ptext12:	
  5950 ;; *************** function _SPI_exchange *****************
  5951 ;; Defined at:
  5952 ;;		line 45 in file "main.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  buf             1    wreg     PTR unsigned char 
  5955 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  5956 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  5957 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  5958 ;;  len             1    8[COMMON] unsigned char 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  buf             1   13[COMMON] PTR unsigned char 
  5961 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  5962 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  5963 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  5964 ;;  bytes_writte    1   12[COMMON] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      unsigned char 
  5967 ;; Registers used:
  5968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5974 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;Total ram usage:        6 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    2
  5981 ;; This function calls:
  5982 ;;		_SPI_Exchange8bitBuffer
  5983 ;; This function is called by:
  5984 ;;		_can_ope_mode
  5985 ;;		_can_txf_clear
  5986 ;;		_can_receive
  5987 ;;		_can_send
  5988 ;;		_can_status_check
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _SPI_exchange
  5995  0E69                     _SPI_exchange:	
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5999                           ;SPI_exchange@buf stored from wreg
  6000  0E69  00FD               	movwf	SPI_exchange@buf
  6001                           
  6002                           ;main.c: 46: LATAbits.LATA4 = 0;
  6003  0E6A  0022               	movlb	2	; select bank2
  6004  0E6B  120C               	bcf	12,4	;volatile
  6005                           
  6006                           ;main.c: 47: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  6007  0E6C  0878               	movf	SPI_exchange@len,w
  6008  0E6D  00F9               	movwf	??_SPI_exchange
  6009  0E6E  0879               	movf	??_SPI_exchange,w
  6010  0E6F  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  6011  0E70  087D               	movf	SPI_exchange@buf,w
  6012  0E71  00FA               	movwf	??_SPI_exchange+1
  6013  0E72  087A               	movf	??_SPI_exchange+1,w
  6014  0E73  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  6015  0E74  087D               	movf	SPI_exchange@buf,w
  6016  0E75  3180  2015         	fcall	_SPI_Exchange8bitBuffer
  6017  0E77  00FB               	movwf	??_SPI_exchange+2
  6018  0E78  087B               	movf	??_SPI_exchange+2,w
  6019  0E79  00FC               	movwf	SPI_exchange@bytes_written
  6020                           
  6021                           ;main.c: 48: LATAbits.LATA4 = 1;
  6022  0E7A  0022               	movlb	2	; select bank2
  6023  0E7B  160C               	bsf	12,4	;volatile
  6024                           
  6025                           ;main.c: 49: return bytes_written;
  6026  0E7C  087C               	movf	SPI_exchange@bytes_written,w
  6027  0E7D  0008               	return
  6028  0E7E                     __end_of_SPI_exchange:	
  6029                           
  6030                           	psect	text13
  6031  0015                     __ptext13:	
  6032 ;; *************** function _SPI_Exchange8bitBuffer *****************
  6033 ;; Defined at:
  6034 ;;		line 91 in file "mcc_generated_files/spi.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  dataIn          1    wreg     PTR unsigned char 
  6037 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6038 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6039 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6040 ;;  bufLen          1    1[COMMON] unsigned char 
  6041 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  6042 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6043 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6044 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  6047 ;;		 -> main@mask_buf(4), main@cnf_buf(5), can_status_check@can_status_buf(2), can_send@txb_ctrl_buf(1), 
  6048 ;;		 -> can_send@debug_buf(3), can_send@tx_buf(14), can_send@can_status_buf(2), can_receive@rx_buf(15), 
  6049 ;;		 -> can_txf_clear@can_int_flag(4), can_ope_mode@can_ctrl_buf(3), 
  6050 ;;  bytesWritten    1    7[COMMON] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  1    wreg      unsigned char 
  6053 ;; Registers used:
  6054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;Total ram usage:        7 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    1
  6067 ;; This function calls:
  6068 ;;		_SPI_Exchange8bit
  6069 ;; This function is called by:
  6070 ;;		_SPI_exchange
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _SPI_Exchange8bitBuffer
  6076  0015                     _SPI_Exchange8bitBuffer:	
  6077                           
  6078                           ;incstack = 0
  6079                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6080                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  6081  0015  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  6082                           
  6083                           ;spi.c: 93: uint8_t bytesWritten = 0;
  6084  0016  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  6085                           
  6086                           ;spi.c: 95: if(bufLen != 0)
  6087  0017  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6088  0018  1903               	btfsc	3,2
  6089  0019  2861               	goto	l1670
  6090                           
  6091                           ;spi.c: 96: {
  6092                           ;spi.c: 97: if(dataIn != (0))
  6093  001A  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  6094  001B  1D03               	btfss	3,2
  6095  001C  2843               	goto	l1658
  6096  001D  2848               	goto	l1660
  6097  001E                     l1650:	
  6098                           ;spi.c: 98: {
  6099                           ;spi.c: 99: while(bytesWritten < bufLen)
  6100                           
  6101                           
  6102                           ;spi.c: 100: {
  6103                           ;spi.c: 101: if(dataOut == (0))
  6104  001E  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6105  001F  1D03               	btfss	3,2
  6106  0020  282C               	goto	l1654
  6107                           
  6108                           ;spi.c: 102: {
  6109                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  6110  0021  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6111  0022  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6112  0023  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6113  0024  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6114  0025  0086               	movwf	6
  6115  0026  0187               	clrf	7
  6116  0027  0801               	movf	1,w
  6117  0028  318E  263D  3180   	fcall	_SPI_Exchange8bit
  6118                           
  6119                           ;spi.c: 104: }
  6120  002B  283F               	goto	l1656
  6121  002C                     l1654:	
  6122                           
  6123                           ;spi.c: 105: else
  6124                           ;spi.c: 106: {
  6125                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  6126  002C  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6127  002D  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  6128  002E  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6129  002F  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6130  0030  0086               	movwf	6
  6131  0031  0187               	clrf	7
  6132  0032  0801               	movf	1,w
  6133  0033  318E  263D  3180   	fcall	_SPI_Exchange8bit
  6134  0036  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6135  0037  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6136  0038  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6137  0039  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  6138  003A  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  6139  003B  0086               	movwf	6
  6140  003C  0187               	clrf	7
  6141  003D  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6142  003E  0081               	movwf	1
  6143  003F                     l1656:	
  6144                           
  6145                           ;spi.c: 108: }
  6146                           ;spi.c: 110: bytesWritten++;
  6147  003F  3001               	movlw	1
  6148  0040  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6149  0041  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6150  0042  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6151  0043                     l1658:	
  6152  0043  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6153  0044  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6154  0045  1803               	btfsc	3,0
  6155  0046  2861               	goto	l1670
  6156  0047  281E               	goto	l1650
  6157  0048                     l1660:	
  6158                           ;spi.c: 111: }
  6159                           ;spi.c: 112: }
  6160                           
  6161                           
  6162                           ;spi.c: 113: else
  6163                           ;spi.c: 114: {
  6164                           ;spi.c: 115: if(dataOut != (0))
  6165  0048  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  6166  0049  1D03               	btfss	3,2
  6167  004A  285D               	goto	l1668
  6168  004B  2861               	goto	l1670
  6169  004C                     l1664:	
  6170                           ;spi.c: 116: {
  6171                           ;spi.c: 117: while(bytesWritten < bufLen )
  6172                           
  6173                           
  6174                           ;spi.c: 118: {
  6175                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  6176  004C  3000               	movlw	0
  6177  004D  318E  263D  3180   	fcall	_SPI_Exchange8bit
  6178  0050  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6179  0051  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6180  0052  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  6181  0053  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  6182  0054  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  6183  0055  0086               	movwf	6
  6184  0056  0187               	clrf	7
  6185  0057  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6186  0058  0081               	movwf	1
  6187                           
  6188                           ;spi.c: 121: bytesWritten++;
  6189  0059  3001               	movlw	1
  6190  005A  00F3               	movwf	??_SPI_Exchange8bitBuffer
  6191  005B  0873               	movf	??_SPI_Exchange8bitBuffer,w
  6192  005C  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  6193  005D                     l1668:	
  6194  005D  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  6195  005E  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  6196  005F  1C03               	skipc
  6197  0060  284C               	goto	l1664
  6198  0061                     l1670:	
  6199                           
  6200                           ;spi.c: 122: }
  6201                           ;spi.c: 123: }
  6202                           ;spi.c: 124: }
  6203                           ;spi.c: 125: }
  6204                           ;spi.c: 127: return bytesWritten;
  6205  0061  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  6206  0062  0008               	return
  6207  0063                     __end_of_SPI_Exchange8bitBuffer:	
  6208                           
  6209                           	psect	text14
  6210  0E3D                     __ptext14:	
  6211 ;; *************** function _SPI_Exchange8bit *****************
  6212 ;; Defined at:
  6213 ;;		line 77 in file "mcc_generated_files/spi.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  data            1    wreg     unsigned char 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  data            1    0[COMMON] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      unsigned char 
  6220 ;; Registers used:
  6221 ;;		wreg
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;Total ram usage:        1 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_SPI_Exchange8bitBuffer
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _SPI_Exchange8bit
  6242  0E3D                     _SPI_Exchange8bit:	
  6243                           
  6244                           ;incstack = 0
  6245                           ; Regs used in _SPI_Exchange8bit: [wreg]
  6246                           ;SPI_Exchange8bit@data stored from wreg
  6247  0E3D  00F0               	movwf	SPI_Exchange8bit@data
  6248                           
  6249                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  6250  0E3E  0024               	movlb	4	; select bank4
  6251  0E3F  1395               	bcf	21,7	;volatile
  6252                           
  6253                           ;spi.c: 82: SSP1BUF = data;
  6254  0E40  0870               	movf	SPI_Exchange8bit@data,w
  6255  0E41  0091               	movwf	17	;volatile
  6256  0E42                     l113:	
  6257                           ;spi.c: 85: {
  6258                           
  6259                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  6260                           
  6261  0E42  1C14               	btfss	20,0	;volatile
  6262  0E43  2E42               	goto	l113
  6263                           
  6264                           ;spi.c: 86: }
  6265                           ;spi.c: 88: return (SSP1BUF);
  6266  0E44  0811               	movf	17,w	;volatile
  6267  0E45  0008               	return
  6268  0E46                     __end_of_SPI_Exchange8bit:	
  6269                           
  6270                           	psect	text15
  6271  0063                     __ptext15:	
  6272 ;; *************** function _atoi *****************
  6273 ;; Defined at:
  6274 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  s               1    wreg     PTR const unsigned char 
  6277 ;;		 -> buf(9), 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  s               1   13[COMMON] PTR const unsigned char 
  6280 ;;		 -> buf(9), 
  6281 ;;  a               2   11[COMMON] int 
  6282 ;;  sign            1   10[COMMON] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  2    6[COMMON] int 
  6285 ;; Registers used:
  6286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;Total ram usage:        8 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    1
  6299 ;; This function calls:
  6300 ;;		___wmul
  6301 ;;		_isdigit
  6302 ;; This function is called by:
  6303 ;;		_main
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           
  6308                           ;psect for function _atoi
  6309  0063                     _atoi:	
  6310                           
  6311                           ;incstack = 0
  6312                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6313                           ;atoi@s stored from wreg
  6314  0063  00FD               	movwf	atoi@s
  6315  0064                     l2164:	
  6316  0064  087D               	movf	atoi@s,w
  6317  0065  0086               	movwf	6
  6318  0066  0187               	clrf	7
  6319  0067  3020               	movlw	32
  6320  0068  0601               	xorwf	1,w
  6321  0069  1D03               	btfss	3,2
  6322  006A  2870               	goto	l2166
  6323  006B                     l2162:	
  6324  006B  3001               	movlw	1
  6325  006C  00F8               	movwf	??_atoi
  6326  006D  0878               	movf	??_atoi,w
  6327  006E  07FD               	addwf	atoi@s,f
  6328  006F  2864               	goto	l2164
  6329  0070                     l2166:	
  6330  0070  087D               	movf	atoi@s,w
  6331  0071  0086               	movwf	6
  6332  0072  0187               	clrf	7
  6333  0073  3009               	movlw	9
  6334  0074  0601               	xorwf	1,w
  6335  0075  1903               	btfsc	3,2
  6336  0076  286B               	goto	l2162
  6337  0077  01FB               	clrf	atoi@a
  6338  0078  01FC               	clrf	atoi@a+1
  6339  0079  01FA               	clrf	atoi@sign
  6340  007A  087D               	movf	atoi@s,w
  6341  007B  0086               	movwf	6
  6342  007C  0187               	clrf	7
  6343  007D  302D               	movlw	45
  6344  007E  0601               	xorwf	1,w
  6345  007F  1D03               	btfss	3,2
  6346  0080  2886               	goto	l2174
  6347  0081  3001               	movlw	1
  6348  0082  00F8               	movwf	??_atoi
  6349  0083  0878               	movf	??_atoi,w
  6350  0084  07FA               	addwf	atoi@sign,f
  6351  0085  288D               	goto	l2180
  6352  0086                     l2174:	
  6353  0086  087D               	movf	atoi@s,w
  6354  0087  0086               	movwf	6
  6355  0088  0187               	clrf	7
  6356  0089  302B               	movlw	43
  6357  008A  0601               	xorwf	1,w
  6358  008B  1D03               	btfss	3,2
  6359  008C  2891               	goto	l2182
  6360  008D                     l2180:	
  6361  008D  3001               	movlw	1
  6362  008E  00F8               	movwf	??_atoi
  6363  008F  0878               	movf	??_atoi,w
  6364  0090  07FD               	addwf	atoi@s,f
  6365  0091                     l2182:	
  6366  0091  087D               	movf	atoi@s,w
  6367  0092  0086               	movwf	6
  6368  0093  0187               	clrf	7
  6369  0094  0801               	movf	1,w
  6370  0095  318E  265B  3180   	fcall	_isdigit
  6371  0098  1C03               	btfss	3,0
  6372  0099  28B6               	goto	l2184
  6373  009A  087C               	movf	atoi@a+1,w
  6374  009B  00F1               	movwf	___wmul@multiplier+1
  6375  009C  087B               	movf	atoi@a,w
  6376  009D  00F0               	movwf	___wmul@multiplier
  6377  009E  300A               	movlw	10
  6378  009F  00F2               	movwf	___wmul@multiplicand
  6379  00A0  3000               	movlw	0
  6380  00A1  00F3               	movwf	___wmul@multiplicand+1
  6381  00A2  318E  2695  3180   	fcall	___wmul
  6382  00A5  087D               	movf	atoi@s,w
  6383  00A6  0086               	movwf	6
  6384  00A7  0187               	clrf	7
  6385  00A8  0801               	movf	1,w
  6386  00A9  0770               	addwf	?___wmul,w
  6387  00AA  00F8               	movwf	??_atoi
  6388  00AB  0871               	movf	?___wmul+1,w
  6389  00AC  1803               	skipnc
  6390  00AD  0A71               	incf	?___wmul+1,w
  6391  00AE  00F9               	movwf	??_atoi+1
  6392  00AF  0878               	movf	??_atoi,w
  6393  00B0  3ED0               	addlw	208
  6394  00B1  00FB               	movwf	atoi@a
  6395  00B2  30FF               	movlw	255
  6396  00B3  3D79               	addwfc	??_atoi+1,w
  6397  00B4  00FC               	movwf	atoi@a+1
  6398  00B5  288D               	goto	l2180
  6399  00B6                     l2184:	
  6400  00B6  087A               	movf	atoi@sign,w
  6401  00B7  1903               	btfsc	3,2
  6402  00B8  28C5               	goto	l2190
  6403  00B9  097B               	comf	atoi@a,w
  6404  00BA  00F8               	movwf	??_atoi
  6405  00BB  097C               	comf	atoi@a+1,w
  6406  00BC  00F9               	movwf	??_atoi+1
  6407  00BD  0AF8               	incf	??_atoi,f
  6408  00BE  1903               	skipnz
  6409  00BF  0AF9               	incf	??_atoi+1,f
  6410  00C0  0878               	movf	??_atoi,w
  6411  00C1  00F6               	movwf	?_atoi
  6412  00C2  0879               	movf	??_atoi+1,w
  6413  00C3  00F7               	movwf	?_atoi+1
  6414  00C4  0008               	return
  6415  00C5                     l2190:	
  6416  00C5  087C               	movf	atoi@a+1,w
  6417  00C6  00F7               	movwf	?_atoi+1
  6418  00C7  087B               	movf	atoi@a,w
  6419  00C8  00F6               	movwf	?_atoi
  6420  00C9  0008               	return
  6421  00CA                     __end_of_atoi:	
  6422                           
  6423                           	psect	text16
  6424  0E5B                     __ptext16:	
  6425 ;; *************** function _isdigit *****************
  6426 ;; Defined at:
  6427 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  c               1    wreg     unsigned char 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  c               1    1[COMMON] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;		None               void
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        2 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_printf
  6451 ;;		_atoi
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _isdigit
  6457  0E5B                     _isdigit:	
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6461                           ;isdigit@c stored from wreg
  6462  0E5B  00F1               	movwf	isdigit@c
  6463  0E5C  01F0               	clrf	_isdigit$683
  6464  0E5D  303A               	movlw	58
  6465  0E5E  0271               	subwf	isdigit@c,w
  6466  0E5F  1803               	skipnc
  6467  0E60  2E67               	goto	l1682
  6468  0E61  3030               	movlw	48
  6469  0E62  0271               	subwf	isdigit@c,w
  6470  0E63  1C03               	skipc
  6471  0E64  2E67               	goto	l1682
  6472  0E65  01F0               	clrf	_isdigit$683
  6473  0E66  0AF0               	incf	_isdigit$683,f
  6474  0E67                     l1682:	
  6475  0E67  0C70               	rrf	_isdigit$683,w
  6476  0E68  0008               	return
  6477  0E69                     __end_of_isdigit:	
  6478                           
  6479                           	psect	text17
  6480  0E95                     __ptext17:	
  6481 ;; *************** function ___wmul *****************
  6482 ;; Defined at:
  6483 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  multiplier      2    0[COMMON] unsigned int 
  6486 ;;  multiplicand    2    2[COMMON] unsigned int 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  product         2    4[COMMON] unsigned int 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  2    0[COMMON] unsigned int 
  6491 ;; Registers used:
  6492 ;;		wreg, status,2, status,0
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;Total ram usage:        6 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_printf
  6508 ;;		_atoi
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function ___wmul
  6514  0E95                     ___wmul:	
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6518  0E95  01F4               	clrf	___wmul@product
  6519  0E96  01F5               	clrf	___wmul@product+1
  6520  0E97                     l1688:	
  6521  0E97  1C70               	btfss	___wmul@multiplier,0
  6522  0E98  2E9D               	goto	l472
  6523  0E99  0872               	movf	___wmul@multiplicand,w
  6524  0E9A  07F4               	addwf	___wmul@product,f
  6525  0E9B  0873               	movf	___wmul@multiplicand+1,w
  6526  0E9C  3DF5               	addwfc	___wmul@product+1,f
  6527  0E9D                     l472:	
  6528  0E9D  3001               	movlw	1
  6529  0E9E                     u1375:	
  6530  0E9E  35F2               	lslf	___wmul@multiplicand,f
  6531  0E9F  0DF3               	rlf	___wmul@multiplicand+1,f
  6532  0EA0  0B89               	decfsz	9,f
  6533  0EA1  2E9E               	goto	u1375
  6534  0EA2  3001               	movlw	1
  6535  0EA3                     u1385:	
  6536  0EA3  36F1               	lsrf	___wmul@multiplier+1,f
  6537  0EA4  0CF0               	rrf	___wmul@multiplier,f
  6538  0EA5  0B89               	decfsz	9,f
  6539  0EA6  2EA3               	goto	u1385
  6540  0EA7  0870               	movf	___wmul@multiplier,w
  6541  0EA8  0471               	iorwf	___wmul@multiplier+1,w
  6542  0EA9  1D03               	btfss	3,2
  6543  0EAA  2E97               	goto	l1688
  6544  0EAB  0875               	movf	___wmul@product+1,w
  6545  0EAC  00F1               	movwf	?___wmul+1
  6546  0EAD  0874               	movf	___wmul@product,w
  6547  0EAE  00F0               	movwf	?___wmul
  6548  0EAF  0008               	return
  6549  0EB0                     __end_of___wmul:	
  6550                           
  6551                           	psect	text18
  6552  0006                     __ptext18:	
  6553 ;; *************** function _SYSTEM_Initialize *****************
  6554 ;; Defined at:
  6555 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, status,2, status,0, pclath, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    1
  6576 ;; This function calls:
  6577 ;;		_EUSART_Initialize
  6578 ;;		_OSCILLATOR_Initialize
  6579 ;;		_PIN_MANAGER_Initialize
  6580 ;;		_SPI_Initialize
  6581 ;;		_WDT_Initialize
  6582 ;; This function is called by:
  6583 ;;		_main
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _SYSTEM_Initialize
  6589  0006                     _SYSTEM_Initialize:	
  6590                           
  6591                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6595  0006  318E  267E  3180   	fcall	_PIN_MANAGER_Initialize
  6596                           
  6597                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6598  0009  318E  2627  3180   	fcall	_OSCILLATOR_Initialize
  6599                           
  6600                           ;mcc.c: 75: WDT_Initialize();
  6601  000C  318E  260F  3180   	fcall	_WDT_Initialize
  6602                           
  6603                           ;mcc.c: 76: SPI_Initialize();
  6604  000F  318E  262E  3180   	fcall	_SPI_Initialize
  6605                           
  6606                           ;mcc.c: 77: EUSART_Initialize();
  6607  0012  318E  2650         	fcall	_EUSART_Initialize
  6608  0014  0008               	return
  6609  0015                     __end_of_SYSTEM_Initialize:	
  6610                           
  6611                           	psect	text19
  6612  0E0F                     __ptext19:	
  6613 ;; *************** function _WDT_Initialize *****************
  6614 ;; Defined at:
  6615 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      void 
  6622 ;; Registers used:
  6623 ;;		wreg
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_SYSTEM_Initialize
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _WDT_Initialize
  6644  0E0F                     _WDT_Initialize:	
  6645                           
  6646                           ;mcc.c: 93: WDTCON = 0x16;
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _WDT_Initialize: [wreg]
  6650  0E0F  3016               	movlw	22
  6651  0E10  0021               	movlb	1	; select bank1
  6652  0E11  0097               	movwf	23	;volatile
  6653  0E12  0008               	return
  6654  0E13                     __end_of_WDT_Initialize:	
  6655                           
  6656                           	psect	text20
  6657  0E2E                     __ptext20:	
  6658 ;; *************** function _SPI_Initialize *****************
  6659 ;; Defined at:
  6660 ;;		line 63 in file "mcc_generated_files/spi.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;		None
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;Total ram usage:        0 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		_SYSTEM_Initialize
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _SPI_Initialize
  6689  0E2E                     _SPI_Initialize:	
  6690                           
  6691                           ;spi.c: 68: SSP1STAT = 0x40;
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  6695  0E2E  3040               	movlw	64
  6696  0E2F  0024               	movlb	4	; select bank4
  6697  0E30  0094               	movwf	20	;volatile
  6698                           
  6699                           ;spi.c: 71: SSP1CON1 = 0x20;
  6700  0E31  3020               	movlw	32
  6701  0E32  0095               	movwf	21	;volatile
  6702                           
  6703                           ;spi.c: 74: SSP1ADD = 0x00;
  6704  0E33  0192               	clrf	18	;volatile
  6705  0E34  0008               	return
  6706  0E35                     __end_of_SPI_Initialize:	
  6707                           
  6708                           	psect	text21
  6709  0E7E                     __ptext21:	
  6710 ;; *************** function _PIN_MANAGER_Initialize *****************
  6711 ;; Defined at:
  6712 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;		None
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		wreg, status,2
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;Total ram usage:        0 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_SYSTEM_Initialize
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           
  6740                           ;psect for function _PIN_MANAGER_Initialize
  6741  0E7E                     _PIN_MANAGER_Initialize:	
  6742                           
  6743                           ;pin_manager.c: 57: LATA = 0x10;
  6744                           
  6745                           ;incstack = 0
  6746                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6747  0E7E  3010               	movlw	16
  6748  0E7F  0022               	movlb	2	; select bank2
  6749  0E80  008C               	movwf	12	;volatile
  6750                           
  6751                           ;pin_manager.c: 58: LATC = 0x00;
  6752  0E81  018E               	clrf	14	;volatile
  6753                           
  6754                           ;pin_manager.c: 63: TRISA = 0x2F;
  6755  0E82  302F               	movlw	47
  6756  0E83  0021               	movlb	1	; select bank1
  6757  0E84  008C               	movwf	12	;volatile
  6758                           
  6759                           ;pin_manager.c: 64: TRISC = 0x32;
  6760  0E85  3032               	movlw	50
  6761  0E86  008E               	movwf	14	;volatile
  6762                           
  6763                           ;pin_manager.c: 69: ANSELC = 0x00;
  6764  0E87  0023               	movlb	3	; select bank3
  6765  0E88  018E               	clrf	14	;volatile
  6766                           
  6767                           ;pin_manager.c: 70: ANSELA = 0x07;
  6768  0E89  3007               	movlw	7
  6769  0E8A  008C               	movwf	12	;volatile
  6770                           
  6771                           ;pin_manager.c: 75: WPUA = 0x00;
  6772  0E8B  0024               	movlb	4	; select bank4
  6773  0E8C  018C               	clrf	12	;volatile
  6774                           
  6775                           ;pin_manager.c: 76: WPUC = 0x30;
  6776  0E8D  3030               	movlw	48
  6777  0E8E  008E               	movwf	14	;volatile
  6778                           
  6779                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6780  0E8F  0021               	movlb	1	; select bank1
  6781  0E90  1395               	bcf	21,7	;volatile
  6782                           
  6783                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6784  0E91  0022               	movlb	2	; select bank2
  6785  0E92  019E               	clrf	30	;volatile
  6786                           
  6787                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6788  0E93  019D               	clrf	29	;volatile
  6789  0E94  0008               	return
  6790  0E95                     __end_of_PIN_MANAGER_Initialize:	
  6791                           
  6792                           	psect	text22
  6793  0E27                     __ptext22:	
  6794 ;; *************** function _OSCILLATOR_Initialize *****************
  6795 ;; Defined at:
  6796 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      void 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;Total ram usage:        0 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_SYSTEM_Initialize
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           
  6824                           ;psect for function _OSCILLATOR_Initialize
  6825  0E27                     _OSCILLATOR_Initialize:	
  6826                           
  6827                           ;mcc.c: 83: OSCCON = 0x60;
  6828                           
  6829                           ;incstack = 0
  6830                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6831  0E27  3060               	movlw	96
  6832  0E28  0021               	movlb	1	; select bank1
  6833  0E29  0099               	movwf	25	;volatile
  6834                           
  6835                           ;mcc.c: 85: OSCTUNE = 0x00;
  6836  0E2A  0198               	clrf	24	;volatile
  6837                           
  6838                           ;mcc.c: 87: BORCON = 0x00;
  6839  0E2B  0022               	movlb	2	; select bank2
  6840  0E2C  0196               	clrf	22	;volatile
  6841  0E2D  0008               	return
  6842  0E2E                     __end_of_OSCILLATOR_Initialize:	
  6843                           
  6844                           	psect	text23
  6845  0E50                     __ptext23:	
  6846 ;; *************** function _EUSART_Initialize *****************
  6847 ;; Defined at:
  6848 ;;		line 53 in file "mcc_generated_files/eusart.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, status,2
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;Total ram usage:        0 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_SYSTEM_Initialize
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function _EUSART_Initialize
  6877  0E50                     _EUSART_Initialize:	
  6878                           
  6879                           ;eusart.c: 58: BAUDCON = 0x08;
  6880                           
  6881                           ;incstack = 0
  6882                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6883  0E50  3008               	movlw	8
  6884  0E51  0023               	movlb	3	; select bank3
  6885  0E52  009F               	movwf	31	;volatile
  6886                           
  6887                           ;eusart.c: 61: RCSTA = 0x90;
  6888  0E53  3090               	movlw	144
  6889  0E54  009D               	movwf	29	;volatile
  6890                           
  6891                           ;eusart.c: 64: TXSTA = 0x24;
  6892  0E55  3024               	movlw	36
  6893  0E56  009E               	movwf	30	;volatile
  6894                           
  6895                           ;eusart.c: 67: SPBRGL = 0x33;
  6896  0E57  3033               	movlw	51
  6897  0E58  009B               	movwf	27	;volatile
  6898                           
  6899                           ;eusart.c: 70: SPBRGH = 0x00;
  6900  0E59  019C               	clrf	28	;volatile
  6901  0E5A  0008               	return
  6902  0E5B                     __end_of_EUSART_Initialize:	
  6903                           
  6904                           	psect	text24
  6905  0E46                     __ptext24:	
  6906 ;; *************** function _EUSART_Read *****************
  6907 ;; Defined at:
  6908 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      unsigned char 
  6915 ;; Registers used:
  6916 ;;		wreg
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;Total ram usage:        0 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; This function calls:
  6929 ;;		Nothing
  6930 ;; This function is called by:
  6931 ;;		_main
  6932 ;;		_getch
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _EUSART_Read
  6938  0E46                     _EUSART_Read:	
  6939  0E46                     l51:	
  6940                           ;eusart.c: 78: {
  6941                           
  6942                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _EUSART_Read: [wreg]
  6946                           
  6947  0E46  0020               	movlb	0	; select bank0
  6948  0E47  1E91               	btfss	17,5	;volatile
  6949  0E48  2E46               	goto	l51
  6950                           
  6951                           ;eusart.c: 79: }
  6952                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  6953  0E49  0023               	movlb	3	; select bank3
  6954  0E4A  1C9D               	btfss	29,1	;volatile
  6955  0E4B  2E4E               	goto	l2004
  6956                           
  6957                           ;eusart.c: 83: {
  6958                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  6959  0E4C  121D               	bcf	29,4	;volatile
  6960                           
  6961                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  6962  0E4D  161D               	bsf	29,4	;volatile
  6963  0E4E                     l2004:	
  6964                           
  6965                           ;eusart.c: 88: }
  6966                           ;eusart.c: 90: return RCREG;
  6967  0E4E  0819               	movf	25,w	;volatile
  6968  0E4F  0008               	return
  6969  0E50                     __end_of_EUSART_Read:	
  6970  007E                     btemp	set	126	;btemp
  6971  007E                     wtemp0	set	126


Data Sizes:
    Strings     811
    Constant    35
    Data        9
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      73
    BANK1            80     22      38
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_39(CODE[7]), printf@c(BANK0[1]), buf(BANK1[9]), can_receive@rx_buf(BANK0[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_38(CODE[25]), STR_37(CODE[19]), STR_36(CODE[24]), STR_35(CODE[18]), 
		 -> STR_34(CODE[22]), STR_33(CODE[44]), STR_32(CODE[26]), STR_31(CODE[42]), 
		 -> STR_30(CODE[38]), STR_29(CODE[54]), STR_28(CODE[59]), STR_27(CODE[51]), 
		 -> STR_26(CODE[23]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[21]), STR_19(CODE[3]), 
		 -> STR_18(CODE[13]), STR_17(CODE[13]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[20]), STR_13(CODE[14]), STR_12(CODE[14]), STR_11(CODE[14]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[22]), STR_7(CODE[25]), 
		 -> STR_6(CODE[15]), STR_5(CODE[16]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 9
		 -> buf(BANK1[9]), 

    can_receive@rx_buf_ptr	PTR unsigned char  size(1) Largest target is 15
		 -> can_receive@rx_buf(BANK0[15]), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> main@mask_buf(BANK1[4]), main@cnf_buf(BANK1[5]), can_status_check@can_status_buf(BANK0[2]), can_send@txb_ctrl_buf(BANK0[1]), 
		 -> can_send@debug_buf(BANK0[3]), can_send@tx_buf(BANK0[14]), can_send@can_status_buf(BANK0[2]), can_receive@rx_buf(BANK0[15]), 
		 -> can_txf_clear@can_int_flag(BANK0[4]), can_ope_mode@can_ctrl_buf(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_SPI_exchange
    _main->_atoi
    _can_status_check->_SPI_exchange
    _can_txf_clear->_SPI_exchange
    _can_receive->_SPI_exchange
    _can_send->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _set_sid->_printf
    _can_status_check->_can_receive
    _can_receive->_printf
    _can_send->_printf
    _can_ope_mode->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   44560
                                             57 BANK0      6     6      0
                                              0 BANK1     22    22      0
                        _EUSART_Read
                       _SPI_exchange
                  _SYSTEM_Initialize
                               _atoi
                       _can_ope_mode
                           _can_send
                   _can_status_check
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    5134
                                             25 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     6     6      0   16232
                                             51 BANK0      6     6      0
                       _SPI_exchange
                        _can_receive
                      _can_txf_clear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _can_txf_clear                                        9     9      0    2037
                                              0 BANK0      9     9      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _can_receive                                         26    26      0    7269
                                             25 BANK0     26    26      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_send                                            31    30      1    7872
                                             25 BANK0     31    30      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_ope_mode                                         7     7      0    6933
                                             25 BANK0      7     7      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              29    21      8    4872
                                              0 BANK0     25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    1868
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     704
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SPI_exchange
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_receive
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
     _can_txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     16      26       7       47.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 14 21:12:50 2018

                    _SPI_Initialize 0E2E               __end_of_can_txf_clear 0ED8  
                                 _c 00B7                         __CFG_CP$OFF 0000  
                                l51 0E46                                  l58 0E36  
           ?_SPI_Exchange8bitBuffer 0071                                  _nm 134A  
               ___wmul@multiplicand 0072               __size_of_SPI_exchange 0015  
                       __CFG_LVP$ON 0000                                 l113 0E42  
                               l211 01CA                                 l214 01DA  
                               l241 0FF4                                 l243 0FFA  
                               l235 0FDE                                 l324 02FD  
                               l236 0FDA                                 l238 0FEE  
                               l239 0FEA                                 l336 03D7  
                               l337 0347                                 l363 041F  
                               l283 06C8                                 l358 03FD  
                               l367 0456                                 l472 0E9D  
                               l388 0511            __end_of_can_status_check 1000  
                      __CFG_CPD$OFF 0000                                 _abc 1344  
                               _buf 00B8                                 _idx 00B6  
                               _sid 0063                        __CFG_BORV$LO 0000  
                               wreg 0009                        __CFG_IESO$ON 0000  
                 can_receive@rx_buf 003F                         main@cnf_buf 00A0  
                      ?_EUSART_Read 0070                                l2004 0E4E  
                              l2102 0277                                l2114 02AA  
                              l2124 02D3                                l2060 01E6  
                              l2054 01D6                                l2062 01EB  
                              l2302 060E                                l2128 02D5  
                              l2048 01C7                                l2320 064D  
                              l2162 006B                                l2082 022F  
                              l2250 0562                                l2242 0552  
                              l2218 0718                                l2180 008D  
                              l2164 0064                                l2084 0206  
                              l2252 0565                                l2228 073A  
                              l2190 00C5                                l2182 0091  
                              l2174 0086                                l2166 0070  
                              l1710 0F0C                                l2086 0235  
                              l2350 0789                                l2334 0694  
                              l2262 057A                                l2246 055B  
                              l2238 053C                                l2342 0770  
                              l2184 00B6                                l1712 0F18  
                              l2336 06CE                                l2256 056E  
                              l1650 001E                                l1722 0F33  
                              l1802 0397                                l2274 0590  
                              l2354 0794                                l1660 0048  
                              l1740 0EF6                                l1900 04FF  
                              l1804 03A2                                l2268 0585  
                              l2356 0795                                l1654 002C  
                              l1670 0061                                l1718 0F2A  
                              l1734 0EDE                                l1814 03B6  
                              l1902 02DC                                l2294 05DC  
                              l2278 0599                                l1664 004C  
                              l1656 003F                                l1736 0EEA  
                              l1744 0EFF                                l1808 03AD  
                              l1760 0302                                l2368 07CC  
                              l2296 05FF                                l1682 0E67  
                              l1658 0043                                l1826 03F1  
                              l1762 030B                                l1754 02F8  
                              l1668 005D                                l1852 0441  
                              l1870 047F                                l1862 0472  
                              l1854 044A                                l1782 035C  
                              l1774 0349                                l1766 0318  
                              l1688 0E97                                l1864 0475  
                              l1792 0379                                l1890 04D4  
                              l1882 049F                                l1786 035E  
                              l1876 048E                                l1796 037B  
                              l1788 036C                                l1980 0167  
                              l1878 0492                                l1886 04A7  
                              l1798 038A                                l1990 017B  
                              l1888 04AD                                l1898 04FB  
                              l1994 018C                                l1988 0176  
                              STR_1 11F0                                STR_2 12CF  
                              STR_3 1228                                STR_4 126C  
                              STR_5 12B0                                STR_6 12C0  
                              STR_7 1154                                STR_8 11B1  
                              STR_9 1166                                _LATA 010C  
                              u1415 0F0F                                _LATC 010E  
                              u2080 02D1                                u2064 02B4  
                              u2240 0527                                u1505 0EF0  
                              u2065 02B3                                u1435 0F19  
                              u1515 0EF7                                u1445 0F23  
                              u1375 0E9E                                u1455 0F2B  
                              u1385 0EA3                                u1715 0465  
                              u1485 0EE1                                u1645 0418  
                              u1814 0EB9                                u1815 0EB8  
                              u2375 05C5                                u1585 0372  
                              u1825 00EC                                u1675 043A  
                              u1915 0F4A                                u1870 01A1  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 0063                                _main 0512  
                              _mode 005F                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0002  
            __end_of_SPI_Initialize 0E35                        _SPI_exchange 0E69  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 0063  
                     ?_EUSART_Write 0070      __size_of_OSCILLATOR_Initialize 0007  
              __size_of_can_receive 00DA       __end_of_OSCILLATOR_Initialize 0E2E  
                             ?_atoi 0076                               ?_main 0070  
                             STR_10 11C3                               STR_11 12DE  
                             STR_12 12EC                               STR_20 11C7  
                             STR_13 12FA                               STR_21 1184  
                             STR_22 125B                               STR_14 11DC  
                             STR_30 10FB                               STR_23 129F  
                             STR_15 1239                               STR_31 10D1  
                             STR_16 127D                               STR_24 124A  
                             STR_40 1217                               STR_32 1121  
                             STR_17 1308                               STR_25 128E  
                             STR_33 10A5                       __CFG_WDTE$OFF 0000  
                             STR_18 1315                               STR_34 119B  
                             STR_26 116D                               STR_35 1205  
                             STR_19 1347                               STR_27 1072  
                             STR_36 113C                               STR_28 1001  
                             STR_37 1204                               STR_29 103C  
                             STR_38 113B                               STR_39 1334  
                   __end_of___lwdiv 0F38                     __end_of___lwmod 0F04  
     can_status_check@bytes_written 0055                               _RCREG 0199  
                             _RCSTA 019D                        main@mask_buf 00B0  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                   SPI_exchange@buf 007D                     SPI_exchange@len 0078  
                   __end_of_dpowers 132C                      _WDT_Initialize 0E0F  
                   __end_of_max_idx 1001                     __end_of_isdigit 0E69  
                             atoi@a 007B                               atoi@s 007D  
                             _putch 0E17                               main@n 00B5  
                     can_send@F2958 0067                     __end_of_set_sid 0F73  
                             status 0003                               wtemp0 007E  
            can_send@can_status_buf 004C                     ?_SPI_Initialize 0070  
                   __initialization 07D4                   can_send@debug_buf 0053  
                      __end_of_atoi 00CA                        __end_of_main 07D4  
                    ??_EUSART_Write 0070              can_status_check@status 0058  
                            ??_atoi 0078                              ??_main 0059  
                    __CFG_PLLEN$OFF 0000              __end_of_WDT_Initialize 0E13  
          __end_of_SPI_Exchange8bit 0E46               __size_of_can_ope_mode 0043  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                     main@mask_sidh 00AE                       main@mask_sidl 00AF  
                  __end_of_can_send 02D7                      __CFG_PWRTE$OFF 0000  
                            ___wmul 0E95                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                           ??___lwmod 007C  
         can_txf_clear@can_int_flag 0025                              _printf 02D7  
                      _can_ope_mode 0F73                              main@rc 00AA  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 003B                    __end_of_rxfnsidh 1341  
                  __end_of_txbnsidh 1344                    __end_of_rxmnsidh 134E  
              __size_of_EUSART_Read 000A                   _SYSTEM_Initialize 0006  
         SPI_exchange@bytes_written 007C             __end_of__initialization 07FD  
                    can_receive@dlc 004E                      can_receive@sid 004F  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 0E13                        __pidataBANK1 0E1C  
               ??_SYSTEM_Initialize 0070                      can_send@tx_buf 003E  
                    can_send@status 0052                       __end_of_putch 0E1C  
                        __end_of_nm 134C                   ?_can_status_check 0070  
                    _OPTION_REGbits 0095                  ??_can_status_check 0053  
         __end_of_SYSTEM_Initialize 0015                             ??_putch 0071  
                        __pbssBANK0 005F                          __pbssBANK1 00B6  
              __end_of_EUSART_Write 0E3D                          __pmaintext 0512  
                           ?___wmul 0070                             _BAUDCON 019F  
                           _APFCON0 011D                             _APFCON1 011E  
                           ?_printf 0020                           ?_can_send 0039  
                           _OSCTUNE 0098                             _SSP1ADD 0212  
                           _SSP1BUF 0211              __size_of_can_txf_clear 0028  
                  ??_SPI_Initialize 0070                       ??_can_receive 0039  
                   __size_of___wmul 001B                             ___lwdiv 0F04  
                           ___lwmod 0ED8                             __ptext1 0F38  
                           __ptext2 0FB6                             __ptext3 0EB0  
                           __ptext4 00CA                             __ptext5 01A4  
                           __ptext6 0F73                             __ptext7 02D7  
                           __ptext8 0E17                             __ptext9 0E35  
                   __size_of_printf 023B                   __end_of_hexpowers 1334  
                           _dpowers 1322               _OSCILLATOR_Initialize 0E27  
                           _max_idx 1000                          ??_can_send 003A  
                           _isdigit 0E5B            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 0F38      can_status_check@can_status_buf 0056  
                 ?_SPI_Exchange8bit 0070                             main@cmd 00B4  
                    can_txf_clear@n 0022                         set_sid@sidh 003F  
                       set_sid@sidl 0040          __size_of_SYSTEM_Initialize 000F  
                           main@sid 00A9                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
             can_receive@bytes_read 003E                             init_ram 0E21  
                           initloop 0E22                   _EUSART_Initialize 0E50  
                ?_EUSART_Initialize 0070                           _RCSTAbits 019D  
                           printf@c 0038                             printf@f 0020  
                     _can_txf_clear 0EB0                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                 __end_of_can_receive 01A4  
                  __CFG_FOSC$INTOSC 0000               __size_of_EUSART_Write 0008  
         __end_of_EUSART_Initialize 0E5B                          main@rc_452 00AB  
                 can_txf_clear@mask 0023                         printf@width 0036  
          ??_SPI_Exchange8bitBuffer 0073            can_ope_mode@can_ctrl_buf 003D  
             can_receive@rx_buf_ptr 0051                      ?_can_txf_clear 0070  
                    __end_of___wmul 0EB0               can_status_check@F2968 0065  
                      _EUSART_Write 0E35              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 0512                 start_initialization 07D4  
                      can_receive@n 0052     __size_of_PIN_MANAGER_Initialize 0017  
                       __end_of_abc 1347                       ??_EUSART_Read 0070  
                       putch@txData 0071           __size_of_can_status_check 004A  
         can_ope_mode@bytes_written 003C                       ?_SPI_exchange 0078  
                          ??___wmul 0074                         _can_receive 00CA  
                       __pdataBANK0 0065                         __pdataBANK1 00C1  
                          ??_printf 0028                           ___latbits 0002  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
                 __size_of_can_send 0133       SPI_Exchange8bitBuffer@dataOut 0072  
        __size_of_EUSART_Initialize 000B                 __end_of_EUSART_Read 0E50  
                    ??_SPI_exchange 0079     __size_of_SPI_Exchange8bitBuffer 004E  
                   ??_can_txf_clear 0020                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 0E7E                            ?___lwdiv 0070  
                          ?___lwmod 0078                            ?_isdigit 0070  
                         can_send@i 0056                           can_send@n 0057  
                          ?_set_sid 0039                           _hexpowers 132C  
                  ___lwdiv@quotient 0075                      __size_of_putch 0005  
                    ___wmul@product 0074                            _LATAbits 010C  
                          _LATCbits 010E                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                           main@F2974 00C1  
                          _SSP1CON1 0215                            _SSP1STAT 0214  
                     ?_can_ope_mode 0070                   ___wmul@multiplier 0070  
            _SPI_Exchange8bitBuffer 0015                          printf@flag 0035  
                        printf@prec 002D                         _EUSART_Read 0E46  
                       can_send@dlc 0039                         can_send@buf 004E  
                       can_send@len 004F                    _can_status_check 0FB6  
           __size_of_SPI_Initialize 0007             ??_OSCILLATOR_Initialize 0070  
                    ??_can_ope_mode 0039                    __size_of___lwdiv 0034  
                  __size_of___lwmod 002C        SPI_Exchange8bitBuffer@dataIn 0076  
                       _isdigit$683 0070                can_ope_mode@ope_mode 003B  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 01A4  
              __end_of_SPI_exchange 0E7E                    __size_of_isdigit 000E  
                          _main$433 00A5                            _main$434 00A7  
                   ___lwdiv@divisor 0070                     ___lwdiv@counter 0077  
                          __ptext10 0ED8                            __ptext11 0F04  
                          __ptext20 0E2E                            __ptext12 0E69  
                          __ptext21 0E7E                            __ptext13 0015  
                          __ptext22 0E27                            __ptext14 0E3D  
                          __ptext23 0E50                            __ptext15 0063  
                          __ptext24 0E46                            __ptext16 0E5B  
                          __ptext17 0E95                            __ptext18 0006  
                          __ptext19 0E0F                    __size_of_set_sid 003B  
                      _SSP1CON1bits 0215                       __size_of_atoi 0067  
                     __size_of_main 02C2                can_send@txb_ctrl_buf 0051  
                      ?_can_receive 0070                            atoi@sign 007A  
                         printf@idx 002C                           printf@len 0030  
                         printf@val 0033                        _SSP1STATbits 0214  
                          main@mask 00AC                            _rxfnsidh 133B  
                          _txbnsidh 1341                            _rxmnsidh 134C  
                    __pstringtext10 1072                      __pstringtext11 10A5  
                    __pstringtext20 11B1                      __pstringtext12 10D1  
                    __pstringtext21 11C7                      __pstringtext13 10FB  
                    __pstringtext30 126C                      __pstringtext22 11DC  
                    __pstringtext14 1121                      __pstringtext31 127D  
                    __pstringtext23 11F0                      __pstringtext15 113B  
                    __pstringtext40 1308                      __pstringtext32 128E  
                    __pstringtext24 1204                      __pstringtext16 1154  
                    __pstringtext41 1315                      __pstringtext33 129F  
                    __pstringtext25 1217                      __pstringtext17 116D  
                    __pstringtext42 1334                      __pstringtext34 12B0  
                    __pstringtext26 1228                      __pstringtext18 1184  
                    __pstringtext43 1347                      __pstringtext35 12C0  
                    __pstringtext27 1239                      __pstringtext19 119B  
                    __pstringtext44 0000                      __pstringtext36 12CF  
                    __pstringtext28 124A                      __pstringtext37 12DE  
                    __pstringtext29 125B                      __pstringtext38 12EC  
                    __pstringtext39 12FA                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004                    ___lwmod@dividend 007A  
           ?_PIN_MANAGER_Initialize 0070                   __CFG_CLKOUTEN$OFF 0000  
SPI_Exchange8bitBuffer@bytesWritten 0077                    _SPI_Exchange8bit 0E3D  
             can_send@bytes_written 0050                            printf@ap 0032  
                          printf@cp 002E          can_txf_clear@bytes_written 0024  
                     __pstringtext1 1322                       __pstringtext2 132C  
                     __pstringtext3 133B                       __pstringtext4 1341  
                     __pstringtext5 1344                       __pstringtext6 134A  
                     __pstringtext7 134C                       __pstringtext8 1000  
                     __pstringtext9 103C                     ___lwmod@divisor 0078  
                   ___lwmod@counter 007D                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 0E95                __end_of_can_ope_mode 0FB6  
                   set_sid@can_node 0039  
