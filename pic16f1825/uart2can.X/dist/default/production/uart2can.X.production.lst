

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 11 14:41:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F1825 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000E                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  008C                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010E                     	;# 
   122  0111                     	;# 
   123  0112                     	;# 
   124  0113                     	;# 
   125  0114                     	;# 
   126  0115                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  0118                     	;# 
   130  0119                     	;# 
   131  011A                     	;# 
   132  011B                     	;# 
   133  011D                     	;# 
   134  011E                     	;# 
   135  018C                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020C                     	;# 
   155  020E                     	;# 
   156  0211                     	;# 
   157  0211                     	;# 
   158  0212                     	;# 
   159  0212                     	;# 
   160  0213                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0216                     	;# 
   169  0217                     	;# 
   170  0217                     	;# 
   171  0291                     	;# 
   172  0291                     	;# 
   173  0292                     	;# 
   174  0293                     	;# 
   175  0294                     	;# 
   176  0295                     	;# 
   177  0295                     	;# 
   178  0296                     	;# 
   179  0298                     	;# 
   180  0298                     	;# 
   181  0299                     	;# 
   182  029A                     	;# 
   183  029B                     	;# 
   184  029C                     	;# 
   185  029D                     	;# 
   186  029E                     	;# 
   187  0311                     	;# 
   188  0311                     	;# 
   189  0312                     	;# 
   190  0313                     	;# 
   191  0318                     	;# 
   192  0318                     	;# 
   193  0319                     	;# 
   194  031A                     	;# 
   195  038C                     	;# 
   196  038E                     	;# 
   197  0391                     	;# 
   198  0392                     	;# 
   199  0393                     	;# 
   200  039A                     	;# 
   201  039C                     	;# 
   202  039D                     	;# 
   203  039E                     	;# 
   204  039F                     	;# 
   205  0415                     	;# 
   206  0416                     	;# 
   207  0417                     	;# 
   208  041C                     	;# 
   209  041D                     	;# 
   210  041E                     	;# 
   211  0FE4                     	;# 
   212  0FE5                     	;# 
   213  0FE6                     	;# 
   214  0FE7                     	;# 
   215  0FE8                     	;# 
   216  0FE9                     	;# 
   217  0FEA                     	;# 
   218  0FEB                     	;# 
   219  0FED                     	;# 
   220  0FEE                     	;# 
   221  0FEF                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000E                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  008C                     	;# 
   251  008E                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0095                     	;# 
   256  0096                     	;# 
   257  0097                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009A                     	;# 
   261  009B                     	;# 
   262  009B                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  010C                     	;# 
   267  010E                     	;# 
   268  0111                     	;# 
   269  0112                     	;# 
   270  0113                     	;# 
   271  0114                     	;# 
   272  0115                     	;# 
   273  0116                     	;# 
   274  0117                     	;# 
   275  0118                     	;# 
   276  0119                     	;# 
   277  011A                     	;# 
   278  011B                     	;# 
   279  011D                     	;# 
   280  011E                     	;# 
   281  018C                     	;# 
   282  018E                     	;# 
   283  0191                     	;# 
   284  0191                     	;# 
   285  0192                     	;# 
   286  0193                     	;# 
   287  0193                     	;# 
   288  0193                     	;# 
   289  0194                     	;# 
   290  0195                     	;# 
   291  0196                     	;# 
   292  0199                     	;# 
   293  019A                     	;# 
   294  019B                     	;# 
   295  019B                     	;# 
   296  019C                     	;# 
   297  019D                     	;# 
   298  019E                     	;# 
   299  019F                     	;# 
   300  020C                     	;# 
   301  020E                     	;# 
   302  0211                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0213                     	;# 
   308  0214                     	;# 
   309  0214                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0215                     	;# 
   313  0216                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0217                     	;# 
   317  0291                     	;# 
   318  0291                     	;# 
   319  0292                     	;# 
   320  0293                     	;# 
   321  0294                     	;# 
   322  0295                     	;# 
   323  0295                     	;# 
   324  0296                     	;# 
   325  0298                     	;# 
   326  0298                     	;# 
   327  0299                     	;# 
   328  029A                     	;# 
   329  029B                     	;# 
   330  029C                     	;# 
   331  029D                     	;# 
   332  029E                     	;# 
   333  0311                     	;# 
   334  0311                     	;# 
   335  0312                     	;# 
   336  0313                     	;# 
   337  0318                     	;# 
   338  0318                     	;# 
   339  0319                     	;# 
   340  031A                     	;# 
   341  038C                     	;# 
   342  038E                     	;# 
   343  0391                     	;# 
   344  0392                     	;# 
   345  0393                     	;# 
   346  039A                     	;# 
   347  039C                     	;# 
   348  039D                     	;# 
   349  039E                     	;# 
   350  039F                     	;# 
   351  0415                     	;# 
   352  0416                     	;# 
   353  0417                     	;# 
   354  041C                     	;# 
   355  041D                     	;# 
   356  041E                     	;# 
   357  0FE4                     	;# 
   358  0FE5                     	;# 
   359  0FE6                     	;# 
   360  0FE7                     	;# 
   361  0FE8                     	;# 
   362  0FE9                     	;# 
   363  0FEA                     	;# 
   364  0FEB                     	;# 
   365  0FED                     	;# 
   366  0FEE                     	;# 
   367  0FEF                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000E                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  001E                     	;# 
   395  001F                     	;# 
   396  008C                     	;# 
   397  008E                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0098                     	;# 
   405  0099                     	;# 
   406  009A                     	;# 
   407  009B                     	;# 
   408  009B                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009E                     	;# 
   412  010C                     	;# 
   413  010E                     	;# 
   414  0111                     	;# 
   415  0112                     	;# 
   416  0113                     	;# 
   417  0114                     	;# 
   418  0115                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  0118                     	;# 
   422  0119                     	;# 
   423  011A                     	;# 
   424  011B                     	;# 
   425  011D                     	;# 
   426  011E                     	;# 
   427  018C                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020C                     	;# 
   447  020E                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0294                     	;# 
   468  0295                     	;# 
   469  0295                     	;# 
   470  0296                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  029B                     	;# 
   476  029C                     	;# 
   477  029D                     	;# 
   478  029E                     	;# 
   479  0311                     	;# 
   480  0311                     	;# 
   481  0312                     	;# 
   482  0313                     	;# 
   483  0318                     	;# 
   484  0318                     	;# 
   485  0319                     	;# 
   486  031A                     	;# 
   487  038C                     	;# 
   488  038E                     	;# 
   489  0391                     	;# 
   490  0392                     	;# 
   491  0393                     	;# 
   492  039A                     	;# 
   493  039C                     	;# 
   494  039D                     	;# 
   495  039E                     	;# 
   496  039F                     	;# 
   497  0415                     	;# 
   498  0416                     	;# 
   499  0417                     	;# 
   500  041C                     	;# 
   501  041D                     	;# 
   502  041E                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000E                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0015                     	;# 
   532  0016                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001C                     	;# 
   540  001E                     	;# 
   541  001F                     	;# 
   542  008C                     	;# 
   543  008E                     	;# 
   544  0091                     	;# 
   545  0092                     	;# 
   546  0093                     	;# 
   547  0095                     	;# 
   548  0096                     	;# 
   549  0097                     	;# 
   550  0098                     	;# 
   551  0099                     	;# 
   552  009A                     	;# 
   553  009B                     	;# 
   554  009B                     	;# 
   555  009C                     	;# 
   556  009D                     	;# 
   557  009E                     	;# 
   558  010C                     	;# 
   559  010E                     	;# 
   560  0111                     	;# 
   561  0112                     	;# 
   562  0113                     	;# 
   563  0114                     	;# 
   564  0115                     	;# 
   565  0116                     	;# 
   566  0117                     	;# 
   567  0118                     	;# 
   568  0119                     	;# 
   569  011A                     	;# 
   570  011B                     	;# 
   571  011D                     	;# 
   572  011E                     	;# 
   573  018C                     	;# 
   574  018E                     	;# 
   575  0191                     	;# 
   576  0191                     	;# 
   577  0192                     	;# 
   578  0193                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0199                     	;# 
   585  019A                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019D                     	;# 
   590  019E                     	;# 
   591  019F                     	;# 
   592  020C                     	;# 
   593  020E                     	;# 
   594  0211                     	;# 
   595  0211                     	;# 
   596  0212                     	;# 
   597  0212                     	;# 
   598  0213                     	;# 
   599  0213                     	;# 
   600  0214                     	;# 
   601  0214                     	;# 
   602  0215                     	;# 
   603  0215                     	;# 
   604  0215                     	;# 
   605  0216                     	;# 
   606  0216                     	;# 
   607  0217                     	;# 
   608  0217                     	;# 
   609  0291                     	;# 
   610  0291                     	;# 
   611  0292                     	;# 
   612  0293                     	;# 
   613  0294                     	;# 
   614  0295                     	;# 
   615  0295                     	;# 
   616  0296                     	;# 
   617  0298                     	;# 
   618  0298                     	;# 
   619  0299                     	;# 
   620  029A                     	;# 
   621  029B                     	;# 
   622  029C                     	;# 
   623  029D                     	;# 
   624  029E                     	;# 
   625  0311                     	;# 
   626  0311                     	;# 
   627  0312                     	;# 
   628  0313                     	;# 
   629  0318                     	;# 
   630  0318                     	;# 
   631  0319                     	;# 
   632  031A                     	;# 
   633  038C                     	;# 
   634  038E                     	;# 
   635  0391                     	;# 
   636  0392                     	;# 
   637  0393                     	;# 
   638  039A                     	;# 
   639  039C                     	;# 
   640  039D                     	;# 
   641  039E                     	;# 
   642  039F                     	;# 
   643  0415                     	;# 
   644  0416                     	;# 
   645  0417                     	;# 
   646  041C                     	;# 
   647  041D                     	;# 
   648  041E                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0015                     	;# 
   678  0016                     	;# 
   679  0016                     	;# 
   680  0017                     	;# 
   681  0018                     	;# 
   682  0019                     	;# 
   683  001A                     	;# 
   684  001B                     	;# 
   685  001C                     	;# 
   686  001E                     	;# 
   687  001F                     	;# 
   688  008C                     	;# 
   689  008E                     	;# 
   690  0091                     	;# 
   691  0092                     	;# 
   692  0093                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0097                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009A                     	;# 
   699  009B                     	;# 
   700  009B                     	;# 
   701  009C                     	;# 
   702  009D                     	;# 
   703  009E                     	;# 
   704  010C                     	;# 
   705  010E                     	;# 
   706  0111                     	;# 
   707  0112                     	;# 
   708  0113                     	;# 
   709  0114                     	;# 
   710  0115                     	;# 
   711  0116                     	;# 
   712  0117                     	;# 
   713  0118                     	;# 
   714  0119                     	;# 
   715  011A                     	;# 
   716  011B                     	;# 
   717  011D                     	;# 
   718  011E                     	;# 
   719  018C                     	;# 
   720  018E                     	;# 
   721  0191                     	;# 
   722  0191                     	;# 
   723  0192                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0193                     	;# 
   727  0194                     	;# 
   728  0195                     	;# 
   729  0196                     	;# 
   730  0199                     	;# 
   731  019A                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019C                     	;# 
   735  019D                     	;# 
   736  019E                     	;# 
   737  019F                     	;# 
   738  020C                     	;# 
   739  020E                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0213                     	;# 
   746  0214                     	;# 
   747  0214                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0216                     	;# 
   752  0216                     	;# 
   753  0217                     	;# 
   754  0217                     	;# 
   755  0291                     	;# 
   756  0291                     	;# 
   757  0292                     	;# 
   758  0293                     	;# 
   759  0294                     	;# 
   760  0295                     	;# 
   761  0295                     	;# 
   762  0296                     	;# 
   763  0298                     	;# 
   764  0298                     	;# 
   765  0299                     	;# 
   766  029A                     	;# 
   767  029B                     	;# 
   768  029C                     	;# 
   769  029D                     	;# 
   770  029E                     	;# 
   771  0311                     	;# 
   772  0311                     	;# 
   773  0312                     	;# 
   774  0313                     	;# 
   775  0318                     	;# 
   776  0318                     	;# 
   777  0319                     	;# 
   778  031A                     	;# 
   779  038C                     	;# 
   780  038E                     	;# 
   781  0391                     	;# 
   782  0392                     	;# 
   783  0393                     	;# 
   784  039A                     	;# 
   785  039C                     	;# 
   786  039D                     	;# 
   787  039E                     	;# 
   788  039F                     	;# 
   789  0415                     	;# 
   790  0416                     	;# 
   791  0417                     	;# 
   792  041C                     	;# 
   793  041D                     	;# 
   794  041E                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806                           
   807                           	psect	idataBANK0
   808  0353                     __pidataBANK0:	
   809                           
   810                           ;initializer for can_start@F2923
   811  0353  3402               	retlw	2
   812  0354  340F               	retlw	15
   813  0355  3400               	retlw	0
   814                           
   815                           	psect	stringtext1
   816  083D                     __pstringtext1:	
   817  083D                     _hexpowers:	
   818  083D  3401               	retlw	1
   819  083E  3400               	retlw	0
   820  083F  3410               	retlw	16
   821  0840  3400               	retlw	0
   822  0841  3400               	retlw	0
   823  0842  3401               	retlw	1
   824  0843  3400               	retlw	0
   825  0844  3410               	retlw	16
   826  0845                     __end_of_hexpowers:	
   827                           
   828                           	psect	stringtext2
   829  084C                     __pstringtext2:	
   830  084C                     _txb_n_ctrl:	
   831  084C  3430               	retlw	48
   832  084D  3440               	retlw	64
   833  084E  3450               	retlw	80
   834  084F                     __end_of_txb_n_ctrl:	
   835                           
   836                           	psect	stringtext3
   837  0800                     __pstringtext3:	
   838  0800                     _max_char:	
   839  0800  343F               	retlw	63
   840  0801                     __end_of_max_char:	
   841  0011                     _PIR1bits	set	17
   842  0095                     _OPTION_REGbits	set	149
   843  008E                     _TRISC	set	142
   844  008C                     _TRISA	set	140
   845  0097                     _WDTCON	set	151
   846  0098                     _OSCTUNE	set	152
   847  0099                     _OSCCON	set	153
   848  04D6                     _PLLR	set	1238
   849  010E                     _LATCbits	set	270
   850  011D                     _APFCON0	set	285
   851  011E                     _APFCON1	set	286
   852  010E                     _LATC	set	270
   853  010C                     _LATA	set	268
   854  0116                     _BORCON	set	278
   855  018C                     _ANSELA	set	396
   856  018E                     _ANSELC	set	398
   857  019A                     _TXREG	set	410
   858  0199                     _RCREG	set	409
   859  019D                     _RCSTAbits	set	413
   860  019C                     _SPBRGH	set	412
   861  019B                     _SPBRGL	set	411
   862  019E                     _TXSTA	set	414
   863  019D                     _RCSTA	set	413
   864  019F                     _BAUDCON	set	415
   865  0214                     _SSP1STATbits	set	532
   866  0211                     _SSP1BUF	set	529
   867  0215                     _SSP1CON1bits	set	533
   868  0212                     _SSP1ADD	set	530
   869  0215                     _SSP1CON1	set	533
   870  0214                     _SSP1STAT	set	532
   871  020E                     _WPUC	set	526
   872  020C                     _WPUA	set	524
   873  0801                     STR_4:	
   874  0801  340A               	retlw	10
   875  0802  3443               	retlw	67	;'C'
   876  0803  3441               	retlw	65	;'A'
   877  0804  344E               	retlw	78	;'N'
   878  0805  3420               	retlw	32	;' '
   879  0806  346D               	retlw	109	;'m'
   880  0807  3465               	retlw	101	;'e'
   881  0808  3473               	retlw	115	;'s'
   882  0809  3473               	retlw	115	;'s'
   883  080A  3461               	retlw	97	;'a'
   884  080B  3467               	retlw	103	;'g'
   885  080C  3465               	retlw	101	;'e'
   886  080D  3420               	retlw	32	;' '
   887  080E  3473               	retlw	115	;'s'
   888  080F  3465               	retlw	101	;'e'
   889  0810  346E               	retlw	110	;'n'
   890  0811  3474               	retlw	116	;'t'
   891  0812  343A               	retlw	58	;':'
   892  0813  3420               	retlw	32	;' '
   893  0814  3425               	retlw	37	;'%'
   894  0815  3473               	retlw	115	;'s'
   895  0816  340A               	retlw	10
   896  0817  3400               	retlw	0
   897                           
   898                           	psect	stringtext4
   899  0818                     __pstringtext4:	
   900  0818                     STR_1:	
   901  0818  3453               	retlw	83	;'S'
   902  0819  3449               	retlw	73	;'I'
   903  081A  3444               	retlw	68	;'D'
   904  081B  3420               	retlw	32	;' '
   905  081C  3473               	retlw	115	;'s'
   906  081D  3465               	retlw	101	;'e'
   907  081E  3474               	retlw	116	;'t'
   908  081F  343A               	retlw	58	;':'
   909  0820  3420               	retlw	32	;' '
   910  0821  3425               	retlw	37	;'%'
   911  0822  3430               	retlw	48	;'0'
   912  0823  3432               	retlw	50	;'2'
   913  0824  3478               	retlw	120	;'x'
   914  0825  3420               	retlw	32	;' '
   915  0826  3425               	retlw	37	;'%'
   916  0827  3430               	retlw	48	;'0'
   917  0828  3432               	retlw	50	;'2'
   918  0829  3478               	retlw	120	;'x'
   919  082A  340A               	retlw	10
   920  082B  3400               	retlw	0
   921                           
   922                           	psect	stringtext5
   923  082C                     __pstringtext5:	
   924  082C                     STR_6:	
   925  082C  3430               	retlw	48	;'0'
   926  082D  3431               	retlw	49	;'1'
   927  082E  3432               	retlw	50	;'2'
   928  082F  3433               	retlw	51	;'3'
   929  0830  3434               	retlw	52	;'4'
   930  0831  3435               	retlw	53	;'5'
   931  0832  3436               	retlw	54	;'6'
   932  0833  3437               	retlw	55	;'7'
   933  0834  3438               	retlw	56	;'8'
   934  0835  3439               	retlw	57	;'9'
   935  0836  3461               	retlw	97	;'a'
   936  0837  3462               	retlw	98	;'b'
   937  0838  3463               	retlw	99	;'c'
   938  0839  3464               	retlw	100	;'d'
   939  083A  3465               	retlw	101	;'e'
   940  083B  3466               	retlw	102	;'f'
   941  083C  3400               	retlw	0
   942                           
   943                           	psect	stringtext6
   944  0845                     __pstringtext6:	
   945  0845                     STR_5:	
   946  0845  3428               	retlw	40	;'('
   947  0846  346E               	retlw	110	;'n'
   948  0847  3475               	retlw	117	;'u'
   949  0848  346C               	retlw	108	;'l'
   950  0849  346C               	retlw	108	;'l'
   951  084A  3429               	retlw	41	;')'
   952  084B  3400               	retlw	0
   953                           
   954                           	psect	stringtext7
   955  084F                     __pstringtext7:	
   956  084F                     STR_2:	
   957  084F  3425               	retlw	37	;'%'
   958  0850  3463               	retlw	99	;'c'
   959  0851  3400               	retlw	0
   960                           
   961                           	psect	stringtext8
   962  0000                     __pstringtext8:	
   963  0802                     
   964                           ; #config settings
   965  0000                     
   966                           	psect	cinit
   967  07E2                     start_initialization:	
   968  07E2                     __initialization:	
   969                           
   970                           ; Initialize objects allocated to BANK0
   971  07E2  3183  2353  3187   	fcall	__pidataBANK0	;fetch initializer
   972  07E5  00D0               	movwf	__pdataBANK0& (0+127)
   973  07E6  3183  2354  3187   	fcall	__pidataBANK0+1	;fetch initializer
   974  07E9  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   975  07EA  3183  2355  3187   	fcall	__pidataBANK0+2	;fetch initializer
   976  07ED  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   977                           
   978                           ; Clear objects allocated to BANK0
   979  07EE  303D               	movlw	low __pbssBANK0
   980  07EF  0084               	movwf	4
   981  07F0  3000               	movlw	high __pbssBANK0
   982  07F1  0085               	movwf	5
   983  07F2  3013               	movlw	19
   984  07F3  3183  2365  3187   	fcall	clear_ram0
   985                           
   986                           ; Clear objects allocated to BANK1
   987  07F6  30A0               	movlw	low __pbssBANK1
   988  07F7  0084               	movwf	4
   989  07F8  3000               	movlw	high __pbssBANK1
   990  07F9  0085               	movwf	5
   991  07FA  3040               	movlw	64
   992  07FB  3183  2365         	fcall	clear_ram0
   993  07FD                     end_of_initialization:	
   994                           ;End of C runtime variable initialization code
   995                           
   996  07FD                     __end_of__initialization:	
   997  07FD  0020               	movlb	0
   998  07FE  3185  2D9C         	ljmp	_main	;jump to C main() function
   999                           
  1000                           	psect	bssBANK0
  1001  003D                     __pbssBANK0:	
  1002  003D                     _sid:	
  1003  003D                     	ds	2
  1004  003F                     _cnt:	
  1005  003F                     	ds	1
  1006  0040                     _c:	
  1007  0040                     	ds	1
  1008  0041                     _tx_buf:	
  1009  0041                     	ds	15
  1010                           
  1011                           	psect	dataBANK0
  1012  0050                     __pdataBANK0:	
  1013  0050                     can_start@F2923:	
  1014  0050                     	ds	3
  1015                           
  1016                           	psect	bssBANK1
  1017  00A0                     __pbssBANK1:	
  1018  00A0                     _buf:	
  1019  00A0                     	ds	64
  1020                           
  1021                           	psect	clrtext
  1022  0365                     clear_ram0:	
  1023                           ;	Called with FSR0 containing the base address, and
  1024                           ;	WREG with the size to clear
  1025                           
  1026  0365  0064               	clrwdt	;clear the watchdog before getting into this loop
  1027  0366                     clrloop0:	
  1028  0366  0180               	clrf	0	;clear RAM location pointed to by FSR
  1029  0367  3101               	addfsr 0,1
  1030  0368  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1031  0369  2B66               	goto	clrloop0	;have we reached the end yet?
  1032  036A  3400               	retlw	0	;all done for this memory range, return
  1033                           
  1034                           	psect	cstackCOMMON
  1035  0070                     __pcstackCOMMON:	
  1036  0070                     ?_isdigit:	
  1037  0070                     ?_PIN_MANAGER_Initialize:	
  1038                           ; 1 bit 
  1039                           
  1040  0070                     ??_PIN_MANAGER_Initialize:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_OSCILLATOR_Initialize:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ??_OSCILLATOR_Initialize:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_WDT_Initialize:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ??_WDT_Initialize:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_SPI_Initialize:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ??_SPI_Initialize:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_EUSART_Initialize:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ??_EUSART_Initialize:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ??_isdigit:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_SYSTEM_Initialize:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ??_SYSTEM_Initialize:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_EUSART_Read:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ??_EUSART_Read:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_EUSART_Write:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ??_EUSART_Write:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_putch:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_can_start:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_main:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_SPI_Exchange8bit:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ??_SPI_Exchange8bit:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?___wmul:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?___lwdiv:	
  1107                           ; 2 bytes @ 0x0
  1108                           
  1109  0070                     EUSART_Write@txData:	
  1110                           ; 2 bytes @ 0x0
  1111                           
  1112  0070                     SPI_Exchange8bit@data:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     _isdigit$576:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0070                     ___wmul@multiplier:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121  0070                     ___lwdiv@divisor:	
  1122                           ; 2 bytes @ 0x0
  1123                           
  1124                           
  1125                           ; 2 bytes @ 0x0
  1126  0070                     	ds	1
  1127  0071                     ?_SPI_Exchange8bitBuffer:	
  1128  0071                     ??_putch:	
  1129                           ; 1 bytes @ 0x1
  1130                           
  1131  0071                     putch@txData:	
  1132                           ; 1 bytes @ 0x1
  1133                           
  1134  0071                     SPI_Exchange8bitBuffer@bufLen:	
  1135                           ; 1 bytes @ 0x1
  1136                           
  1137  0071                     isdigit@c:	
  1138                           ; 1 bytes @ 0x1
  1139                           
  1140                           
  1141                           ; 1 bytes @ 0x1
  1142  0071                     	ds	1
  1143  0072                     SPI_Exchange8bitBuffer@dataOut:	
  1144  0072                     ___wmul@multiplicand:	
  1145                           ; 1 bytes @ 0x2
  1146                           
  1147  0072                     ___lwdiv@dividend:	
  1148                           ; 2 bytes @ 0x2
  1149                           
  1150                           
  1151                           ; 2 bytes @ 0x2
  1152  0072                     	ds	1
  1153  0073                     ??_SPI_Exchange8bitBuffer:	
  1154                           
  1155                           ; 1 bytes @ 0x3
  1156  0073                     	ds	1
  1157  0074                     ??___wmul:	
  1158  0074                     ??___lwdiv:	
  1159                           ; 1 bytes @ 0x4
  1160                           
  1161  0074                     ___wmul@product:	
  1162                           ; 1 bytes @ 0x4
  1163                           
  1164                           
  1165                           ; 2 bytes @ 0x4
  1166  0074                     	ds	1
  1167  0075                     ___lwdiv@quotient:	
  1168                           
  1169                           ; 2 bytes @ 0x5
  1170  0075                     	ds	1
  1171  0076                     ?_atoi:	
  1172  0076                     SPI_Exchange8bitBuffer@dataIn:	
  1173                           ; 2 bytes @ 0x6
  1174                           
  1175  0076                     atoi@s:	
  1176                           ; 1 bytes @ 0x6
  1177                           
  1178                           
  1179                           ; 2 bytes @ 0x6
  1180  0076                     	ds	1
  1181  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  1182  0077                     ___lwdiv@counter:	
  1183                           ; 1 bytes @ 0x7
  1184                           
  1185                           
  1186                           ; 1 bytes @ 0x7
  1187  0077                     	ds	1
  1188  0078                     ??_atoi:	
  1189  0078                     ??_can_start:	
  1190                           ; 1 bytes @ 0x8
  1191                           
  1192  0078                     ?_can_send:	
  1193                           ; 1 bytes @ 0x8
  1194                           
  1195  0078                     ?_printf:	
  1196                           ; 1 bytes @ 0x8
  1197                           
  1198  0078                     can_send@buf:	
  1199                           ; 2 bytes @ 0x8
  1200                           
  1201  0078                     printf@f:	
  1202                           ; 1 bytes @ 0x8
  1203                           
  1204                           
  1205                           ; 2 bytes @ 0x8
  1206  0078                     	ds	1
  1207  0079                     can_send@cnt:	
  1208                           
  1209                           ; 1 bytes @ 0x9
  1210  0079                     	ds	1
  1211  007A                     ??_can_send:	
  1212  007A                     atoi@sign:	
  1213                           ; 1 bytes @ 0xA
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0xA
  1217  007A                     	ds	1
  1218  007B                     atoi@a:	
  1219                           
  1220                           ; 2 bytes @ 0xB
  1221  007B                     	ds	3
  1222                           
  1223                           	psect	cstackBANK0
  1224  0020                     __pcstackBANK0:	
  1225  0020                     ??_printf:	
  1226  0020                     can_start@can_ctrl_buf:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0020                     can_send@txb_ctrl_buf:	
  1230                           ; 3 bytes @ 0x0
  1231                           
  1232                           
  1233                           ; 3 bytes @ 0x0
  1234  0020                     	ds	3
  1235  0023                     can_start@bytes_written:	
  1236  0023                     can_send@n:	
  1237                           ; 1 bytes @ 0x3
  1238                           
  1239                           
  1240                           ; 1 bytes @ 0x3
  1241  0023                     	ds	1
  1242  0024                     can_send@len:	
  1243  0024                     printf@idx:	
  1244                           ; 1 bytes @ 0x4
  1245                           
  1246                           
  1247                           ; 1 bytes @ 0x4
  1248  0024                     	ds	1
  1249  0025                     can_send@bytes_written:	
  1250  0025                     printf@flag:	
  1251                           ; 1 bytes @ 0x5
  1252                           
  1253                           
  1254                           ; 1 bytes @ 0x5
  1255  0025                     	ds	1
  1256  0026                     can_send@i:	
  1257  0026                     printf@val:	
  1258                           ; 1 bytes @ 0x6
  1259                           
  1260                           
  1261                           ; 2 bytes @ 0x6
  1262  0026                     	ds	2
  1263  0028                     printf@prec:	
  1264                           
  1265                           ; 1 bytes @ 0x8
  1266  0028                     	ds	1
  1267  0029                     printf@cp:	
  1268                           
  1269                           ; 2 bytes @ 0x9
  1270  0029                     	ds	2
  1271  002B                     printf@ap:	
  1272                           
  1273                           ; 1 bytes @ 0xB
  1274  002B                     	ds	1
  1275  002C                     printf@len:	
  1276                           
  1277                           ; 2 bytes @ 0xC
  1278  002C                     	ds	2
  1279  002E                     printf@width:	
  1280                           
  1281                           ; 2 bytes @ 0xE
  1282  002E                     	ds	2
  1283  0030                     printf@c:	
  1284                           
  1285                           ; 1 bytes @ 0x10
  1286  0030                     	ds	1
  1287  0031                     ?_set_sid:	
  1288  0031                     set_sid@can_node:	
  1289                           ; 1 bytes @ 0x11
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x11
  1293  0031                     	ds	2
  1294  0033                     ??_set_sid:	
  1295                           
  1296                           ; 1 bytes @ 0x13
  1297  0033                     	ds	4
  1298  0037                     set_sid@sidh:	
  1299                           
  1300                           ; 1 bytes @ 0x17
  1301  0037                     	ds	1
  1302  0038                     set_sid@sidl:	
  1303                           
  1304                           ; 1 bytes @ 0x18
  1305  0038                     	ds	1
  1306  0039                     ??_main:	
  1307                           
  1308                           ; 1 bytes @ 0x19
  1309  0039                     	ds	2
  1310  003B                     main@sid:	
  1311                           
  1312                           ; 2 bytes @ 0x1B
  1313  003B                     	ds	2
  1314                           
  1315                           	psect	maintext
  1316  059C                     __pmaintext:	
  1317 ;;
  1318 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1319 ;;
  1320 ;; *************** function _main *****************
  1321 ;; Defined at:
  1322 ;;		line 98 in file "main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  sid             2   27[BANK0 ] unsigned int 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : B1F/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1340 ;;Total ram usage:        4 bytes
  1341 ;; Hardware stack levels required when called:    4
  1342 ;; This function calls:
  1343 ;;		_EUSART_Read
  1344 ;;		_SYSTEM_Initialize
  1345 ;;		_atoi
  1346 ;;		_can_send
  1347 ;;		_can_start
  1348 ;;		_printf
  1349 ;;		_set_sid
  1350 ;; This function is called by:
  1351 ;;		Startup code after reset
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           
  1356                           ;psect for function _main
  1357  059C                     _main:	
  1358                           
  1359                           ;main.c: 100: SYSTEM_Initialize();
  1360                           
  1361                           ;incstack = 0
  1362                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1363  059C  3183  23AA  3185   	fcall	_SYSTEM_Initialize
  1364                           
  1365                           ;main.c: 105: set_sid(0);
  1366  059F  3000               	movlw	0
  1367  05A0  0020               	movlb	0	; select bank0
  1368  05A1  00B1               	movwf	set_sid@can_node
  1369  05A2  00B2               	movwf	set_sid@can_node+1
  1370  05A3  3184  2435  3185   	fcall	_set_sid
  1371                           
  1372                           ;main.c: 106: can_start();
  1373  05A6  3183  23CF  3185   	fcall	_can_start
  1374  05A9                     l1516:	
  1375                           ;main.c: 108: while (1)
  1376                           
  1377                           
  1378                           ;main.c: 109: {
  1379                           ;main.c: 110: if ((PIR1bits.RCIF)) {
  1380  05A9  0020               	movlb	0	; select bank0
  1381  05AA  1E91               	btfss	17,5	;volatile
  1382  05AB  2DA9               	goto	l1516
  1383                           
  1384                           ;main.c: 111: c = EUSART_Read();
  1385  05AC  3183  237C  3185   	fcall	_EUSART_Read
  1386  05AF  0020               	movlb	0	; select bank0
  1387  05B0  00B9               	movwf	??_main
  1388  05B1  0839               	movf	??_main,w
  1389  05B2  00C0               	movwf	_c
  1390                           
  1391                           ;main.c: 112: printf("%c", c);
  1392  05B3  304F               	movlw	low (STR_2| (0+32768))
  1393  05B4  00F8               	movwf	printf@f
  1394  05B5  3088               	movlw	high (STR_2| (0+32768))
  1395  05B6  00F9               	movwf	printf@f+1
  1396  05B7  0840               	movf	_c,w
  1397  05B8  00B9               	movwf	??_main
  1398  05B9  01BA               	clrf	??_main+1
  1399  05BA  0839               	movf	??_main,w
  1400  05BB  00FA               	movwf	?_printf+2
  1401  05BC  083A               	movf	??_main+1,w
  1402  05BD  00FB               	movwf	?_printf+3
  1403  05BE  3186  263E  3185   	fcall	_printf
  1404                           
  1405                           ;main.c: 113: LATCbits.LATC3 = !LATCbits.LATC3;
  1406  05C1  1003               	clrc
  1407  05C2  0022               	movlb	2	; select bank2
  1408  05C3  1D8E               	btfss	14,3	;volatile
  1409  05C4  1403               	setc
  1410  05C5  1C03               	btfss	3,0
  1411  05C6  2DCA               	goto	u1120
  1412  05C7  0022               	movlb	2	; select bank2
  1413  05C8  158E               	bsf	14,3	;volatile
  1414  05C9  2DCC               	goto	l1524
  1415  05CA                     u1120:	
  1416  05CA  0022               	movlb	2	; select bank2
  1417  05CB  118E               	bcf	14,3	;volatile
  1418  05CC                     l1524:	
  1419                           
  1420                           ;main.c: 115: buf[cnt] = c;
  1421  05CC  0020               	movlb	0	; select bank0
  1422  05CD  0840               	movf	_c,w
  1423  05CE  00B9               	movwf	??_main
  1424  05CF  083F               	movf	_cnt,w
  1425  05D0  3EA0               	addlw	(low (_buf| 0))& (0+255)
  1426  05D1  0086               	movwf	6
  1427  05D2  0187               	clrf	7
  1428  05D3  0839               	movf	??_main,w
  1429  05D4  0081               	movwf	1
  1430                           
  1431                           ;main.c: 116: if (c == '\n') {
  1432  05D5  300A               	movlw	10
  1433  05D6  0640               	xorwf	_c,w
  1434  05D7  1D03               	btfss	3,2
  1435  05D8  2E10               	goto	l1540
  1436                           
  1437                           ;main.c: 117: buf[cnt] = '\0';
  1438  05D9  083F               	movf	_cnt,w
  1439  05DA  3EA0               	addlw	(low (_buf| 0))& (0+255)
  1440  05DB  0086               	movwf	6
  1441  05DC  0187               	clrf	7
  1442  05DD  0181               	clrf	1
  1443                           
  1444                           ;main.c: 118: if (buf[0] == '@') {
  1445  05DE  3040               	movlw	64
  1446  05DF  0021               	movlb	1	; select bank1
  1447  05E0  0620               	xorwf	_buf^(0+128),w
  1448  05E1  1D03               	btfss	3,2
  1449  05E2  2DFF               	goto	l1536
  1450                           
  1451                           ;main.c: 119: uint16_t sid = atoi(&buf[1]);
  1452  05E3  30A1               	movlw	low (_buf+1)
  1453  05E4  00F6               	movwf	atoi@s
  1454  05E5  3000               	movlw	high (_buf+1)
  1455  05E6  00F7               	movwf	atoi@s+1
  1456  05E7  3184  24BB  3185   	fcall	_atoi
  1457  05EA  0877               	movf	?_atoi+1,w
  1458  05EB  0020               	movlb	0	; select bank0
  1459  05EC  00BC               	movwf	main@sid+1
  1460  05ED  0876               	movf	?_atoi,w
  1461  05EE  00BB               	movwf	main@sid
  1462                           
  1463                           ;main.c: 120: set_sid(atoi(sid));
  1464  05EF  083C               	movf	main@sid+1,w
  1465  05F0  00F7               	movwf	atoi@s+1
  1466  05F1  083B               	movf	main@sid,w
  1467  05F2  00F6               	movwf	atoi@s
  1468  05F3  3184  24BB  3185   	fcall	_atoi
  1469  05F6  0877               	movf	?_atoi+1,w
  1470  05F7  0020               	movlb	0	; select bank0
  1471  05F8  00B2               	movwf	set_sid@can_node+1
  1472  05F9  0876               	movf	?_atoi,w
  1473  05FA  00B1               	movwf	set_sid@can_node
  1474  05FB  3184  2435  3185   	fcall	_set_sid
  1475                           
  1476                           ;main.c: 121: } else {
  1477  05FE  2E3B               	goto	l1548
  1478  05FF                     l1536:	
  1479                           
  1480                           ;main.c: 122: can_send(0, buf, cnt);
  1481  05FF  30A0               	movlw	(low (_buf| 0))& (0+255)
  1482  0600  0020               	movlb	0	; select bank0
  1483  0601  00B9               	movwf	??_main
  1484  0602  0839               	movf	??_main,w
  1485  0603  00F8               	movwf	can_send@buf
  1486  0604  083F               	movf	_cnt,w
  1487  0605  00BA               	movwf	??_main+1
  1488  0606  083A               	movf	??_main+1,w
  1489  0607  00F9               	movwf	can_send@cnt
  1490  0608  3000               	movlw	0
  1491  0609  3185  2527  3185   	fcall	_can_send
  1492                           
  1493                           ;main.c: 123: printf("CAN message sent: %s\n", buf);
  1494  060C  3002               	movlw	low ((STR_4+1)| (0+32768))
  1495  060D  00F8               	movwf	printf@f
  1496  060E  3088               	movlw	high ((STR_4+1)| (0+32768))
  1497  060F  2E32               	goto	L1
  1498  0610                     l1540:	
  1499                           ;main.c: 126: } else if (++cnt > max_char) {
  1500                           
  1501                           ;main.c: 124: }
  1502                           ;main.c: 125: cnt = 0;
  1503                           
  1504  0610  3001               	movlw	1
  1505  0611  00B9               	movwf	??_main
  1506  0612  0839               	movf	??_main,w
  1507  0613  07BF               	addwf	_cnt,f
  1508  0614  3000               	movlw	low (_max_char| (0+32768))
  1509  0615  0084               	movwf	4
  1510  0616  3088               	movlw	high (_max_char| (0+32768))
  1511  0617  0085               	movwf	5
  1512  0618  0800               	movf	0,w	;code access
  1513  0619  00BA               	movwf	??_main+1
  1514  061A  083F               	movf	_cnt,w
  1515  061B  023A               	subwf	??_main+1,w
  1516  061C  1803               	skipnc
  1517  061D  2DA9               	goto	l1516
  1518                           
  1519                           ;main.c: 127: buf[cnt] = '\0';
  1520  061E  083F               	movf	_cnt,w
  1521  061F  3EA0               	addlw	(low (_buf| 0))& (0+255)
  1522  0620  0086               	movwf	6
  1523  0621  0187               	clrf	7
  1524  0622  0181               	clrf	1
  1525                           
  1526                           ;main.c: 128: can_send(0, buf, cnt);
  1527  0623  30A0               	movlw	(low (_buf| 0))& (0+255)
  1528  0624  00B9               	movwf	??_main
  1529  0625  0839               	movf	??_main,w
  1530  0626  00F8               	movwf	can_send@buf
  1531  0627  083F               	movf	_cnt,w
  1532  0628  00BA               	movwf	??_main+1
  1533  0629  083A               	movf	??_main+1,w
  1534  062A  00F9               	movwf	can_send@cnt
  1535  062B  3000               	movlw	0
  1536  062C  3185  2527  3185   	fcall	_can_send
  1537                           
  1538                           ;main.c: 129: printf("\nCAN message sent: %s\n", buf);
  1539  062F  3001               	movlw	low (STR_4| (0+32768))
  1540  0630  00F8               	movwf	printf@f
  1541  0631  3088               	movlw	high (STR_4| (0+32768))
  1542  0632                     L1:	
  1543  0632  00F9               	movwf	printf@f+1
  1544  0633  30A0               	movlw	(low (_buf| 0))& (0+255)
  1545  0634  0020               	movlb	0	; select bank0
  1546  0635  00B9               	movwf	??_main
  1547  0636  0839               	movf	??_main,w
  1548  0637  00FA               	movwf	?_printf+2
  1549  0638  3186  263E  3185   	fcall	_printf
  1550  063B                     l1548:	
  1551                           
  1552                           ;main.c: 130: cnt = 0;
  1553  063B  0020               	movlb	0	; select bank0
  1554  063C  01BF               	clrf	_cnt
  1555  063D  2DA9               	goto	l1516
  1556  063E                     __end_of_main:	
  1557                           
  1558                           	psect	text1
  1559  0435                     __ptext1:	
  1560 ;; *************** function _set_sid *****************
  1561 ;; Defined at:
  1562 ;;		line 45 in file "main.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  can_node        2   17[BANK0 ] unsigned int 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  sidl            1   24[BANK0 ] unsigned char 
  1567 ;;  sidh            1   23[BANK0 ] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1579 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1580 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1581 ;;Total ram usage:        8 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    3
  1584 ;; This function calls:
  1585 ;;		_printf
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           
  1592                           ;psect for function _set_sid
  1593  0435                     _set_sid:	
  1594                           
  1595                           ;main.c: 46: uint8_t sidh = (can_node >> 3) & 0x00ff;
  1596                           
  1597                           ;incstack = 0
  1598                           ; Regs used in _set_sid: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1599  0435  0020               	movlb	0	; select bank0
  1600  0436  0832               	movf	set_sid@can_node+1,w
  1601  0437  00B4               	movwf	??_set_sid+1
  1602  0438  0831               	movf	set_sid@can_node,w
  1603  0439  00B3               	movwf	??_set_sid
  1604  043A  36B4               	lsrf	??_set_sid+1,f
  1605  043B  0CB3               	rrf	??_set_sid,f
  1606  043C  36B4               	lsrf	??_set_sid+1,f
  1607  043D  0CB3               	rrf	??_set_sid,f
  1608  043E  36B4               	lsrf	??_set_sid+1,f
  1609  043F  0CB3               	rrf	??_set_sid,f
  1610  0440  0833               	movf	??_set_sid,w
  1611  0441  00B5               	movwf	??_set_sid+2
  1612  0442  0835               	movf	??_set_sid+2,w
  1613  0443  00B7               	movwf	set_sid@sidh
  1614                           
  1615                           ;main.c: 47: uint8_t sidl = (can_node << 5) & 0x00e0;
  1616  0444  0831               	movf	set_sid@can_node,w
  1617  0445  00B3               	movwf	??_set_sid
  1618  0446  3004               	movlw	4
  1619  0447                     u1025:	
  1620  0447  35B3               	lslf	??_set_sid,f
  1621  0448  3EFF               	addlw	-1
  1622  0449  1D03               	skipz
  1623  044A  2C47               	goto	u1025
  1624  044B  3533               	lslf	??_set_sid,w
  1625  044C  39E0               	andlw	224
  1626  044D  00B4               	movwf	??_set_sid+1
  1627  044E  0834               	movf	??_set_sid+1,w
  1628  044F  00B8               	movwf	set_sid@sidl
  1629                           
  1630                           ;main.c: 48: sid.sidh = sidh;
  1631  0450  0837               	movf	set_sid@sidh,w
  1632  0451  00B3               	movwf	??_set_sid
  1633  0452  0833               	movf	??_set_sid,w
  1634  0453  00BD               	movwf	_sid
  1635                           
  1636                           ;main.c: 49: sid.sidl = sidl;
  1637  0454  0838               	movf	set_sid@sidl,w
  1638  0455  00B3               	movwf	??_set_sid
  1639  0456  0833               	movf	??_set_sid,w
  1640  0457  00BE               	movwf	_sid+1
  1641                           
  1642                           ;main.c: 50: printf("SID set: %02x %02x\n", sidh, sidl);
  1643  0458  3018               	movlw	low (STR_1| (0+32768))
  1644  0459  00F8               	movwf	printf@f
  1645  045A  3088               	movlw	high (STR_1| (0+32768))
  1646  045B  00F9               	movwf	printf@f+1
  1647  045C  0837               	movf	set_sid@sidh,w
  1648  045D  00B3               	movwf	??_set_sid
  1649  045E  01B4               	clrf	??_set_sid+1
  1650  045F  0833               	movf	??_set_sid,w
  1651  0460  00FA               	movwf	?_printf+2
  1652  0461  0834               	movf	??_set_sid+1,w
  1653  0462  00FB               	movwf	?_printf+3
  1654  0463  0838               	movf	set_sid@sidl,w
  1655  0464  00B5               	movwf	??_set_sid+2
  1656  0465  01B6               	clrf	??_set_sid+3
  1657  0466  0835               	movf	??_set_sid+2,w
  1658  0467  00FC               	movwf	?_printf+4
  1659  0468  0836               	movf	??_set_sid+3,w
  1660  0469  00FD               	movwf	?_printf+5
  1661  046A  3186  263E         	fcall	_printf
  1662  046C  0008               	return
  1663  046D                     __end_of_set_sid:	
  1664                           
  1665                           	psect	text2
  1666  063E                     __ptext2:	
  1667 ;; *************** function _printf *****************
  1668 ;; Defined at:
  1669 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  f               2    8[COMMON] PTR const unsigned char 
  1672 ;;		 -> STR_4(23), STR_3(22), STR_2(3), STR_1(20), 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  idx             1    4[BANK0 ] unsigned char 
  1675 ;;  tmpval          4    0        struct .
  1676 ;;  width           2   14[BANK0 ] int 
  1677 ;;  len             2   12[BANK0 ] unsigned int 
  1678 ;;  cp              2    9[BANK0 ] PTR const unsigned char 
  1679 ;;		 -> STR_5(7), printf@c(1), buf(64), 
  1680 ;;  val             2    6[BANK0 ] unsigned int 
  1681 ;;  c               1   16[BANK0 ] char 
  1682 ;;  ap              1   11[BANK0 ] PTR void [1]
  1683 ;;		 -> ?_printf(2), 
  1684 ;;  prec            1    8[BANK0 ] char 
  1685 ;;  flag            1    5[BANK0 ] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  2    8[COMMON] int 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1695 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1696 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1697 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1698 ;;      Totals:         6      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1699 ;;Total ram usage:       23 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    2
  1702 ;; This function calls:
  1703 ;;		___lwdiv
  1704 ;;		___wmul
  1705 ;;		_isdigit
  1706 ;;		_putch
  1707 ;; This function is called by:
  1708 ;;		_set_sid
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           
  1714                           ;psect for function _printf
  1715  063E                     _printf:	
  1716                           
  1717                           ;doprnt.c: 466: va_list ap;
  1718                           ;doprnt.c: 499: signed char c;
  1719                           ;doprnt.c: 501: int width;
  1720                           ;doprnt.c: 506: signed char prec;
  1721                           ;doprnt.c: 508: unsigned char flag;
  1722                           ;doprnt.c: 523: union {
  1723                           ;doprnt.c: 524: unsigned long vd;
  1724                           ;doprnt.c: 525: double integ;
  1725                           ;doprnt.c: 526: } tmpval;
  1726                           ;doprnt.c: 528: unsigned int val;
  1727                           ;doprnt.c: 529: unsigned len;
  1728                           ;doprnt.c: 530: const char * cp;
  1729                           ;doprnt.c: 533: *ap = __va_start();
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1733  063E  307A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  1734  063F  0020               	movlb	0	; select bank0
  1735  0640  00A0               	movwf	??_printf
  1736  0641  0820               	movf	??_printf,w
  1737  0642  00AB               	movwf	printf@ap
  1738  0643                     l1368:	
  1739                           ;doprnt.c: 536: while(c = *f++) {
  1740                           
  1741  0643  0879               	movf	printf@f+1,w
  1742  0644  0020               	movlb	0	; select bank0
  1743  0645  00A1               	movwf	??_printf+1
  1744  0646  0878               	movf	printf@f,w
  1745  0647  00A0               	movwf	??_printf
  1746  0648  0AF8               	incf	printf@f,f
  1747  0649  1903               	skipnz
  1748  064A  0AF9               	incf	printf@f+1,f
  1749  064B  0820               	movf	??_printf,w
  1750  064C  0084               	movwf	4
  1751  064D  0821               	movf	??_printf+1,w
  1752  064E  0085               	movwf	5
  1753  064F  0800               	movf	0,w	;code access
  1754  0650  00A2               	movwf	??_printf+2
  1755  0651  0822               	movf	??_printf+2,w
  1756  0652  00B0               	movwf	printf@c
  1757  0653  0830               	movf	printf@c,w
  1758  0654  1903               	btfsc	3,2
  1759  0655  0008               	return
  1760                           
  1761                           ;doprnt.c: 538: if(c != '%')
  1762  0656  3025               	movlw	37
  1763  0657  0630               	xorwf	printf@c,w
  1764  0658  1903               	btfsc	3,2
  1765  0659  2E5F               	goto	l1260
  1766                           
  1767                           ;doprnt.c: 540: {
  1768                           ;doprnt.c: 541: (putch(c) );
  1769  065A  0830               	movf	printf@c,w
  1770  065B  3183  235A  3186   	fcall	_putch
  1771                           
  1772                           ;doprnt.c: 542: continue;
  1773  065E  2E43               	goto	l1368
  1774  065F                     l1260:	
  1775                           
  1776                           ;doprnt.c: 543: }
  1777                           ;doprnt.c: 546: width = 0;
  1778  065F  0020               	movlb	0	; select bank0
  1779  0660  01AE               	clrf	printf@width
  1780  0661  01AF               	clrf	printf@width+1
  1781                           
  1782                           ;doprnt.c: 548: flag = 0;
  1783  0662  01A5               	clrf	printf@flag
  1784                           
  1785                           ;doprnt.c: 551: switch(*f) {
  1786                           
  1787                           ;doprnt.c: 550: for(;;) {
  1788  0663  2E6A               	goto	l1266
  1789  0664                     l223:	
  1790                           ;doprnt.c: 579: case '0':
  1791                           
  1792                           
  1793                           ;doprnt.c: 580: flag |= 0x04;
  1794  0664  0020               	movlb	0	; select bank0
  1795  0665  1525               	bsf	printf@flag,2
  1796                           
  1797                           ;doprnt.c: 581: f++;
  1798  0666  3001               	movlw	1
  1799  0667  07F8               	addwf	printf@f,f
  1800  0668  3000               	movlw	0
  1801  0669  3DF9               	addwfc	printf@f+1,f
  1802  066A                     l1266:	
  1803                           ;doprnt.c: 584: }
  1804                           
  1805                           ;doprnt.c: 582: continue;
  1806                           
  1807  066A  0878               	movf	printf@f,w
  1808  066B  0084               	movwf	4
  1809  066C  0879               	movf	printf@f+1,w
  1810  066D  0085               	movwf	5
  1811  066E  0800               	movf	0,w	;code access
  1812                           
  1813                           ; Switch size 1, requested type "space"
  1814                           ; Number of cases is 1, Range of values is 48 to 48
  1815                           ; switch strategies available:
  1816                           ; Name         Instructions Cycles
  1817                           ; simple_byte            4     3 (average)
  1818                           ; direct_byte           11     9 (fixed)
  1819                           ; jumptable            263     9 (fixed)
  1820                           ;	Chosen strategy is simple_byte
  1821  066F  3A30               	xorlw	48	; case 48
  1822  0670  1903               	skipnz
  1823  0671  2E64               	goto	l223
  1824  0672  2E73               	goto	l1268
  1825  0673                     l1268:	
  1826                           ;doprnt.c: 586: }
  1827                           
  1828                           ;doprnt.c: 585: break;
  1829                           
  1830                           
  1831                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1832  0673  0878               	movf	printf@f,w
  1833  0674  0084               	movwf	4
  1834  0675  0879               	movf	printf@f+1,w
  1835  0676  0085               	movwf	5
  1836  0677  0800               	movf	0,w	;code access
  1837  0678  3183  239C  3186   	fcall	_isdigit
  1838  067B  1C03               	btfss	3,0
  1839  067C  2F1D               	goto	l1320
  1840                           
  1841                           ;doprnt.c: 598: width = 0;
  1842  067D  0020               	movlb	0	; select bank0
  1843  067E  01AE               	clrf	printf@width
  1844  067F  01AF               	clrf	printf@width+1
  1845  0680                     l1272:	
  1846                           ;doprnt.c: 599: do {
  1847                           
  1848                           
  1849                           ;doprnt.c: 600: width *= 10;
  1850  0680  300A               	movlw	10
  1851  0681  00F0               	movwf	___wmul@multiplier
  1852  0682  3000               	movlw	0
  1853  0683  00F1               	movwf	___wmul@multiplier+1
  1854  0684  0020               	movlb	0	; select bank0
  1855  0685  082F               	movf	printf@width+1,w
  1856  0686  00F3               	movwf	___wmul@multiplicand+1
  1857  0687  082E               	movf	printf@width,w
  1858  0688  00F2               	movwf	___wmul@multiplicand
  1859  0689  3183  23E6  3186   	fcall	___wmul
  1860  068C  0871               	movf	?___wmul+1,w
  1861  068D  0020               	movlb	0	; select bank0
  1862  068E  00AF               	movwf	printf@width+1
  1863  068F  0870               	movf	?___wmul,w
  1864  0690  00AE               	movwf	printf@width
  1865                           
  1866                           ;doprnt.c: 601: width += *f++ - '0';
  1867  0691  0878               	movf	printf@f,w
  1868  0692  0084               	movwf	4
  1869  0693  0879               	movf	printf@f+1,w
  1870  0694  0085               	movwf	5
  1871  0695  0800               	movf	0,w	;code access
  1872  0696  3ED0               	addlw	208
  1873  0697  00A0               	movwf	??_printf
  1874  0698  30FF               	movlw	255
  1875  0699  1803               	skipnc
  1876  069A  3000               	movlw	0
  1877  069B  00A1               	movwf	??_printf+1
  1878  069C  0820               	movf	??_printf,w
  1879  069D  07AE               	addwf	printf@width,f
  1880  069E  0821               	movf	??_printf+1,w
  1881  069F  3DAF               	addwfc	printf@width+1,f
  1882  06A0  3001               	movlw	1
  1883  06A1  07F8               	addwf	printf@f,f
  1884  06A2  3000               	movlw	0
  1885  06A3  3DF9               	addwfc	printf@f+1,f
  1886                           
  1887                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1888  06A4  0878               	movf	printf@f,w
  1889  06A5  0084               	movwf	4
  1890  06A6  0879               	movf	printf@f+1,w
  1891  06A7  0085               	movwf	5
  1892  06A8  0800               	movf	0,w	;code access
  1893  06A9  3183  239C  3186   	fcall	_isdigit
  1894  06AC  1C03               	btfss	3,0
  1895  06AD  2F1D               	goto	l1320
  1896  06AE  2E80               	goto	l1272
  1897  06AF                     l1280:	
  1898                           ;doprnt.c: 728: case 's':
  1899                           
  1900                           ;doprnt.c: 723: break;
  1901                           
  1902                           ;doprnt.c: 718: case 'x':
  1903                           
  1904                           ;doprnt.c: 638: goto alldone;
  1905                           
  1906                           ;doprnt.c: 637: case 0:
  1907                           
  1908                           ;doprnt.c: 608: }
  1909                           ;doprnt.c: 635: switch(c = *f++) {
  1910                           
  1911                           
  1912                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1913  06AF  0020               	movlb	0	; select bank0
  1914  06B0  082B               	movf	printf@ap,w
  1915  06B1  0086               	movwf	6
  1916  06B2  0187               	clrf	7
  1917  06B3  0801               	movf	1,w
  1918  06B4  00A9               	movwf	printf@cp
  1919  06B5  3000               	movlw	0
  1920  06B6  00AA               	movwf	printf@cp+1
  1921  06B7  3001               	movlw	1
  1922  06B8  00A0               	movwf	??_printf
  1923  06B9  0820               	movf	??_printf,w
  1924  06BA  07AB               	addwf	printf@ap,f
  1925                           
  1926                           ;doprnt.c: 740: if(!cp)
  1927  06BB  0829               	movf	printf@cp,w
  1928  06BC  042A               	iorwf	printf@cp+1,w
  1929  06BD  1D03               	btfss	3,2
  1930  06BE  2EC3               	goto	l1288
  1931                           
  1932                           ;doprnt.c: 741: cp = "(null)";
  1933  06BF  3045               	movlw	low (STR_5| (0+32768))
  1934  06C0  00A9               	movwf	printf@cp
  1935  06C1  3088               	movlw	high (STR_5| (0+32768))
  1936  06C2  00AA               	movwf	printf@cp+1
  1937  06C3                     l1288:	
  1938                           
  1939                           ;doprnt.c: 745: len = 0;
  1940  06C3  01AC               	clrf	printf@len
  1941  06C4  01AD               	clrf	printf@len+1
  1942  06C5                     l1292:	
  1943                           ;doprnt.c: 746: while(cp[len])
  1944                           
  1945  06C5  0829               	movf	printf@cp,w
  1946  06C6  072C               	addwf	printf@len,w
  1947  06C7  0084               	movwf	4
  1948  06C8  082A               	movf	printf@cp+1,w
  1949  06C9  3D2D               	addwfc	printf@len+1,w
  1950  06CA  0085               	movwf	5
  1951  06CB  0012               	moviw fsr0++
  1952  06CC  1903               	btfsc	3,2
  1953  06CD  2ED3               	goto	l1294
  1954                           
  1955                           ;doprnt.c: 747: len++;
  1956  06CE  3001               	movlw	1
  1957  06CF  07AC               	addwf	printf@len,f
  1958  06D0  3000               	movlw	0
  1959  06D1  3DAD               	addwfc	printf@len+1,f
  1960  06D2  2EC5               	goto	l1292
  1961  06D3                     l1294:	
  1962                           ;doprnt.c: 750: dostring:
  1963                           
  1964                           
  1965                           ;doprnt.c: 757: if(width > len)
  1966  06D3  082F               	movf	printf@width+1,w
  1967  06D4  022D               	subwf	printf@len+1,w
  1968  06D5  1D03               	skipz
  1969  06D6  2ED9               	goto	u805
  1970  06D7  082E               	movf	printf@width,w
  1971  06D8  022C               	subwf	printf@len,w
  1972  06D9                     u805:	
  1973  06D9  1803               	skipnc
  1974  06DA  2EE0               	goto	l1298
  1975                           
  1976                           ;doprnt.c: 758: width -= len;
  1977  06DB  082C               	movf	printf@len,w
  1978  06DC  02AE               	subwf	printf@width,f
  1979  06DD  082D               	movf	printf@len+1,w
  1980  06DE  3BAF               	subwfb	printf@width+1,f
  1981  06DF  2EE2               	goto	l1302
  1982  06E0                     l1298:	
  1983                           
  1984                           ;doprnt.c: 759: else
  1985                           ;doprnt.c: 760: width = 0;
  1986  06E0  01AE               	clrf	printf@width
  1987  06E1  01AF               	clrf	printf@width+1
  1988  06E2                     l1302:	
  1989                           ;doprnt.c: 764: while(width--)
  1990                           
  1991  06E2  30FF               	movlw	255
  1992  06E3  0020               	movlb	0	; select bank0
  1993  06E4  07AE               	addwf	printf@width,f
  1994  06E5  30FF               	movlw	255
  1995  06E6  3DAF               	addwfc	printf@width+1,f
  1996  06E7  0A2E               	incf	printf@width,w
  1997  06E8  1903               	btfsc	3,2
  1998  06E9  0A2F               	incf	printf@width+1,w
  1999  06EA  1903               	btfsc	3,2
  2000  06EB  2EFE               	goto	l1308
  2001                           
  2002                           ;doprnt.c: 765: (putch(' ') );
  2003  06EC  3020               	movlw	32
  2004  06ED  3183  235A  3186   	fcall	_putch
  2005  06F0  2EE2               	goto	l1302
  2006  06F1                     l1304:	
  2007                           ;doprnt.c: 767: while(len--)
  2008                           
  2009                           
  2010                           ;doprnt.c: 768: (putch(*cp++) );
  2011  06F1  0829               	movf	printf@cp,w
  2012  06F2  0084               	movwf	4
  2013  06F3  082A               	movf	printf@cp+1,w
  2014  06F4  0085               	movwf	5
  2015  06F5  0800               	movf	0,w	;code access
  2016  06F6  3183  235A  3186   	fcall	_putch
  2017  06F9  3001               	movlw	1
  2018  06FA  0020               	movlb	0	; select bank0
  2019  06FB  07A9               	addwf	printf@cp,f
  2020  06FC  3000               	movlw	0
  2021  06FD  3DAA               	addwfc	printf@cp+1,f
  2022  06FE                     l1308:	
  2023  06FE  3001               	movlw	1
  2024  06FF  02AC               	subwf	printf@len,f
  2025  0700  3000               	movlw	0
  2026  0701  3BAD               	subwfb	printf@len+1,f
  2027  0702  0A2C               	incf	printf@len,w
  2028  0703  1D03               	skipz
  2029  0704  2EF1               	goto	l1304
  2030  0705  0A2D               	incf	printf@len+1,w
  2031  0706  1903               	btfsc	3,2
  2032  0707  2E43               	goto	l1368
  2033  0708  2EF1               	goto	l1304
  2034  0709                     l1310:	
  2035                           ;doprnt.c: 784: case 'c':
  2036                           
  2037                           ;doprnt.c: 774: continue;
  2038                           
  2039                           
  2040                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2041  0709  082B               	movf	printf@ap,w
  2042  070A  0086               	movwf	6
  2043  070B  0187               	clrf	7
  2044  070C  0801               	movf	1,w
  2045  070D  00A0               	movwf	??_printf
  2046  070E  0820               	movf	??_printf,w
  2047  070F  00B0               	movwf	printf@c
  2048  0710  3002               	movlw	2
  2049  0711  00A0               	movwf	??_printf
  2050  0712  0820               	movf	??_printf,w
  2051  0713  07AB               	addwf	printf@ap,f
  2052  0714                     l1314:	
  2053                           ;doprnt.c: 802: default:
  2054                           
  2055                           
  2056                           ;doprnt.c: 805: cp = (char *)&c;
  2057  0714  3030               	movlw	low printf@c
  2058  0715  00A9               	movwf	printf@cp
  2059  0716  3000               	movlw	high printf@c
  2060  0717  00AA               	movwf	printf@cp+1
  2061                           
  2062                           ;doprnt.c: 806: len = 1;
  2063  0718  3001               	movlw	1
  2064  0719  00AC               	movwf	printf@len
  2065  071A  3000               	movlw	0
  2066  071B  00AD               	movwf	printf@len+1
  2067                           
  2068                           ;doprnt.c: 807: goto dostring;
  2069  071C  2ED3               	goto	l1294
  2070  071D                     l1320:	
  2071                           ;doprnt.c: 822: }
  2072                           
  2073  071D  0879               	movf	printf@f+1,w
  2074  071E  0020               	movlb	0	; select bank0
  2075  071F  00A1               	movwf	??_printf+1
  2076  0720  0878               	movf	printf@f,w
  2077  0721  00A0               	movwf	??_printf
  2078  0722  0AF8               	incf	printf@f,f
  2079  0723  1903               	skipnz
  2080  0724  0AF9               	incf	printf@f+1,f
  2081  0725  0820               	movf	??_printf,w
  2082  0726  0084               	movwf	4
  2083  0727  0821               	movf	??_printf+1,w
  2084  0728  0085               	movwf	5
  2085  0729  0800               	movf	0,w	;code access
  2086  072A  00B0               	movwf	printf@c
  2087                           
  2088                           ; Switch size 1, requested type "space"
  2089                           ; Number of cases is 4, Range of values is 0 to 120
  2090                           ; switch strategies available:
  2091                           ; Name         Instructions Cycles
  2092                           ; simple_byte           13     7 (average)
  2093                           ; direct_byte          248     6 (fixed)
  2094                           ; jumptable            260     6 (fixed)
  2095                           ;	Chosen strategy is simple_byte
  2096  072B  3A00               	xorlw	0	; case 0
  2097  072C  1903               	skipnz
  2098  072D  2FE1               	goto	l268
  2099  072E  3A63               	xorlw	99	; case 99
  2100  072F  1903               	skipnz
  2101  0730  2F09               	goto	l1310
  2102  0731  3A10               	xorlw	16	; case 115
  2103  0732  1903               	skipnz
  2104  0733  2EAF               	goto	l1280
  2105  0734  3A0B               	xorlw	11	; case 120
  2106  0735  1903               	skipnz
  2107  0736  2F38               	goto	l1322
  2108  0737  2F14               	goto	l1314
  2109  0738                     l1322:	
  2110                           
  2111                           ;doprnt.c: 1273: {
  2112                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2113  0738  0020               	movlb	0	; select bank0
  2114  0739  082B               	movf	printf@ap,w
  2115  073A  0086               	movwf	6
  2116  073B  0187               	clrf	7
  2117  073C  3F40               	moviw [0]fsr1
  2118  073D  00A6               	movwf	printf@val
  2119  073E  3F41               	moviw [1]fsr1
  2120  073F  00A7               	movwf	printf@val+1
  2121  0740  3002               	movlw	2
  2122  0741  00A0               	movwf	??_printf
  2123  0742  0820               	movf	??_printf,w
  2124  0743  07AB               	addwf	printf@ap,f
  2125                           
  2126                           ;doprnt.c: 1287: }
  2127                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2128  0744  01B0               	clrf	printf@c
  2129  0745  0AB0               	incf	printf@c,f
  2130  0746  3004               	movlw	4
  2131  0747  0630               	xorwf	printf@c,w
  2132  0748  1903               	btfsc	3,2
  2133  0749  2F69               	goto	l1338
  2134  074A                     l1332:	
  2135                           
  2136                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2137  074A  0830               	movf	printf@c,w
  2138  074B  00A0               	movwf	??_printf
  2139  074C  01A1               	clrf	??_printf+1
  2140  074D  35A0               	lslf	??_printf,f
  2141  074E  0DA1               	rlf	??_printf+1,f
  2142  074F  303D               	movlw	low (_hexpowers| (0+32768))
  2143  0750  0720               	addwf	??_printf,w
  2144  0751  0084               	movwf	4
  2145  0752  3088               	movlw	high (_hexpowers| (0+32768))
  2146  0753  3D21               	addwfc	??_printf+1,w
  2147  0754  0085               	movwf	5
  2148  0755  3F00               	moviw [0]fsr0
  2149  0756  00A2               	movwf	??_printf+2
  2150  0757  3F01               	moviw [1]fsr0
  2151  0758  00A3               	movwf	??_printf+3
  2152  0759  0823               	movf	??_printf+3,w
  2153  075A  0227               	subwf	printf@val+1,w
  2154  075B  1D03               	skipz
  2155  075C  2F5F               	goto	u845
  2156  075D  0822               	movf	??_printf+2,w
  2157  075E  0226               	subwf	printf@val,w
  2158  075F                     u845:	
  2159  075F  1C03               	btfss	3,0
  2160  0760  2F69               	goto	l1338
  2161                           
  2162                           ;doprnt.c: 1318: break;
  2163  0761  3001               	movlw	1
  2164  0762  00A0               	movwf	??_printf
  2165  0763  0820               	movf	??_printf,w
  2166  0764  07B0               	addwf	printf@c,f
  2167  0765  3004               	movlw	4
  2168  0766  0630               	xorwf	printf@c,w
  2169  0767  1D03               	btfss	3,2
  2170  0768  2F4A               	goto	l1332
  2171  0769                     l1338:	
  2172                           
  2173                           ;doprnt.c: 1381: if(width > c)
  2174  0769  0830               	movf	printf@c,w
  2175  076A  00A0               	movwf	??_printf
  2176  076B  01A1               	clrf	??_printf+1
  2177  076C  1BA0               	btfsc	??_printf,7
  2178  076D  03A1               	decf	??_printf+1,f
  2179  076E  0821               	movf	??_printf+1,w
  2180  076F  3A80               	xorlw	128
  2181  0770  00A2               	movwf	??_printf+2
  2182  0771  082F               	movf	printf@width+1,w
  2183  0772  3A80               	xorlw	128
  2184  0773  0222               	subwf	??_printf+2,w
  2185  0774  1D03               	skipz
  2186  0775  2F78               	goto	u865
  2187  0776  082E               	movf	printf@width,w
  2188  0777  0220               	subwf	??_printf,w
  2189  0778                     u865:	
  2190  0778  1803               	skipnc
  2191  0779  2F85               	goto	l1342
  2192                           
  2193                           ;doprnt.c: 1382: width -= c;
  2194  077A  0020               	movlb	0	; select bank0
  2195  077B  0830               	movf	printf@c,w
  2196  077C  00A0               	movwf	??_printf
  2197  077D  01A1               	clrf	??_printf+1
  2198  077E  1BA0               	btfsc	??_printf,7
  2199  077F  03A1               	decf	??_printf+1,f
  2200  0780  0820               	movf	??_printf,w
  2201  0781  02AE               	subwf	printf@width,f
  2202  0782  0821               	movf	??_printf+1,w
  2203  0783  3BAF               	subwfb	printf@width+1,f
  2204  0784  2F88               	goto	l1344
  2205  0785                     l1342:	
  2206                           
  2207                           ;doprnt.c: 1383: else
  2208                           ;doprnt.c: 1384: width = 0;
  2209  0785  0020               	movlb	0	; select bank0
  2210  0786  01AE               	clrf	printf@width
  2211  0787  01AF               	clrf	printf@width+1
  2212  0788                     l1344:	
  2213                           
  2214                           ;doprnt.c: 1387: if(flag & 0x04) {
  2215  0788  1D25               	btfss	printf@flag,2
  2216  0789  2F98               	goto	l1352
  2217  078A                     L3:	
  2218                           
  2219                           ;doprnt.c: 1415: if(width)
  2220  078A  082E               	movf	printf@width,w
  2221  078B  042F               	iorwf	printf@width+1,w
  2222  078C  1903               	btfsc	3,2
  2223  078D  2FA9               	goto	l1358
  2224                           
  2225                           ;doprnt.c: 1417: (putch('0') );
  2226                           
  2227                           ;doprnt.c: 1416: do
  2228  078E  3030               	movlw	48
  2229  078F  3183  235A  3186   	fcall	_putch
  2230                           
  2231                           ;doprnt.c: 1418: while(--width);
  2232  0792  30FF               	movlw	255
  2233  0793  0020               	movlb	0	; select bank0
  2234  0794  07AE               	addwf	printf@width,f
  2235  0795  30FF               	movlw	255
  2236  0796  3DAF               	addwfc	printf@width+1,f
  2237  0797  2F8A               	goto	L3
  2238  0798                     l1352:	
  2239                           ;doprnt.c: 1420: } else
  2240                           
  2241                           
  2242                           ;doprnt.c: 1422: {
  2243                           ;doprnt.c: 1424: if(width
  2244                           ;doprnt.c: 1428: )
  2245  0798  082E               	movf	printf@width,w
  2246  0799  042F               	iorwf	printf@width+1,w
  2247  079A  1903               	btfsc	3,2
  2248  079B  2FA9               	goto	l1358
  2249  079C                     l1354:	
  2250                           ;doprnt.c: 1429: do
  2251                           
  2252                           
  2253                           ;doprnt.c: 1430: (putch(' ') );
  2254  079C  3020               	movlw	32
  2255  079D  3183  235A  3186   	fcall	_putch
  2256                           
  2257                           ;doprnt.c: 1431: while(--width);
  2258  07A0  30FF               	movlw	255
  2259  07A1  0020               	movlb	0	; select bank0
  2260  07A2  07AE               	addwf	printf@width,f
  2261  07A3  30FF               	movlw	255
  2262  07A4  3DAF               	addwfc	printf@width+1,f
  2263  07A5  082E               	movf	printf@width,w
  2264  07A6  042F               	iorwf	printf@width+1,w
  2265  07A7  1D03               	btfss	3,2
  2266  07A8  2F9C               	goto	l1354
  2267  07A9                     l1358:	
  2268                           
  2269                           ;doprnt.c: 1469: }
  2270                           ;doprnt.c: 1472: prec = c;
  2271  07A9  0830               	movf	printf@c,w
  2272  07AA  00A0               	movwf	??_printf
  2273  07AB  0820               	movf	??_printf,w
  2274  07AC  00A8               	movwf	printf@prec
  2275  07AD                     l1366:	
  2276                           ;doprnt.c: 1474: while(prec--) {
  2277                           
  2278  07AD  30FF               	movlw	255
  2279  07AE  0020               	movlb	0	; select bank0
  2280  07AF  00A0               	movwf	??_printf
  2281  07B0  0820               	movf	??_printf,w
  2282  07B1  07A8               	addwf	printf@prec,f
  2283  07B2  0A28               	incf	printf@prec,w
  2284  07B3  1903               	btfsc	3,2
  2285  07B4  2E43               	goto	l1368
  2286                           
  2287                           ;doprnt.c: 1478: {
  2288                           ;doprnt.c: 1499: {
  2289                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2290  07B5  0828               	movf	printf@prec,w
  2291  07B6  00A0               	movwf	??_printf
  2292  07B7  01A1               	clrf	??_printf+1
  2293  07B8  35A0               	lslf	??_printf,f
  2294  07B9  0DA1               	rlf	??_printf+1,f
  2295  07BA  303D               	movlw	low (_hexpowers| (0+32768))
  2296  07BB  0720               	addwf	??_printf,w
  2297  07BC  0084               	movwf	4
  2298  07BD  3088               	movlw	high (_hexpowers| (0+32768))
  2299  07BE  3D21               	addwfc	??_printf+1,w
  2300  07BF  0085               	movwf	5
  2301  07C0  3F00               	moviw [0]fsr0
  2302  07C1  00F0               	movwf	___lwdiv@divisor
  2303  07C2  3F01               	moviw [1]fsr0
  2304  07C3  00F1               	movwf	___lwdiv@divisor+1
  2305  07C4  0827               	movf	printf@val+1,w
  2306  07C5  00F3               	movwf	___lwdiv@dividend+1
  2307  07C6  0826               	movf	printf@val,w
  2308  07C7  00F2               	movwf	___lwdiv@dividend
  2309  07C8  3184  2401  3186   	fcall	___lwdiv
  2310  07CB  0870               	movf	?___lwdiv,w
  2311  07CC  390F               	andlw	15
  2312  07CD  0020               	movlb	0	; select bank0
  2313  07CE  00A2               	movwf	??_printf+2
  2314  07CF  0822               	movf	??_printf+2,w
  2315  07D0  00A4               	movwf	printf@idx
  2316                           
  2317                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2318  07D1  0824               	movf	printf@idx,w
  2319  07D2  3E2C               	addlw	low (STR_6| (0+32768))
  2320  07D3  0084               	movwf	4
  2321  07D4  3088               	movlw	high (STR_6| (0+32768))
  2322  07D5  1803               	skipnc
  2323  07D6  3E01               	addlw	1
  2324  07D7  0085               	movwf	5
  2325  07D8  0800               	movf	0,w	;code access
  2326  07D9  00A0               	movwf	??_printf
  2327  07DA  0820               	movf	??_printf,w
  2328  07DB  00B0               	movwf	printf@c
  2329                           
  2330                           ;doprnt.c: 1508: }
  2331                           ;doprnt.c: 1523: }
  2332                           ;doprnt.c: 1524: (putch(c) );
  2333  07DC  0830               	movf	printf@c,w
  2334  07DD  3183  235A  3186   	fcall	_putch
  2335  07E0  2FAD               	goto	l1366
  2336  07E1                     l268:	
  2337                           ;doprnt.c: 1540: return 0;
  2338                           ;	Return value of _printf is never used
  2339                           
  2340                           ;doprnt.c: 1525: }
  2341                           ;doprnt.c: 1533: }
  2342                           ;doprnt.c: 1535: alldone:
  2343                           
  2344  07E1  0008               	return
  2345  07E2                     __end_of_printf:	
  2346                           
  2347                           	psect	text3
  2348  035A                     __ptext3:	
  2349 ;; *************** function _putch *****************
  2350 ;; Defined at:
  2351 ;;		line 107 in file "mcc_generated_files/eusart.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  txData          1    wreg     unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  txData          1    1[COMMON] unsigned char 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, pclath, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2369 ;;Total ram usage:        1 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    1
  2372 ;; This function calls:
  2373 ;;		_EUSART_Write
  2374 ;; This function is called by:
  2375 ;;		_printf
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           
  2380                           ;psect for function _putch
  2381  035A                     _putch:	
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  2385                           ;putch@txData stored from wreg
  2386  035A  00F1               	movwf	putch@txData
  2387                           
  2388                           ;eusart.c: 109: EUSART_Write(txData);
  2389  035B  0871               	movf	putch@txData,w
  2390  035C  3183  236B         	fcall	_EUSART_Write
  2391  035E  0008               	return
  2392  035F                     __end_of_putch:	
  2393                           
  2394                           	psect	text4
  2395  036B                     __ptext4:	
  2396 ;; *************** function _EUSART_Write *****************
  2397 ;; Defined at:
  2398 ;;		line 93 in file "mcc_generated_files/eusart.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  txData          1    wreg     unsigned char 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  txData          1    0[COMMON] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2416 ;;Total ram usage:        1 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_putch
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _EUSART_Write
  2427  036B                     _EUSART_Write:	
  2428                           
  2429                           ;incstack = 0
  2430                           ; Regs used in _EUSART_Write: [wreg]
  2431                           ;EUSART_Write@txData stored from wreg
  2432  036B  00F0               	movwf	EUSART_Write@txData
  2433  036C                     l63:	
  2434                           ;eusart.c: 96: {
  2435                           
  2436                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  2437                           
  2438  036C  0020               	movlb	0	; select bank0
  2439  036D  1E11               	btfss	17,4	;volatile
  2440  036E  2B6C               	goto	l63
  2441                           
  2442                           ;eusart.c: 97: }
  2443                           ;eusart.c: 99: TXREG = txData;
  2444  036F  0870               	movf	EUSART_Write@txData,w
  2445  0370  0023               	movlb	3	; select bank3
  2446  0371  009A               	movwf	26	;volatile
  2447  0372  0008               	return
  2448  0373                     __end_of_EUSART_Write:	
  2449                           
  2450                           	psect	text5
  2451  0401                     __ptext5:	
  2452 ;; *************** function ___lwdiv *****************
  2453 ;; Defined at:
  2454 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  divisor         2    0[COMMON] unsigned int 
  2457 ;;  dividend        2    2[COMMON] unsigned int 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  quotient        2    5[COMMON] unsigned int 
  2460 ;;  counter         1    7[COMMON] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2    0[COMMON] unsigned int 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2470 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2471 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2472 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2473 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2474 ;;Total ram usage:        8 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_printf
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function ___lwdiv
  2485  0401                     ___lwdiv:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2489  0401  01F5               	clrf	___lwdiv@quotient
  2490  0402  01F6               	clrf	___lwdiv@quotient+1
  2491  0403  0870               	movf	___lwdiv@divisor,w
  2492  0404  0471               	iorwf	___lwdiv@divisor+1,w
  2493  0405  1903               	btfsc	3,2
  2494  0406  2C30               	goto	l1218
  2495  0407  01F7               	clrf	___lwdiv@counter
  2496  0408  0AF7               	incf	___lwdiv@counter,f
  2497  0409                     l1206:	
  2498  0409  1BF1               	btfsc	___lwdiv@divisor+1,7
  2499  040A  2C15               	goto	l1208
  2500  040B  3001               	movlw	1
  2501  040C                     u685:	
  2502  040C  35F0               	lslf	___lwdiv@divisor,f
  2503  040D  0DF1               	rlf	___lwdiv@divisor+1,f
  2504  040E  0B89               	decfsz	9,f
  2505  040F  2C0C               	goto	u685
  2506  0410  3001               	movlw	1
  2507  0411  00F4               	movwf	??___lwdiv
  2508  0412  0874               	movf	??___lwdiv,w
  2509  0413  07F7               	addwf	___lwdiv@counter,f
  2510  0414  2C09               	goto	l1206
  2511  0415                     l1208:	
  2512  0415  3001               	movlw	1
  2513  0416                     u705:	
  2514  0416  35F5               	lslf	___lwdiv@quotient,f
  2515  0417  0DF6               	rlf	___lwdiv@quotient+1,f
  2516  0418  0B89               	decfsz	9,f
  2517  0419  2C16               	goto	u705
  2518  041A  0871               	movf	___lwdiv@divisor+1,w
  2519  041B  0273               	subwf	___lwdiv@dividend+1,w
  2520  041C  1D03               	skipz
  2521  041D  2C20               	goto	u715
  2522  041E  0870               	movf	___lwdiv@divisor,w
  2523  041F  0272               	subwf	___lwdiv@dividend,w
  2524  0420                     u715:	
  2525  0420  1C03               	skipc
  2526  0421  2C27               	goto	l1214
  2527  0422  0870               	movf	___lwdiv@divisor,w
  2528  0423  02F2               	subwf	___lwdiv@dividend,f
  2529  0424  0871               	movf	___lwdiv@divisor+1,w
  2530  0425  3BF3               	subwfb	___lwdiv@dividend+1,f
  2531  0426  1475               	bsf	___lwdiv@quotient,0
  2532  0427                     l1214:	
  2533  0427  3001               	movlw	1
  2534  0428                     u725:	
  2535  0428  36F1               	lsrf	___lwdiv@divisor+1,f
  2536  0429  0CF0               	rrf	___lwdiv@divisor,f
  2537  042A  0B89               	decfsz	9,f
  2538  042B  2C28               	goto	u725
  2539  042C  3001               	movlw	1
  2540  042D  02F7               	subwf	___lwdiv@counter,f
  2541  042E  1D03               	btfss	3,2
  2542  042F  2C15               	goto	l1208
  2543  0430                     l1218:	
  2544  0430  0876               	movf	___lwdiv@quotient+1,w
  2545  0431  00F1               	movwf	?___lwdiv+1
  2546  0432  0875               	movf	___lwdiv@quotient,w
  2547  0433  00F0               	movwf	?___lwdiv
  2548  0434  0008               	return
  2549  0435                     __end_of___lwdiv:	
  2550                           
  2551                           	psect	text6
  2552  03CF                     __ptext6:	
  2553 ;; *************** function _can_start *****************
  2554 ;; Defined at:
  2555 ;;		line 56 in file "main.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  can_ctrl_buf    3    0[BANK0 ] unsigned char [3]
  2560 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      unsigned char 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2571 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2572 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2573 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2574 ;;Total ram usage:        7 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    2
  2577 ;; This function calls:
  2578 ;;		_SPI_Exchange8bitBuffer
  2579 ;; This function is called by:
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _can_start
  2586  03CF                     _can_start:	
  2587                           
  2588                           ;main.c: 57: uint8_t can_ctrl_buf[3] = {0b00000010, 0x0f, 0x00};
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _can_start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2592  03CF  0020               	movlb	0	; select bank0
  2593  03D0  0850               	movf	can_start@F2923,w
  2594  03D1  00A0               	movwf	can_start@can_ctrl_buf
  2595  03D2  0851               	movf	can_start@F2923+1,w
  2596  03D3  00A1               	movwf	can_start@can_ctrl_buf+1
  2597  03D4  0852               	movf	can_start@F2923+2,w
  2598  03D5  00A2               	movwf	can_start@can_ctrl_buf+2
  2599                           
  2600                           ;main.c: 58: uint8_t bytes_written = SPI_Exchange8bitBuffer(can_ctrl_buf, 3, can_ctrl_bu
      +                          f);
  2601  03D6  3003               	movlw	3
  2602  03D7  00F8               	movwf	??_can_start
  2603  03D8  0878               	movf	??_can_start,w
  2604  03D9  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  2605  03DA  3020               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2606  03DB  00F9               	movwf	??_can_start+1
  2607  03DC  0879               	movf	??_can_start+1,w
  2608  03DD  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  2609  03DE  3020               	movlw	(low (can_start@can_ctrl_buf| 0))& (0+255)
  2610  03DF  3184  246D         	fcall	_SPI_Exchange8bitBuffer
  2611  03E1  00FA               	movwf	??_can_start+2
  2612  03E2  087A               	movf	??_can_start+2,w
  2613  03E3  0020               	movlb	0	; select bank0
  2614  03E4  00A3               	movwf	can_start@bytes_written
  2615                           
  2616                           ;main.c: 62: return 0;
  2617                           ;	Return value of _can_start is never used
  2618                           
  2619                           ;main.c: 61: } else {
  2620                           
  2621                           ;main.c: 60: return 1;
  2622                           ;	Return value of _can_start is never used
  2623  03E5  0008               	return
  2624  03E6                     __end_of_can_start:	
  2625                           
  2626                           	psect	text7
  2627  0527                     __ptext7:	
  2628 ;; *************** function _can_send *****************
  2629 ;; Defined at:
  2630 ;;		line 69 in file "main.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  n               1    wreg     unsigned char 
  2633 ;;  buf             1    8[COMMON] PTR unsigned char 
  2634 ;;		 -> buf(64), 
  2635 ;;  cnt             1    9[COMMON] unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  n               1    3[BANK0 ] unsigned char 
  2638 ;;  txb_ctrl_buf    3    0[BANK0 ] unsigned char [3]
  2639 ;;  i               1    6[BANK0 ] unsigned char 
  2640 ;;  bytes_writte    1    5[BANK0 ] unsigned char 
  2641 ;;  len             1    4[BANK0 ] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      unsigned char 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2652 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2653 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2654 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2655 ;;Total ram usage:       12 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    2
  2658 ;; This function calls:
  2659 ;;		_SPI_Exchange8bitBuffer
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           
  2666                           ;psect for function _can_send
  2667  0527                     _can_send:	
  2668                           
  2669                           ;incstack = 0
  2670                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2671                           ;can_send@n stored from wreg
  2672  0527  0020               	movlb	0	; select bank0
  2673  0528  00A3               	movwf	can_send@n
  2674                           
  2675                           ;main.c: 71: uint8_t i;
  2676                           ;main.c: 72: tx_buf[0] = 0b00000010;
  2677  0529  3002               	movlw	2
  2678  052A  00FA               	movwf	??_can_send
  2679  052B  087A               	movf	??_can_send,w
  2680  052C  00C1               	movwf	_tx_buf
  2681                           
  2682                           ;main.c: 73: tx_buf[1] = txb_n_ctrl[n] + 1;
  2683  052D  0823               	movf	can_send@n,w
  2684  052E  3E4C               	addlw	low (_txb_n_ctrl| (0+32768))
  2685  052F  0084               	movwf	4
  2686  0530  3088               	movlw	high (_txb_n_ctrl| (0+32768))
  2687  0531  1803               	skipnc
  2688  0532  3E01               	addlw	1
  2689  0533  0085               	movwf	5
  2690  0534  0800               	movf	0,w	;code access
  2691  0535  3E01               	addlw	1
  2692  0536  00FA               	movwf	??_can_send
  2693  0537  087A               	movf	??_can_send,w
  2694  0538  00C2               	movwf	_tx_buf+1
  2695                           
  2696                           ;main.c: 74: tx_buf[2] = sid.sidh;
  2697  0539  083D               	movf	_sid,w
  2698  053A  00FA               	movwf	??_can_send
  2699  053B  087A               	movf	??_can_send,w
  2700  053C  00C3               	movwf	_tx_buf+2
  2701                           
  2702                           ;main.c: 75: tx_buf[3] = sid.sidl;
  2703  053D  083E               	movf	_sid+1,w
  2704  053E  00FA               	movwf	??_can_send
  2705  053F  087A               	movf	??_can_send,w
  2706  0540  00C4               	movwf	_tx_buf+3
  2707                           
  2708                           ;main.c: 76: tx_buf[4] = 0;
  2709  0541  01C5               	clrf	_tx_buf+4
  2710                           
  2711                           ;main.c: 77: tx_buf[5] = 0;
  2712  0542  01C6               	clrf	_tx_buf+5
  2713                           
  2714                           ;main.c: 78: tx_buf[6] = cnt;
  2715  0543  0879               	movf	can_send@cnt,w
  2716  0544  00FA               	movwf	??_can_send
  2717  0545  087A               	movf	??_can_send,w
  2718  0546  00C7               	movwf	_tx_buf+6
  2719                           
  2720                           ;main.c: 79: for(i=0; i++; i<cnt) {
  2721  0547  01A6               	clrf	can_send@i
  2722  0548                     l1448:	
  2723  0548  3001               	movlw	1
  2724  0549  00FA               	movwf	??_can_send
  2725  054A  087A               	movf	??_can_send,w
  2726  054B  07A6               	addwf	can_send@i,f
  2727  054C  0326               	decf	can_send@i,w
  2728  054D  1903               	btfsc	3,2
  2729  054E  2D5F               	goto	l1450
  2730                           
  2731                           ;main.c: 80: tx_buf[7+i] = buf[i];
  2732  054F  0826               	movf	can_send@i,w
  2733  0550  0778               	addwf	can_send@buf,w
  2734  0551  00FA               	movwf	??_can_send
  2735  0552  087A               	movf	??_can_send,w
  2736  0553  0086               	movwf	6
  2737  0554  0187               	clrf	7
  2738  0555  0801               	movf	1,w
  2739  0556  00FB               	movwf	??_can_send+1
  2740  0557  0826               	movf	can_send@i,w
  2741  0558  3E07               	addlw	7
  2742  0559  3E41               	addlw	(low (_tx_buf| 0))& (0+255)
  2743  055A  0086               	movwf	6
  2744  055B  0187               	clrf	7
  2745  055C  087B               	movf	??_can_send+1,w
  2746  055D  0081               	movwf	1
  2747  055E  2D48               	goto	l1448
  2748  055F                     l1450:	
  2749                           
  2750                           ;main.c: 81: }
  2751                           ;main.c: 82: uint8_t bytes_written = 0;
  2752  055F  01A5               	clrf	can_send@bytes_written
  2753                           
  2754                           ;main.c: 83: uint8_t len = 7 + cnt;
  2755  0560  0879               	movf	can_send@cnt,w
  2756  0561  3E07               	addlw	7
  2757  0562  00FA               	movwf	??_can_send
  2758  0563  087A               	movf	??_can_send,w
  2759  0564  00A4               	movwf	can_send@len
  2760                           
  2761                           ;main.c: 84: bytes_written = SPI_Exchange8bitBuffer(tx_buf, len, tx_buf);
  2762  0565  0824               	movf	can_send@len,w
  2763  0566  00FA               	movwf	??_can_send
  2764  0567  087A               	movf	??_can_send,w
  2765  0568  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  2766  0569  3041               	movlw	(low (_tx_buf| 0))& (0+255)
  2767  056A  00FB               	movwf	??_can_send+1
  2768  056B  087B               	movf	??_can_send+1,w
  2769  056C  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  2770  056D  3041               	movlw	(low (_tx_buf| 0))& (0+255)
  2771  056E  3184  246D  3185   	fcall	_SPI_Exchange8bitBuffer
  2772  0571  00FC               	movwf	??_can_send+2
  2773  0572  087C               	movf	??_can_send+2,w
  2774  0573  0020               	movlb	0	; select bank0
  2775  0574  00A5               	movwf	can_send@bytes_written
  2776                           
  2777                           ;main.c: 85: if (bytes_written == len) {
  2778  0575  0825               	movf	can_send@bytes_written,w
  2779  0576  0624               	xorwf	can_send@len,w
  2780  0577  1D03               	skipz
  2781  0578  0008               	return
  2782                           
  2783                           ;main.c: 86: uint8_t txb_ctrl_buf[3];
  2784                           ;main.c: 87: txb_ctrl_buf[0] = 0b00000010;
  2785  0579  3002               	movlw	2
  2786  057A  00FA               	movwf	??_can_send
  2787  057B  087A               	movf	??_can_send,w
  2788  057C  00A0               	movwf	can_send@txb_ctrl_buf
  2789                           
  2790                           ;main.c: 88: txb_ctrl_buf[1] = txb_n_ctrl[n];
  2791  057D  0823               	movf	can_send@n,w
  2792  057E  3E4C               	addlw	low (_txb_n_ctrl| (0+32768))
  2793  057F  0084               	movwf	4
  2794  0580  3088               	movlw	high (_txb_n_ctrl| (0+32768))
  2795  0581  1803               	skipnc
  2796  0582  3E01               	addlw	1
  2797  0583  0085               	movwf	5
  2798  0584  0800               	movf	0,w	;code access
  2799  0585  00FA               	movwf	??_can_send
  2800  0586  087A               	movf	??_can_send,w
  2801  0587  00A1               	movwf	can_send@txb_ctrl_buf+1
  2802                           
  2803                           ;main.c: 89: txb_ctrl_buf[2] = 0b00001011;
  2804  0588  300B               	movlw	11
  2805  0589  00FA               	movwf	??_can_send
  2806  058A  087A               	movf	??_can_send,w
  2807  058B  00A2               	movwf	can_send@txb_ctrl_buf+2
  2808                           
  2809                           ;main.c: 90: bytes_written = SPI_Exchange8bitBuffer(txb_ctrl_buf, 3, txb_ctrl_buf);
  2810  058C  3003               	movlw	3
  2811  058D  00FA               	movwf	??_can_send
  2812  058E  087A               	movf	??_can_send,w
  2813  058F  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  2814  0590  3020               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2815  0591  00FB               	movwf	??_can_send+1
  2816  0592  087B               	movf	??_can_send+1,w
  2817  0593  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  2818  0594  3020               	movlw	(low (can_send@txb_ctrl_buf| 0))& (0+255)
  2819  0595  3184  246D         	fcall	_SPI_Exchange8bitBuffer
  2820  0597  00FC               	movwf	??_can_send+2
  2821  0598  087C               	movf	??_can_send+2,w
  2822  0599  0020               	movlb	0	; select bank0
  2823  059A  00A5               	movwf	can_send@bytes_written
  2824                           
  2825                           ;main.c: 92: return 1;
  2826                           ;	Return value of _can_send is never used
  2827  059B  0008               	return
  2828  059C                     __end_of_can_send:	
  2829                           ;main.c: 93: }
  2830                           ;main.c: 94: }
  2831                           ;main.c: 95: return 0;
  2832                           ;	Return value of _can_send is never used
  2833                           
  2834                           
  2835                           	psect	text8
  2836  046D                     __ptext8:	
  2837 ;; *************** function _SPI_Exchange8bitBuffer *****************
  2838 ;; Defined at:
  2839 ;;		line 91 in file "mcc_generated_files/spi.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  dataIn          1    wreg     PTR unsigned char 
  2842 ;;		 -> can_send@txb_ctrl_buf(3), tx_buf(15), can_start@can_ctrl_buf(3), 
  2843 ;;  bufLen          1    1[COMMON] unsigned char 
  2844 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  2845 ;;		 -> can_send@txb_ctrl_buf(3), tx_buf(15), can_start@can_ctrl_buf(3), 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  2848 ;;		 -> can_send@txb_ctrl_buf(3), tx_buf(15), can_start@can_ctrl_buf(3), 
  2849 ;;  bytesWritten    1    7[COMMON] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      unsigned char 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2861 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2862 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2863 ;;Total ram usage:        7 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		_SPI_Exchange8bit
  2868 ;; This function is called by:
  2869 ;;		_can_start
  2870 ;;		_can_send
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _SPI_Exchange8bitBuffer
  2876  046D                     _SPI_Exchange8bitBuffer:	
  2877                           
  2878                           ;incstack = 0
  2879                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  2880                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  2881  046D  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  2882                           
  2883                           ;spi.c: 93: uint8_t bytesWritten = 0;
  2884  046E  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  2885                           
  2886                           ;spi.c: 95: if(bufLen != 0)
  2887  046F  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  2888  0470  1903               	btfsc	3,2
  2889  0471  2CB9               	goto	l1398
  2890                           
  2891                           ;spi.c: 96: {
  2892                           ;spi.c: 97: if(dataIn != (0))
  2893  0472  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  2894  0473  1D03               	btfss	3,2
  2895  0474  2C9B               	goto	l1386
  2896  0475  2CA0               	goto	l1388
  2897  0476                     l1378:	
  2898                           ;spi.c: 98: {
  2899                           ;spi.c: 99: while(bytesWritten < bufLen)
  2900                           
  2901                           
  2902                           ;spi.c: 100: {
  2903                           ;spi.c: 101: if(dataOut == (0))
  2904  0476  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  2905  0477  1D03               	btfss	3,2
  2906  0478  2C84               	goto	l1382
  2907                           
  2908                           ;spi.c: 102: {
  2909                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  2910  0479  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  2911  047A  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  2912  047B  00F3               	movwf	??_SPI_Exchange8bitBuffer
  2913  047C  0873               	movf	??_SPI_Exchange8bitBuffer,w
  2914  047D  0086               	movwf	6
  2915  047E  0187               	clrf	7
  2916  047F  0801               	movf	1,w
  2917  0480  3183  2373  3184   	fcall	_SPI_Exchange8bit
  2918                           
  2919                           ;spi.c: 104: }
  2920  0483  2C97               	goto	l1384
  2921  0484                     l1382:	
  2922                           
  2923                           ;spi.c: 105: else
  2924                           ;spi.c: 106: {
  2925                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  2926  0484  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  2927  0485  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  2928  0486  00F3               	movwf	??_SPI_Exchange8bitBuffer
  2929  0487  0873               	movf	??_SPI_Exchange8bitBuffer,w
  2930  0488  0086               	movwf	6
  2931  0489  0187               	clrf	7
  2932  048A  0801               	movf	1,w
  2933  048B  3183  2373  3184   	fcall	_SPI_Exchange8bit
  2934  048E  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  2935  048F  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  2936  0490  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  2937  0491  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  2938  0492  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  2939  0493  0086               	movwf	6
  2940  0494  0187               	clrf	7
  2941  0495  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  2942  0496  0081               	movwf	1
  2943  0497                     l1384:	
  2944                           
  2945                           ;spi.c: 108: }
  2946                           ;spi.c: 110: bytesWritten++;
  2947  0497  3001               	movlw	1
  2948  0498  00F3               	movwf	??_SPI_Exchange8bitBuffer
  2949  0499  0873               	movf	??_SPI_Exchange8bitBuffer,w
  2950  049A  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  2951  049B                     l1386:	
  2952  049B  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  2953  049C  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  2954  049D  1803               	btfsc	3,0
  2955  049E  2CB9               	goto	l1398
  2956  049F  2C76               	goto	l1378
  2957  04A0                     l1388:	
  2958                           ;spi.c: 111: }
  2959                           ;spi.c: 112: }
  2960                           
  2961                           
  2962                           ;spi.c: 113: else
  2963                           ;spi.c: 114: {
  2964                           ;spi.c: 115: if(dataOut != (0))
  2965  04A0  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  2966  04A1  1D03               	btfss	3,2
  2967  04A2  2CB5               	goto	l1396
  2968  04A3  2CB9               	goto	l1398
  2969  04A4                     l1392:	
  2970                           ;spi.c: 116: {
  2971                           ;spi.c: 117: while(bytesWritten < bufLen )
  2972                           
  2973                           
  2974                           ;spi.c: 118: {
  2975                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  2976  04A4  3000               	movlw	0
  2977  04A5  3183  2373  3184   	fcall	_SPI_Exchange8bit
  2978  04A8  00F3               	movwf	??_SPI_Exchange8bitBuffer
  2979  04A9  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  2980  04AA  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  2981  04AB  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  2982  04AC  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  2983  04AD  0086               	movwf	6
  2984  04AE  0187               	clrf	7
  2985  04AF  0873               	movf	??_SPI_Exchange8bitBuffer,w
  2986  04B0  0081               	movwf	1
  2987                           
  2988                           ;spi.c: 121: bytesWritten++;
  2989  04B1  3001               	movlw	1
  2990  04B2  00F3               	movwf	??_SPI_Exchange8bitBuffer
  2991  04B3  0873               	movf	??_SPI_Exchange8bitBuffer,w
  2992  04B4  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  2993  04B5                     l1396:	
  2994  04B5  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  2995  04B6  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  2996  04B7  1C03               	skipc
  2997  04B8  2CA4               	goto	l1392
  2998  04B9                     l1398:	
  2999                           
  3000                           ;spi.c: 122: }
  3001                           ;spi.c: 123: }
  3002                           ;spi.c: 124: }
  3003                           ;spi.c: 125: }
  3004                           ;spi.c: 127: return bytesWritten;
  3005  04B9  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  3006  04BA  0008               	return
  3007  04BB                     __end_of_SPI_Exchange8bitBuffer:	
  3008                           
  3009                           	psect	text9
  3010  0373                     __ptext9:	
  3011 ;; *************** function _SPI_Exchange8bit *****************
  3012 ;; Defined at:
  3013 ;;		line 77 in file "mcc_generated_files/spi.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  data            1    wreg     unsigned char 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  data            1    0[COMMON] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      unsigned char 
  3020 ;; Registers used:
  3021 ;;		wreg
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3031 ;;Total ram usage:        1 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_SPI_Exchange8bitBuffer
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function _SPI_Exchange8bit
  3042  0373                     _SPI_Exchange8bit:	
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _SPI_Exchange8bit: [wreg]
  3046                           ;SPI_Exchange8bit@data stored from wreg
  3047  0373  00F0               	movwf	SPI_Exchange8bit@data
  3048                           
  3049                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  3050  0374  0024               	movlb	4	; select bank4
  3051  0375  1395               	bcf	21,7	;volatile
  3052                           
  3053                           ;spi.c: 82: SSP1BUF = data;
  3054  0376  0870               	movf	SPI_Exchange8bit@data,w
  3055  0377  0091               	movwf	17	;volatile
  3056  0378                     l178:	
  3057                           ;spi.c: 85: {
  3058                           
  3059                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  3060                           
  3061  0378  1C14               	btfss	20,0	;volatile
  3062  0379  2B78               	goto	l178
  3063                           
  3064                           ;spi.c: 86: }
  3065                           ;spi.c: 88: return (SSP1BUF);
  3066  037A  0811               	movf	17,w	;volatile
  3067  037B  0008               	return
  3068  037C                     __end_of_SPI_Exchange8bit:	
  3069                           
  3070                           	psect	text10
  3071  04BB                     __ptext10:	
  3072 ;; *************** function _atoi *****************
  3073 ;; Defined at:
  3074 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  s               2    6[COMMON] PTR const unsigned char 
  3077 ;;		 -> ROM(8192), buf(64), 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  a               2   11[COMMON] int 
  3080 ;;  sign            1   10[COMMON] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  2    6[COMMON] int 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3091 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3093 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3094 ;;Total ram usage:        7 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    1
  3097 ;; This function calls:
  3098 ;;		___wmul
  3099 ;;		_isdigit
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _atoi
  3107  04BB                     _atoi:	
  3108  04BB                     l1474:	
  3109                           ;incstack = 0
  3110                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3111                           
  3112  04BB  0876               	movf	atoi@s,w
  3113  04BC  0084               	movwf	4
  3114  04BD  0877               	movf	atoi@s+1,w
  3115  04BE  0085               	movwf	5
  3116  04BF  0012               	moviw fsr0++
  3117  04C0  3A20               	xorlw	32
  3118  04C1  1D03               	btfss	3,2
  3119  04C2  2CC8               	goto	l1476
  3120  04C3                     l1472:	
  3121  04C3  3001               	movlw	1
  3122  04C4  07F6               	addwf	atoi@s,f
  3123  04C5  3000               	movlw	0
  3124  04C6  3DF7               	addwfc	atoi@s+1,f
  3125  04C7  2CBB               	goto	l1474
  3126  04C8                     l1476:	
  3127  04C8  0876               	movf	atoi@s,w
  3128  04C9  0084               	movwf	4
  3129  04CA  0877               	movf	atoi@s+1,w
  3130  04CB  0085               	movwf	5
  3131  04CC  0012               	moviw fsr0++
  3132  04CD  3A09               	xorlw	9
  3133  04CE  1903               	btfsc	3,2
  3134  04CF  2CC3               	goto	l1472
  3135  04D0  01FB               	clrf	atoi@a
  3136  04D1  01FC               	clrf	atoi@a+1
  3137  04D2  01FA               	clrf	atoi@sign
  3138  04D3  0876               	movf	atoi@s,w
  3139  04D4  0084               	movwf	4
  3140  04D5  0877               	movf	atoi@s+1,w
  3141  04D6  0085               	movwf	5
  3142  04D7  0012               	moviw fsr0++
  3143  04D8  3A2D               	xorlw	45
  3144  04D9  1D03               	btfss	3,2
  3145  04DA  2CE0               	goto	l1486
  3146  04DB  3001               	movlw	1
  3147  04DC  00F8               	movwf	??_atoi
  3148  04DD  0878               	movf	??_atoi,w
  3149  04DE  07FA               	addwf	atoi@sign,f
  3150  04DF  2CE8               	goto	l1492
  3151  04E0                     l1486:	
  3152  04E0  0876               	movf	atoi@s,w
  3153  04E1  0084               	movwf	4
  3154  04E2  0877               	movf	atoi@s+1,w
  3155  04E3  0085               	movwf	5
  3156  04E4  0012               	moviw fsr0++
  3157  04E5  3A2B               	xorlw	43
  3158  04E6  1D03               	btfss	3,2
  3159  04E7  2CEC               	goto	l1494
  3160  04E8                     l1492:	
  3161  04E8  3001               	movlw	1
  3162  04E9  07F6               	addwf	atoi@s,f
  3163  04EA  3000               	movlw	0
  3164  04EB  3DF7               	addwfc	atoi@s+1,f
  3165  04EC                     l1494:	
  3166  04EC  0876               	movf	atoi@s,w
  3167  04ED  0084               	movwf	4
  3168  04EE  0877               	movf	atoi@s+1,w
  3169  04EF  0085               	movwf	5
  3170  04F0  0800               	movf	0,w	;code access
  3171  04F1  3183  239C  3184   	fcall	_isdigit
  3172  04F4  1C03               	btfss	3,0
  3173  04F5  2D13               	goto	l1496
  3174  04F6  087C               	movf	atoi@a+1,w
  3175  04F7  00F1               	movwf	___wmul@multiplier+1
  3176  04F8  087B               	movf	atoi@a,w
  3177  04F9  00F0               	movwf	___wmul@multiplier
  3178  04FA  300A               	movlw	10
  3179  04FB  00F2               	movwf	___wmul@multiplicand
  3180  04FC  3000               	movlw	0
  3181  04FD  00F3               	movwf	___wmul@multiplicand+1
  3182  04FE  3183  23E6  3184   	fcall	___wmul
  3183  0501  0876               	movf	atoi@s,w
  3184  0502  0084               	movwf	4
  3185  0503  0877               	movf	atoi@s+1,w
  3186  0504  0085               	movwf	5
  3187  0505  0800               	movf	0,w	;code access
  3188  0506  0770               	addwf	?___wmul,w
  3189  0507  00F8               	movwf	??_atoi
  3190  0508  0871               	movf	?___wmul+1,w
  3191  0509  1803               	skipnc
  3192  050A  0A71               	incf	?___wmul+1,w
  3193  050B  00F9               	movwf	??_atoi+1
  3194  050C  0878               	movf	??_atoi,w
  3195  050D  3ED0               	addlw	208
  3196  050E  00FB               	movwf	atoi@a
  3197  050F  30FF               	movlw	255
  3198  0510  3D79               	addwfc	??_atoi+1,w
  3199  0511  00FC               	movwf	atoi@a+1
  3200  0512  2CE8               	goto	l1492
  3201  0513                     l1496:	
  3202  0513  087A               	movf	atoi@sign,w
  3203  0514  1903               	btfsc	3,2
  3204  0515  2D22               	goto	l1502
  3205  0516  097B               	comf	atoi@a,w
  3206  0517  00F8               	movwf	??_atoi
  3207  0518  097C               	comf	atoi@a+1,w
  3208  0519  00F9               	movwf	??_atoi+1
  3209  051A  0AF8               	incf	??_atoi,f
  3210  051B  1903               	skipnz
  3211  051C  0AF9               	incf	??_atoi+1,f
  3212  051D  0878               	movf	??_atoi,w
  3213  051E  00F6               	movwf	?_atoi
  3214  051F  0879               	movf	??_atoi+1,w
  3215  0520  00F7               	movwf	?_atoi+1
  3216  0521  0008               	return
  3217  0522                     l1502:	
  3218  0522  087C               	movf	atoi@a+1,w
  3219  0523  00F7               	movwf	?_atoi+1
  3220  0524  087B               	movf	atoi@a,w
  3221  0525  00F6               	movwf	?_atoi
  3222  0526  0008               	return
  3223  0527                     __end_of_atoi:	
  3224                           
  3225                           	psect	text11
  3226  039C                     __ptext11:	
  3227 ;; *************** function _isdigit *****************
  3228 ;; Defined at:
  3229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  c               1    wreg     unsigned char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  c               1    1[COMMON] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;		None               void
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;Total ram usage:        2 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_printf
  3253 ;;		_atoi
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _isdigit
  3259  039C                     _isdigit:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3263                           ;isdigit@c stored from wreg
  3264  039C  00F1               	movwf	isdigit@c
  3265  039D  01F0               	clrf	_isdigit$576
  3266  039E  303A               	movlw	58
  3267  039F  0271               	subwf	isdigit@c,w
  3268  03A0  1803               	skipnc
  3269  03A1  2BA8               	goto	l1178
  3270  03A2  3030               	movlw	48
  3271  03A3  0271               	subwf	isdigit@c,w
  3272  03A4  1C03               	skipc
  3273  03A5  2BA8               	goto	l1178
  3274  03A6  01F0               	clrf	_isdigit$576
  3275  03A7  0AF0               	incf	_isdigit$576,f
  3276  03A8                     l1178:	
  3277  03A8  0C70               	rrf	_isdigit$576,w
  3278  03A9  0008               	return
  3279  03AA                     __end_of_isdigit:	
  3280                           
  3281                           	psect	text12
  3282  03E6                     __ptext12:	
  3283 ;; *************** function ___wmul *****************
  3284 ;; Defined at:
  3285 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  multiplier      2    0[COMMON] unsigned int 
  3288 ;;  multiplicand    2    2[COMMON] unsigned int 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  product         2    4[COMMON] unsigned int 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    0[COMMON] unsigned int 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3301 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;Total ram usage:        6 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_printf
  3310 ;;		_atoi
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function ___wmul
  3316  03E6                     ___wmul:	
  3317                           
  3318                           ;incstack = 0
  3319                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3320  03E6  01F4               	clrf	___wmul@product
  3321  03E7  01F5               	clrf	___wmul@product+1
  3322  03E8                     l1184:	
  3323  03E8  1C70               	btfss	___wmul@multiplier,0
  3324  03E9  2BEE               	goto	l352
  3325  03EA  0872               	movf	___wmul@multiplicand,w
  3326  03EB  07F4               	addwf	___wmul@product,f
  3327  03EC  0873               	movf	___wmul@multiplicand+1,w
  3328  03ED  3DF5               	addwfc	___wmul@product+1,f
  3329  03EE                     l352:	
  3330  03EE  3001               	movlw	1
  3331  03EF                     u645:	
  3332  03EF  35F2               	lslf	___wmul@multiplicand,f
  3333  03F0  0DF3               	rlf	___wmul@multiplicand+1,f
  3334  03F1  0B89               	decfsz	9,f
  3335  03F2  2BEF               	goto	u645
  3336  03F3  3001               	movlw	1
  3337  03F4                     u655:	
  3338  03F4  36F1               	lsrf	___wmul@multiplier+1,f
  3339  03F5  0CF0               	rrf	___wmul@multiplier,f
  3340  03F6  0B89               	decfsz	9,f
  3341  03F7  2BF4               	goto	u655
  3342  03F8  0870               	movf	___wmul@multiplier,w
  3343  03F9  0471               	iorwf	___wmul@multiplier+1,w
  3344  03FA  1D03               	btfss	3,2
  3345  03FB  2BE8               	goto	l1184
  3346  03FC  0875               	movf	___wmul@product+1,w
  3347  03FD  00F1               	movwf	?___wmul+1
  3348  03FE  0874               	movf	___wmul@product,w
  3349  03FF  00F0               	movwf	?___wmul
  3350  0400  0008               	return
  3351  0401                     __end_of___wmul:	
  3352                           
  3353                           	psect	text13
  3354  03AA                     __ptext13:	
  3355 ;; *************** function _SYSTEM_Initialize *****************
  3356 ;; Defined at:
  3357 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0, pclath, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    1
  3378 ;; This function calls:
  3379 ;;		_EUSART_Initialize
  3380 ;;		_OSCILLATOR_Initialize
  3381 ;;		_PIN_MANAGER_Initialize
  3382 ;;		_SPI_Initialize
  3383 ;;		_WDT_Initialize
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _SYSTEM_Initialize
  3391  03AA                     _SYSTEM_Initialize:	
  3392                           
  3393                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3394                           
  3395                           ;incstack = 0
  3396                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3397  03AA  3183  23B9  3183   	fcall	_PIN_MANAGER_Initialize
  3398                           
  3399                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3400  03AD  3183  2386  3183   	fcall	_OSCILLATOR_Initialize
  3401                           
  3402                           ;mcc.c: 75: WDT_Initialize();
  3403  03B0  3183  2356  3183   	fcall	_WDT_Initialize
  3404                           
  3405                           ;mcc.c: 76: SPI_Initialize();
  3406  03B3  3183  235F  3183   	fcall	_SPI_Initialize
  3407                           
  3408                           ;mcc.c: 77: EUSART_Initialize();
  3409  03B6  3183  2390         	fcall	_EUSART_Initialize
  3410  03B8  0008               	return
  3411  03B9                     __end_of_SYSTEM_Initialize:	
  3412                           
  3413                           	psect	text14
  3414  0356                     __ptext14:	
  3415 ;; *************** function _WDT_Initialize *****************
  3416 ;; Defined at:
  3417 ;;		line 94 in file "mcc_generated_files/mcc.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_SYSTEM_Initialize
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _WDT_Initialize
  3446  0356                     _WDT_Initialize:	
  3447                           
  3448                           ;mcc.c: 97: WDTCON = 0x16;
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in _WDT_Initialize: [wreg]
  3452  0356  3016               	movlw	22
  3453  0357  0021               	movlb	1	; select bank1
  3454  0358  0097               	movwf	23	;volatile
  3455  0359  0008               	return
  3456  035A                     __end_of_WDT_Initialize:	
  3457                           
  3458                           	psect	text15
  3459  035F                     __ptext15:	
  3460 ;; *************** function _SPI_Initialize *****************
  3461 ;; Defined at:
  3462 ;;		line 63 in file "mcc_generated_files/spi.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;		None
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3480 ;;Total ram usage:        0 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_SYSTEM_Initialize
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           
  3490                           ;psect for function _SPI_Initialize
  3491  035F                     _SPI_Initialize:	
  3492                           
  3493                           ;spi.c: 68: SSP1STAT = 0x00;
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  3497  035F  0024               	movlb	4	; select bank4
  3498  0360  0194               	clrf	20	;volatile
  3499                           
  3500                           ;spi.c: 71: SSP1CON1 = 0x20;
  3501  0361  3020               	movlw	32
  3502  0362  0095               	movwf	21	;volatile
  3503                           
  3504                           ;spi.c: 74: SSP1ADD = 0x00;
  3505  0363  0192               	clrf	18	;volatile
  3506  0364  0008               	return
  3507  0365                     __end_of_SPI_Initialize:	
  3508                           
  3509                           	psect	text16
  3510  03B9                     __ptext16:	
  3511 ;; *************** function _PIN_MANAGER_Initialize *****************
  3512 ;; Defined at:
  3513 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;Total ram usage:        0 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_SYSTEM_Initialize
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _PIN_MANAGER_Initialize
  3542  03B9                     _PIN_MANAGER_Initialize:	
  3543                           
  3544                           ;pin_manager.c: 57: LATA = 0x00;
  3545                           
  3546                           ;incstack = 0
  3547                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3548  03B9  0022               	movlb	2	; select bank2
  3549  03BA  018C               	clrf	12	;volatile
  3550                           
  3551                           ;pin_manager.c: 58: LATC = 0x00;
  3552  03BB  018E               	clrf	14	;volatile
  3553                           
  3554                           ;pin_manager.c: 63: TRISA = 0x3F;
  3555  03BC  303F               	movlw	63
  3556  03BD  0021               	movlb	1	; select bank1
  3557  03BE  008C               	movwf	12	;volatile
  3558                           
  3559                           ;pin_manager.c: 64: TRISC = 0x32;
  3560  03BF  3032               	movlw	50
  3561  03C0  008E               	movwf	14	;volatile
  3562                           
  3563                           ;pin_manager.c: 69: ANSELC = 0x00;
  3564  03C1  0023               	movlb	3	; select bank3
  3565  03C2  018E               	clrf	14	;volatile
  3566                           
  3567                           ;pin_manager.c: 70: ANSELA = 0x17;
  3568  03C3  3017               	movlw	23
  3569  03C4  008C               	movwf	12	;volatile
  3570                           
  3571                           ;pin_manager.c: 75: WPUA = 0x00;
  3572  03C5  0024               	movlb	4	; select bank4
  3573  03C6  018C               	clrf	12	;volatile
  3574                           
  3575                           ;pin_manager.c: 76: WPUC = 0x30;
  3576  03C7  3030               	movlw	48
  3577  03C8  008E               	movwf	14	;volatile
  3578                           
  3579                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  3580  03C9  0021               	movlb	1	; select bank1
  3581  03CA  1395               	bcf	21,7	;volatile
  3582                           
  3583                           ;pin_manager.c: 83: APFCON1 = 0x00;
  3584  03CB  0022               	movlb	2	; select bank2
  3585  03CC  019E               	clrf	30	;volatile
  3586                           
  3587                           ;pin_manager.c: 84: APFCON0 = 0x00;
  3588  03CD  019D               	clrf	29	;volatile
  3589  03CE  0008               	return
  3590  03CF                     __end_of_PIN_MANAGER_Initialize:	
  3591                           
  3592                           	psect	text17
  3593  0386                     __ptext17:	
  3594 ;; *************** function _OSCILLATOR_Initialize *****************
  3595 ;; Defined at:
  3596 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;		None
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;		None
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3614 ;;Total ram usage:        0 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_SYSTEM_Initialize
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           
  3624                           ;psect for function _OSCILLATOR_Initialize
  3625  0386                     _OSCILLATOR_Initialize:	
  3626                           
  3627                           ;mcc.c: 83: OSCCON = 0x70;
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3631  0386  3070               	movlw	112
  3632  0387  0021               	movlb	1	; select bank1
  3633  0388  0099               	movwf	25	;volatile
  3634                           
  3635                           ;mcc.c: 85: OSCTUNE = 0x00;
  3636  0389  0198               	clrf	24	;volatile
  3637                           
  3638                           ;mcc.c: 87: BORCON = 0x00;
  3639  038A  0022               	movlb	2	; select bank2
  3640  038B  0196               	clrf	22	;volatile
  3641  038C                     l26:	
  3642                           ;mcc.c: 90: {
  3643                           
  3644                           ;mcc.c: 89: while(PLLR == 0)
  3645                           
  3646  038C  0021               	movlb	1	; select bank1
  3647  038D  1B1A               	btfsc	26,6	;volatile
  3648  038E  0008               	return
  3649  038F  2B8C               	goto	l26
  3650  0390                     __end_of_OSCILLATOR_Initialize:	
  3651                           
  3652                           	psect	text18
  3653  0390                     __ptext18:	
  3654 ;; *************** function _EUSART_Initialize *****************
  3655 ;; Defined at:
  3656 ;;		line 53 in file "mcc_generated_files/eusart.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;Total ram usage:        0 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_SYSTEM_Initialize
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _EUSART_Initialize
  3685  0390                     _EUSART_Initialize:	
  3686                           
  3687                           ;eusart.c: 58: BAUDCON = 0x08;
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _EUSART_Initialize: [wreg]
  3691  0390  3008               	movlw	8
  3692  0391  0023               	movlb	3	; select bank3
  3693  0392  009F               	movwf	31	;volatile
  3694                           
  3695                           ;eusart.c: 61: RCSTA = 0x90;
  3696  0393  3090               	movlw	144
  3697  0394  009D               	movwf	29	;volatile
  3698                           
  3699                           ;eusart.c: 64: TXSTA = 0x24;
  3700  0395  3024               	movlw	36
  3701  0396  009E               	movwf	30	;volatile
  3702                           
  3703                           ;eusart.c: 67: SPBRGL = 0x40;
  3704  0397  3040               	movlw	64
  3705  0398  009B               	movwf	27	;volatile
  3706                           
  3707                           ;eusart.c: 70: SPBRGH = 0x03;
  3708  0399  3003               	movlw	3
  3709  039A  009C               	movwf	28	;volatile
  3710  039B  0008               	return
  3711  039C                     __end_of_EUSART_Initialize:	
  3712                           
  3713                           	psect	text19
  3714  037C                     __ptext19:	
  3715 ;; *************** function _EUSART_Read *****************
  3716 ;; Defined at:
  3717 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;		None
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;		None
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      unsigned char 
  3724 ;; Registers used:
  3725 ;;		wreg
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;Total ram usage:        0 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_main
  3741 ;;		_getch
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           
  3746                           ;psect for function _EUSART_Read
  3747  037C                     _EUSART_Read:	
  3748  037C                     l56:	
  3749                           ;eusart.c: 78: {
  3750                           
  3751                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  3752                           
  3753                           ;incstack = 0
  3754                           ; Regs used in _EUSART_Read: [wreg]
  3755                           
  3756  037C  0020               	movlb	0	; select bank0
  3757  037D  1E91               	btfss	17,5	;volatile
  3758  037E  2B7C               	goto	l56
  3759                           
  3760                           ;eusart.c: 79: }
  3761                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  3762  037F  0023               	movlb	3	; select bank3
  3763  0380  1C9D               	btfss	29,1	;volatile
  3764  0381  2B84               	goto	l1408
  3765                           
  3766                           ;eusart.c: 83: {
  3767                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  3768  0382  121D               	bcf	29,4	;volatile
  3769                           
  3770                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  3771  0383  161D               	bsf	29,4	;volatile
  3772  0384                     l1408:	
  3773                           
  3774                           ;eusart.c: 88: }
  3775                           ;eusart.c: 90: return RCREG;
  3776  0384  0819               	movf	25,w	;volatile
  3777  0385  0008               	return
  3778  0386                     __end_of_EUSART_Read:	
  3779  007E                     btemp	set	126	;btemp
  3780  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    12
    Data        3
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      51
    BANK1            80      0      64
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), buf(BANK1[64]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_5(CODE[7]), printf@c(BANK0[1]), buf(BANK1[64]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_4(CODE[23]), STR_3(CODE[22]), STR_2(CODE[3]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 15
		 -> can_send@txb_ctrl_buf(BANK0[3]), tx_buf(BANK0[15]), can_start@can_ctrl_buf(BANK0[3]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 15
		 -> can_send@txb_ctrl_buf(BANK0[3]), tx_buf(BANK0[15]), can_start@can_ctrl_buf(BANK0[3]), 

    can_send@buf	PTR unsigned char  size(1) Largest target is 64
		 -> buf(BANK1[64]), 


Critical Paths under _main in COMMON

    _main->_printf
    _set_sid->_printf
    _printf->___lwdiv
    _putch->_EUSART_Write
    _can_start->_SPI_Exchange8bitBuffer
    _can_send->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_set_sid
    _set_sid->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    7341
                                             25 BANK0      4     4      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                           _can_send
                          _can_start
                             _printf
                            _set_sid
 ---------------------------------------------------------------------------------
 (1) _set_sid                                              8     6      2    2182
                                             17 BANK0      8     6      2
                               _atoi (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    21      6    1920
                                              8 COMMON     6     0      6
                                              0 BANK0     17    17      0
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _can_start                                            7     7      0     947
                                              8 COMMON     3     3      0
                                              0 BANK0      4     4      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (1) _can_send                                            12    10      2    1497
                                              8 COMMON     5     3      2
                                              0 BANK0      7     7      0
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (2) _SPI_Exchange8bitBuffer                               7     5      2     873
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2     772
                                              6 COMMON     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_send
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _can_start
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
   _set_sid
     _atoi (ARG)
       ___wmul
       _isdigit
     _printf (ARG)
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      33       5       63.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      81      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      81      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 11 14:41:17 2018

                    _SPI_Initialize 035F                                   _c 0040  
                       __CFG_CP$OFF 0000                                  l26 038C  
                                l63 036C                                  l56 037C  
           ?_SPI_Exchange8bitBuffer 0071                 ___wmul@multiplicand 0072  
                       __CFG_LVP$ON 0000                                 l223 0664  
                               l352 03EE                                 l178 0378  
                               l268 07E1                        __CFG_CPD$OFF 0000  
                               u705 0416                                 u715 0420  
                               u645 03EF                                 u725 0428  
                               u805 06D9                                 u655 03F4  
                               u685 040C                                 u845 075F  
                               u865 0778                                 _buf 00A0  
                               _cnt 003F                                 _sid 003D  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000                        ?_EUSART_Read 0070  
                              l1214 0427                                l1206 0409  
                              l1310 0709                                l1302 06E2  
                              l1208 0415                                l1304 06F1  
                              l1320 071D                                l1218 0430  
                              l1314 0714                                l1322 0738  
                              l1332 074A                                l1308 06FE  
                              l1260 065F                                l1502 0522  
                              l1342 0785                                l1408 0384  
                              l1184 03E8                                l1352 0798  
                              l1344 0788                                l1280 06AF  
                              l1272 0680                                l1178 03A8  
                              l1450 055F                                l1354 079C  
                              l1338 0769                                l1266 066A  
                              l1292 06C5                                l1268 0673  
                              l1540 0610                                l1524 05CC  
                              l1516 05A9                                l1382 0484  
                              l1366 07AD                                l1358 07A9  
                              l1294 06D3                                l1472 04C3  
                              l1392 04A4                                l1384 0497  
                              l1448 0548                                l1288 06C3  
                              l1368 0643                                l1536 05FF  
                              l1474 04BB                                l1378 0476  
                              l1386 049B                                l1298 06E0  
                              l1492 04E8                                l1476 04C8  
                              l1396 04B5                                l1388 04A0  
                              l1548 063B                                l1494 04EC  
                              l1486 04E0                                l1398 04B9  
                              l1496 0513                                STR_1 0818  
                              STR_2 084F                                STR_3 0802  
                              STR_4 0801                                STR_5 0845  
                              STR_6 082C                                u1120 05CA  
                              u1025 0447                                _LATA 010C  
                              _LATC 010E                                _PLLR 04D6  
                              _WPUA 020C                                _WPUC 020E  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _atoi 04BB                                _main 059C  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                              start 0002              __end_of_SPI_Initialize 0365  
                     __CFG_MCLRE$ON 0000      __end_of_SPI_Exchange8bitBuffer 04BB  
                     __CFG_PLLEN$ON 0000                       ?_EUSART_Write 0070  
    __size_of_OSCILLATOR_Initialize 000A       __end_of_OSCILLATOR_Initialize 0390  
                             ?_atoi 0076                               ?_main 0070  
                     __CFG_WDTE$OFF 0000                     __end_of___lwdiv 0435  
                             _RCREG 0199                               _RCSTA 019D  
                             _TRISA 008C                               _TRISC 008E  
                             _TXREG 019A                               _TXSTA 019E  
                    _WDT_Initialize 0356                     __end_of_isdigit 03AA  
                             atoi@a 007B                               atoi@s 0076  
                             _putch 035A                     __end_of_set_sid 046D  
                             status 0003                               wtemp0 007E  
                   ?_SPI_Initialize 0070                     __initialization 07E2  
                      __end_of_atoi 0527                        __end_of_main 063E  
            can_start@bytes_written 0023                      ??_EUSART_Write 0070  
                            ??_atoi 0078                              ??_main 0039  
            __end_of_WDT_Initialize 035A            __end_of_SPI_Exchange8bit 037C  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELC 018E                              _BORCON 0116  
                            _OSCCON 0099                              _SPBRGH 019C  
                            _SPBRGL 019B                              _WDTCON 0097  
                  __end_of_can_send 059C                      __CFG_PWRTE$OFF 0000  
                            ___wmul 03E6                      __CFG_STVREN$ON 0000  
                         ??___lwdiv 0074                    __end_of_max_char 0801  
                            _printf 063E                              _tx_buf 0041  
                         ??_isdigit 0070                     ?_WDT_Initialize 0070  
                         ??_set_sid 0033                __size_of_EUSART_Read 000A  
                 _SYSTEM_Initialize 03AA             __end_of__initialization 07FD  
                ?_SYSTEM_Initialize 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 0353                 ??_SYSTEM_Initialize 0070  
                __size_of_can_start 0017                       __end_of_putch 035F  
                    _OPTION_REGbits 0095           __end_of_SYSTEM_Initialize 03B9  
                           ??_putch 0071                          __pbssBANK0 003D  
                        __pbssBANK1 00A0                __end_of_EUSART_Write 0373  
                        __pmaintext 059C                             ?___wmul 0070  
                           _BAUDCON 019F                             _APFCON0 011D  
                           _APFCON1 011E                             ?_printf 0078  
                         ?_can_send 0078                             _OSCTUNE 0098  
                           _SSP1ADD 0212                             _SSP1BUF 0211  
                 __end_of_can_start 03E6                    ??_SPI_Initialize 0070  
                    can_start@F2923 0050                     __size_of___wmul 001B  
                           ___lwdiv 0401                             __ptext1 0435  
                           __ptext2 063E                             __ptext3 035A  
                           __ptext4 036B                             __ptext5 0401  
                           __ptext6 03CF                             __ptext7 0527  
                           __ptext8 046D                             __ptext9 0373  
                   __size_of_printf 01A4                   __end_of_hexpowers 0845  
             _OSCILLATOR_Initialize 0386                          ??_can_send 007A  
                           _isdigit 039C            ??_PIN_MANAGER_Initialize 0070  
                           _set_sid 0435                   ?_SPI_Exchange8bit 0070  
                       set_sid@sidh 0037                         set_sid@sidl 0038  
        __size_of_SYSTEM_Initialize 000F                             main@sid 003B  
                           clrloop0 0366                end_of_initialization 07FD  
                ??_SPI_Exchange8bit 0070                SPI_Exchange8bit@data 0070  
                 _EUSART_Initialize 0390                  ?_EUSART_Initialize 0070  
                         _RCSTAbits 019D                             printf@c 0030  
                           printf@f 0078                 ??_EUSART_Initialize 0070  
                  ??_WDT_Initialize 0070                    __CFG_FOSC$INTOSC 0000  
             __size_of_EUSART_Write 0008                          _txb_n_ctrl 084C  
         __end_of_EUSART_Initialize 039C                         printf@width 002E  
          ??_SPI_Exchange8bitBuffer 0073                      __end_of___wmul 0401  
                      _EUSART_Write 036B              ?_OSCILLATOR_Initialize 0070  
                    __end_of_printf 07E2                 start_initialization 07E2  
   __size_of_PIN_MANAGER_Initialize 0016                       ??_EUSART_Read 0070  
                       putch@txData 0071               can_start@can_ctrl_buf 0020  
                          ??___wmul 0074                         __pdataBANK0 0050  
                          ??_printf 0020                           ___latbits 0002  
                     __pcstackBANK0 0020                   __size_of_can_send 0075  
     SPI_Exchange8bitBuffer@dataOut 0072          __size_of_EUSART_Initialize 000C  
                         _can_start 03CF                 __end_of_EUSART_Read 0386  
   __size_of_SPI_Exchange8bitBuffer 004E                    ___lwdiv@dividend 0072  
            _PIN_MANAGER_Initialize 03B9                            ?___lwdiv 0070  
                          ?_isdigit 0070                           can_send@i 0026  
                         can_send@n 0023                            ?_set_sid 0031  
                         _hexpowers 083D                    ___lwdiv@quotient 0075  
                    __size_of_putch 0005                      ___wmul@product 0074  
                        ?_can_start 0070                            _LATCbits 010E  
                         clear_ram0 0365                            _PIR1bits 0011  
         __size_of_SPI_Exchange8bit 0009                            _SSP1CON1 0215  
                          _SSP1STAT 0214                   ___wmul@multiplier 0070  
            _SPI_Exchange8bitBuffer 046D                          printf@flag 0025  
                        printf@prec 0028                         _EUSART_Read 037C  
                       can_send@buf 0078                         can_send@cnt 0079  
                       can_send@len 0024             __size_of_SPI_Initialize 0006  
           ??_OSCILLATOR_Initialize 0070                    __size_of___lwdiv 0034  
      SPI_Exchange8bitBuffer@dataIn 0076                         _isdigit$576 0070  
      SPI_Exchange8bitBuffer@bufLen 0071                            _can_send 0527  
                  __size_of_isdigit 000E                     ___lwdiv@divisor 0070  
                   ___lwdiv@counter 0077                            __ptext10 04BB  
                          __ptext11 039C                            __ptext12 03E6  
                          __ptext13 03AA                            __ptext14 0356  
                          __ptext15 035F                            __ptext16 03B9  
                          __ptext17 0386                            __ptext18 0390  
                          __ptext19 037C                    __size_of_set_sid 0038  
                      _SSP1CON1bits 0215                            _max_char 0800  
                     __size_of_atoi 006C                       __size_of_main 00A2  
                       ??_can_start 0078                can_send@txb_ctrl_buf 0020  
                          atoi@sign 007A                           printf@idx 0024  
                         printf@len 002C                           printf@val 0026  
                      _SSP1STATbits 0214                            isdigit@c 0071  
           __size_of_WDT_Initialize 0004             ?_PIN_MANAGER_Initialize 0070  
                 __CFG_CLKOUTEN$OFF 0000  SPI_Exchange8bitBuffer@bytesWritten 0077  
                  _SPI_Exchange8bit 0373               can_send@bytes_written 0025  
                          printf@ap 002B                            printf@cp 0029  
                     __pstringtext1 083D                       __pstringtext2 084C  
                     __pstringtext3 0800                       __pstringtext4 0818  
                     __pstringtext5 082C                       __pstringtext6 0845  
                     __pstringtext7 084F                       __pstringtext8 0000  
                __end_of_txb_n_ctrl 084F                  EUSART_Write@txData 0070  
    __end_of_PIN_MANAGER_Initialize 03CF                     set_sid@can_node 0031  
