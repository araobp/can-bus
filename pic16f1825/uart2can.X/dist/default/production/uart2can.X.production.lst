

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 05:52:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	stringtext27,global,class=STRCODE,delta=2
    32                           	psect	stringtext28,global,class=STRCODE,delta=2
    33                           	psect	stringtext29,global,class=STRCODE,delta=2
    34                           	psect	stringtext30,global,class=STRCODE,delta=2
    35                           	psect	stringtext31,global,class=STRCODE,delta=2
    36                           	psect	stringtext32,global,class=STRCODE,delta=2
    37                           	psect	stringtext33,global,class=STRCODE,delta=2
    38                           	psect	stringtext34,global,class=STRCODE,delta=2
    39                           	psect	stringtext35,global,class=STRCODE,delta=2
    40                           	psect	stringtext36,global,class=STRCODE,delta=2
    41                           	psect	stringtext37,global,class=STRCODE,delta=2
    42                           	psect	stringtext38,global,class=STRCODE,delta=2
    43                           	psect	stringtext39,global,class=STRCODE,delta=2
    44                           	psect	stringtext40,global,class=STRCODE,delta=2
    45                           	psect	stringtext41,global,class=STRCODE,delta=2
    46                           	psect	stringtext42,global,class=STRCODE,delta=2
    47                           	psect	stringtext43,global,class=STRCODE,delta=2
    48                           	psect	stringtext44,global,class=STRCODE,delta=2
    49                           	psect	stringtext45,global,class=STRCODE,delta=2
    50                           	psect	stringtext46,global,class=STRCODE,delta=2
    51                           	psect	stringtext47,global,class=STRCODE,delta=2
    52                           	psect	stringtext48,global,class=STRCODE,delta=2
    53                           	psect	stringtext49,global,class=STRCODE,delta=2
    54                           	psect	stringtext50,global,class=STRCODE,delta=2
    55                           	psect	stringtext51,global,class=STRCODE,delta=2
    56                           	psect	stringtext52,global,class=STRCODE,delta=2
    57                           	psect	stringtext53,global,class=STRCODE,delta=2
    58                           	psect	stringtext54,global,class=STRCODE,delta=2
    59                           	psect	stringtext55,global,class=STRCODE,delta=2
    60                           	psect	stringtext56,global,class=STRCODE,delta=2
    61                           	psect	stringtext57,global,class=STRCODE,delta=2
    62                           	psect	stringtext58,global,class=STRCODE,delta=2
    63                           	psect	stringtext59,global,class=STRCODE,delta=2
    64                           	psect	stringtext60,global,class=STRCODE,delta=2
    65                           	psect	stringtext61,global,class=STRCODE,delta=2
    66                           	psect	stringtext62,global,class=STRCODE,delta=2
    67                           	psect	cinit,global,class=CODE,merge=1,delta=2
    68                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    69                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    70                           	psect	clrtext,global,class=CODE,delta=2
    71                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    72                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    73                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    74                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    75                           	psect	text1,local,class=CODE,merge=1,delta=2
    76                           	psect	text2,local,class=CODE,merge=1,delta=2
    77                           	psect	text3,local,class=CODE,merge=1,delta=2
    78                           	psect	text4,local,class=CODE,merge=1,delta=2
    79                           	psect	text5,local,class=CODE,merge=1,delta=2
    80                           	psect	text6,local,class=CODE,merge=1,delta=2
    81                           	psect	text7,local,class=CODE,merge=1,delta=2
    82                           	psect	text8,local,class=CODE,merge=1,delta=2
    83                           	psect	text9,local,class=CODE,merge=1,delta=2
    84                           	psect	text10,local,class=CODE,merge=1,delta=2
    85                           	psect	text11,local,class=CODE,merge=1,delta=2
    86                           	psect	text12,local,class=CODE,merge=1,delta=2
    87                           	psect	text13,local,class=CODE,merge=1,delta=2
    88                           	psect	text14,local,class=CODE,merge=1,delta=2
    89                           	psect	text15,local,class=CODE,merge=1,delta=2
    90                           	psect	text16,local,class=CODE,merge=1,delta=2
    91                           	psect	text17,local,class=CODE,merge=1,delta=2
    92                           	psect	text18,local,class=CODE,merge=1,delta=2
    93                           	psect	text19,local,class=CODE,merge=1,delta=2
    94                           	psect	text20,local,class=CODE,merge=1,delta=2
    95                           	psect	text21,local,class=CODE,merge=1,delta=2
    96                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text24,local,class=CODE,merge=1,delta=2
    99                           	psect	text25,local,class=CODE,merge=1,delta=2
   100                           	psect	text26,local,class=CODE,merge=1,delta=2
   101                           	psect	text27,local,class=CODE,merge=1,delta=2
   102                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text31,local,class=CODE,merge=1,delta=2
   106                           	psect	text32,local,class=CODE,merge=1,delta=2
   107                           	psect	text33,local,class=CODE,merge=1,delta=2
   108                           	psect	text34,local,class=CODE,merge=1,delta=2
   109                           	psect	text35,local,class=CODE,merge=1,delta=2
   110                           	psect	text36,local,class=CODE,merge=1,delta=2
   111                           	psect	text37,local,class=CODE,merge=1,delta=2
   112                           	psect	text38,local,class=CODE,merge=1,delta=2
   113                           	psect	text39,local,class=CODE,merge=1,delta=2
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 1.45
   117                           ; Generated 16/11/2017 GMT
   118                           ; 
   119                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC16F1825 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000E                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  008C                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  010C                     	;# 
   195  010E                     	;# 
   196  0111                     	;# 
   197  0112                     	;# 
   198  0113                     	;# 
   199  0114                     	;# 
   200  0115                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  0118                     	;# 
   204  0119                     	;# 
   205  011A                     	;# 
   206  011B                     	;# 
   207  011D                     	;# 
   208  011E                     	;# 
   209  018C                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0193                     	;# 
   217  0194                     	;# 
   218  0195                     	;# 
   219  0196                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020C                     	;# 
   229  020E                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0294                     	;# 
   250  0295                     	;# 
   251  0295                     	;# 
   252  0296                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029B                     	;# 
   258  029C                     	;# 
   259  029D                     	;# 
   260  029E                     	;# 
   261  0311                     	;# 
   262  0311                     	;# 
   263  0312                     	;# 
   264  0313                     	;# 
   265  0318                     	;# 
   266  0318                     	;# 
   267  0319                     	;# 
   268  031A                     	;# 
   269  038C                     	;# 
   270  038E                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000E                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0016                     	;# 
   316  0017                     	;# 
   317  0018                     	;# 
   318  0019                     	;# 
   319  001A                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001E                     	;# 
   323  001F                     	;# 
   324  008C                     	;# 
   325  008E                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0093                     	;# 
   329  0095                     	;# 
   330  0096                     	;# 
   331  0097                     	;# 
   332  0098                     	;# 
   333  0099                     	;# 
   334  009A                     	;# 
   335  009B                     	;# 
   336  009B                     	;# 
   337  009C                     	;# 
   338  009D                     	;# 
   339  009E                     	;# 
   340  010C                     	;# 
   341  010E                     	;# 
   342  0111                     	;# 
   343  0112                     	;# 
   344  0113                     	;# 
   345  0114                     	;# 
   346  0115                     	;# 
   347  0116                     	;# 
   348  0117                     	;# 
   349  0118                     	;# 
   350  0119                     	;# 
   351  011A                     	;# 
   352  011B                     	;# 
   353  011D                     	;# 
   354  011E                     	;# 
   355  018C                     	;# 
   356  018E                     	;# 
   357  0191                     	;# 
   358  0191                     	;# 
   359  0192                     	;# 
   360  0193                     	;# 
   361  0193                     	;# 
   362  0193                     	;# 
   363  0194                     	;# 
   364  0195                     	;# 
   365  0196                     	;# 
   366  0199                     	;# 
   367  019A                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019C                     	;# 
   371  019D                     	;# 
   372  019E                     	;# 
   373  019F                     	;# 
   374  020C                     	;# 
   375  020E                     	;# 
   376  0211                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0212                     	;# 
   380  0213                     	;# 
   381  0213                     	;# 
   382  0214                     	;# 
   383  0214                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0216                     	;# 
   388  0216                     	;# 
   389  0217                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0294                     	;# 
   396  0295                     	;# 
   397  0295                     	;# 
   398  0296                     	;# 
   399  0298                     	;# 
   400  0298                     	;# 
   401  0299                     	;# 
   402  029A                     	;# 
   403  029B                     	;# 
   404  029C                     	;# 
   405  029D                     	;# 
   406  029E                     	;# 
   407  0311                     	;# 
   408  0311                     	;# 
   409  0312                     	;# 
   410  0313                     	;# 
   411  0318                     	;# 
   412  0318                     	;# 
   413  0319                     	;# 
   414  031A                     	;# 
   415  038C                     	;# 
   416  038E                     	;# 
   417  0391                     	;# 
   418  0392                     	;# 
   419  0393                     	;# 
   420  039A                     	;# 
   421  039C                     	;# 
   422  039D                     	;# 
   423  039E                     	;# 
   424  039F                     	;# 
   425  0415                     	;# 
   426  0416                     	;# 
   427  0417                     	;# 
   428  041C                     	;# 
   429  041D                     	;# 
   430  041E                     	;# 
   431  0FE4                     	;# 
   432  0FE5                     	;# 
   433  0FE6                     	;# 
   434  0FE7                     	;# 
   435  0FE8                     	;# 
   436  0FE9                     	;# 
   437  0FEA                     	;# 
   438  0FEB                     	;# 
   439  0FED                     	;# 
   440  0FEE                     	;# 
   441  0FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000E                     	;# 
   456  0011                     	;# 
   457  0012                     	;# 
   458  0013                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0016                     	;# 
   462  0017                     	;# 
   463  0018                     	;# 
   464  0019                     	;# 
   465  001A                     	;# 
   466  001B                     	;# 
   467  001C                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  008C                     	;# 
   471  008E                     	;# 
   472  0091                     	;# 
   473  0092                     	;# 
   474  0093                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0097                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009A                     	;# 
   481  009B                     	;# 
   482  009B                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009E                     	;# 
   486  010C                     	;# 
   487  010E                     	;# 
   488  0111                     	;# 
   489  0112                     	;# 
   490  0113                     	;# 
   491  0114                     	;# 
   492  0115                     	;# 
   493  0116                     	;# 
   494  0117                     	;# 
   495  0118                     	;# 
   496  0119                     	;# 
   497  011A                     	;# 
   498  011B                     	;# 
   499  011D                     	;# 
   500  011E                     	;# 
   501  018C                     	;# 
   502  018E                     	;# 
   503  0191                     	;# 
   504  0191                     	;# 
   505  0192                     	;# 
   506  0193                     	;# 
   507  0193                     	;# 
   508  0193                     	;# 
   509  0194                     	;# 
   510  0195                     	;# 
   511  0196                     	;# 
   512  0199                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020E                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  0212                     	;# 
   525  0212                     	;# 
   526  0213                     	;# 
   527  0213                     	;# 
   528  0214                     	;# 
   529  0214                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0291                     	;# 
   538  0291                     	;# 
   539  0292                     	;# 
   540  0293                     	;# 
   541  0294                     	;# 
   542  0295                     	;# 
   543  0295                     	;# 
   544  0296                     	;# 
   545  0298                     	;# 
   546  0298                     	;# 
   547  0299                     	;# 
   548  029A                     	;# 
   549  029B                     	;# 
   550  029C                     	;# 
   551  029D                     	;# 
   552  029E                     	;# 
   553  0311                     	;# 
   554  0311                     	;# 
   555  0312                     	;# 
   556  0313                     	;# 
   557  0318                     	;# 
   558  0318                     	;# 
   559  0319                     	;# 
   560  031A                     	;# 
   561  038C                     	;# 
   562  038E                     	;# 
   563  0391                     	;# 
   564  0392                     	;# 
   565  0393                     	;# 
   566  039A                     	;# 
   567  039C                     	;# 
   568  039D                     	;# 
   569  039E                     	;# 
   570  039F                     	;# 
   571  0415                     	;# 
   572  0416                     	;# 
   573  0417                     	;# 
   574  041C                     	;# 
   575  041D                     	;# 
   576  041E                     	;# 
   577  0FE4                     	;# 
   578  0FE5                     	;# 
   579  0FE6                     	;# 
   580  0FE7                     	;# 
   581  0FE8                     	;# 
   582  0FE9                     	;# 
   583  0FEA                     	;# 
   584  0FEB                     	;# 
   585  0FED                     	;# 
   586  0FEE                     	;# 
   587  0FEF                     	;# 
   588  0000                     	;# 
   589  0001                     	;# 
   590  0002                     	;# 
   591  0003                     	;# 
   592  0004                     	;# 
   593  0005                     	;# 
   594  0006                     	;# 
   595  0007                     	;# 
   596  0008                     	;# 
   597  0009                     	;# 
   598  000A                     	;# 
   599  000B                     	;# 
   600  000C                     	;# 
   601  000E                     	;# 
   602  0011                     	;# 
   603  0012                     	;# 
   604  0013                     	;# 
   605  0015                     	;# 
   606  0016                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  0019                     	;# 
   611  001A                     	;# 
   612  001B                     	;# 
   613  001C                     	;# 
   614  001E                     	;# 
   615  001F                     	;# 
   616  008C                     	;# 
   617  008E                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0095                     	;# 
   622  0096                     	;# 
   623  0097                     	;# 
   624  0098                     	;# 
   625  0099                     	;# 
   626  009A                     	;# 
   627  009B                     	;# 
   628  009B                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009E                     	;# 
   632  010C                     	;# 
   633  010E                     	;# 
   634  0111                     	;# 
   635  0112                     	;# 
   636  0113                     	;# 
   637  0114                     	;# 
   638  0115                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0118                     	;# 
   642  0119                     	;# 
   643  011A                     	;# 
   644  011B                     	;# 
   645  011D                     	;# 
   646  011E                     	;# 
   647  018C                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019C                     	;# 
   663  019D                     	;# 
   664  019E                     	;# 
   665  019F                     	;# 
   666  020C                     	;# 
   667  020E                     	;# 
   668  0211                     	;# 
   669  0211                     	;# 
   670  0212                     	;# 
   671  0212                     	;# 
   672  0213                     	;# 
   673  0213                     	;# 
   674  0214                     	;# 
   675  0214                     	;# 
   676  0215                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0216                     	;# 
   680  0216                     	;# 
   681  0217                     	;# 
   682  0217                     	;# 
   683  0291                     	;# 
   684  0291                     	;# 
   685  0292                     	;# 
   686  0293                     	;# 
   687  0294                     	;# 
   688  0295                     	;# 
   689  0295                     	;# 
   690  0296                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  029B                     	;# 
   696  029C                     	;# 
   697  029D                     	;# 
   698  029E                     	;# 
   699  0311                     	;# 
   700  0311                     	;# 
   701  0312                     	;# 
   702  0313                     	;# 
   703  0318                     	;# 
   704  0318                     	;# 
   705  0319                     	;# 
   706  031A                     	;# 
   707  038C                     	;# 
   708  038E                     	;# 
   709  0391                     	;# 
   710  0392                     	;# 
   711  0393                     	;# 
   712  039A                     	;# 
   713  039C                     	;# 
   714  039D                     	;# 
   715  039E                     	;# 
   716  039F                     	;# 
   717  0415                     	;# 
   718  0416                     	;# 
   719  0417                     	;# 
   720  041C                     	;# 
   721  041D                     	;# 
   722  041E                     	;# 
   723  0FE4                     	;# 
   724  0FE5                     	;# 
   725  0FE6                     	;# 
   726  0FE7                     	;# 
   727  0FE8                     	;# 
   728  0FE9                     	;# 
   729  0FEA                     	;# 
   730  0FEB                     	;# 
   731  0FED                     	;# 
   732  0FEE                     	;# 
   733  0FEF                     	;# 
   734  0000                     	;# 
   735  0001                     	;# 
   736  0002                     	;# 
   737  0003                     	;# 
   738  0004                     	;# 
   739  0005                     	;# 
   740  0006                     	;# 
   741  0007                     	;# 
   742  0008                     	;# 
   743  0009                     	;# 
   744  000A                     	;# 
   745  000B                     	;# 
   746  000C                     	;# 
   747  000E                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0013                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008E                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0093                     	;# 
   767  0095                     	;# 
   768  0096                     	;# 
   769  0097                     	;# 
   770  0098                     	;# 
   771  0099                     	;# 
   772  009A                     	;# 
   773  009B                     	;# 
   774  009B                     	;# 
   775  009C                     	;# 
   776  009D                     	;# 
   777  009E                     	;# 
   778  010C                     	;# 
   779  010E                     	;# 
   780  0111                     	;# 
   781  0112                     	;# 
   782  0113                     	;# 
   783  0114                     	;# 
   784  0115                     	;# 
   785  0116                     	;# 
   786  0117                     	;# 
   787  0118                     	;# 
   788  0119                     	;# 
   789  011A                     	;# 
   790  011B                     	;# 
   791  011D                     	;# 
   792  011E                     	;# 
   793  018C                     	;# 
   794  018E                     	;# 
   795  0191                     	;# 
   796  0191                     	;# 
   797  0192                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0194                     	;# 
   802  0195                     	;# 
   803  0196                     	;# 
   804  0199                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019C                     	;# 
   809  019D                     	;# 
   810  019E                     	;# 
   811  019F                     	;# 
   812  020C                     	;# 
   813  020E                     	;# 
   814  0211                     	;# 
   815  0211                     	;# 
   816  0212                     	;# 
   817  0212                     	;# 
   818  0213                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0214                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0215                     	;# 
   825  0216                     	;# 
   826  0216                     	;# 
   827  0217                     	;# 
   828  0217                     	;# 
   829  0291                     	;# 
   830  0291                     	;# 
   831  0292                     	;# 
   832  0293                     	;# 
   833  0294                     	;# 
   834  0295                     	;# 
   835  0295                     	;# 
   836  0296                     	;# 
   837  0298                     	;# 
   838  0298                     	;# 
   839  0299                     	;# 
   840  029A                     	;# 
   841  029B                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  0311                     	;# 
   846  0311                     	;# 
   847  0312                     	;# 
   848  0313                     	;# 
   849  0318                     	;# 
   850  0318                     	;# 
   851  0319                     	;# 
   852  031A                     	;# 
   853  038C                     	;# 
   854  038E                     	;# 
   855  0391                     	;# 
   856  0392                     	;# 
   857  0393                     	;# 
   858  039A                     	;# 
   859  039C                     	;# 
   860  039D                     	;# 
   861  039E                     	;# 
   862  039F                     	;# 
   863  0415                     	;# 
   864  0416                     	;# 
   865  0417                     	;# 
   866  041C                     	;# 
   867  041D                     	;# 
   868  041E                     	;# 
   869  0FE4                     	;# 
   870  0FE5                     	;# 
   871  0FE6                     	;# 
   872  0FE7                     	;# 
   873  0FE8                     	;# 
   874  0FE9                     	;# 
   875  0FEA                     	;# 
   876  0FEB                     	;# 
   877  0FED                     	;# 
   878  0FEE                     	;# 
   879  0FEF                     	;# 
   880  0000                     	;# 
   881  0001                     	;# 
   882  0002                     	;# 
   883  0003                     	;# 
   884  0004                     	;# 
   885  0005                     	;# 
   886  0006                     	;# 
   887  0007                     	;# 
   888  0008                     	;# 
   889  0009                     	;# 
   890  000A                     	;# 
   891  000B                     	;# 
   892  000C                     	;# 
   893  000E                     	;# 
   894  0011                     	;# 
   895  0012                     	;# 
   896  0013                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0016                     	;# 
   900  0017                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  001E                     	;# 
   907  001F                     	;# 
   908  008C                     	;# 
   909  008E                     	;# 
   910  0091                     	;# 
   911  0092                     	;# 
   912  0093                     	;# 
   913  0095                     	;# 
   914  0096                     	;# 
   915  0097                     	;# 
   916  0098                     	;# 
   917  0099                     	;# 
   918  009A                     	;# 
   919  009B                     	;# 
   920  009B                     	;# 
   921  009C                     	;# 
   922  009D                     	;# 
   923  009E                     	;# 
   924  010C                     	;# 
   925  010E                     	;# 
   926  0111                     	;# 
   927  0112                     	;# 
   928  0113                     	;# 
   929  0114                     	;# 
   930  0115                     	;# 
   931  0116                     	;# 
   932  0117                     	;# 
   933  0118                     	;# 
   934  0119                     	;# 
   935  011A                     	;# 
   936  011B                     	;# 
   937  011D                     	;# 
   938  011E                     	;# 
   939  018C                     	;# 
   940  018E                     	;# 
   941  0191                     	;# 
   942  0191                     	;# 
   943  0192                     	;# 
   944  0193                     	;# 
   945  0193                     	;# 
   946  0193                     	;# 
   947  0194                     	;# 
   948  0195                     	;# 
   949  0196                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019B                     	;# 
   953  019B                     	;# 
   954  019C                     	;# 
   955  019D                     	;# 
   956  019E                     	;# 
   957  019F                     	;# 
   958  020C                     	;# 
   959  020E                     	;# 
   960  0211                     	;# 
   961  0211                     	;# 
   962  0212                     	;# 
   963  0212                     	;# 
   964  0213                     	;# 
   965  0213                     	;# 
   966  0214                     	;# 
   967  0214                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0216                     	;# 
   972  0216                     	;# 
   973  0217                     	;# 
   974  0217                     	;# 
   975  0291                     	;# 
   976  0291                     	;# 
   977  0292                     	;# 
   978  0293                     	;# 
   979  0294                     	;# 
   980  0295                     	;# 
   981  0295                     	;# 
   982  0296                     	;# 
   983  0298                     	;# 
   984  0298                     	;# 
   985  0299                     	;# 
   986  029A                     	;# 
   987  029B                     	;# 
   988  029C                     	;# 
   989  029D                     	;# 
   990  029E                     	;# 
   991  0311                     	;# 
   992  0311                     	;# 
   993  0312                     	;# 
   994  0313                     	;# 
   995  0318                     	;# 
   996  0318                     	;# 
   997  0319                     	;# 
   998  031A                     	;# 
   999  038C                     	;# 
  1000  038E                     	;# 
  1001  0391                     	;# 
  1002  0392                     	;# 
  1003  0393                     	;# 
  1004  039A                     	;# 
  1005  039C                     	;# 
  1006  039D                     	;# 
  1007  039E                     	;# 
  1008  039F                     	;# 
  1009  0415                     	;# 
  1010  0416                     	;# 
  1011  0417                     	;# 
  1012  041C                     	;# 
  1013  041D                     	;# 
  1014  041E                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000E                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0013                     	;# 
  1043  0015                     	;# 
  1044  0016                     	;# 
  1045  0016                     	;# 
  1046  0017                     	;# 
  1047  0018                     	;# 
  1048  0019                     	;# 
  1049  001A                     	;# 
  1050  001B                     	;# 
  1051  001C                     	;# 
  1052  001E                     	;# 
  1053  001F                     	;# 
  1054  008C                     	;# 
  1055  008E                     	;# 
  1056  0091                     	;# 
  1057  0092                     	;# 
  1058  0093                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0098                     	;# 
  1063  0099                     	;# 
  1064  009A                     	;# 
  1065  009B                     	;# 
  1066  009B                     	;# 
  1067  009C                     	;# 
  1068  009D                     	;# 
  1069  009E                     	;# 
  1070  010C                     	;# 
  1071  010E                     	;# 
  1072  0111                     	;# 
  1073  0112                     	;# 
  1074  0113                     	;# 
  1075  0114                     	;# 
  1076  0115                     	;# 
  1077  0116                     	;# 
  1078  0117                     	;# 
  1079  0118                     	;# 
  1080  0119                     	;# 
  1081  011A                     	;# 
  1082  011B                     	;# 
  1083  011D                     	;# 
  1084  011E                     	;# 
  1085  018C                     	;# 
  1086  018E                     	;# 
  1087  0191                     	;# 
  1088  0191                     	;# 
  1089  0192                     	;# 
  1090  0193                     	;# 
  1091  0193                     	;# 
  1092  0193                     	;# 
  1093  0194                     	;# 
  1094  0195                     	;# 
  1095  0196                     	;# 
  1096  0199                     	;# 
  1097  019A                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  020C                     	;# 
  1105  020E                     	;# 
  1106  0211                     	;# 
  1107  0211                     	;# 
  1108  0212                     	;# 
  1109  0212                     	;# 
  1110  0213                     	;# 
  1111  0213                     	;# 
  1112  0214                     	;# 
  1113  0214                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0216                     	;# 
  1118  0216                     	;# 
  1119  0217                     	;# 
  1120  0217                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0294                     	;# 
  1126  0295                     	;# 
  1127  0295                     	;# 
  1128  0296                     	;# 
  1129  0298                     	;# 
  1130  0298                     	;# 
  1131  0299                     	;# 
  1132  029A                     	;# 
  1133  029B                     	;# 
  1134  029C                     	;# 
  1135  029D                     	;# 
  1136  029E                     	;# 
  1137  0311                     	;# 
  1138  0311                     	;# 
  1139  0312                     	;# 
  1140  0313                     	;# 
  1141  0318                     	;# 
  1142  0318                     	;# 
  1143  0319                     	;# 
  1144  031A                     	;# 
  1145  038C                     	;# 
  1146  038E                     	;# 
  1147  0391                     	;# 
  1148  0392                     	;# 
  1149  0393                     	;# 
  1150  039A                     	;# 
  1151  039C                     	;# 
  1152  039D                     	;# 
  1153  039E                     	;# 
  1154  039F                     	;# 
  1155  0415                     	;# 
  1156  0416                     	;# 
  1157  0417                     	;# 
  1158  041C                     	;# 
  1159  041D                     	;# 
  1160  041E                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000E                     	;# 
  1186  0011                     	;# 
  1187  0012                     	;# 
  1188  0013                     	;# 
  1189  0015                     	;# 
  1190  0016                     	;# 
  1191  0016                     	;# 
  1192  0017                     	;# 
  1193  0018                     	;# 
  1194  0019                     	;# 
  1195  001A                     	;# 
  1196  001B                     	;# 
  1197  001C                     	;# 
  1198  001E                     	;# 
  1199  001F                     	;# 
  1200  008C                     	;# 
  1201  008E                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0098                     	;# 
  1209  0099                     	;# 
  1210  009A                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  010C                     	;# 
  1217  010E                     	;# 
  1218  0111                     	;# 
  1219  0112                     	;# 
  1220  0113                     	;# 
  1221  0114                     	;# 
  1222  0115                     	;# 
  1223  0116                     	;# 
  1224  0117                     	;# 
  1225  0118                     	;# 
  1226  0119                     	;# 
  1227  011A                     	;# 
  1228  011B                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  018C                     	;# 
  1232  018E                     	;# 
  1233  0191                     	;# 
  1234  0191                     	;# 
  1235  0192                     	;# 
  1236  0193                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0194                     	;# 
  1240  0195                     	;# 
  1241  0196                     	;# 
  1242  0199                     	;# 
  1243  019A                     	;# 
  1244  019B                     	;# 
  1245  019B                     	;# 
  1246  019C                     	;# 
  1247  019D                     	;# 
  1248  019E                     	;# 
  1249  019F                     	;# 
  1250  020C                     	;# 
  1251  020E                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0213                     	;# 
  1258  0214                     	;# 
  1259  0214                     	;# 
  1260  0215                     	;# 
  1261  0215                     	;# 
  1262  0215                     	;# 
  1263  0216                     	;# 
  1264  0216                     	;# 
  1265  0217                     	;# 
  1266  0217                     	;# 
  1267  0291                     	;# 
  1268  0291                     	;# 
  1269  0292                     	;# 
  1270  0293                     	;# 
  1271  0294                     	;# 
  1272  0295                     	;# 
  1273  0295                     	;# 
  1274  0296                     	;# 
  1275  0298                     	;# 
  1276  0298                     	;# 
  1277  0299                     	;# 
  1278  029A                     	;# 
  1279  029B                     	;# 
  1280  029C                     	;# 
  1281  029D                     	;# 
  1282  029E                     	;# 
  1283  0311                     	;# 
  1284  0311                     	;# 
  1285  0312                     	;# 
  1286  0313                     	;# 
  1287  0318                     	;# 
  1288  0318                     	;# 
  1289  0319                     	;# 
  1290  031A                     	;# 
  1291  038C                     	;# 
  1292  038E                     	;# 
  1293  0391                     	;# 
  1294  0392                     	;# 
  1295  0393                     	;# 
  1296  039A                     	;# 
  1297  039C                     	;# 
  1298  039D                     	;# 
  1299  039E                     	;# 
  1300  039F                     	;# 
  1301  0415                     	;# 
  1302  0416                     	;# 
  1303  0417                     	;# 
  1304  041C                     	;# 
  1305  041D                     	;# 
  1306  041E                     	;# 
  1307  0FE4                     	;# 
  1308  0FE5                     	;# 
  1309  0FE6                     	;# 
  1310  0FE7                     	;# 
  1311  0FE8                     	;# 
  1312  0FE9                     	;# 
  1313  0FEA                     	;# 
  1314  0FEB                     	;# 
  1315  0FED                     	;# 
  1316  0FEE                     	;# 
  1317  0FEF                     	;# 
  1318                           
  1319                           	psect	stringtext1
  1320  149F                     __pstringtext1:	
  1321  149F                     _dpowers:	
  1322  149F  3401               	retlw	1
  1323  14A0  3400               	retlw	0
  1324  14A1  340A               	retlw	10
  1325  14A2  3400               	retlw	0
  1326  14A3  3464               	retlw	100
  1327  14A4  3400               	retlw	0
  1328  14A5  34E8               	retlw	232
  1329  14A6  3403               	retlw	3
  1330  14A7  3410               	retlw	16
  1331  14A8  3427               	retlw	39
  1332  14A9                     __end_of_dpowers:	
  1333                           
  1334                           	psect	stringtext2
  1335  14A9                     __pstringtext2:	
  1336  14A9                     _hexpowers:	
  1337  14A9  3401               	retlw	1
  1338  14AA  3400               	retlw	0
  1339  14AB  3410               	retlw	16
  1340  14AC  3400               	retlw	0
  1341  14AD  3400               	retlw	0
  1342  14AE  3401               	retlw	1
  1343  14AF  3400               	retlw	0
  1344  14B0  3410               	retlw	16
  1345  14B1                     __end_of_hexpowers:	
  1346                           
  1347                           	psect	stringtext3
  1348  14C7                     __pstringtext3:	
  1349  14C7                     _rxfnsidh:	
  1350  14C7  3400               	retlw	0
  1351  14C8  3404               	retlw	4
  1352  14C9  3408               	retlw	8
  1353  14CA  3410               	retlw	16
  1354  14CB  3414               	retlw	20
  1355  14CC  3418               	retlw	24
  1356  14CD                     __end_of_rxfnsidh:	
  1357                           
  1358                           	psect	stringtext4
  1359  14E3                     __pstringtext4:	
  1360  14E3                     _txbnsidh:	
  1361  14E3  3431               	retlw	49
  1362  14E4  3441               	retlw	65
  1363  14E5  3451               	retlw	81
  1364  14E6                     __end_of_txbnsidh:	
  1365                           
  1366                           	psect	stringtext5
  1367  14E6                     __pstringtext5:	
  1368  14E6                     _abc:	
  1369  14E6  3400               	retlw	0
  1370  14E7  3402               	retlw	2
  1371  14E8  3404               	retlw	4
  1372  14E9                     __end_of_abc:	
  1373                           
  1374                           	psect	stringtext6
  1375  14EC                     __pstringtext6:	
  1376  14EC                     _nm:	
  1377  14EC  3400               	retlw	0
  1378  14ED  3402               	retlw	2
  1379  14EE                     __end_of_nm:	
  1380                           
  1381                           	psect	stringtext7
  1382  14EE                     __pstringtext7:	
  1383  14EE                     _rxmnsidh:	
  1384  14EE  3420               	retlw	32
  1385  14EF  3424               	retlw	36
  1386  14F0                     __end_of_rxmnsidh:	
  1387                           
  1388                           	psect	nvBANK1
  1389  00E4                     __pnvBANK1:	
  1390  00E4                     _run_mode:	
  1391  00E4                     	ds	1
  1392  000B                     _INTCONbits	set	11
  1393  0011                     _PIR1bits	set	17
  1394  0095                     _OPTION_REGbits	set	149
  1395  008E                     _TRISC	set	142
  1396  008C                     _TRISA	set	140
  1397  0097                     _WDTCON	set	151
  1398  0098                     _OSCTUNE	set	152
  1399  0099                     _OSCCON	set	153
  1400  010C                     _LATAbits	set	268
  1401  010E                     _LATCbits	set	270
  1402  011D                     _APFCON0	set	285
  1403  011E                     _APFCON1	set	286
  1404  010E                     _LATC	set	270
  1405  010C                     _LATA	set	268
  1406  0116                     _BORCON	set	278
  1407  0196                     _EECON2	set	406
  1408  0193                     _EEDATL	set	403
  1409  0194                     _EEDATH	set	404
  1410  0195                     _EECON1bits	set	405
  1411  0192                     _EEADRH	set	402
  1412  0191                     _EEADRL	set	401
  1413  018C                     _ANSELA	set	396
  1414  018E                     _ANSELC	set	398
  1415  019A                     _TXREG	set	410
  1416  0199                     _RCREG	set	409
  1417  019D                     _RCSTAbits	set	413
  1418  019C                     _SPBRGH	set	412
  1419  019B                     _SPBRGL	set	411
  1420  019E                     _TXSTA	set	414
  1421  019D                     _RCSTA	set	413
  1422  019F                     _BAUDCON	set	415
  1423  0214                     _SSP1STATbits	set	532
  1424  0211                     _SSP1BUF	set	529
  1425  0215                     _SSP1CON1bits	set	533
  1426  0212                     _SSP1ADD	set	530
  1427  0215                     _SSP1CON1	set	533
  1428  0214                     _SSP1STAT	set	532
  1429  020E                     _WPUC	set	526
  1430  020C                     _WPUA	set	524
  1431                           
  1432                           	psect	stringtext8
  1433  1000                     __pstringtext8:	
  1434  1000                     STR_14:	
  1435  1000  345B               	retlw	91	;'['
  1436  1001  3453               	retlw	83	;'S'
  1437  1002  3465               	retlw	101	;'e'
  1438  1003  3474               	retlw	116	;'t'
  1439  1004  3420               	retlw	32	;' '
  1440  1005  346F               	retlw	111	;'o'
  1441  1006  3475               	retlw	117	;'u'
  1442  1007  3474               	retlw	116	;'t'
  1443  1008  3470               	retlw	112	;'p'
  1444  1009  3475               	retlw	117	;'u'
  1445  100A  3474               	retlw	116	;'t'
  1446  100B  3420               	retlw	32	;' '
  1447  100C  346D               	retlw	109	;'m'
  1448  100D  346F               	retlw	111	;'o'
  1449  100E  3464               	retlw	100	;'d'
  1450  100F  3465               	retlw	101	;'e'
  1451  1010  345D               	retlw	93	;']'
  1452  1011  3420               	retlw	32	;' '
  1453  1012  347B               	retlw	123	;'{'
  1454  1013  3464               	retlw	100	;'d'
  1455  1014  3465               	retlw	101	;'e'
  1456  1015  3462               	retlw	98	;'b'
  1457  1016  3475               	retlw	117	;'u'
  1458  1017  3467               	retlw	103	;'g'
  1459  1018  343A               	retlw	58	;':'
  1460  1019  3420               	retlw	32	;' '
  1461  101A  3440               	retlw	64	;'@'
  1462  101B  3476               	retlw	118	;'v'
  1463  101C  3464               	retlw	100	;'d'
  1464  101D  342C               	retlw	44	;','
  1465  101E  3420               	retlw	32	;' '
  1466  101F  3476               	retlw	118	;'v'
  1467  1020  3465               	retlw	101	;'e'
  1468  1021  3472               	retlw	114	;'r'
  1469  1022  3462               	retlw	98	;'b'
  1470  1023  346F               	retlw	111	;'o'
  1471  1024  3473               	retlw	115	;'s'
  1472  1025  3465               	retlw	101	;'e'
  1473  1026  343A               	retlw	58	;':'
  1474  1027  3420               	retlw	32	;' '
  1475  1028  3440               	retlw	64	;'@'
  1476  1029  3476               	retlw	118	;'v'
  1477  102A  3476               	retlw	118	;'v'
  1478  102B  342C               	retlw	44	;','
  1479  102C  3420               	retlw	32	;' '
  1480  102D  346E               	retlw	110	;'n'
  1481  102E  346F               	retlw	111	;'o'
  1482  102F  3472               	retlw	114	;'r'
  1483  1030  346D               	retlw	109	;'m'
  1484  1031  3461               	retlw	97	;'a'
  1485  1032  346C               	retlw	108	;'l'
  1486  1033  343A               	retlw	58	;':'
  1487  1034  3420               	retlw	32	;' '
  1488  1035  3440               	retlw	64	;'@'
  1489  1036  3476               	retlw	118	;'v'
  1490  1037  346E               	retlw	110	;'n'
  1491  1038  347D               	retlw	125	;'}'
  1492  1039  340A               	retlw	10
  1493  103A  3400               	retlw	0
  1494                           
  1495                           	psect	stringtext9
  1496  103B                     __pstringtext9:	
  1497  103B                     STR_16:	
  1498  103B  3420               	retlw	32	;' '
  1499  103C  3420               	retlw	32	;' '
  1500  103D  3420               	retlw	32	;' '
  1501  103E  3420               	retlw	32	;' '
  1502  103F  3420               	retlw	32	;' '
  1503  1040  3477               	retlw	119	;'w'
  1504  1041  3469               	retlw	105	;'i'
  1505  1042  3474               	retlw	116	;'t'
  1506  1043  3468               	retlw	104	;'h'
  1507  1044  3420               	retlw	32	;' '
  1508  1045  3453               	retlw	83	;'S'
  1509  1046  3449               	retlw	73	;'I'
  1510  1047  3444               	retlw	68	;'D'
  1511  1048  343A               	retlw	58	;':'
  1512  1049  3420               	retlw	32	;' '
  1513  104A  3440               	retlw	64	;'@'
  1514  104B  346F               	retlw	111	;'o'
  1515  104C  346C               	retlw	108	;'l'
  1516  104D  3473               	retlw	115	;'s'
  1517  104E  3420               	retlw	32	;' '
  1518  104F  346F               	retlw	111	;'o'
  1519  1050  3472               	retlw	114	;'r'
  1520  1051  3420               	retlw	32	;' '
  1521  1052  3440               	retlw	64	;'@'
  1522  1053  346F               	retlw	111	;'o'
  1523  1054  346E               	retlw	110	;'n'
  1524  1055  3473               	retlw	115	;'s'
  1525  1056  342C               	retlw	44	;','
  1526  1057  3420               	retlw	32	;' '
  1527  1058  3469               	retlw	105	;'i'
  1528  1059  346E               	retlw	110	;'n'
  1529  105A  3420               	retlw	32	;' '
  1530  105B  3468               	retlw	104	;'h'
  1531  105C  3465               	retlw	101	;'e'
  1532  105D  3478               	retlw	120	;'x'
  1533  105E  3420               	retlw	32	;' '
  1534  105F  3466               	retlw	102	;'f'
  1535  1060  346F               	retlw	111	;'o'
  1536  1061  3472               	retlw	114	;'r'
  1537  1062  346D               	retlw	109	;'m'
  1538  1063  3461               	retlw	97	;'a'
  1539  1064  3474               	retlw	116	;'t'
  1540  1065  343A               	retlw	58	;':'
  1541  1066  3420               	retlw	32	;' '
  1542  1067  3440               	retlw	64	;'@'
  1543  1068  346F               	retlw	111	;'o'
  1544  1069  346C               	retlw	108	;'l'
  1545  106A  3468               	retlw	104	;'h'
  1546  106B  3420               	retlw	32	;' '
  1547  106C  346F               	retlw	111	;'o'
  1548  106D  3472               	retlw	114	;'r'
  1549  106E  3420               	retlw	32	;' '
  1550  106F  3440               	retlw	64	;'@'
  1551  1070  346F               	retlw	111	;'o'
  1552  1071  346E               	retlw	110	;'n'
  1553  1072  3468               	retlw	104	;'h'
  1554  1073  340A               	retlw	10
  1555  1074  3400               	retlw	0
  1556                           
  1557                           	psect	stringtext10
  1558  1075                     __pstringtext10:	
  1559  1075                     STR_24:	
  1560  1075  345B               	retlw	91	;'['
  1561  1076  3453               	retlw	83	;'S'
  1562  1077  3465               	retlw	101	;'e'
  1563  1078  346E               	retlw	110	;'n'
  1564  1079  3464               	retlw	100	;'d'
  1565  107A  3420               	retlw	32	;' '
  1566  107B  346D               	retlw	109	;'m'
  1567  107C  3465               	retlw	101	;'e'
  1568  107D  3473               	retlw	115	;'s'
  1569  107E  3473               	retlw	115	;'s'
  1570  107F  3461               	retlw	97	;'a'
  1571  1080  3467               	retlw	103	;'g'
  1572  1081  3465               	retlw	101	;'e'
  1573  1082  3420               	retlw	32	;' '
  1574  1083  3462               	retlw	98	;'b'
  1575  1084  3465               	retlw	101	;'e'
  1576  1085  3467               	retlw	103	;'g'
  1577  1086  3469               	retlw	105	;'i'
  1578  1087  346E               	retlw	110	;'n'
  1579  1088  346E               	retlw	110	;'n'
  1580  1089  3469               	retlw	105	;'i'
  1581  108A  346E               	retlw	110	;'n'
  1582  108B  3467               	retlw	103	;'g'
  1583  108C  3420               	retlw	32	;' '
  1584  108D  3477               	retlw	119	;'w'
  1585  108E  3469               	retlw	105	;'i'
  1586  108F  3474               	retlw	116	;'t'
  1587  1090  3468               	retlw	104	;'h'
  1588  1091  3420               	retlw	32	;' '
  1589  1092  3427               	retlw	39	;'''
  1590  1093  3440               	retlw	64	;'@'
  1591  1094  3427               	retlw	39	;'''
  1592  1095  3420               	retlw	32	;' '
  1593  1096  3463               	retlw	99	;'c'
  1594  1097  3468               	retlw	104	;'h'
  1595  1098  3461               	retlw	97	;'a'
  1596  1099  3472               	retlw	114	;'r'
  1597  109A  3461               	retlw	97	;'a'
  1598  109B  3463               	retlw	99	;'c'
  1599  109C  3474               	retlw	116	;'t'
  1600  109D  3465               	retlw	101	;'e'
  1601  109E  3472               	retlw	114	;'r'
  1602  109F  345D               	retlw	93	;']'
  1603  10A0  3420               	retlw	32	;' '
  1604  10A1  3440               	retlw	64	;'@'
  1605  10A2  343C               	retlw	60	;'<'
  1606  10A3  3440               	retlw	64	;'@'
  1607  10A4  346D               	retlw	109	;'m'
  1608  10A5  3465               	retlw	101	;'e'
  1609  10A6  3473               	retlw	115	;'s'
  1610  10A7  3473               	retlw	115	;'s'
  1611  10A8  3461               	retlw	97	;'a'
  1612  10A9  3467               	retlw	103	;'g'
  1613  10AA  3465               	retlw	101	;'e'
  1614  10AB  343E               	retlw	62	;'>'
  1615  10AC  340A               	retlw	10
  1616  10AD  3400               	retlw	0
  1617                           
  1618                           	psect	stringtext11
  1619  10AE                     __pstringtext11:	
  1620  10AE                     STR_15:	
  1621  10AE  345B               	retlw	91	;'['
  1622  10AF  3445               	retlw	69	;'E'
  1623  10B0  346E               	retlw	110	;'n'
  1624  10B1  3461               	retlw	97	;'a'
  1625  10B2  3462               	retlw	98	;'b'
  1626  10B3  346C               	retlw	108	;'l'
  1627  10B4  3465               	retlw	101	;'e'
  1628  10B5  3420               	retlw	32	;' '
  1629  10B6  346F               	retlw	111	;'o'
  1630  10B7  3470               	retlw	112	;'p'
  1631  10B8  3465               	retlw	101	;'e'
  1632  10B9  3472               	retlw	114	;'r'
  1633  10BA  3461               	retlw	97	;'a'
  1634  10BB  3474               	retlw	116	;'t'
  1635  10BC  3469               	retlw	105	;'i'
  1636  10BD  346F               	retlw	111	;'o'
  1637  10BE  346E               	retlw	110	;'n'
  1638  10BF  3420               	retlw	32	;' '
  1639  10C0  346D               	retlw	109	;'m'
  1640  10C1  346F               	retlw	111	;'o'
  1641  10C2  3464               	retlw	100	;'d'
  1642  10C3  3465               	retlw	101	;'e'
  1643  10C4  345D               	retlw	93	;']'
  1644  10C5  3420               	retlw	32	;' '
  1645  10C6  347B               	retlw	123	;'{'
  1646  10C7  346C               	retlw	108	;'l'
  1647  10C8  346F               	retlw	111	;'o'
  1648  10C9  346F               	retlw	111	;'o'
  1649  10CA  3470               	retlw	112	;'p'
  1650  10CB  3462               	retlw	98	;'b'
  1651  10CC  3461               	retlw	97	;'a'
  1652  10CD  3463               	retlw	99	;'c'
  1653  10CE  346B               	retlw	107	;'k'
  1654  10CF  343A               	retlw	58	;':'
  1655  10D0  3420               	retlw	32	;' '
  1656  10D1  3440               	retlw	64	;'@'
  1657  10D2  346F               	retlw	111	;'o'
  1658  10D3  346C               	retlw	108	;'l'
  1659  10D4  342C               	retlw	44	;','
  1660  10D5  3420               	retlw	32	;' '
  1661  10D6  346E               	retlw	110	;'n'
  1662  10D7  346F               	retlw	111	;'o'
  1663  10D8  3472               	retlw	114	;'r'
  1664  10D9  346D               	retlw	109	;'m'
  1665  10DA  3461               	retlw	97	;'a'
  1666  10DB  346C               	retlw	108	;'l'
  1667  10DC  343A               	retlw	58	;':'
  1668  10DD  3420               	retlw	32	;' '
  1669  10DE  3440               	retlw	64	;'@'
  1670  10DF  346F               	retlw	111	;'o'
  1671  10E0  346E               	retlw	110	;'n'
  1672  10E1  347D               	retlw	125	;'}'
  1673  10E2  340A               	retlw	10
  1674  10E3  3400               	retlw	0
  1675                           
  1676                           	psect	stringtext12
  1677  10E4                     __pstringtext12:	
  1678  10E4                     STR_13:	
  1679  10E4  345B               	retlw	91	;'['
  1680  10E5  3453               	retlw	83	;'S'
  1681  10E6  3465               	retlw	101	;'e'
  1682  10E7  3474               	retlw	116	;'t'
  1683  10E8  3420               	retlw	32	;' '
  1684  10E9  3473               	retlw	115	;'s'
  1685  10EA  3474               	retlw	116	;'t'
  1686  10EB  3461               	retlw	97	;'a'
  1687  10EC  346E               	retlw	110	;'n'
  1688  10ED  3464               	retlw	100	;'d'
  1689  10EE  3461               	retlw	97	;'a'
  1690  10EF  3472               	retlw	114	;'r'
  1691  10F0  3464               	retlw	100	;'d'
  1692  10F1  3420               	retlw	32	;' '
  1693  10F2  3469               	retlw	105	;'i'
  1694  10F3  3464               	retlw	100	;'d'
  1695  10F4  3465               	retlw	101	;'e'
  1696  10F5  346E               	retlw	110	;'n'
  1697  10F6  3474               	retlw	116	;'t'
  1698  10F7  3469               	retlw	105	;'i'
  1699  10F8  3466               	retlw	102	;'f'
  1700  10F9  3469               	retlw	105	;'i'
  1701  10FA  3465               	retlw	101	;'e'
  1702  10FB  3472               	retlw	114	;'r'
  1703  10FC  345D               	retlw	93	;']'
  1704  10FD  3420               	retlw	32	;' '
  1705  10FE  3440               	retlw	64	;'@'
  1706  10FF  3469               	retlw	105	;'i'
  1707  1100  343C               	retlw	60	;'<'
  1708  1101  3473               	retlw	115	;'s'
  1709  1102  3474               	retlw	116	;'t'
  1710  1103  3461               	retlw	97	;'a'
  1711  1104  346E               	retlw	110	;'n'
  1712  1105  3464               	retlw	100	;'d'
  1713  1106  3461               	retlw	97	;'a'
  1714  1107  3472               	retlw	114	;'r'
  1715  1108  3464               	retlw	100	;'d'
  1716  1109  3420               	retlw	32	;' '
  1717  110A  3469               	retlw	105	;'i'
  1718  110B  3464               	retlw	100	;'d'
  1719  110C  3465               	retlw	101	;'e'
  1720  110D  346E               	retlw	110	;'n'
  1721  110E  3474               	retlw	116	;'t'
  1722  110F  3469               	retlw	105	;'i'
  1723  1110  3466               	retlw	102	;'f'
  1724  1111  3469               	retlw	105	;'i'
  1725  1112  3465               	retlw	101	;'e'
  1726  1113  3472               	retlw	114	;'r'
  1727  1114  343E               	retlw	62	;'>'
  1728  1115  340A               	retlw	10
  1729  1116  3400               	retlw	0
  1730                           
  1731                           	psect	stringtext13
  1732  1117                     __pstringtext13:	
  1733  1117                     STR_12:	
  1734  1117  345B               	retlw	91	;'['
  1735  1118  3453               	retlw	83	;'S'
  1736  1119  3465               	retlw	101	;'e'
  1737  111A  3474               	retlw	116	;'t'
  1738  111B  3420               	retlw	32	;' '
  1739  111C  3453               	retlw	83	;'S'
  1740  111D  344C               	retlw	76	;'L'
  1741  111E  3443               	retlw	67	;'C'
  1742  111F  3441               	retlw	65	;'A'
  1743  1120  344E               	retlw	78	;'N'
  1744  1121  342F               	retlw	47	;'/'
  1745  1122  3445               	retlw	69	;'E'
  1746  1123  3456               	retlw	86	;'V'
  1747  1124  3441               	retlw	65	;'A'
  1748  1125  344C               	retlw	76	;'L'
  1749  1126  3420               	retlw	32	;' '
  1750  1127  346D               	retlw	109	;'m'
  1751  1128  346F               	retlw	111	;'o'
  1752  1129  3464               	retlw	100	;'d'
  1753  112A  3465               	retlw	101	;'e'
  1754  112B  345D               	retlw	93	;']'
  1755  112C  3420               	retlw	32	;' '
  1756  112D  3440               	retlw	64	;'@'
  1757  112E  344D               	retlw	77	;'M'
  1758  112F  3473               	retlw	115	;'s'
  1759  1130  343A               	retlw	58	;':'
  1760  1131  3420               	retlw	32	;' '
  1761  1132  3453               	retlw	83	;'S'
  1762  1133  344C               	retlw	76	;'L'
  1763  1134  3443               	retlw	67	;'C'
  1764  1135  3441               	retlw	65	;'A'
  1765  1136  344E               	retlw	78	;'N'
  1766  1137  342C               	retlw	44	;','
  1767  1138  3420               	retlw	32	;' '
  1768  1139  3440               	retlw	64	;'@'
  1769  113A  344D               	retlw	77	;'M'
  1770  113B  3465               	retlw	101	;'e'
  1771  113C  343A               	retlw	58	;':'
  1772  113D  3420               	retlw	32	;' '
  1773  113E  3445               	retlw	69	;'E'
  1774  113F  3456               	retlw	86	;'V'
  1775  1140  3441               	retlw	65	;'A'
  1776  1141  344C               	retlw	76	;'L'
  1777  1142  340A               	retlw	10
  1778  1143  3400               	retlw	0
  1779                           
  1780                           	psect	stringtext14
  1781  1144                     __pstringtext14:	
  1782  1144                     STR_45:	
  1783  1144  3452               	retlw	82	;'R'
  1784  1145  3458               	retlw	88	;'X'
  1785  1146  3446               	retlw	70	;'F'
  1786  1147  3425               	retlw	37	;'%'
  1787  1148  3464               	retlw	100	;'d'
  1788  1149  3420               	retlw	32	;' '
  1789  114A  3452               	retlw	82	;'R'
  1790  114B  3458               	retlw	88	;'X'
  1791  114C  3446               	retlw	70	;'F'
  1792  114D  3425               	retlw	37	;'%'
  1793  114E  3464               	retlw	100	;'d'
  1794  114F  3453               	retlw	83	;'S'
  1795  1150  3449               	retlw	73	;'I'
  1796  1151  3444               	retlw	68	;'D'
  1797  1152  3448               	retlw	72	;'H'
  1798  1153  3420               	retlw	32	;' '
  1799  1154  3452               	retlw	82	;'R'
  1800  1155  3458               	retlw	88	;'X'
  1801  1156  3446               	retlw	70	;'F'
  1802  1157  3425               	retlw	37	;'%'
  1803  1158  3464               	retlw	100	;'d'
  1804  1159  3453               	retlw	83	;'S'
  1805  115A  3449               	retlw	73	;'I'
  1806  115B  3444               	retlw	68	;'D'
  1807  115C  344C               	retlw	76	;'L'
  1808  115D  343A               	retlw	58	;':'
  1809  115E  3420               	retlw	32	;' '
  1810  115F  3425               	retlw	37	;'%'
  1811  1160  3434               	retlw	52	;'4'
  1812  1161  3464               	retlw	100	;'d'
  1813  1162  3420               	retlw	32	;' '
  1814  1163  3425               	retlw	37	;'%'
  1815  1164  3430               	retlw	48	;'0'
  1816  1165  3432               	retlw	50	;'2'
  1817  1166  3458               	retlw	88	;'X'
  1818  1167  3468               	retlw	104	;'h'
  1819  1168  3420               	retlw	32	;' '
  1820  1169  3425               	retlw	37	;'%'
  1821  116A  3430               	retlw	48	;'0'
  1822  116B  3432               	retlw	50	;'2'
  1823  116C  3458               	retlw	88	;'X'
  1824  116D  3468               	retlw	104	;'h'
  1825  116E  340A               	retlw	10
  1826  116F  3400               	retlw	0
  1827                           
  1828                           	psect	stringtext15
  1829  1170                     __pstringtext15:	
  1830  1170                     STR_44:	
  1831  1170  3452               	retlw	82	;'R'
  1832  1171  3458               	retlw	88	;'X'
  1833  1172  344D               	retlw	77	;'M'
  1834  1173  3425               	retlw	37	;'%'
  1835  1174  3464               	retlw	100	;'d'
  1836  1175  3420               	retlw	32	;' '
  1837  1176  3452               	retlw	82	;'R'
  1838  1177  3458               	retlw	88	;'X'
  1839  1178  344D               	retlw	77	;'M'
  1840  1179  3425               	retlw	37	;'%'
  1841  117A  3464               	retlw	100	;'d'
  1842  117B  3453               	retlw	83	;'S'
  1843  117C  3449               	retlw	73	;'I'
  1844  117D  3444               	retlw	68	;'D'
  1845  117E  3448               	retlw	72	;'H'
  1846  117F  3420               	retlw	32	;' '
  1847  1180  3452               	retlw	82	;'R'
  1848  1181  3458               	retlw	88	;'X'
  1849  1182  344D               	retlw	77	;'M'
  1850  1183  3425               	retlw	37	;'%'
  1851  1184  3464               	retlw	100	;'d'
  1852  1185  3453               	retlw	83	;'S'
  1853  1186  3449               	retlw	73	;'I'
  1854  1187  3444               	retlw	68	;'D'
  1855  1188  344C               	retlw	76	;'L'
  1856  1189  343A               	retlw	58	;':'
  1857  118A  3420               	retlw	32	;' '
  1858  118B  3425               	retlw	37	;'%'
  1859  118C  3434               	retlw	52	;'4'
  1860  118D  3464               	retlw	100	;'d'
  1861  118E  3420               	retlw	32	;' '
  1862  118F  3425               	retlw	37	;'%'
  1863  1190  3430               	retlw	48	;'0'
  1864  1191  3432               	retlw	50	;'2'
  1865  1192  3458               	retlw	88	;'X'
  1866  1193  3468               	retlw	104	;'h'
  1867  1194  3420               	retlw	32	;' '
  1868  1195  3425               	retlw	37	;'%'
  1869  1196  3430               	retlw	48	;'0'
  1870  1197  3432               	retlw	50	;'2'
  1871  1198  3458               	retlw	88	;'X'
  1872  1199  3468               	retlw	104	;'h'
  1873  119A  340A               	retlw	10
  1874  119B  3400               	retlw	0
  1875                           
  1876                           	psect	stringtext16
  1877  119C                     __pstringtext16:	
  1878  119C                     STR_25:	
  1879  119C  345B               	retlw	91	;'['
  1880  119D  3452               	retlw	82	;'R'
  1881  119E  3465               	retlw	101	;'e'
  1882  119F  3463               	retlw	99	;'c'
  1883  11A0  3465               	retlw	101	;'e'
  1884  11A1  3469               	retlw	105	;'i'
  1885  11A2  3476               	retlw	118	;'v'
  1886  11A3  3465               	retlw	101	;'e'
  1887  11A4  3420               	retlw	32	;' '
  1888  11A5  346D               	retlw	109	;'m'
  1889  11A6  3465               	retlw	101	;'e'
  1890  11A7  3473               	retlw	115	;'s'
  1891  11A8  3473               	retlw	115	;'s'
  1892  11A9  3461               	retlw	97	;'a'
  1893  11AA  3467               	retlw	103	;'g'
  1894  11AB  3465               	retlw	101	;'e'
  1895  11AC  345D               	retlw	93	;']'
  1896  11AD  3420               	retlw	32	;' '
  1897  11AE  343C               	retlw	60	;'<'
  1898  11AF  346D               	retlw	109	;'m'
  1899  11B0  3465               	retlw	101	;'e'
  1900  11B1  3473               	retlw	115	;'s'
  1901  11B2  3473               	retlw	115	;'s'
  1902  11B3  3461               	retlw	97	;'a'
  1903  11B4  3467               	retlw	103	;'g'
  1904  11B5  3465               	retlw	101	;'e'
  1905  11B6  343E               	retlw	62	;'>'
  1906  11B7  3420               	retlw	32	;' '
  1907  11B8  3477               	retlw	119	;'w'
  1908  11B9  3469               	retlw	105	;'i'
  1909  11BA  346C               	retlw	108	;'l'
  1910  11BB  346C               	retlw	108	;'l'
  1911  11BC  3420               	retlw	32	;' '
  1912  11BD  3462               	retlw	98	;'b'
  1913  11BE  3465               	retlw	101	;'e'
  1914  11BF  3420               	retlw	32	;' '
  1915  11C0  346F               	retlw	111	;'o'
  1916  11C1  3475               	retlw	117	;'u'
  1917  11C2  3474               	retlw	116	;'t'
  1918  11C3  3470               	retlw	112	;'p'
  1919  11C4  3475               	retlw	117	;'u'
  1920  11C5  3474               	retlw	116	;'t'
  1921  11C6  340A               	retlw	10
  1922  11C7  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext17
  1925  11C8                     __pstringtext17:	
  1926  11C8                     STR_18:	
  1927  11C8  345B               	retlw	91	;'['
  1928  11C9  3453               	retlw	83	;'S'
  1929  11CA  3465               	retlw	101	;'e'
  1930  11CB  3474               	retlw	116	;'t'
  1931  11CC  3420               	retlw	32	;' '
  1932  11CD  3466               	retlw	102	;'f'
  1933  11CE  3469               	retlw	105	;'i'
  1934  11CF  346C               	retlw	108	;'l'
  1935  11D0  3474               	retlw	116	;'t'
  1936  11D1  3465               	retlw	101	;'e'
  1937  11D2  3472               	retlw	114	;'r'
  1938  11D3  345D               	retlw	93	;']'
  1939  11D4  3420               	retlw	32	;' '
  1940  11D5  3440               	retlw	64	;'@'
  1941  11D6  3466               	retlw	102	;'f'
  1942  11D7  343C               	retlw	60	;'<'
  1943  11D8  346E               	retlw	110	;'n'
  1944  11D9  343E               	retlw	62	;'>'
  1945  11DA  343C               	retlw	60	;'<'
  1946  11DB  3466               	retlw	102	;'f'
  1947  11DC  3469               	retlw	105	;'i'
  1948  11DD  346C               	retlw	108	;'l'
  1949  11DE  3474               	retlw	116	;'t'
  1950  11DF  3465               	retlw	101	;'e'
  1951  11E0  3472               	retlw	114	;'r'
  1952  11E1  3428               	retlw	40	;'('
  1953  11E2  3453               	retlw	83	;'S'
  1954  11E3  3449               	retlw	73	;'I'
  1955  11E4  3444               	retlw	68	;'D'
  1956  11E5  3431               	retlw	49	;'1'
  1957  11E6  3430               	retlw	48	;'0'
  1958  11E7  3420               	retlw	32	;' '
  1959  11E8  347E               	retlw	126	;'~'
  1960  11E9  3420               	retlw	32	;' '
  1961  11EA  3453               	retlw	83	;'S'
  1962  11EB  3449               	retlw	73	;'I'
  1963  11EC  3444               	retlw	68	;'D'
  1964  11ED  3430               	retlw	48	;'0'
  1965  11EE  3429               	retlw	41	;')'
  1966  11EF  343E               	retlw	62	;'>'
  1967  11F0  340A               	retlw	10
  1968  11F1  3400               	retlw	0
  1969                           
  1970                           	psect	stringtext18
  1971  11F2                     __pstringtext18:	
  1972  11F2                     STR_17:	
  1973  11F2  345B               	retlw	91	;'['
  1974  11F3  3453               	retlw	83	;'S'
  1975  11F4  3465               	retlw	101	;'e'
  1976  11F5  3474               	retlw	116	;'t'
  1977  11F6  3420               	retlw	32	;' '
  1978  11F7  346D               	retlw	109	;'m'
  1979  11F8  3461               	retlw	97	;'a'
  1980  11F9  3473               	retlw	115	;'s'
  1981  11FA  346B               	retlw	107	;'k'
  1982  11FB  345D               	retlw	93	;']'
  1983  11FC  3420               	retlw	32	;' '
  1984  11FD  3440               	retlw	64	;'@'
  1985  11FE  346D               	retlw	109	;'m'
  1986  11FF  343C               	retlw	60	;'<'
  1987  1200  346E               	retlw	110	;'n'
  1988  1201  343E               	retlw	62	;'>'
  1989  1202  343C               	retlw	60	;'<'
  1990  1203  346D               	retlw	109	;'m'
  1991  1204  3461               	retlw	97	;'a'
  1992  1205  3473               	retlw	115	;'s'
  1993  1206  346B               	retlw	107	;'k'
  1994  1207  3428               	retlw	40	;'('
  1995  1208  3453               	retlw	83	;'S'
  1996  1209  3449               	retlw	73	;'I'
  1997  120A  3444               	retlw	68	;'D'
  1998  120B  3431               	retlw	49	;'1'
  1999  120C  3430               	retlw	48	;'0'
  2000  120D  3420               	retlw	32	;' '
  2001  120E  347E               	retlw	126	;'~'
  2002  120F  3420               	retlw	32	;' '
  2003  1210  3453               	retlw	83	;'S'
  2004  1211  3449               	retlw	73	;'I'
  2005  1212  3444               	retlw	68	;'D'
  2006  1213  3430               	retlw	48	;'0'
  2007  1214  3429               	retlw	41	;')'
  2008  1215  343E               	retlw	62	;'>'
  2009  1216  340A               	retlw	10
  2010  1217  3400               	retlw	0
  2011                           
  2012                           	psect	stringtext19
  2013  1218                     __pstringtext19:	
  2014  1218                     STR_20:	
  2015  1218  345B               	retlw	91	;'['
  2016  1219  3441               	retlw	65	;'A'
  2017  121A  3462               	retlw	98	;'b'
  2018  121B  346F               	retlw	111	;'o'
  2019  121C  3472               	retlw	114	;'r'
  2020  121D  3474               	retlw	116	;'t'
  2021  121E  3420               	retlw	32	;' '
  2022  121F  3461               	retlw	97	;'a'
  2023  1220  346C               	retlw	108	;'l'
  2024  1221  346C               	retlw	108	;'l'
  2025  1222  3420               	retlw	32	;' '
  2026  1223  3470               	retlw	112	;'p'
  2027  1224  3465               	retlw	101	;'e'
  2028  1225  346E               	retlw	110	;'n'
  2029  1226  3464               	retlw	100	;'d'
  2030  1227  3469               	retlw	105	;'i'
  2031  1228  346E               	retlw	110	;'n'
  2032  1229  3467               	retlw	103	;'g'
  2033  122A  3420               	retlw	32	;' '
  2034  122B  3474               	retlw	116	;'t'
  2035  122C  3472               	retlw	114	;'r'
  2036  122D  3461               	retlw	97	;'a'
  2037  122E  346E               	retlw	110	;'n'
  2038  122F  3473               	retlw	115	;'s'
  2039  1230  346D               	retlw	109	;'m'
  2040  1231  3469               	retlw	105	;'i'
  2041  1232  3473               	retlw	115	;'s'
  2042  1233  3473               	retlw	115	;'s'
  2043  1234  3469               	retlw	105	;'i'
  2044  1235  346F               	retlw	111	;'o'
  2045  1236  346E               	retlw	110	;'n'
  2046  1237  3473               	retlw	115	;'s'
  2047  1238  345D               	retlw	93	;']'
  2048  1239  3420               	retlw	32	;' '
  2049  123A  3440               	retlw	64	;'@'
  2050  123B  3461               	retlw	97	;'a'
  2051  123C  340A               	retlw	10
  2052  123D  3400               	retlw	0
  2053                           
  2054                           	psect	stringtext20
  2055  123E                     __pstringtext20:	
  2056  123E                     STR_10:	
  2057  123E  342F               	retlw	47	;'/'
  2058  123F  342F               	retlw	47	;'/'
  2059  1240  342F               	retlw	47	;'/'
  2060  1241  3420               	retlw	32	;' '
  2061  1242  3455               	retlw	85	;'U'
  2062  1243  3441               	retlw	65	;'A'
  2063  1244  3452               	retlw	82	;'R'
  2064  1245  3454               	retlw	84	;'T'
  2065  1246  3432               	retlw	50	;'2'
  2066  1247  3443               	retlw	67	;'C'
  2067  1248  3441               	retlw	65	;'A'
  2068  1249  344E               	retlw	78	;'N'
  2069  124A  3420               	retlw	32	;' '
  2070  124B  3448               	retlw	72	;'H'
  2071  124C  3445               	retlw	69	;'E'
  2072  124D  344C               	retlw	76	;'L'
  2073  124E  3450               	retlw	80	;'P'
  2074  124F  3420               	retlw	32	;' '
  2075  1250  3428               	retlw	40	;'('
  2076  1251  3476               	retlw	118	;'v'
  2077  1252  3465               	retlw	101	;'e'
  2078  1253  3472               	retlw	114	;'r'
  2079  1254  3473               	retlw	115	;'s'
  2080  1255  3469               	retlw	105	;'i'
  2081  1256  346F               	retlw	111	;'o'
  2082  1257  346E               	retlw	110	;'n'
  2083  1258  3420               	retlw	32	;' '
  2084  1259  3425               	retlw	37	;'%'
  2085  125A  3473               	retlw	115	;'s'
  2086  125B  3429               	retlw	41	;')'
  2087  125C  3420               	retlw	32	;' '
  2088  125D  342F               	retlw	47	;'/'
  2089  125E  342F               	retlw	47	;'/'
  2090  125F  342F               	retlw	47	;'/'
  2091  1260  340A               	retlw	10
  2092  1261  3400               	retlw	0
  2093                           
  2094                           	psect	stringtext21
  2095  1262                     __pstringtext21:	
  2096  1262                     STR_21:	
  2097  1262  345B               	retlw	91	;'['
  2098  1263  3444               	retlw	68	;'D'
  2099  1264  3475               	retlw	117	;'u'
  2100  1265  346D               	retlw	109	;'m'
  2101  1266  3470               	retlw	112	;'p'
  2102  1267  3420               	retlw	32	;' '
  2103  1268  346D               	retlw	109	;'m'
  2104  1269  3461               	retlw	97	;'a'
  2105  126A  3473               	retlw	115	;'s'
  2106  126B  346B               	retlw	107	;'k'
  2107  126C  3473               	retlw	115	;'s'
  2108  126D  3420               	retlw	32	;' '
  2109  126E  3461               	retlw	97	;'a'
  2110  126F  346E               	retlw	110	;'n'
  2111  1270  3464               	retlw	100	;'d'
  2112  1271  3420               	retlw	32	;' '
  2113  1272  3466               	retlw	102	;'f'
  2114  1273  3469               	retlw	105	;'i'
  2115  1274  346C               	retlw	108	;'l'
  2116  1275  3474               	retlw	116	;'t'
  2117  1276  3465               	retlw	101	;'e'
  2118  1277  3472               	retlw	114	;'r'
  2119  1278  3473               	retlw	115	;'s'
  2120  1279  345D               	retlw	93	;']'
  2121  127A  3420               	retlw	32	;' '
  2122  127B  3440               	retlw	64	;'@'
  2123  127C  3446               	retlw	70	;'F'
  2124  127D  340A               	retlw	10
  2125  127E  3400               	retlw	0
  2126                           
  2127                           	psect	stringtext22
  2128  127F                     __pstringtext22:	
  2129  127F                     STR_23:	
  2130  127F  345B               	retlw	91	;'['
  2131  1280  3453               	retlw	83	;'S'
  2132  1281  3465               	retlw	101	;'e'
  2133  1282  346E               	retlw	110	;'n'
  2134  1283  3464               	retlw	100	;'d'
  2135  1284  3420               	retlw	32	;' '
  2136  1285  346D               	retlw	109	;'m'
  2137  1286  3465               	retlw	101	;'e'
  2138  1287  3473               	retlw	115	;'s'
  2139  1288  3473               	retlw	115	;'s'
  2140  1289  3461               	retlw	97	;'a'
  2141  128A  3467               	retlw	103	;'g'
  2142  128B  3465               	retlw	101	;'e'
  2143  128C  345D               	retlw	93	;']'
  2144  128D  3420               	retlw	32	;' '
  2145  128E  343C               	retlw	60	;'<'
  2146  128F  346D               	retlw	109	;'m'
  2147  1290  3465               	retlw	101	;'e'
  2148  1291  3473               	retlw	115	;'s'
  2149  1292  3473               	retlw	115	;'s'
  2150  1293  3461               	retlw	97	;'a'
  2151  1294  3467               	retlw	103	;'g'
  2152  1295  3465               	retlw	101	;'e'
  2153  1296  343E               	retlw	62	;'>'
  2154  1297  340A               	retlw	10
  2155  1298  3400               	retlw	0
  2156                           
  2157                           	psect	stringtext23
  2158  1299                     __pstringtext23:	
  2159  1299                     STR_19:	
  2160  1299  345B               	retlw	91	;'['
  2161  129A  3453               	retlw	83	;'S'
  2162  129B  3465               	retlw	101	;'e'
  2163  129C  3474               	retlw	116	;'t'
  2164  129D  3420               	retlw	32	;' '
  2165  129E  3462               	retlw	98	;'b'
  2166  129F  3461               	retlw	97	;'a'
  2167  12A0  3475               	retlw	117	;'u'
  2168  12A1  3464               	retlw	100	;'d'
  2169  12A2  3420               	retlw	32	;' '
  2170  12A3  3472               	retlw	114	;'r'
  2171  12A4  3461               	retlw	97	;'a'
  2172  12A5  3474               	retlw	116	;'t'
  2173  12A6  3465               	retlw	101	;'e'
  2174  12A7  345D               	retlw	93	;']'
  2175  12A8  3420               	retlw	32	;' '
  2176  12A9  3440               	retlw	64	;'@'
  2177  12AA  3462               	retlw	98	;'b'
  2178  12AB  343C               	retlw	60	;'<'
  2179  12AC  3462               	retlw	98	;'b'
  2180  12AD  3470               	retlw	112	;'p'
  2181  12AE  3472               	retlw	114	;'r'
  2182  12AF  343E               	retlw	62	;'>'
  2183  12B0  340A               	retlw	10
  2184  12B1  3400               	retlw	0
  2185                           
  2186                           	psect	stringtext24
  2187  12B2                     __pstringtext24:	
  2188  12B2                     STR_29:	
  2189  12B2  3466               	retlw	102	;'f'
  2190  12B3  3469               	retlw	105	;'i'
  2191  12B4  346C               	retlw	108	;'l'
  2192  12B5  3474               	retlw	116	;'t'
  2193  12B6  3465               	retlw	101	;'e'
  2194  12B7  3472               	retlw	114	;'r'
  2195  12B8  3428               	retlw	40	;'('
  2196  12B9  3425               	retlw	37	;'%'
  2197  12BA  3464               	retlw	100	;'d'
  2198  12BB  3429               	retlw	41	;')'
  2199  12BC  343A               	retlw	58	;':'
  2200  12BD  3420               	retlw	32	;' '
  2201  12BE  3425               	retlw	37	;'%'
  2202  12BF  3430               	retlw	48	;'0'
  2203  12C0  3432               	retlw	50	;'2'
  2204  12C1  3478               	retlw	120	;'x'
  2205  12C2  3420               	retlw	32	;' '
  2206  12C3  3425               	retlw	37	;'%'
  2207  12C4  3430               	retlw	48	;'0'
  2208  12C5  3432               	retlw	50	;'2'
  2209  12C6  3478               	retlw	120	;'x'
  2210  12C7  340A               	retlw	10
  2211  12C8  3400               	retlw	0
  2212                           
  2213                           	psect	stringtext25
  2214  12C9                     __pstringtext25:	
  2215  12C9                     STR_26:	
  2216  12C9  345B               	retlw	91	;'['
  2217  12CA  3453               	retlw	83	;'S'
  2218  12CB  3468               	retlw	104	;'h'
  2219  12CC  346F               	retlw	111	;'o'
  2220  12CD  3477               	retlw	119	;'w'
  2221  12CE  3420               	retlw	32	;' '
  2222  12CF  3474               	retlw	116	;'t'
  2223  12D0  3468               	retlw	104	;'h'
  2224  12D1  3469               	retlw	105	;'i'
  2225  12D2  3473               	retlw	115	;'s'
  2226  12D3  3420               	retlw	32	;' '
  2227  12D4  3468               	retlw	104	;'h'
  2228  12D5  3465               	retlw	101	;'e'
  2229  12D6  346C               	retlw	108	;'l'
  2230  12D7  3470               	retlw	112	;'p'
  2231  12D8  345D               	retlw	93	;']'
  2232  12D9  343A               	retlw	58	;':'
  2233  12DA  3420               	retlw	32	;' '
  2234  12DB  3440               	retlw	64	;'@'
  2235  12DC  3468               	retlw	104	;'h'
  2236  12DD  340A               	retlw	10
  2237  12DE  3400               	retlw	0
  2238                           
  2239                           	psect	stringtext26
  2240  12DF                     __pstringtext26:	
  2241  12DF                     STR_28:	
  2242  12DF  346D               	retlw	109	;'m'
  2243  12E0  3461               	retlw	97	;'a'
  2244  12E1  3473               	retlw	115	;'s'
  2245  12E2  346B               	retlw	107	;'k'
  2246  12E3  3428               	retlw	40	;'('
  2247  12E4  3425               	retlw	37	;'%'
  2248  12E5  3464               	retlw	100	;'d'
  2249  12E6  3429               	retlw	41	;')'
  2250  12E7  343A               	retlw	58	;':'
  2251  12E8  3420               	retlw	32	;' '
  2252  12E9  3425               	retlw	37	;'%'
  2253  12EA  3430               	retlw	48	;'0'
  2254  12EB  3432               	retlw	50	;'2'
  2255  12EC  3478               	retlw	120	;'x'
  2256  12ED  3420               	retlw	32	;' '
  2257  12EE  3425               	retlw	37	;'%'
  2258  12EF  3430               	retlw	48	;'0'
  2259  12F0  3432               	retlw	50	;'2'
  2260  12F1  3478               	retlw	120	;'x'
  2261  12F2  340A               	retlw	10
  2262  12F3  3400               	retlw	0
  2263                           
  2264                           	psect	stringtext27
  2265  12F4                     __pstringtext27:	
  2266  12F4                     STR_22:	
  2267  12F4  345B               	retlw	91	;'['
  2268  12F5  3444               	retlw	68	;'D'
  2269  12F6  3475               	retlw	117	;'u'
  2270  12F7  346D               	retlw	109	;'m'
  2271  12F8  3470               	retlw	112	;'p'
  2272  12F9  3420               	retlw	32	;' '
  2273  12FA  3472               	retlw	114	;'r'
  2274  12FB  3465               	retlw	101	;'e'
  2275  12FC  3467               	retlw	103	;'g'
  2276  12FD  3469               	retlw	105	;'i'
  2277  12FE  3473               	retlw	115	;'s'
  2278  12FF  3474               	retlw	116	;'t'
  2279  1300  3465               	retlw	101	;'e'
  2280  1301  3472               	retlw	114	;'r'
  2281  1302  3473               	retlw	115	;'s'
  2282  1303  345D               	retlw	93	;']'
  2283  1304  3420               	retlw	32	;' '
  2284  1305  3440               	retlw	64	;'@'
  2285  1306  3464               	retlw	100	;'d'
  2286  1307  340A               	retlw	10
  2287  1308  3400               	retlw	0
  2288                           
  2289                           	psect	stringtext28
  2290  1309                     __pstringtext28:	
  2291  1309                     STR_11:	
  2292  1309  3430               	retlw	48	;'0'
  2293  130A  342E               	retlw	46	;'.'
  2294  130B  3431               	retlw	49	;'1'
  2295  130C  3432               	retlw	50	;'2'
  2296  130D  3420               	retlw	32	;' '
  2297  130E  3420               	retlw	32	;' '
  2298  130F  344D               	retlw	77	;'M'
  2299  1310  3461               	retlw	97	;'a'
  2300  1311  3472               	retlw	114	;'r'
  2301  1312  3463               	retlw	99	;'c'
  2302  1313  3468               	retlw	104	;'h'
  2303  1314  3420               	retlw	32	;' '
  2304  1315  3432               	retlw	50	;'2'
  2305  1316  3432               	retlw	50	;'2'
  2306  1317  342C               	retlw	44	;','
  2307  1318  3420               	retlw	32	;' '
  2308  1319  3432               	retlw	50	;'2'
  2309  131A  3430               	retlw	48	;'0'
  2310  131B  3431               	retlw	49	;'1'
  2311  131C  3438               	retlw	56	;'8'
  2312  131D  3400               	retlw	0
  2313                           
  2314                           	psect	stringtext29
  2315  131E                     __pstringtext29:	
  2316  131E                     STR_37:	
  2317  131E  3443               	retlw	67	;'C'
  2318  131F  346F               	retlw	111	;'o'
  2319  1320  3470               	retlw	112	;'p'
  2320  1321  3479               	retlw	121	;'y'
  2321  1322  3469               	retlw	105	;'i'
  2322  1323  346E               	retlw	110	;'n'
  2323  1324  3467               	retlw	103	;'g'
  2324  1325  3420               	retlw	32	;' '
  2325  1326  3462               	retlw	98	;'b'
  2326  1327  3475               	retlw	117	;'u'
  2327  1328  3466               	retlw	102	;'f'
  2328  1329  3466               	retlw	102	;'f'
  2329  132A  3465               	retlw	101	;'e'
  2330  132B  3472               	retlw	114	;'r'
  2331  132C  343A               	retlw	58	;':'
  2332  132D  3420               	retlw	32	;' '
  2333  132E  3425               	retlw	37	;'%'
  2334  132F  3463               	retlw	99	;'c'
  2335  1330  340A               	retlw	10
  2336  1331  3400               	retlw	0
  2337                           
  2338                           	psect	stringtext30
  2339  1332                     __pstringtext30:	
  2340  1332                     STR_40:	
  2341  1332  344D               	retlw	77	;'M'
  2342  1333  3465               	retlw	101	;'e'
  2343  1334  3473               	retlw	115	;'s'
  2344  1335  3473               	retlw	115	;'s'
  2345  1336  3461               	retlw	97	;'a'
  2346  1337  3467               	retlw	103	;'g'
  2347  1338  3465               	retlw	101	;'e'
  2348  1339  3420               	retlw	32	;' '
  2349  133A  3473               	retlw	115	;'s'
  2350  133B  3465               	retlw	101	;'e'
  2351  133C  346E               	retlw	110	;'n'
  2352  133D  3474               	retlw	116	;'t'
  2353  133E  343A               	retlw	58	;':'
  2354  133F  3420               	retlw	32	;' '
  2355  1340  3425               	retlw	37	;'%'
  2356  1341  3473               	retlw	115	;'s'
  2357  1342  340A               	retlw	10
  2358  1343  3400               	retlw	0
  2359                           
  2360                           	psect	stringtext31
  2361  1344                     __pstringtext31:	
  2362  1344                     STR_66:	
  2363  1344  3430               	retlw	48	;'0'
  2364  1345  3431               	retlw	49	;'1'
  2365  1346  3432               	retlw	50	;'2'
  2366  1347  3433               	retlw	51	;'3'
  2367  1348  3434               	retlw	52	;'4'
  2368  1349  3435               	retlw	53	;'5'
  2369  134A  3436               	retlw	54	;'6'
  2370  134B  3437               	retlw	55	;'7'
  2371  134C  3438               	retlw	56	;'8'
  2372  134D  3439               	retlw	57	;'9'
  2373  134E  3441               	retlw	65	;'A'
  2374  134F  3442               	retlw	66	;'B'
  2375  1350  3443               	retlw	67	;'C'
  2376  1351  3444               	retlw	68	;'D'
  2377  1352  3445               	retlw	69	;'E'
  2378  1353  3446               	retlw	70	;'F'
  2379  1354  3400               	retlw	0
  2380                           
  2381                           	psect	stringtext32
  2382  1355                     __pstringtext32:	
  2383  1355                     STR_67:	
  2384  1355  3430               	retlw	48	;'0'
  2385  1356  3431               	retlw	49	;'1'
  2386  1357  3432               	retlw	50	;'2'
  2387  1358  3433               	retlw	51	;'3'
  2388  1359  3434               	retlw	52	;'4'
  2389  135A  3435               	retlw	53	;'5'
  2390  135B  3436               	retlw	54	;'6'
  2391  135C  3437               	retlw	55	;'7'
  2392  135D  3438               	retlw	56	;'8'
  2393  135E  3439               	retlw	57	;'9'
  2394  135F  3461               	retlw	97	;'a'
  2395  1360  3462               	retlw	98	;'b'
  2396  1361  3463               	retlw	99	;'c'
  2397  1362  3464               	retlw	100	;'d'
  2398  1363  3465               	retlw	101	;'e'
  2399  1364  3466               	retlw	102	;'f'
  2400  1365  3400               	retlw	0
  2401                           
  2402                           	psect	stringtext33
  2403  1366                     __pstringtext33:	
  2404  1366                     STR_30:	
  2405  1366  3452               	retlw	82	;'R'
  2406  1367  3458               	retlw	88	;'X'
  2407  1368  3442               	retlw	66	;'B'
  2408  1369  3425               	retlw	37	;'%'
  2409  136A  3464               	retlw	100	;'d'
  2410  136B  3453               	retlw	83	;'S'
  2411  136C  3449               	retlw	73	;'I'
  2412  136D  3444               	retlw	68	;'D'
  2413  136E  3448               	retlw	72	;'H'
  2414  136F  343A               	retlw	58	;':'
  2415  1370  3420               	retlw	32	;' '
  2416  1371  3425               	retlw	37	;'%'
  2417  1372  3430               	retlw	48	;'0'
  2418  1373  3432               	retlw	50	;'2'
  2419  1374  3478               	retlw	120	;'x'
  2420  1375  340A               	retlw	10
  2421  1376  3400               	retlw	0
  2422                           
  2423                           	psect	stringtext34
  2424  1377                     __pstringtext34:	
  2425  1377                     STR_38:	
  2426  1377  3454               	retlw	84	;'T'
  2427  1378  3458               	retlw	88	;'X'
  2428  1379  3442               	retlw	66	;'B'
  2429  137A  3425               	retlw	37	;'%'
  2430  137B  3464               	retlw	100	;'d'
  2431  137C  3453               	retlw	83	;'S'
  2432  137D  3449               	retlw	73	;'I'
  2433  137E  3444               	retlw	68	;'D'
  2434  137F  3448               	retlw	72	;'H'
  2435  1380  343A               	retlw	58	;':'
  2436  1381  3420               	retlw	32	;' '
  2437  1382  3425               	retlw	37	;'%'
  2438  1383  3430               	retlw	48	;'0'
  2439  1384  3432               	retlw	50	;'2'
  2440  1385  3478               	retlw	120	;'x'
  2441  1386  340A               	retlw	10
  2442  1387  3400               	retlw	0
  2443                           
  2444                           	psect	stringtext35
  2445  1388                     __pstringtext35:	
  2446  1388                     STR_31:	
  2447  1388  3452               	retlw	82	;'R'
  2448  1389  3458               	retlw	88	;'X'
  2449  138A  3442               	retlw	66	;'B'
  2450  138B  3425               	retlw	37	;'%'
  2451  138C  3464               	retlw	100	;'d'
  2452  138D  3453               	retlw	83	;'S'
  2453  138E  3449               	retlw	73	;'I'
  2454  138F  3444               	retlw	68	;'D'
  2455  1390  344C               	retlw	76	;'L'
  2456  1391  343A               	retlw	58	;':'
  2457  1392  3420               	retlw	32	;' '
  2458  1393  3425               	retlw	37	;'%'
  2459  1394  3430               	retlw	48	;'0'
  2460  1395  3432               	retlw	50	;'2'
  2461  1396  3478               	retlw	120	;'x'
  2462  1397  340A               	retlw	10
  2463  1398  3400               	retlw	0
  2464                           
  2465                           	psect	stringtext36
  2466  1399                     __pstringtext36:	
  2467  1399                     STR_39:	
  2468  1399  3454               	retlw	84	;'T'
  2469  139A  3458               	retlw	88	;'X'
  2470  139B  3442               	retlw	66	;'B'
  2471  139C  3425               	retlw	37	;'%'
  2472  139D  3464               	retlw	100	;'d'
  2473  139E  3453               	retlw	83	;'S'
  2474  139F  3449               	retlw	73	;'I'
  2475  13A0  3444               	retlw	68	;'D'
  2476  13A1  344C               	retlw	76	;'L'
  2477  13A2  343A               	retlw	58	;':'
  2478  13A3  3420               	retlw	32	;' '
  2479  13A4  3425               	retlw	37	;'%'
  2480  13A5  3430               	retlw	48	;'0'
  2481  13A6  3432               	retlw	50	;'2'
  2482  13A7  3478               	retlw	120	;'x'
  2483  13A8  340A               	retlw	10
  2484  13A9  3400               	retlw	0
  2485                           
  2486                           	psect	stringtext37
  2487  13AA                     __pstringtext37:	
  2488  13AA                     STR_32:	
  2489  13AA  3452               	retlw	82	;'R'
  2490  13AB  3458               	retlw	88	;'X'
  2491  13AC  3442               	retlw	66	;'B'
  2492  13AD  3425               	retlw	37	;'%'
  2493  13AE  3464               	retlw	100	;'d'
  2494  13AF  3444               	retlw	68	;'D'
  2495  13B0  344C               	retlw	76	;'L'
  2496  13B1  3443               	retlw	67	;'C'
  2497  13B2  343A               	retlw	58	;':'
  2498  13B3  3420               	retlw	32	;' '
  2499  13B4  3425               	retlw	37	;'%'
  2500  13B5  3430               	retlw	48	;'0'
  2501  13B6  3432               	retlw	50	;'2'
  2502  13B7  3478               	retlw	120	;'x'
  2503  13B8  340A               	retlw	10
  2504  13B9  3400               	retlw	0
  2505                           
  2506                           	psect	stringtext38
  2507  13BA                     __pstringtext38:	
  2508  13BA                     STR_59:	
  2509  13BA  3452               	retlw	82	;'R'
  2510  13BB  3458               	retlw	88	;'X'
  2511  13BC  3442               	retlw	66	;'B'
  2512  13BD  3430               	retlw	48	;'0'
  2513  13BE  3443               	retlw	67	;'C'
  2514  13BF  3454               	retlw	84	;'T'
  2515  13C0  3452               	retlw	82	;'R'
  2516  13C1  344C               	retlw	76	;'L'
  2517  13C2  343A               	retlw	58	;':'
  2518  13C3  3420               	retlw	32	;' '
  2519  13C4  3425               	retlw	37	;'%'
  2520  13C5  3430               	retlw	48	;'0'
  2521  13C6  3432               	retlw	50	;'2'
  2522  13C7  3478               	retlw	120	;'x'
  2523  13C8  340A               	retlw	10
  2524  13C9  3400               	retlw	0
  2525                           
  2526                           	psect	stringtext39
  2527  13CA                     __pstringtext39:	
  2528  13CA                     STR_55:	
  2529  13CA  3454               	retlw	84	;'T'
  2530  13CB  3458               	retlw	88	;'X'
  2531  13CC  3442               	retlw	66	;'B'
  2532  13CD  3430               	retlw	48	;'0'
  2533  13CE  3443               	retlw	67	;'C'
  2534  13CF  3454               	retlw	84	;'T'
  2535  13D0  3452               	retlw	82	;'R'
  2536  13D1  344C               	retlw	76	;'L'
  2537  13D2  343A               	retlw	58	;':'
  2538  13D3  3420               	retlw	32	;' '
  2539  13D4  3425               	retlw	37	;'%'
  2540  13D5  3430               	retlw	48	;'0'
  2541  13D6  3432               	retlw	50	;'2'
  2542  13D7  3478               	retlw	120	;'x'
  2543  13D8  340A               	retlw	10
  2544  13D9  3400               	retlw	0
  2545                           
  2546                           	psect	stringtext40
  2547  13DA                     __pstringtext40:	
  2548  13DA                     STR_60:	
  2549  13DA  3452               	retlw	82	;'R'
  2550  13DB  3458               	retlw	88	;'X'
  2551  13DC  3442               	retlw	66	;'B'
  2552  13DD  3431               	retlw	49	;'1'
  2553  13DE  3443               	retlw	67	;'C'
  2554  13DF  3454               	retlw	84	;'T'
  2555  13E0  3452               	retlw	82	;'R'
  2556  13E1  344C               	retlw	76	;'L'
  2557  13E2  343A               	retlw	58	;':'
  2558  13E3  3420               	retlw	32	;' '
  2559  13E4  3425               	retlw	37	;'%'
  2560  13E5  3430               	retlw	48	;'0'
  2561  13E6  3432               	retlw	50	;'2'
  2562  13E7  3478               	retlw	120	;'x'
  2563  13E8  340A               	retlw	10
  2564  13E9  3400               	retlw	0
  2565                           
  2566                           	psect	stringtext41
  2567  13EA                     __pstringtext41:	
  2568  13EA                     STR_56:	
  2569  13EA  3454               	retlw	84	;'T'
  2570  13EB  3458               	retlw	88	;'X'
  2571  13EC  3442               	retlw	66	;'B'
  2572  13ED  3431               	retlw	49	;'1'
  2573  13EE  3443               	retlw	67	;'C'
  2574  13EF  3454               	retlw	84	;'T'
  2575  13F0  3452               	retlw	82	;'R'
  2576  13F1  344C               	retlw	76	;'L'
  2577  13F2  343A               	retlw	58	;':'
  2578  13F3  3420               	retlw	32	;' '
  2579  13F4  3425               	retlw	37	;'%'
  2580  13F5  3430               	retlw	48	;'0'
  2581  13F6  3432               	retlw	50	;'2'
  2582  13F7  3478               	retlw	120	;'x'
  2583  13F8  340A               	retlw	10
  2584  13F9  3400               	retlw	0
  2585                           
  2586                           	psect	stringtext42
  2587  13FA                     __pstringtext42:	
  2588  13FA                     STR_57:	
  2589  13FA  3454               	retlw	84	;'T'
  2590  13FB  3458               	retlw	88	;'X'
  2591  13FC  3442               	retlw	66	;'B'
  2592  13FD  3432               	retlw	50	;'2'
  2593  13FE  3443               	retlw	67	;'C'
  2594  13FF  3454               	retlw	84	;'T'
  2595  1400  3452               	retlw	82	;'R'
  2596  1401  344C               	retlw	76	;'L'
  2597  1402  343A               	retlw	58	;':'
  2598  1403  3420               	retlw	32	;' '
  2599  1404  3425               	retlw	37	;'%'
  2600  1405  3430               	retlw	48	;'0'
  2601  1406  3432               	retlw	50	;'2'
  2602  1407  3478               	retlw	120	;'x'
  2603  1408  340A               	retlw	10
  2604  1409  3400               	retlw	0
  2605                           
  2606                           	psect	stringtext43
  2607  140A                     __pstringtext43:	
  2608  140A                     STR_33:	
  2609  140A  3452               	retlw	82	;'R'
  2610  140B  3458               	retlw	88	;'X'
  2611  140C  3442               	retlw	66	;'B'
  2612  140D  3425               	retlw	37	;'%'
  2613  140E  3464               	retlw	100	;'d'
  2614  140F  3444               	retlw	68	;'D'
  2615  1410  3430               	retlw	48	;'0'
  2616  1411  343A               	retlw	58	;':'
  2617  1412  3420               	retlw	32	;' '
  2618  1413  3425               	retlw	37	;'%'
  2619  1414  3430               	retlw	48	;'0'
  2620  1415  3432               	retlw	50	;'2'
  2621  1416  3478               	retlw	120	;'x'
  2622  1417  340A               	retlw	10
  2623  1418  3400               	retlw	0
  2624                           
  2625                           	psect	stringtext44
  2626  1419                     __pstringtext44:	
  2627  1419                     STR_62:	
  2628  1419  3443               	retlw	67	;'C'
  2629  141A  3441               	retlw	65	;'A'
  2630  141B  344E               	retlw	78	;'N'
  2631  141C  3443               	retlw	67	;'C'
  2632  141D  3454               	retlw	84	;'T'
  2633  141E  3452               	retlw	82	;'R'
  2634  141F  344C               	retlw	76	;'L'
  2635  1420  343A               	retlw	58	;':'
  2636  1421  3420               	retlw	32	;' '
  2637  1422  3425               	retlw	37	;'%'
  2638  1423  3430               	retlw	48	;'0'
  2639  1424  3432               	retlw	50	;'2'
  2640  1425  3478               	retlw	120	;'x'
  2641  1426  340A               	retlw	10
  2642  1427  3400               	retlw	0
  2643                           
  2644                           	psect	stringtext45
  2645  1428                     __pstringtext45:	
  2646  1428                     STR_27:	
  2647  1428  3443               	retlw	67	;'C'
  2648  1429  3441               	retlw	65	;'A'
  2649  142A  344E               	retlw	78	;'N'
  2650  142B  3453               	retlw	83	;'S'
  2651  142C  3454               	retlw	84	;'T'
  2652  142D  3441               	retlw	65	;'A'
  2653  142E  3454               	retlw	84	;'T'
  2654  142F  343A               	retlw	58	;':'
  2655  1430  3420               	retlw	32	;' '
  2656  1431  3425               	retlw	37	;'%'
  2657  1432  3430               	retlw	48	;'0'
  2658  1433  3432               	retlw	50	;'2'
  2659  1434  3478               	retlw	120	;'x'
  2660  1435  340A               	retlw	10
  2661  1436  3400               	retlw	0
  2662                           
  2663                           	psect	stringtext46
  2664  1437                     __pstringtext46:	
  2665  1437                     STR_36:	
  2666  1437  3454               	retlw	84	;'T'
  2667  1438  3458               	retlw	88	;'X'
  2668  1439  3442               	retlw	66	;'B'
  2669  143A  3430               	retlw	48	;'0'
  2670  143B  3420               	retlw	32	;' '
  2671  143C  3469               	retlw	105	;'i'
  2672  143D  3473               	retlw	115	;'s'
  2673  143E  3420               	retlw	32	;' '
  2674  143F  3469               	retlw	105	;'i'
  2675  1440  3464               	retlw	100	;'d'
  2676  1441  346C               	retlw	108	;'l'
  2677  1442  3465               	retlw	101	;'e'
  2678  1443  340A               	retlw	10
  2679  1444  3400               	retlw	0
  2680                           
  2681                           	psect	stringtext47
  2682  1445                     __pstringtext47:	
  2683  1445                     STR_35:	
  2684  1445  3454               	retlw	84	;'T'
  2685  1446  3458               	retlw	88	;'X'
  2686  1447  3442               	retlw	66	;'B'
  2687  1448  3431               	retlw	49	;'1'
  2688  1449  3420               	retlw	32	;' '
  2689  144A  3469               	retlw	105	;'i'
  2690  144B  3473               	retlw	115	;'s'
  2691  144C  3420               	retlw	32	;' '
  2692  144D  3469               	retlw	105	;'i'
  2693  144E  3464               	retlw	100	;'d'
  2694  144F  346C               	retlw	108	;'l'
  2695  1450  3465               	retlw	101	;'e'
  2696  1451  340A               	retlw	10
  2697  1452  3400               	retlw	0
  2698                           
  2699                           	psect	stringtext48
  2700  1453                     __pstringtext48:	
  2701  1453                     STR_34:	
  2702  1453  3454               	retlw	84	;'T'
  2703  1454  3458               	retlw	88	;'X'
  2704  1455  3442               	retlw	66	;'B'
  2705  1456  3432               	retlw	50	;'2'
  2706  1457  3420               	retlw	32	;' '
  2707  1458  3469               	retlw	105	;'i'
  2708  1459  3473               	retlw	115	;'s'
  2709  145A  3420               	retlw	32	;' '
  2710  145B  3469               	retlw	105	;'i'
  2711  145C  3464               	retlw	100	;'d'
  2712  145D  346C               	retlw	108	;'l'
  2713  145E  3465               	retlw	101	;'e'
  2714  145F  340A               	retlw	10
  2715  1460  3400               	retlw	0
  2716                           
  2717                           	psect	stringtext49
  2718  1461                     __pstringtext49:	
  2719  1461                     STR_42:	
  2720  1461  3452               	retlw	82	;'R'
  2721  1462  3458               	retlw	88	;'X'
  2722  1463  3430               	retlw	48	;'0'
  2723  1464  3449               	retlw	73	;'I'
  2724  1465  3446               	retlw	70	;'F'
  2725  1466  3420               	retlw	32	;' '
  2726  1467  3469               	retlw	105	;'i'
  2727  1468  3473               	retlw	115	;'s'
  2728  1469  3420               	retlw	32	;' '
  2729  146A  346F               	retlw	111	;'o'
  2730  146B  346E               	retlw	110	;'n'
  2731  146C  340A               	retlw	10
  2732  146D  3400               	retlw	0
  2733                           
  2734                           	psect	stringtext50
  2735  146E                     __pstringtext50:	
  2736  146E                     STR_41:	
  2737  146E  3452               	retlw	82	;'R'
  2738  146F  3458               	retlw	88	;'X'
  2739  1470  3431               	retlw	49	;'1'
  2740  1471  3449               	retlw	73	;'I'
  2741  1472  3446               	retlw	70	;'F'
  2742  1473  3420               	retlw	32	;' '
  2743  1474  3469               	retlw	105	;'i'
  2744  1475  3473               	retlw	115	;'s'
  2745  1476  3420               	retlw	32	;' '
  2746  1477  346F               	retlw	111	;'o'
  2747  1478  346E               	retlw	110	;'n'
  2748  1479  340A               	retlw	10
  2749  147A  3400               	retlw	0
  2750                           
  2751                           	psect	stringtext51
  2752  147B                     __pstringtext51:	
  2753  147B                     STR_51:	
  2754  147B  3443               	retlw	67	;'C'
  2755  147C  344E               	retlw	78	;'N'
  2756  147D  3446               	retlw	70	;'F'
  2757  147E  3431               	retlw	49	;'1'
  2758  147F  343A               	retlw	58	;':'
  2759  1480  3420               	retlw	32	;' '
  2760  1481  3425               	retlw	37	;'%'
  2761  1482  3430               	retlw	48	;'0'
  2762  1483  3432               	retlw	50	;'2'
  2763  1484  3478               	retlw	120	;'x'
  2764  1485  340A               	retlw	10
  2765  1486  3400               	retlw	0
  2766                           
  2767                           	psect	stringtext52
  2768  1487                     __pstringtext52:	
  2769  1487                     STR_52:	
  2770  1487  3443               	retlw	67	;'C'
  2771  1488  344E               	retlw	78	;'N'
  2772  1489  3446               	retlw	70	;'F'
  2773  148A  3432               	retlw	50	;'2'
  2774  148B  343A               	retlw	58	;':'
  2775  148C  3420               	retlw	32	;' '
  2776  148D  3425               	retlw	37	;'%'
  2777  148E  3430               	retlw	48	;'0'
  2778  148F  3432               	retlw	50	;'2'
  2779  1490  3478               	retlw	120	;'x'
  2780  1491  340A               	retlw	10
  2781  1492  3400               	retlw	0
  2782                           
  2783                           	psect	stringtext53
  2784  1493                     __pstringtext53:	
  2785  1493                     STR_53:	
  2786  1493  3443               	retlw	67	;'C'
  2787  1494  344E               	retlw	78	;'N'
  2788  1495  3446               	retlw	70	;'F'
  2789  1496  3433               	retlw	51	;'3'
  2790  1497  343A               	retlw	58	;':'
  2791  1498  3420               	retlw	32	;' '
  2792  1499  3425               	retlw	37	;'%'
  2793  149A  3430               	retlw	48	;'0'
  2794  149B  3432               	retlw	50	;'2'
  2795  149C  3478               	retlw	120	;'x'
  2796  149D  340A               	retlw	10
  2797  149E  3400               	retlw	0
  2798                           
  2799                           	psect	stringtext54
  2800  14B1                     __pstringtext54:	
  2801  14B1                     STR_1:	
  2802  14B1  3472               	retlw	114	;'r'
  2803  14B2  3425               	retlw	37	;'%'
  2804  14B3  3430               	retlw	48	;'0'
  2805  14B4  3433               	retlw	51	;'3'
  2806  14B5  3458               	retlw	88	;'X'
  2807  14B6  3425               	retlw	37	;'%'
  2808  14B7  3464               	retlw	100	;'d'
  2809  14B8  3400               	retlw	0
  2810                           
  2811                           	psect	stringtext55
  2812  14B9                     __pstringtext55:	
  2813  14B9                     STR_65:	
  2814  14B9  3428               	retlw	40	;'('
  2815  14BA  346E               	retlw	110	;'n'
  2816  14BB  3475               	retlw	117	;'u'
  2817  14BC  346C               	retlw	108	;'l'
  2818  14BD  346C               	retlw	108	;'l'
  2819  14BE  3429               	retlw	41	;')'
  2820  14BF  3400               	retlw	0
  2821                           
  2822                           	psect	stringtext56
  2823  14C0                     __pstringtext56:	
  2824  14C0                     STR_4:	
  2825  14C0  3425               	retlw	37	;'%'
  2826  14C1  3464               	retlw	100	;'d'
  2827  14C2  342C               	retlw	44	;','
  2828  14C3  3425               	retlw	37	;'%'
  2829  14C4  3473               	retlw	115	;'s'
  2830  14C5  340A               	retlw	10
  2831  14C6  3400               	retlw	0
  2832                           
  2833                           	psect	stringtext57
  2834  14CD                     __pstringtext57:	
  2835  14CD                     STR_5:	
  2836  14CD  3425               	retlw	37	;'%'
  2837  14CE  3430               	retlw	48	;'0'
  2838  14CF  3433               	retlw	51	;'3'
  2839  14D0  3478               	retlw	120	;'x'
  2840  14D1  343A               	retlw	58	;':'
  2841  14D2  3400               	retlw	0
  2842                           
  2843                           	psect	stringtext58
  2844  14D3                     __pstringtext58:	
  2845  14D3                     STR_6:	
  2846  14D3  3420               	retlw	32	;' '
  2847  14D4  3425               	retlw	37	;'%'
  2848  14D5  3430               	retlw	48	;'0'
  2849  14D6  3432               	retlw	50	;'2'
  2850  14D7  3478               	retlw	120	;'x'
  2851  14D8  3400               	retlw	0
  2852                           
  2853                           	psect	stringtext59
  2854  14D9                     __pstringtext59:	
  2855  14D9                     STR_43:	
  2856  14D9  342D               	retlw	45	;'-'
  2857  14DA  342D               	retlw	45	;'-'
  2858  14DB  342D               	retlw	45	;'-'
  2859  14DC  340A               	retlw	10
  2860  14DD  3400               	retlw	0
  2861                           
  2862                           	psect	stringtext60
  2863  14DE                     __pstringtext60:	
  2864  14DE                     STR_2:	
  2865  14DE  3425               	retlw	37	;'%'
  2866  14DF  3430               	retlw	48	;'0'
  2867  14E0  3432               	retlw	50	;'2'
  2868  14E1  3458               	retlw	88	;'X'
  2869  14E2  3400               	retlw	0
  2870                           
  2871                           	psect	stringtext61
  2872  14E9                     __pstringtext61:	
  2873  14E9                     STR_9:	
  2874  14E9  3425               	retlw	37	;'%'
  2875  14EA  3463               	retlw	99	;'c'
  2876  14EB  3400               	retlw	0
  2877                           
  2878                           	psect	stringtext62
  2879  0000                     __pstringtext62:	
  2880  14DC                     
  2881                           ; #config settings
  2882  0000                     
  2883                           	psect	cinit
  2884  07F0                     start_initialization:	
  2885  07F0                     __initialization:	
  2886                           
  2887                           ; Clear objects allocated to BANK0
  2888  07F0  0020               	movlb	0	; select bank0
  2889  07F1  01EB               	clrf	__pbssBANK0& (0+127)
  2890  07F2  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2891  07F3  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2892  07F4  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2893  07F5  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  2894                           
  2895                           ; Clear objects allocated to BANK1
  2896  07F6  30A0               	movlw	low __pbssBANK1
  2897  07F7  0084               	movwf	4
  2898  07F8  3000               	movlw	high __pbssBANK1
  2899  07F9  0085               	movwf	5
  2900  07FA  3024               	movlw	36
  2901  07FB  3189  218C         	fcall	clear_ram0
  2902  07FD                     end_of_initialization:	
  2903                           ;End of C runtime variable initialization code
  2904                           
  2905  07FD                     __end_of__initialization:	
  2906  07FD  0020               	movlb	0
  2907  07FE  3183  2B69         	ljmp	_main	;jump to C main() function
  2908                           
  2909                           	psect	bssBANK0
  2910  006B                     __pbssBANK0:	
  2911  006B                     _mode:	
  2912  006B                     	ds	2
  2913  006D                     _output_format:	
  2914  006D                     	ds	2
  2915  006F                     _operation_mode:	
  2916  006F                     	ds	1
  2917                           
  2918                           	psect	bssBANK1
  2919  00A0                     __pbssBANK1:	
  2920  00A0                     _save_rxfn:	
  2921  00A0                     	ds	12
  2922  00AC                     _save_rxmn:	
  2923  00AC                     	ds	4
  2924  00B0                     _handler:	
  2925  00B0                     	ds	2
  2926  00B2                     _sid:	
  2927  00B2                     	ds	2
  2928  00B4                     _buf:	
  2929  00B4                     	ds	16
  2930                           
  2931                           	psect	clrtext
  2932  098C                     clear_ram0:	
  2933                           ;	Called with FSR0 containing the base address, and
  2934                           ;	WREG with the size to clear
  2935                           
  2936  098C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2937  098D                     clrloop0:	
  2938  098D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2939  098E  3101               	addfsr 0,1
  2940  098F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2941  0990  298D               	goto	clrloop0	;have we reached the end yet?
  2942  0991  3400               	retlw	0	;all done for this memory range, return
  2943                           
  2944                           	psect	cstackBANK1
  2945  00C4                     __pcstackBANK1:	
  2946  00C4                     main@buf:	
  2947                           
  2948                           ; 22 bytes @ 0x0
  2949  00C4                     	ds	22
  2950  00DA                     main@sid:	
  2951                           
  2952                           ; 1 bytes @ 0x16
  2953  00DA                     	ds	1
  2954  00DB                     main@bpr:	
  2955                           
  2956                           ; 1 bytes @ 0x17
  2957  00DB                     	ds	1
  2958  00DC                     main@status:	
  2959                           
  2960                           ; 1 bytes @ 0x18
  2961  00DC                     	ds	1
  2962  00DD                     main@mask:	
  2963                           
  2964                           ; 2 bytes @ 0x19
  2965  00DD                     	ds	2
  2966  00DF                     main@echo_back:	
  2967                           
  2968                           ; 1 bytes @ 0x1B
  2969  00DF                     	ds	1
  2970  00E0                     main@n:	
  2971                           
  2972                           ; 1 bytes @ 0x1C
  2973  00E0                     	ds	1
  2974  00E1                     main@c:	
  2975                           
  2976                           ; 1 bytes @ 0x1D
  2977  00E1                     	ds	1
  2978  00E2                     main@cmd:	
  2979                           
  2980                           ; 1 bytes @ 0x1E
  2981  00E2                     	ds	1
  2982  00E3                     main@idx:	
  2983                           
  2984                           ; 1 bytes @ 0x1F
  2985  00E3                     	ds	1
  2986                           
  2987                           	psect	cstackCOMMON
  2988  0070                     __pcstackCOMMON:	
  2989  0070                     ?_isdigit:	
  2990  0070                     ?_PIN_MANAGER_Initialize:	
  2991                           ; 1 bit 
  2992                           
  2993  0070                     ??_PIN_MANAGER_Initialize:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     ?_OSCILLATOR_Initialize:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0070                     ??_OSCILLATOR_Initialize:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0070                     ?_WDT_Initialize:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0070                     ??_WDT_Initialize:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0070                     ?_SPI_Initialize:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0070                     ??_SPI_Initialize:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0070                     ?_EUSART_Initialize:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0070                     ??_EUSART_Initialize:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020  0070                     ?_can_set_sid:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0070                     ?_atoui8:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026  0070                     ??_atoui8:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029  0070                     ?_can_status_check:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0070                     ?_can_logging_mode:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035  0070                     ?_can_ope_mode:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0070                     ?_can_abort:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0070                     ?_can_baudrate:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0070                     ?_can_dump_masks_and_filters:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0070                     ?_can_dump_registers:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0070                     ??_isdigit:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0070                     ?_SYSTEM_Initialize:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0070                     ??_SYSTEM_Initialize:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0070                     ?_EUSART_Read:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0070                     ??_EUSART_Read:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0070                     ?_EUSART_Write:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068  0070                     ??_EUSART_Write:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071  0070                     ?_putch:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0070                     ?_SPI_Exchange8bit:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0070                     ??_SPI_Exchange8bit:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0070                     ?_DATAEE_WriteByte:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0070                     ?_DATAEE_ReadByte:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0070                     ??_DATAEE_ReadByte:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0070                     ?_slcan_send:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0070                     ?_main:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0070                     ?_abort_pending_transmissions:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0070                     ?_txf_clear:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0070                     ?_receive:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0070                     ?_read_register:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0070                     ?___wmul:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0070                     ?___lwdiv:	
  3111                           ; 2 bytes @ 0x0
  3112                           
  3113  0070                     EUSART_Write@txData:	
  3114                           ; 2 bytes @ 0x0
  3115                           
  3116  0070                     SPI_Exchange8bit@data:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0070                     DATAEE_WriteByte@bData:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0070                     DATAEE_ReadByte@bAdd:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0070                     can_logging_mode@verbose:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0070                     _isdigit$971:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0070                     can_set_sid@can_node:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0070                     ___wmul@multiplier:	
  3135                           ; 2 bytes @ 0x0
  3136                           
  3137  0070                     ___lwdiv@divisor:	
  3138                           ; 2 bytes @ 0x0
  3139                           
  3140                           
  3141                           ; 2 bytes @ 0x0
  3142  0070                     	ds	1
  3143  0071                     ??_can_logging_mode:	
  3144  0071                     ??_putch:	
  3145                           ; 1 bytes @ 0x1
  3146                           
  3147  0071                     ?_SPI_Exchange8bitBuffer:	
  3148                           ; 1 bytes @ 0x1
  3149                           
  3150  0071                     ??_DATAEE_WriteByte:	
  3151                           ; 1 bytes @ 0x1
  3152                           
  3153  0071                     putch@txData:	
  3154                           ; 1 bytes @ 0x1
  3155                           
  3156  0071                     SPI_Exchange8bitBuffer@bufLen:	
  3157                           ; 1 bytes @ 0x1
  3158                           
  3159  0071                     DATAEE_WriteByte@bAdd:	
  3160                           ; 1 bytes @ 0x1
  3161                           
  3162  0071                     atoui8@minus:	
  3163                           ; 1 bytes @ 0x1
  3164                           
  3165  0071                     isdigit@c:	
  3166                           ; 1 bytes @ 0x1
  3167                           
  3168                           
  3169                           ; 1 bytes @ 0x1
  3170  0071                     	ds	1
  3171  0072                     ??_can_set_sid:	
  3172  0072                     SPI_Exchange8bitBuffer@dataOut:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0072                     DATAEE_WriteByte@GIEBitValue:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0072                     can_logging_mode@debug:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0072                     atoui8@ascii:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0072                     ___wmul@multiplicand:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187  0072                     ___lwdiv@dividend:	
  3188                           ; 2 bytes @ 0x2
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x2
  3192  0072                     	ds	1
  3193  0073                     ??_SPI_Exchange8bitBuffer:	
  3194  0073                     ?_atosid:	
  3195                           ; 1 bytes @ 0x3
  3196                           
  3197                           
  3198                           ; 2 bytes @ 0x3
  3199  0073                     	ds	1
  3200  0074                     ??___wmul:	
  3201  0074                     ??___lwdiv:	
  3202                           ; 1 bytes @ 0x4
  3203                           
  3204  0074                     ___wmul@product:	
  3205                           ; 1 bytes @ 0x4
  3206                           
  3207                           
  3208                           ; 2 bytes @ 0x4
  3209  0074                     	ds	1
  3210  0075                     ??_atosid:	
  3211  0075                     can_set_sid@sidh:	
  3212                           ; 1 bytes @ 0x5
  3213                           
  3214  0075                     ___lwdiv@quotient:	
  3215                           ; 1 bytes @ 0x5
  3216                           
  3217                           
  3218                           ; 2 bytes @ 0x5
  3219  0075                     	ds	1
  3220  0076                     ?_atoi:	
  3221  0076                     SPI_Exchange8bitBuffer@dataIn:	
  3222                           ; 2 bytes @ 0x6
  3223                           
  3224  0076                     can_set_sid@sidl:	
  3225                           ; 1 bytes @ 0x6
  3226                           
  3227                           
  3228                           ; 1 bytes @ 0x6
  3229  0076                     	ds	1
  3230  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  3231  0077                     ___lwdiv@counter:	
  3232                           ; 1 bytes @ 0x7
  3233                           
  3234                           
  3235                           ; 1 bytes @ 0x7
  3236  0077                     	ds	1
  3237  0078                     ??_atoi:	
  3238  0078                     ?_SPI_exchange:	
  3239                           ; 1 bytes @ 0x8
  3240                           
  3241  0078                     ?___lwmod:	
  3242                           ; 1 bytes @ 0x8
  3243                           
  3244  0078                     SPI_exchange@len:	
  3245                           ; 2 bytes @ 0x8
  3246                           
  3247  0078                     ___lwmod@divisor:	
  3248                           ; 1 bytes @ 0x8
  3249                           
  3250                           
  3251                           ; 2 bytes @ 0x8
  3252  0078                     	ds	1
  3253  0079                     ??_SPI_exchange:	
  3254                           
  3255                           ; 1 bytes @ 0x9
  3256  0079                     	ds	1
  3257  007A                     atoi@sign:	
  3258  007A                     ___lwmod@dividend:	
  3259                           ; 1 bytes @ 0xA
  3260                           
  3261                           
  3262                           ; 2 bytes @ 0xA
  3263  007A                     	ds	1
  3264  007B                     atoi@a:	
  3265                           
  3266                           ; 2 bytes @ 0xB
  3267  007B                     	ds	1
  3268  007C                     ??___lwmod:	
  3269  007C                     SPI_exchange@bytes_written:	
  3270                           ; 1 bytes @ 0xC
  3271                           
  3272                           
  3273                           ; 1 bytes @ 0xC
  3274  007C                     	ds	1
  3275  007D                     SPI_exchange@buf:	
  3276  007D                     atoi@s:	
  3277                           ; 1 bytes @ 0xD
  3278                           
  3279  007D                     ___lwmod@counter:	
  3280                           ; 1 bytes @ 0xD
  3281                           
  3282                           
  3283                           ; 1 bytes @ 0xD
  3284  007D                     	ds	1
  3285                           
  3286                           	psect	cstackBANK0
  3287  0020                     __pcstackBANK0:	
  3288  0020                     ??_abort_pending_transmissions:	
  3289  0020                     ??_txf_clear:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0020                     ??_read_register:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295  0020                     atosid@a:	
  3296                           ; 1 bytes @ 0x0
  3297                           
  3298                           
  3299                           ; 2 bytes @ 0x0
  3300  0020                     	ds	1
  3301  0021                     read_register@addr:	
  3302                           
  3303                           ; 1 bytes @ 0x1
  3304  0021                     	ds	1
  3305  0022                     ?_printf:	
  3306  0022                     abort_pending_transmissions@bytes_written:	
  3307                           ; 2 bytes @ 0x2
  3308                           
  3309  0022                     txf_clear@mask:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0022                     atosid@b:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0022                     printf@f:	
  3316                           ; 2 bytes @ 0x2
  3317                           
  3318                           
  3319                           ; 2 bytes @ 0x2
  3320  0022                     	ds	1
  3321  0023                     txf_clear@bytes_written:	
  3322                           
  3323                           ; 1 bytes @ 0x3
  3324  0023                     	ds	1
  3325  0024                     txf_clear@n:	
  3326  0024                     atosid@c:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x4
  3331  0024                     	ds	2
  3332  0026                     atosid@id:	
  3333                           
  3334                           ; 2 bytes @ 0x6
  3335  0026                     	ds	2
  3336  0028                     atosid@ascii:	
  3337                           
  3338                           ; 1 bytes @ 0x8
  3339  0028                     	ds	8
  3340  0030                     ??_printf:	
  3341                           
  3342                           ; 1 bytes @ 0x10
  3343  0030                     	ds	4
  3344  0034                     _printf$780:	
  3345                           
  3346                           ; 2 bytes @ 0x14
  3347  0034                     	ds	2
  3348  0036                     printf@idx:	
  3349                           
  3350                           ; 1 bytes @ 0x16
  3351  0036                     	ds	1
  3352  0037                     printf@prec:	
  3353                           
  3354                           ; 1 bytes @ 0x17
  3355  0037                     	ds	1
  3356  0038                     printf@cp:	
  3357                           
  3358                           ; 2 bytes @ 0x18
  3359  0038                     	ds	2
  3360  003A                     printf@len:	
  3361                           
  3362                           ; 2 bytes @ 0x1A
  3363  003A                     	ds	2
  3364  003C                     printf@ap:	
  3365                           
  3366                           ; 1 bytes @ 0x1C
  3367  003C                     	ds	1
  3368  003D                     printf@val:	
  3369                           
  3370                           ; 2 bytes @ 0x1D
  3371  003D                     	ds	2
  3372  003F                     printf@flag:	
  3373                           
  3374                           ; 1 bytes @ 0x1F
  3375  003F                     	ds	1
  3376  0040                     printf@width:	
  3377                           
  3378                           ; 2 bytes @ 0x20
  3379  0040                     	ds	2
  3380  0042                     printf@c:	
  3381                           
  3382                           ; 1 bytes @ 0x22
  3383  0042                     	ds	1
  3384  0043                     ?_can_send:	
  3385  0043                     ??_can_ope_mode:	
  3386                           ; 1 bytes @ 0x23
  3387                           
  3388  0043                     ??_can_dump_masks_and_filters:	
  3389                           ; 1 bytes @ 0x23
  3390                           
  3391  0043                     ??_can_dump_registers:	
  3392                           ; 1 bytes @ 0x23
  3393                           
  3394  0043                     ?_receive_handler:	
  3395                           ; 1 bytes @ 0x23
  3396                           
  3397  0043                     can_send@dlc:	
  3398                           ; 1 bytes @ 0x23
  3399                           
  3400  0043                     receive_handler@sid:	
  3401                           ; 1 bytes @ 0x23
  3402                           
  3403                           
  3404                           ; 2 bytes @ 0x23
  3405  0043                     	ds	1
  3406  0044                     ??_can_send:	
  3407                           
  3408                           ; 1 bytes @ 0x24
  3409  0044                     	ds	1
  3410  0045                     receive_handler@buf:	
  3411  0045                     can_ope_mode@bytes_written:	
  3412                           ; 1 bytes @ 0x25
  3413                           
  3414                           
  3415                           ; 1 bytes @ 0x25
  3416  0045                     	ds	1
  3417  0046                     receive_handler@dlc:	
  3418  0046                     can_ope_mode@ope_mode:	
  3419                           ; 1 bytes @ 0x26
  3420                           
  3421                           
  3422                           ; 1 bytes @ 0x26
  3423  0046                     	ds	1
  3424  0047                     ?_can_init:	
  3425  0047                     ??_can_abort:	
  3426                           ; 1 bytes @ 0x27
  3427                           
  3428  0047                     ??_can_baudrate:	
  3429                           ; 1 bytes @ 0x27
  3430                           
  3431  0047                     ?_can_set_mask:	
  3432                           ; 1 bytes @ 0x27
  3433                           
  3434  0047                     ??_receive_handler:	
  3435                           ; 1 bytes @ 0x27
  3436                           
  3437  0047                     can_set_mask@n:	
  3438                           ; 1 bytes @ 0x27
  3439                           
  3440  0047                     can_init@receive_handler:	
  3441                           ; 1 bytes @ 0x27
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x27
  3445  0047                     	ds	1
  3446  0048                     can_send@len:	
  3447  0048                     can_abort@bytes_written:	
  3448                           ; 1 bytes @ 0x28
  3449                           
  3450  0048                     can_set_mask@mask:	
  3451                           ; 1 bytes @ 0x28
  3452                           
  3453                           
  3454                           ; 2 bytes @ 0x28
  3455  0048                     	ds	1
  3456  0049                     ??_can_init:	
  3457  0049                     can_send@bytes_written:	
  3458                           ; 1 bytes @ 0x29
  3459                           
  3460  0049                     can_baudrate@bpr:	
  3461                           ; 1 bytes @ 0x29
  3462                           
  3463                           
  3464                           ; 1 bytes @ 0x29
  3465  0049                     	ds	1
  3466  004A                     ??_can_set_mask:	
  3467  004A                     receive_handler@i:	
  3468                           ; 1 bytes @ 0x2A
  3469                           
  3470  004A                     can_send@status:	
  3471                           ; 1 bytes @ 0x2A
  3472                           
  3473  004A                     can_baudrate@mask:	
  3474                           ; 1 bytes @ 0x2A
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x2A
  3478  004A                     	ds	1
  3479  004B                     ??_receive:	
  3480  004B                     can_send@data_buf:	
  3481                           ; 1 bytes @ 0x2B
  3482                           
  3483  004B                     can_baudrate@bytes_written:	
  3484                           ; 1 bytes @ 0x2B
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0x2B
  3488  004B                     	ds	1
  3489  004C                     can_send@i:	
  3490                           
  3491                           ; 1 bytes @ 0x2C
  3492  004C                     	ds	1
  3493  004D                     can_send@n:	
  3494  004D                     can_dump_masks_and_filters@h:	
  3495                           ; 1 bytes @ 0x2D
  3496                           
  3497                           
  3498                           ; 1 bytes @ 0x2D
  3499  004D                     	ds	1
  3500  004E                     ??_slcan_send:	
  3501  004E                     can_dump_masks_and_filters@l:	
  3502                           ; 1 bytes @ 0x2E
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0x2E
  3506  004E                     	ds	1
  3507  004F                     can_dump_masks_and_filters@m:	
  3508                           
  3509                           ; 2 bytes @ 0x2F
  3510  004F                     	ds	1
  3511  0050                     receive@bytes_read:	
  3512  0050                     _can_set_mask$655:	
  3513                           ; 1 bytes @ 0x30
  3514                           
  3515                           
  3516                           ; 2 bytes @ 0x30
  3517  0050                     	ds	1
  3518  0051                     can_dump_masks_and_filters@i:	
  3519  0051                     receive@rx_buf:	
  3520                           ; 1 bytes @ 0x31
  3521                           
  3522                           
  3523                           ; 15 bytes @ 0x31
  3524  0051                     	ds	1
  3525  0052                     can_set_mask@cmd:	
  3526  0052                     slcan_send@data_buf:	
  3527                           ; 1 bytes @ 0x32
  3528                           
  3529                           
  3530                           ; 8 bytes @ 0x32
  3531  0052                     	ds	1
  3532  0053                     can_set_mask@mask_sidh:	
  3533                           
  3534                           ; 1 bytes @ 0x33
  3535  0053                     	ds	1
  3536  0054                     can_set_mask@mask_sidl:	
  3537                           
  3538                           ; 1 bytes @ 0x34
  3539  0054                     	ds	6
  3540  005A                     slcan_send@id:	
  3541                           
  3542                           ; 2 bytes @ 0x3A
  3543  005A                     	ds	2
  3544  005C                     slcan_send@dlc:	
  3545                           
  3546                           ; 1 bytes @ 0x3C
  3547  005C                     	ds	1
  3548  005D                     slcan_send@j:	
  3549                           
  3550                           ; 1 bytes @ 0x3D
  3551  005D                     	ds	1
  3552  005E                     slcan_send@ascii_data:	
  3553                           
  3554                           ; 1 bytes @ 0x3E
  3555  005E                     	ds	1
  3556  005F                     slcan_send@pbuf:	
  3557                           
  3558                           ; 1 bytes @ 0x3F
  3559  005F                     	ds	1
  3560  0060                     slcan_send@i:	
  3561  0060                     receive@pbuf:	
  3562                           ; 1 bytes @ 0x40
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x40
  3566  0060                     	ds	1
  3567  0061                     receive@id:	
  3568                           
  3569                           ; 2 bytes @ 0x41
  3570  0061                     	ds	2
  3571  0063                     receive@dlc:	
  3572                           
  3573                           ; 1 bytes @ 0x43
  3574  0063                     	ds	1
  3575  0064                     receive@n:	
  3576                           
  3577                           ; 1 bytes @ 0x44
  3578  0064                     	ds	1
  3579  0065                     ??_can_status_check:	
  3580                           
  3581                           ; 1 bytes @ 0x45
  3582  0065                     	ds	2
  3583  0067                     can_status_check@bytes_written:	
  3584                           
  3585                           ; 1 bytes @ 0x47
  3586  0067                     	ds	1
  3587  0068                     can_status_check@status:	
  3588                           
  3589                           ; 1 bytes @ 0x48
  3590  0068                     	ds	1
  3591  0069                     ??_main:	
  3592                           
  3593                           ; 1 bytes @ 0x49
  3594  0069                     	ds	2
  3595                           
  3596                           	psect	maintext
  3597  0369                     __pmaintext:	
  3598 ;;
  3599 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3600 ;;
  3601 ;; *************** function _main *****************
  3602 ;; Defined at:
  3603 ;;		line 77 in file "main.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  status          1   24[BANK1 ] unsigned char 
  3608 ;;  buf            22    0[BANK1 ] unsigned char [22]
  3609 ;;  mask            2   25[BANK1 ] unsigned int 
  3610 ;;  idx             1   31[BANK1 ] unsigned char 
  3611 ;;  cmd             1   30[BANK1 ] unsigned char 
  3612 ;;  c               1   29[BANK1 ] unsigned char 
  3613 ;;  n               1   28[BANK1 ] unsigned char 
  3614 ;;  echo_back       1   27[BANK1 ] unsigned char 
  3615 ;;  bpr             1   23[BANK1 ] unsigned char 
  3616 ;;  sid             1   22[BANK1 ] unsigned char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : B1F/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3627 ;;      Locals:         0       0      32       0       0       0       0       0       0       0       0       0       
      +0       0
  3628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Totals:         0       2      32       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;Total ram usage:       34 bytes
  3631 ;; Hardware stack levels required when called:    6
  3632 ;; This function calls:
  3633 ;;		_DATAEE_ReadByte
  3634 ;;		_DATAEE_WriteByte
  3635 ;;		_EUSART_Read
  3636 ;;		_SYSTEM_Initialize
  3637 ;;		_atoi
  3638 ;;		_can_abort
  3639 ;;		_can_baudrate
  3640 ;;		_can_dump_masks_and_filters
  3641 ;;		_can_dump_registers
  3642 ;;		_can_init
  3643 ;;		_can_logging_mode
  3644 ;;		_can_ope_mode
  3645 ;;		_can_send
  3646 ;;		_can_set_mask
  3647 ;;		_can_set_sid
  3648 ;;		_can_status_check
  3649 ;;		_printf
  3650 ;;		_slcan_send
  3651 ;; This function is called by:
  3652 ;;		Startup code after reset
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _main
  3658  0369                     _main:	
  3659                           
  3660                           ;main.c: 79: LATCbits.LATC3 = 1;
  3661                           
  3662                           ;incstack = 0
  3663                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3664  0369  0022               	movlb	2	; select bank2
  3665  036A  158E               	bsf	14,3	;volatile
  3666                           
  3667                           ;main.c: 81: uint8_t buf[22];
  3668                           ;main.c: 82: bool echo_back = 0;
  3669  036B  0021               	movlb	1	; select bank1
  3670  036C  01DF               	clrf	main@echo_back^(0+128)
  3671                           
  3672                           ;main.c: 83: uint8_t c, idx;
  3673                           ;main.c: 85: uint8_t cmd, sid, n, bpr;
  3674                           ;main.c: 86: uint16_t mask;
  3675                           ;main.c: 88: run_mode = DATAEE_ReadByte(0u);
  3676  036D  3000               	movlw	0
  3677  036E  3189  21C9  3183   	fcall	_DATAEE_ReadByte
  3678  0371  0020               	movlb	0	; select bank0
  3679  0372  00E9               	movwf	??_main
  3680  0373  0869               	movf	??_main,w
  3681  0374  0021               	movlb	1	; select bank1
  3682  0375  00E4               	movwf	_run_mode^(0+128)
  3683                           
  3684                           ;main.c: 90: _delay((unsigned long)((100)*(2000000/4000.0)));
  3685  0376  3041               	movlw	65
  3686  0377  0020               	movlb	0	; select bank0
  3687  0378  00E9               	movwf	??_main
  3688  0379  30EE               	movlw	238
  3689  037A                     u2947:	
  3690  037A  0B89               	decfsz	9,f
  3691  037B  2B7A               	goto	u2947
  3692  037C  0BE9               	decfsz	??_main,f
  3693  037D  2B7A               	goto	u2947
  3694  037E  0000               	nop
  3695                           
  3696                           ;main.c: 92: SYSTEM_Initialize();
  3697  037F  3189  21E3  3183   	fcall	_SYSTEM_Initialize
  3698                           
  3699                           ;main.c: 97: output_format.with_sid = 0;
  3700  0382  0020               	movlb	0	; select bank0
  3701  0383  01ED               	clrf	_output_format
  3702                           
  3703                           ;main.c: 98: output_format.hex_output = 0;
  3704  0384  01EE               	clrf	_output_format+1
  3705                           
  3706                           ;main.c: 99: can_init(receive_handler);
  3707  0385  3013               	movlw	low _receive_handler
  3708  0386  00C7               	movwf	can_init@receive_handler
  3709  0387  300E               	movlw	high _receive_handler
  3710  0388  00C8               	movwf	can_init@receive_handler+1
  3711  0389  318D  2588  3183   	fcall	_can_init
  3712  038C                     L1:	
  3713                           
  3714                           ;main.c: 101: idx = 0;
  3715  038C  0021               	movlb	1	; select bank1
  3716  038D  01E3               	clrf	main@idx^(0+128)
  3717  038E                     l3116:	
  3718                           ;main.c: 103: while (1)
  3719                           
  3720                           
  3721                           ;main.c: 104: {
  3722                           ;main.c: 105: bool status = can_status_check();
  3723  038E  318C  2416  3183   	fcall	_can_status_check
  3724  0391  0020               	movlb	0	; select bank0
  3725  0392  00E9               	movwf	??_main
  3726  0393  0869               	movf	??_main,w
  3727  0394  0021               	movlb	1	; select bank1
  3728  0395  00DC               	movwf	main@status^(0+128)
  3729                           
  3730                           ;main.c: 106: if (status) {
  3731  0396  085C               	movf	main@status^(0+128),w
  3732  0397  1903               	btfsc	3,2
  3733  0398  2B9C               	goto	l275
  3734                           
  3735                           ;main.c: 107: LATCbits.LATC3 = 0;
  3736  0399  0022               	movlb	2	; select bank2
  3737  039A  118E               	bcf	14,3	;volatile
  3738                           
  3739                           ;main.c: 108: } else {
  3740  039B  2B9E               	goto	l276
  3741  039C                     l275:	
  3742                           
  3743                           ;main.c: 109: LATCbits.LATC3 = 1;
  3744  039C  0022               	movlb	2	; select bank2
  3745  039D  158E               	bsf	14,3	;volatile
  3746  039E                     l276:	
  3747                           
  3748                           ;main.c: 110: }
  3749                           ;main.c: 111: if ((PIR1bits.RCIF)) {
  3750  039E  0020               	movlb	0	; select bank0
  3751  039F  1E91               	btfss	17,5	;volatile
  3752  03A0  2B8E               	goto	l3116
  3753                           
  3754                           ;main.c: 112: c = EUSART_Read();
  3755  03A1  3189  21A9  3183   	fcall	_EUSART_Read
  3756  03A4  0020               	movlb	0	; select bank0
  3757  03A5  00E9               	movwf	??_main
  3758  03A6  0869               	movf	??_main,w
  3759  03A7  0021               	movlb	1	; select bank1
  3760  03A8  00E1               	movwf	main@c^(0+128)
  3761                           
  3762                           ;main.c: 113: if (echo_back) printf("%c", c);
  3763  03A9  085F               	movf	main@echo_back^(0+128),w
  3764  03AA  1903               	btfsc	3,2
  3765  03AB  2BBD               	goto	l3126
  3766  03AC  30E9               	movlw	low (STR_9| (0+32768))
  3767  03AD  0020               	movlb	0	; select bank0
  3768  03AE  00A2               	movwf	printf@f
  3769  03AF  3094               	movlw	high (STR_9| (0+32768))
  3770  03B0  00A3               	movwf	printf@f+1
  3771  03B1  0021               	movlb	1	; select bank1
  3772  03B2  0861               	movf	main@c^(0+128),w
  3773  03B3  0020               	movlb	0	; select bank0
  3774  03B4  00E9               	movwf	??_main
  3775  03B5  01EA               	clrf	??_main+1
  3776  03B6  0869               	movf	??_main,w
  3777  03B7  00A4               	movwf	?_printf+2
  3778  03B8  086A               	movf	??_main+1,w
  3779  03B9  00A5               	movwf	?_printf+3
  3780  03BA  3185  25A5  3183   	fcall	_printf
  3781  03BD                     l3126:	
  3782                           
  3783                           ;main.c: 115: buf[idx] = c;
  3784  03BD  0021               	movlb	1	; select bank1
  3785  03BE  0861               	movf	main@c^(0+128),w
  3786  03BF  0020               	movlb	0	; select bank0
  3787  03C0  00E9               	movwf	??_main
  3788  03C1  0021               	movlb	1	; select bank1
  3789  03C2  0863               	movf	main@idx^(0+128),w
  3790  03C3  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3791  03C4  0086               	movwf	6
  3792  03C5  0187               	clrf	7
  3793  03C6  0020               	movlb	0	; select bank0
  3794  03C7  0869               	movf	??_main,w
  3795  03C8  0081               	movwf	1
  3796                           
  3797                           ;main.c: 116: if (c == '\n') {
  3798  03C9  300A               	movlw	10
  3799  03CA  0021               	movlb	1	; select bank1
  3800  03CB  0661               	xorwf	main@c^(0+128),w
  3801  03CC  1D03               	btfss	3,2
  3802  03CD  2D89               	goto	l3240
  3803                           
  3804                           ;main.c: 117: buf[idx] = '\0';
  3805  03CE  0863               	movf	main@idx^(0+128),w
  3806  03CF  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  3807  03D0  0086               	movwf	6
  3808  03D1  0187               	clrf	7
  3809  03D2  0181               	clrf	1
  3810                           
  3811                           ;main.c: 118: if (run_mode == 1u && buf[0] == 't') {
  3812  03D3  0364               	decf	_run_mode^(0+128),w
  3813  03D4  1D03               	btfss	3,2
  3814  03D5  2BDF               	goto	l3138
  3815  03D6  3074               	movlw	116
  3816  03D7  0644               	xorwf	main@buf^(0+128),w
  3817  03D8  1D03               	btfss	3,2
  3818  03D9  2BDF               	goto	l3138
  3819                           
  3820                           ;main.c: 119: slcan_send(&buf[1]);
  3821  03DA  30C5               	movlw	(low ((main@buf| 0+1)))& (0+255)
  3822  03DB  318C  24C3  3183   	fcall	_slcan_send
  3823                           
  3824                           ;main.c: 120: } else if (buf[0] == '@') {
  3825  03DE  2B8C               	goto	L1
  3826  03DF                     l3138:	
  3827  03DF  3040               	movlw	64
  3828  03E0  0021               	movlb	1	; select bank1
  3829  03E1  0644               	xorwf	main@buf^(0+128),w
  3830  03E2  1D03               	btfss	3,2
  3831  03E3  2D7F               	goto	l3236
  3832                           
  3833                           ;main.c: 121: cmd = buf[1];
  3834  03E4  0845               	movf	(main@buf^(0+128)+1),w
  3835  03E5  0020               	movlb	0	; select bank0
  3836  03E6  00E9               	movwf	??_main
  3837  03E7  0869               	movf	??_main,w
  3838  03E8  0021               	movlb	1	; select bank1
  3839  03E9  00E2               	movwf	main@cmd^(0+128)
  3840                           
  3841                           ;main.c: 122: switch(cmd) {
  3842  03EA  2D57               	goto	l3234
  3843  03EB                     l3142:	
  3844                           ;main.c: 123: case 'M':
  3845                           
  3846                           
  3847                           ;main.c: 124: if (buf[2] == 's') {
  3848  03EB  3073               	movlw	115
  3849  03EC  0646               	xorwf	(main@buf^(0+128)+2),w
  3850  03ED  1D03               	btfss	3,2
  3851  03EE  2BF2               	goto	l3148
  3852                           
  3853                           ;main.c: 125: run_mode = 1u;
  3854  03EF  01E4               	clrf	_run_mode^(0+128)
  3855  03F0  0AE4               	incf	_run_mode^(0+128),f
  3856  03F1  2BF8               	goto	L2
  3857  03F2                     l3148:	
  3858                           ;main.c: 127: } else if (buf[2] == 'e') {
  3859                           
  3860                           ;main.c: 126: DATAEE_WriteByte(0u, run_mode);
  3861                           
  3862  03F2  3065               	movlw	101
  3863  03F3  0021               	movlb	1	; select bank1
  3864  03F4  0646               	xorwf	(main@buf^(0+128)+2),w
  3865  03F5  1D03               	btfss	3,2
  3866  03F6  2C01               	goto	l3154
  3867                           
  3868                           ;main.c: 128: run_mode = 0u;
  3869  03F7  01E4               	clrf	_run_mode^(0+128)
  3870  03F8                     L2:	
  3871                           
  3872                           ;main.c: 129: DATAEE_WriteByte(0u, run_mode);
  3873  03F8  0864               	movf	_run_mode^(0+128),w
  3874  03F9  0020               	movlb	0	; select bank0
  3875  03FA  00E9               	movwf	??_main
  3876  03FB  0869               	movf	??_main,w
  3877  03FC  00F0               	movwf	DATAEE_WriteByte@bData
  3878  03FD  3000               	movlw	0
  3879  03FE  318A  2261  3183   	fcall	_DATAEE_WriteByte
  3880  0401                     l3154:	
  3881                           ;main.c: 130: }
  3882                           ;main.c: 131: case 'i':
  3883                           
  3884                           
  3885                           ;main.c: 132: sid = (uint8_t)atoi(&buf[2]);
  3886  0401  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  3887  0402  318D  2521  3183   	fcall	_atoi
  3888  0405  0876               	movf	?_atoi,w
  3889  0406  0020               	movlb	0	; select bank0
  3890  0407  00E9               	movwf	??_main
  3891  0408  0869               	movf	??_main,w
  3892  0409  0021               	movlb	1	; select bank1
  3893  040A  00DA               	movwf	main@sid^(0+128)
  3894                           
  3895                           ;main.c: 133: can_set_sid(sid);
  3896  040B  085A               	movf	main@sid^(0+128),w
  3897  040C  0020               	movlb	0	; select bank0
  3898  040D  00E9               	movwf	??_main
  3899  040E  01EA               	clrf	??_main+1
  3900  040F  0869               	movf	??_main,w
  3901  0410  00F0               	movwf	can_set_sid@can_node
  3902  0411  086A               	movf	??_main+1,w
  3903  0412  00F1               	movwf	can_set_sid@can_node+1
  3904  0413  318A  227E  3183   	fcall	_can_set_sid
  3905                           
  3906                           ;main.c: 134: break;
  3907  0416  2B8C               	goto	L1
  3908  0417                     l3158:	
  3909                           ;main.c: 135: case 'v':
  3910                           
  3911                           
  3912                           ;main.c: 136: if (buf[2] == 'd') {
  3913  0417  3064               	movlw	100
  3914  0418  0021               	movlb	1	; select bank1
  3915  0419  0646               	xorwf	(main@buf^(0+128)+2),w
  3916  041A  1D03               	btfss	3,2
  3917  041B  2C20               	goto	l3164
  3918                           
  3919                           ;main.c: 137: can_logging_mode(1, 1);
  3920  041C  01F0               	clrf	can_logging_mode@verbose
  3921  041D  0AF0               	incf	can_logging_mode@verbose,f
  3922  041E  3001               	movlw	1
  3923  041F  2C27               	goto	L3
  3924  0420                     l3164:	
  3925                           ;main.c: 139: } else if (buf[2] == 'v') {
  3926                           
  3927                           ;main.c: 138: echo_back = 1;
  3928                           
  3929  0420  3076               	movlw	118
  3930  0421  0646               	xorwf	(main@buf^(0+128)+2),w
  3931  0422  1D03               	btfss	3,2
  3932  0423  2C2E               	goto	l3170
  3933                           
  3934                           ;main.c: 140: can_logging_mode(0, 1);
  3935  0424  01F0               	clrf	can_logging_mode@verbose
  3936  0425  0AF0               	incf	can_logging_mode@verbose,f
  3937  0426  3000               	movlw	0
  3938  0427                     L3:	
  3939  0427  3189  21BE  3183   	fcall	_can_logging_mode
  3940                           
  3941                           ;main.c: 141: echo_back = 1;
  3942  042A  0021               	movlb	1	; select bank1
  3943  042B  01DF               	clrf	main@echo_back^(0+128)
  3944  042C  0ADF               	incf	main@echo_back^(0+128),f
  3945                           
  3946                           ;main.c: 142: } else if (buf[2] == 'n') {
  3947  042D  2B8C               	goto	L1
  3948  042E                     l3170:	
  3949  042E  306E               	movlw	110
  3950  042F  0646               	xorwf	(main@buf^(0+128)+2),w
  3951  0430  1D03               	btfss	3,2
  3952  0431  2B8C               	goto	L1
  3953                           
  3954                           ;main.c: 143: can_logging_mode(0, 0);
  3955  0432  01F0               	clrf	can_logging_mode@verbose
  3956  0433  3000               	movlw	0
  3957  0434  3189  21BE  3183   	fcall	_can_logging_mode
  3958                           
  3959                           ;main.c: 144: echo_back = 0;
  3960  0437  0021               	movlb	1	; select bank1
  3961  0438  01DF               	clrf	main@echo_back^(0+128)
  3962                           
  3963                           ;main.c: 145: }
  3964                           ;main.c: 146: break;
  3965  0439  2B8C               	goto	L1
  3966  043A                     l3176:	
  3967                           ;main.c: 147: case 'o':
  3968                           
  3969                           
  3970                           ;main.c: 148: if (buf[2] == 'l') {
  3971  043A  306C               	movlw	108
  3972  043B  0646               	xorwf	(main@buf^(0+128)+2),w
  3973  043C  1D03               	btfss	3,2
  3974  043D  2C40               	goto	l3180
  3975                           
  3976                           ;main.c: 149: can_ope_mode(0b01000000u);
  3977  043E  3040               	movlw	64
  3978  043F  2C46               	goto	L4
  3979  0440                     l3180:	
  3980                           ;main.c: 150: } else if (buf[2] == 'n') {
  3981                           
  3982  0440  306E               	movlw	110
  3983  0441  0021               	movlb	1	; select bank1
  3984  0442  0646               	xorwf	(main@buf^(0+128)+2),w
  3985  0443  1D03               	btfss	3,2
  3986  0444  2C49               	goto	l3184
  3987                           
  3988                           ;main.c: 151: can_ope_mode(0b00000000u);
  3989  0445  3000               	movlw	0
  3990  0446                     L4:	
  3991  0446  318C  246C  3183   	fcall	_can_ope_mode
  3992  0449                     l3184:	
  3993                           
  3994                           ;main.c: 152: }
  3995                           ;main.c: 153: if (buf[3] == '\0') {
  3996  0449  0021               	movlb	1	; select bank1
  3997  044A  0847               	movf	(main@buf^(0+128)+3),w
  3998  044B  1D03               	btfss	3,2
  3999  044C  2C50               	goto	l3188
  4000                           
  4001                           ;main.c: 154: output_format.with_sid = 0;
  4002  044D  0020               	movlb	0	; select bank0
  4003  044E  01ED               	clrf	_output_format
  4004  044F  2C5B               	goto	l3194
  4005  0450                     l3188:	
  4006                           ;main.c: 156: } else if (buf[3] == 's' && buf[4] == '\0') {
  4007                           
  4008                           ;main.c: 155: output_format.hex_output = 0;
  4009                           
  4010  0450  3073               	movlw	115
  4011  0451  0021               	movlb	1	; select bank1
  4012  0452  0647               	xorwf	(main@buf^(0+128)+3),w
  4013  0453  1D03               	btfss	3,2
  4014  0454  2C5D               	goto	l3196
  4015  0455  0848               	movf	(main@buf^(0+128)+4),w
  4016  0456  1D03               	btfss	3,2
  4017  0457  2C5D               	goto	l3196
  4018                           
  4019                           ;main.c: 157: output_format.with_sid = 1;
  4020  0458  0020               	movlb	0	; select bank0
  4021  0459  01ED               	clrf	_output_format
  4022  045A  0AED               	incf	_output_format,f
  4023  045B                     l3194:	
  4024                           
  4025                           ;main.c: 158: output_format.hex_output = 0;
  4026  045B  01EE               	clrf	_output_format+1
  4027                           
  4028                           ;main.c: 159: } else if (buf[3] == 'h' && buf[4] == '\0') {
  4029  045C  2B8C               	goto	L1
  4030  045D                     l3196:	
  4031  045D  3068               	movlw	104
  4032  045E  0021               	movlb	1	; select bank1
  4033  045F  0647               	xorwf	(main@buf^(0+128)+3),w
  4034  0460  1D03               	btfss	3,2
  4035  0461  2B8C               	goto	L1
  4036  0462  0848               	movf	(main@buf^(0+128)+4),w
  4037  0463  1D03               	btfss	3,2
  4038  0464  2B8C               	goto	L1
  4039                           
  4040                           ;main.c: 160: output_format.with_sid = 0;
  4041  0465  0020               	movlb	0	; select bank0
  4042  0466  01ED               	clrf	_output_format
  4043                           
  4044                           ;main.c: 161: output_format.hex_output = 1;
  4045  0467  01EE               	clrf	_output_format+1
  4046  0468  0AEE               	incf	_output_format+1,f
  4047                           
  4048                           ;main.c: 162: }
  4049                           ;main.c: 163: break;
  4050  0469  2B8C               	goto	L1
  4051  046A                     l3204:	
  4052                           ;main.c: 164: case 'b':
  4053                           
  4054                           
  4055                           ;main.c: 165: can_abort();
  4056  046A  3189  21F2  3183   	fcall	_can_abort
  4057                           
  4058                           ;main.c: 166: bpr = (uint8_t)atoi(&buf[2]);
  4059  046D  30C6               	movlw	(low ((main@buf| 0+2)))& (0+255)
  4060  046E  318D  2521  3183   	fcall	_atoi
  4061  0471  0876               	movf	?_atoi,w
  4062  0472  0020               	movlb	0	; select bank0
  4063  0473  00E9               	movwf	??_main
  4064  0474  0869               	movf	??_main,w
  4065  0475  0021               	movlb	1	; select bank1
  4066  0476  00DB               	movwf	main@bpr^(0+128)
  4067                           
  4068                           ;main.c: 167: can_baudrate(bpr);
  4069  0477  085B               	movf	main@bpr^(0+128),w
  4070  0478  318B  2348  3183   	fcall	_can_baudrate
  4071                           
  4072                           ;main.c: 168: break;
  4073  047B  2B8C               	goto	L1
  4074  047C                     l3210:	
  4075                           ;main.c: 169: case 'm':
  4076                           
  4077                           
  4078                           ;main.c: 170: case 'f':
  4079                           ;main.c: 171: n = buf[2] - 0x30u;
  4080  047C  0021               	movlb	1	; select bank1
  4081  047D  0846               	movf	(main@buf^(0+128)+2),w
  4082  047E  3ED0               	addlw	208
  4083  047F  0020               	movlb	0	; select bank0
  4084  0480  00E9               	movwf	??_main
  4085  0481  0869               	movf	??_main,w
  4086  0482  0021               	movlb	1	; select bank1
  4087  0483  00E0               	movwf	main@n^(0+128)
  4088                           
  4089                           ;main.c: 172: mask = (uint16_t)atoi(&buf[3]);
  4090  0484  30C7               	movlw	(low ((main@buf| 0+3)))& (0+255)
  4091  0485  318D  2521  3183   	fcall	_atoi
  4092  0488  0877               	movf	?_atoi+1,w
  4093  0489  0021               	movlb	1	; select bank1
  4094  048A  00DE               	movwf	(main@mask+1)^(0+128)
  4095  048B  0876               	movf	?_atoi,w
  4096  048C  00DD               	movwf	main@mask^(0+128)
  4097                           
  4098                           ;main.c: 173: if (cmd == 'm') {
  4099  048D  306D               	movlw	109
  4100  048E  0662               	xorwf	main@cmd^(0+128),w
  4101  048F  1D03               	btfss	3,2
  4102  0490  2CA3               	goto	l3218
  4103                           
  4104                           ;main.c: 174: can_set_mask(0u, n, mask);
  4105  0491  0860               	movf	main@n^(0+128),w
  4106  0492  0020               	movlb	0	; select bank0
  4107  0493  00E9               	movwf	??_main
  4108  0494  0869               	movf	??_main,w
  4109  0495  00C7               	movwf	can_set_mask@n
  4110  0496  0021               	movlb	1	; select bank1
  4111  0497  085E               	movf	(main@mask+1)^(0+128),w
  4112  0498  0020               	movlb	0	; select bank0
  4113  0499  00C9               	movwf	can_set_mask@mask+1
  4114  049A  0021               	movlb	1	; select bank1
  4115  049B  085D               	movf	main@mask^(0+128),w
  4116  049C  0020               	movlb	0	; select bank0
  4117  049D  00C8               	movwf	can_set_mask@mask
  4118  049E  3000               	movlw	0
  4119  049F  318E  26A6  3183   	fcall	_can_set_mask
  4120                           
  4121                           ;main.c: 175: } else if (cmd == 'f') {
  4122  04A2  2B8C               	goto	L1
  4123  04A3                     l3218:	
  4124  04A3  3066               	movlw	102
  4125  04A4  0021               	movlb	1	; select bank1
  4126  04A5  0662               	xorwf	main@cmd^(0+128),w
  4127  04A6  1D03               	btfss	3,2
  4128  04A7  2B8C               	goto	L1
  4129                           
  4130                           ;main.c: 176: can_set_mask(1u, n, mask);
  4131  04A8  0860               	movf	main@n^(0+128),w
  4132  04A9  0020               	movlb	0	; select bank0
  4133  04AA  00E9               	movwf	??_main
  4134  04AB  0869               	movf	??_main,w
  4135  04AC  00C7               	movwf	can_set_mask@n
  4136  04AD  0021               	movlb	1	; select bank1
  4137  04AE  085E               	movf	(main@mask+1)^(0+128),w
  4138  04AF  0020               	movlb	0	; select bank0
  4139  04B0  00C9               	movwf	can_set_mask@mask+1
  4140  04B1  0021               	movlb	1	; select bank1
  4141  04B2  085D               	movf	main@mask^(0+128),w
  4142  04B3  0020               	movlb	0	; select bank0
  4143  04B4  00C8               	movwf	can_set_mask@mask
  4144  04B5  3001               	movlw	1
  4145  04B6  318E  26A6  3183   	fcall	_can_set_mask
  4146                           
  4147                           ;main.c: 177: }
  4148                           ;main.c: 178: break;
  4149  04B9  2B8C               	goto	L1
  4150  04BA                     l3222:	
  4151                           ;main.c: 179: case 'a':
  4152                           
  4153                           
  4154                           ;main.c: 180: can_abort();
  4155  04BA  3189  21F2  3183   	fcall	_can_abort
  4156                           
  4157                           ;main.c: 181: break;
  4158  04BD  2B8C               	goto	L1
  4159  04BE                     l3224:	
  4160                           ;main.c: 182: case 'F':
  4161                           
  4162                           
  4163                           ;main.c: 183: can_dump_masks_and_filters();
  4164  04BE  3180  2040  3183   	fcall	_can_dump_masks_and_filters
  4165                           
  4166                           ;main.c: 184: break;
  4167  04C1  2B8C               	goto	L1
  4168  04C2                     l3226:	
  4169                           ;main.c: 185: case 'd':
  4170                           
  4171                           
  4172                           ;main.c: 186: can_dump_registers();
  4173  04C2  3181  210C  3183   	fcall	_can_dump_registers
  4174                           
  4175                           ;main.c: 187: break;
  4176  04C5  2B8C               	goto	L1
  4177  04C6                     l3228:	
  4178                           ;main.c: 188: case '@':
  4179                           
  4180                           
  4181                           ;main.c: 189: can_send(&buf[1], idx - 1u);
  4182  04C6  0021               	movlb	1	; select bank1
  4183  04C7  0863               	movf	main@idx^(0+128),w
  4184  04C8  3EFF               	addlw	255
  4185  04C9  0020               	movlb	0	; select bank0
  4186  04CA  00E9               	movwf	??_main
  4187  04CB  0869               	movf	??_main,w
  4188  04CC  00C3               	movwf	can_send@dlc
  4189  04CD  30C5               	movlw	(low ((main@buf| 0+1)))& (0+255)
  4190  04CE  3182  221C  3183   	fcall	_can_send
  4191                           
  4192                           ;main.c: 190: break;
  4193  04D1  2B8C               	goto	L1
  4194  04D2                     l3230:	
  4195                           ;main.c: 191: case 'h':
  4196                           
  4197                           
  4198                           ;main.c: 192: printf("/// UART2CAN HELP (version %s) ///\n", "0.12  March 22, 2018");
  4199  04D2  303E               	movlw	low (STR_10| (0+32768))
  4200  04D3  0020               	movlb	0	; select bank0
  4201  04D4  00A2               	movwf	printf@f
  4202  04D5  3092               	movlw	high (STR_10| (0+32768))
  4203  04D6  00A3               	movwf	printf@f+1
  4204  04D7  3009               	movlw	low (STR_11| (0+32768))
  4205  04D8  00A4               	movwf	low ((?_printf| 0+2))
  4206  04D9  3093               	movlw	high (STR_11| (0+32768))
  4207  04DA  00A5               	movwf	(low ((?_printf| 0+2))+1)
  4208  04DB  3185  25A5  3183   	fcall	_printf
  4209                           
  4210                           ;main.c: 193: printf("[Set SLCAN/EVAL mode] @Ms: SLCAN, @Me: EVAL\n");
  4211  04DE  3017               	movlw	low (STR_12| (0+32768))
  4212  04DF  0020               	movlb	0	; select bank0
  4213  04E0  00A2               	movwf	printf@f
  4214  04E1  3091               	movlw	high (STR_12| (0+32768))
  4215  04E2  00A3               	movwf	printf@f+1
  4216  04E3  3185  25A5  3183   	fcall	_printf
  4217                           
  4218                           ;main.c: 194: printf("[Set standard identifier] @i<standard identifier>\n");
  4219  04E6  30E4               	movlw	low (STR_13| (0+32768))
  4220  04E7  0020               	movlb	0	; select bank0
  4221  04E8  00A2               	movwf	printf@f
  4222  04E9  3090               	movlw	high (STR_13| (0+32768))
  4223  04EA  00A3               	movwf	printf@f+1
  4224  04EB  3185  25A5  3183   	fcall	_printf
  4225                           
  4226                           ;main.c: 195: printf("[Set output mode] {debug: @vd, verbose: @vv, normal: @vn}\n");
  4227  04EE  3000               	movlw	low (STR_14| (0+32768))
  4228  04EF  0020               	movlb	0	; select bank0
  4229  04F0  00A2               	movwf	printf@f
  4230  04F1  3090               	movlw	high (STR_14| (0+32768))
  4231  04F2  00A3               	movwf	printf@f+1
  4232  04F3  3185  25A5  3183   	fcall	_printf
  4233                           
  4234                           ;main.c: 196: printf("[Enable operation mode] {loopback: @ol, normal: @on}\n");
  4235  04F6  30AE               	movlw	low (STR_15| (0+32768))
  4236  04F7  0020               	movlb	0	; select bank0
  4237  04F8  00A2               	movwf	printf@f
  4238  04F9  3090               	movlw	high (STR_15| (0+32768))
  4239  04FA  00A3               	movwf	printf@f+1
  4240  04FB  3185  25A5  3183   	fcall	_printf
  4241                           
  4242                           ;main.c: 197: printf("     with SID: @ols or @ons, in hex format: @olh or @onh\n");
  4243  04FE  303B               	movlw	low (STR_16| (0+32768))
  4244  04FF  0020               	movlb	0	; select bank0
  4245  0500  00A2               	movwf	printf@f
  4246  0501  3090               	movlw	high (STR_16| (0+32768))
  4247  0502  00A3               	movwf	printf@f+1
  4248  0503  3185  25A5  3183   	fcall	_printf
  4249                           
  4250                           ;main.c: 198: printf("[Set mask] @m<n><mask(SID10 ~ SID0)>\n");
  4251  0506  30F2               	movlw	low (STR_17| (0+32768))
  4252  0507  0020               	movlb	0	; select bank0
  4253  0508  00A2               	movwf	printf@f
  4254  0509  3091               	movlw	high (STR_17| (0+32768))
  4255  050A  00A3               	movwf	printf@f+1
  4256  050B  3185  25A5  3183   	fcall	_printf
  4257                           
  4258                           ;main.c: 199: printf("[Set filter] @f<n><filter(SID10 ~ SID0)>\n");
  4259  050E  30C8               	movlw	low (STR_18| (0+32768))
  4260  050F  0020               	movlb	0	; select bank0
  4261  0510  00A2               	movwf	printf@f
  4262  0511  3091               	movlw	high (STR_18| (0+32768))
  4263  0512  00A3               	movwf	printf@f+1
  4264  0513  3185  25A5  3183   	fcall	_printf
  4265                           
  4266                           ;main.c: 200: printf("[Set baud rate] @b<bpr>\n");
  4267  0516  3099               	movlw	low (STR_19| (0+32768))
  4268  0517  0020               	movlb	0	; select bank0
  4269  0518  00A2               	movwf	printf@f
  4270  0519  3092               	movlw	high (STR_19| (0+32768))
  4271  051A  00A3               	movwf	printf@f+1
  4272  051B  3185  25A5  3183   	fcall	_printf
  4273                           
  4274                           ;main.c: 201: printf("[Abort all pending transmissions] @a\n");
  4275  051E  3018               	movlw	low (STR_20| (0+32768))
  4276  051F  0020               	movlb	0	; select bank0
  4277  0520  00A2               	movwf	printf@f
  4278  0521  3092               	movlw	high (STR_20| (0+32768))
  4279  0522  00A3               	movwf	printf@f+1
  4280  0523  3185  25A5  3183   	fcall	_printf
  4281                           
  4282                           ;main.c: 202: printf("[Dump masks and filters] @F\n");
  4283  0526  3062               	movlw	low (STR_21| (0+32768))
  4284  0527  0020               	movlb	0	; select bank0
  4285  0528  00A2               	movwf	printf@f
  4286  0529  3092               	movlw	high (STR_21| (0+32768))
  4287  052A  00A3               	movwf	printf@f+1
  4288  052B  3185  25A5  3183   	fcall	_printf
  4289                           
  4290                           ;main.c: 203: printf("[Dump registers] @d\n");
  4291  052E  30F4               	movlw	low (STR_22| (0+32768))
  4292  052F  0020               	movlb	0	; select bank0
  4293  0530  00A2               	movwf	printf@f
  4294  0531  3092               	movlw	high (STR_22| (0+32768))
  4295  0532  00A3               	movwf	printf@f+1
  4296  0533  3185  25A5  3183   	fcall	_printf
  4297                           
  4298                           ;main.c: 204: printf("[Send message] <message>\n");
  4299  0536  307F               	movlw	low (STR_23| (0+32768))
  4300  0537  0020               	movlb	0	; select bank0
  4301  0538  00A2               	movwf	printf@f
  4302  0539  3092               	movlw	high (STR_23| (0+32768))
  4303  053A  00A3               	movwf	printf@f+1
  4304  053B  3185  25A5  3183   	fcall	_printf
  4305                           
  4306                           ;main.c: 205: printf("[Send message beginning with \'@\' character] @<@message>\n");
  4307  053E  3075               	movlw	low (STR_24| (0+32768))
  4308  053F  0020               	movlb	0	; select bank0
  4309  0540  00A2               	movwf	printf@f
  4310  0541  3090               	movlw	high (STR_24| (0+32768))
  4311  0542  00A3               	movwf	printf@f+1
  4312  0543  3185  25A5  3183   	fcall	_printf
  4313                           
  4314                           ;main.c: 206: printf("[Receive message] <message> will be output\n");
  4315  0546  309C               	movlw	low (STR_25| (0+32768))
  4316  0547  0020               	movlb	0	; select bank0
  4317  0548  00A2               	movwf	printf@f
  4318  0549  3091               	movlw	high (STR_25| (0+32768))
  4319  054A  00A3               	movwf	printf@f+1
  4320  054B  3185  25A5  3183   	fcall	_printf
  4321                           
  4322                           ;main.c: 207: printf("[Show this help]: @h\n");
  4323  054E  30C9               	movlw	low (STR_26| (0+32768))
  4324  054F  0020               	movlb	0	; select bank0
  4325  0550  00A2               	movwf	printf@f
  4326  0551  3092               	movlw	high (STR_26| (0+32768))
  4327  0552  00A3               	movwf	printf@f+1
  4328  0553  3185  25A5  3183   	fcall	_printf
  4329                           
  4330                           ;main.c: 209: }
  4331                           
  4332                           ;main.c: 208: break;
  4333  0556  2B8C               	goto	L1
  4334  0557                     l3234:	
  4335  0557  0021               	movlb	1	; select bank1
  4336  0558  0862               	movf	main@cmd^(0+128),w
  4337                           
  4338                           ; Switch size 1, requested type "space"
  4339                           ; Number of cases is 12, Range of values is 64 to 118
  4340                           ; switch strategies available:
  4341                           ; Name         Instructions Cycles
  4342                           ; simple_byte           37    19 (average)
  4343                           ; direct_byte          119     9 (fixed)
  4344                           ; jumptable            263     9 (fixed)
  4345                           ;	Chosen strategy is simple_byte
  4346  0559  3A40               	xorlw	64	; case 64
  4347  055A  1903               	skipnz
  4348  055B  2CC6               	goto	l3228
  4349  055C  3A06               	xorlw	6	; case 70
  4350  055D  1903               	skipnz
  4351  055E  2CBE               	goto	l3224
  4352  055F  3A0B               	xorlw	11	; case 77
  4353  0560  1903               	skipnz
  4354  0561  2BEB               	goto	l3142
  4355  0562  3A2C               	xorlw	44	; case 97
  4356  0563  1903               	skipnz
  4357  0564  2CBA               	goto	l3222
  4358  0565  3A03               	xorlw	3	; case 98
  4359  0566  1903               	skipnz
  4360  0567  2C6A               	goto	l3204
  4361  0568  3A06               	xorlw	6	; case 100
  4362  0569  1903               	skipnz
  4363  056A  2CC2               	goto	l3226
  4364  056B  3A02               	xorlw	2	; case 102
  4365  056C  1903               	skipnz
  4366  056D  2C7C               	goto	l3210
  4367  056E  3A0E               	xorlw	14	; case 104
  4368  056F  1903               	skipnz
  4369  0570  2CD2               	goto	l3230
  4370  0571  3A01               	xorlw	1	; case 105
  4371  0572  1903               	skipnz
  4372  0573  2C01               	goto	l3154
  4373  0574  3A04               	xorlw	4	; case 109
  4374  0575  1903               	skipnz
  4375  0576  2C7C               	goto	l3210
  4376  0577  3A02               	xorlw	2	; case 111
  4377  0578  1903               	skipnz
  4378  0579  2C3A               	goto	l3176
  4379  057A  3A19               	xorlw	25	; case 118
  4380  057B  1903               	skipnz
  4381  057C  2C17               	goto	l3158
  4382  057D  2D88               	goto	l3238
  4383                           
  4384                           ;main.c: 210: } else {
  4385  057E  2B8C               	goto	L1
  4386  057F                     l3236:	
  4387                           
  4388                           ;main.c: 211: can_send(buf, idx);
  4389  057F  0863               	movf	main@idx^(0+128),w
  4390  0580  0020               	movlb	0	; select bank0
  4391  0581  00E9               	movwf	??_main
  4392  0582  0869               	movf	??_main,w
  4393  0583  00C3               	movwf	can_send@dlc
  4394  0584  30C4               	movlw	(low (main@buf| 0))& (0+255)
  4395  0585  3182  221C  3183   	fcall	_can_send
  4396  0588                     l3238:	
  4397  0588  2B8C               	goto	L1
  4398  0589                     l3240:	
  4399                           ;main.c: 215: } else if (++idx > 7 && run_mode == 0u) {
  4400                           
  4401                           ;main.c: 212: }
  4402                           ;main.c: 213: idx = 0;
  4403                           
  4404  0589  3001               	movlw	1
  4405  058A  0020               	movlb	0	; select bank0
  4406  058B  00E9               	movwf	??_main
  4407  058C  0869               	movf	??_main,w
  4408  058D  0021               	movlb	1	; select bank1
  4409  058E  07E3               	addwf	main@idx^(0+128),f
  4410  058F  3008               	movlw	8
  4411  0590  0263               	subwf	main@idx^(0+128),w
  4412  0591  1C03               	skipc
  4413  0592  2B8E               	goto	l3116
  4414  0593  0864               	movf	_run_mode^(0+128),w
  4415  0594  1D03               	btfss	3,2
  4416  0595  2B8E               	goto	l3116
  4417                           
  4418                           ;main.c: 216: buf[idx] = '\0';
  4419  0596  0863               	movf	main@idx^(0+128),w
  4420  0597  3EC4               	addlw	(low (main@buf| 0))& (0+255)
  4421  0598  0086               	movwf	6
  4422  0599  0187               	clrf	7
  4423  059A  0181               	clrf	1
  4424                           
  4425                           ;main.c: 217: can_send(buf, idx);
  4426  059B  0863               	movf	main@idx^(0+128),w
  4427  059C  0020               	movlb	0	; select bank0
  4428  059D  00E9               	movwf	??_main
  4429  059E  0869               	movf	??_main,w
  4430  059F  00C3               	movwf	can_send@dlc
  4431  05A0  30C4               	movlw	(low (main@buf| 0))& (0+255)
  4432  05A1  3182  221C  3183   	fcall	_can_send
  4433  05A4  2B8C               	goto	L1
  4434  05A5                     __end_of_main:	
  4435                           ;main.c: 218: idx = 0;
  4436                           
  4437                           
  4438                           	psect	text1
  4439  0CC3                     __ptext1:	
  4440 ;; *************** function _slcan_send *****************
  4441 ;; Defined at:
  4442 ;;		line 35 in file "main.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  pbuf            1    wreg     PTR unsigned char 
  4445 ;;		 -> main@buf(22), 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  pbuf            1   63[BANK0 ] PTR unsigned char 
  4448 ;;		 -> main@buf(22), 
  4449 ;;  data_buf        8   50[BANK0 ] unsigned char [8]
  4450 ;;  id              2   58[BANK0 ] unsigned int 
  4451 ;;  i               1   64[BANK0 ] unsigned char 
  4452 ;;  ascii_data      1   62[BANK0 ] PTR unsigned char 
  4453 ;;		 -> main@buf(22), 
  4454 ;;  j               1   61[BANK0 ] unsigned char 
  4455 ;;  dlc             1   60[BANK0 ] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;Total ram usage:       19 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		_atosid
  4474 ;;		_atoui8
  4475 ;;		_can_send
  4476 ;;		_can_set_sid
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _slcan_send
  4484  0CC3                     _slcan_send:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _slcan_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4488                           ;slcan_send@pbuf stored from wreg
  4489  0CC3  0020               	movlb	0	; select bank0
  4490  0CC4  00DF               	movwf	slcan_send@pbuf
  4491                           
  4492                           ;main.c: 36: uint16_t id;
  4493                           ;main.c: 37: uint8_t dlc, i, j;
  4494                           ;main.c: 38: uint8_t *ascii_data;
  4495                           ;main.c: 39: uint8_t data_buf[8];
  4496                           ;main.c: 40: id = atosid(pbuf);
  4497  0CC5  085F               	movf	slcan_send@pbuf,w
  4498  0CC6  318B  237B  318C   	fcall	_atosid
  4499  0CC9  0874               	movf	?_atosid+1,w
  4500  0CCA  0020               	movlb	0	; select bank0
  4501  0CCB  00DB               	movwf	slcan_send@id+1
  4502  0CCC  0873               	movf	?_atosid,w
  4503  0CCD  00DA               	movwf	slcan_send@id
  4504                           
  4505                           ;main.c: 41: can_set_sid(id);
  4506  0CCE  085B               	movf	slcan_send@id+1,w
  4507  0CCF  00F1               	movwf	can_set_sid@can_node+1
  4508  0CD0  085A               	movf	slcan_send@id,w
  4509  0CD1  00F0               	movwf	can_set_sid@can_node
  4510  0CD2  318A  227E  318C   	fcall	_can_set_sid
  4511                           
  4512                           ;main.c: 42: dlc = atoui8(pbuf[3]);
  4513  0CD5  0020               	movlb	0	; select bank0
  4514  0CD6  085F               	movf	slcan_send@pbuf,w
  4515  0CD7  3E03               	addlw	3
  4516  0CD8  0086               	movwf	6
  4517  0CD9  0187               	clrf	7
  4518  0CDA  0801               	movf	1,w
  4519  0CDB  318A  22C8  318C   	fcall	_atoui8
  4520  0CDE  0020               	movlb	0	; select bank0
  4521  0CDF  00CE               	movwf	??_slcan_send
  4522  0CE0  084E               	movf	??_slcan_send,w
  4523  0CE1  00DC               	movwf	slcan_send@dlc
  4524                           
  4525                           ;main.c: 43: ascii_data = &pbuf[4];
  4526  0CE2  085F               	movf	slcan_send@pbuf,w
  4527  0CE3  3E04               	addlw	4
  4528  0CE4  00CE               	movwf	??_slcan_send
  4529  0CE5  084E               	movf	??_slcan_send,w
  4530  0CE6  00DE               	movwf	slcan_send@ascii_data
  4531                           
  4532                           ;main.c: 44: for(i=0; i<dlc; i++) {
  4533  0CE7  01E0               	clrf	slcan_send@i
  4534  0CE8                     l2844:	
  4535  0CE8  085C               	movf	slcan_send@dlc,w
  4536  0CE9  0260               	subwf	slcan_send@i,w
  4537  0CEA  1803               	btfsc	3,0
  4538  0CEB  2D19               	goto	l2846
  4539                           
  4540                           ;main.c: 45: j = i * 2u;
  4541  0CEC  3560               	lslf	slcan_send@i,w
  4542  0CED  00CE               	movwf	??_slcan_send
  4543  0CEE  084E               	movf	??_slcan_send,w
  4544  0CEF  00DD               	movwf	slcan_send@j
  4545                           
  4546                           ;main.c: 46: data_buf[i] = atoui8(ascii_data[j]) * 0x10u + atoui8(ascii_data[j+1]);
  4547  0CF0  085D               	movf	slcan_send@j,w
  4548  0CF1  075E               	addwf	slcan_send@ascii_data,w
  4549  0CF2  00CE               	movwf	??_slcan_send
  4550  0CF3  084E               	movf	??_slcan_send,w
  4551  0CF4  0086               	movwf	6
  4552  0CF5  0187               	clrf	7
  4553  0CF6  0801               	movf	1,w
  4554  0CF7  318A  22C8  318C   	fcall	_atoui8
  4555  0CFA  0020               	movlb	0	; select bank0
  4556  0CFB  00CF               	movwf	??_slcan_send+1
  4557  0CFC  3004               	movlw	4
  4558  0CFD                     u2425:	
  4559  0CFD  35CF               	lslf	??_slcan_send+1,f
  4560  0CFE  0B89               	decfsz	9,f
  4561  0CFF  2CFD               	goto	u2425
  4562  0D00  085D               	movf	slcan_send@j,w
  4563  0D01  3E01               	addlw	1
  4564  0D02  075E               	addwf	slcan_send@ascii_data,w
  4565  0D03  00D0               	movwf	??_slcan_send+2
  4566  0D04  0850               	movf	??_slcan_send+2,w
  4567  0D05  0086               	movwf	6
  4568  0D06  0187               	clrf	7
  4569  0D07  0801               	movf	1,w
  4570  0D08  318A  22C8  318C   	fcall	_atoui8
  4571  0D0B  0020               	movlb	0	; select bank0
  4572  0D0C  074F               	addwf	??_slcan_send+1,w
  4573  0D0D  00D1               	movwf	??_slcan_send+3
  4574  0D0E  0860               	movf	slcan_send@i,w
  4575  0D0F  3E52               	addlw	(low (slcan_send@data_buf| 0))& (0+255)
  4576  0D10  0086               	movwf	6
  4577  0D11  0187               	clrf	7
  4578  0D12  0851               	movf	??_slcan_send+3,w
  4579  0D13  0081               	movwf	1
  4580  0D14  3001               	movlw	1
  4581  0D15  00CE               	movwf	??_slcan_send
  4582  0D16  084E               	movf	??_slcan_send,w
  4583  0D17  07E0               	addwf	slcan_send@i,f
  4584  0D18  2CE8               	goto	l2844
  4585  0D19                     l2846:	
  4586                           
  4587                           ;main.c: 47: }
  4588                           ;main.c: 48: can_send(data_buf, dlc);
  4589  0D19  085C               	movf	slcan_send@dlc,w
  4590  0D1A  00CE               	movwf	??_slcan_send
  4591  0D1B  084E               	movf	??_slcan_send,w
  4592  0D1C  00C3               	movwf	can_send@dlc
  4593  0D1D  3052               	movlw	(low (slcan_send@data_buf| 0))& (0+255)
  4594  0D1E  3182  221C         	fcall	_can_send
  4595  0D20  0008               	return
  4596  0D21                     __end_of_slcan_send:	
  4597                           
  4598                           	psect	text2
  4599  021C                     __ptext2:	
  4600 ;; *************** function _can_send *****************
  4601 ;; Defined at:
  4602 ;;		line 195 in file "mcp2515.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  data_buf        1    wreg     PTR unsigned char 
  4605 ;;		 -> main@buf(22), slcan_send@data_buf(8), 
  4606 ;;  dlc             1   35[BANK0 ] unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  data_buf        1   43[BANK0 ] PTR unsigned char 
  4609 ;;		 -> main@buf(22), slcan_send@data_buf(8), 
  4610 ;;  n               1   45[BANK0 ] unsigned char 
  4611 ;;  i               1   44[BANK0 ] unsigned char 
  4612 ;;  status          1   42[BANK0 ] unsigned char 
  4613 ;;  bytes_writte    1   41[BANK0 ] unsigned char 
  4614 ;;  len             1   40[BANK0 ] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      unsigned char 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4624 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;Total ram usage:       11 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    3
  4631 ;; This function calls:
  4632 ;;		_SPI_exchange
  4633 ;;		_printf
  4634 ;; This function is called by:
  4635 ;;		_slcan_send
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _can_send
  4642  021C                     _can_send:	
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _can_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4646                           ;can_send@data_buf stored from wreg
  4647  021C  0020               	movlb	0	; select bank0
  4648  021D  00CB               	movwf	can_send@data_buf
  4649                           
  4650                           ;mcp2515.c: 196: uint8_t i;
  4651                           ;mcp2515.c: 197: uint8_t n = 0;
  4652  021E  01CD               	clrf	can_send@n
  4653                           
  4654                           ;mcp2515.c: 199: buf[0] = 0b10100000u;
  4655  021F  30A0               	movlw	160
  4656  0220  00C4               	movwf	??_can_send
  4657  0221  0844               	movf	??_can_send,w
  4658  0222  0021               	movlb	1	; select bank1
  4659  0223  00B4               	movwf	_buf^(0+128)
  4660                           
  4661                           ;mcp2515.c: 200: buf[1] = 0x00;
  4662  0224  01B5               	clrf	(_buf^(0+128)+1)
  4663                           
  4664                           ;mcp2515.c: 201: uint8_t bytes_written = SPI_exchange(buf, 2);
  4665  0225  3002               	movlw	2
  4666  0226  0020               	movlb	0	; select bank0
  4667  0227  00C4               	movwf	??_can_send
  4668  0228  0844               	movf	??_can_send,w
  4669  0229  00F8               	movwf	SPI_exchange@len
  4670  022A  30B4               	movlw	(low (_buf| 0))& (0+255)
  4671  022B  318A  2201  3182   	fcall	_SPI_exchange
  4672  022E  0020               	movlb	0	; select bank0
  4673  022F  00C5               	movwf	??_can_send+1
  4674  0230  0845               	movf	??_can_send+1,w
  4675  0231  00C9               	movwf	can_send@bytes_written
  4676                           
  4677                           ;mcp2515.c: 202: uint8_t status = buf[1];
  4678  0232  0021               	movlb	1	; select bank1
  4679  0233  0835               	movf	(_buf^(0+128)+1),w
  4680  0234  0020               	movlb	0	; select bank0
  4681  0235  00C4               	movwf	??_can_send
  4682  0236  0844               	movf	??_can_send,w
  4683  0237  00CA               	movwf	can_send@status
  4684                           
  4685                           ;mcp2515.c: 203: if ((status & 0b01000000u) == 0) {
  4686  0238  1B4A               	btfsc	can_send@status,6
  4687  0239  2A4A               	goto	l406
  4688                           
  4689                           ;mcp2515.c: 204: if (mode.debug) printf("TXB2 is idle\n");
  4690  023A  086B               	movf	_mode,w
  4691  023B  1903               	btfsc	3,2
  4692  023C  2A44               	goto	l2626
  4693  023D  3053               	movlw	low (STR_34| (0+32768))
  4694  023E  00A2               	movwf	printf@f
  4695  023F  3094               	movlw	high (STR_34| (0+32768))
  4696  0240  00A3               	movwf	printf@f+1
  4697  0241  3185  25A5  3182   	fcall	_printf
  4698  0244                     l2626:	
  4699                           
  4700                           ;mcp2515.c: 205: n = 2;
  4701  0244  3002               	movlw	2
  4702  0245  0020               	movlb	0	; select bank0
  4703  0246  00C4               	movwf	??_can_send
  4704  0247  0844               	movf	??_can_send,w
  4705  0248  00CD               	movwf	can_send@n
  4706                           
  4707                           ;mcp2515.c: 206: } else if ((status & 0b00010000u) == 0) {
  4708  0249  2A68               	goto	l2640
  4709  024A                     l406:	
  4710  024A  1A4A               	btfsc	can_send@status,4
  4711  024B  2A5A               	goto	l409
  4712                           
  4713                           ;mcp2515.c: 207: if (mode.debug) printf("TXB1 is idle\n");
  4714  024C  086B               	movf	_mode,w
  4715  024D  1903               	btfsc	3,2
  4716  024E  2A56               	goto	l2632
  4717  024F  3045               	movlw	low (STR_35| (0+32768))
  4718  0250  00A2               	movwf	printf@f
  4719  0251  3094               	movlw	high (STR_35| (0+32768))
  4720  0252  00A3               	movwf	printf@f+1
  4721  0253  3185  25A5  3182   	fcall	_printf
  4722  0256                     l2632:	
  4723                           
  4724                           ;mcp2515.c: 208: n = 1;
  4725  0256  0020               	movlb	0	; select bank0
  4726  0257  01CD               	clrf	can_send@n
  4727  0258  0ACD               	incf	can_send@n,f
  4728                           
  4729                           ;mcp2515.c: 209: } else if ((status & 0b00000100u) == 0) {
  4730  0259  2A68               	goto	l2640
  4731  025A                     l409:	
  4732  025A  194A               	btfsc	can_send@status,2
  4733  025B  2A68               	goto	l2640
  4734                           
  4735                           ;mcp2515.c: 210: if (mode.debug) printf("TXB0 is idle\n");
  4736  025C  086B               	movf	_mode,w
  4737  025D  1903               	btfsc	3,2
  4738  025E  2A66               	goto	l2638
  4739  025F  3037               	movlw	low (STR_36| (0+32768))
  4740  0260  00A2               	movwf	printf@f
  4741  0261  3094               	movlw	high (STR_36| (0+32768))
  4742  0262  00A3               	movwf	printf@f+1
  4743  0263  3185  25A5  3182   	fcall	_printf
  4744  0266                     l2638:	
  4745                           
  4746                           ;mcp2515.c: 211: n = 0;
  4747  0266  0020               	movlb	0	; select bank0
  4748  0267  01CD               	clrf	can_send@n
  4749  0268                     l2640:	
  4750                           
  4751                           ;mcp2515.c: 212: }
  4752                           ;mcp2515.c: 218: buf[0] = 0b01000000u + abc[n];
  4753  0268  084D               	movf	can_send@n,w
  4754  0269  3EE6               	addlw	low (_abc| (0+32768))
  4755  026A  0084               	movwf	4
  4756  026B  3094               	movlw	high (_abc| (0+32768))
  4757  026C  1803               	skipnc
  4758  026D  3E01               	addlw	1
  4759  026E  0085               	movwf	5
  4760  026F  0800               	movf	0,w	;code access
  4761  0270  3E40               	addlw	64
  4762  0271  00C4               	movwf	??_can_send
  4763  0272  0844               	movf	??_can_send,w
  4764  0273  0021               	movlb	1	; select bank1
  4765  0274  00B4               	movwf	_buf^(0+128)
  4766                           
  4767                           ;mcp2515.c: 220: buf[1] = sid.sidh;
  4768  0275  0832               	movf	_sid^(0+128),w
  4769  0276  0020               	movlb	0	; select bank0
  4770  0277  00C4               	movwf	??_can_send
  4771  0278  0844               	movf	??_can_send,w
  4772  0279  0021               	movlb	1	; select bank1
  4773  027A  00B5               	movwf	(_buf^(0+128)+1)
  4774                           
  4775                           ;mcp2515.c: 222: buf[2] = sid.sidl;
  4776  027B  0833               	movf	(_sid^(0+128)+1),w
  4777  027C  0020               	movlb	0	; select bank0
  4778  027D  00C4               	movwf	??_can_send
  4779  027E  0844               	movf	??_can_send,w
  4780  027F  0021               	movlb	1	; select bank1
  4781  0280  00B6               	movwf	(_buf^(0+128)+2)
  4782                           
  4783                           ;mcp2515.c: 224: buf[3] = 0;
  4784  0281  01B7               	clrf	(_buf^(0+128)+3)
  4785                           
  4786                           ;mcp2515.c: 226: buf[4] = 0;
  4787  0282  01B8               	clrf	(_buf^(0+128)+4)
  4788                           
  4789                           ;mcp2515.c: 228: buf[5] = dlc;
  4790  0283  0020               	movlb	0	; select bank0
  4791  0284  0843               	movf	can_send@dlc,w
  4792  0285  00C4               	movwf	??_can_send
  4793  0286  0844               	movf	??_can_send,w
  4794  0287  0021               	movlb	1	; select bank1
  4795  0288  00B9               	movwf	(_buf^(0+128)+5)
  4796                           
  4797                           ;mcp2515.c: 231: for(i=0; i<dlc; i++) {
  4798  0289  0020               	movlb	0	; select bank0
  4799  028A  01CC               	clrf	can_send@i
  4800  028B                     l2662:	
  4801  028B  0843               	movf	can_send@dlc,w
  4802  028C  024C               	subwf	can_send@i,w
  4803  028D  1803               	btfsc	3,0
  4804  028E  2ABB               	goto	l2664
  4805                           
  4806                           ;mcp2515.c: 232: buf[6u+i] = data_buf[i];
  4807  028F  084C               	movf	can_send@i,w
  4808  0290  074B               	addwf	can_send@data_buf,w
  4809  0291  00C4               	movwf	??_can_send
  4810  0292  0844               	movf	??_can_send,w
  4811  0293  0086               	movwf	6
  4812  0294  0187               	clrf	7
  4813  0295  0801               	movf	1,w
  4814  0296  00C5               	movwf	??_can_send+1
  4815  0297  084C               	movf	can_send@i,w
  4816  0298  3E06               	addlw	6
  4817  0299  3EB4               	addlw	(low (_buf| 0))& (0+255)
  4818  029A  0086               	movwf	6
  4819  029B  0187               	clrf	7
  4820  029C  0845               	movf	??_can_send+1,w
  4821  029D  0081               	movwf	1
  4822                           
  4823                           ;mcp2515.c: 233: if (mode.debug) printf("Copying buffer: %c\n", data_buf[i]);
  4824  029E  086B               	movf	_mode,w
  4825  029F  1903               	btfsc	3,2
  4826  02A0  2AB5               	goto	l2660
  4827  02A1  301E               	movlw	low (STR_37| (0+32768))
  4828  02A2  00A2               	movwf	printf@f
  4829  02A3  3093               	movlw	high (STR_37| (0+32768))
  4830  02A4  00A3               	movwf	printf@f+1
  4831  02A5  084C               	movf	can_send@i,w
  4832  02A6  074B               	addwf	can_send@data_buf,w
  4833  02A7  00C4               	movwf	??_can_send
  4834  02A8  0844               	movf	??_can_send,w
  4835  02A9  0086               	movwf	6
  4836  02AA  0187               	clrf	7
  4837  02AB  0801               	movf	1,w
  4838  02AC  00C5               	movwf	??_can_send+1
  4839  02AD  01C6               	clrf	??_can_send+2
  4840  02AE  0845               	movf	??_can_send+1,w
  4841  02AF  00A4               	movwf	?_printf+2
  4842  02B0  0846               	movf	??_can_send+2,w
  4843  02B1  00A5               	movwf	?_printf+3
  4844  02B2  3185  25A5  3182   	fcall	_printf
  4845  02B5                     l2660:	
  4846  02B5  3001               	movlw	1
  4847  02B6  0020               	movlb	0	; select bank0
  4848  02B7  00C4               	movwf	??_can_send
  4849  02B8  0844               	movf	??_can_send,w
  4850  02B9  07CC               	addwf	can_send@i,f
  4851  02BA  2A8B               	goto	l2662
  4852  02BB                     l2664:	
  4853                           
  4854                           ;mcp2515.c: 234: }
  4855                           ;mcp2515.c: 237: uint8_t len = 6u + dlc;
  4856  02BB  0843               	movf	can_send@dlc,w
  4857  02BC  3E06               	addlw	6
  4858  02BD  00C4               	movwf	??_can_send
  4859  02BE  0844               	movf	??_can_send,w
  4860  02BF  00C8               	movwf	can_send@len
  4861                           
  4862                           ;mcp2515.c: 238: uint8_t bytes_written = SPI_exchange(buf, len);
  4863  02C0  0848               	movf	can_send@len,w
  4864  02C1  00C4               	movwf	??_can_send
  4865  02C2  0844               	movf	??_can_send,w
  4866  02C3  00F8               	movwf	SPI_exchange@len
  4867  02C4  30B4               	movlw	(low (_buf| 0))& (0+255)
  4868  02C5  318A  2201  3182   	fcall	_SPI_exchange
  4869  02C8  0020               	movlb	0	; select bank0
  4870  02C9  00C5               	movwf	??_can_send+1
  4871  02CA  0845               	movf	??_can_send+1,w
  4872  02CB  00C9               	movwf	can_send@bytes_written
  4873                           
  4874                           ;mcp2515.c: 240: buf[0] = 0b00000011u;
  4875  02CC  3003               	movlw	3
  4876  02CD  00C4               	movwf	??_can_send
  4877  02CE  0844               	movf	??_can_send,w
  4878  02CF  0021               	movlb	1	; select bank1
  4879  02D0  00B4               	movwf	_buf^(0+128)
  4880                           
  4881                           ;mcp2515.c: 241: buf[1] = txbnsidh[n];
  4882  02D1  0020               	movlb	0	; select bank0
  4883  02D2  084D               	movf	can_send@n,w
  4884  02D3  3EE3               	addlw	low (_txbnsidh| (0+32768))
  4885  02D4  0084               	movwf	4
  4886  02D5  3094               	movlw	high (_txbnsidh| (0+32768))
  4887  02D6  1803               	skipnc
  4888  02D7  3E01               	addlw	1
  4889  02D8  0085               	movwf	5
  4890  02D9  0800               	movf	0,w	;code access
  4891  02DA  00C4               	movwf	??_can_send
  4892  02DB  0844               	movf	??_can_send,w
  4893  02DC  0021               	movlb	1	; select bank1
  4894  02DD  00B5               	movwf	(_buf^(0+128)+1)
  4895                           
  4896                           ;mcp2515.c: 242: buf[2] = 0x00;
  4897  02DE  01B6               	clrf	(_buf^(0+128)+2)
  4898                           
  4899                           ;mcp2515.c: 243: SPI_exchange(buf, 3);
  4900  02DF  3003               	movlw	3
  4901  02E0  0020               	movlb	0	; select bank0
  4902  02E1  00C4               	movwf	??_can_send
  4903  02E2  0844               	movf	??_can_send,w
  4904  02E3  00F8               	movwf	SPI_exchange@len
  4905  02E4  30B4               	movlw	(low (_buf| 0))& (0+255)
  4906  02E5  318A  2201  3182   	fcall	_SPI_exchange
  4907                           
  4908                           ;mcp2515.c: 245: if (mode.debug) printf("TXB%dSIDH: %02x\n", n, buf[2]);
  4909  02E8  0020               	movlb	0	; select bank0
  4910  02E9  086B               	movf	_mode,w
  4911  02EA  1903               	btfsc	3,2
  4912  02EB  2B03               	goto	l2680
  4913  02EC  3077               	movlw	low (STR_38| (0+32768))
  4914  02ED  00A2               	movwf	printf@f
  4915  02EE  3093               	movlw	high (STR_38| (0+32768))
  4916  02EF  00A3               	movwf	printf@f+1
  4917  02F0  084D               	movf	can_send@n,w
  4918  02F1  00C4               	movwf	??_can_send
  4919  02F2  01C5               	clrf	??_can_send+1
  4920  02F3  0844               	movf	??_can_send,w
  4921  02F4  00A4               	movwf	?_printf+2
  4922  02F5  0845               	movf	??_can_send+1,w
  4923  02F6  00A5               	movwf	?_printf+3
  4924  02F7  0021               	movlb	1	; select bank1
  4925  02F8  0836               	movf	(_buf^(0+128)+2),w
  4926  02F9  0020               	movlb	0	; select bank0
  4927  02FA  00C6               	movwf	??_can_send+2
  4928  02FB  01C7               	clrf	??_can_send+3
  4929  02FC  0846               	movf	??_can_send+2,w
  4930  02FD  00A6               	movwf	?_printf+4
  4931  02FE  0847               	movf	??_can_send+3,w
  4932  02FF  00A7               	movwf	?_printf+5
  4933  0300  3185  25A5  3182   	fcall	_printf
  4934  0303                     l2680:	
  4935                           
  4936                           ;mcp2515.c: 246: buf[0] = 0b00000011u;
  4937  0303  3003               	movlw	3
  4938  0304  0020               	movlb	0	; select bank0
  4939  0305  00C4               	movwf	??_can_send
  4940  0306  0844               	movf	??_can_send,w
  4941  0307  0021               	movlb	1	; select bank1
  4942  0308  00B4               	movwf	_buf^(0+128)
  4943                           
  4944                           ;mcp2515.c: 247: buf[1] = txbnsidh[n] + 1u;
  4945  0309  0020               	movlb	0	; select bank0
  4946  030A  084D               	movf	can_send@n,w
  4947  030B  3EE3               	addlw	low (_txbnsidh| (0+32768))
  4948  030C  0084               	movwf	4
  4949  030D  3094               	movlw	high (_txbnsidh| (0+32768))
  4950  030E  1803               	skipnc
  4951  030F  3E01               	addlw	1
  4952  0310  0085               	movwf	5
  4953  0311  0800               	movf	0,w	;code access
  4954  0312  3E01               	addlw	1
  4955  0313  00C4               	movwf	??_can_send
  4956  0314  0844               	movf	??_can_send,w
  4957  0315  0021               	movlb	1	; select bank1
  4958  0316  00B5               	movwf	(_buf^(0+128)+1)
  4959                           
  4960                           ;mcp2515.c: 248: buf[2] = 0x00;
  4961  0317  01B6               	clrf	(_buf^(0+128)+2)
  4962                           
  4963                           ;mcp2515.c: 249: SPI_exchange(buf, 3);
  4964  0318  3003               	movlw	3
  4965  0319  0020               	movlb	0	; select bank0
  4966  031A  00C4               	movwf	??_can_send
  4967  031B  0844               	movf	??_can_send,w
  4968  031C  00F8               	movwf	SPI_exchange@len
  4969  031D  30B4               	movlw	(low (_buf| 0))& (0+255)
  4970  031E  318A  2201  3182   	fcall	_SPI_exchange
  4971                           
  4972                           ;mcp2515.c: 251: if (mode.debug) printf("TXB%dSIDL: %02x\n", n, buf[2]);
  4973  0321  0020               	movlb	0	; select bank0
  4974  0322  086B               	movf	_mode,w
  4975  0323  1903               	btfsc	3,2
  4976  0324  2B3C               	goto	l2692
  4977  0325  3099               	movlw	low (STR_39| (0+32768))
  4978  0326  00A2               	movwf	printf@f
  4979  0327  3093               	movlw	high (STR_39| (0+32768))
  4980  0328  00A3               	movwf	printf@f+1
  4981  0329  084D               	movf	can_send@n,w
  4982  032A  00C4               	movwf	??_can_send
  4983  032B  01C5               	clrf	??_can_send+1
  4984  032C  0844               	movf	??_can_send,w
  4985  032D  00A4               	movwf	?_printf+2
  4986  032E  0845               	movf	??_can_send+1,w
  4987  032F  00A5               	movwf	?_printf+3
  4988  0330  0021               	movlb	1	; select bank1
  4989  0331  0836               	movf	(_buf^(0+128)+2),w
  4990  0332  0020               	movlb	0	; select bank0
  4991  0333  00C6               	movwf	??_can_send+2
  4992  0334  01C7               	clrf	??_can_send+3
  4993  0335  0846               	movf	??_can_send+2,w
  4994  0336  00A6               	movwf	?_printf+4
  4995  0337  0847               	movf	??_can_send+3,w
  4996  0338  00A7               	movwf	?_printf+5
  4997  0339  3185  25A5  3182   	fcall	_printf
  4998  033C                     l2692:	
  4999                           
  5000                           ;mcp2515.c: 253: if (bytes_written == len) {
  5001  033C  0020               	movlb	0	; select bank0
  5002  033D  0849               	movf	can_send@bytes_written,w
  5003  033E  0648               	xorwf	can_send@len,w
  5004  033F  1D03               	skipz
  5005  0340  0008               	return
  5006                           
  5007                           ;mcp2515.c: 255: buf[0] = 0b10000000u + (0b00000001u << n);
  5008  0341  3001               	movlw	1
  5009  0342  00C4               	movwf	??_can_send
  5010  0343  0A4D               	incf	can_send@n,w
  5011  0344  2B46               	goto	u2304
  5012  0345                     u2305:	
  5013  0345  35C4               	lslf	??_can_send,f
  5014  0346                     u2304:	
  5015  0346  0B89               	decfsz	9,f
  5016  0347  2B45               	goto	u2305
  5017  0348  0844               	movf	??_can_send,w
  5018  0349  3E80               	addlw	128
  5019  034A  00C5               	movwf	??_can_send+1
  5020  034B  0845               	movf	??_can_send+1,w
  5021  034C  0021               	movlb	1	; select bank1
  5022  034D  00B4               	movwf	_buf^(0+128)
  5023                           
  5024                           ;mcp2515.c: 256: bytes_written = SPI_exchange(buf, 1);
  5025  034E  01F8               	clrf	SPI_exchange@len
  5026  034F  0AF8               	incf	SPI_exchange@len,f
  5027  0350  30B4               	movlw	(low (_buf| 0))& (0+255)
  5028  0351  318A  2201  3182   	fcall	_SPI_exchange
  5029  0354  0020               	movlb	0	; select bank0
  5030  0355  00C4               	movwf	??_can_send
  5031  0356  0844               	movf	??_can_send,w
  5032  0357  00C9               	movwf	can_send@bytes_written
  5033                           
  5034                           ;mcp2515.c: 257: if (bytes_written == 1) {
  5035  0358  0349               	decf	can_send@bytes_written,w
  5036  0359  1D03               	btfss	3,2
  5037  035A  0008               	return
  5038                           
  5039                           ;mcp2515.c: 258: if (mode.debug) printf("Message sent: %s\n", data_buf);
  5040  035B  086B               	movf	_mode,w
  5041  035C  1903               	btfsc	3,2
  5042  035D  0008               	return
  5043  035E  3032               	movlw	low (STR_40| (0+32768))
  5044  035F  00A2               	movwf	printf@f
  5045  0360  3093               	movlw	high (STR_40| (0+32768))
  5046  0361  00A3               	movwf	printf@f+1
  5047  0362  084B               	movf	can_send@data_buf,w
  5048  0363  00A4               	movwf	low ((?_printf| 0+2))
  5049  0364  3000               	movlw	0
  5050  0365  00A5               	movwf	(low ((?_printf| 0+2))+1)
  5051  0366  3185  25A5         	fcall	_printf
  5052                           
  5053                           ;mcp2515.c: 259: return 1;
  5054                           ;	Return value of _can_send is never used
  5055  0368  0008               	return
  5056  0369                     __end_of_can_send:	
  5057                           ;mcp2515.c: 260: }
  5058                           ;mcp2515.c: 261: }
  5059                           ;mcp2515.c: 263: return 0;
  5060                           ;	Return value of _can_send is never used
  5061                           
  5062                           
  5063                           	psect	text3
  5064  0B7B                     __ptext3:	
  5065 ;; *************** function _atosid *****************
  5066 ;; Defined at:
  5067 ;;		line 27 in file "hexascii.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  ascii           1    wreg     PTR unsigned char 
  5070 ;;		 -> main@buf(22), 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  ascii           1    8[BANK0 ] PTR unsigned char 
  5073 ;;		 -> main@buf(22), 
  5074 ;;  id              2    6[BANK0 ] unsigned int 
  5075 ;;  c               2    4[BANK0 ] unsigned int 
  5076 ;;  b               2    2[BANK0 ] unsigned int 
  5077 ;;  a               2    0[BANK0 ] unsigned int 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  2    3[COMMON] unsigned int 
  5080 ;; Registers used:
  5081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;Total ram usage:       17 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    1
  5094 ;; This function calls:
  5095 ;;		_atoui8
  5096 ;; This function is called by:
  5097 ;;		_slcan_send
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _atosid
  5103  0B7B                     _atosid:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _atosid: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5107                           ;atosid@ascii stored from wreg
  5108  0B7B  0020               	movlb	0	; select bank0
  5109  0B7C  00A8               	movwf	atosid@ascii
  5110                           
  5111                           ;hexascii.c: 29: uint16_t a = (uint16_t)(atoui8(ascii[0]));
  5112  0B7D  0828               	movf	atosid@ascii,w
  5113  0B7E  0086               	movwf	6
  5114  0B7F  0187               	clrf	7
  5115  0B80  0801               	movf	1,w
  5116  0B81  318A  22C8  318B   	fcall	_atoui8
  5117  0B84  00F5               	movwf	??_atosid
  5118  0B85  01F6               	clrf	??_atosid+1
  5119  0B86  0875               	movf	??_atosid,w
  5120  0B87  0020               	movlb	0	; select bank0
  5121  0B88  00A0               	movwf	atosid@a
  5122  0B89  0876               	movf	??_atosid+1,w
  5123  0B8A  00A1               	movwf	atosid@a+1
  5124                           
  5125                           ;hexascii.c: 30: uint16_t b = (uint16_t)(atoui8(ascii[1]));
  5126  0B8B  0A28               	incf	atosid@ascii,w
  5127  0B8C  0086               	movwf	6
  5128  0B8D  0187               	clrf	7
  5129  0B8E  0801               	movf	1,w
  5130  0B8F  318A  22C8  318B   	fcall	_atoui8
  5131  0B92  00F5               	movwf	??_atosid
  5132  0B93  01F6               	clrf	??_atosid+1
  5133  0B94  0875               	movf	??_atosid,w
  5134  0B95  0020               	movlb	0	; select bank0
  5135  0B96  00A2               	movwf	atosid@b
  5136  0B97  0876               	movf	??_atosid+1,w
  5137  0B98  00A3               	movwf	atosid@b+1
  5138                           
  5139                           ;hexascii.c: 31: uint16_t c = (uint16_t)(atoui8(ascii[2]));
  5140  0B99  0828               	movf	atosid@ascii,w
  5141  0B9A  3E02               	addlw	2
  5142  0B9B  0086               	movwf	6
  5143  0B9C  0187               	clrf	7
  5144  0B9D  0801               	movf	1,w
  5145  0B9E  318A  22C8         	fcall	_atoui8
  5146  0BA0  00F5               	movwf	??_atosid
  5147  0BA1  01F6               	clrf	??_atosid+1
  5148  0BA2  0875               	movf	??_atosid,w
  5149  0BA3  0020               	movlb	0	; select bank0
  5150  0BA4  00A4               	movwf	atosid@c
  5151  0BA5  0876               	movf	??_atosid+1,w
  5152  0BA6  00A5               	movwf	atosid@c+1
  5153                           
  5154                           ;hexascii.c: 32: uint16_t id = a * 0x100u + b * 0x10u + c;
  5155  0BA7  0823               	movf	atosid@b+1,w
  5156  0BA8  00F6               	movwf	??_atosid+1
  5157  0BA9  0822               	movf	atosid@b,w
  5158  0BAA  00F5               	movwf	??_atosid
  5159  0BAB  0EF5               	swapf	??_atosid,f
  5160  0BAC  0EF6               	swapf	??_atosid+1,f
  5161  0BAD  30F0               	movlw	240
  5162  0BAE  05F6               	andwf	??_atosid+1,f
  5163  0BAF  0875               	movf	??_atosid,w
  5164  0BB0  390F               	andlw	15
  5165  0BB1  04F6               	iorwf	??_atosid+1,f
  5166  0BB2  30F0               	movlw	240
  5167  0BB3  05F5               	andwf	??_atosid,f
  5168  0BB4  0820               	movf	atosid@a,w
  5169  0BB5  00F8               	movwf	??_atosid+3
  5170  0BB6  01F7               	clrf	??_atosid+2
  5171  0BB7  0875               	movf	??_atosid,w
  5172  0BB8  0777               	addwf	??_atosid+2,w
  5173  0BB9  00F9               	movwf	??_atosid+4
  5174  0BBA  0876               	movf	??_atosid+1,w
  5175  0BBB  3D78               	addwfc	??_atosid+3,w
  5176  0BBC  00FA               	movwf	??_atosid+5
  5177  0BBD  0824               	movf	atosid@c,w
  5178  0BBE  0779               	addwf	??_atosid+4,w
  5179  0BBF  00A6               	movwf	atosid@id
  5180  0BC0  0825               	movf	atosid@c+1,w
  5181  0BC1  3D7A               	addwfc	??_atosid+5,w
  5182  0BC2  00A7               	movwf	atosid@id+1
  5183                           
  5184                           ;hexascii.c: 33: return id;
  5185  0BC3  0827               	movf	atosid@id+1,w
  5186  0BC4  00F4               	movwf	?_atosid+1
  5187  0BC5  0826               	movf	atosid@id,w
  5188  0BC6  00F3               	movwf	?_atosid
  5189  0BC7  0008               	return
  5190  0BC8                     __end_of_atosid:	
  5191                           
  5192                           	psect	text4
  5193  0AC8                     __ptext4:	
  5194 ;; *************** function _atoui8 *****************
  5195 ;; Defined at:
  5196 ;;		line 14 in file "hexascii.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  ascii           1    wreg     unsigned char 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  ascii           1    2[COMMON] unsigned char 
  5201 ;;  minus           1    1[COMMON] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      unsigned char 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;Total ram usage:        3 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; This function calls:
  5218 ;;		Nothing
  5219 ;; This function is called by:
  5220 ;;		_slcan_send
  5221 ;;		_atosid
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _atoui8
  5227  0AC8                     _atoui8:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _atoui8: [wreg+status,2+status,0]
  5231                           ;atoui8@ascii stored from wreg
  5232  0AC8  00F2               	movwf	atoui8@ascii
  5233                           
  5234                           ;hexascii.c: 15: uint8_t minus = 0;
  5235  0AC9  01F1               	clrf	atoui8@minus
  5236                           
  5237                           ;hexascii.c: 16: if (ascii >= 0x30u && ascii <= 0x39u) {
  5238  0ACA  3030               	movlw	48
  5239  0ACB  0272               	subwf	atoui8@ascii,w
  5240  0ACC  1C03               	skipc
  5241  0ACD  2AD4               	goto	l2504
  5242  0ACE  303A               	movlw	58
  5243  0ACF  0272               	subwf	atoui8@ascii,w
  5244  0AD0  1803               	skipnc
  5245  0AD1  2AD4               	goto	l2504
  5246                           
  5247                           ;hexascii.c: 17: minus = 0x30u;
  5248  0AD2  3030               	movlw	48
  5249  0AD3  2AE7               	goto	L6
  5250  0AD4                     l2504:	
  5251                           ;hexascii.c: 18: } else if (ascii >= 0x41u && ascii <= 0x46u) {
  5252                           
  5253  0AD4  3041               	movlw	65
  5254  0AD5  0272               	subwf	atoui8@ascii,w
  5255  0AD6  1C03               	skipc
  5256  0AD7  2ADE               	goto	l2510
  5257  0AD8  3047               	movlw	71
  5258  0AD9  0272               	subwf	atoui8@ascii,w
  5259  0ADA  1803               	skipnc
  5260  0ADB  2ADE               	goto	l2510
  5261                           
  5262                           ;hexascii.c: 19: minus = 0x41u - 10;
  5263  0ADC  3037               	movlw	55
  5264  0ADD  2AE7               	goto	L6
  5265  0ADE                     l2510:	
  5266                           ;hexascii.c: 20: } else if (ascii >= 0x61u && ascii <= 0x66u) {
  5267                           
  5268  0ADE  3061               	movlw	97
  5269  0ADF  0272               	subwf	atoui8@ascii,w
  5270  0AE0  1C03               	skipc
  5271  0AE1  2AEA               	goto	l2516
  5272  0AE2  3067               	movlw	103
  5273  0AE3  0272               	subwf	atoui8@ascii,w
  5274  0AE4  1803               	skipnc
  5275  0AE5  2AEA               	goto	l2516
  5276                           
  5277                           ;hexascii.c: 21: minus = 0x61u - 10;
  5278  0AE6  3057               	movlw	87
  5279  0AE7                     L6:	
  5280  0AE7  00F0               	movwf	??_atoui8
  5281  0AE8  0870               	movf	??_atoui8,w
  5282  0AE9  00F1               	movwf	atoui8@minus
  5283  0AEA                     l2516:	
  5284                           
  5285                           ;hexascii.c: 23: }
  5286                           ;hexascii.c: 24: return (uint8_t)(ascii - minus);
  5287  0AEA  0371               	decf	atoui8@minus,w
  5288  0AEB  3AFF               	xorlw	255
  5289  0AEC  0772               	addwf	atoui8@ascii,w
  5290  0AED  0008               	return
  5291  0AEE                     __end_of_atoui8:	
  5292                           
  5293                           	psect	text5
  5294  0C16                     __ptext5:	
  5295 ;; *************** function _can_status_check *****************
  5296 ;; Defined at:
  5297 ;;		line 269 in file "mcp2515.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  status          1   72[BANK0 ] unsigned char 
  5302 ;;  bytes_writte    1   71[BANK0 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      unsigned char 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        4 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    5
  5319 ;; This function calls:
  5320 ;;		_SPI_exchange
  5321 ;;		_printf
  5322 ;;		_receive
  5323 ;;		_txf_clear
  5324 ;; This function is called by:
  5325 ;;		_main
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _can_status_check
  5331  0C16                     _can_status_check:	
  5332                           
  5333                           ;mcp2515.c: 271: buf[0] = 0b10100000u;
  5334                           
  5335                           ;incstack = 0
  5336                           ; Regs used in _can_status_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5337  0C16  30A0               	movlw	160
  5338  0C17  0020               	movlb	0	; select bank0
  5339  0C18  00E5               	movwf	??_can_status_check
  5340  0C19  0865               	movf	??_can_status_check,w
  5341  0C1A  0021               	movlb	1	; select bank1
  5342  0C1B  00B4               	movwf	_buf^(0+128)
  5343                           
  5344                           ;mcp2515.c: 272: buf[1] = 0x00;
  5345  0C1C  01B5               	clrf	(_buf^(0+128)+1)
  5346                           
  5347                           ;mcp2515.c: 273: uint8_t bytes_written = SPI_exchange(buf, 2);
  5348  0C1D  3002               	movlw	2
  5349  0C1E  0020               	movlb	0	; select bank0
  5350  0C1F  00E5               	movwf	??_can_status_check
  5351  0C20  0865               	movf	??_can_status_check,w
  5352  0C21  00F8               	movwf	SPI_exchange@len
  5353  0C22  30B4               	movlw	(low (_buf| 0))& (0+255)
  5354  0C23  318A  2201  318C   	fcall	_SPI_exchange
  5355  0C26  0020               	movlb	0	; select bank0
  5356  0C27  00E6               	movwf	??_can_status_check+1
  5357  0C28  0866               	movf	??_can_status_check+1,w
  5358  0C29  00E7               	movwf	can_status_check@bytes_written
  5359                           
  5360                           ;mcp2515.c: 274: uint8_t status = buf[1];
  5361  0C2A  0021               	movlb	1	; select bank1
  5362  0C2B  0835               	movf	(_buf^(0+128)+1),w
  5363  0C2C  0020               	movlb	0	; select bank0
  5364  0C2D  00E5               	movwf	??_can_status_check
  5365  0C2E  0865               	movf	??_can_status_check,w
  5366  0C2F  00E8               	movwf	can_status_check@status
  5367                           
  5368                           ;mcp2515.c: 275: if (status == 0x00) {
  5369  0C30  0868               	movf	can_status_check@status,w
  5370  0C31  1D03               	btfss	3,2
  5371  0C32  2C35               	goto	l426
  5372                           
  5373                           ;mcp2515.c: 276: return 1;
  5374  0C33  3001               	movlw	1
  5375  0C34  0008               	return
  5376  0C35                     l426:	
  5377                           ;mcp2515.c: 277: } else if ((status & 0b00000010u) > 0) {
  5378                           
  5379  0C35  1CE8               	btfss	can_status_check@status,1
  5380  0C36  2C46               	goto	l429
  5381                           
  5382                           ;mcp2515.c: 278: if (mode.debug) printf("RX1IF is on\n");
  5383  0C37  086B               	movf	_mode,w
  5384  0C38  1903               	btfsc	3,2
  5385  0C39  2C41               	goto	l430
  5386  0C3A  306E               	movlw	low (STR_41| (0+32768))
  5387  0C3B  00A2               	movwf	printf@f
  5388  0C3C  3094               	movlw	high (STR_41| (0+32768))
  5389  0C3D  00A3               	movwf	printf@f+1
  5390  0C3E  3185  25A5  318C   	fcall	_printf
  5391  0C41                     l430:	
  5392                           
  5393                           ;mcp2515.c: 279: receive(1);
  5394  0C41  3001               	movlw	1
  5395  0C42  318F  274B  318C   	fcall	_receive
  5396                           
  5397                           ;mcp2515.c: 280: } else if ((status & 0b00000001u) > 0) {
  5398  0C45  2C65               	goto	l2924
  5399  0C46                     l429:	
  5400  0C46  1C68               	btfss	can_status_check@status,0
  5401  0C47  2C57               	goto	l432
  5402                           
  5403                           ;mcp2515.c: 281: if (mode.debug) printf("RX0IF is on\n");
  5404  0C48  086B               	movf	_mode,w
  5405  0C49  1903               	btfsc	3,2
  5406  0C4A  2C52               	goto	l433
  5407  0C4B  3061               	movlw	low (STR_42| (0+32768))
  5408  0C4C  00A2               	movwf	printf@f
  5409  0C4D  3094               	movlw	high (STR_42| (0+32768))
  5410  0C4E  00A3               	movwf	printf@f+1
  5411  0C4F  3185  25A5  318C   	fcall	_printf
  5412  0C52                     l433:	
  5413                           
  5414                           ;mcp2515.c: 282: receive(0);
  5415  0C52  3000               	movlw	0
  5416  0C53  318F  274B  318C   	fcall	_receive
  5417                           
  5418                           ;mcp2515.c: 283: } else if ((status & 0b00001000u) > 0) {
  5419  0C56  2C65               	goto	l2924
  5420  0C57                     l432:	
  5421  0C57  1DE8               	btfss	can_status_check@status,3
  5422  0C58  2C5B               	goto	l435
  5423                           
  5424                           ;mcp2515.c: 284: txf_clear(0);
  5425  0C59  3000               	movlw	0
  5426  0C5A  2C62               	goto	L7
  5427  0C5B                     l435:	
  5428                           ;mcp2515.c: 285: } else if ((status & 0b00100000u) > 0) {
  5429                           
  5430  0C5B  1EE8               	btfss	can_status_check@status,5
  5431  0C5C  2C5F               	goto	l437
  5432                           
  5433                           ;mcp2515.c: 286: txf_clear(1);
  5434  0C5D  3001               	movlw	1
  5435  0C5E  2C62               	goto	L7
  5436  0C5F                     l437:	
  5437                           ;mcp2515.c: 287: } else if ((status & 0b10000000u) > 0) {
  5438                           
  5439  0C5F  1FE8               	btfss	can_status_check@status,7
  5440  0C60  2C65               	goto	l2924
  5441                           
  5442                           ;mcp2515.c: 288: txf_clear(2);
  5443  0C61  3002               	movlw	2
  5444  0C62                     L7:	
  5445  0C62  318B  231A  318C   	fcall	_txf_clear
  5446  0C65                     l2924:	
  5447                           
  5448                           ;mcp2515.c: 289: }
  5449                           ;mcp2515.c: 290: if ((status & 0b00010000u) > 0) {
  5450  0C65  0020               	movlb	0	; select bank0
  5451  0C66  1E68               	btfss	can_status_check@status,4
  5452  0C67  2C6A               	goto	l2932
  5453                           
  5454                           ;mcp2515.c: 291: return 0;
  5455  0C68  3000               	movlw	0
  5456                           
  5457                           ;mcp2515.c: 292: } else {
  5458  0C69  0008               	return
  5459  0C6A                     l2932:	
  5460                           
  5461                           ;mcp2515.c: 293: return 1;
  5462  0C6A  3001               	movlw	1
  5463  0C6B  0008               	return
  5464  0C6C                     __end_of_can_status_check:	
  5465                           
  5466                           	psect	text6
  5467  0B1A                     __ptext6:	
  5468 ;; *************** function _txf_clear *****************
  5469 ;; Defined at:
  5470 ;;		line 149 in file "mcp2515.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  n               1    wreg     unsigned char 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  n               1    4[BANK0 ] unsigned char 
  5475 ;;  bytes_writte    1    3[BANK0 ] unsigned char 
  5476 ;;  mask            1    2[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      unsigned char 
  5479 ;; Registers used:
  5480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        5 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    3
  5493 ;; This function calls:
  5494 ;;		_SPI_exchange
  5495 ;; This function is called by:
  5496 ;;		_can_status_check
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _txf_clear
  5502  0B1A                     _txf_clear:	
  5503                           
  5504                           ;incstack = 0
  5505                           ; Regs used in _txf_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5506                           ;txf_clear@n stored from wreg
  5507  0B1A  0020               	movlb	0	; select bank0
  5508  0B1B  00A4               	movwf	txf_clear@n
  5509                           
  5510                           ;mcp2515.c: 150: uint8_t mask = 0b00000001u << (n + 2);
  5511  0B1C  3001               	movlw	1
  5512  0B1D  00A0               	movwf	??_txf_clear
  5513  0B1E  0824               	movf	txf_clear@n,w
  5514  0B1F  3E02               	addlw	2
  5515  0B20  0A89               	incf	9,f
  5516  0B21  2B23               	goto	u2364
  5517  0B22                     u2365:	
  5518  0B22  35A0               	lslf	??_txf_clear,f
  5519  0B23                     u2364:	
  5520  0B23  0B89               	decfsz	9,f
  5521  0B24  2B22               	goto	u2365
  5522  0B25  0820               	movf	??_txf_clear,w
  5523  0B26  00A1               	movwf	??_txf_clear+1
  5524  0B27  0821               	movf	??_txf_clear+1,w
  5525  0B28  00A2               	movwf	txf_clear@mask
  5526                           
  5527                           ;mcp2515.c: 151: buf[0] =0b00000101u;
  5528  0B29  3005               	movlw	5
  5529  0B2A  00A0               	movwf	??_txf_clear
  5530  0B2B  0820               	movf	??_txf_clear,w
  5531  0B2C  0021               	movlb	1	; select bank1
  5532  0B2D  00B4               	movwf	_buf^(0+128)
  5533                           
  5534                           ;mcp2515.c: 152: buf[1] = 0x2c;
  5535  0B2E  302C               	movlw	44
  5536  0B2F  0020               	movlb	0	; select bank0
  5537  0B30  00A0               	movwf	??_txf_clear
  5538  0B31  0820               	movf	??_txf_clear,w
  5539  0B32  0021               	movlb	1	; select bank1
  5540  0B33  00B5               	movwf	(_buf^(0+128)+1)
  5541                           
  5542                           ;mcp2515.c: 153: buf[2] = mask;
  5543  0B34  0020               	movlb	0	; select bank0
  5544  0B35  0822               	movf	txf_clear@mask,w
  5545  0B36  00A0               	movwf	??_txf_clear
  5546  0B37  0820               	movf	??_txf_clear,w
  5547  0B38  0021               	movlb	1	; select bank1
  5548  0B39  00B6               	movwf	(_buf^(0+128)+2)
  5549                           
  5550                           ;mcp2515.c: 154: buf[3] = 0x00;
  5551  0B3A  01B7               	clrf	(_buf^(0+128)+3)
  5552                           
  5553                           ;mcp2515.c: 155: uint8_t bytes_written = SPI_exchange(buf, 4);
  5554  0B3B  3004               	movlw	4
  5555  0B3C  0020               	movlb	0	; select bank0
  5556  0B3D  00A0               	movwf	??_txf_clear
  5557  0B3E  0820               	movf	??_txf_clear,w
  5558  0B3F  00F8               	movwf	SPI_exchange@len
  5559  0B40  30B4               	movlw	(low (_buf| 0))& (0+255)
  5560  0B41  318A  2201         	fcall	_SPI_exchange
  5561  0B43  0020               	movlb	0	; select bank0
  5562  0B44  00A1               	movwf	??_txf_clear+1
  5563  0B45  0821               	movf	??_txf_clear+1,w
  5564  0B46  00A3               	movwf	txf_clear@bytes_written
  5565                           
  5566                           ;mcp2515.c: 159: return 0;
  5567                           ;	Return value of _txf_clear is never used
  5568                           
  5569                           ;mcp2515.c: 158: } else {
  5570                           
  5571                           ;mcp2515.c: 157: return 1;
  5572                           ;	Return value of _txf_clear is never used
  5573  0B47  0008               	return
  5574  0B48                     __end_of_txf_clear:	
  5575                           
  5576                           	psect	text7
  5577  0F4B                     __ptext7:	
  5578 ;; *************** function _receive *****************
  5579 ;; Defined at:
  5580 ;;		line 166 in file "mcp2515.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  n               1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  n               1   68[BANK0 ] unsigned char 
  5585 ;;  rx_buf         15   49[BANK0 ] unsigned char [15]
  5586 ;;  id              2   65[BANK0 ] unsigned int 
  5587 ;;  dlc             1   67[BANK0 ] unsigned char 
  5588 ;;  pbuf            1   64[BANK0 ] PTR unsigned char 
  5589 ;;		 -> receive@rx_buf(15), 
  5590 ;;  bytes_read      1   48[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;Total ram usage:       26 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    4
  5607 ;; This function calls:
  5608 ;;		Absolute function
  5609 ;;		_SPI_exchange
  5610 ;;		_printf
  5611 ;;		_receive_handler
  5612 ;; This function is called by:
  5613 ;;		_can_status_check
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _receive
  5619  0F4B                     _receive:	
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5623                           ;receive@n stored from wreg
  5624  0F4B  0020               	movlb	0	; select bank0
  5625  0F4C  00E4               	movwf	receive@n
  5626                           
  5627                           ;mcp2515.c: 170: uint8_t rx_buf[15];
  5628                           ;mcp2515.c: 173: rx_buf[0] = 0b10010000u + (nm[n] << 1);
  5629  0F4D  0864               	movf	receive@n,w
  5630  0F4E  3EEC               	addlw	low (_nm| (0+32768))
  5631  0F4F  0084               	movwf	4
  5632  0F50  3094               	movlw	high (_nm| (0+32768))
  5633  0F51  1803               	skipnc
  5634  0F52  3E01               	addlw	1
  5635  0F53  0085               	movwf	5
  5636  0F54  0800               	movf	0,w	;code access
  5637  0F55  0709               	addwf	9,w
  5638  0F56  3E90               	addlw	144
  5639  0F57  00CB               	movwf	??_receive
  5640  0F58  084B               	movf	??_receive,w
  5641  0F59  00D1               	movwf	receive@rx_buf
  5642                           
  5643                           ;mcp2515.c: 174: uint8_t bytes_read = SPI_exchange(rx_buf, 14);
  5644  0F5A  300E               	movlw	14
  5645  0F5B  00CB               	movwf	??_receive
  5646  0F5C  084B               	movf	??_receive,w
  5647  0F5D  00F8               	movwf	SPI_exchange@len
  5648  0F5E  3051               	movlw	(low (receive@rx_buf| 0))& (0+255)
  5649  0F5F  318A  2201  318F   	fcall	_SPI_exchange
  5650  0F62  0020               	movlb	0	; select bank0
  5651  0F63  00CC               	movwf	??_receive+1
  5652  0F64  084C               	movf	??_receive+1,w
  5653  0F65  00D0               	movwf	receive@bytes_read
  5654                           
  5655                           ;mcp2515.c: 175: uint8_t dlc = rx_buf[5];
  5656  0F66  0856               	movf	receive@rx_buf+5,w
  5657  0F67  00CB               	movwf	??_receive
  5658  0F68  084B               	movf	??_receive,w
  5659  0F69  00E3               	movwf	receive@dlc
  5660                           
  5661                           ;mcp2515.c: 176: uint16_t id = ((uint16_t)rx_buf[1] << 3) + ((uint16_t)rx_buf[2] >> 5);
  5662  0F6A  0853               	movf	receive@rx_buf+2,w
  5663  0F6B  00CB               	movwf	??_receive
  5664  0F6C  3005               	movlw	5
  5665  0F6D                     u2375:	
  5666  0F6D  36CB               	lsrf	??_receive,f
  5667  0F6E  0B89               	decfsz	9,f
  5668  0F6F  2F6D               	goto	u2375
  5669  0F70  084B               	movf	??_receive,w
  5670  0F71  00CC               	movwf	??_receive+1
  5671  0F72  01CD               	clrf	??_receive+2
  5672  0F73  0852               	movf	receive@rx_buf+1,w
  5673  0F74  00CE               	movwf	??_receive+3
  5674  0F75  01CF               	clrf	??_receive+4
  5675  0F76  35CE               	lslf	??_receive+3,f
  5676  0F77  0DCF               	rlf	??_receive+4,f
  5677  0F78  35CE               	lslf	??_receive+3,f
  5678  0F79  0DCF               	rlf	??_receive+4,f
  5679  0F7A  35CE               	lslf	??_receive+3,f
  5680  0F7B  0DCF               	rlf	??_receive+4,f
  5681  0F7C  084C               	movf	??_receive+1,w
  5682  0F7D  074E               	addwf	??_receive+3,w
  5683  0F7E  00E1               	movwf	receive@id
  5684  0F7F  084D               	movf	??_receive+2,w
  5685  0F80  3D4F               	addwfc	??_receive+4,w
  5686  0F81  00E2               	movwf	receive@id+1
  5687                           
  5688                           ;mcp2515.c: 177: id = id & 0b0000011111111111u;
  5689  0F82  30FF               	movlw	255
  5690  0F83  0561               	andwf	receive@id,w
  5691  0F84  00E1               	movwf	receive@id
  5692  0F85  3007               	movlw	7
  5693  0F86  0562               	andwf	receive@id+1,w
  5694  0F87  00E2               	movwf	receive@id+1
  5695                           
  5696                           ;mcp2515.c: 178: rx_buf[6u+dlc] = (uint8_t)'\0';
  5697  0F88  0863               	movf	receive@dlc,w
  5698  0F89  3E06               	addlw	6
  5699  0F8A  3E51               	addlw	(low (receive@rx_buf| 0))& (0+255)
  5700  0F8B  0086               	movwf	6
  5701  0F8C  0187               	clrf	7
  5702  0F8D  0181               	clrf	1
  5703                           
  5704                           ;mcp2515.c: 180: if (mode.debug) {
  5705  0F8E  086B               	movf	_mode,w
  5706  0F8F  1903               	btfsc	3,2
  5707  0F90  2FE8               	goto	l2770
  5708                           
  5709                           ;mcp2515.c: 181: printf("RXB%dSIDH: %02x\n", n, rx_buf[1]);
  5710  0F91  3066               	movlw	low (STR_30| (0+32768))
  5711  0F92  00A2               	movwf	printf@f
  5712  0F93  3093               	movlw	high (STR_30| (0+32768))
  5713  0F94  00A3               	movwf	printf@f+1
  5714  0F95  0864               	movf	receive@n,w
  5715  0F96  00CB               	movwf	??_receive
  5716  0F97  01CC               	clrf	??_receive+1
  5717  0F98  084B               	movf	??_receive,w
  5718  0F99  00A4               	movwf	?_printf+2
  5719  0F9A  084C               	movf	??_receive+1,w
  5720  0F9B  00A5               	movwf	?_printf+3
  5721  0F9C  0852               	movf	receive@rx_buf+1,w
  5722  0F9D  00CD               	movwf	??_receive+2
  5723  0F9E  01CE               	clrf	??_receive+3
  5724  0F9F  084D               	movf	??_receive+2,w
  5725  0FA0  00A6               	movwf	?_printf+4
  5726  0FA1  084E               	movf	??_receive+3,w
  5727  0FA2  00A7               	movwf	?_printf+5
  5728  0FA3  3185  25A5  318F   	fcall	_printf
  5729                           
  5730                           ;mcp2515.c: 182: printf("RXB%dSIDL: %02x\n", n, rx_buf[2]);
  5731  0FA6  3088               	movlw	low (STR_31| (0+32768))
  5732  0FA7  0020               	movlb	0	; select bank0
  5733  0FA8  00A2               	movwf	printf@f
  5734  0FA9  3093               	movlw	high (STR_31| (0+32768))
  5735  0FAA  00A3               	movwf	printf@f+1
  5736  0FAB  0864               	movf	receive@n,w
  5737  0FAC  00CB               	movwf	??_receive
  5738  0FAD  01CC               	clrf	??_receive+1
  5739  0FAE  084B               	movf	??_receive,w
  5740  0FAF  00A4               	movwf	?_printf+2
  5741  0FB0  084C               	movf	??_receive+1,w
  5742  0FB1  00A5               	movwf	?_printf+3
  5743  0FB2  0853               	movf	receive@rx_buf+2,w
  5744  0FB3  00CD               	movwf	??_receive+2
  5745  0FB4  01CE               	clrf	??_receive+3
  5746  0FB5  084D               	movf	??_receive+2,w
  5747  0FB6  00A6               	movwf	?_printf+4
  5748  0FB7  084E               	movf	??_receive+3,w
  5749  0FB8  00A7               	movwf	?_printf+5
  5750  0FB9  3185  25A5  318F   	fcall	_printf
  5751                           
  5752                           ;mcp2515.c: 183: printf("RXB%dDLC: %02x\n", n, rx_buf[5]);
  5753  0FBC  30AA               	movlw	low (STR_32| (0+32768))
  5754  0FBD  0020               	movlb	0	; select bank0
  5755  0FBE  00A2               	movwf	printf@f
  5756  0FBF  3093               	movlw	high (STR_32| (0+32768))
  5757  0FC0  00A3               	movwf	printf@f+1
  5758  0FC1  0864               	movf	receive@n,w
  5759  0FC2  00CB               	movwf	??_receive
  5760  0FC3  01CC               	clrf	??_receive+1
  5761  0FC4  084B               	movf	??_receive,w
  5762  0FC5  00A4               	movwf	?_printf+2
  5763  0FC6  084C               	movf	??_receive+1,w
  5764  0FC7  00A5               	movwf	?_printf+3
  5765  0FC8  0856               	movf	receive@rx_buf+5,w
  5766  0FC9  00CD               	movwf	??_receive+2
  5767  0FCA  01CE               	clrf	??_receive+3
  5768  0FCB  084D               	movf	??_receive+2,w
  5769  0FCC  00A6               	movwf	?_printf+4
  5770  0FCD  084E               	movf	??_receive+3,w
  5771  0FCE  00A7               	movwf	?_printf+5
  5772  0FCF  3185  25A5  318F   	fcall	_printf
  5773                           
  5774                           ;mcp2515.c: 184: printf("RXB%dD0: %02x\n", n, rx_buf[6]);
  5775  0FD2  300A               	movlw	low (STR_33| (0+32768))
  5776  0FD3  0020               	movlb	0	; select bank0
  5777  0FD4  00A2               	movwf	printf@f
  5778  0FD5  3094               	movlw	high (STR_33| (0+32768))
  5779  0FD6  00A3               	movwf	printf@f+1
  5780  0FD7  0864               	movf	receive@n,w
  5781  0FD8  00CB               	movwf	??_receive
  5782  0FD9  01CC               	clrf	??_receive+1
  5783  0FDA  084B               	movf	??_receive,w
  5784  0FDB  00A4               	movwf	?_printf+2
  5785  0FDC  084C               	movf	??_receive+1,w
  5786  0FDD  00A5               	movwf	?_printf+3
  5787  0FDE  0857               	movf	receive@rx_buf+6,w
  5788  0FDF  00CD               	movwf	??_receive+2
  5789  0FE0  01CE               	clrf	??_receive+3
  5790  0FE1  084D               	movf	??_receive+2,w
  5791  0FE2  00A6               	movwf	?_printf+4
  5792  0FE3  084E               	movf	??_receive+3,w
  5793  0FE4  00A7               	movwf	?_printf+5
  5794  0FE5  3185  25A5  318F   	fcall	_printf
  5795  0FE8                     l2770:	
  5796                           
  5797                           ;mcp2515.c: 185: }
  5798                           ;mcp2515.c: 188: uint8_t *pbuf = &rx_buf[6];
  5799  0FE8  3057               	movlw	(low ((receive@rx_buf| 0+6)))& (0+255)
  5800  0FE9  0020               	movlb	0	; select bank0
  5801  0FEA  00CB               	movwf	??_receive
  5802  0FEB  084B               	movf	??_receive,w
  5803  0FEC  00E0               	movwf	receive@pbuf
  5804                           
  5805                           ;mcp2515.c: 189: handler(id, pbuf, dlc);
  5806  0FED  0862               	movf	receive@id+1,w
  5807  0FEE  00C4               	movwf	receive_handler@sid+1
  5808  0FEF  0861               	movf	receive@id,w
  5809  0FF0  00C3               	movwf	receive_handler@sid
  5810  0FF1  0860               	movf	receive@pbuf,w
  5811  0FF2  00CB               	movwf	??_receive
  5812  0FF3  084B               	movf	??_receive,w
  5813  0FF4  00C5               	movwf	receive_handler@buf
  5814  0FF5  0863               	movf	receive@dlc,w
  5815  0FF6  00CC               	movwf	??_receive+1
  5816  0FF7  084C               	movf	??_receive+1,w
  5817  0FF8  00C6               	movwf	receive_handler@dlc
  5818  0FF9  0021               	movlb	1	; select bank1
  5819  0FFA  0831               	movf	(_handler+1)^(0+128),w
  5820  0FFB  008A               	movwf	10
  5821  0FFC  0830               	movf	_handler^(0+128),w
  5822  0FFD  000A               	callw
  5823  0FFE  318F               	pagesel	$
  5824  0FFF  0008               	return
  5825  1000                     __end_of_receive:	
  5826                           
  5827                           	psect	text8
  5828  0E13                     __ptext8:	
  5829 ;; *************** function _receive_handler *****************
  5830 ;; Defined at:
  5831 ;;		line 54 in file "main.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  sid             2   35[BANK0 ] unsigned int 
  5834 ;;  buf             1   37[BANK0 ] PTR unsigned char 
  5835 ;;		 -> receive@rx_buf(15), 
  5836 ;;  dlc             1   38[BANK0 ] unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  i               1   42[BANK0 ] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5848 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;Total ram usage:        8 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    3
  5855 ;; This function calls:
  5856 ;;		_printf
  5857 ;; This function is called by:
  5858 ;;		_main
  5859 ;;		_receive
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           
  5864                           ;psect for function _receive_handler
  5865  0E13                     _receive_handler:	
  5866                           
  5867                           ;main.c: 55: uint8_t i;
  5868                           ;main.c: 56: if (run_mode == 1u) {
  5869                           
  5870                           ;incstack = 0
  5871                           ; Regs used in _receive_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5872  0E13  0021               	movlb	1	; select bank1
  5873  0E14  0364               	decf	_run_mode^(0+128),w
  5874  0E15  1D03               	btfss	3,2
  5875  0E16  2E51               	goto	l2534
  5876                           
  5877                           ;main.c: 57: printf("r%03X%d", sid, dlc);
  5878  0E17  30B1               	movlw	low (STR_1| (0+32768))
  5879  0E18  0020               	movlb	0	; select bank0
  5880  0E19  00A2               	movwf	printf@f
  5881  0E1A  3094               	movlw	high (STR_1| (0+32768))
  5882  0E1B  00A3               	movwf	printf@f+1
  5883  0E1C  0844               	movf	receive_handler@sid+1,w
  5884  0E1D  00A5               	movwf	?_printf+3
  5885  0E1E  0843               	movf	receive_handler@sid,w
  5886  0E1F  00A4               	movwf	?_printf+2
  5887  0E20  0846               	movf	receive_handler@dlc,w
  5888  0E21  00C7               	movwf	??_receive_handler
  5889  0E22  01C8               	clrf	??_receive_handler+1
  5890  0E23  0847               	movf	??_receive_handler,w
  5891  0E24  00A6               	movwf	?_printf+4
  5892  0E25  0848               	movf	??_receive_handler+1,w
  5893  0E26  00A7               	movwf	?_printf+5
  5894  0E27  3185  25A5  318E   	fcall	_printf
  5895                           
  5896                           ;main.c: 58: for(i=0; i<dlc; i++) {
  5897  0E2A  0020               	movlb	0	; select bank0
  5898  0E2B  01CA               	clrf	receive_handler@i
  5899  0E2C                     l2530:	
  5900  0E2C  0846               	movf	receive_handler@dlc,w
  5901  0E2D  024A               	subwf	receive_handler@i,w
  5902  0E2E  1803               	btfsc	3,0
  5903  0E2F  2E4A               	goto	l2532
  5904                           
  5905                           ;main.c: 59: printf("%02X", buf[i]);
  5906  0E30  30DE               	movlw	low (STR_2| (0+32768))
  5907  0E31  00A2               	movwf	printf@f
  5908  0E32  3094               	movlw	high (STR_2| (0+32768))
  5909  0E33  00A3               	movwf	printf@f+1
  5910  0E34  084A               	movf	receive_handler@i,w
  5911  0E35  0745               	addwf	receive_handler@buf,w
  5912  0E36  00C7               	movwf	??_receive_handler
  5913  0E37  0847               	movf	??_receive_handler,w
  5914  0E38  0086               	movwf	6
  5915  0E39  0187               	clrf	7
  5916  0E3A  0801               	movf	1,w
  5917  0E3B  00C8               	movwf	??_receive_handler+1
  5918  0E3C  01C9               	clrf	??_receive_handler+2
  5919  0E3D  0848               	movf	??_receive_handler+1,w
  5920  0E3E  00A4               	movwf	?_printf+2
  5921  0E3F  0849               	movf	??_receive_handler+2,w
  5922  0E40  00A5               	movwf	?_printf+3
  5923  0E41  3185  25A5  318E   	fcall	_printf
  5924  0E44  3001               	movlw	1
  5925  0E45  0020               	movlb	0	; select bank0
  5926  0E46  00C7               	movwf	??_receive_handler
  5927  0E47  0847               	movf	??_receive_handler,w
  5928  0E48  07CA               	addwf	receive_handler@i,f
  5929  0E49  2E2C               	goto	l2530
  5930  0E4A                     l2532:	
  5931                           
  5932                           ;main.c: 60: }
  5933                           ;main.c: 61: printf("\n");
  5934  0E4A  30DC               	movlw	low ((STR_43+3)| (0+32768))
  5935  0E4B  00A2               	movwf	printf@f
  5936  0E4C  3094               	movlw	high ((STR_43+3)| (0+32768))
  5937  0E4D  00A3               	movwf	printf@f+1
  5938  0E4E  3185  25A5         	fcall	_printf
  5939                           
  5940                           ;main.c: 62: } else {
  5941  0E50  0008               	return
  5942  0E51                     l2534:	
  5943                           
  5944                           ;main.c: 63: if (output_format.with_sid) {
  5945  0E51  0020               	movlb	0	; select bank0
  5946  0E52  086D               	movf	_output_format,w
  5947  0E53  1903               	btfsc	3,2
  5948  0E54  2E64               	goto	l2538
  5949                           
  5950                           ;main.c: 64: printf("%d,%s\n", sid, buf);
  5951  0E55  30C0               	movlw	low (STR_4| (0+32768))
  5952  0E56  00A2               	movwf	printf@f
  5953  0E57  3094               	movlw	high (STR_4| (0+32768))
  5954  0E58  00A3               	movwf	printf@f+1
  5955  0E59  0844               	movf	receive_handler@sid+1,w
  5956  0E5A  00A5               	movwf	?_printf+3
  5957  0E5B  0843               	movf	receive_handler@sid,w
  5958  0E5C  00A4               	movwf	?_printf+2
  5959  0E5D  0845               	movf	receive_handler@buf,w
  5960  0E5E  00A6               	movwf	low ((?_printf| 0+4))
  5961  0E5F  3000               	movlw	0
  5962  0E60  00A7               	movwf	(low ((?_printf| 0+4))+1)
  5963  0E61  3185  25A5         	fcall	_printf
  5964                           
  5965                           ;main.c: 65: } else if (output_format.hex_output) {
  5966  0E63  0008               	return
  5967  0E64                     l2538:	
  5968  0E64  0020               	movlb	0	; select bank0
  5969  0E65  086E               	movf	_output_format+1,w
  5970  0E66  1903               	btfsc	3,2
  5971  0E67  2E9A               	goto	l2552
  5972                           
  5973                           ;main.c: 66: printf("%03x:", sid);
  5974  0E68  30CD               	movlw	low (STR_5| (0+32768))
  5975  0E69  00A2               	movwf	printf@f
  5976  0E6A  3094               	movlw	high (STR_5| (0+32768))
  5977  0E6B  00A3               	movwf	printf@f+1
  5978  0E6C  0844               	movf	receive_handler@sid+1,w
  5979  0E6D  00A5               	movwf	?_printf+3
  5980  0E6E  0843               	movf	receive_handler@sid,w
  5981  0E6F  00A4               	movwf	?_printf+2
  5982  0E70  3185  25A5  318E   	fcall	_printf
  5983                           
  5984                           ;main.c: 67: for(i=0; i<dlc; i++) {
  5985  0E73  0020               	movlb	0	; select bank0
  5986  0E74  01CA               	clrf	receive_handler@i
  5987  0E75                     l2548:	
  5988  0E75  0846               	movf	receive_handler@dlc,w
  5989  0E76  024A               	subwf	receive_handler@i,w
  5990  0E77  1803               	btfsc	3,0
  5991  0E78  2E93               	goto	l2550
  5992                           
  5993                           ;main.c: 68: printf(" %02x", buf[i]);
  5994  0E79  30D3               	movlw	low (STR_6| (0+32768))
  5995  0E7A  00A2               	movwf	printf@f
  5996  0E7B  3094               	movlw	high (STR_6| (0+32768))
  5997  0E7C  00A3               	movwf	printf@f+1
  5998  0E7D  084A               	movf	receive_handler@i,w
  5999  0E7E  0745               	addwf	receive_handler@buf,w
  6000  0E7F  00C7               	movwf	??_receive_handler
  6001  0E80  0847               	movf	??_receive_handler,w
  6002  0E81  0086               	movwf	6
  6003  0E82  0187               	clrf	7
  6004  0E83  0801               	movf	1,w
  6005  0E84  00C8               	movwf	??_receive_handler+1
  6006  0E85  01C9               	clrf	??_receive_handler+2
  6007  0E86  0848               	movf	??_receive_handler+1,w
  6008  0E87  00A4               	movwf	?_printf+2
  6009  0E88  0849               	movf	??_receive_handler+2,w
  6010  0E89  00A5               	movwf	?_printf+3
  6011  0E8A  3185  25A5  318E   	fcall	_printf
  6012  0E8D  3001               	movlw	1
  6013  0E8E  0020               	movlb	0	; select bank0
  6014  0E8F  00C7               	movwf	??_receive_handler
  6015  0E90  0847               	movf	??_receive_handler,w
  6016  0E91  07CA               	addwf	receive_handler@i,f
  6017  0E92  2E75               	goto	l2548
  6018  0E93                     l2550:	
  6019                           
  6020                           ;main.c: 69: }
  6021                           ;main.c: 70: printf("\n");
  6022  0E93  30DC               	movlw	low ((STR_43+3)| (0+32768))
  6023  0E94  00A2               	movwf	printf@f
  6024  0E95  3094               	movlw	high ((STR_43+3)| (0+32768))
  6025  0E96  00A3               	movwf	printf@f+1
  6026  0E97  3185  25A5         	fcall	_printf
  6027                           
  6028                           ;main.c: 71: } else {
  6029  0E99  0008               	return
  6030  0E9A                     l2552:	
  6031                           
  6032                           ;main.c: 72: printf("%s\n", buf);
  6033  0E9A  3040               	movlw	low ((STR_40+14)| (0+32768))
  6034  0E9B  0020               	movlb	0	; select bank0
  6035  0E9C  00A2               	movwf	printf@f
  6036  0E9D  3093               	movlw	high ((STR_40+14)| (0+32768))
  6037  0E9E  00A3               	movwf	printf@f+1
  6038  0E9F  0845               	movf	receive_handler@buf,w
  6039  0EA0  00A4               	movwf	low ((?_printf| 0+2))
  6040  0EA1  3000               	movlw	0
  6041  0EA2  00A5               	movwf	(low ((?_printf| 0+2))+1)
  6042  0EA3  3185  25A5         	fcall	_printf
  6043  0EA5  0008               	return
  6044  0EA6                     __end_of_receive_handler:	
  6045                           
  6046                           	psect	text9
  6047  0EA6                     __ptext9:	
  6048 ;; *************** function _can_set_mask *****************
  6049 ;; Defined at:
  6050 ;;		line 122 in file "mcp2515.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  cmd             1    wreg     unsigned char 
  6053 ;;  n               1   39[BANK0 ] unsigned char 
  6054 ;;  mask            2   40[BANK0 ] unsigned int 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  cmd             1   50[BANK0 ] unsigned char 
  6057 ;;  mask_sidl       1   52[BANK0 ] unsigned char 
  6058 ;;  mask_sidh       1   51[BANK0 ] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6068 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;Total ram usage:       14 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    4
  6075 ;; This function calls:
  6076 ;;		_SPI_exchange
  6077 ;;		_abort_pending_transmissions
  6078 ;;		_can_ope_mode
  6079 ;;		_printf
  6080 ;; This function is called by:
  6081 ;;		_main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _can_set_mask
  6087  0EA6                     _can_set_mask:	
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _can_set_mask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6091                           ;can_set_mask@cmd stored from wreg
  6092  0EA6  0020               	movlb	0	; select bank0
  6093  0EA7  00D2               	movwf	can_set_mask@cmd
  6094                           
  6095                           ;mcp2515.c: 123: can_ope_mode(0b10000000u);
  6096  0EA8  3080               	movlw	128
  6097  0EA9  318C  246C  318E   	fcall	_can_ope_mode
  6098                           
  6099                           ;mcp2515.c: 124: abort_pending_transmissions();
  6100  0EAC  318A  22A2  318E   	fcall	_abort_pending_transmissions
  6101                           
  6102                           ;mcp2515.c: 125: mask = (mask > 0b0000011111111111u)? 0b0000011111111111u: mask;
  6103  0EAF  3008               	movlw	8
  6104  0EB0  0020               	movlb	0	; select bank0
  6105  0EB1  0249               	subwf	can_set_mask@mask+1,w
  6106  0EB2  3000               	movlw	0
  6107  0EB3  1903               	skipnz
  6108  0EB4  0248               	subwf	can_set_mask@mask,w
  6109  0EB5  1C03               	btfss	3,0
  6110  0EB6  2EBB               	goto	l3016
  6111  0EB7  30FF               	movlw	255
  6112  0EB8  00C8               	movwf	can_set_mask@mask
  6113  0EB9  3007               	movlw	7
  6114  0EBA  00C9               	movwf	can_set_mask@mask+1
  6115  0EBB                     l3016:	
  6116                           
  6117                           ;mcp2515.c: 126: uint8_t mask_sidh = ((uint8_t)((mask >> 3) & 0x00ffu));
  6118  0EBB  0849               	movf	can_set_mask@mask+1,w
  6119  0EBC  00CB               	movwf	??_can_set_mask+1
  6120  0EBD  0848               	movf	can_set_mask@mask,w
  6121  0EBE  00CA               	movwf	??_can_set_mask
  6122  0EBF  36CB               	lsrf	??_can_set_mask+1,f
  6123  0EC0  0CCA               	rrf	??_can_set_mask,f
  6124  0EC1  36CB               	lsrf	??_can_set_mask+1,f
  6125  0EC2  0CCA               	rrf	??_can_set_mask,f
  6126  0EC3  36CB               	lsrf	??_can_set_mask+1,f
  6127  0EC4  0CCA               	rrf	??_can_set_mask,f
  6128  0EC5  084A               	movf	??_can_set_mask,w
  6129  0EC6  00CC               	movwf	??_can_set_mask+2
  6130  0EC7  084C               	movf	??_can_set_mask+2,w
  6131  0EC8  00D3               	movwf	can_set_mask@mask_sidh
  6132                           
  6133                           ;mcp2515.c: 127: uint8_t mask_sidl = ((uint8_t)(((mask & 0x0007u) << 5) & 0x00ffu));
  6134  0EC9  0848               	movf	can_set_mask@mask,w
  6135  0ECA  3907               	andlw	7
  6136  0ECB  00CA               	movwf	??_can_set_mask
  6137  0ECC  3004               	movlw	4
  6138  0ECD                     u2605:	
  6139  0ECD  35CA               	lslf	??_can_set_mask,f
  6140  0ECE  3EFF               	addlw	-1
  6141  0ECF  1D03               	skipz
  6142  0ED0  2ECD               	goto	u2605
  6143  0ED1  354A               	lslf	??_can_set_mask,w
  6144  0ED2  00CB               	movwf	??_can_set_mask+1
  6145  0ED3  084B               	movf	??_can_set_mask+1,w
  6146  0ED4  00D4               	movwf	can_set_mask@mask_sidl
  6147                           
  6148                           ;mcp2515.c: 129: if (cmd == 0u) {
  6149  0ED5  0852               	movf	can_set_mask@cmd,w
  6150  0ED6  1D03               	btfss	3,2
  6151  0ED7  2EE7               	goto	l3028
  6152                           
  6153                           ;mcp2515.c: 130: save_rxmn[n] = mask;
  6154  0ED8  3547               	lslf	can_set_mask@n,w
  6155  0ED9  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  6156  0EDA  0086               	movwf	6
  6157  0EDB  0187               	clrf	7
  6158  0EDC  0848               	movf	can_set_mask@mask,w
  6159  0EDD  3FC0               	movwi [0]fsr1
  6160  0EDE  0849               	movf	can_set_mask@mask+1,w
  6161  0EDF  3FC1               	movwi [1]fsr1
  6162                           
  6163                           ;mcp2515.c: 131: if (mode.debug) printf("mask(%d): %02x %02x\n", n, mask_sidh, mask_sidl
      +                          );
  6164  0EE0  086B               	movf	_mode,w
  6165  0EE1  1903               	btfsc	3,2
  6166  0EE2  2F0F               	goto	l3034
  6167  0EE3  30DF               	movlw	low (STR_28| (0+32768))
  6168  0EE4  00A2               	movwf	printf@f
  6169  0EE5  3092               	movlw	high (STR_28| (0+32768))
  6170  0EE6  2EF6               	goto	L9
  6171  0EE7                     l3028:	
  6172                           ;mcp2515.c: 132: } else {
  6173                           
  6174                           
  6175                           ;mcp2515.c: 133: save_rxfn[n] = mask;
  6176  0EE7  0020               	movlb	0	; select bank0
  6177  0EE8  3547               	lslf	can_set_mask@n,w
  6178  0EE9  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  6179  0EEA  0086               	movwf	6
  6180  0EEB  0187               	clrf	7
  6181  0EEC  0848               	movf	can_set_mask@mask,w
  6182  0EED  3FC0               	movwi [0]fsr1
  6183  0EEE  0849               	movf	can_set_mask@mask+1,w
  6184  0EEF  3FC1               	movwi [1]fsr1
  6185                           
  6186                           ;mcp2515.c: 134: if (mode.debug) printf("filter(%d): %02x %02x\n", n, mask_sidh, mask_si
      +                          dl);
  6187  0EF0  086B               	movf	_mode,w
  6188  0EF1  1903               	btfsc	3,2
  6189  0EF2  2F0F               	goto	l3034
  6190  0EF3  30B2               	movlw	low (STR_29| (0+32768))
  6191  0EF4  00A2               	movwf	printf@f
  6192  0EF5  3092               	movlw	high (STR_29| (0+32768))
  6193  0EF6                     L9:	
  6194  0EF6  00A3               	movwf	printf@f+1
  6195  0EF7  0847               	movf	can_set_mask@n,w
  6196  0EF8  00CA               	movwf	??_can_set_mask
  6197  0EF9  01CB               	clrf	??_can_set_mask+1
  6198  0EFA  084A               	movf	??_can_set_mask,w
  6199  0EFB  00A4               	movwf	?_printf+2
  6200  0EFC  084B               	movf	??_can_set_mask+1,w
  6201  0EFD  00A5               	movwf	?_printf+3
  6202  0EFE  0853               	movf	can_set_mask@mask_sidh,w
  6203  0EFF  00CC               	movwf	??_can_set_mask+2
  6204  0F00  01CD               	clrf	??_can_set_mask+3
  6205  0F01  084C               	movf	??_can_set_mask+2,w
  6206  0F02  00A6               	movwf	?_printf+4
  6207  0F03  084D               	movf	??_can_set_mask+3,w
  6208  0F04  00A7               	movwf	?_printf+5
  6209  0F05  0854               	movf	can_set_mask@mask_sidl,w
  6210  0F06  00CE               	movwf	??_can_set_mask+4
  6211  0F07  01CF               	clrf	??_can_set_mask+5
  6212  0F08  084E               	movf	??_can_set_mask+4,w
  6213  0F09  00A8               	movwf	?_printf+6
  6214  0F0A  084F               	movf	??_can_set_mask+5,w
  6215  0F0B  00A9               	movwf	?_printf+7
  6216  0F0C  3185  25A5  318E   	fcall	_printf
  6217  0F0F                     l3034:	
  6218                           
  6219                           ;mcp2515.c: 135: }
  6220                           ;mcp2515.c: 137: buf[0] = 0b00000010u;
  6221  0F0F  3002               	movlw	2
  6222  0F10  0020               	movlb	0	; select bank0
  6223  0F11  00CA               	movwf	??_can_set_mask
  6224  0F12  084A               	movf	??_can_set_mask,w
  6225  0F13  0021               	movlb	1	; select bank1
  6226  0F14  00B4               	movwf	_buf^(0+128)
  6227                           
  6228                           ;mcp2515.c: 138: buf[1] = (cmd == 0u)? rxmnsidh[n]: rxfnsidh[n];
  6229  0F15  0020               	movlb	0	; select bank0
  6230  0F16  0852               	movf	can_set_mask@cmd,w
  6231  0F17  1903               	btfsc	3,2
  6232  0F18  2F1E               	goto	l3040
  6233  0F19  0847               	movf	can_set_mask@n,w
  6234  0F1A  3EC7               	addlw	low (_rxfnsidh| (0+32768))
  6235  0F1B  0084               	movwf	4
  6236  0F1C  3094               	movlw	high (_rxfnsidh| (0+32768))
  6237  0F1D  2F22               	goto	L8
  6238  0F1E                     l3040:	
  6239  0F1E  0847               	movf	can_set_mask@n,w
  6240  0F1F  3EEE               	addlw	low (_rxmnsidh| (0+32768))
  6241  0F20  0084               	movwf	4
  6242  0F21  3094               	movlw	high (_rxmnsidh| (0+32768))
  6243  0F22                     L8:	
  6244  0F22  1803               	skipnc
  6245  0F23  3E01               	addlw	1
  6246  0F24  0085               	movwf	5
  6247  0F25  0800               	movf	0,w	;code access
  6248  0F26  00CA               	movwf	??_can_set_mask
  6249  0F27  01CB               	clrf	??_can_set_mask+1
  6250  0F28  084A               	movf	??_can_set_mask,w
  6251  0F29  00D0               	movwf	_can_set_mask$655
  6252  0F2A  084B               	movf	??_can_set_mask+1,w
  6253  0F2B  00D1               	movwf	_can_set_mask$655+1
  6254  0F2C  0850               	movf	_can_set_mask$655,w
  6255  0F2D  00CA               	movwf	??_can_set_mask
  6256  0F2E  084A               	movf	??_can_set_mask,w
  6257  0F2F  0021               	movlb	1	; select bank1
  6258  0F30  00B5               	movwf	(_buf^(0+128)+1)
  6259                           
  6260                           ;mcp2515.c: 139: buf[2] = mask_sidh;
  6261  0F31  0020               	movlb	0	; select bank0
  6262  0F32  0853               	movf	can_set_mask@mask_sidh,w
  6263  0F33  00CA               	movwf	??_can_set_mask
  6264  0F34  084A               	movf	??_can_set_mask,w
  6265  0F35  0021               	movlb	1	; select bank1
  6266  0F36  00B6               	movwf	(_buf^(0+128)+2)
  6267                           
  6268                           ;mcp2515.c: 140: buf[3] = mask_sidl;
  6269  0F37  0020               	movlb	0	; select bank0
  6270  0F38  0854               	movf	can_set_mask@mask_sidl,w
  6271  0F39  00CA               	movwf	??_can_set_mask
  6272  0F3A  084A               	movf	??_can_set_mask,w
  6273  0F3B  0021               	movlb	1	; select bank1
  6274  0F3C  00B7               	movwf	(_buf^(0+128)+3)
  6275                           
  6276                           ;mcp2515.c: 141: SPI_exchange(buf, 4);
  6277  0F3D  3004               	movlw	4
  6278  0F3E  0020               	movlb	0	; select bank0
  6279  0F3F  00CA               	movwf	??_can_set_mask
  6280  0F40  084A               	movf	??_can_set_mask,w
  6281  0F41  00F8               	movwf	SPI_exchange@len
  6282  0F42  30B4               	movlw	(low (_buf| 0))& (0+255)
  6283  0F43  318A  2201  318E   	fcall	_SPI_exchange
  6284                           
  6285                           ;mcp2515.c: 143: can_ope_mode(operation_mode);
  6286  0F46  0020               	movlb	0	; select bank0
  6287  0F47  086F               	movf	_operation_mode,w
  6288  0F48  318C  246C         	fcall	_can_ope_mode
  6289  0F4A  0008               	return
  6290  0F4B                     __end_of_can_set_mask:	
  6291                           
  6292                           	psect	text10
  6293  09BE                     __ptext10:	
  6294 ;; *************** function _can_logging_mode *****************
  6295 ;; Defined at:
  6296 ;;		line 30 in file "mcp2515.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  debug           1    wreg     unsigned char 
  6299 ;;  verbose         1    0[COMMON] unsigned char 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  debug           1    2[COMMON] unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6311 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;Total ram usage:        3 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _can_logging_mode
  6326  09BE                     _can_logging_mode:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in _can_logging_mode: [wreg]
  6330                           ;can_logging_mode@debug stored from wreg
  6331  09BE  00F2               	movwf	can_logging_mode@debug
  6332                           
  6333                           ;mcp2515.c: 31: mode.debug = debug;
  6334  09BF  0872               	movf	can_logging_mode@debug,w
  6335  09C0  00F1               	movwf	??_can_logging_mode
  6336  09C1  0871               	movf	??_can_logging_mode,w
  6337  09C2  0020               	movlb	0	; select bank0
  6338  09C3  00EB               	movwf	_mode
  6339                           
  6340                           ;mcp2515.c: 32: mode.verbose = verbose;
  6341  09C4  0870               	movf	can_logging_mode@verbose,w
  6342  09C5  00F1               	movwf	??_can_logging_mode
  6343  09C6  0871               	movf	??_can_logging_mode,w
  6344  09C7  00EC               	movwf	_mode+1
  6345  09C8  0008               	return
  6346  09C9                     __end_of_can_logging_mode:	
  6347                           
  6348                           	psect	text11
  6349  0D88                     __ptext11:	
  6350 ;; *************** function _can_init *****************
  6351 ;; Defined at:
  6352 ;;		line 53 in file "mcp2515.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  receive_hand    2   39[BANK0 ] PTR void 
  6355 ;;		 -> receive_handler(1), 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;		None
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        3 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    4
  6374 ;; This function calls:
  6375 ;;		_SPI_exchange
  6376 ;;		_can_ope_mode
  6377 ;;		_can_set_sid
  6378 ;; This function is called by:
  6379 ;;		_main
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function _can_init
  6385  0D88                     _can_init:	
  6386                           
  6387                           ;mcp2515.c: 54: _delay((unsigned long)((100)*(2000000/4000.0)));
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _can_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6391  0D88  3041               	movlw	65
  6392  0D89  0020               	movlb	0	; select bank0
  6393  0D8A  00C9               	movwf	??_can_init
  6394  0D8B  30EE               	movlw	238
  6395  0D8C                     u2957:	
  6396  0D8C  0B89               	decfsz	9,f
  6397  0D8D  2D8C               	goto	u2957
  6398  0D8E  0BC9               	decfsz	??_can_init,f
  6399  0D8F  2D8C               	goto	u2957
  6400  0D90  0000               	nop
  6401                           
  6402                           ;mcp2515.c: 56: can_set_sid(0);
  6403  0D91  3000               	movlw	0
  6404  0D92  00F0               	movwf	can_set_sid@can_node
  6405  0D93  00F1               	movwf	can_set_sid@can_node+1
  6406  0D94  318A  227E  318D   	fcall	_can_set_sid
  6407                           
  6408                           ;mcp2515.c: 57: handler = receive_handler;
  6409  0D97  0020               	movlb	0	; select bank0
  6410  0D98  0848               	movf	can_init@receive_handler+1,w
  6411  0D99  0021               	movlb	1	; select bank1
  6412  0D9A  00B1               	movwf	(_handler+1)^(0+128)
  6413  0D9B  0020               	movlb	0	; select bank0
  6414  0D9C  0847               	movf	can_init@receive_handler,w
  6415  0D9D  0021               	movlb	1	; select bank1
  6416  0D9E  00B0               	movwf	_handler^(0+128)
  6417                           
  6418                           ;mcp2515.c: 60: buf[0] = 0b11000000u;
  6419  0D9F  30C0               	movlw	192
  6420  0DA0  0020               	movlb	0	; select bank0
  6421  0DA1  00C9               	movwf	??_can_init
  6422  0DA2  0849               	movf	??_can_init,w
  6423  0DA3  0021               	movlb	1	; select bank1
  6424  0DA4  00B4               	movwf	_buf^(0+128)
  6425                           
  6426                           ;mcp2515.c: 61: SPI_exchange(buf, 1);
  6427  0DA5  01F8               	clrf	SPI_exchange@len
  6428  0DA6  0AF8               	incf	SPI_exchange@len,f
  6429  0DA7  30B4               	movlw	(low (_buf| 0))& (0+255)
  6430  0DA8  318A  2201  318D   	fcall	_SPI_exchange
  6431                           
  6432                           ;mcp2515.c: 63: _delay((unsigned long)((2+48)*(2000000/4000000.0)));
  6433  0DAB  3008               	movlw	8
  6434  0DAC                     u2967:	
  6435  0DAC  0B89               	decfsz	9,f
  6436  0DAD  2DAC               	goto	u2967
  6437  0DAE  0000               	nop
  6438                           
  6439                           ;mcp2515.c: 65: buf[0] = 0b00000010u;
  6440  0DAF  3002               	movlw	2
  6441  0DB0  0020               	movlb	0	; select bank0
  6442  0DB1  00C9               	movwf	??_can_init
  6443  0DB2  0849               	movf	??_can_init,w
  6444  0DB3  0021               	movlb	1	; select bank1
  6445  0DB4  00B4               	movwf	_buf^(0+128)
  6446                           
  6447                           ;mcp2515.c: 66: buf[1] = 0x28u;
  6448  0DB5  3028               	movlw	40
  6449  0DB6  0020               	movlb	0	; select bank0
  6450  0DB7  00C9               	movwf	??_can_init
  6451  0DB8  0849               	movf	??_can_init,w
  6452  0DB9  0021               	movlb	1	; select bank1
  6453  0DBA  00B5               	movwf	(_buf^(0+128)+1)
  6454                           
  6455                           ;mcp2515.c: 67: buf[2] = 0b00000101u;
  6456  0DBB  3005               	movlw	5
  6457  0DBC  0020               	movlb	0	; select bank0
  6458  0DBD  00C9               	movwf	??_can_init
  6459  0DBE  0849               	movf	??_can_init,w
  6460  0DBF  0021               	movlb	1	; select bank1
  6461  0DC0  00B6               	movwf	(_buf^(0+128)+2)
  6462                           
  6463                           ;mcp2515.c: 68: buf[3] = 0b11110001u;
  6464  0DC1  30F1               	movlw	241
  6465  0DC2  0020               	movlb	0	; select bank0
  6466  0DC3  00C9               	movwf	??_can_init
  6467  0DC4  0849               	movf	??_can_init,w
  6468  0DC5  0021               	movlb	1	; select bank1
  6469  0DC6  00B7               	movwf	(_buf^(0+128)+3)
  6470                           
  6471                           ;mcp2515.c: 69: buf[4] = 0b01000001u;
  6472  0DC7  3041               	movlw	65
  6473  0DC8  0020               	movlb	0	; select bank0
  6474  0DC9  00C9               	movwf	??_can_init
  6475  0DCA  0849               	movf	??_can_init,w
  6476  0DCB  0021               	movlb	1	; select bank1
  6477  0DCC  00B8               	movwf	(_buf^(0+128)+4)
  6478                           
  6479                           ;mcp2515.c: 70: SPI_exchange(buf, 5);
  6480  0DCD  3005               	movlw	5
  6481  0DCE  0020               	movlb	0	; select bank0
  6482  0DCF  00C9               	movwf	??_can_init
  6483  0DD0  0849               	movf	??_can_init,w
  6484  0DD1  00F8               	movwf	SPI_exchange@len
  6485  0DD2  30B4               	movlw	(low (_buf| 0))& (0+255)
  6486  0DD3  318A  2201  318D   	fcall	_SPI_exchange
  6487                           
  6488                           ;mcp2515.c: 72: buf[0] = 0b00000010u;
  6489  0DD6  3002               	movlw	2
  6490  0DD7  0020               	movlb	0	; select bank0
  6491  0DD8  00C9               	movwf	??_can_init
  6492  0DD9  0849               	movf	??_can_init,w
  6493  0DDA  0021               	movlb	1	; select bank1
  6494  0DDB  00B4               	movwf	_buf^(0+128)
  6495                           
  6496                           ;mcp2515.c: 73: buf[1] = 0x60u;
  6497  0DDC  3060               	movlw	96
  6498  0DDD  0020               	movlb	0	; select bank0
  6499  0DDE  00C9               	movwf	??_can_init
  6500  0DDF  0849               	movf	??_can_init,w
  6501  0DE0  0021               	movlb	1	; select bank1
  6502  0DE1  00B5               	movwf	(_buf^(0+128)+1)
  6503                           
  6504                           ;mcp2515.c: 74: buf[2] = 0b00100100u;
  6505  0DE2  3024               	movlw	36
  6506  0DE3  0020               	movlb	0	; select bank0
  6507  0DE4  00C9               	movwf	??_can_init
  6508  0DE5  0849               	movf	??_can_init,w
  6509  0DE6  0021               	movlb	1	; select bank1
  6510  0DE7  00B6               	movwf	(_buf^(0+128)+2)
  6511                           
  6512                           ;mcp2515.c: 75: SPI_exchange(buf, 3);
  6513  0DE8  3003               	movlw	3
  6514  0DE9  0020               	movlb	0	; select bank0
  6515  0DEA  00C9               	movwf	??_can_init
  6516  0DEB  0849               	movf	??_can_init,w
  6517  0DEC  00F8               	movwf	SPI_exchange@len
  6518  0DED  30B4               	movlw	(low (_buf| 0))& (0+255)
  6519  0DEE  318A  2201  318D   	fcall	_SPI_exchange
  6520                           
  6521                           ;mcp2515.c: 77: buf[0] = 0b00000010u;
  6522  0DF1  3002               	movlw	2
  6523  0DF2  0020               	movlb	0	; select bank0
  6524  0DF3  00C9               	movwf	??_can_init
  6525  0DF4  0849               	movf	??_can_init,w
  6526  0DF5  0021               	movlb	1	; select bank1
  6527  0DF6  00B4               	movwf	_buf^(0+128)
  6528                           
  6529                           ;mcp2515.c: 78: buf[1] = 0x70u;
  6530  0DF7  3070               	movlw	112
  6531  0DF8  0020               	movlb	0	; select bank0
  6532  0DF9  00C9               	movwf	??_can_init
  6533  0DFA  0849               	movf	??_can_init,w
  6534  0DFB  0021               	movlb	1	; select bank1
  6535  0DFC  00B5               	movwf	(_buf^(0+128)+1)
  6536                           
  6537                           ;mcp2515.c: 79: buf[2] = 0b00100000u;
  6538  0DFD  3020               	movlw	32
  6539  0DFE  0020               	movlb	0	; select bank0
  6540  0DFF  00C9               	movwf	??_can_init
  6541  0E00  0849               	movf	??_can_init,w
  6542  0E01  0021               	movlb	1	; select bank1
  6543  0E02  00B6               	movwf	(_buf^(0+128)+2)
  6544                           
  6545                           ;mcp2515.c: 80: SPI_exchange(buf, 3);
  6546  0E03  3003               	movlw	3
  6547  0E04  0020               	movlb	0	; select bank0
  6548  0E05  00C9               	movwf	??_can_init
  6549  0E06  0849               	movf	??_can_init,w
  6550  0E07  00F8               	movwf	SPI_exchange@len
  6551  0E08  30B4               	movlw	(low (_buf| 0))& (0+255)
  6552  0E09  318A  2201  318D   	fcall	_SPI_exchange
  6553                           
  6554                           ;mcp2515.c: 82: mode.debug = 0;
  6555  0E0C  0020               	movlb	0	; select bank0
  6556  0E0D  01EB               	clrf	_mode
  6557                           
  6558                           ;mcp2515.c: 83: mode.verbose = 0;
  6559  0E0E  01EC               	clrf	_mode+1
  6560                           
  6561                           ;mcp2515.c: 85: can_ope_mode(0b00000000u);
  6562  0E0F  3000               	movlw	0
  6563  0E10  318C  246C         	fcall	_can_ope_mode
  6564  0E12  0008               	return
  6565  0E13                     __end_of_can_init:	
  6566                           
  6567                           	psect	text12
  6568  0A7E                     __ptext12:	
  6569 ;; *************** function _can_set_sid *****************
  6570 ;; Defined at:
  6571 ;;		line 43 in file "mcp2515.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  can_node        2    0[COMMON] unsigned int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  sidl            1    6[COMMON] unsigned char 
  6576 ;;  sidh            1    5[COMMON] unsigned char 
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;Total ram usage:        7 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_slcan_send
  6596 ;;		_main
  6597 ;;		_can_init
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _can_set_sid
  6603  0A7E                     _can_set_sid:	
  6604                           
  6605                           ;mcp2515.c: 44: uint8_t sidh = (can_node >> 3) & 0x00ff;
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _can_set_sid: [wreg+status,2+status,0]
  6609  0A7E  0871               	movf	can_set_sid@can_node+1,w
  6610  0A7F  00F3               	movwf	??_can_set_sid+1
  6611  0A80  0870               	movf	can_set_sid@can_node,w
  6612  0A81  00F2               	movwf	??_can_set_sid
  6613  0A82  36F3               	lsrf	??_can_set_sid+1,f
  6614  0A83  0CF2               	rrf	??_can_set_sid,f
  6615  0A84  36F3               	lsrf	??_can_set_sid+1,f
  6616  0A85  0CF2               	rrf	??_can_set_sid,f
  6617  0A86  36F3               	lsrf	??_can_set_sid+1,f
  6618  0A87  0CF2               	rrf	??_can_set_sid,f
  6619  0A88  0872               	movf	??_can_set_sid,w
  6620  0A89  00F4               	movwf	??_can_set_sid+2
  6621  0A8A  0874               	movf	??_can_set_sid+2,w
  6622  0A8B  00F5               	movwf	can_set_sid@sidh
  6623                           
  6624                           ;mcp2515.c: 45: uint8_t sidl = (can_node << 5) & 0x00e0;
  6625  0A8C  0870               	movf	can_set_sid@can_node,w
  6626  0A8D  00F2               	movwf	??_can_set_sid
  6627  0A8E  3004               	movlw	4
  6628  0A8F                     u2185:	
  6629  0A8F  35F2               	lslf	??_can_set_sid,f
  6630  0A90  3EFF               	addlw	-1
  6631  0A91  1D03               	skipz
  6632  0A92  2A8F               	goto	u2185
  6633  0A93  3572               	lslf	??_can_set_sid,w
  6634  0A94  39E0               	andlw	224
  6635  0A95  00F3               	movwf	??_can_set_sid+1
  6636  0A96  0873               	movf	??_can_set_sid+1,w
  6637  0A97  00F6               	movwf	can_set_sid@sidl
  6638                           
  6639                           ;mcp2515.c: 46: sid.sidh = sidh;
  6640  0A98  0875               	movf	can_set_sid@sidh,w
  6641  0A99  00F2               	movwf	??_can_set_sid
  6642  0A9A  0872               	movf	??_can_set_sid,w
  6643  0A9B  0021               	movlb	1	; select bank1
  6644  0A9C  00B2               	movwf	_sid^(0+128)
  6645                           
  6646                           ;mcp2515.c: 47: sid.sidl = sidl;
  6647  0A9D  0876               	movf	can_set_sid@sidl,w
  6648  0A9E  00F2               	movwf	??_can_set_sid
  6649  0A9F  0872               	movf	??_can_set_sid,w
  6650  0AA0  00B3               	movwf	(_sid^(0+128)+1)
  6651  0AA1  0008               	return
  6652  0AA2                     __end_of_can_set_sid:	
  6653                           
  6654                           	psect	text13
  6655  010C                     __ptext13:	
  6656 ;; *************** function _can_dump_registers *****************
  6657 ;; Defined at:
  6658 ;;		line 356 in file "mcp2515.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      void 
  6665 ;; Registers used:
  6666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        2 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    4
  6679 ;; This function calls:
  6680 ;;		_printf
  6681 ;;		_read_register
  6682 ;; This function is called by:
  6683 ;;		_main
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _can_dump_registers
  6689  010C                     _can_dump_registers:	
  6690                           
  6691                           ;mcp2515.c: 357: printf("---\n");
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _can_dump_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6695  010C  30D9               	movlw	low (STR_43| (0+32768))
  6696  010D  0020               	movlb	0	; select bank0
  6697  010E  00A2               	movwf	printf@f
  6698  010F  3094               	movlw	high (STR_43| (0+32768))
  6699  0110  00A3               	movwf	printf@f+1
  6700  0111  3185  25A5  3181   	fcall	_printf
  6701                           
  6702                           ;mcp2515.c: 358: printf("SIDH: %02x\n", sid.sidh);
  6703  0114  306B               	movlw	low ((STR_30+5)| (0+32768))
  6704  0115  0020               	movlb	0	; select bank0
  6705  0116  00A2               	movwf	printf@f
  6706  0117  3093               	movlw	high ((STR_30+5)| (0+32768))
  6707  0118  00A3               	movwf	printf@f+1
  6708  0119  0021               	movlb	1	; select bank1
  6709  011A  0832               	movf	_sid^(0+128),w
  6710  011B  0020               	movlb	0	; select bank0
  6711  011C  00C3               	movwf	??_can_dump_registers
  6712  011D  01C4               	clrf	??_can_dump_registers+1
  6713  011E  0843               	movf	??_can_dump_registers,w
  6714  011F  00A4               	movwf	?_printf+2
  6715  0120  0844               	movf	??_can_dump_registers+1,w
  6716  0121  00A5               	movwf	?_printf+3
  6717  0122  3185  25A5  3181   	fcall	_printf
  6718                           
  6719                           ;mcp2515.c: 359: printf("SIDL: %02x\n", sid.sidl);
  6720  0125  308D               	movlw	low ((STR_31+5)| (0+32768))
  6721  0126  0020               	movlb	0	; select bank0
  6722  0127  00A2               	movwf	printf@f
  6723  0128  3093               	movlw	high ((STR_31+5)| (0+32768))
  6724  0129  00A3               	movwf	printf@f+1
  6725  012A  0021               	movlb	1	; select bank1
  6726  012B  0833               	movf	(_sid^(0+128)+1),w
  6727  012C  0020               	movlb	0	; select bank0
  6728  012D  00C3               	movwf	??_can_dump_registers
  6729  012E  01C4               	clrf	??_can_dump_registers+1
  6730  012F  0843               	movf	??_can_dump_registers,w
  6731  0130  00A4               	movwf	?_printf+2
  6732  0131  0844               	movf	??_can_dump_registers+1,w
  6733  0132  00A5               	movwf	?_printf+3
  6734  0133  3185  25A5  3181   	fcall	_printf
  6735                           
  6736                           ;mcp2515.c: 360: printf("\n");
  6737  0136  30DC               	movlw	low ((STR_43+3)| (0+32768))
  6738  0137  0020               	movlb	0	; select bank0
  6739  0138  00A2               	movwf	printf@f
  6740  0139  3094               	movlw	high ((STR_43+3)| (0+32768))
  6741  013A  00A3               	movwf	printf@f+1
  6742  013B  3185  25A5  3181   	fcall	_printf
  6743                           
  6744                           ;mcp2515.c: 362: printf("CNF1: %02x\n", read_register(0x2au));
  6745  013E  307B               	movlw	low (STR_51| (0+32768))
  6746  013F  0020               	movlb	0	; select bank0
  6747  0140  00A2               	movwf	printf@f
  6748  0141  3094               	movlw	high (STR_51| (0+32768))
  6749  0142  00A3               	movwf	printf@f+1
  6750  0143  302A               	movlw	42
  6751  0144  318A  222D  3181   	fcall	_read_register
  6752  0147  0020               	movlb	0	; select bank0
  6753  0148  00C3               	movwf	??_can_dump_registers
  6754  0149  01C4               	clrf	??_can_dump_registers+1
  6755  014A  0843               	movf	??_can_dump_registers,w
  6756  014B  00A4               	movwf	?_printf+2
  6757  014C  0844               	movf	??_can_dump_registers+1,w
  6758  014D  00A5               	movwf	?_printf+3
  6759  014E  3185  25A5  3181   	fcall	_printf
  6760                           
  6761                           ;mcp2515.c: 363: printf("CNF2: %02x\n", read_register(0x29u));
  6762  0151  3087               	movlw	low (STR_52| (0+32768))
  6763  0152  0020               	movlb	0	; select bank0
  6764  0153  00A2               	movwf	printf@f
  6765  0154  3094               	movlw	high (STR_52| (0+32768))
  6766  0155  00A3               	movwf	printf@f+1
  6767  0156  3029               	movlw	41
  6768  0157  318A  222D  3181   	fcall	_read_register
  6769  015A  0020               	movlb	0	; select bank0
  6770  015B  00C3               	movwf	??_can_dump_registers
  6771  015C  01C4               	clrf	??_can_dump_registers+1
  6772  015D  0843               	movf	??_can_dump_registers,w
  6773  015E  00A4               	movwf	?_printf+2
  6774  015F  0844               	movf	??_can_dump_registers+1,w
  6775  0160  00A5               	movwf	?_printf+3
  6776  0161  3185  25A5  3181   	fcall	_printf
  6777                           
  6778                           ;mcp2515.c: 364: printf("CNF3: %02x\n", read_register(0x28u));
  6779  0164  3093               	movlw	low (STR_53| (0+32768))
  6780  0165  0020               	movlb	0	; select bank0
  6781  0166  00A2               	movwf	printf@f
  6782  0167  3094               	movlw	high (STR_53| (0+32768))
  6783  0168  00A3               	movwf	printf@f+1
  6784  0169  3028               	movlw	40
  6785  016A  318A  222D  3181   	fcall	_read_register
  6786  016D  0020               	movlb	0	; select bank0
  6787  016E  00C3               	movwf	??_can_dump_registers
  6788  016F  01C4               	clrf	??_can_dump_registers+1
  6789  0170  0843               	movf	??_can_dump_registers,w
  6790  0171  00A4               	movwf	?_printf+2
  6791  0172  0844               	movf	??_can_dump_registers+1,w
  6792  0173  00A5               	movwf	?_printf+3
  6793  0174  3185  25A5  3181   	fcall	_printf
  6794                           
  6795                           ;mcp2515.c: 365: printf("\n");
  6796  0177  30DC               	movlw	low ((STR_43+3)| (0+32768))
  6797  0178  0020               	movlb	0	; select bank0
  6798  0179  00A2               	movwf	printf@f
  6799  017A  3094               	movlw	high ((STR_43+3)| (0+32768))
  6800  017B  00A3               	movwf	printf@f+1
  6801  017C  3185  25A5  3181   	fcall	_printf
  6802                           
  6803                           ;mcp2515.c: 367: printf("TXB0CTRL: %02x\n", read_register(0x30u));
  6804  017F  30CA               	movlw	low (STR_55| (0+32768))
  6805  0180  0020               	movlb	0	; select bank0
  6806  0181  00A2               	movwf	printf@f
  6807  0182  3093               	movlw	high (STR_55| (0+32768))
  6808  0183  00A3               	movwf	printf@f+1
  6809  0184  3030               	movlw	48
  6810  0185  318A  222D  3181   	fcall	_read_register
  6811  0188  0020               	movlb	0	; select bank0
  6812  0189  00C3               	movwf	??_can_dump_registers
  6813  018A  01C4               	clrf	??_can_dump_registers+1
  6814  018B  0843               	movf	??_can_dump_registers,w
  6815  018C  00A4               	movwf	?_printf+2
  6816  018D  0844               	movf	??_can_dump_registers+1,w
  6817  018E  00A5               	movwf	?_printf+3
  6818  018F  3185  25A5  3181   	fcall	_printf
  6819                           
  6820                           ;mcp2515.c: 368: printf("TXB1CTRL: %02x\n", read_register(0x40u));
  6821  0192  30EA               	movlw	low (STR_56| (0+32768))
  6822  0193  0020               	movlb	0	; select bank0
  6823  0194  00A2               	movwf	printf@f
  6824  0195  3093               	movlw	high (STR_56| (0+32768))
  6825  0196  00A3               	movwf	printf@f+1
  6826  0197  3040               	movlw	64
  6827  0198  318A  222D  3181   	fcall	_read_register
  6828  019B  0020               	movlb	0	; select bank0
  6829  019C  00C3               	movwf	??_can_dump_registers
  6830  019D  01C4               	clrf	??_can_dump_registers+1
  6831  019E  0843               	movf	??_can_dump_registers,w
  6832  019F  00A4               	movwf	?_printf+2
  6833  01A0  0844               	movf	??_can_dump_registers+1,w
  6834  01A1  00A5               	movwf	?_printf+3
  6835  01A2  3185  25A5  3181   	fcall	_printf
  6836                           
  6837                           ;mcp2515.c: 369: printf("TXB2CTRL: %02x\n", read_register(0x50u));
  6838  01A5  30FA               	movlw	low (STR_57| (0+32768))
  6839  01A6  0020               	movlb	0	; select bank0
  6840  01A7  00A2               	movwf	printf@f
  6841  01A8  3093               	movlw	high (STR_57| (0+32768))
  6842  01A9  00A3               	movwf	printf@f+1
  6843  01AA  3050               	movlw	80
  6844  01AB  318A  222D  3181   	fcall	_read_register
  6845  01AE  0020               	movlb	0	; select bank0
  6846  01AF  00C3               	movwf	??_can_dump_registers
  6847  01B0  01C4               	clrf	??_can_dump_registers+1
  6848  01B1  0843               	movf	??_can_dump_registers,w
  6849  01B2  00A4               	movwf	?_printf+2
  6850  01B3  0844               	movf	??_can_dump_registers+1,w
  6851  01B4  00A5               	movwf	?_printf+3
  6852  01B5  3185  25A5  3181   	fcall	_printf
  6853                           
  6854                           ;mcp2515.c: 370: printf("\n");
  6855  01B8  30DC               	movlw	low ((STR_43+3)| (0+32768))
  6856  01B9  0020               	movlb	0	; select bank0
  6857  01BA  00A2               	movwf	printf@f
  6858  01BB  3094               	movlw	high ((STR_43+3)| (0+32768))
  6859  01BC  00A3               	movwf	printf@f+1
  6860  01BD  3185  25A5  3181   	fcall	_printf
  6861                           
  6862                           ;mcp2515.c: 372: printf("RXB0CTRL: %02x\n", read_register(0x60u));
  6863  01C0  30BA               	movlw	low (STR_59| (0+32768))
  6864  01C1  0020               	movlb	0	; select bank0
  6865  01C2  00A2               	movwf	printf@f
  6866  01C3  3093               	movlw	high (STR_59| (0+32768))
  6867  01C4  00A3               	movwf	printf@f+1
  6868  01C5  3060               	movlw	96
  6869  01C6  318A  222D  3181   	fcall	_read_register
  6870  01C9  0020               	movlb	0	; select bank0
  6871  01CA  00C3               	movwf	??_can_dump_registers
  6872  01CB  01C4               	clrf	??_can_dump_registers+1
  6873  01CC  0843               	movf	??_can_dump_registers,w
  6874  01CD  00A4               	movwf	?_printf+2
  6875  01CE  0844               	movf	??_can_dump_registers+1,w
  6876  01CF  00A5               	movwf	?_printf+3
  6877  01D0  3185  25A5  3181   	fcall	_printf
  6878                           
  6879                           ;mcp2515.c: 373: printf("RXB1CTRL: %02x\n", read_register(0x70u));
  6880  01D3  30DA               	movlw	low (STR_60| (0+32768))
  6881  01D4  0020               	movlb	0	; select bank0
  6882  01D5  00A2               	movwf	printf@f
  6883  01D6  3093               	movlw	high (STR_60| (0+32768))
  6884  01D7  00A3               	movwf	printf@f+1
  6885  01D8  3070               	movlw	112
  6886  01D9  318A  222D  3181   	fcall	_read_register
  6887  01DC  0020               	movlb	0	; select bank0
  6888  01DD  00C3               	movwf	??_can_dump_registers
  6889  01DE  01C4               	clrf	??_can_dump_registers+1
  6890  01DF  0843               	movf	??_can_dump_registers,w
  6891  01E0  00A4               	movwf	?_printf+2
  6892  01E1  0844               	movf	??_can_dump_registers+1,w
  6893  01E2  00A5               	movwf	?_printf+3
  6894  01E3  3185  25A5  3181   	fcall	_printf
  6895                           
  6896                           ;mcp2515.c: 374: printf("\n");
  6897  01E6  30DC               	movlw	low ((STR_43+3)| (0+32768))
  6898  01E7  0020               	movlb	0	; select bank0
  6899  01E8  00A2               	movwf	printf@f
  6900  01E9  3094               	movlw	high ((STR_43+3)| (0+32768))
  6901  01EA  00A3               	movwf	printf@f+1
  6902  01EB  3185  25A5  3181   	fcall	_printf
  6903                           
  6904                           ;mcp2515.c: 376: printf("CANCTRL: %02x\n", read_register(0x0fu));
  6905  01EE  3019               	movlw	low (STR_62| (0+32768))
  6906  01EF  0020               	movlb	0	; select bank0
  6907  01F0  00A2               	movwf	printf@f
  6908  01F1  3094               	movlw	high (STR_62| (0+32768))
  6909  01F2  00A3               	movwf	printf@f+1
  6910  01F3  300F               	movlw	15
  6911  01F4  318A  222D  3181   	fcall	_read_register
  6912  01F7  0020               	movlb	0	; select bank0
  6913  01F8  00C3               	movwf	??_can_dump_registers
  6914  01F9  01C4               	clrf	??_can_dump_registers+1
  6915  01FA  0843               	movf	??_can_dump_registers,w
  6916  01FB  00A4               	movwf	?_printf+2
  6917  01FC  0844               	movf	??_can_dump_registers+1,w
  6918  01FD  00A5               	movwf	?_printf+3
  6919  01FE  3185  25A5  3181   	fcall	_printf
  6920                           
  6921                           ;mcp2515.c: 377: printf("CANSTAT: %02x\n", read_register(0x0e));
  6922  0201  3028               	movlw	low (STR_27| (0+32768))
  6923  0202  0020               	movlb	0	; select bank0
  6924  0203  00A2               	movwf	printf@f
  6925  0204  3094               	movlw	high (STR_27| (0+32768))
  6926  0205  00A3               	movwf	printf@f+1
  6927  0206  300E               	movlw	14
  6928  0207  318A  222D  3181   	fcall	_read_register
  6929  020A  0020               	movlb	0	; select bank0
  6930  020B  00C3               	movwf	??_can_dump_registers
  6931  020C  01C4               	clrf	??_can_dump_registers+1
  6932  020D  0843               	movf	??_can_dump_registers,w
  6933  020E  00A4               	movwf	?_printf+2
  6934  020F  0844               	movf	??_can_dump_registers+1,w
  6935  0210  00A5               	movwf	?_printf+3
  6936  0211  3185  25A5  3181   	fcall	_printf
  6937                           
  6938                           ;mcp2515.c: 378: printf("---\n");
  6939  0214  30D9               	movlw	low (STR_43| (0+32768))
  6940  0215  0020               	movlb	0	; select bank0
  6941  0216  00A2               	movwf	printf@f
  6942  0217  3094               	movlw	high (STR_43| (0+32768))
  6943  0218  00A3               	movwf	printf@f+1
  6944  0219  3185  25A5         	fcall	_printf
  6945  021B  0008               	return
  6946  021C                     __end_of_can_dump_registers:	
  6947                           
  6948                           	psect	text14
  6949  0A2D                     __ptext14:	
  6950 ;; *************** function _read_register *****************
  6951 ;; Defined at:
  6952 ;;		line 326 in file "mcp2515.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  addr            1    wreg     unsigned char 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  addr            1    1[BANK0 ] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      unsigned char 
  6959 ;; Registers used:
  6960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;Total ram usage:        2 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:    3
  6973 ;; This function calls:
  6974 ;;		_SPI_exchange
  6975 ;; This function is called by:
  6976 ;;		_can_dump_registers
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _read_register
  6982  0A2D                     _read_register:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _read_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6986                           ;read_register@addr stored from wreg
  6987  0A2D  0020               	movlb	0	; select bank0
  6988  0A2E  00A1               	movwf	read_register@addr
  6989                           
  6990                           ;mcp2515.c: 327: buf[0] = 0b00000011u;
  6991  0A2F  3003               	movlw	3
  6992  0A30  00A0               	movwf	??_read_register
  6993  0A31  0820               	movf	??_read_register,w
  6994  0A32  0021               	movlb	1	; select bank1
  6995  0A33  00B4               	movwf	_buf^(0+128)
  6996                           
  6997                           ;mcp2515.c: 328: buf[1] = addr;
  6998  0A34  0020               	movlb	0	; select bank0
  6999  0A35  0821               	movf	read_register@addr,w
  7000  0A36  00A0               	movwf	??_read_register
  7001  0A37  0820               	movf	??_read_register,w
  7002  0A38  0021               	movlb	1	; select bank1
  7003  0A39  00B5               	movwf	(_buf^(0+128)+1)
  7004                           
  7005                           ;mcp2515.c: 329: buf[2] = 0x00;
  7006  0A3A  01B6               	clrf	(_buf^(0+128)+2)
  7007                           
  7008                           ;mcp2515.c: 330: SPI_exchange(buf, 3);
  7009  0A3B  3003               	movlw	3
  7010  0A3C  0020               	movlb	0	; select bank0
  7011  0A3D  00A0               	movwf	??_read_register
  7012  0A3E  0820               	movf	??_read_register,w
  7013  0A3F  00F8               	movwf	SPI_exchange@len
  7014  0A40  30B4               	movlw	(low (_buf| 0))& (0+255)
  7015  0A41  318A  2201         	fcall	_SPI_exchange
  7016                           
  7017                           ;mcp2515.c: 331: return buf[2];
  7018  0A43  0021               	movlb	1	; select bank1
  7019  0A44  0836               	movf	(_buf^(0+128)+2),w
  7020  0A45  0008               	return
  7021  0A46                     __end_of_read_register:	
  7022                           
  7023                           	psect	text15
  7024  0040                     __ptext15:	
  7025 ;; *************** function _can_dump_masks_and_filters *****************
  7026 ;; Defined at:
  7027 ;;		line 334 in file "mcp2515.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  m               2   47[BANK0 ] unsigned int 
  7032 ;;  i               1   49[BANK0 ] unsigned char 
  7033 ;;  l               1   46[BANK0 ] unsigned char 
  7034 ;;  h               1   45[BANK0 ] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      void 
  7037 ;; Registers used:
  7038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7048 ;;Total ram usage:       15 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    3
  7051 ;; This function calls:
  7052 ;;		_printf
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _can_dump_masks_and_filters
  7060  0040                     _can_dump_masks_and_filters:	
  7061                           
  7062                           ;mcp2515.c: 335: uint8_t i, h, l;
  7063                           ;mcp2515.c: 336: uint16_t m;
  7064                           ;mcp2515.c: 337: printf("---\n");
  7065                           
  7066                           ;incstack = 0
  7067                           ; Regs used in _can_dump_masks_and_filters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7068  0040  30D9               	movlw	low (STR_43| (0+32768))
  7069  0041  0020               	movlb	0	; select bank0
  7070  0042  00A2               	movwf	printf@f
  7071  0043  3094               	movlw	high (STR_43| (0+32768))
  7072  0044  00A3               	movwf	printf@f+1
  7073  0045  3185  25A5  3180   	fcall	_printf
  7074                           
  7075                           ;mcp2515.c: 338: for(i=0; i<2; i++) {
  7076  0048  0020               	movlb	0	; select bank0
  7077  0049  01D1               	clrf	can_dump_masks_and_filters@i
  7078  004A  3002               	movlw	2
  7079  004B  0251               	subwf	can_dump_masks_and_filters@i,w
  7080  004C  1803               	btfsc	3,0
  7081  004D  28A7               	goto	l3072
  7082  004E                     l3060:	
  7083                           
  7084                           ;mcp2515.c: 339: m = save_rxmn[i];
  7085  004E  3551               	lslf	can_dump_masks_and_filters@i,w
  7086  004F  3EAC               	addlw	(low (_save_rxmn| 0))& (0+255)
  7087  0050  0086               	movwf	6
  7088  0051  0187               	clrf	7
  7089  0052  3F40               	moviw [0]fsr1
  7090  0053  00CF               	movwf	can_dump_masks_and_filters@m
  7091  0054  3F41               	moviw [1]fsr1
  7092  0055  00D0               	movwf	can_dump_masks_and_filters@m+1
  7093                           
  7094                           ;mcp2515.c: 340: h = ((uint8_t)((m >> 3) & 0x00ffu));
  7095  0056  0850               	movf	can_dump_masks_and_filters@m+1,w
  7096  0057  00C4               	movwf	??_can_dump_masks_and_filters+1
  7097  0058  084F               	movf	can_dump_masks_and_filters@m,w
  7098  0059  00C3               	movwf	??_can_dump_masks_and_filters
  7099  005A  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7100  005B  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7101  005C  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7102  005D  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7103  005E  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7104  005F  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7105  0060  0843               	movf	??_can_dump_masks_and_filters,w
  7106  0061  00C5               	movwf	??_can_dump_masks_and_filters+2
  7107  0062  0845               	movf	??_can_dump_masks_and_filters+2,w
  7108  0063  00CD               	movwf	can_dump_masks_and_filters@h
  7109                           
  7110                           ;mcp2515.c: 341: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  7111  0064  084F               	movf	can_dump_masks_and_filters@m,w
  7112  0065  3907               	andlw	7
  7113  0066  00C3               	movwf	??_can_dump_masks_and_filters
  7114  0067  3004               	movlw	4
  7115  0068                     u2665:	
  7116  0068  35C3               	lslf	??_can_dump_masks_and_filters,f
  7117  0069  3EFF               	addlw	-1
  7118  006A  1D03               	skipz
  7119  006B  2868               	goto	u2665
  7120  006C  3543               	lslf	??_can_dump_masks_and_filters,w
  7121  006D  00C4               	movwf	??_can_dump_masks_and_filters+1
  7122  006E  0844               	movf	??_can_dump_masks_and_filters+1,w
  7123  006F  00CE               	movwf	can_dump_masks_and_filters@l
  7124                           
  7125                           ;mcp2515.c: 342: printf("RXM%d RXM%dSIDH RXM%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  7126  0070  3070               	movlw	low (STR_44| (0+32768))
  7127  0071  00A2               	movwf	printf@f
  7128  0072  3091               	movlw	high (STR_44| (0+32768))
  7129  0073  00A3               	movwf	printf@f+1
  7130  0074  0851               	movf	can_dump_masks_and_filters@i,w
  7131  0075  00C3               	movwf	??_can_dump_masks_and_filters
  7132  0076  01C4               	clrf	??_can_dump_masks_and_filters+1
  7133  0077  0843               	movf	??_can_dump_masks_and_filters,w
  7134  0078  00A4               	movwf	?_printf+2
  7135  0079  0844               	movf	??_can_dump_masks_and_filters+1,w
  7136  007A  00A5               	movwf	?_printf+3
  7137  007B  0851               	movf	can_dump_masks_and_filters@i,w
  7138  007C  00C5               	movwf	??_can_dump_masks_and_filters+2
  7139  007D  01C6               	clrf	??_can_dump_masks_and_filters+3
  7140  007E  0845               	movf	??_can_dump_masks_and_filters+2,w
  7141  007F  00A6               	movwf	?_printf+4
  7142  0080  0846               	movf	??_can_dump_masks_and_filters+3,w
  7143  0081  00A7               	movwf	?_printf+5
  7144  0082  0851               	movf	can_dump_masks_and_filters@i,w
  7145  0083  00C7               	movwf	??_can_dump_masks_and_filters+4
  7146  0084  01C8               	clrf	??_can_dump_masks_and_filters+5
  7147  0085  0847               	movf	??_can_dump_masks_and_filters+4,w
  7148  0086  00A8               	movwf	?_printf+6
  7149  0087  0848               	movf	??_can_dump_masks_and_filters+5,w
  7150  0088  00A9               	movwf	?_printf+7
  7151  0089  0850               	movf	can_dump_masks_and_filters@m+1,w
  7152  008A  00AB               	movwf	?_printf+9
  7153  008B  084F               	movf	can_dump_masks_and_filters@m,w
  7154  008C  00AA               	movwf	?_printf+8
  7155  008D  084D               	movf	can_dump_masks_and_filters@h,w
  7156  008E  00C9               	movwf	??_can_dump_masks_and_filters+6
  7157  008F  01CA               	clrf	??_can_dump_masks_and_filters+7
  7158  0090  0849               	movf	??_can_dump_masks_and_filters+6,w
  7159  0091  00AC               	movwf	?_printf+10
  7160  0092  084A               	movf	??_can_dump_masks_and_filters+7,w
  7161  0093  00AD               	movwf	?_printf+11
  7162  0094  084E               	movf	can_dump_masks_and_filters@l,w
  7163  0095  00CB               	movwf	??_can_dump_masks_and_filters+8
  7164  0096  01CC               	clrf	??_can_dump_masks_and_filters+9
  7165  0097  084B               	movf	??_can_dump_masks_and_filters+8,w
  7166  0098  00AE               	movwf	?_printf+12
  7167  0099  084C               	movf	??_can_dump_masks_and_filters+9,w
  7168  009A  00AF               	movwf	?_printf+13
  7169  009B  3185  25A5  3180   	fcall	_printf
  7170  009E  3001               	movlw	1
  7171  009F  0020               	movlb	0	; select bank0
  7172  00A0  00C3               	movwf	??_can_dump_masks_and_filters
  7173  00A1  0843               	movf	??_can_dump_masks_and_filters,w
  7174  00A2  07D1               	addwf	can_dump_masks_and_filters@i,f
  7175  00A3  3002               	movlw	2
  7176  00A4  0251               	subwf	can_dump_masks_and_filters@i,w
  7177  00A5  1C03               	skipc
  7178  00A6  284E               	goto	l3060
  7179  00A7                     l3072:	
  7180                           
  7181                           ;mcp2515.c: 343: }
  7182                           ;mcp2515.c: 344: for(i=0; i<6; i++) {
  7183  00A7  01D1               	clrf	can_dump_masks_and_filters@i
  7184  00A8  3006               	movlw	6
  7185  00A9  0251               	subwf	can_dump_masks_and_filters@i,w
  7186  00AA  1803               	btfsc	3,0
  7187  00AB  2905               	goto	l3090
  7188  00AC                     l3078:	
  7189                           
  7190                           ;mcp2515.c: 345: m = save_rxfn[i];
  7191  00AC  3551               	lslf	can_dump_masks_and_filters@i,w
  7192  00AD  3EA0               	addlw	(low (_save_rxfn| 0))& (0+255)
  7193  00AE  0086               	movwf	6
  7194  00AF  0187               	clrf	7
  7195  00B0  3F40               	moviw [0]fsr1
  7196  00B1  00CF               	movwf	can_dump_masks_and_filters@m
  7197  00B2  3F41               	moviw [1]fsr1
  7198  00B3  00D0               	movwf	can_dump_masks_and_filters@m+1
  7199                           
  7200                           ;mcp2515.c: 346: h = ((uint8_t)((m >> 3) & 0x00ffu));
  7201  00B4  0850               	movf	can_dump_masks_and_filters@m+1,w
  7202  00B5  00C4               	movwf	??_can_dump_masks_and_filters+1
  7203  00B6  084F               	movf	can_dump_masks_and_filters@m,w
  7204  00B7  00C3               	movwf	??_can_dump_masks_and_filters
  7205  00B8  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7206  00B9  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7207  00BA  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7208  00BB  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7209  00BC  36C4               	lsrf	??_can_dump_masks_and_filters+1,f
  7210  00BD  0CC3               	rrf	??_can_dump_masks_and_filters,f
  7211  00BE  0843               	movf	??_can_dump_masks_and_filters,w
  7212  00BF  00C5               	movwf	??_can_dump_masks_and_filters+2
  7213  00C0  0845               	movf	??_can_dump_masks_and_filters+2,w
  7214  00C1  00CD               	movwf	can_dump_masks_and_filters@h
  7215                           
  7216                           ;mcp2515.c: 347: l = ((uint8_t)(((m & 0x0007u) << 5) & 0x00ffu));
  7217  00C2  084F               	movf	can_dump_masks_and_filters@m,w
  7218  00C3  3907               	andlw	7
  7219  00C4  00C3               	movwf	??_can_dump_masks_and_filters
  7220  00C5  3004               	movlw	4
  7221  00C6                     u2695:	
  7222  00C6  35C3               	lslf	??_can_dump_masks_and_filters,f
  7223  00C7  3EFF               	addlw	-1
  7224  00C8  1D03               	skipz
  7225  00C9  28C6               	goto	u2695
  7226  00CA  3543               	lslf	??_can_dump_masks_and_filters,w
  7227  00CB  00C4               	movwf	??_can_dump_masks_and_filters+1
  7228  00CC  0844               	movf	??_can_dump_masks_and_filters+1,w
  7229  00CD  00CE               	movwf	can_dump_masks_and_filters@l
  7230                           
  7231                           ;mcp2515.c: 348: printf("RXF%d RXF%dSIDH RXF%dSIDL: %4d %02Xh %02Xh\n", i, i, i, m, h, l
      +                          );
  7232  00CE  3044               	movlw	low (STR_45| (0+32768))
  7233  00CF  00A2               	movwf	printf@f
  7234  00D0  3091               	movlw	high (STR_45| (0+32768))
  7235  00D1  00A3               	movwf	printf@f+1
  7236  00D2  0851               	movf	can_dump_masks_and_filters@i,w
  7237  00D3  00C3               	movwf	??_can_dump_masks_and_filters
  7238  00D4  01C4               	clrf	??_can_dump_masks_and_filters+1
  7239  00D5  0843               	movf	??_can_dump_masks_and_filters,w
  7240  00D6  00A4               	movwf	?_printf+2
  7241  00D7  0844               	movf	??_can_dump_masks_and_filters+1,w
  7242  00D8  00A5               	movwf	?_printf+3
  7243  00D9  0851               	movf	can_dump_masks_and_filters@i,w
  7244  00DA  00C5               	movwf	??_can_dump_masks_and_filters+2
  7245  00DB  01C6               	clrf	??_can_dump_masks_and_filters+3
  7246  00DC  0845               	movf	??_can_dump_masks_and_filters+2,w
  7247  00DD  00A6               	movwf	?_printf+4
  7248  00DE  0846               	movf	??_can_dump_masks_and_filters+3,w
  7249  00DF  00A7               	movwf	?_printf+5
  7250  00E0  0851               	movf	can_dump_masks_and_filters@i,w
  7251  00E1  00C7               	movwf	??_can_dump_masks_and_filters+4
  7252  00E2  01C8               	clrf	??_can_dump_masks_and_filters+5
  7253  00E3  0847               	movf	??_can_dump_masks_and_filters+4,w
  7254  00E4  00A8               	movwf	?_printf+6
  7255  00E5  0848               	movf	??_can_dump_masks_and_filters+5,w
  7256  00E6  00A9               	movwf	?_printf+7
  7257  00E7  0850               	movf	can_dump_masks_and_filters@m+1,w
  7258  00E8  00AB               	movwf	?_printf+9
  7259  00E9  084F               	movf	can_dump_masks_and_filters@m,w
  7260  00EA  00AA               	movwf	?_printf+8
  7261  00EB  084D               	movf	can_dump_masks_and_filters@h,w
  7262  00EC  00C9               	movwf	??_can_dump_masks_and_filters+6
  7263  00ED  01CA               	clrf	??_can_dump_masks_and_filters+7
  7264  00EE  0849               	movf	??_can_dump_masks_and_filters+6,w
  7265  00EF  00AC               	movwf	?_printf+10
  7266  00F0  084A               	movf	??_can_dump_masks_and_filters+7,w
  7267  00F1  00AD               	movwf	?_printf+11
  7268  00F2  084E               	movf	can_dump_masks_and_filters@l,w
  7269  00F3  00CB               	movwf	??_can_dump_masks_and_filters+8
  7270  00F4  01CC               	clrf	??_can_dump_masks_and_filters+9
  7271  00F5  084B               	movf	??_can_dump_masks_and_filters+8,w
  7272  00F6  00AE               	movwf	?_printf+12
  7273  00F7  084C               	movf	??_can_dump_masks_and_filters+9,w
  7274  00F8  00AF               	movwf	?_printf+13
  7275  00F9  3185  25A5  3180   	fcall	_printf
  7276  00FC  3001               	movlw	1
  7277  00FD  0020               	movlb	0	; select bank0
  7278  00FE  00C3               	movwf	??_can_dump_masks_and_filters
  7279  00FF  0843               	movf	??_can_dump_masks_and_filters,w
  7280  0100  07D1               	addwf	can_dump_masks_and_filters@i,f
  7281  0101  3006               	movlw	6
  7282  0102  0251               	subwf	can_dump_masks_and_filters@i,w
  7283  0103  1C03               	skipc
  7284  0104  28AC               	goto	l3078
  7285  0105                     l3090:	
  7286                           
  7287                           ;mcp2515.c: 349: }
  7288                           ;mcp2515.c: 350: printf("---\n");
  7289  0105  30D9               	movlw	low (STR_43| (0+32768))
  7290  0106  00A2               	movwf	printf@f
  7291  0107  3094               	movlw	high (STR_43| (0+32768))
  7292  0108  00A3               	movwf	printf@f+1
  7293  0109  3185  25A5         	fcall	_printf
  7294  010B  0008               	return
  7295  010C                     __end_of_can_dump_masks_and_filters:	
  7296                           
  7297                           	psect	text16
  7298  0B48                     __ptext16:	
  7299 ;; *************** function _can_baudrate *****************
  7300 ;; Defined at:
  7301 ;;		line 297 in file "mcp2515.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  bpr             1    wreg     unsigned char 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  bpr             1   41[BANK0 ] unsigned char 
  7306 ;;  bytes_writte    1   43[BANK0 ] unsigned char 
  7307 ;;  mask            1   42[BANK0 ] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      unsigned char 
  7310 ;; Registers used:
  7311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;Total ram usage:        5 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    4
  7324 ;; This function calls:
  7325 ;;		_SPI_exchange
  7326 ;;		_can_ope_mode
  7327 ;; This function is called by:
  7328 ;;		_main
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _can_baudrate
  7334  0B48                     _can_baudrate:	
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _can_baudrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7338                           ;can_baudrate@bpr stored from wreg
  7339  0B48  0020               	movlb	0	; select bank0
  7340  0B49  00C9               	movwf	can_baudrate@bpr
  7341                           
  7342                           ;mcp2515.c: 298: can_ope_mode(0b10000000u);
  7343  0B4A  3080               	movlw	128
  7344  0B4B  318C  246C  318B   	fcall	_can_ope_mode
  7345                           
  7346                           ;mcp2515.c: 301: uint8_t mask = 0b00111111;
  7347  0B4E  303F               	movlw	63
  7348  0B4F  0020               	movlb	0	; select bank0
  7349  0B50  00C7               	movwf	??_can_baudrate
  7350  0B51  0847               	movf	??_can_baudrate,w
  7351  0B52  00CA               	movwf	can_baudrate@mask
  7352                           
  7353                           ;mcp2515.c: 302: buf[0] = 0b00000101u;
  7354  0B53  3005               	movlw	5
  7355  0B54  00C7               	movwf	??_can_baudrate
  7356  0B55  0847               	movf	??_can_baudrate,w
  7357  0B56  0021               	movlb	1	; select bank1
  7358  0B57  00B4               	movwf	_buf^(0+128)
  7359                           
  7360                           ;mcp2515.c: 303: buf[1] = 0x2au;
  7361  0B58  302A               	movlw	42
  7362  0B59  0020               	movlb	0	; select bank0
  7363  0B5A  00C7               	movwf	??_can_baudrate
  7364  0B5B  0847               	movf	??_can_baudrate,w
  7365  0B5C  0021               	movlb	1	; select bank1
  7366  0B5D  00B5               	movwf	(_buf^(0+128)+1)
  7367                           
  7368                           ;mcp2515.c: 304: buf[2] = mask;
  7369  0B5E  0020               	movlb	0	; select bank0
  7370  0B5F  084A               	movf	can_baudrate@mask,w
  7371  0B60  00C7               	movwf	??_can_baudrate
  7372  0B61  0847               	movf	??_can_baudrate,w
  7373  0B62  0021               	movlb	1	; select bank1
  7374  0B63  00B6               	movwf	(_buf^(0+128)+2)
  7375                           
  7376                           ;mcp2515.c: 305: buf[3] = bpr;
  7377  0B64  0020               	movlb	0	; select bank0
  7378  0B65  0849               	movf	can_baudrate@bpr,w
  7379  0B66  00C7               	movwf	??_can_baudrate
  7380  0B67  0847               	movf	??_can_baudrate,w
  7381  0B68  0021               	movlb	1	; select bank1
  7382  0B69  00B7               	movwf	(_buf^(0+128)+3)
  7383                           
  7384                           ;mcp2515.c: 306: uint8_t bytes_written = SPI_exchange(buf, 4);
  7385  0B6A  3004               	movlw	4
  7386  0B6B  0020               	movlb	0	; select bank0
  7387  0B6C  00C7               	movwf	??_can_baudrate
  7388  0B6D  0847               	movf	??_can_baudrate,w
  7389  0B6E  00F8               	movwf	SPI_exchange@len
  7390  0B6F  30B4               	movlw	(low (_buf| 0))& (0+255)
  7391  0B70  318A  2201  318B   	fcall	_SPI_exchange
  7392  0B73  0020               	movlb	0	; select bank0
  7393  0B74  00C8               	movwf	??_can_baudrate+1
  7394  0B75  0848               	movf	??_can_baudrate+1,w
  7395  0B76  00CB               	movwf	can_baudrate@bytes_written
  7396                           
  7397                           ;mcp2515.c: 307: can_ope_mode(operation_mode);
  7398  0B77  086F               	movf	_operation_mode,w
  7399  0B78  318C  246C         	fcall	_can_ope_mode
  7400                           
  7401                           ;mcp2515.c: 311: return 0;
  7402                           ;	Return value of _can_baudrate is never used
  7403                           
  7404                           ;mcp2515.c: 310: } else {
  7405                           
  7406                           ;mcp2515.c: 309: return 1;
  7407                           ;	Return value of _can_baudrate is never used
  7408  0B7A  0008               	return
  7409  0B7B                     __end_of_can_baudrate:	
  7410                           
  7411                           	psect	text17
  7412  09F2                     __ptext17:	
  7413 ;; *************** function _can_abort *****************
  7414 ;; Defined at:
  7415 ;;		line 315 in file "mcp2515.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  bytes_writte    1   40[BANK0 ] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      unsigned char 
  7422 ;; Registers used:
  7423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;Total ram usage:        2 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    4
  7436 ;; This function calls:
  7437 ;;		_abort_pending_transmissions
  7438 ;;		_can_ope_mode
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _can_abort
  7446  09F2                     _can_abort:	
  7447                           
  7448                           ;mcp2515.c: 316: can_ope_mode(0b10000000u);
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _can_abort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7452  09F2  3080               	movlw	128
  7453  09F3  318C  246C  3189   	fcall	_can_ope_mode
  7454                           
  7455                           ;mcp2515.c: 317: uint8_t bytes_written = abort_pending_transmissions();
  7456  09F6  318A  22A2  3189   	fcall	_abort_pending_transmissions
  7457  09F9  0020               	movlb	0	; select bank0
  7458  09FA  00C7               	movwf	??_can_abort
  7459  09FB  0847               	movf	??_can_abort,w
  7460  09FC  00C8               	movwf	can_abort@bytes_written
  7461                           
  7462                           ;mcp2515.c: 318: can_ope_mode(operation_mode);
  7463  09FD  086F               	movf	_operation_mode,w
  7464  09FE  318C  246C         	fcall	_can_ope_mode
  7465                           
  7466                           ;mcp2515.c: 322: return 0;
  7467                           ;	Return value of _can_abort is never used
  7468                           
  7469                           ;mcp2515.c: 321: } else {
  7470                           
  7471                           ;mcp2515.c: 320: return 1;
  7472                           ;	Return value of _can_abort is never used
  7473  0A00  0008               	return
  7474  0A01                     __end_of_can_abort:	
  7475                           
  7476                           	psect	text18
  7477  0C6C                     __ptext18:	
  7478 ;; *************** function _can_ope_mode *****************
  7479 ;; Defined at:
  7480 ;;		line 91 in file "mcp2515.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  ope_mode        1    wreg     unsigned char 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  ope_mode        1   38[BANK0 ] unsigned char 
  7485 ;;  bytes_writte    1   37[BANK0 ] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      unsigned char 
  7488 ;; Registers used:
  7489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;Total ram usage:        4 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    3
  7502 ;; This function calls:
  7503 ;;		_SPI_exchange
  7504 ;;		_printf
  7505 ;; This function is called by:
  7506 ;;		_main
  7507 ;;		_can_init
  7508 ;;		_can_set_mask
  7509 ;;		_can_baudrate
  7510 ;;		_can_abort
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           
  7515                           ;psect for function _can_ope_mode
  7516  0C6C                     _can_ope_mode:	
  7517                           
  7518                           ;incstack = 0
  7519                           ; Regs used in _can_ope_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7520                           ;can_ope_mode@ope_mode stored from wreg
  7521  0C6C  0020               	movlb	0	; select bank0
  7522  0C6D  00C6               	movwf	can_ope_mode@ope_mode
  7523                           
  7524                           ;mcp2515.c: 92: buf[0] = 0b00000010u;
  7525  0C6E  3002               	movlw	2
  7526  0C6F  00C3               	movwf	??_can_ope_mode
  7527  0C70  0843               	movf	??_can_ope_mode,w
  7528  0C71  0021               	movlb	1	; select bank1
  7529  0C72  00B4               	movwf	_buf^(0+128)
  7530                           
  7531                           ;mcp2515.c: 93: buf[1] = 0x0fu;
  7532  0C73  300F               	movlw	15
  7533  0C74  0020               	movlb	0	; select bank0
  7534  0C75  00C3               	movwf	??_can_ope_mode
  7535  0C76  0843               	movf	??_can_ope_mode,w
  7536  0C77  0021               	movlb	1	; select bank1
  7537  0C78  00B5               	movwf	(_buf^(0+128)+1)
  7538                           
  7539                           ;mcp2515.c: 94: buf[2] = ope_mode;
  7540  0C79  0020               	movlb	0	; select bank0
  7541  0C7A  0846               	movf	can_ope_mode@ope_mode,w
  7542  0C7B  00C3               	movwf	??_can_ope_mode
  7543  0C7C  0843               	movf	??_can_ope_mode,w
  7544  0C7D  0021               	movlb	1	; select bank1
  7545  0C7E  00B6               	movwf	(_buf^(0+128)+2)
  7546                           
  7547                           ;mcp2515.c: 95: uint8_t bytes_written = SPI_exchange(buf, 3);
  7548  0C7F  3003               	movlw	3
  7549  0C80  0020               	movlb	0	; select bank0
  7550  0C81  00C3               	movwf	??_can_ope_mode
  7551  0C82  0843               	movf	??_can_ope_mode,w
  7552  0C83  00F8               	movwf	SPI_exchange@len
  7553  0C84  30B4               	movlw	(low (_buf| 0))& (0+255)
  7554  0C85  318A  2201  318C   	fcall	_SPI_exchange
  7555  0C88  0020               	movlb	0	; select bank0
  7556  0C89  00C4               	movwf	??_can_ope_mode+1
  7557  0C8A  0844               	movf	??_can_ope_mode+1,w
  7558  0C8B  00C5               	movwf	can_ope_mode@bytes_written
  7559                           
  7560                           ;mcp2515.c: 97: if (ope_mode != 0b10000000u) operation_mode = ope_mode;
  7561  0C8C  3080               	movlw	128
  7562  0C8D  0646               	xorwf	can_ope_mode@ope_mode,w
  7563  0C8E  1903               	btfsc	3,2
  7564  0C8F  2C94               	goto	l2714
  7565  0C90  0846               	movf	can_ope_mode@ope_mode,w
  7566  0C91  00C3               	movwf	??_can_ope_mode
  7567  0C92  0843               	movf	??_can_ope_mode,w
  7568  0C93  00EF               	movwf	_operation_mode
  7569  0C94                     l2714:	
  7570                           
  7571                           ;mcp2515.c: 99: if (bytes_written == 3) {
  7572  0C94  3003               	movlw	3
  7573  0C95  0645               	xorwf	can_ope_mode@bytes_written,w
  7574  0C96  1D03               	btfss	3,2
  7575  0C97  0008               	return
  7576                           
  7577                           ;mcp2515.c: 100: buf[0] = 0b00000011u;
  7578  0C98  3003               	movlw	3
  7579  0C99  00C3               	movwf	??_can_ope_mode
  7580  0C9A  0843               	movf	??_can_ope_mode,w
  7581  0C9B  0021               	movlb	1	; select bank1
  7582  0C9C  00B4               	movwf	_buf^(0+128)
  7583                           
  7584                           ;mcp2515.c: 101: buf[1] = 0x0e;
  7585  0C9D  300E               	movlw	14
  7586  0C9E  0020               	movlb	0	; select bank0
  7587  0C9F  00C3               	movwf	??_can_ope_mode
  7588  0CA0  0843               	movf	??_can_ope_mode,w
  7589  0CA1  0021               	movlb	1	; select bank1
  7590  0CA2  00B5               	movwf	(_buf^(0+128)+1)
  7591                           
  7592                           ;mcp2515.c: 102: bytes_written = SPI_exchange(buf, 3);
  7593  0CA3  3003               	movlw	3
  7594  0CA4  0020               	movlb	0	; select bank0
  7595  0CA5  00C3               	movwf	??_can_ope_mode
  7596  0CA6  0843               	movf	??_can_ope_mode,w
  7597  0CA7  00F8               	movwf	SPI_exchange@len
  7598  0CA8  30B4               	movlw	(low (_buf| 0))& (0+255)
  7599  0CA9  318A  2201  318C   	fcall	_SPI_exchange
  7600  0CAC  0020               	movlb	0	; select bank0
  7601  0CAD  00C4               	movwf	??_can_ope_mode+1
  7602  0CAE  0844               	movf	??_can_ope_mode+1,w
  7603  0CAF  00C5               	movwf	can_ope_mode@bytes_written
  7604                           
  7605                           ;mcp2515.c: 103: if (mode.debug) printf("CANSTAT: %02x\n", buf[2]);
  7606  0CB0  086B               	movf	_mode,w
  7607  0CB1  1903               	btfsc	3,2
  7608  0CB2  0008               	return
  7609  0CB3  3028               	movlw	low (STR_27| (0+32768))
  7610  0CB4  00A2               	movwf	printf@f
  7611  0CB5  3094               	movlw	high (STR_27| (0+32768))
  7612  0CB6  00A3               	movwf	printf@f+1
  7613  0CB7  0021               	movlb	1	; select bank1
  7614  0CB8  0836               	movf	(_buf^(0+128)+2),w
  7615  0CB9  0020               	movlb	0	; select bank0
  7616  0CBA  00C3               	movwf	??_can_ope_mode
  7617  0CBB  01C4               	clrf	??_can_ope_mode+1
  7618  0CBC  0843               	movf	??_can_ope_mode,w
  7619  0CBD  00A4               	movwf	?_printf+2
  7620  0CBE  0844               	movf	??_can_ope_mode+1,w
  7621  0CBF  00A5               	movwf	?_printf+3
  7622  0CC0  3185  25A5         	fcall	_printf
  7623                           
  7624                           ;mcp2515.c: 106: return 0;
  7625                           ;	Return value of _can_ope_mode is never used
  7626                           
  7627                           ;mcp2515.c: 105: } else {
  7628                           
  7629                           ;mcp2515.c: 104: return 1;
  7630                           ;	Return value of _can_ope_mode is never used
  7631  0CC2  0008               	return
  7632  0CC3                     __end_of_can_ope_mode:	
  7633                           
  7634                           	psect	text19
  7635  05A5                     __ptext19:	
  7636 ;; *************** function _printf *****************
  7637 ;; Defined at:
  7638 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  7641 ;;		 -> STR_64(5), STR_63(15), STR_62(15), STR_61(2), 
  7642 ;;		 -> STR_60(16), STR_59(16), STR_58(2), STR_57(16), 
  7643 ;;		 -> STR_56(16), STR_55(16), STR_54(2), STR_53(12), 
  7644 ;;		 -> STR_52(12), STR_51(12), STR_50(2), STR_49(12), 
  7645 ;;		 -> STR_48(12), STR_47(5), STR_46(5), STR_45(44), 
  7646 ;;		 -> STR_44(44), STR_43(5), STR_42(13), STR_41(13), 
  7647 ;;		 -> STR_40(18), STR_39(17), STR_38(17), STR_37(20), 
  7648 ;;		 -> STR_36(14), STR_35(14), STR_34(14), STR_33(15), 
  7649 ;;		 -> STR_32(16), STR_31(17), STR_30(17), STR_29(23), 
  7650 ;;		 -> STR_28(21), STR_27(15), STR_26(22), STR_25(44), 
  7651 ;;		 -> STR_24(57), STR_23(26), STR_22(21), STR_21(29), 
  7652 ;;		 -> STR_20(38), STR_19(25), STR_18(42), STR_17(38), 
  7653 ;;		 -> STR_16(58), STR_15(54), STR_14(59), STR_13(51), 
  7654 ;;		 -> STR_12(45), STR_10(36), STR_9(3), STR_8(4), 
  7655 ;;		 -> STR_7(2), STR_6(6), STR_5(6), STR_4(7), 
  7656 ;;		 -> STR_3(2), STR_2(5), STR_1(8), 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  idx             1   22[BANK0 ] unsigned char 
  7659 ;;  tmpval          4    0        struct .
  7660 ;;  width           2   32[BANK0 ] int 
  7661 ;;  val             2   29[BANK0 ] unsigned int 
  7662 ;;  len             2   26[BANK0 ] unsigned int 
  7663 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  7664 ;;		 -> STR_65(7), printf@c(1), can_send@n(1), receive@rx_buf(15), 
  7665 ;;		 -> txf_clear@n(1), STR_11(21), main@buf(22), slcan_send@data_buf(8), 
  7666 ;;  c               1   34[BANK0 ] char 
  7667 ;;  flag            1   31[BANK0 ] unsigned char 
  7668 ;;  ap              1   28[BANK0 ] PTR void [1]
  7669 ;;		 -> ?_printf(2), 
  7670 ;;  prec            1   23[BANK0 ] char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  2    2[BANK0 ] int 
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7680 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;Total ram usage:       33 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    2
  7687 ;; This function calls:
  7688 ;;		___lwdiv
  7689 ;;		___lwmod
  7690 ;;		___wmul
  7691 ;;		_isdigit
  7692 ;;		_putch
  7693 ;; This function is called by:
  7694 ;;		_receive_handler
  7695 ;;		_main
  7696 ;;		_can_ope_mode
  7697 ;;		_can_set_mask
  7698 ;;		_receive
  7699 ;;		_can_send
  7700 ;;		_can_status_check
  7701 ;;		_can_dump_masks_and_filters
  7702 ;;		_can_dump_registers
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _printf
  7708  05A5                     _printf:	
  7709                           
  7710                           ;doprnt.c: 466: va_list ap;
  7711                           ;doprnt.c: 499: signed char c;
  7712                           ;doprnt.c: 501: int width;
  7713                           ;doprnt.c: 506: signed char prec;
  7714                           ;doprnt.c: 508: unsigned char flag;
  7715                           ;doprnt.c: 523: union {
  7716                           ;doprnt.c: 524: unsigned long vd;
  7717                           ;doprnt.c: 525: double integ;
  7718                           ;doprnt.c: 526: } tmpval;
  7719                           ;doprnt.c: 528: unsigned int val;
  7720                           ;doprnt.c: 529: unsigned len;
  7721                           ;doprnt.c: 530: const char * cp;
  7722                           ;doprnt.c: 533: *ap = __va_start();
  7723                           
  7724                           ;incstack = 0
  7725                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7726  05A5  3024               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7727  05A6  0020               	movlb	0	; select bank0
  7728  05A7  00B0               	movwf	??_printf
  7729  05A8  0830               	movf	??_printf,w
  7730  05A9  00BC               	movwf	printf@ap
  7731  05AA                     l2494:	
  7732                           ;doprnt.c: 536: while(c = *f++) {
  7733                           
  7734  05AA  0020               	movlb	0	; select bank0
  7735  05AB  0823               	movf	printf@f+1,w
  7736  05AC  00B1               	movwf	??_printf+1
  7737  05AD  0822               	movf	printf@f,w
  7738  05AE  00B0               	movwf	??_printf
  7739  05AF  0AA2               	incf	printf@f,f
  7740  05B0  1903               	skipnz
  7741  05B1  0AA3               	incf	printf@f+1,f
  7742  05B2  0830               	movf	??_printf,w
  7743  05B3  0084               	movwf	4
  7744  05B4  0831               	movf	??_printf+1,w
  7745  05B5  0085               	movwf	5
  7746  05B6  0800               	movf	0,w	;code access
  7747  05B7  00B2               	movwf	??_printf+2
  7748  05B8  0832               	movf	??_printf+2,w
  7749  05B9  00C2               	movwf	printf@c
  7750  05BA  0842               	movf	printf@c,w
  7751  05BB  1903               	btfsc	3,2
  7752  05BC  0008               	return
  7753                           
  7754                           ;doprnt.c: 538: if(c != '%')
  7755  05BD  3025               	movlw	37
  7756  05BE  0642               	xorwf	printf@c,w
  7757  05BF  1903               	btfsc	3,2
  7758  05C0  2DC6               	goto	l2340
  7759                           
  7760                           ;doprnt.c: 540: {
  7761                           ;doprnt.c: 541: (putch(c) );
  7762  05C1  0842               	movf	printf@c,w
  7763  05C2  3189  2187  3185   	fcall	_putch
  7764                           
  7765                           ;doprnt.c: 542: continue;
  7766  05C5  2DAA               	goto	l2494
  7767  05C6                     l2340:	
  7768                           
  7769                           ;doprnt.c: 543: }
  7770                           ;doprnt.c: 546: width = 0;
  7771  05C6  0020               	movlb	0	; select bank0
  7772  05C7  01C0               	clrf	printf@width
  7773  05C8  01C1               	clrf	printf@width+1
  7774                           
  7775                           ;doprnt.c: 548: flag = 0;
  7776  05C9  01BF               	clrf	printf@flag
  7777                           
  7778                           ;doprnt.c: 551: switch(*f) {
  7779                           
  7780                           ;doprnt.c: 550: for(;;) {
  7781  05CA  2DD0               	goto	l2346
  7782  05CB                     l495:	
  7783                           ;doprnt.c: 579: case '0':
  7784                           
  7785                           
  7786                           ;doprnt.c: 580: flag |= 0x04;
  7787  05CB  153F               	bsf	printf@flag,2
  7788                           
  7789                           ;doprnt.c: 581: f++;
  7790  05CC  3001               	movlw	1
  7791  05CD  07A2               	addwf	printf@f,f
  7792  05CE  3000               	movlw	0
  7793  05CF  3DA3               	addwfc	printf@f+1,f
  7794  05D0                     l2346:	
  7795                           ;doprnt.c: 584: }
  7796                           
  7797                           ;doprnt.c: 582: continue;
  7798                           
  7799  05D0  0822               	movf	printf@f,w
  7800  05D1  0084               	movwf	4
  7801  05D2  0823               	movf	printf@f+1,w
  7802  05D3  0085               	movwf	5
  7803  05D4  0800               	movf	0,w	;code access
  7804                           
  7805                           ; Switch size 1, requested type "space"
  7806                           ; Number of cases is 1, Range of values is 48 to 48
  7807                           ; switch strategies available:
  7808                           ; Name         Instructions Cycles
  7809                           ; simple_byte            4     3 (average)
  7810                           ; direct_byte           11     9 (fixed)
  7811                           ; jumptable            263     9 (fixed)
  7812                           ;	Chosen strategy is simple_byte
  7813  05D5  3A30               	xorlw	48	; case 48
  7814  05D6  1903               	skipnz
  7815  05D7  2DCB               	goto	l495
  7816  05D8  2DD9               	goto	l2348
  7817  05D9                     l2348:	
  7818                           ;doprnt.c: 586: }
  7819                           
  7820                           ;doprnt.c: 585: break;
  7821                           
  7822                           
  7823                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7824  05D9  0822               	movf	printf@f,w
  7825  05DA  0084               	movwf	4
  7826  05DB  0823               	movf	printf@f+1,w
  7827  05DC  0085               	movwf	5
  7828  05DD  0800               	movf	0,w	;code access
  7829  05DE  3189  21D5  3185   	fcall	_isdigit
  7830  05E1  1C03               	btfss	3,0
  7831  05E2  2E85               	goto	l2400
  7832                           
  7833                           ;doprnt.c: 598: width = 0;
  7834  05E3  0020               	movlb	0	; select bank0
  7835  05E4  01C0               	clrf	printf@width
  7836  05E5  01C1               	clrf	printf@width+1
  7837  05E6                     l2352:	
  7838                           ;doprnt.c: 599: do {
  7839                           
  7840                           
  7841                           ;doprnt.c: 600: width *= 10;
  7842  05E6  300A               	movlw	10
  7843  05E7  00F0               	movwf	___wmul@multiplier
  7844  05E8  3000               	movlw	0
  7845  05E9  00F1               	movwf	___wmul@multiplier+1
  7846  05EA  0020               	movlb	0	; select bank0
  7847  05EB  0841               	movf	printf@width+1,w
  7848  05EC  00F3               	movwf	___wmul@multiplicand+1
  7849  05ED  0840               	movf	printf@width,w
  7850  05EE  00F2               	movwf	___wmul@multiplicand
  7851  05EF  318A  2246  3185   	fcall	___wmul
  7852  05F2  0871               	movf	?___wmul+1,w
  7853  05F3  0020               	movlb	0	; select bank0
  7854  05F4  00C1               	movwf	printf@width+1
  7855  05F5  0870               	movf	?___wmul,w
  7856  05F6  00C0               	movwf	printf@width
  7857                           
  7858                           ;doprnt.c: 601: width += *f++ - '0';
  7859  05F7  0822               	movf	printf@f,w
  7860  05F8  0084               	movwf	4
  7861  05F9  0823               	movf	printf@f+1,w
  7862  05FA  0085               	movwf	5
  7863  05FB  0800               	movf	0,w	;code access
  7864  05FC  3ED0               	addlw	208
  7865  05FD  00B0               	movwf	??_printf
  7866  05FE  30FF               	movlw	255
  7867  05FF  1803               	skipnc
  7868  0600  3000               	movlw	0
  7869  0601  00B1               	movwf	??_printf+1
  7870  0602  0830               	movf	??_printf,w
  7871  0603  07C0               	addwf	printf@width,f
  7872  0604  0831               	movf	??_printf+1,w
  7873  0605  3DC1               	addwfc	printf@width+1,f
  7874  0606  3001               	movlw	1
  7875  0607  07A2               	addwf	printf@f,f
  7876  0608  3000               	movlw	0
  7877  0609  3DA3               	addwfc	printf@f+1,f
  7878                           
  7879                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7880  060A  0822               	movf	printf@f,w
  7881  060B  0084               	movwf	4
  7882  060C  0823               	movf	printf@f+1,w
  7883  060D  0085               	movwf	5
  7884  060E  0800               	movf	0,w	;code access
  7885  060F  3189  21D5  3185   	fcall	_isdigit
  7886  0612  1C03               	btfss	3,0
  7887  0613  2E85               	goto	l2400
  7888  0614  2DE6               	goto	l2352
  7889  0615                     l508:	
  7890                           ;doprnt.c: 712: case 'X':
  7891                           
  7892                           ;doprnt.c: 698: case 'i':
  7893                           ;doprnt.c: 699: break;
  7894                           
  7895                           ;doprnt.c: 697: case 'd':
  7896                           
  7897                           ;doprnt.c: 638: goto alldone;
  7898                           
  7899                           ;doprnt.c: 637: case 0:
  7900                           
  7901                           ;doprnt.c: 608: }
  7902                           ;doprnt.c: 635: switch(c = *f++) {
  7903                           
  7904                           
  7905                           ;doprnt.c: 714: flag |= 0x20;
  7906  0615  16BF               	bsf	printf@flag,5
  7907  0616                     l509:	
  7908                           ;doprnt.c: 718: case 'x':
  7909                           
  7910                           
  7911                           ;doprnt.c: 721: flag |= 0x80;
  7912  0616  17BF               	bsf	printf@flag,7
  7913                           
  7914                           ;doprnt.c: 723: break;
  7915  0617  2EA9               	goto	l507
  7916  0618                     l2360:	
  7917                           ;doprnt.c: 728: case 's':
  7918                           
  7919                           
  7920                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7921  0618  083C               	movf	printf@ap,w
  7922  0619  0086               	movwf	6
  7923  061A  0187               	clrf	7
  7924  061B  3F40               	moviw [0]fsr1
  7925  061C  00B8               	movwf	printf@cp
  7926  061D  3F41               	moviw [1]fsr1
  7927  061E  00B9               	movwf	printf@cp+1
  7928  061F  3002               	movlw	2
  7929  0620  00B0               	movwf	??_printf
  7930  0621  0830               	movf	??_printf,w
  7931  0622  07BC               	addwf	printf@ap,f
  7932                           
  7933                           ;doprnt.c: 740: if(!cp)
  7934  0623  0838               	movf	printf@cp,w
  7935  0624  0439               	iorwf	printf@cp+1,w
  7936  0625  1D03               	btfss	3,2
  7937  0626  2E2B               	goto	l2368
  7938                           
  7939                           ;doprnt.c: 741: cp = "(null)";
  7940  0627  30B9               	movlw	low (STR_65| (0+32768))
  7941  0628  00B8               	movwf	printf@cp
  7942  0629  3094               	movlw	high (STR_65| (0+32768))
  7943  062A  00B9               	movwf	printf@cp+1
  7944  062B                     l2368:	
  7945                           
  7946                           ;doprnt.c: 745: len = 0;
  7947  062B  01BA               	clrf	printf@len
  7948  062C  01BB               	clrf	printf@len+1
  7949  062D                     l2372:	
  7950                           ;doprnt.c: 746: while(cp[len])
  7951                           
  7952  062D  0838               	movf	printf@cp,w
  7953  062E  073A               	addwf	printf@len,w
  7954  062F  0084               	movwf	4
  7955  0630  0839               	movf	printf@cp+1,w
  7956  0631  3D3B               	addwfc	printf@len+1,w
  7957  0632  0085               	movwf	5
  7958  0633  0012               	moviw fsr0++
  7959  0634  1903               	btfsc	3,2
  7960  0635  2E3B               	goto	l2374
  7961                           
  7962                           ;doprnt.c: 747: len++;
  7963  0636  3001               	movlw	1
  7964  0637  07BA               	addwf	printf@len,f
  7965  0638  3000               	movlw	0
  7966  0639  3DBB               	addwfc	printf@len+1,f
  7967  063A  2E2D               	goto	l2372
  7968  063B                     l2374:	
  7969                           ;doprnt.c: 750: dostring:
  7970                           
  7971                           
  7972                           ;doprnt.c: 757: if(width > len)
  7973  063B  0841               	movf	printf@width+1,w
  7974  063C  023B               	subwf	printf@len+1,w
  7975  063D  1D03               	skipz
  7976  063E  2E41               	goto	u1835
  7977  063F  0840               	movf	printf@width,w
  7978  0640  023A               	subwf	printf@len,w
  7979  0641                     u1835:	
  7980  0641  1803               	skipnc
  7981  0642  2E48               	goto	l2378
  7982                           
  7983                           ;doprnt.c: 758: width -= len;
  7984  0643  083A               	movf	printf@len,w
  7985  0644  02C0               	subwf	printf@width,f
  7986  0645  083B               	movf	printf@len+1,w
  7987  0646  3BC1               	subwfb	printf@width+1,f
  7988  0647  2E4A               	goto	l2382
  7989  0648                     l2378:	
  7990                           
  7991                           ;doprnt.c: 759: else
  7992                           ;doprnt.c: 760: width = 0;
  7993  0648  01C0               	clrf	printf@width
  7994  0649  01C1               	clrf	printf@width+1
  7995  064A                     l2382:	
  7996                           ;doprnt.c: 764: while(width--)
  7997                           
  7998  064A  30FF               	movlw	255
  7999  064B  0020               	movlb	0	; select bank0
  8000  064C  07C0               	addwf	printf@width,f
  8001  064D  30FF               	movlw	255
  8002  064E  3DC1               	addwfc	printf@width+1,f
  8003  064F  0A40               	incf	printf@width,w
  8004  0650  1903               	btfsc	3,2
  8005  0651  0A41               	incf	printf@width+1,w
  8006  0652  1903               	btfsc	3,2
  8007  0653  2E66               	goto	l2388
  8008                           
  8009                           ;doprnt.c: 765: (putch(' ') );
  8010  0654  3020               	movlw	32
  8011  0655  3189  2187  3185   	fcall	_putch
  8012  0658  2E4A               	goto	l2382
  8013  0659                     l2384:	
  8014                           ;doprnt.c: 767: while(len--)
  8015                           
  8016                           
  8017                           ;doprnt.c: 768: (putch(*cp++) );
  8018  0659  0838               	movf	printf@cp,w
  8019  065A  0084               	movwf	4
  8020  065B  0839               	movf	printf@cp+1,w
  8021  065C  0085               	movwf	5
  8022  065D  0800               	movf	0,w	;code access
  8023  065E  3189  2187  3185   	fcall	_putch
  8024  0661  3001               	movlw	1
  8025  0662  0020               	movlb	0	; select bank0
  8026  0663  07B8               	addwf	printf@cp,f
  8027  0664  3000               	movlw	0
  8028  0665  3DB9               	addwfc	printf@cp+1,f
  8029  0666                     l2388:	
  8030  0666  3001               	movlw	1
  8031  0667  02BA               	subwf	printf@len,f
  8032  0668  3000               	movlw	0
  8033  0669  3BBB               	subwfb	printf@len+1,f
  8034  066A  0A3A               	incf	printf@len,w
  8035  066B  1D03               	skipz
  8036  066C  2E59               	goto	l2384
  8037  066D  0A3B               	incf	printf@len+1,w
  8038  066E  1903               	btfsc	3,2
  8039  066F  2DAA               	goto	l2494
  8040  0670  2E59               	goto	l2384
  8041  0671                     l2390:	
  8042                           ;doprnt.c: 784: case 'c':
  8043                           
  8044                           ;doprnt.c: 774: continue;
  8045                           
  8046                           
  8047                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8048  0671  083C               	movf	printf@ap,w
  8049  0672  0086               	movwf	6
  8050  0673  0187               	clrf	7
  8051  0674  0801               	movf	1,w
  8052  0675  00B0               	movwf	??_printf
  8053  0676  0830               	movf	??_printf,w
  8054  0677  00C2               	movwf	printf@c
  8055  0678  3002               	movlw	2
  8056  0679  00B0               	movwf	??_printf
  8057  067A  0830               	movf	??_printf,w
  8058  067B  07BC               	addwf	printf@ap,f
  8059  067C                     l2394:	
  8060                           ;doprnt.c: 802: default:
  8061                           
  8062                           
  8063                           ;doprnt.c: 805: cp = (char *)&c;
  8064  067C  3042               	movlw	low printf@c
  8065  067D  00B8               	movwf	printf@cp
  8066  067E  3000               	movlw	high printf@c
  8067  067F  00B9               	movwf	printf@cp+1
  8068                           
  8069                           ;doprnt.c: 806: len = 1;
  8070  0680  3001               	movlw	1
  8071  0681  00BA               	movwf	printf@len
  8072  0682  3000               	movlw	0
  8073  0683  00BB               	movwf	printf@len+1
  8074                           
  8075                           ;doprnt.c: 807: goto dostring;
  8076  0684  2E3B               	goto	l2374
  8077  0685                     l2400:	
  8078                           ;doprnt.c: 822: }
  8079                           
  8080  0685  0020               	movlb	0	; select bank0
  8081  0686  0823               	movf	printf@f+1,w
  8082  0687  00B1               	movwf	??_printf+1
  8083  0688  0822               	movf	printf@f,w
  8084  0689  00B0               	movwf	??_printf
  8085  068A  0AA2               	incf	printf@f,f
  8086  068B  1903               	skipnz
  8087  068C  0AA3               	incf	printf@f+1,f
  8088  068D  0830               	movf	??_printf,w
  8089  068E  0084               	movwf	4
  8090  068F  0831               	movf	??_printf+1,w
  8091  0690  0085               	movwf	5
  8092  0691  0800               	movf	0,w	;code access
  8093  0692  00C2               	movwf	printf@c
  8094                           
  8095                           ; Switch size 1, requested type "space"
  8096                           ; Number of cases is 7, Range of values is 0 to 120
  8097                           ; switch strategies available:
  8098                           ; Name         Instructions Cycles
  8099                           ; simple_byte           22    12 (average)
  8100                           ; direct_byte          248     6 (fixed)
  8101                           ; jumptable            260     6 (fixed)
  8102                           ;	Chosen strategy is simple_byte
  8103  0693  3A00               	xorlw	0	; case 0
  8104  0694  1903               	skipnz
  8105  0695  2FEF               	goto	l564
  8106  0696  3A58               	xorlw	88	; case 88
  8107  0697  1903               	skipnz
  8108  0698  2E15               	goto	l508
  8109  0699  3A3B               	xorlw	59	; case 99
  8110  069A  1903               	skipnz
  8111  069B  2E71               	goto	l2390
  8112  069C  3A07               	xorlw	7	; case 100
  8113  069D  1903               	skipnz
  8114  069E  2EA9               	goto	l507
  8115  069F  3A0D               	xorlw	13	; case 105
  8116  06A0  1903               	skipnz
  8117  06A1  2EA9               	goto	l507
  8118  06A2  3A1A               	xorlw	26	; case 115
  8119  06A3  1903               	skipnz
  8120  06A4  2E18               	goto	l2360
  8121  06A5  3A0B               	xorlw	11	; case 120
  8122  06A6  1903               	skipnz
  8123  06A7  2E16               	goto	l509
  8124  06A8  2E7C               	goto	l2394
  8125  06A9                     l507:	
  8126                           
  8127                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8128  06A9  0020               	movlb	0	; select bank0
  8129  06AA  1BBF               	btfsc	printf@flag,7
  8130  06AB  2EC3               	goto	l2412
  8131                           
  8132                           ;doprnt.c: 1253: {
  8133                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8134  06AC  083C               	movf	printf@ap,w
  8135  06AD  0086               	movwf	6
  8136  06AE  0187               	clrf	7
  8137  06AF  3F40               	moviw [0]fsr1
  8138  06B0  00BD               	movwf	printf@val
  8139  06B1  3F41               	moviw [1]fsr1
  8140  06B2  00BE               	movwf	printf@val+1
  8141  06B3  3002               	movlw	2
  8142  06B4  00B0               	movwf	??_printf
  8143  06B5  0830               	movf	??_printf,w
  8144  06B6  07BC               	addwf	printf@ap,f
  8145                           
  8146                           ;doprnt.c: 1261: if((int)val < 0) {
  8147  06B7  1FBE               	btfss	printf@val+1,7
  8148  06B8  2F13               	goto	l2438
  8149                           
  8150                           ;doprnt.c: 1262: flag |= 0x03;
  8151  06B9  3003               	movlw	3
  8152  06BA  00B0               	movwf	??_printf
  8153  06BB  0830               	movf	??_printf,w
  8154  06BC  04BF               	iorwf	printf@flag,f
  8155                           
  8156                           ;doprnt.c: 1263: val = -val;
  8157  06BD  09BD               	comf	printf@val,f
  8158  06BE  09BE               	comf	printf@val+1,f
  8159  06BF  0ABD               	incf	printf@val,f
  8160  06C0  1903               	skipnz
  8161  06C1  0ABE               	incf	printf@val+1,f
  8162                           
  8163                           ;doprnt.c: 1264: }
  8164                           ;doprnt.c: 1266: }
  8165  06C2  2F13               	goto	l2438
  8166  06C3                     l2412:	
  8167                           
  8168                           ;doprnt.c: 1268: else
  8169                           ;doprnt.c: 1273: {
  8170                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8171  06C3  083C               	movf	printf@ap,w
  8172  06C4  0086               	movwf	6
  8173  06C5  0187               	clrf	7
  8174  06C6  3F40               	moviw [0]fsr1
  8175  06C7  00BD               	movwf	printf@val
  8176  06C8  3F41               	moviw [1]fsr1
  8177  06C9  00BE               	movwf	printf@val+1
  8178  06CA  3002               	movlw	2
  8179  06CB  00B0               	movwf	??_printf
  8180  06CC  0830               	movf	??_printf,w
  8181  06CD  07BC               	addwf	printf@ap,f
  8182                           
  8183                           ;doprnt.c: 1287: }
  8184                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8185  06CE  2F13               	goto	l2438
  8186  06CF                     l530:	
  8187                           ;doprnt.c: 1299: case 0x00:
  8188                           
  8189                           
  8190                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8191  06CF  01C2               	clrf	printf@c
  8192  06D0  0AC2               	incf	printf@c,f
  8193  06D1                     L13:	
  8194  06D1  3005               	movlw	5
  8195  06D2  0642               	xorwf	printf@c,w
  8196  06D3  1903               	btfsc	3,2
  8197  06D4  2F1C               	goto	l2440
  8198                           
  8199                           ;doprnt.c: 1306: if(val < dpowers[c])
  8200  06D5  0842               	movf	printf@c,w
  8201  06D6  00B0               	movwf	??_printf
  8202  06D7  01B1               	clrf	??_printf+1
  8203  06D8  35B0               	lslf	??_printf,f
  8204  06D9  0DB1               	rlf	??_printf+1,f
  8205  06DA  309F               	movlw	low (_dpowers| (0+32768))
  8206  06DB  0730               	addwf	??_printf,w
  8207  06DC  0084               	movwf	4
  8208  06DD  3094               	movlw	high (_dpowers| (0+32768))
  8209  06DE  3D31               	addwfc	??_printf+1,w
  8210  06DF  0085               	movwf	5
  8211  06E0  3F00               	moviw [0]fsr0
  8212  06E1  00B2               	movwf	??_printf+2
  8213  06E2  3F01               	moviw [1]fsr0
  8214  06E3  00B3               	movwf	??_printf+3
  8215  06E4  0833               	movf	??_printf+3,w
  8216  06E5  023E               	subwf	printf@val+1,w
  8217  06E6  1D03               	skipz
  8218  06E7  2EEA               	goto	u1895
  8219  06E8  0832               	movf	??_printf+2,w
  8220  06E9  023D               	subwf	printf@val,w
  8221  06EA                     u1895:	
  8222  06EA  1C03               	btfss	3,0
  8223  06EB  2F1C               	goto	l2440
  8224                           
  8225                           ;doprnt.c: 1307: break;
  8226  06EC  3001               	movlw	1
  8227  06ED  00B0               	movwf	??_printf
  8228  06EE  0830               	movf	??_printf,w
  8229  06EF  07C2               	addwf	printf@c,f
  8230  06F0  2ED1               	goto	L13
  8231  06F1                     l535:	
  8232                           ;doprnt.c: 1314: case 0x80:
  8233                           
  8234                           ;doprnt.c: 1309: break;
  8235                           
  8236                           
  8237                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8238  06F1  01C2               	clrf	printf@c
  8239  06F2  0AC2               	incf	printf@c,f
  8240  06F3                     L14:	
  8241  06F3  3004               	movlw	4
  8242  06F4  0642               	xorwf	printf@c,w
  8243  06F5  1903               	btfsc	3,2
  8244  06F6  2F1C               	goto	l2440
  8245                           
  8246                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8247  06F7  0842               	movf	printf@c,w
  8248  06F8  00B0               	movwf	??_printf
  8249  06F9  01B1               	clrf	??_printf+1
  8250  06FA  35B0               	lslf	??_printf,f
  8251  06FB  0DB1               	rlf	??_printf+1,f
  8252  06FC  30A9               	movlw	low (_hexpowers| (0+32768))
  8253  06FD  0730               	addwf	??_printf,w
  8254  06FE  0084               	movwf	4
  8255  06FF  3094               	movlw	high (_hexpowers| (0+32768))
  8256  0700  3D31               	addwfc	??_printf+1,w
  8257  0701  0085               	movwf	5
  8258  0702  3F00               	moviw [0]fsr0
  8259  0703  00B2               	movwf	??_printf+2
  8260  0704  3F01               	moviw [1]fsr0
  8261  0705  00B3               	movwf	??_printf+3
  8262  0706  0833               	movf	??_printf+3,w
  8263  0707  023E               	subwf	printf@val+1,w
  8264  0708  1D03               	skipz
  8265  0709  2F0C               	goto	u1925
  8266  070A  0832               	movf	??_printf+2,w
  8267  070B  023D               	subwf	printf@val,w
  8268  070C                     u1925:	
  8269  070C  1C03               	btfss	3,0
  8270  070D  2F1C               	goto	l2440
  8271                           
  8272                           ;doprnt.c: 1318: break;
  8273  070E  3001               	movlw	1
  8274  070F  00B0               	movwf	??_printf
  8275  0710  0830               	movf	??_printf,w
  8276  0711  07C2               	addwf	printf@c,f
  8277  0712  2EF3               	goto	L14
  8278  0713                     l2438:	
  8279                           ;doprnt.c: 1336: }
  8280                           
  8281                           ;doprnt.c: 1320: break;
  8282                           
  8283  0713  083F               	movf	printf@flag,w
  8284  0714  3980               	andlw	128
  8285                           
  8286                           ; Switch size 1, requested type "space"
  8287                           ; Number of cases is 2, Range of values is 0 to 128
  8288                           ; switch strategies available:
  8289                           ; Name         Instructions Cycles
  8290                           ; simple_byte            7     4 (average)
  8291                           ; jumptable            260     6 (fixed)
  8292                           ;	Chosen strategy is simple_byte
  8293  0715  3A00               	xorlw	0	; case 0
  8294  0716  1903               	skipnz
  8295  0717  2ECF               	goto	l530
  8296  0718  3A80               	xorlw	128	; case 128
  8297  0719  1903               	skipnz
  8298  071A  2EF1               	goto	l535
  8299  071B  2F1C               	goto	l2440
  8300  071C                     l2440:	
  8301                           
  8302                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8303  071C  0840               	movf	printf@width,w
  8304  071D  0441               	iorwf	printf@width+1,w
  8305  071E  1903               	btfsc	3,2
  8306  071F  2F28               	goto	l539
  8307  0720  083F               	movf	printf@flag,w
  8308  0721  3903               	andlw	3
  8309  0722  1903               	btfsc	3,2
  8310  0723  2F28               	goto	l539
  8311                           
  8312                           ;doprnt.c: 1346: width--;
  8313  0724  30FF               	movlw	255
  8314  0725  07C0               	addwf	printf@width,f
  8315  0726  30FF               	movlw	255
  8316  0727  3DC1               	addwfc	printf@width+1,f
  8317  0728                     l539:	
  8318                           
  8319                           ;doprnt.c: 1381: if(width > c)
  8320  0728  0842               	movf	printf@c,w
  8321  0729  00B0               	movwf	??_printf
  8322  072A  01B1               	clrf	??_printf+1
  8323  072B  1BB0               	btfsc	??_printf,7
  8324  072C  03B1               	decf	??_printf+1,f
  8325  072D  0831               	movf	??_printf+1,w
  8326  072E  3A80               	xorlw	128
  8327  072F  00B2               	movwf	??_printf+2
  8328  0730  0841               	movf	printf@width+1,w
  8329  0731  3A80               	xorlw	128
  8330  0732  0232               	subwf	??_printf+2,w
  8331  0733  1D03               	skipz
  8332  0734  2F37               	goto	u1965
  8333  0735  0840               	movf	printf@width,w
  8334  0736  0230               	subwf	??_printf,w
  8335  0737                     u1965:	
  8336  0737  1803               	skipnc
  8337  0738  2F44               	goto	l2448
  8338                           
  8339                           ;doprnt.c: 1382: width -= c;
  8340  0739  0020               	movlb	0	; select bank0
  8341  073A  0842               	movf	printf@c,w
  8342  073B  00B0               	movwf	??_printf
  8343  073C  01B1               	clrf	??_printf+1
  8344  073D  1BB0               	btfsc	??_printf,7
  8345  073E  03B1               	decf	??_printf+1,f
  8346  073F  0830               	movf	??_printf,w
  8347  0740  02C0               	subwf	printf@width,f
  8348  0741  0831               	movf	??_printf+1,w
  8349  0742  3BC1               	subwfb	printf@width+1,f
  8350  0743  2F47               	goto	l2450
  8351  0744                     l2448:	
  8352                           
  8353                           ;doprnt.c: 1383: else
  8354                           ;doprnt.c: 1384: width = 0;
  8355  0744  0020               	movlb	0	; select bank0
  8356  0745  01C0               	clrf	printf@width
  8357  0746  01C1               	clrf	printf@width+1
  8358  0747                     l2450:	
  8359                           
  8360                           ;doprnt.c: 1387: if(flag & 0x04) {
  8361  0747  1D3F               	btfss	printf@flag,2
  8362  0748  2F60               	goto	l2462
  8363                           
  8364                           ;doprnt.c: 1392: if(flag & 0x03)
  8365  0749  083F               	movf	printf@flag,w
  8366  074A  3903               	andlw	3
  8367  074B  1903               	btfsc	3,2
  8368  074C  2F51               	goto	l2456
  8369                           
  8370                           ;doprnt.c: 1393: (putch('-') );
  8371  074D  302D               	movlw	45
  8372  074E  3189  2187  3185   	fcall	_putch
  8373  0751                     l2456:	
  8374                           
  8375                           ;doprnt.c: 1415: if(width)
  8376  0751  0020               	movlb	0	; select bank0
  8377  0752                     L15:	
  8378  0752  0840               	movf	printf@width,w
  8379  0753  0441               	iorwf	printf@width+1,w
  8380  0754  1903               	btfsc	3,2
  8381  0755  2F79               	goto	l2472
  8382                           
  8383                           ;doprnt.c: 1417: (putch('0') );
  8384                           
  8385                           ;doprnt.c: 1416: do
  8386  0756  3030               	movlw	48
  8387  0757  3189  2187  3185   	fcall	_putch
  8388                           
  8389                           ;doprnt.c: 1418: while(--width);
  8390  075A  30FF               	movlw	255
  8391  075B  0020               	movlb	0	; select bank0
  8392  075C  07C0               	addwf	printf@width,f
  8393  075D  30FF               	movlw	255
  8394  075E  3DC1               	addwfc	printf@width+1,f
  8395  075F  2F52               	goto	L15
  8396  0760                     l2462:	
  8397                           ;doprnt.c: 1420: } else
  8398                           
  8399                           
  8400                           ;doprnt.c: 1422: {
  8401                           ;doprnt.c: 1424: if(width
  8402                           ;doprnt.c: 1428: )
  8403  0760  0840               	movf	printf@width,w
  8404  0761  0441               	iorwf	printf@width+1,w
  8405  0762  1903               	btfsc	3,2
  8406  0763  2F71               	goto	l2468
  8407  0764                     l2464:	
  8408                           ;doprnt.c: 1429: do
  8409                           
  8410                           
  8411                           ;doprnt.c: 1430: (putch(' ') );
  8412  0764  3020               	movlw	32
  8413  0765  3189  2187  3185   	fcall	_putch
  8414                           
  8415                           ;doprnt.c: 1431: while(--width);
  8416  0768  30FF               	movlw	255
  8417  0769  0020               	movlb	0	; select bank0
  8418  076A  07C0               	addwf	printf@width,f
  8419  076B  30FF               	movlw	255
  8420  076C  3DC1               	addwfc	printf@width+1,f
  8421  076D  0840               	movf	printf@width,w
  8422  076E  0441               	iorwf	printf@width+1,w
  8423  076F  1D03               	btfss	3,2
  8424  0770  2F64               	goto	l2464
  8425  0771                     l2468:	
  8426                           
  8427                           ;doprnt.c: 1438: if(flag & 0x03)
  8428  0771  083F               	movf	printf@flag,w
  8429  0772  3903               	andlw	3
  8430  0773  1903               	btfsc	3,2
  8431  0774  2F79               	goto	l2472
  8432                           
  8433                           ;doprnt.c: 1439: (putch('-') );
  8434  0775  302D               	movlw	45
  8435  0776  3189  2187  3185   	fcall	_putch
  8436  0779                     l2472:	
  8437                           
  8438                           ;doprnt.c: 1469: }
  8439                           ;doprnt.c: 1472: prec = c;
  8440  0779  0020               	movlb	0	; select bank0
  8441  077A  0842               	movf	printf@c,w
  8442  077B  00B0               	movwf	??_printf
  8443  077C  0830               	movf	??_printf,w
  8444  077D  00B7               	movwf	printf@prec
  8445                           
  8446                           ;doprnt.c: 1474: while(prec--) {
  8447  077E  2FDD               	goto	l2492
  8448  077F                     l2474:	
  8449                           ;doprnt.c: 1478: {
  8450                           ;doprnt.c: 1483: case 0x00:
  8451                           
  8452                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  8453                           
  8454                           
  8455                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8456  077F  300A               	movlw	10
  8457  0780  00F8               	movwf	___lwmod@divisor
  8458  0781  3000               	movlw	0
  8459  0782  00F9               	movwf	___lwmod@divisor+1
  8460  0783  0837               	movf	printf@prec,w
  8461  0784  00B0               	movwf	??_printf
  8462  0785  01B1               	clrf	??_printf+1
  8463  0786  35B0               	lslf	??_printf,f
  8464  0787  0DB1               	rlf	??_printf+1,f
  8465  0788  309F               	movlw	low (_dpowers| (0+32768))
  8466  0789  0730               	addwf	??_printf,w
  8467  078A  0084               	movwf	4
  8468  078B  3094               	movlw	high (_dpowers| (0+32768))
  8469  078C  3D31               	addwfc	??_printf+1,w
  8470  078D  0085               	movwf	5
  8471  078E  3F00               	moviw [0]fsr0
  8472  078F  00F0               	movwf	___lwdiv@divisor
  8473  0790  3F01               	moviw [1]fsr0
  8474  0791  00F1               	movwf	___lwdiv@divisor+1
  8475  0792  083E               	movf	printf@val+1,w
  8476  0793  00F3               	movwf	___lwdiv@dividend+1
  8477  0794  083D               	movf	printf@val,w
  8478  0795  00F2               	movwf	___lwdiv@dividend
  8479  0796  3180  200C  3185   	fcall	___lwdiv
  8480  0799  0871               	movf	?___lwdiv+1,w
  8481  079A  00FB               	movwf	___lwmod@dividend+1
  8482  079B  0870               	movf	?___lwdiv,w
  8483  079C  00FA               	movwf	___lwmod@dividend
  8484  079D  318A  22EE  3185   	fcall	___lwmod
  8485  07A0  0878               	movf	?___lwmod,w
  8486  07A1  3E30               	addlw	48
  8487  07A2  0020               	movlb	0	; select bank0
  8488  07A3  2FD6               	goto	L11
  8489  07A4                     l2476:	
  8490                           ;doprnt.c: 1497: case 0x80:
  8491                           
  8492                           ;doprnt.c: 1491: break;
  8493                           
  8494                           
  8495                           ;doprnt.c: 1499: {
  8496                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8497  07A4  0837               	movf	printf@prec,w
  8498  07A5  00B0               	movwf	??_printf
  8499  07A6  01B1               	clrf	??_printf+1
  8500  07A7  35B0               	lslf	??_printf,f
  8501  07A8  0DB1               	rlf	??_printf+1,f
  8502  07A9  30A9               	movlw	low (_hexpowers| (0+32768))
  8503  07AA  0730               	addwf	??_printf,w
  8504  07AB  0084               	movwf	4
  8505  07AC  3094               	movlw	high (_hexpowers| (0+32768))
  8506  07AD  3D31               	addwfc	??_printf+1,w
  8507  07AE  0085               	movwf	5
  8508  07AF  3F00               	moviw [0]fsr0
  8509  07B0  00F0               	movwf	___lwdiv@divisor
  8510  07B1  3F01               	moviw [1]fsr0
  8511  07B2  00F1               	movwf	___lwdiv@divisor+1
  8512  07B3  083E               	movf	printf@val+1,w
  8513  07B4  00F3               	movwf	___lwdiv@dividend+1
  8514  07B5  083D               	movf	printf@val,w
  8515  07B6  00F2               	movwf	___lwdiv@dividend
  8516  07B7  3180  200C  3185   	fcall	___lwdiv
  8517  07BA  0870               	movf	?___lwdiv,w
  8518  07BB  390F               	andlw	15
  8519  07BC  0020               	movlb	0	; select bank0
  8520  07BD  00B2               	movwf	??_printf+2
  8521  07BE  0832               	movf	??_printf+2,w
  8522  07BF  00B6               	movwf	printf@idx
  8523                           
  8524                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  8525  07C0  1ABF               	btfsc	printf@flag,5
  8526  07C1  2FC6               	goto	l2482
  8527  07C2  3055               	movlw	low (STR_67| (0+32768))
  8528  07C3  00B4               	movwf	_printf$780
  8529  07C4  3093               	movlw	high (STR_67| (0+32768))
  8530  07C5  2FC9               	goto	L12
  8531  07C6                     l2482:	
  8532  07C6  3044               	movlw	low (STR_66| (0+32768))
  8533  07C7  00B4               	movwf	_printf$780
  8534  07C8  3093               	movlw	high (STR_66| (0+32768))
  8535  07C9                     L12:	
  8536  07C9  00B5               	movwf	_printf$780+1
  8537  07CA  0835               	movf	_printf$780+1,w
  8538  07CB  00B1               	movwf	??_printf+1
  8539  07CC  0834               	movf	_printf$780,w
  8540  07CD  00B0               	movwf	??_printf
  8541  07CE  0836               	movf	printf@idx,w
  8542  07CF  0730               	addwf	??_printf,w
  8543  07D0  0084               	movwf	4
  8544  07D1  0831               	movf	??_printf+1,w
  8545  07D2  1803               	skipnc
  8546  07D3  0A31               	incf	??_printf+1,w
  8547  07D4  0085               	movwf	5
  8548  07D5  0800               	movf	0,w	;code access
  8549  07D6                     L11:	
  8550  07D6  00B2               	movwf	??_printf+2
  8551  07D7  0832               	movf	??_printf+2,w
  8552  07D8  00C2               	movwf	printf@c
  8553  07D9                     l2490:	
  8554                           ;doprnt.c: 1523: }
  8555                           
  8556                           ;doprnt.c: 1508: }
  8557                           ;doprnt.c: 1510: break;
  8558                           
  8559                           
  8560                           ;doprnt.c: 1524: (putch(c) );
  8561  07D9  0842               	movf	printf@c,w
  8562  07DA  3189  2187  3185   	fcall	_putch
  8563  07DD                     l2492:	
  8564  07DD  30FF               	movlw	255
  8565  07DE  0020               	movlb	0	; select bank0
  8566  07DF  00B0               	movwf	??_printf
  8567  07E0  0830               	movf	??_printf,w
  8568  07E1  07B7               	addwf	printf@prec,f
  8569  07E2  0A37               	incf	printf@prec,w
  8570  07E3  1903               	btfsc	3,2
  8571  07E4  2DAA               	goto	l2494
  8572  07E5  083F               	movf	printf@flag,w
  8573  07E6  3980               	andlw	128
  8574                           
  8575                           ; Switch size 1, requested type "space"
  8576                           ; Number of cases is 2, Range of values is 0 to 128
  8577                           ; switch strategies available:
  8578                           ; Name         Instructions Cycles
  8579                           ; simple_byte            7     4 (average)
  8580                           ; jumptable            260     6 (fixed)
  8581                           ;	Chosen strategy is simple_byte
  8582  07E7  3A00               	xorlw	0	; case 0
  8583  07E8  1903               	skipnz
  8584  07E9  2F7F               	goto	l2474
  8585  07EA  3A80               	xorlw	128	; case 128
  8586  07EB  1903               	skipnz
  8587  07EC  2FA4               	goto	l2476
  8588  07ED  2FD9               	goto	l2490
  8589  07EE  2FD9               	goto	l2490
  8590  07EF                     l564:	
  8591                           ;doprnt.c: 1540: return 0;
  8592                           ;	Return value of _printf is never used
  8593                           
  8594                           ;doprnt.c: 1525: }
  8595                           ;doprnt.c: 1533: }
  8596                           ;doprnt.c: 1535: alldone:
  8597                           
  8598  07EF  0008               	return
  8599  07F0                     __end_of_printf:	
  8600                           
  8601                           	psect	text20
  8602  0987                     __ptext20:	
  8603 ;; *************** function _putch *****************
  8604 ;; Defined at:
  8605 ;;		line 107 in file "mcc_generated_files/eusart.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  txData          1    wreg     unsigned char 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  txData          1    1[COMMON] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:        1 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    1
  8626 ;; This function calls:
  8627 ;;		_EUSART_Write
  8628 ;; This function is called by:
  8629 ;;		_printf
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _putch
  8635  0987                     _putch:	
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8639                           ;putch@txData stored from wreg
  8640  0987  00F1               	movwf	putch@txData
  8641                           
  8642                           ;eusart.c: 109: EUSART_Write(txData);
  8643  0988  0871               	movf	putch@txData,w
  8644  0989  3180  2004         	fcall	_EUSART_Write
  8645  098B  0008               	return
  8646  098C                     __end_of_putch:	
  8647                           
  8648                           	psect	text21
  8649  0004                     __ptext21:	
  8650 ;; *************** function _EUSART_Write *****************
  8651 ;; Defined at:
  8652 ;;		line 93 in file "mcc_generated_files/eusart.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  txData          1    wreg     unsigned char 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  txData          1    0[COMMON] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      void 
  8659 ;; Registers used:
  8660 ;;		wreg
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;Total ram usage:        1 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_putch
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           
  8680                           ;psect for function _EUSART_Write
  8681  0004                     _EUSART_Write:	
  8682                           
  8683                           ;incstack = 0
  8684                           ; Regs used in _EUSART_Write: [wreg]
  8685                           ;EUSART_Write@txData stored from wreg
  8686  0004  00F0               	movwf	EUSART_Write@txData
  8687  0005                     l58:	
  8688                           ;eusart.c: 96: {
  8689                           
  8690                           ;eusart.c: 95: while(0 == PIR1bits.TXIF)
  8691                           
  8692  0005  0020               	movlb	0	; select bank0
  8693  0006  1E11               	btfss	17,4	;volatile
  8694  0007  2805               	goto	l58
  8695                           
  8696                           ;eusart.c: 97: }
  8697                           ;eusart.c: 99: TXREG = txData;
  8698  0008  0870               	movf	EUSART_Write@txData,w
  8699  0009  0023               	movlb	3	; select bank3
  8700  000A  009A               	movwf	26	;volatile
  8701  000B  0008               	return
  8702  000C                     __end_of_EUSART_Write:	
  8703                           
  8704                           	psect	text22
  8705  0AEE                     __ptext22:	
  8706 ;; *************** function ___lwmod *****************
  8707 ;; Defined at:
  8708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  divisor         2    8[COMMON] unsigned int 
  8711 ;;  dividend        2   10[COMMON] unsigned int 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  counter         1   13[COMMON] unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  2    8[COMMON] unsigned int 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8723 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;Total ram usage:        6 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; This function calls:
  8730 ;;		Nothing
  8731 ;; This function is called by:
  8732 ;;		_printf
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function ___lwmod
  8738  0AEE                     ___lwmod:	
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8742  0AEE  0878               	movf	___lwmod@divisor,w
  8743  0AEF  0479               	iorwf	___lwmod@divisor+1,w
  8744  0AF0  1903               	btfsc	3,2
  8745  0AF1  2B15               	goto	l2298
  8746  0AF2  01FD               	clrf	___lwmod@counter
  8747  0AF3  0AFD               	incf	___lwmod@counter,f
  8748  0AF4                     l2288:	
  8749  0AF4  1BF9               	btfsc	___lwmod@divisor+1,7
  8750  0AF5  2B00               	goto	l2290
  8751  0AF6  3001               	movlw	1
  8752  0AF7                     u1675:	
  8753  0AF7  35F8               	lslf	___lwmod@divisor,f
  8754  0AF8  0DF9               	rlf	___lwmod@divisor+1,f
  8755  0AF9  0B89               	decfsz	9,f
  8756  0AFA  2AF7               	goto	u1675
  8757  0AFB  3001               	movlw	1
  8758  0AFC  00FC               	movwf	??___lwmod
  8759  0AFD  087C               	movf	??___lwmod,w
  8760  0AFE  07FD               	addwf	___lwmod@counter,f
  8761  0AFF  2AF4               	goto	l2288
  8762  0B00                     l2290:	
  8763  0B00  0879               	movf	___lwmod@divisor+1,w
  8764  0B01  027B               	subwf	___lwmod@dividend+1,w
  8765  0B02  1D03               	skipz
  8766  0B03  2B06               	goto	u1695
  8767  0B04  0878               	movf	___lwmod@divisor,w
  8768  0B05  027A               	subwf	___lwmod@dividend,w
  8769  0B06                     u1695:	
  8770  0B06  1C03               	skipc
  8771  0B07  2B0C               	goto	l2294
  8772  0B08  0878               	movf	___lwmod@divisor,w
  8773  0B09  02FA               	subwf	___lwmod@dividend,f
  8774  0B0A  0879               	movf	___lwmod@divisor+1,w
  8775  0B0B  3BFB               	subwfb	___lwmod@dividend+1,f
  8776  0B0C                     l2294:	
  8777  0B0C  3001               	movlw	1
  8778  0B0D                     u1705:	
  8779  0B0D  36F9               	lsrf	___lwmod@divisor+1,f
  8780  0B0E  0CF8               	rrf	___lwmod@divisor,f
  8781  0B0F  0B89               	decfsz	9,f
  8782  0B10  2B0D               	goto	u1705
  8783  0B11  3001               	movlw	1
  8784  0B12  02FD               	subwf	___lwmod@counter,f
  8785  0B13  1D03               	btfss	3,2
  8786  0B14  2B00               	goto	l2290
  8787  0B15                     l2298:	
  8788  0B15  087B               	movf	___lwmod@dividend+1,w
  8789  0B16  00F9               	movwf	?___lwmod+1
  8790  0B17  087A               	movf	___lwmod@dividend,w
  8791  0B18  00F8               	movwf	?___lwmod
  8792  0B19  0008               	return
  8793  0B1A                     __end_of___lwmod:	
  8794                           
  8795                           	psect	text23
  8796  000C                     __ptext23:	
  8797 ;; *************** function ___lwdiv *****************
  8798 ;; Defined at:
  8799 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  divisor         2    0[COMMON] unsigned int 
  8802 ;;  dividend        2    2[COMMON] unsigned int 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  quotient        2    5[COMMON] unsigned int 
  8805 ;;  counter         1    7[COMMON] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  2    0[COMMON] unsigned int 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:        8 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; This function calls:
  8822 ;;		Nothing
  8823 ;; This function is called by:
  8824 ;;		_printf
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           
  8829                           ;psect for function ___lwdiv
  8830  000C                     ___lwdiv:	
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8834  000C  01F5               	clrf	___lwdiv@quotient
  8835  000D  01F6               	clrf	___lwdiv@quotient+1
  8836  000E  0870               	movf	___lwdiv@divisor,w
  8837  000F  0471               	iorwf	___lwdiv@divisor+1,w
  8838  0010  1903               	btfsc	3,2
  8839  0011  283B               	goto	l2276
  8840  0012  01F7               	clrf	___lwdiv@counter
  8841  0013  0AF7               	incf	___lwdiv@counter,f
  8842  0014                     l2264:	
  8843  0014  1BF1               	btfsc	___lwdiv@divisor+1,7
  8844  0015  2820               	goto	l2266
  8845  0016  3001               	movlw	1
  8846  0017                     u1605:	
  8847  0017  35F0               	lslf	___lwdiv@divisor,f
  8848  0018  0DF1               	rlf	___lwdiv@divisor+1,f
  8849  0019  0B89               	decfsz	9,f
  8850  001A  2817               	goto	u1605
  8851  001B  3001               	movlw	1
  8852  001C  00F4               	movwf	??___lwdiv
  8853  001D  0874               	movf	??___lwdiv,w
  8854  001E  07F7               	addwf	___lwdiv@counter,f
  8855  001F  2814               	goto	l2264
  8856  0020                     l2266:	
  8857  0020  3001               	movlw	1
  8858  0021                     u1625:	
  8859  0021  35F5               	lslf	___lwdiv@quotient,f
  8860  0022  0DF6               	rlf	___lwdiv@quotient+1,f
  8861  0023  0B89               	decfsz	9,f
  8862  0024  2821               	goto	u1625
  8863  0025  0871               	movf	___lwdiv@divisor+1,w
  8864  0026  0273               	subwf	___lwdiv@dividend+1,w
  8865  0027  1D03               	skipz
  8866  0028  282B               	goto	u1635
  8867  0029  0870               	movf	___lwdiv@divisor,w
  8868  002A  0272               	subwf	___lwdiv@dividend,w
  8869  002B                     u1635:	
  8870  002B  1C03               	skipc
  8871  002C  2832               	goto	l2272
  8872  002D  0870               	movf	___lwdiv@divisor,w
  8873  002E  02F2               	subwf	___lwdiv@dividend,f
  8874  002F  0871               	movf	___lwdiv@divisor+1,w
  8875  0030  3BF3               	subwfb	___lwdiv@dividend+1,f
  8876  0031  1475               	bsf	___lwdiv@quotient,0
  8877  0032                     l2272:	
  8878  0032  3001               	movlw	1
  8879  0033                     u1645:	
  8880  0033  36F1               	lsrf	___lwdiv@divisor+1,f
  8881  0034  0CF0               	rrf	___lwdiv@divisor,f
  8882  0035  0B89               	decfsz	9,f
  8883  0036  2833               	goto	u1645
  8884  0037  3001               	movlw	1
  8885  0038  02F7               	subwf	___lwdiv@counter,f
  8886  0039  1D03               	btfss	3,2
  8887  003A  2820               	goto	l2266
  8888  003B                     l2276:	
  8889  003B  0876               	movf	___lwdiv@quotient+1,w
  8890  003C  00F1               	movwf	?___lwdiv+1
  8891  003D  0875               	movf	___lwdiv@quotient,w
  8892  003E  00F0               	movwf	?___lwdiv
  8893  003F  0008               	return
  8894  0040                     __end_of___lwdiv:	
  8895                           
  8896                           	psect	text24
  8897  0AA2                     __ptext24:	
  8898 ;; *************** function _abort_pending_transmissions *****************
  8899 ;; Defined at:
  8900 ;;		line 110 in file "mcp2515.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  bytes_writte    1    2[BANK0 ] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      unsigned char 
  8907 ;; Registers used:
  8908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:        3 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    3
  8921 ;; This function calls:
  8922 ;;		_SPI_exchange
  8923 ;; This function is called by:
  8924 ;;		_can_set_mask
  8925 ;;		_can_abort
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function _abort_pending_transmissions
  8931  0AA2                     _abort_pending_transmissions:	
  8932                           
  8933                           ;mcp2515.c: 111: buf[0] = 0b00000101u;
  8934                           
  8935                           ;incstack = 0
  8936                           ; Regs used in _abort_pending_transmissions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8937  0AA2  3005               	movlw	5
  8938  0AA3  0020               	movlb	0	; select bank0
  8939  0AA4  00A0               	movwf	??_abort_pending_transmissions
  8940  0AA5  0820               	movf	??_abort_pending_transmissions,w
  8941  0AA6  0021               	movlb	1	; select bank1
  8942  0AA7  00B4               	movwf	_buf^(0+128)
  8943                           
  8944                           ;mcp2515.c: 112: buf[1] = 0x0fu;
  8945  0AA8  300F               	movlw	15
  8946  0AA9  0020               	movlb	0	; select bank0
  8947  0AAA  00A0               	movwf	??_abort_pending_transmissions
  8948  0AAB  0820               	movf	??_abort_pending_transmissions,w
  8949  0AAC  0021               	movlb	1	; select bank1
  8950  0AAD  00B5               	movwf	(_buf^(0+128)+1)
  8951                           
  8952                           ;mcp2515.c: 113: buf[2] = 0b00010000u;
  8953  0AAE  3010               	movlw	16
  8954  0AAF  0020               	movlb	0	; select bank0
  8955  0AB0  00A0               	movwf	??_abort_pending_transmissions
  8956  0AB1  0820               	movf	??_abort_pending_transmissions,w
  8957  0AB2  0021               	movlb	1	; select bank1
  8958  0AB3  00B6               	movwf	(_buf^(0+128)+2)
  8959                           
  8960                           ;mcp2515.c: 114: buf[3] = 0b00010000u;
  8961  0AB4  3010               	movlw	16
  8962  0AB5  0020               	movlb	0	; select bank0
  8963  0AB6  00A0               	movwf	??_abort_pending_transmissions
  8964  0AB7  0820               	movf	??_abort_pending_transmissions,w
  8965  0AB8  0021               	movlb	1	; select bank1
  8966  0AB9  00B7               	movwf	(_buf^(0+128)+3)
  8967                           
  8968                           ;mcp2515.c: 115: uint8_t bytes_written = SPI_exchange(buf, 4);
  8969  0ABA  3004               	movlw	4
  8970  0ABB  0020               	movlb	0	; select bank0
  8971  0ABC  00A0               	movwf	??_abort_pending_transmissions
  8972  0ABD  0820               	movf	??_abort_pending_transmissions,w
  8973  0ABE  00F8               	movwf	SPI_exchange@len
  8974  0ABF  30B4               	movlw	(low (_buf| 0))& (0+255)
  8975  0AC0  318A  2201         	fcall	_SPI_exchange
  8976  0AC2  0020               	movlb	0	; select bank0
  8977  0AC3  00A1               	movwf	??_abort_pending_transmissions+1
  8978  0AC4  0821               	movf	??_abort_pending_transmissions+1,w
  8979  0AC5  00A2               	movwf	abort_pending_transmissions@bytes_written
  8980                           
  8981                           ;mcp2515.c: 116: return bytes_written;
  8982  0AC6  0822               	movf	abort_pending_transmissions@bytes_written,w
  8983  0AC7  0008               	return
  8984  0AC8                     __end_of_abort_pending_transmissions:	
  8985                           
  8986                           	psect	text25
  8987  0A01                     __ptext25:	
  8988 ;; *************** function _SPI_exchange *****************
  8989 ;; Defined at:
  8990 ;;		line 4 in file "spi.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  buf             1    wreg     PTR unsigned char 
  8993 ;;		 -> receive@rx_buf(15), buf(16), 
  8994 ;;  len             1    8[COMMON] unsigned char 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;  buf             1   13[COMMON] PTR unsigned char 
  8997 ;;		 -> receive@rx_buf(15), buf(16), 
  8998 ;;  bytes_writte    1   12[COMMON] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  1    wreg      unsigned char 
  9001 ;; Registers used:
  9002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9008 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;Total ram usage:        6 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    2
  9015 ;; This function calls:
  9016 ;;		_SPI_Exchange8bitBuffer
  9017 ;; This function is called by:
  9018 ;;		_can_init
  9019 ;;		_can_ope_mode
  9020 ;;		_abort_pending_transmissions
  9021 ;;		_can_set_mask
  9022 ;;		_txf_clear
  9023 ;;		_receive
  9024 ;;		_can_send
  9025 ;;		_can_status_check
  9026 ;;		_can_baudrate
  9027 ;;		_read_register
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _SPI_exchange
  9033  0A01                     _SPI_exchange:	
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _SPI_exchange: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9037                           ;SPI_exchange@buf stored from wreg
  9038  0A01  00FD               	movwf	SPI_exchange@buf
  9039                           
  9040                           ;spi.c: 5: LATAbits.LATA4 = 0;
  9041  0A02  0022               	movlb	2	; select bank2
  9042  0A03  120C               	bcf	12,4	;volatile
  9043                           
  9044                           ;spi.c: 6: uint8_t bytes_written = SPI_Exchange8bitBuffer(buf, len, buf);
  9045  0A04  0878               	movf	SPI_exchange@len,w
  9046  0A05  00F9               	movwf	??_SPI_exchange
  9047  0A06  0879               	movf	??_SPI_exchange,w
  9048  0A07  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  9049  0A08  087D               	movf	SPI_exchange@buf,w
  9050  0A09  00FA               	movwf	??_SPI_exchange+1
  9051  0A0A  087A               	movf	??_SPI_exchange+1,w
  9052  0A0B  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  9053  0A0C  087D               	movf	SPI_exchange@buf,w
  9054  0A0D  318B  23C8         	fcall	_SPI_Exchange8bitBuffer
  9055  0A0F  00FB               	movwf	??_SPI_exchange+2
  9056  0A10  087B               	movf	??_SPI_exchange+2,w
  9057  0A11  00FC               	movwf	SPI_exchange@bytes_written
  9058                           
  9059                           ;spi.c: 7: LATAbits.LATA4 = 1;
  9060  0A12  0022               	movlb	2	; select bank2
  9061  0A13  160C               	bsf	12,4	;volatile
  9062                           
  9063                           ;spi.c: 8: return bytes_written;
  9064  0A14  087C               	movf	SPI_exchange@bytes_written,w
  9065  0A15  0008               	return
  9066  0A16                     __end_of_SPI_exchange:	
  9067                           
  9068                           	psect	text26
  9069  0BC8                     __ptext26:	
  9070 ;; *************** function _SPI_Exchange8bitBuffer *****************
  9071 ;; Defined at:
  9072 ;;		line 91 in file "mcc_generated_files/spi.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;  dataIn          1    wreg     PTR unsigned char 
  9075 ;;		 -> receive@rx_buf(15), buf(16), 
  9076 ;;  bufLen          1    1[COMMON] unsigned char 
  9077 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  9078 ;;		 -> receive@rx_buf(15), buf(16), 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  9081 ;;		 -> receive@rx_buf(15), buf(16), 
  9082 ;;  bytesWritten    1    7[COMMON] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      unsigned char 
  9085 ;; Registers used:
  9086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;Total ram usage:        7 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    1
  9099 ;; This function calls:
  9100 ;;		_SPI_Exchange8bit
  9101 ;; This function is called by:
  9102 ;;		_SPI_exchange
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           
  9107                           ;psect for function _SPI_Exchange8bitBuffer
  9108  0BC8                     _SPI_Exchange8bitBuffer:	
  9109                           
  9110                           ;incstack = 0
  9111                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9112                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  9113  0BC8  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  9114                           
  9115                           ;spi.c: 93: uint8_t bytesWritten = 0;
  9116  0BC9  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  9117                           
  9118                           ;spi.c: 95: if(bufLen != 0)
  9119  0BCA  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9120  0BCB  1903               	btfsc	3,2
  9121  0BCC  2C14               	goto	l2330
  9122                           
  9123                           ;spi.c: 96: {
  9124                           ;spi.c: 97: if(dataIn != (0))
  9125  0BCD  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  9126  0BCE  1D03               	btfss	3,2
  9127  0BCF  2BF6               	goto	l2318
  9128  0BD0  2BFB               	goto	l2320
  9129  0BD1                     l2310:	
  9130                           ;spi.c: 98: {
  9131                           ;spi.c: 99: while(bytesWritten < bufLen)
  9132                           
  9133                           
  9134                           ;spi.c: 100: {
  9135                           ;spi.c: 101: if(dataOut == (0))
  9136  0BD1  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9137  0BD2  1D03               	btfss	3,2
  9138  0BD3  2BDF               	goto	l2314
  9139                           
  9140                           ;spi.c: 102: {
  9141                           ;spi.c: 103: SPI_Exchange8bit(dataIn[bytesWritten]);
  9142  0BD4  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9143  0BD5  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9144  0BD6  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9145  0BD7  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9146  0BD8  0086               	movwf	6
  9147  0BD9  0187               	clrf	7
  9148  0BDA  0801               	movf	1,w
  9149  0BDB  3189  21A0  318B   	fcall	_SPI_Exchange8bit
  9150                           
  9151                           ;spi.c: 104: }
  9152  0BDE  2BF2               	goto	l2316
  9153  0BDF                     l2314:	
  9154                           
  9155                           ;spi.c: 105: else
  9156                           ;spi.c: 106: {
  9157                           ;spi.c: 107: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9158  0BDF  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9159  0BE0  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9160  0BE1  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9161  0BE2  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9162  0BE3  0086               	movwf	6
  9163  0BE4  0187               	clrf	7
  9164  0BE5  0801               	movf	1,w
  9165  0BE6  3189  21A0  318B   	fcall	_SPI_Exchange8bit
  9166  0BE9  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  9167  0BEA  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9168  0BEB  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9169  0BEC  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  9170  0BED  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  9171  0BEE  0086               	movwf	6
  9172  0BEF  0187               	clrf	7
  9173  0BF0  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  9174  0BF1  0081               	movwf	1
  9175  0BF2                     l2316:	
  9176                           
  9177                           ;spi.c: 108: }
  9178                           ;spi.c: 110: bytesWritten++;
  9179  0BF2  3001               	movlw	1
  9180  0BF3  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9181  0BF4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9182  0BF5  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9183  0BF6                     l2318:	
  9184  0BF6  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9185  0BF7  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9186  0BF8  1803               	btfsc	3,0
  9187  0BF9  2C14               	goto	l2330
  9188  0BFA  2BD1               	goto	l2310
  9189  0BFB                     l2320:	
  9190                           ;spi.c: 111: }
  9191                           ;spi.c: 112: }
  9192                           
  9193                           
  9194                           ;spi.c: 113: else
  9195                           ;spi.c: 114: {
  9196                           ;spi.c: 115: if(dataOut != (0))
  9197  0BFB  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9198  0BFC  1D03               	btfss	3,2
  9199  0BFD  2C10               	goto	l2328
  9200  0BFE  2C14               	goto	l2330
  9201  0BFF                     l2324:	
  9202                           ;spi.c: 116: {
  9203                           ;spi.c: 117: while(bytesWritten < bufLen )
  9204                           
  9205                           
  9206                           ;spi.c: 118: {
  9207                           ;spi.c: 119: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9208  0BFF  3000               	movlw	0
  9209  0C00  3189  21A0  318B   	fcall	_SPI_Exchange8bit
  9210  0C03  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9211  0C04  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9212  0C05  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9213  0C06  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  9214  0C07  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  9215  0C08  0086               	movwf	6
  9216  0C09  0187               	clrf	7
  9217  0C0A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9218  0C0B  0081               	movwf	1
  9219                           
  9220                           ;spi.c: 121: bytesWritten++;
  9221  0C0C  3001               	movlw	1
  9222  0C0D  00F3               	movwf	??_SPI_Exchange8bitBuffer
  9223  0C0E  0873               	movf	??_SPI_Exchange8bitBuffer,w
  9224  0C0F  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9225  0C10                     l2328:	
  9226  0C10  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9227  0C11  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9228  0C12  1C03               	skipc
  9229  0C13  2BFF               	goto	l2324
  9230  0C14                     l2330:	
  9231                           
  9232                           ;spi.c: 122: }
  9233                           ;spi.c: 123: }
  9234                           ;spi.c: 124: }
  9235                           ;spi.c: 125: }
  9236                           ;spi.c: 127: return bytesWritten;
  9237  0C14  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9238  0C15  0008               	return
  9239  0C16                     __end_of_SPI_Exchange8bitBuffer:	
  9240                           
  9241                           	psect	text27
  9242  09A0                     __ptext27:	
  9243 ;; *************** function _SPI_Exchange8bit *****************
  9244 ;; Defined at:
  9245 ;;		line 77 in file "mcc_generated_files/spi.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  data            1    wreg     unsigned char 
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  data            1    0[COMMON] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      unsigned char 
  9252 ;; Registers used:
  9253 ;;		wreg
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; This function calls:
  9266 ;;		Nothing
  9267 ;; This function is called by:
  9268 ;;		_SPI_Exchange8bitBuffer
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           
  9273                           ;psect for function _SPI_Exchange8bit
  9274  09A0                     _SPI_Exchange8bit:	
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9278                           ;SPI_Exchange8bit@data stored from wreg
  9279  09A0  00F0               	movwf	SPI_Exchange8bit@data
  9280                           
  9281                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  9282  09A1  0024               	movlb	4	; select bank4
  9283  09A2  1395               	bcf	21,7	;volatile
  9284                           
  9285                           ;spi.c: 82: SSP1BUF = data;
  9286  09A3  0870               	movf	SPI_Exchange8bit@data,w
  9287  09A4  0091               	movwf	17	;volatile
  9288  09A5                     l113:	
  9289                           ;spi.c: 85: {
  9290                           
  9291                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  9292                           
  9293  09A5  1C14               	btfss	20,0	;volatile
  9294  09A6  29A5               	goto	l113
  9295                           
  9296                           ;spi.c: 86: }
  9297                           ;spi.c: 88: return (SSP1BUF);
  9298  09A7  0811               	movf	17,w	;volatile
  9299  09A8  0008               	return
  9300  09A9                     __end_of_SPI_Exchange8bit:	
  9301                           
  9302                           	psect	text28
  9303  0D21                     __ptext28:	
  9304 ;; *************** function _atoi *****************
  9305 ;; Defined at:
  9306 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  s               1    wreg     PTR const unsigned char 
  9309 ;;		 -> main@buf(22), 
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;  s               1   13[COMMON] PTR const unsigned char 
  9312 ;;		 -> main@buf(22), 
  9313 ;;  a               2   11[COMMON] int 
  9314 ;;  sign            1   10[COMMON] unsigned char 
  9315 ;; Return value:  Size  Location     Type
  9316 ;;                  2    6[COMMON] int 
  9317 ;; Registers used:
  9318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9324 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;Total ram usage:        8 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    1
  9331 ;; This function calls:
  9332 ;;		___wmul
  9333 ;;		_isdigit
  9334 ;; This function is called by:
  9335 ;;		_main
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           
  9340                           ;psect for function _atoi
  9341  0D21                     _atoi:	
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9345                           ;atoi@s stored from wreg
  9346  0D21  00FD               	movwf	atoi@s
  9347  0D22                     l2940:	
  9348  0D22  087D               	movf	atoi@s,w
  9349  0D23  0086               	movwf	6
  9350  0D24  0187               	clrf	7
  9351  0D25  3020               	movlw	32
  9352  0D26  0601               	xorwf	1,w
  9353  0D27  1D03               	btfss	3,2
  9354  0D28  2D2E               	goto	l2942
  9355  0D29                     l2938:	
  9356  0D29  3001               	movlw	1
  9357  0D2A  00F8               	movwf	??_atoi
  9358  0D2B  0878               	movf	??_atoi,w
  9359  0D2C  07FD               	addwf	atoi@s,f
  9360  0D2D  2D22               	goto	l2940
  9361  0D2E                     l2942:	
  9362  0D2E  087D               	movf	atoi@s,w
  9363  0D2F  0086               	movwf	6
  9364  0D30  0187               	clrf	7
  9365  0D31  3009               	movlw	9
  9366  0D32  0601               	xorwf	1,w
  9367  0D33  1903               	btfsc	3,2
  9368  0D34  2D29               	goto	l2938
  9369  0D35  01FB               	clrf	atoi@a
  9370  0D36  01FC               	clrf	atoi@a+1
  9371  0D37  01FA               	clrf	atoi@sign
  9372  0D38  087D               	movf	atoi@s,w
  9373  0D39  0086               	movwf	6
  9374  0D3A  0187               	clrf	7
  9375  0D3B  302D               	movlw	45
  9376  0D3C  0601               	xorwf	1,w
  9377  0D3D  1D03               	btfss	3,2
  9378  0D3E  2D44               	goto	l2950
  9379  0D3F  3001               	movlw	1
  9380  0D40  00F8               	movwf	??_atoi
  9381  0D41  0878               	movf	??_atoi,w
  9382  0D42  07FA               	addwf	atoi@sign,f
  9383  0D43  2D4B               	goto	l2956
  9384  0D44                     l2950:	
  9385  0D44  087D               	movf	atoi@s,w
  9386  0D45  0086               	movwf	6
  9387  0D46  0187               	clrf	7
  9388  0D47  302B               	movlw	43
  9389  0D48  0601               	xorwf	1,w
  9390  0D49  1D03               	btfss	3,2
  9391  0D4A  2D4F               	goto	l2958
  9392  0D4B                     l2956:	
  9393  0D4B  3001               	movlw	1
  9394  0D4C  00F8               	movwf	??_atoi
  9395  0D4D  0878               	movf	??_atoi,w
  9396  0D4E  07FD               	addwf	atoi@s,f
  9397  0D4F                     l2958:	
  9398  0D4F  087D               	movf	atoi@s,w
  9399  0D50  0086               	movwf	6
  9400  0D51  0187               	clrf	7
  9401  0D52  0801               	movf	1,w
  9402  0D53  3189  21D5  318D   	fcall	_isdigit
  9403  0D56  1C03               	btfss	3,0
  9404  0D57  2D74               	goto	l2960
  9405  0D58  087C               	movf	atoi@a+1,w
  9406  0D59  00F1               	movwf	___wmul@multiplier+1
  9407  0D5A  087B               	movf	atoi@a,w
  9408  0D5B  00F0               	movwf	___wmul@multiplier
  9409  0D5C  300A               	movlw	10
  9410  0D5D  00F2               	movwf	___wmul@multiplicand
  9411  0D5E  3000               	movlw	0
  9412  0D5F  00F3               	movwf	___wmul@multiplicand+1
  9413  0D60  318A  2246  318D   	fcall	___wmul
  9414  0D63  087D               	movf	atoi@s,w
  9415  0D64  0086               	movwf	6
  9416  0D65  0187               	clrf	7
  9417  0D66  0801               	movf	1,w
  9418  0D67  0770               	addwf	?___wmul,w
  9419  0D68  00F8               	movwf	??_atoi
  9420  0D69  0871               	movf	?___wmul+1,w
  9421  0D6A  1803               	skipnc
  9422  0D6B  0A71               	incf	?___wmul+1,w
  9423  0D6C  00F9               	movwf	??_atoi+1
  9424  0D6D  0878               	movf	??_atoi,w
  9425  0D6E  3ED0               	addlw	208
  9426  0D6F  00FB               	movwf	atoi@a
  9427  0D70  30FF               	movlw	255
  9428  0D71  3D79               	addwfc	??_atoi+1,w
  9429  0D72  00FC               	movwf	atoi@a+1
  9430  0D73  2D4B               	goto	l2956
  9431  0D74                     l2960:	
  9432  0D74  087A               	movf	atoi@sign,w
  9433  0D75  1903               	btfsc	3,2
  9434  0D76  2D83               	goto	l2966
  9435  0D77  097B               	comf	atoi@a,w
  9436  0D78  00F8               	movwf	??_atoi
  9437  0D79  097C               	comf	atoi@a+1,w
  9438  0D7A  00F9               	movwf	??_atoi+1
  9439  0D7B  0AF8               	incf	??_atoi,f
  9440  0D7C  1903               	skipnz
  9441  0D7D  0AF9               	incf	??_atoi+1,f
  9442  0D7E  0878               	movf	??_atoi,w
  9443  0D7F  00F6               	movwf	?_atoi
  9444  0D80  0879               	movf	??_atoi+1,w
  9445  0D81  00F7               	movwf	?_atoi+1
  9446  0D82  0008               	return
  9447  0D83                     l2966:	
  9448  0D83  087C               	movf	atoi@a+1,w
  9449  0D84  00F7               	movwf	?_atoi+1
  9450  0D85  087B               	movf	atoi@a,w
  9451  0D86  00F6               	movwf	?_atoi
  9452  0D87  0008               	return
  9453  0D88                     __end_of_atoi:	
  9454                           
  9455                           	psect	text29
  9456  09D5                     __ptext29:	
  9457 ;; *************** function _isdigit *****************
  9458 ;; Defined at:
  9459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  c               1    wreg     unsigned char 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  c               1    1[COMMON] unsigned char 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;		None               void
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;Total ram usage:        2 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; This function calls:
  9480 ;;		Nothing
  9481 ;; This function is called by:
  9482 ;;		_printf
  9483 ;;		_atoi
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _isdigit
  9489  09D5                     _isdigit:	
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9493                           ;isdigit@c stored from wreg
  9494  09D5  00F1               	movwf	isdigit@c
  9495  09D6  01F0               	clrf	_isdigit$971
  9496  09D7  303A               	movlw	58
  9497  09D8  0271               	subwf	isdigit@c,w
  9498  09D9  1803               	skipnc
  9499  09DA  29E1               	goto	l2236
  9500  09DB  3030               	movlw	48
  9501  09DC  0271               	subwf	isdigit@c,w
  9502  09DD  1C03               	skipc
  9503  09DE  29E1               	goto	l2236
  9504  09DF  01F0               	clrf	_isdigit$971
  9505  09E0  0AF0               	incf	_isdigit$971,f
  9506  09E1                     l2236:	
  9507  09E1  0C70               	rrf	_isdigit$971,w
  9508  09E2  0008               	return
  9509  09E3                     __end_of_isdigit:	
  9510                           
  9511                           	psect	text30
  9512  0A46                     __ptext30:	
  9513 ;; *************** function ___wmul *****************
  9514 ;; Defined at:
  9515 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  multiplier      2    0[COMMON] unsigned int 
  9518 ;;  multiplicand    2    2[COMMON] unsigned int 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;  product         2    4[COMMON] unsigned int 
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  2    0[COMMON] unsigned int 
  9523 ;; Registers used:
  9524 ;;		wreg, status,2, status,0
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9530 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;Total ram usage:        6 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_printf
  9540 ;;		_atoi
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           
  9545                           ;psect for function ___wmul
  9546  0A46                     ___wmul:	
  9547                           
  9548                           ;incstack = 0
  9549                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9550  0A46  01F4               	clrf	___wmul@product
  9551  0A47  01F5               	clrf	___wmul@product+1
  9552  0A48                     l2242:	
  9553  0A48  1C70               	btfss	___wmul@multiplier,0
  9554  0A49  2A4E               	goto	l648
  9555  0A4A  0872               	movf	___wmul@multiplicand,w
  9556  0A4B  07F4               	addwf	___wmul@product,f
  9557  0A4C  0873               	movf	___wmul@multiplicand+1,w
  9558  0A4D  3DF5               	addwfc	___wmul@product+1,f
  9559  0A4E                     l648:	
  9560  0A4E  3001               	movlw	1
  9561  0A4F                     u1565:	
  9562  0A4F  35F2               	lslf	___wmul@multiplicand,f
  9563  0A50  0DF3               	rlf	___wmul@multiplicand+1,f
  9564  0A51  0B89               	decfsz	9,f
  9565  0A52  2A4F               	goto	u1565
  9566  0A53  3001               	movlw	1
  9567  0A54                     u1575:	
  9568  0A54  36F1               	lsrf	___wmul@multiplier+1,f
  9569  0A55  0CF0               	rrf	___wmul@multiplier,f
  9570  0A56  0B89               	decfsz	9,f
  9571  0A57  2A54               	goto	u1575
  9572  0A58  0870               	movf	___wmul@multiplier,w
  9573  0A59  0471               	iorwf	___wmul@multiplier+1,w
  9574  0A5A  1D03               	btfss	3,2
  9575  0A5B  2A48               	goto	l2242
  9576  0A5C  0875               	movf	___wmul@product+1,w
  9577  0A5D  00F1               	movwf	?___wmul+1
  9578  0A5E  0874               	movf	___wmul@product,w
  9579  0A5F  00F0               	movwf	?___wmul
  9580  0A60  0008               	return
  9581  0A61                     __end_of___wmul:	
  9582                           
  9583                           	psect	text31
  9584  09E3                     __ptext31:	
  9585 ;; *************** function _SYSTEM_Initialize *****************
  9586 ;; Defined at:
  9587 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, status,0, pclath, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        0 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    1
  9608 ;; This function calls:
  9609 ;;		_EUSART_Initialize
  9610 ;;		_OSCILLATOR_Initialize
  9611 ;;		_PIN_MANAGER_Initialize
  9612 ;;		_SPI_Initialize
  9613 ;;		_WDT_Initialize
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           
  9620                           ;psect for function _SYSTEM_Initialize
  9621  09E3                     _SYSTEM_Initialize:	
  9622                           
  9623                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9627  09E3  318A  2216  3189   	fcall	_PIN_MANAGER_Initialize
  9628                           
  9629                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9630  09E6  3189  2192  3189   	fcall	_OSCILLATOR_Initialize
  9631                           
  9632                           ;mcc.c: 75: WDT_Initialize();
  9633  09E9  3189  2183  3189   	fcall	_WDT_Initialize
  9634                           
  9635                           ;mcc.c: 76: SPI_Initialize();
  9636  09EC  3189  2199  3189   	fcall	_SPI_Initialize
  9637                           
  9638                           ;mcc.c: 77: EUSART_Initialize();
  9639  09EF  3189  21B3         	fcall	_EUSART_Initialize
  9640  09F1  0008               	return
  9641  09F2                     __end_of_SYSTEM_Initialize:	
  9642                           
  9643                           	psect	text32
  9644  0983                     __ptext32:	
  9645 ;; *************** function _WDT_Initialize *****************
  9646 ;; Defined at:
  9647 ;;		line 90 in file "mcc_generated_files/mcc.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; This function calls:
  9668 ;;		Nothing
  9669 ;; This function is called by:
  9670 ;;		_SYSTEM_Initialize
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _WDT_Initialize
  9676  0983                     _WDT_Initialize:	
  9677                           
  9678                           ;mcc.c: 93: WDTCON = 0x16;
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _WDT_Initialize: [wreg]
  9682  0983  3016               	movlw	22
  9683  0984  0021               	movlb	1	; select bank1
  9684  0985  0097               	movwf	23	;volatile
  9685  0986  0008               	return
  9686  0987                     __end_of_WDT_Initialize:	
  9687                           
  9688                           	psect	text33
  9689  0999                     __ptext33:	
  9690 ;; *************** function _SPI_Initialize *****************
  9691 ;; Defined at:
  9692 ;;		line 63 in file "mcc_generated_files/spi.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;		None
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:        0 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_SYSTEM_Initialize
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function _SPI_Initialize
  9721  0999                     _SPI_Initialize:	
  9722                           
  9723                           ;spi.c: 68: SSP1STAT = 0x40;
  9724                           
  9725                           ;incstack = 0
  9726                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  9727  0999  3040               	movlw	64
  9728  099A  0024               	movlb	4	; select bank4
  9729  099B  0094               	movwf	20	;volatile
  9730                           
  9731                           ;spi.c: 71: SSP1CON1 = 0x20;
  9732  099C  3020               	movlw	32
  9733  099D  0095               	movwf	21	;volatile
  9734                           
  9735                           ;spi.c: 74: SSP1ADD = 0x00;
  9736  099E  0192               	clrf	18	;volatile
  9737  099F  0008               	return
  9738  09A0                     __end_of_SPI_Initialize:	
  9739                           
  9740                           	psect	text34
  9741  0A16                     __ptext34:	
  9742 ;; *************** function _PIN_MANAGER_Initialize *****************
  9743 ;; Defined at:
  9744 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, status,2
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        0 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; This function calls:
  9765 ;;		Nothing
  9766 ;; This function is called by:
  9767 ;;		_SYSTEM_Initialize
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function _PIN_MANAGER_Initialize
  9773  0A16                     _PIN_MANAGER_Initialize:	
  9774                           
  9775                           ;pin_manager.c: 57: LATA = 0x10;
  9776                           
  9777                           ;incstack = 0
  9778                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9779  0A16  3010               	movlw	16
  9780  0A17  0022               	movlb	2	; select bank2
  9781  0A18  008C               	movwf	12	;volatile
  9782                           
  9783                           ;pin_manager.c: 58: LATC = 0x00;
  9784  0A19  018E               	clrf	14	;volatile
  9785                           
  9786                           ;pin_manager.c: 63: TRISA = 0x2F;
  9787  0A1A  302F               	movlw	47
  9788  0A1B  0021               	movlb	1	; select bank1
  9789  0A1C  008C               	movwf	12	;volatile
  9790                           
  9791                           ;pin_manager.c: 64: TRISC = 0x32;
  9792  0A1D  3032               	movlw	50
  9793  0A1E  008E               	movwf	14	;volatile
  9794                           
  9795                           ;pin_manager.c: 69: ANSELC = 0x00;
  9796  0A1F  0023               	movlb	3	; select bank3
  9797  0A20  018E               	clrf	14	;volatile
  9798                           
  9799                           ;pin_manager.c: 70: ANSELA = 0x07;
  9800  0A21  3007               	movlw	7
  9801  0A22  008C               	movwf	12	;volatile
  9802                           
  9803                           ;pin_manager.c: 75: WPUA = 0x00;
  9804  0A23  0024               	movlb	4	; select bank4
  9805  0A24  018C               	clrf	12	;volatile
  9806                           
  9807                           ;pin_manager.c: 76: WPUC = 0x30;
  9808  0A25  3030               	movlw	48
  9809  0A26  008E               	movwf	14	;volatile
  9810                           
  9811                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  9812  0A27  0021               	movlb	1	; select bank1
  9813  0A28  1395               	bcf	21,7	;volatile
  9814                           
  9815                           ;pin_manager.c: 83: APFCON1 = 0x00;
  9816  0A29  0022               	movlb	2	; select bank2
  9817  0A2A  019E               	clrf	30	;volatile
  9818                           
  9819                           ;pin_manager.c: 84: APFCON0 = 0x00;
  9820  0A2B  019D               	clrf	29	;volatile
  9821  0A2C  0008               	return
  9822  0A2D                     __end_of_PIN_MANAGER_Initialize:	
  9823                           
  9824                           	psect	text35
  9825  0992                     __ptext35:	
  9826 ;; *************** function _OSCILLATOR_Initialize *****************
  9827 ;; Defined at:
  9828 ;;		line 80 in file "mcc_generated_files/mcc.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;		None
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;		None
  9833 ;; Return value:  Size  Location     Type
  9834 ;;                  1    wreg      void 
  9835 ;; Registers used:
  9836 ;;		wreg, status,2
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;Total ram usage:        0 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; This function calls:
  9849 ;;		Nothing
  9850 ;; This function is called by:
  9851 ;;		_SYSTEM_Initialize
  9852 ;; This function uses a non-reentrant model
  9853 ;;
  9854                           
  9855                           
  9856                           ;psect for function _OSCILLATOR_Initialize
  9857  0992                     _OSCILLATOR_Initialize:	
  9858                           
  9859                           ;mcc.c: 83: OSCCON = 0x60;
  9860                           
  9861                           ;incstack = 0
  9862                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9863  0992  3060               	movlw	96
  9864  0993  0021               	movlb	1	; select bank1
  9865  0994  0099               	movwf	25	;volatile
  9866                           
  9867                           ;mcc.c: 85: OSCTUNE = 0x00;
  9868  0995  0198               	clrf	24	;volatile
  9869                           
  9870                           ;mcc.c: 87: BORCON = 0x00;
  9871  0996  0022               	movlb	2	; select bank2
  9872  0997  0196               	clrf	22	;volatile
  9873  0998  0008               	return
  9874  0999                     __end_of_OSCILLATOR_Initialize:	
  9875                           
  9876                           	psect	text36
  9877  09B3                     __ptext36:	
  9878 ;; *************** function _EUSART_Initialize *****************
  9879 ;; Defined at:
  9880 ;;		line 53 in file "mcc_generated_files/eusart.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, status,2
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;Total ram usage:        0 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; This function calls:
  9901 ;;		Nothing
  9902 ;; This function is called by:
  9903 ;;		_SYSTEM_Initialize
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           
  9908                           ;psect for function _EUSART_Initialize
  9909  09B3                     _EUSART_Initialize:	
  9910                           
  9911                           ;eusart.c: 58: BAUDCON = 0x08;
  9912                           
  9913                           ;incstack = 0
  9914                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9915  09B3  3008               	movlw	8
  9916  09B4  0023               	movlb	3	; select bank3
  9917  09B5  009F               	movwf	31	;volatile
  9918                           
  9919                           ;eusart.c: 61: RCSTA = 0x90;
  9920  09B6  3090               	movlw	144
  9921  09B7  009D               	movwf	29	;volatile
  9922                           
  9923                           ;eusart.c: 64: TXSTA = 0x24;
  9924  09B8  3024               	movlw	36
  9925  09B9  009E               	movwf	30	;volatile
  9926                           
  9927                           ;eusart.c: 67: SPBRGL = 0x33;
  9928  09BA  3033               	movlw	51
  9929  09BB  009B               	movwf	27	;volatile
  9930                           
  9931                           ;eusart.c: 70: SPBRGH = 0x00;
  9932  09BC  019C               	clrf	28	;volatile
  9933  09BD  0008               	return
  9934  09BE                     __end_of_EUSART_Initialize:	
  9935                           
  9936                           	psect	text37
  9937  09A9                     __ptext37:	
  9938 ;; *************** function _EUSART_Read *****************
  9939 ;; Defined at:
  9940 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;		None
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;		None
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      unsigned char 
  9947 ;; Registers used:
  9948 ;;		wreg
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;Total ram usage:        0 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; This function calls:
  9961 ;;		Nothing
  9962 ;; This function is called by:
  9963 ;;		_main
  9964 ;;		_getch
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           
  9969                           ;psect for function _EUSART_Read
  9970  09A9                     _EUSART_Read:	
  9971  09A9                     l51:	
  9972                           ;eusart.c: 78: {
  9973                           
  9974                           ;eusart.c: 77: while(!PIR1bits.RCIF)
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _EUSART_Read: [wreg]
  9978                           
  9979  09A9  0020               	movlb	0	; select bank0
  9980  09AA  1E91               	btfss	17,5	;volatile
  9981  09AB  29A9               	goto	l51
  9982                           
  9983                           ;eusart.c: 79: }
  9984                           ;eusart.c: 82: if(1 == RCSTAbits.OERR)
  9985  09AC  0023               	movlb	3	; select bank3
  9986  09AD  1C9D               	btfss	29,1	;volatile
  9987  09AE  29B1               	goto	l2790
  9988                           
  9989                           ;eusart.c: 83: {
  9990                           ;eusart.c: 86: RCSTAbits.CREN = 0;
  9991  09AF  121D               	bcf	29,4	;volatile
  9992                           
  9993                           ;eusart.c: 87: RCSTAbits.CREN = 1;
  9994  09B0  161D               	bsf	29,4	;volatile
  9995  09B1                     l2790:	
  9996                           
  9997                           ;eusart.c: 88: }
  9998                           ;eusart.c: 90: return RCREG;
  9999  09B1  0819               	movf	25,w	;volatile
 10000  09B2  0008               	return
 10001  09B3                     __end_of_EUSART_Read:	
 10002                           
 10003                           	psect	text38
 10004  0A61                     __ptext38:	
 10005 ;; *************** function _DATAEE_WriteByte *****************
 10006 ;; Defined at:
 10007 ;;		line 186 in file "mcc_generated_files/memory.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  bAdd            1    wreg     unsigned char 
 10010 ;;  bData           1    0[COMMON] unsigned char 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  bAdd            1    1[COMMON] unsigned char 
 10013 ;;  GIEBitValue     1    2[COMMON] unsigned char 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10023 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;Total ram usage:        3 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		_main
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           
 10037                           ;psect for function _DATAEE_WriteByte
 10038  0A61                     _DATAEE_WriteByte:	
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 10042                           ;DATAEE_WriteByte@bAdd stored from wreg
 10043  0A61  00F1               	movwf	DATAEE_WriteByte@bAdd
 10044                           
 10045                           ;memory.c: 188: uint8_t GIEBitValue = 0;
 10046  0A62  01F2               	clrf	DATAEE_WriteByte@GIEBitValue
 10047                           
 10048                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
 10049  0A63  0871               	movf	DATAEE_WriteByte@bAdd,w
 10050  0A64  0023               	movlb	3	; select bank3
 10051  0A65  0091               	movwf	17	;volatile
 10052                           
 10053                           ;memory.c: 191: EEDATL = bData;
 10054  0A66  0870               	movf	DATAEE_WriteByte@bData,w
 10055  0A67  0093               	movwf	19	;volatile
 10056                           
 10057                           ;memory.c: 192: EECON1bits.EEPGD = 0;
 10058  0A68  1395               	bcf	21,7	;volsfr
 10059                           
 10060                           ;memory.c: 193: EECON1bits.CFGS = 0;
 10061  0A69  1315               	bcf	21,6	;volsfr
 10062                           
 10063                           ;memory.c: 194: EECON1bits.WREN = 1;
 10064  0A6A  1515               	bsf	21,2	;volsfr
 10065                           
 10066                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
 10067  0A6B  3000               	movlw	0
 10068  0A6C  1B8B               	btfsc	11,7	;volatile
 10069  0A6D  3001               	movlw	1
 10070  0A6E  00F2               	movwf	DATAEE_WriteByte@GIEBitValue
 10071                           
 10072                           ;memory.c: 197: INTCONbits.GIE = 0;
 10073  0A6F  138B               	bcf	11,7	;volatile
 10074                           
 10075                           ;memory.c: 198: EECON2 = 0x55;
 10076  0A70  3055               	movlw	85
 10077  0A71  0096               	movwf	22	;volsfr
 10078                           
 10079                           ;memory.c: 199: EECON2 = 0xAA;
 10080  0A72  30AA               	movlw	170
 10081  0A73  0096               	movwf	22	;volsfr
 10082                           
 10083                           ;memory.c: 200: EECON1bits.WR = 1;
 10084  0A74  1495               	bsf	21,1	;volsfr
 10085  0A75                     l184:	
 10086                           ;memory.c: 203: {
 10087                           
 10088                           ;memory.c: 202: while (EECON1bits.WR)
 10089                           
 10090  0A75  1895               	btfsc	21,1	;volsfr
 10091  0A76  2A75               	goto	l184
 10092                           
 10093                           ;memory.c: 204: }
 10094                           ;memory.c: 206: EECON1bits.WREN = 0;
 10095  0A77  1115               	bcf	21,2	;volsfr
 10096                           
 10097                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
 10098  0A78  0C72               	rrf	DATAEE_WriteByte@GIEBitValue,w
 10099  0A79  1C03               	skipc
 10100  0A7A  138B               	bcf	11,7	;volatile
 10101  0A7B  1803               	skipnc
 10102  0A7C  178B               	bsf	11,7	;volatile
 10103  0A7D  0008               	return
 10104  0A7E                     __end_of_DATAEE_WriteByte:	
 10105                           
 10106                           	psect	text39
 10107  09C9                     __ptext39:	
 10108 ;; *************** function _DATAEE_ReadByte *****************
 10109 ;; Defined at:
 10110 ;;		line 210 in file "mcc_generated_files/memory.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;  bAdd            1    wreg     unsigned char 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  bAdd            1    0[COMMON] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      unsigned char 
 10117 ;; Registers used:
 10118 ;;		wreg
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;Total ram usage:        1 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_main
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           
 10138                           ;psect for function _DATAEE_ReadByte
 10139  09C9                     _DATAEE_ReadByte:	
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in _DATAEE_ReadByte: [wreg]
 10143                           ;DATAEE_ReadByte@bAdd stored from wreg
 10144  09C9  00F0               	movwf	DATAEE_ReadByte@bAdd
 10145                           
 10146                           ;memory.c: 212: EEADRL = (uint8_t)(bAdd & 0x0ff);
 10147  09CA  0870               	movf	DATAEE_ReadByte@bAdd,w
 10148  09CB  0023               	movlb	3	; select bank3
 10149  09CC  0091               	movwf	17	;volatile
 10150                           
 10151                           ;memory.c: 213: EECON1bits.CFGS = 0;
 10152  09CD  1315               	bcf	21,6	;volsfr
 10153                           
 10154                           ;memory.c: 214: EECON1bits.EEPGD = 0;
 10155  09CE  1395               	bcf	21,7	;volsfr
 10156                           
 10157                           ;memory.c: 215: EECON1bits.RD = 1;
 10158  09CF  1415               	bsf	21,0	;volsfr
 10159                           
 10160                           ;memory.c: 216: __nop();
 10161  09D0  0000               	nop
 10162                           
 10163                           ;memory.c: 217: __nop();
 10164  09D1  0000               	nop
 10165                           
 10166                           ;memory.c: 219: return (EEDATL);
 10167  09D2  0023               	movlb	3	; select bank3
 10168  09D3  0813               	movf	19,w	;volatile
 10169  09D4  0008               	return
 10170  09D5                     __end_of_DATAEE_ReadByte:	
 10171  007E                     btemp	set	126	;btemp
 10172  007E                     wtemp0	set	126


Data Sizes:
    Strings     1230
    Constant    34
    Data        0
    BSS         41
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     32      69
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    handler$1	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 22
		 -> main@buf(BANK1[22]), 

    printf$780	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_67(CODE[17]), STR_66(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_65(CODE[7]), printf@c(BANK0[1]), can_send@n(BANK0[1]), receive@rx_buf(BANK0[15]), 
		 -> txf_clear@n(BANK0[1]), STR_11(CODE[21]), main@buf(BANK1[22]), slcan_send@data_buf(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_64(CODE[5]), STR_63(CODE[15]), STR_62(CODE[15]), STR_61(CODE[2]), 
		 -> STR_60(CODE[16]), STR_59(CODE[16]), STR_58(CODE[2]), STR_57(CODE[16]), 
		 -> STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[2]), STR_53(CODE[12]), 
		 -> STR_52(CODE[12]), STR_51(CODE[12]), STR_50(CODE[2]), STR_49(CODE[12]), 
		 -> STR_48(CODE[12]), STR_47(CODE[5]), STR_46(CODE[5]), STR_45(CODE[44]), 
		 -> STR_44(CODE[44]), STR_43(CODE[5]), STR_42(CODE[13]), STR_41(CODE[13]), 
		 -> STR_40(CODE[18]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[20]), 
		 -> STR_36(CODE[14]), STR_35(CODE[14]), STR_34(CODE[14]), STR_33(CODE[15]), 
		 -> STR_32(CODE[16]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[23]), 
		 -> STR_28(CODE[21]), STR_27(CODE[15]), STR_26(CODE[22]), STR_25(CODE[44]), 
		 -> STR_24(CODE[57]), STR_23(CODE[26]), STR_22(CODE[21]), STR_21(CODE[29]), 
		 -> STR_20(CODE[38]), STR_19(CODE[25]), STR_18(CODE[42]), STR_17(CODE[38]), 
		 -> STR_16(CODE[58]), STR_15(CODE[54]), STR_14(CODE[59]), STR_13(CODE[51]), 
		 -> STR_12(CODE[45]), STR_10(CODE[36]), STR_9(CODE[3]), STR_8(CODE[4]), 
		 -> STR_7(CODE[2]), STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[7]), 
		 -> STR_3(CODE[2]), STR_2(CODE[5]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    atosid@ascii	PTR unsigned char  size(1) Largest target is 22
		 -> main@buf(BANK1[22]), 

    can_send@data_buf	PTR unsigned char  size(1) Largest target is 22
		 -> main@buf(BANK1[22]), slcan_send@data_buf(BANK0[8]), 

    receive@pbuf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    can_init@receive_handler	PTR void  size(2) Largest target is 1
		 -> receive_handler(), 

    handler	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), receive_handler(), 

    SPI_exchange@buf	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    receive_handler@buf	PTR unsigned char  size(1) Largest target is 15
		 -> receive@rx_buf(BANK0[15]), 

    slcan_send@ascii_data	PTR unsigned char  size(1) Largest target is 22
		 -> main@buf(BANK1[22]), 

    slcan_send@pbuf	PTR unsigned char  size(1) Largest target is 22
		 -> main@buf(BANK1[22]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 16
		 -> receive@rx_buf(BANK0[15]), buf(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _can_send->_SPI_exchange
    _atosid->_atoui8
    _can_status_check->_SPI_exchange
    _txf_clear->_SPI_exchange
    _receive->_SPI_exchange
    _can_set_mask->_SPI_exchange
    _can_init->_SPI_exchange
    _read_register->_SPI_exchange
    _can_baudrate->_SPI_exchange
    _can_ope_mode->_SPI_exchange
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abort_pending_transmissions->_SPI_exchange
    _SPI_exchange->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_can_status_check
    _slcan_send->_can_send
    _can_send->_printf
    _can_status_check->_receive
    _receive->_receive_handler
    _receive_handler->_printf
    _can_set_mask->_can_ope_mode
    _can_init->_can_ope_mode
    _can_dump_registers->_printf
    _can_dump_masks_and_filters->_printf
    _can_baudrate->_can_ope_mode
    _can_abort->_can_ope_mode
    _can_ope_mode->_printf
    _printf->_read_register

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0  137524
                                             73 BANK0      2     2      0
                                              0 BANK1     32    32      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                        _EUSART_Read
                  _SYSTEM_Initialize
                               _atoi
                          _can_abort
                       _can_baudrate
         _can_dump_masks_and_filters
                 _can_dump_registers
                           _can_init
                   _can_logging_mode
                       _can_ope_mode
                           _can_send
                       _can_set_mask
                        _can_set_sid
                   _can_status_check
                             _printf
                         _slcan_send
 ---------------------------------------------------------------------------------
 (1) _slcan_send                                          19    19      0   10954
                                             46 BANK0     19    19      0
                             _atosid
                             _atoui8
                           _can_send
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (2) _can_send                                            11    10      1    9752
                                             35 BANK0     11    10      1
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _atosid                                              17    15      2     368
                                              3 COMMON     8     6      2
                                              0 BANK0      9     9      0
                             _atoui8
 ---------------------------------------------------------------------------------
 (2) _atoui8                                               3     3      0     180
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _can_status_check                                     4     4      0   27703
                                             69 BANK0      4     4      0
                       _SPI_exchange
                             _printf
                            _receive
                          _txf_clear
 ---------------------------------------------------------------------------------
 (2) _txf_clear                                            5     5      0    2408
                                              0 BANK0      5     5      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (2) _receive                                             26    26      0   16282
                                             43 BANK0     26    26      0
                   Absolute function *
                       _SPI_exchange
                             _printf
                    _receive_handler *
 ---------------------------------------------------------------------------------
 (3) _receive_handler                                      8     4      4    6960
                                             35 BANK0      8     4      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _can_set_mask                                        14    11      3   20866
                                             39 BANK0     14    11      3
                       _SPI_exchange
        _abort_pending_transmissions
                       _can_ope_mode
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_logging_mode                                     3     2      1     236
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _can_init                                             3     1      2   11653
                                             39 BANK0      3     1      2
                       _SPI_exchange
                       _can_ope_mode
                        _can_set_sid
 ---------------------------------------------------------------------------------
 (2) _can_set_sid                                          7     5      2     282
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _can_dump_registers                                   2     2      0    8879
                                             35 BANK0      2     2      0
                             _printf
                      _read_register
 ---------------------------------------------------------------------------------
 (2) _read_register                                        2     2      0    2360
                                              0 BANK0      2     2      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (1) _can_dump_masks_and_filters                          15    15      0    7013
                                             35 BANK0     15    15      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _can_baudrate                                         5     5      0   11353
                                             39 BANK0      5     5      0
                       _SPI_exchange
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (1) _can_abort                                            2     2      0   11331
                                             39 BANK0      2     2      0
        _abort_pending_transmissions
                       _can_ope_mode
 ---------------------------------------------------------------------------------
 (2) _can_ope_mode                                         4     4      0    8947
                                             35 BANK0      4     4      0
                       _SPI_exchange
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              37    23     14    6519
                                              2 BANK0     33    19     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                      _read_register (ARG)
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _abort_pending_transmissions                          3     3      0    2361
                                              0 BANK0      3     3      0
                       _SPI_exchange
 ---------------------------------------------------------------------------------
 (3) _SPI_exchange                                         6     5      1    2338
                                              8 COMMON     6     5      1
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     557
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     734
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
   _can_abort
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_baudrate
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
   _can_dump_masks_and_filters
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_dump_registers
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _read_register
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _can_init
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid
   _can_logging_mode
   _can_ope_mode
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_send
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_mask
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _abort_pending_transmissions
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
     _can_ope_mode
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
   _can_set_sid
   _can_status_check
     _SPI_exchange
       _SPI_Exchange8bitBuffer
         _SPI_Exchange8bit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
       _read_register (ARG)
         _SPI_exchange
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
     _receive
       Absolute function(Fake) *
       _SPI_exchange *
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
       _receive_handler *
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
           _read_register (ARG)
             _SPI_exchange
               _SPI_Exchange8bitBuffer
                 _SPI_Exchange8bit
     _txf_clear
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART_Write
     _read_register (ARG)
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
   _slcan_send
     _atosid
       _atoui8
     _atoui8
     _can_send
       _SPI_exchange
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
         _read_register (ARG)
           _SPI_exchange
             _SPI_Exchange8bitBuffer
               _SPI_Exchange8bit
     _can_set_sid

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     20      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 05:52:07 2018

                          _SPI_Initialize 0999                               __CFG_CP$OFF 0000  
                        ?_receive_handler 0043                                        l51 09A9  
                                      l58 0005                   ?_SPI_Exchange8bitBuffer 0071  
                                      _nm 14EC                       ___wmul@multiplicand 0072  
                   __size_of_SPI_exchange 0015                               __CFG_LVP$ON 0000  
                                     l113 09A5                                       l430 0C41  
                                     l406 024A                                       l184 0A75  
                                     l432 0C57                                       l433 0C52  
                                     l409 025A                                       l530 06CF  
                                     l426 0C35                                       l507 06A9  
                                     l435 0C5B                                       l275 039C  
                                     l508 0615                                       l276 039E  
                                     l509 0616                                       l437 0C5F  
                                     l429 0C46                                       l535 06F1  
                                     l539 0728                                       l564 07EF  
                                     l495 05CB                                       l648 0A4E  
                __end_of_can_status_check 0C6C                              __CFG_CPD$OFF 0000  
                                     _abc 14E6                                       _buf 00B4  
                                     _sid 00B2                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                   can_logging_mode@debug 0072                              ?_EUSART_Read 0070  
                                    l2310 0BD1                                      l2320 0BFB  
                                    l2400 0685                                      l3040 0F1E  
                                    l3016 0EBB                                      l2242 0A48  
                                    l2314 0BDF                                      l2330 0C14  
                                    l3034 0F0F                                      l3210 047C  
                                    l2236 09E1                                      l2324 0BFF  
                                    l2316 0BF2                                      l2412 06C3  
                                    l2340 05C6                                      l3060 004E  
                                    l3028 0EE7                                      l3204 046A  
                                    l3116 038E                                      l2318 0BF6  
                                    l2510 0ADE                                      l3230 04D2  
                                    l3222 04BA                                      l3142 03EB  
                                    l3126 03BD                                      l2328 0C10  
                                    l2272 0032                                      l2264 0014  
                                    l2440 071C                                      l2360 0618  
                                    l2352 05E6                                      l3072 00A7  
                                    l2504 0AD4                                      l3224 04BE  
                                    l3240 0589                                      l2266 0020  
                                    l2290 0B00                                      l2450 0747  
                                    l2346 05D0                                      l3090 0105  
                                    l2530 0E2C                                      l3226 04C2  
                                    l3218 04A3                                      l3170 042E  
                                    l3154 0401                                      l3234 0557  
                                    l3138 03DF                                      l2276 003B  
                                    l2372 062D                                      l2348 05D9  
                                    l2532 0E4A                                      l2516 0AEA  
                                    l3228 04C6                                      l3180 0440  
                                    l3164 0420                                      l3148 03F2  
                                    l3236 057F                                      l2294 0B0C  
                                    l2462 0760                                      l2438 0713  
                                    l2390 0671                                      l2382 064A  
                                    l2374 063B                                      l3078 00AC  
                                    l2550 0E93                                      l2534 0E51  
                                    l3158 0417                                      l3238 0588  
                                    l2288 0AF4                                      l2464 0764  
                                    l2472 0779                                      l2456 0751  
                                    l2448 0744                                      l2384 0659  
                                    l2368 062B                                      l2552 0E9A  
                                    l2632 0256                                      l2640 0268  
                                    l3184 0449                                      l3176 043A  
                                    l2298 0B15                                      l2482 07C6  
                                    l2490 07D9                                      l2474 077F  
                                    l2394 067C                                      l2378 0648  
                                    l2714 0C94                                      l2538 0E64  
                                    l2626 0244                                      l3194 045B  
                                    l2476 07A4                                      l2492 07DD  
                                    l2468 0771                                      l2388 0666  
                                    l2548 0E75                                      l2660 02B5  
                                    l3196 045D                                      l3188 0450  
                                    l2494 05AA                                      l2662 028B  
                                    l2638 0266                                      l2680 0303  
                                    l2664 02BB                                      l2770 0FE8  
                                    l2940 0D22                                      l2932 0C6A  
                                    l2924 0C65                                      l2692 033C  
                                    l2844 0CE8                                      l2790 09B1  
                                    l2950 0D44                                      l2942 0D2E  
                                    l2846 0D19                                      l2960 0D74  
                                    l2938 0D29                                      l2956 0D4B  
                                    l2966 0D83                                      l2958 0D4F  
                                    STR_1 14B1                                      STR_2 14DE  
                                    STR_3 14DC                                      STR_4 14C0  
                                    STR_5 14CD                                      STR_6 14D3  
                                    STR_7 14DC                                      STR_8 1340  
                                    STR_9 14E9                                      _LATA 010C  
                                    _LATC 010E                                      u2304 0346  
                                    u2305 0345                                      u1605 0017  
                                    u1625 0021                                      u1705 0B0D  
                                    u2185 0A8F                                      u2425 0CFD  
                                    u1635 002B                                      u2364 0B23  
                                    u1565 0A4F                                      u1645 0033  
                                    u2605 0ECD                                      u2365 0B22  
                                    u1575 0A54                                      u2375 0F6D  
                                    u1675 0AF7                                      u1835 0641  
                                    u1925 070C                                      u1695 0B06  
                                    u2665 0068                                      u1965 0737  
                                    u1895 06EA                                      u2695 00C6  
                                    u2947 037A                                      u2957 0D8C  
                                    u2967 0DAC                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                               atoui8@ascii 0072  
                                    _atoi 0D21                                      _main 0369  
                                    _mode 006B                           can_baudrate@bpr 0049  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                             atoui8@minus 0071                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 0002  
                  __end_of_SPI_Initialize 09A0                              _SPI_exchange 0A01  
                           __CFG_MCLRE$ON 0000                          can_send@data_buf 004B  
              __end_of_can_dump_registers 021C            __end_of_SPI_Exchange8bitBuffer 0C16  
               __size_of_DATAEE_WriteByte 001D                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0007             __end_of_OSCILLATOR_Initialize 0999  
                                   ?_atoi 0076                                     ?_main 0070  
                                   STR_10 123E                                     STR_11 1309  
                                   STR_20 1218                                     STR_12 1117  
                                   STR_21 1262                                     STR_13 10E4  
                                   STR_30 1366                                     STR_22 12F4  
                                   STR_14 1000                                     STR_31 1388  
                                   STR_23 127F                                     STR_15 10AE  
                                   STR_32 13AA                                     STR_40 1332  
                                   STR_24 1075                                     STR_16 103B  
                                   STR_41 146E                                     STR_33 140A  
                                   STR_17 11F2                                     STR_25 119C  
                           __CFG_WDTE$OFF 0000                                     STR_50 14DC  
                                   STR_42 1461                                     STR_34 1453  
                                   STR_26 12C9                                     STR_18 11C8  
                                   STR_43 14D9                                     STR_51 147B  
                                   STR_35 1445                                     STR_27 1428  
                                   STR_19 1299                                     STR_52 1487  
                                   STR_36 1437                                     STR_60 13DA  
                                   STR_28 12DF                                     STR_44 1170  
                                   STR_61 14DC                                     STR_53 1493  
                                   STR_37 131E                                     STR_29 12B2  
                                   STR_45 1144                                     STR_54 14DC  
                                   STR_46 14D9                                     STR_62 1419  
                                   STR_38 1377                                     STR_47 14D9  
                                   STR_63 1428                                     STR_55 13CA  
                                   STR_39 1399                                     STR_64 14D9  
                                   STR_48 136B                                     STR_56 13EA  
                                   STR_49 138D                                     STR_65 14B9  
                                   STR_57 13FA                                     STR_58 14DC  
                                   STR_66 1344                                     STR_59 13BA  
                                   STR_67 1355                      __size_of_can_set_sid 0024  
                             atosid@ascii 0028                           __end_of___lwdiv 0040  
                         __end_of___lwmod 0B1A             can_status_check@bytes_written 0067  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                         SPI_exchange@buf 007D                           SPI_exchange@len 0078  
                         _DATAEE_ReadByte 09C9                           __end_of_dpowers 14A9  
                          _WDT_Initialize 0983                           __end_of_isdigit 09E3  
                         __end_of_receive 1000                                     atoi@a 007B  
                        can_baudrate@mask 004A                                     atoi@s 007D  
                                   _putch 0987                                     main@c 00E1  
                                   main@n 00E0              ?_abort_pending_transmissions 0070  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                             receive@rx_buf 0051  
                         ?_SPI_Initialize 0070       __size_of_can_dump_masks_and_filters 00CC  
                         __initialization 07F0                     __size_of_can_baudrate 0033  
                            __end_of_atoi 0D88                              __end_of_main 05A5  
                           main@echo_back 00DF                            ??_EUSART_Write 0070  
                  can_status_check@status 0068                                    ??_atoi 0078  
                                  ??_main 0069                     can_set_mask@mask_sidh 0053  
                   can_set_mask@mask_sidl 0054                   can_logging_mode@verbose 0070  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 0987  
                           can_set_mask@n 0047                  __end_of_SPI_Exchange8bit 09A9  
                   __size_of_can_ope_mode 0057                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _EEDATH 0194  
                                  _EEDATL 0193                                    _EECON2 0196  
                   __size_of_can_set_mask 00A5                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELC 018E  
                                  _BORCON 0116                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                          __end_of_can_init 0E13  
                            _can_baudrate 0B48                          __end_of_can_send 0369  
                        receive_handler@i 004A                            __CFG_PWRTE$OFF 0000  
                                  ___wmul 0A46                             _output_format 006D  
                          __CFG_STVREN$ON 0000                                 ??___lwdiv 0074  
                               ??___lwmod 007C                                    _atoui8 0AC8  
                                  _atosid 0B7B                                    _printf 05A5  
                            _can_ope_mode 0C6C                   __end_of_DATAEE_ReadByte 09D5  
                            _can_set_mask 0EA6                                 ??_isdigit 0070  
                               ??_receive 004B                           ?_WDT_Initialize 0070  
               __size_of_can_logging_mode 000B                          __end_of_rxfnsidh 14CD  
                        __end_of_txbnsidh 14E6                          __end_of_rxmnsidh 14F0  
                    __size_of_EUSART_Read 000A                         _SYSTEM_Initialize 09E3  
               SPI_exchange@bytes_written 007C                   __end_of__initialization 07FD  
                  __size_of_read_register 0019                        ?_SYSTEM_Initialize 0070  
                      __size_of_can_abort 000F                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0070                          _DATAEE_WriteByte 0A61  
                          can_send@status 004A      __size_of_abort_pending_transmissions 0026  
                           __end_of_putch 098C                               receive@pbuf 0060  
      __end_of_can_dump_masks_and_filters 010C                _can_dump_masks_and_filters 0040  
                              __end_of_nm 14EE                         ?_can_status_check 0070  
                          _OPTION_REGbits 0095                        ??_can_status_check 0065  
                  can_abort@bytes_written 0048                 __end_of_SYSTEM_Initialize 09F2  
                                 ??_putch 0071                                __pbssBANK0 006B  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 000C  
                        can_set_mask@mask 0048                                __pmaintext 0369  
                                 ?___wmul 0070                            slcan_send@pbuf 005F  
                                 ?_atoui8 0070                                   ?_atosid 0073  
                                 _BAUDCON 019F                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0022  
                           _read_register 0A2D                          ?_DATAEE_ReadByte 0070  
                               ?_can_init 0047                                 ?_can_send 0043  
                      _can_dump_registers 010C                  __size_of_receive_handler 0093  
                                 _OSCTUNE 0098                         __end_of_can_abort 0A01  
                                 _SSP1ADD 0212                                   _SSP1BUF 0211  
                     ?_can_dump_registers 0070                        __size_of_txf_clear 002E  
                        ??_SPI_Initialize 0070                      DATAEE_WriteByte@bAdd 0071  
                         __size_of___wmul 001B                      ??_can_dump_registers 0043  
                           ??_can_set_sid 0072                                   ___lwdiv 000C  
                                 ___lwmod 0AEE                           __size_of_atoui8 0026  
                         __size_of_atosid 004D                            ?_read_register 0070  
                             slcan_send@i 0060                               slcan_send@j 005D  
                                 _handler 00B0                                   __ptext1 0CC3  
                                 __ptext2 021C                                   __ptext3 0B7B  
                                 __ptext4 0AC8                                   __ptext5 0C16  
                                 __ptext6 0B1A                                   __ptext7 0F4B  
                                 __ptext8 0E13                                   __ptext9 0EA6  
                         __size_of_printf 024B                        slcan_send@data_buf 0052  
                       __end_of_hexpowers 14B1                                   _dpowers 149F  
                              ??_can_init 0049                     _OSCILLATOR_Initialize 0992  
                              ??_can_send 0044                                   _isdigit 09D5  
                                 _receive 0F4B                  ??_PIN_MANAGER_Initialize 0070  
                        _can_logging_mode 09BE                         ?_SPI_Exchange8bit 0070  
                                 main@cmd 00E2                    txf_clear@bytes_written 0023  
                                 main@buf 00C4                                   main@bpr 00DB  
              __size_of_SYSTEM_Initialize 000F                                   main@idx 00E3  
                                 main@sid 00DA                                   clrloop0 098D  
                                 atosid@a 0020                                   atosid@b 0022  
                                 atosid@c 0024                      end_of_initialization 07FD  
                      ??_SPI_Exchange8bit 0070                      SPI_Exchange8bit@data 0070  
                          _operation_mode 006F                         _EUSART_Initialize 09B3  
                              _slcan_send 0CC3                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0042  
                                 printf@f 0022                                _printf$780 0034  
                       __end_of_txf_clear 0B48                       ??_EUSART_Initialize 0070  
                        ??_WDT_Initialize 0070                       __end_of_can_set_sid 0AA2  
                        __CFG_FOSC$INTOSC 0000              ??_can_dump_masks_and_filters 0043  
                   __size_of_EUSART_Write 0008                  __end_of_DATAEE_WriteByte 0A7E  
                       ??_receive_handler 0047                 __end_of_EUSART_Initialize 09BE  
                             printf@width 0040                  ??_SPI_Exchange8bitBuffer 0073  
                              main@status 00DC  abort_pending_transmissions@bytes_written 0022  
                         ??_read_register 0020                            __end_of___wmul 0A61  
             ?_can_dump_masks_and_filters 0070                              _EUSART_Write 0004  
                          __end_of_atoui8 0AEE                            __end_of_atosid 0BC8  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 07F0  
                     start_initialization 07F0           __size_of_PIN_MANAGER_Initialize 0017  
                             __end_of_abc 14E9                          _can_set_mask$655 0050  
                           ??_EUSART_Read 0070       __end_of_abort_pending_transmissions 0AC8  
             _abort_pending_transmissions 0AA2                               putch@txData 0071  
               can_baudrate@bytes_written 004B               can_dump_masks_and_filters@h 004D  
             can_dump_masks_and_filters@i 0051               can_dump_masks_and_filters@l 004E  
             can_dump_masks_and_filters@m 004F                 __size_of_can_status_check 0056  
                     DATAEE_ReadByte@bAdd 0070                 can_ope_mode@bytes_written 0045  
           ??_abort_pending_transmissions 0020                             ?_SPI_exchange 0078  
                             ?_slcan_send 0070                                  ??___wmul 0074  
                                ??_atoui8 0070                                  ??_atosid 0075  
                           txf_clear@mask 0022                               _can_set_sid 0A7E  
                                ??_printf 0030                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00C4  
                     can_set_sid@can_node 0070                         read_register@addr 0021  
                       __size_of_can_init 008B                         __size_of_can_send 014D  
                              receive@dlc 0063             SPI_Exchange8bitBuffer@dataOut 0072  
                               _can_abort 09F2                __size_of_EUSART_Initialize 000B  
                     __end_of_EUSART_Read 09B3                                 __pnvBANK1 00E4  
                         can_set_mask@cmd 0052                            ??_SPI_exchange 0079  
         __size_of_SPI_Exchange8bitBuffer 004E                          ___lwdiv@dividend 0072  
                  _PIN_MANAGER_Initialize 0A16                           can_set_sid@sidh 0075  
                         can_set_sid@sidl 0076                             slcan_send@dlc 005C  
                __end_of_can_logging_mode 09C9                                  ?___lwdiv 0070  
                                ?___lwmod 0078                                  ?_isdigit 0070  
                                ?_receive 0070                                 can_send@i 004C  
                               can_send@n 004D                       __size_of_slcan_send 005E  
                               _hexpowers 14A9                          ___lwdiv@quotient 0075  
                __size_of_DATAEE_ReadByte 000C                            __size_of_putch 0005  
                    slcan_send@ascii_data 005E                                ?_can_abort 0070  
                           ?_can_baudrate 0070                            ___wmul@product 0074  
                                _LATAbits 010C                                  _LATCbits 010E  
                               clear_ram0 098C                                 _save_rxfn 00A0  
                               _save_rxmn 00AC                                  _PIR1bits 0011  
               __size_of_SPI_Exchange8bit 0009                                  _SSP1CON1 0215  
                                _SSP1STAT 0214               __size_of_can_dump_registers 0110  
                           ?_can_ope_mode 0070                         ___wmul@multiplier 0070  
                           ?_can_set_mask 0047                    _SPI_Exchange8bitBuffer 0BC8  
                         _receive_handler 0E13                                printf@flag 003F  
                              printf@prec 0037                                 _txf_clear 0B1A  
                   DATAEE_WriteByte@bData 0070                        receive_handler@dlc 0046  
                      receive_handler@buf 0045                        receive_handler@sid 0043  
                             _EUSART_Read 09A9                         ?_DATAEE_WriteByte 0070  
                          ??_can_baudrate 0047                               can_send@dlc 0043  
                             can_send@len 0048                        ??_DATAEE_WriteByte 0071  
                        _can_status_check 0C16                                _EECON1bits 0195  
                 __size_of_SPI_Initialize 0007                   ??_OSCILLATOR_Initialize 0070  
                          ??_can_ope_mode 0043                          __size_of___lwdiv 0034  
                        __size_of___lwmod 002C                            ??_can_set_mask 004A  
            SPI_Exchange8bitBuffer@dataIn 0076                                 receive@id 0061  
                             _isdigit$971 0070                      can_ope_mode@ope_mode 0046  
            SPI_Exchange8bitBuffer@bufLen 0071                                  _can_init 0D88  
                                _can_send 021C                                txf_clear@n 0024  
                              ?_txf_clear 0070                      __end_of_SPI_exchange 0A16  
                        __size_of_isdigit 000E                          __size_of_receive 00B5  
                         ___lwdiv@divisor 0070                              slcan_send@id 005A  
                         ___lwdiv@counter 0077                                  __ptext10 09BE  
                                __ptext11 0D88                                  __ptext20 0987  
                                __ptext12 0A7E                                  __ptext21 0004  
                                __ptext13 010C                                  __ptext30 0A46  
                                __ptext22 0AEE                                  __ptext14 0A2D  
                                __ptext31 09E3                                  __ptext23 000C  
                                __ptext15 0040                                  __ptext32 0983  
                                __ptext24 0AA2                                  __ptext16 0B48  
                                __ptext33 0999                                  __ptext25 0A01  
                                __ptext17 09F2                                  __ptext34 0A16  
                                __ptext26 0BC8                                  __ptext18 0C6C  
                                __ptext35 0992                                  __ptext27 09A0  
                                __ptext19 05A5                                  __ptext36 09B3  
                                __ptext28 0D21                                  __ptext37 09A9  
                                __ptext29 09D5                                  __ptext38 0A61  
                                __ptext39 09C9                              _SSP1CON1bits 0215  
             DATAEE_WriteByte@GIEBitValue 0072                               ??_can_abort 0047  
                           __size_of_atoi 0067                             __size_of_main 023C  
                       ??_DATAEE_ReadByte 0070                              ??_slcan_send 004E  
                                atoi@sign 007A                   __end_of_receive_handler 0EA6  
                            ?_can_set_sid 0070                                  _run_mode 00E4  
                               printf@idx 0036                                 printf@len 003A  
                               printf@val 003D                              _SSP1STATbits 0214  
                                main@mask 00DD                                  _rxfnsidh 14C7  
                   __end_of_read_register 0A46                                  _txbnsidh 14E3  
                                _rxmnsidh 14EE                                  atosid@id 0026  
                              _INTCONbits 000B                            __pstringtext10 1075  
                          __pstringtext11 10AE                            __pstringtext20 123E  
                          __pstringtext12 10E4                            __pstringtext21 1262  
                          __pstringtext13 1117                            __pstringtext30 1332  
                          __pstringtext22 127F                            __pstringtext14 1144  
                          __pstringtext31 1344                            __pstringtext23 1299  
                          __pstringtext15 1170                            __pstringtext40 13DA  
                          __pstringtext32 1355                            __pstringtext24 12B2  
                          __pstringtext16 119C                            __pstringtext41 13EA  
                          __pstringtext33 1366                            __pstringtext25 12C9  
                          __pstringtext17 11C8                            __pstringtext50 146E  
                          __pstringtext42 13FA                            __pstringtext34 1377  
                          __pstringtext26 12DF                            __pstringtext18 11F2  
                          __pstringtext51 147B                            __pstringtext43 140A  
                          __pstringtext35 1388                            __pstringtext27 12F4  
                          __pstringtext19 1218                            __pstringtext60 14DE  
                          __pstringtext52 1487                            __pstringtext44 1419  
                          __pstringtext36 1399                            __pstringtext28 1309  
                          __pstringtext61 14E9                            __pstringtext53 1493  
                          __pstringtext45 1428                            __pstringtext37 13AA  
                          __pstringtext29 131E                            __pstringtext62 0000  
                          __pstringtext54 14B1                            __pstringtext46 1437  
                          __pstringtext38 13BA                            __pstringtext55 14B9  
                          __pstringtext47 1445                            __pstringtext39 13CA  
                          __pstringtext56 14C0                            __pstringtext48 1453  
                          __pstringtext57 14CD                            __pstringtext49 1461  
                          __pstringtext58 14D3                            __pstringtext59 14D9  
                                isdigit@c 0071                        __end_of_slcan_send 0D21  
                 __size_of_WDT_Initialize 0004                                  receive@n 0064  
                        ___lwmod@dividend 007A                   ?_PIN_MANAGER_Initialize 0070  
                       __CFG_CLKOUTEN$OFF 0000        SPI_Exchange8bitBuffer@bytesWritten 0077  
                       receive@bytes_read 0050                          _SPI_Exchange8bit 09A0  
                   can_send@bytes_written 0049                                  printf@ap 003C  
                                printf@cp 0038                         ?_can_logging_mode 0070  
                 can_init@receive_handler 0047                        ??_can_logging_mode 0071  
                    __end_of_can_baudrate 0B7B                             __pstringtext1 149F  
                           __pstringtext2 14A9                             __pstringtext3 14C7  
                           __pstringtext4 14E3                             __pstringtext5 14E6  
                           __pstringtext6 14EC                             __pstringtext7 14EE  
                           __pstringtext8 1000                             __pstringtext9 103B  
                             ??_txf_clear 0020                           ___lwmod@divisor 0078  
                         ___lwmod@counter 007D                        EUSART_Write@txData 0070  
          __end_of_PIN_MANAGER_Initialize 0A2D                      __end_of_can_ope_mode 0CC3  
                    __end_of_can_set_mask 0F4B  
